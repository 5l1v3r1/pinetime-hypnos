
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000e60 	.word	0x20000e60
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001799 	.word	0x00001799
   8:	00004f49 	.word	0x00004f49
		if (fdtable[fd].obj == NULL) {
   c:	0000166d 	.word	0x0000166d
  10:	0000166d 	.word	0x0000166d
  14:	0000166d 	.word	0x0000166d
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	0000166d 	.word	0x0000166d
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	0000166d 	.word	0x0000166d
	errno = ENFILE;
  20:	0000166d 	.word	0x0000166d
	return -1;
  24:	0000166d 	.word	0x0000166d
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	0000166d 	.word	0x0000166d
  2c:	00001565 	.word	0x00001565
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	0000166d 	.word	0x0000166d
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	0000166d 	.word	0x0000166d
  38:	00001511 	.word	0x00001511
  3c:	00004f39 	.word	0x00004f39

00000040 <_irq_vector_table>:
  40:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
  60:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
  70:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
  80:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
  90:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
  a0:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
  b0:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
  c0:	00001759 00001759 00001759 00001759     Y...Y...Y...Y...
  d0:	00001759 00001759 00001759              Y...Y...Y...

Disassembly of section _TEXT_SECTION_NAME_2:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_IDLE_STACK_SIZE+0x1c>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_IDLE_STACK_SIZE+0x30>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_IDLE_STACK_SIZE+0x5e>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_IDLE_STACK_SIZE+0x7c>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_IDLE_STACK_SIZE+0xb8>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     21e:	f1a4 0401 	sub.w	r4, r4, #1
     222:	d1e9      	bne.n	1f8 <CONFIG_IDLE_STACK_SIZE+0xb8>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_IDLE_STACK_SIZE+0x38>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_CST816S_THREAD_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_CST816S_THREAD_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <__aeabi_dmul+0x1dc>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <__aeabi_dmul+0xb4>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <__aeabi_dmul+0xde>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <__aeabi_dmul+0x238>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <__aeabi_dmul+0x164>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <__aeabi_dmul+0x134>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <__aeabi_dmul+0x1c2>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <__aeabi_dmul+0x1a6>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <__aeabi_dmul+0x1c6>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <__aeabi_dmul+0x206>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <__aeabi_dmul+0x19c>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <__aeabi_dmul+0x24a>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <__aeabi_dmul+0x222>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <__aeabi_dmul+0x24a>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <__aeabi_dmul+0x234>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <__aeabi_dmul+0x24a>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <__aeabi_dmul+0xde>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <__aeabi_dmul+0xde>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <__aeabi_dmul+0xde>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <__aeabi_dmul+0x24a>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <__aeabi_dmul+0x24a>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <__aeabi_dmul+0x234>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <__aeabi_dmul+0x24a>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <__aeabi_dmul+0x1f8>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <__aeabi_dmul+0x24a>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <__aeabi_dmul+0x19c>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <__aeabi_dmul+0x234>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <__aeabi_dmul+0x1f8>
     87a:	e712      	b.n	6a2 <__aeabi_dmul+0x24a>

0000087c <__aeabi_uldivmod>:
     87c:	b953      	cbnz	r3, 894 <__aeabi_uldivmod+0x18>
     87e:	b94a      	cbnz	r2, 894 <__aeabi_uldivmod+0x18>
     880:	2900      	cmp	r1, #0
     882:	bf08      	it	eq
     884:	2800      	cmpeq	r0, #0
     886:	bf1c      	itt	ne
     888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     88c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     890:	f000 b80c 	b.w	8ac <__aeabi_idiv0>
     894:	f1ad 0c08 	sub.w	ip, sp, #8
     898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     89c:	f000 f808 	bl	8b0 <__udivmoddi4>
     8a0:	f8dd e004 	ldr.w	lr, [sp, #4]
     8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8a8:	b004      	add	sp, #16
     8aa:	4770      	bx	lr

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <__udivmoddi4>:
     8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
     8b6:	4615      	mov	r5, r2
     8b8:	4604      	mov	r4, r0
     8ba:	468e      	mov	lr, r1
     8bc:	461e      	mov	r6, r3
     8be:	2b00      	cmp	r3, #0
     8c0:	f040 80cc 	bne.w	a5c <__udivmoddi4+0x1ac>
     8c4:	428a      	cmp	r2, r1
     8c6:	fab2 fc82 	clz	ip, r2
     8ca:	d94c      	bls.n	966 <__udivmoddi4+0xb6>
     8cc:	f1bc 0f00 	cmp.w	ip, #0
     8d0:	d00b      	beq.n	8ea <__udivmoddi4+0x3a>
     8d2:	f1cc 0820 	rsb	r8, ip, #32
     8d6:	fa01 fe0c 	lsl.w	lr, r1, ip
     8da:	fa20 f808 	lsr.w	r8, r0, r8
     8de:	fa02 f50c 	lsl.w	r5, r2, ip
     8e2:	ea48 0e0e 	orr.w	lr, r8, lr
     8e6:	fa00 f40c 	lsl.w	r4, r0, ip
     8ea:	ea4f 4915 	mov.w	r9, r5, lsr #16
     8ee:	fa1f f885 	uxth.w	r8, r5
     8f2:	fbbe faf9 	udiv	sl, lr, r9
     8f6:	0c21      	lsrs	r1, r4, #16
     8f8:	fb09 e31a 	mls	r3, r9, sl, lr
     8fc:	fb0a fb08 	mul.w	fp, sl, r8
     900:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     904:	459b      	cmp	fp, r3
     906:	d92a      	bls.n	95e <__udivmoddi4+0xae>
     908:	18eb      	adds	r3, r5, r3
     90a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     90e:	d204      	bcs.n	91a <__udivmoddi4+0x6a>
     910:	459b      	cmp	fp, r3
     912:	d902      	bls.n	91a <__udivmoddi4+0x6a>
     914:	f1aa 0002 	sub.w	r0, sl, #2
     918:	442b      	add	r3, r5
     91a:	eba3 030b 	sub.w	r3, r3, fp
     91e:	b2a4      	uxth	r4, r4
     920:	fbb3 f2f9 	udiv	r2, r3, r9
     924:	fb09 3312 	mls	r3, r9, r2, r3
     928:	fb02 f808 	mul.w	r8, r2, r8
     92c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     930:	45a0      	cmp	r8, r4
     932:	d916      	bls.n	962 <__udivmoddi4+0xb2>
     934:	192c      	adds	r4, r5, r4
     936:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     93a:	d203      	bcs.n	944 <__udivmoddi4+0x94>
     93c:	45a0      	cmp	r8, r4
     93e:	d901      	bls.n	944 <__udivmoddi4+0x94>
     940:	1e93      	subs	r3, r2, #2
     942:	442c      	add	r4, r5
     944:	eba4 0408 	sub.w	r4, r4, r8
     948:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     94c:	b127      	cbz	r7, 958 <__udivmoddi4+0xa8>
     94e:	fa24 f40c 	lsr.w	r4, r4, ip
     952:	2300      	movs	r3, #0
     954:	603c      	str	r4, [r7, #0]
     956:	607b      	str	r3, [r7, #4]
     958:	4631      	mov	r1, r6
     95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     95e:	4650      	mov	r0, sl
     960:	e7db      	b.n	91a <__udivmoddi4+0x6a>
     962:	4613      	mov	r3, r2
     964:	e7ee      	b.n	944 <__udivmoddi4+0x94>
     966:	b902      	cbnz	r2, 96a <__udivmoddi4+0xba>
     968:	deff      	udf	#255	; 0xff
     96a:	f1bc 0f00 	cmp.w	ip, #0
     96e:	d12e      	bne.n	9ce <__udivmoddi4+0x11e>
     970:	1a8b      	subs	r3, r1, r2
     972:	2601      	movs	r6, #1
     974:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     978:	b2aa      	uxth	r2, r5
     97a:	fbb3 f8fe 	udiv	r8, r3, lr
     97e:	0c21      	lsrs	r1, r4, #16
     980:	fb0e 3318 	mls	r3, lr, r8, r3
     984:	fb08 f902 	mul.w	r9, r8, r2
     988:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     98c:	4599      	cmp	r9, r3
     98e:	d961      	bls.n	a54 <__udivmoddi4+0x1a4>
     990:	18eb      	adds	r3, r5, r3
     992:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     996:	d204      	bcs.n	9a2 <__udivmoddi4+0xf2>
     998:	4599      	cmp	r9, r3
     99a:	d902      	bls.n	9a2 <__udivmoddi4+0xf2>
     99c:	f1a8 0002 	sub.w	r0, r8, #2
     9a0:	442b      	add	r3, r5
     9a2:	eba3 0309 	sub.w	r3, r3, r9
     9a6:	b2a4      	uxth	r4, r4
     9a8:	fbb3 f1fe 	udiv	r1, r3, lr
     9ac:	fb0e 3311 	mls	r3, lr, r1, r3
     9b0:	434a      	muls	r2, r1
     9b2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9b6:	42a2      	cmp	r2, r4
     9b8:	d94e      	bls.n	a58 <__udivmoddi4+0x1a8>
     9ba:	192c      	adds	r4, r5, r4
     9bc:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     9c0:	d203      	bcs.n	9ca <__udivmoddi4+0x11a>
     9c2:	42a2      	cmp	r2, r4
     9c4:	d901      	bls.n	9ca <__udivmoddi4+0x11a>
     9c6:	1e8b      	subs	r3, r1, #2
     9c8:	442c      	add	r4, r5
     9ca:	1aa4      	subs	r4, r4, r2
     9cc:	e7bc      	b.n	948 <__udivmoddi4+0x98>
     9ce:	f1cc 0e20 	rsb	lr, ip, #32
     9d2:	fa02 f50c 	lsl.w	r5, r2, ip
     9d6:	fa21 f90e 	lsr.w	r9, r1, lr
     9da:	fa01 f30c 	lsl.w	r3, r1, ip
     9de:	fa20 fe0e 	lsr.w	lr, r0, lr
     9e2:	ea4e 0303 	orr.w	r3, lr, r3
     9e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
     9ea:	fa00 f40c 	lsl.w	r4, r0, ip
     9ee:	fbb9 f1f8 	udiv	r1, r9, r8
     9f2:	fa1f fe85 	uxth.w	lr, r5
     9f6:	fb08 9211 	mls	r2, r8, r1, r9
     9fa:	0c18      	lsrs	r0, r3, #16
     9fc:	fb01 f60e 	mul.w	r6, r1, lr
     a00:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     a04:	4296      	cmp	r6, r2
     a06:	d921      	bls.n	a4c <__udivmoddi4+0x19c>
     a08:	18aa      	adds	r2, r5, r2
     a0a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     a0e:	d203      	bcs.n	a18 <__udivmoddi4+0x168>
     a10:	4296      	cmp	r6, r2
     a12:	d901      	bls.n	a18 <__udivmoddi4+0x168>
     a14:	1e88      	subs	r0, r1, #2
     a16:	442a      	add	r2, r5
     a18:	1b92      	subs	r2, r2, r6
     a1a:	b29b      	uxth	r3, r3
     a1c:	fbb2 f9f8 	udiv	r9, r2, r8
     a20:	fb08 2219 	mls	r2, r8, r9, r2
     a24:	fb09 fe0e 	mul.w	lr, r9, lr
     a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     a2c:	459e      	cmp	lr, r3
     a2e:	d90f      	bls.n	a50 <__udivmoddi4+0x1a0>
     a30:	18eb      	adds	r3, r5, r3
     a32:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     a36:	d204      	bcs.n	a42 <__udivmoddi4+0x192>
     a38:	459e      	cmp	lr, r3
     a3a:	d902      	bls.n	a42 <__udivmoddi4+0x192>
     a3c:	f1a9 0602 	sub.w	r6, r9, #2
     a40:	442b      	add	r3, r5
     a42:	eba3 030e 	sub.w	r3, r3, lr
     a46:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     a4a:	e793      	b.n	974 <__udivmoddi4+0xc4>
     a4c:	4608      	mov	r0, r1
     a4e:	e7e3      	b.n	a18 <__udivmoddi4+0x168>
     a50:	464e      	mov	r6, r9
     a52:	e7f6      	b.n	a42 <__udivmoddi4+0x192>
     a54:	4640      	mov	r0, r8
     a56:	e7a4      	b.n	9a2 <__udivmoddi4+0xf2>
     a58:	460b      	mov	r3, r1
     a5a:	e7b6      	b.n	9ca <__udivmoddi4+0x11a>
     a5c:	428b      	cmp	r3, r1
     a5e:	d905      	bls.n	a6c <__udivmoddi4+0x1bc>
     a60:	b10f      	cbz	r7, a66 <__udivmoddi4+0x1b6>
     a62:	e9c7 0100 	strd	r0, r1, [r7]
     a66:	2600      	movs	r6, #0
     a68:	4630      	mov	r0, r6
     a6a:	e775      	b.n	958 <__udivmoddi4+0xa8>
     a6c:	fab3 fc83 	clz	ip, r3
     a70:	f1bc 0f00 	cmp.w	ip, #0
     a74:	d10f      	bne.n	a96 <__udivmoddi4+0x1e6>
     a76:	428b      	cmp	r3, r1
     a78:	d301      	bcc.n	a7e <__udivmoddi4+0x1ce>
     a7a:	4282      	cmp	r2, r0
     a7c:	d809      	bhi.n	a92 <__udivmoddi4+0x1e2>
     a7e:	1a84      	subs	r4, r0, r2
     a80:	eb61 0e03 	sbc.w	lr, r1, r3
     a84:	2001      	movs	r0, #1
     a86:	2f00      	cmp	r7, #0
     a88:	d06a      	beq.n	b60 <__udivmoddi4+0x2b0>
     a8a:	e9c7 4e00 	strd	r4, lr, [r7]
     a8e:	2600      	movs	r6, #0
     a90:	e762      	b.n	958 <__udivmoddi4+0xa8>
     a92:	4660      	mov	r0, ip
     a94:	e7f7      	b.n	a86 <__udivmoddi4+0x1d6>
     a96:	f1cc 0e20 	rsb	lr, ip, #32
     a9a:	fa03 f30c 	lsl.w	r3, r3, ip
     a9e:	fa22 f50e 	lsr.w	r5, r2, lr
     aa2:	fa21 f40e 	lsr.w	r4, r1, lr
     aa6:	431d      	orrs	r5, r3
     aa8:	fa01 f30c 	lsl.w	r3, r1, ip
     aac:	fa20 f10e 	lsr.w	r1, r0, lr
     ab0:	430b      	orrs	r3, r1
     ab2:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     ab6:	fa00 f60c 	lsl.w	r6, r0, ip
     aba:	fbb4 f9fa 	udiv	r9, r4, sl
     abe:	fa1f f885 	uxth.w	r8, r5
     ac2:	fb0a 4019 	mls	r0, sl, r9, r4
     ac6:	0c1c      	lsrs	r4, r3, #16
     ac8:	fb09 f108 	mul.w	r1, r9, r8
     acc:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     ad0:	42a1      	cmp	r1, r4
     ad2:	fa02 f20c 	lsl.w	r2, r2, ip
     ad6:	d93f      	bls.n	b58 <__udivmoddi4+0x2a8>
     ad8:	192c      	adds	r4, r5, r4
     ada:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     ade:	d204      	bcs.n	aea <__udivmoddi4+0x23a>
     ae0:	42a1      	cmp	r1, r4
     ae2:	d902      	bls.n	aea <__udivmoddi4+0x23a>
     ae4:	f1a9 0002 	sub.w	r0, r9, #2
     ae8:	442c      	add	r4, r5
     aea:	1a64      	subs	r4, r4, r1
     aec:	b29b      	uxth	r3, r3
     aee:	fbb4 f9fa 	udiv	r9, r4, sl
     af2:	fb0a 4419 	mls	r4, sl, r9, r4
     af6:	fb09 f808 	mul.w	r8, r9, r8
     afa:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     afe:	4588      	cmp	r8, r1
     b00:	d92c      	bls.n	b5c <__udivmoddi4+0x2ac>
     b02:	1869      	adds	r1, r5, r1
     b04:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     b08:	d204      	bcs.n	b14 <__udivmoddi4+0x264>
     b0a:	4588      	cmp	r8, r1
     b0c:	d902      	bls.n	b14 <__udivmoddi4+0x264>
     b0e:	f1a9 0302 	sub.w	r3, r9, #2
     b12:	4429      	add	r1, r5
     b14:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     b18:	eba1 0108 	sub.w	r1, r1, r8
     b1c:	fba0 8902 	umull	r8, r9, r0, r2
     b20:	4549      	cmp	r1, r9
     b22:	46c2      	mov	sl, r8
     b24:	464c      	mov	r4, r9
     b26:	d302      	bcc.n	b2e <__udivmoddi4+0x27e>
     b28:	d106      	bne.n	b38 <__udivmoddi4+0x288>
     b2a:	4546      	cmp	r6, r8
     b2c:	d204      	bcs.n	b38 <__udivmoddi4+0x288>
     b2e:	ebb8 0a02 	subs.w	sl, r8, r2
     b32:	eb69 0405 	sbc.w	r4, r9, r5
     b36:	3801      	subs	r0, #1
     b38:	b197      	cbz	r7, b60 <__udivmoddi4+0x2b0>
     b3a:	ebb6 030a 	subs.w	r3, r6, sl
     b3e:	eb61 0604 	sbc.w	r6, r1, r4
     b42:	fa06 fe0e 	lsl.w	lr, r6, lr
     b46:	fa23 f30c 	lsr.w	r3, r3, ip
     b4a:	ea4e 0303 	orr.w	r3, lr, r3
     b4e:	fa26 f60c 	lsr.w	r6, r6, ip
     b52:	e9c7 3600 	strd	r3, r6, [r7]
     b56:	e79a      	b.n	a8e <__udivmoddi4+0x1de>
     b58:	4648      	mov	r0, r9
     b5a:	e7c6      	b.n	aea <__udivmoddi4+0x23a>
     b5c:	464b      	mov	r3, r9
     b5e:	e7d9      	b.n	b14 <__udivmoddi4+0x264>
     b60:	463e      	mov	r6, r7
     b62:	e6f9      	b.n	958 <__udivmoddi4+0xa8>
     b64:	0000      	movs	r0, r0
	...

00000b68 <main>:

	//	k_sem_give(&sem);
}

void main(void)
{
     b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MY_REGISTER1=0xee;
     b6c:	4b32      	ldr	r3, [pc, #200]	; (c38 <main+0xd0>)
     b6e:	22ee      	movs	r2, #238	; 0xee
{
     b70:	b08b      	sub	sp, #44	; 0x2c
	MY_REGISTER1=0xee;
     b72:	701a      	strb	r2, [r3, #0]
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     b74:	4831      	ldr	r0, [pc, #196]	; (c3c <main+0xd4>)
     b76:	f003 f95b 	bl	3e30 <z_impl_device_get_binding>
	if (dev == NULL) {
		printf("Could not get %s device\n", DT_INST_0_HYNITRON_CST816S_LABEL);
		return;
	}

	struct sensor_trigger trig = {
     b7a:	4b31      	ldr	r3, [pc, #196]	; (c40 <main+0xd8>)
     b7c:	4682      	mov	sl, r0
     b7e:	6818      	ldr	r0, [r3, #0]
				     sensor_trigger_handler_t handler)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->driver_api;

	if (api->trigger_set == NULL) {
     b80:	f8da 3004 	ldr.w	r3, [sl, #4]
     b84:	9003      	str	r0, [sp, #12]
     b86:	685b      	ldr	r3, [r3, #4]
     b88:	2b00      	cmp	r3, #0
     b8a:	d049      	beq.n	c20 <main+0xb8>
		return -ENOTSUP;
	}

	return api->trigger_set(dev, trig, handler);
     b8c:	4a2d      	ldr	r2, [pc, #180]	; (c44 <main+0xdc>)
     b8e:	a903      	add	r1, sp, #12
     b90:	4650      	mov	r0, sl
     b92:	4798      	blx	r3
		.chan = SENSOR_CHAN_ACCEL_XYZ,
	};


	if (IS_ENABLED(CONFIG_CST816S_TRIGGER)) {
		if (sensor_trigger_set(dev, &trig, trigger_handler)) {
     b94:	2800      	cmp	r0, #0
     b96:	d143      	bne.n	c20 <main+0xb8>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     b98:	a525      	add	r5, pc, #148	; (adr r5, c30 <main+0xc8>)
     b9a:	e9d5 4500 	ldrd	r4, r5, [r5]
//				if (IS_ENABLED(CONFIG_CST816S_TRIGGER)) {
//					k_sem_take(&my_sem, K_MSEC(50)); //you cannot wait FOREVER on interrupt
//				} else {
//					MY_REGISTER1=0x15;
		if (sensor_sample_fetch(dev)) {
			printf("sensor_sample_fetch failed\n");
     b9e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; c50 <main+0xe8>
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     ba2:	f8da 3004 	ldr.w	r3, [sl, #4]
     ba6:	2125      	movs	r1, #37	; 0x25
     ba8:	689b      	ldr	r3, [r3, #8]
     baa:	4650      	mov	r0, sl
     bac:	4798      	blx	r3
		if (sensor_sample_fetch(dev)) {
     bae:	b110      	cbz	r0, bb6 <main+0x4e>
			printf("sensor_sample_fetch failed\n");
     bb0:	4658      	mov	r0, fp
     bb2:	f001 fe71 	bl	2898 <printf>
	return api->channel_get(dev, chan, val);
     bb6:	f8da 3004 	ldr.w	r3, [sl, #4]
     bba:	aa04      	add	r2, sp, #16
     bbc:	68db      	ldr	r3, [r3, #12]
     bbe:	2103      	movs	r1, #3
     bc0:	4650      	mov	r0, sl
     bc2:	4798      	blx	r3
	return (double)val->val1 + (double)val->val2 / 1000000;
     bc4:	9805      	ldr	r0, [sp, #20]
     bc6:	f7ff fbdd 	bl	384 <__aeabi_i2d>
     bca:	4622      	mov	r2, r4
     bcc:	462b      	mov	r3, r5
     bce:	f7ff fd6d 	bl	6ac <__aeabi_ddiv>
     bd2:	4606      	mov	r6, r0
     bd4:	9804      	ldr	r0, [sp, #16]
     bd6:	460f      	mov	r7, r1
     bd8:	f7ff fbd4 	bl	384 <__aeabi_i2d>
     bdc:	4602      	mov	r2, r0
     bde:	460b      	mov	r3, r1
     be0:	4630      	mov	r0, r6
     be2:	4639      	mov	r1, r7
     be4:	f7ff fa82 	bl	ec <__adddf3>
     be8:	4606      	mov	r6, r0
     bea:	9807      	ldr	r0, [sp, #28]
     bec:	460f      	mov	r7, r1
     bee:	f7ff fbc9 	bl	384 <__aeabi_i2d>
     bf2:	4622      	mov	r2, r4
     bf4:	462b      	mov	r3, r5
     bf6:	f7ff fd59 	bl	6ac <__aeabi_ddiv>
     bfa:	4680      	mov	r8, r0
     bfc:	9806      	ldr	r0, [sp, #24]
     bfe:	4689      	mov	r9, r1
     c00:	f7ff fbc0 	bl	384 <__aeabi_i2d>
     c04:	4602      	mov	r2, r0
     c06:	460b      	mov	r3, r1
     c08:	4640      	mov	r0, r8
     c0a:	4649      	mov	r1, r9
     c0c:	f7ff fa6e 	bl	ec <__adddf3>
		}
		//		}

		sensor_channel_get(dev, SENSOR_CHAN_ACCEL_XYZ, accel);

		printf("AX=%10.2f AY=%10.2f \n",
     c10:	4632      	mov	r2, r6
     c12:	e9cd 0100 	strd	r0, r1, [sp]
     c16:	463b      	mov	r3, r7
     c18:	480b      	ldr	r0, [pc, #44]	; (c48 <main+0xe0>)
     c1a:	f001 fe3d 	bl	2898 <printf>
		if (sensor_sample_fetch(dev)) {
     c1e:	e7c0      	b.n	ba2 <main+0x3a>
			printf("Could not set trigger\n");
     c20:	480a      	ldr	r0, [pc, #40]	; (c4c <main+0xe4>)
     c22:	f001 fe39 	bl	2898 <printf>
	}

//	if (!IS_ENABLED(CONFIG_CST816S_TRIGGER)) {
//		k_sleep(K_MSEC(2000));
//	}
}
     c26:	b00b      	add	sp, #44	; 0x2c
     c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c2c:	f3af 8000 	nop.w
     c30:	00000000 	.word	0x00000000
     c34:	412e8480 	.word	0x412e8480
     c38:	2000f000 	.word	0x2000f000
     c3c:	00005c44 	.word	0x00005c44
     c40:	00005b30 	.word	0x00005b30
     c44:	00000c55 	.word	0x00000c55
     c48:	00005c63 	.word	0x00005c63
     c4c:	00005c4c 	.word	0x00005c4c
     c50:	00005c79 	.word	0x00005c79

00000c54 <trigger_handler>:
	MY_REGISTER1=0x11;
     c54:	4a07      	ldr	r2, [pc, #28]	; (c74 <trigger_handler+0x20>)
     c56:	2111      	movs	r1, #17
{
     c58:	b508      	push	{r3, lr}
	MY_REGISTER1=0x11;
     c5a:	7011      	strb	r1, [r2, #0]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     c5c:	6843      	ldr	r3, [r0, #4]
     c5e:	2125      	movs	r1, #37	; 0x25
     c60:	689b      	ldr	r3, [r3, #8]
     c62:	4798      	blx	r3
	if (sensor_sample_fetch(dev)) {
     c64:	b120      	cbz	r0, c70 <trigger_handler+0x1c>
		printf("sensor_sample_fetch failed\n");
     c66:	4804      	ldr	r0, [pc, #16]	; (c78 <trigger_handler+0x24>)
}
     c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("sensor_sample_fetch failed\n");
     c6c:	f001 be14 	b.w	2898 <printf>
}
     c70:	bd08      	pop	{r3, pc}
     c72:	bf00      	nop
     c74:	2000f000 	.word	0x2000f000
     c78:	00005c79 	.word	0x00005c79

00000c7c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
     c7c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     c7e:	2200      	movs	r2, #0
{
     c80:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
     c82:	490d      	ldr	r1, [pc, #52]	; (cb8 <enable_logger+0x3c>)
     c84:	480d      	ldr	r0, [pc, #52]	; (cbc <enable_logger+0x40>)
     c86:	f004 fe12 	bl	58ae <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     c8a:	4d0d      	ldr	r5, [pc, #52]	; (cc0 <enable_logger+0x44>)
     c8c:	490d      	ldr	r1, [pc, #52]	; (cc4 <enable_logger+0x48>)
     c8e:	2400      	movs	r4, #0
     c90:	230e      	movs	r3, #14
     c92:	e9cd 4302 	strd	r4, r3, [sp, #8]
     c96:	e9cd 4404 	strd	r4, r4, [sp, #16]
     c9a:	e9cd 4400 	strd	r4, r4, [sp]
     c9e:	4b0a      	ldr	r3, [pc, #40]	; (cc8 <enable_logger+0x4c>)
     ca0:	f44f 7240 	mov.w	r2, #768	; 0x300
     ca4:	4628      	mov	r0, r5
     ca6:	f003 fd69 	bl	477c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
     caa:	4908      	ldr	r1, [pc, #32]	; (ccc <enable_logger+0x50>)
     cac:	4628      	mov	r0, r5
     cae:	f004 fdaa 	bl	5806 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     cb2:	4620      	mov	r0, r4
     cb4:	b007      	add	sp, #28
     cb6:	bd30      	pop	{r4, r5, pc}
     cb8:	00000cd1 	.word	0x00000cd1
     cbc:	200004bc 	.word	0x200004bc
     cc0:	20000504 	.word	0x20000504
     cc4:	20000760 	.word	0x20000760
     cc8:	000010a5 	.word	0x000010a5
     ccc:	00005c95 	.word	0x00005c95

00000cd0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     cd0:	4801      	ldr	r0, [pc, #4]	; (cd8 <log_process_thread_timer_expiry_fn+0x8>)
     cd2:	f003 bccd 	b.w	4670 <z_impl_k_sem_give>
     cd6:	bf00      	nop
     cd8:	20001d50 	.word	0x20001d50

00000cdc <log_core_init>:
{
     cdc:	b508      	push	{r3, lr}
		log_msg_pool_init();
     cde:	f000 fa41 	bl	1164 <log_msg_pool_init>
		log_list_init(&list);
     ce2:	4809      	ldr	r0, [pc, #36]	; (d08 <log_core_init+0x2c>)
     ce4:	f003 ff5d 	bl	4ba2 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     ce8:	2304      	movs	r3, #4
     cea:	2228      	movs	r2, #40	; 0x28
     cec:	4807      	ldr	r0, [pc, #28]	; (d0c <log_core_init+0x30>)
     cee:	4908      	ldr	r1, [pc, #32]	; (d10 <log_core_init+0x34>)
     cf0:	f004 fcb9 	bl	5666 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     cf4:	4b07      	ldr	r3, [pc, #28]	; (d14 <log_core_init+0x38>)
     cf6:	4a08      	ldr	r2, [pc, #32]	; (d18 <log_core_init+0x3c>)
     cf8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
     cfa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
     cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     d02:	f000 baa5 	b.w	1250 <log_output_timestamp_freq_set>
     d06:	bf00      	nop
     d08:	200004b4 	.word	0x200004b4
     d0c:	200004e8 	.word	0x200004e8
     d10:	200017a0 	.word	0x200017a0
     d14:	20001c40 	.word	0x20001c40
     d18:	00004be1 	.word	0x00004be1

00000d1c <dropped_notify>:
{
     d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     d1e:	4b0f      	ldr	r3, [pc, #60]	; (d5c <dropped_notify+0x40>)
     d20:	f3bf 8f5b 	dmb	ish
     d24:	2500      	movs	r5, #0
     d26:	e853 7f00 	ldrex	r7, [r3]
     d2a:	e843 5200 	strex	r2, r5, [r3]
     d2e:	2a00      	cmp	r2, #0
     d30:	d1f9      	bne.n	d26 <dropped_notify+0xa>
     d32:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     d36:	4c0a      	ldr	r4, [pc, #40]	; (d60 <dropped_notify+0x44>)
     d38:	4e0a      	ldr	r6, [pc, #40]	; (d64 <dropped_notify+0x48>)
     d3a:	1b36      	subs	r6, r6, r4
     d3c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     d3e:	42b5      	cmp	r5, r6
     d40:	db00      	blt.n	d44 <dropped_notify+0x28>
}
     d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
     d44:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     d46:	795b      	ldrb	r3, [r3, #5]
     d48:	b12b      	cbz	r3, d56 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
     d4a:	6823      	ldr	r3, [r4, #0]
     d4c:	68db      	ldr	r3, [r3, #12]
     d4e:	b113      	cbz	r3, d56 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
     d50:	4639      	mov	r1, r7
     d52:	4620      	mov	r0, r4
     d54:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     d56:	3501      	adds	r5, #1
     d58:	3410      	adds	r4, #16
     d5a:	e7f0      	b.n	d3e <dropped_notify+0x22>
     d5c:	200004ac 	.word	0x200004ac
     d60:	00005b24 	.word	0x00005b24
     d64:	00005b24 	.word	0x00005b24

00000d68 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     d68:	4b06      	ldr	r3, [pc, #24]	; (d84 <log_dropped+0x1c>)
     d6a:	f3bf 8f5b 	dmb	ish
     d6e:	e853 2f00 	ldrex	r2, [r3]
     d72:	3201      	adds	r2, #1
     d74:	e843 2100 	strex	r1, r2, [r3]
     d78:	2900      	cmp	r1, #0
     d7a:	d1f8      	bne.n	d6e <log_dropped+0x6>
     d7c:	f3bf 8f5b 	dmb	ish
}
     d80:	4770      	bx	lr
     d82:	bf00      	nop
     d84:	200004ac 	.word	0x200004ac

00000d88 <log_backend_enable>:
	id += backend - log_backend_get(0);
     d88:	4b09      	ldr	r3, [pc, #36]	; (db0 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
     d8a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
     d8c:	1ac3      	subs	r3, r0, r3
     d8e:	111b      	asrs	r3, r3, #4
     d90:	3301      	adds	r3, #1
{
     d92:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
     d94:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
     d96:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
     d98:	4c06      	ldr	r4, [pc, #24]	; (db4 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
     d9a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
     d9c:	2201      	movs	r2, #1
     d9e:	715a      	strb	r2, [r3, #5]
     da0:	7822      	ldrb	r2, [r4, #0]
     da2:	b912      	cbnz	r2, daa <log_backend_enable+0x22>
     da4:	4804      	ldr	r0, [pc, #16]	; (db8 <log_backend_enable+0x30>)
     da6:	f003 fc63 	bl	4670 <z_impl_k_sem_give>
	backend_attached = true;
     daa:	2301      	movs	r3, #1
     dac:	7023      	strb	r3, [r4, #0]
}
     dae:	bd10      	pop	{r4, pc}
     db0:	00005b24 	.word	0x00005b24
     db4:	20000758 	.word	0x20000758
     db8:	20001d50 	.word	0x20001d50

00000dbc <log_init>:
{
     dbc:	b570      	push	{r4, r5, r6, lr}
     dbe:	4b11      	ldr	r3, [pc, #68]	; (e04 <log_init+0x48>)
     dc0:	f3bf 8f5b 	dmb	ish
     dc4:	e853 5f00 	ldrex	r5, [r3]
     dc8:	1c6a      	adds	r2, r5, #1
     dca:	e843 2100 	strex	r1, r2, [r3]
     dce:	2900      	cmp	r1, #0
     dd0:	d1f8      	bne.n	dc4 <log_init+0x8>
     dd2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
     dd6:	b92d      	cbnz	r5, de4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
     dd8:	4c0b      	ldr	r4, [pc, #44]	; (e08 <log_init+0x4c>)
     dda:	4e0c      	ldr	r6, [pc, #48]	; (e0c <log_init+0x50>)
     ddc:	1b36      	subs	r6, r6, r4
     dde:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
     de0:	42b5      	cmp	r5, r6
     de2:	db00      	blt.n	de6 <log_init+0x2a>
}
     de4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
     de6:	7b23      	ldrb	r3, [r4, #12]
     de8:	b143      	cbz	r3, dfc <log_init+0x40>
			if (backend->api->init != NULL) {
     dea:	6823      	ldr	r3, [r4, #0]
     dec:	695b      	ldr	r3, [r3, #20]
     dee:	b103      	cbz	r3, df2 <log_init+0x36>
				backend->api->init();
     df0:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
     df2:	2204      	movs	r2, #4
     df4:	2100      	movs	r1, #0
     df6:	4620      	mov	r0, r4
     df8:	f7ff ffc6 	bl	d88 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
     dfc:	3501      	adds	r5, #1
     dfe:	3410      	adds	r4, #16
     e00:	e7ee      	b.n	de0 <log_init+0x24>
     e02:	bf00      	nop
     e04:	200004b0 	.word	0x200004b0
     e08:	00005b24 	.word	0x00005b24
     e0c:	00005b24 	.word	0x00005b24

00000e10 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
     e10:	4b16      	ldr	r3, [pc, #88]	; (e6c <log_strdup+0x5c>)
     e12:	4298      	cmp	r0, r3
{
     e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
     e16:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     e18:	d302      	bcc.n	e20 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
     e1a:	4b15      	ldr	r3, [pc, #84]	; (e70 <log_strdup+0x60>)
     e1c:	4298      	cmp	r0, r3
     e1e:	d31f      	bcc.n	e60 <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
     e20:	2200      	movs	r2, #0
     e22:	a901      	add	r1, sp, #4
     e24:	4813      	ldr	r0, [pc, #76]	; (e74 <log_strdup+0x64>)
     e26:	f003 f9a3 	bl	4170 <k_mem_slab_alloc>
	if (err != 0) {
     e2a:	4605      	mov	r5, r0
     e2c:	b9d8      	cbnz	r0, e66 <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     e2e:	2201      	movs	r2, #1
     e30:	9b01      	ldr	r3, [sp, #4]
     e32:	f3bf 8f5b 	dmb	ish
     e36:	e853 1f00 	ldrex	r1, [r3]
     e3a:	e843 2000 	strex	r0, r2, [r3]
     e3e:	2800      	cmp	r0, #0
     e40:	d1f9      	bne.n	e36 <log_strdup+0x26>
     e42:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
     e46:	9801      	ldr	r0, [sp, #4]
     e48:	4621      	mov	r1, r4
     e4a:	221f      	movs	r2, #31
     e4c:	3004      	adds	r0, #4
     e4e:	f004 f88a 	bl	4f66 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
     e52:	9c01      	ldr	r4, [sp, #4]
     e54:	237e      	movs	r3, #126	; 0x7e
     e56:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
     e5a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
     e5e:	3404      	adds	r4, #4
}
     e60:	4620      	mov	r0, r4
     e62:	b003      	add	sp, #12
     e64:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
     e66:	4c04      	ldr	r4, [pc, #16]	; (e78 <log_strdup+0x68>)
     e68:	e7fa      	b.n	e60 <log_strdup+0x50>
     e6a:	bf00      	nop
     e6c:	00005920 	.word	0x00005920
     e70:	000063bc 	.word	0x000063bc
     e74:	200004e8 	.word	0x200004e8
     e78:	00005c9d 	.word	0x00005c9d

00000e7c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
     e7c:	b148      	cbz	r0, e92 <log_is_strdup+0x16>
     e7e:	4b05      	ldr	r3, [pc, #20]	; (e94 <log_is_strdup+0x18>)
     e80:	4298      	cmp	r0, r3
     e82:	d305      	bcc.n	e90 <log_is_strdup+0x14>
     e84:	33a0      	adds	r3, #160	; 0xa0
     e86:	4298      	cmp	r0, r3
     e88:	bf2c      	ite	cs
     e8a:	2000      	movcs	r0, #0
     e8c:	2001      	movcc	r0, #1
     e8e:	4770      	bx	lr
     e90:	2000      	movs	r0, #0
}
     e92:	4770      	bx	lr
     e94:	200017a0 	.word	0x200017a0

00000e98 <z_impl_log_process>:
{
     e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
     e9c:	4b46      	ldr	r3, [pc, #280]	; (fb8 <z_impl_log_process+0x120>)
     e9e:	781b      	ldrb	r3, [r3, #0]
{
     ea0:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
     ea2:	b903      	cbnz	r3, ea6 <z_impl_log_process+0xe>
     ea4:	b360      	cbz	r0, f00 <z_impl_log_process+0x68>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     ea6:	f04f 0320 	mov.w	r3, #32
     eaa:	f3ef 8611 	mrs	r6, BASEPRI
     eae:	f383 8811 	msr	BASEPRI, r3
     eb2:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
     eb6:	4841      	ldr	r0, [pc, #260]	; (fbc <z_impl_log_process+0x124>)
     eb8:	f003 fe83 	bl	4bc2 <log_list_head_get>
     ebc:	4604      	mov	r4, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     ebe:	f386 8811 	msr	BASEPRI, r6
     ec2:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
     ec6:	b178      	cbz	r0, ee8 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     ec8:	f3bf 8f5b 	dmb	ish
     ecc:	4b3c      	ldr	r3, [pc, #240]	; (fc0 <z_impl_log_process+0x128>)
     ece:	e853 2f00 	ldrex	r2, [r3]
     ed2:	3a01      	subs	r2, #1
     ed4:	e843 2100 	strex	r1, r2, [r3]
     ed8:	2900      	cmp	r1, #0
     eda:	d1f8      	bne.n	ece <z_impl_log_process+0x36>
     edc:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
     ee0:	b18d      	cbz	r5, f06 <z_impl_log_process+0x6e>
	log_msg_put(msg);
     ee2:	4620      	mov	r0, r4
     ee4:	f003 ff14 	bl	4d10 <log_msg_put>
	if (!bypass && dropped_cnt) {
     ee8:	b925      	cbnz	r5, ef4 <z_impl_log_process+0x5c>
     eea:	4b36      	ldr	r3, [pc, #216]	; (fc4 <z_impl_log_process+0x12c>)
     eec:	681b      	ldr	r3, [r3, #0]
     eee:	b10b      	cbz	r3, ef4 <z_impl_log_process+0x5c>
		dropped_notify();
     ef0:	f7ff ff14 	bl	d1c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
     ef4:	4831      	ldr	r0, [pc, #196]	; (fbc <z_impl_log_process+0x124>)
     ef6:	f003 fe62 	bl	4bbe <log_list_head_peek>
     efa:	1c05      	adds	r5, r0, #0
     efc:	bf18      	it	ne
     efe:	2501      	movne	r5, #1
}
     f00:	4628      	mov	r0, r5
     f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
     f06:	4b30      	ldr	r3, [pc, #192]	; (fc8 <z_impl_log_process+0x130>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
     f08:	781b      	ldrb	r3, [r3, #0]
     f0a:	b9ab      	cbnz	r3, f38 <z_impl_log_process+0xa0>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     f0c:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
     f0e:	07db      	lsls	r3, r3, #31
     f10:	d412      	bmi.n	f38 <z_impl_log_process+0xa0>
	msg_str = log_msg_str_get(msg);
     f12:	f003 ff10 	bl	4d36 <log_msg_str_get>
     f16:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
     f18:	4620      	mov	r0, r4
     f1a:	f003 fed9 	bl	4cd0 <log_msg_nargs_get>
     f1e:	4601      	mov	r1, r0
     f20:	4648      	mov	r0, r9
     f22:	f003 fe61 	bl	4be8 <z_log_get_s_mask>
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     f26:	4b29      	ldr	r3, [pc, #164]	; (fcc <z_impl_log_process+0x134>)
				LOG_ERR(ERR_MSG, idx, msg_str);
     f28:	4a29      	ldr	r2, [pc, #164]	; (fd0 <z_impl_log_process+0x138>)
     f2a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; fe8 <z_impl_log_process+0x150>
     f2e:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
     f30:	4607      	mov	r7, r0
				LOG_ERR(ERR_MSG, idx, msg_str);
     f32:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
     f36:	b937      	cbnz	r7, f46 <z_impl_log_process+0xae>
     f38:	4e26      	ldr	r6, [pc, #152]	; (fd4 <z_impl_log_process+0x13c>)
     f3a:	4f27      	ldr	r7, [pc, #156]	; (fd8 <z_impl_log_process+0x140>)
     f3c:	1bbf      	subs	r7, r7, r6
     f3e:	113f      	asrs	r7, r7, #4
     f40:	f04f 0800 	mov.w	r8, #0
     f44:	e034      	b.n	fb0 <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
     f46:	fab7 f687 	clz	r6, r7
     f4a:	f1c6 061f 	rsb	r6, r6, #31
		str = (const char *)log_msg_arg_get(msg, idx);
     f4e:	4631      	mov	r1, r6
     f50:	4620      	mov	r0, r4
     f52:	f003 fec0 	bl	4cd6 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
     f56:	4b21      	ldr	r3, [pc, #132]	; (fdc <z_impl_log_process+0x144>)
     f58:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
     f5a:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     f5c:	d302      	bcc.n	f64 <z_impl_log_process+0xcc>
		if (!is_rodata(str) && !log_is_strdup(str) &&
     f5e:	4b20      	ldr	r3, [pc, #128]	; (fe0 <z_impl_log_process+0x148>)
     f60:	4298      	cmp	r0, r3
     f62:	d314      	bcc.n	f8e <z_impl_log_process+0xf6>
     f64:	4610      	mov	r0, r2
     f66:	f7ff ff89 	bl	e7c <log_is_strdup>
     f6a:	b980      	cbnz	r0, f8e <z_impl_log_process+0xf6>
     f6c:	4b1d      	ldr	r3, [pc, #116]	; (fe4 <z_impl_log_process+0x14c>)
     f6e:	429a      	cmp	r2, r3
     f70:	d00d      	beq.n	f8e <z_impl_log_process+0xf6>
				LOG_ERR(ERR_MSG, idx, msg_str);
     f72:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
     f76:	f043 0301 	orr.w	r3, r3, #1
     f7a:	f363 0807 	bfi	r8, r3, #0, #8
     f7e:	f36a 188f 	bfi	r8, sl, #6, #10
     f82:	4643      	mov	r3, r8
     f84:	464a      	mov	r2, r9
     f86:	4631      	mov	r1, r6
     f88:	4658      	mov	r0, fp
     f8a:	f003 fe6e 	bl	4c6a <log_2>
		mask &= ~BIT(idx);
     f8e:	2301      	movs	r3, #1
     f90:	fa03 f606 	lsl.w	r6, r3, r6
     f94:	ea27 0706 	bic.w	r7, r7, r6
     f98:	e7cd      	b.n	f36 <z_impl_log_process+0x9e>
	return backend->cb->active;
     f9a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
     f9c:	795b      	ldrb	r3, [r3, #5]
     f9e:	b123      	cbz	r3, faa <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
     fa0:	6833      	ldr	r3, [r6, #0]
     fa2:	4621      	mov	r1, r4
     fa4:	681b      	ldr	r3, [r3, #0]
     fa6:	4630      	mov	r0, r6
     fa8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
     faa:	f108 0801 	add.w	r8, r8, #1
     fae:	3610      	adds	r6, #16
     fb0:	45b8      	cmp	r8, r7
     fb2:	dbf2      	blt.n	f9a <z_impl_log_process+0x102>
     fb4:	e795      	b.n	ee2 <z_impl_log_process+0x4a>
     fb6:	bf00      	nop
     fb8:	20000758 	.word	0x20000758
     fbc:	200004b4 	.word	0x200004b4
     fc0:	200004a8 	.word	0x200004a8
     fc4:	200004ac 	.word	0x200004ac
     fc8:	20000759 	.word	0x20000759
     fcc:	00005af4 	.word	0x00005af4
     fd0:	00005adc 	.word	0x00005adc
     fd4:	00005b24 	.word	0x00005b24
     fd8:	00005b24 	.word	0x00005b24
     fdc:	00005920 	.word	0x00005920
     fe0:	000063bc 	.word	0x000063bc
     fe4:	00005c9d 	.word	0x00005c9d
     fe8:	00005cbb 	.word	0x00005cbb

00000fec <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
     fec:	4b26      	ldr	r3, [pc, #152]	; (1088 <msg_finalize+0x9c>)
{
     fee:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
     ff0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
     ff2:	8141      	strh	r1, [r0, #10]
{
     ff4:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
     ff6:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     ff8:	4c24      	ldr	r4, [pc, #144]	; (108c <msg_finalize+0xa0>)
     ffa:	60e8      	str	r0, [r5, #12]
     ffc:	f3bf 8f5b 	dmb	ish
    1000:	e854 3f00 	ldrex	r3, [r4]
    1004:	3301      	adds	r3, #1
    1006:	e844 3200 	strex	r2, r3, [r4]
    100a:	2a00      	cmp	r2, #0
    100c:	d1f8      	bne.n	1000 <msg_finalize+0x14>
    100e:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    1012:	f04f 0320 	mov.w	r3, #32
    1016:	f3ef 8611 	mrs	r6, BASEPRI
    101a:	f383 8811 	msr	BASEPRI, r3
    101e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1022:	481b      	ldr	r0, [pc, #108]	; (1090 <msg_finalize+0xa4>)
    1024:	4629      	mov	r1, r5
    1026:	f003 fdc0 	bl	4baa <log_list_add_tail>
	__asm__ volatile(
    102a:	f386 8811 	msr	BASEPRI, r6
    102e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    1032:	4b18      	ldr	r3, [pc, #96]	; (1094 <msg_finalize+0xa8>)
    1034:	781a      	ldrb	r2, [r3, #0]
    1036:	b17a      	cbz	r2, 1058 <msg_finalize+0x6c>
	__asm__ volatile(
    1038:	f04f 0320 	mov.w	r3, #32
    103c:	f3ef 8411 	mrs	r4, BASEPRI
    1040:	f383 8811 	msr	BASEPRI, r3
    1044:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1048:	2000      	movs	r0, #0
    104a:	f7ff ff25 	bl	e98 <z_impl_log_process>
	__asm__ volatile(
    104e:	f384 8811 	msr	BASEPRI, r4
    1052:	f3bf 8f6f 	isb	sy
}
    1056:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    1058:	490f      	ldr	r1, [pc, #60]	; (1098 <msg_finalize+0xac>)
    105a:	6823      	ldr	r3, [r4, #0]
    105c:	6809      	ldr	r1, [r1, #0]
    105e:	2900      	cmp	r1, #0
    1060:	d0f9      	beq.n	1056 <msg_finalize+0x6a>
    1062:	2b01      	cmp	r3, #1
    1064:	d106      	bne.n	1074 <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
    1066:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    106a:	480c      	ldr	r0, [pc, #48]	; (109c <msg_finalize+0xb0>)
}
    106c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1070:	f003 bd04 	b.w	4a7c <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1074:	2b0a      	cmp	r3, #10
    1076:	d1ee      	bne.n	1056 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    1078:	4808      	ldr	r0, [pc, #32]	; (109c <msg_finalize+0xb0>)
    107a:	f004 fc24 	bl	58c6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    107e:	4808      	ldr	r0, [pc, #32]	; (10a0 <msg_finalize+0xb4>)
}
    1080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1084:	f003 baf4 	b.w	4670 <z_impl_k_sem_give>
    1088:	20001c40 	.word	0x20001c40
    108c:	200004a8 	.word	0x200004a8
    1090:	200004b4 	.word	0x200004b4
    1094:	20000759 	.word	0x20000759
    1098:	20000570 	.word	0x20000570
    109c:	200004bc 	.word	0x200004bc
    10a0:	20001d50 	.word	0x20001d50

000010a4 <log_process_thread_func>:
{
    10a4:	b508      	push	{r3, lr}
	log_init();
    10a6:	f7ff fe89 	bl	dbc <log_init>
	return z_impl_k_current_get();
    10aa:	f003 fadb 	bl	4664 <z_impl_k_current_get>
	proc_tid = process_tid;
    10ae:	4b0b      	ldr	r3, [pc, #44]	; (10dc <log_process_thread_func+0x38>)
    10b0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    10b2:	b130      	cbz	r0, 10c2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    10b4:	4b0a      	ldr	r3, [pc, #40]	; (10e0 <log_process_thread_func+0x3c>)
	    process_tid &&
    10b6:	681b      	ldr	r3, [r3, #0]
    10b8:	2b09      	cmp	r3, #9
    10ba:	dd02      	ble.n	10c2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    10bc:	4809      	ldr	r0, [pc, #36]	; (10e4 <log_process_thread_func+0x40>)
    10be:	f003 fad7 	bl	4670 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    10c2:	4c08      	ldr	r4, [pc, #32]	; (10e4 <log_process_thread_func+0x40>)
    10c4:	2000      	movs	r0, #0
    10c6:	f7ff fee7 	bl	e98 <z_impl_log_process>
		if (log_process(false) == false) {
    10ca:	2800      	cmp	r0, #0
    10cc:	d1fa      	bne.n	10c4 <log_process_thread_func+0x20>
    10ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    10d2:	4620      	mov	r0, r4
    10d4:	f003 faf2 	bl	46bc <z_impl_k_sem_take>
    10d8:	e7f4      	b.n	10c4 <log_process_thread_func+0x20>
    10da:	bf00      	nop
    10dc:	20000570 	.word	0x20000570
    10e0:	200004a8 	.word	0x200004a8
    10e4:	20001d50 	.word	0x20001d50

000010e8 <z_impl_log_panic>:
{
    10e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    10ea:	4f0e      	ldr	r7, [pc, #56]	; (1124 <z_impl_log_panic+0x3c>)
    10ec:	783d      	ldrb	r5, [r7, #0]
    10ee:	b975      	cbnz	r5, 110e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    10f0:	4c0d      	ldr	r4, [pc, #52]	; (1128 <z_impl_log_panic+0x40>)
    10f2:	4e0e      	ldr	r6, [pc, #56]	; (112c <z_impl_log_panic+0x44>)
	log_init();
    10f4:	f7ff fe62 	bl	dbc <log_init>
    10f8:	1b36      	subs	r6, r6, r4
    10fa:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    10fc:	42b5      	cmp	r5, r6
    10fe:	db07      	blt.n	1110 <z_impl_log_panic+0x28>
    1100:	2000      	movs	r0, #0
    1102:	f7ff fec9 	bl	e98 <z_impl_log_process>
		while (log_process(false) == true) {
    1106:	2800      	cmp	r0, #0
    1108:	d1fa      	bne.n	1100 <z_impl_log_panic+0x18>
	panic_mode = true;
    110a:	2301      	movs	r3, #1
    110c:	703b      	strb	r3, [r7, #0]
}
    110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1110:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1112:	795b      	ldrb	r3, [r3, #5]
    1114:	b11b      	cbz	r3, 111e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    1116:	6823      	ldr	r3, [r4, #0]
    1118:	4620      	mov	r0, r4
    111a:	691b      	ldr	r3, [r3, #16]
    111c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    111e:	3501      	adds	r5, #1
    1120:	3410      	adds	r4, #16
    1122:	e7eb      	b.n	10fc <z_impl_log_panic+0x14>
    1124:	20000759 	.word	0x20000759
    1128:	00005b24 	.word	0x00005b24
    112c:	00005b24 	.word	0x00005b24

00001130 <log_free>:
{
    1130:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1132:	3804      	subs	r0, #4
    1134:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1136:	f3bf 8f5b 	dmb	ish
    113a:	e850 3f00 	ldrex	r3, [r0]
    113e:	1e5a      	subs	r2, r3, #1
    1140:	e840 2100 	strex	r1, r2, [r0]
    1144:	2900      	cmp	r1, #0
    1146:	d1f8      	bne.n	113a <log_free+0xa>
    1148:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    114c:	2b01      	cmp	r3, #1
    114e:	d103      	bne.n	1158 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1150:	a901      	add	r1, sp, #4
    1152:	4803      	ldr	r0, [pc, #12]	; (1160 <log_free+0x30>)
    1154:	f003 f838 	bl	41c8 <k_mem_slab_free>
}
    1158:	b003      	add	sp, #12
    115a:	f85d fb04 	ldr.w	pc, [sp], #4
    115e:	bf00      	nop
    1160:	200004e8 	.word	0x200004e8

00001164 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1164:	2320      	movs	r3, #32
    1166:	461a      	mov	r2, r3
    1168:	4901      	ldr	r1, [pc, #4]	; (1170 <log_msg_pool_init+0xc>)
    116a:	4802      	ldr	r0, [pc, #8]	; (1174 <log_msg_pool_init+0x10>)
    116c:	f004 ba7b 	b.w	5666 <k_mem_slab_init>
    1170:	20001840 	.word	0x20001840
    1174:	20000574 	.word	0x20000574

00001178 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1178:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    117a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    117c:	4d09      	ldr	r5, [pc, #36]	; (11a4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    117e:	9301      	str	r3, [sp, #4]
    1180:	2001      	movs	r0, #1
    1182:	f7ff fe89 	bl	e98 <z_impl_log_process>
    1186:	4604      	mov	r4, r0
			log_dropped();
    1188:	f7ff fdee 	bl	d68 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    118c:	2200      	movs	r2, #0
    118e:	a901      	add	r1, sp, #4
    1190:	4628      	mov	r0, r5
    1192:	f002 ffed 	bl	4170 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1196:	b108      	cbz	r0, 119c <log_msg_no_space_handle+0x24>
    1198:	2c00      	cmp	r4, #0
    119a:	d1f1      	bne.n	1180 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    119c:	9801      	ldr	r0, [sp, #4]
    119e:	b003      	add	sp, #12
    11a0:	bd30      	pop	{r4, r5, pc}
    11a2:	bf00      	nop
    11a4:	20000574 	.word	0x20000574

000011a8 <log_msg_chunk_alloc>:
{
    11a8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    11aa:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    11ac:	a901      	add	r1, sp, #4
    11ae:	4806      	ldr	r0, [pc, #24]	; (11c8 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    11b0:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    11b2:	f002 ffdd 	bl	4170 <k_mem_slab_alloc>
	if (err != 0) {
    11b6:	b110      	cbz	r0, 11be <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    11b8:	f7ff ffde 	bl	1178 <log_msg_no_space_handle>
    11bc:	9001      	str	r0, [sp, #4]
}
    11be:	9801      	ldr	r0, [sp, #4]
    11c0:	b003      	add	sp, #12
    11c2:	f85d fb04 	ldr.w	pc, [sp], #4
    11c6:	bf00      	nop
    11c8:	20000574 	.word	0x20000574

000011cc <msg_free>:
{
    11cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ce:	7a04      	ldrb	r4, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    11d0:	7a46      	ldrb	r6, [r0, #9]
{
    11d2:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    11d4:	f014 0401 	ands.w	r4, r4, #1
{
    11d8:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    11da:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    11de:	d00e      	beq.n	11fe <msg_free+0x32>
	if (msg->hdr.params.generic.ext == 1) {
    11e0:	9b01      	ldr	r3, [sp, #4]
    11e2:	7a1a      	ldrb	r2, [r3, #8]
    11e4:	0792      	lsls	r2, r2, #30
    11e6:	d504      	bpl.n	11f2 <msg_free+0x26>
		cont_free(msg->payload.ext.next);
    11e8:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    11ea:	4c18      	ldr	r4, [pc, #96]	; (124c <msg_free+0x80>)
    11ec:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    11ee:	9b03      	ldr	r3, [sp, #12]
    11f0:	bb2b      	cbnz	r3, 123e <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    11f2:	a901      	add	r1, sp, #4
    11f4:	4815      	ldr	r0, [pc, #84]	; (124c <msg_free+0x80>)
    11f6:	f002 ffe7 	bl	41c8 <k_mem_slab_free>
}
    11fa:	b005      	add	sp, #20
    11fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    11fe:	2e00      	cmp	r6, #0
    1200:	d0ee      	beq.n	11e0 <msg_free+0x14>
		for (i = 0; i < nargs; i++) {
    1202:	4625      	mov	r5, r4
    1204:	e017      	b.n	1236 <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    1206:	4629      	mov	r1, r5
    1208:	f003 fd65 	bl	4cd6 <log_msg_arg_get>
    120c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    120e:	f7ff fe35 	bl	e7c <log_is_strdup>
    1212:	b178      	cbz	r0, 1234 <msg_free+0x68>
				if (smask == 0) {
    1214:	b93c      	cbnz	r4, 1226 <msg_free+0x5a>
					smask = z_log_get_s_mask(
    1216:	9b01      	ldr	r3, [sp, #4]
    1218:	4631      	mov	r1, r6
    121a:	6918      	ldr	r0, [r3, #16]
    121c:	f003 fce4 	bl	4be8 <z_log_get_s_mask>
					if (smask == 0) {
    1220:	4604      	mov	r4, r0
    1222:	2800      	cmp	r0, #0
    1224:	d0dc      	beq.n	11e0 <msg_free+0x14>
				if (smask & BIT(i)) {
    1226:	fa24 f305 	lsr.w	r3, r4, r5
    122a:	07db      	lsls	r3, r3, #31
    122c:	d502      	bpl.n	1234 <msg_free+0x68>
					log_free(buf);
    122e:	4638      	mov	r0, r7
    1230:	f7ff ff7e 	bl	1130 <log_free>
		for (i = 0; i < nargs; i++) {
    1234:	3501      	adds	r5, #1
    1236:	42ae      	cmp	r6, r5
    1238:	9801      	ldr	r0, [sp, #4]
    123a:	d8e4      	bhi.n	1206 <msg_free+0x3a>
    123c:	e7d0      	b.n	11e0 <msg_free+0x14>
		next = cont->next;
    123e:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1240:	a903      	add	r1, sp, #12
    1242:	4620      	mov	r0, r4
    1244:	f002 ffc0 	bl	41c8 <k_mem_slab_free>
		cont = next;
    1248:	9503      	str	r5, [sp, #12]
    124a:	e7d0      	b.n	11ee <msg_free+0x22>
    124c:	20000574 	.word	0x20000574

00001250 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1250:	4a08      	ldr	r2, [pc, #32]	; (1274 <log_output_timestamp_freq_set+0x24>)
{
    1252:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1254:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1256:	4c08      	ldr	r4, [pc, #32]	; (1278 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1258:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    125a:	2100      	movs	r1, #0
    125c:	42a0      	cmp	r0, r4
    125e:	d804      	bhi.n	126a <log_output_timestamp_freq_set+0x1a>
    1260:	b101      	cbz	r1, 1264 <log_output_timestamp_freq_set+0x14>
    1262:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1264:	4b05      	ldr	r3, [pc, #20]	; (127c <log_output_timestamp_freq_set+0x2c>)
    1266:	6018      	str	r0, [r3, #0]
}
    1268:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    126a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    126c:	005b      	lsls	r3, r3, #1
    126e:	2101      	movs	r1, #1
    1270:	e7f4      	b.n	125c <log_output_timestamp_freq_set+0xc>
    1272:	bf00      	nop
    1274:	20000594 	.word	0x20000594
    1278:	000f4240 	.word	0x000f4240
    127c:	20000590 	.word	0x20000590

00001280 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1280:	4b16      	ldr	r3, [pc, #88]	; (12dc <nrf_power_clock_isr+0x5c>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1282:	b507      	push	{r0, r1, r2, lr}
    1284:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    1286:	b182      	cbz	r2, 12aa <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    1288:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    128c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1290:	07d1      	lsls	r1, r2, #31
    1292:	d50a      	bpl.n	12aa <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1294:	2200      	movs	r2, #0
    1296:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1298:	681b      	ldr	r3, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    129a:	4811      	ldr	r0, [pc, #68]	; (12e0 <nrf_power_clock_isr+0x60>)
    129c:	9300      	str	r3, [sp, #0]
    (void)dummy;
    129e:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    12a0:	6883      	ldr	r3, [r0, #8]
    12a2:	7a59      	ldrb	r1, [r3, #9]
    12a4:	b909      	cbnz	r1, 12aa <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    12a6:	f003 fd56 	bl	4d56 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    12aa:	4b0e      	ldr	r3, [pc, #56]	; (12e4 <nrf_power_clock_isr+0x64>)
    12ac:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    12ae:	b18a      	cbz	r2, 12d4 <nrf_power_clock_isr+0x54>
    return p_reg->INTENSET & mask;
    12b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    12b4:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    12b8:	0792      	lsls	r2, r2, #30
    12ba:	d50b      	bpl.n	12d4 <nrf_power_clock_isr+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    12bc:	2200      	movs	r2, #0
    12be:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    12c4:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    12c6:	4806      	ldr	r0, [pc, #24]	; (12e0 <nrf_power_clock_isr+0x60>)
    12c8:	2101      	movs	r1, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    12ca:	b003      	add	sp, #12
    12cc:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    12d0:	f003 bd41 	b.w	4d56 <clkstarted_handle>
}
    12d4:	b003      	add	sp, #12
    12d6:	f85d fb04 	ldr.w	pc, [sp], #4
    12da:	bf00      	nop
    12dc:	40000100 	.word	0x40000100
    12e0:	20001cfc 	.word	0x20001cfc
    12e4:	40000104 	.word	0x40000104

000012e8 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    12e8:	4b0d      	ldr	r3, [pc, #52]	; (1320 <rtc1_nrf_isr+0x38>)
    12ea:	2200      	movs	r2, #0
    12ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    12f0:	f04f 0220 	mov.w	r2, #32
    12f4:	f3ef 8111 	mrs	r1, BASEPRI
    12f8:	f382 8811 	msr	BASEPRI, r2
    12fc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1300:	4a08      	ldr	r2, [pc, #32]	; (1324 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1302:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    1306:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1308:	1ac0      	subs	r0, r0, r3
    130a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    130e:	4403      	add	r3, r0
    1310:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    1312:	f381 8811 	msr	BASEPRI, r1
    1316:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    131a:	f003 bb35 	b.w	4988 <z_clock_announce>
    131e:	bf00      	nop
    1320:	40011000 	.word	0x40011000
    1324:	200005b0 	.word	0x200005b0

00001328 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    1328:	b573      	push	{r0, r1, r4, r5, r6, lr}
    132a:	481c      	ldr	r0, [pc, #112]	; (139c <z_clock_driver_init+0x74>)
    132c:	f002 fd80 	bl	3e30 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    1330:	b380      	cbz	r0, 1394 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    1332:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1334:	4d1a      	ldr	r5, [pc, #104]	; (13a0 <z_clock_driver_init+0x78>)
    1336:	681b      	ldr	r3, [r3, #0]
    1338:	2101      	movs	r1, #1
    133a:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    133c:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    133e:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    1340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    1344:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    1348:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    134c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1350:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1354:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    135c:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    135e:	681b      	ldr	r3, [r3, #0]
    1360:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1362:	9b01      	ldr	r3, [sp, #4]
    1364:	4b0f      	ldr	r3, [pc, #60]	; (13a4 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    1366:	4631      	mov	r1, r6
    1368:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    136c:	2011      	movs	r0, #17
    136e:	4622      	mov	r2, r4
    1370:	f000 f918 	bl	15a4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    1374:	2011      	movs	r0, #17
    1376:	f000 f905 	bl	1584 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    137a:	4b0b      	ldr	r3, [pc, #44]	; (13a8 <z_clock_driver_init+0x80>)
    137c:	601e      	str	r6, [r3, #0]
    137e:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    1380:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    1384:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1386:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    138a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    138e:	4620      	mov	r0, r4
}
    1390:	b002      	add	sp, #8
    1392:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1398:	e7fa      	b.n	1390 <z_clock_driver_init+0x68>
    139a:	bf00      	nop
    139c:	00005cf7 	.word	0x00005cf7
    13a0:	40011000 	.word	0x40011000
    13a4:	e000e100 	.word	0xe000e100
    13a8:	40011008 	.word	0x40011008

000013ac <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    13ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    13ae:	4e25      	ldr	r6, [pc, #148]	; (1444 <z_clock_set_timeout+0x98>)
    13b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    13b4:	bf08      	it	eq
    13b6:	4630      	moveq	r0, r6
	__asm__ volatile(
    13b8:	f04f 0320 	mov.w	r3, #32
    13bc:	f3ef 8511 	mrs	r5, BASEPRI
    13c0:	f383 8811 	msr	BASEPRI, r3
    13c4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    13c8:	491f      	ldr	r1, [pc, #124]	; (1448 <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    13ca:	4b20      	ldr	r3, [pc, #128]	; (144c <z_clock_set_timeout+0xa0>)
    13cc:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
    13d0:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    13d2:	1ae2      	subs	r2, r4, r3
    13d4:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    13d8:	0212      	lsls	r2, r2, #8
    13da:	d419      	bmi.n	1410 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    13dc:	1e42      	subs	r2, r0, #1
    13de:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    13e2:	42b2      	cmp	r2, r6
    13e4:	bfa8      	it	ge
    13e6:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    13e8:	1c78      	adds	r0, r7, #1
    13ea:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    13ec:	42b0      	cmp	r0, r6
    13ee:	bf94      	ite	ls
    13f0:	1818      	addls	r0, r3, r0
    13f2:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    13f4:	1b04      	subs	r4, r0, r4
    13f6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    13fa:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    13fe:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
    1400:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    1404:	d906      	bls.n	1414 <z_clock_set_timeout+0x68>
	__asm__ volatile(
    1406:	f385 8811 	msr	BASEPRI, r5
    140a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
    1410:	2200      	movs	r2, #0
    1412:	e7e9      	b.n	13e8 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    1414:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    1418:	4a0d      	ldr	r2, [pc, #52]	; (1450 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    141a:	1ac3      	subs	r3, r0, r3
    141c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    1420:	1e5c      	subs	r4, r3, #1
    1422:	4294      	cmp	r4, r2
    1424:	d905      	bls.n	1432 <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1426:	4b0b      	ldr	r3, [pc, #44]	; (1454 <z_clock_set_timeout+0xa8>)
    1428:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    142c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1430:	e7e9      	b.n	1406 <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
    1432:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    1434:	bf02      	ittt	eq
    1436:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1438:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    143c:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    1440:	e7e1      	b.n	1406 <z_clock_set_timeout+0x5a>
    1442:	bf00      	nop
    1444:	00fffffe 	.word	0x00fffffe
    1448:	40011000 	.word	0x40011000
    144c:	200005b0 	.word	0x200005b0
    1450:	007ffffe 	.word	0x007ffffe
    1454:	e000e100 	.word	0xe000e100

00001458 <z_clock_elapsed>:
	__asm__ volatile(
    1458:	f04f 0220 	mov.w	r2, #32
    145c:	f3ef 8311 	mrs	r3, BASEPRI
    1460:	f382 8811 	msr	BASEPRI, r2
    1464:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1468:	4a06      	ldr	r2, [pc, #24]	; (1484 <z_clock_elapsed+0x2c>)
    146a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    146e:	4a06      	ldr	r2, [pc, #24]	; (1488 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1470:	6812      	ldr	r2, [r2, #0]
    1472:	1a80      	subs	r0, r0, r2
    1474:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1478:	f383 8811 	msr	BASEPRI, r3
    147c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1480:	4770      	bx	lr
    1482:	bf00      	nop
    1484:	40011000 	.word	0x40011000
    1488:	200005b0 	.word	0x200005b0

0000148c <z_timer_cycle_get_32>:
	__asm__ volatile(
    148c:	f04f 0320 	mov.w	r3, #32
    1490:	f3ef 8211 	mrs	r2, BASEPRI
    1494:	f383 8811 	msr	BASEPRI, r3
    1498:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    149c:	4906      	ldr	r1, [pc, #24]	; (14b8 <z_timer_cycle_get_32+0x2c>)
    149e:	4b07      	ldr	r3, [pc, #28]	; (14bc <z_timer_cycle_get_32+0x30>)
    14a0:	6808      	ldr	r0, [r1, #0]
    14a2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    14a6:	f382 8811 	msr	BASEPRI, r2
    14aa:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    14ae:	1a1b      	subs	r3, r3, r0
    14b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    14b4:	4418      	add	r0, r3
    14b6:	4770      	bx	lr
    14b8:	200005b0 	.word	0x200005b0
    14bc:	40011000 	.word	0x40011000

000014c0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c0:	4804      	ldr	r0, [pc, #16]	; (14d4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14c2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    14c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    14c6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14c8:	d003      	beq.n	14d2 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14ca:	4903      	ldr	r1, [pc, #12]	; (14d8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    14cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14d0:	600a      	str	r2, [r1, #0]

000014d2 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    14d2:	4770      	bx	lr
    ldr r0, =_kernel
    14d4:	20000718 	.word	0x20000718
    ldr r1, =_SCS_ICSR
    14d8:	e000ed04 	.word	0xe000ed04

000014dc <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    14dc:	4a09      	ldr	r2, [pc, #36]	; (1504 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    14de:	490a      	ldr	r1, [pc, #40]	; (1508 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    14e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    14e2:	6809      	ldr	r1, [r1, #0]
    14e4:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14e6:	4909      	ldr	r1, [pc, #36]	; (150c <arch_swap+0x30>)
	_current->arch.basepri = key;
    14e8:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14ea:	684b      	ldr	r3, [r1, #4]
    14ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    14f0:	604b      	str	r3, [r1, #4]
    14f2:	2300      	movs	r3, #0
    14f4:	f383 8811 	msr	BASEPRI, r3
    14f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    14fc:	6893      	ldr	r3, [r2, #8]
}
    14fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1500:	4770      	bx	lr
    1502:	bf00      	nop
    1504:	20000718 	.word	0x20000718
    1508:	00005c2c 	.word	0x00005c2c
    150c:	e000ed00 	.word	0xe000ed00

00001510 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1510:	4912      	ldr	r1, [pc, #72]	; (155c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1512:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1514:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    1518:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    151a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    151e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1522:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1524:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1528:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    152c:	4f0c      	ldr	r7, [pc, #48]	; (1560 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    152e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1532:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1534:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1536:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1538:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    153a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    153c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    153e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1542:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1544:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1546:	f003 fd06 	bl	4f56 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    154a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    154e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    1552:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1556:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    155a:	4770      	bx	lr
    ldr r1, =_kernel
    155c:	20000718 	.word	0x20000718
    ldr v4, =_SCS_ICSR
    1560:	e000ed04 	.word	0xe000ed04

00001564 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1564:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1568:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    156a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    156e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1572:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1574:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1578:	2902      	cmp	r1, #2
    beq _oops
    157a:	d0ff      	beq.n	157c <_oops>

0000157c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    157c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    157e:	f003 fcdf 	bl	4f40 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1582:	bd01      	pop	{r0, pc}

00001584 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1584:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1586:	2b00      	cmp	r3, #0
    1588:	db08      	blt.n	159c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    158a:	2201      	movs	r2, #1
    158c:	f000 001f 	and.w	r0, r0, #31
    1590:	fa02 f000 	lsl.w	r0, r2, r0
    1594:	095b      	lsrs	r3, r3, #5
    1596:	4a02      	ldr	r2, [pc, #8]	; (15a0 <arch_irq_enable+0x1c>)
    1598:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    159c:	4770      	bx	lr
    159e:	bf00      	nop
    15a0:	e000e100 	.word	0xe000e100

000015a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    15a4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    15a6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15a8:	bfa8      	it	ge
    15aa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    15ae:	f101 0101 	add.w	r1, r1, #1
    15b2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    15b6:	bfae      	itee	ge
    15b8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15bc:	f000 000f 	andlt.w	r0, r0, #15
    15c0:	4b03      	ldrlt	r3, [pc, #12]	; (15d0 <z_arm_irq_priority_set+0x2c>)
    15c2:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15c4:	bfac      	ite	ge
    15c6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15ca:	5419      	strblt	r1, [r3, r0]
}
    15cc:	4770      	bx	lr
    15ce:	bf00      	nop
    15d0:	e000ed14 	.word	0xe000ed14

000015d4 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    15d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    15d6:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    15d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    15da:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
    15dc:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    15de:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
    15e0:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    15e2:	f004 f915 	bl	5810 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    15e6:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    15ea:	4a0a      	ldr	r2, [pc, #40]	; (1614 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    15ec:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    15f0:	f022 0201 	bic.w	r2, r2, #1
    15f4:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    15f6:	9a06      	ldr	r2, [sp, #24]
    15f8:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    15fa:	9a07      	ldr	r2, [sp, #28]
    15fc:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    15fe:	9a08      	ldr	r2, [sp, #32]
    1600:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    1602:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    1606:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    1608:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    160a:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    160c:	2300      	movs	r3, #0
    160e:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1610:	b002      	add	sp, #8
    1612:	bd70      	pop	{r4, r5, r6, pc}
    1614:	00004b8d 	.word	0x00004b8d

00001618 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    1618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    161a:	4605      	mov	r5, r0
    161c:	460c      	mov	r4, r1
    161e:	4617      	mov	r7, r2
    1620:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1622:	f000 fb93 	bl	1d4c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    1626:	4b0a      	ldr	r3, [pc, #40]	; (1650 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    1628:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    162a:	4628      	mov	r0, r5
	_current = main_thread;
    162c:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    162e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1632:	f003 fc90 	bl	4f56 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1636:	4630      	mov	r0, r6
    1638:	f384 8809 	msr	PSP, r4
    163c:	2100      	movs	r1, #0
    163e:	b663      	cpsie	if
    1640:	f381 8811 	msr	BASEPRI, r1
    1644:	f3bf 8f6f 	isb	sy
    1648:	2200      	movs	r2, #0
    164a:	2300      	movs	r3, #0
    164c:	f003 fa9e 	bl	4b8c <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1650:	20000718 	.word	0x20000718

00001654 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    1654:	4901      	ldr	r1, [pc, #4]	; (165c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1656:	2210      	movs	r2, #16
	str r2, [r1]
    1658:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    165a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    165c:	e000ed10 	.word	0xe000ed10

00001660 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1660:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1662:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1666:	bf30      	wfi

	bx lr
    1668:	4770      	bx	lr
    166a:	bf00      	nop

0000166c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    166c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1670:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    1674:	4672      	mov	r2, lr

	push {r0, lr}
    1676:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    1678:	f000 fa46 	bl	1b08 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    167c:	bd01      	pop	{r0, pc}
    167e:	bf00      	nop

00001680 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1680:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1682:	4606      	mov	r6, r0

	if (esf != NULL) {
    1684:	460c      	mov	r4, r1
    1686:	2900      	cmp	r1, #0
    1688:	d038      	beq.n	16fc <z_arm_fatal_error+0x7c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    168a:	2201      	movs	r2, #1
    168c:	f04f 0300 	mov.w	r3, #0
    1690:	f362 0307 	bfi	r3, r2, #0, #8
    1694:	4d1d      	ldr	r5, [pc, #116]	; (170c <z_arm_fatal_error+0x8c>)
    1696:	4a1e      	ldr	r2, [pc, #120]	; (1710 <z_arm_fatal_error+0x90>)
    1698:	481e      	ldr	r0, [pc, #120]	; (1714 <z_arm_fatal_error+0x94>)
    169a:	1aad      	subs	r5, r5, r2
    169c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    16a0:	f365 138f 	bfi	r3, r5, #6, #10
    16a4:	f8ad 3000 	strh.w	r3, [sp]
    16a8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    16ac:	6809      	ldr	r1, [r1, #0]
    16ae:	f003 faf4 	bl	4c9a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    16b2:	2201      	movs	r2, #1
    16b4:	f04f 0300 	mov.w	r3, #0
    16b8:	f362 0307 	bfi	r3, r2, #0, #8
    16bc:	f365 138f 	bfi	r3, r5, #6, #10
    16c0:	f8ad 3000 	strh.w	r3, [sp]
    16c4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    16c8:	68e1      	ldr	r1, [r4, #12]
    16ca:	4813      	ldr	r0, [pc, #76]	; (1718 <z_arm_fatal_error+0x98>)
    16cc:	f003 fae5 	bl	4c9a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    16d0:	2301      	movs	r3, #1
    16d2:	f04f 0200 	mov.w	r2, #0
    16d6:	f363 0207 	bfi	r2, r3, #0, #8
    16da:	f365 128f 	bfi	r2, r5, #6, #10
    16de:	69e1      	ldr	r1, [r4, #28]
    16e0:	480e      	ldr	r0, [pc, #56]	; (171c <z_arm_fatal_error+0x9c>)
    16e2:	f003 faae 	bl	4c42 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    16e6:	f04f 0200 	mov.w	r2, #0
    16ea:	2301      	movs	r3, #1
    16ec:	f363 0207 	bfi	r2, r3, #0, #8
    16f0:	f365 128f 	bfi	r2, r5, #6, #10
    16f4:	69a1      	ldr	r1, [r4, #24]
    16f6:	480a      	ldr	r0, [pc, #40]	; (1720 <z_arm_fatal_error+0xa0>)
    16f8:	f003 faa3 	bl	4c42 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    16fc:	4621      	mov	r1, r4
    16fe:	4630      	mov	r0, r6
}
    1700:	b002      	add	sp, #8
    1702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    1706:	f002 bbd5 	b.w	3eb4 <z_fatal_error>
    170a:	bf00      	nop
    170c:	00005b04 	.word	0x00005b04
    1710:	00005adc 	.word	0x00005adc
    1714:	00005d21 	.word	0x00005d21
    1718:	00005d50 	.word	0x00005d50
    171c:	00005d7f 	.word	0x00005d7f
    1720:	00005d8e 	.word	0x00005d8e

00001724 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1724:	bf30      	wfi
    b z_SysNmiOnReset
    1726:	f7ff bffd 	b.w	1724 <z_SysNmiOnReset>
    172a:	bf00      	nop

0000172c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    172c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    172e:	4b08      	ldr	r3, [pc, #32]	; (1750 <z_arm_prep_c+0x24>)
    1730:	4a08      	ldr	r2, [pc, #32]	; (1754 <z_arm_prep_c+0x28>)
    1732:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1736:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    173c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    1740:	f002 fc36 	bl	3fb0 <z_bss_zero>
	z_data_copy();
    1744:	f002 fc3e 	bl	3fc4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    1748:	f000 face 	bl	1ce8 <z_arm_int_lib_init>
	z_cstart();
    174c:	f002 fc6c 	bl	4028 <z_cstart>
    1750:	00000000 	.word	0x00000000
    1754:	e000ed00 	.word	0xe000ed00

00001758 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1758:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    175a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    175c:	4a0b      	ldr	r2, [pc, #44]	; (178c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    175e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1760:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1762:	bf1e      	ittt	ne
	movne	r1, #0
    1764:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1766:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1768:	f003 ff7b 	blne	5662 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    176c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    176e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1772:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1776:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    177a:	4905      	ldr	r1, [pc, #20]	; (1790 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    177c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    177e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1780:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1782:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1786:	4903      	ldr	r1, [pc, #12]	; (1794 <_isr_wrapper+0x3c>)
	bx r1
    1788:	4708      	bx	r1
    178a:	0000      	.short	0x0000
	ldr r2, =_kernel
    178c:	20000718 	.word	0x20000718
	ldr r1, =_sw_isr_table
    1790:	00005920 	.word	0x00005920
	ldr r1, =z_arm_int_exit
    1794:	000014c1 	.word	0x000014c1

00001798 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1798:	f003 fcda 	bl	5150 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    179c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    179e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    17a2:	4808      	ldr	r0, [pc, #32]	; (17c4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    17a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    17a8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    17aa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    17ae:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    17b2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    17b4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    17b6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    17ba:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    17be:	f7ff ffb5 	bl	172c <z_arm_prep_c>
    17c2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    17c4:	20000fa0 	.word	0x20000fa0

000017c8 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    17c8:	2301      	movs	r3, #1
    17ca:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    17ce:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    17d0:	f363 0107 	bfi	r1, r3, #0, #8
    17d4:	4c33      	ldr	r4, [pc, #204]	; (18a4 <usage_fault.isra.2+0xdc>)
    17d6:	4b34      	ldr	r3, [pc, #208]	; (18a8 <usage_fault.isra.2+0xe0>)
    17d8:	4834      	ldr	r0, [pc, #208]	; (18ac <usage_fault.isra.2+0xe4>)
    17da:	1ae4      	subs	r4, r4, r3
    17dc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    17e0:	f364 118f 	bfi	r1, r4, #6, #10
    17e4:	f003 fa20 	bl	4c28 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    17e8:	4b31      	ldr	r3, [pc, #196]	; (18b0 <usage_fault.isra.2+0xe8>)
    17ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ec:	019a      	lsls	r2, r3, #6
    17ee:	d509      	bpl.n	1804 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    17f0:	f04f 0100 	mov.w	r1, #0
    17f4:	2301      	movs	r3, #1
    17f6:	f363 0107 	bfi	r1, r3, #0, #8
    17fa:	f364 118f 	bfi	r1, r4, #6, #10
    17fe:	482d      	ldr	r0, [pc, #180]	; (18b4 <usage_fault.isra.2+0xec>)
    1800:	f003 fa12 	bl	4c28 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1804:	4b2a      	ldr	r3, [pc, #168]	; (18b0 <usage_fault.isra.2+0xe8>)
    1806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1808:	01db      	lsls	r3, r3, #7
    180a:	d509      	bpl.n	1820 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    180c:	f04f 0100 	mov.w	r1, #0
    1810:	2301      	movs	r3, #1
    1812:	f363 0107 	bfi	r1, r3, #0, #8
    1816:	f364 118f 	bfi	r1, r4, #6, #10
    181a:	4827      	ldr	r0, [pc, #156]	; (18b8 <usage_fault.isra.2+0xf0>)
    181c:	f003 fa04 	bl	4c28 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1820:	4b23      	ldr	r3, [pc, #140]	; (18b0 <usage_fault.isra.2+0xe8>)
    1822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1824:	0318      	lsls	r0, r3, #12
    1826:	d509      	bpl.n	183c <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  No coprocessor instructions");
    1828:	f04f 0100 	mov.w	r1, #0
    182c:	2301      	movs	r3, #1
    182e:	f363 0107 	bfi	r1, r3, #0, #8
    1832:	f364 118f 	bfi	r1, r4, #6, #10
    1836:	4821      	ldr	r0, [pc, #132]	; (18bc <usage_fault.isra.2+0xf4>)
    1838:	f003 f9f6 	bl	4c28 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    183c:	4b1c      	ldr	r3, [pc, #112]	; (18b0 <usage_fault.isra.2+0xe8>)
    183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1840:	0359      	lsls	r1, r3, #13
    1842:	d509      	bpl.n	1858 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1844:	f04f 0100 	mov.w	r1, #0
    1848:	2301      	movs	r3, #1
    184a:	f363 0107 	bfi	r1, r3, #0, #8
    184e:	f364 118f 	bfi	r1, r4, #6, #10
    1852:	481b      	ldr	r0, [pc, #108]	; (18c0 <usage_fault.isra.2+0xf8>)
    1854:	f003 f9e8 	bl	4c28 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1858:	4b15      	ldr	r3, [pc, #84]	; (18b0 <usage_fault.isra.2+0xe8>)
    185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    185c:	039a      	lsls	r2, r3, #14
    185e:	d509      	bpl.n	1874 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1860:	f04f 0100 	mov.w	r1, #0
    1864:	2301      	movs	r3, #1
    1866:	f363 0107 	bfi	r1, r3, #0, #8
    186a:	f364 118f 	bfi	r1, r4, #6, #10
    186e:	4815      	ldr	r0, [pc, #84]	; (18c4 <usage_fault.isra.2+0xfc>)
    1870:	f003 f9da 	bl	4c28 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1874:	4b0e      	ldr	r3, [pc, #56]	; (18b0 <usage_fault.isra.2+0xe8>)
    1876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1878:	03db      	lsls	r3, r3, #15
    187a:	d509      	bpl.n	1890 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    187c:	f04f 0100 	mov.w	r1, #0
    1880:	2301      	movs	r3, #1
    1882:	f363 0107 	bfi	r1, r3, #0, #8
    1886:	f364 118f 	bfi	r1, r4, #6, #10
    188a:	480f      	ldr	r0, [pc, #60]	; (18c8 <usage_fault.isra.2+0x100>)
    188c:	f003 f9cc 	bl	4c28 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1890:	4a07      	ldr	r2, [pc, #28]	; (18b0 <usage_fault.isra.2+0xe8>)
    1892:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1894:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1898:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    189c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    189e:	2000      	movs	r0, #0
    18a0:	bd10      	pop	{r4, pc}
    18a2:	bf00      	nop
    18a4:	00005b04 	.word	0x00005b04
    18a8:	00005adc 	.word	0x00005adc
    18ac:	00005f1c 	.word	0x00005f1c
    18b0:	e000ed00 	.word	0xe000ed00
    18b4:	00005f34 	.word	0x00005f34
    18b8:	00005f47 	.word	0x00005f47
    18bc:	00005f61 	.word	0x00005f61
    18c0:	00005f7f 	.word	0x00005f7f
    18c4:	00005fa4 	.word	0x00005fa4
    18c8:	00005fbe 	.word	0x00005fbe

000018cc <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    18cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    18ce:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    18d0:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    18d2:	f04f 0100 	mov.w	r1, #0
    18d6:	f363 0107 	bfi	r1, r3, #0, #8
    18da:	4c36      	ldr	r4, [pc, #216]	; (19b4 <mem_manage_fault.isra.4+0xe8>)
    18dc:	4b36      	ldr	r3, [pc, #216]	; (19b8 <mem_manage_fault.isra.4+0xec>)
    18de:	1ae4      	subs	r4, r4, r3
    18e0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    18e4:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    18e8:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    18ea:	4834      	ldr	r0, [pc, #208]	; (19bc <mem_manage_fault.isra.4+0xf0>)
    18ec:	f003 f99c 	bl	4c28 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18f0:	4b33      	ldr	r3, [pc, #204]	; (19c0 <mem_manage_fault.isra.4+0xf4>)
    18f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18f4:	06d9      	lsls	r1, r3, #27
    18f6:	d509      	bpl.n	190c <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    18f8:	f04f 0100 	mov.w	r1, #0
    18fc:	2301      	movs	r3, #1
    18fe:	f363 0107 	bfi	r1, r3, #0, #8
    1902:	f364 118f 	bfi	r1, r4, #6, #10
    1906:	482f      	ldr	r0, [pc, #188]	; (19c4 <mem_manage_fault.isra.4+0xf8>)
    1908:	f003 f98e 	bl	4c28 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    190c:	4b2c      	ldr	r3, [pc, #176]	; (19c0 <mem_manage_fault.isra.4+0xf4>)
    190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1910:	071a      	lsls	r2, r3, #28
    1912:	d509      	bpl.n	1928 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    1914:	f04f 0100 	mov.w	r1, #0
    1918:	2301      	movs	r3, #1
    191a:	f363 0107 	bfi	r1, r3, #0, #8
    191e:	f364 118f 	bfi	r1, r4, #6, #10
    1922:	4829      	ldr	r0, [pc, #164]	; (19c8 <mem_manage_fault.isra.4+0xfc>)
    1924:	f003 f980 	bl	4c28 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1928:	4d25      	ldr	r5, [pc, #148]	; (19c0 <mem_manage_fault.isra.4+0xf4>)
    192a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    192c:	079b      	lsls	r3, r3, #30
    192e:	d51c      	bpl.n	196a <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    1930:	2301      	movs	r3, #1
    1932:	f04f 0100 	mov.w	r1, #0
    1936:	f363 0107 	bfi	r1, r3, #0, #8
    193a:	f364 118f 	bfi	r1, r4, #6, #10
    193e:	4823      	ldr	r0, [pc, #140]	; (19cc <mem_manage_fault.isra.4+0x100>)
    1940:	f003 f972 	bl	4c28 <log_0>
		mmfar = SCB->MMFAR;
    1944:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1946:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1948:	0618      	lsls	r0, r3, #24
    194a:	d50e      	bpl.n	196a <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    194c:	f04f 0200 	mov.w	r2, #0
    1950:	2301      	movs	r3, #1
    1952:	f363 0207 	bfi	r2, r3, #0, #8
    1956:	f364 128f 	bfi	r2, r4, #6, #10
    195a:	481d      	ldr	r0, [pc, #116]	; (19d0 <mem_manage_fault.isra.4+0x104>)
    195c:	f003 f971 	bl	4c42 <log_1>
			if (from_hard_fault) {
    1960:	b11f      	cbz	r7, 196a <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1962:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1968:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    196a:	4b15      	ldr	r3, [pc, #84]	; (19c0 <mem_manage_fault.isra.4+0xf4>)
    196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    196e:	07da      	lsls	r2, r3, #31
    1970:	d509      	bpl.n	1986 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    1972:	f04f 0100 	mov.w	r1, #0
    1976:	2301      	movs	r3, #1
    1978:	f363 0107 	bfi	r1, r3, #0, #8
    197c:	f364 118f 	bfi	r1, r4, #6, #10
    1980:	4814      	ldr	r0, [pc, #80]	; (19d4 <mem_manage_fault.isra.4+0x108>)
    1982:	f003 f951 	bl	4c28 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1986:	4b0e      	ldr	r3, [pc, #56]	; (19c0 <mem_manage_fault.isra.4+0xf4>)
    1988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    198a:	069b      	lsls	r3, r3, #26
    198c:	d509      	bpl.n	19a2 <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    198e:	f04f 0100 	mov.w	r1, #0
    1992:	2301      	movs	r3, #1
    1994:	f363 0107 	bfi	r1, r3, #0, #8
    1998:	f364 118f 	bfi	r1, r4, #6, #10
    199c:	480e      	ldr	r0, [pc, #56]	; (19d8 <mem_manage_fault.isra.4+0x10c>)
    199e:	f003 f943 	bl	4c28 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    19a2:	4b07      	ldr	r3, [pc, #28]	; (19c0 <mem_manage_fault.isra.4+0xf4>)
    19a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    19a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    19a8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    19aa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    19ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    19b0:	7030      	strb	r0, [r6, #0]
}
    19b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19b4:	00005b04 	.word	0x00005b04
    19b8:	00005adc 	.word	0x00005adc
    19bc:	00005e44 	.word	0x00005e44
    19c0:	e000ed00 	.word	0xe000ed00
    19c4:	00005e5a 	.word	0x00005e5a
    19c8:	00005e8d 	.word	0x00005e8d
    19cc:	00005ea0 	.word	0x00005ea0
    19d0:	00005eb8 	.word	0x00005eb8
    19d4:	00005ece 	.word	0x00005ece
    19d8:	00005eed 	.word	0x00005eed

000019dc <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    19dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    19de:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    19e0:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    19e2:	f04f 0100 	mov.w	r1, #0
    19e6:	f363 0107 	bfi	r1, r3, #0, #8
    19ea:	4c3c      	ldr	r4, [pc, #240]	; (1adc <bus_fault.isra.5+0x100>)
    19ec:	4b3c      	ldr	r3, [pc, #240]	; (1ae0 <bus_fault.isra.5+0x104>)
    19ee:	1ae4      	subs	r4, r4, r3
    19f0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    19f4:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    19f8:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    19fa:	483a      	ldr	r0, [pc, #232]	; (1ae4 <bus_fault.isra.5+0x108>)
    19fc:	f003 f914 	bl	4c28 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a00:	4b39      	ldr	r3, [pc, #228]	; (1ae8 <bus_fault.isra.5+0x10c>)
    1a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a04:	04d9      	lsls	r1, r3, #19
    1a06:	d509      	bpl.n	1a1c <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    1a08:	f04f 0100 	mov.w	r1, #0
    1a0c:	2301      	movs	r3, #1
    1a0e:	f363 0107 	bfi	r1, r3, #0, #8
    1a12:	f364 118f 	bfi	r1, r4, #6, #10
    1a16:	4835      	ldr	r0, [pc, #212]	; (1aec <bus_fault.isra.5+0x110>)
    1a18:	f003 f906 	bl	4c28 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1a1c:	4b32      	ldr	r3, [pc, #200]	; (1ae8 <bus_fault.isra.5+0x10c>)
    1a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a20:	051a      	lsls	r2, r3, #20
    1a22:	d509      	bpl.n	1a38 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    1a24:	f04f 0100 	mov.w	r1, #0
    1a28:	2301      	movs	r3, #1
    1a2a:	f363 0107 	bfi	r1, r3, #0, #8
    1a2e:	f364 118f 	bfi	r1, r4, #6, #10
    1a32:	482f      	ldr	r0, [pc, #188]	; (1af0 <bus_fault.isra.5+0x114>)
    1a34:	f003 f8f8 	bl	4c28 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a38:	4d2b      	ldr	r5, [pc, #172]	; (1ae8 <bus_fault.isra.5+0x10c>)
    1a3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1a3c:	059b      	lsls	r3, r3, #22
    1a3e:	d51c      	bpl.n	1a7a <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    1a40:	2301      	movs	r3, #1
    1a42:	f04f 0100 	mov.w	r1, #0
    1a46:	f363 0107 	bfi	r1, r3, #0, #8
    1a4a:	f364 118f 	bfi	r1, r4, #6, #10
    1a4e:	4829      	ldr	r0, [pc, #164]	; (1af4 <bus_fault.isra.5+0x118>)
    1a50:	f003 f8ea 	bl	4c28 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    1a54:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1a56:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1a58:	0418      	lsls	r0, r3, #16
    1a5a:	d50e      	bpl.n	1a7a <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1a5c:	f04f 0200 	mov.w	r2, #0
    1a60:	2301      	movs	r3, #1
    1a62:	f363 0207 	bfi	r2, r3, #0, #8
    1a66:	f364 128f 	bfi	r2, r4, #6, #10
    1a6a:	4823      	ldr	r0, [pc, #140]	; (1af8 <bus_fault.isra.5+0x11c>)
    1a6c:	f003 f8e9 	bl	4c42 <log_1>
			if (from_hard_fault) {
    1a70:	b11f      	cbz	r7, 1a7a <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a72:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1a78:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a7a:	4b1b      	ldr	r3, [pc, #108]	; (1ae8 <bus_fault.isra.5+0x10c>)
    1a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a7e:	0559      	lsls	r1, r3, #21
    1a80:	d509      	bpl.n	1a96 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    1a82:	f04f 0100 	mov.w	r1, #0
    1a86:	2301      	movs	r3, #1
    1a88:	f363 0107 	bfi	r1, r3, #0, #8
    1a8c:	f364 118f 	bfi	r1, r4, #6, #10
    1a90:	481a      	ldr	r0, [pc, #104]	; (1afc <bus_fault.isra.5+0x120>)
    1a92:	f003 f8c9 	bl	4c28 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a96:	4b14      	ldr	r3, [pc, #80]	; (1ae8 <bus_fault.isra.5+0x10c>)
    1a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a9a:	05d2      	lsls	r2, r2, #23
    1a9c:	d511      	bpl.n	1ac2 <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    1a9e:	f04f 0100 	mov.w	r1, #0
    1aa2:	2301      	movs	r3, #1
    1aa4:	f363 0107 	bfi	r1, r3, #0, #8
    1aa8:	4815      	ldr	r0, [pc, #84]	; (1b00 <bus_fault.isra.5+0x124>)
    1aaa:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1aae:	f003 f8bb 	bl	4c28 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1ab2:	4a0d      	ldr	r2, [pc, #52]	; (1ae8 <bus_fault.isra.5+0x10c>)
    1ab4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1ab6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1ab8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1abc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1abe:	7030      	strb	r0, [r6, #0]
}
    1ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ac4:	049b      	lsls	r3, r3, #18
    1ac6:	d5f4      	bpl.n	1ab2 <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1ac8:	f04f 0100 	mov.w	r1, #0
    1acc:	2301      	movs	r3, #1
    1ace:	f363 0107 	bfi	r1, r3, #0, #8
    1ad2:	f364 118f 	bfi	r1, r4, #6, #10
    1ad6:	480b      	ldr	r0, [pc, #44]	; (1b04 <bus_fault.isra.5+0x128>)
    1ad8:	e7e9      	b.n	1aae <bus_fault.isra.5+0xd2>
    1ada:	bf00      	nop
    1adc:	00005b04 	.word	0x00005b04
    1ae0:	00005adc 	.word	0x00005adc
    1ae4:	00005dbc 	.word	0x00005dbc
    1ae8:	e000ed00 	.word	0xe000ed00
    1aec:	00005dd2 	.word	0x00005dd2
    1af0:	00005e8d 	.word	0x00005e8d
    1af4:	00005de3 	.word	0x00005de3
    1af8:	00005dfc 	.word	0x00005dfc
    1afc:	00005e11 	.word	0x00005e11
    1b00:	00005e2c 	.word	0x00005e2c
    1b04:	00005eed 	.word	0x00005eed

00001b08 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    1b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1b0c:	4b64      	ldr	r3, [pc, #400]	; (1ca0 <z_arm_fault+0x198>)
    1b0e:	685e      	ldr	r6, [r3, #4]
{
    1b10:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1b12:	f3c6 0408 	ubfx	r4, r6, #0, #9
    1b16:	2500      	movs	r5, #0
    1b18:	f385 8811 	msr	BASEPRI, r5
    1b1c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1b20:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1b24:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1b28:	d111      	bne.n	1b4e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1b2a:	f002 030c 	and.w	r3, r2, #12
    1b2e:	2b08      	cmp	r3, #8
    1b30:	d10f      	bne.n	1b52 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1b32:	2301      	movs	r3, #1
    1b34:	f04f 0100 	mov.w	r1, #0
    1b38:	f363 0107 	bfi	r1, r3, #0, #8
    1b3c:	4a59      	ldr	r2, [pc, #356]	; (1ca4 <z_arm_fault+0x19c>)
    1b3e:	4b5a      	ldr	r3, [pc, #360]	; (1ca8 <z_arm_fault+0x1a0>)
    1b40:	485a      	ldr	r0, [pc, #360]	; (1cac <z_arm_fault+0x1a4>)
    1b42:	1a9b      	subs	r3, r3, r2
    1b44:	08db      	lsrs	r3, r3, #3
    1b46:	f363 118f 	bfi	r1, r3, #6, #10
    1b4a:	f003 f86d 	bl	4c28 <log_0>
		return NULL;
    1b4e:	462f      	mov	r7, r5
    1b50:	e004      	b.n	1b5c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1b52:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1b54:	bf4e      	itee	mi
    1b56:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    1b58:	4607      	movpl	r7, r0
			*nested_exc = true;
    1b5a:	2501      	movpl	r5, #1
	*recoverable = false;
    1b5c:	2300      	movs	r3, #0
    1b5e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1b62:	1ee3      	subs	r3, r4, #3
    1b64:	2b09      	cmp	r3, #9
    1b66:	d87f      	bhi.n	1c68 <z_arm_fault+0x160>
    1b68:	e8df f003 	tbb	[pc, r3]
    1b6c:	4c6d6905 	.word	0x4c6d6905
    1b70:	7e7e7e7e 	.word	0x7e7e7e7e
    1b74:	717e      	.short	0x717e
	PR_FAULT_INFO("***** HARD FAULT *****");
    1b76:	2301      	movs	r3, #1
    1b78:	f04f 0100 	mov.w	r1, #0
    1b7c:	f363 0107 	bfi	r1, r3, #0, #8
    1b80:	4e49      	ldr	r6, [pc, #292]	; (1ca8 <z_arm_fault+0x1a0>)
    1b82:	4b48      	ldr	r3, [pc, #288]	; (1ca4 <z_arm_fault+0x19c>)
    1b84:	484a      	ldr	r0, [pc, #296]	; (1cb0 <z_arm_fault+0x1a8>)
    1b86:	1af6      	subs	r6, r6, r3
    1b88:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    1b8c:	f366 118f 	bfi	r1, r6, #6, #10
    1b90:	f003 f84a 	bl	4c28 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1b94:	4b42      	ldr	r3, [pc, #264]	; (1ca0 <z_arm_fault+0x198>)
    1b96:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    1b98:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1b9c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    1ba0:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1ba4:	d00b      	beq.n	1bbe <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    1ba6:	f04f 0100 	mov.w	r1, #0
    1baa:	2301      	movs	r3, #1
    1bac:	f363 0107 	bfi	r1, r3, #0, #8
    1bb0:	4840      	ldr	r0, [pc, #256]	; (1cb4 <z_arm_fault+0x1ac>)
    1bb2:	f366 118f 	bfi	r1, r6, #6, #10
	PR_FAULT_INFO(
    1bb6:	f003 f837 	bl	4c28 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1bba:	2400      	movs	r4, #0
    1bbc:	e025      	b.n	1c0a <z_arm_fault+0x102>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bc0:	005b      	lsls	r3, r3, #1
    1bc2:	d522      	bpl.n	1c0a <z_arm_fault+0x102>
		PR_EXC("  Fault escalation (see below)");
    1bc4:	2301      	movs	r3, #1
    1bc6:	f04f 0100 	mov.w	r1, #0
    1bca:	f363 0107 	bfi	r1, r3, #0, #8
    1bce:	f366 118f 	bfi	r1, r6, #6, #10
    1bd2:	4839      	ldr	r0, [pc, #228]	; (1cb8 <z_arm_fault+0x1b0>)
    1bd4:	f003 f828 	bl	4c28 <log_0>
		if (SCB_MMFSR != 0) {
    1bd8:	4b38      	ldr	r3, [pc, #224]	; (1cbc <z_arm_fault+0x1b4>)
    1bda:	781b      	ldrb	r3, [r3, #0]
    1bdc:	b12b      	cbz	r3, 1bea <z_arm_fault+0xe2>
			reason = mem_manage_fault(esf, 1, recoverable);
    1bde:	f10d 0107 	add.w	r1, sp, #7
    1be2:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1be4:	f7ff fe72 	bl	18cc <mem_manage_fault.isra.4>
    1be8:	e00e      	b.n	1c08 <z_arm_fault+0x100>
		} else if (SCB_BFSR != 0) {
    1bea:	4b35      	ldr	r3, [pc, #212]	; (1cc0 <z_arm_fault+0x1b8>)
    1bec:	781b      	ldrb	r3, [r3, #0]
    1bee:	b12b      	cbz	r3, 1bfc <z_arm_fault+0xf4>
			reason = bus_fault(esf, 1, recoverable);
    1bf0:	f10d 0107 	add.w	r1, sp, #7
    1bf4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1bf6:	f7ff fef1 	bl	19dc <bus_fault.isra.5>
    1bfa:	e005      	b.n	1c08 <z_arm_fault+0x100>
		} else if (SCB_UFSR != 0) {
    1bfc:	4b31      	ldr	r3, [pc, #196]	; (1cc4 <z_arm_fault+0x1bc>)
    1bfe:	881b      	ldrh	r3, [r3, #0]
    1c00:	b29b      	uxth	r3, r3
    1c02:	b113      	cbz	r3, 1c0a <z_arm_fault+0x102>
			reason = usage_fault(esf);
    1c04:	f7ff fde0 	bl	17c8 <usage_fault.isra.2>
    1c08:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c0e:	b99b      	cbnz	r3, 1c38 <z_arm_fault+0x130>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1c10:	2220      	movs	r2, #32
    1c12:	4639      	mov	r1, r7
    1c14:	a802      	add	r0, sp, #8
    1c16:	f003 f9d3 	bl	4fc0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c1c:	2d00      	cmp	r5, #0
    1c1e:	d03a      	beq.n	1c96 <z_arm_fault+0x18e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1c20:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1c24:	b922      	cbnz	r2, 1c30 <z_arm_fault+0x128>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1c26:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1c2a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c2e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1c30:	a902      	add	r1, sp, #8
    1c32:	4620      	mov	r0, r4
    1c34:	f7ff fd24 	bl	1680 <z_arm_fatal_error>
}
    1c38:	b00a      	add	sp, #40	; 0x28
    1c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    1c3e:	f10d 0107 	add.w	r1, sp, #7
    1c42:	2000      	movs	r0, #0
    1c44:	e7ce      	b.n	1be4 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    1c46:	f10d 0107 	add.w	r1, sp, #7
    1c4a:	2000      	movs	r0, #0
    1c4c:	e7d3      	b.n	1bf6 <z_arm_fault+0xee>
	PR_FAULT_INFO(
    1c4e:	2301      	movs	r3, #1
    1c50:	f04f 0100 	mov.w	r1, #0
    1c54:	f363 0107 	bfi	r1, r3, #0, #8
    1c58:	4a12      	ldr	r2, [pc, #72]	; (1ca4 <z_arm_fault+0x19c>)
    1c5a:	4b13      	ldr	r3, [pc, #76]	; (1ca8 <z_arm_fault+0x1a0>)
    1c5c:	481a      	ldr	r0, [pc, #104]	; (1cc8 <z_arm_fault+0x1c0>)
    1c5e:	1a9b      	subs	r3, r3, r2
    1c60:	08db      	lsrs	r3, r3, #3
    1c62:	f363 118f 	bfi	r1, r3, #6, #10
    1c66:	e7a6      	b.n	1bb6 <z_arm_fault+0xae>
	PR_FAULT_INFO("***** %s %d) *****",
    1c68:	2201      	movs	r2, #1
    1c6a:	f04f 0300 	mov.w	r3, #0
    1c6e:	f362 0307 	bfi	r3, r2, #0, #8
    1c72:	490d      	ldr	r1, [pc, #52]	; (1ca8 <z_arm_fault+0x1a0>)
    1c74:	4a0b      	ldr	r2, [pc, #44]	; (1ca4 <z_arm_fault+0x19c>)
    1c76:	4815      	ldr	r0, [pc, #84]	; (1ccc <z_arm_fault+0x1c4>)
    1c78:	1a89      	subs	r1, r1, r2
    1c7a:	08c9      	lsrs	r1, r1, #3
    1c7c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    1c80:	f361 138f 	bfi	r3, r1, #6, #10
    1c84:	f1a4 0210 	sub.w	r2, r4, #16
    1c88:	4911      	ldr	r1, [pc, #68]	; (1cd0 <z_arm_fault+0x1c8>)
    1c8a:	bf18      	it	ne
    1c8c:	4601      	movne	r1, r0
    1c8e:	4811      	ldr	r0, [pc, #68]	; (1cd4 <z_arm_fault+0x1cc>)
    1c90:	f002 ffeb 	bl	4c6a <log_2>
    1c94:	e791      	b.n	1bba <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1c9a:	f023 0301 	bic.w	r3, r3, #1
    1c9e:	e7c6      	b.n	1c2e <z_arm_fault+0x126>
    1ca0:	e000ed00 	.word	0xe000ed00
    1ca4:	00005adc 	.word	0x00005adc
    1ca8:	00005b04 	.word	0x00005b04
    1cac:	00005fe9 	.word	0x00005fe9
    1cb0:	00006014 	.word	0x00006014
    1cb4:	0000602b 	.word	0x0000602b
    1cb8:	0000604c 	.word	0x0000604c
    1cbc:	e000ed28 	.word	0xe000ed28
    1cc0:	e000ed29 	.word	0xe000ed29
    1cc4:	e000ed2a 	.word	0xe000ed2a
    1cc8:	0000606b 	.word	0x0000606b
    1ccc:	000060b6 	.word	0x000060b6
    1cd0:	000060a1 	.word	0x000060a1
    1cd4:	000060cf 	.word	0x000060cf

00001cd8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1cd8:	4a02      	ldr	r2, [pc, #8]	; (1ce4 <z_arm_fault_init+0xc>)
    1cda:	6953      	ldr	r3, [r2, #20]
    1cdc:	f043 0310 	orr.w	r3, r3, #16
    1ce0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1ce2:	4770      	bx	lr
    1ce4:	e000ed00 	.word	0xe000ed00

00001ce8 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ce8:	4804      	ldr	r0, [pc, #16]	; (1cfc <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    1cea:	2300      	movs	r3, #0
    1cec:	2120      	movs	r1, #32
    1cee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1cf0:	3301      	adds	r3, #1
    1cf2:	2b27      	cmp	r3, #39	; 0x27
    1cf4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1cf8:	d1f9      	bne.n	1cee <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1cfa:	4770      	bx	lr
    1cfc:	e000e100 	.word	0xe000e100

00001d00 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1d00:	b538      	push	{r3, r4, r5, lr}
    1d02:	4605      	mov	r5, r0
	__asm__ volatile(
    1d04:	f04f 0320 	mov.w	r3, #32
    1d08:	f3ef 8411 	mrs	r4, BASEPRI
    1d0c:	f383 8811 	msr	BASEPRI, r3
    1d10:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1d14:	f002 fbda 	bl	44cc <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1d18:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <z_impl_k_thread_abort+0x44>)
    1d1a:	689b      	ldr	r3, [r3, #8]
    1d1c:	42ab      	cmp	r3, r5
    1d1e:	d10b      	bne.n	1d38 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1d20:	4b09      	ldr	r3, [pc, #36]	; (1d48 <z_impl_k_thread_abort+0x48>)
    1d22:	685a      	ldr	r2, [r3, #4]
    1d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1d28:	b912      	cbnz	r2, 1d30 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    1d2a:	4620      	mov	r0, r4
    1d2c:	f7ff fbd6 	bl	14dc <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1d30:	685a      	ldr	r2, [r3, #4]
    1d32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1d36:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1d38:	4620      	mov	r0, r4
}
    1d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    1d3e:	f003 bce1 	b.w	5704 <z_reschedule_irqlock>
    1d42:	bf00      	nop
    1d44:	20000718 	.word	0x20000718
    1d48:	e000ed00 	.word	0xe000ed00

00001d4c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1d4e:	4b08      	ldr	r3, [pc, #32]	; (1d70 <z_arm_configure_static_mpu_regions+0x24>)
    1d50:	9301      	str	r3, [sp, #4]
    1d52:	4b08      	ldr	r3, [pc, #32]	; (1d74 <z_arm_configure_static_mpu_regions+0x28>)
    1d54:	9302      	str	r3, [sp, #8]
    1d56:	4b08      	ldr	r3, [pc, #32]	; (1d78 <z_arm_configure_static_mpu_regions+0x2c>)
    1d58:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    1d5a:	ab01      	add	r3, sp, #4
    1d5c:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1d5e:	4a07      	ldr	r2, [pc, #28]	; (1d7c <z_arm_configure_static_mpu_regions+0x30>)
    1d60:	4b07      	ldr	r3, [pc, #28]	; (1d80 <z_arm_configure_static_mpu_regions+0x34>)
    1d62:	2101      	movs	r1, #1
    1d64:	4668      	mov	r0, sp
    1d66:	f000 f8b5 	bl	1ed4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1d6a:	b005      	add	sp, #20
    1d6c:	f85d fb04 	ldr.w	pc, [sp], #4
    1d70:	20000000 	.word	0x20000000
    1d74:	00000000 	.word	0x00000000
    1d78:	060b0000 	.word	0x060b0000
    1d7c:	20000000 	.word	0x20000000
    1d80:	20010000 	.word	0x20010000

00001d84 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    1d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1d86:	4f2e      	ldr	r7, [pc, #184]	; (1e40 <mpu_configure_regions+0xbc>)
    1d88:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1d8a:	2100      	movs	r1, #0
    1d8c:	42b1      	cmp	r1, r6
    1d8e:	da22      	bge.n	1dd6 <mpu_configure_regions+0x52>
		if (regions[i]->size == 0U) {
    1d90:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    1d94:	f8dc 4004 	ldr.w	r4, [ip, #4]
    1d98:	2c00      	cmp	r4, #0
    1d9a:	d04f      	beq.n	1e3c <mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1d9c:	b1eb      	cbz	r3, 1dda <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    1d9e:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1da2:	ea14 0f0e 	tst.w	r4, lr
    1da6:	d106      	bne.n	1db6 <mpu_configure_regions+0x32>
		&&
    1da8:	2c1f      	cmp	r4, #31
    1daa:	d904      	bls.n	1db6 <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    1dac:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    1db0:	ea1e 0f05 	tst.w	lr, r5
    1db4:	d011      	beq.n	1dda <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    1db6:	2301      	movs	r3, #1
    1db8:	f04f 0200 	mov.w	r2, #0
    1dbc:	f363 0207 	bfi	r2, r3, #0, #8
    1dc0:	4820      	ldr	r0, [pc, #128]	; (1e44 <mpu_configure_regions+0xc0>)
    1dc2:	4b21      	ldr	r3, [pc, #132]	; (1e48 <mpu_configure_regions+0xc4>)
    1dc4:	1a1b      	subs	r3, r3, r0
    1dc6:	08db      	lsrs	r3, r3, #3
    1dc8:	4820      	ldr	r0, [pc, #128]	; (1e4c <mpu_configure_regions+0xc8>)
    1dca:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1dce:	f002 ff38 	bl	4c42 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    1dd2:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1dd6:	4610      	mov	r0, r2
    1dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1dda:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    1ddc:	b2d5      	uxtb	r5, r2
	region_conf.base = new_region->start;
    1dde:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    1de2:	f8dc c008 	ldr.w	ip, [ip, #8]
    1de6:	d91a      	bls.n	1e1e <mpu_configure_regions+0x9a>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1de8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1dec:	d819      	bhi.n	1e22 <mpu_configure_regions+0x9e>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1dee:	3c01      	subs	r4, #1
    1df0:	fab4 f484 	clz	r4, r4
    1df4:	f1c4 041f 	rsb	r4, r4, #31
    1df8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    1dfa:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1dfc:	ea4c 0404 	orr.w	r4, ip, r4
    1e00:	d911      	bls.n	1e26 <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1e02:	2301      	movs	r3, #1
    1e04:	f04f 0200 	mov.w	r2, #0
    1e08:	f363 0207 	bfi	r2, r3, #0, #8
    1e0c:	490d      	ldr	r1, [pc, #52]	; (1e44 <mpu_configure_regions+0xc0>)
    1e0e:	4b0e      	ldr	r3, [pc, #56]	; (1e48 <mpu_configure_regions+0xc4>)
    1e10:	480f      	ldr	r0, [pc, #60]	; (1e50 <mpu_configure_regions+0xcc>)
    1e12:	1a5b      	subs	r3, r3, r1
    1e14:	08db      	lsrs	r3, r3, #3
    1e16:	f363 128f 	bfi	r2, r3, #6, #10
    1e1a:	4629      	mov	r1, r5
    1e1c:	e7d7      	b.n	1dce <mpu_configure_regions+0x4a>
		return REGION_32B;
    1e1e:	2408      	movs	r4, #8
    1e20:	e7eb      	b.n	1dfa <mpu_configure_regions+0x76>
		return REGION_4G;
    1e22:	243e      	movs	r4, #62	; 0x3e
    1e24:	e7e9      	b.n	1dfa <mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e26:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    1e2a:	432a      	orrs	r2, r5
    1e2c:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e30:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1e34:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e36:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e38:	613c      	str	r4, [r7, #16]
		reg_index++;
    1e3a:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    1e3c:	3101      	adds	r1, #1
    1e3e:	e7a5      	b.n	1d8c <mpu_configure_regions+0x8>
    1e40:	e000ed90 	.word	0xe000ed90
    1e44:	00005adc 	.word	0x00005adc
    1e48:	00005afc 	.word	0x00005afc
    1e4c:	000060e6 	.word	0x000060e6
    1e50:	00006109 	.word	0x00006109

00001e54 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1e54:	4b03      	ldr	r3, [pc, #12]	; (1e64 <arm_core_mpu_enable+0x10>)
    1e56:	2205      	movs	r2, #5
    1e58:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1e5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e5e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1e62:	4770      	bx	lr
    1e64:	e000ed90 	.word	0xe000ed90

00001e68 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1e68:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1e6c:	4b01      	ldr	r3, [pc, #4]	; (1e74 <arm_core_mpu_disable+0xc>)
    1e6e:	2200      	movs	r2, #0
    1e70:	605a      	str	r2, [r3, #4]
}
    1e72:	4770      	bx	lr
    1e74:	e000ed90 	.word	0xe000ed90

00001e78 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1e78:	4913      	ldr	r1, [pc, #76]	; (1ec8 <arm_mpu_init+0x50>)
    1e7a:	6808      	ldr	r0, [r1, #0]
    1e7c:	2808      	cmp	r0, #8
{
    1e7e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1e80:	d81e      	bhi.n	1ec0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1e82:	f7ff fff1 	bl	1e68 <arm_core_mpu_disable>
	MPU->RNR = index;
    1e86:	4c11      	ldr	r4, [pc, #68]	; (1ecc <arm_mpu_init+0x54>)
    1e88:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e8a:	2200      	movs	r2, #0
    1e8c:	4290      	cmp	r0, r2
    1e8e:	f101 010c 	add.w	r1, r1, #12
    1e92:	d105      	bne.n	1ea0 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1e94:	4b0e      	ldr	r3, [pc, #56]	; (1ed0 <arm_mpu_init+0x58>)
    1e96:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1e98:	f7ff ffdc 	bl	1e54 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1e9c:	2000      	movs	r0, #0
}
    1e9e:	bd10      	pop	{r4, pc}
    1ea0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1ea2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1ea6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1eaa:	4313      	orrs	r3, r2
    1eac:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1eb0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1eb6:	f043 0301 	orr.w	r3, r3, #1
    1eba:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1ebc:	3201      	adds	r2, #1
    1ebe:	e7e5      	b.n	1e8c <arm_mpu_init+0x14>
		return -1;
    1ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ec4:	e7eb      	b.n	1e9e <arm_mpu_init+0x26>
    1ec6:	bf00      	nop
    1ec8:	00005b7c 	.word	0x00005b7c
    1ecc:	e000ed90 	.word	0xe000ed90
    1ed0:	2000075a 	.word	0x2000075a

00001ed4 <arm_core_mpu_configure_static_mpu_regions>:
{
    1ed4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1ed6:	4c03      	ldr	r4, [pc, #12]	; (1ee4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1ed8:	2301      	movs	r3, #1
    1eda:	7822      	ldrb	r2, [r4, #0]
    1edc:	f7ff ff52 	bl	1d84 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1ee0:	7020      	strb	r0, [r4, #0]
}
    1ee2:	bd10      	pop	{r4, pc}
    1ee4:	2000075a 	.word	0x2000075a

00001ee8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    1ee8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1eea:	4a08      	ldr	r2, [pc, #32]	; (1f0c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    1eec:	2300      	movs	r3, #0
    1eee:	7812      	ldrb	r2, [r2, #0]
    1ef0:	f7ff ff48 	bl	1d84 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1ef4:	f110 0f16 	cmn.w	r0, #22
    1ef8:	d003      	beq.n	1f02 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    1efc:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1efe:	2807      	cmp	r0, #7
    1f00:	dd00      	ble.n	1f04 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    1f02:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    1f04:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1f06:	611a      	str	r2, [r3, #16]
    1f08:	3001      	adds	r0, #1
    1f0a:	e7f8      	b.n	1efe <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    1f0c:	2000075a 	.word	0x2000075a
    1f10:	e000ed90 	.word	0xe000ed90

00001f14 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    1f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f18:	b09f      	sub	sp, #124	; 0x7c
    1f1a:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    1f1c:	2300      	movs	r3, #0
{
    1f1e:	9001      	str	r0, [sp, #4]
    1f20:	9104      	str	r1, [sp, #16]
	count = 0;
    1f22:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
    1f24:	4613      	mov	r3, r2
    1f26:	f813 0b01 	ldrb.w	r0, [r3], #1
    1f2a:	9305      	str	r3, [sp, #20]
    1f2c:	b158      	cbz	r0, 1f46 <z_prf+0x32>
		if (c != '%') {
    1f2e:	2825      	cmp	r0, #37	; 0x25
    1f30:	f000 8085 	beq.w	203e <z_prf+0x12a>
			PUTC(c);
    1f34:	9904      	ldr	r1, [sp, #16]
    1f36:	9b01      	ldr	r3, [sp, #4]
    1f38:	4798      	blx	r3
    1f3a:	3001      	adds	r0, #1
    1f3c:	f040 840d 	bne.w	275a <z_prf+0x846>
    1f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1f44:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
    1f46:	9800      	ldr	r0, [sp, #0]
    1f48:	b01f      	add	sp, #124	; 0x7c
    1f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    1f4e:	2c23      	cmp	r4, #35	; 0x23
    1f50:	d06c      	beq.n	202c <z_prf+0x118>
    1f52:	d861      	bhi.n	2018 <z_prf+0x104>
    1f54:	2c00      	cmp	r4, #0
    1f56:	d0f6      	beq.n	1f46 <z_prf+0x32>
					fspace = true;
    1f58:	2c20      	cmp	r4, #32
    1f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1f5c:	bf08      	it	eq
    1f5e:	2301      	moveq	r3, #1
    1f60:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    1f62:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    1f66:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1f6a:	48b9      	ldr	r0, [pc, #740]	; (2250 <z_prf+0x33c>)
    1f6c:	f818 4b01 	ldrb.w	r4, [r8], #1
    1f70:	4621      	mov	r1, r4
    1f72:	f003 f80b 	bl	4f8c <strchr>
    1f76:	2800      	cmp	r0, #0
    1f78:	d1e9      	bne.n	1f4e <z_prf+0x3a>
			if (c == '*') {
    1f7a:	2c2a      	cmp	r4, #42	; 0x2a
    1f7c:	d166      	bne.n	204c <z_prf+0x138>
				width = va_arg(vargs, int);
    1f7e:	f856 3b04 	ldr.w	r3, [r6], #4
    1f82:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    1f84:	2b00      	cmp	r3, #0
					width = -width;
    1f86:	bfbf      	itttt	lt
    1f88:	425b      	neglt	r3, r3
    1f8a:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    1f8c:	2301      	movlt	r3, #1
    1f8e:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    1f90:	9b05      	ldr	r3, [sp, #20]
    1f92:	f898 4000 	ldrb.w	r4, [r8]
    1f96:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    1f9a:	2c2e      	cmp	r4, #46	; 0x2e
    1f9c:	d17c      	bne.n	2098 <z_prf+0x184>
				if (c == '*') {
    1f9e:	f898 3000 	ldrb.w	r3, [r8]
    1fa2:	2b2a      	cmp	r3, #42	; 0x2a
    1fa4:	d175      	bne.n	2092 <z_prf+0x17e>
					precision = va_arg(vargs, int);
    1fa6:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    1faa:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    1fae:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    1fb2:	48a8      	ldr	r0, [pc, #672]	; (2254 <z_prf+0x340>)
    1fb4:	4621      	mov	r1, r4
    1fb6:	4627      	mov	r7, r4
    1fb8:	f002 ffe8 	bl	4f8c <strchr>
    1fbc:	2800      	cmp	r0, #0
    1fbe:	d06e      	beq.n	209e <z_prf+0x18a>
				c = *format++;
    1fc0:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    1fc2:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    1fc4:	f813 4b01 	ldrb.w	r4, [r3], #1
    1fc8:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
    1fca:	d107      	bne.n	1fdc <z_prf+0xc8>
    1fcc:	2c68      	cmp	r4, #104	; 0x68
    1fce:	d105      	bne.n	1fdc <z_prf+0xc8>
					c = *format++;
    1fd0:	f108 0302 	add.w	r3, r8, #2
    1fd4:	f898 4001 	ldrb.w	r4, [r8, #1]
    1fd8:	9305      	str	r3, [sp, #20]
					i = 'H';
    1fda:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    1fdc:	2c67      	cmp	r4, #103	; 0x67
    1fde:	d87c      	bhi.n	20da <z_prf+0x1c6>
    1fe0:	2c65      	cmp	r4, #101	; 0x65
    1fe2:	f080 8139 	bcs.w	2258 <z_prf+0x344>
    1fe6:	2c47      	cmp	r4, #71	; 0x47
    1fe8:	d85d      	bhi.n	20a6 <z_prf+0x192>
    1fea:	2c45      	cmp	r4, #69	; 0x45
    1fec:	f080 8134 	bcs.w	2258 <z_prf+0x344>
    1ff0:	2c00      	cmp	r4, #0
    1ff2:	d0a8      	beq.n	1f46 <z_prf+0x32>
    1ff4:	2c25      	cmp	r4, #37	; 0x25
    1ff6:	f000 83ac 	beq.w	2752 <z_prf+0x83e>
				PUTC('%');
    1ffa:	9904      	ldr	r1, [sp, #16]
    1ffc:	9b01      	ldr	r3, [sp, #4]
    1ffe:	2025      	movs	r0, #37	; 0x25
    2000:	4798      	blx	r3
    2002:	3001      	adds	r0, #1
    2004:	d09c      	beq.n	1f40 <z_prf+0x2c>
				PUTC(c);
    2006:	9904      	ldr	r1, [sp, #16]
    2008:	9b01      	ldr	r3, [sp, #4]
    200a:	4620      	mov	r0, r4
    200c:	4798      	blx	r3
    200e:	3001      	adds	r0, #1
    2010:	d096      	beq.n	1f40 <z_prf+0x2c>
				count += 2;
    2012:	9b00      	ldr	r3, [sp, #0]
    2014:	3302      	adds	r3, #2
    2016:	e3a2      	b.n	275e <z_prf+0x84a>
				switch (c) {
    2018:	2c2d      	cmp	r4, #45	; 0x2d
    201a:	d00a      	beq.n	2032 <z_prf+0x11e>
    201c:	2c30      	cmp	r4, #48	; 0x30
    201e:	d00b      	beq.n	2038 <z_prf+0x124>
					fplus = true;
    2020:	2c2b      	cmp	r4, #43	; 0x2b
    2022:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2024:	bf08      	it	eq
    2026:	2301      	moveq	r3, #1
    2028:	9309      	str	r3, [sp, #36]	; 0x24
    202a:	e79a      	b.n	1f62 <z_prf+0x4e>
					falt = true;
    202c:	2301      	movs	r3, #1
    202e:	9306      	str	r3, [sp, #24]
    2030:	e797      	b.n	1f62 <z_prf+0x4e>
					fminus = true;
    2032:	2301      	movs	r3, #1
    2034:	930b      	str	r3, [sp, #44]	; 0x2c
    2036:	e794      	b.n	1f62 <z_prf+0x4e>
					fzero = true;
    2038:	2301      	movs	r3, #1
    203a:	9308      	str	r3, [sp, #32]
    203c:	e791      	b.n	1f62 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    203e:	2300      	movs	r3, #0
    2040:	9308      	str	r3, [sp, #32]
    2042:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    2046:	930b      	str	r3, [sp, #44]	; 0x2c
    2048:	9306      	str	r3, [sp, #24]
    204a:	e78c      	b.n	1f66 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    204c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    2050:	2b09      	cmp	r3, #9
				width = 0;
    2052:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    2054:	d8a1      	bhi.n	1f9a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    2056:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    2058:	f8dd 8014 	ldr.w	r8, [sp, #20]
    205c:	f818 4b01 	ldrb.w	r4, [r8], #1
    2060:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2064:	2b09      	cmp	r3, #9
    2066:	d898      	bhi.n	1f9a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    2068:	9b07      	ldr	r3, [sp, #28]
    206a:	f8cd 8014 	str.w	r8, [sp, #20]
    206e:	fb02 4403 	mla	r4, r2, r3, r4
    2072:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2076:	9307      	str	r3, [sp, #28]
    2078:	e7ee      	b.n	2058 <z_prf+0x144>
    207a:	fb01 3505 	mla	r5, r1, r5, r3
    207e:	3d30      	subs	r5, #48	; 0x30
    2080:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    2082:	4642      	mov	r2, r8
    2084:	f812 3b01 	ldrb.w	r3, [r2], #1
    2088:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    208c:	2809      	cmp	r0, #9
    208e:	d9f4      	bls.n	207a <z_prf+0x166>
    2090:	e78d      	b.n	1fae <z_prf+0x9a>
	int i = 0;
    2092:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    2094:	210a      	movs	r1, #10
    2096:	e7f4      	b.n	2082 <z_prf+0x16e>
			precision = -1;
    2098:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    209c:	e789      	b.n	1fb2 <z_prf+0x9e>
    209e:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
    20a2:	4607      	mov	r7, r0
    20a4:	e79a      	b.n	1fdc <z_prf+0xc8>
			switch (c) {
    20a6:	2c63      	cmp	r4, #99	; 0x63
    20a8:	d05a      	beq.n	2160 <z_prf+0x24c>
    20aa:	d820      	bhi.n	20ee <z_prf+0x1da>
    20ac:	2c58      	cmp	r4, #88	; 0x58
    20ae:	d1a4      	bne.n	1ffa <z_prf+0xe6>
				if (c == 'o') {
    20b0:	2c6f      	cmp	r4, #111	; 0x6f
    20b2:	f106 0904 	add.w	r9, r6, #4
    20b6:	6831      	ldr	r1, [r6, #0]
    20b8:	f040 831c 	bne.w	26f4 <z_prf+0x7e0>
	if (alt_form) {
    20bc:	9b06      	ldr	r3, [sp, #24]
    20be:	2b00      	cmp	r3, #0
    20c0:	f000 830a 	beq.w	26d8 <z_prf+0x7c4>
		*buf++ = '0';
    20c4:	2330      	movs	r3, #48	; 0x30
    20c6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
    20ca:	2900      	cmp	r1, #0
    20cc:	f040 830f 	bne.w	26ee <z_prf+0x7da>
			*buf++ = 0;
    20d0:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
    20d4:	4688      	mov	r8, r1
			return 1;
    20d6:	2601      	movs	r6, #1
    20d8:	e026      	b.n	2128 <z_prf+0x214>
			switch (c) {
    20da:	2c70      	cmp	r4, #112	; 0x70
    20dc:	f000 82e7 	beq.w	26ae <z_prf+0x79a>
    20e0:	d828      	bhi.n	2134 <z_prf+0x220>
    20e2:	2c6e      	cmp	r4, #110	; 0x6e
    20e4:	f000 82d0 	beq.w	2688 <z_prf+0x774>
    20e8:	d8e2      	bhi.n	20b0 <z_prf+0x19c>
    20ea:	2c69      	cmp	r4, #105	; 0x69
    20ec:	d185      	bne.n	1ffa <z_prf+0xe6>
				switch (i) {
    20ee:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    20f0:	2c00      	cmp	r4, #0
    20f2:	f106 0904 	add.w	r9, r6, #4
    20f6:	f280 809c 	bge.w	2232 <z_prf+0x31e>
		*buf++ = '-';
    20fa:	232d      	movs	r3, #45	; 0x2d
    20fc:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
    2100:	4261      	negs	r1, r4
		*buf++ = ' ';
    2102:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
    2106:	4630      	mov	r0, r6
    2108:	220a      	movs	r2, #10
    210a:	f002 ffa5 	bl	5058 <_to_x>
				if (fplus || fspace || val < 0) {
    210e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    2110:	4406      	add	r6, r0
    2112:	a817      	add	r0, sp, #92	; 0x5c
    2114:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    2116:	2b00      	cmp	r3, #0
    2118:	f040 8324 	bne.w	2764 <z_prf+0x850>
    211c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    211e:	2b00      	cmp	r3, #0
    2120:	f040 8320 	bne.w	2764 <z_prf+0x850>
    2124:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
    2128:	2d00      	cmp	r5, #0
    212a:	da22      	bge.n	2172 <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    212c:	2500      	movs	r5, #0
    212e:	462f      	mov	r7, r5
    2130:	46aa      	mov	sl, r5
    2132:	e0e5      	b.n	2300 <z_prf+0x3ec>
			switch (c) {
    2134:	2c75      	cmp	r4, #117	; 0x75
    2136:	d0bb      	beq.n	20b0 <z_prf+0x19c>
    2138:	2c78      	cmp	r4, #120	; 0x78
    213a:	d0b9      	beq.n	20b0 <z_prf+0x19c>
    213c:	2c73      	cmp	r4, #115	; 0x73
    213e:	f47f af5c 	bne.w	1ffa <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    2142:	46b1      	mov	r9, r6
					precision = INT_MAX;
    2144:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
    2146:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
    214a:	bfb8      	it	lt
    214c:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    2150:	2600      	movs	r6, #0
    2152:	42b5      	cmp	r5, r6
    2154:	f040 82bb 	bne.w	26ce <z_prf+0x7ba>
    2158:	462e      	mov	r6, r5
    215a:	2500      	movs	r5, #0
    215c:	46a8      	mov	r8, r5
    215e:	e009      	b.n	2174 <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
    2160:	46b1      	mov	r9, r6
				break;
    2162:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    2166:	f859 3b04 	ldr.w	r3, [r9], #4
    216a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
    216e:	2601      	movs	r6, #1
				break;
    2170:	4645      	mov	r5, r8
    2172:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
    2174:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    2178:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
    217a:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
    217c:	462f      	mov	r7, r5
    217e:	46aa      	mov	sl, r5
			if (zero_head < 0) {
    2180:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    2184:	1991      	adds	r1, r2, r6
    2186:	9106      	str	r1, [sp, #24]
    2188:	9907      	ldr	r1, [sp, #28]
    218a:	1990      	adds	r0, r2, r6
    218c:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    218e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2190:	b911      	cbnz	r1, 2198 <z_prf+0x284>
    2192:	2c00      	cmp	r4, #0
    2194:	f300 8304 	bgt.w	27a0 <z_prf+0x88c>
			while (prefix-- > 0) {
    2198:	eb03 0b08 	add.w	fp, r3, r8
    219c:	455b      	cmp	r3, fp
    219e:	f040 8301 	bne.w	27a4 <z_prf+0x890>
			while (zero_head-- > 0) {
    21a2:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    21a6:	f080 830d 	bcs.w	27c4 <z_prf+0x8b0>
			clen -= prefix;
    21aa:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    21ae:	f1ba 0f00 	cmp.w	sl, #0
    21b2:	d011      	beq.n	21d8 <z_prf+0x2c4>
				c = *cptr;
    21b4:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
    21b8:	eb0b 0806 	add.w	r8, fp, r6
    21bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    21c0:	2b09      	cmp	r3, #9
    21c2:	eba8 060b 	sub.w	r6, r8, fp
    21c6:	f240 8308 	bls.w	27da <z_prf+0x8c6>
    21ca:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
    21cc:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    21d0:	f080 830c 	bcs.w	27ec <z_prf+0x8d8>
				clen -= zero.predot;
    21d4:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
    21d8:	b1af      	cbz	r7, 2206 <z_prf+0x2f2>
    21da:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
    21de:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
    21e2:	9904      	ldr	r1, [sp, #16]
    21e4:	9b01      	ldr	r3, [sp, #4]
    21e6:	4650      	mov	r0, sl
    21e8:	4798      	blx	r3
    21ea:	3001      	adds	r0, #1
    21ec:	f43f aea8 	beq.w	1f40 <z_prf+0x2c>
				} while (c != '.');
    21f0:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
    21f4:	eba8 060b 	sub.w	r6, r8, fp
    21f8:	d1f1      	bne.n	21de <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
    21fa:	46b8      	mov	r8, r7
    21fc:	f1b8 0f00 	cmp.w	r8, #0
    2200:	f300 82fd 	bgt.w	27fe <z_prf+0x8ea>
				clen -= zero.postdot;
    2204:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
    2206:	b195      	cbz	r5, 222e <z_prf+0x31a>
				c = *cptr;
    2208:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
    220c:	eb0b 0806 	add.w	r8, fp, r6
    2210:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2214:	2b09      	cmp	r3, #9
    2216:	eba8 060b 	sub.w	r6, r8, fp
    221a:	f240 82fb 	bls.w	2814 <z_prf+0x900>
    221e:	282e      	cmp	r0, #46	; 0x2e
    2220:	f000 82f8 	beq.w	2814 <z_prf+0x900>
				while (zero.trail-- > 0) {
    2224:	462f      	mov	r7, r5
    2226:	2f00      	cmp	r7, #0
    2228:	f300 82fd 	bgt.w	2826 <z_prf+0x912>
				clen -= zero.trail;
    222c:	1b76      	subs	r6, r6, r5
    222e:	445e      	add	r6, fp
    2230:	e30c      	b.n	284c <z_prf+0x938>
	} else if (fplus) {
    2232:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2234:	b123      	cbz	r3, 2240 <z_prf+0x32c>
		*buf++ = '+';
    2236:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    2238:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    223c:	4621      	mov	r1, r4
    223e:	e760      	b.n	2102 <z_prf+0x1ee>
	} else if (fspace) {
    2240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2242:	b10b      	cbz	r3, 2248 <z_prf+0x334>
		*buf++ = ' ';
    2244:	2320      	movs	r3, #32
    2246:	e7f7      	b.n	2238 <z_prf+0x324>
	} else if (fspace) {
    2248:	4621      	mov	r1, r4
    224a:	ae17      	add	r6, sp, #92	; 0x5c
    224c:	e75b      	b.n	2106 <z_prf+0x1f2>
    224e:	bf00      	nop
    2250:	0000612f 	.word	0x0000612f
    2254:	00006135 	.word	0x00006135
				u.d = va_arg(vargs, double);
    2258:	f106 0907 	add.w	r9, r6, #7
    225c:	f029 0907 	bic.w	r9, r9, #7
    2260:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    2264:	02d8      	lsls	r0, r3, #11
    2266:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    226a:	02d6      	lsls	r6, r2, #11
    226c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    2270:	9602      	str	r6, [sp, #8]
    2272:	9003      	str	r0, [sp, #12]
    2274:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
    2278:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    227a:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    227e:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    2282:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
    2286:	da43      	bge.n	2310 <z_prf+0x3fc>
		*buf++ = '-';
    2288:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    228a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    228e:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    2292:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2296:	4299      	cmp	r1, r3
    2298:	d155      	bne.n	2346 <z_prf+0x432>
		if (!fract) {
    229a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    229e:	4313      	orrs	r3, r2
    22a0:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    22a4:	f107 0b03 	add.w	fp, r7, #3
    22a8:	d142      	bne.n	2330 <z_prf+0x41c>
			if (isupper(c)) {
    22aa:	2c19      	cmp	r4, #25
    22ac:	d83a      	bhi.n	2324 <z_prf+0x410>
				*buf++ = 'I';
    22ae:	2349      	movs	r3, #73	; 0x49
    22b0:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    22b2:	234e      	movs	r3, #78	; 0x4e
    22b4:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    22b6:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    22b8:	2500      	movs	r5, #0
		return buf - start;
    22ba:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    22bc:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    22be:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    22c0:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    22c4:	462f      	mov	r7, r5
    22c6:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    22c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22ca:	2b00      	cmp	r3, #0
    22cc:	f040 81d9 	bne.w	2682 <z_prf+0x76e>
    22d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22d2:	2b00      	cmp	r3, #0
    22d4:	f040 81d5 	bne.w	2682 <z_prf+0x76e>
    22d8:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    22dc:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    22e0:	f1d3 0800 	rsbs	r8, r3, #0
    22e4:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    22e8:	ab1e      	add	r3, sp, #120	; 0x78
    22ea:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    22ec:	44bb      	add	fp, r7
    22ee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    22f2:	3b30      	subs	r3, #48	; 0x30
    22f4:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    22f8:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    22fa:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    22fc:	f200 8237 	bhi.w	276e <z_prf+0x85a>
			} else if (fzero) {
    2300:	9b08      	ldr	r3, [sp, #32]
    2302:	2b00      	cmp	r3, #0
    2304:	f000 8236 	beq.w	2774 <z_prf+0x860>
    2308:	9b07      	ldr	r3, [sp, #28]
    230a:	1b9a      	subs	r2, r3, r6
    230c:	ab17      	add	r3, sp, #92	; 0x5c
    230e:	e737      	b.n	2180 <z_prf+0x26c>
	} else if (fplus) {
    2310:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2312:	b10b      	cbz	r3, 2318 <z_prf+0x404>
		*buf++ = '+';
    2314:	232b      	movs	r3, #43	; 0x2b
    2316:	e7b8      	b.n	228a <z_prf+0x376>
	} else if (fspace) {
    2318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    231a:	b10b      	cbz	r3, 2320 <z_prf+0x40c>
		*buf++ = ' ';
    231c:	2320      	movs	r3, #32
    231e:	e7b4      	b.n	228a <z_prf+0x376>
	} else if (fspace) {
    2320:	af17      	add	r7, sp, #92	; 0x5c
    2322:	e7b6      	b.n	2292 <z_prf+0x37e>
				*buf++ = 'i';
    2324:	2369      	movs	r3, #105	; 0x69
    2326:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    2328:	236e      	movs	r3, #110	; 0x6e
    232a:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    232c:	2366      	movs	r3, #102	; 0x66
    232e:	e7c3      	b.n	22b8 <z_prf+0x3a4>
			if (isupper(c)) {
    2330:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    2332:	bf99      	ittee	ls
    2334:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    2336:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    2338:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    233a:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    233c:	bf94      	ite	ls
    233e:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    2340:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    2342:	707a      	strb	r2, [r7, #1]
    2344:	e7b8      	b.n	22b8 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    2346:	9b02      	ldr	r3, [sp, #8]
    2348:	9803      	ldr	r0, [sp, #12]
    234a:	430b      	orrs	r3, r1
    234c:	930c      	str	r3, [sp, #48]	; 0x30
    234e:	17cb      	asrs	r3, r1, #31
    2350:	4303      	orrs	r3, r0
    2352:	930d      	str	r3, [sp, #52]	; 0x34
    2354:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    2358:	2c46      	cmp	r4, #70	; 0x46
    235a:	bf08      	it	eq
    235c:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    235e:	4313      	orrs	r3, r2
    2360:	f000 80ff 	beq.w	2562 <z_prf+0x64e>
		if (exp == 0) {
    2364:	2900      	cmp	r1, #0
    2366:	f000 809f 	beq.w	24a8 <z_prf+0x594>
		fract |= HIGHBIT64;
    236a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    236c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2370:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    2374:	9313      	str	r3, [sp, #76]	; 0x4c
    2376:	2600      	movs	r6, #0
	while (exp <= -3) {
    2378:	f118 0f02 	cmn.w	r8, #2
    237c:	f2c0 80a8 	blt.w	24d0 <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2380:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    2384:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    2388:	f1b8 0f00 	cmp.w	r8, #0
    238c:	f300 80cc 	bgt.w	2528 <z_prf+0x614>
		_rlrshift(&fract);
    2390:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    2392:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    2396:	f002 fe81 	bl	509c <_rlrshift>
	while (exp < (0 + 4)) {
    239a:	f1b8 0f04 	cmp.w	r8, #4
    239e:	d1f7      	bne.n	2390 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    23a0:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    23a2:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    23a6:	bfb8      	it	lt
    23a8:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    23aa:	2b47      	cmp	r3, #71	; 0x47
    23ac:	f040 80e1 	bne.w	2572 <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
    23b0:	1cf2      	adds	r2, r6, #3
    23b2:	db02      	blt.n	23ba <z_prf+0x4a6>
    23b4:	42ae      	cmp	r6, r5
    23b6:	f340 80d7 	ble.w	2568 <z_prf+0x654>
			c += 'e' - 'g';
    23ba:	3c02      	subs	r4, #2
    23bc:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    23be:	2d00      	cmp	r5, #0
    23c0:	f000 80dd 	beq.w	257e <z_prf+0x66a>
		if (!falt && (precision > 0)) {
    23c4:	9b06      	ldr	r3, [sp, #24]
				precision--;
    23c6:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    23c8:	2b00      	cmp	r3, #0
    23ca:	f040 80d8 	bne.w	257e <z_prf+0x66a>
    23ce:	2d00      	cmp	r5, #0
    23d0:	bfd4      	ite	le
    23d2:	f04f 0800 	movle.w	r8, #0
    23d6:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    23da:	2c66      	cmp	r4, #102	; 0x66
    23dc:	f040 80d1 	bne.w	2582 <z_prf+0x66e>
		if (exp < 0) {
    23e0:	eb16 0a05 	adds.w	sl, r6, r5
    23e4:	f140 80d5 	bpl.w	2592 <z_prf+0x67e>
	digit_count = 16;
    23e8:	2310      	movs	r3, #16
    23ea:	9311      	str	r3, [sp, #68]	; 0x44
    23ec:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    23ee:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    23f2:	2200      	movs	r2, #0
    23f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    23f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    23fc:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    2400:	f080 80c9 	bcs.w	2596 <z_prf+0x682>
	fract += ltemp;
    2404:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2406:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2408:	9915      	ldr	r1, [sp, #84]	; 0x54
    240a:	189b      	adds	r3, r3, r2
    240c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    240e:	eb41 0202 	adc.w	r2, r1, r2
    2412:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    2416:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    241a:	930e      	str	r3, [sp, #56]	; 0x38
    241c:	2300      	movs	r3, #0
    241e:	930f      	str	r3, [sp, #60]	; 0x3c
    2420:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    2424:	4313      	orrs	r3, r2
    2426:	d006      	beq.n	2436 <z_prf+0x522>
		_ldiv5(&fract);
    2428:	a812      	add	r0, sp, #72	; 0x48
    242a:	f002 fe49 	bl	50c0 <_ldiv5>
		_rlrshift(&fract);
    242e:	a812      	add	r0, sp, #72	; 0x48
    2430:	f002 fe34 	bl	509c <_rlrshift>
		decexp++;
    2434:	3601      	adds	r6, #1
	if (c == 'f') {
    2436:	2c66      	cmp	r4, #102	; 0x66
    2438:	f040 80c7 	bne.w	25ca <z_prf+0x6b6>
		if (decexp > 0) {
    243c:	2e00      	cmp	r6, #0
    243e:	f340 80b1 	ble.w	25a4 <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
    2442:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2444:	2b00      	cmp	r3, #0
    2446:	dd07      	ble.n	2458 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    2448:	a911      	add	r1, sp, #68	; 0x44
    244a:	a812      	add	r0, sp, #72	; 0x48
    244c:	f002 fe64 	bl	5118 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2450:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    2452:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    2456:	d1f4      	bne.n	2442 <z_prf+0x52e>
			zp->predot = decexp;
    2458:	46b2      	mov	sl, r6
    245a:	46bb      	mov	fp, r7
			decexp = 0;
    245c:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    245e:	9b06      	ldr	r3, [sp, #24]
    2460:	b913      	cbnz	r3, 2468 <z_prf+0x554>
    2462:	2d00      	cmp	r5, #0
    2464:	f340 80af 	ble.w	25c6 <z_prf+0x6b2>
			*buf++ = '.';
    2468:	232e      	movs	r3, #46	; 0x2e
    246a:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    246e:	2e00      	cmp	r6, #0
    2470:	f000 80a7 	beq.w	25c2 <z_prf+0x6ae>
    2474:	2d00      	cmp	r5, #0
    2476:	f340 80a6 	ble.w	25c6 <z_prf+0x6b2>
			zp->postdot = -decexp;
    247a:	4277      	negs	r7, r6
    247c:	42af      	cmp	r7, r5
    247e:	bfa8      	it	ge
    2480:	462f      	movge	r7, r5
			precision -= zp->postdot;
    2482:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    2484:	2d00      	cmp	r5, #0
    2486:	dd03      	ble.n	2490 <z_prf+0x57c>
    2488:	9b11      	ldr	r3, [sp, #68]	; 0x44
    248a:	2b00      	cmp	r3, #0
    248c:	f300 8091 	bgt.w	25b2 <z_prf+0x69e>
	if (prune_zero) {
    2490:	f1b8 0f00 	cmp.w	r8, #0
    2494:	f040 80af 	bne.w	25f6 <z_prf+0x6e2>
	*buf = 0;
    2498:	2300      	movs	r3, #0
	return buf - start;
    249a:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    249c:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    24a0:	ebab 0b06 	sub.w	fp, fp, r6
    24a4:	e710      	b.n	22c8 <z_prf+0x3b4>
				exp--;
    24a6:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    24a8:	9b02      	ldr	r3, [sp, #8]
    24aa:	18db      	adds	r3, r3, r3
    24ac:	9302      	str	r3, [sp, #8]
    24ae:	9b03      	ldr	r3, [sp, #12]
    24b0:	415b      	adcs	r3, r3
    24b2:	9303      	str	r3, [sp, #12]
    24b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    24b8:	2a00      	cmp	r2, #0
    24ba:	f173 0300 	sbcs.w	r3, r3, #0
    24be:	daf2      	bge.n	24a6 <z_prf+0x592>
    24c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    24c4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    24c8:	e74f      	b.n	236a <z_prf+0x456>
			_rlrshift(&fract);
    24ca:	a812      	add	r0, sp, #72	; 0x48
    24cc:	f002 fde6 	bl	509c <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    24d0:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    24d4:	f04f 0b00 	mov.w	fp, #0
    24d8:	48b9      	ldr	r0, [pc, #740]	; (27c0 <z_prf+0x8ac>)
    24da:	2100      	movs	r1, #0
    24dc:	4559      	cmp	r1, fp
    24de:	bf08      	it	eq
    24e0:	4560      	cmpeq	r0, ip
    24e2:	f108 0801 	add.w	r8, r8, #1
    24e6:	d3f0      	bcc.n	24ca <z_prf+0x5b6>
		fract *= 5U;
    24e8:	2005      	movs	r0, #5
    24ea:	fba2 2300 	umull	r2, r3, r2, r0
    24ee:	fb00 330c 	mla	r3, r0, ip, r3
    24f2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    24f6:	46dc      	mov	ip, fp
    24f8:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    24fa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    24fe:	f04f 0b00 	mov.w	fp, #0
    2502:	2100      	movs	r1, #0
    2504:	458b      	cmp	fp, r1
    2506:	bf08      	it	eq
    2508:	459a      	cmpeq	sl, r3
    250a:	d206      	bcs.n	251a <z_prf+0x606>
    250c:	f1bc 0f00 	cmp.w	ip, #0
    2510:	f43f af32 	beq.w	2378 <z_prf+0x464>
    2514:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    2518:	e72e      	b.n	2378 <z_prf+0x464>
			fract <<= 1;
    251a:	1892      	adds	r2, r2, r2
    251c:	415b      	adcs	r3, r3
			exp--;
    251e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2522:	f04f 0c01 	mov.w	ip, #1
    2526:	e7ec      	b.n	2502 <z_prf+0x5ee>
		_ldiv5(&fract);
    2528:	a812      	add	r0, sp, #72	; 0x48
    252a:	f002 fdc9 	bl	50c0 <_ldiv5>
		exp--;
    252e:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    2532:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    2536:	3601      	adds	r6, #1
    2538:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    253c:	2300      	movs	r3, #0
    253e:	459b      	cmp	fp, r3
    2540:	bf08      	it	eq
    2542:	4582      	cmpeq	sl, r0
    2544:	d206      	bcs.n	2554 <z_prf+0x640>
    2546:	f1bc 0f00 	cmp.w	ip, #0
    254a:	f43f af1d 	beq.w	2388 <z_prf+0x474>
    254e:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    2552:	e719      	b.n	2388 <z_prf+0x474>
			fract <<= 1;
    2554:	1849      	adds	r1, r1, r1
    2556:	4140      	adcs	r0, r0
			exp--;
    2558:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    255c:	f04f 0c01 	mov.w	ip, #1
    2560:	e7ec      	b.n	253c <z_prf+0x628>
	if ((exp | fract) != 0) {
    2562:	2600      	movs	r6, #0
    2564:	46b0      	mov	r8, r6
    2566:	e713      	b.n	2390 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    2568:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    256a:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    256c:	b923      	cbnz	r3, 2578 <z_prf+0x664>
			c = 'f';
    256e:	2466      	movs	r4, #102	; 0x66
    2570:	e72d      	b.n	23ce <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2572:	f04f 0800 	mov.w	r8, #0
    2576:	e730      	b.n	23da <z_prf+0x4c6>
    2578:	f04f 0800 	mov.w	r8, #0
    257c:	e730      	b.n	23e0 <z_prf+0x4cc>
    257e:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    2582:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    2586:	2310      	movs	r3, #16
    2588:	459a      	cmp	sl, r3
    258a:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    258c:	bfa8      	it	ge
    258e:	469a      	movge	sl, r3
    2590:	e72f      	b.n	23f2 <z_prf+0x4de>
		if (exp < 0) {
    2592:	2466      	movs	r4, #102	; 0x66
    2594:	e7f7      	b.n	2586 <z_prf+0x672>
		_ldiv5(&ltemp);
    2596:	a814      	add	r0, sp, #80	; 0x50
    2598:	f002 fd92 	bl	50c0 <_ldiv5>
		_rlrshift(&ltemp);
    259c:	a814      	add	r0, sp, #80	; 0x50
    259e:	f002 fd7d 	bl	509c <_rlrshift>
    25a2:	e72b      	b.n	23fc <z_prf+0x4e8>
			*buf++ = '0';
    25a4:	46bb      	mov	fp, r7
    25a6:	2330      	movs	r3, #48	; 0x30
    25a8:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    25ac:	f04f 0a00 	mov.w	sl, #0
    25b0:	e755      	b.n	245e <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    25b2:	a911      	add	r1, sp, #68	; 0x44
    25b4:	a812      	add	r0, sp, #72	; 0x48
    25b6:	f002 fdaf 	bl	5118 <_get_digit>
			precision--;
    25ba:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    25bc:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    25c0:	e760      	b.n	2484 <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
    25c2:	4637      	mov	r7, r6
    25c4:	e75e      	b.n	2484 <z_prf+0x570>
    25c6:	2700      	movs	r7, #0
    25c8:	e762      	b.n	2490 <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
    25ca:	a911      	add	r1, sp, #68	; 0x44
    25cc:	a812      	add	r0, sp, #72	; 0x48
    25ce:	f002 fda3 	bl	5118 <_get_digit>
		if (falt || (precision > 0)) {
    25d2:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    25d4:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    25d6:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    25d8:	bf18      	it	ne
    25da:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    25de:	2b00      	cmp	r3, #0
    25e0:	d13b      	bne.n	265a <z_prf+0x746>
    25e2:	2d00      	cmp	r5, #0
    25e4:	dc39      	bgt.n	265a <z_prf+0x746>
		if (*buf++ != '0') {
    25e6:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    25ea:	f1b8 0f00 	cmp.w	r8, #0
    25ee:	d045      	beq.n	267c <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
    25f0:	f04f 0a00 	mov.w	sl, #0
    25f4:	4657      	mov	r7, sl
		while (*--buf == '0')
    25f6:	465b      	mov	r3, fp
    25f8:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    25fc:	2a30      	cmp	r2, #48	; 0x30
    25fe:	d0fa      	beq.n	25f6 <z_prf+0x6e2>
		if (*buf != '.') {
    2600:	2a2e      	cmp	r2, #46	; 0x2e
    2602:	bf18      	it	ne
    2604:	469b      	movne	fp, r3
    2606:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    2608:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    260c:	2b45      	cmp	r3, #69	; 0x45
    260e:	f47f af43 	bne.w	2498 <z_prf+0x584>
		if (decexp < 0) {
    2612:	2e00      	cmp	r6, #0
		*buf++ = c;
    2614:	465a      	mov	r2, fp
			decexp = -decexp;
    2616:	bfba      	itte	lt
    2618:	4276      	neglt	r6, r6
			*buf++ = '-';
    261a:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    261c:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    261e:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    2620:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    2624:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    2628:	dd0a      	ble.n	2640 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
    262a:	2164      	movs	r1, #100	; 0x64
    262c:	fb96 f3f1 	sdiv	r3, r6, r1
    2630:	f103 0030 	add.w	r0, r3, #48	; 0x30
    2634:	f10b 0203 	add.w	r2, fp, #3
    2638:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    263c:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    2640:	210a      	movs	r1, #10
    2642:	4693      	mov	fp, r2
    2644:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    2648:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    264c:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    2650:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2652:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    2656:	7056      	strb	r6, [r2, #1]
    2658:	e71e      	b.n	2498 <z_prf+0x584>
			*buf++ = '.';
    265a:	232e      	movs	r3, #46	; 0x2e
    265c:	f107 0b02 	add.w	fp, r7, #2
    2660:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    2662:	2d00      	cmp	r5, #0
    2664:	ddc1      	ble.n	25ea <z_prf+0x6d6>
    2666:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2668:	2b00      	cmp	r3, #0
    266a:	ddbe      	ble.n	25ea <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
    266c:	a911      	add	r1, sp, #68	; 0x44
    266e:	a812      	add	r0, sp, #72	; 0x48
    2670:	f002 fd52 	bl	5118 <_get_digit>
			precision--;
    2674:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    2676:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    267a:	e7f2      	b.n	2662 <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
    267c:	46c2      	mov	sl, r8
    267e:	4647      	mov	r7, r8
    2680:	e7c2      	b.n	2608 <z_prf+0x6f4>
					prefix = 1;
    2682:	f04f 0801 	mov.w	r8, #1
    2686:	e62f      	b.n	22e8 <z_prf+0x3d4>
				switch (i) {
    2688:	46b1      	mov	r9, r6
    268a:	2f68      	cmp	r7, #104	; 0x68
    268c:	f859 3b04 	ldr.w	r3, [r9], #4
    2690:	d005      	beq.n	269e <z_prf+0x78a>
    2692:	dc01      	bgt.n	2698 <z_prf+0x784>
    2694:	2f48      	cmp	r7, #72	; 0x48
    2696:	d007      	beq.n	26a8 <z_prf+0x794>
					*va_arg(vargs, int *) = count;
    2698:	9a00      	ldr	r2, [sp, #0]
    269a:	601a      	str	r2, [r3, #0]
					break;
    269c:	e001      	b.n	26a2 <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
    269e:	9a00      	ldr	r2, [sp, #0]
    26a0:	801a      	strh	r2, [r3, #0]
				continue;
    26a2:	464e      	mov	r6, r9
    26a4:	9a05      	ldr	r2, [sp, #20]
    26a6:	e43d      	b.n	1f24 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    26a8:	9a00      	ldr	r2, [sp, #0]
    26aa:	701a      	strb	r2, [r3, #0]
					break;
    26ac:	e7f9      	b.n	26a2 <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
    26ae:	46b1      	mov	r9, r6
		*buf++ = '0';
    26b0:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    26b4:	2210      	movs	r2, #16
    26b6:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    26ba:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    26be:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    26c2:	f002 fcc9 	bl	5058 <_to_x>
				prefix = 2;
    26c6:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    26ca:	1c86      	adds	r6, r0, #2
				break;
    26cc:	e52c      	b.n	2128 <z_prf+0x214>
					if (cptr[clen] == '\0') {
    26ce:	5d9a      	ldrb	r2, [r3, r6]
    26d0:	2a00      	cmp	r2, #0
    26d2:	d04a      	beq.n	276a <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
    26d4:	3601      	adds	r6, #1
    26d6:	e53c      	b.n	2152 <z_prf+0x23e>
	if (alt_form) {
    26d8:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    26da:	2208      	movs	r2, #8
    26dc:	4620      	mov	r0, r4
    26de:	f002 fcbb 	bl	5058 <_to_x>
    26e2:	ae17      	add	r6, sp, #92	; 0x5c
    26e4:	1ba6      	subs	r6, r4, r6
    26e6:	4406      	add	r6, r0
			prefix = 0;
    26e8:	f04f 0800 	mov.w	r8, #0
    26ec:	e51c      	b.n	2128 <z_prf+0x214>
		*buf++ = '0';
    26ee:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    26f2:	e7f2      	b.n	26da <z_prf+0x7c6>
				} else if (c == 'u') {
    26f4:	2c75      	cmp	r4, #117	; 0x75
    26f6:	d105      	bne.n	2704 <z_prf+0x7f0>
	return _to_x(buf, value, 10);
    26f8:	220a      	movs	r2, #10
    26fa:	a817      	add	r0, sp, #92	; 0x5c
    26fc:	f002 fcac 	bl	5058 <_to_x>
    2700:	4606      	mov	r6, r0
    2702:	e7f1      	b.n	26e8 <z_prf+0x7d4>
	if (alt_form) {
    2704:	9b06      	ldr	r3, [sp, #24]
    2706:	b193      	cbz	r3, 272e <z_prf+0x81a>
		*buf++ = '0';
    2708:	f647 0330 	movw	r3, #30768	; 0x7830
    270c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    2710:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    2714:	2210      	movs	r2, #16
    2716:	4638      	mov	r0, r7
    2718:	f002 fc9e 	bl	5058 <_to_x>
	if (prefix == 'X') {
    271c:	2c58      	cmp	r4, #88	; 0x58
    271e:	d008      	beq.n	2732 <z_prf+0x81e>
	return len + (buf - buf0);
    2720:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    2722:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    2724:	1bbe      	subs	r6, r7, r6
    2726:	4406      	add	r6, r0
						prefix = 2;
    2728:	ea4f 0843 	mov.w	r8, r3, lsl #1
    272c:	e4fc      	b.n	2128 <z_prf+0x214>
	if (alt_form) {
    272e:	af17      	add	r7, sp, #92	; 0x5c
    2730:	e7f0      	b.n	2714 <z_prf+0x800>
    2732:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    2734:	f812 3b01 	ldrb.w	r3, [r2], #1
    2738:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    273c:	2919      	cmp	r1, #25
    273e:	d803      	bhi.n	2748 <z_prf+0x834>
			*buf += 'A' - 'a';
    2740:	3b20      	subs	r3, #32
    2742:	f802 3c01 	strb.w	r3, [r2, #-1]
    2746:	e7f5      	b.n	2734 <z_prf+0x820>
	} while (*buf++);
    2748:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    274c:	2b00      	cmp	r3, #0
    274e:	d1f1      	bne.n	2734 <z_prf+0x820>
    2750:	e7e6      	b.n	2720 <z_prf+0x80c>
				PUTC('%');
    2752:	9904      	ldr	r1, [sp, #16]
    2754:	4620      	mov	r0, r4
    2756:	f7ff bbee 	b.w	1f36 <z_prf+0x22>
				count++;
    275a:	9b00      	ldr	r3, [sp, #0]
    275c:	3301      	adds	r3, #1
				count += 2;
    275e:	9300      	str	r3, [sp, #0]
				continue;
    2760:	46b1      	mov	r9, r6
    2762:	e79e      	b.n	26a2 <z_prf+0x78e>
					prefix = 1;
    2764:	f04f 0801 	mov.w	r8, #1
    2768:	e4de      	b.n	2128 <z_prf+0x214>
    276a:	4615      	mov	r5, r2
    276c:	e4f6      	b.n	215c <z_prf+0x248>
			cptr = buf;
    276e:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    2770:	2200      	movs	r2, #0
    2772:	e507      	b.n	2184 <z_prf+0x270>
    2774:	ab17      	add	r3, sp, #92	; 0x5c
    2776:	9a08      	ldr	r2, [sp, #32]
    2778:	e504      	b.n	2184 <z_prf+0x270>
    277a:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    277e:	9904      	ldr	r1, [sp, #16]
    2780:	9b01      	ldr	r3, [sp, #4]
    2782:	2020      	movs	r0, #32
    2784:	4798      	blx	r3
    2786:	3001      	adds	r0, #1
    2788:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    278c:	f43f abd8 	beq.w	1f40 <z_prf+0x2c>
				while (width-- > 0) {
    2790:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    2794:	d2f1      	bcs.n	277a <z_prf+0x866>
				count += width;
    2796:	9900      	ldr	r1, [sp, #0]
    2798:	4421      	add	r1, r4
    279a:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    279c:	465c      	mov	r4, fp
    279e:	e4fb      	b.n	2198 <z_prf+0x284>
    27a0:	46a3      	mov	fp, r4
    27a2:	e7f5      	b.n	2790 <z_prf+0x87c>
				PUTC(*cptr++);
    27a4:	f813 0b01 	ldrb.w	r0, [r3], #1
    27a8:	9307      	str	r3, [sp, #28]
    27aa:	9904      	ldr	r1, [sp, #16]
    27ac:	9b01      	ldr	r3, [sp, #4]
    27ae:	9208      	str	r2, [sp, #32]
    27b0:	4798      	blx	r3
    27b2:	3001      	adds	r0, #1
    27b4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    27b8:	f47f acf0 	bne.w	219c <z_prf+0x288>
    27bc:	f7ff bbc0 	b.w	1f40 <z_prf+0x2c>
    27c0:	33333332 	.word	0x33333332
				PUTC('0');
    27c4:	9904      	ldr	r1, [sp, #16]
    27c6:	9b01      	ldr	r3, [sp, #4]
    27c8:	9207      	str	r2, [sp, #28]
    27ca:	2030      	movs	r0, #48	; 0x30
    27cc:	4798      	blx	r3
    27ce:	3001      	adds	r0, #1
    27d0:	9a07      	ldr	r2, [sp, #28]
    27d2:	f47f ace6 	bne.w	21a2 <z_prf+0x28e>
    27d6:	f7ff bbb3 	b.w	1f40 <z_prf+0x2c>
					PUTC(c);
    27da:	9904      	ldr	r1, [sp, #16]
    27dc:	9b01      	ldr	r3, [sp, #4]
    27de:	4798      	blx	r3
    27e0:	3001      	adds	r0, #1
    27e2:	f43f abad 	beq.w	1f40 <z_prf+0x2c>
					c = *++cptr;
    27e6:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    27ea:	e4e7      	b.n	21bc <z_prf+0x2a8>
					PUTC('0');
    27ec:	9904      	ldr	r1, [sp, #16]
    27ee:	9b01      	ldr	r3, [sp, #4]
    27f0:	2030      	movs	r0, #48	; 0x30
    27f2:	4798      	blx	r3
    27f4:	3001      	adds	r0, #1
    27f6:	f47f ace9 	bne.w	21cc <z_prf+0x2b8>
    27fa:	f7ff bba1 	b.w	1f40 <z_prf+0x2c>
					PUTC('0');
    27fe:	9904      	ldr	r1, [sp, #16]
    2800:	9b01      	ldr	r3, [sp, #4]
    2802:	2030      	movs	r0, #48	; 0x30
    2804:	4798      	blx	r3
    2806:	3001      	adds	r0, #1
    2808:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    280c:	f47f acf6 	bne.w	21fc <z_prf+0x2e8>
    2810:	f7ff bb96 	b.w	1f40 <z_prf+0x2c>
					PUTC(c);
    2814:	9904      	ldr	r1, [sp, #16]
    2816:	9b01      	ldr	r3, [sp, #4]
    2818:	4798      	blx	r3
    281a:	3001      	adds	r0, #1
    281c:	f43f ab90 	beq.w	1f40 <z_prf+0x2c>
					c = *++cptr;
    2820:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    2824:	e4f4      	b.n	2210 <z_prf+0x2fc>
					PUTC('0');
    2826:	9904      	ldr	r1, [sp, #16]
    2828:	9b01      	ldr	r3, [sp, #4]
    282a:	2030      	movs	r0, #48	; 0x30
    282c:	4798      	blx	r3
    282e:	3001      	adds	r0, #1
    2830:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    2834:	f47f acf7 	bne.w	2226 <z_prf+0x312>
    2838:	f7ff bb82 	b.w	1f40 <z_prf+0x2c>
				PUTC(*cptr++);
    283c:	9904      	ldr	r1, [sp, #16]
    283e:	f81b 0b01 	ldrb.w	r0, [fp], #1
    2842:	9b01      	ldr	r3, [sp, #4]
    2844:	4798      	blx	r3
    2846:	3001      	adds	r0, #1
    2848:	f43f ab7a 	beq.w	1f40 <z_prf+0x2c>
    284c:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    2850:	2b00      	cmp	r3, #0
    2852:	dcf3      	bgt.n	283c <z_prf+0x928>
			count += clen;
    2854:	9b00      	ldr	r3, [sp, #0]
    2856:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    2858:	2c00      	cmp	r4, #0
			count += clen;
    285a:	4413      	add	r3, r2
    285c:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    285e:	f77f af20 	ble.w	26a2 <z_prf+0x78e>
    2862:	4625      	mov	r5, r4
    2864:	e006      	b.n	2874 <z_prf+0x960>
					PUTC(' ');
    2866:	9904      	ldr	r1, [sp, #16]
    2868:	9b01      	ldr	r3, [sp, #4]
    286a:	2020      	movs	r0, #32
    286c:	4798      	blx	r3
    286e:	3001      	adds	r0, #1
    2870:	f43f ab66 	beq.w	1f40 <z_prf+0x2c>
				while (width-- > 0) {
    2874:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    2878:	d2f5      	bcs.n	2866 <z_prf+0x952>
				count += width;
    287a:	9b00      	ldr	r3, [sp, #0]
    287c:	4423      	add	r3, r4
    287e:	9300      	str	r3, [sp, #0]
    2880:	e70f      	b.n	26a2 <z_prf+0x78e>
    2882:	bf00      	nop

00002884 <z_impl_zephyr_fputc>:
	_stdout_hook = hook;
}

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    2884:	2902      	cmp	r1, #2
    2886:	d102      	bne.n	288e <z_impl_zephyr_fputc+0xa>
    2888:	4b02      	ldr	r3, [pc, #8]	; (2894 <z_impl_zephyr_fputc+0x10>)
    288a:	681b      	ldr	r3, [r3, #0]
    288c:	4718      	bx	r3
}
    288e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2892:	4770      	bx	lr
    2894:	20001c44 	.word	0x20001c44

00002898 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    2898:	b40f      	push	{r0, r1, r2, r3}
    289a:	b507      	push	{r0, r1, r2, lr}
    289c:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = z_prf(fputc, DESC(stdout), format, vargs);
    289e:	2102      	movs	r1, #2
{
    28a0:	f853 2b04 	ldr.w	r2, [r3], #4
	r = z_prf(fputc, DESC(stdout), format, vargs);
    28a4:	4804      	ldr	r0, [pc, #16]	; (28b8 <printf+0x20>)
	va_start(vargs, format);
    28a6:	9301      	str	r3, [sp, #4]
	r = z_prf(fputc, DESC(stdout), format, vargs);
    28a8:	f7ff fb34 	bl	1f14 <z_prf>
	va_end(vargs);

	return r;
}
    28ac:	b003      	add	sp, #12
    28ae:	f85d eb04 	ldr.w	lr, [sp], #4
    28b2:	b004      	add	sp, #16
    28b4:	4770      	bx	lr
    28b6:	bf00      	nop
    28b8:	0000514d 	.word	0x0000514d

000028bc <nordicsemi_nrf52_init>:
    28bc:	f04f 0320 	mov.w	r3, #32
    28c0:	f3ef 8211 	mrs	r2, BASEPRI
    28c4:	f383 8811 	msr	BASEPRI, r3
    28c8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    28cc:	4906      	ldr	r1, [pc, #24]	; (28e8 <nordicsemi_nrf52_init+0x2c>)
    28ce:	2301      	movs	r3, #1
    28d0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    28d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    28d8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    28dc:	f382 8811 	msr	BASEPRI, r2
    28e0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    28e4:	2000      	movs	r0, #0
    28e6:	4770      	bx	lr
    28e8:	4001e000 	.word	0x4001e000

000028ec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    28ec:	b120      	cbz	r0, 28f8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    28ee:	4b03      	ldr	r3, [pc, #12]	; (28fc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    28f0:	0180      	lsls	r0, r0, #6
    28f2:	f043 0301 	orr.w	r3, r3, #1
    28f6:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    28f8:	4770      	bx	lr
    28fa:	bf00      	nop
    28fc:	00005b40 	.word	0x00005b40

00002900 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    2900:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2902:	4b09      	ldr	r3, [pc, #36]	; (2928 <gpio_nrfx_init+0x28>)
    2904:	781a      	ldrb	r2, [r3, #0]
    2906:	b96a      	cbnz	r2, 2924 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2908:	2101      	movs	r1, #1
    290a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    290c:	2006      	movs	r0, #6
    290e:	2105      	movs	r1, #5
    2910:	f7fe fe48 	bl	15a4 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    2914:	2006      	movs	r0, #6
    2916:	f7fe fe35 	bl	1584 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    291a:	4b04      	ldr	r3, [pc, #16]	; (292c <gpio_nrfx_init+0x2c>)
    291c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2920:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2924:	2000      	movs	r0, #0
    2926:	bd08      	pop	{r3, pc}
    2928:	2000075b 	.word	0x2000075b
    292c:	40006000 	.word	0x40006000

00002930 <gpiote_pin_int_cfg>:
{
    2930:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    2932:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2934:	4d55      	ldr	r5, [pc, #340]	; (2a8c <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2936:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    2938:	6882      	ldr	r2, [r0, #8]
    293a:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    293e:	7918      	ldrb	r0, [r3, #4]
    2940:	f001 031f 	and.w	r3, r1, #31
    2944:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    2948:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    294a:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    294c:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    2950:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    2954:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2958:	42b3      	cmp	r3, r6
    295a:	d175      	bne.n	2a48 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    295c:	fa24 f600 	lsr.w	r6, r4, r0
    2960:	07f6      	lsls	r6, r6, #31
    2962:	d571      	bpl.n	2a48 <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2964:	0084      	lsls	r4, r0, #2
    2966:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    296a:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    296e:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
    2972:	f026 0601 	bic.w	r6, r6, #1
    2976:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    297a:	2401      	movs	r4, #1
    297c:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
    2980:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2984:	009c      	lsls	r4, r3, #2
    2986:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
    298a:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
    298e:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2992:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    2996:	6890      	ldr	r0, [r2, #8]
    2998:	40c8      	lsrs	r0, r1
    299a:	f010 0001 	ands.w	r0, r0, #1
    299e:	d051      	beq.n	2a44 <gpiote_pin_int_cfg+0x114>
    29a0:	68d0      	ldr	r0, [r2, #12]
    29a2:	40c8      	lsrs	r0, r1
    29a4:	f010 0001 	ands.w	r0, r0, #1
    29a8:	d04c      	beq.n	2a44 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    29aa:	6950      	ldr	r0, [r2, #20]
    29ac:	40c8      	lsrs	r0, r1
    29ae:	f010 0001 	ands.w	r0, r0, #1
    29b2:	d056      	beq.n	2a62 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    29b4:	6990      	ldr	r0, [r2, #24]
    29b6:	40c8      	lsrs	r0, r1
    29b8:	07c0      	lsls	r0, r0, #31
    29ba:	d44a      	bmi.n	2a52 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
    29bc:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    29be:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    29c0:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    29c2:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    29c6:	f000 0001 	and.w	r0, r0, #1
    29ca:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    29ce:	4288      	cmp	r0, r1
    29d0:	bf14      	ite	ne
    29d2:	2101      	movne	r1, #1
    29d4:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    29d6:	4d2d      	ldr	r5, [pc, #180]	; (2a8c <gpiote_pin_int_cfg+0x15c>)
    29d8:	2400      	movs	r4, #0
    29da:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    29de:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    29e2:	f010 0003 	ands.w	r0, r0, #3
    29e6:	d136      	bne.n	2a56 <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    29e8:	00a2      	lsls	r2, r4, #2
    29ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    29ee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    29f2:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    29f4:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    29f8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    29fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2a00:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
    2a04:	f104 0340 	add.w	r3, r4, #64	; 0x40
    2a08:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    2a0c:	009b      	lsls	r3, r3, #2
    2a0e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    2a12:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2a14:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    2a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a1c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2a20:	4331      	orrs	r1, r6
    2a22:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2a26:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2a2c:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2a2e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    2a32:	f043 0301 	orr.w	r3, r3, #1
    2a36:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    2a3a:	2301      	movs	r3, #1
    2a3c:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    2a40:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    2a44:	b002      	add	sp, #8
    2a46:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2a48:	3001      	adds	r0, #1
    2a4a:	2808      	cmp	r0, #8
    2a4c:	f47f af7e 	bne.w	294c <gpiote_pin_int_cfg+0x1c>
    2a50:	e798      	b.n	2984 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2a52:	2103      	movs	r1, #3
    2a54:	e7bf      	b.n	29d6 <gpiote_pin_int_cfg+0xa6>
    2a56:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    2a58:	2c08      	cmp	r4, #8
    2a5a:	d1be      	bne.n	29da <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
    2a5c:	f06f 0012 	mvn.w	r0, #18
    2a60:	e7f0      	b.n	2a44 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2a62:	6913      	ldr	r3, [r2, #16]
    2a64:	69d2      	ldr	r2, [r2, #28]
    2a66:	4053      	eors	r3, r2
    2a68:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2a6c:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
    2a70:	f011 0f01 	tst.w	r1, #1
    2a74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2a78:	bf14      	ite	ne
    2a7a:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    2a7e:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    2a82:	4313      	orrs	r3, r2
    2a84:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
    2a88:	e7dc      	b.n	2a44 <gpiote_pin_int_cfg+0x114>
    2a8a:	bf00      	nop
    2a8c:	40006000 	.word	0x40006000

00002a90 <gpiote_event_handler>:
{
    2a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a94:	4953      	ldr	r1, [pc, #332]	; (2be4 <gpiote_event_handler+0x154>)
    2a96:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    2a98:	2d00      	cmp	r5, #0
    2a9a:	d067      	beq.n	2b6c <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
    2a9c:	4b52      	ldr	r3, [pc, #328]	; (2be8 <gpiote_event_handler+0x158>)
    2a9e:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    2aa0:	681b      	ldr	r3, [r3, #0]
    2aa2:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2aa4:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    2aa8:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    2aaa:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    2aae:	4320      	orrs	r0, r4
    2ab0:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    2ab4:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    2ab6:	69d4      	ldr	r4, [r2, #28]
    2ab8:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    2aba:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    2abe:	4054      	eors	r4, r2
    2ac0:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
    2ac2:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
    2ac6:	2001      	movs	r0, #1
	u32_t pin = 0U;
    2ac8:	2700      	movs	r7, #0
	while (level_pins) {
    2aca:	2b00      	cmp	r3, #0
    2acc:	d138      	bne.n	2b40 <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2ace:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    2ad0:	680b      	ldr	r3, [r1, #0]
    2ad2:	9300      	str	r3, [sp, #0]
    (void)dummy;
    2ad4:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    2ad6:	4845      	ldr	r0, [pc, #276]	; (2bec <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2ad8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2ada:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2adc:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    2ade:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    2ae2:	fa06 f103 	lsl.w	r1, r6, r3
    2ae6:	4211      	tst	r1, r2
    2ae8:	d013      	beq.n	2b12 <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2aea:	009a      	lsls	r2, r3, #2
    2aec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2af0:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    2af4:	6811      	ldr	r1, [r2, #0]
    2af6:	b161      	cbz	r1, 2b12 <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2af8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2afc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2b00:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    2b02:	6812      	ldr	r2, [r2, #0]
    2b04:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2b06:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2b0a:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    2b0e:	9a01      	ldr	r2, [sp, #4]
    2b10:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2b12:	3301      	adds	r3, #1
    2b14:	2b08      	cmp	r3, #8
    2b16:	d1e2      	bne.n	2ade <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
    2b18:	bb54      	cbnz	r4, 2b70 <gpiote_event_handler+0xe0>
	if (port_event) {
    2b1a:	b175      	cbz	r5, 2b3a <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
    2b1c:	4b32      	ldr	r3, [pc, #200]	; (2be8 <gpiote_event_handler+0x158>)
    2b1e:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
    2b20:	681b      	ldr	r3, [r3, #0]
    2b22:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2b24:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    2b28:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    2b2a:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
    2b2e:	4302      	orrs	r2, r0
    2b30:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
    2b34:	2401      	movs	r4, #1
	u32_t pin = 0U;
    2b36:	2500      	movs	r5, #0
	while (level_pins) {
    2b38:	bb8b      	cbnz	r3, 2b9e <gpiote_event_handler+0x10e>
}
    2b3a:	b002      	add	sp, #8
    2b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    2b40:	4203      	tst	r3, r0
    2b42:	d010      	beq.n	2b66 <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2b44:	f896 c004 	ldrb.w	ip, [r6, #4]
    2b48:	f007 021f 	and.w	r2, r7, #31
    2b4c:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    2b50:	0092      	lsls	r2, r2, #2
    2b52:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    2b56:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2b5a:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
    2b5e:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2b62:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
    2b66:	3701      	adds	r7, #1
		bit <<= 1;
    2b68:	0040      	lsls	r0, r0, #1
    2b6a:	e7ae      	b.n	2aca <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2b6c:	462c      	mov	r4, r5
    2b6e:	e7b2      	b.n	2ad6 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    2b70:	4f1d      	ldr	r7, [pc, #116]	; (2be8 <gpiote_event_handler+0x158>)
    2b72:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b76:	f8d8 1000 	ldr.w	r1, [r8]
    2b7a:	2900      	cmp	r1, #0
    2b7c:	d0cd      	beq.n	2b1a <gpiote_event_handler+0x8a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2b7e:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    2b80:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2b84:	688a      	ldr	r2, [r1, #8]
    2b86:	4023      	ands	r3, r4
    2b88:	4213      	tst	r3, r2
    2b8a:	d003      	beq.n	2b94 <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
    2b8c:	684b      	ldr	r3, [r1, #4]
    2b8e:	4622      	mov	r2, r4
    2b90:	4638      	mov	r0, r7
    2b92:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b94:	2e00      	cmp	r6, #0
    2b96:	d0c0      	beq.n	2b1a <gpiote_event_handler+0x8a>
    2b98:	4631      	mov	r1, r6
    2b9a:	6836      	ldr	r6, [r6, #0]
    2b9c:	e7f0      	b.n	2b80 <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
    2b9e:	421c      	tst	r4, r3
    2ba0:	d01c      	beq.n	2bdc <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2ba2:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2ba4:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2ba6:	f005 021f 	and.w	r2, r5, #31
    2baa:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2bae:	6908      	ldr	r0, [r1, #16]
    2bb0:	0092      	lsls	r2, r2, #2
    2bb2:	4078      	eors	r0, r7
    2bb4:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2bb8:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    2bba:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2bbe:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2bc2:	bf18      	it	ne
    2bc4:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2bc8:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2bcc:	bf08      	it	eq
    2bce:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    2bd2:	4338      	orrs	r0, r7
    2bd4:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
    2bd8:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    2bdc:	3501      	adds	r5, #1
		bit <<= 1;
    2bde:	0064      	lsls	r4, r4, #1
    2be0:	e7aa      	b.n	2b38 <gpiote_event_handler+0xa8>
    2be2:	bf00      	nop
    2be4:	4000617c 	.word	0x4000617c
    2be8:	20001d20 	.word	0x20001d20
    2bec:	40006000 	.word	0x40006000

00002bf0 <twi_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
    2bf0:	b510      	push	{r4, lr}
    2bf2:	4604      	mov	r4, r0
    2bf4:	2200      	movs	r2, #0
    2bf6:	2101      	movs	r1, #1
    2bf8:	2004      	movs	r0, #4
    2bfa:	f7fe fcd3 	bl	15a4 <z_arm_irq_priority_set>
	return dev->config->config_info;
    2bfe:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    2c00:	4a0f      	ldr	r2, [pc, #60]	; (2c40 <twi_1_init+0x50>)
	return dev->config->config_info;
    2c02:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    2c04:	4623      	mov	r3, r4
    2c06:	f100 0108 	add.w	r1, r0, #8
    2c0a:	f000 ffc5 	bl	3b98 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    2c0e:	4b0d      	ldr	r3, [pc, #52]	; (2c44 <twi_1_init+0x54>)
    2c10:	4298      	cmp	r0, r3
    2c12:	d012      	beq.n	2c3a <twi_1_init+0x4a>
		LOG_ERR("Failed to initialize device: %s",
    2c14:	2301      	movs	r3, #1
    2c16:	f04f 0200 	mov.w	r2, #0
    2c1a:	f363 0207 	bfi	r2, r3, #0, #8
    2c1e:	490a      	ldr	r1, [pc, #40]	; (2c48 <twi_1_init+0x58>)
    2c20:	4b0a      	ldr	r3, [pc, #40]	; (2c4c <twi_1_init+0x5c>)
    2c22:	480b      	ldr	r0, [pc, #44]	; (2c50 <twi_1_init+0x60>)
    2c24:	1a5b      	subs	r3, r3, r1
    2c26:	08db      	lsrs	r3, r3, #3
    2c28:	f363 128f 	bfi	r2, r3, #6, #10
    2c2c:	6823      	ldr	r3, [r4, #0]
    2c2e:	6819      	ldr	r1, [r3, #0]
    2c30:	f002 f807 	bl	4c42 <log_1>
		return -EBUSY;
    2c34:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(1);
    2c38:	bd10      	pop	{r4, pc}
	return 0;
    2c3a:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(1);
    2c3c:	e7fc      	b.n	2c38 <twi_1_init+0x48>
    2c3e:	bf00      	nop
    2c40:	00002db9 	.word	0x00002db9
    2c44:	0bad0000 	.word	0x0bad0000
    2c48:	00005adc 	.word	0x00005adc
    2c4c:	00005aec 	.word	0x00005aec
    2c50:	00006199 	.word	0x00006199

00002c54 <i2c_nrfx_twi_configure>:
{
    2c54:	b508      	push	{r3, lr}
	return dev->config->config_info;
    2c56:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
    2c58:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
    2c5a:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
    2c5c:	d413      	bmi.n	2c86 <i2c_nrfx_twi_configure+0x32>
	switch (I2C_SPEED_GET(dev_config)) {
    2c5e:	f3c1 0242 	ubfx	r2, r1, #1, #3
    2c62:	2a01      	cmp	r2, #1
    2c64:	d012      	beq.n	2c8c <i2c_nrfx_twi_configure+0x38>
    2c66:	2a02      	cmp	r2, #2
    2c68:	d019      	beq.n	2c9e <i2c_nrfx_twi_configure+0x4a>
		LOG_ERR("unsupported speed");
    2c6a:	2301      	movs	r3, #1
    2c6c:	f04f 0100 	mov.w	r1, #0
    2c70:	f363 0107 	bfi	r1, r3, #0, #8
    2c74:	4a0c      	ldr	r2, [pc, #48]	; (2ca8 <i2c_nrfx_twi_configure+0x54>)
    2c76:	4b0d      	ldr	r3, [pc, #52]	; (2cac <i2c_nrfx_twi_configure+0x58>)
    2c78:	480d      	ldr	r0, [pc, #52]	; (2cb0 <i2c_nrfx_twi_configure+0x5c>)
    2c7a:	1a9b      	subs	r3, r3, r2
    2c7c:	08db      	lsrs	r3, r3, #3
    2c7e:	f363 118f 	bfi	r1, r3, #6, #10
    2c82:	f001 ffd1 	bl	4c28 <log_0>
		return -EINVAL;
    2c86:	f06f 0015 	mvn.w	r0, #21
    2c8a:	e007      	b.n	2c9c <i2c_nrfx_twi_configure+0x48>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    2c8c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    2c8e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    2c92:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    2c96:	6883      	ldr	r3, [r0, #8]
	return 0;
    2c98:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    2c9a:	6259      	str	r1, [r3, #36]	; 0x24
}
    2c9c:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    2c9e:	681b      	ldr	r3, [r3, #0]
    2ca0:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    2ca4:	e7f5      	b.n	2c92 <i2c_nrfx_twi_configure+0x3e>
    2ca6:	bf00      	nop
    2ca8:	00005adc 	.word	0x00005adc
    2cac:	00005aec 	.word	0x00005aec
    2cb0:	00006153 	.word	0x00006153

00002cb4 <i2c_nrfx_twi_transfer>:
{
    2cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cb8:	4605      	mov	r5, r0
    2cba:	b087      	sub	sp, #28
    2cbc:	460c      	mov	r4, r1
    2cbe:	4617      	mov	r7, r2
    2cc0:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    2cc2:	6880      	ldr	r0, [r0, #8]
    2cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2cc8:	f001 fcf8 	bl	46bc <z_impl_k_sem_take>
	return dev->config->config_info;
    2ccc:	682b      	ldr	r3, [r5, #0]
		if (res != NRFX_SUCCESS) {
    2cce:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 2db4 <i2c_nrfx_twi_transfer+0x100>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    2cd2:	6898      	ldr	r0, [r3, #8]
    2cd4:	f000 ffa4 	bl	3c20 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    2cd8:	2600      	movs	r6, #0
    2cda:	42be      	cmp	r6, r7
    2cdc:	d301      	bcc.n	2ce2 <i2c_nrfx_twi_transfer+0x2e>
	int ret = 0;
    2cde:	2400      	movs	r4, #0
    2ce0:	e02e      	b.n	2d40 <i2c_nrfx_twi_transfer+0x8c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2ce2:	f894 b008 	ldrb.w	fp, [r4, #8]
    2ce6:	f01b 0a08 	ands.w	sl, fp, #8
    2cea:	d158      	bne.n	2d9e <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
    2cec:	2212      	movs	r2, #18
    2cee:	4651      	mov	r1, sl
    2cf0:	f10d 0006 	add.w	r0, sp, #6
    2cf4:	f002 f98e 	bl	5014 <memset>
    2cf8:	6862      	ldr	r2, [r4, #4]
    2cfa:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2cfc:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    2d00:	6822      	ldr	r2, [r4, #0]
    2d02:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2d06:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    2d0a:	f88d 9005 	strb.w	r9, [sp, #5]
    2d0e:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2d10:	d121      	bne.n	2d56 <i2c_nrfx_twi_transfer+0xa2>
			if ((i < (num_msgs - 1)) &&
    2d12:	1e7a      	subs	r2, r7, #1
    2d14:	42b2      	cmp	r2, r6
    2d16:	d902      	bls.n	2d1e <i2c_nrfx_twi_transfer+0x6a>
    2d18:	7d22      	ldrb	r2, [r4, #20]
    2d1a:	0752      	lsls	r2, r2, #29
    2d1c:	d51d      	bpl.n	2d5a <i2c_nrfx_twi_transfer+0xa6>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d13d      	bne.n	2d9e <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    2d22:	2220      	movs	r2, #32
	return dev->config->config_info;
    2d24:	682b      	ldr	r3, [r5, #0]
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    2d26:	a901      	add	r1, sp, #4
    2d28:	6898      	ldr	r0, [r3, #8]
    2d2a:	f000 ffa3 	bl	3c74 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    2d2e:	4540      	cmp	r0, r8
    2d30:	d015      	beq.n	2d5e <i2c_nrfx_twi_transfer+0xaa>
			if (res == NRFX_ERROR_BUSY) {
    2d32:	4b1c      	ldr	r3, [pc, #112]	; (2da4 <i2c_nrfx_twi_transfer+0xf0>)
				ret = -EIO;
    2d34:	4298      	cmp	r0, r3
    2d36:	bf0c      	ite	eq
    2d38:	f06f 040f 	mvneq.w	r4, #15
    2d3c:	f06f 0404 	mvnne.w	r4, #4
	return dev->config->config_info;
    2d40:	682b      	ldr	r3, [r5, #0]
	nrfx_twi_disable(&get_dev_config(dev)->twi);
    2d42:	6898      	ldr	r0, [r3, #8]
    2d44:	f000 ff7c 	bl	3c40 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    2d48:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    2d4a:	f001 fc91 	bl	4670 <z_impl_k_sem_give>
}
    2d4e:	4620      	mov	r0, r4
    2d50:	b007      	add	sp, #28
    2d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t xfer_flags = 0;
    2d56:	4652      	mov	r2, sl
    2d58:	e7e4      	b.n	2d24 <i2c_nrfx_twi_transfer+0x70>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    2d5a:	2240      	movs	r2, #64	; 0x40
    2d5c:	e7e2      	b.n	2d24 <i2c_nrfx_twi_transfer+0x70>
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
    2d5e:	68a8      	ldr	r0, [r5, #8]
    2d60:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    2d62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d66:	f001 fca9 	bl	46bc <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
    2d6a:	68ab      	ldr	r3, [r5, #8]
    2d6c:	6a19      	ldr	r1, [r3, #32]
		if (res != NRFX_SUCCESS) {
    2d6e:	4541      	cmp	r1, r8
    2d70:	f104 040c 	add.w	r4, r4, #12
    2d74:	d011      	beq.n	2d9a <i2c_nrfx_twi_transfer+0xe6>
			LOG_ERR("Error %d occurred for message %d", res, i);
    2d76:	2201      	movs	r2, #1
    2d78:	f04f 0300 	mov.w	r3, #0
    2d7c:	f362 0307 	bfi	r3, r2, #0, #8
    2d80:	4809      	ldr	r0, [pc, #36]	; (2da8 <i2c_nrfx_twi_transfer+0xf4>)
    2d82:	4a0a      	ldr	r2, [pc, #40]	; (2dac <i2c_nrfx_twi_transfer+0xf8>)
    2d84:	1a12      	subs	r2, r2, r0
    2d86:	08d2      	lsrs	r2, r2, #3
    2d88:	f362 138f 	bfi	r3, r2, #6, #10
    2d8c:	4808      	ldr	r0, [pc, #32]	; (2db0 <i2c_nrfx_twi_transfer+0xfc>)
    2d8e:	4632      	mov	r2, r6
    2d90:	f001 ff6b 	bl	4c6a <log_2>
			ret = -EIO;
    2d94:	f06f 0404 	mvn.w	r4, #4
			break;
    2d98:	e7d2      	b.n	2d40 <i2c_nrfx_twi_transfer+0x8c>
	for (size_t i = 0; i < num_msgs; i++) {
    2d9a:	3601      	adds	r6, #1
    2d9c:	e79d      	b.n	2cda <i2c_nrfx_twi_transfer+0x26>
			ret = -ENOTSUP;
    2d9e:	f06f 0422 	mvn.w	r4, #34	; 0x22
    2da2:	e7cd      	b.n	2d40 <i2c_nrfx_twi_transfer+0x8c>
    2da4:	0bad000b 	.word	0x0bad000b
    2da8:	00005adc 	.word	0x00005adc
    2dac:	00005aec 	.word	0x00005aec
    2db0:	00006165 	.word	0x00006165
    2db4:	0bad0000 	.word	0x0bad0000

00002db8 <event_handler>:
	switch (p_event->type) {
    2db8:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
    2dba:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
    2dbc:	2a01      	cmp	r2, #1
    2dbe:	d00a      	beq.n	2dd6 <event_handler+0x1e>
    2dc0:	b11a      	cbz	r2, 2dca <event_handler+0x12>
    2dc2:	2a02      	cmp	r2, #2
    2dc4:	d009      	beq.n	2dda <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2dc6:	4a06      	ldr	r2, [pc, #24]	; (2de0 <event_handler+0x28>)
    2dc8:	e000      	b.n	2dcc <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
    2dca:	4a06      	ldr	r2, [pc, #24]	; (2de4 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2dcc:	621a      	str	r2, [r3, #32]
	z_impl_k_sem_give(sem);
    2dce:	f103 0010 	add.w	r0, r3, #16
    2dd2:	f001 bc4d 	b.w	4670 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2dd6:	4a04      	ldr	r2, [pc, #16]	; (2de8 <event_handler+0x30>)
    2dd8:	e7f8      	b.n	2dcc <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2dda:	4a04      	ldr	r2, [pc, #16]	; (2dec <event_handler+0x34>)
    2ddc:	e7f6      	b.n	2dcc <event_handler+0x14>
    2dde:	bf00      	nop
    2de0:	0bad0001 	.word	0x0bad0001
    2de4:	0bad0000 	.word	0x0bad0000
    2de8:	0bae0001 	.word	0x0bae0001
    2dec:	0bae0002 	.word	0x0bae0002

00002df0 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
    2df0:	b510      	push	{r4, lr}
    2df2:	4604      	mov	r4, r0
    2df4:	2200      	movs	r2, #0
    2df6:	2101      	movs	r1, #1
    2df8:	2003      	movs	r0, #3
    2dfa:	f7fe fbd3 	bl	15a4 <z_arm_irq_priority_set>
	return dev->config->config_info;
    2dfe:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
    2e00:	4a10      	ldr	r2, [pc, #64]	; (2e44 <spi_0_init+0x54>)
	return dev->config->config_info;
    2e02:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
    2e04:	4623      	mov	r3, r4
    2e06:	f100 0108 	add.w	r1, r0, #8
    2e0a:	f000 fc85 	bl	3718 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    2e0e:	4b0e      	ldr	r3, [pc, #56]	; (2e48 <spi_0_init+0x58>)
    2e10:	4298      	cmp	r0, r3
    2e12:	d012      	beq.n	2e3a <spi_0_init+0x4a>
		LOG_ERR("Failed to initialize device: %s",
    2e14:	2301      	movs	r3, #1
    2e16:	f04f 0200 	mov.w	r2, #0
    2e1a:	f363 0207 	bfi	r2, r3, #0, #8
    2e1e:	490b      	ldr	r1, [pc, #44]	; (2e4c <spi_0_init+0x5c>)
    2e20:	4b0b      	ldr	r3, [pc, #44]	; (2e50 <spi_0_init+0x60>)
    2e22:	480c      	ldr	r0, [pc, #48]	; (2e54 <spi_0_init+0x64>)
    2e24:	1a5b      	subs	r3, r3, r1
    2e26:	08db      	lsrs	r3, r3, #3
    2e28:	f363 128f 	bfi	r2, r3, #6, #10
    2e2c:	6823      	ldr	r3, [r4, #0]
    2e2e:	6819      	ldr	r1, [r3, #0]
    2e30:	f001 ff07 	bl	4c42 <log_1>
		return -EBUSY;
    2e34:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPI_DEVICE(0);
    2e38:	bd10      	pop	{r4, pc}
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
    2e3a:	68a0      	ldr	r0, [r4, #8]
    2e3c:	f002 faf1 	bl	5422 <spi_context_unlock_unconditionally>
	return 0;
    2e40:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(0);
    2e42:	e7f9      	b.n	2e38 <spi_0_init+0x48>
    2e44:	00002ed9 	.word	0x00002ed9
    2e48:	0bad0000 	.word	0x0bad0000
    2e4c:	00005adc 	.word	0x00005adc
    2e50:	00005b1c 	.word	0x00005b1c
    2e54:	00006199 	.word	0x00006199

00002e58 <transfer_next_chunk>:
{
    2e58:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    2e5a:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    2e5c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2e5e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
{
    2e60:	b085      	sub	sp, #20
    2e62:	b982      	cbnz	r2, 2e86 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    2e64:	bb7b      	cbnz	r3, 2ec6 <transfer_next_chunk+0x6e>
	int error = 0;
    2e66:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    2e68:	2200      	movs	r2, #0
    2e6a:	4611      	mov	r1, r2
    2e6c:	4628      	mov	r0, r5
    2e6e:	f002 faae 	bl	53ce <_spi_context_cs_control.isra.7>
	ctx->sync_status = status;
    2e72:	626c      	str	r4, [r5, #36]	; 0x24
    2e74:	f105 0014 	add.w	r0, r5, #20
    2e78:	f001 fbfa 	bl	4670 <z_impl_k_sem_give>
	dev_data->busy = false;
    2e7c:	2300      	movs	r3, #0
    2e7e:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
}
    2e82:	b005      	add	sp, #20
    2e84:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    2e86:	4611      	mov	r1, r2
    2e88:	b113      	cbz	r3, 2e90 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	} else if (ctx->tx_len < ctx->rx_len) {
    2e8a:	429a      	cmp	r2, r3
    2e8c:	bf28      	it	cs
    2e8e:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    2e90:	6bac      	ldr	r4, [r5, #56]	; 0x38
		dev_data->chunk_len = chunk_len;
    2e92:	64a9      	str	r1, [r5, #72]	; 0x48
		xfer.p_tx_buffer = ctx->tx_buf;
    2e94:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    2e96:	b1c4      	cbz	r4, 2eca <transfer_next_chunk+0x72>
    2e98:	2a00      	cmp	r2, #0
    2e9a:	bf18      	it	ne
    2e9c:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    2e9e:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    2ea0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    2ea2:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    2ea4:	b19a      	cbz	r2, 2ece <transfer_next_chunk+0x76>
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	bf18      	it	ne
    2eaa:	460b      	movne	r3, r1
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2eac:	9303      	str	r3, [sp, #12]
	return dev->config->config_info;
    2eae:	6803      	ldr	r3, [r0, #0]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    2eb0:	2200      	movs	r2, #0
    2eb2:	6898      	ldr	r0, [r3, #8]
    2eb4:	4669      	mov	r1, sp
    2eb6:	f000 fcd5 	bl	3864 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    2eba:	4b06      	ldr	r3, [pc, #24]	; (2ed4 <transfer_next_chunk+0x7c>)
    2ebc:	4298      	cmp	r0, r3
    2ebe:	d0e0      	beq.n	2e82 <transfer_next_chunk+0x2a>
		error = -EIO;
    2ec0:	f06f 0404 	mvn.w	r4, #4
    2ec4:	e7d0      	b.n	2e68 <transfer_next_chunk+0x10>
    2ec6:	4619      	mov	r1, r3
    2ec8:	e7e2      	b.n	2e90 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    2eca:	4622      	mov	r2, r4
    2ecc:	e7e7      	b.n	2e9e <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2ece:	4613      	mov	r3, r2
    2ed0:	e7ec      	b.n	2eac <transfer_next_chunk+0x54>
    2ed2:	bf00      	nop
    2ed4:	0bad0000 	.word	0x0bad0000

00002ed8 <event_handler>:
{
    2ed8:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    2eda:	7803      	ldrb	r3, [r0, #0]
{
    2edc:	460d      	mov	r5, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d157      	bne.n	2f92 <event_handler+0xba>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    2ee2:	688c      	ldr	r4, [r1, #8]
	if (!ctx->tx_len) {
    2ee4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2ee6:	b183      	cbz	r3, 2f0a <event_handler+0x32>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    2ee8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
	if (len > ctx->tx_len) {
    2eea:	429a      	cmp	r2, r3
    2eec:	d925      	bls.n	2f3a <event_handler+0x62>
		LOG_ERR("Update exceeds current buffer");
    2eee:	2301      	movs	r3, #1
    2ef0:	f04f 0100 	mov.w	r1, #0
    2ef4:	f363 0107 	bfi	r1, r3, #0, #8
    2ef8:	4a26      	ldr	r2, [pc, #152]	; (2f94 <event_handler+0xbc>)
    2efa:	4b27      	ldr	r3, [pc, #156]	; (2f98 <event_handler+0xc0>)
    2efc:	4827      	ldr	r0, [pc, #156]	; (2f9c <event_handler+0xc4>)
    2efe:	1a9b      	subs	r3, r3, r2
    2f00:	08db      	lsrs	r3, r3, #3
    2f02:	f363 118f 	bfi	r1, r3, #6, #10
    2f06:	f001 fe8f 	bl	4c28 <log_0>
	if (!ctx->rx_len) {
    2f0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f0c:	b183      	cbz	r3, 2f30 <event_handler+0x58>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    2f0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
	if (len > ctx->rx_len) {
    2f10:	429a      	cmp	r2, r3
    2f12:	d928      	bls.n	2f66 <event_handler+0x8e>
		LOG_ERR("Update exceeds current buffer");
    2f14:	2301      	movs	r3, #1
    2f16:	f04f 0100 	mov.w	r1, #0
    2f1a:	f363 0107 	bfi	r1, r3, #0, #8
    2f1e:	4a1d      	ldr	r2, [pc, #116]	; (2f94 <event_handler+0xbc>)
    2f20:	4b1d      	ldr	r3, [pc, #116]	; (2f98 <event_handler+0xc0>)
    2f22:	481e      	ldr	r0, [pc, #120]	; (2f9c <event_handler+0xc4>)
    2f24:	1a9b      	subs	r3, r3, r2
    2f26:	08db      	lsrs	r3, r3, #3
    2f28:	f363 118f 	bfi	r1, r3, #6, #10
    2f2c:	f001 fe7c 	bl	4c28 <log_0>
		transfer_next_chunk(dev);
    2f30:	4628      	mov	r0, r5
}
    2f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev);
    2f36:	f7ff bf8f 	b.w	2e58 <transfer_next_chunk>
	ctx->tx_len -= len;
    2f3a:	1a9b      	subs	r3, r3, r2
    2f3c:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
    2f3e:	b963      	cbnz	r3, 2f5a <event_handler+0x82>
		ctx->tx_count--;
    2f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2f42:	3b01      	subs	r3, #1
    2f44:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
    2f46:	b163      	cbz	r3, 2f62 <event_handler+0x8a>
			ctx->current_tx++;
    2f48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f4a:	f103 0208 	add.w	r2, r3, #8
    2f4e:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    2f50:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    2f52:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    2f54:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
    2f56:	63e3      	str	r3, [r4, #60]	; 0x3c
    2f58:	e7d7      	b.n	2f0a <event_handler+0x32>
	} else if (ctx->tx_buf) {
    2f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d0d4      	beq.n	2f0a <event_handler+0x32>
		ctx->tx_buf += dfs * len;
    2f60:	4413      	add	r3, r2
    2f62:	63a3      	str	r3, [r4, #56]	; 0x38
    2f64:	e7d1      	b.n	2f0a <event_handler+0x32>
	ctx->rx_len -= len;
    2f66:	1a9b      	subs	r3, r3, r2
    2f68:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    2f6a:	b963      	cbnz	r3, 2f86 <event_handler+0xae>
		ctx->rx_count--;
    2f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f6e:	3b01      	subs	r3, #1
    2f70:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
    2f72:	b163      	cbz	r3, 2f8e <event_handler+0xb6>
			ctx->current_rx++;
    2f74:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2f76:	f103 0208 	add.w	r2, r3, #8
    2f7a:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    2f7c:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    2f7e:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    2f80:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
    2f82:	6463      	str	r3, [r4, #68]	; 0x44
    2f84:	e7d4      	b.n	2f30 <event_handler+0x58>
	} else if (ctx->rx_buf) {
    2f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d0d1      	beq.n	2f30 <event_handler+0x58>
		ctx->rx_buf += dfs * len;
    2f8c:	4413      	add	r3, r2
    2f8e:	6423      	str	r3, [r4, #64]	; 0x40
    2f90:	e7ce      	b.n	2f30 <event_handler+0x58>
}
    2f92:	bd38      	pop	{r3, r4, r5, pc}
    2f94:	00005adc 	.word	0x00005adc
    2f98:	00005b1c 	.word	0x00005b1c
    2f9c:	000061b9 	.word	0x000061b9

00002fa0 <spi_nrfx_transceive>:
{
    2fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fa4:	4607      	mov	r7, r0
	k_sem_take(&ctx->lock, K_FOREVER);
    2fa6:	6880      	ldr	r0, [r0, #8]
    2fa8:	4688      	mov	r8, r1
    2faa:	4616      	mov	r6, r2
    2fac:	461d      	mov	r5, r3
    2fae:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    2fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2fb4:	f001 fb82 	bl	46bc <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    2fb8:	68bc      	ldr	r4, [r7, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
    2fba:	6823      	ldr	r3, [r4, #0]
    2fbc:	4598      	cmp	r8, r3
    2fbe:	f000 80b0 	beq.w	3122 <spi_nrfx_transceive+0x182>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    2fc2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
    2fc6:	6838      	ldr	r0, [r7, #0]
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    2fc8:	07d9      	lsls	r1, r3, #31
    2fca:	d516      	bpl.n	2ffa <spi_nrfx_transceive+0x5a>
		LOG_ERR("Slave mode is not supported on %s",
    2fcc:	2301      	movs	r3, #1
    2fce:	f04f 0200 	mov.w	r2, #0
    2fd2:	f363 0207 	bfi	r2, r3, #0, #8
    2fd6:	4980      	ldr	r1, [pc, #512]	; (31d8 <spi_nrfx_transceive+0x238>)
    2fd8:	4b80      	ldr	r3, [pc, #512]	; (31dc <spi_nrfx_transceive+0x23c>)
    2fda:	1a5b      	subs	r3, r3, r1
    2fdc:	08db      	lsrs	r3, r3, #3
    2fde:	6801      	ldr	r1, [r0, #0]
    2fe0:	487f      	ldr	r0, [pc, #508]	; (31e0 <spi_nrfx_transceive+0x240>)
    2fe2:	f363 128f 	bfi	r2, r3, #6, #10
    2fe6:	f001 fe2c 	bl	4c42 <log_1>
		return -EINVAL;
    2fea:	f06f 0515 	mvn.w	r5, #21
	z_impl_k_sem_give(sem);
    2fee:	1d20      	adds	r0, r4, #4
    2ff0:	f001 fb3e 	bl	4670 <z_impl_k_sem_give>
}
    2ff4:	4628      	mov	r0, r5
    2ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    2ffa:	071a      	lsls	r2, r3, #28
    2ffc:	d50e      	bpl.n	301c <spi_nrfx_transceive+0x7c>
		LOG_ERR("Loopback mode is not supported");
    2ffe:	2301      	movs	r3, #1
    3000:	f04f 0100 	mov.w	r1, #0
    3004:	f363 0107 	bfi	r1, r3, #0, #8
    3008:	4a73      	ldr	r2, [pc, #460]	; (31d8 <spi_nrfx_transceive+0x238>)
    300a:	4b74      	ldr	r3, [pc, #464]	; (31dc <spi_nrfx_transceive+0x23c>)
    300c:	4875      	ldr	r0, [pc, #468]	; (31e4 <spi_nrfx_transceive+0x244>)
    300e:	1a9b      	subs	r3, r3, r2
    3010:	08db      	lsrs	r3, r3, #3
    3012:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Word sizes other than 8 bits"
    3016:	f001 fe07 	bl	4c28 <log_0>
    301a:	e7e6      	b.n	2fea <spi_nrfx_transceive+0x4a>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    301c:	f413 51c0 	ands.w	r1, r3, #6144	; 0x1800
    3020:	d00c      	beq.n	303c <spi_nrfx_transceive+0x9c>
		LOG_ERR("Only single line mode is supported");
    3022:	2301      	movs	r3, #1
    3024:	f04f 0100 	mov.w	r1, #0
    3028:	f363 0107 	bfi	r1, r3, #0, #8
    302c:	4a6a      	ldr	r2, [pc, #424]	; (31d8 <spi_nrfx_transceive+0x238>)
    302e:	4b6b      	ldr	r3, [pc, #428]	; (31dc <spi_nrfx_transceive+0x23c>)
    3030:	486d      	ldr	r0, [pc, #436]	; (31e8 <spi_nrfx_transceive+0x248>)
    3032:	1a9b      	subs	r3, r3, r2
    3034:	08db      	lsrs	r3, r3, #3
    3036:	f363 118f 	bfi	r1, r3, #6, #10
    303a:	e7ec      	b.n	3016 <spi_nrfx_transceive+0x76>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    303c:	f3c3 1345 	ubfx	r3, r3, #5, #6
    3040:	2b08      	cmp	r3, #8
    3042:	d00c      	beq.n	305e <spi_nrfx_transceive+0xbe>
		LOG_ERR("Word sizes other than 8 bits"
    3044:	2301      	movs	r3, #1
    3046:	f04f 0100 	mov.w	r1, #0
    304a:	f363 0107 	bfi	r1, r3, #0, #8
    304e:	4a62      	ldr	r2, [pc, #392]	; (31d8 <spi_nrfx_transceive+0x238>)
    3050:	4b62      	ldr	r3, [pc, #392]	; (31dc <spi_nrfx_transceive+0x23c>)
    3052:	4866      	ldr	r0, [pc, #408]	; (31ec <spi_nrfx_transceive+0x24c>)
    3054:	1a9b      	subs	r3, r3, r2
    3056:	08db      	lsrs	r3, r3, #3
    3058:	f363 118f 	bfi	r1, r3, #6, #10
    305c:	e7db      	b.n	3016 <spi_nrfx_transceive+0x76>
	if (spi_cfg->frequency < 125000) {
    305e:	f8d8 2000 	ldr.w	r2, [r8]
    3062:	4b63      	ldr	r3, [pc, #396]	; (31f0 <spi_nrfx_transceive+0x250>)
    3064:	429a      	cmp	r2, r3
    3066:	d80c      	bhi.n	3082 <spi_nrfx_transceive+0xe2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    3068:	2301      	movs	r3, #1
    306a:	f04f 0100 	mov.w	r1, #0
    306e:	f363 0107 	bfi	r1, r3, #0, #8
    3072:	4a59      	ldr	r2, [pc, #356]	; (31d8 <spi_nrfx_transceive+0x238>)
    3074:	4b59      	ldr	r3, [pc, #356]	; (31dc <spi_nrfx_transceive+0x23c>)
    3076:	485f      	ldr	r0, [pc, #380]	; (31f4 <spi_nrfx_transceive+0x254>)
    3078:	1a9b      	subs	r3, r3, r2
    307a:	08db      	lsrs	r3, r3, #3
    307c:	f363 118f 	bfi	r1, r3, #6, #10
    3080:	e7c9      	b.n	3016 <spi_nrfx_transceive+0x76>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    3082:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return dev->config->config_info;
    3086:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ctx->config = spi_cfg;
    308a:	f8c4 8000 	str.w	r8, [r4]
    308e:	2b00      	cmp	r3, #0
    3090:	d06f      	beq.n	3172 <spi_nrfx_transceive+0x1d2>
    3092:	6818      	ldr	r0, [r3, #0]
    3094:	2800      	cmp	r0, #0
    3096:	d06c      	beq.n	3172 <spi_nrfx_transceive+0x1d2>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    3098:	685a      	ldr	r2, [r3, #4]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    309a:	6843      	ldr	r3, [r0, #4]
    309c:	f8d3 a000 	ldr.w	sl, [r3]
    30a0:	2301      	movs	r3, #1
    30a2:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
    30a4:	6822      	ldr	r2, [r4, #0]
    30a6:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    30a8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
    30ac:	43d2      	mvns	r2, r2
    30ae:	0fd2      	lsrs	r2, r2, #31
    30b0:	e9d3 0100 	ldrd	r0, r1, [r3]
    30b4:	f002 f982 	bl	53bc <gpio_pin_write>
	nrf_spi_configure(spi->p_reg,
    30b8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    30bc:	f8d9 1000 	ldr.w	r1, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    30c0:	0798      	lsls	r0, r3, #30
    30c2:	f003 0204 	and.w	r2, r3, #4
    30c6:	d563      	bpl.n	3190 <spi_nrfx_transceive+0x1f0>
			return NRF_SPI_MODE_2;
    30c8:	2a00      	cmp	r2, #0
    30ca:	bf14      	ite	ne
    30cc:	2203      	movne	r2, #3
    30ce:	2202      	moveq	r2, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    30d0:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    30d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
    30d6:	d05f      	beq.n	3198 <spi_nrfx_transceive+0x1f8>
    30d8:	2a03      	cmp	r2, #3
    30da:	d060      	beq.n	319e <spi_nrfx_transceive+0x1fe>
    30dc:	2a01      	cmp	r2, #1
    30de:	d101      	bne.n	30e4 <spi_nrfx_transceive+0x144>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    30e0:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    30e4:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
    30e8:	4a43      	ldr	r2, [pc, #268]	; (31f8 <spi_nrfx_transceive+0x258>)
	nrf_spi_frequency_set(spi->p_reg,
    30ea:	f8d8 3000 	ldr.w	r3, [r8]
	if (frequency < 250000) {
    30ee:	4293      	cmp	r3, r2
    30f0:	d958      	bls.n	31a4 <spi_nrfx_transceive+0x204>
	} else if (frequency < 500000) {
    30f2:	4a42      	ldr	r2, [pc, #264]	; (31fc <spi_nrfx_transceive+0x25c>)
    30f4:	4293      	cmp	r3, r2
    30f6:	d958      	bls.n	31aa <spi_nrfx_transceive+0x20a>
	} else if (frequency < 1000000) {
    30f8:	4a41      	ldr	r2, [pc, #260]	; (3200 <spi_nrfx_transceive+0x260>)
    30fa:	4293      	cmp	r3, r2
    30fc:	d958      	bls.n	31b0 <spi_nrfx_transceive+0x210>
	} else if (frequency < 2000000) {
    30fe:	4a41      	ldr	r2, [pc, #260]	; (3204 <spi_nrfx_transceive+0x264>)
    3100:	4293      	cmp	r3, r2
    3102:	d958      	bls.n	31b6 <spi_nrfx_transceive+0x216>
	} else if (frequency < 4000000) {
    3104:	4a40      	ldr	r2, [pc, #256]	; (3208 <spi_nrfx_transceive+0x268>)
    3106:	4293      	cmp	r3, r2
    3108:	d958      	bls.n	31bc <spi_nrfx_transceive+0x21c>
		return NRF_SPI_FREQ_8M;
    310a:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
    310e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
    3112:	4293      	cmp	r3, r2
    3114:	bf94      	ite	ls
    3116:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    311a:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    311e:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    3122:	2301      	movs	r3, #1
    3124:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	if (tx_bufs) {
    3128:	2e00      	cmp	r6, #0
    312a:	d04a      	beq.n	31c2 <spi_nrfx_transceive+0x222>
		ctx->current_tx = tx_bufs->buffers;
    312c:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    312e:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    3130:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    3132:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    3134:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    3136:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    3138:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    313a:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    313c:	2d00      	cmp	r5, #0
    313e:	d045      	beq.n	31cc <spi_nrfx_transceive+0x22c>
		ctx->current_rx = rx_bufs->buffers;
    3140:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    3142:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    3144:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    3146:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    3148:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    314a:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    314c:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    314e:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    3150:	2200      	movs	r2, #0
    3152:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
    3154:	2101      	movs	r1, #1
    3156:	4620      	mov	r0, r4
    3158:	f002 f939 	bl	53ce <_spi_context_cs_control.isra.7>
		transfer_next_chunk(dev);
    315c:	4638      	mov	r0, r7
    315e:	f7ff fe7b 	bl	2e58 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    3162:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3166:	f104 0014 	add.w	r0, r4, #20
    316a:	f001 faa7 	bl	46bc <z_impl_k_sem_take>
	status = ctx->sync_status;
    316e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	return status;
    3170:	e73d      	b.n	2fee <spi_nrfx_transceive+0x4e>
		LOG_INF("CS control inhibited (no GPIO device)");
    3172:	2303      	movs	r3, #3
    3174:	f04f 0100 	mov.w	r1, #0
    3178:	f363 0107 	bfi	r1, r3, #0, #8
    317c:	4a16      	ldr	r2, [pc, #88]	; (31d8 <spi_nrfx_transceive+0x238>)
    317e:	4b17      	ldr	r3, [pc, #92]	; (31dc <spi_nrfx_transceive+0x23c>)
    3180:	4822      	ldr	r0, [pc, #136]	; (320c <spi_nrfx_transceive+0x26c>)
    3182:	1a9b      	subs	r3, r3, r2
    3184:	08db      	lsrs	r3, r3, #3
    3186:	f363 118f 	bfi	r1, r3, #6, #10
    318a:	f001 fd4d 	bl	4c28 <log_0>
    318e:	e793      	b.n	30b8 <spi_nrfx_transceive+0x118>
			return NRF_SPI_MODE_0;
    3190:	3200      	adds	r2, #0
    3192:	bf18      	it	ne
    3194:	2201      	movne	r2, #1
    3196:	e79b      	b.n	30d0 <spi_nrfx_transceive+0x130>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    3198:	f043 0304 	orr.w	r3, r3, #4
        break;
    319c:	e7a2      	b.n	30e4 <spi_nrfx_transceive+0x144>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    319e:	f043 0306 	orr.w	r3, r3, #6
        break;
    31a2:	e79f      	b.n	30e4 <spi_nrfx_transceive+0x144>
		return NRF_SPI_FREQ_125K;
    31a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    31a8:	e7b9      	b.n	311e <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_250K;
    31aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    31ae:	e7b6      	b.n	311e <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_500K;
    31b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    31b4:	e7b3      	b.n	311e <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_1M;
    31b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    31ba:	e7b0      	b.n	311e <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_2M;
    31bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    31c0:	e7ad      	b.n	311e <spi_nrfx_transceive+0x17e>
		ctx->tx_count = 0;
    31c2:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    31c6:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
    31ca:	e7b7      	b.n	313c <spi_nrfx_transceive+0x19c>
		ctx->rx_count = 0;
    31cc:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    31d0:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    31d4:	e7bc      	b.n	3150 <spi_nrfx_transceive+0x1b0>
    31d6:	bf00      	nop
    31d8:	00005adc 	.word	0x00005adc
    31dc:	00005b1c 	.word	0x00005b1c
    31e0:	000061d7 	.word	0x000061d7
    31e4:	000061f9 	.word	0x000061f9
    31e8:	00006218 	.word	0x00006218
    31ec:	0000623b 	.word	0x0000623b
    31f0:	0001e847 	.word	0x0001e847
    31f4:	0000626a 	.word	0x0000626a
    31f8:	0003d08f 	.word	0x0003d08f
    31fc:	0007a11f 	.word	0x0007a11f
    3200:	000f423f 	.word	0x000f423f
    3204:	001e847f 	.word	0x001e847f
    3208:	003d08ff 	.word	0x003d08ff
    320c:	0000629b 	.word	0x0000629b

00003210 <cst816s_sample_fetch>:


LOG_MODULE_REGISTER(CST816S, CONFIG_SENSOR_LOG_LEVEL);

static int cst816s_sample_fetch(struct device *dev, enum sensor_channel chan)
{
    3210:	b570      	push	{r4, r5, r6, lr}
	struct cst816s_data *drv_data = dev->driver_data;
    3212:	6885      	ldr	r5, [r0, #8]
{
    3214:	b098      	sub	sp, #96	; 0x60
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
    3216:	f10d 0307 	add.w	r3, sp, #7
	/*
	 * since all accel data register addresses are consecutive,
	 * a burst read can be used to read all the samples
	 */
//	MY_REGISTER6=0x00;
	if (i2c_burst_read(drv_data->i2c, CST816S_I2C_ADDRESS,
    321a:	6828      	ldr	r0, [r5, #0]
    321c:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    321e:	2301      	movs	r3, #1
    3220:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (u8_t *)read_buf;
    3222:	ab08      	add	r3, sp, #32
    3224:	9305      	str	r3, [sp, #20]
	msg[1].len = num_read;
    3226:	2340      	movs	r3, #64	; 0x40
    3228:	2400      	movs	r4, #0
    322a:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    322c:	2307      	movs	r3, #7
    322e:	f88d 4007 	strb.w	r4, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3232:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3236:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    323a:	6843      	ldr	r3, [r0, #4]
    323c:	2202      	movs	r2, #2
    323e:	685e      	ldr	r6, [r3, #4]
    3240:	a902      	add	r1, sp, #8
    3242:	2315      	movs	r3, #21
    3244:	47b0      	blx	r6
    3246:	42a0      	cmp	r0, r4
    3248:	db16      	blt.n	3278 <cst816s_sample_fetch+0x68>
// bytes 3 to 8 are repeated 10 times
// byte 3 (MSB bit 3..0)
// byte 4 (LSB)
// only first is relevant
//
	msb = buf[3] & 0x0f;
    324a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        lsb = buf[4];
MY_REGISTER1=lsb;
    324e:	490c      	ldr	r1, [pc, #48]	; (3280 <cst816s_sample_fetch+0x70>)
	msb = buf[3] & 0x0f;
    3250:	f003 020f 	and.w	r2, r3, #15
        lsb = buf[4];
    3254:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
MY_REGISTER1=lsb;
    3258:	700b      	strb	r3, [r1, #0]
	drv_data->x_sample = (msb<<8)|lsb; 
    325a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    325e:	80ab      	strh	r3, [r5, #4]

	msb = buf[5] & 0x0f;
    3260:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
        lsb = buf[6];
	drv_data->y_sample = (msb<<8)|lsb; // todo check if buf[5] is indeed Y
    3264:	f003 020f 	and.w	r2, r3, #15
    3268:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    326c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3270:	80eb      	strh	r3, [r5, #6]


	return 0;
    3272:	4620      	mov	r0, r4
}
    3274:	b018      	add	sp, #96	; 0x60
    3276:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3278:	f06f 0004 	mvn.w	r0, #4
    327c:	e7fa      	b.n	3274 <cst816s_sample_fetch+0x64>
    327e:	bf00      	nop
    3280:	2000f000 	.word	0x2000f000

00003284 <cst816s_gpio_callback>:
	return 0;
}

static void cst816s_gpio_callback(struct device *dev,
				 struct gpio_callback *cb, u32_t pins)
{
    3284:	b510      	push	{r4, lr}
    3286:	460c      	mov	r4, r1
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
    3288:	6843      	ldr	r3, [r0, #4]
    328a:	695b      	ldr	r3, [r3, #20]
    328c:	b113      	cbz	r3, 3294 <cst816s_gpio_callback+0x10>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
    328e:	221c      	movs	r2, #28
    3290:	2100      	movs	r1, #0
    3292:	4798      	blx	r3
	ARG_UNUSED(pins);

	gpio_pin_disable_callback(dev, CONFIG_CST816S_GPIO_PIN_NUM);

#if defined(CONFIG_CST816S_TRIGGER_OWN_THREAD)
	MY_REGISTER1=0xaa;
    3294:	4b04      	ldr	r3, [pc, #16]	; (32a8 <cst816s_gpio_callback+0x24>)
    3296:	22aa      	movs	r2, #170	; 0xaa
    3298:	701a      	strb	r2, [r3, #0]
	z_impl_k_sem_give(sem);
    329a:	f504 6090 	add.w	r0, r4, #1152	; 0x480
	k_sem_give(&drv_data->gpio_sem);
#elif defined(CONFIG_CST816S_TRIGGER_GLOBAL_THREAD)
	k_work_submit(&drv_data->work);
#endif
}
    329e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    32a2:	f001 b9e5 	b.w	4670 <z_impl_k_sem_give>
    32a6:	bf00      	nop
    32a8:	2000f005 	.word	0x2000f005

000032ac <cst816s_thread>:
}

#ifdef CONFIG_CST816S_TRIGGER_OWN_THREAD
int teller;
static void cst816s_thread(int dev_ptr, int unused)
{
    32ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct device *dev = INT_TO_POINTER(dev_ptr);
	struct cst816s_data *drv_data = dev->driver_data;
teller++;
    32b0:	4c39      	ldr	r4, [pc, #228]	; (3398 <cst816s_thread+0xec>)
	struct cst816s_data *drv_data = dev->driver_data;
    32b2:	6885      	ldr	r5, [r0, #8]
teller++;
    32b4:	6823      	ldr	r3, [r4, #0]
    32b6:	3301      	adds	r3, #1
{
    32b8:	4680      	mov	r8, r0
    32ba:	b09b      	sub	sp, #108	; 0x6c
teller++;
    32bc:	6023      	str	r3, [r4, #0]

//reset touchscreen



        gpio_pin_configure(drv_data->gpio, 10,GPIO_DIR_OUT); //push button out
    32be:	68a8      	ldr	r0, [r5, #8]
	return api->config(port, access_op, pin, flags);
    32c0:	6843      	ldr	r3, [r0, #4]
    32c2:	220a      	movs	r2, #10
    32c4:	681e      	ldr	r6, [r3, #0]
    32c6:	2100      	movs	r1, #0
    32c8:	2301      	movs	r3, #1
    32ca:	47b0      	blx	r6
        gpio_pin_write(drv_data->gpio, 10, 0); //set port low 
    32cc:	68a8      	ldr	r0, [r5, #8]
	return api->write(port, access_op, pin, value);
    32ce:	6843      	ldr	r3, [r0, #4]
    32d0:	685e      	ldr	r6, [r3, #4]
    32d2:	2300      	movs	r3, #0
    32d4:	220a      	movs	r2, #10
    32d6:	4619      	mov	r1, r3
    32d8:	47b0      	blx	r6
        gpio_pin_write(drv_data->gpio, 10, 1); //set port high
    32da:	68a8      	ldr	r0, [r5, #8]
    32dc:	6843      	ldr	r3, [r0, #4]

if (teller > 200) teller=0;
	ARG_UNUSED(unused);

	while (1) {
		MY_REGISTER4=0xaa;
    32de:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 33a8 <cst816s_thread+0xfc>
    32e2:	685e      	ldr	r6, [r3, #4]
    32e4:	220a      	movs	r2, #10
    32e6:	2301      	movs	r3, #1
    32e8:	2100      	movs	r1, #0
    32ea:	47b0      	blx	r6
if (teller > 200) teller=0;
    32ec:	6823      	ldr	r3, [r4, #0]
    32ee:	9401      	str	r4, [sp, #4]
    32f0:	2bc8      	cmp	r3, #200	; 0xc8
    32f2:	bfc4      	itt	gt
    32f4:	4622      	movgt	r2, r4
    32f6:	2300      	movgt	r3, #0
		MY_REGISTER4=0xaa;
    32f8:	f04f 09aa 	mov.w	r9, #170	; 0xaa
if (teller > 200) teller=0;
    32fc:	bfc8      	it	gt
    32fe:	6013      	strgt	r3, [r2, #0]
		MY_REGISTER4=0xaa;
    3300:	46ca      	mov	sl, r9
    3302:	f88b a000 	strb.w	sl, [fp]
	return z_impl_k_sem_take(sem, timeout);
    3306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    330a:	f205 408c 	addw	r0, r5, #1164	; 0x48c
    330e:	f001 f9d5 	bl	46bc <z_impl_k_sem_take>
MY_REGISTER3=0xaa;
    3312:	4b22      	ldr	r3, [pc, #136]	; (339c <cst816s_thread+0xf0>)
	struct cst816s_data *drv_data = dev->driver_data;
    3314:	f8d8 6008 	ldr.w	r6, [r8, #8]
MY_REGISTER3=0xaa;
    3318:	f883 9000 	strb.w	r9, [r3]
	msg[0].buf = (u8_t *)write_buf;
    331c:	f10d 030f 	add.w	r3, sp, #15
	if (i2c_burst_read(drv_data->i2c, CST816S_I2C_ADDRESS,
    3320:	6830      	ldr	r0, [r6, #0]
    3322:	9304      	str	r3, [sp, #16]
	msg[0].len = num_write;
    3324:	2301      	movs	r3, #1
    3326:	9305      	str	r3, [sp, #20]
	msg[1].buf = (u8_t *)read_buf;
    3328:	ab0a      	add	r3, sp, #40	; 0x28
    332a:	9307      	str	r3, [sp, #28]
	msg[1].len = num_read;
    332c:	2340      	movs	r3, #64	; 0x40
    332e:	2700      	movs	r7, #0
    3330:	9308      	str	r3, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3332:	2307      	movs	r3, #7
    3334:	f88d 700f 	strb.w	r7, [sp, #15]
	msg[0].flags = I2C_MSG_WRITE;
    3338:	f88d 7018 	strb.w	r7, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    333c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
    3340:	6843      	ldr	r3, [r0, #4]
    3342:	685b      	ldr	r3, [r3, #4]
    3344:	2202      	movs	r2, #2
    3346:	461c      	mov	r4, r3
    3348:	a904      	add	r1, sp, #16
    334a:	2315      	movs	r3, #21
    334c:	47a0      	blx	r4
    334e:	42b8      	cmp	r0, r7
    3350:	da04      	bge.n	335c <cst816s_thread+0xb0>
		k_sem_take(&drv_data->gpio_sem, K_FOREVER);
		cst816s_thread_cb(dev);
MY_REGISTER6=teller;
    3352:	9b01      	ldr	r3, [sp, #4]
    3354:	781a      	ldrb	r2, [r3, #0]
    3356:	4b12      	ldr	r3, [pc, #72]	; (33a0 <cst816s_thread+0xf4>)
    3358:	701a      	strb	r2, [r3, #0]
    335a:	e7d2      	b.n	3302 <cst816s_thread+0x56>
	msb = buf[3] & 0x0f;
    335c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
MY_REGISTER1=lsb;
    3360:	4910      	ldr	r1, [pc, #64]	; (33a4 <cst816s_thread+0xf8>)
	msb = buf[3] & 0x0f;
    3362:	f003 020f 	and.w	r2, r3, #15
        lsb = buf[4];
    3366:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
MY_REGISTER1=lsb;
    336a:	700b      	strb	r3, [r1, #0]
	drv_data->x_sample = (msb<<8)|lsb; 
    336c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3370:	80b3      	strh	r3, [r6, #4]
	msb = buf[5] & 0x0f;
    3372:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	gpio_pin_enable_callback(drv_data->gpio, CONFIG_CST816S_GPIO_PIN_NUM);
    3376:	68b0      	ldr	r0, [r6, #8]
	drv_data->y_sample = (msb<<8)|lsb; // todo check if buf[5] is indeed Y
    3378:	f003 020f 	and.w	r2, r3, #15
    337c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    3380:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3384:	80f3      	strh	r3, [r6, #6]
	if (api->enable_callback == NULL) {
    3386:	6843      	ldr	r3, [r0, #4]
    3388:	691b      	ldr	r3, [r3, #16]
    338a:	2b00      	cmp	r3, #0
    338c:	d0e1      	beq.n	3352 <cst816s_thread+0xa6>
	return api->enable_callback(port, access_op, pin);
    338e:	221c      	movs	r2, #28
    3390:	4639      	mov	r1, r7
    3392:	4798      	blx	r3
    3394:	e7dd      	b.n	3352 <cst816s_thread+0xa6>
    3396:	bf00      	nop
    3398:	200005d4 	.word	0x200005d4
    339c:	2000f007 	.word	0x2000f007
    33a0:	2000f00a 	.word	0x2000f00a
    33a4:	2000f005 	.word	0x2000f005
    33a8:	2000f008 	.word	0x2000f008

000033ac <cst816s_init_interrupt>:

	return 0;
}

int cst816s_init_interrupt(struct device *dev)
{
    33ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct cst816s_data *drv_data = dev->driver_data;
MY_REGISTER1=0x00;
    33b0:	4b2c      	ldr	r3, [pc, #176]	; (3464 <cst816s_init_interrupt+0xb8>)
MY_REGISTER2=0x00;
    33b2:	4e2d      	ldr	r6, [pc, #180]	; (3468 <cst816s_init_interrupt+0xbc>)
MY_REGISTER3=0x00;
MY_REGISTER4=0x00;
MY_REGISTER5=0x00;
MY_REGISTER6=0x00;
    33b4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 3478 <cst816s_init_interrupt+0xcc>
	struct cst816s_data *drv_data = dev->driver_data;
    33b8:	6885      	ldr	r5, [r0, #8]
MY_REGISTER1=0x00;
    33ba:	2400      	movs	r4, #0
    33bc:	701c      	strb	r4, [r3, #0]
{
    33be:	b087      	sub	sp, #28
MY_REGISTER2=0x00;
    33c0:	7034      	strb	r4, [r6, #0]
{
    33c2:	4680      	mov	r8, r0
MY_REGISTER3=0x00;
    33c4:	709c      	strb	r4, [r3, #2]
MY_REGISTER4=0x00;
    33c6:	70dc      	strb	r4, [r3, #3]
MY_REGISTER5=0x00;
    33c8:	711c      	strb	r4, [r3, #4]
MY_REGISTER6=0x00;
    33ca:	f889 4000 	strb.w	r4, [r9]
    33ce:	4827      	ldr	r0, [pc, #156]	; (346c <cst816s_init_interrupt+0xc0>)
    33d0:	f000 fd2e 	bl	3e30 <z_impl_device_get_binding>
		LOG_DBG("Could not set latched interrupts");
		return -EIO;
	}
*/
	/* setup data ready gpio interrupt */
	drv_data->gpio = device_get_binding(CONFIG_CST816S_GPIO_DEV_NAME);
    33d4:	60a8      	str	r0, [r5, #8]
	if (drv_data->gpio == NULL) {
    33d6:	2800      	cmp	r0, #0
    33d8:	d03f      	beq.n	345a <cst816s_init_interrupt+0xae>
	return api->config(port, access_op, pin, flags);
    33da:	6843      	ldr	r3, [r0, #4]
    33dc:	4621      	mov	r1, r4
    33de:	681f      	ldr	r7, [r3, #0]
    33e0:	221c      	movs	r2, #28
    33e2:	2316      	movs	r3, #22
    33e4:	47b8      	blx	r7
	//
	//
	gpio_pin_configure(drv_data->gpio, CONFIG_CST816S_GPIO_PIN_NUM,
			   GPIO_DIR_IN | GPIO_INT | GPIO_INT_LEVEL |
			   GPIO_INT_ACTIVE_HIGH | GPIO_INT_DEBOUNCE);
MY_REGISTER6=CONFIG_CST816S_GPIO_PIN_NUM;
    33e6:	271c      	movs	r7, #28
    33e8:	f889 7000 	strb.w	r7, [r9]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    33ec:	4b20      	ldr	r3, [pc, #128]	; (3470 <cst816s_init_interrupt+0xc4>)

	gpio_init_callback(&drv_data->gpio_cb,
			   cst816s_gpio_callback,
			   BIT(CONFIG_CST816S_GPIO_PIN_NUM));

	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
    33ee:	68a8      	ldr	r0, [r5, #8]
    33f0:	612b      	str	r3, [r5, #16]
	callback->pin_mask = pin_mask;
    33f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    33f6:	616b      	str	r3, [r5, #20]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    33f8:	6843      	ldr	r3, [r0, #4]
    33fa:	68db      	ldr	r3, [r3, #12]
	gpio_init_callback(&drv_data->gpio_cb,
    33fc:	f105 010c 	add.w	r1, r5, #12
    3400:	b933      	cbnz	r3, 3410 <cst816s_init_interrupt+0x64>
		MY_REGISTER2=0xee;
    3402:	23ee      	movs	r3, #238	; 0xee
    3404:	7033      	strb	r3, [r6, #0]
		LOG_DBG("Could not set gpio callback");
		return -EIO;
    3406:	f06f 0004 	mvn.w	r0, #4
#endif

	gpio_pin_enable_callback(drv_data->gpio, CONFIG_CST816S_GPIO_PIN_NUM);

	return 0;
}
    340a:	b007      	add	sp, #28
    340c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    3410:	2201      	movs	r2, #1
    3412:	4798      	blx	r3
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
    3414:	2800      	cmp	r0, #0
    3416:	dbf4      	blt.n	3402 <cst816s_init_interrupt+0x56>
	z_impl_k_sem_init(sem, initial_count, limit);
    3418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    341c:	4621      	mov	r1, r4
    341e:	f205 408c 	addw	r0, r5, #1164	; 0x48c
    3422:	f002 f9e9 	bl	57f8 <z_impl_k_sem_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3426:	f06f 0305 	mvn.w	r3, #5
    342a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    342e:	e9cd 4404 	strd	r4, r4, [sp, #16]
    3432:	e9cd 8400 	strd	r8, r4, [sp]
    3436:	4b0f      	ldr	r3, [pc, #60]	; (3474 <cst816s_init_interrupt+0xc8>)
    3438:	f44f 6280 	mov.w	r2, #1024	; 0x400
    343c:	f105 0120 	add.w	r1, r5, #32
    3440:	f505 6084 	add.w	r0, r5, #1056	; 0x420
    3444:	f001 f99a 	bl	477c <z_impl_k_thread_create>
	gpio_pin_enable_callback(drv_data->gpio, CONFIG_CST816S_GPIO_PIN_NUM);
    3448:	68a8      	ldr	r0, [r5, #8]
	if (api->enable_callback == NULL) {
    344a:	6843      	ldr	r3, [r0, #4]
    344c:	691b      	ldr	r3, [r3, #16]
    344e:	b13b      	cbz	r3, 3460 <cst816s_init_interrupt+0xb4>
	return api->enable_callback(port, access_op, pin);
    3450:	463a      	mov	r2, r7
    3452:	4621      	mov	r1, r4
    3454:	4798      	blx	r3
	return 0;
    3456:	4620      	mov	r0, r4
    3458:	e7d7      	b.n	340a <cst816s_init_interrupt+0x5e>
		return -EINVAL;
    345a:	f06f 0015 	mvn.w	r0, #21
    345e:	e7d4      	b.n	340a <cst816s_init_interrupt+0x5e>
	return 0;
    3460:	4618      	mov	r0, r3
    3462:	e7d2      	b.n	340a <cst816s_init_interrupt+0x5e>
    3464:	2000f005 	.word	0x2000f005
    3468:	2000f006 	.word	0x2000f006
    346c:	0000614c 	.word	0x0000614c
    3470:	00003285 	.word	0x00003285
    3474:	000032ad 	.word	0x000032ad
    3478:	2000f00a 	.word	0x2000f00a

0000347c <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    347c:	4b04      	ldr	r3, [pc, #16]	; (3490 <errata_108+0x14>)
    347e:	6818      	ldr	r0, [r3, #0]
    3480:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3482:	bf04      	itt	eq
    3484:	4b03      	ldreq	r3, [pc, #12]	; (3494 <errata_108+0x18>)
    3486:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
    3488:	1f83      	subs	r3, r0, #6
    348a:	4258      	negs	r0, r3
    348c:	4158      	adcs	r0, r3
    348e:	4770      	bx	lr
    3490:	10000130 	.word	0x10000130
    3494:	f0000fe0 	.word	0xf0000fe0

00003498 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3498:	4b07      	ldr	r3, [pc, #28]	; (34b8 <errata_16+0x20>)
    349a:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
    349c:	2b06      	cmp	r3, #6
    349e:	d109      	bne.n	34b4 <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    34a0:	4b06      	ldr	r3, [pc, #24]	; (34bc <errata_16+0x24>)
    34a2:	681b      	ldr	r3, [r3, #0]
    34a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    34a8:	3b03      	subs	r3, #3
    34aa:	2b03      	cmp	r3, #3
    34ac:	d802      	bhi.n	34b4 <errata_16+0x1c>
    34ae:	4a04      	ldr	r2, [pc, #16]	; (34c0 <errata_16+0x28>)
    34b0:	5cd0      	ldrb	r0, [r2, r3]
    34b2:	4770      	bx	lr
            }
        break;

    }

    return false;
    34b4:	2000      	movs	r0, #0
}
    34b6:	4770      	bx	lr
    34b8:	f0000fe0 	.word	0xf0000fe0
    34bc:	f0000fe8 	.word	0xf0000fe8
    34c0:	000062d4 	.word	0x000062d4

000034c4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    34c4:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
    34c6:	f7ff ffd9 	bl	347c <errata_108>
    34ca:	b128      	cbz	r0, 34d8 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    34cc:	4b7c      	ldr	r3, [pc, #496]	; (36c0 <SystemInit+0x1fc>)
    34ce:	4a7d      	ldr	r2, [pc, #500]	; (36c4 <SystemInit+0x200>)
    34d0:	681b      	ldr	r3, [r3, #0]
    34d2:	f3c3 2304 	ubfx	r3, r3, #8, #5
    34d6:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
    34d8:	f7ff ffde 	bl	3498 <errata_16>
    34dc:	b110      	cbz	r0, 34e4 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    34de:	4b7a      	ldr	r3, [pc, #488]	; (36c8 <SystemInit+0x204>)
    34e0:	4a7a      	ldr	r2, [pc, #488]	; (36cc <SystemInit+0x208>)
    34e2:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
    34e4:	f7ff ffca 	bl	347c <errata_108>
    34e8:	b128      	cbz	r0, 34f6 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    34ea:	4b79      	ldr	r3, [pc, #484]	; (36d0 <SystemInit+0x20c>)
    34ec:	4a79      	ldr	r2, [pc, #484]	; (36d4 <SystemInit+0x210>)
    34ee:	681b      	ldr	r3, [r3, #0]
    34f0:	f3c3 3342 	ubfx	r3, r3, #13, #3
    34f4:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
    34f6:	f7ff ffcf 	bl	3498 <errata_16>
    34fa:	b120      	cbz	r0, 3506 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    34fc:	4a76      	ldr	r2, [pc, #472]	; (36d8 <SystemInit+0x214>)
    34fe:	68d3      	ldr	r3, [r2, #12]
    3500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3504:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
    3506:	f7ff ffb9 	bl	347c <errata_108>
    350a:	b140      	cbz	r0, 351e <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    350c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3510:	2200      	movs	r2, #0
    3512:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    3516:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    351a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
    351e:	f7ff ffbb 	bl	3498 <errata_16>
    3522:	b110      	cbz	r0, 352a <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    3524:	4b6d      	ldr	r3, [pc, #436]	; (36dc <SystemInit+0x218>)
    3526:	2203      	movs	r2, #3
    3528:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
    352a:	f7ff ffb5 	bl	3498 <errata_16>
    352e:	b140      	cbz	r0, 3542 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    3530:	4b6b      	ldr	r3, [pc, #428]	; (36e0 <SystemInit+0x21c>)
    3532:	2205      	movs	r2, #5
    3534:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    3536:	2201      	movs	r2, #1
    3538:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    353a:	2200      	movs	r2, #0
    353c:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    353e:	223f      	movs	r2, #63	; 0x3f
    3540:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3542:	4b68      	ldr	r3, [pc, #416]	; (36e4 <SystemInit+0x220>)
    3544:	681a      	ldr	r2, [r3, #0]
    3546:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3548:	bf0b      	itete	eq
    354a:	4b67      	ldreq	r3, [pc, #412]	; (36e8 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
    354c:	4b67      	ldrne	r3, [pc, #412]	; (36ec <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    354e:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
    3550:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3552:	bf02      	ittt	eq
    3554:	3308      	addeq	r3, #8
    3556:	681b      	ldreq	r3, [r3, #0]
    3558:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
    355c:	2a06      	cmp	r2, #6
    355e:	d14d      	bne.n	35fc <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
    3560:	3b03      	subs	r3, #3
    3562:	2b03      	cmp	r3, #3
    3564:	d803      	bhi.n	356e <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
    3566:	4a62      	ldr	r2, [pc, #392]	; (36f0 <SystemInit+0x22c>)
    3568:	5cd3      	ldrb	r3, [r2, r3]
    356a:	2b00      	cmp	r3, #0
    356c:	d046      	beq.n	35fc <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    356e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3572:	4b60      	ldr	r3, [pc, #384]	; (36f4 <SystemInit+0x230>)
    3574:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3578:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    357c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3580:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3584:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3588:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    358c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3590:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3594:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3598:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    359c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    35a0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    35a4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    35a8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    35ac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    35b0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    35b4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    35b8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    35bc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    35c0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    35c4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    35c8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    35cc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    35d0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    35d4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    35d8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    35dc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    35e0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    35e4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    35e8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    35ec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    35f0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    35f4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    35f8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
    35fc:	f7ff ff3e 	bl	347c <errata_108>
    3600:	b128      	cbz	r0, 360e <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    3602:	4b3d      	ldr	r3, [pc, #244]	; (36f8 <SystemInit+0x234>)
    3604:	4a3d      	ldr	r2, [pc, #244]	; (36fc <SystemInit+0x238>)
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    360c:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
    360e:	f7ff ff35 	bl	347c <errata_108>
    3612:	b148      	cbz	r0, 3628 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3618:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    361c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    361e:	bf44      	itt	mi
    3620:	f06f 0201 	mvnmi.w	r2, #1
    3624:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    3628:	4b2e      	ldr	r3, [pc, #184]	; (36e4 <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	2b06      	cmp	r3, #6
    362e:	d109      	bne.n	3644 <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
    3630:	4b2e      	ldr	r3, [pc, #184]	; (36ec <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
    3632:	681b      	ldr	r3, [r3, #0]
    3634:	3b03      	subs	r3, #3
    3636:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3638:	bf81      	itttt	hi
    363a:	4a31      	ldrhi	r2, [pc, #196]	; (3700 <SystemInit+0x23c>)
    363c:	6813      	ldrhi	r3, [r2, #0]
    363e:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
    3642:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3644:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3648:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    364c:	2a00      	cmp	r2, #0
    364e:	db03      	blt.n	3658 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3650:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3654:	2b00      	cmp	r3, #0
    3656:	da2f      	bge.n	36b8 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    3658:	4b2a      	ldr	r3, [pc, #168]	; (3704 <SystemInit+0x240>)
    365a:	2201      	movs	r2, #1
    365c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3660:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3664:	2a00      	cmp	r2, #0
    3666:	d0fb      	beq.n	3660 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
    3668:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    366c:	2115      	movs	r1, #21
    366e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3672:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3676:	2a00      	cmp	r2, #0
    3678:	d0fb      	beq.n	3672 <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
    367a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    367e:	2215      	movs	r2, #21
    3680:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3684:	4b1f      	ldr	r3, [pc, #124]	; (3704 <SystemInit+0x240>)
    3686:	461a      	mov	r2, r3
    3688:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    368c:	2900      	cmp	r1, #0
    368e:	d0fb      	beq.n	3688 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    3690:	2100      	movs	r1, #0
    3692:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3696:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    369a:	2b00      	cmp	r3, #0
    369c:	d0fb      	beq.n	3696 <SystemInit+0x1d2>
  __ASM volatile ("dsb 0xF":::"memory");
    369e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    36a2:	4919      	ldr	r1, [pc, #100]	; (3708 <SystemInit+0x244>)
    36a4:	4b19      	ldr	r3, [pc, #100]	; (370c <SystemInit+0x248>)
    36a6:	68ca      	ldr	r2, [r1, #12]
    36a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    36ac:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    36ae:	60cb      	str	r3, [r1, #12]
    36b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    36b4:	bf00      	nop
    36b6:	e7fd      	b.n	36b4 <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    36b8:	4b15      	ldr	r3, [pc, #84]	; (3710 <SystemInit+0x24c>)
    36ba:	4a16      	ldr	r2, [pc, #88]	; (3714 <SystemInit+0x250>)
    36bc:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    36be:	bd08      	pop	{r3, pc}
    36c0:	10000324 	.word	0x10000324
    36c4:	40013540 	.word	0x40013540
    36c8:	4007c074 	.word	0x4007c074
    36cc:	baadf00d 	.word	0xbaadf00d
    36d0:	10000244 	.word	0x10000244
    36d4:	4000053c 	.word	0x4000053c
    36d8:	e000edf0 	.word	0xe000edf0
    36dc:	400005a0 	.word	0x400005a0
    36e0:	40005610 	.word	0x40005610
    36e4:	10000130 	.word	0x10000130
    36e8:	f0000fe0 	.word	0xf0000fe0
    36ec:	10000134 	.word	0x10000134
    36f0:	000062d8 	.word	0x000062d8
    36f4:	4000c000 	.word	0x4000c000
    36f8:	10000258 	.word	0x10000258
    36fc:	40000ee4 	.word	0x40000ee4
    3700:	4000173c 	.word	0x4000173c
    3704:	4001e000 	.word	0x4001e000
    3708:	e000ed00 	.word	0xe000ed00
    370c:	05fa0004 	.word	0x05fa0004
    3710:	20001cc0 	.word	0x20001cc0
    3714:	03d09000 	.word	0x03d09000

00003718 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    3718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    371c:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    371e:	4d4e      	ldr	r5, [pc, #312]	; (3858 <nrfx_spi_init+0x140>)
    3720:	262c      	movs	r6, #44	; 0x2c
    3722:	4366      	muls	r6, r4
    3724:	19af      	adds	r7, r5, r6
    3726:	f897 c01c 	ldrb.w	ip, [r7, #28]
    372a:	f1bc 0f00 	cmp.w	ip, #0
    372e:	f040 8091 	bne.w	3854 <nrfx_spi_init+0x13c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    3732:	51aa      	str	r2, [r5, r6]
    p_cb->p_context = p_context;
    3734:	607b      	str	r3, [r7, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    3736:	f891 e000 	ldrb.w	lr, [r1]
    373a:	7b0f      	ldrb	r7, [r1, #12]
    373c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    3740:	2301      	movs	r3, #1
    3742:	fa03 f30e 	lsl.w	r3, r3, lr
    3746:	2f01      	cmp	r7, #1
    3748:	bf94      	ite	ls
    374a:	f8c6 350c 	strls.w	r3, [r6, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    374e:	f8c6 3508 	strhi.w	r3, [r6, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3752:	f50e 73e0 	add.w	r3, lr, #448	; 0x1c0
    3756:	f04f 0c01 	mov.w	ip, #1
    375a:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    375e:	784b      	ldrb	r3, [r1, #1]
    3760:	2bff      	cmp	r3, #255	; 0xff
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3762:	bf1f      	itttt	ne
    3764:	fa0c fc03 	lslne.w	ip, ip, r3
    p_reg->OUTCLR = clr_mask;
    3768:	f8c6 c50c 	strne.w	ip, [r6, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    376c:	f503 7ce0 	addne.w	ip, r3, #448	; 0x1c0
    3770:	f04f 0803 	movne.w	r8, #3
    3774:	bf18      	it	ne
    3776:	f846 802c 	strne.w	r8, [r6, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    377a:	788e      	ldrb	r6, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    377c:	bf08      	it	eq
    377e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    3782:	2eff      	cmp	r6, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    3784:	bf1f      	itttt	ne
    3786:	f891 900e 	ldrbne.w	r9, [r1, #14]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    378a:	f506 7ce0 	addne.w	ip, r6, #448	; 0x1c0
    378e:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    3792:	ea4f 0989 	movne.w	r9, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3796:	bf18      	it	ne
    3798:	f84a 902c 	strne.w	r9, [sl, ip, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    m_cb[p_instance->drv_inst_idx].miso_pin = p_config->miso_pin;
    379c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    37a0:	fb0c 5c04 	mla	ip, ip, r4, r5
        miso_pin = p_config->miso_pin;
    37a4:	bf18      	it	ne
    37a6:	46b0      	movne	r8, r6
    m_cb[p_instance->drv_inst_idx].miso_pin = p_config->miso_pin;
    37a8:	f88c 601f 	strb.w	r6, [ip, #31]
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    37ac:	78ce      	ldrb	r6, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    37ae:	bf08      	it	eq
    37b0:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    37b4:	2eff      	cmp	r6, #255	; 0xff
    37b6:	d00d      	beq.n	37d4 <nrfx_spi_init+0xbc>
    p_reg->OUTSET = set_mask;
    37b8:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    37bc:	f04f 0c01 	mov.w	ip, #1
    37c0:	fa0c fc06 	lsl.w	ip, ip, r6
    p_reg->OUTSET = set_mask;
    37c4:	f8c9 c508 	str.w	ip, [r9, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    37c8:	f506 7ce0 	add.w	ip, r6, #448	; 0x1c0
    37cc:	f04f 0a03 	mov.w	sl, #3
    37d0:	f849 a02c 	str.w	sl, [r9, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    37d4:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    37d8:	fb0c 5c04 	mla	ip, ip, r4, r5
    37dc:	f88c 601e 	strb.w	r6, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    37e0:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
    37e2:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
    37e6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = (uint32_t)frequency;
    37ea:	688b      	ldr	r3, [r1, #8]
    p_reg->PSELMISO = miso_pin;
    37ec:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    37f0:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    37f4:	7b4b      	ldrb	r3, [r1, #13]
    37f6:	3300      	adds	r3, #0
    37f8:	bf18      	it	ne
    37fa:	2301      	movne	r3, #1
    switch (spi_mode)
    37fc:	2f02      	cmp	r7, #2
    37fe:	d023      	beq.n	3848 <nrfx_spi_init+0x130>
    3800:	2f03      	cmp	r7, #3
    3802:	d024      	beq.n	384e <nrfx_spi_init+0x136>
    3804:	2f01      	cmp	r7, #1
    3806:	d101      	bne.n	380c <nrfx_spi_init+0xf4>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    3808:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    380c:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    3810:	232c      	movs	r3, #44	; 0x2c
    3812:	fb03 5304 	mla	r3, r3, r4, r5
    3816:	7949      	ldrb	r1, [r1, #5]
    3818:	f883 1020 	strb.w	r1, [r3, #32]

    if (p_cb->handler)
    381c:	b112      	cbz	r2, 3824 <nrfx_spi_init+0x10c>
    p_reg->INTENSET = mask;
    381e:	2304      	movs	r3, #4
    3820:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    3824:	2301      	movs	r3, #1
    3826:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        nrf_spi_int_enable(p_spi, NRF_SPI_INT_READY_MASK);
    }

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    382a:	b11a      	cbz	r2, 3834 <nrfx_spi_init+0x11c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    382c:	f340 3007 	sbfx	r0, r0, #12, #8
    3830:	f7fd fea8 	bl	1584 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    3834:	232c      	movs	r3, #44	; 0x2c
    3836:	fb03 5404 	mla	r4, r3, r4, r5
    383a:	2300      	movs	r3, #0
    383c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    383e:	4807      	ldr	r0, [pc, #28]	; (385c <nrfx_spi_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3840:	2301      	movs	r3, #1
    3842:	7723      	strb	r3, [r4, #28]
}
    3844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    3848:	f043 0304 	orr.w	r3, r3, #4
        break;
    384c:	e7de      	b.n	380c <nrfx_spi_init+0xf4>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    384e:	f043 0306 	orr.w	r3, r3, #6
        break;
    3852:	e7db      	b.n	380c <nrfx_spi_init+0xf4>
        return err_code;
    3854:	4802      	ldr	r0, [pc, #8]	; (3860 <nrfx_spi_init+0x148>)
    3856:	e7f5      	b.n	3844 <nrfx_spi_init+0x12c>
    3858:	200005d8 	.word	0x200005d8
    385c:	0bad0000 	.word	0x0bad0000
    3860:	0bad0005 	.word	0x0bad0005

00003864 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    3864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3868:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    386a:	4d42      	ldr	r5, [pc, #264]	; (3974 <nrfx_spi_xfer+0x110>)
    386c:	232c      	movs	r3, #44	; 0x2c
    386e:	4373      	muls	r3, r6
{
    3870:	4696      	mov	lr, r2
    if (p_cb->transfer_in_progress)
    3872:	18ea      	adds	r2, r5, r3
{
    3874:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    3876:	7f51      	ldrb	r1, [r2, #29]
{
    3878:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    387a:	2900      	cmp	r1, #0
    387c:	d178      	bne.n	3970 <nrfx_spi_xfer+0x10c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    387e:	f855 c003 	ldr.w	ip, [r5, r3]
    3882:	f1bc 0f00 	cmp.w	ip, #0
    3886:	d001      	beq.n	388c <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
    3888:	2301      	movs	r3, #1
    388a:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    388c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    3890:	242c      	movs	r4, #44	; 0x2c
    3892:	fb04 5406 	mla	r4, r4, r6, r5
    3896:	f104 080c 	add.w	r8, r4, #12
    389a:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    389e:	7fa2      	ldrb	r2, [r4, #30]
    p_cb->abort = false;
    38a0:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    38a2:	2aff      	cmp	r2, #255	; 0xff
    p_cb->abort = false;
    38a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    38a8:	bf1f      	itttt	ne
    38aa:	2301      	movne	r3, #1
    38ac:	4093      	lslne	r3, r2
    p_reg->OUTCLR = clr_mask;
    38ae:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    38b2:	f8c2 350c 	strne.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
    38b6:	232c      	movs	r3, #44	; 0x2c
    38b8:	f1be 0f00 	cmp.w	lr, #0
    38bc:	d007      	beq.n	38ce <nrfx_spi_xfer+0x6a>
    {
        p_cb->transfer_in_progress = false;
    38be:	fb03 5306 	mla	r3, r3, r6, r5
    38c2:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    38c4:	482c      	ldr	r0, [pc, #176]	; (3978 <nrfx_spi_xfer+0x114>)
        p_cb->transfer_in_progress = false;
    38c6:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    38c8:	b003      	add	sp, #12
    38ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    38ce:	f8d9 4000 	ldr.w	r4, [r9]
    p_reg->INTENCLR = mask;
    38d2:	2204      	movs	r2, #4
    38d4:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    p_cb->bytes_transferred = 0;
    38d8:	fb03 5306 	mla	r3, r3, r6, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38dc:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    38e0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    38e4:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
    38e8:	9200      	str	r2, [sp, #0]
    (void)dummy;
    38ea:	9a00      	ldr	r2, [sp, #0]
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    38ec:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
    38ee:	b18a      	cbz	r2, 3914 <nrfx_spi_xfer+0xb0>
    38f0:	683b      	ldr	r3, [r7, #0]
    38f2:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    38f4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    38f8:	2a01      	cmp	r2, #1
    38fa:	d90e      	bls.n	391a <nrfx_spi_xfer+0xb6>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    38fc:	683b      	ldr	r3, [r7, #0]
    38fe:	785b      	ldrb	r3, [r3, #1]
    3900:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    3904:	f1bc 0f00 	cmp.w	ip, #0
    3908:	d010      	beq.n	392c <nrfx_spi_xfer+0xc8>
    p_reg->INTENSET = mask;
    390a:	2304      	movs	r3, #4
    390c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    3910:	481a      	ldr	r0, [pc, #104]	; (397c <nrfx_spi_xfer+0x118>)
    3912:	e7d9      	b.n	38c8 <nrfx_spi_xfer+0x64>
    nrf_spi_txd_set(p_spi,
    3914:	f893 3020 	ldrb.w	r3, [r3, #32]
    3918:	e7ec      	b.n	38f4 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
    391a:	68fb      	ldr	r3, [r7, #12]
    391c:	2b01      	cmp	r3, #1
    391e:	d9f1      	bls.n	3904 <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    3920:	232c      	movs	r3, #44	; 0x2c
    3922:	fb03 5306 	mla	r3, r3, r6, r5
    p_reg->TXD = data;
    3926:	f893 3020 	ldrb.w	r3, [r3, #32]
    392a:	e7e9      	b.n	3900 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    392c:	f04f 082c 	mov.w	r8, #44	; 0x2c
    3930:	fb06 5808 	mla	r8, r6, r8, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3934:	4667      	mov	r7, ip
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3936:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    393a:	2b00      	cmp	r3, #0
    393c:	d0fb      	beq.n	3936 <nrfx_spi_xfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    393e:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3942:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    3946:	9301      	str	r3, [sp, #4]
        } while (transfer_byte(p_spi, p_cb));
    3948:	4641      	mov	r1, r8
    394a:	4620      	mov	r0, r4
    (void)dummy;
    394c:	9b01      	ldr	r3, [sp, #4]
    394e:	f001 fdab 	bl	54a8 <transfer_byte>
    3952:	2800      	cmp	r0, #0
    3954:	d1ef      	bne.n	3936 <nrfx_spi_xfer+0xd2>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    3956:	232c      	movs	r3, #44	; 0x2c
    3958:	fb03 5506 	mla	r5, r3, r6, r5
    395c:	7faa      	ldrb	r2, [r5, #30]
    395e:	2aff      	cmp	r2, #255	; 0xff
    3960:	d0d6      	beq.n	3910 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3962:	2301      	movs	r3, #1
    3964:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3966:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    396a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    396e:	e7cf      	b.n	3910 <nrfx_spi_xfer+0xac>
        return err_code;
    3970:	4803      	ldr	r0, [pc, #12]	; (3980 <nrfx_spi_xfer+0x11c>)
    3972:	e7a9      	b.n	38c8 <nrfx_spi_xfer+0x64>
    3974:	200005d8 	.word	0x200005d8
    3978:	0bad0003 	.word	0x0bad0003
    397c:	0bad0000 	.word	0x0bad0000
    3980:	0bad000b 	.word	0x0bad000b

00003984 <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
    3984:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3986:	4b10      	ldr	r3, [pc, #64]	; (39c8 <nrfx_spi_0_irq_handler+0x44>)
    if (!transfer_byte(p_spi, p_cb))
    3988:	4c10      	ldr	r4, [pc, #64]	; (39cc <nrfx_spi_0_irq_handler+0x48>)
    398a:	4811      	ldr	r0, [pc, #68]	; (39d0 <nrfx_spi_0_irq_handler+0x4c>)
    398c:	2200      	movs	r2, #0
    398e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3990:	681b      	ldr	r3, [r3, #0]
    3992:	9301      	str	r3, [sp, #4]
    3994:	4621      	mov	r1, r4
    (void)dummy;
    3996:	9b01      	ldr	r3, [sp, #4]
    3998:	f001 fd86 	bl	54a8 <transfer_byte>
    399c:	b990      	cbnz	r0, 39c4 <nrfx_spi_0_irq_handler+0x40>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    399e:	7fa2      	ldrb	r2, [r4, #30]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    39a0:	480c      	ldr	r0, [pc, #48]	; (39d4 <nrfx_spi_0_irq_handler+0x50>)
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    39a2:	2aff      	cmp	r2, #255	; 0xff
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39a4:	bf1f      	itttt	ne
    39a6:	2301      	movne	r3, #1
    39a8:	4093      	lslne	r3, r2
    p_reg->OUTSET = set_mask;
    39aa:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    39ae:	f8c2 3508 	strne.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    39b2:	2300      	movs	r3, #0
    39b4:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    39b6:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    39b8:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
}
    39bc:	b002      	add	sp, #8
    39be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    39c2:	4718      	bx	r3
}
    39c4:	b002      	add	sp, #8
    39c6:	bd10      	pop	{r4, pc}
    39c8:	40003108 	.word	0x40003108
    39cc:	200005d8 	.word	0x200005d8
    39d0:	40003000 	.word	0x40003000
    39d4:	200005e0 	.word	0x200005e0

000039d8 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    39d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    39da:	4b34      	ldr	r3, [pc, #208]	; (3aac <twi_rx_start_transfer+0xd4>)
    39dc:	9301      	str	r3, [sp, #4]
{
    39de:	460d      	mov	r5, r1

    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    39e0:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    39e4:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    39e6:	f001 fd93 	bl	5510 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    39ea:	f44f 7192 	mov.w	r1, #292	; 0x124
    39ee:	f001 fd8f 	bl	5510 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    39f2:	f44f 718e 	mov.w	r1, #284	; 0x11c
    39f6:	f001 fd8b 	bl	5510 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    39fa:	f44f 7184 	mov.w	r1, #264	; 0x108
    39fe:	f001 fd87 	bl	5510 <nrf_twi_event_clear>

    p_cb->bytes_transferred = 0;
    3a02:	2300      	movs	r3, #0
    3a04:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    3a06:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    3a0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3a0c:	2b01      	cmp	r3, #1
    3a0e:	d118      	bne.n	3a42 <twi_rx_start_transfer+0x6a>
    3a10:	6a2b      	ldr	r3, [r5, #32]
    3a12:	065b      	lsls	r3, r3, #25
    3a14:	d415      	bmi.n	3a42 <twi_rx_start_transfer+0x6a>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    3a16:	2302      	movs	r3, #2
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    3a18:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    3a1c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    3a20:	2a02      	cmp	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a22:	f04f 0301 	mov.w	r3, #1
    3a26:	6223      	str	r3, [r4, #32]
    3a28:	bf18      	it	ne
    3a2a:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    3a2c:	682b      	ldr	r3, [r5, #0]
    3a2e:	b193      	cbz	r3, 3a56 <twi_rx_start_transfer+0x7e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    3a30:	f240 2386 	movw	r3, #646	; 0x286
    3a34:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    3a36:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3a38:	481d      	ldr	r0, [pc, #116]	; (3ab0 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    3a3a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    3a3e:	b003      	add	sp, #12
    3a40:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    3a42:	2301      	movs	r3, #1
    3a44:	e7e8      	b.n	3a18 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    3a46:	4629      	mov	r1, r5
    3a48:	4620      	mov	r0, r4
    3a4a:	f001 fd89 	bl	5560 <twi_transfer>
        while ((hw_timeout > 0) &&
    3a4e:	b128      	cbz	r0, 3a5c <twi_rx_start_transfer+0x84>
               hw_timeout--;
    3a50:	9b01      	ldr	r3, [sp, #4]
    3a52:	3b01      	subs	r3, #1
    3a54:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    3a56:	9b01      	ldr	r3, [sp, #4]
    3a58:	2b00      	cmp	r3, #0
    3a5a:	dcf4      	bgt.n	3a46 <twi_rx_start_transfer+0x6e>
        if (p_cb->error)
    3a5c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3a60:	b95b      	cbnz	r3, 3a7a <twi_rx_start_transfer+0xa2>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3a62:	4813      	ldr	r0, [pc, #76]	; (3ab0 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    3a64:	9b01      	ldr	r3, [sp, #4]
    3a66:	2b00      	cmp	r3, #0
    3a68:	dce9      	bgt.n	3a3e <twi_rx_start_transfer+0x66>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3a6a:	2300      	movs	r3, #0
    3a6c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3a70:	2305      	movs	r3, #5
    3a72:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    3a76:	480f      	ldr	r0, [pc, #60]	; (3ab4 <twi_rx_start_transfer+0xdc>)
    return ret_code;
    3a78:	e7e1      	b.n	3a3e <twi_rx_start_transfer+0x66>
    uint32_t error_source = p_reg->ERRORSRC;
    3a7a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3a7e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3a82:	2b00      	cmp	r3, #0
    3a84:	d0ed      	beq.n	3a62 <twi_rx_start_transfer+0x8a>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3a86:	4a0c      	ldr	r2, [pc, #48]	; (3ab8 <twi_rx_start_transfer+0xe0>)
    3a88:	480a      	ldr	r0, [pc, #40]	; (3ab4 <twi_rx_start_transfer+0xdc>)
    3a8a:	f013 0f01 	tst.w	r3, #1
    3a8e:	bf18      	it	ne
    3a90:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3a92:	f013 0f02 	tst.w	r3, #2
    3a96:	f102 0201 	add.w	r2, r2, #1
    3a9a:	bf18      	it	ne
    3a9c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3a9e:	f013 0f04 	tst.w	r3, #4
    3aa2:	4b06      	ldr	r3, [pc, #24]	; (3abc <twi_rx_start_transfer+0xe4>)
    3aa4:	bf18      	it	ne
    3aa6:	4618      	movne	r0, r3
    3aa8:	e7dc      	b.n	3a64 <twi_rx_start_transfer+0x8c>
    3aaa:	bf00      	nop
    3aac:	000186a0 	.word	0x000186a0
    3ab0:	0bad0000 	.word	0x0bad0000
    3ab4:	0bad0001 	.word	0x0bad0001
    3ab8:	0bae0000 	.word	0x0bae0000
    3abc:	0bae0002 	.word	0x0bae0002

00003ac0 <twi_tx_start_transfer>:
{
    3ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
    3ac2:	4b30      	ldr	r3, [pc, #192]	; (3b84 <twi_tx_start_transfer+0xc4>)
    3ac4:	9301      	str	r3, [sp, #4]
{
    3ac6:	460d      	mov	r5, r1
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    3ac8:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    3acc:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    3ace:	f001 fd1f 	bl	5510 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    3ad2:	f44f 7192 	mov.w	r1, #292	; 0x124
    3ad6:	f001 fd1b 	bl	5510 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    3ada:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3ade:	f001 fd17 	bl	5510 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    3ae2:	f44f 7184 	mov.w	r1, #264	; 0x108
    3ae6:	f001 fd13 	bl	5510 <nrf_twi_event_clear>
    p_reg->SHORTS = mask;
    3aea:	2300      	movs	r3, #0
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    3aec:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    3af0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
    3af4:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    3af6:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3afa:	2301      	movs	r3, #1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    3afc:	429a      	cmp	r2, r3
    3afe:	6203      	str	r3, [r0, #32]
    (void)twi_send_byte(p_twi, p_cb);
    3b00:	4629      	mov	r1, r5
    3b02:	bf18      	it	ne
    3b04:	6083      	strne	r3, [r0, #8]
    3b06:	f001 fd0b 	bl	5520 <twi_send_byte>
    if (p_cb->handler)
    3b0a:	682b      	ldr	r3, [r5, #0]
    3b0c:	b183      	cbz	r3, 3b30 <twi_tx_start_transfer+0x70>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    3b0e:	f240 2386 	movw	r3, #646	; 0x286
    3b12:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    3b14:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3b16:	481c      	ldr	r0, [pc, #112]	; (3b88 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    3b18:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    3b1c:	b003      	add	sp, #12
    3b1e:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    3b20:	4629      	mov	r1, r5
    3b22:	4620      	mov	r0, r4
    3b24:	f001 fd1c 	bl	5560 <twi_transfer>
        while ((hw_timeout > 0) &&
    3b28:	b128      	cbz	r0, 3b36 <twi_tx_start_transfer+0x76>
            hw_timeout--;
    3b2a:	9b01      	ldr	r3, [sp, #4]
    3b2c:	3b01      	subs	r3, #1
    3b2e:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    3b30:	9b01      	ldr	r3, [sp, #4]
    3b32:	2b00      	cmp	r3, #0
    3b34:	dcf4      	bgt.n	3b20 <twi_tx_start_transfer+0x60>
        if (p_cb->error)
    3b36:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3b3a:	b95b      	cbnz	r3, 3b54 <twi_tx_start_transfer+0x94>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3b3c:	4812      	ldr	r0, [pc, #72]	; (3b88 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    3b3e:	9b01      	ldr	r3, [sp, #4]
    3b40:	2b00      	cmp	r3, #0
    3b42:	dceb      	bgt.n	3b1c <twi_tx_start_transfer+0x5c>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3b44:	2300      	movs	r3, #0
    3b46:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3b4a:	2305      	movs	r3, #5
    3b4c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    3b50:	480e      	ldr	r0, [pc, #56]	; (3b8c <twi_tx_start_transfer+0xcc>)
    return ret_code;
    3b52:	e7e3      	b.n	3b1c <twi_tx_start_transfer+0x5c>
    uint32_t error_source = p_reg->ERRORSRC;
    3b54:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3b58:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d0ed      	beq.n	3b3c <twi_tx_start_transfer+0x7c>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3b60:	4a0b      	ldr	r2, [pc, #44]	; (3b90 <twi_tx_start_transfer+0xd0>)
    3b62:	480a      	ldr	r0, [pc, #40]	; (3b8c <twi_tx_start_transfer+0xcc>)
    3b64:	f013 0f01 	tst.w	r3, #1
    3b68:	bf18      	it	ne
    3b6a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3b6c:	f013 0f02 	tst.w	r3, #2
    3b70:	f102 0201 	add.w	r2, r2, #1
    3b74:	bf18      	it	ne
    3b76:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3b78:	f013 0f04 	tst.w	r3, #4
    3b7c:	4b05      	ldr	r3, [pc, #20]	; (3b94 <twi_tx_start_transfer+0xd4>)
    3b7e:	bf18      	it	ne
    3b80:	4618      	movne	r0, r3
    3b82:	e7dc      	b.n	3b3e <twi_tx_start_transfer+0x7e>
    3b84:	000186a0 	.word	0x000186a0
    3b88:	0bad0000 	.word	0x0bad0000
    3b8c:	0bad0001 	.word	0x0bad0001
    3b90:	0bae0000 	.word	0x0bae0000
    3b94:	0bae0002 	.word	0x0bae0002

00003b98 <nrfx_twi_init>:
{
    3b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3b9a:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3b9c:	4d1d      	ldr	r5, [pc, #116]	; (3c14 <nrfx_twi_init+0x7c>)
    3b9e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    3ba2:	fb0c fc07 	mul.w	ip, ip, r7
    3ba6:	eb05 040c 	add.w	r4, r5, ip
    3baa:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    3bae:	bb7e      	cbnz	r6, 3c10 <nrfx_twi_init+0x78>
    p_cb->p_context       = p_context;
    3bb0:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    3bb2:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    3bb4:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    3bb6:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
    3bba:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
    3bbe:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    3bc2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
    3bc6:	680c      	ldr	r4, [r1, #0]
    p_cb->handler         = event_handler;
    3bc8:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3bcc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3bd0:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
    3bd4:	f240 6c0c 	movw	ip, #1548	; 0x60c
    3bd8:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    3bdc:	684b      	ldr	r3, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3bde:	6800      	ldr	r0, [r0, #0]
    3be0:	f503 7ee0 	add.w	lr, r3, #448	; 0x1c0
    3be4:	f846 c02e 	str.w	ip, [r6, lr, lsl #2]
    p_reg->PSELSCL = scl_pin;
    3be8:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    3bec:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    3bf0:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    3bf2:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    3bf6:	b11a      	cbz	r2, 3c00 <nrfx_twi_init+0x68>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    3bf8:	f340 3007 	sbfx	r0, r0, #12, #8
    3bfc:	f7fd fcc2 	bl	1584 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3c00:	233c      	movs	r3, #60	; 0x3c
    3c02:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    3c06:	4804      	ldr	r0, [pc, #16]	; (3c18 <nrfx_twi_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3c08:	2301      	movs	r3, #1
    3c0a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    3c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    3c10:	4802      	ldr	r0, [pc, #8]	; (3c1c <nrfx_twi_init+0x84>)
    3c12:	e7fc      	b.n	3c0e <nrfx_twi_init+0x76>
    3c14:	20000604 	.word	0x20000604
    3c18:	0bad0000 	.word	0x0bad0000
    3c1c:	0bad0005 	.word	0x0bad0005

00003c20 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3c20:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3c22:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3c24:	2105      	movs	r1, #5
    3c26:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    3c2a:	4a04      	ldr	r2, [pc, #16]	; (3c3c <nrfx_twi_enable+0x1c>)
    3c2c:	213c      	movs	r1, #60	; 0x3c
    3c2e:	fb01 2303 	mla	r3, r1, r3, r2
    3c32:	2202      	movs	r2, #2
    3c34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    3c38:	4770      	bx	lr
    3c3a:	bf00      	nop
    3c3c:	20000604 	.word	0x20000604

00003c40 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3c40:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    3c42:	490a      	ldr	r1, [pc, #40]	; (3c6c <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3c44:	7902      	ldrb	r2, [r0, #4]
    3c46:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    3c4a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    3c4e:	f021 0103 	bic.w	r1, r1, #3
    3c52:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3c56:	2100      	movs	r1, #0
    3c58:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3c5c:	4b04      	ldr	r3, [pc, #16]	; (3c70 <nrfx_twi_disable+0x30>)
    3c5e:	213c      	movs	r1, #60	; 0x3c
    3c60:	fb01 3202 	mla	r2, r1, r2, r3
    3c64:	2301      	movs	r3, #1
    3c66:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
    3c6a:	4770      	bx	lr
    3c6c:	00044286 	.word	0x00044286
    3c70:	20000604 	.word	0x20000604

00003c74 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    3c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3c78:	4d32      	ldr	r5, [pc, #200]	; (3d44 <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3c7a:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    3c7e:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3c82:	233c      	movs	r3, #60	; 0x3c
    3c84:	fb03 5308 	mla	r3, r3, r8, r5
{
    3c88:	460e      	mov	r6, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3c8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    3c8e:	2b01      	cmp	r3, #1
{
    3c90:	4696      	mov	lr, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3c92:	d104      	bne.n	3c9e <nrfx_twi_xfer+0x2a>
    3c94:	780b      	ldrb	r3, [r1, #0]
    3c96:	2b01      	cmp	r3, #1
    3c98:	d106      	bne.n	3ca8 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
    3c9a:	482b      	ldr	r0, [pc, #172]	; (3d48 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3c9c:	e011      	b.n	3cc2 <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    3c9e:	2b02      	cmp	r3, #2
    3ca0:	d102      	bne.n	3ca8 <nrfx_twi_xfer+0x34>
    3ca2:	780b      	ldrb	r3, [r1, #0]
    3ca4:	2b01      	cmp	r3, #1
    3ca6:	d1f8      	bne.n	3c9a <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
    3ca8:	243c      	movs	r4, #60	; 0x3c
    p_reg->INTENCLR = mask;
    3caa:	4b28      	ldr	r3, [pc, #160]	; (3d4c <nrfx_twi_xfer+0xd8>)
    3cac:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    3cb0:	fb04 5408 	mla	r4, r4, r8, r5
    3cb4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    3cb8:	b12b      	cbz	r3, 3cc6 <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    3cba:	68a3      	ldr	r3, [r4, #8]
        return err_code;
    3cbc:	4824      	ldr	r0, [pc, #144]	; (3d50 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
    3cbe:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    3cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    3cc6:	f08e 0304 	eor.w	r3, lr, #4
    3cca:	f3c3 0380 	ubfx	r3, r3, #2, #1
    3cce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    p_cb->flags       = flags;
    3cd2:	f8c4 e020 	str.w	lr, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    3cd6:	46b4      	mov	ip, r6
    3cd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3cdc:	f104 070c 	add.w	r7, r4, #12
    3ce0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3ce2:	f8dc 3000 	ldr.w	r3, [ip]
    3ce6:	603b      	str	r3, [r7, #0]
    p_cb->curr_length = p_xfer_desc->primary_length;
    3ce8:	6873      	ldr	r3, [r6, #4]
    3cea:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    3cec:	68f3      	ldr	r3, [r6, #12]
    3cee:	6263      	str	r3, [r4, #36]	; 0x24
    p_reg->ADDRESS = address;
    3cf0:	7873      	ldrb	r3, [r6, #1]
    3cf2:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3cf6:	7833      	ldrb	r3, [r6, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3cf8:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3cfc:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3cfe:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3d02:	d01a      	beq.n	3d3a <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3d04:	b9b3      	cbnz	r3, 3d34 <nrfx_twi_xfer+0xc0>
    3d06:	f3ce 1e40 	ubfx	lr, lr, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    3d0a:	233c      	movs	r3, #60	; 0x3c
    3d0c:	fb03 5308 	mla	r3, r3, r8, r5
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    3d10:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3d12:	f883 e02c 	strb.w	lr, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    3d16:	4648      	mov	r0, r9
    3d18:	f7ff fed2 	bl	3ac0 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    3d1c:	233c      	movs	r3, #60	; 0x3c
    3d1e:	fb03 f808 	mul.w	r8, r3, r8
    3d22:	eb05 0208 	add.w	r2, r5, r8
    3d26:	f855 3008 	ldr.w	r3, [r5, r8]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d1c9      	bne.n	3cc2 <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
    3d2e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    3d32:	e7c6      	b.n	3cc2 <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3d34:	f04f 0e01 	mov.w	lr, #1
    3d38:	e7e7      	b.n	3d0a <nrfx_twi_xfer+0x96>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    3d3a:	4651      	mov	r1, sl
    3d3c:	4648      	mov	r0, r9
    3d3e:	f7ff fe4b 	bl	39d8 <twi_rx_start_transfer>
    3d42:	e7eb      	b.n	3d1c <nrfx_twi_xfer+0xa8>
    3d44:	20000604 	.word	0x20000604
    3d48:	0bad0005 	.word	0x0bad0005
    3d4c:	00044286 	.word	0x00044286
    3d50:	0bad000b 	.word	0x0bad000b

00003d54 <nrfx_twi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
    3d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    3d56:	4c29      	ldr	r4, [pc, #164]	; (3dfc <nrfx_twi_1_irq_handler+0xa8>)
{
    3d58:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    3d5a:	4621      	mov	r1, r4
    3d5c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3d60:	f001 fbfe 	bl	5560 <twi_transfer>
    3d64:	46a4      	mov	ip, r4
    3d66:	b9e0      	cbnz	r0, 3da2 <nrfx_twi_1_irq_handler+0x4e>
    if (!p_cb->error &&
    3d68:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    3d6c:	6a26      	ldr	r6, [r4, #32]
    3d6e:	b9ef      	cbnz	r7, 3dac <nrfx_twi_1_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    3d70:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    3d72:	1e9a      	subs	r2, r3, #2
    3d74:	2a01      	cmp	r2, #1
    3d76:	d819      	bhi.n	3dac <nrfx_twi_1_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    3d78:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3d7a:	69a2      	ldr	r2, [r4, #24]
    3d7c:	4291      	cmp	r1, r2
    3d7e:	d115      	bne.n	3dac <nrfx_twi_1_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    3d80:	69e2      	ldr	r2, [r4, #28]
    3d82:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3d84:	f3c6 1640 	ubfx	r6, r6, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    3d88:	6962      	ldr	r2, [r4, #20]
    3d8a:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    3d8c:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3d8e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    3d92:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3d96:	4621      	mov	r1, r4
    3d98:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    3d9c:	d103      	bne.n	3da6 <nrfx_twi_1_irq_handler+0x52>
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3d9e:	f7ff fe8f 	bl	3ac0 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
}
    3da2:	b007      	add	sp, #28
    3da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    3da6:	f7ff fe17 	bl	39d8 <twi_rx_start_transfer>
    3daa:	e7fa      	b.n	3da2 <nrfx_twi_1_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
    3dac:	4d14      	ldr	r5, [pc, #80]	; (3e00 <nrfx_twi_1_irq_handler+0xac>)
    3dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3db0:	ac01      	add	r4, sp, #4
    3db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3db4:	682b      	ldr	r3, [r5, #0]
    3db6:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
    3db8:	b1e7      	cbz	r7, 3df4 <nrfx_twi_1_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
    3dba:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    3dbe:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3dc2:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    3dc6:	0798      	lsls	r0, r3, #30
    3dc8:	d50c      	bpl.n	3de4 <nrfx_twi_1_irq_handler+0x90>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    3dca:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    3dcc:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    3dd0:	2300      	movs	r3, #0
    3dd2:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)))
    3dd6:	0773      	lsls	r3, r6, #29
    3dd8:	d4e3      	bmi.n	3da2 <nrfx_twi_1_irq_handler+0x4e>
            p_cb->handler(&event, p_cb->p_context);
    3dda:	e9dc 3100 	ldrd	r3, r1, [ip]
    3dde:	4668      	mov	r0, sp
    3de0:	4798      	blx	r3
}
    3de2:	e7de      	b.n	3da2 <nrfx_twi_1_irq_handler+0x4e>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    3de4:	0759      	lsls	r1, r3, #29
    3de6:	d501      	bpl.n	3dec <nrfx_twi_1_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    3de8:	2302      	movs	r3, #2
    3dea:	e7ef      	b.n	3dcc <nrfx_twi_1_irq_handler+0x78>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    3dec:	07da      	lsls	r2, r3, #31
    3dee:	d5ef      	bpl.n	3dd0 <nrfx_twi_1_irq_handler+0x7c>
                event.type = NRFX_TWI_EVT_OVERRUN;
    3df0:	2303      	movs	r3, #3
    3df2:	e7eb      	b.n	3dcc <nrfx_twi_1_irq_handler+0x78>
            event.type = NRFX_TWI_EVT_DONE;
    3df4:	f88d 7000 	strb.w	r7, [sp]
    3df8:	e7ea      	b.n	3dd0 <nrfx_twi_1_irq_handler+0x7c>
    3dfa:	bf00      	nop
    3dfc:	20000604 	.word	0x20000604
    3e00:	20000610 	.word	0x20000610

00003e04 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    3e04:	4b09      	ldr	r3, [pc, #36]	; (3e2c <z_sys_device_do_config_level+0x28>)
{
    3e06:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    3e08:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3e0c:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    3e0e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    3e10:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    3e14:	42a5      	cmp	r5, r4
    3e16:	d800      	bhi.n	3e1a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    3e18:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    3e1a:	6823      	ldr	r3, [r4, #0]
    3e1c:	4620      	mov	r0, r4
    3e1e:	685b      	ldr	r3, [r3, #4]
    3e20:	4798      	blx	r3
		if (retval != 0) {
    3e22:	b100      	cbz	r0, 3e26 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    3e24:	6066      	str	r6, [r4, #4]
								info++) {
    3e26:	340c      	adds	r4, #12
    3e28:	e7f4      	b.n	3e14 <z_sys_device_do_config_level+0x10>
    3e2a:	bf00      	nop
    3e2c:	00005c18 	.word	0x00005c18

00003e30 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    3e30:	4b10      	ldr	r3, [pc, #64]	; (3e74 <z_impl_device_get_binding+0x44>)
{
    3e32:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    3e34:	4c10      	ldr	r4, [pc, #64]	; (3e78 <z_impl_device_get_binding+0x48>)
{
    3e36:	4605      	mov	r5, r0
    3e38:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    3e3a:	429c      	cmp	r4, r3
    3e3c:	d104      	bne.n	3e48 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    3e3e:	4c0e      	ldr	r4, [pc, #56]	; (3e78 <z_impl_device_get_binding+0x48>)
    3e40:	42b4      	cmp	r4, r6
    3e42:	d109      	bne.n	3e58 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    3e44:	2400      	movs	r4, #0
    3e46:	e012      	b.n	3e6e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    3e48:	6862      	ldr	r2, [r4, #4]
    3e4a:	b11a      	cbz	r2, 3e54 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    3e4c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    3e4e:	6812      	ldr	r2, [r2, #0]
    3e50:	42aa      	cmp	r2, r5
    3e52:	d00c      	beq.n	3e6e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3e54:	340c      	adds	r4, #12
    3e56:	e7f0      	b.n	3e3a <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    3e58:	6863      	ldr	r3, [r4, #4]
    3e5a:	b90b      	cbnz	r3, 3e60 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3e5c:	340c      	adds	r4, #12
    3e5e:	e7ef      	b.n	3e40 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    3e60:	6823      	ldr	r3, [r4, #0]
    3e62:	4628      	mov	r0, r5
    3e64:	6819      	ldr	r1, [r3, #0]
    3e66:	f001 f89f 	bl	4fa8 <strcmp>
    3e6a:	2800      	cmp	r0, #0
    3e6c:	d1f6      	bne.n	3e5c <z_impl_device_get_binding+0x2c>
}
    3e6e:	4620      	mov	r0, r4
    3e70:	bd70      	pop	{r4, r5, r6, pc}
    3e72:	bf00      	nop
    3e74:	20001d50 	.word	0x20001d50
    3e78:	20001ccc 	.word	0x20001ccc

00003e7c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3e7c:	b510      	push	{r4, lr}
    3e7e:	4604      	mov	r4, r0
	z_impl_log_panic();
    3e80:	f7fd f932 	bl	10e8 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    3e84:	2301      	movs	r3, #1
    3e86:	f04f 0100 	mov.w	r1, #0
    3e8a:	f363 0107 	bfi	r1, r3, #0, #8
    3e8e:	4a06      	ldr	r2, [pc, #24]	; (3ea8 <k_sys_fatal_error_handler+0x2c>)
    3e90:	4b06      	ldr	r3, [pc, #24]	; (3eac <k_sys_fatal_error_handler+0x30>)
    3e92:	4807      	ldr	r0, [pc, #28]	; (3eb0 <k_sys_fatal_error_handler+0x34>)
    3e94:	1a9b      	subs	r3, r3, r2
    3e96:	08db      	lsrs	r3, r3, #3
    3e98:	f363 118f 	bfi	r1, r3, #6, #10
    3e9c:	f000 fec4 	bl	4c28 <log_0>
	arch_system_halt(reason);
    3ea0:	4620      	mov	r0, r4
    3ea2:	f001 fbd5 	bl	5650 <arch_system_halt>
    3ea6:	bf00      	nop
    3ea8:	00005adc 	.word	0x00005adc
    3eac:	00005b04 	.word	0x00005b04
    3eb0:	000062dc 	.word	0x000062dc

00003eb4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3eb8:	4605      	mov	r5, r0
    3eba:	4688      	mov	r8, r1
	return z_impl_k_current_get();
    3ebc:	f000 fbd2 	bl	4664 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3ec0:	2201      	movs	r2, #1
    3ec2:	f04f 0300 	mov.w	r3, #0
    3ec6:	f362 0307 	bfi	r3, r2, #0, #8
    3eca:	4c24      	ldr	r4, [pc, #144]	; (3f5c <z_fatal_error+0xa8>)
    3ecc:	4a24      	ldr	r2, [pc, #144]	; (3f60 <z_fatal_error+0xac>)
    3ece:	2d04      	cmp	r5, #4
    3ed0:	eba4 0402 	sub.w	r4, r4, r2
    3ed4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    3ed8:	bf96      	itet	ls
    3eda:	4a22      	ldrls	r2, [pc, #136]	; (3f64 <z_fatal_error+0xb0>)
    3edc:	4a22      	ldrhi	r2, [pc, #136]	; (3f68 <z_fatal_error+0xb4>)
    3ede:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
    3ee2:	f364 138f 	bfi	r3, r4, #6, #10
    3ee6:	f8ad 3000 	strh.w	r3, [sp]
    3eea:	4606      	mov	r6, r0
    3eec:	2300      	movs	r3, #0
    3eee:	4629      	mov	r1, r5
    3ef0:	481e      	ldr	r0, [pc, #120]	; (3f6c <z_fatal_error+0xb8>)
    3ef2:	f000 fed2 	bl	4c9a <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3ef6:	f8d8 301c 	ldr.w	r3, [r8, #28]
    3efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
    3efe:	b14b      	cbz	r3, 3f14 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
    3f00:	f04f 0100 	mov.w	r1, #0
    3f04:	2301      	movs	r3, #1
    3f06:	f363 0107 	bfi	r1, r3, #0, #8
    3f0a:	f364 118f 	bfi	r1, r4, #6, #10
    3f0e:	4818      	ldr	r0, [pc, #96]	; (3f70 <z_fatal_error+0xbc>)
    3f10:	f000 fe8a 	bl	4c28 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3f14:	f04f 0700 	mov.w	r7, #0
    3f18:	2301      	movs	r3, #1
    3f1a:	f363 0707 	bfi	r7, r3, #0, #8
	const char *thread_name = k_thread_name_get(thread);
    3f1e:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
    3f20:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
    3f24:	f001 fc72 	bl	580c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    3f28:	b1b0      	cbz	r0, 3f58 <z_fatal_error+0xa4>
    3f2a:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    3f2c:	4b11      	ldr	r3, [pc, #68]	; (3f74 <z_fatal_error+0xc0>)
    3f2e:	2a00      	cmp	r2, #0
    3f30:	bf08      	it	eq
    3f32:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    3f34:	f7fc ff6c 	bl	e10 <log_strdup>
    3f38:	463b      	mov	r3, r7
    3f3a:	4602      	mov	r2, r0
    3f3c:	4631      	mov	r1, r6
    3f3e:	480e      	ldr	r0, [pc, #56]	; (3f78 <z_fatal_error+0xc4>)
    3f40:	f000 fe93 	bl	4c6a <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    3f44:	4641      	mov	r1, r8
    3f46:	4628      	mov	r0, r5
    3f48:	f7ff ff98 	bl	3e7c <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    3f4c:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    3f4e:	b002      	add	sp, #8
    3f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f54:	f7fd bed4 	b.w	1d00 <z_impl_k_thread_abort>
		thread_name = "unknown";
    3f58:	4806      	ldr	r0, [pc, #24]	; (3f74 <z_fatal_error+0xc0>)
    3f5a:	e7eb      	b.n	3f34 <z_fatal_error+0x80>
    3f5c:	00005b04 	.word	0x00005b04
    3f60:	00005adc 	.word	0x00005adc
    3f64:	00005c30 	.word	0x00005c30
    3f68:	00006335 	.word	0x00006335
    3f6c:	0000634b 	.word	0x0000634b
    3f70:	00006373 	.word	0x00006373
    3f74:	00006343 	.word	0x00006343
    3f78:	00006394 	.word	0x00006394

00003f7c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    3f7c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    3f7e:	4d0b      	ldr	r5, [pc, #44]	; (3fac <idle+0x30>)
	__asm__ volatile(
    3f80:	f04f 0220 	mov.w	r2, #32
    3f84:	f3ef 8311 	mrs	r3, BASEPRI
    3f88:	f382 8811 	msr	BASEPRI, r2
    3f8c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    3f90:	f001 fc63 	bl	585a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3f94:	2101      	movs	r1, #1
    3f96:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    3f98:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3f9a:	bfd8      	it	le
    3f9c:	4608      	movle	r0, r1
    3f9e:	f001 fc6c 	bl	587a <z_set_timeout_expiry>
	_kernel.idle = ticks;
    3fa2:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3fa4:	f7fd fb5c 	bl	1660 <arch_cpu_idle>
    3fa8:	e7ea      	b.n	3f80 <idle+0x4>
    3faa:	bf00      	nop
    3fac:	20000718 	.word	0x20000718

00003fb0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3fb0:	4802      	ldr	r0, [pc, #8]	; (3fbc <z_bss_zero+0xc>)
    3fb2:	4a03      	ldr	r2, [pc, #12]	; (3fc0 <z_bss_zero+0x10>)
    3fb4:	2100      	movs	r1, #0
    3fb6:	1a12      	subs	r2, r2, r0
    3fb8:	f001 b82c 	b.w	5014 <memset>
    3fbc:	20000000 	.word	0x20000000
    3fc0:	20000760 	.word	0x20000760

00003fc4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3fc4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3fc6:	4806      	ldr	r0, [pc, #24]	; (3fe0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3fc8:	4a06      	ldr	r2, [pc, #24]	; (3fe4 <z_data_copy+0x20>)
    3fca:	4907      	ldr	r1, [pc, #28]	; (3fe8 <z_data_copy+0x24>)
    3fcc:	1a12      	subs	r2, r2, r0
    3fce:	f000 fff7 	bl	4fc0 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3fd2:	4a06      	ldr	r2, [pc, #24]	; (3fec <z_data_copy+0x28>)
    3fd4:	4906      	ldr	r1, [pc, #24]	; (3ff0 <z_data_copy+0x2c>)
    3fd6:	4807      	ldr	r0, [pc, #28]	; (3ff4 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3fdc:	f000 bff0 	b.w	4fc0 <memcpy>
    3fe0:	20001c40 	.word	0x20001c40
    3fe4:	20001d74 	.word	0x20001d74
    3fe8:	000063bc 	.word	0x000063bc
    3fec:	00000000 	.word	0x00000000
    3ff0:	000063bc 	.word	0x000063bc
    3ff4:	20000000 	.word	0x20000000

00003ff8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3ff8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    3ffa:	4b09      	ldr	r3, [pc, #36]	; (4020 <bg_thread_main+0x28>)
    3ffc:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3ffe:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4000:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4002:	f7ff feff 	bl	3e04 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    4006:	2003      	movs	r0, #3
    4008:	f7ff fefc 	bl	3e04 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    400c:	f000 fbe6 	bl	47dc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4010:	f7fc fdaa 	bl	b68 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4014:	4a03      	ldr	r2, [pc, #12]	; (4024 <bg_thread_main+0x2c>)
    4016:	7b13      	ldrb	r3, [r2, #12]
    4018:	f023 0301 	bic.w	r3, r3, #1
    401c:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    401e:	bd08      	pop	{r3, pc}
    4020:	2000075c 	.word	0x2000075c
    4024:	200006ac 	.word	0x200006ac

00004028 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4028:	b580      	push	{r7, lr}
    402a:	b0a2      	sub	sp, #136	; 0x88
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    402c:	f7fc fe56 	bl	cdc <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    4030:	4b35      	ldr	r3, [pc, #212]	; (4108 <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4032:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4036:	4c35      	ldr	r4, [pc, #212]	; (410c <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    4038:	4e35      	ldr	r6, [pc, #212]	; (4110 <z_cstart+0xe8>)
    403a:	6963      	ldr	r3, [r4, #20]
    403c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4040:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4042:	2500      	movs	r5, #0
    4044:	23e0      	movs	r3, #224	; 0xe0
    4046:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    404a:	77e5      	strb	r5, [r4, #31]
    404c:	7625      	strb	r5, [r4, #24]
    404e:	7665      	strb	r5, [r4, #25]
    4050:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4052:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4054:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4058:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    405a:	f7fd fe3d 	bl	1cd8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    405e:	f7fd faf9 	bl	1654 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4066:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4068:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    406a:	ab07      	add	r3, sp, #28
    406c:	226c      	movs	r2, #108	; 0x6c
    406e:	4629      	mov	r1, r5
    4070:	4618      	mov	r0, r3
    4072:	f000 ffcf 	bl	5014 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    4076:	4c27      	ldr	r4, [pc, #156]	; (4114 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    4078:	2701      	movs	r7, #1
	_current = &dummy_thread;
    407a:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    407c:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    407e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4082:	f7ff febf 	bl	3e04 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4086:	4638      	mov	r0, r7
    4088:	f7ff febc 	bl	3e04 <z_sys_device_do_config_level>
	z_sched_init();
    408c:	f000 fade 	bl	464c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    4090:	4b21      	ldr	r3, [pc, #132]	; (4118 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    4092:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    4094:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4098:	e9cd 7304 	strd	r7, r3, [sp, #16]
    409c:	e9cd 5502 	strd	r5, r5, [sp, #8]
    40a0:	4b1e      	ldr	r3, [pc, #120]	; (411c <z_cstart+0xf4>)
    40a2:	491f      	ldr	r1, [pc, #124]	; (4120 <z_cstart+0xf8>)
    40a4:	e9cd 5500 	strd	r5, r5, [sp]
    40a8:	4630      	mov	r0, r6
    40aa:	f000 fb4f 	bl	474c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    40ae:	7b73      	ldrb	r3, [r6, #13]
    40b0:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    40b4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    40b8:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    40ba:	d104      	bne.n	40c6 <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    40bc:	69b3      	ldr	r3, [r6, #24]
    40be:	b913      	cbnz	r3, 40c6 <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    40c0:	4630      	mov	r0, r6
    40c2:	f000 f955 	bl	4370 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
    40c6:	4b17      	ldr	r3, [pc, #92]	; (4124 <z_cstart+0xfc>)
    40c8:	4d17      	ldr	r5, [pc, #92]	; (4128 <z_cstart+0x100>)
    40ca:	9305      	str	r3, [sp, #20]
    40cc:	2201      	movs	r2, #1
    40ce:	230f      	movs	r3, #15
    40d0:	e9cd 3203 	strd	r3, r2, [sp, #12]
    40d4:	2300      	movs	r3, #0
    40d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    40da:	9300      	str	r3, [sp, #0]
    40dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    40e0:	4b12      	ldr	r3, [pc, #72]	; (412c <z_cstart+0x104>)
    40e2:	4913      	ldr	r1, [pc, #76]	; (4130 <z_cstart+0x108>)
    40e4:	4628      	mov	r0, r5
    40e6:	f000 fb31 	bl	474c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    40ea:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    40ec:	60e5      	str	r5, [r4, #12]
    40ee:	f023 0304 	bic.w	r3, r3, #4
    40f2:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    40f4:	4b0f      	ldr	r3, [pc, #60]	; (4134 <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    40f6:	490a      	ldr	r1, [pc, #40]	; (4120 <z_cstart+0xf8>)
    40f8:	4805      	ldr	r0, [pc, #20]	; (4110 <z_cstart+0xe8>)
	list->tail = (sys_dnode_t *)list;
    40fa:	e9c4 3306 	strd	r3, r3, [r4, #24]
    40fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4102:	4b06      	ldr	r3, [pc, #24]	; (411c <z_cstart+0xf4>)
    4104:	f7fd fa88 	bl	1618 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4108:	200017a0 	.word	0x200017a0
    410c:	e000ed00 	.word	0xe000ed00
    4110:	200006ac 	.word	0x200006ac
    4114:	20000718 	.word	0x20000718
    4118:	000063af 	.word	0x000063af
    411c:	00003ff9 	.word	0x00003ff9
    4120:	20000a60 	.word	0x20000a60
    4124:	000063b4 	.word	0x000063b4
    4128:	20000640 	.word	0x20000640
    412c:	00003f7d 	.word	0x00003f7d
    4130:	20000e60 	.word	0x20000e60
    4134:	20000730 	.word	0x20000730

00004138 <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4138:	4b0b      	ldr	r3, [pc, #44]	; (4168 <init_mem_slab_module+0x30>)
    413a:	480c      	ldr	r0, [pc, #48]	; (416c <init_mem_slab_module+0x34>)
{
    413c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    413e:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4140:	4283      	cmp	r3, r0
    4142:	d301      	bcc.n	4148 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    4144:	2000      	movs	r0, #0
    4146:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
    4148:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    414a:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    414c:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    414e:	2100      	movs	r1, #0
    4150:	42a9      	cmp	r1, r5
    4152:	d101      	bne.n	4158 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4154:	331c      	adds	r3, #28
    4156:	e7f3      	b.n	4140 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    4158:	695e      	ldr	r6, [r3, #20]
    415a:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    415c:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    415e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4160:	3101      	adds	r1, #1
		p += slab->block_size;
    4162:	4432      	add	r2, r6
    4164:	e7f4      	b.n	4150 <init_mem_slab_module+0x18>
    4166:	bf00      	nop
    4168:	20001d50 	.word	0x20001d50
    416c:	20001d50 	.word	0x20001d50

00004170 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    4170:	b510      	push	{r4, lr}
    4172:	4613      	mov	r3, r2
    4174:	460c      	mov	r4, r1
    4176:	f04f 0220 	mov.w	r2, #32
    417a:	f3ef 8111 	mrs	r1, BASEPRI
    417e:	f382 8811 	msr	BASEPRI, r2
    4182:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    4186:	6942      	ldr	r2, [r0, #20]
    4188:	b15a      	cbz	r2, 41a2 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    418a:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    418c:	6813      	ldr	r3, [r2, #0]
    418e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4190:	6983      	ldr	r3, [r0, #24]
    4192:	3301      	adds	r3, #1
    4194:	6183      	str	r3, [r0, #24]
		result = 0;
    4196:	2000      	movs	r0, #0
	__asm__ volatile(
    4198:	f381 8811 	msr	BASEPRI, r1
    419c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    41a0:	e00d      	b.n	41be <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    41a2:	b91b      	cbnz	r3, 41ac <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    41a4:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    41a6:	f06f 000b 	mvn.w	r0, #11
    41aa:	e7f5      	b.n	4198 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    41ac:	4602      	mov	r2, r0
    41ae:	4804      	ldr	r0, [pc, #16]	; (41c0 <k_mem_slab_alloc+0x50>)
    41b0:	f000 fa38 	bl	4624 <z_pend_curr>
		if (result == 0) {
    41b4:	b918      	cbnz	r0, 41be <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    41b6:	4b03      	ldr	r3, [pc, #12]	; (41c4 <k_mem_slab_alloc+0x54>)
    41b8:	689b      	ldr	r3, [r3, #8]
    41ba:	695b      	ldr	r3, [r3, #20]
    41bc:	6023      	str	r3, [r4, #0]
}
    41be:	bd10      	pop	{r4, pc}
    41c0:	2000075d 	.word	0x2000075d
    41c4:	20000718 	.word	0x20000718

000041c8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    41c8:	b570      	push	{r4, r5, r6, lr}
    41ca:	4604      	mov	r4, r0
    41cc:	460d      	mov	r5, r1
	__asm__ volatile(
    41ce:	f04f 0320 	mov.w	r3, #32
    41d2:	f3ef 8611 	mrs	r6, BASEPRI
    41d6:	f383 8811 	msr	BASEPRI, r3
    41da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    41de:	f001 fade 	bl	579e <z_unpend_first_thread>

	if (pending_thread != NULL) {
    41e2:	b180      	cbz	r0, 4206 <k_mem_slab_free+0x3e>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    41e4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    41e6:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    41e8:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    41ea:	2100      	movs	r1, #0
    41ec:	06d2      	lsls	r2, r2, #27
    41ee:	6681      	str	r1, [r0, #104]	; 0x68
    41f0:	d103      	bne.n	41fa <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    41f2:	6983      	ldr	r3, [r0, #24]
    41f4:	b90b      	cbnz	r3, 41fa <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    41f6:	f000 f8bb 	bl	4370 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    41fa:	4631      	mov	r1, r6
    41fc:	4808      	ldr	r0, [pc, #32]	; (4220 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    41fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    4202:	f001 ba74 	b.w	56ee <z_reschedule>
		**(char ***)mem = slab->free_list;
    4206:	682b      	ldr	r3, [r5, #0]
    4208:	6962      	ldr	r2, [r4, #20]
    420a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    420c:	682b      	ldr	r3, [r5, #0]
    420e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    4210:	69a3      	ldr	r3, [r4, #24]
    4212:	3b01      	subs	r3, #1
    4214:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4216:	f386 8811 	msr	BASEPRI, r6
    421a:	f3bf 8f6f 	isb	sy
}
    421e:	bd70      	pop	{r4, r5, r6, pc}
    4220:	2000075d 	.word	0x2000075d

00004224 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4224:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4226:	4c08      	ldr	r4, [pc, #32]	; (4248 <z_reset_time_slice+0x24>)
    4228:	6823      	ldr	r3, [r4, #0]
    422a:	b15b      	cbz	r3, 4244 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    422c:	f7fd f914 	bl	1458 <z_clock_elapsed>
    4230:	6823      	ldr	r3, [r4, #0]
    4232:	4a06      	ldr	r2, [pc, #24]	; (424c <z_reset_time_slice+0x28>)
    4234:	4418      	add	r0, r3
    4236:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4238:	2100      	movs	r1, #0
    423a:	4618      	mov	r0, r3
	}
}
    423c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    4240:	f001 bb1b 	b.w	587a <z_set_timeout_expiry>
}
    4244:	bd10      	pop	{r4, pc}
    4246:	bf00      	nop
    4248:	20000750 	.word	0x20000750
    424c:	20000718 	.word	0x20000718

00004250 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    4250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4252:	460d      	mov	r5, r1
	__asm__ volatile(
    4254:	f04f 0320 	mov.w	r3, #32
    4258:	f3ef 8411 	mrs	r4, BASEPRI
    425c:	f383 8811 	msr	BASEPRI, r3
    4260:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4264:	4b0d      	ldr	r3, [pc, #52]	; (429c <k_sched_time_slice_set+0x4c>)
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    4266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    426a:	f240 36e7 	movw	r6, #999	; 0x3e7
    426e:	2700      	movs	r7, #0
    4270:	fbe1 6700 	umlal	r6, r7, r1, r0
    4274:	2200      	movs	r2, #0
    4276:	611a      	str	r2, [r3, #16]
    4278:	4630      	mov	r0, r6
    427a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    427e:	2300      	movs	r3, #0
    4280:	4639      	mov	r1, r7
    4282:	f7fc fafb 	bl	87c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    4286:	4b06      	ldr	r3, [pc, #24]	; (42a0 <k_sched_time_slice_set+0x50>)
    4288:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    428a:	4b06      	ldr	r3, [pc, #24]	; (42a4 <k_sched_time_slice_set+0x54>)
    428c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    428e:	f7ff ffc9 	bl	4224 <z_reset_time_slice>
	__asm__ volatile(
    4292:	f384 8811 	msr	BASEPRI, r4
    4296:	f3bf 8f6f 	isb	sy
	}
}
    429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    429c:	20000718 	.word	0x20000718
    42a0:	20000750 	.word	0x20000750
    42a4:	2000074c 	.word	0x2000074c

000042a8 <k_sched_lock>:
	__asm__ volatile(
    42a8:	f04f 0320 	mov.w	r3, #32
    42ac:	f3ef 8111 	mrs	r1, BASEPRI
    42b0:	f383 8811 	msr	BASEPRI, r3
    42b4:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    42b8:	4b04      	ldr	r3, [pc, #16]	; (42cc <k_sched_lock+0x24>)
    42ba:	689a      	ldr	r2, [r3, #8]
    42bc:	7bd3      	ldrb	r3, [r2, #15]
    42be:	3b01      	subs	r3, #1
    42c0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    42c2:	f381 8811 	msr	BASEPRI, r1
    42c6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    42ca:	4770      	bx	lr
    42cc:	20000718 	.word	0x20000718

000042d0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    42d0:	4b09      	ldr	r3, [pc, #36]	; (42f8 <z_priq_dumb_remove+0x28>)
    42d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
    42d6:	4282      	cmp	r2, r0
    42d8:	d105      	bne.n	42e6 <z_priq_dumb_remove+0x16>
    42da:	689b      	ldr	r3, [r3, #8]
    42dc:	428b      	cmp	r3, r1
    42de:	d102      	bne.n	42e6 <z_priq_dumb_remove+0x16>
    42e0:	7b4b      	ldrb	r3, [r1, #13]
    42e2:	06db      	lsls	r3, r3, #27
    42e4:	d106      	bne.n	42f4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    42e6:	e9d1 3200 	ldrd	r3, r2, [r1]
    42ea:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    42ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    42ee:	2300      	movs	r3, #0
	node->prev = NULL;
    42f0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    42f4:	4770      	bx	lr
    42f6:	bf00      	nop
    42f8:	20000718 	.word	0x20000718

000042fc <update_cache>:
{
    42fc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    42fe:	4c0d      	ldr	r4, [pc, #52]	; (4334 <update_cache+0x38>)
{
    4300:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4302:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4306:	f001 fa13 	bl	5730 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
    430a:	4605      	mov	r5, r0
    430c:	b900      	cbnz	r0, 4310 <update_cache+0x14>
    430e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    4310:	68a3      	ldr	r3, [r4, #8]
    4312:	b94a      	cbnz	r2, 4328 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    4314:	7b5a      	ldrb	r2, [r3, #13]
    4316:	06d2      	lsls	r2, r2, #27
    4318:	d106      	bne.n	4328 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    431a:	69aa      	ldr	r2, [r5, #24]
    431c:	b922      	cbnz	r2, 4328 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    431e:	89da      	ldrh	r2, [r3, #14]
    4320:	2a7f      	cmp	r2, #127	; 0x7f
    4322:	d901      	bls.n	4328 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    4324:	6263      	str	r3, [r4, #36]	; 0x24
}
    4326:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4328:	429d      	cmp	r5, r3
    432a:	d001      	beq.n	4330 <update_cache+0x34>
			z_reset_time_slice();
    432c:	f7ff ff7a 	bl	4224 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4330:	6265      	str	r5, [r4, #36]	; 0x24
}
    4332:	e7f8      	b.n	4326 <update_cache+0x2a>
    4334:	20000718 	.word	0x20000718

00004338 <k_sched_unlock>:
{
    4338:	b510      	push	{r4, lr}
	__asm__ volatile(
    433a:	f04f 0320 	mov.w	r3, #32
    433e:	f3ef 8411 	mrs	r4, BASEPRI
    4342:	f383 8811 	msr	BASEPRI, r3
    4346:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    434a:	4b08      	ldr	r3, [pc, #32]	; (436c <k_sched_unlock+0x34>)
    434c:	689a      	ldr	r2, [r3, #8]
    434e:	7bd3      	ldrb	r3, [r2, #15]
    4350:	3301      	adds	r3, #1
    4352:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4354:	2000      	movs	r0, #0
    4356:	f7ff ffd1 	bl	42fc <update_cache>
	__asm__ volatile(
    435a:	f384 8811 	msr	BASEPRI, r4
    435e:	f3bf 8f6f 	isb	sy
}
    4362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4366:	f001 b9d9 	b.w	571c <z_reschedule_unlocked>
    436a:	bf00      	nop
    436c:	20000718 	.word	0x20000718

00004370 <z_add_thread_to_ready_q>:
{
    4370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4372:	f04f 0320 	mov.w	r3, #32
    4376:	f3ef 8411 	mrs	r4, BASEPRI
    437a:	f383 8811 	msr	BASEPRI, r3
    437e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4382:	4a15      	ldr	r2, [pc, #84]	; (43d8 <z_add_thread_to_ready_q+0x68>)
    4384:	4611      	mov	r1, r2
    4386:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    438a:	428b      	cmp	r3, r1
    438c:	d01d      	beq.n	43ca <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    438e:	b1e3      	cbz	r3, 43ca <z_add_thread_to_ready_q+0x5a>
    4390:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    4392:	f990 500e 	ldrsb.w	r5, [r0, #14]
    4396:	f993 700e 	ldrsb.w	r7, [r3, #14]
    439a:	42af      	cmp	r7, r5
    439c:	dd10      	ble.n	43c0 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    439e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    43a0:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    43a4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    43a6:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    43a8:	7b43      	ldrb	r3, [r0, #13]
    43aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    43ae:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    43b0:	2000      	movs	r0, #0
    43b2:	f7ff ffa3 	bl	42fc <update_cache>
	__asm__ volatile(
    43b6:	f384 8811 	msr	BASEPRI, r4
    43ba:	f3bf 8f6f 	isb	sy
}
    43be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    43c0:	42b3      	cmp	r3, r6
    43c2:	d002      	beq.n	43ca <z_add_thread_to_ready_q+0x5a>
    43c4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43c6:	2b00      	cmp	r3, #0
    43c8:	d1e5      	bne.n	4396 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    43ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    43cc:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    43ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    43d0:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    43d2:	6018      	str	r0, [r3, #0]
	list->tail = node;
    43d4:	62d0      	str	r0, [r2, #44]	; 0x2c
    43d6:	e7e7      	b.n	43a8 <z_add_thread_to_ready_q+0x38>
    43d8:	20000718 	.word	0x20000718

000043dc <z_move_thread_to_end_of_prio_q>:
{
    43dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43de:	4604      	mov	r4, r0
	__asm__ volatile(
    43e0:	f04f 0320 	mov.w	r3, #32
    43e4:	f3ef 8511 	mrs	r5, BASEPRI
    43e8:	f383 8811 	msr	BASEPRI, r3
    43ec:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    43f0:	7b43      	ldrb	r3, [r0, #13]
    43f2:	065a      	lsls	r2, r3, #25
    43f4:	d503      	bpl.n	43fe <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    43f6:	4601      	mov	r1, r0
    43f8:	4817      	ldr	r0, [pc, #92]	; (4458 <z_move_thread_to_end_of_prio_q+0x7c>)
    43fa:	f7ff ff69 	bl	42d0 <z_priq_dumb_remove>
	return list->head == list;
    43fe:	4a17      	ldr	r2, [pc, #92]	; (445c <z_move_thread_to_end_of_prio_q+0x80>)
    4400:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4404:	f102 0128 	add.w	r1, r2, #40	; 0x28
    4408:	428b      	cmp	r3, r1
    440a:	d01f      	beq.n	444c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    440c:	b1f3      	cbz	r3, 444c <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    440e:	f994 600e 	ldrsb.w	r6, [r4, #14]
    4412:	f993 700e 	ldrsb.w	r7, [r3, #14]
    4416:	42b7      	cmp	r7, r6
    4418:	dd13      	ble.n	4442 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    441a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    441c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    4420:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4422:	605c      	str	r4, [r3, #4]
    4424:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    4426:	6890      	ldr	r0, [r2, #8]
    4428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    442c:	7363      	strb	r3, [r4, #13]
    442e:	1b03      	subs	r3, r0, r4
    4430:	4258      	negs	r0, r3
    4432:	4158      	adcs	r0, r3
    4434:	f7ff ff62 	bl	42fc <update_cache>
	__asm__ volatile(
    4438:	f385 8811 	msr	BASEPRI, r5
    443c:	f3bf 8f6f 	isb	sy
}
    4440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4442:	4283      	cmp	r3, r0
    4444:	d002      	beq.n	444c <z_move_thread_to_end_of_prio_q+0x70>
    4446:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4448:	2b00      	cmp	r3, #0
    444a:	d1e2      	bne.n	4412 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    444c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    4450:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4452:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4454:	62d4      	str	r4, [r2, #44]	; 0x2c
    4456:	e7e5      	b.n	4424 <z_move_thread_to_end_of_prio_q+0x48>
    4458:	20000740 	.word	0x20000740
    445c:	20000718 	.word	0x20000718

00004460 <z_time_slice>:
	if (pending_current == _current) {
    4460:	4a15      	ldr	r2, [pc, #84]	; (44b8 <z_time_slice+0x58>)
    4462:	4916      	ldr	r1, [pc, #88]	; (44bc <z_time_slice+0x5c>)
{
    4464:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    4466:	680c      	ldr	r4, [r1, #0]
    4468:	6893      	ldr	r3, [r2, #8]
    446a:	42a3      	cmp	r3, r4
    446c:	4614      	mov	r4, r2
    446e:	d103      	bne.n	4478 <z_time_slice+0x18>
}
    4470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    4474:	f7ff bed6 	b.w	4224 <z_reset_time_slice>
	pending_current = NULL;
    4478:	2500      	movs	r5, #0
    447a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    447c:	4910      	ldr	r1, [pc, #64]	; (44c0 <z_time_slice+0x60>)
    447e:	6809      	ldr	r1, [r1, #0]
    4480:	b1b9      	cbz	r1, 44b2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    4482:	89d9      	ldrh	r1, [r3, #14]
    4484:	297f      	cmp	r1, #127	; 0x7f
    4486:	d814      	bhi.n	44b2 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4488:	490e      	ldr	r1, [pc, #56]	; (44c4 <z_time_slice+0x64>)
    448a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    448e:	6809      	ldr	r1, [r1, #0]
    4490:	428d      	cmp	r5, r1
    4492:	db0e      	blt.n	44b2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    4494:	490c      	ldr	r1, [pc, #48]	; (44c8 <z_time_slice+0x68>)
    4496:	428b      	cmp	r3, r1
    4498:	d00b      	beq.n	44b2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    449a:	6999      	ldr	r1, [r3, #24]
    449c:	b949      	cbnz	r1, 44b2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    449e:	6911      	ldr	r1, [r2, #16]
    44a0:	4281      	cmp	r1, r0
    44a2:	dc03      	bgt.n	44ac <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    44a4:	4618      	mov	r0, r3
    44a6:	f7ff ff99 	bl	43dc <z_move_thread_to_end_of_prio_q>
    44aa:	e7e1      	b.n	4470 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    44ac:	1a09      	subs	r1, r1, r0
    44ae:	6111      	str	r1, [r2, #16]
}
    44b0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    44b2:	2300      	movs	r3, #0
    44b4:	6123      	str	r3, [r4, #16]
    44b6:	e7fb      	b.n	44b0 <z_time_slice+0x50>
    44b8:	20000718 	.word	0x20000718
    44bc:	20000748 	.word	0x20000748
    44c0:	20000750 	.word	0x20000750
    44c4:	2000074c 	.word	0x2000074c
    44c8:	20000640 	.word	0x20000640

000044cc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    44cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    44ce:	b570      	push	{r4, r5, r6, lr}
    44d0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    44d2:	b103      	cbz	r3, 44d6 <z_thread_single_abort+0xa>
		thread->fn_abort();
    44d4:	4798      	blx	r3
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    44d6:	f104 0018 	add.w	r0, r4, #24
    44da:	f001 f9a8 	bl	582e <z_abort_timeout>
	__asm__ volatile(
    44de:	f04f 0320 	mov.w	r3, #32
    44e2:	f3ef 8511 	mrs	r5, BASEPRI
    44e6:	f383 8811 	msr	BASEPRI, r3
    44ea:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
    44ee:	4620      	mov	r0, r4
    44f0:	f001 f8cb 	bl	568a <z_is_thread_ready>
    44f4:	7b63      	ldrb	r3, [r4, #13]
    44f6:	4606      	mov	r6, r0
    44f8:	b1c8      	cbz	r0, 452e <z_thread_single_abort+0x62>
			if (z_is_thread_queued(thread)) {
    44fa:	0659      	lsls	r1, r3, #25
    44fc:	d507      	bpl.n	450e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    44fe:	4621      	mov	r1, r4
    4500:	4811      	ldr	r0, [pc, #68]	; (4548 <z_thread_single_abort+0x7c>)
    4502:	f7ff fee5 	bl	42d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4506:	7b63      	ldrb	r3, [r4, #13]
    4508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    450c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    450e:	4b0f      	ldr	r3, [pc, #60]	; (454c <z_thread_single_abort+0x80>)
    4510:	6898      	ldr	r0, [r3, #8]
    4512:	1b02      	subs	r2, r0, r4
    4514:	4250      	negs	r0, r2
    4516:	4150      	adcs	r0, r2
    4518:	f7ff fef0 	bl	42fc <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    451c:	7b63      	ldrb	r3, [r4, #13]
    451e:	f043 0308 	orr.w	r3, r3, #8
    4522:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    4524:	f385 8811 	msr	BASEPRI, r5
    4528:	f3bf 8f6f 	isb	sy
}
    452c:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
    452e:	079b      	lsls	r3, r3, #30
    4530:	d5f4      	bpl.n	451c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4532:	4621      	mov	r1, r4
    4534:	68a0      	ldr	r0, [r4, #8]
    4536:	f7ff fecb 	bl	42d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    453a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    453c:	60a6      	str	r6, [r4, #8]
    453e:	f023 0302 	bic.w	r3, r3, #2
    4542:	7363      	strb	r3, [r4, #13]
    4544:	e7ea      	b.n	451c <z_thread_single_abort+0x50>
    4546:	bf00      	nop
    4548:	20000740 	.word	0x20000740
    454c:	20000718 	.word	0x20000718

00004550 <z_remove_thread_from_ready_q>:
{
    4550:	b538      	push	{r3, r4, r5, lr}
    4552:	4604      	mov	r4, r0
	__asm__ volatile(
    4554:	f04f 0320 	mov.w	r3, #32
    4558:	f3ef 8511 	mrs	r5, BASEPRI
    455c:	f383 8811 	msr	BASEPRI, r3
    4560:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4564:	7b43      	ldrb	r3, [r0, #13]
    4566:	065a      	lsls	r2, r3, #25
    4568:	d507      	bpl.n	457a <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    456a:	4601      	mov	r1, r0
    456c:	4809      	ldr	r0, [pc, #36]	; (4594 <z_remove_thread_from_ready_q+0x44>)
    456e:	f7ff feaf 	bl	42d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4572:	7b63      	ldrb	r3, [r4, #13]
    4574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4578:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    457a:	4b07      	ldr	r3, [pc, #28]	; (4598 <z_remove_thread_from_ready_q+0x48>)
    457c:	6898      	ldr	r0, [r3, #8]
    457e:	1b03      	subs	r3, r0, r4
    4580:	4258      	negs	r0, r3
    4582:	4158      	adcs	r0, r3
    4584:	f7ff feba 	bl	42fc <update_cache>
	__asm__ volatile(
    4588:	f385 8811 	msr	BASEPRI, r5
    458c:	f3bf 8f6f 	isb	sy
}
    4590:	bd38      	pop	{r3, r4, r5, pc}
    4592:	bf00      	nop
    4594:	20000740 	.word	0x20000740
    4598:	20000718 	.word	0x20000718

0000459c <pend>:
{
    459c:	b570      	push	{r4, r5, r6, lr}
    459e:	4604      	mov	r4, r0
    45a0:	460d      	mov	r5, r1
    45a2:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    45a4:	f7ff ffd4 	bl	4550 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    45a8:	7b63      	ldrb	r3, [r4, #13]
    45aa:	f043 0302 	orr.w	r3, r3, #2
    45ae:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    45b0:	b17d      	cbz	r5, 45d2 <pend+0x36>
	return list->head == list;
    45b2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    45b4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    45b6:	429d      	cmp	r5, r3
    45b8:	d029      	beq.n	460e <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45ba:	b343      	cbz	r3, 460e <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
    45bc:	f994 200e 	ldrsb.w	r2, [r4, #14]
    45c0:	f993 100e 	ldrsb.w	r1, [r3, #14]
    45c4:	4291      	cmp	r1, r2
    45c6:	dd1c      	ble.n	4602 <pend+0x66>
	node->prev = successor->prev;
    45c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    45ca:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    45ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    45d0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    45d2:	1c73      	adds	r3, r6, #1
    45d4:	d022      	beq.n	461c <pend+0x80>
    45d6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    45da:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    45de:	f240 30e7 	movw	r0, #999	; 0x3e7
    45e2:	2100      	movs	r1, #0
    45e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    45e8:	fbc5 0106 	smlal	r0, r1, r5, r6
    45ec:	2300      	movs	r3, #0
    45ee:	f7fc f945 	bl	87c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    45f2:	490b      	ldr	r1, [pc, #44]	; (4620 <pend+0x84>)
    45f4:	1c42      	adds	r2, r0, #1
    45f6:	f104 0018 	add.w	r0, r4, #24
}
    45fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45fe:	f000 b981 	b.w	4904 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    4602:	6869      	ldr	r1, [r5, #4]
    4604:	428b      	cmp	r3, r1
    4606:	d002      	beq.n	460e <pend+0x72>
    4608:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    460a:	2b00      	cmp	r3, #0
    460c:	d1d8      	bne.n	45c0 <pend+0x24>
	node->prev = list->tail;
    460e:	686b      	ldr	r3, [r5, #4]
    4610:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4612:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    4614:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    4616:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4618:	606c      	str	r4, [r5, #4]
    461a:	e7da      	b.n	45d2 <pend+0x36>
}
    461c:	bd70      	pop	{r4, r5, r6, pc}
    461e:	bf00      	nop
    4620:	0000573d 	.word	0x0000573d

00004624 <z_pend_curr>:
{
    4624:	b510      	push	{r4, lr}
    4626:	460c      	mov	r4, r1
    4628:	4611      	mov	r1, r2
	pending_current = _current;
    462a:	4a06      	ldr	r2, [pc, #24]	; (4644 <z_pend_curr+0x20>)
    462c:	6890      	ldr	r0, [r2, #8]
    462e:	4a06      	ldr	r2, [pc, #24]	; (4648 <z_pend_curr+0x24>)
    4630:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    4632:	461a      	mov	r2, r3
    4634:	f7ff ffb2 	bl	459c <pend>
    4638:	4620      	mov	r0, r4
}
    463a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    463e:	f7fc bf4d 	b.w	14dc <arch_swap>
    4642:	bf00      	nop
    4644:	20000718 	.word	0x20000718
    4648:	20000748 	.word	0x20000748

0000464c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    464c:	4b04      	ldr	r3, [pc, #16]	; (4660 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    464e:	2100      	movs	r1, #0
    4650:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    4654:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    4658:	4608      	mov	r0, r1
    465a:	f7ff bdf9 	b.w	4250 <k_sched_time_slice_set>
    465e:	bf00      	nop
    4660:	20000718 	.word	0x20000718

00004664 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    4664:	4b01      	ldr	r3, [pc, #4]	; (466c <z_impl_k_current_get+0x8>)
    4666:	6898      	ldr	r0, [r3, #8]
    4668:	4770      	bx	lr
    466a:	bf00      	nop
    466c:	20000718 	.word	0x20000718

00004670 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4670:	b570      	push	{r4, r5, r6, lr}
    4672:	4604      	mov	r4, r0
	__asm__ volatile(
    4674:	f04f 0320 	mov.w	r3, #32
    4678:	f3ef 8611 	mrs	r6, BASEPRI
    467c:	f383 8811 	msr	BASEPRI, r3
    4680:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    4684:	f001 f88b 	bl	579e <z_unpend_first_thread>
	if (thread != NULL) {
    4688:	4605      	mov	r5, r0
    468a:	b170      	cbz	r0, 46aa <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    468c:	7b43      	ldrb	r3, [r0, #13]
    468e:	06db      	lsls	r3, r3, #27
    4690:	d103      	bne.n	469a <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    4692:	6983      	ldr	r3, [r0, #24]
    4694:	b90b      	cbnz	r3, 469a <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    4696:	f7ff fe6b 	bl	4370 <z_add_thread_to_ready_q>
    469a:	2300      	movs	r3, #0
    469c:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    469e:	4631      	mov	r1, r6
    46a0:	4805      	ldr	r0, [pc, #20]	; (46b8 <z_impl_k_sem_give+0x48>)
}
    46a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    46a6:	f001 b822 	b.w	56ee <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    46aa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    46ae:	429a      	cmp	r2, r3
    46b0:	bf18      	it	ne
    46b2:	3301      	addne	r3, #1
    46b4:	60a3      	str	r3, [r4, #8]
    46b6:	e7f2      	b.n	469e <z_impl_k_sem_give+0x2e>
    46b8:	2000075d 	.word	0x2000075d

000046bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    46bc:	b410      	push	{r4}
    46be:	4602      	mov	r2, r0
    46c0:	460b      	mov	r3, r1
    46c2:	f04f 0020 	mov.w	r0, #32
    46c6:	f3ef 8111 	mrs	r1, BASEPRI
    46ca:	f380 8811 	msr	BASEPRI, r0
    46ce:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    46d2:	6894      	ldr	r4, [r2, #8]
    46d4:	b144      	cbz	r4, 46e8 <z_impl_k_sem_take+0x2c>
		sem->count--;
    46d6:	3c01      	subs	r4, #1
    46d8:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    46da:	f381 8811 	msr	BASEPRI, r1
    46de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    46e2:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    46e4:	bc10      	pop	{r4}
    46e6:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    46e8:	b933      	cbnz	r3, 46f8 <z_impl_k_sem_take+0x3c>
    46ea:	f381 8811 	msr	BASEPRI, r1
    46ee:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    46f2:	f06f 000f 	mvn.w	r0, #15
    46f6:	e7f5      	b.n	46e4 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    46f8:	4801      	ldr	r0, [pc, #4]	; (4700 <z_impl_k_sem_take+0x44>)
}
    46fa:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    46fc:	f7ff bf92 	b.w	4624 <z_pend_curr>
    4700:	2000075d 	.word	0x2000075d

00004704 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    4704:	b510      	push	{r4, lr}
	__asm__ volatile(
    4706:	f04f 0220 	mov.w	r2, #32
    470a:	f3ef 8411 	mrs	r4, BASEPRI
    470e:	f382 8811 	msr	BASEPRI, r2
    4712:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    4716:	7b42      	ldrb	r2, [r0, #13]
    4718:	0751      	lsls	r1, r2, #29
    471a:	d404      	bmi.n	4726 <z_impl_k_thread_start+0x22>
	__asm__ volatile(
    471c:	f384 8811 	msr	BASEPRI, r4
    4720:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    4724:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4726:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    472a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    472e:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4730:	d103      	bne.n	473a <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
    4732:	6983      	ldr	r3, [r0, #24]
    4734:	b90b      	cbnz	r3, 473a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    4736:	f7ff fe1b 	bl	4370 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    473a:	4621      	mov	r1, r4
    473c:	4802      	ldr	r0, [pc, #8]	; (4748 <z_impl_k_thread_start+0x44>)
}
    473e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    4742:	f000 bfd4 	b.w	56ee <z_reschedule>
    4746:	bf00      	nop
    4748:	2000075d 	.word	0x2000075d

0000474c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    474c:	b530      	push	{r4, r5, lr}
    474e:	b087      	sub	sp, #28
    4750:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4752:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4754:	9504      	str	r5, [sp, #16]
    4756:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4758:	9503      	str	r5, [sp, #12]
    475a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    475c:	9502      	str	r5, [sp, #8]
    475e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4760:	9501      	str	r5, [sp, #4]
    4762:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4764:	9500      	str	r5, [sp, #0]
    4766:	f7fc ff35 	bl	15d4 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    476a:	4b03      	ldr	r3, [pc, #12]	; (4778 <z_setup_new_thread+0x2c>)
    476c:	689b      	ldr	r3, [r3, #8]
    476e:	b103      	cbz	r3, 4772 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    4770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4772:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    4774:	b007      	add	sp, #28
    4776:	bd30      	pop	{r4, r5, pc}
    4778:	20000718 	.word	0x20000718

0000477c <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    477c:	b570      	push	{r4, r5, r6, lr}
    477e:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4780:	2600      	movs	r6, #0
    4782:	9605      	str	r6, [sp, #20]
    4784:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4786:	9604      	str	r6, [sp, #16]
    4788:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    478a:	9603      	str	r6, [sp, #12]
    478c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    478e:	9602      	str	r6, [sp, #8]
    4790:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    4792:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4794:	9601      	str	r6, [sp, #4]
    4796:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4798:	9600      	str	r6, [sp, #0]
{
    479a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    479c:	f7ff ffd6 	bl	474c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    47a0:	1c6b      	adds	r3, r5, #1
    47a2:	d003      	beq.n	47ac <z_impl_k_thread_create+0x30>
	if (delay == 0) {
    47a4:	b92d      	cbnz	r5, 47b2 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
    47a6:	4620      	mov	r0, r4
    47a8:	f7ff ffac 	bl	4704 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    47ac:	4620      	mov	r0, r4
    47ae:	b006      	add	sp, #24
    47b0:	bd70      	pop	{r4, r5, r6, pc}
    47b2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    47b6:	f240 30e7 	movw	r0, #999	; 0x3e7
    47ba:	2100      	movs	r1, #0
    47bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    47c0:	2300      	movs	r3, #0
    47c2:	fbe6 0105 	umlal	r0, r1, r6, r5
    47c6:	f7fc f859 	bl	87c <__aeabi_uldivmod>
    47ca:	4903      	ldr	r1, [pc, #12]	; (47d8 <z_impl_k_thread_create+0x5c>)
    47cc:	1c42      	adds	r2, r0, #1
    47ce:	f104 0018 	add.w	r0, r4, #24
    47d2:	f000 f897 	bl	4904 <z_add_timeout>
    47d6:	e7e9      	b.n	47ac <z_impl_k_thread_create+0x30>
    47d8:	0000573d 	.word	0x0000573d

000047dc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    47dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    47e0:	4e28      	ldr	r6, [pc, #160]	; (4884 <z_init_static_threads+0xa8>)
    47e2:	4d29      	ldr	r5, [pc, #164]	; (4888 <z_init_static_threads+0xac>)
{
    47e4:	b087      	sub	sp, #28
    47e6:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    47e8:	42b5      	cmp	r5, r6
    47ea:	f105 0430 	add.w	r4, r5, #48	; 0x30
    47ee:	d310      	bcc.n	4812 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    47f0:	f7ff fd5a 	bl	42a8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    47f4:	4c24      	ldr	r4, [pc, #144]	; (4888 <z_init_static_threads+0xac>)
    47f6:	f8df a094 	ldr.w	sl, [pc, #148]	; 488c <z_init_static_threads+0xb0>
    47fa:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    47fe:	f240 36e7 	movw	r6, #999	; 0x3e7
    4802:	2700      	movs	r7, #0
    4804:	4544      	cmp	r4, r8
    4806:	d321      	bcc.n	484c <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    4808:	b007      	add	sp, #28
    480a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    480e:	f7ff bd93 	b.w	4338 <k_sched_unlock>
		z_setup_new_thread(
    4812:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4816:	9305      	str	r3, [sp, #20]
    4818:	f854 3c10 	ldr.w	r3, [r4, #-16]
    481c:	9304      	str	r3, [sp, #16]
    481e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4822:	9303      	str	r3, [sp, #12]
    4824:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4828:	9302      	str	r3, [sp, #8]
    482a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    482e:	9301      	str	r3, [sp, #4]
    4830:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4834:	9300      	str	r3, [sp, #0]
    4836:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    483a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    483e:	f7ff ff85 	bl	474c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4842:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4846:	64dd      	str	r5, [r3, #76]	; 0x4c
    4848:	4625      	mov	r5, r4
    484a:	e7cd      	b.n	47e8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    484c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    484e:	1c4b      	adds	r3, r1, #1
    4850:	d004      	beq.n	485c <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    4852:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    4854:	b921      	cbnz	r1, 4860 <z_init_static_threads+0x84>
    4856:	4628      	mov	r0, r5
    4858:	f7ff ff54 	bl	4704 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    485c:	3430      	adds	r4, #48	; 0x30
    485e:	e7d1      	b.n	4804 <z_init_static_threads+0x28>
    4860:	46b3      	mov	fp, r6
    4862:	46bc      	mov	ip, r7
    4864:	fbe9 bc01 	umlal	fp, ip, r9, r1
    4868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    486c:	2300      	movs	r3, #0
    486e:	4658      	mov	r0, fp
    4870:	4661      	mov	r1, ip
    4872:	f7fc f803 	bl	87c <__aeabi_uldivmod>
    4876:	4651      	mov	r1, sl
    4878:	1c42      	adds	r2, r0, #1
    487a:	f105 0018 	add.w	r0, r5, #24
    487e:	f000 f841 	bl	4904 <z_add_timeout>
    4882:	e7eb      	b.n	485c <z_init_static_threads+0x80>
    4884:	20001d50 	.word	0x20001d50
    4888:	20001d50 	.word	0x20001d50
    488c:	0000573d 	.word	0x0000573d

00004890 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4890:	4b03      	ldr	r3, [pc, #12]	; (48a0 <elapsed+0x10>)
    4892:	681b      	ldr	r3, [r3, #0]
    4894:	b90b      	cbnz	r3, 489a <elapsed+0xa>
    4896:	f7fc bddf 	b.w	1458 <z_clock_elapsed>
}
    489a:	2000      	movs	r0, #0
    489c:	4770      	bx	lr
    489e:	bf00      	nop
    48a0:	20000754 	.word	0x20000754

000048a4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    48a4:	6803      	ldr	r3, [r0, #0]
    48a6:	b140      	cbz	r0, 48ba <remove_timeout+0x16>
    48a8:	4a07      	ldr	r2, [pc, #28]	; (48c8 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    48aa:	6852      	ldr	r2, [r2, #4]
    48ac:	4290      	cmp	r0, r2
    48ae:	d004      	beq.n	48ba <remove_timeout+0x16>
	if (next(t) != NULL) {
    48b0:	b11b      	cbz	r3, 48ba <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    48b2:	689a      	ldr	r2, [r3, #8]
    48b4:	6881      	ldr	r1, [r0, #8]
    48b6:	440a      	add	r2, r1
    48b8:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    48ba:	6842      	ldr	r2, [r0, #4]
    48bc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    48be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    48c0:	2300      	movs	r3, #0
	node->prev = NULL;
    48c2:	e9c0 3300 	strd	r3, r3, [r0]
}
    48c6:	4770      	bx	lr
    48c8:	20001cc4 	.word	0x20001cc4

000048cc <next_timeout>:
	return list->head == list;
    48cc:	4b0b      	ldr	r3, [pc, #44]	; (48fc <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    48ce:	b510      	push	{r4, lr}
    48d0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48d2:	429c      	cmp	r4, r3
    48d4:	bf08      	it	eq
    48d6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    48d8:	f7ff ffda 	bl	4890 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    48dc:	b154      	cbz	r4, 48f4 <next_timeout+0x28>
    48de:	68a3      	ldr	r3, [r4, #8]
    48e0:	1a18      	subs	r0, r3, r0
    48e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    48e6:	4b06      	ldr	r3, [pc, #24]	; (4900 <next_timeout+0x34>)
    48e8:	691b      	ldr	r3, [r3, #16]
    48ea:	b113      	cbz	r3, 48f2 <next_timeout+0x26>
    48ec:	4298      	cmp	r0, r3
    48ee:	bfa8      	it	ge
    48f0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    48f2:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    48f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    48f8:	e7f5      	b.n	48e6 <next_timeout+0x1a>
    48fa:	bf00      	nop
    48fc:	20001cc4 	.word	0x20001cc4
    4900:	20000718 	.word	0x20000718

00004904 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    4904:	b570      	push	{r4, r5, r6, lr}
    4906:	4604      	mov	r4, r0
    4908:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    490a:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    490c:	f04f 0320 	mov.w	r3, #32
    4910:	f3ef 8511 	mrs	r5, BASEPRI
    4914:	f383 8811 	msr	BASEPRI, r3
    4918:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    491c:	f7ff ffb8 	bl	4890 <elapsed>
	return list->head == list;
    4920:	4b18      	ldr	r3, [pc, #96]	; (4984 <z_add_timeout+0x80>)
    4922:	681a      	ldr	r2, [r3, #0]
    4924:	2e01      	cmp	r6, #1
    4926:	bfac      	ite	ge
    4928:	1980      	addge	r0, r0, r6
    492a:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    492c:	429a      	cmp	r2, r3
    492e:	60a0      	str	r0, [r4, #8]
    4930:	d001      	beq.n	4936 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4932:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    4934:	b932      	cbnz	r2, 4944 <z_add_timeout+0x40>
	node->prev = list->tail;
    4936:	685a      	ldr	r2, [r3, #4]
    4938:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    493a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    493c:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    493e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4940:	605c      	str	r4, [r3, #4]
    4942:	e00a      	b.n	495a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    4944:	6890      	ldr	r0, [r2, #8]
    4946:	68a1      	ldr	r1, [r4, #8]
    4948:	4288      	cmp	r0, r1
    494a:	dd15      	ble.n	4978 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    494c:	1a41      	subs	r1, r0, r1
    494e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    4950:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4952:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    4956:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4958:	6054      	str	r4, [r2, #4]
	return list->head == list;
    495a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    495c:	429a      	cmp	r2, r3
    495e:	d006      	beq.n	496e <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4960:	4294      	cmp	r4, r2
    4962:	d104      	bne.n	496e <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    4964:	f7ff ffb2 	bl	48cc <next_timeout>
    4968:	2100      	movs	r1, #0
    496a:	f7fc fd1f 	bl	13ac <z_clock_set_timeout>
	__asm__ volatile(
    496e:	f385 8811 	msr	BASEPRI, r5
    4972:	f3bf 8f6f 	isb	sy
		}
	}
}
    4976:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    4978:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    497a:	42b2      	cmp	r2, r6
    497c:	60a1      	str	r1, [r4, #8]
    497e:	d0da      	beq.n	4936 <z_add_timeout+0x32>
    4980:	6812      	ldr	r2, [r2, #0]
    4982:	e7d7      	b.n	4934 <z_add_timeout+0x30>
    4984:	20001cc4 	.word	0x20001cc4

00004988 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    4988:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    498c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    498e:	f7ff fd67 	bl	4460 <z_time_slice>
	__asm__ volatile(
    4992:	f04f 0320 	mov.w	r3, #32
    4996:	f3ef 8511 	mrs	r5, BASEPRI
    499a:	f383 8811 	msr	BASEPRI, r3
    499e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    49a2:	4e21      	ldr	r6, [pc, #132]	; (4a28 <z_clock_announce+0xa0>)
    49a4:	4f21      	ldr	r7, [pc, #132]	; (4a2c <z_clock_announce+0xa4>)
	return list->head == list;
    49a6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4a30 <z_clock_announce+0xa8>
    49aa:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    49ac:	46b8      	mov	r8, r7
    49ae:	f8d9 4000 	ldr.w	r4, [r9]
    49b2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49b4:	454c      	cmp	r4, r9
    49b6:	e9d7 bc00 	ldrd	fp, ip, [r7]
    49ba:	d005      	beq.n	49c8 <z_clock_announce+0x40>
    49bc:	b124      	cbz	r4, 49c8 <z_clock_announce+0x40>
    49be:	68a3      	ldr	r3, [r4, #8]
    49c0:	4293      	cmp	r3, r2
    49c2:	dd14      	ble.n	49ee <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    49c4:	1a9b      	subs	r3, r3, r2
    49c6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    49c8:	eb1b 0002 	adds.w	r0, fp, r2
    49cc:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    49d0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    49d2:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    49d6:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    49d8:	f7ff ff78 	bl	48cc <next_timeout>
    49dc:	4621      	mov	r1, r4
    49de:	f7fc fce5 	bl	13ac <z_clock_set_timeout>
	__asm__ volatile(
    49e2:	f385 8811 	msr	BASEPRI, r5
    49e6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    49ea:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    49ee:	eb1b 0003 	adds.w	r0, fp, r3
    49f2:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    49f6:	1ad3      	subs	r3, r2, r3
    49f8:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    49fa:	2300      	movs	r3, #0
		curr_tick += dt;
    49fc:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    4a00:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    4a02:	4620      	mov	r0, r4
    4a04:	f7ff ff4e 	bl	48a4 <remove_timeout>
    4a08:	f385 8811 	msr	BASEPRI, r5
    4a0c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4a10:	68e3      	ldr	r3, [r4, #12]
    4a12:	4798      	blx	r3
	__asm__ volatile(
    4a14:	f04f 0320 	mov.w	r3, #32
    4a18:	f3ef 8511 	mrs	r5, BASEPRI
    4a1c:	f383 8811 	msr	BASEPRI, r3
    4a20:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4a24:	e7c3      	b.n	49ae <z_clock_announce+0x26>
    4a26:	bf00      	nop
    4a28:	20000754 	.word	0x20000754
    4a2c:	200004a0 	.word	0x200004a0
    4a30:	20001cc4 	.word	0x20001cc4

00004a34 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    4a34:	6a02      	ldr	r2, [r0, #32]
    4a36:	2a00      	cmp	r2, #0
{
    4a38:	b538      	push	{r3, r4, r5, lr}
    4a3a:	4604      	mov	r4, r0
	if (timer->period > 0) {
    4a3c:	dd02      	ble.n	4a44 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4a3e:	490e      	ldr	r1, [pc, #56]	; (4a78 <z_timer_expiration_handler+0x44>)
    4a40:	f7ff ff60 	bl	4904 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    4a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a46:	3301      	adds	r3, #1
    4a48:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    4a4a:	69a3      	ldr	r3, [r4, #24]
    4a4c:	b10b      	cbz	r3, 4a52 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
    4a4e:	4620      	mov	r0, r4
    4a50:	4798      	blx	r3
	return list->head == list;
    4a52:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a56:	42a5      	cmp	r5, r4
    4a58:	d00d      	beq.n	4a76 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4a5a:	b165      	cbz	r5, 4a76 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    4a5c:	4628      	mov	r0, r5
    4a5e:	f000 fe2d 	bl	56bc <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4a62:	7b6b      	ldrb	r3, [r5, #13]
    4a64:	06db      	lsls	r3, r3, #27
    4a66:	d104      	bne.n	4a72 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
    4a68:	69ab      	ldr	r3, [r5, #24]
    4a6a:	b913      	cbnz	r3, 4a72 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
    4a6c:	4628      	mov	r0, r5
    4a6e:	f7ff fc7f 	bl	4370 <z_add_thread_to_ready_q>
    4a72:	2300      	movs	r3, #0
    4a74:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
    4a76:	bd38      	pop	{r3, r4, r5, pc}
    4a78:	00004a35 	.word	0x00004a35

00004a7c <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    4a7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4a80:	f240 36e7 	movw	r6, #999	; 0x3e7
    4a84:	2700      	movs	r7, #0
    4a86:	4604      	mov	r4, r0
    4a88:	4688      	mov	r8, r1
    4a8a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    4a8e:	4630      	mov	r0, r6
    4a90:	4639      	mov	r1, r7
    4a92:	fbe5 0102 	umlal	r0, r1, r5, r2
    4a96:	2300      	movs	r3, #0
    4a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a9c:	f7fb feee 	bl	87c <__aeabi_uldivmod>
    4aa0:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
    4aa2:	9000      	str	r0, [sp, #0]
    4aa4:	4630      	mov	r0, r6
    4aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4aaa:	2300      	movs	r3, #0
    4aac:	fbe5 0108 	umlal	r0, r1, r5, r8
    4ab0:	f7fb fee4 	bl	87c <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
    4ab4:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
    4ab6:	4620      	mov	r0, r4
    4ab8:	f000 feb9 	bl	582e <z_abort_timeout>
	timer->period = period_in_ticks;
    4abc:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4abe:	4905      	ldr	r1, [pc, #20]	; (4ad4 <z_impl_k_timer_start+0x58>)
    4ac0:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
    4ac2:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4ac4:	4620      	mov	r0, r4
	timer->status = 0U;
    4ac6:	2300      	movs	r3, #0
    4ac8:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
    4aca:	b002      	add	sp, #8
    4acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4ad0:	f7ff bf18 	b.w	4904 <z_add_timeout>
    4ad4:	00004a35 	.word	0x00004a35

00004ad8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    4ad8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    4ada:	4c07      	ldr	r4, [pc, #28]	; (4af8 <init_static_pools+0x20>)
    4adc:	4d07      	ldr	r5, [pc, #28]	; (4afc <init_static_pools+0x24>)
    4ade:	42ac      	cmp	r4, r5
    4ae0:	d301      	bcc.n	4ae6 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    4ae2:	2000      	movs	r0, #0
    4ae4:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4ae6:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    4aea:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    4aec:	e9c4 3305 	strd	r3, r3, [r4, #20]
    4af0:	f000 f806 	bl	4b00 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    4af4:	341c      	adds	r4, #28
    4af6:	e7f2      	b.n	4ade <init_static_pools+0x6>
    4af8:	20001d50 	.word	0x20001d50
    4afc:	20001d50 	.word	0x20001d50

00004b00 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    4b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4b04:	6846      	ldr	r6, [r0, #4]
    4b06:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4b08:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    4b0a:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    4b0e:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4b10:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    4b14:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4b16:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4b18:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    4b1a:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    4b1c:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    4b20:	4598      	cmp	r8, r3
    4b22:	dc05      	bgt.n	4b30 <z_sys_mem_pool_base_init+0x30>
    4b24:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    4b26:	4619      	mov	r1, r3
    4b28:	428f      	cmp	r7, r1
    4b2a:	dc20      	bgt.n	4b6e <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    4b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    4b30:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    4b34:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    4b38:	fb09 fe03 	mul.w	lr, r9, r3
    4b3c:	eb0a 040e 	add.w	r4, sl, lr
    4b40:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    4b44:	2d20      	cmp	r5, #32
    4b46:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    4b4a:	d805      	bhi.n	4b58 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    4b4c:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    4b4e:	0892      	lsrs	r2, r2, #2
    4b50:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    4b54:	3301      	adds	r3, #1
    4b56:	e7e3      	b.n	4b20 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    4b58:	f115 041f 	adds.w	r4, r5, #31
    4b5c:	bf48      	it	mi
    4b5e:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    4b62:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    4b64:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    4b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4b6c:	e7ef      	b.n	4b4e <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    4b6e:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    4b70:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    4b72:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    4b76:	18ec      	adds	r4, r5, r3
	node->next = list;
    4b78:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    4b7c:	6895      	ldr	r5, [r2, #8]
    4b7e:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    4b80:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    4b82:	3101      	adds	r1, #1
    4b84:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4b86:	4433      	add	r3, r6
    4b88:	6094      	str	r4, [r2, #8]
    4b8a:	e7cd      	b.n	4b28 <z_sys_mem_pool_base_init+0x28>

00004b8c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4b8c:	4604      	mov	r4, r0
    4b8e:	b508      	push	{r3, lr}
    4b90:	4608      	mov	r0, r1
    4b92:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4b94:	461a      	mov	r2, r3
    4b96:	47a0      	blx	r4
	return z_impl_k_current_get();
    4b98:	f7ff fd64 	bl	4664 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    4b9c:	f7fd f8b0 	bl	1d00 <z_impl_k_thread_abort>

00004ba0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4ba0:	4770      	bx	lr

00004ba2 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    4ba2:	2300      	movs	r3, #0
	list->head = NULL;
    4ba4:	e9c0 3300 	strd	r3, r3, [r0]
}
    4ba8:	4770      	bx	lr

00004baa <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    4baa:	6803      	ldr	r3, [r0, #0]
    4bac:	b923      	cbnz	r3, 4bb8 <log_list_add_tail+0xe>
		list->head = msg;
    4bae:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    4bb0:	2300      	movs	r3, #0
	list->tail = msg;
    4bb2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    4bb4:	600b      	str	r3, [r1, #0]
}
    4bb6:	4770      	bx	lr
		list->tail->next = msg;
    4bb8:	6843      	ldr	r3, [r0, #4]
    4bba:	6019      	str	r1, [r3, #0]
    4bbc:	e7f8      	b.n	4bb0 <log_list_add_tail+0x6>

00004bbe <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    4bbe:	6800      	ldr	r0, [r0, #0]
    4bc0:	4770      	bx	lr

00004bc2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    4bc2:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    4bc4:	b10b      	cbz	r3, 4bca <log_list_head_get+0x8>
		list->head = list->head->next;
    4bc6:	681a      	ldr	r2, [r3, #0]
    4bc8:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    4bca:	4618      	mov	r0, r3
    4bcc:	4770      	bx	lr

00004bce <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    4bce:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    4bd0:	f7fc faea 	bl	11a8 <log_msg_chunk_alloc>

	if (msg != NULL) {
    4bd4:	b118      	cbz	r0, 4bde <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    4bd6:	2301      	movs	r3, #1
    4bd8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    4bda:	2300      	movs	r3, #0
    4bdc:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    4bde:	bd08      	pop	{r3, pc}

00004be0 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    4be0:	f7fc bc54 	b.w	148c <z_timer_cycle_get_32>

00004be4 <dummy_timestamp>:
    4be4:	2000      	movs	r0, #0
    4be6:	4770      	bx	lr

00004be8 <z_log_get_s_mask>:
	u32_t mask = 0;
    4be8:	2300      	movs	r3, #0
{
    4bea:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t arg = 0;
    4bec:	461a      	mov	r2, r3
	bool arm = false;
    4bee:	461c      	mov	r4, r3
				mask |= BIT(arg);
    4bf0:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    4bf2:	f810 5b01 	ldrb.w	r5, [r0], #1
    4bf6:	b10d      	cbz	r5, 4bfc <z_log_get_s_mask+0x14>
    4bf8:	428a      	cmp	r2, r1
    4bfa:	d301      	bcc.n	4c00 <z_log_get_s_mask+0x18>
}
    4bfc:	4618      	mov	r0, r3
    4bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    4c00:	2d25      	cmp	r5, #37	; 0x25
    4c02:	d102      	bne.n	4c0a <z_log_get_s_mask+0x22>
			arm = !arm;
    4c04:	f084 0401 	eor.w	r4, r4, #1
    4c08:	e7f3      	b.n	4bf2 <z_log_get_s_mask+0xa>
		} else if (arm && isalpha((int)curr)) {
    4c0a:	2c00      	cmp	r4, #0
    4c0c:	d0f1      	beq.n	4bf2 <z_log_get_s_mask+0xa>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    4c0e:	f045 0620 	orr.w	r6, r5, #32
    4c12:	3e61      	subs	r6, #97	; 0x61
    4c14:	2e19      	cmp	r6, #25
    4c16:	d8ec      	bhi.n	4bf2 <z_log_get_s_mask+0xa>
			if (curr == 's') {
    4c18:	2d73      	cmp	r5, #115	; 0x73
				mask |= BIT(arg);
    4c1a:	bf04      	itt	eq
    4c1c:	fa07 f402 	lsleq.w	r4, r7, r2
    4c20:	4323      	orreq	r3, r4
			arg++;
    4c22:	3201      	adds	r2, #1
			arm = false;
    4c24:	2400      	movs	r4, #0
    4c26:	e7e4      	b.n	4bf2 <z_log_get_s_mask+0xa>

00004c28 <log_0>:
{
    4c28:	b538      	push	{r3, r4, r5, lr}
    4c2a:	4605      	mov	r5, r0
    4c2c:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    4c2e:	f7ff ffce 	bl	4bce <z_log_msg_std_alloc>

	if (msg != NULL) {
    4c32:	b128      	cbz	r0, 4c40 <log_0+0x18>
		msg->str = str;
    4c34:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    4c36:	4621      	mov	r1, r4
}
    4c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    4c3c:	f7fc b9d6 	b.w	fec <msg_finalize>
}
    4c40:	bd38      	pop	{r3, r4, r5, pc}

00004c42 <log_1>:
{
    4c42:	b570      	push	{r4, r5, r6, lr}
    4c44:	4604      	mov	r4, r0
    4c46:	460e      	mov	r6, r1
    4c48:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    4c4a:	f7ff ffc0 	bl	4bce <z_log_msg_std_alloc>

	if (msg != NULL) {
    4c4e:	b158      	cbz	r0, 4c68 <log_1+0x26>
		msg->str = str;
    4c50:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    4c52:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    4c54:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
    4c56:	2201      	movs	r2, #1
    4c58:	f362 1407 	bfi	r4, r2, #4, #4
    4c5c:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
    4c5e:	4629      	mov	r1, r5
}
    4c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    4c64:	f7fc b9c2 	b.w	fec <msg_finalize>
}
    4c68:	bd70      	pop	{r4, r5, r6, pc}

00004c6a <log_2>:
{
    4c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c6e:	4605      	mov	r5, r0
    4c70:	4688      	mov	r8, r1
    4c72:	4617      	mov	r7, r2
    4c74:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    4c76:	f7ff ffaa 	bl	4bce <z_log_msg_std_alloc>

	if (msg != NULL) {
    4c7a:	b160      	cbz	r0, 4c96 <log_2+0x2c>
		msg->str = str;
    4c7c:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    4c7e:	7a45      	ldrb	r5, [r0, #9]
    4c80:	2302      	movs	r3, #2
    4c82:	f363 1507 	bfi	r5, r3, #4, #4
    4c86:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    4c88:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg_finalize(msg, src_level);
    4c8c:	4631      	mov	r1, r6
}
    4c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    4c92:	f7fc b9ab 	b.w	fec <msg_finalize>
}
    4c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004c9a <log_3>:
{
    4c9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c9e:	4605      	mov	r5, r0
    4ca0:	4689      	mov	r9, r1
    4ca2:	4690      	mov	r8, r2
    4ca4:	461f      	mov	r7, r3
    4ca6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    4caa:	f7ff ff90 	bl	4bce <z_log_msg_std_alloc>

	if (msg != NULL) {
    4cae:	b168      	cbz	r0, 4ccc <log_3+0x32>
		msg->str = str;
    4cb0:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    4cb2:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
    4cb4:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
    4cb6:	2303      	movs	r3, #3
    4cb8:	f363 1507 	bfi	r5, r3, #4, #4
    4cbc:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
    4cbe:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg_finalize(msg, src_level);
    4cc2:	4631      	mov	r1, r6
}
    4cc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    4cc8:	f7fc b990 	b.w	fec <msg_finalize>
}
    4ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004cd0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    4cd0:	7a40      	ldrb	r0, [r0, #9]
}
    4cd2:	0900      	lsrs	r0, r0, #4
    4cd4:	4770      	bx	lr

00004cd6 <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, u32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
    4cd6:	7a43      	ldrb	r3, [r0, #9]
    4cd8:	091b      	lsrs	r3, r3, #4
    4cda:	428b      	cmp	r3, r1
    4cdc:	d916      	bls.n	4d0c <log_msg_arg_get+0x36>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    4cde:	2b03      	cmp	r3, #3
    4ce0:	d803      	bhi.n	4cea <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    4ce2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4ce6:	6948      	ldr	r0, [r1, #20]
    4ce8:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    4cea:	2901      	cmp	r1, #1
    4cec:	d803      	bhi.n	4cf6 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    4cee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4cf2:	6988      	ldr	r0, [r1, #24]
    4cf4:	4770      	bx	lr
	cont = msg->payload.ext.next;
    4cf6:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    4cf8:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    4cfa:	2906      	cmp	r1, #6
    4cfc:	d803      	bhi.n	4d06 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    4cfe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4d02:	6848      	ldr	r0, [r1, #4]
    4d04:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    4d06:	3907      	subs	r1, #7
		cont = cont->next;
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	e7f6      	b.n	4cfa <log_msg_arg_get+0x24>
		return 0;
    4d0c:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
    4d0e:	4770      	bx	lr

00004d10 <log_msg_put>:
{
    4d10:	4603      	mov	r3, r0
    4d12:	1d02      	adds	r2, r0, #4
    4d14:	f3bf 8f5b 	dmb	ish
    4d18:	e852 1f00 	ldrex	r1, [r2]
    4d1c:	3901      	subs	r1, #1
    4d1e:	e842 1c00 	strex	ip, r1, [r2]
    4d22:	f1bc 0f00 	cmp.w	ip, #0
    4d26:	d1f7      	bne.n	4d18 <log_msg_put+0x8>
    4d28:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    4d2c:	685b      	ldr	r3, [r3, #4]
    4d2e:	b90b      	cbnz	r3, 4d34 <log_msg_put+0x24>
		msg_free(msg);
    4d30:	f7fc ba4c 	b.w	11cc <msg_free>
}
    4d34:	4770      	bx	lr

00004d36 <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
    4d36:	6900      	ldr	r0, [r0, #16]
    4d38:	4770      	bx	lr

00004d3a <get_status>:
	data = get_sub_data(dev, type);
    4d3a:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
    4d3c:	b2c9      	uxtb	r1, r1
	if (data->started) {
    4d3e:	220c      	movs	r2, #12
    4d40:	fb02 3101 	mla	r1, r2, r1, r3
    4d44:	7a4b      	ldrb	r3, [r1, #9]
    4d46:	b923      	cbnz	r3, 4d52 <get_status+0x18>
	if (data->ref > 0) {
    4d48:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    4d4a:	fab0 f080 	clz	r0, r0
    4d4e:	0940      	lsrs	r0, r0, #5
    4d50:	4770      	bx	lr
    4d52:	2002      	movs	r0, #2
}
    4d54:	4770      	bx	lr

00004d56 <clkstarted_handle>:
{
    4d56:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    4d58:	6883      	ldr	r3, [r0, #8]
	sub_data->started = true;
    4d5a:	240c      	movs	r4, #12
    4d5c:	fb04 3401 	mla	r4, r4, r1, r3
    4d60:	2301      	movs	r3, #1
{
    4d62:	4605      	mov	r5, r0
	sub_data->started = true;
    4d64:	7263      	strb	r3, [r4, #9]
    4d66:	f04f 0320 	mov.w	r3, #32
    4d6a:	f3ef 8111 	mrs	r1, BASEPRI
    4d6e:	f383 8811 	msr	BASEPRI, r3
    4d72:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    4d76:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4d78:	b12b      	cbz	r3, 4d86 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4d7a:	6860      	ldr	r0, [r4, #4]
    4d7c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4d7e:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4d80:	4283      	cmp	r3, r0
	list->tail = node;
    4d82:	bf08      	it	eq
    4d84:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    4d86:	f381 8811 	msr	BASEPRI, r1
    4d8a:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
    4d8e:	b903      	cbnz	r3, 4d92 <clkstarted_handle+0x3c>
}
    4d90:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    4d92:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    4d96:	4628      	mov	r0, r5
    4d98:	4790      	blx	r2
    4d9a:	e7e4      	b.n	4d66 <clkstarted_handle+0x10>

00004d9c <clock_async_start>:
	const struct nrf_clock_control_config *config =
    4d9c:	6803      	ldr	r3, [r0, #0]
	clk_data = get_sub_data(dev, type);
    4d9e:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    4da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4da6:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
    4da8:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
    4daa:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
    4dac:	b14a      	cbz	r2, 4dc2 <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    4dae:	230c      	movs	r3, #12
    4db0:	4373      	muls	r3, r6
    4db2:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    4db6:	429a      	cmp	r2, r3
    4db8:	d05b      	beq.n	4e72 <clock_async_start+0xd6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4dba:	b113      	cbz	r3, 4dc2 <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4dbc:	681b      	ldr	r3, [r3, #0]
	} while (item);
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d1f9      	bne.n	4db6 <clock_async_start+0x1a>
	__asm__ volatile(
    4dc2:	f04f 0320 	mov.w	r3, #32
    4dc6:	f3ef 8011 	mrs	r0, BASEPRI
    4dca:	f383 8811 	msr	BASEPRI, r3
    4dce:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    4dd2:	210c      	movs	r1, #12
    4dd4:	4371      	muls	r1, r6
    4dd6:	eb0c 0301 	add.w	r3, ip, r1
    4dda:	7a1c      	ldrb	r4, [r3, #8]
    4ddc:	3401      	adds	r4, #1
    4dde:	b2e4      	uxtb	r4, r4
    4de0:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    4de2:	f380 8811 	msr	BASEPRI, r0
    4de6:	f3bf 8f6f 	isb	sy
	if (data) {
    4dea:	b332      	cbz	r2, 4e3a <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
    4dec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4df0:	f04f 0e03 	mov.w	lr, #3
    4df4:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
    4df8:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    4dfa:	b9a0      	cbnz	r0, 4e26 <clock_async_start+0x8a>
	__asm__ volatile(
    4dfc:	f04f 0e20 	mov.w	lr, #32
    4e00:	f3ef 8811 	mrs	r8, BASEPRI
    4e04:	f38e 8811 	msr	BASEPRI, lr
    4e08:	f3bf 8f6f 	isb	sy
	parent->next = child;
    4e0c:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    4e0e:	f8d3 e004 	ldr.w	lr, [r3, #4]
    4e12:	f1be 0f00 	cmp.w	lr, #0
    4e16:	d11f      	bne.n	4e58 <clock_async_start+0xbc>
	list->tail = node;
    4e18:	605a      	str	r2, [r3, #4]
	list->head = node;
    4e1a:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    4e1e:	f388 8811 	msr	BASEPRI, r8
    4e22:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    4e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e2a:	2103      	movs	r1, #3
    4e2c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
    4e30:	b118      	cbz	r0, 4e3a <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
    4e32:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    4e36:	4628      	mov	r0, r5
    4e38:	4798      	blx	r3
	if (ref == 1) {
    4e3a:	2c01      	cmp	r4, #1
    4e3c:	d10a      	bne.n	4e54 <clock_async_start+0xb8>
		do_start =  (config->start_handler) ?
    4e3e:	ea4f 1806 	mov.w	r8, r6, lsl #4
    4e42:	f857 3008 	ldr.w	r3, [r7, r8]
				config->start_handler(dev) : true;
    4e46:	b95b      	cbnz	r3, 4e60 <clock_async_start+0xc4>
			nrf_clock_task_trigger(NRF_CLOCK,
    4e48:	4447      	add	r7, r8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e4a:	2201      	movs	r2, #1
    4e4c:	7abb      	ldrb	r3, [r7, #10]
    4e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4e52:	601a      	str	r2, [r3, #0]
	return 0;
    4e54:	2000      	movs	r0, #0
    4e56:	e00e      	b.n	4e76 <clock_async_start+0xda>
	parent->next = child;
    4e58:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    4e5c:	605a      	str	r2, [r3, #4]
    4e5e:	e7de      	b.n	4e1e <clock_async_start+0x82>
				config->start_handler(dev) : true;
    4e60:	4628      	mov	r0, r5
    4e62:	4798      	blx	r3
    4e64:	2800      	cmp	r0, #0
    4e66:	d1ef      	bne.n	4e48 <clock_async_start+0xac>
			clkstarted_handle(dev, type);
    4e68:	4631      	mov	r1, r6
    4e6a:	4628      	mov	r0, r5
    4e6c:	f7ff ff73 	bl	4d56 <clkstarted_handle>
    4e70:	e7f0      	b.n	4e54 <clock_async_start+0xb8>
		return -EBUSY;
    4e72:	f06f 000f 	mvn.w	r0, #15
}
    4e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004e7a <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    4e7a:	2200      	movs	r2, #0
    4e7c:	f7ff bf8e 	b.w	4d9c <clock_async_start>

00004e80 <clk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4e80:	2200      	movs	r2, #0
{
    4e82:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4e84:	2101      	movs	r1, #1
{
    4e86:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4e88:	4610      	mov	r0, r2
    4e8a:	f7fc fb8b 	bl	15a4 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    4e8e:	2000      	movs	r0, #0
    4e90:	f7fc fb78 	bl	1584 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e98:	2201      	movs	r2, #1
    4e9a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    4e9e:	2203      	movs	r2, #3
    4ea0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    4ea4:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    4ea6:	2000      	movs	r0, #0
	list->tail = NULL;
    4ea8:	e9c3 0000 	strd	r0, r0, [r3]
    4eac:	68a3      	ldr	r3, [r4, #8]
    4eae:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    4eb2:	bd10      	pop	{r4, pc}

00004eb4 <clock_stop>:
	const struct nrf_clock_control_config *config =
    4eb4:	6802      	ldr	r2, [r0, #0]
{
    4eb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
    4eba:	f8d2 8008 	ldr.w	r8, [r2, #8]
	data = get_sub_data(dev, type);
    4ebe:	6887      	ldr	r7, [r0, #8]
    4ec0:	b2cc      	uxtb	r4, r1
	__asm__ volatile(
    4ec2:	f04f 0320 	mov.w	r3, #32
    4ec6:	f3ef 8611 	mrs	r6, BASEPRI
    4eca:	f383 8811 	msr	BASEPRI, r3
    4ece:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    4ed2:	220c      	movs	r2, #12
    4ed4:	4362      	muls	r2, r4
    4ed6:	18b9      	adds	r1, r7, r2
    4ed8:	7a0b      	ldrb	r3, [r1, #8]
    4eda:	b343      	cbz	r3, 4f2e <clock_stop+0x7a>
	data->ref--;
    4edc:	3b01      	subs	r3, #1
    4ede:	b2db      	uxtb	r3, r3
    4ee0:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
    4ee2:	bb3b      	cbnz	r3, 4f34 <clock_stop+0x80>
		do_stop =  (config->stop_handler) ?
    4ee4:	0125      	lsls	r5, r4, #4
	list->head = NULL;
    4ee6:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
    4ee8:	604b      	str	r3, [r1, #4]
    4eea:	eb08 0305 	add.w	r3, r8, r5
    4eee:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
    4ef0:	b9cb      	cbnz	r3, 4f26 <clock_stop+0x72>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    4ef2:	4445      	add	r5, r8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ef4:	2201      	movs	r2, #1
    4ef6:	7aeb      	ldrb	r3, [r5, #11]
    4ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4efc:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4efe:	892b      	ldrh	r3, [r5, #8]
    4f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4f04:	2200      	movs	r2, #0
    4f06:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4f0c:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    4f0e:	210c      	movs	r1, #12
    4f10:	fb01 7404 	mla	r4, r1, r4, r7
    4f14:	2000      	movs	r0, #0
    4f16:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    4f18:	f386 8811 	msr	BASEPRI, r6
    4f1c:	f3bf 8f6f 	isb	sy
}
    4f20:	b002      	add	sp, #8
    4f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
    4f26:	4798      	blx	r3
    4f28:	2800      	cmp	r0, #0
    4f2a:	d1e2      	bne.n	4ef2 <clock_stop+0x3e>
    4f2c:	e7ef      	b.n	4f0e <clock_stop+0x5a>
		err = -EALREADY;
    4f2e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4f32:	e7f1      	b.n	4f18 <clock_stop+0x64>
	int err = 0;
    4f34:	2000      	movs	r0, #0
    4f36:	e7ef      	b.n	4f18 <clock_stop+0x64>

00004f38 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4f38:	4770      	bx	lr

00004f3a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4f3a:	4770      	bx	lr

00004f3c <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    4f3c:	f7fc bb96 	b.w	166c <z_arm_bus_fault>

00004f40 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4f40:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    4f42:	6800      	ldr	r0, [r0, #0]
    4f44:	f7fc bb9c 	b.w	1680 <z_arm_fatal_error>

00004f48 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4f48:	b508      	push	{r3, lr}
	handler();
    4f4a:	f7fc fbeb 	bl	1724 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    4f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    4f52:	f7fc bab5 	b.w	14c0 <z_arm_exc_exit>

00004f56 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4f56:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    4f58:	2100      	movs	r1, #0
    4f5a:	a801      	add	r0, sp, #4
    4f5c:	f7fc ffc4 	bl	1ee8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    4f60:	b003      	add	sp, #12
    4f62:	f85d fb04 	ldr.w	pc, [sp], #4

00004f66 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    4f66:	b570      	push	{r4, r5, r6, lr}
    4f68:	3901      	subs	r1, #1
    4f6a:	4605      	mov	r5, r0
    4f6c:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    4f6e:	b142      	cbz	r2, 4f82 <strncpy+0x1c>
    4f70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4f74:	1e56      	subs	r6, r2, #1
    4f76:	b92b      	cbnz	r3, 4f84 <strncpy+0x1e>
    4f78:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    4f7a:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    4f7e:	42a2      	cmp	r2, r4
    4f80:	d1fb      	bne.n	4f7a <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    4f82:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    4f84:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    4f88:	4632      	mov	r2, r6
    4f8a:	e7ef      	b.n	4f6c <strncpy+0x6>

00004f8c <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    4f8c:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    4f8e:	7802      	ldrb	r2, [r0, #0]
    4f90:	428a      	cmp	r2, r1
    4f92:	4603      	mov	r3, r0
    4f94:	f100 0001 	add.w	r0, r0, #1
    4f98:	d004      	beq.n	4fa4 <strchr+0x18>
    4f9a:	2a00      	cmp	r2, #0
    4f9c:	d1f7      	bne.n	4f8e <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    4f9e:	2900      	cmp	r1, #0
    4fa0:	bf18      	it	ne
    4fa2:	2300      	movne	r3, #0
}
    4fa4:	4618      	mov	r0, r3
    4fa6:	4770      	bx	lr

00004fa8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    4fa8:	3801      	subs	r0, #1
    4faa:	3901      	subs	r1, #1
    4fac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    4fb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4fb4:	4293      	cmp	r3, r2
    4fb6:	d101      	bne.n	4fbc <strcmp+0x14>
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d1f7      	bne.n	4fac <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4fbc:	1a98      	subs	r0, r3, r2
    4fbe:	4770      	bx	lr

00004fc0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4fc0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4fc2:	ea81 0400 	eor.w	r4, r1, r0
    4fc6:	07a5      	lsls	r5, r4, #30
    4fc8:	4603      	mov	r3, r0
    4fca:	d00b      	beq.n	4fe4 <memcpy+0x24>
    4fcc:	3b01      	subs	r3, #1
    4fce:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4fd0:	4291      	cmp	r1, r2
    4fd2:	d11a      	bne.n	500a <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4fd6:	2a00      	cmp	r2, #0
    4fd8:	d0fc      	beq.n	4fd4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4fda:	f811 4b01 	ldrb.w	r4, [r1], #1
    4fde:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    4fe2:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    4fe4:	079c      	lsls	r4, r3, #30
    4fe6:	d1f6      	bne.n	4fd6 <memcpy+0x16>
    4fe8:	0895      	lsrs	r5, r2, #2
    4fea:	00ac      	lsls	r4, r5, #2
    4fec:	1f1e      	subs	r6, r3, #4
    4fee:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4ff0:	42b9      	cmp	r1, r7
    4ff2:	d105      	bne.n	5000 <memcpy+0x40>
    4ff4:	f06f 0603 	mvn.w	r6, #3
    4ff8:	fb06 2205 	mla	r2, r6, r5, r2
    4ffc:	4423      	add	r3, r4
    4ffe:	e7e5      	b.n	4fcc <memcpy+0xc>
			*(d_word++) = *(s_word++);
    5000:	f851 cb04 	ldr.w	ip, [r1], #4
    5004:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    5008:	e7f2      	b.n	4ff0 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    500a:	f811 4b01 	ldrb.w	r4, [r1], #1
    500e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5012:	e7dd      	b.n	4fd0 <memcpy+0x10>

00005014 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    5014:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5016:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5018:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    501a:	079c      	lsls	r4, r3, #30
    501c:	d110      	bne.n	5040 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    501e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    5022:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5026:	0894      	lsrs	r4, r2, #2
    5028:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    502c:	42b3      	cmp	r3, r6
    502e:	d10d      	bne.n	504c <memset+0x38>
    5030:	f06f 0503 	mvn.w	r5, #3
    5034:	fb05 2404 	mla	r4, r5, r4, r2
    5038:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    503a:	42a3      	cmp	r3, r4
    503c:	d109      	bne.n	5052 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    503e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    5040:	2a00      	cmp	r2, #0
    5042:	d0fc      	beq.n	503e <memset+0x2a>
		*(d_byte++) = c_byte;
    5044:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5048:	3a01      	subs	r2, #1
    504a:	e7e6      	b.n	501a <memset+0x6>
		*(d_word++) = c_word;
    504c:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    5050:	e7ec      	b.n	502c <memset+0x18>
		*(d_byte++) = c_byte;
    5052:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5056:	e7f0      	b.n	503a <memset+0x26>

00005058 <_to_x>:
{
    5058:	b5f0      	push	{r4, r5, r6, r7, lr}
    505a:	4603      	mov	r3, r0
		unsigned int d = n % base;
    505c:	fbb1 f7f2 	udiv	r7, r1, r2
    5060:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    5064:	2d09      	cmp	r5, #9
    5066:	bf8c      	ite	hi
    5068:	2627      	movhi	r6, #39	; 0x27
    506a:	2600      	movls	r6, #0
    506c:	461c      	mov	r4, r3
    506e:	3530      	adds	r5, #48	; 0x30
    5070:	4435      	add	r5, r6
	} while (n);
    5072:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    5074:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    5078:	d206      	bcs.n	5088 <_to_x+0x30>
	*buf = 0;
    507a:	2200      	movs	r2, #0
    507c:	7022      	strb	r2, [r4, #0]
	len = buf - start;
    507e:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
    5080:	4283      	cmp	r3, r0
    5082:	d804      	bhi.n	508e <_to_x+0x36>
}
    5084:	4620      	mov	r0, r4
    5086:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
    5088:	4639      	mov	r1, r7
    508a:	4623      	mov	r3, r4
    508c:	e7e6      	b.n	505c <_to_x+0x4>
		char tmp = *buf;
    508e:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
    5090:	7801      	ldrb	r1, [r0, #0]
    5092:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
    5096:	f800 2b01 	strb.w	r2, [r0], #1
    509a:	e7f1      	b.n	5080 <_to_x+0x28>

0000509c <_rlrshift>:
{
    509c:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    509e:	e9d0 6500 	ldrd	r6, r5, [r0]
    50a2:	0872      	lsrs	r2, r6, #1
    50a4:	f006 0301 	and.w	r3, r6, #1
    50a8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    50ac:	189b      	adds	r3, r3, r2
    50ae:	f04f 0100 	mov.w	r1, #0
    50b2:	ea4f 0455 	mov.w	r4, r5, lsr #1
    50b6:	eb44 0101 	adc.w	r1, r4, r1
    50ba:	e9c0 3100 	strd	r3, r1, [r0]
}
    50be:	bd70      	pop	{r4, r5, r6, pc}

000050c0 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    50c0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    50c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
    50c8:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    50ca:	f04f 0705 	mov.w	r7, #5
    50ce:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
    50d2:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    50d6:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
    50da:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
    50de:	fb07 f10e 	mul.w	r1, r7, lr
    50e2:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    50e6:	08f2      	lsrs	r2, r6, #3
    50e8:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    50ec:	fbb2 f1f7 	udiv	r1, r2, r7
    50f0:	00ca      	lsls	r2, r1, #3
		quot += q;
    50f2:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    50f6:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    50fa:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
    50fe:	fba2 2307 	umull	r2, r3, r2, r7
    5102:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    5104:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    5108:	eb18 0403 	adds.w	r4, r8, r3
    510c:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
    5110:	e9c0 4500 	strd	r4, r5, [r0]
}
    5114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00005118 <_get_digit>:
	if (*digit_count > 0) {
    5118:	680b      	ldr	r3, [r1, #0]
    511a:	2b00      	cmp	r3, #0
{
    511c:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    511e:	dd10      	ble.n	5142 <_get_digit+0x2a>
		*digit_count -= 1;
    5120:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
    5122:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
    5124:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    5126:	6844      	ldr	r4, [r0, #4]
    5128:	210a      	movs	r1, #10
    512a:	fba2 5601 	umull	r5, r6, r2, r1
    512e:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    5132:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    5136:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    513a:	0f31      	lsrs	r1, r6, #28
    513c:	3130      	adds	r1, #48	; 0x30
}
    513e:	4608      	mov	r0, r1
    5140:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    5142:	2130      	movs	r1, #48	; 0x30
    5144:	e7fb      	b.n	513e <_get_digit+0x26>

00005146 <_stdout_hook_default>:
}
    5146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    514a:	4770      	bx	lr

0000514c <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    514c:	f7fd bb9a 	b.w	2884 <z_impl_zephyr_fputc>

00005150 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    5150:	f7fe b9b8 	b.w	34c4 <SystemInit>

00005154 <gpio_nrfx_write>:
{
    5154:	b510      	push	{r4, lr}
	return port->config->config_info;
    5156:	6804      	ldr	r4, [r0, #0]
    5158:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    515a:	68a4      	ldr	r4, [r4, #8]
    515c:	69c0      	ldr	r0, [r0, #28]
    515e:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5160:	2901      	cmp	r1, #1
    5162:	d104      	bne.n	516e <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    5164:	4058      	eors	r0, r3
    p_reg->OUT = value;
    5166:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    516a:	2000      	movs	r0, #0
    516c:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    516e:	3300      	adds	r3, #0
    5170:	fa20 f002 	lsr.w	r0, r0, r2
    5174:	f04f 0101 	mov.w	r1, #1
    5178:	bf18      	it	ne
    517a:	2301      	movne	r3, #1
    517c:	f000 0001 	and.w	r0, r0, #1
    5180:	4091      	lsls	r1, r2
    5182:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    5184:	bf14      	ite	ne
    5186:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    518a:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    518e:	e7ec      	b.n	516a <gpio_nrfx_write+0x16>

00005190 <gpio_nrfx_read>:
{
    5190:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    5192:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5194:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5196:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5198:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    519a:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    519c:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    51a0:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    51a4:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    51a8:	4060      	eors	r0, r4
    51aa:	406c      	eors	r4, r5
    51ac:	4034      	ands	r4, r6
    51ae:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    51b0:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    51b2:	bf1c      	itt	ne
    51b4:	40d0      	lsrne	r0, r2
    51b6:	f000 0001 	andne.w	r0, r0, #1
    51ba:	6018      	str	r0, [r3, #0]
}
    51bc:	2000      	movs	r0, #0
    51be:	bd70      	pop	{r4, r5, r6, pc}

000051c0 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    51c0:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    51c2:	6818      	ldr	r0, [r3, #0]
{
    51c4:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    51c6:	b158      	cbz	r0, 51e0 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    51c8:	2400      	movs	r4, #0
    51ca:	4281      	cmp	r1, r0
    51cc:	d113      	bne.n	51f6 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    51ce:	6808      	ldr	r0, [r1, #0]
    51d0:	b95c      	cbnz	r4, 51ea <gpio_nrfx_manage_callback+0x2a>
    51d2:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    51d4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    51d6:	42a1      	cmp	r1, r4
    51d8:	d100      	bne.n	51dc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    51da:	6058      	str	r0, [r3, #4]
	parent->next = child;
    51dc:	2000      	movs	r0, #0
    51de:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    51e0:	b972      	cbnz	r2, 5200 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    51e2:	2000      	movs	r0, #0
}
    51e4:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    51e6:	4628      	mov	r0, r5
    51e8:	e7ef      	b.n	51ca <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    51ea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    51ec:	6858      	ldr	r0, [r3, #4]
    51ee:	4281      	cmp	r1, r0
	list->tail = node;
    51f0:	bf08      	it	eq
    51f2:	605c      	streq	r4, [r3, #4]
    51f4:	e7f2      	b.n	51dc <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    51f6:	6805      	ldr	r5, [r0, #0]
	return node->next;
    51f8:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    51fa:	2d00      	cmp	r5, #0
    51fc:	d1f3      	bne.n	51e6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    51fe:	b13a      	cbz	r2, 5210 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    5200:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    5202:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    5204:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    5206:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    5208:	2800      	cmp	r0, #0
    520a:	d1ea      	bne.n	51e2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    520c:	6059      	str	r1, [r3, #4]
    520e:	e7e9      	b.n	51e4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5210:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5214:	e7e6      	b.n	51e4 <gpio_nrfx_manage_callback+0x24>

00005216 <gpio_nrfx_config>:
{
    5216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    521a:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    521c:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    521e:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    5222:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    5226:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    5228:	d041      	beq.n	52ae <gpio_nrfx_config+0x98>
    522a:	dc09      	bgt.n	5240 <gpio_nrfx_config+0x2a>
    522c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    5230:	d03f      	beq.n	52b2 <gpio_nrfx_config+0x9c>
    5232:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    5236:	d03e      	beq.n	52b6 <gpio_nrfx_config+0xa0>
    5238:	b190      	cbz	r0, 5260 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    523a:	f06f 0015 	mvn.w	r0, #21
    523e:	e033      	b.n	52a8 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    5240:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    5244:	d039      	beq.n	52ba <gpio_nrfx_config+0xa4>
    5246:	dc04      	bgt.n	5252 <gpio_nrfx_config+0x3c>
    5248:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    524c:	d1f5      	bne.n	523a <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    524e:	2003      	movs	r0, #3
    5250:	e006      	b.n	5260 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    5252:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    5256:	d032      	beq.n	52be <gpio_nrfx_config+0xa8>
    5258:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    525c:	d1ed      	bne.n	523a <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    525e:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    5260:	f406 7740 	and.w	r7, r6, #768	; 0x300
    5264:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    5268:	d02b      	beq.n	52c2 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    526a:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    526e:	4263      	negs	r3, r4
    5270:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    5272:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    5276:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    527a:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    527c:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    5280:	bf18      	it	ne
    5282:	b2d4      	uxtbne	r4, r2
    5284:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    5288:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    528c:	bf12      	itee	ne
    528e:	46a1      	movne	r9, r4
		to_pin   = 31U;
    5290:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    5294:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    5296:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    529a:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    529e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    52a2:	45a1      	cmp	r9, r4
    52a4:	d20f      	bcs.n	52c6 <gpio_nrfx_config+0xb0>
	return 0;
    52a6:	2000      	movs	r0, #0
}
    52a8:	b003      	add	sp, #12
    52aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    52ae:	2002      	movs	r0, #2
    52b0:	e7d6      	b.n	5260 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    52b2:	2001      	movs	r0, #1
    52b4:	e7d4      	b.n	5260 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    52b6:	2004      	movs	r0, #4
    52b8:	e7d2      	b.n	5260 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    52ba:	2005      	movs	r0, #5
    52bc:	e7d0      	b.n	5260 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    52be:	2006      	movs	r0, #6
    52c0:	e7ce      	b.n	5260 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    52c2:	2303      	movs	r3, #3
    52c4:	e7d5      	b.n	5272 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    52c6:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    52ca:	6892      	ldr	r2, [r2, #8]
    52cc:	7911      	ldrb	r1, [r2, #4]
    52ce:	f004 021f 	and.w	r2, r4, #31
    52d2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    52d6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    52da:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    52de:	fa0b f204 	lsl.w	r2, fp, r4
    52e2:	68a9      	ldr	r1, [r5, #8]
    52e4:	2b00      	cmp	r3, #0
    52e6:	d025      	beq.n	5334 <gpio_nrfx_config+0x11e>
    52e8:	4311      	orrs	r1, r2
    52ea:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    52ec:	6969      	ldr	r1, [r5, #20]
    52ee:	9301      	str	r3, [sp, #4]
    52f0:	06b0      	lsls	r0, r6, #26
    52f2:	bf4c      	ite	mi
    52f4:	4311      	orrmi	r1, r2
    52f6:	4391      	bicpl	r1, r2
    52f8:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    52fa:	69a9      	ldr	r1, [r5, #24]
    52fc:	0670      	lsls	r0, r6, #25
    52fe:	bf4c      	ite	mi
    5300:	4311      	orrmi	r1, r2
    5302:	4391      	bicpl	r1, r2
    5304:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    5306:	6929      	ldr	r1, [r5, #16]
    5308:	0770      	lsls	r0, r6, #29
    530a:	bf4c      	ite	mi
    530c:	4311      	orrmi	r1, r2
    530e:	4391      	bicpl	r1, r2
    5310:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    5312:	69e9      	ldr	r1, [r5, #28]
    5314:	0630      	lsls	r0, r6, #24
    5316:	bf4c      	ite	mi
    5318:	430a      	orrmi	r2, r1
    531a:	ea21 0202 	bicpl.w	r2, r1, r2
    531e:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    5320:	4621      	mov	r1, r4
    5322:	4640      	mov	r0, r8
    5324:	f7fd fb04 	bl	2930 <gpiote_pin_int_cfg>
		if (res != 0) {
    5328:	2800      	cmp	r0, #0
    532a:	d1bd      	bne.n	52a8 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    532c:	3401      	adds	r4, #1
    532e:	b2e4      	uxtb	r4, r4
    5330:	9b01      	ldr	r3, [sp, #4]
    5332:	e7b6      	b.n	52a2 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    5334:	ea21 0102 	bic.w	r1, r1, r2
    5338:	e7d7      	b.n	52ea <gpio_nrfx_config+0xd4>

0000533a <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    533a:	2901      	cmp	r1, #1
{
    533c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    5340:	bf18      	it	ne
    5342:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    5344:	6887      	ldr	r7, [r0, #8]
{
    5346:	4606      	mov	r6, r0
		to_pin   = pin;
    5348:	bf12      	itee	ne
    534a:	4625      	movne	r5, r4
		to_pin   = 31U;
    534c:	251f      	moveq	r5, #31
		from_pin = 0U;
    534e:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    5350:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5354:	42ac      	cmp	r4, r5
    5356:	d902      	bls.n	535e <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    5358:	2000      	movs	r0, #0
}
    535a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    535e:	68fb      	ldr	r3, [r7, #12]
    5360:	fa08 f204 	lsl.w	r2, r8, r4
    5364:	ea23 0302 	bic.w	r3, r3, r2
    5368:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    536a:	4621      	mov	r1, r4
    536c:	4630      	mov	r0, r6
    536e:	f7fd fadf 	bl	2930 <gpiote_pin_int_cfg>
		if (res != 0) {
    5372:	2800      	cmp	r0, #0
    5374:	d1f1      	bne.n	535a <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5376:	3401      	adds	r4, #1
    5378:	b2e4      	uxtb	r4, r4
    537a:	e7eb      	b.n	5354 <gpio_nrfx_pin_disable_callback+0x1a>

0000537c <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    537c:	2901      	cmp	r1, #1
{
    537e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    5382:	bf18      	it	ne
    5384:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    5386:	6887      	ldr	r7, [r0, #8]
{
    5388:	4606      	mov	r6, r0
		to_pin   = pin;
    538a:	bf12      	itee	ne
    538c:	4625      	movne	r5, r4
		to_pin   = 31U;
    538e:	251f      	moveq	r5, #31
		from_pin = 0U;
    5390:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    5392:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5396:	42ac      	cmp	r4, r5
    5398:	d902      	bls.n	53a0 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    539a:	2000      	movs	r0, #0
}
    539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    53a0:	68fb      	ldr	r3, [r7, #12]
    53a2:	fa08 f204 	lsl.w	r2, r8, r4
    53a6:	4313      	orrs	r3, r2
    53a8:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    53aa:	4621      	mov	r1, r4
    53ac:	4630      	mov	r0, r6
    53ae:	f7fd fabf 	bl	2930 <gpiote_pin_int_cfg>
		if (res != 0) {
    53b2:	2800      	cmp	r0, #0
    53b4:	d1f2      	bne.n	539c <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    53b6:	3401      	adds	r4, #1
    53b8:	b2e4      	uxtb	r4, r4
    53ba:	e7ec      	b.n	5396 <gpio_nrfx_pin_enable_callback+0x1a>

000053bc <gpio_pin_write>:
{
    53bc:	b410      	push	{r4}
    53be:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
    53c0:	6842      	ldr	r2, [r0, #4]
    53c2:	6854      	ldr	r4, [r2, #4]
    53c4:	460a      	mov	r2, r1
    53c6:	46a4      	mov	ip, r4
    53c8:	2100      	movs	r1, #0
}
    53ca:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
    53cc:	4760      	bx	ip

000053ce <_spi_context_cs_control.isra.7>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
    53ce:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    53d0:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
    53d2:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    53d4:	b324      	cbz	r4, 5420 <_spi_context_cs_control.isra.7+0x52>
    53d6:	68a3      	ldr	r3, [r4, #8]
    53d8:	b313      	cbz	r3, 5420 <_spi_context_cs_control.isra.7+0x52>
    53da:	6818      	ldr	r0, [r3, #0]
    53dc:	b300      	cbz	r0, 5420 <_spi_context_cs_control.isra.7+0x52>
		if (on) {
    53de:	b161      	cbz	r1, 53fa <_spi_context_cs_control.isra.7+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    53e0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
    53e4:	6859      	ldr	r1, [r3, #4]
    53e6:	0fd2      	lsrs	r2, r2, #31
    53e8:	f7ff ffe8 	bl	53bc <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
    53ec:	682b      	ldr	r3, [r5, #0]
    53ee:	689b      	ldr	r3, [r3, #8]
    53f0:	6898      	ldr	r0, [r3, #8]
}
    53f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    53f6:	f000 ba04 	b.w	5802 <z_impl_k_busy_wait>
			if (!force_off &&
    53fa:	b912      	cbnz	r2, 5402 <_spi_context_cs_control.isra.7+0x34>
    53fc:	88a2      	ldrh	r2, [r4, #4]
    53fe:	0492      	lsls	r2, r2, #18
    5400:	d40e      	bmi.n	5420 <_spi_context_cs_control.isra.7+0x52>
			k_busy_wait(ctx->config->cs->delay);
    5402:	6898      	ldr	r0, [r3, #8]
    5404:	f000 f9fd 	bl	5802 <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
    5408:	682a      	ldr	r2, [r5, #0]
    540a:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    540c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
    5410:	43d2      	mvns	r2, r2
    5412:	e9d3 0100 	ldrd	r0, r1, [r3]
    5416:	0fd2      	lsrs	r2, r2, #31
}
    5418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
    541c:	f7ff bfce 	b.w	53bc <gpio_pin_write>
}
    5420:	bd38      	pop	{r3, r4, r5, pc}

00005422 <spi_context_unlock_unconditionally>:
{
    5422:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    5424:	2201      	movs	r2, #1
    5426:	2100      	movs	r1, #0
{
    5428:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    542a:	f7ff ffd0 	bl	53ce <_spi_context_cs_control.isra.7>
	if (!k_sem_count_get(&ctx->lock)) {
    542e:	68e3      	ldr	r3, [r4, #12]
    5430:	b923      	cbnz	r3, 543c <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
    5432:	1d20      	adds	r0, r4, #4
}
    5434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5438:	f7ff b91a 	b.w	4670 <z_impl_k_sem_give>
    543c:	bd10      	pop	{r4, pc}

0000543e <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    543e:	6880      	ldr	r0, [r0, #8]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    5440:	6803      	ldr	r3, [r0, #0]
    5442:	428b      	cmp	r3, r1
{
    5444:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    5446:	d106      	bne.n	5456 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    5448:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
    544c:	b934      	cbnz	r4, 545c <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    544e:	f7ff ffe8 	bl	5422 <spi_context_unlock_unconditionally>
	return 0;
    5452:	4620      	mov	r0, r4
}
    5454:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5456:	f06f 0015 	mvn.w	r0, #21
    545a:	e7fb      	b.n	5454 <spi_nrfx_release+0x16>
		return -EBUSY;
    545c:	f06f 000f 	mvn.w	r0, #15
    5460:	e7f8      	b.n	5454 <spi_nrfx_release+0x16>

00005462 <cst816s_channel_get>:
{
	struct cst816s_data *drv_data = dev->driver_data;

	/*
	 */
	if (chan == SENSOR_CHAN_ACCEL_XYZ) {
    5462:	2903      	cmp	r1, #3
	} else {
		return -ENOTSUP;
	}

	return 0;
}
    5464:	bf14      	ite	ne
    5466:	f06f 0022 	mvnne.w	r0, #34	; 0x22
    546a:	2000      	moveq	r0, #0
    546c:	4770      	bx	lr

0000546e <cst816s_init>:
}



int cst816s_init(struct device *dev)
{
    546e:	b508      	push	{r3, lr}

	/* read device ID */
//i2c_reg_read_byte(drv_data->i2c, BMA421_I2C_ADDRESS,0x40, &id); 

#ifdef CONFIG_CST816S_TRIGGER
if (cst816s_init_interrupt(dev) < 0) {
    5470:	f7fd ff9c 	bl	33ac <cst816s_init_interrupt>
    5474:	2800      	cmp	r0, #0
	return -EIO;
}
#endif

return 0;
}
    5476:	bfb4      	ite	lt
    5478:	f06f 0004 	mvnlt.w	r0, #4
    547c:	2000      	movge	r0, #0
    547e:	bd08      	pop	{r3, pc}

00005480 <cst816s_attr_set>:
	if (chan != SENSOR_CHAN_ACCEL_XYZ) {
    5480:	2903      	cmp	r1, #3
}
    5482:	bf14      	ite	ne
    5484:	f06f 0022 	mvnne.w	r0, #34	; 0x22
    5488:	2000      	moveq	r0, #0
    548a:	4770      	bx	lr

0000548c <cst816s_trigger_set>:
	struct cst816s_data *drv_data = dev->driver_data;
    548c:	6883      	ldr	r3, [r0, #8]
	if (trig->type == SENSOR_TRIG_DATA_READY) {
    548e:	8808      	ldrh	r0, [r1, #0]
    5490:	2801      	cmp	r0, #1
    5492:	d105      	bne.n	54a0 <cst816s_trigger_set+0x14>
		drv_data->data_ready_handler = handler;
    5494:	61da      	str	r2, [r3, #28]
		if (handler == NULL) {
    5496:	b10a      	cbz	r2, 549c <cst816s_trigger_set+0x10>
		drv_data->data_ready_trigger = *trig;
    5498:	6808      	ldr	r0, [r1, #0]
    549a:	6198      	str	r0, [r3, #24]
	return 0;
    549c:	2000      	movs	r0, #0
    549e:	4770      	bx	lr
		return -ENOTSUP;
    54a0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    54a4:	4770      	bx	lr

000054a6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    54a6:	4700      	bx	r0

000054a8 <transfer_byte>:
{
    54a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    54aa:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    54ae:	698a      	ldr	r2, [r1, #24]
    54b0:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    54b2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    54b6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    54b8:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    54ba:	bf3e      	ittt	cc
    54bc:	694a      	ldrcc	r2, [r1, #20]
    54be:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    54c2:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    54c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    if (p_cb->abort)
    54c6:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    ++p_cb->bytes_transferred;
    54ca:	1c53      	adds	r3, r2, #1
    54cc:	624b      	str	r3, [r1, #36]	; 0x24
    size_t bytes_used = p_cb->bytes_transferred + 1;
    54ce:	3202      	adds	r2, #2
    if (p_cb->abort)
    54d0:	b13c      	cbz	r4, 54e2 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    54d2:	690c      	ldr	r4, [r1, #16]
    54d4:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    54d6:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    54d8:	bf38      	it	cc
    54da:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    54dc:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    54de:	bf88      	it	hi
    54e0:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    54e2:	690d      	ldr	r5, [r1, #16]
    54e4:	4295      	cmp	r5, r2
    54e6:	d905      	bls.n	54f4 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    54e8:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
    54ea:	5c9b      	ldrb	r3, [r3, r2]
    54ec:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    54f0:	2001      	movs	r0, #1
    54f2:	e00b      	b.n	550c <transfer_byte+0x64>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    54f4:	698c      	ldr	r4, [r1, #24]
    54f6:	4294      	cmp	r4, r2
    54f8:	d902      	bls.n	5500 <transfer_byte+0x58>
    54fa:	f891 3020 	ldrb.w	r3, [r1, #32]
    54fe:	e7f5      	b.n	54ec <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    5500:	42ab      	cmp	r3, r5
    5502:	d3f5      	bcc.n	54f0 <transfer_byte+0x48>
    5504:	42a3      	cmp	r3, r4
    5506:	bf2c      	ite	cs
    5508:	2000      	movcs	r0, #0
    550a:	2001      	movcc	r0, #1
}
    550c:	b003      	add	sp, #12
    550e:	bd30      	pop	{r4, r5, pc}

00005510 <nrf_twi_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5510:	2300      	movs	r3, #0
    5512:	5043      	str	r3, [r0, r1]
{
    5514:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    5516:	5843      	ldr	r3, [r0, r1]
    5518:	9301      	str	r3, [sp, #4]
    (void)dummy;
    551a:	9b01      	ldr	r3, [sp, #4]
}
    551c:	b002      	add	sp, #8
    551e:	4770      	bx	lr

00005520 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5520:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5522:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    5524:	4293      	cmp	r3, r2
    5526:	d208      	bcs.n	553a <twi_send_byte+0x1a>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    5528:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    552a:	5cd2      	ldrb	r2, [r2, r3]
    552c:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
        ++(p_cb->bytes_transferred);
    5530:	3301      	adds	r3, #1
    5532:	634b      	str	r3, [r1, #52]	; 0x34
    return true;
    5534:	2301      	movs	r3, #1
}
    5536:	4618      	mov	r0, r3
    5538:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
    553a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    553e:	b11b      	cbz	r3, 5548 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5540:	2301      	movs	r3, #1
    5542:	61c3      	str	r3, [r0, #28]
            return false;
    5544:	2300      	movs	r3, #0
    5546:	e7f6      	b.n	5536 <twi_send_byte+0x16>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    5548:	6a0a      	ldr	r2, [r1, #32]
    554a:	f012 0f40 	tst.w	r2, #64	; 0x40
    554e:	f04f 0201 	mov.w	r2, #1
    5552:	bf15      	itete	ne
    5554:	61c2      	strne	r2, [r0, #28]
    5556:	6142      	streq	r2, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    5558:	f881 202d 	strbne.w	r2, [r1, #45]	; 0x2d
    return true;
    555c:	4613      	moveq	r3, r2
    555e:	e7ea      	b.n	5536 <twi_send_byte+0x16>

00005560 <twi_transfer>:
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
    5560:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
{
    5564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5566:	4604      	mov	r4, r0
    5568:	460d      	mov	r5, r1
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
    556a:	2a00      	cmp	r2, #0
    556c:	d160      	bne.n	5630 <twi_transfer+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    556e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    5572:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    5574:	6a8f      	ldr	r7, [r1, #40]	; 0x28
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5576:	b1b3      	cbz	r3, 55a6 <twi_transfer+0x46>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    5578:	f44f 7192 	mov.w	r1, #292	; 0x124
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    557c:	f7ff ffc8 	bl	5510 <nrf_twi_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5580:	2301      	movs	r3, #1
    5582:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    5584:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    5588:	42be      	cmp	r6, r7
    558a:	d14f      	bne.n	562c <twi_transfer+0xcc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    558c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5590:	2b00      	cmp	r3, #0
    5592:	d04b      	beq.n	562c <twi_transfer+0xcc>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    5594:	f44f 7182 	mov.w	r1, #260	; 0x104
    5598:	4620      	mov	r0, r4
    559a:	f7ff ffb9 	bl	5510 <nrf_twi_event_clear>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    559e:	2200      	movs	r2, #0
    55a0:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
        return false;
    55a4:	e013      	b.n	55ce <twi_transfer+0x6e>
    55a6:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    55aa:	b193      	cbz	r3, 55d2 <twi_transfer+0x72>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    55ac:	f44f 718e 	mov.w	r1, #284	; 0x11c
    55b0:	f7ff ffae 	bl	5510 <nrf_twi_event_clear>
    55b4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    55b8:	b11b      	cbz	r3, 55c2 <twi_transfer+0x62>
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    55ba:	f44f 7192 	mov.w	r1, #292	; 0x124
    55be:	4620      	mov	r0, r4
    55c0:	e7dc      	b.n	557c <twi_transfer+0x1c>
                if (!twi_send_byte(p_twi, p_cb))
    55c2:	4629      	mov	r1, r5
    55c4:	f7ff ffac 	bl	5520 <twi_send_byte>
    55c8:	4602      	mov	r2, r0
    55ca:	2800      	cmp	r0, #0
    55cc:	d1dc      	bne.n	5588 <twi_transfer+0x28>
}
    55ce:	4610      	mov	r0, r2
    55d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55d2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    55d6:	2b00      	cmp	r3, #0
    55d8:	d0d6      	beq.n	5588 <twi_transfer+0x28>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    55da:	f44f 7184 	mov.w	r1, #264	; 0x108
    55de:	f7ff ff97 	bl	5510 <nrf_twi_event_clear>
    55e2:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    55e6:	2b00      	cmp	r3, #0
    55e8:	d1e7      	bne.n	55ba <twi_transfer+0x5a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    55ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    55ec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    55ee:	428b      	cmp	r3, r1
    55f0:	d2ca      	bcs.n	5588 <twi_transfer+0x28>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    55f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    55f4:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
    55f8:	54c8      	strb	r0, [r1, r3]
        ++(p_cb->bytes_transferred);
    55fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    55fc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    55fe:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5600:	1e48      	subs	r0, r1, #1
    5602:	4283      	cmp	r3, r0
        ++(p_cb->bytes_transferred);
    5604:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5606:	d108      	bne.n	561a <twi_transfer+0xba>
    5608:	6a28      	ldr	r0, [r5, #32]
    560a:	0640      	lsls	r0, r0, #25
    560c:	d41d      	bmi.n	564a <twi_transfer+0xea>
    p_reg->SHORTS = mask;
    560e:	2302      	movs	r3, #2
    5610:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5614:	2301      	movs	r3, #1
    5616:	6223      	str	r3, [r4, #32]
    5618:	e7b6      	b.n	5588 <twi_transfer+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    561a:	428b      	cmp	r3, r1
    561c:	d1fa      	bne.n	5614 <twi_transfer+0xb4>
    561e:	6a2b      	ldr	r3, [r5, #32]
    5620:	065b      	lsls	r3, r3, #25
    5622:	d5b1      	bpl.n	5588 <twi_transfer+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    5624:	2302      	movs	r3, #2
    5626:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    562a:	e7d0      	b.n	55ce <twi_transfer+0x6e>
    return true;
    562c:	2201      	movs	r2, #1
    562e:	e7ce      	b.n	55ce <twi_transfer+0x6e>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    5630:	f44f 7192 	mov.w	r1, #292	; 0x124
    5634:	f7ff ff6c 	bl	5510 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    5638:	f44f 718e 	mov.w	r1, #284	; 0x11c
    563c:	f7ff ff68 	bl	5510 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    5640:	f44f 7184 	mov.w	r1, #264	; 0x108
    5644:	f7ff ff64 	bl	5510 <nrf_twi_event_clear>
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    5648:	e7a0      	b.n	558c <twi_transfer+0x2c>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    564a:	428b      	cmp	r3, r1
    564c:	d1e2      	bne.n	5614 <twi_transfer+0xb4>
    564e:	e7e9      	b.n	5624 <twi_transfer+0xc4>

00005650 <arch_system_halt>:
	__asm__ volatile(
    5650:	f04f 0220 	mov.w	r2, #32
    5654:	f3ef 8311 	mrs	r3, BASEPRI
    5658:	f382 8811 	msr	BASEPRI, r2
    565c:	f3bf 8f6f 	isb	sy
	}
    5660:	e7fe      	b.n	5660 <arch_system_halt+0x10>

00005662 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    5662:	f7ff bc6a 	b.w	4f3a <z_clock_idle_exit>

00005666 <k_mem_slab_init>:
{
    5666:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    5668:	2400      	movs	r4, #0
	slab->block_size = block_size;
    566a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    566e:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    5672:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    5674:	42a3      	cmp	r3, r4
    5676:	d102      	bne.n	567e <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    5678:	e9c0 0000 	strd	r0, r0, [r0]
}
    567c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    567e:	6945      	ldr	r5, [r0, #20]
    5680:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5682:	3401      	adds	r4, #1
		slab->free_list = p;
    5684:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    5686:	4411      	add	r1, r2
    5688:	e7f4      	b.n	5674 <k_mem_slab_init+0xe>

0000568a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    568a:	7b43      	ldrb	r3, [r0, #13]
    568c:	06db      	lsls	r3, r3, #27
    568e:	bf03      	ittte	eq
    5690:	6980      	ldreq	r0, [r0, #24]
    5692:	fab0 f080 	clzeq	r0, r0
    5696:	0940      	lsreq	r0, r0, #5
    5698:	2000      	movne	r0, #0
}
    569a:	4770      	bx	lr

0000569c <z_find_first_thread_to_unpend>:
{
    569c:	b510      	push	{r4, lr}
    569e:	f04f 0320 	mov.w	r3, #32
    56a2:	f3ef 8411 	mrs	r4, BASEPRI
    56a6:	f383 8811 	msr	BASEPRI, r3
    56aa:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    56ae:	f000 f83f 	bl	5730 <z_priq_dumb_best>
	__asm__ volatile(
    56b2:	f384 8811 	msr	BASEPRI, r4
    56b6:	f3bf 8f6f 	isb	sy
}
    56ba:	bd10      	pop	{r4, pc}

000056bc <z_unpend_thread_no_timeout>:
{
    56bc:	b538      	push	{r3, r4, r5, lr}
    56be:	4604      	mov	r4, r0
	__asm__ volatile(
    56c0:	f04f 0320 	mov.w	r3, #32
    56c4:	f3ef 8511 	mrs	r5, BASEPRI
    56c8:	f383 8811 	msr	BASEPRI, r3
    56cc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    56d0:	4601      	mov	r1, r0
    56d2:	6880      	ldr	r0, [r0, #8]
    56d4:	f7fe fdfc 	bl	42d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    56d8:	7b63      	ldrb	r3, [r4, #13]
    56da:	f023 0302 	bic.w	r3, r3, #2
    56de:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    56e0:	f385 8811 	msr	BASEPRI, r5
    56e4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    56e8:	2300      	movs	r3, #0
    56ea:	60a3      	str	r3, [r4, #8]
}
    56ec:	bd38      	pop	{r3, r4, r5, pc}

000056ee <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    56ee:	b921      	cbnz	r1, 56fa <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    56f0:	f3ef 8005 	mrs	r0, IPSR
    56f4:	b908      	cbnz	r0, 56fa <z_reschedule+0xc>
    56f6:	f7fb bef1 	b.w	14dc <arch_swap>
    56fa:	f381 8811 	msr	BASEPRI, r1
    56fe:	f3bf 8f6f 	isb	sy
}
    5702:	4770      	bx	lr

00005704 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5704:	4603      	mov	r3, r0
    5706:	b920      	cbnz	r0, 5712 <z_reschedule_irqlock+0xe>
    5708:	f3ef 8205 	mrs	r2, IPSR
    570c:	b90a      	cbnz	r2, 5712 <z_reschedule_irqlock+0xe>
    570e:	f7fb bee5 	b.w	14dc <arch_swap>
    5712:	f383 8811 	msr	BASEPRI, r3
    5716:	f3bf 8f6f 	isb	sy
}
    571a:	4770      	bx	lr

0000571c <z_reschedule_unlocked>:
	__asm__ volatile(
    571c:	f04f 0320 	mov.w	r3, #32
    5720:	f3ef 8011 	mrs	r0, BASEPRI
    5724:	f383 8811 	msr	BASEPRI, r3
    5728:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    572c:	f7ff bfea 	b.w	5704 <z_reschedule_irqlock>

00005730 <z_priq_dumb_best>:
	return list->head == list;
    5730:	6803      	ldr	r3, [r0, #0]
}
    5732:	4298      	cmp	r0, r3
    5734:	bf14      	ite	ne
    5736:	4618      	movne	r0, r3
    5738:	2000      	moveq	r0, #0
    573a:	4770      	bx	lr

0000573c <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    573c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    5740:	b570      	push	{r4, r5, r6, lr}
    5742:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    5744:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    5748:	b1cb      	cbz	r3, 577e <z_thread_timeout+0x42>
    574a:	f04f 0320 	mov.w	r3, #32
    574e:	f3ef 8611 	mrs	r6, BASEPRI
    5752:	f383 8811 	msr	BASEPRI, r3
    5756:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    575a:	4629      	mov	r1, r5
    575c:	f850 0c10 	ldr.w	r0, [r0, #-16]
    5760:	f7fe fdb6 	bl	42d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5764:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5768:	f023 0302 	bic.w	r3, r3, #2
    576c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    5770:	f386 8811 	msr	BASEPRI, r6
    5774:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    5778:	2300      	movs	r3, #0
    577a:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    577e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5782:	f023 0314 	bic.w	r3, r3, #20
    5786:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    578a:	4628      	mov	r0, r5
    578c:	f7ff ff7d 	bl	568a <z_is_thread_ready>
    5790:	b120      	cbz	r0, 579c <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    5792:	4628      	mov	r0, r5
}
    5794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5798:	f7fe bdea 	b.w	4370 <z_add_thread_to_ready_q>
    579c:	bd70      	pop	{r4, r5, r6, pc}

0000579e <z_unpend_first_thread>:
{
    579e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    57a0:	f04f 0320 	mov.w	r3, #32
    57a4:	f3ef 8211 	mrs	r2, BASEPRI
    57a8:	f383 8811 	msr	BASEPRI, r3
    57ac:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    57b0:	f7ff ffbe 	bl	5730 <z_priq_dumb_best>
    57b4:	4604      	mov	r4, r0
	__asm__ volatile(
    57b6:	f382 8811 	msr	BASEPRI, r2
    57ba:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    57be:	b1c8      	cbz	r0, 57f4 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    57c0:	f04f 0320 	mov.w	r3, #32
    57c4:	f3ef 8511 	mrs	r5, BASEPRI
    57c8:	f383 8811 	msr	BASEPRI, r3
    57cc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    57d0:	4601      	mov	r1, r0
    57d2:	6880      	ldr	r0, [r0, #8]
    57d4:	f7fe fd7c 	bl	42d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    57d8:	7b63      	ldrb	r3, [r4, #13]
    57da:	f023 0302 	bic.w	r3, r3, #2
    57de:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    57e0:	f385 8811 	msr	BASEPRI, r5
    57e4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    57e8:	2300      	movs	r3, #0
    57ea:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    57ec:	f104 0018 	add.w	r0, r4, #24
    57f0:	f000 f81d 	bl	582e <z_abort_timeout>
}
    57f4:	4620      	mov	r0, r4
    57f6:	bd38      	pop	{r3, r4, r5, pc}

000057f8 <z_impl_k_sem_init>:
	sem->limit = limit;
    57f8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    57fc:	e9c0 0000 	strd	r0, r0, [r0]
}
    5800:	4770      	bx	lr

00005802 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    5802:	f7fd b873 	b.w	28ec <arch_busy_wait>

00005806 <z_impl_k_thread_name_set>:
}
    5806:	f06f 0046 	mvn.w	r0, #70	; 0x46
    580a:	4770      	bx	lr

0000580c <k_thread_name_get>:
}
    580c:	2000      	movs	r0, #0
    580e:	4770      	bx	lr

00005810 <z_new_thread_init>:
{
    5810:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    5812:	9c02      	ldr	r4, [sp, #8]
    5814:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    5816:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
    5818:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
    581a:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    581c:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
    581e:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    5820:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    5824:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    5828:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    582c:	bd10      	pop	{r4, pc}

0000582e <z_abort_timeout>:
{
    582e:	b510      	push	{r4, lr}
	__asm__ volatile(
    5830:	f04f 0220 	mov.w	r2, #32
    5834:	f3ef 8411 	mrs	r4, BASEPRI
    5838:	f382 8811 	msr	BASEPRI, r2
    583c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5840:	6803      	ldr	r3, [r0, #0]
    5842:	b13b      	cbz	r3, 5854 <z_abort_timeout+0x26>
			remove_timeout(to);
    5844:	f7ff f82e 	bl	48a4 <remove_timeout>
			ret = 0;
    5848:	2000      	movs	r0, #0
	__asm__ volatile(
    584a:	f384 8811 	msr	BASEPRI, r4
    584e:	f3bf 8f6f 	isb	sy
}
    5852:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    5854:	f06f 0015 	mvn.w	r0, #21
    5858:	e7f7      	b.n	584a <z_abort_timeout+0x1c>

0000585a <z_get_next_timeout_expiry>:
{
    585a:	b510      	push	{r4, lr}
	__asm__ volatile(
    585c:	f04f 0320 	mov.w	r3, #32
    5860:	f3ef 8411 	mrs	r4, BASEPRI
    5864:	f383 8811 	msr	BASEPRI, r3
    5868:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    586c:	f7ff f82e 	bl	48cc <next_timeout>
	__asm__ volatile(
    5870:	f384 8811 	msr	BASEPRI, r4
    5874:	f3bf 8f6f 	isb	sy
}
    5878:	bd10      	pop	{r4, pc}

0000587a <z_set_timeout_expiry>:
{
    587a:	b570      	push	{r4, r5, r6, lr}
    587c:	4604      	mov	r4, r0
    587e:	460e      	mov	r6, r1
	__asm__ volatile(
    5880:	f04f 0320 	mov.w	r3, #32
    5884:	f3ef 8511 	mrs	r5, BASEPRI
    5888:	f383 8811 	msr	BASEPRI, r3
    588c:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    5890:	f7ff f81c 	bl	48cc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5894:	2801      	cmp	r0, #1
    5896:	dd05      	ble.n	58a4 <z_set_timeout_expiry+0x2a>
    5898:	42a0      	cmp	r0, r4
    589a:	dd03      	ble.n	58a4 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    589c:	4631      	mov	r1, r6
    589e:	4620      	mov	r0, r4
    58a0:	f7fb fd84 	bl	13ac <z_clock_set_timeout>
	__asm__ volatile(
    58a4:	f385 8811 	msr	BASEPRI, r5
    58a8:	f3bf 8f6f 	isb	sy
}
    58ac:	bd70      	pop	{r4, r5, r6, pc}

000058ae <k_timer_init>:
	timer->status = 0U;
    58ae:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    58b0:	e9c0 1206 	strd	r1, r2, [r0, #24]
    58b4:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
    58b8:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
    58ba:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
    58be:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
    58c2:	6283      	str	r3, [r0, #40]	; 0x28
}
    58c4:	4770      	bx	lr

000058c6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    58c6:	b510      	push	{r4, lr}
    58c8:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    58ca:	f7ff ffb0 	bl	582e <z_abort_timeout>

	if (inactive) {
    58ce:	bb00      	cbnz	r0, 5912 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
    58d0:	69e3      	ldr	r3, [r4, #28]
    58d2:	b10b      	cbz	r3, 58d8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    58d4:	4620      	mov	r0, r4
    58d6:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    58d8:	f104 0010 	add.w	r0, r4, #16
    58dc:	2100      	movs	r1, #0
    58de:	f7ff fedd 	bl	569c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    58e2:	4604      	mov	r4, r0
    58e4:	b1a8      	cbz	r0, 5912 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
    58e6:	f7ff fee9 	bl	56bc <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    58ea:	7b63      	ldrb	r3, [r4, #13]
    58ec:	06db      	lsls	r3, r3, #27
    58ee:	d104      	bne.n	58fa <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
    58f0:	69a3      	ldr	r3, [r4, #24]
    58f2:	b913      	cbnz	r3, 58fa <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
    58f4:	4620      	mov	r0, r4
    58f6:	f7fe fd3b 	bl	4370 <z_add_thread_to_ready_q>
	__asm__ volatile(
    58fa:	f04f 0320 	mov.w	r3, #32
    58fe:	f3ef 8011 	mrs	r0, BASEPRI
    5902:	f383 8811 	msr	BASEPRI, r3
    5906:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
    590a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    590e:	f7ff bef9 	b.w	5704 <z_reschedule_irqlock>
    5912:	bd10      	pop	{r4, pc}

00005914 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    5914:	4770      	bx	lr
