
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000650 	.word	0x20000650
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	000008e5 	.word	0x000008e5
   8:	00002f85 	.word	0x00002f85
		if (fdtable[fd].obj == NULL) {
   c:	0000085d 	.word	0x0000085d
  10:	0000085d 	.word	0x0000085d
  14:	0000085d 	.word	0x0000085d
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	0000085d 	.word	0x0000085d
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	0000085d 	.word	0x0000085d
	errno = ENFILE;
  20:	0000085d 	.word	0x0000085d
	return -1;
  24:	0000085d 	.word	0x0000085d
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	0000085d 	.word	0x0000085d
  2c:	00000755 	.word	0x00000755
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	0000085d 	.word	0x0000085d
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	0000085d 	.word	0x0000085d
  38:	00000701 	.word	0x00000701
  3c:	00002f71 	.word	0x00002f71

00000040 <_irq_vector_table>:
  40:	000008a5 000008a5 000008a5 000008a5     ................
  50:	000008a5 000008a5 000008a5 000008a5     ................
  60:	000008a5 000008a5 000008a5 000008a5     ................
  70:	000008a5 000008a5 000008a5 000008a5     ................
  80:	000008a5 000008a5 000008a5 000008a5     ................
  90:	000008a5 000008a5 000008a5 000008a5     ................
  a0:	000008a5 000008a5 000008a5 000008a5     ................
  b0:	000008a5 000008a5 000008a5 000008a5     ................
  c0:	000008a5 000008a5 000008a5 000008a5     ................
  d0:	000008a5 000008a5 000008a5              ............

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	9f09      	ldr	r7, [sp, #36]	; 0x24
     116:	4615      	mov	r5, r2
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	461e      	mov	r6, r3
     11e:	2b00      	cmp	r3, #0
     120:	f040 80cc 	bne.w	2bc <CONFIG_FLASH_SIZE+0xbc>
     124:	428a      	cmp	r2, r1
     126:	fab2 fc82 	clz	ip, r2
     12a:	d94c      	bls.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     12c:	f1bc 0f00 	cmp.w	ip, #0
     130:	d00b      	beq.n	14a <CONFIG_IDLE_STACK_SIZE+0xa>
     132:	f1cc 0820 	rsb	r8, ip, #32
     136:	fa01 fe0c 	lsl.w	lr, r1, ip
     13a:	fa20 f808 	lsr.w	r8, r0, r8
     13e:	fa02 f50c 	lsl.w	r5, r2, ip
     142:	ea48 0e0e 	orr.w	lr, r8, lr
     146:	fa00 f40c 	lsl.w	r4, r0, ip
     14a:	ea4f 4915 	mov.w	r9, r5, lsr #16
     14e:	fa1f f885 	uxth.w	r8, r5
     152:	fbbe faf9 	udiv	sl, lr, r9
     156:	0c21      	lsrs	r1, r4, #16
     158:	fb09 e31a 	mls	r3, r9, sl, lr
     15c:	fb0a fb08 	mul.w	fp, sl, r8
     160:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     164:	459b      	cmp	fp, r3
     166:	d92a      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     168:	18eb      	adds	r3, r5, r3
     16a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     16e:	d204      	bcs.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     170:	459b      	cmp	fp, r3
     172:	d902      	bls.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     174:	f1aa 0002 	sub.w	r0, sl, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030b 	sub.w	r3, r3, fp
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f9 	udiv	r2, r3, r9
     184:	fb09 3312 	mls	r3, r9, r2, r3
     188:	fb02 f808 	mul.w	r8, r2, r8
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a0      	cmp	r8, r4
     192:	d916      	bls.n	1c2 <CONFIG_IDLE_STACK_SIZE+0x82>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19a:	d203      	bcs.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     19c:	45a0      	cmp	r8, r4
     19e:	d901      	bls.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 0408 	sub.w	r4, r4, r8
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b127      	cbz	r7, 1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     1ae:	fa24 f40c 	lsr.w	r4, r4, ip
     1b2:	2300      	movs	r3, #0
     1b4:	603c      	str	r4, [r7, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	4631      	mov	r1, r6
     1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1be:	4650      	mov	r0, sl
     1c0:	e7db      	b.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     1c2:	4613      	mov	r3, r2
     1c4:	e7ee      	b.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1c6:	b902      	cbnz	r2, 1ca <CONFIG_IDLE_STACK_SIZE+0x8a>
     1c8:	deff      	udf	#255	; 0xff
     1ca:	f1bc 0f00 	cmp.w	ip, #0
     1ce:	d12e      	bne.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d0:	1a8b      	subs	r3, r1, r2
     1d2:	2601      	movs	r6, #1
     1d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d8:	b2aa      	uxth	r2, r5
     1da:	fbb3 f8fe 	udiv	r8, r3, lr
     1de:	0c21      	lsrs	r1, r4, #16
     1e0:	fb0e 3318 	mls	r3, lr, r8, r3
     1e4:	fb08 f902 	mul.w	r9, r8, r2
     1e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1ec:	4599      	cmp	r9, r3
     1ee:	d961      	bls.n	2b4 <CONFIG_FLASH_SIZE+0xb4>
     1f0:	18eb      	adds	r3, r5, r3
     1f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     1f6:	d204      	bcs.n	202 <CONFIG_FLASH_SIZE+0x2>
     1f8:	4599      	cmp	r9, r3
     1fa:	d902      	bls.n	202 <CONFIG_FLASH_SIZE+0x2>
     1fc:	f1a8 0002 	sub.w	r0, r8, #2
     200:	442b      	add	r3, r5
     202:	eba3 0309 	sub.w	r3, r3, r9
     206:	b2a4      	uxth	r4, r4
     208:	fbb3 f1fe 	udiv	r1, r3, lr
     20c:	fb0e 3311 	mls	r3, lr, r1, r3
     210:	434a      	muls	r2, r1
     212:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     216:	42a2      	cmp	r2, r4
     218:	d94e      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     21a:	192c      	adds	r4, r5, r4
     21c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     220:	d203      	bcs.n	22a <CONFIG_FLASH_SIZE+0x2a>
     222:	42a2      	cmp	r2, r4
     224:	d901      	bls.n	22a <CONFIG_FLASH_SIZE+0x2a>
     226:	1e8b      	subs	r3, r1, #2
     228:	442c      	add	r4, r5
     22a:	1aa4      	subs	r4, r4, r2
     22c:	e7bc      	b.n	1a8 <CONFIG_IDLE_STACK_SIZE+0x68>
     22e:	f1cc 0e20 	rsb	lr, ip, #32
     232:	fa02 f50c 	lsl.w	r5, r2, ip
     236:	fa21 f90e 	lsr.w	r9, r1, lr
     23a:	fa01 f30c 	lsl.w	r3, r1, ip
     23e:	fa20 fe0e 	lsr.w	lr, r0, lr
     242:	ea4e 0303 	orr.w	r3, lr, r3
     246:	ea4f 4815 	mov.w	r8, r5, lsr #16
     24a:	fa00 f40c 	lsl.w	r4, r0, ip
     24e:	fbb9 f1f8 	udiv	r1, r9, r8
     252:	fa1f fe85 	uxth.w	lr, r5
     256:	fb08 9211 	mls	r2, r8, r1, r9
     25a:	0c18      	lsrs	r0, r3, #16
     25c:	fb01 f60e 	mul.w	r6, r1, lr
     260:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     264:	4296      	cmp	r6, r2
     266:	d921      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     268:	18aa      	adds	r2, r5, r2
     26a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     26e:	d203      	bcs.n	278 <CONFIG_FLASH_SIZE+0x78>
     270:	4296      	cmp	r6, r2
     272:	d901      	bls.n	278 <CONFIG_FLASH_SIZE+0x78>
     274:	1e88      	subs	r0, r1, #2
     276:	442a      	add	r2, r5
     278:	1b92      	subs	r2, r2, r6
     27a:	b29b      	uxth	r3, r3
     27c:	fbb2 f9f8 	udiv	r9, r2, r8
     280:	fb08 2219 	mls	r2, r8, r9, r2
     284:	fb09 fe0e 	mul.w	lr, r9, lr
     288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     28c:	459e      	cmp	lr, r3
     28e:	d90f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     290:	18eb      	adds	r3, r5, r3
     292:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     296:	d204      	bcs.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     298:	459e      	cmp	lr, r3
     29a:	d902      	bls.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     29c:	f1a9 0602 	sub.w	r6, r9, #2
     2a0:	442b      	add	r3, r5
     2a2:	eba3 030e 	sub.w	r3, r3, lr
     2a6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     2aa:	e793      	b.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     2ac:	4608      	mov	r0, r1
     2ae:	e7e3      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     2b0:	464e      	mov	r6, r9
     2b2:	e7f6      	b.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     2b4:	4640      	mov	r0, r8
     2b6:	e7a4      	b.n	202 <CONFIG_FLASH_SIZE+0x2>
     2b8:	460b      	mov	r3, r1
     2ba:	e7b6      	b.n	22a <CONFIG_FLASH_SIZE+0x2a>
     2bc:	428b      	cmp	r3, r1
     2be:	d905      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c0:	b10f      	cbz	r7, 2c6 <CONFIG_FLASH_SIZE+0xc6>
     2c2:	e9c7 0100 	strd	r0, r1, [r7]
     2c6:	2600      	movs	r6, #0
     2c8:	4630      	mov	r0, r6
     2ca:	e775      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2cc:	fab3 fc83 	clz	ip, r3
     2d0:	f1bc 0f00 	cmp.w	ip, #0
     2d4:	d10f      	bne.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2d6:	428b      	cmp	r3, r1
     2d8:	d301      	bcc.n	2de <CONFIG_FLASH_SIZE+0xde>
     2da:	4282      	cmp	r2, r0
     2dc:	d809      	bhi.n	2f2 <CONFIG_FLASH_SIZE+0xf2>
     2de:	1a84      	subs	r4, r0, r2
     2e0:	eb61 0e03 	sbc.w	lr, r1, r3
     2e4:	2001      	movs	r0, #1
     2e6:	2f00      	cmp	r7, #0
     2e8:	d06a      	beq.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     2ea:	e9c7 4e00 	strd	r4, lr, [r7]
     2ee:	2600      	movs	r6, #0
     2f0:	e762      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2f2:	4660      	mov	r0, ip
     2f4:	e7f7      	b.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2f6:	f1cc 0e20 	rsb	lr, ip, #32
     2fa:	fa03 f30c 	lsl.w	r3, r3, ip
     2fe:	fa22 f50e 	lsr.w	r5, r2, lr
     302:	fa21 f40e 	lsr.w	r4, r1, lr
     306:	431d      	orrs	r5, r3
     308:	fa01 f30c 	lsl.w	r3, r1, ip
     30c:	fa20 f10e 	lsr.w	r1, r0, lr
     310:	430b      	orrs	r3, r1
     312:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     316:	fa00 f60c 	lsl.w	r6, r0, ip
     31a:	fbb4 f9fa 	udiv	r9, r4, sl
     31e:	fa1f f885 	uxth.w	r8, r5
     322:	fb0a 4019 	mls	r0, sl, r9, r4
     326:	0c1c      	lsrs	r4, r3, #16
     328:	fb09 f108 	mul.w	r1, r9, r8
     32c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     330:	42a1      	cmp	r1, r4
     332:	fa02 f20c 	lsl.w	r2, r2, ip
     336:	d93f      	bls.n	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     338:	192c      	adds	r4, r5, r4
     33a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     33e:	d204      	bcs.n	34a <CONFIG_FLASH_SIZE+0x14a>
     340:	42a1      	cmp	r1, r4
     342:	d902      	bls.n	34a <CONFIG_FLASH_SIZE+0x14a>
     344:	f1a9 0002 	sub.w	r0, r9, #2
     348:	442c      	add	r4, r5
     34a:	1a64      	subs	r4, r4, r1
     34c:	b29b      	uxth	r3, r3
     34e:	fbb4 f9fa 	udiv	r9, r4, sl
     352:	fb0a 4419 	mls	r4, sl, r9, r4
     356:	fb09 f808 	mul.w	r8, r9, r8
     35a:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     35e:	4588      	cmp	r8, r1
     360:	d92c      	bls.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     362:	1869      	adds	r1, r5, r1
     364:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     368:	d204      	bcs.n	374 <CONFIG_FLASH_SIZE+0x174>
     36a:	4588      	cmp	r8, r1
     36c:	d902      	bls.n	374 <CONFIG_FLASH_SIZE+0x174>
     36e:	f1a9 0302 	sub.w	r3, r9, #2
     372:	4429      	add	r1, r5
     374:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     378:	eba1 0108 	sub.w	r1, r1, r8
     37c:	fba0 8902 	umull	r8, r9, r0, r2
     380:	4549      	cmp	r1, r9
     382:	46c2      	mov	sl, r8
     384:	464c      	mov	r4, r9
     386:	d302      	bcc.n	38e <CONFIG_FLASH_SIZE+0x18e>
     388:	d106      	bne.n	398 <CONFIG_FLASH_SIZE+0x198>
     38a:	4546      	cmp	r6, r8
     38c:	d204      	bcs.n	398 <CONFIG_FLASH_SIZE+0x198>
     38e:	ebb8 0a02 	subs.w	sl, r8, r2
     392:	eb69 0405 	sbc.w	r4, r9, r5
     396:	3801      	subs	r0, #1
     398:	b197      	cbz	r7, 3c0 <CONFIG_FLASH_SIZE+0x1c0>
     39a:	ebb6 030a 	subs.w	r3, r6, sl
     39e:	eb61 0604 	sbc.w	r6, r1, r4
     3a2:	fa06 fe0e 	lsl.w	lr, r6, lr
     3a6:	fa23 f30c 	lsr.w	r3, r3, ip
     3aa:	ea4e 0303 	orr.w	r3, lr, r3
     3ae:	fa26 f60c 	lsr.w	r6, r6, ip
     3b2:	e9c7 3600 	strd	r3, r6, [r7]
     3b6:	e79a      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3b8:	4648      	mov	r0, r9
     3ba:	e7c6      	b.n	34a <CONFIG_FLASH_SIZE+0x14a>
     3bc:	464b      	mov	r3, r9
     3be:	e7d9      	b.n	374 <CONFIG_FLASH_SIZE+0x174>
     3c0:	463e      	mov	r6, r7
     3c2:	e6f9      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>

000003c4 <trigger_handler>:


static void trigger_handler(struct device *dev, struct sensor_trigger *trigger)
{
	ARG_UNUSED(trigger);
	tellerke++;
     3c4:	4b06      	ldr	r3, [pc, #24]	; (3e0 <trigger_handler+0x1c>)
     3c6:	681a      	ldr	r2, [r3, #0]
     3c8:	3201      	adds	r2, #1
	if (tellerke > 200) tellerke=0;
     3ca:	2ac8      	cmp	r2, #200	; 0xc8
     3cc:	bfc8      	it	gt
     3ce:	2200      	movgt	r2, #0
     3d0:	601a      	str	r2, [r3, #0]
	MY_REGISTER1=tellerke;
     3d2:	781a      	ldrb	r2, [r3, #0]
     3d4:	4b03      	ldr	r3, [pc, #12]	; (3e4 <trigger_handler+0x20>)
     3d6:	701a      	strb	r2, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     3d8:	4803      	ldr	r0, [pc, #12]	; (3e8 <CONFIG_CST816S_ACTIVITY_THRESHOLD>)
     3da:	f002 ba85 	b.w	28e8 <z_impl_k_sem_give>
     3de:	bf00      	nop
     3e0:	200000b4 	.word	0x200000b4
     3e4:	2000f000 	.word	0x2000f000
     3e8:	20001028 	.word	0x20001028

000003ec <main>:




void main(void)
{
     3ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3ee:	4823      	ldr	r0, [pc, #140]	; (47c <CONFIG_CST816S_THREAD_STACK_SIZE+0x7c>)
     3f0:	f001 ff52 	bl	2298 <z_impl_device_get_binding>
     3f4:	4604      	mov	r4, r0
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     3f6:	6843      	ldr	r3, [r0, #4]
     3f8:	2216      	movs	r2, #22
     3fa:	681d      	ldr	r5, [r3, #0]
     3fc:	2100      	movs	r1, #0
     3fe:	2301      	movs	r3, #1
     400:	47a8      	blx	r5
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
     402:	6863      	ldr	r3, [r4, #4]
     404:	685d      	ldr	r5, [r3, #4]
     406:	2300      	movs	r3, #0
     408:	4619      	mov	r1, r3
     40a:	2216      	movs	r2, #22
     40c:	4620      	mov	r0, r4
     40e:	47a8      	blx	r5
	backlight_init(); // test if interrupt still works with backlight
	MY_REGISTER1=0x93;
     410:	4c1b      	ldr	r4, [pc, #108]	; (480 <CONFIG_CST816S_THREAD_STACK_SIZE+0x80>)
	MY_REGISTER2=0x93;
     412:	4d1c      	ldr	r5, [pc, #112]	; (484 <CONFIG_CST816S_THREAD_STACK_SIZE+0x84>)
	MY_REGISTER1=0x93;
     414:	2393      	movs	r3, #147	; 0x93
     416:	7023      	strb	r3, [r4, #0]
	MY_REGISTER2=0x93;
     418:	702b      	strb	r3, [r5, #0]
     41a:	481b      	ldr	r0, [pc, #108]	; (488 <CONFIG_CST816S_THREAD_STACK_SIZE+0x88>)
     41c:	f001 ff3c 	bl	2298 <z_impl_device_get_binding>
	struct device *dev = device_get_binding(DT_INST_0_HYNITRON_CST816S_LABEL);
	if (dev == NULL) {
     420:	4603      	mov	r3, r0
     422:	b938      	cbnz	r0, 434 <CONFIG_CST816S_THREAD_STACK_SIZE+0x34>
		printf("Could not get %s device\n", DT_INST_0_HYNITRON_CST816S_LABEL);
     424:	4918      	ldr	r1, [pc, #96]	; (488 <CONFIG_CST816S_THREAD_STACK_SIZE+0x88>)
     426:	4819      	ldr	r0, [pc, #100]	; (48c <CONFIG_CST816S_THREAD_STACK_SIZE+0x8c>)
     428:	f001 f8f0 	bl	160c <printf>
		MY_REGISTER1=0xe6;
     42c:	23e6      	movs	r3, #230	; 0xe6
     42e:	7023      	strb	r3, [r4, #0]
		} else {
			MY_REGISTER1=0x25;
		}
	}

}
     430:	b003      	add	sp, #12
     432:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct sensor_trigger trig = {
     434:	4a16      	ldr	r2, [pc, #88]	; (490 <CONFIG_CST816S_THREAD_STACK_SIZE+0x90>)
     436:	6810      	ldr	r0, [r2, #0]
				     sensor_trigger_handler_t handler)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->driver_api;

	if (api->trigger_set == NULL) {
     438:	685a      	ldr	r2, [r3, #4]
     43a:	9001      	str	r0, [sp, #4]
     43c:	6854      	ldr	r4, [r2, #4]
     43e:	b1ac      	cbz	r4, 46c <CONFIG_CST816S_THREAD_STACK_SIZE+0x6c>
		return -ENOTSUP;
	}

	return api->trigger_set(dev, trig, handler);
     440:	4a14      	ldr	r2, [pc, #80]	; (494 <CONFIG_CST816S_THREAD_STACK_SIZE+0x94>)
     442:	a901      	add	r1, sp, #4
     444:	4618      	mov	r0, r3
     446:	47a0      	blx	r4
		if (sensor_trigger_set(dev, &trig, trigger_handler)) {
     448:	b980      	cbnz	r0, 46c <CONFIG_CST816S_THREAD_STACK_SIZE+0x6c>
		counter++;
     44a:	4c13      	ldr	r4, [pc, #76]	; (498 <CONFIG_CST816S_THREAD_STACK_SIZE+0x98>)
	return z_impl_k_sem_take(sem, timeout);
     44c:	4f13      	ldr	r7, [pc, #76]	; (49c <CONFIG_CST816S_THREAD_STACK_SIZE+0x9c>)
     44e:	4626      	mov	r6, r4
     450:	6823      	ldr	r3, [r4, #0]
     452:	3301      	adds	r3, #1
		if (counter>200) counter=0;
     454:	2bc8      	cmp	r3, #200	; 0xc8
     456:	bfc8      	it	gt
     458:	2300      	movgt	r3, #0
     45a:	6023      	str	r3, [r4, #0]
     45c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     460:	4638      	mov	r0, r7
     462:	f002 fa67 	bl	2934 <z_impl_k_sem_take>
			MY_REGISTER2=counter;
     466:	7833      	ldrb	r3, [r6, #0]
     468:	702b      	strb	r3, [r5, #0]
		counter++;
     46a:	e7f1      	b.n	450 <CONFIG_CST816S_THREAD_STACK_SIZE+0x50>
			printf("Could not set trigger\n");
     46c:	480c      	ldr	r0, [pc, #48]	; (4a0 <CONFIG_CST816S_THREAD_STACK_SIZE+0xa0>)
     46e:	f001 f8cd 	bl	160c <printf>
			MY_REGISTER1=0xe7;
     472:	4b03      	ldr	r3, [pc, #12]	; (480 <CONFIG_CST816S_THREAD_STACK_SIZE+0x80>)
     474:	22e7      	movs	r2, #231	; 0xe7
     476:	701a      	strb	r2, [r3, #0]
			return;
     478:	e7da      	b.n	430 <CONFIG_CST816S_THREAD_STACK_SIZE+0x30>
     47a:	bf00      	nop
     47c:	00003a6c 	.word	0x00003a6c
     480:	2000f000 	.word	0x2000f000
     484:	2000f001 	.word	0x2000f001
     488:	00003a73 	.word	0x00003a73
     48c:	00003a7b 	.word	0x00003a7b
     490:	000039a8 	.word	0x000039a8
     494:	000003c5 	.word	0x000003c5
     498:	200000b0 	.word	0x200000b0
     49c:	20001028 	.word	0x20001028
     4a0:	00003a94 	.word	0x00003a94

000004a4 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     4a4:	4b16      	ldr	r3, [pc, #88]	; (500 <nrf_power_clock_isr+0x5c>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     4a6:	b507      	push	{r0, r1, r2, lr}
     4a8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     4aa:	b182      	cbz	r2, 4ce <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
     4ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     4b0:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     4b4:	07d1      	lsls	r1, r2, #31
     4b6:	d50a      	bpl.n	4ce <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     4b8:	2200      	movs	r2, #0
     4ba:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     4bc:	681b      	ldr	r3, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     4be:	4811      	ldr	r0, [pc, #68]	; (504 <nrf_power_clock_isr+0x60>)
     4c0:	9300      	str	r3, [sp, #0]
    (void)dummy;
     4c2:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     4c4:	6883      	ldr	r3, [r0, #8]
     4c6:	7a59      	ldrb	r1, [r3, #9]
     4c8:	b909      	cbnz	r1, 4ce <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     4ca:	f002 fc62 	bl	2d92 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     4ce:	4b0e      	ldr	r3, [pc, #56]	; (508 <nrf_power_clock_isr+0x64>)
     4d0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     4d2:	b18a      	cbz	r2, 4f8 <nrf_power_clock_isr+0x54>
    return p_reg->INTENSET & mask;
     4d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     4d8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     4dc:	0792      	lsls	r2, r2, #30
     4de:	d50b      	bpl.n	4f8 <nrf_power_clock_isr+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     4e0:	2200      	movs	r2, #0
     4e2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     4e4:	681b      	ldr	r3, [r3, #0]
     4e6:	9301      	str	r3, [sp, #4]
    (void)dummy;
     4e8:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     4ea:	4806      	ldr	r0, [pc, #24]	; (504 <nrf_power_clock_isr+0x60>)
     4ec:	2101      	movs	r1, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     4ee:	b003      	add	sp, #12
     4f0:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     4f4:	f002 bc4d 	b.w	2d92 <clkstarted_handle>
}
     4f8:	b003      	add	sp, #12
     4fa:	f85d fb04 	ldr.w	pc, [sp], #4
     4fe:	bf00      	nop
     500:	40000100 	.word	0x40000100
     504:	20000fec 	.word	0x20000fec
     508:	40000104 	.word	0x40000104

0000050c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     50c:	4b0d      	ldr	r3, [pc, #52]	; (544 <rtc1_nrf_isr+0x38>)
     50e:	2200      	movs	r2, #0
     510:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     514:	f04f 0220 	mov.w	r2, #32
     518:	f3ef 8111 	mrs	r1, BASEPRI
     51c:	f382 8811 	msr	BASEPRI, r2
     520:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     524:	4a08      	ldr	r2, [pc, #32]	; (548 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     526:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     52a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     52c:	1ac0      	subs	r0, r0, r3
     52e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     532:	4403      	add	r3, r0
     534:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     536:	f381 8811 	msr	BASEPRI, r1
     53a:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     53e:	f002 bb5f 	b.w	2c00 <z_clock_announce>
     542:	bf00      	nop
     544:	40011000 	.word	0x40011000
     548:	200000d0 	.word	0x200000d0

0000054c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     54c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     54e:	481c      	ldr	r0, [pc, #112]	; (5c0 <z_clock_driver_init+0x74>)
     550:	f001 fea2 	bl	2298 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
     554:	b380      	cbz	r0, 5b8 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     556:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     558:	4d1a      	ldr	r5, [pc, #104]	; (5c4 <z_clock_driver_init+0x78>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	2101      	movs	r1, #1
     55e:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     560:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
     562:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
     568:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     56c:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     570:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     578:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     57c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     580:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     582:	681b      	ldr	r3, [r3, #0]
     584:	9301      	str	r3, [sp, #4]
    (void)dummy;
     586:	9b01      	ldr	r3, [sp, #4]
     588:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     58a:	4631      	mov	r1, r6
     58c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     590:	2011      	movs	r0, #17
     592:	4622      	mov	r2, r4
     594:	f000 f8fe 	bl	794 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     598:	2011      	movs	r0, #17
     59a:	f000 f8eb 	bl	774 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     59e:	4b0b      	ldr	r3, [pc, #44]	; (5cc <z_clock_driver_init+0x80>)
     5a0:	601e      	str	r6, [r3, #0]
     5a2:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     5a4:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
     5a8:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     5aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     5ae:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
     5b2:	4620      	mov	r0, r4
}
     5b4:	b002      	add	sp, #8
     5b6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     5b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     5bc:	e7fa      	b.n	5b4 <z_clock_driver_init+0x68>
     5be:	bf00      	nop
     5c0:	00003aab 	.word	0x00003aab
     5c4:	40011000 	.word	0x40011000
     5c8:	e000e100 	.word	0xe000e100
     5cc:	40011008 	.word	0x40011008

000005d0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     5d2:	4e25      	ldr	r6, [pc, #148]	; (668 <z_clock_set_timeout+0x98>)
     5d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     5d8:	bf08      	it	eq
     5da:	4630      	moveq	r0, r6
	__asm__ volatile(
     5dc:	f04f 0320 	mov.w	r3, #32
     5e0:	f3ef 8511 	mrs	r5, BASEPRI
     5e4:	f383 8811 	msr	BASEPRI, r3
     5e8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     5ec:	491f      	ldr	r1, [pc, #124]	; (66c <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
     5ee:	4b20      	ldr	r3, [pc, #128]	; (670 <z_clock_set_timeout+0xa0>)
     5f0:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
     5f4:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
     5f6:	1ae2      	subs	r2, r4, r3
     5f8:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     5fc:	0212      	lsls	r2, r2, #8
     5fe:	d419      	bmi.n	634 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     600:	1e42      	subs	r2, r0, #1
     602:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
     606:	42b2      	cmp	r2, r6
     608:	bfa8      	it	ge
     60a:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     60c:	1c78      	adds	r0, r7, #1
     60e:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     610:	42b0      	cmp	r0, r6
     612:	bf94      	ite	ls
     614:	1818      	addls	r0, r3, r0
     616:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     618:	1b04      	subs	r4, r0, r4
     61a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
     61e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     622:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
     624:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     628:	d906      	bls.n	638 <z_clock_set_timeout+0x68>
	__asm__ volatile(
     62a:	f385 8811 	msr	BASEPRI, r5
     62e:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
     634:	2200      	movs	r2, #0
     636:	e7e9      	b.n	60c <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
     638:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     63c:	4a0d      	ldr	r2, [pc, #52]	; (674 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
     63e:	1ac3      	subs	r3, r0, r3
     640:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     644:	1e5c      	subs	r4, r3, #1
     646:	4294      	cmp	r4, r2
     648:	d905      	bls.n	656 <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     64a:	4b0b      	ldr	r3, [pc, #44]	; (678 <z_clock_set_timeout+0xa8>)
     64c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     650:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     654:	e7e9      	b.n	62a <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
     656:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     658:	bf02      	ittt	eq
     65a:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     65c:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     660:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     664:	e7e1      	b.n	62a <z_clock_set_timeout+0x5a>
     666:	bf00      	nop
     668:	00fffffe 	.word	0x00fffffe
     66c:	40011000 	.word	0x40011000
     670:	200000d0 	.word	0x200000d0
     674:	007ffffe 	.word	0x007ffffe
     678:	e000e100 	.word	0xe000e100

0000067c <z_clock_elapsed>:
	__asm__ volatile(
     67c:	f04f 0220 	mov.w	r2, #32
     680:	f3ef 8311 	mrs	r3, BASEPRI
     684:	f382 8811 	msr	BASEPRI, r2
     688:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     68c:	4a06      	ldr	r2, [pc, #24]	; (6a8 <z_clock_elapsed+0x2c>)
     68e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     692:	4a06      	ldr	r2, [pc, #24]	; (6ac <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     694:	6812      	ldr	r2, [r2, #0]
     696:	1a80      	subs	r0, r0, r2
     698:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     69c:	f383 8811 	msr	BASEPRI, r3
     6a0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     6a4:	4770      	bx	lr
     6a6:	bf00      	nop
     6a8:	40011000 	.word	0x40011000
     6ac:	200000d0 	.word	0x200000d0

000006b0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     6b0:	4804      	ldr	r0, [pc, #16]	; (6c4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     6b2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     6b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     6b6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     6b8:	d003      	beq.n	6c2 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     6ba:	4903      	ldr	r1, [pc, #12]	; (6c8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     6bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     6c0:	600a      	str	r2, [r1, #0]

000006c2 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
     6c2:	4770      	bx	lr
    ldr r0, =_kernel
     6c4:	2000020c 	.word	0x2000020c
    ldr r1, =_SCS_ICSR
     6c8:	e000ed04 	.word	0xe000ed04

000006cc <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     6cc:	4a09      	ldr	r2, [pc, #36]	; (6f4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     6ce:	490a      	ldr	r1, [pc, #40]	; (6f8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     6d0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     6d2:	6809      	ldr	r1, [r1, #0]
     6d4:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     6d6:	4909      	ldr	r1, [pc, #36]	; (6fc <arch_swap+0x30>)
	_current->arch.basepri = key;
     6d8:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     6da:	684b      	ldr	r3, [r1, #4]
     6dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     6e0:	604b      	str	r3, [r1, #4]
     6e2:	2300      	movs	r3, #0
     6e4:	f383 8811 	msr	BASEPRI, r3
     6e8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     6ec:	6893      	ldr	r3, [r2, #8]
}
     6ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
     6f0:	4770      	bx	lr
     6f2:	bf00      	nop
     6f4:	2000020c 	.word	0x2000020c
     6f8:	00003a68 	.word	0x00003a68
     6fc:	e000ed00 	.word	0xe000ed00

00000700 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     700:	4912      	ldr	r1, [pc, #72]	; (74c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     702:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     704:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     708:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     70a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     70e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     712:	2020      	movs	r0, #32
    msr BASEPRI, r0
     714:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     718:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     71c:	4f0c      	ldr	r7, [pc, #48]	; (750 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     71e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     722:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     724:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     726:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     728:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
     72a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     72c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     72e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     732:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     734:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     736:	f002 fc2c 	bl	2f92 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     73a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     73e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     742:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     746:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     74a:	4770      	bx	lr
    ldr r1, =_kernel
     74c:	2000020c 	.word	0x2000020c
    ldr v4, =_SCS_ICSR
     750:	e000ed04 	.word	0xe000ed04

00000754 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     754:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     758:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     75a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     75e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     762:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     764:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     768:	2902      	cmp	r1, #2
    beq _oops
     76a:	d0ff      	beq.n	76c <_oops>

0000076c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     76c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     76e:	f002 fc05 	bl	2f7c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     772:	bd01      	pop	{r0, pc}

00000774 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     774:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     776:	2b00      	cmp	r3, #0
     778:	db08      	blt.n	78c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     77a:	2201      	movs	r2, #1
     77c:	f000 001f 	and.w	r0, r0, #31
     780:	fa02 f000 	lsl.w	r0, r2, r0
     784:	095b      	lsrs	r3, r3, #5
     786:	4a02      	ldr	r2, [pc, #8]	; (790 <arch_irq_enable+0x1c>)
     788:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     78c:	4770      	bx	lr
     78e:	bf00      	nop
     790:	e000e100 	.word	0xe000e100

00000794 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     794:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     796:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     798:	bfa8      	it	ge
     79a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     79e:	f101 0101 	add.w	r1, r1, #1
     7a2:	ea4f 1141 	mov.w	r1, r1, lsl #5
     7a6:	bfae      	itee	ge
     7a8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     7ac:	f000 000f 	andlt.w	r0, r0, #15
     7b0:	4b03      	ldrlt	r3, [pc, #12]	; (7c0 <z_arm_irq_priority_set+0x2c>)
     7b2:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     7b4:	bfac      	ite	ge
     7b6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     7ba:	5419      	strblt	r1, [r3, r0]
}
     7bc:	4770      	bx	lr
     7be:	bf00      	nop
     7c0:	e000ed14 	.word	0xe000ed14

000007c4 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
     7c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     7c6:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
     7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     7ca:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
     7cc:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
     7d0:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     7d2:	f002 ffc8 	bl	3766 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     7d6:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
     7da:	4a0a      	ldr	r2, [pc, #40]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     7dc:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
     7e0:	f022 0201 	bic.w	r2, r2, #1
     7e4:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
     7e6:	9a06      	ldr	r2, [sp, #24]
     7e8:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     7ea:	9a07      	ldr	r2, [sp, #28]
     7ec:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     7ee:	9a08      	ldr	r2, [sp, #32]
     7f0:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
     7f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
     7f6:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
     7f8:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     7fa:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
     7fc:	2300      	movs	r3, #0
     7fe:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     800:	b002      	add	sp, #8
     802:	bd70      	pop	{r4, r5, r6, pc}
     804:	00002d61 	.word	0x00002d61

00000808 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
     808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     80a:	4605      	mov	r5, r0
     80c:	460c      	mov	r4, r1
     80e:	4617      	mov	r7, r2
     810:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
     812:	f000 f979 	bl	b08 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
     816:	4b0a      	ldr	r3, [pc, #40]	; (840 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
     818:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
     81a:	4628      	mov	r0, r5
	_current = main_thread;
     81c:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
     81e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
     822:	f002 fbb6 	bl	2f92 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     826:	4630      	mov	r0, r6
     828:	f384 8809 	msr	PSP, r4
     82c:	2100      	movs	r1, #0
     82e:	b663      	cpsie	if
     830:	f381 8811 	msr	BASEPRI, r1
     834:	f3bf 8f6f 	isb	sy
     838:	2200      	movs	r2, #0
     83a:	2300      	movs	r3, #0
     83c:	f002 fa90 	bl	2d60 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     840:	2000020c 	.word	0x2000020c

00000844 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
     844:	4901      	ldr	r1, [pc, #4]	; (84c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     846:	2210      	movs	r2, #16
	str r2, [r1]
     848:	600a      	str	r2, [r1, #0]
#endif
	bx lr
     84a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     84c:	e000ed10 	.word	0xe000ed10

00000850 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     850:	4040      	eors	r0, r0
	msr BASEPRI, r0
     852:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     856:	bf30      	wfi

	bx lr
     858:	4770      	bx	lr
     85a:	bf00      	nop

0000085c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
     85c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
     860:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
     864:	4672      	mov	r2, lr

	push {r0, lr}
     866:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
     868:	f000 f8a0 	bl	9ac <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
     86c:	bd01      	pop	{r0, pc}
     86e:	bf00      	nop

00000870 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     870:	bf30      	wfi
    b z_SysNmiOnReset
     872:	f7ff bffd 	b.w	870 <z_SysNmiOnReset>
     876:	bf00      	nop

00000878 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     878:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     87a:	4b08      	ldr	r3, [pc, #32]	; (89c <z_arm_prep_c+0x24>)
     87c:	4a08      	ldr	r2, [pc, #32]	; (8a0 <z_arm_prep_c+0x28>)
     87e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     882:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     884:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     888:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
     88c:	f001 fd44 	bl	2318 <z_bss_zero>
	z_data_copy();
     890:	f001 fd4c 	bl	232c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
     894:	f000 f906 	bl	aa4 <z_arm_int_lib_init>
	z_cstart();
     898:	f001 fd7a 	bl	2390 <z_cstart>
     89c:	00000000 	.word	0x00000000
     8a0:	e000ed00 	.word	0xe000ed00

000008a4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     8a4:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
     8a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     8a8:	4a0b      	ldr	r2, [pc, #44]	; (8d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     8aa:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     8ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     8ae:	bf1e      	ittt	ne
	movne	r1, #0
     8b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     8b2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     8b4:	f002 fec2 	blne	363c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     8b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     8ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     8be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     8c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     8c6:	4905      	ldr	r1, [pc, #20]	; (8dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     8c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     8ca:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     8cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     8ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     8d2:	4903      	ldr	r1, [pc, #12]	; (8e0 <_isr_wrapper+0x3c>)
	bx r1
     8d4:	4708      	bx	r1
     8d6:	0000      	.short	0x0000
	ldr r2, =_kernel
     8d8:	2000020c 	.word	0x2000020c
	ldr r1, =_sw_isr_table
     8dc:	00003810 	.word	0x00003810
	ldr r1, =z_arm_int_exit
     8e0:	000006b1 	.word	0x000006b1

000008e4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     8e4:	f002 fc3f 	bl	3166 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     8e8:	2020      	movs	r0, #32
    msr BASEPRI, r0
     8ea:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
     8ee:	4808      	ldr	r0, [pc, #32]	; (910 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     8f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     8f4:	1840      	adds	r0, r0, r1
    msr PSP, r0
     8f6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     8fa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     8fe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     900:	4308      	orrs	r0, r1
    msr CONTROL, r0
     902:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     906:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     90a:	f7ff ffb5 	bl	878 <z_arm_prep_c>
     90e:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
     910:	20000790 	.word	0x20000790

00000914 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
     914:	4b0c      	ldr	r3, [pc, #48]	; (948 <mem_manage_fault.isra.2+0x34>)
     916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
     918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
     91a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     91c:	0792      	lsls	r2, r2, #30
     91e:	d508      	bpl.n	932 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
     920:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
     922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     924:	0612      	lsls	r2, r2, #24
     926:	d504      	bpl.n	932 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
     928:	b118      	cbz	r0, 932 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     92a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     92c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     930:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <mem_manage_fault.isra.2+0x34>)
     934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
     936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     93a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
     93c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     93e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
     942:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     944:	7008      	strb	r0, [r1, #0]

	return reason;
}
     946:	4770      	bx	lr
     948:	e000ed00 	.word	0xe000ed00

0000094c <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     94c:	4b0d      	ldr	r3, [pc, #52]	; (984 <bus_fault.isra.3+0x38>)
     94e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     954:	0592      	lsls	r2, r2, #22
     956:	d508      	bpl.n	96a <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
     958:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
     95a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     95c:	0412      	lsls	r2, r2, #16
     95e:	d504      	bpl.n	96a <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
     960:	b118      	cbz	r0, 96a <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     968:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     96a:	4b06      	ldr	r3, [pc, #24]	; (984 <bus_fault.isra.3+0x38>)
     96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
     96e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     970:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     972:	bf58      	it	pl
     974:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     976:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
     978:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     97a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     980:	7008      	strb	r0, [r1, #0]

	return reason;
}
     982:	4770      	bx	lr
     984:	e000ed00 	.word	0xe000ed00

00000988 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     988:	4b07      	ldr	r3, [pc, #28]	; (9a8 <usage_fault.isra.4+0x20>)
     98a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
     98c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
     98e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
     990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
     992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
     994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     998:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     99c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     9a0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
     9a2:	2000      	movs	r0, #0
     9a4:	4770      	bx	lr
     9a6:	bf00      	nop
     9a8:	e000ed00 	.word	0xe000ed00

000009ac <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
     9ac:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     9ae:	4b36      	ldr	r3, [pc, #216]	; (a88 <z_arm_fault+0xdc>)
     9b0:	685b      	ldr	r3, [r3, #4]
{
     9b2:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
     9b8:	2500      	movs	r5, #0
     9ba:	f385 8811 	msr	BASEPRI, r5
     9be:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     9c2:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
     9c6:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
     9ca:	d112      	bne.n	9f2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
     9cc:	f002 040c 	and.w	r4, r2, #12
     9d0:	2c08      	cmp	r4, #8
     9d2:	d00e      	beq.n	9f2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
     9d4:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
     9d6:	bf4e      	itee	mi
     9d8:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
     9da:	4606      	movpl	r6, r0
			*nested_exc = true;
     9dc:	2501      	movpl	r5, #1
	*recoverable = false;
     9de:	2200      	movs	r2, #0
	switch (fault) {
     9e0:	3b03      	subs	r3, #3
	*recoverable = false;
     9e2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
     9e6:	2b03      	cmp	r3, #3
     9e8:	d847      	bhi.n	a7a <z_arm_fault+0xce>
     9ea:	e8df f003 	tbb	[pc, r3]
     9ee:	3e04      	.short	0x3e04
     9f0:	3b42      	.short	0x3b42
		return NULL;
     9f2:	462e      	mov	r6, r5
     9f4:	e7f3      	b.n	9de <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
     9f6:	4b24      	ldr	r3, [pc, #144]	; (a88 <z_arm_fault+0xdc>)
     9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     9fa:	0792      	lsls	r2, r2, #30
     9fc:	d43d      	bmi.n	a7a <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
     9fe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
     a00:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
     a04:	d008      	beq.n	a18 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
     a06:	3328      	adds	r3, #40	; 0x28
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	b1eb      	cbz	r3, a48 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
     a0c:	f10d 0107 	add.w	r1, sp, #7
     a10:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
     a12:	f7ff ff7f 	bl	914 <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
     a16:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
     a18:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a1c:	b993      	cbnz	r3, a44 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
     a1e:	2220      	movs	r2, #32
     a20:	4631      	mov	r1, r6
     a22:	a802      	add	r0, sp, #8
     a24:	f002 fad7 	bl	2fd6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
     a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a2a:	b345      	cbz	r5, a7e <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
     a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
     a30:	b922      	cbnz	r2, a3c <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
     a32:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     a36:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     a3a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
     a3c:	a902      	add	r1, sp, #8
     a3e:	4620      	mov	r0, r4
     a40:	f002 fa9a 	bl	2f78 <z_arm_fatal_error>
}
     a44:	b00a      	add	sp, #40	; 0x28
     a46:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
     a48:	4b10      	ldr	r3, [pc, #64]	; (a8c <z_arm_fault+0xe0>)
     a4a:	781b      	ldrb	r3, [r3, #0]
     a4c:	b12b      	cbz	r3, a5a <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
     a4e:	f10d 0107 	add.w	r1, sp, #7
     a52:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
     a54:	f7ff ff7a 	bl	94c <bus_fault.isra.3>
     a58:	e7dd      	b.n	a16 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
     a5a:	4b0d      	ldr	r3, [pc, #52]	; (a90 <z_arm_fault+0xe4>)
     a5c:	881c      	ldrh	r4, [r3, #0]
     a5e:	b2a4      	uxth	r4, r4
     a60:	2c00      	cmp	r4, #0
     a62:	d0d9      	beq.n	a18 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
     a64:	f7ff ff90 	bl	988 <usage_fault.isra.4>
     a68:	e7d5      	b.n	a16 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
     a6a:	f10d 0107 	add.w	r1, sp, #7
     a6e:	2000      	movs	r0, #0
     a70:	e7cf      	b.n	a12 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
     a72:	f10d 0107 	add.w	r1, sp, #7
     a76:	2000      	movs	r0, #0
     a78:	e7ec      	b.n	a54 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
     a7a:	2400      	movs	r4, #0
     a7c:	e7cc      	b.n	a18 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     a7e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
     a82:	f023 0301 	bic.w	r3, r3, #1
     a86:	e7d8      	b.n	a3a <z_arm_fault+0x8e>
     a88:	e000ed00 	.word	0xe000ed00
     a8c:	e000ed29 	.word	0xe000ed29
     a90:	e000ed2a 	.word	0xe000ed2a

00000a94 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     a94:	4a02      	ldr	r2, [pc, #8]	; (aa0 <z_arm_fault_init+0xc>)
     a96:	6953      	ldr	r3, [r2, #20]
     a98:	f043 0310 	orr.w	r3, r3, #16
     a9c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
     a9e:	4770      	bx	lr
     aa0:	e000ed00 	.word	0xe000ed00

00000aa4 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     aa4:	4804      	ldr	r0, [pc, #16]	; (ab8 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
     aa6:	2300      	movs	r3, #0
     aa8:	2120      	movs	r1, #32
     aaa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     aac:	3301      	adds	r3, #1
     aae:	2b27      	cmp	r3, #39	; 0x27
     ab0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     ab4:	d1f9      	bne.n	aaa <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     ab6:	4770      	bx	lr
     ab8:	e000e100 	.word	0xe000e100

00000abc <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
     abc:	b538      	push	{r3, r4, r5, lr}
     abe:	4605      	mov	r5, r0
	__asm__ volatile(
     ac0:	f04f 0320 	mov.w	r3, #32
     ac4:	f3ef 8411 	mrs	r4, BASEPRI
     ac8:	f383 8811 	msr	BASEPRI, r3
     acc:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
     ad0:	f001 fe38 	bl	2744 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
     ad4:	4b0a      	ldr	r3, [pc, #40]	; (b00 <z_impl_k_thread_abort+0x44>)
     ad6:	689b      	ldr	r3, [r3, #8]
     ad8:	42ab      	cmp	r3, r5
     ada:	d10b      	bne.n	af4 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     adc:	4b09      	ldr	r3, [pc, #36]	; (b04 <z_impl_k_thread_abort+0x48>)
     ade:	685a      	ldr	r2, [r3, #4]
     ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
     ae4:	b912      	cbnz	r2, aec <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
     ae6:	4620      	mov	r0, r4
     ae8:	f7ff fdf0 	bl	6cc <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     aec:	685a      	ldr	r2, [r3, #4]
     aee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     af2:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
     af4:	4620      	mov	r0, r4
}
     af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
     afa:	f002 bdb5 	b.w	3668 <z_reschedule_irqlock>
     afe:	bf00      	nop
     b00:	2000020c 	.word	0x2000020c
     b04:	e000ed00 	.word	0xe000ed00

00000b08 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
     b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
     b0a:	4b08      	ldr	r3, [pc, #32]	; (b2c <z_arm_configure_static_mpu_regions+0x24>)
     b0c:	9301      	str	r3, [sp, #4]
     b0e:	4b08      	ldr	r3, [pc, #32]	; (b30 <z_arm_configure_static_mpu_regions+0x28>)
     b10:	9302      	str	r3, [sp, #8]
     b12:	4b08      	ldr	r3, [pc, #32]	; (b34 <z_arm_configure_static_mpu_regions+0x2c>)
     b14:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
     b16:	ab01      	add	r3, sp, #4
     b18:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
     b1a:	4a07      	ldr	r2, [pc, #28]	; (b38 <z_arm_configure_static_mpu_regions+0x30>)
     b1c:	4b07      	ldr	r3, [pc, #28]	; (b3c <z_arm_configure_static_mpu_regions+0x34>)
     b1e:	2101      	movs	r1, #1
     b20:	4668      	mov	r0, sp
     b22:	f000 f891 	bl	c48 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
     b26:	b005      	add	sp, #20
     b28:	f85d fb04 	ldr.w	pc, [sp], #4
     b2c:	20000000 	.word	0x20000000
     b30:	00000000 	.word	0x00000000
     b34:	060b0000 	.word	0x060b0000
     b38:	20000000 	.word	0x20000000
     b3c:	20010000 	.word	0x20010000

00000b40 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
     b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
     b42:	4f20      	ldr	r7, [pc, #128]	; (bc4 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
     b44:	2600      	movs	r6, #0
     b46:	428e      	cmp	r6, r1
     b48:	db01      	blt.n	b4e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
     b4a:	4610      	mov	r0, r2
     b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
     b4e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
     b52:	f8dc 4004 	ldr.w	r4, [ip, #4]
     b56:	b394      	cbz	r4, bbe <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
     b58:	b15b      	cbz	r3, b72 <mpu_configure_regions+0x32>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
     b5a:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
     b5e:	ea14 0f0e 	tst.w	r4, lr
     b62:	d11a      	bne.n	b9a <mpu_configure_regions+0x5a>
		&&
     b64:	2c1f      	cmp	r4, #31
     b66:	d918      	bls.n	b9a <mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0U);
     b68:	f8dc 5000 	ldr.w	r5, [ip]
		&&
     b6c:	ea1e 0f05 	tst.w	lr, r5
     b70:	d113      	bne.n	b9a <mpu_configure_regions+0x5a>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
     b72:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
     b74:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
     b78:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
     b7c:	b2d2      	uxtb	r2, r2
     b7e:	d90f      	bls.n	ba0 <mpu_configure_regions+0x60>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
     b80:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
     b84:	d80e      	bhi.n	ba4 <mpu_configure_regions+0x64>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
     b86:	3c01      	subs	r4, #1
     b88:	fab4 f484 	clz	r4, r4
     b8c:	f1c4 041f 	rsb	r4, r4, #31
     b90:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
     b92:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
     b94:	ea4c 0404 	orr.w	r4, ip, r4
     b98:	d906      	bls.n	ba8 <mpu_configure_regions+0x68>
			return -EINVAL;
     b9a:	f06f 0215 	mvn.w	r2, #21
     b9e:	e7d4      	b.n	b4a <mpu_configure_regions+0xa>
		return REGION_32B;
     ba0:	2408      	movs	r4, #8
     ba2:	e7f6      	b.n	b92 <mpu_configure_regions+0x52>
		return REGION_4G;
     ba4:	243e      	movs	r4, #62	; 0x3e
     ba6:	e7f4      	b.n	b92 <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     ba8:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
     bac:	4315      	orrs	r5, r2
     bae:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     bb2:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
     bb6:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     bb8:	60fd      	str	r5, [r7, #12]
		reg_index++;
     bba:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     bbc:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
     bbe:	3601      	adds	r6, #1
     bc0:	e7c1      	b.n	b46 <mpu_configure_regions+0x6>
     bc2:	bf00      	nop
     bc4:	e000ed90 	.word	0xe000ed90

00000bc8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
     bc8:	4b03      	ldr	r3, [pc, #12]	; (bd8 <arm_core_mpu_enable+0x10>)
     bca:	2205      	movs	r2, #5
     bcc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
     bce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     bd2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
     bd6:	4770      	bx	lr
     bd8:	e000ed90 	.word	0xe000ed90

00000bdc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     bdc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
     be0:	4b01      	ldr	r3, [pc, #4]	; (be8 <arm_core_mpu_disable+0xc>)
     be2:	2200      	movs	r2, #0
     be4:	605a      	str	r2, [r3, #4]
}
     be6:	4770      	bx	lr
     be8:	e000ed90 	.word	0xe000ed90

00000bec <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
     bec:	4913      	ldr	r1, [pc, #76]	; (c3c <arm_mpu_init+0x50>)
     bee:	6808      	ldr	r0, [r1, #0]
     bf0:	2808      	cmp	r0, #8
{
     bf2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
     bf4:	d81e      	bhi.n	c34 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
     bf6:	f7ff fff1 	bl	bdc <arm_core_mpu_disable>
	MPU->RNR = index;
     bfa:	4c11      	ldr	r4, [pc, #68]	; (c40 <arm_mpu_init+0x54>)
     bfc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     bfe:	2200      	movs	r2, #0
     c00:	4290      	cmp	r0, r2
     c02:	f101 010c 	add.w	r1, r1, #12
     c06:	d105      	bne.n	c14 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
     c08:	4b0e      	ldr	r3, [pc, #56]	; (c44 <arm_mpu_init+0x58>)
     c0a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
     c0c:	f7ff ffdc 	bl	bc8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
     c10:	2000      	movs	r0, #0
}
     c12:	bd10      	pop	{r4, pc}
     c14:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     c16:	f851 3c0c 	ldr.w	r3, [r1, #-12]
     c1a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
     c1e:	4313      	orrs	r3, r2
     c20:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     c24:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
     c2a:	f043 0301 	orr.w	r3, r3, #1
     c2e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     c30:	3201      	adds	r2, #1
     c32:	e7e5      	b.n	c00 <arm_mpu_init+0x14>
		return -1;
     c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c38:	e7eb      	b.n	c12 <arm_mpu_init+0x26>
     c3a:	bf00      	nop
     c3c:	000039d8 	.word	0x000039d8
     c40:	e000ed90 	.word	0xe000ed90
     c44:	2000024c 	.word	0x2000024c

00000c48 <arm_core_mpu_configure_static_mpu_regions>:
{
     c48:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
     c4a:	4c03      	ldr	r4, [pc, #12]	; (c58 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
     c4c:	2301      	movs	r3, #1
     c4e:	7822      	ldrb	r2, [r4, #0]
     c50:	f7ff ff76 	bl	b40 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
     c54:	7020      	strb	r0, [r4, #0]
}
     c56:	bd10      	pop	{r4, pc}
     c58:	2000024c 	.word	0x2000024c

00000c5c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
     c5c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
     c5e:	4a08      	ldr	r2, [pc, #32]	; (c80 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
     c60:	2300      	movs	r3, #0
     c62:	7812      	ldrb	r2, [r2, #0]
     c64:	f7ff ff6c 	bl	b40 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
     c68:	f110 0f16 	cmn.w	r0, #22
     c6c:	d003      	beq.n	c76 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
     c6e:	4b05      	ldr	r3, [pc, #20]	; (c84 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
     c70:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
     c72:	2807      	cmp	r0, #7
     c74:	dd00      	ble.n	c78 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
     c76:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
     c78:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
     c7a:	611a      	str	r2, [r3, #16]
     c7c:	3001      	adds	r0, #1
     c7e:	e7f8      	b.n	c72 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
     c80:	2000024c 	.word	0x2000024c
     c84:	e000ed90 	.word	0xe000ed90

00000c88 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
     c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c8c:	b09f      	sub	sp, #124	; 0x7c
     c8e:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
     c90:	2300      	movs	r3, #0
{
     c92:	9001      	str	r0, [sp, #4]
     c94:	9104      	str	r1, [sp, #16]
	count = 0;
     c96:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
     c98:	4613      	mov	r3, r2
     c9a:	f813 0b01 	ldrb.w	r0, [r3], #1
     c9e:	9305      	str	r3, [sp, #20]
     ca0:	b158      	cbz	r0, cba <z_prf+0x32>
		if (c != '%') {
     ca2:	2825      	cmp	r0, #37	; 0x25
     ca4:	f000 8085 	beq.w	db2 <z_prf+0x12a>
			PUTC(c);
     ca8:	9904      	ldr	r1, [sp, #16]
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	4798      	blx	r3
     cae:	3001      	adds	r0, #1
     cb0:	f040 840d 	bne.w	14ce <z_prf+0x846>
     cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cb8:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
     cba:	9800      	ldr	r0, [sp, #0]
     cbc:	b01f      	add	sp, #124	; 0x7c
     cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
     cc2:	2c23      	cmp	r4, #35	; 0x23
     cc4:	d06c      	beq.n	da0 <z_prf+0x118>
     cc6:	d861      	bhi.n	d8c <z_prf+0x104>
     cc8:	2c00      	cmp	r4, #0
     cca:	d0f6      	beq.n	cba <z_prf+0x32>
					fspace = true;
     ccc:	2c20      	cmp	r4, #32
     cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     cd0:	bf08      	it	eq
     cd2:	2301      	moveq	r3, #1
     cd4:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
     cd6:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
     cda:	f8dd 8014 	ldr.w	r8, [sp, #20]
     cde:	48b9      	ldr	r0, [pc, #740]	; (fc4 <z_prf+0x33c>)
     ce0:	f818 4b01 	ldrb.w	r4, [r8], #1
     ce4:	4621      	mov	r1, r4
     ce6:	f002 f95c 	bl	2fa2 <strchr>
     cea:	2800      	cmp	r0, #0
     cec:	d1e9      	bne.n	cc2 <z_prf+0x3a>
			if (c == '*') {
     cee:	2c2a      	cmp	r4, #42	; 0x2a
     cf0:	d166      	bne.n	dc0 <z_prf+0x138>
				width = va_arg(vargs, int);
     cf2:	f856 3b04 	ldr.w	r3, [r6], #4
     cf6:	9307      	str	r3, [sp, #28]
				if (width < 0) {
     cf8:	2b00      	cmp	r3, #0
					width = -width;
     cfa:	bfbf      	itttt	lt
     cfc:	425b      	neglt	r3, r3
     cfe:	9307      	strlt	r3, [sp, #28]
					fminus = true;
     d00:	2301      	movlt	r3, #1
     d02:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
     d04:	9b05      	ldr	r3, [sp, #20]
     d06:	f898 4000 	ldrb.w	r4, [r8]
     d0a:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
     d0e:	2c2e      	cmp	r4, #46	; 0x2e
     d10:	d17c      	bne.n	e0c <z_prf+0x184>
				if (c == '*') {
     d12:	f898 3000 	ldrb.w	r3, [r8]
     d16:	2b2a      	cmp	r3, #42	; 0x2a
     d18:	d175      	bne.n	e06 <z_prf+0x17e>
					precision = va_arg(vargs, int);
     d1a:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
     d1e:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
     d22:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
     d26:	48a8      	ldr	r0, [pc, #672]	; (fc8 <z_prf+0x340>)
     d28:	4621      	mov	r1, r4
     d2a:	4627      	mov	r7, r4
     d2c:	f002 f939 	bl	2fa2 <strchr>
     d30:	2800      	cmp	r0, #0
     d32:	d06e      	beq.n	e12 <z_prf+0x18a>
				c = *format++;
     d34:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
     d36:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
     d38:	f813 4b01 	ldrb.w	r4, [r3], #1
     d3c:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
     d3e:	d107      	bne.n	d50 <z_prf+0xc8>
     d40:	2c68      	cmp	r4, #104	; 0x68
     d42:	d105      	bne.n	d50 <z_prf+0xc8>
					c = *format++;
     d44:	f108 0302 	add.w	r3, r8, #2
     d48:	f898 4001 	ldrb.w	r4, [r8, #1]
     d4c:	9305      	str	r3, [sp, #20]
					i = 'H';
     d4e:	2748      	movs	r7, #72	; 0x48
			switch (c) {
     d50:	2c67      	cmp	r4, #103	; 0x67
     d52:	d87c      	bhi.n	e4e <z_prf+0x1c6>
     d54:	2c65      	cmp	r4, #101	; 0x65
     d56:	f080 8139 	bcs.w	fcc <z_prf+0x344>
     d5a:	2c47      	cmp	r4, #71	; 0x47
     d5c:	d85d      	bhi.n	e1a <z_prf+0x192>
     d5e:	2c45      	cmp	r4, #69	; 0x45
     d60:	f080 8134 	bcs.w	fcc <z_prf+0x344>
     d64:	2c00      	cmp	r4, #0
     d66:	d0a8      	beq.n	cba <z_prf+0x32>
     d68:	2c25      	cmp	r4, #37	; 0x25
     d6a:	f000 83ac 	beq.w	14c6 <z_prf+0x83e>
				PUTC('%');
     d6e:	9904      	ldr	r1, [sp, #16]
     d70:	9b01      	ldr	r3, [sp, #4]
     d72:	2025      	movs	r0, #37	; 0x25
     d74:	4798      	blx	r3
     d76:	3001      	adds	r0, #1
     d78:	d09c      	beq.n	cb4 <z_prf+0x2c>
				PUTC(c);
     d7a:	9904      	ldr	r1, [sp, #16]
     d7c:	9b01      	ldr	r3, [sp, #4]
     d7e:	4620      	mov	r0, r4
     d80:	4798      	blx	r3
     d82:	3001      	adds	r0, #1
     d84:	d096      	beq.n	cb4 <z_prf+0x2c>
				count += 2;
     d86:	9b00      	ldr	r3, [sp, #0]
     d88:	3302      	adds	r3, #2
     d8a:	e3a2      	b.n	14d2 <z_prf+0x84a>
				switch (c) {
     d8c:	2c2d      	cmp	r4, #45	; 0x2d
     d8e:	d00a      	beq.n	da6 <z_prf+0x11e>
     d90:	2c30      	cmp	r4, #48	; 0x30
     d92:	d00b      	beq.n	dac <z_prf+0x124>
					fplus = true;
     d94:	2c2b      	cmp	r4, #43	; 0x2b
     d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d98:	bf08      	it	eq
     d9a:	2301      	moveq	r3, #1
     d9c:	9309      	str	r3, [sp, #36]	; 0x24
     d9e:	e79a      	b.n	cd6 <z_prf+0x4e>
					falt = true;
     da0:	2301      	movs	r3, #1
     da2:	9306      	str	r3, [sp, #24]
     da4:	e797      	b.n	cd6 <z_prf+0x4e>
					fminus = true;
     da6:	2301      	movs	r3, #1
     da8:	930b      	str	r3, [sp, #44]	; 0x2c
     daa:	e794      	b.n	cd6 <z_prf+0x4e>
					fzero = true;
     dac:	2301      	movs	r3, #1
     dae:	9308      	str	r3, [sp, #32]
     db0:	e791      	b.n	cd6 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
     db2:	2300      	movs	r3, #0
     db4:	9308      	str	r3, [sp, #32]
     db6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
     dba:	930b      	str	r3, [sp, #44]	; 0x2c
     dbc:	9306      	str	r3, [sp, #24]
     dbe:	e78c      	b.n	cda <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     dc0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
     dc4:	2b09      	cmp	r3, #9
				width = 0;
     dc6:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
     dc8:	d8a1      	bhi.n	d0e <z_prf+0x86>
		i = 10 * i + *p++ - '0';
     dca:	220a      	movs	r2, #10
	while (isdigit(*p)) {
     dcc:	f8dd 8014 	ldr.w	r8, [sp, #20]
     dd0:	f818 4b01 	ldrb.w	r4, [r8], #1
     dd4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
     dd8:	2b09      	cmp	r3, #9
     dda:	d898      	bhi.n	d0e <z_prf+0x86>
		i = 10 * i + *p++ - '0';
     ddc:	9b07      	ldr	r3, [sp, #28]
     dde:	f8cd 8014 	str.w	r8, [sp, #20]
     de2:	fb02 4403 	mla	r4, r2, r3, r4
     de6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
     dea:	9307      	str	r3, [sp, #28]
     dec:	e7ee      	b.n	dcc <z_prf+0x144>
     dee:	fb01 3505 	mla	r5, r1, r5, r3
     df2:	3d30      	subs	r5, #48	; 0x30
     df4:	4690      	mov	r8, r2
	while (isdigit(*p)) {
     df6:	4642      	mov	r2, r8
     df8:	f812 3b01 	ldrb.w	r3, [r2], #1
     dfc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
     e00:	2809      	cmp	r0, #9
     e02:	d9f4      	bls.n	dee <z_prf+0x166>
     e04:	e78d      	b.n	d22 <z_prf+0x9a>
	int i = 0;
     e06:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
     e08:	210a      	movs	r1, #10
     e0a:	e7f4      	b.n	df6 <z_prf+0x16e>
			precision = -1;
     e0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
     e10:	e789      	b.n	d26 <z_prf+0x9e>
     e12:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
     e16:	4607      	mov	r7, r0
     e18:	e79a      	b.n	d50 <z_prf+0xc8>
			switch (c) {
     e1a:	2c63      	cmp	r4, #99	; 0x63
     e1c:	d05a      	beq.n	ed4 <z_prf+0x24c>
     e1e:	d820      	bhi.n	e62 <z_prf+0x1da>
     e20:	2c58      	cmp	r4, #88	; 0x58
     e22:	d1a4      	bne.n	d6e <z_prf+0xe6>
				if (c == 'o') {
     e24:	2c6f      	cmp	r4, #111	; 0x6f
     e26:	f106 0904 	add.w	r9, r6, #4
     e2a:	6831      	ldr	r1, [r6, #0]
     e2c:	f040 831c 	bne.w	1468 <z_prf+0x7e0>
	if (alt_form) {
     e30:	9b06      	ldr	r3, [sp, #24]
     e32:	2b00      	cmp	r3, #0
     e34:	f000 830a 	beq.w	144c <z_prf+0x7c4>
		*buf++ = '0';
     e38:	2330      	movs	r3, #48	; 0x30
     e3a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
     e3e:	2900      	cmp	r1, #0
     e40:	f040 830f 	bne.w	1462 <z_prf+0x7da>
			*buf++ = 0;
     e44:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
     e48:	4688      	mov	r8, r1
			return 1;
     e4a:	2601      	movs	r6, #1
     e4c:	e026      	b.n	e9c <z_prf+0x214>
			switch (c) {
     e4e:	2c70      	cmp	r4, #112	; 0x70
     e50:	f000 82e7 	beq.w	1422 <z_prf+0x79a>
     e54:	d828      	bhi.n	ea8 <z_prf+0x220>
     e56:	2c6e      	cmp	r4, #110	; 0x6e
     e58:	f000 82d0 	beq.w	13fc <z_prf+0x774>
     e5c:	d8e2      	bhi.n	e24 <z_prf+0x19c>
     e5e:	2c69      	cmp	r4, #105	; 0x69
     e60:	d185      	bne.n	d6e <z_prf+0xe6>
				switch (i) {
     e62:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
     e64:	2c00      	cmp	r4, #0
     e66:	f106 0904 	add.w	r9, r6, #4
     e6a:	f280 809c 	bge.w	fa6 <z_prf+0x31e>
		*buf++ = '-';
     e6e:	232d      	movs	r3, #45	; 0x2d
     e70:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
     e74:	4261      	negs	r1, r4
		*buf++ = ' ';
     e76:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
     e7a:	4630      	mov	r0, r6
     e7c:	220a      	movs	r2, #10
     e7e:	f002 f8f6 	bl	306e <_to_x>
				if (fplus || fspace || val < 0) {
     e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
     e84:	4406      	add	r6, r0
     e86:	a817      	add	r0, sp, #92	; 0x5c
     e88:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
     e8a:	2b00      	cmp	r3, #0
     e8c:	f040 8324 	bne.w	14d8 <z_prf+0x850>
     e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     e92:	2b00      	cmp	r3, #0
     e94:	f040 8320 	bne.w	14d8 <z_prf+0x850>
     e98:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
     e9c:	2d00      	cmp	r5, #0
     e9e:	da22      	bge.n	ee6 <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
     ea0:	2500      	movs	r5, #0
     ea2:	462f      	mov	r7, r5
     ea4:	46aa      	mov	sl, r5
     ea6:	e0e5      	b.n	1074 <z_prf+0x3ec>
			switch (c) {
     ea8:	2c75      	cmp	r4, #117	; 0x75
     eaa:	d0bb      	beq.n	e24 <z_prf+0x19c>
     eac:	2c78      	cmp	r4, #120	; 0x78
     eae:	d0b9      	beq.n	e24 <z_prf+0x19c>
     eb0:	2c73      	cmp	r4, #115	; 0x73
     eb2:	f47f af5c 	bne.w	d6e <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
     eb6:	46b1      	mov	r9, r6
					precision = INT_MAX;
     eb8:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
     eba:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
     ebe:	bfb8      	it	lt
     ec0:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
     ec4:	2600      	movs	r6, #0
     ec6:	42b5      	cmp	r5, r6
     ec8:	f040 82bb 	bne.w	1442 <z_prf+0x7ba>
     ecc:	462e      	mov	r6, r5
     ece:	2500      	movs	r5, #0
     ed0:	46a8      	mov	r8, r5
     ed2:	e009      	b.n	ee8 <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
     ed4:	46b1      	mov	r9, r6
				break;
     ed6:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
     eda:	f859 3b04 	ldr.w	r3, [r9], #4
     ede:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
     ee2:	2601      	movs	r6, #1
				break;
     ee4:	4645      	mov	r5, r8
     ee6:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
     ee8:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
     eec:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
     eee:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
     ef0:	462f      	mov	r7, r5
     ef2:	46aa      	mov	sl, r5
			if (zero_head < 0) {
     ef4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
     ef8:	1991      	adds	r1, r2, r6
     efa:	9106      	str	r1, [sp, #24]
     efc:	9907      	ldr	r1, [sp, #28]
     efe:	1990      	adds	r0, r2, r6
     f00:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
     f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
     f04:	b911      	cbnz	r1, f0c <z_prf+0x284>
     f06:	2c00      	cmp	r4, #0
     f08:	f300 8304 	bgt.w	1514 <z_prf+0x88c>
			while (prefix-- > 0) {
     f0c:	eb03 0b08 	add.w	fp, r3, r8
     f10:	455b      	cmp	r3, fp
     f12:	f040 8301 	bne.w	1518 <z_prf+0x890>
			while (zero_head-- > 0) {
     f16:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
     f1a:	f080 830d 	bcs.w	1538 <z_prf+0x8b0>
			clen -= prefix;
     f1e:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
     f22:	f1ba 0f00 	cmp.w	sl, #0
     f26:	d011      	beq.n	f4c <z_prf+0x2c4>
				c = *cptr;
     f28:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
     f2c:	eb0b 0806 	add.w	r8, fp, r6
     f30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     f34:	2b09      	cmp	r3, #9
     f36:	eba8 060b 	sub.w	r6, r8, fp
     f3a:	f240 8308 	bls.w	154e <z_prf+0x8c6>
     f3e:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
     f40:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
     f44:	f080 830c 	bcs.w	1560 <z_prf+0x8d8>
				clen -= zero.predot;
     f48:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
     f4c:	b1af      	cbz	r7, f7a <z_prf+0x2f2>
     f4e:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
     f52:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
     f56:	9904      	ldr	r1, [sp, #16]
     f58:	9b01      	ldr	r3, [sp, #4]
     f5a:	4650      	mov	r0, sl
     f5c:	4798      	blx	r3
     f5e:	3001      	adds	r0, #1
     f60:	f43f aea8 	beq.w	cb4 <z_prf+0x2c>
				} while (c != '.');
     f64:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
     f68:	eba8 060b 	sub.w	r6, r8, fp
     f6c:	d1f1      	bne.n	f52 <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
     f6e:	46b8      	mov	r8, r7
     f70:	f1b8 0f00 	cmp.w	r8, #0
     f74:	f300 82fd 	bgt.w	1572 <z_prf+0x8ea>
				clen -= zero.postdot;
     f78:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
     f7a:	b195      	cbz	r5, fa2 <z_prf+0x31a>
				c = *cptr;
     f7c:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
     f80:	eb0b 0806 	add.w	r8, fp, r6
     f84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     f88:	2b09      	cmp	r3, #9
     f8a:	eba8 060b 	sub.w	r6, r8, fp
     f8e:	f240 82fb 	bls.w	1588 <z_prf+0x900>
     f92:	282e      	cmp	r0, #46	; 0x2e
     f94:	f000 82f8 	beq.w	1588 <z_prf+0x900>
				while (zero.trail-- > 0) {
     f98:	462f      	mov	r7, r5
     f9a:	2f00      	cmp	r7, #0
     f9c:	f300 82fd 	bgt.w	159a <z_prf+0x912>
				clen -= zero.trail;
     fa0:	1b76      	subs	r6, r6, r5
     fa2:	445e      	add	r6, fp
     fa4:	e30c      	b.n	15c0 <z_prf+0x938>
	} else if (fplus) {
     fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fa8:	b123      	cbz	r3, fb4 <z_prf+0x32c>
		*buf++ = '+';
     faa:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
     fac:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
     fb0:	4621      	mov	r1, r4
     fb2:	e760      	b.n	e76 <z_prf+0x1ee>
	} else if (fspace) {
     fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     fb6:	b10b      	cbz	r3, fbc <z_prf+0x334>
		*buf++ = ' ';
     fb8:	2320      	movs	r3, #32
     fba:	e7f7      	b.n	fac <z_prf+0x324>
	} else if (fspace) {
     fbc:	4621      	mov	r1, r4
     fbe:	ae17      	add	r6, sp, #92	; 0x5c
     fc0:	e75b      	b.n	e7a <z_prf+0x1f2>
     fc2:	bf00      	nop
     fc4:	00003abb 	.word	0x00003abb
     fc8:	00003ac1 	.word	0x00003ac1
				u.d = va_arg(vargs, double);
     fcc:	f106 0907 	add.w	r9, r6, #7
     fd0:	f029 0907 	bic.w	r9, r9, #7
     fd4:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
     fd8:	02d8      	lsls	r0, r3, #11
     fda:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
     fde:	02d6      	lsls	r6, r2, #11
     fe0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
     fe4:	9602      	str	r6, [sp, #8]
     fe6:	9003      	str	r0, [sp, #12]
     fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
     fec:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
     fee:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
     ff2:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
     ff6:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
     ffa:	da43      	bge.n	1084 <z_prf+0x3fc>
		*buf++ = '-';
     ffc:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
     ffe:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    1002:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    1006:	f240 73ff 	movw	r3, #2047	; 0x7ff
    100a:	4299      	cmp	r1, r3
    100c:	d155      	bne.n	10ba <z_prf+0x432>
		if (!fract) {
    100e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1012:	4313      	orrs	r3, r2
    1014:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    1018:	f107 0b03 	add.w	fp, r7, #3
    101c:	d142      	bne.n	10a4 <z_prf+0x41c>
			if (isupper(c)) {
    101e:	2c19      	cmp	r4, #25
    1020:	d83a      	bhi.n	1098 <z_prf+0x410>
				*buf++ = 'I';
    1022:	2349      	movs	r3, #73	; 0x49
    1024:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    1026:	234e      	movs	r3, #78	; 0x4e
    1028:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    102a:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    102c:	2500      	movs	r5, #0
		return buf - start;
    102e:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    1030:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    1032:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    1034:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    1038:	462f      	mov	r7, r5
    103a:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    103c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    103e:	2b00      	cmp	r3, #0
    1040:	f040 81d9 	bne.w	13f6 <z_prf+0x76e>
    1044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1046:	2b00      	cmp	r3, #0
    1048:	f040 81d5 	bne.w	13f6 <z_prf+0x76e>
    104c:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    1050:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    1054:	f1d3 0800 	rsbs	r8, r3, #0
    1058:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    105c:	ab1e      	add	r3, sp, #120	; 0x78
    105e:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    1060:	44bb      	add	fp, r7
    1062:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    1066:	3b30      	subs	r3, #48	; 0x30
    1068:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    106c:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    106e:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    1070:	f200 8237 	bhi.w	14e2 <z_prf+0x85a>
			} else if (fzero) {
    1074:	9b08      	ldr	r3, [sp, #32]
    1076:	2b00      	cmp	r3, #0
    1078:	f000 8236 	beq.w	14e8 <z_prf+0x860>
    107c:	9b07      	ldr	r3, [sp, #28]
    107e:	1b9a      	subs	r2, r3, r6
    1080:	ab17      	add	r3, sp, #92	; 0x5c
    1082:	e737      	b.n	ef4 <z_prf+0x26c>
	} else if (fplus) {
    1084:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1086:	b10b      	cbz	r3, 108c <z_prf+0x404>
		*buf++ = '+';
    1088:	232b      	movs	r3, #43	; 0x2b
    108a:	e7b8      	b.n	ffe <z_prf+0x376>
	} else if (fspace) {
    108c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    108e:	b10b      	cbz	r3, 1094 <z_prf+0x40c>
		*buf++ = ' ';
    1090:	2320      	movs	r3, #32
    1092:	e7b4      	b.n	ffe <z_prf+0x376>
	} else if (fspace) {
    1094:	af17      	add	r7, sp, #92	; 0x5c
    1096:	e7b6      	b.n	1006 <z_prf+0x37e>
				*buf++ = 'i';
    1098:	2369      	movs	r3, #105	; 0x69
    109a:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    109c:	236e      	movs	r3, #110	; 0x6e
    109e:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    10a0:	2366      	movs	r3, #102	; 0x66
    10a2:	e7c3      	b.n	102c <z_prf+0x3a4>
			if (isupper(c)) {
    10a4:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    10a6:	bf99      	ittee	ls
    10a8:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    10aa:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    10ac:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    10ae:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    10b0:	bf94      	ite	ls
    10b2:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    10b4:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    10b6:	707a      	strb	r2, [r7, #1]
    10b8:	e7b8      	b.n	102c <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    10ba:	9b02      	ldr	r3, [sp, #8]
    10bc:	9803      	ldr	r0, [sp, #12]
    10be:	430b      	orrs	r3, r1
    10c0:	930c      	str	r3, [sp, #48]	; 0x30
    10c2:	17cb      	asrs	r3, r1, #31
    10c4:	4303      	orrs	r3, r0
    10c6:	930d      	str	r3, [sp, #52]	; 0x34
    10c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    10cc:	2c46      	cmp	r4, #70	; 0x46
    10ce:	bf08      	it	eq
    10d0:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    10d2:	4313      	orrs	r3, r2
    10d4:	f000 80ff 	beq.w	12d6 <z_prf+0x64e>
		if (exp == 0) {
    10d8:	2900      	cmp	r1, #0
    10da:	f000 809f 	beq.w	121c <z_prf+0x594>
		fract |= HIGHBIT64;
    10de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    10e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    10e4:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    10e8:	9313      	str	r3, [sp, #76]	; 0x4c
    10ea:	2600      	movs	r6, #0
	while (exp <= -3) {
    10ec:	f118 0f02 	cmn.w	r8, #2
    10f0:	f2c0 80a8 	blt.w	1244 <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    10f4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    10f8:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    10fc:	f1b8 0f00 	cmp.w	r8, #0
    1100:	f300 80cc 	bgt.w	129c <z_prf+0x614>
		_rlrshift(&fract);
    1104:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    1106:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    110a:	f001 ffd2 	bl	30b2 <_rlrshift>
	while (exp < (0 + 4)) {
    110e:	f1b8 0f04 	cmp.w	r8, #4
    1112:	d1f7      	bne.n	1104 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    1114:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    1116:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    111a:	bfb8      	it	lt
    111c:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    111e:	2b47      	cmp	r3, #71	; 0x47
    1120:	f040 80e1 	bne.w	12e6 <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
    1124:	1cf2      	adds	r2, r6, #3
    1126:	db02      	blt.n	112e <z_prf+0x4a6>
    1128:	42ae      	cmp	r6, r5
    112a:	f340 80d7 	ble.w	12dc <z_prf+0x654>
			c += 'e' - 'g';
    112e:	3c02      	subs	r4, #2
    1130:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    1132:	2d00      	cmp	r5, #0
    1134:	f000 80dd 	beq.w	12f2 <z_prf+0x66a>
		if (!falt && (precision > 0)) {
    1138:	9b06      	ldr	r3, [sp, #24]
				precision--;
    113a:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    113c:	2b00      	cmp	r3, #0
    113e:	f040 80d8 	bne.w	12f2 <z_prf+0x66a>
    1142:	2d00      	cmp	r5, #0
    1144:	bfd4      	ite	le
    1146:	f04f 0800 	movle.w	r8, #0
    114a:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    114e:	2c66      	cmp	r4, #102	; 0x66
    1150:	f040 80d1 	bne.w	12f6 <z_prf+0x66e>
		if (exp < 0) {
    1154:	eb16 0a05 	adds.w	sl, r6, r5
    1158:	f140 80d5 	bpl.w	1306 <z_prf+0x67e>
	digit_count = 16;
    115c:	2310      	movs	r3, #16
    115e:	9311      	str	r3, [sp, #68]	; 0x44
    1160:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    1162:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    1166:	2200      	movs	r2, #0
    1168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    116c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    1170:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    1174:	f080 80c9 	bcs.w	130a <z_prf+0x682>
	fract += ltemp;
    1178:	9b12      	ldr	r3, [sp, #72]	; 0x48
    117a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    117c:	9915      	ldr	r1, [sp, #84]	; 0x54
    117e:	189b      	adds	r3, r3, r2
    1180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1182:	eb41 0202 	adc.w	r2, r1, r2
    1186:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    118a:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    118e:	930e      	str	r3, [sp, #56]	; 0x38
    1190:	2300      	movs	r3, #0
    1192:	930f      	str	r3, [sp, #60]	; 0x3c
    1194:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    1198:	4313      	orrs	r3, r2
    119a:	d006      	beq.n	11aa <z_prf+0x522>
		_ldiv5(&fract);
    119c:	a812      	add	r0, sp, #72	; 0x48
    119e:	f001 ff9a 	bl	30d6 <_ldiv5>
		_rlrshift(&fract);
    11a2:	a812      	add	r0, sp, #72	; 0x48
    11a4:	f001 ff85 	bl	30b2 <_rlrshift>
		decexp++;
    11a8:	3601      	adds	r6, #1
	if (c == 'f') {
    11aa:	2c66      	cmp	r4, #102	; 0x66
    11ac:	f040 80c7 	bne.w	133e <z_prf+0x6b6>
		if (decexp > 0) {
    11b0:	2e00      	cmp	r6, #0
    11b2:	f340 80b1 	ble.w	1318 <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
    11b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    11b8:	2b00      	cmp	r3, #0
    11ba:	dd07      	ble.n	11cc <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    11bc:	a911      	add	r1, sp, #68	; 0x44
    11be:	a812      	add	r0, sp, #72	; 0x48
    11c0:	f001 ffb5 	bl	312e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    11c4:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    11c6:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    11ca:	d1f4      	bne.n	11b6 <z_prf+0x52e>
			zp->predot = decexp;
    11cc:	46b2      	mov	sl, r6
    11ce:	46bb      	mov	fp, r7
			decexp = 0;
    11d0:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    11d2:	9b06      	ldr	r3, [sp, #24]
    11d4:	b913      	cbnz	r3, 11dc <z_prf+0x554>
    11d6:	2d00      	cmp	r5, #0
    11d8:	f340 80af 	ble.w	133a <z_prf+0x6b2>
			*buf++ = '.';
    11dc:	232e      	movs	r3, #46	; 0x2e
    11de:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    11e2:	2e00      	cmp	r6, #0
    11e4:	f000 80a7 	beq.w	1336 <z_prf+0x6ae>
    11e8:	2d00      	cmp	r5, #0
    11ea:	f340 80a6 	ble.w	133a <z_prf+0x6b2>
			zp->postdot = -decexp;
    11ee:	4277      	negs	r7, r6
    11f0:	42af      	cmp	r7, r5
    11f2:	bfa8      	it	ge
    11f4:	462f      	movge	r7, r5
			precision -= zp->postdot;
    11f6:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    11f8:	2d00      	cmp	r5, #0
    11fa:	dd03      	ble.n	1204 <z_prf+0x57c>
    11fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    11fe:	2b00      	cmp	r3, #0
    1200:	f300 8091 	bgt.w	1326 <z_prf+0x69e>
	if (prune_zero) {
    1204:	f1b8 0f00 	cmp.w	r8, #0
    1208:	f040 80af 	bne.w	136a <z_prf+0x6e2>
	*buf = 0;
    120c:	2300      	movs	r3, #0
	return buf - start;
    120e:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    1210:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    1214:	ebab 0b06 	sub.w	fp, fp, r6
    1218:	e710      	b.n	103c <z_prf+0x3b4>
				exp--;
    121a:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    121c:	9b02      	ldr	r3, [sp, #8]
    121e:	18db      	adds	r3, r3, r3
    1220:	9302      	str	r3, [sp, #8]
    1222:	9b03      	ldr	r3, [sp, #12]
    1224:	415b      	adcs	r3, r3
    1226:	9303      	str	r3, [sp, #12]
    1228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    122c:	2a00      	cmp	r2, #0
    122e:	f173 0300 	sbcs.w	r3, r3, #0
    1232:	daf2      	bge.n	121a <z_prf+0x592>
    1234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1238:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    123c:	e74f      	b.n	10de <z_prf+0x456>
			_rlrshift(&fract);
    123e:	a812      	add	r0, sp, #72	; 0x48
    1240:	f001 ff37 	bl	30b2 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    1244:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    1248:	f04f 0b00 	mov.w	fp, #0
    124c:	48b9      	ldr	r0, [pc, #740]	; (1534 <z_prf+0x8ac>)
    124e:	2100      	movs	r1, #0
    1250:	4559      	cmp	r1, fp
    1252:	bf08      	it	eq
    1254:	4560      	cmpeq	r0, ip
    1256:	f108 0801 	add.w	r8, r8, #1
    125a:	d3f0      	bcc.n	123e <z_prf+0x5b6>
		fract *= 5U;
    125c:	2005      	movs	r0, #5
    125e:	fba2 2300 	umull	r2, r3, r2, r0
    1262:	fb00 330c 	mla	r3, r0, ip, r3
    1266:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    126a:	46dc      	mov	ip, fp
    126c:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    126e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    1272:	f04f 0b00 	mov.w	fp, #0
    1276:	2100      	movs	r1, #0
    1278:	458b      	cmp	fp, r1
    127a:	bf08      	it	eq
    127c:	459a      	cmpeq	sl, r3
    127e:	d206      	bcs.n	128e <z_prf+0x606>
    1280:	f1bc 0f00 	cmp.w	ip, #0
    1284:	f43f af32 	beq.w	10ec <z_prf+0x464>
    1288:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    128c:	e72e      	b.n	10ec <z_prf+0x464>
			fract <<= 1;
    128e:	1892      	adds	r2, r2, r2
    1290:	415b      	adcs	r3, r3
			exp--;
    1292:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1296:	f04f 0c01 	mov.w	ip, #1
    129a:	e7ec      	b.n	1276 <z_prf+0x5ee>
		_ldiv5(&fract);
    129c:	a812      	add	r0, sp, #72	; 0x48
    129e:	f001 ff1a 	bl	30d6 <_ldiv5>
		exp--;
    12a2:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    12a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    12aa:	3601      	adds	r6, #1
    12ac:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    12b0:	2300      	movs	r3, #0
    12b2:	459b      	cmp	fp, r3
    12b4:	bf08      	it	eq
    12b6:	4582      	cmpeq	sl, r0
    12b8:	d206      	bcs.n	12c8 <z_prf+0x640>
    12ba:	f1bc 0f00 	cmp.w	ip, #0
    12be:	f43f af1d 	beq.w	10fc <z_prf+0x474>
    12c2:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    12c6:	e719      	b.n	10fc <z_prf+0x474>
			fract <<= 1;
    12c8:	1849      	adds	r1, r1, r1
    12ca:	4140      	adcs	r0, r0
			exp--;
    12cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    12d0:	f04f 0c01 	mov.w	ip, #1
    12d4:	e7ec      	b.n	12b0 <z_prf+0x628>
	if ((exp | fract) != 0) {
    12d6:	2600      	movs	r6, #0
    12d8:	46b0      	mov	r8, r6
    12da:	e713      	b.n	1104 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    12dc:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    12de:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    12e0:	b923      	cbnz	r3, 12ec <z_prf+0x664>
			c = 'f';
    12e2:	2466      	movs	r4, #102	; 0x66
    12e4:	e72d      	b.n	1142 <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    12e6:	f04f 0800 	mov.w	r8, #0
    12ea:	e730      	b.n	114e <z_prf+0x4c6>
    12ec:	f04f 0800 	mov.w	r8, #0
    12f0:	e730      	b.n	1154 <z_prf+0x4cc>
    12f2:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    12f6:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    12fa:	2310      	movs	r3, #16
    12fc:	459a      	cmp	sl, r3
    12fe:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    1300:	bfa8      	it	ge
    1302:	469a      	movge	sl, r3
    1304:	e72f      	b.n	1166 <z_prf+0x4de>
		if (exp < 0) {
    1306:	2466      	movs	r4, #102	; 0x66
    1308:	e7f7      	b.n	12fa <z_prf+0x672>
		_ldiv5(&ltemp);
    130a:	a814      	add	r0, sp, #80	; 0x50
    130c:	f001 fee3 	bl	30d6 <_ldiv5>
		_rlrshift(&ltemp);
    1310:	a814      	add	r0, sp, #80	; 0x50
    1312:	f001 fece 	bl	30b2 <_rlrshift>
    1316:	e72b      	b.n	1170 <z_prf+0x4e8>
			*buf++ = '0';
    1318:	46bb      	mov	fp, r7
    131a:	2330      	movs	r3, #48	; 0x30
    131c:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    1320:	f04f 0a00 	mov.w	sl, #0
    1324:	e755      	b.n	11d2 <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    1326:	a911      	add	r1, sp, #68	; 0x44
    1328:	a812      	add	r0, sp, #72	; 0x48
    132a:	f001 ff00 	bl	312e <_get_digit>
			precision--;
    132e:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    1330:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    1334:	e760      	b.n	11f8 <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
    1336:	4637      	mov	r7, r6
    1338:	e75e      	b.n	11f8 <z_prf+0x570>
    133a:	2700      	movs	r7, #0
    133c:	e762      	b.n	1204 <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
    133e:	a911      	add	r1, sp, #68	; 0x44
    1340:	a812      	add	r0, sp, #72	; 0x48
    1342:	f001 fef4 	bl	312e <_get_digit>
		if (falt || (precision > 0)) {
    1346:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    1348:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    134a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    134c:	bf18      	it	ne
    134e:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    1352:	2b00      	cmp	r3, #0
    1354:	d13b      	bne.n	13ce <z_prf+0x746>
    1356:	2d00      	cmp	r5, #0
    1358:	dc39      	bgt.n	13ce <z_prf+0x746>
		if (*buf++ != '0') {
    135a:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    135e:	f1b8 0f00 	cmp.w	r8, #0
    1362:	d045      	beq.n	13f0 <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
    1364:	f04f 0a00 	mov.w	sl, #0
    1368:	4657      	mov	r7, sl
		while (*--buf == '0')
    136a:	465b      	mov	r3, fp
    136c:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    1370:	2a30      	cmp	r2, #48	; 0x30
    1372:	d0fa      	beq.n	136a <z_prf+0x6e2>
		if (*buf != '.') {
    1374:	2a2e      	cmp	r2, #46	; 0x2e
    1376:	bf18      	it	ne
    1378:	469b      	movne	fp, r3
    137a:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    137c:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    1380:	2b45      	cmp	r3, #69	; 0x45
    1382:	f47f af43 	bne.w	120c <z_prf+0x584>
		if (decexp < 0) {
    1386:	2e00      	cmp	r6, #0
		*buf++ = c;
    1388:	465a      	mov	r2, fp
			decexp = -decexp;
    138a:	bfba      	itte	lt
    138c:	4276      	neglt	r6, r6
			*buf++ = '-';
    138e:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    1390:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    1392:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    1394:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    1398:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    139c:	dd0a      	ble.n	13b4 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
    139e:	2164      	movs	r1, #100	; 0x64
    13a0:	fb96 f3f1 	sdiv	r3, r6, r1
    13a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
    13a8:	f10b 0203 	add.w	r2, fp, #3
    13ac:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    13b0:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    13b4:	210a      	movs	r1, #10
    13b6:	4693      	mov	fp, r2
    13b8:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    13bc:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    13c0:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    13c4:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    13c6:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    13ca:	7056      	strb	r6, [r2, #1]
    13cc:	e71e      	b.n	120c <z_prf+0x584>
			*buf++ = '.';
    13ce:	232e      	movs	r3, #46	; 0x2e
    13d0:	f107 0b02 	add.w	fp, r7, #2
    13d4:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    13d6:	2d00      	cmp	r5, #0
    13d8:	ddc1      	ble.n	135e <z_prf+0x6d6>
    13da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    13dc:	2b00      	cmp	r3, #0
    13de:	ddbe      	ble.n	135e <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
    13e0:	a911      	add	r1, sp, #68	; 0x44
    13e2:	a812      	add	r0, sp, #72	; 0x48
    13e4:	f001 fea3 	bl	312e <_get_digit>
			precision--;
    13e8:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    13ea:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    13ee:	e7f2      	b.n	13d6 <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
    13f0:	46c2      	mov	sl, r8
    13f2:	4647      	mov	r7, r8
    13f4:	e7c2      	b.n	137c <z_prf+0x6f4>
					prefix = 1;
    13f6:	f04f 0801 	mov.w	r8, #1
    13fa:	e62f      	b.n	105c <z_prf+0x3d4>
				switch (i) {
    13fc:	46b1      	mov	r9, r6
    13fe:	2f68      	cmp	r7, #104	; 0x68
    1400:	f859 3b04 	ldr.w	r3, [r9], #4
    1404:	d005      	beq.n	1412 <z_prf+0x78a>
    1406:	dc01      	bgt.n	140c <z_prf+0x784>
    1408:	2f48      	cmp	r7, #72	; 0x48
    140a:	d007      	beq.n	141c <z_prf+0x794>
					*va_arg(vargs, int *) = count;
    140c:	9a00      	ldr	r2, [sp, #0]
    140e:	601a      	str	r2, [r3, #0]
					break;
    1410:	e001      	b.n	1416 <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
    1412:	9a00      	ldr	r2, [sp, #0]
    1414:	801a      	strh	r2, [r3, #0]
				continue;
    1416:	464e      	mov	r6, r9
    1418:	9a05      	ldr	r2, [sp, #20]
    141a:	e43d      	b.n	c98 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    141c:	9a00      	ldr	r2, [sp, #0]
    141e:	701a      	strb	r2, [r3, #0]
					break;
    1420:	e7f9      	b.n	1416 <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
    1422:	46b1      	mov	r9, r6
		*buf++ = '0';
    1424:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    1428:	2210      	movs	r2, #16
    142a:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    142e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    1432:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    1436:	f001 fe1a 	bl	306e <_to_x>
				prefix = 2;
    143a:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    143e:	1c86      	adds	r6, r0, #2
				break;
    1440:	e52c      	b.n	e9c <z_prf+0x214>
					if (cptr[clen] == '\0') {
    1442:	5d9a      	ldrb	r2, [r3, r6]
    1444:	2a00      	cmp	r2, #0
    1446:	d04a      	beq.n	14de <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
    1448:	3601      	adds	r6, #1
    144a:	e53c      	b.n	ec6 <z_prf+0x23e>
	if (alt_form) {
    144c:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    144e:	2208      	movs	r2, #8
    1450:	4620      	mov	r0, r4
    1452:	f001 fe0c 	bl	306e <_to_x>
    1456:	ae17      	add	r6, sp, #92	; 0x5c
    1458:	1ba6      	subs	r6, r4, r6
    145a:	4406      	add	r6, r0
			prefix = 0;
    145c:	f04f 0800 	mov.w	r8, #0
    1460:	e51c      	b.n	e9c <z_prf+0x214>
		*buf++ = '0';
    1462:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    1466:	e7f2      	b.n	144e <z_prf+0x7c6>
				} else if (c == 'u') {
    1468:	2c75      	cmp	r4, #117	; 0x75
    146a:	d105      	bne.n	1478 <z_prf+0x7f0>
	return _to_x(buf, value, 10);
    146c:	220a      	movs	r2, #10
    146e:	a817      	add	r0, sp, #92	; 0x5c
    1470:	f001 fdfd 	bl	306e <_to_x>
    1474:	4606      	mov	r6, r0
    1476:	e7f1      	b.n	145c <z_prf+0x7d4>
	if (alt_form) {
    1478:	9b06      	ldr	r3, [sp, #24]
    147a:	b193      	cbz	r3, 14a2 <z_prf+0x81a>
		*buf++ = '0';
    147c:	f647 0330 	movw	r3, #30768	; 0x7830
    1480:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    1484:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    1488:	2210      	movs	r2, #16
    148a:	4638      	mov	r0, r7
    148c:	f001 fdef 	bl	306e <_to_x>
	if (prefix == 'X') {
    1490:	2c58      	cmp	r4, #88	; 0x58
    1492:	d008      	beq.n	14a6 <z_prf+0x81e>
	return len + (buf - buf0);
    1494:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    1496:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    1498:	1bbe      	subs	r6, r7, r6
    149a:	4406      	add	r6, r0
						prefix = 2;
    149c:	ea4f 0843 	mov.w	r8, r3, lsl #1
    14a0:	e4fc      	b.n	e9c <z_prf+0x214>
	if (alt_form) {
    14a2:	af17      	add	r7, sp, #92	; 0x5c
    14a4:	e7f0      	b.n	1488 <z_prf+0x800>
    14a6:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    14a8:	f812 3b01 	ldrb.w	r3, [r2], #1
    14ac:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    14b0:	2919      	cmp	r1, #25
    14b2:	d803      	bhi.n	14bc <z_prf+0x834>
			*buf += 'A' - 'a';
    14b4:	3b20      	subs	r3, #32
    14b6:	f802 3c01 	strb.w	r3, [r2, #-1]
    14ba:	e7f5      	b.n	14a8 <z_prf+0x820>
	} while (*buf++);
    14bc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    14c0:	2b00      	cmp	r3, #0
    14c2:	d1f1      	bne.n	14a8 <z_prf+0x820>
    14c4:	e7e6      	b.n	1494 <z_prf+0x80c>
				PUTC('%');
    14c6:	9904      	ldr	r1, [sp, #16]
    14c8:	4620      	mov	r0, r4
    14ca:	f7ff bbee 	b.w	caa <z_prf+0x22>
				count++;
    14ce:	9b00      	ldr	r3, [sp, #0]
    14d0:	3301      	adds	r3, #1
				count += 2;
    14d2:	9300      	str	r3, [sp, #0]
				continue;
    14d4:	46b1      	mov	r9, r6
    14d6:	e79e      	b.n	1416 <z_prf+0x78e>
					prefix = 1;
    14d8:	f04f 0801 	mov.w	r8, #1
    14dc:	e4de      	b.n	e9c <z_prf+0x214>
    14de:	4615      	mov	r5, r2
    14e0:	e4f6      	b.n	ed0 <z_prf+0x248>
			cptr = buf;
    14e2:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    14e4:	2200      	movs	r2, #0
    14e6:	e507      	b.n	ef8 <z_prf+0x270>
    14e8:	ab17      	add	r3, sp, #92	; 0x5c
    14ea:	9a08      	ldr	r2, [sp, #32]
    14ec:	e504      	b.n	ef8 <z_prf+0x270>
    14ee:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    14f2:	9904      	ldr	r1, [sp, #16]
    14f4:	9b01      	ldr	r3, [sp, #4]
    14f6:	2020      	movs	r0, #32
    14f8:	4798      	blx	r3
    14fa:	3001      	adds	r0, #1
    14fc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    1500:	f43f abd8 	beq.w	cb4 <z_prf+0x2c>
				while (width-- > 0) {
    1504:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    1508:	d2f1      	bcs.n	14ee <z_prf+0x866>
				count += width;
    150a:	9900      	ldr	r1, [sp, #0]
    150c:	4421      	add	r1, r4
    150e:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    1510:	465c      	mov	r4, fp
    1512:	e4fb      	b.n	f0c <z_prf+0x284>
    1514:	46a3      	mov	fp, r4
    1516:	e7f5      	b.n	1504 <z_prf+0x87c>
				PUTC(*cptr++);
    1518:	f813 0b01 	ldrb.w	r0, [r3], #1
    151c:	9307      	str	r3, [sp, #28]
    151e:	9904      	ldr	r1, [sp, #16]
    1520:	9b01      	ldr	r3, [sp, #4]
    1522:	9208      	str	r2, [sp, #32]
    1524:	4798      	blx	r3
    1526:	3001      	adds	r0, #1
    1528:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    152c:	f47f acf0 	bne.w	f10 <z_prf+0x288>
    1530:	f7ff bbc0 	b.w	cb4 <z_prf+0x2c>
    1534:	33333332 	.word	0x33333332
				PUTC('0');
    1538:	9904      	ldr	r1, [sp, #16]
    153a:	9b01      	ldr	r3, [sp, #4]
    153c:	9207      	str	r2, [sp, #28]
    153e:	2030      	movs	r0, #48	; 0x30
    1540:	4798      	blx	r3
    1542:	3001      	adds	r0, #1
    1544:	9a07      	ldr	r2, [sp, #28]
    1546:	f47f ace6 	bne.w	f16 <z_prf+0x28e>
    154a:	f7ff bbb3 	b.w	cb4 <z_prf+0x2c>
					PUTC(c);
    154e:	9904      	ldr	r1, [sp, #16]
    1550:	9b01      	ldr	r3, [sp, #4]
    1552:	4798      	blx	r3
    1554:	3001      	adds	r0, #1
    1556:	f43f abad 	beq.w	cb4 <z_prf+0x2c>
					c = *++cptr;
    155a:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    155e:	e4e7      	b.n	f30 <z_prf+0x2a8>
					PUTC('0');
    1560:	9904      	ldr	r1, [sp, #16]
    1562:	9b01      	ldr	r3, [sp, #4]
    1564:	2030      	movs	r0, #48	; 0x30
    1566:	4798      	blx	r3
    1568:	3001      	adds	r0, #1
    156a:	f47f ace9 	bne.w	f40 <z_prf+0x2b8>
    156e:	f7ff bba1 	b.w	cb4 <z_prf+0x2c>
					PUTC('0');
    1572:	9904      	ldr	r1, [sp, #16]
    1574:	9b01      	ldr	r3, [sp, #4]
    1576:	2030      	movs	r0, #48	; 0x30
    1578:	4798      	blx	r3
    157a:	3001      	adds	r0, #1
    157c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1580:	f47f acf6 	bne.w	f70 <z_prf+0x2e8>
    1584:	f7ff bb96 	b.w	cb4 <z_prf+0x2c>
					PUTC(c);
    1588:	9904      	ldr	r1, [sp, #16]
    158a:	9b01      	ldr	r3, [sp, #4]
    158c:	4798      	blx	r3
    158e:	3001      	adds	r0, #1
    1590:	f43f ab90 	beq.w	cb4 <z_prf+0x2c>
					c = *++cptr;
    1594:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    1598:	e4f4      	b.n	f84 <z_prf+0x2fc>
					PUTC('0');
    159a:	9904      	ldr	r1, [sp, #16]
    159c:	9b01      	ldr	r3, [sp, #4]
    159e:	2030      	movs	r0, #48	; 0x30
    15a0:	4798      	blx	r3
    15a2:	3001      	adds	r0, #1
    15a4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    15a8:	f47f acf7 	bne.w	f9a <z_prf+0x312>
    15ac:	f7ff bb82 	b.w	cb4 <z_prf+0x2c>
				PUTC(*cptr++);
    15b0:	9904      	ldr	r1, [sp, #16]
    15b2:	f81b 0b01 	ldrb.w	r0, [fp], #1
    15b6:	9b01      	ldr	r3, [sp, #4]
    15b8:	4798      	blx	r3
    15ba:	3001      	adds	r0, #1
    15bc:	f43f ab7a 	beq.w	cb4 <z_prf+0x2c>
    15c0:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    15c4:	2b00      	cmp	r3, #0
    15c6:	dcf3      	bgt.n	15b0 <z_prf+0x928>
			count += clen;
    15c8:	9b00      	ldr	r3, [sp, #0]
    15ca:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    15cc:	2c00      	cmp	r4, #0
			count += clen;
    15ce:	4413      	add	r3, r2
    15d0:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    15d2:	f77f af20 	ble.w	1416 <z_prf+0x78e>
    15d6:	4625      	mov	r5, r4
    15d8:	e006      	b.n	15e8 <z_prf+0x960>
					PUTC(' ');
    15da:	9904      	ldr	r1, [sp, #16]
    15dc:	9b01      	ldr	r3, [sp, #4]
    15de:	2020      	movs	r0, #32
    15e0:	4798      	blx	r3
    15e2:	3001      	adds	r0, #1
    15e4:	f43f ab66 	beq.w	cb4 <z_prf+0x2c>
				while (width-- > 0) {
    15e8:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    15ec:	d2f5      	bcs.n	15da <z_prf+0x952>
				count += width;
    15ee:	9b00      	ldr	r3, [sp, #0]
    15f0:	4423      	add	r3, r4
    15f2:	9300      	str	r3, [sp, #0]
    15f4:	e70f      	b.n	1416 <z_prf+0x78e>
    15f6:	bf00      	nop

000015f8 <z_impl_zephyr_fputc>:
	_stdout_hook = hook;
}

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    15f8:	2902      	cmp	r1, #2
    15fa:	d102      	bne.n	1602 <z_impl_zephyr_fputc+0xa>
    15fc:	4b02      	ldr	r3, [pc, #8]	; (1608 <z_impl_zephyr_fputc+0x10>)
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	4718      	bx	r3
}
    1602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1606:	4770      	bx	lr
    1608:	20000f90 	.word	0x20000f90

0000160c <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    160c:	b40f      	push	{r0, r1, r2, r3}
    160e:	b507      	push	{r0, r1, r2, lr}
    1610:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = z_prf(fputc, DESC(stdout), format, vargs);
    1612:	2102      	movs	r1, #2
{
    1614:	f853 2b04 	ldr.w	r2, [r3], #4
	r = z_prf(fputc, DESC(stdout), format, vargs);
    1618:	4804      	ldr	r0, [pc, #16]	; (162c <printf+0x20>)
	va_start(vargs, format);
    161a:	9301      	str	r3, [sp, #4]
	r = z_prf(fputc, DESC(stdout), format, vargs);
    161c:	f7ff fb34 	bl	c88 <z_prf>
	va_end(vargs);

	return r;
}
    1620:	b003      	add	sp, #12
    1622:	f85d eb04 	ldr.w	lr, [sp], #4
    1626:	b004      	add	sp, #16
    1628:	4770      	bx	lr
    162a:	bf00      	nop
    162c:	00003163 	.word	0x00003163

00001630 <nordicsemi_nrf52_init>:
    1630:	f04f 0320 	mov.w	r3, #32
    1634:	f3ef 8211 	mrs	r2, BASEPRI
    1638:	f383 8811 	msr	BASEPRI, r3
    163c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1640:	4906      	ldr	r1, [pc, #24]	; (165c <nordicsemi_nrf52_init+0x2c>)
    1642:	2301      	movs	r3, #1
    1644:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1648:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    164c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1650:	f382 8811 	msr	BASEPRI, r2
    1654:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1658:	2000      	movs	r0, #0
    165a:	4770      	bx	lr
    165c:	4001e000 	.word	0x4001e000

00001660 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    1660:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1662:	4b09      	ldr	r3, [pc, #36]	; (1688 <gpio_nrfx_init+0x28>)
    1664:	781a      	ldrb	r2, [r3, #0]
    1666:	b96a      	cbnz	r2, 1684 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1668:	2101      	movs	r1, #1
    166a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    166c:	2006      	movs	r0, #6
    166e:	2105      	movs	r1, #5
    1670:	f7ff f890 	bl	794 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    1674:	2006      	movs	r0, #6
    1676:	f7ff f87d 	bl	774 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    167a:	4b04      	ldr	r3, [pc, #16]	; (168c <gpio_nrfx_init+0x2c>)
    167c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1680:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1684:	2000      	movs	r0, #0
    1686:	bd08      	pop	{r3, pc}
    1688:	2000024d 	.word	0x2000024d
    168c:	40006000 	.word	0x40006000

00001690 <gpiote_pin_int_cfg>:
{
    1690:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    1692:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1694:	4d55      	ldr	r5, [pc, #340]	; (17ec <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1696:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    1698:	6882      	ldr	r2, [r0, #8]
    169a:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    169e:	7918      	ldrb	r0, [r3, #4]
    16a0:	f001 031f 	and.w	r3, r1, #31
    16a4:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    16a8:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    16aa:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    16ac:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    16b0:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    16b4:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    16b8:	42b3      	cmp	r3, r6
    16ba:	d175      	bne.n	17a8 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    16bc:	fa24 f600 	lsr.w	r6, r4, r0
    16c0:	07f6      	lsls	r6, r6, #31
    16c2:	d571      	bpl.n	17a8 <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    16c4:	0084      	lsls	r4, r0, #2
    16c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    16ca:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    16ce:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
    16d2:	f026 0601 	bic.w	r6, r6, #1
    16d6:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    16da:	2401      	movs	r4, #1
    16dc:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
    16e0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    16e4:	009c      	lsls	r4, r3, #2
    16e6:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
    16ea:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
    16ee:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    16f2:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    16f6:	6890      	ldr	r0, [r2, #8]
    16f8:	40c8      	lsrs	r0, r1
    16fa:	f010 0001 	ands.w	r0, r0, #1
    16fe:	d051      	beq.n	17a4 <gpiote_pin_int_cfg+0x114>
    1700:	68d0      	ldr	r0, [r2, #12]
    1702:	40c8      	lsrs	r0, r1
    1704:	f010 0001 	ands.w	r0, r0, #1
    1708:	d04c      	beq.n	17a4 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    170a:	6950      	ldr	r0, [r2, #20]
    170c:	40c8      	lsrs	r0, r1
    170e:	f010 0001 	ands.w	r0, r0, #1
    1712:	d056      	beq.n	17c2 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    1714:	6990      	ldr	r0, [r2, #24]
    1716:	40c8      	lsrs	r0, r1
    1718:	07c0      	lsls	r0, r0, #31
    171a:	d44a      	bmi.n	17b2 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
    171c:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    171e:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    1720:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    1722:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    1726:	f000 0001 	and.w	r0, r0, #1
    172a:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    172e:	4288      	cmp	r0, r1
    1730:	bf14      	ite	ne
    1732:	2101      	movne	r1, #1
    1734:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    1736:	4d2d      	ldr	r5, [pc, #180]	; (17ec <gpiote_pin_int_cfg+0x15c>)
    1738:	2400      	movs	r4, #0
    173a:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    173e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    1742:	f010 0003 	ands.w	r0, r0, #3
    1746:	d136      	bne.n	17b6 <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1748:	00a2      	lsls	r2, r4, #2
    174a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    174e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1752:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1754:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1758:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    175c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1760:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
    1764:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1768:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    176c:	009b      	lsls	r3, r3, #2
    176e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    1772:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1774:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    1778:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    177c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1780:	4331      	orrs	r1, r6
    1782:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1786:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1788:	681b      	ldr	r3, [r3, #0]
    178a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    178c:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    178e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    1792:	f043 0301 	orr.w	r3, r3, #1
    1796:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    179a:	2301      	movs	r3, #1
    179c:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    17a0:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    17a4:	b002      	add	sp, #8
    17a6:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    17a8:	3001      	adds	r0, #1
    17aa:	2808      	cmp	r0, #8
    17ac:	f47f af7e 	bne.w	16ac <gpiote_pin_int_cfg+0x1c>
    17b0:	e798      	b.n	16e4 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    17b2:	2103      	movs	r1, #3
    17b4:	e7bf      	b.n	1736 <gpiote_pin_int_cfg+0xa6>
    17b6:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    17b8:	2c08      	cmp	r4, #8
    17ba:	d1be      	bne.n	173a <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
    17bc:	f06f 0012 	mvn.w	r0, #18
    17c0:	e7f0      	b.n	17a4 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    17c2:	6913      	ldr	r3, [r2, #16]
    17c4:	69d2      	ldr	r2, [r2, #28]
    17c6:	4053      	eors	r3, r2
    17c8:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    17cc:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
    17d0:	f011 0f01 	tst.w	r1, #1
    17d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    17d8:	bf14      	ite	ne
    17da:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    17de:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    17e2:	4313      	orrs	r3, r2
    17e4:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
    17e8:	e7dc      	b.n	17a4 <gpiote_pin_int_cfg+0x114>
    17ea:	bf00      	nop
    17ec:	40006000 	.word	0x40006000

000017f0 <gpiote_event_handler>:
{
    17f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    17f4:	4953      	ldr	r1, [pc, #332]	; (1944 <gpiote_event_handler+0x154>)
    17f6:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    17f8:	2d00      	cmp	r5, #0
    17fa:	d067      	beq.n	18cc <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
    17fc:	4b52      	ldr	r3, [pc, #328]	; (1948 <gpiote_event_handler+0x158>)
    17fe:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    1804:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    1808:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    180a:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    180e:	4320      	orrs	r0, r4
    1810:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    1814:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    1816:	69d4      	ldr	r4, [r2, #28]
    1818:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    181a:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    181e:	4054      	eors	r4, r2
    1820:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
    1822:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
    1826:	2001      	movs	r0, #1
	u32_t pin = 0U;
    1828:	2700      	movs	r7, #0
	while (level_pins) {
    182a:	2b00      	cmp	r3, #0
    182c:	d138      	bne.n	18a0 <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    182e:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1830:	680b      	ldr	r3, [r1, #0]
    1832:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1834:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    1836:	4845      	ldr	r0, [pc, #276]	; (194c <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    1838:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    183a:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    183c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    183e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    1842:	fa06 f103 	lsl.w	r1, r6, r3
    1846:	4211      	tst	r1, r2
    1848:	d013      	beq.n	1872 <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    184a:	009a      	lsls	r2, r3, #2
    184c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1850:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    1854:	6811      	ldr	r1, [r2, #0]
    1856:	b161      	cbz	r1, 1872 <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1858:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    185c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1860:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1862:	6812      	ldr	r2, [r2, #0]
    1864:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1866:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    186a:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    186e:	9a01      	ldr	r2, [sp, #4]
    1870:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1872:	3301      	adds	r3, #1
    1874:	2b08      	cmp	r3, #8
    1876:	d1e2      	bne.n	183e <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
    1878:	bb54      	cbnz	r4, 18d0 <gpiote_event_handler+0xe0>
	if (port_event) {
    187a:	b175      	cbz	r5, 189a <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
    187c:	4b32      	ldr	r3, [pc, #200]	; (1948 <gpiote_event_handler+0x158>)
    187e:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    1884:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    1888:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    188a:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
    188e:	4302      	orrs	r2, r0
    1890:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
    1894:	2401      	movs	r4, #1
	u32_t pin = 0U;
    1896:	2500      	movs	r5, #0
	while (level_pins) {
    1898:	bb8b      	cbnz	r3, 18fe <gpiote_event_handler+0x10e>
}
    189a:	b002      	add	sp, #8
    189c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    18a0:	4203      	tst	r3, r0
    18a2:	d010      	beq.n	18c6 <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    18a4:	f896 c004 	ldrb.w	ip, [r6, #4]
    18a8:	f007 021f 	and.w	r2, r7, #31
    18ac:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    18b0:	0092      	lsls	r2, r2, #2
    18b2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    18b6:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    18ba:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
    18be:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    18c2:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
    18c6:	3701      	adds	r7, #1
		bit <<= 1;
    18c8:	0040      	lsls	r0, r0, #1
    18ca:	e7ae      	b.n	182a <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    18cc:	462c      	mov	r4, r5
    18ce:	e7b2      	b.n	1836 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    18d0:	4f1d      	ldr	r7, [pc, #116]	; (1948 <gpiote_event_handler+0x158>)
    18d2:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    18d6:	f8d8 1000 	ldr.w	r1, [r8]
    18da:	2900      	cmp	r1, #0
    18dc:	d0cd      	beq.n	187a <gpiote_event_handler+0x8a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    18de:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    18e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    18e4:	688a      	ldr	r2, [r1, #8]
    18e6:	4023      	ands	r3, r4
    18e8:	4213      	tst	r3, r2
    18ea:	d003      	beq.n	18f4 <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
    18ec:	684b      	ldr	r3, [r1, #4]
    18ee:	4622      	mov	r2, r4
    18f0:	4638      	mov	r0, r7
    18f2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    18f4:	2e00      	cmp	r6, #0
    18f6:	d0c0      	beq.n	187a <gpiote_event_handler+0x8a>
    18f8:	4631      	mov	r1, r6
    18fa:	6836      	ldr	r6, [r6, #0]
    18fc:	e7f0      	b.n	18e0 <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
    18fe:	421c      	tst	r4, r3
    1900:	d01c      	beq.n	193c <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1902:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1904:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1906:	f005 021f 	and.w	r2, r5, #31
    190a:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    190e:	6908      	ldr	r0, [r1, #16]
    1910:	0092      	lsls	r2, r2, #2
    1912:	4078      	eors	r0, r7
    1914:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    1918:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    191a:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    191e:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1922:	bf18      	it	ne
    1924:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1928:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    192c:	bf08      	it	eq
    192e:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    1932:	4338      	orrs	r0, r7
    1934:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
    1938:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    193c:	3501      	adds	r5, #1
		bit <<= 1;
    193e:	0064      	lsls	r4, r4, #1
    1940:	e7aa      	b.n	1898 <gpiote_event_handler+0xa8>
    1942:	bf00      	nop
    1944:	4000617c 	.word	0x4000617c
    1948:	20001004 	.word	0x20001004
    194c:	40006000 	.word	0x40006000

00001950 <twi_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
    1950:	b510      	push	{r4, lr}
    1952:	4604      	mov	r4, r0
    1954:	2200      	movs	r2, #0
    1956:	2101      	movs	r1, #1
    1958:	2004      	movs	r0, #4
    195a:	f7fe ff1b 	bl	794 <z_arm_irq_priority_set>
	return dev->config->config_info;
    195e:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    1960:	4a06      	ldr	r2, [pc, #24]	; (197c <twi_1_init+0x2c>)
	return dev->config->config_info;
    1962:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    1964:	4623      	mov	r3, r4
    1966:	f100 0108 	add.w	r1, r0, #8
    196a:	f000 fb49 	bl	2000 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    196e:	4b04      	ldr	r3, [pc, #16]	; (1980 <twi_1_init+0x30>)
    1970:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(1);
    1972:	bf14      	ite	ne
    1974:	f06f 000f 	mvnne.w	r0, #15
    1978:	2000      	moveq	r0, #0
    197a:	bd10      	pop	{r4, pc}
    197c:	00001a59 	.word	0x00001a59
    1980:	0bad0000 	.word	0x0bad0000

00001984 <i2c_nrfx_twi_transfer>:
{
    1984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1988:	4605      	mov	r5, r0
    198a:	b087      	sub	sp, #28
    198c:	460c      	mov	r4, r1
    198e:	4617      	mov	r7, r2
    1990:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    1992:	6880      	ldr	r0, [r0, #8]
    1994:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1998:	f000 ffcc 	bl	2934 <z_impl_k_sem_take>
	return dev->config->config_info;
    199c:	682b      	ldr	r3, [r5, #0]
		if (res != NRFX_SUCCESS) {
    199e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1a54 <i2c_nrfx_twi_transfer+0xd0>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    19a2:	6898      	ldr	r0, [r3, #8]
    19a4:	f000 fb70 	bl	2088 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    19a8:	2600      	movs	r6, #0
    19aa:	42be      	cmp	r6, r7
    19ac:	d301      	bcc.n	19b2 <i2c_nrfx_twi_transfer+0x2e>
	int ret = 0;
    19ae:	2400      	movs	r4, #0
    19b0:	e02b      	b.n	1a0a <i2c_nrfx_twi_transfer+0x86>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    19b2:	f894 b008 	ldrb.w	fp, [r4, #8]
    19b6:	f01b 0a08 	ands.w	sl, fp, #8
    19ba:	d143      	bne.n	1a44 <i2c_nrfx_twi_transfer+0xc0>
		nrfx_twi_xfer_desc_t cur_xfer = {
    19bc:	2212      	movs	r2, #18
    19be:	4651      	mov	r1, sl
    19c0:	f10d 0006 	add.w	r0, sp, #6
    19c4:	f001 fb31 	bl	302a <memset>
    19c8:	6862      	ldr	r2, [r4, #4]
    19ca:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    19cc:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    19d0:	6822      	ldr	r2, [r4, #0]
    19d2:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    19d6:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    19da:	f88d 9005 	strb.w	r9, [sp, #5]
    19de:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    19e0:	d11e      	bne.n	1a20 <i2c_nrfx_twi_transfer+0x9c>
			if ((i < (num_msgs - 1)) &&
    19e2:	1e7a      	subs	r2, r7, #1
    19e4:	42b2      	cmp	r2, r6
    19e6:	d902      	bls.n	19ee <i2c_nrfx_twi_transfer+0x6a>
    19e8:	7d22      	ldrb	r2, [r4, #20]
    19ea:	0752      	lsls	r2, r2, #29
    19ec:	d51a      	bpl.n	1a24 <i2c_nrfx_twi_transfer+0xa0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    19ee:	bb4b      	cbnz	r3, 1a44 <i2c_nrfx_twi_transfer+0xc0>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    19f0:	2220      	movs	r2, #32
	return dev->config->config_info;
    19f2:	682b      	ldr	r3, [r5, #0]
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    19f4:	a901      	add	r1, sp, #4
    19f6:	6898      	ldr	r0, [r3, #8]
    19f8:	f000 fb70 	bl	20dc <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    19fc:	4540      	cmp	r0, r8
    19fe:	d013      	beq.n	1a28 <i2c_nrfx_twi_transfer+0xa4>
			if (res == NRFX_ERROR_BUSY) {
    1a00:	4b13      	ldr	r3, [pc, #76]	; (1a50 <i2c_nrfx_twi_transfer+0xcc>)
    1a02:	4298      	cmp	r0, r3
    1a04:	d021      	beq.n	1a4a <i2c_nrfx_twi_transfer+0xc6>
				ret = -EIO;
    1a06:	f06f 0404 	mvn.w	r4, #4
	return dev->config->config_info;
    1a0a:	682b      	ldr	r3, [r5, #0]
	nrfx_twi_disable(&get_dev_config(dev)->twi);
    1a0c:	6898      	ldr	r0, [r3, #8]
    1a0e:	f000 fb4b 	bl	20a8 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    1a12:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    1a14:	f000 ff68 	bl	28e8 <z_impl_k_sem_give>
}
    1a18:	4620      	mov	r0, r4
    1a1a:	b007      	add	sp, #28
    1a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t xfer_flags = 0;
    1a20:	4652      	mov	r2, sl
    1a22:	e7e6      	b.n	19f2 <i2c_nrfx_twi_transfer+0x6e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    1a24:	2240      	movs	r2, #64	; 0x40
    1a26:	e7e4      	b.n	19f2 <i2c_nrfx_twi_transfer+0x6e>
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
    1a28:	68a8      	ldr	r0, [r5, #8]
    1a2a:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    1a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1a30:	f000 ff80 	bl	2934 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
    1a34:	68ab      	ldr	r3, [r5, #8]
    1a36:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    1a38:	4543      	cmp	r3, r8
    1a3a:	f104 040c 	add.w	r4, r4, #12
    1a3e:	d1e2      	bne.n	1a06 <i2c_nrfx_twi_transfer+0x82>
	for (size_t i = 0; i < num_msgs; i++) {
    1a40:	3601      	adds	r6, #1
    1a42:	e7b2      	b.n	19aa <i2c_nrfx_twi_transfer+0x26>
			ret = -ENOTSUP;
    1a44:	f06f 0422 	mvn.w	r4, #34	; 0x22
    1a48:	e7df      	b.n	1a0a <i2c_nrfx_twi_transfer+0x86>
				ret = -EBUSY;
    1a4a:	f06f 040f 	mvn.w	r4, #15
    1a4e:	e7dc      	b.n	1a0a <i2c_nrfx_twi_transfer+0x86>
    1a50:	0bad000b 	.word	0x0bad000b
    1a54:	0bad0000 	.word	0x0bad0000

00001a58 <event_handler>:
	switch (p_event->type) {
    1a58:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
    1a5a:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
    1a5c:	2a01      	cmp	r2, #1
    1a5e:	d00a      	beq.n	1a76 <event_handler+0x1e>
    1a60:	b11a      	cbz	r2, 1a6a <event_handler+0x12>
    1a62:	2a02      	cmp	r2, #2
    1a64:	d009      	beq.n	1a7a <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
    1a66:	4a06      	ldr	r2, [pc, #24]	; (1a80 <event_handler+0x28>)
    1a68:	e000      	b.n	1a6c <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
    1a6a:	4a06      	ldr	r2, [pc, #24]	; (1a84 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    1a6c:	621a      	str	r2, [r3, #32]
	z_impl_k_sem_give(sem);
    1a6e:	f103 0010 	add.w	r0, r3, #16
    1a72:	f000 bf39 	b.w	28e8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1a76:	4a04      	ldr	r2, [pc, #16]	; (1a88 <event_handler+0x30>)
    1a78:	e7f8      	b.n	1a6c <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1a7a:	4a04      	ldr	r2, [pc, #16]	; (1a8c <event_handler+0x34>)
    1a7c:	e7f6      	b.n	1a6c <event_handler+0x14>
    1a7e:	bf00      	nop
    1a80:	0bad0001 	.word	0x0bad0001
    1a84:	0bad0000 	.word	0x0bad0000
    1a88:	0bae0001 	.word	0x0bae0001
    1a8c:	0bae0002 	.word	0x0bae0002

00001a90 <cst816s_init>:




int cst816s_init(struct device *dev)
{
    1a90:	b538      	push	{r3, r4, r5, lr}
    1a92:	4604      	mov	r4, r0
	struct cst816s_data *drv_data = dev->driver_data;
    1a94:	6885      	ldr	r5, [r0, #8]
    1a96:	4808      	ldr	r0, [pc, #32]	; (1ab8 <cst816s_init+0x28>)
    1a98:	f000 fbfe 	bl	2298 <z_impl_device_get_binding>
	//u8_t id = 0U;
	drv_data->i2c = device_get_binding(CONFIG_CST816S_I2C_MASTER_DEV_NAME);
    1a9c:	6028      	str	r0, [r5, #0]
	if (drv_data->i2c == NULL) {
    1a9e:	b140      	cbz	r0, 1ab2 <cst816s_init+0x22>

	/* read device ID */
	//i2c_reg_read_byte(drv_data->i2c, BMA421_I2C_ADDRESS,0x40, &id); 

#ifdef CONFIG_CST816S_TRIGGER
	if (cst816s_init_interrupt(dev) < 0) {
    1aa0:	4620      	mov	r0, r4
    1aa2:	f000 f82d 	bl	1b00 <cst816s_init_interrupt>
    1aa6:	2800      	cmp	r0, #0
		LOG_DBG("Could not initialize interrupts");
		return -EIO;
    1aa8:	bfac      	ite	ge
    1aaa:	2000      	movge	r0, #0
    1aac:	f06f 0004 	mvnlt.w	r0, #4
	}
#endif
	return 0;
}
    1ab0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    1ab2:	f06f 0015 	mvn.w	r0, #21
    1ab6:	e7fb      	b.n	1ab0 <cst816s_init+0x20>
    1ab8:	00003ad4 	.word	0x00003ad4

00001abc <cst816s_thread>:
int tellerio;
static void cst816s_thread(int dev_ptr, int unused)
{
	struct device *dev = INT_TO_POINTER(dev_ptr);
	struct cst816s_data *drv_data = dev->driver_data;
	tellerio++;
    1abc:	4a0f      	ldr	r2, [pc, #60]	; (1afc <cst816s_thread+0x40>)
    1abe:	6813      	ldr	r3, [r2, #0]
    1ac0:	3301      	adds	r3, #1
{
    1ac2:	b570      	push	{r4, r5, r6, lr}
	// gpio_pin_write(drv_data->gpio, 10, 1); //set port high
	//



	if (tellerio > 200) tellerio=0;
    1ac4:	2bc8      	cmp	r3, #200	; 0xc8
	struct cst816s_data *drv_data = dev->driver_data;
    1ac6:	6885      	ldr	r5, [r0, #8]
	if (tellerio > 200) tellerio=0;
    1ac8:	bfc8      	it	gt
    1aca:	2300      	movgt	r3, #0
{
    1acc:	4604      	mov	r4, r0
	if (tellerio > 200) tellerio=0;
    1ace:	6013      	str	r3, [r2, #0]
	ARG_UNUSED(unused);

	while (1) {
		k_sem_take(&drv_data->gpio_sem, K_FOREVER);
    1ad0:	3598      	adds	r5, #152	; 0x98
	return z_impl_k_sem_take(sem, timeout);
    1ad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1ad6:	4628      	mov	r0, r5
    1ad8:	f000 ff2c 	bl	2934 <z_impl_k_sem_take>
	struct cst816s_data *drv_data = dev->driver_data;
    1adc:	68a6      	ldr	r6, [r4, #8]
	if (drv_data->data_ready_handler != NULL) {
    1ade:	69f3      	ldr	r3, [r6, #28]
    1ae0:	b11b      	cbz	r3, 1aea <cst816s_thread+0x2e>
		drv_data->data_ready_handler(dev, &drv_data->data_ready_trigger);
    1ae2:	f106 0118 	add.w	r1, r6, #24
    1ae6:	4620      	mov	r0, r4
    1ae8:	4798      	blx	r3
	gpio_pin_enable_callback(drv_data->gpio, CONFIG_CST816S_GPIO_PIN_NUM);
    1aea:	68b0      	ldr	r0, [r6, #8]
					     int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->enable_callback == NULL) {
    1aec:	6843      	ldr	r3, [r0, #4]
    1aee:	691b      	ldr	r3, [r3, #16]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d0ee      	beq.n	1ad2 <cst816s_thread+0x16>
		return -ENOTSUP;
	}

	return api->enable_callback(port, access_op, pin);
    1af4:	221c      	movs	r2, #28
    1af6:	2100      	movs	r1, #0
    1af8:	4798      	blx	r3
    1afa:	e7ea      	b.n	1ad2 <cst816s_thread+0x16>
    1afc:	200000f4 	.word	0x200000f4

00001b00 <cst816s_init_interrupt>:

	return 0;
}

int cst816s_init_interrupt(struct device *dev)
{
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	4606      	mov	r6, r0
    1b04:	b086      	sub	sp, #24
	struct cst816s_data *drv_data = dev->driver_data;
    1b06:	6884      	ldr	r4, [r0, #8]
    1b08:	4823      	ldr	r0, [pc, #140]	; (1b98 <cst816s_init_interrupt+0x98>)
    1b0a:	f000 fbc5 	bl	2298 <z_impl_device_get_binding>
	/* setup data ready gpio interrupt */
	drv_data->gpio = device_get_binding(CONFIG_CST816S_GPIO_DEV_NAME);
    1b0e:	60a0      	str	r0, [r4, #8]
	if (drv_data->gpio == NULL) {
    1b10:	2800      	cmp	r0, #0
    1b12:	d03b      	beq.n	1b8c <cst816s_init_interrupt+0x8c>
	return api->config(port, access_op, pin, flags);
    1b14:	6843      	ldr	r3, [r0, #4]
    1b16:	2100      	movs	r1, #0
    1b18:	681d      	ldr	r5, [r3, #0]
    1b1a:	221c      	movs	r2, #28
    1b1c:	f44f 7393 	mov.w	r3, #294	; 0x126
    1b20:	47a8      	blx	r5
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1b22:	4b1e      	ldr	r3, [pc, #120]	; (1b9c <cst816s_init_interrupt+0x9c>)

	gpio_init_callback(&drv_data->gpio_cb,
			cst816s_gpio_callback,
			BIT(CONFIG_CST816S_GPIO_PIN_NUM));

	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
    1b24:	68a0      	ldr	r0, [r4, #8]
    1b26:	6123      	str	r3, [r4, #16]
	callback->pin_mask = pin_mask;
    1b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b2c:	6163      	str	r3, [r4, #20]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    1b2e:	6843      	ldr	r3, [r0, #4]
    1b30:	68db      	ldr	r3, [r3, #12]
	gpio_init_callback(&drv_data->gpio_cb,
    1b32:	f104 010c 	add.w	r1, r4, #12
    1b36:	b91b      	cbnz	r3, 1b40 <cst816s_init_interrupt+0x40>
		LOG_DBG("Could not set gpio callback");
		return -EIO;
    1b38:	f06f 0004 	mvn.w	r0, #4
#endif

	gpio_pin_enable_callback(drv_data->gpio, CONFIG_CST816S_GPIO_PIN_NUM);

	return 0;
}
    1b3c:	b006      	add	sp, #24
    1b3e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    1b40:	2201      	movs	r2, #1
    1b42:	4798      	blx	r3
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
    1b44:	2800      	cmp	r0, #0
    1b46:	dbf7      	blt.n	1b38 <cst816s_init_interrupt+0x38>
	z_impl_k_sem_init(sem, initial_count, limit);
    1b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1b4c:	2100      	movs	r1, #0
    1b4e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    1b52:	f001 fe03 	bl	375c <z_impl_k_sem_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1b56:	2500      	movs	r5, #0
    1b58:	f06f 0305 	mvn.w	r3, #5
    1b5c:	e9cd 5302 	strd	r5, r3, [sp, #8]
    1b60:	e9cd 5504 	strd	r5, r5, [sp, #16]
    1b64:	e9cd 6500 	strd	r6, r5, [sp]
    1b68:	4b0d      	ldr	r3, [pc, #52]	; (1ba0 <cst816s_init_interrupt+0xa0>)
    1b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b6e:	f104 0120 	add.w	r1, r4, #32
    1b72:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    1b76:	f000 ff3d 	bl	29f4 <z_impl_k_thread_create>
	gpio_pin_enable_callback(drv_data->gpio, CONFIG_CST816S_GPIO_PIN_NUM);
    1b7a:	68a0      	ldr	r0, [r4, #8]
	if (api->enable_callback == NULL) {
    1b7c:	6843      	ldr	r3, [r0, #4]
    1b7e:	691b      	ldr	r3, [r3, #16]
    1b80:	b13b      	cbz	r3, 1b92 <cst816s_init_interrupt+0x92>
	return api->enable_callback(port, access_op, pin);
    1b82:	221c      	movs	r2, #28
    1b84:	4629      	mov	r1, r5
    1b86:	4798      	blx	r3
	return 0;
    1b88:	4628      	mov	r0, r5
    1b8a:	e7d7      	b.n	1b3c <cst816s_init_interrupt+0x3c>
		return -EINVAL;
    1b8c:	f06f 0015 	mvn.w	r0, #21
    1b90:	e7d4      	b.n	1b3c <cst816s_init_interrupt+0x3c>
	return 0;
    1b92:	4618      	mov	r0, r3
    1b94:	e7d2      	b.n	1b3c <cst816s_init_interrupt+0x3c>
    1b96:	bf00      	nop
    1b98:	00003a6c 	.word	0x00003a6c
    1b9c:	00003483 	.word	0x00003483
    1ba0:	00001abd 	.word	0x00001abd

00001ba4 <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1ba4:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <errata_108+0x14>)
    1ba6:	6818      	ldr	r0, [r3, #0]
    1ba8:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1baa:	bf04      	itt	eq
    1bac:	4b03      	ldreq	r3, [pc, #12]	; (1bbc <errata_108+0x18>)
    1bae:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
    1bb0:	1f83      	subs	r3, r0, #6
    1bb2:	4258      	negs	r0, r3
    1bb4:	4158      	adcs	r0, r3
    1bb6:	4770      	bx	lr
    1bb8:	10000130 	.word	0x10000130
    1bbc:	f0000fe0 	.word	0xf0000fe0

00001bc0 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1bc0:	4b07      	ldr	r3, [pc, #28]	; (1be0 <errata_16+0x20>)
    1bc2:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
    1bc4:	2b06      	cmp	r3, #6
    1bc6:	d109      	bne.n	1bdc <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1bc8:	4b06      	ldr	r3, [pc, #24]	; (1be4 <errata_16+0x24>)
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1bd0:	3b03      	subs	r3, #3
    1bd2:	2b03      	cmp	r3, #3
    1bd4:	d802      	bhi.n	1bdc <errata_16+0x1c>
    1bd6:	4a04      	ldr	r2, [pc, #16]	; (1be8 <errata_16+0x28>)
    1bd8:	5cd0      	ldrb	r0, [r2, r3]
    1bda:	4770      	bx	lr
            }
        break;

    }

    return false;
    1bdc:	2000      	movs	r0, #0
}
    1bde:	4770      	bx	lr
    1be0:	f0000fe0 	.word	0xf0000fe0
    1be4:	f0000fe8 	.word	0xf0000fe8
    1be8:	00003ada 	.word	0x00003ada

00001bec <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    1bec:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
    1bee:	f7ff ffd9 	bl	1ba4 <errata_108>
    1bf2:	b128      	cbz	r0, 1c00 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    1bf4:	4b7c      	ldr	r3, [pc, #496]	; (1de8 <SystemInit+0x1fc>)
    1bf6:	4a7d      	ldr	r2, [pc, #500]	; (1dec <SystemInit+0x200>)
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	f3c3 2304 	ubfx	r3, r3, #8, #5
    1bfe:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
    1c00:	f7ff ffde 	bl	1bc0 <errata_16>
    1c04:	b110      	cbz	r0, 1c0c <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    1c06:	4b7a      	ldr	r3, [pc, #488]	; (1df0 <SystemInit+0x204>)
    1c08:	4a7a      	ldr	r2, [pc, #488]	; (1df4 <SystemInit+0x208>)
    1c0a:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
    1c0c:	f7ff ffca 	bl	1ba4 <errata_108>
    1c10:	b128      	cbz	r0, 1c1e <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    1c12:	4b79      	ldr	r3, [pc, #484]	; (1df8 <SystemInit+0x20c>)
    1c14:	4a79      	ldr	r2, [pc, #484]	; (1dfc <SystemInit+0x210>)
    1c16:	681b      	ldr	r3, [r3, #0]
    1c18:	f3c3 3342 	ubfx	r3, r3, #13, #3
    1c1c:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
    1c1e:	f7ff ffcf 	bl	1bc0 <errata_16>
    1c22:	b120      	cbz	r0, 1c2e <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    1c24:	4a76      	ldr	r2, [pc, #472]	; (1e00 <SystemInit+0x214>)
    1c26:	68d3      	ldr	r3, [r2, #12]
    1c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    1c2c:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
    1c2e:	f7ff ffb9 	bl	1ba4 <errata_108>
    1c32:	b140      	cbz	r0, 1c46 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    1c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c38:	2200      	movs	r2, #0
    1c3a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    1c3e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    1c42:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
    1c46:	f7ff ffbb 	bl	1bc0 <errata_16>
    1c4a:	b110      	cbz	r0, 1c52 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    1c4c:	4b6d      	ldr	r3, [pc, #436]	; (1e04 <SystemInit+0x218>)
    1c4e:	2203      	movs	r2, #3
    1c50:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
    1c52:	f7ff ffb5 	bl	1bc0 <errata_16>
    1c56:	b140      	cbz	r0, 1c6a <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    1c58:	4b6b      	ldr	r3, [pc, #428]	; (1e08 <SystemInit+0x21c>)
    1c5a:	2205      	movs	r2, #5
    1c5c:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    1c5e:	2201      	movs	r2, #1
    1c60:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    1c62:	2200      	movs	r2, #0
    1c64:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    1c66:	223f      	movs	r2, #63	; 0x3f
    1c68:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1c6a:	4b68      	ldr	r3, [pc, #416]	; (1e0c <SystemInit+0x220>)
    1c6c:	681a      	ldr	r2, [r3, #0]
    1c6e:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1c70:	bf0b      	itete	eq
    1c72:	4b67      	ldreq	r3, [pc, #412]	; (1e10 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
    1c74:	4b67      	ldrne	r3, [pc, #412]	; (1e14 <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1c76:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
    1c78:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1c7a:	bf02      	ittt	eq
    1c7c:	3308      	addeq	r3, #8
    1c7e:	681b      	ldreq	r3, [r3, #0]
    1c80:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
    1c84:	2a06      	cmp	r2, #6
    1c86:	d14d      	bne.n	1d24 <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
    1c88:	3b03      	subs	r3, #3
    1c8a:	2b03      	cmp	r3, #3
    1c8c:	d803      	bhi.n	1c96 <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
    1c8e:	4a62      	ldr	r2, [pc, #392]	; (1e18 <SystemInit+0x22c>)
    1c90:	5cd3      	ldrb	r3, [r2, r3]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d046      	beq.n	1d24 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1c9a:	4b60      	ldr	r3, [pc, #384]	; (1e1c <SystemInit+0x230>)
    1c9c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1ca0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1ca4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1ca8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    1cac:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1cb0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1cb4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1cb8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    1cbc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1cc0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1cc4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1cc8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    1ccc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1cd0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1cd4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1cd8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    1cdc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    1ce0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    1ce4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1ce8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    1cec:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1cf0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    1cf4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    1cf8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    1cfc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    1d00:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    1d04:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    1d08:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    1d0c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    1d10:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    1d14:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    1d18:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    1d1c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    1d20:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
    1d24:	f7ff ff3e 	bl	1ba4 <errata_108>
    1d28:	b128      	cbz	r0, 1d36 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    1d2a:	4b3d      	ldr	r3, [pc, #244]	; (1e20 <SystemInit+0x234>)
    1d2c:	4a3d      	ldr	r2, [pc, #244]	; (1e24 <SystemInit+0x238>)
    1d2e:	681b      	ldr	r3, [r3, #0]
    1d30:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    1d34:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
    1d36:	f7ff ff35 	bl	1ba4 <errata_108>
    1d3a:	b148      	cbz	r0, 1d50 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    1d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d40:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1d44:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    1d46:	bf44      	itt	mi
    1d48:	f06f 0201 	mvnmi.w	r2, #1
    1d4c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    1d50:	4b2e      	ldr	r3, [pc, #184]	; (1e0c <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	2b06      	cmp	r3, #6
    1d56:	d109      	bne.n	1d6c <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
    1d58:	4b2e      	ldr	r3, [pc, #184]	; (1e14 <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	3b03      	subs	r3, #3
    1d5e:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    1d60:	bf81      	itttt	hi
    1d62:	4a31      	ldrhi	r2, [pc, #196]	; (1e28 <SystemInit+0x23c>)
    1d64:	6813      	ldrhi	r3, [r2, #0]
    1d66:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
    1d6a:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1d6c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1d70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1d74:	2a00      	cmp	r2, #0
    1d76:	db03      	blt.n	1d80 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    1d78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	da2f      	bge.n	1de0 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1d80:	4b2a      	ldr	r3, [pc, #168]	; (1e2c <SystemInit+0x240>)
    1d82:	2201      	movs	r2, #1
    1d84:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1d88:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1d8c:	2a00      	cmp	r2, #0
    1d8e:	d0fb      	beq.n	1d88 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
    1d90:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    1d94:	2115      	movs	r1, #21
    1d96:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1d9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1d9e:	2a00      	cmp	r2, #0
    1da0:	d0fb      	beq.n	1d9a <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
    1da2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1da6:	2215      	movs	r2, #21
    1da8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1dac:	4b1f      	ldr	r3, [pc, #124]	; (1e2c <SystemInit+0x240>)
    1dae:	461a      	mov	r2, r3
    1db0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    1db4:	2900      	cmp	r1, #0
    1db6:	d0fb      	beq.n	1db0 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1db8:	2100      	movs	r1, #0
    1dba:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1dbe:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d0fb      	beq.n	1dbe <SystemInit+0x1d2>
  __ASM volatile ("dsb 0xF":::"memory");
    1dc6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1dca:	4919      	ldr	r1, [pc, #100]	; (1e30 <SystemInit+0x244>)
    1dcc:	4b19      	ldr	r3, [pc, #100]	; (1e34 <SystemInit+0x248>)
    1dce:	68ca      	ldr	r2, [r1, #12]
    1dd0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1dd4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1dd6:	60cb      	str	r3, [r1, #12]
    1dd8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1ddc:	bf00      	nop
    1dde:	e7fd      	b.n	1ddc <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    1de0:	4b15      	ldr	r3, [pc, #84]	; (1e38 <SystemInit+0x24c>)
    1de2:	4a16      	ldr	r2, [pc, #88]	; (1e3c <SystemInit+0x250>)
    1de4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    1de6:	bd08      	pop	{r3, pc}
    1de8:	10000324 	.word	0x10000324
    1dec:	40013540 	.word	0x40013540
    1df0:	4007c074 	.word	0x4007c074
    1df4:	baadf00d 	.word	0xbaadf00d
    1df8:	10000244 	.word	0x10000244
    1dfc:	4000053c 	.word	0x4000053c
    1e00:	e000edf0 	.word	0xe000edf0
    1e04:	400005a0 	.word	0x400005a0
    1e08:	40005610 	.word	0x40005610
    1e0c:	10000130 	.word	0x10000130
    1e10:	f0000fe0 	.word	0xf0000fe0
    1e14:	10000134 	.word	0x10000134
    1e18:	00003ade 	.word	0x00003ade
    1e1c:	4000c000 	.word	0x4000c000
    1e20:	10000258 	.word	0x10000258
    1e24:	40000ee4 	.word	0x40000ee4
    1e28:	4000173c 	.word	0x4000173c
    1e2c:	4001e000 	.word	0x4001e000
    1e30:	e000ed00 	.word	0xe000ed00
    1e34:	05fa0004 	.word	0x05fa0004
    1e38:	20000fbc 	.word	0x20000fbc
    1e3c:	03d09000 	.word	0x03d09000

00001e40 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    1e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    1e42:	4b34      	ldr	r3, [pc, #208]	; (1f14 <twi_rx_start_transfer+0xd4>)
    1e44:	9301      	str	r3, [sp, #4]
{
    1e46:	460d      	mov	r5, r1

    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    1e48:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    1e4c:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    1e4e:	f001 fb3a 	bl	34c6 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    1e52:	f44f 7192 	mov.w	r1, #292	; 0x124
    1e56:	f001 fb36 	bl	34c6 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    1e5a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    1e5e:	f001 fb32 	bl	34c6 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    1e62:	f44f 7184 	mov.w	r1, #264	; 0x108
    1e66:	f001 fb2e 	bl	34c6 <nrf_twi_event_clear>

    p_cb->bytes_transferred = 0;
    1e6a:	2300      	movs	r3, #0
    1e6c:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    1e6e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    1e72:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1e74:	2b01      	cmp	r3, #1
    1e76:	d118      	bne.n	1eaa <twi_rx_start_transfer+0x6a>
    1e78:	6a2b      	ldr	r3, [r5, #32]
    1e7a:	065b      	lsls	r3, r3, #25
    1e7c:	d415      	bmi.n	1eaa <twi_rx_start_transfer+0x6a>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    1e7e:	2302      	movs	r3, #2
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    1e80:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    1e84:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    1e88:	2a02      	cmp	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e8a:	f04f 0301 	mov.w	r3, #1
    1e8e:	6223      	str	r3, [r4, #32]
    1e90:	bf18      	it	ne
    1e92:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    1e94:	682b      	ldr	r3, [r5, #0]
    1e96:	b193      	cbz	r3, 1ebe <twi_rx_start_transfer+0x7e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    1e98:	f240 2386 	movw	r3, #646	; 0x286
    1e9c:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    1e9e:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1ea0:	481d      	ldr	r0, [pc, #116]	; (1f18 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    1ea2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    1ea6:	b003      	add	sp, #12
    1ea8:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    1eaa:	2301      	movs	r3, #1
    1eac:	e7e8      	b.n	1e80 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    1eae:	4629      	mov	r1, r5
    1eb0:	4620      	mov	r0, r4
    1eb2:	f001 fb30 	bl	3516 <twi_transfer>
        while ((hw_timeout > 0) &&
    1eb6:	b128      	cbz	r0, 1ec4 <twi_rx_start_transfer+0x84>
               hw_timeout--;
    1eb8:	9b01      	ldr	r3, [sp, #4]
    1eba:	3b01      	subs	r3, #1
    1ebc:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    1ebe:	9b01      	ldr	r3, [sp, #4]
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	dcf4      	bgt.n	1eae <twi_rx_start_transfer+0x6e>
        if (p_cb->error)
    1ec4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    1ec8:	b95b      	cbnz	r3, 1ee2 <twi_rx_start_transfer+0xa2>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1eca:	4813      	ldr	r0, [pc, #76]	; (1f18 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    1ecc:	9b01      	ldr	r3, [sp, #4]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	dce9      	bgt.n	1ea6 <twi_rx_start_transfer+0x66>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    1ed2:	2300      	movs	r3, #0
    1ed4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    1ed8:	2305      	movs	r3, #5
    1eda:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    1ede:	480f      	ldr	r0, [pc, #60]	; (1f1c <twi_rx_start_transfer+0xdc>)
    return ret_code;
    1ee0:	e7e1      	b.n	1ea6 <twi_rx_start_transfer+0x66>
    uint32_t error_source = p_reg->ERRORSRC;
    1ee2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    1ee6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    1eea:	2b00      	cmp	r3, #0
    1eec:	d0ed      	beq.n	1eca <twi_rx_start_transfer+0x8a>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    1eee:	4a0c      	ldr	r2, [pc, #48]	; (1f20 <twi_rx_start_transfer+0xe0>)
    1ef0:	480a      	ldr	r0, [pc, #40]	; (1f1c <twi_rx_start_transfer+0xdc>)
    1ef2:	f013 0f01 	tst.w	r3, #1
    1ef6:	bf18      	it	ne
    1ef8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1efa:	f013 0f02 	tst.w	r3, #2
    1efe:	f102 0201 	add.w	r2, r2, #1
    1f02:	bf18      	it	ne
    1f04:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1f06:	f013 0f04 	tst.w	r3, #4
    1f0a:	4b06      	ldr	r3, [pc, #24]	; (1f24 <twi_rx_start_transfer+0xe4>)
    1f0c:	bf18      	it	ne
    1f0e:	4618      	movne	r0, r3
    1f10:	e7dc      	b.n	1ecc <twi_rx_start_transfer+0x8c>
    1f12:	bf00      	nop
    1f14:	000186a0 	.word	0x000186a0
    1f18:	0bad0000 	.word	0x0bad0000
    1f1c:	0bad0001 	.word	0x0bad0001
    1f20:	0bae0000 	.word	0x0bae0000
    1f24:	0bae0002 	.word	0x0bae0002

00001f28 <twi_tx_start_transfer>:
{
    1f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
    1f2a:	4b30      	ldr	r3, [pc, #192]	; (1fec <twi_tx_start_transfer+0xc4>)
    1f2c:	9301      	str	r3, [sp, #4]
{
    1f2e:	460d      	mov	r5, r1
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    1f30:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    1f34:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    1f36:	f001 fac6 	bl	34c6 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    1f3a:	f44f 7192 	mov.w	r1, #292	; 0x124
    1f3e:	f001 fac2 	bl	34c6 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    1f42:	f44f 718e 	mov.w	r1, #284	; 0x11c
    1f46:	f001 fabe 	bl	34c6 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    1f4a:	f44f 7184 	mov.w	r1, #264	; 0x108
    1f4e:	f001 faba 	bl	34c6 <nrf_twi_event_clear>
    p_reg->SHORTS = mask;
    1f52:	2300      	movs	r3, #0
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    1f54:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    1f58:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
    1f5c:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    1f5e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1f62:	2301      	movs	r3, #1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    1f64:	429a      	cmp	r2, r3
    1f66:	6203      	str	r3, [r0, #32]
    (void)twi_send_byte(p_twi, p_cb);
    1f68:	4629      	mov	r1, r5
    1f6a:	bf18      	it	ne
    1f6c:	6083      	strne	r3, [r0, #8]
    1f6e:	f001 fab2 	bl	34d6 <twi_send_byte>
    if (p_cb->handler)
    1f72:	682b      	ldr	r3, [r5, #0]
    1f74:	b183      	cbz	r3, 1f98 <twi_tx_start_transfer+0x70>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    1f76:	f240 2386 	movw	r3, #646	; 0x286
    1f7a:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    1f7c:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1f7e:	481c      	ldr	r0, [pc, #112]	; (1ff0 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    1f80:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    1f84:	b003      	add	sp, #12
    1f86:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    1f88:	4629      	mov	r1, r5
    1f8a:	4620      	mov	r0, r4
    1f8c:	f001 fac3 	bl	3516 <twi_transfer>
        while ((hw_timeout > 0) &&
    1f90:	b128      	cbz	r0, 1f9e <twi_tx_start_transfer+0x76>
            hw_timeout--;
    1f92:	9b01      	ldr	r3, [sp, #4]
    1f94:	3b01      	subs	r3, #1
    1f96:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    1f98:	9b01      	ldr	r3, [sp, #4]
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	dcf4      	bgt.n	1f88 <twi_tx_start_transfer+0x60>
        if (p_cb->error)
    1f9e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    1fa2:	b95b      	cbnz	r3, 1fbc <twi_tx_start_transfer+0x94>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1fa4:	4812      	ldr	r0, [pc, #72]	; (1ff0 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    1fa6:	9b01      	ldr	r3, [sp, #4]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	dceb      	bgt.n	1f84 <twi_tx_start_transfer+0x5c>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    1fac:	2300      	movs	r3, #0
    1fae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    1fb2:	2305      	movs	r3, #5
    1fb4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    1fb8:	480e      	ldr	r0, [pc, #56]	; (1ff4 <twi_tx_start_transfer+0xcc>)
    return ret_code;
    1fba:	e7e3      	b.n	1f84 <twi_tx_start_transfer+0x5c>
    uint32_t error_source = p_reg->ERRORSRC;
    1fbc:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    1fc0:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d0ed      	beq.n	1fa4 <twi_tx_start_transfer+0x7c>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    1fc8:	4a0b      	ldr	r2, [pc, #44]	; (1ff8 <twi_tx_start_transfer+0xd0>)
    1fca:	480a      	ldr	r0, [pc, #40]	; (1ff4 <twi_tx_start_transfer+0xcc>)
    1fcc:	f013 0f01 	tst.w	r3, #1
    1fd0:	bf18      	it	ne
    1fd2:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1fd4:	f013 0f02 	tst.w	r3, #2
    1fd8:	f102 0201 	add.w	r2, r2, #1
    1fdc:	bf18      	it	ne
    1fde:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1fe0:	f013 0f04 	tst.w	r3, #4
    1fe4:	4b05      	ldr	r3, [pc, #20]	; (1ffc <twi_tx_start_transfer+0xd4>)
    1fe6:	bf18      	it	ne
    1fe8:	4618      	movne	r0, r3
    1fea:	e7dc      	b.n	1fa6 <twi_tx_start_transfer+0x7e>
    1fec:	000186a0 	.word	0x000186a0
    1ff0:	0bad0000 	.word	0x0bad0000
    1ff4:	0bad0001 	.word	0x0bad0001
    1ff8:	0bae0000 	.word	0x0bae0000
    1ffc:	0bae0002 	.word	0x0bae0002

00002000 <nrfx_twi_init>:
{
    2000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    2002:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    2004:	4d1d      	ldr	r5, [pc, #116]	; (207c <nrfx_twi_init+0x7c>)
    2006:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    200a:	fb0c fc07 	mul.w	ip, ip, r7
    200e:	eb05 040c 	add.w	r4, r5, ip
    2012:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2016:	bb7e      	cbnz	r6, 2078 <nrfx_twi_init+0x78>
    p_cb->p_context       = p_context;
    2018:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    201a:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    201c:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    201e:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
    2022:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
    2026:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    202a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
    202e:	680c      	ldr	r4, [r1, #0]
    p_cb->handler         = event_handler;
    2030:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2034:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    2038:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
    203c:	f240 6c0c 	movw	ip, #1548	; 0x60c
    2040:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    2044:	684b      	ldr	r3, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    2046:	6800      	ldr	r0, [r0, #0]
    2048:	f503 7ee0 	add.w	lr, r3, #448	; 0x1c0
    204c:	f846 c02e 	str.w	ip, [r6, lr, lsl #2]
    p_reg->PSELSCL = scl_pin;
    2050:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    2054:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    2058:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    205a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    205e:	b11a      	cbz	r2, 2068 <nrfx_twi_init+0x68>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    2060:	f340 3007 	sbfx	r0, r0, #12, #8
    2064:	f7fe fb86 	bl	774 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    2068:	233c      	movs	r3, #60	; 0x3c
    206a:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    206e:	4804      	ldr	r0, [pc, #16]	; (2080 <nrfx_twi_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    2070:	2301      	movs	r3, #1
    2072:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    2076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    2078:	4802      	ldr	r0, [pc, #8]	; (2084 <nrfx_twi_init+0x84>)
    207a:	e7fc      	b.n	2076 <nrfx_twi_init+0x76>
    207c:	200000f8 	.word	0x200000f8
    2080:	0bad0000 	.word	0x0bad0000
    2084:	0bad0005 	.word	0x0bad0005

00002088 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    2088:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    208a:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    208c:	2105      	movs	r1, #5
    208e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    2092:	4a04      	ldr	r2, [pc, #16]	; (20a4 <nrfx_twi_enable+0x1c>)
    2094:	213c      	movs	r1, #60	; 0x3c
    2096:	fb01 2303 	mla	r3, r1, r3, r2
    209a:	2202      	movs	r2, #2
    209c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    20a0:	4770      	bx	lr
    20a2:	bf00      	nop
    20a4:	200000f8 	.word	0x200000f8

000020a8 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    20a8:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    20aa:	490a      	ldr	r1, [pc, #40]	; (20d4 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    20ac:	7902      	ldrb	r2, [r0, #4]
    20ae:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    20b2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    20b6:	f021 0103 	bic.w	r1, r1, #3
    20ba:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    20be:	2100      	movs	r1, #0
    20c0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    20c4:	4b04      	ldr	r3, [pc, #16]	; (20d8 <nrfx_twi_disable+0x30>)
    20c6:	213c      	movs	r1, #60	; 0x3c
    20c8:	fb01 3202 	mla	r2, r1, r2, r3
    20cc:	2301      	movs	r3, #1
    20ce:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
    20d2:	4770      	bx	lr
    20d4:	00044286 	.word	0x00044286
    20d8:	200000f8 	.word	0x200000f8

000020dc <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    20dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    20e0:	4d32      	ldr	r5, [pc, #200]	; (21ac <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    20e2:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    20e6:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    20ea:	233c      	movs	r3, #60	; 0x3c
    20ec:	fb03 5308 	mla	r3, r3, r8, r5
{
    20f0:	460e      	mov	r6, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    20f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    20f6:	2b01      	cmp	r3, #1
{
    20f8:	4696      	mov	lr, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    20fa:	d104      	bne.n	2106 <nrfx_twi_xfer+0x2a>
    20fc:	780b      	ldrb	r3, [r1, #0]
    20fe:	2b01      	cmp	r3, #1
    2100:	d106      	bne.n	2110 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
    2102:	482b      	ldr	r0, [pc, #172]	; (21b0 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    2104:	e011      	b.n	212a <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    2106:	2b02      	cmp	r3, #2
    2108:	d102      	bne.n	2110 <nrfx_twi_xfer+0x34>
    210a:	780b      	ldrb	r3, [r1, #0]
    210c:	2b01      	cmp	r3, #1
    210e:	d1f8      	bne.n	2102 <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
    2110:	243c      	movs	r4, #60	; 0x3c
    p_reg->INTENCLR = mask;
    2112:	4b28      	ldr	r3, [pc, #160]	; (21b4 <nrfx_twi_xfer+0xd8>)
    2114:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    2118:	fb04 5408 	mla	r4, r4, r8, r5
    211c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2120:	b12b      	cbz	r3, 212e <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    2122:	68a3      	ldr	r3, [r4, #8]
        return err_code;
    2124:	4824      	ldr	r0, [pc, #144]	; (21b8 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
    2126:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    212e:	f08e 0304 	eor.w	r3, lr, #4
    2132:	f3c3 0380 	ubfx	r3, r3, #2, #1
    2136:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    p_cb->flags       = flags;
    213a:	f8c4 e020 	str.w	lr, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    213e:	46b4      	mov	ip, r6
    2140:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2144:	f104 070c 	add.w	r7, r4, #12
    2148:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    214a:	f8dc 3000 	ldr.w	r3, [ip]
    214e:	603b      	str	r3, [r7, #0]
    p_cb->curr_length = p_xfer_desc->primary_length;
    2150:	6873      	ldr	r3, [r6, #4]
    2152:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    2154:	68f3      	ldr	r3, [r6, #12]
    2156:	6263      	str	r3, [r4, #36]	; 0x24
    p_reg->ADDRESS = address;
    2158:	7873      	ldrb	r3, [r6, #1]
    215a:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    215e:	7833      	ldrb	r3, [r6, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    2160:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    2164:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    2166:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    216a:	d01a      	beq.n	21a2 <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    216c:	b9b3      	cbnz	r3, 219c <nrfx_twi_xfer+0xc0>
    216e:	f3ce 1e40 	ubfx	lr, lr, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    2172:	233c      	movs	r3, #60	; 0x3c
    2174:	fb03 5308 	mla	r3, r3, r8, r5
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    2178:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    217a:	f883 e02c 	strb.w	lr, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    217e:	4648      	mov	r0, r9
    2180:	f7ff fed2 	bl	1f28 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    2184:	233c      	movs	r3, #60	; 0x3c
    2186:	fb03 f808 	mul.w	r8, r3, r8
    218a:	eb05 0208 	add.w	r2, r5, r8
    218e:	f855 3008 	ldr.w	r3, [r5, r8]
    2192:	2b00      	cmp	r3, #0
    2194:	d1c9      	bne.n	212a <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
    2196:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    219a:	e7c6      	b.n	212a <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    219c:	f04f 0e01 	mov.w	lr, #1
    21a0:	e7e7      	b.n	2172 <nrfx_twi_xfer+0x96>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    21a2:	4651      	mov	r1, sl
    21a4:	4648      	mov	r0, r9
    21a6:	f7ff fe4b 	bl	1e40 <twi_rx_start_transfer>
    21aa:	e7eb      	b.n	2184 <nrfx_twi_xfer+0xa8>
    21ac:	200000f8 	.word	0x200000f8
    21b0:	0bad0005 	.word	0x0bad0005
    21b4:	00044286 	.word	0x00044286
    21b8:	0bad000b 	.word	0x0bad000b

000021bc <nrfx_twi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
    21bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    21be:	4c29      	ldr	r4, [pc, #164]	; (2264 <nrfx_twi_1_irq_handler+0xa8>)
{
    21c0:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    21c2:	4621      	mov	r1, r4
    21c4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    21c8:	f001 f9a5 	bl	3516 <twi_transfer>
    21cc:	46a4      	mov	ip, r4
    21ce:	b9e0      	cbnz	r0, 220a <nrfx_twi_1_irq_handler+0x4e>
    if (!p_cb->error &&
    21d0:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    21d4:	6a26      	ldr	r6, [r4, #32]
    21d6:	b9ef      	cbnz	r7, 2214 <nrfx_twi_1_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    21d8:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    21da:	1e9a      	subs	r2, r3, #2
    21dc:	2a01      	cmp	r2, #1
    21de:	d819      	bhi.n	2214 <nrfx_twi_1_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    21e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    21e2:	69a2      	ldr	r2, [r4, #24]
    21e4:	4291      	cmp	r1, r2
    21e6:	d115      	bne.n	2214 <nrfx_twi_1_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    21e8:	69e2      	ldr	r2, [r4, #28]
    21ea:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    21ec:	f3c6 1640 	ubfx	r6, r6, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    21f0:	6962      	ldr	r2, [r4, #20]
    21f2:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    21f4:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    21f6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    21fa:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    21fe:	4621      	mov	r1, r4
    2200:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    2204:	d103      	bne.n	220e <nrfx_twi_1_irq_handler+0x52>
            (void)twi_tx_start_transfer(p_twi, p_cb);
    2206:	f7ff fe8f 	bl	1f28 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
}
    220a:	b007      	add	sp, #28
    220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    220e:	f7ff fe17 	bl	1e40 <twi_rx_start_transfer>
    2212:	e7fa      	b.n	220a <nrfx_twi_1_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
    2214:	4d14      	ldr	r5, [pc, #80]	; (2268 <nrfx_twi_1_irq_handler+0xac>)
    2216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2218:	ac01      	add	r4, sp, #4
    221a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    221c:	682b      	ldr	r3, [r5, #0]
    221e:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
    2220:	b1e7      	cbz	r7, 225c <nrfx_twi_1_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
    2222:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    2226:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    222a:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    222e:	0798      	lsls	r0, r3, #30
    2230:	d50c      	bpl.n	224c <nrfx_twi_1_irq_handler+0x90>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    2232:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    2234:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    2238:	2300      	movs	r3, #0
    223a:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)))
    223e:	0773      	lsls	r3, r6, #29
    2240:	d4e3      	bmi.n	220a <nrfx_twi_1_irq_handler+0x4e>
            p_cb->handler(&event, p_cb->p_context);
    2242:	e9dc 3100 	ldrd	r3, r1, [ip]
    2246:	4668      	mov	r0, sp
    2248:	4798      	blx	r3
}
    224a:	e7de      	b.n	220a <nrfx_twi_1_irq_handler+0x4e>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    224c:	0759      	lsls	r1, r3, #29
    224e:	d501      	bpl.n	2254 <nrfx_twi_1_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    2250:	2302      	movs	r3, #2
    2252:	e7ef      	b.n	2234 <nrfx_twi_1_irq_handler+0x78>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    2254:	07da      	lsls	r2, r3, #31
    2256:	d5ef      	bpl.n	2238 <nrfx_twi_1_irq_handler+0x7c>
                event.type = NRFX_TWI_EVT_OVERRUN;
    2258:	2303      	movs	r3, #3
    225a:	e7eb      	b.n	2234 <nrfx_twi_1_irq_handler+0x78>
            event.type = NRFX_TWI_EVT_DONE;
    225c:	f88d 7000 	strb.w	r7, [sp]
    2260:	e7ea      	b.n	2238 <nrfx_twi_1_irq_handler+0x7c>
    2262:	bf00      	nop
    2264:	200000f8 	.word	0x200000f8
    2268:	20000104 	.word	0x20000104

0000226c <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    226c:	4b09      	ldr	r3, [pc, #36]	; (2294 <z_sys_device_do_config_level+0x28>)
{
    226e:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    2270:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2274:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    2276:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    2278:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    227c:	42a5      	cmp	r5, r4
    227e:	d800      	bhi.n	2282 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    2280:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    2282:	6823      	ldr	r3, [r4, #0]
    2284:	4620      	mov	r0, r4
    2286:	685b      	ldr	r3, [r3, #4]
    2288:	4798      	blx	r3
		if (retval != 0) {
    228a:	b100      	cbz	r0, 228e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    228c:	6066      	str	r6, [r4, #4]
								info++) {
    228e:	340c      	adds	r4, #12
    2290:	e7f4      	b.n	227c <z_sys_device_do_config_level+0x10>
    2292:	bf00      	nop
    2294:	00003a54 	.word	0x00003a54

00002298 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    2298:	4b10      	ldr	r3, [pc, #64]	; (22dc <z_impl_device_get_binding+0x44>)
{
    229a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    229c:	4c10      	ldr	r4, [pc, #64]	; (22e0 <z_impl_device_get_binding+0x48>)
{
    229e:	4605      	mov	r5, r0
    22a0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    22a2:	429c      	cmp	r4, r3
    22a4:	d104      	bne.n	22b0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    22a6:	4c0e      	ldr	r4, [pc, #56]	; (22e0 <z_impl_device_get_binding+0x48>)
    22a8:	42b4      	cmp	r4, r6
    22aa:	d109      	bne.n	22c0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    22ac:	2400      	movs	r4, #0
    22ae:	e012      	b.n	22d6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    22b0:	6862      	ldr	r2, [r4, #4]
    22b2:	b11a      	cbz	r2, 22bc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    22b4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    22b6:	6812      	ldr	r2, [r2, #0]
    22b8:	42aa      	cmp	r2, r5
    22ba:	d00c      	beq.n	22d6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    22bc:	340c      	adds	r4, #12
    22be:	e7f0      	b.n	22a2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    22c0:	6863      	ldr	r3, [r4, #4]
    22c2:	b90b      	cbnz	r3, 22c8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    22c4:	340c      	adds	r4, #12
    22c6:	e7ef      	b.n	22a8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    22c8:	6823      	ldr	r3, [r4, #0]
    22ca:	4628      	mov	r0, r5
    22cc:	6819      	ldr	r1, [r3, #0]
    22ce:	f000 fe76 	bl	2fbe <strcmp>
    22d2:	2800      	cmp	r0, #0
    22d4:	d1f6      	bne.n	22c4 <z_impl_device_get_binding+0x2c>
}
    22d6:	4620      	mov	r0, r4
    22d8:	bd70      	pop	{r4, r5, r6, pc}
    22da:	bf00      	nop
    22dc:	20001028 	.word	0x20001028
    22e0:	20000fc8 	.word	0x20000fc8

000022e4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    22e4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    22e6:	4d0b      	ldr	r5, [pc, #44]	; (2314 <idle+0x30>)
	__asm__ volatile(
    22e8:	f04f 0220 	mov.w	r2, #32
    22ec:	f3ef 8311 	mrs	r3, BASEPRI
    22f0:	f382 8811 	msr	BASEPRI, r2
    22f4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    22f8:	f001 fa5a 	bl	37b0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    22fc:	2101      	movs	r1, #1
    22fe:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    2300:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2302:	bfd8      	it	le
    2304:	4608      	movle	r0, r1
    2306:	f001 fa63 	bl	37d0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    230a:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    230c:	f7fe faa0 	bl	850 <arch_cpu_idle>
    2310:	e7ea      	b.n	22e8 <idle+0x4>
    2312:	bf00      	nop
    2314:	2000020c 	.word	0x2000020c

00002318 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2318:	4802      	ldr	r0, [pc, #8]	; (2324 <z_bss_zero+0xc>)
    231a:	4a03      	ldr	r2, [pc, #12]	; (2328 <z_bss_zero+0x10>)
    231c:	2100      	movs	r1, #0
    231e:	1a12      	subs	r2, r2, r0
    2320:	f000 be83 	b.w	302a <memset>
    2324:	20000000 	.word	0x20000000
    2328:	20000250 	.word	0x20000250

0000232c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    232c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    232e:	4806      	ldr	r0, [pc, #24]	; (2348 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    2330:	4a06      	ldr	r2, [pc, #24]	; (234c <z_data_copy+0x20>)
    2332:	4907      	ldr	r1, [pc, #28]	; (2350 <z_data_copy+0x24>)
    2334:	1a12      	subs	r2, r2, r0
    2336:	f000 fe4e 	bl	2fd6 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    233a:	4a06      	ldr	r2, [pc, #24]	; (2354 <z_data_copy+0x28>)
    233c:	4906      	ldr	r1, [pc, #24]	; (2358 <z_data_copy+0x2c>)
    233e:	4807      	ldr	r0, [pc, #28]	; (235c <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    2340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    2344:	f000 be47 	b.w	2fd6 <memcpy>
    2348:	20000f90 	.word	0x20000f90
    234c:	2000104c 	.word	0x2000104c
    2350:	00003aec 	.word	0x00003aec
    2354:	00000000 	.word	0x00000000
    2358:	00003aec 	.word	0x00003aec
    235c:	20000000 	.word	0x20000000

00002360 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2360:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    2362:	4b09      	ldr	r3, [pc, #36]	; (2388 <bg_thread_main+0x28>)
    2364:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2366:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2368:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    236a:	f7ff ff7f 	bl	226c <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    236e:	2003      	movs	r0, #3
    2370:	f7ff ff7c 	bl	226c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    2374:	f000 fb6e 	bl	2a54 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    2378:	f7fe f838 	bl	3ec <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    237c:	4a03      	ldr	r2, [pc, #12]	; (238c <bg_thread_main+0x2c>)
    237e:	7b13      	ldrb	r3, [r2, #12]
    2380:	f023 0301 	bic.w	r3, r3, #1
    2384:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2386:	bd08      	pop	{r3, pc}
    2388:	2000024e 	.word	0x2000024e
    238c:	200001a0 	.word	0x200001a0

00002390 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    2390:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    2392:	4b36      	ldr	r3, [pc, #216]	; (246c <z_cstart+0xdc>)
    2394:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2396:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    239a:	4c35      	ldr	r4, [pc, #212]	; (2470 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    239c:	4e35      	ldr	r6, [pc, #212]	; (2474 <z_cstart+0xe4>)
    239e:	6963      	ldr	r3, [r4, #20]
    23a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    23a4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23a6:	2500      	movs	r5, #0
    23a8:	23e0      	movs	r3, #224	; 0xe0
    23aa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    23ae:	77e5      	strb	r5, [r4, #31]
    23b0:	7625      	strb	r5, [r4, #24]
    23b2:	7665      	strb	r5, [r4, #25]
    23b4:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    23b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23b8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    23bc:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    23be:	f7fe fb69 	bl	a94 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    23c2:	f7fe fa3f 	bl	844 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    23c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    23ca:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    23cc:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    23ce:	ab07      	add	r3, sp, #28
    23d0:	226c      	movs	r2, #108	; 0x6c
    23d2:	4629      	mov	r1, r5
    23d4:	4618      	mov	r0, r3
    23d6:	f000 fe28 	bl	302a <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    23da:	4c27      	ldr	r4, [pc, #156]	; (2478 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
    23dc:	2701      	movs	r7, #1
	_current = &dummy_thread;
    23de:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    23e0:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    23e2:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    23e6:	f7ff ff41 	bl	226c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    23ea:	4638      	mov	r0, r7
    23ec:	f7ff ff3e 	bl	226c <z_sys_device_do_config_level>
	z_sched_init();
    23f0:	f000 fa68 	bl	28c4 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    23f4:	4b21      	ldr	r3, [pc, #132]	; (247c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    23f6:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    23f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23fc:	e9cd 7304 	strd	r7, r3, [sp, #16]
    2400:	e9cd 5502 	strd	r5, r5, [sp, #8]
    2404:	4b1e      	ldr	r3, [pc, #120]	; (2480 <z_cstart+0xf0>)
    2406:	491f      	ldr	r1, [pc, #124]	; (2484 <z_cstart+0xf4>)
    2408:	e9cd 5500 	strd	r5, r5, [sp]
    240c:	4630      	mov	r0, r6
    240e:	f000 fad9 	bl	29c4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2412:	7b73      	ldrb	r3, [r6, #13]
    2414:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2418:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    241c:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    241e:	d104      	bne.n	242a <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    2420:	69b3      	ldr	r3, [r6, #24]
    2422:	b913      	cbnz	r3, 242a <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
    2424:	4630      	mov	r0, r6
    2426:	f000 f8df 	bl	25e8 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
    242a:	4b17      	ldr	r3, [pc, #92]	; (2488 <z_cstart+0xf8>)
    242c:	4d17      	ldr	r5, [pc, #92]	; (248c <z_cstart+0xfc>)
    242e:	9305      	str	r3, [sp, #20]
    2430:	2201      	movs	r2, #1
    2432:	230f      	movs	r3, #15
    2434:	e9cd 3203 	strd	r3, r2, [sp, #12]
    2438:	2300      	movs	r3, #0
    243a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    243e:	9300      	str	r3, [sp, #0]
    2440:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2444:	4b12      	ldr	r3, [pc, #72]	; (2490 <z_cstart+0x100>)
    2446:	4913      	ldr	r1, [pc, #76]	; (2494 <z_cstart+0x104>)
    2448:	4628      	mov	r0, r5
    244a:	f000 fabb 	bl	29c4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    244e:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    2450:	60e5      	str	r5, [r4, #12]
    2452:	f023 0304 	bic.w	r3, r3, #4
    2456:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2458:	4b0f      	ldr	r3, [pc, #60]	; (2498 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    245a:	490a      	ldr	r1, [pc, #40]	; (2484 <z_cstart+0xf4>)
    245c:	4805      	ldr	r0, [pc, #20]	; (2474 <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
    245e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    2462:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2466:	4b06      	ldr	r3, [pc, #24]	; (2480 <z_cstart+0xf0>)
    2468:	f7fe f9ce 	bl	808 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    246c:	20000f90 	.word	0x20000f90
    2470:	e000ed00 	.word	0xe000ed00
    2474:	200001a0 	.word	0x200001a0
    2478:	2000020c 	.word	0x2000020c
    247c:	00003ae2 	.word	0x00003ae2
    2480:	00002361 	.word	0x00002361
    2484:	20000250 	.word	0x20000250
    2488:	00003ae7 	.word	0x00003ae7
    248c:	20000134 	.word	0x20000134
    2490:	000022e5 	.word	0x000022e5
    2494:	20000650 	.word	0x20000650
    2498:	20000224 	.word	0x20000224

0000249c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    249c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    249e:	4c08      	ldr	r4, [pc, #32]	; (24c0 <z_reset_time_slice+0x24>)
    24a0:	6823      	ldr	r3, [r4, #0]
    24a2:	b15b      	cbz	r3, 24bc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    24a4:	f7fe f8ea 	bl	67c <z_clock_elapsed>
    24a8:	6823      	ldr	r3, [r4, #0]
    24aa:	4a06      	ldr	r2, [pc, #24]	; (24c4 <z_reset_time_slice+0x28>)
    24ac:	4418      	add	r0, r3
    24ae:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    24b0:	2100      	movs	r1, #0
    24b2:	4618      	mov	r0, r3
	}
}
    24b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    24b8:	f001 b98a 	b.w	37d0 <z_set_timeout_expiry>
}
    24bc:	bd10      	pop	{r4, pc}
    24be:	bf00      	nop
    24c0:	20000244 	.word	0x20000244
    24c4:	2000020c 	.word	0x2000020c

000024c8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    24c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ca:	460d      	mov	r5, r1
    24cc:	f04f 0320 	mov.w	r3, #32
    24d0:	f3ef 8411 	mrs	r4, BASEPRI
    24d4:	f383 8811 	msr	BASEPRI, r3
    24d8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    24dc:	4b0d      	ldr	r3, [pc, #52]	; (2514 <k_sched_time_slice_set+0x4c>)
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    24de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    24e2:	f240 36e7 	movw	r6, #999	; 0x3e7
    24e6:	2700      	movs	r7, #0
    24e8:	fbe1 6700 	umlal	r6, r7, r1, r0
    24ec:	2200      	movs	r2, #0
    24ee:	611a      	str	r2, [r3, #16]
    24f0:	4630      	mov	r0, r6
    24f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    24f6:	2300      	movs	r3, #0
    24f8:	4639      	mov	r1, r7
    24fa:	f7fd fdef 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    24fe:	4b06      	ldr	r3, [pc, #24]	; (2518 <k_sched_time_slice_set+0x50>)
    2500:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2502:	4b06      	ldr	r3, [pc, #24]	; (251c <k_sched_time_slice_set+0x54>)
    2504:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    2506:	f7ff ffc9 	bl	249c <z_reset_time_slice>
	__asm__ volatile(
    250a:	f384 8811 	msr	BASEPRI, r4
    250e:	f3bf 8f6f 	isb	sy
	}
}
    2512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2514:	2000020c 	.word	0x2000020c
    2518:	20000244 	.word	0x20000244
    251c:	20000240 	.word	0x20000240

00002520 <k_sched_lock>:
	__asm__ volatile(
    2520:	f04f 0320 	mov.w	r3, #32
    2524:	f3ef 8111 	mrs	r1, BASEPRI
    2528:	f383 8811 	msr	BASEPRI, r3
    252c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2530:	4b04      	ldr	r3, [pc, #16]	; (2544 <k_sched_lock+0x24>)
    2532:	689a      	ldr	r2, [r3, #8]
    2534:	7bd3      	ldrb	r3, [r2, #15]
    2536:	3b01      	subs	r3, #1
    2538:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    253a:	f381 8811 	msr	BASEPRI, r1
    253e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    2542:	4770      	bx	lr
    2544:	2000020c 	.word	0x2000020c

00002548 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2548:	4b09      	ldr	r3, [pc, #36]	; (2570 <z_priq_dumb_remove+0x28>)
    254a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    254e:	4282      	cmp	r2, r0
    2550:	d105      	bne.n	255e <z_priq_dumb_remove+0x16>
    2552:	689b      	ldr	r3, [r3, #8]
    2554:	428b      	cmp	r3, r1
    2556:	d102      	bne.n	255e <z_priq_dumb_remove+0x16>
    2558:	7b4b      	ldrb	r3, [r1, #13]
    255a:	06db      	lsls	r3, r3, #27
    255c:	d106      	bne.n	256c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    255e:	e9d1 3200 	ldrd	r3, r2, [r1]
    2562:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2564:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2566:	2300      	movs	r3, #0
	node->prev = NULL;
    2568:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    256c:	4770      	bx	lr
    256e:	bf00      	nop
    2570:	2000020c 	.word	0x2000020c

00002574 <update_cache>:
{
    2574:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2576:	4c0d      	ldr	r4, [pc, #52]	; (25ac <update_cache+0x38>)
{
    2578:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    257a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    257e:	f001 f889 	bl	3694 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
    2582:	4605      	mov	r5, r0
    2584:	b900      	cbnz	r0, 2588 <update_cache+0x14>
    2586:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    2588:	68a3      	ldr	r3, [r4, #8]
    258a:	b94a      	cbnz	r2, 25a0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    258c:	7b5a      	ldrb	r2, [r3, #13]
    258e:	06d2      	lsls	r2, r2, #27
    2590:	d106      	bne.n	25a0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2592:	69aa      	ldr	r2, [r5, #24]
    2594:	b922      	cbnz	r2, 25a0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    2596:	89da      	ldrh	r2, [r3, #14]
    2598:	2a7f      	cmp	r2, #127	; 0x7f
    259a:	d901      	bls.n	25a0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    259c:	6263      	str	r3, [r4, #36]	; 0x24
}
    259e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    25a0:	429d      	cmp	r5, r3
    25a2:	d001      	beq.n	25a8 <update_cache+0x34>
			z_reset_time_slice();
    25a4:	f7ff ff7a 	bl	249c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    25a8:	6265      	str	r5, [r4, #36]	; 0x24
}
    25aa:	e7f8      	b.n	259e <update_cache+0x2a>
    25ac:	2000020c 	.word	0x2000020c

000025b0 <k_sched_unlock>:
{
    25b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    25b2:	f04f 0320 	mov.w	r3, #32
    25b6:	f3ef 8411 	mrs	r4, BASEPRI
    25ba:	f383 8811 	msr	BASEPRI, r3
    25be:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    25c2:	4b08      	ldr	r3, [pc, #32]	; (25e4 <k_sched_unlock+0x34>)
    25c4:	689a      	ldr	r2, [r3, #8]
    25c6:	7bd3      	ldrb	r3, [r2, #15]
    25c8:	3301      	adds	r3, #1
    25ca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    25cc:	2000      	movs	r0, #0
    25ce:	f7ff ffd1 	bl	2574 <update_cache>
	__asm__ volatile(
    25d2:	f384 8811 	msr	BASEPRI, r4
    25d6:	f3bf 8f6f 	isb	sy
}
    25da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    25de:	f001 b84f 	b.w	3680 <z_reschedule_unlocked>
    25e2:	bf00      	nop
    25e4:	2000020c 	.word	0x2000020c

000025e8 <z_add_thread_to_ready_q>:
{
    25e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    25ea:	f04f 0320 	mov.w	r3, #32
    25ee:	f3ef 8411 	mrs	r4, BASEPRI
    25f2:	f383 8811 	msr	BASEPRI, r3
    25f6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    25fa:	4a15      	ldr	r2, [pc, #84]	; (2650 <z_add_thread_to_ready_q+0x68>)
    25fc:	4611      	mov	r1, r2
    25fe:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2602:	428b      	cmp	r3, r1
    2604:	d01d      	beq.n	2642 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2606:	b1e3      	cbz	r3, 2642 <z_add_thread_to_ready_q+0x5a>
    2608:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    260a:	f990 500e 	ldrsb.w	r5, [r0, #14]
    260e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    2612:	42af      	cmp	r7, r5
    2614:	dd10      	ble.n	2638 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    2616:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2618:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    261c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    261e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    2620:	7b43      	ldrb	r3, [r0, #13]
    2622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2626:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    2628:	2000      	movs	r0, #0
    262a:	f7ff ffa3 	bl	2574 <update_cache>
	__asm__ volatile(
    262e:	f384 8811 	msr	BASEPRI, r4
    2632:	f3bf 8f6f 	isb	sy
}
    2636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    2638:	42b3      	cmp	r3, r6
    263a:	d002      	beq.n	2642 <z_add_thread_to_ready_q+0x5a>
    263c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    263e:	2b00      	cmp	r3, #0
    2640:	d1e5      	bne.n	260e <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    2642:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2644:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    2646:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2648:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    264a:	6018      	str	r0, [r3, #0]
	list->tail = node;
    264c:	62d0      	str	r0, [r2, #44]	; 0x2c
    264e:	e7e7      	b.n	2620 <z_add_thread_to_ready_q+0x38>
    2650:	2000020c 	.word	0x2000020c

00002654 <z_move_thread_to_end_of_prio_q>:
{
    2654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2656:	4604      	mov	r4, r0
	__asm__ volatile(
    2658:	f04f 0320 	mov.w	r3, #32
    265c:	f3ef 8511 	mrs	r5, BASEPRI
    2660:	f383 8811 	msr	BASEPRI, r3
    2664:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2668:	7b43      	ldrb	r3, [r0, #13]
    266a:	065a      	lsls	r2, r3, #25
    266c:	d503      	bpl.n	2676 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    266e:	4601      	mov	r1, r0
    2670:	4817      	ldr	r0, [pc, #92]	; (26d0 <z_move_thread_to_end_of_prio_q+0x7c>)
    2672:	f7ff ff69 	bl	2548 <z_priq_dumb_remove>
	return list->head == list;
    2676:	4a17      	ldr	r2, [pc, #92]	; (26d4 <z_move_thread_to_end_of_prio_q+0x80>)
    2678:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    267c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2680:	428b      	cmp	r3, r1
    2682:	d01f      	beq.n	26c4 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2684:	b1f3      	cbz	r3, 26c4 <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    2686:	f994 600e 	ldrsb.w	r6, [r4, #14]
    268a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    268e:	42b7      	cmp	r7, r6
    2690:	dd13      	ble.n	26ba <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    2692:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2694:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    2698:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    269a:	605c      	str	r4, [r3, #4]
    269c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    269e:	6890      	ldr	r0, [r2, #8]
    26a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26a4:	7363      	strb	r3, [r4, #13]
    26a6:	1b03      	subs	r3, r0, r4
    26a8:	4258      	negs	r0, r3
    26aa:	4158      	adcs	r0, r3
    26ac:	f7ff ff62 	bl	2574 <update_cache>
	__asm__ volatile(
    26b0:	f385 8811 	msr	BASEPRI, r5
    26b4:	f3bf 8f6f 	isb	sy
}
    26b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    26ba:	4283      	cmp	r3, r0
    26bc:	d002      	beq.n	26c4 <z_move_thread_to_end_of_prio_q+0x70>
    26be:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    26c0:	2b00      	cmp	r3, #0
    26c2:	d1e2      	bne.n	268a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    26c4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    26c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    26ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    26cc:	62d4      	str	r4, [r2, #44]	; 0x2c
    26ce:	e7e5      	b.n	269c <z_move_thread_to_end_of_prio_q+0x48>
    26d0:	20000234 	.word	0x20000234
    26d4:	2000020c 	.word	0x2000020c

000026d8 <z_time_slice>:
	if (pending_current == _current) {
    26d8:	4a15      	ldr	r2, [pc, #84]	; (2730 <z_time_slice+0x58>)
    26da:	4916      	ldr	r1, [pc, #88]	; (2734 <z_time_slice+0x5c>)
{
    26dc:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    26de:	680c      	ldr	r4, [r1, #0]
    26e0:	6893      	ldr	r3, [r2, #8]
    26e2:	42a3      	cmp	r3, r4
    26e4:	4614      	mov	r4, r2
    26e6:	d103      	bne.n	26f0 <z_time_slice+0x18>
}
    26e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    26ec:	f7ff bed6 	b.w	249c <z_reset_time_slice>
	pending_current = NULL;
    26f0:	2500      	movs	r5, #0
    26f2:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    26f4:	4910      	ldr	r1, [pc, #64]	; (2738 <z_time_slice+0x60>)
    26f6:	6809      	ldr	r1, [r1, #0]
    26f8:	b1b9      	cbz	r1, 272a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    26fa:	89d9      	ldrh	r1, [r3, #14]
    26fc:	297f      	cmp	r1, #127	; 0x7f
    26fe:	d814      	bhi.n	272a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2700:	490e      	ldr	r1, [pc, #56]	; (273c <z_time_slice+0x64>)
    2702:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2706:	6809      	ldr	r1, [r1, #0]
    2708:	428d      	cmp	r5, r1
    270a:	db0e      	blt.n	272a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    270c:	490c      	ldr	r1, [pc, #48]	; (2740 <z_time_slice+0x68>)
    270e:	428b      	cmp	r3, r1
    2710:	d00b      	beq.n	272a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2712:	6999      	ldr	r1, [r3, #24]
    2714:	b949      	cbnz	r1, 272a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    2716:	6911      	ldr	r1, [r2, #16]
    2718:	4281      	cmp	r1, r0
    271a:	dc03      	bgt.n	2724 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    271c:	4618      	mov	r0, r3
    271e:	f7ff ff99 	bl	2654 <z_move_thread_to_end_of_prio_q>
    2722:	e7e1      	b.n	26e8 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    2724:	1a09      	subs	r1, r1, r0
    2726:	6111      	str	r1, [r2, #16]
}
    2728:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    272a:	2300      	movs	r3, #0
    272c:	6123      	str	r3, [r4, #16]
    272e:	e7fb      	b.n	2728 <z_time_slice+0x50>
    2730:	2000020c 	.word	0x2000020c
    2734:	2000023c 	.word	0x2000023c
    2738:	20000244 	.word	0x20000244
    273c:	20000240 	.word	0x20000240
    2740:	20000134 	.word	0x20000134

00002744 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2744:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2746:	b570      	push	{r4, r5, r6, lr}
    2748:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    274a:	b103      	cbz	r3, 274e <z_thread_single_abort+0xa>
		thread->fn_abort();
    274c:	4798      	blx	r3
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    274e:	f104 0018 	add.w	r0, r4, #24
    2752:	f001 f817 	bl	3784 <z_abort_timeout>
	__asm__ volatile(
    2756:	f04f 0320 	mov.w	r3, #32
    275a:	f3ef 8511 	mrs	r5, BASEPRI
    275e:	f383 8811 	msr	BASEPRI, r3
    2762:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
    2766:	4620      	mov	r0, r4
    2768:	f000 ff6a 	bl	3640 <z_is_thread_ready>
    276c:	7b63      	ldrb	r3, [r4, #13]
    276e:	4606      	mov	r6, r0
    2770:	b1c8      	cbz	r0, 27a6 <z_thread_single_abort+0x62>
			if (z_is_thread_queued(thread)) {
    2772:	0659      	lsls	r1, r3, #25
    2774:	d507      	bpl.n	2786 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2776:	4621      	mov	r1, r4
    2778:	4811      	ldr	r0, [pc, #68]	; (27c0 <z_thread_single_abort+0x7c>)
    277a:	f7ff fee5 	bl	2548 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    277e:	7b63      	ldrb	r3, [r4, #13]
    2780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2784:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2786:	4b0f      	ldr	r3, [pc, #60]	; (27c4 <z_thread_single_abort+0x80>)
    2788:	6898      	ldr	r0, [r3, #8]
    278a:	1b02      	subs	r2, r0, r4
    278c:	4250      	negs	r0, r2
    278e:	4150      	adcs	r0, r2
    2790:	f7ff fef0 	bl	2574 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    2794:	7b63      	ldrb	r3, [r4, #13]
    2796:	f043 0308 	orr.w	r3, r3, #8
    279a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    279c:	f385 8811 	msr	BASEPRI, r5
    27a0:	f3bf 8f6f 	isb	sy
}
    27a4:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
    27a6:	079b      	lsls	r3, r3, #30
    27a8:	d5f4      	bpl.n	2794 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    27aa:	4621      	mov	r1, r4
    27ac:	68a0      	ldr	r0, [r4, #8]
    27ae:	f7ff fecb 	bl	2548 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    27b2:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    27b4:	60a6      	str	r6, [r4, #8]
    27b6:	f023 0302 	bic.w	r3, r3, #2
    27ba:	7363      	strb	r3, [r4, #13]
    27bc:	e7ea      	b.n	2794 <z_thread_single_abort+0x50>
    27be:	bf00      	nop
    27c0:	20000234 	.word	0x20000234
    27c4:	2000020c 	.word	0x2000020c

000027c8 <z_remove_thread_from_ready_q>:
{
    27c8:	b538      	push	{r3, r4, r5, lr}
    27ca:	4604      	mov	r4, r0
	__asm__ volatile(
    27cc:	f04f 0320 	mov.w	r3, #32
    27d0:	f3ef 8511 	mrs	r5, BASEPRI
    27d4:	f383 8811 	msr	BASEPRI, r3
    27d8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    27dc:	7b43      	ldrb	r3, [r0, #13]
    27de:	065a      	lsls	r2, r3, #25
    27e0:	d507      	bpl.n	27f2 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    27e2:	4601      	mov	r1, r0
    27e4:	4809      	ldr	r0, [pc, #36]	; (280c <z_remove_thread_from_ready_q+0x44>)
    27e6:	f7ff feaf 	bl	2548 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    27ea:	7b63      	ldrb	r3, [r4, #13]
    27ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    27f0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    27f2:	4b07      	ldr	r3, [pc, #28]	; (2810 <z_remove_thread_from_ready_q+0x48>)
    27f4:	6898      	ldr	r0, [r3, #8]
    27f6:	1b03      	subs	r3, r0, r4
    27f8:	4258      	negs	r0, r3
    27fa:	4158      	adcs	r0, r3
    27fc:	f7ff feba 	bl	2574 <update_cache>
	__asm__ volatile(
    2800:	f385 8811 	msr	BASEPRI, r5
    2804:	f3bf 8f6f 	isb	sy
}
    2808:	bd38      	pop	{r3, r4, r5, pc}
    280a:	bf00      	nop
    280c:	20000234 	.word	0x20000234
    2810:	2000020c 	.word	0x2000020c

00002814 <pend>:
{
    2814:	b570      	push	{r4, r5, r6, lr}
    2816:	4604      	mov	r4, r0
    2818:	460d      	mov	r5, r1
    281a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    281c:	f7ff ffd4 	bl	27c8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    2820:	7b63      	ldrb	r3, [r4, #13]
    2822:	f043 0302 	orr.w	r3, r3, #2
    2826:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    2828:	b17d      	cbz	r5, 284a <pend+0x36>
	return list->head == list;
    282a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    282c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    282e:	429d      	cmp	r5, r3
    2830:	d029      	beq.n	2886 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2832:	b343      	cbz	r3, 2886 <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
    2834:	f994 200e 	ldrsb.w	r2, [r4, #14]
    2838:	f993 100e 	ldrsb.w	r1, [r3, #14]
    283c:	4291      	cmp	r1, r2
    283e:	dd1c      	ble.n	287a <pend+0x66>
	node->prev = successor->prev;
    2840:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2842:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2846:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2848:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    284a:	1c73      	adds	r3, r6, #1
    284c:	d022      	beq.n	2894 <pend+0x80>
    284e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    2852:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2856:	f240 30e7 	movw	r0, #999	; 0x3e7
    285a:	2100      	movs	r1, #0
    285c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2860:	fbc5 0106 	smlal	r0, r1, r5, r6
    2864:	2300      	movs	r3, #0
    2866:	f7fd fc39 	bl	dc <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    286a:	490b      	ldr	r1, [pc, #44]	; (2898 <pend+0x84>)
    286c:	1c42      	adds	r2, r0, #1
    286e:	f104 0018 	add.w	r0, r4, #24
}
    2872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2876:	f000 b981 	b.w	2b7c <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    287a:	6869      	ldr	r1, [r5, #4]
    287c:	428b      	cmp	r3, r1
    287e:	d002      	beq.n	2886 <pend+0x72>
    2880:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2882:	2b00      	cmp	r3, #0
    2884:	d1d8      	bne.n	2838 <pend+0x24>
	node->prev = list->tail;
    2886:	686b      	ldr	r3, [r5, #4]
    2888:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    288a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    288c:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    288e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2890:	606c      	str	r4, [r5, #4]
    2892:	e7da      	b.n	284a <pend+0x36>
}
    2894:	bd70      	pop	{r4, r5, r6, pc}
    2896:	bf00      	nop
    2898:	000036a1 	.word	0x000036a1

0000289c <z_pend_curr>:
{
    289c:	b510      	push	{r4, lr}
    289e:	460c      	mov	r4, r1
    28a0:	4611      	mov	r1, r2
	pending_current = _current;
    28a2:	4a06      	ldr	r2, [pc, #24]	; (28bc <z_pend_curr+0x20>)
    28a4:	6890      	ldr	r0, [r2, #8]
    28a6:	4a06      	ldr	r2, [pc, #24]	; (28c0 <z_pend_curr+0x24>)
    28a8:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    28aa:	461a      	mov	r2, r3
    28ac:	f7ff ffb2 	bl	2814 <pend>
    28b0:	4620      	mov	r0, r4
}
    28b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    28b6:	f7fd bf09 	b.w	6cc <arch_swap>
    28ba:	bf00      	nop
    28bc:	2000020c 	.word	0x2000020c
    28c0:	2000023c 	.word	0x2000023c

000028c4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    28c4:	4b04      	ldr	r3, [pc, #16]	; (28d8 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    28c6:	2100      	movs	r1, #0
    28c8:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    28cc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    28d0:	4608      	mov	r0, r1
    28d2:	f7ff bdf9 	b.w	24c8 <k_sched_time_slice_set>
    28d6:	bf00      	nop
    28d8:	2000020c 	.word	0x2000020c

000028dc <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    28dc:	4b01      	ldr	r3, [pc, #4]	; (28e4 <z_impl_k_current_get+0x8>)
    28de:	6898      	ldr	r0, [r3, #8]
    28e0:	4770      	bx	lr
    28e2:	bf00      	nop
    28e4:	2000020c 	.word	0x2000020c

000028e8 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    28e8:	b570      	push	{r4, r5, r6, lr}
    28ea:	4604      	mov	r4, r0
	__asm__ volatile(
    28ec:	f04f 0320 	mov.w	r3, #32
    28f0:	f3ef 8611 	mrs	r6, BASEPRI
    28f4:	f383 8811 	msr	BASEPRI, r3
    28f8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    28fc:	f000 ff01 	bl	3702 <z_unpend_first_thread>
	if (thread != NULL) {
    2900:	4605      	mov	r5, r0
    2902:	b170      	cbz	r0, 2922 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2904:	7b43      	ldrb	r3, [r0, #13]
    2906:	06db      	lsls	r3, r3, #27
    2908:	d103      	bne.n	2912 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    290a:	6983      	ldr	r3, [r0, #24]
    290c:	b90b      	cbnz	r3, 2912 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    290e:	f7ff fe6b 	bl	25e8 <z_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2912:	2300      	movs	r3, #0
    2914:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    2916:	4631      	mov	r1, r6
    2918:	4805      	ldr	r0, [pc, #20]	; (2930 <z_impl_k_sem_give+0x48>)
}
    291a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    291e:	f000 be98 	b.w	3652 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2922:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2926:	429a      	cmp	r2, r3
    2928:	bf18      	it	ne
    292a:	3301      	addne	r3, #1
    292c:	60a3      	str	r3, [r4, #8]
    292e:	e7f2      	b.n	2916 <z_impl_k_sem_give+0x2e>
    2930:	2000024f 	.word	0x2000024f

00002934 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    2934:	b410      	push	{r4}
    2936:	4602      	mov	r2, r0
    2938:	460b      	mov	r3, r1
    293a:	f04f 0020 	mov.w	r0, #32
    293e:	f3ef 8111 	mrs	r1, BASEPRI
    2942:	f380 8811 	msr	BASEPRI, r0
    2946:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    294a:	6894      	ldr	r4, [r2, #8]
    294c:	b144      	cbz	r4, 2960 <z_impl_k_sem_take+0x2c>
		sem->count--;
    294e:	3c01      	subs	r4, #1
    2950:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    2952:	f381 8811 	msr	BASEPRI, r1
    2956:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    295a:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    295c:	bc10      	pop	{r4}
    295e:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    2960:	b933      	cbnz	r3, 2970 <z_impl_k_sem_take+0x3c>
    2962:	f381 8811 	msr	BASEPRI, r1
    2966:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    296a:	f06f 000f 	mvn.w	r0, #15
    296e:	e7f5      	b.n	295c <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2970:	4801      	ldr	r0, [pc, #4]	; (2978 <z_impl_k_sem_take+0x44>)
}
    2972:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2974:	f7ff bf92 	b.w	289c <z_pend_curr>
    2978:	2000024f 	.word	0x2000024f

0000297c <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    297c:	b510      	push	{r4, lr}
	__asm__ volatile(
    297e:	f04f 0220 	mov.w	r2, #32
    2982:	f3ef 8411 	mrs	r4, BASEPRI
    2986:	f382 8811 	msr	BASEPRI, r2
    298a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    298e:	7b42      	ldrb	r2, [r0, #13]
    2990:	0751      	lsls	r1, r2, #29
    2992:	d404      	bmi.n	299e <z_impl_k_thread_start+0x22>
	__asm__ volatile(
    2994:	f384 8811 	msr	BASEPRI, r4
    2998:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    299c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    299e:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    29a2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    29a6:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    29a8:	d103      	bne.n	29b2 <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
    29aa:	6983      	ldr	r3, [r0, #24]
    29ac:	b90b      	cbnz	r3, 29b2 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    29ae:	f7ff fe1b 	bl	25e8 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    29b2:	4621      	mov	r1, r4
    29b4:	4802      	ldr	r0, [pc, #8]	; (29c0 <z_impl_k_thread_start+0x44>)
}
    29b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    29ba:	f000 be4a 	b.w	3652 <z_reschedule>
    29be:	bf00      	nop
    29c0:	2000024f 	.word	0x2000024f

000029c4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    29c4:	b530      	push	{r4, r5, lr}
    29c6:	b087      	sub	sp, #28
    29c8:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    29ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    29cc:	9504      	str	r5, [sp, #16]
    29ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    29d0:	9503      	str	r5, [sp, #12]
    29d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    29d4:	9502      	str	r5, [sp, #8]
    29d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    29d8:	9501      	str	r5, [sp, #4]
    29da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    29dc:	9500      	str	r5, [sp, #0]
    29de:	f7fd fef1 	bl	7c4 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    29e2:	4b03      	ldr	r3, [pc, #12]	; (29f0 <z_setup_new_thread+0x2c>)
    29e4:	689b      	ldr	r3, [r3, #8]
    29e6:	b103      	cbz	r3, 29ea <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    29e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    29ea:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    29ec:	b007      	add	sp, #28
    29ee:	bd30      	pop	{r4, r5, pc}
    29f0:	2000020c 	.word	0x2000020c

000029f4 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    29f4:	b570      	push	{r4, r5, r6, lr}
    29f6:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    29f8:	2600      	movs	r6, #0
    29fa:	9605      	str	r6, [sp, #20]
    29fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    29fe:	9604      	str	r6, [sp, #16]
    2a00:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2a02:	9603      	str	r6, [sp, #12]
    2a04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    2a06:	9602      	str	r6, [sp, #8]
    2a08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    2a0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2a0c:	9601      	str	r6, [sp, #4]
    2a0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    2a10:	9600      	str	r6, [sp, #0]
{
    2a12:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2a14:	f7ff ffd6 	bl	29c4 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    2a18:	1c6b      	adds	r3, r5, #1
    2a1a:	d003      	beq.n	2a24 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
    2a1c:	b92d      	cbnz	r5, 2a2a <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
    2a1e:	4620      	mov	r0, r4
    2a20:	f7ff ffac 	bl	297c <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    2a24:	4620      	mov	r0, r4
    2a26:	b006      	add	sp, #24
    2a28:	bd70      	pop	{r4, r5, r6, pc}
    2a2a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2a2e:	f240 30e7 	movw	r0, #999	; 0x3e7
    2a32:	2100      	movs	r1, #0
    2a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a38:	2300      	movs	r3, #0
    2a3a:	fbe6 0105 	umlal	r0, r1, r6, r5
    2a3e:	f7fd fb4d 	bl	dc <__aeabi_uldivmod>
    2a42:	4903      	ldr	r1, [pc, #12]	; (2a50 <z_impl_k_thread_create+0x5c>)
    2a44:	1c42      	adds	r2, r0, #1
    2a46:	f104 0018 	add.w	r0, r4, #24
    2a4a:	f000 f897 	bl	2b7c <z_add_timeout>
    2a4e:	e7e9      	b.n	2a24 <z_impl_k_thread_create+0x30>
    2a50:	000036a1 	.word	0x000036a1

00002a54 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    2a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2a58:	4e28      	ldr	r6, [pc, #160]	; (2afc <z_init_static_threads+0xa8>)
    2a5a:	4d29      	ldr	r5, [pc, #164]	; (2b00 <z_init_static_threads+0xac>)
{
    2a5c:	b087      	sub	sp, #28
    2a5e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    2a60:	42b5      	cmp	r5, r6
    2a62:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2a66:	d310      	bcc.n	2a8a <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2a68:	f7ff fd5a 	bl	2520 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2a6c:	4c24      	ldr	r4, [pc, #144]	; (2b00 <z_init_static_threads+0xac>)
    2a6e:	f8df a094 	ldr.w	sl, [pc, #148]	; 2b04 <z_init_static_threads+0xb0>
    2a72:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2a76:	f240 36e7 	movw	r6, #999	; 0x3e7
    2a7a:	2700      	movs	r7, #0
    2a7c:	4544      	cmp	r4, r8
    2a7e:	d321      	bcc.n	2ac4 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    2a80:	b007      	add	sp, #28
    2a82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2a86:	f7ff bd93 	b.w	25b0 <k_sched_unlock>
		z_setup_new_thread(
    2a8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2a8e:	9305      	str	r3, [sp, #20]
    2a90:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2a94:	9304      	str	r3, [sp, #16]
    2a96:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2a9a:	9303      	str	r3, [sp, #12]
    2a9c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2aa0:	9302      	str	r3, [sp, #8]
    2aa2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2aa6:	9301      	str	r3, [sp, #4]
    2aa8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2aac:	9300      	str	r3, [sp, #0]
    2aae:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2ab2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2ab6:	f7ff ff85 	bl	29c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2aba:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2abe:	64dd      	str	r5, [r3, #76]	; 0x4c
    2ac0:	4625      	mov	r5, r4
    2ac2:	e7cd      	b.n	2a60 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2ac4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2ac6:	1c4b      	adds	r3, r1, #1
    2ac8:	d004      	beq.n	2ad4 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    2aca:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    2acc:	b921      	cbnz	r1, 2ad8 <z_init_static_threads+0x84>
    2ace:	4628      	mov	r0, r5
    2ad0:	f7ff ff54 	bl	297c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2ad4:	3430      	adds	r4, #48	; 0x30
    2ad6:	e7d1      	b.n	2a7c <z_init_static_threads+0x28>
    2ad8:	46b3      	mov	fp, r6
    2ada:	46bc      	mov	ip, r7
    2adc:	fbe9 bc01 	umlal	fp, ip, r9, r1
    2ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ae4:	2300      	movs	r3, #0
    2ae6:	4658      	mov	r0, fp
    2ae8:	4661      	mov	r1, ip
    2aea:	f7fd faf7 	bl	dc <__aeabi_uldivmod>
    2aee:	4651      	mov	r1, sl
    2af0:	1c42      	adds	r2, r0, #1
    2af2:	f105 0018 	add.w	r0, r5, #24
    2af6:	f000 f841 	bl	2b7c <z_add_timeout>
    2afa:	e7eb      	b.n	2ad4 <z_init_static_threads+0x80>
    2afc:	20001028 	.word	0x20001028
    2b00:	20001028 	.word	0x20001028
    2b04:	000036a1 	.word	0x000036a1

00002b08 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2b08:	4b03      	ldr	r3, [pc, #12]	; (2b18 <elapsed+0x10>)
    2b0a:	681b      	ldr	r3, [r3, #0]
    2b0c:	b90b      	cbnz	r3, 2b12 <elapsed+0xa>
    2b0e:	f7fd bdb5 	b.w	67c <z_clock_elapsed>
}
    2b12:	2000      	movs	r0, #0
    2b14:	4770      	bx	lr
    2b16:	bf00      	nop
    2b18:	20000248 	.word	0x20000248

00002b1c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2b1c:	6803      	ldr	r3, [r0, #0]
    2b1e:	b140      	cbz	r0, 2b32 <remove_timeout+0x16>
    2b20:	4a07      	ldr	r2, [pc, #28]	; (2b40 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    2b22:	6852      	ldr	r2, [r2, #4]
    2b24:	4290      	cmp	r0, r2
    2b26:	d004      	beq.n	2b32 <remove_timeout+0x16>
	if (next(t) != NULL) {
    2b28:	b11b      	cbz	r3, 2b32 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2b2a:	689a      	ldr	r2, [r3, #8]
    2b2c:	6881      	ldr	r1, [r0, #8]
    2b2e:	440a      	add	r2, r1
    2b30:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2b32:	6842      	ldr	r2, [r0, #4]
    2b34:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2b36:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2b38:	2300      	movs	r3, #0
	node->prev = NULL;
    2b3a:	e9c0 3300 	strd	r3, r3, [r0]
}
    2b3e:	4770      	bx	lr
    2b40:	20000fc0 	.word	0x20000fc0

00002b44 <next_timeout>:
	return list->head == list;
    2b44:	4b0b      	ldr	r3, [pc, #44]	; (2b74 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    2b46:	b510      	push	{r4, lr}
    2b48:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b4a:	429c      	cmp	r4, r3
    2b4c:	bf08      	it	eq
    2b4e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2b50:	f7ff ffda 	bl	2b08 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2b54:	b154      	cbz	r4, 2b6c <next_timeout+0x28>
    2b56:	68a3      	ldr	r3, [r4, #8]
    2b58:	1a18      	subs	r0, r3, r0
    2b5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2b5e:	4b06      	ldr	r3, [pc, #24]	; (2b78 <next_timeout+0x34>)
    2b60:	691b      	ldr	r3, [r3, #16]
    2b62:	b113      	cbz	r3, 2b6a <next_timeout+0x26>
    2b64:	4298      	cmp	r0, r3
    2b66:	bfa8      	it	ge
    2b68:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2b6a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2b6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2b70:	e7f5      	b.n	2b5e <next_timeout+0x1a>
    2b72:	bf00      	nop
    2b74:	20000fc0 	.word	0x20000fc0
    2b78:	2000020c 	.word	0x2000020c

00002b7c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    2b7c:	b570      	push	{r4, r5, r6, lr}
    2b7e:	4604      	mov	r4, r0
    2b80:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2b82:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2b84:	f04f 0320 	mov.w	r3, #32
    2b88:	f3ef 8511 	mrs	r5, BASEPRI
    2b8c:	f383 8811 	msr	BASEPRI, r3
    2b90:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2b94:	f7ff ffb8 	bl	2b08 <elapsed>
	return list->head == list;
    2b98:	4b18      	ldr	r3, [pc, #96]	; (2bfc <z_add_timeout+0x80>)
    2b9a:	681a      	ldr	r2, [r3, #0]
    2b9c:	2e01      	cmp	r6, #1
    2b9e:	bfac      	ite	ge
    2ba0:	1980      	addge	r0, r0, r6
    2ba2:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ba4:	429a      	cmp	r2, r3
    2ba6:	60a0      	str	r0, [r4, #8]
    2ba8:	d001      	beq.n	2bae <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2baa:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2bac:	b932      	cbnz	r2, 2bbc <z_add_timeout+0x40>
	node->prev = list->tail;
    2bae:	685a      	ldr	r2, [r3, #4]
    2bb0:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2bb2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2bb4:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    2bb6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    2bb8:	605c      	str	r4, [r3, #4]
    2bba:	e00a      	b.n	2bd2 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2bbc:	6890      	ldr	r0, [r2, #8]
    2bbe:	68a1      	ldr	r1, [r4, #8]
    2bc0:	4288      	cmp	r0, r1
    2bc2:	dd15      	ble.n	2bf0 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    2bc4:	1a41      	subs	r1, r0, r1
    2bc6:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2bc8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2bca:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    2bce:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2bd0:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2bd2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2bd4:	429a      	cmp	r2, r3
    2bd6:	d006      	beq.n	2be6 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2bd8:	4294      	cmp	r4, r2
    2bda:	d104      	bne.n	2be6 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    2bdc:	f7ff ffb2 	bl	2b44 <next_timeout>
    2be0:	2100      	movs	r1, #0
    2be2:	f7fd fcf5 	bl	5d0 <z_clock_set_timeout>
	__asm__ volatile(
    2be6:	f385 8811 	msr	BASEPRI, r5
    2bea:	f3bf 8f6f 	isb	sy
		}
	}
}
    2bee:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    2bf0:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2bf2:	42b2      	cmp	r2, r6
    2bf4:	60a1      	str	r1, [r4, #8]
    2bf6:	d0da      	beq.n	2bae <z_add_timeout+0x32>
    2bf8:	6812      	ldr	r2, [r2, #0]
    2bfa:	e7d7      	b.n	2bac <z_add_timeout+0x30>
    2bfc:	20000fc0 	.word	0x20000fc0

00002c00 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    2c00:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    2c04:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2c06:	f7ff fd67 	bl	26d8 <z_time_slice>
	__asm__ volatile(
    2c0a:	f04f 0320 	mov.w	r3, #32
    2c0e:	f3ef 8511 	mrs	r5, BASEPRI
    2c12:	f383 8811 	msr	BASEPRI, r3
    2c16:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2c1a:	4e21      	ldr	r6, [pc, #132]	; (2ca0 <z_clock_announce+0xa0>)
    2c1c:	4f21      	ldr	r7, [pc, #132]	; (2ca4 <z_clock_announce+0xa4>)
	return list->head == list;
    2c1e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2ca8 <z_clock_announce+0xa8>
    2c22:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2c24:	46b8      	mov	r8, r7
    2c26:	f8d9 4000 	ldr.w	r4, [r9]
    2c2a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c2c:	454c      	cmp	r4, r9
    2c2e:	e9d7 bc00 	ldrd	fp, ip, [r7]
    2c32:	d005      	beq.n	2c40 <z_clock_announce+0x40>
    2c34:	b124      	cbz	r4, 2c40 <z_clock_announce+0x40>
    2c36:	68a3      	ldr	r3, [r4, #8]
    2c38:	4293      	cmp	r3, r2
    2c3a:	dd14      	ble.n	2c66 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2c3c:	1a9b      	subs	r3, r3, r2
    2c3e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    2c40:	eb1b 0002 	adds.w	r0, fp, r2
    2c44:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    2c48:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    2c4a:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    2c4e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2c50:	f7ff ff78 	bl	2b44 <next_timeout>
    2c54:	4621      	mov	r1, r4
    2c56:	f7fd fcbb 	bl	5d0 <z_clock_set_timeout>
	__asm__ volatile(
    2c5a:	f385 8811 	msr	BASEPRI, r5
    2c5e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2c62:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    2c66:	eb1b 0003 	adds.w	r0, fp, r3
    2c6a:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2c6e:	1ad3      	subs	r3, r2, r3
    2c70:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    2c72:	2300      	movs	r3, #0
		curr_tick += dt;
    2c74:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    2c78:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    2c7a:	4620      	mov	r0, r4
    2c7c:	f7ff ff4e 	bl	2b1c <remove_timeout>
    2c80:	f385 8811 	msr	BASEPRI, r5
    2c84:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2c88:	68e3      	ldr	r3, [r4, #12]
    2c8a:	4798      	blx	r3
	__asm__ volatile(
    2c8c:	f04f 0320 	mov.w	r3, #32
    2c90:	f3ef 8511 	mrs	r5, BASEPRI
    2c94:	f383 8811 	msr	BASEPRI, r3
    2c98:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2c9c:	e7c3      	b.n	2c26 <z_clock_announce+0x26>
    2c9e:	bf00      	nop
    2ca0:	20000248 	.word	0x20000248
    2ca4:	200000a8 	.word	0x200000a8
    2ca8:	20000fc0 	.word	0x20000fc0

00002cac <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    2cac:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2cae:	4c07      	ldr	r4, [pc, #28]	; (2ccc <init_static_pools+0x20>)
    2cb0:	4d07      	ldr	r5, [pc, #28]	; (2cd0 <init_static_pools+0x24>)
    2cb2:	42ac      	cmp	r4, r5
    2cb4:	d301      	bcc.n	2cba <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    2cb6:	2000      	movs	r0, #0
    2cb8:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    2cba:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    2cbe:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    2cc0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    2cc4:	f000 f806 	bl	2cd4 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2cc8:	341c      	adds	r4, #28
    2cca:	e7f2      	b.n	2cb2 <init_static_pools+0x6>
    2ccc:	20001028 	.word	0x20001028
    2cd0:	20001028 	.word	0x20001028

00002cd4 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    2cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2cd8:	6846      	ldr	r6, [r0, #4]
    2cda:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2cdc:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    2cde:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    2ce2:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2ce4:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    2ce8:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2cea:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2cec:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    2cee:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    2cf0:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    2cf4:	4598      	cmp	r8, r3
    2cf6:	dc05      	bgt.n	2d04 <z_sys_mem_pool_base_init+0x30>
    2cf8:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    2cfa:	4619      	mov	r1, r3
    2cfc:	428f      	cmp	r7, r1
    2cfe:	dc20      	bgt.n	2d42 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    2d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    2d04:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    2d08:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    2d0c:	fb09 fe03 	mul.w	lr, r9, r3
    2d10:	eb0a 040e 	add.w	r4, sl, lr
    2d14:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    2d18:	2d20      	cmp	r5, #32
    2d1a:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    2d1e:	d805      	bhi.n	2d2c <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    2d20:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    2d22:	0892      	lsrs	r2, r2, #2
    2d24:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    2d28:	3301      	adds	r3, #1
    2d2a:	e7e3      	b.n	2cf4 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    2d2c:	f115 041f 	adds.w	r4, r5, #31
    2d30:	bf48      	it	mi
    2d32:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    2d36:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    2d38:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    2d3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    2d40:	e7ef      	b.n	2d22 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    2d42:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    2d44:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    2d46:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    2d4a:	18ec      	adds	r4, r5, r3
	node->next = list;
    2d4c:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    2d50:	6895      	ldr	r5, [r2, #8]
    2d52:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    2d54:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    2d56:	3101      	adds	r1, #1
    2d58:	602c      	str	r4, [r5, #0]
	list->tail = node;
    2d5a:	4433      	add	r3, r6
    2d5c:	6094      	str	r4, [r2, #8]
    2d5e:	e7cd      	b.n	2cfc <z_sys_mem_pool_base_init+0x28>

00002d60 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2d60:	4604      	mov	r4, r0
    2d62:	b508      	push	{r3, lr}
    2d64:	4608      	mov	r0, r1
    2d66:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2d68:	461a      	mov	r2, r3
    2d6a:	47a0      	blx	r4
	return z_impl_k_current_get();
    2d6c:	f7ff fdb6 	bl	28dc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    2d70:	f7fd fea4 	bl	abc <z_impl_k_thread_abort>

00002d74 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    2d74:	4770      	bx	lr

00002d76 <get_status>:
	data = get_sub_data(dev, type);
    2d76:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
    2d78:	b2c9      	uxtb	r1, r1
	if (data->started) {
    2d7a:	220c      	movs	r2, #12
    2d7c:	fb02 3101 	mla	r1, r2, r1, r3
    2d80:	7a4b      	ldrb	r3, [r1, #9]
    2d82:	b923      	cbnz	r3, 2d8e <get_status+0x18>
	if (data->ref > 0) {
    2d84:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    2d86:	fab0 f080 	clz	r0, r0
    2d8a:	0940      	lsrs	r0, r0, #5
    2d8c:	4770      	bx	lr
    2d8e:	2002      	movs	r0, #2
}
    2d90:	4770      	bx	lr

00002d92 <clkstarted_handle>:
{
    2d92:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    2d94:	6883      	ldr	r3, [r0, #8]
	sub_data->started = true;
    2d96:	240c      	movs	r4, #12
    2d98:	fb04 3401 	mla	r4, r4, r1, r3
    2d9c:	2301      	movs	r3, #1
{
    2d9e:	4605      	mov	r5, r0
	sub_data->started = true;
    2da0:	7263      	strb	r3, [r4, #9]
    2da2:	f04f 0320 	mov.w	r3, #32
    2da6:	f3ef 8111 	mrs	r1, BASEPRI
    2daa:	f383 8811 	msr	BASEPRI, r3
    2dae:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    2db2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2db4:	b12b      	cbz	r3, 2dc2 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2db6:	6860      	ldr	r0, [r4, #4]
    2db8:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2dba:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2dbc:	4283      	cmp	r3, r0
	list->tail = node;
    2dbe:	bf08      	it	eq
    2dc0:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    2dc2:	f381 8811 	msr	BASEPRI, r1
    2dc6:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
    2dca:	b903      	cbnz	r3, 2dce <clkstarted_handle+0x3c>
}
    2dcc:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    2dce:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    2dd2:	4628      	mov	r0, r5
    2dd4:	4790      	blx	r2
    2dd6:	e7e4      	b.n	2da2 <clkstarted_handle+0x10>

00002dd8 <clock_async_start>:
	const struct nrf_clock_control_config *config =
    2dd8:	6803      	ldr	r3, [r0, #0]
	clk_data = get_sub_data(dev, type);
    2dda:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    2dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2de2:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
    2de4:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
    2de6:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
    2de8:	b14a      	cbz	r2, 2dfe <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    2dea:	230c      	movs	r3, #12
    2dec:	4373      	muls	r3, r6
    2dee:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    2df2:	429a      	cmp	r2, r3
    2df4:	d05c      	beq.n	2eb0 <clock_async_start+0xd8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2df6:	b113      	cbz	r3, 2dfe <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2df8:	681b      	ldr	r3, [r3, #0]
	} while (item);
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d1f9      	bne.n	2df2 <clock_async_start+0x1a>
	__asm__ volatile(
    2dfe:	f04f 0320 	mov.w	r3, #32
    2e02:	f3ef 8011 	mrs	r0, BASEPRI
    2e06:	f383 8811 	msr	BASEPRI, r3
    2e0a:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    2e0e:	210c      	movs	r1, #12
    2e10:	4371      	muls	r1, r6
    2e12:	eb0c 0301 	add.w	r3, ip, r1
    2e16:	7a1c      	ldrb	r4, [r3, #8]
    2e18:	3401      	adds	r4, #1
    2e1a:	b2e4      	uxtb	r4, r4
    2e1c:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    2e1e:	f380 8811 	msr	BASEPRI, r0
    2e22:	f3bf 8f6f 	isb	sy
	if (data) {
    2e26:	b332      	cbz	r2, 2e76 <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
    2e28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2e2c:	f04f 0e03 	mov.w	lr, #3
    2e30:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
    2e34:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    2e36:	b9a0      	cbnz	r0, 2e62 <clock_async_start+0x8a>
	__asm__ volatile(
    2e38:	f04f 0e20 	mov.w	lr, #32
    2e3c:	f3ef 8811 	mrs	r8, BASEPRI
    2e40:	f38e 8811 	msr	BASEPRI, lr
    2e44:	f3bf 8f6f 	isb	sy
	parent->next = child;
    2e48:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    2e4a:	f8d3 e004 	ldr.w	lr, [r3, #4]
    2e4e:	f1be 0f00 	cmp.w	lr, #0
    2e52:	d120      	bne.n	2e96 <clock_async_start+0xbe>
	list->tail = node;
    2e54:	605a      	str	r2, [r3, #4]
	list->head = node;
    2e56:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    2e5a:	f388 8811 	msr	BASEPRI, r8
    2e5e:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    2e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e66:	2103      	movs	r1, #3
    2e68:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
    2e6c:	b118      	cbz	r0, 2e76 <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
    2e6e:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    2e72:	4628      	mov	r0, r5
    2e74:	4798      	blx	r3
	if (ref == 1) {
    2e76:	2c01      	cmp	r4, #1
    2e78:	d10b      	bne.n	2e92 <clock_async_start+0xba>
		do_start =  (config->start_handler) ?
    2e7a:	230c      	movs	r3, #12
    2e7c:	4373      	muls	r3, r6
    2e7e:	58fb      	ldr	r3, [r7, r3]
				config->start_handler(dev) : true;
    2e80:	b96b      	cbnz	r3, 2e9e <clock_async_start+0xc6>
			nrf_clock_task_trigger(NRF_CLOCK,
    2e82:	230c      	movs	r3, #12
    2e84:	fb03 7606 	mla	r6, r3, r6, r7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e88:	2201      	movs	r2, #1
    2e8a:	7ab3      	ldrb	r3, [r6, #10]
    2e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2e90:	601a      	str	r2, [r3, #0]
	return 0;
    2e92:	2000      	movs	r0, #0
    2e94:	e00e      	b.n	2eb4 <clock_async_start+0xdc>
	parent->next = child;
    2e96:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    2e9a:	605a      	str	r2, [r3, #4]
    2e9c:	e7dd      	b.n	2e5a <clock_async_start+0x82>
				config->start_handler(dev) : true;
    2e9e:	4628      	mov	r0, r5
    2ea0:	4798      	blx	r3
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d1ed      	bne.n	2e82 <clock_async_start+0xaa>
			clkstarted_handle(dev, type);
    2ea6:	4631      	mov	r1, r6
    2ea8:	4628      	mov	r0, r5
    2eaa:	f7ff ff72 	bl	2d92 <clkstarted_handle>
    2eae:	e7f0      	b.n	2e92 <clock_async_start+0xba>
		return -EBUSY;
    2eb0:	f06f 000f 	mvn.w	r0, #15
}
    2eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002eb8 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    2eb8:	2200      	movs	r2, #0
    2eba:	f7ff bf8d 	b.w	2dd8 <clock_async_start>

00002ebe <clk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2ebe:	2200      	movs	r2, #0
{
    2ec0:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2ec2:	2101      	movs	r1, #1
{
    2ec4:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2ec6:	4610      	mov	r0, r2
    2ec8:	f7fd fc64 	bl	794 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    2ecc:	2000      	movs	r0, #0
    2ece:	f7fd fc51 	bl	774 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    2ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ed6:	2201      	movs	r2, #1
    2ed8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    2edc:	2203      	movs	r2, #3
    2ede:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    2ee2:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    2ee4:	2000      	movs	r0, #0
	list->tail = NULL;
    2ee6:	e9c3 0000 	strd	r0, r0, [r3]
    2eea:	68a3      	ldr	r3, [r4, #8]
    2eec:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    2ef0:	bd10      	pop	{r4, pc}

00002ef2 <clock_stop>:
{
    2ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    2ef4:	6802      	ldr	r2, [r0, #0]
	data = get_sub_data(dev, type);
    2ef6:	6886      	ldr	r6, [r0, #8]
	const struct nrf_clock_control_config *config =
    2ef8:	6897      	ldr	r7, [r2, #8]
	return &config->subsys[type];
    2efa:	b2cc      	uxtb	r4, r1
	__asm__ volatile(
    2efc:	f04f 0320 	mov.w	r3, #32
    2f00:	f3ef 8511 	mrs	r5, BASEPRI
    2f04:	f383 8811 	msr	BASEPRI, r3
    2f08:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    2f0c:	220c      	movs	r2, #12
    2f0e:	4362      	muls	r2, r4
    2f10:	18b1      	adds	r1, r6, r2
    2f12:	7a0b      	ldrb	r3, [r1, #8]
    2f14:	b33b      	cbz	r3, 2f66 <clock_stop+0x74>
	data->ref--;
    2f16:	3b01      	subs	r3, #1
    2f18:	b2db      	uxtb	r3, r3
    2f1a:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
    2f1c:	bb33      	cbnz	r3, 2f6c <clock_stop+0x7a>
	list->head = NULL;
    2f1e:	50b3      	str	r3, [r6, r2]
		do_stop =  (config->stop_handler) ?
    2f20:	443a      	add	r2, r7
	list->tail = NULL;
    2f22:	604b      	str	r3, [r1, #4]
    2f24:	6853      	ldr	r3, [r2, #4]
				config->stop_handler(dev) : true;
    2f26:	b9d3      	cbnz	r3, 2f5e <clock_stop+0x6c>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    2f28:	230c      	movs	r3, #12
    2f2a:	fb03 7304 	mla	r3, r3, r4, r7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f2e:	2101      	movs	r1, #1
    2f30:	7ada      	ldrb	r2, [r3, #11]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f32:	891b      	ldrh	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f3c:	6011      	str	r1, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f3e:	2200      	movs	r2, #0
    2f40:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2f46:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    2f48:	210c      	movs	r1, #12
    2f4a:	fb01 6404 	mla	r4, r1, r4, r6
    2f4e:	2000      	movs	r0, #0
    2f50:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    2f52:	f385 8811 	msr	BASEPRI, r5
    2f56:	f3bf 8f6f 	isb	sy
}
    2f5a:	b003      	add	sp, #12
    2f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				config->stop_handler(dev) : true;
    2f5e:	4798      	blx	r3
    2f60:	2800      	cmp	r0, #0
    2f62:	d1e1      	bne.n	2f28 <clock_stop+0x36>
    2f64:	e7f0      	b.n	2f48 <clock_stop+0x56>
		err = -EALREADY;
    2f66:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2f6a:	e7f2      	b.n	2f52 <clock_stop+0x60>
	int err = 0;
    2f6c:	2000      	movs	r0, #0
    2f6e:	e7f0      	b.n	2f52 <clock_stop+0x60>

00002f70 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    2f70:	4770      	bx	lr

00002f72 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    2f72:	4770      	bx	lr

00002f74 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    2f74:	f7fd bc72 	b.w	85c <z_arm_bus_fault>

00002f78 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2f78:	f000 bb51 	b.w	361e <z_fatal_error>

00002f7c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    2f7c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    2f7e:	6800      	ldr	r0, [r0, #0]
    2f80:	f000 bb4d 	b.w	361e <z_fatal_error>

00002f84 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    2f84:	b508      	push	{r3, lr}
	handler();
    2f86:	f7fd fc73 	bl	870 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    2f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    2f8e:	f7fd bb8f 	b.w	6b0 <z_arm_exc_exit>

00002f92 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2f92:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    2f94:	2100      	movs	r1, #0
    2f96:	a801      	add	r0, sp, #4
    2f98:	f7fd fe60 	bl	c5c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    2f9c:	b003      	add	sp, #12
    2f9e:	f85d fb04 	ldr.w	pc, [sp], #4

00002fa2 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    2fa2:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    2fa4:	7802      	ldrb	r2, [r0, #0]
    2fa6:	428a      	cmp	r2, r1
    2fa8:	4603      	mov	r3, r0
    2faa:	f100 0001 	add.w	r0, r0, #1
    2fae:	d004      	beq.n	2fba <strchr+0x18>
    2fb0:	2a00      	cmp	r2, #0
    2fb2:	d1f7      	bne.n	2fa4 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    2fb4:	2900      	cmp	r1, #0
    2fb6:	bf18      	it	ne
    2fb8:	2300      	movne	r3, #0
}
    2fba:	4618      	mov	r0, r3
    2fbc:	4770      	bx	lr

00002fbe <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    2fbe:	3801      	subs	r0, #1
    2fc0:	3901      	subs	r1, #1
    2fc2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    2fc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    2fca:	4293      	cmp	r3, r2
    2fcc:	d101      	bne.n	2fd2 <strcmp+0x14>
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d1f7      	bne.n	2fc2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    2fd2:	1a98      	subs	r0, r3, r2
    2fd4:	4770      	bx	lr

00002fd6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    2fd6:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    2fd8:	ea81 0400 	eor.w	r4, r1, r0
    2fdc:	07a5      	lsls	r5, r4, #30
    2fde:	4603      	mov	r3, r0
    2fe0:	d00b      	beq.n	2ffa <memcpy+0x24>
    2fe2:	3b01      	subs	r3, #1
    2fe4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    2fe6:	4291      	cmp	r1, r2
    2fe8:	d11a      	bne.n	3020 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    2fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    2fec:	2a00      	cmp	r2, #0
    2fee:	d0fc      	beq.n	2fea <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    2ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
    2ff4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    2ff8:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    2ffa:	079c      	lsls	r4, r3, #30
    2ffc:	d1f6      	bne.n	2fec <memcpy+0x16>
    2ffe:	0895      	lsrs	r5, r2, #2
    3000:	00ac      	lsls	r4, r5, #2
    3002:	1f1e      	subs	r6, r3, #4
    3004:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3006:	42b9      	cmp	r1, r7
    3008:	d105      	bne.n	3016 <memcpy+0x40>
    300a:	f06f 0603 	mvn.w	r6, #3
    300e:	fb06 2205 	mla	r2, r6, r5, r2
    3012:	4423      	add	r3, r4
    3014:	e7e5      	b.n	2fe2 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3016:	f851 cb04 	ldr.w	ip, [r1], #4
    301a:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    301e:	e7f2      	b.n	3006 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    3020:	f811 4b01 	ldrb.w	r4, [r1], #1
    3024:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3028:	e7dd      	b.n	2fe6 <memcpy+0x10>

0000302a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    302a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    302c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    302e:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    3030:	079c      	lsls	r4, r3, #30
    3032:	d110      	bne.n	3056 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    3034:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    3038:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    303c:	0894      	lsrs	r4, r2, #2
    303e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    3042:	42b3      	cmp	r3, r6
    3044:	d10d      	bne.n	3062 <memset+0x38>
    3046:	f06f 0503 	mvn.w	r5, #3
    304a:	fb05 2404 	mla	r4, r5, r4, r2
    304e:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3050:	42a3      	cmp	r3, r4
    3052:	d109      	bne.n	3068 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3054:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    3056:	2a00      	cmp	r2, #0
    3058:	d0fc      	beq.n	3054 <memset+0x2a>
		*(d_byte++) = c_byte;
    305a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    305e:	3a01      	subs	r2, #1
    3060:	e7e6      	b.n	3030 <memset+0x6>
		*(d_word++) = c_word;
    3062:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    3066:	e7ec      	b.n	3042 <memset+0x18>
		*(d_byte++) = c_byte;
    3068:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    306c:	e7f0      	b.n	3050 <memset+0x26>

0000306e <_to_x>:
{
    306e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3070:	4603      	mov	r3, r0
		unsigned int d = n % base;
    3072:	fbb1 f7f2 	udiv	r7, r1, r2
    3076:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    307a:	2d09      	cmp	r5, #9
    307c:	bf8c      	ite	hi
    307e:	2627      	movhi	r6, #39	; 0x27
    3080:	2600      	movls	r6, #0
    3082:	461c      	mov	r4, r3
    3084:	3530      	adds	r5, #48	; 0x30
    3086:	4435      	add	r5, r6
	} while (n);
    3088:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    308a:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    308e:	d206      	bcs.n	309e <_to_x+0x30>
	*buf = 0;
    3090:	2200      	movs	r2, #0
    3092:	7022      	strb	r2, [r4, #0]
	len = buf - start;
    3094:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
    3096:	4283      	cmp	r3, r0
    3098:	d804      	bhi.n	30a4 <_to_x+0x36>
}
    309a:	4620      	mov	r0, r4
    309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
    309e:	4639      	mov	r1, r7
    30a0:	4623      	mov	r3, r4
    30a2:	e7e6      	b.n	3072 <_to_x+0x4>
		char tmp = *buf;
    30a4:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
    30a6:	7801      	ldrb	r1, [r0, #0]
    30a8:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
    30ac:	f800 2b01 	strb.w	r2, [r0], #1
    30b0:	e7f1      	b.n	3096 <_to_x+0x28>

000030b2 <_rlrshift>:
{
    30b2:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    30b4:	e9d0 6500 	ldrd	r6, r5, [r0]
    30b8:	0872      	lsrs	r2, r6, #1
    30ba:	f006 0301 	and.w	r3, r6, #1
    30be:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    30c2:	189b      	adds	r3, r3, r2
    30c4:	f04f 0100 	mov.w	r1, #0
    30c8:	ea4f 0455 	mov.w	r4, r5, lsr #1
    30cc:	eb44 0101 	adc.w	r1, r4, r1
    30d0:	e9c0 3100 	strd	r3, r1, [r0]
}
    30d4:	bd70      	pop	{r4, r5, r6, pc}

000030d6 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    30d6:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    30da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
    30de:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    30e0:	f04f 0705 	mov.w	r7, #5
    30e4:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
    30e8:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    30ec:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
    30f0:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
    30f4:	fb07 f10e 	mul.w	r1, r7, lr
    30f8:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    30fc:	08f2      	lsrs	r2, r6, #3
    30fe:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    3102:	fbb2 f1f7 	udiv	r1, r2, r7
    3106:	00ca      	lsls	r2, r1, #3
		quot += q;
    3108:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    310c:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    3110:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
    3114:	fba2 2307 	umull	r2, r3, r2, r7
    3118:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    311a:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    311e:	eb18 0403 	adds.w	r4, r8, r3
    3122:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
    3126:	e9c0 4500 	strd	r4, r5, [r0]
}
    312a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000312e <_get_digit>:
	if (*digit_count > 0) {
    312e:	680b      	ldr	r3, [r1, #0]
    3130:	2b00      	cmp	r3, #0
{
    3132:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    3134:	dd10      	ble.n	3158 <_get_digit+0x2a>
		*digit_count -= 1;
    3136:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
    3138:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
    313a:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    313c:	6844      	ldr	r4, [r0, #4]
    313e:	210a      	movs	r1, #10
    3140:	fba2 5601 	umull	r5, r6, r2, r1
    3144:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    3148:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    314c:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    3150:	0f31      	lsrs	r1, r6, #28
    3152:	3130      	adds	r1, #48	; 0x30
}
    3154:	4608      	mov	r0, r1
    3156:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    3158:	2130      	movs	r1, #48	; 0x30
    315a:	e7fb      	b.n	3154 <_get_digit+0x26>

0000315c <_stdout_hook_default>:
}
    315c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3160:	4770      	bx	lr

00003162 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    3162:	f7fe ba49 	b.w	15f8 <z_impl_zephyr_fputc>

00003166 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    3166:	f7fe bd41 	b.w	1bec <SystemInit>

0000316a <gpio_nrfx_write>:
{
    316a:	b510      	push	{r4, lr}
	return port->config->config_info;
    316c:	6804      	ldr	r4, [r0, #0]
    316e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3170:	68a4      	ldr	r4, [r4, #8]
    3172:	69c0      	ldr	r0, [r0, #28]
    3174:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3176:	2901      	cmp	r1, #1
    3178:	d104      	bne.n	3184 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    317a:	4058      	eors	r0, r3
}


NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
    317c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    3180:	2000      	movs	r0, #0
    3182:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    3184:	3300      	adds	r3, #0
    3186:	fa20 f002 	lsr.w	r0, r0, r2
    318a:	f04f 0101 	mov.w	r1, #1
    318e:	bf18      	it	ne
    3190:	2301      	movne	r3, #1
    3192:	f000 0001 	and.w	r0, r0, #1
    3196:	4091      	lsls	r1, r2
    3198:	4283      	cmp	r3, r0
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    319a:	bf14      	ite	ne
    319c:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    31a0:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    31a4:	e7ec      	b.n	3180 <gpio_nrfx_write+0x16>

000031a6 <gpio_nrfx_read>:
{
    31a6:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    31a8:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    31aa:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31ac:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    31ae:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31b0:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    31b2:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    31b6:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    31ba:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    31be:	4060      	eors	r0, r4
    31c0:	406c      	eors	r4, r5
    31c2:	4034      	ands	r4, r6
    31c4:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    31c6:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    31c8:	bf1c      	itt	ne
    31ca:	40d0      	lsrne	r0, r2
    31cc:	f000 0001 	andne.w	r0, r0, #1
    31d0:	6018      	str	r0, [r3, #0]
}
    31d2:	2000      	movs	r0, #0
    31d4:	bd70      	pop	{r4, r5, r6, pc}

000031d6 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    31d6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    31d8:	6818      	ldr	r0, [r3, #0]
{
    31da:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    31dc:	b158      	cbz	r0, 31f6 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    31de:	2400      	movs	r4, #0
    31e0:	4281      	cmp	r1, r0
    31e2:	d113      	bne.n	320c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    31e4:	6808      	ldr	r0, [r1, #0]
    31e6:	b95c      	cbnz	r4, 3200 <gpio_nrfx_manage_callback+0x2a>
    31e8:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    31ea:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    31ec:	42a1      	cmp	r1, r4
    31ee:	d100      	bne.n	31f2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    31f0:	6058      	str	r0, [r3, #4]
	parent->next = child;
    31f2:	2000      	movs	r0, #0
    31f4:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    31f6:	b972      	cbnz	r2, 3216 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    31f8:	2000      	movs	r0, #0
}
    31fa:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    31fc:	4628      	mov	r0, r5
    31fe:	e7ef      	b.n	31e0 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    3200:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    3202:	6858      	ldr	r0, [r3, #4]
    3204:	4281      	cmp	r1, r0
	list->tail = node;
    3206:	bf08      	it	eq
    3208:	605c      	streq	r4, [r3, #4]
    320a:	e7f2      	b.n	31f2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    320c:	6805      	ldr	r5, [r0, #0]
	return node->next;
    320e:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3210:	2d00      	cmp	r5, #0
    3212:	d1f3      	bne.n	31fc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    3214:	b13a      	cbz	r2, 3226 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    3216:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    3218:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    321a:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    321c:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    321e:	2800      	cmp	r0, #0
    3220:	d1ea      	bne.n	31f8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    3222:	6059      	str	r1, [r3, #4]
    3224:	e7e9      	b.n	31fa <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    3226:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    322a:	e7e6      	b.n	31fa <gpio_nrfx_manage_callback+0x24>

0000322c <gpio_nrfx_config>:
{
    322c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3230:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    3232:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3234:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    3238:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    323c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    323e:	d041      	beq.n	32c4 <gpio_nrfx_config+0x98>
    3240:	dc09      	bgt.n	3256 <gpio_nrfx_config+0x2a>
    3242:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    3246:	d03f      	beq.n	32c8 <gpio_nrfx_config+0x9c>
    3248:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    324c:	d03e      	beq.n	32cc <gpio_nrfx_config+0xa0>
    324e:	b190      	cbz	r0, 3276 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    3250:	f06f 0015 	mvn.w	r0, #21
    3254:	e033      	b.n	32be <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3256:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    325a:	d039      	beq.n	32d0 <gpio_nrfx_config+0xa4>
    325c:	dc04      	bgt.n	3268 <gpio_nrfx_config+0x3c>
    325e:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    3262:	d1f5      	bne.n	3250 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    3264:	2003      	movs	r0, #3
    3266:	e006      	b.n	3276 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3268:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    326c:	d032      	beq.n	32d4 <gpio_nrfx_config+0xa8>
    326e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    3272:	d1ed      	bne.n	3250 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    3274:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3276:	f406 7740 	and.w	r7, r6, #768	; 0x300
    327a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    327e:	d02b      	beq.n	32d8 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    3280:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    3284:	4263      	negs	r3, r4
    3286:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    3288:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    328c:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3290:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3292:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    3296:	bf18      	it	ne
    3298:	b2d4      	uxtbne	r4, r2
    329a:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    329e:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    32a2:	bf12      	itee	ne
    32a4:	46a1      	movne	r9, r4
		to_pin   = 31U;
    32a6:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    32aa:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    32ac:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    32b0:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    32b4:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    32b8:	45a1      	cmp	r9, r4
    32ba:	d20f      	bcs.n	32dc <gpio_nrfx_config+0xb0>
	return 0;
    32bc:	2000      	movs	r0, #0
}
    32be:	b003      	add	sp, #12
    32c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    32c4:	2002      	movs	r0, #2
    32c6:	e7d6      	b.n	3276 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    32c8:	2001      	movs	r0, #1
    32ca:	e7d4      	b.n	3276 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    32cc:	2004      	movs	r0, #4
    32ce:	e7d2      	b.n	3276 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    32d0:	2005      	movs	r0, #5
    32d2:	e7d0      	b.n	3276 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    32d4:	2006      	movs	r0, #6
    32d6:	e7ce      	b.n	3276 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    32d8:	2303      	movs	r3, #3
    32da:	e7d5      	b.n	3288 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    32dc:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    32e0:	6892      	ldr	r2, [r2, #8]
    32e2:	7911      	ldrb	r1, [r2, #4]
    32e4:	f004 021f 	and.w	r2, r4, #31
    32e8:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    32ec:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    32f0:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    32f4:	fa0b f204 	lsl.w	r2, fp, r4
    32f8:	68a9      	ldr	r1, [r5, #8]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d025      	beq.n	334a <gpio_nrfx_config+0x11e>
    32fe:	4311      	orrs	r1, r2
    3300:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    3302:	6969      	ldr	r1, [r5, #20]
    3304:	9301      	str	r3, [sp, #4]
    3306:	06b0      	lsls	r0, r6, #26
    3308:	bf4c      	ite	mi
    330a:	4311      	orrmi	r1, r2
    330c:	4391      	bicpl	r1, r2
    330e:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    3310:	69a9      	ldr	r1, [r5, #24]
    3312:	0670      	lsls	r0, r6, #25
    3314:	bf4c      	ite	mi
    3316:	4311      	orrmi	r1, r2
    3318:	4391      	bicpl	r1, r2
    331a:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    331c:	6929      	ldr	r1, [r5, #16]
    331e:	0770      	lsls	r0, r6, #29
    3320:	bf4c      	ite	mi
    3322:	4311      	orrmi	r1, r2
    3324:	4391      	bicpl	r1, r2
    3326:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    3328:	69e9      	ldr	r1, [r5, #28]
    332a:	0630      	lsls	r0, r6, #24
    332c:	bf4c      	ite	mi
    332e:	430a      	orrmi	r2, r1
    3330:	ea21 0202 	bicpl.w	r2, r1, r2
    3334:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3336:	4621      	mov	r1, r4
    3338:	4640      	mov	r0, r8
    333a:	f7fe f9a9 	bl	1690 <gpiote_pin_int_cfg>
		if (res != 0) {
    333e:	2800      	cmp	r0, #0
    3340:	d1bd      	bne.n	32be <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3342:	3401      	adds	r4, #1
    3344:	b2e4      	uxtb	r4, r4
    3346:	9b01      	ldr	r3, [sp, #4]
    3348:	e7b6      	b.n	32b8 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    334a:	ea21 0102 	bic.w	r1, r1, r2
    334e:	e7d7      	b.n	3300 <gpio_nrfx_config+0xd4>

00003350 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3350:	2901      	cmp	r1, #1
{
    3352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    3356:	bf18      	it	ne
    3358:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    335a:	6887      	ldr	r7, [r0, #8]
{
    335c:	4606      	mov	r6, r0
		to_pin   = pin;
    335e:	bf12      	itee	ne
    3360:	4625      	movne	r5, r4
		to_pin   = 31U;
    3362:	251f      	moveq	r5, #31
		from_pin = 0U;
    3364:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    3366:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    336a:	42ac      	cmp	r4, r5
    336c:	d902      	bls.n	3374 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    336e:	2000      	movs	r0, #0
}
    3370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    3374:	68fb      	ldr	r3, [r7, #12]
    3376:	fa08 f204 	lsl.w	r2, r8, r4
    337a:	ea23 0302 	bic.w	r3, r3, r2
    337e:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3380:	4621      	mov	r1, r4
    3382:	4630      	mov	r0, r6
    3384:	f7fe f984 	bl	1690 <gpiote_pin_int_cfg>
		if (res != 0) {
    3388:	2800      	cmp	r0, #0
    338a:	d1f1      	bne.n	3370 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    338c:	3401      	adds	r4, #1
    338e:	b2e4      	uxtb	r4, r4
    3390:	e7eb      	b.n	336a <gpio_nrfx_pin_disable_callback+0x1a>

00003392 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3392:	2901      	cmp	r1, #1
{
    3394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    3398:	bf18      	it	ne
    339a:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    339c:	6887      	ldr	r7, [r0, #8]
{
    339e:	4606      	mov	r6, r0
		to_pin   = pin;
    33a0:	bf12      	itee	ne
    33a2:	4625      	movne	r5, r4
		to_pin   = 31U;
    33a4:	251f      	moveq	r5, #31
		from_pin = 0U;
    33a6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    33a8:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    33ac:	42ac      	cmp	r4, r5
    33ae:	d902      	bls.n	33b6 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    33b0:	2000      	movs	r0, #0
}
    33b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    33b6:	68fb      	ldr	r3, [r7, #12]
    33b8:	fa08 f204 	lsl.w	r2, r8, r4
    33bc:	4313      	orrs	r3, r2
    33be:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    33c0:	4621      	mov	r1, r4
    33c2:	4630      	mov	r0, r6
    33c4:	f7fe f964 	bl	1690 <gpiote_pin_int_cfg>
		if (res != 0) {
    33c8:	2800      	cmp	r0, #0
    33ca:	d1f2      	bne.n	33b2 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    33cc:	3401      	adds	r4, #1
    33ce:	b2e4      	uxtb	r4, r4
    33d0:	e7ec      	b.n	33ac <gpio_nrfx_pin_enable_callback+0x1a>

000033d2 <i2c_nrfx_twi_configure>:
	return dev->config->config_info;
    33d2:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
    33d4:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
    33d6:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
    33d8:	d405      	bmi.n	33e6 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    33da:	f3c1 0242 	ubfx	r2, r1, #1, #3
    33de:	2a01      	cmp	r2, #1
    33e0:	d004      	beq.n	33ec <i2c_nrfx_twi_configure+0x1a>
    33e2:	2a02      	cmp	r2, #2
    33e4:	d00b      	beq.n	33fe <i2c_nrfx_twi_configure+0x2c>
		return -EINVAL;
    33e6:	f06f 0015 	mvn.w	r0, #21
}
    33ea:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    33ec:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    33ee:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    33f2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    33f6:	6883      	ldr	r3, [r0, #8]
	return 0;
    33f8:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    33fa:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    33fc:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    3404:	e7f5      	b.n	33f2 <i2c_nrfx_twi_configure+0x20>

00003406 <cst816s_channel_get>:
	struct cst816s_data *drv_data = dev->driver_data;
    3406:	6883      	ldr	r3, [r0, #8]
	val->val1=drv_data->x_sample;
    3408:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
	val->val2=drv_data->y_sample;
    340c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	val->val1=drv_data->x_sample;
    3410:	6011      	str	r1, [r2, #0]
	val->val2=drv_data->y_sample;
    3412:	6053      	str	r3, [r2, #4]
}
    3414:	2000      	movs	r0, #0
    3416:	4770      	bx	lr

00003418 <cst816s_sample_fetch>:
{
    3418:	b570      	push	{r4, r5, r6, lr}
	struct cst816s_data *drv_data = dev->driver_data;
    341a:	6885      	ldr	r5, [r0, #8]
{
    341c:	b098      	sub	sp, #96	; 0x60
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
    341e:	f10d 0307 	add.w	r3, sp, #7
	if (i2c_burst_read(drv_data->i2c, CST816S_I2C_ADDRESS,
    3422:	6828      	ldr	r0, [r5, #0]
    3424:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    3426:	2301      	movs	r3, #1
    3428:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (u8_t *)read_buf;
    342a:	ab08      	add	r3, sp, #32
    342c:	9305      	str	r3, [sp, #20]
	msg[1].len = num_read;
    342e:	2340      	movs	r3, #64	; 0x40
    3430:	2400      	movs	r4, #0
    3432:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3434:	2307      	movs	r3, #7
    3436:	f88d 4007 	strb.w	r4, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    343a:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    343e:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    3442:	6843      	ldr	r3, [r0, #4]
    3444:	2202      	movs	r2, #2
    3446:	685e      	ldr	r6, [r3, #4]
    3448:	a902      	add	r1, sp, #8
    344a:	2315      	movs	r3, #21
    344c:	47b0      	blx	r6
    344e:	42a0      	cmp	r0, r4
    3450:	db14      	blt.n	347c <cst816s_sample_fetch+0x64>
	msb = buf[3] & 0x0f;
    3452:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	drv_data->x_sample = (msb<<8)|lsb; 
    3456:	f003 020f 	and.w	r2, r3, #15
    345a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    345e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3462:	80ab      	strh	r3, [r5, #4]
	msb = buf[5] & 0x0f;
    3464:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
	drv_data->y_sample = (msb<<8)|lsb; // todo check if buf[5] is indeed Y
    3468:	f003 020f 	and.w	r2, r3, #15
    346c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    3470:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3474:	80eb      	strh	r3, [r5, #6]
	return 0;
    3476:	4620      	mov	r0, r4
}
    3478:	b018      	add	sp, #96	; 0x60
    347a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    347c:	f06f 0004 	mvn.w	r0, #4
    3480:	e7fa      	b.n	3478 <cst816s_sample_fetch+0x60>

00003482 <cst816s_gpio_callback>:
{
    3482:	b510      	push	{r4, lr}
    3484:	460c      	mov	r4, r1
	if (api->disable_callback == NULL) {
    3486:	6843      	ldr	r3, [r0, #4]
    3488:	695b      	ldr	r3, [r3, #20]
    348a:	b113      	cbz	r3, 3492 <cst816s_gpio_callback+0x10>
	return api->disable_callback(port, access_op, pin);
    348c:	221c      	movs	r2, #28
    348e:	2100      	movs	r1, #0
    3490:	4798      	blx	r3
	z_impl_k_sem_give(sem);
    3492:	f104 008c 	add.w	r0, r4, #140	; 0x8c
}
    3496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    349a:	f7ff ba25 	b.w	28e8 <z_impl_k_sem_give>

0000349e <cst816s_attr_set>:
	if (chan != SENSOR_CHAN_ACCEL_XYZ) {
    349e:	2903      	cmp	r1, #3
}
    34a0:	bf14      	ite	ne
    34a2:	f06f 0022 	mvnne.w	r0, #34	; 0x22
    34a6:	2000      	moveq	r0, #0
    34a8:	4770      	bx	lr

000034aa <cst816s_trigger_set>:
	struct cst816s_data *drv_data = dev->driver_data;
    34aa:	6883      	ldr	r3, [r0, #8]
	if (trig->type == SENSOR_TRIG_DATA_READY) {
    34ac:	8808      	ldrh	r0, [r1, #0]
    34ae:	2801      	cmp	r0, #1
    34b0:	d105      	bne.n	34be <cst816s_trigger_set+0x14>
		drv_data->data_ready_handler = handler;
    34b2:	61da      	str	r2, [r3, #28]
		if (handler == NULL) {
    34b4:	b10a      	cbz	r2, 34ba <cst816s_trigger_set+0x10>
		drv_data->data_ready_trigger = *trig;
    34b6:	6808      	ldr	r0, [r1, #0]
    34b8:	6198      	str	r0, [r3, #24]
	return 0;
    34ba:	2000      	movs	r0, #0
    34bc:	4770      	bx	lr
		return -ENOTSUP;
    34be:	f06f 0022 	mvn.w	r0, #34	; 0x22
    34c2:	4770      	bx	lr

000034c4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    34c4:	4700      	bx	r0

000034c6 <nrf_twi_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34c6:	2300      	movs	r3, #0
    34c8:	5043      	str	r3, [r0, r1]
{
    34ca:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    34cc:	5843      	ldr	r3, [r0, r1]
    34ce:	9301      	str	r3, [sp, #4]
    (void)dummy;
    34d0:	9b01      	ldr	r3, [sp, #4]
}
    34d2:	b002      	add	sp, #8
    34d4:	4770      	bx	lr

000034d6 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    34d6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    34d8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    34da:	4293      	cmp	r3, r2
    34dc:	d208      	bcs.n	34f0 <twi_send_byte+0x1a>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    34de:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    34e0:	5cd2      	ldrb	r2, [r2, r3]
    34e2:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
        ++(p_cb->bytes_transferred);
    34e6:	3301      	adds	r3, #1
    34e8:	634b      	str	r3, [r1, #52]	; 0x34
    return true;
    34ea:	2301      	movs	r3, #1
}
    34ec:	4618      	mov	r0, r3
    34ee:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
    34f0:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    34f4:	b11b      	cbz	r3, 34fe <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34f6:	2301      	movs	r3, #1
    34f8:	61c3      	str	r3, [r0, #28]
            return false;
    34fa:	2300      	movs	r3, #0
    34fc:	e7f6      	b.n	34ec <twi_send_byte+0x16>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    34fe:	6a0a      	ldr	r2, [r1, #32]
    3500:	f012 0f40 	tst.w	r2, #64	; 0x40
    3504:	f04f 0201 	mov.w	r2, #1
    3508:	bf15      	itete	ne
    350a:	61c2      	strne	r2, [r0, #28]
    350c:	6142      	streq	r2, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    350e:	f881 202d 	strbne.w	r2, [r1, #45]	; 0x2d
    return true;
    3512:	4613      	moveq	r3, r2
    3514:	e7ea      	b.n	34ec <twi_send_byte+0x16>

00003516 <twi_transfer>:
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
    3516:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
{
    351a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    351c:	4604      	mov	r4, r0
    351e:	460d      	mov	r5, r1
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
    3520:	2a00      	cmp	r2, #0
    3522:	d160      	bne.n	35e6 <twi_transfer+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3524:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    3528:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    352a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    352c:	b1b3      	cbz	r3, 355c <twi_transfer+0x46>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    352e:	f44f 7192 	mov.w	r1, #292	; 0x124
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    3532:	f7ff ffc8 	bl	34c6 <nrf_twi_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3536:	2301      	movs	r3, #1
    3538:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    353a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    353e:	42be      	cmp	r6, r7
    3540:	d14f      	bne.n	35e2 <twi_transfer+0xcc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3542:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3546:	2b00      	cmp	r3, #0
    3548:	d04b      	beq.n	35e2 <twi_transfer+0xcc>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    354a:	f44f 7182 	mov.w	r1, #260	; 0x104
    354e:	4620      	mov	r0, r4
    3550:	f7ff ffb9 	bl	34c6 <nrf_twi_event_clear>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    3554:	2200      	movs	r2, #0
    3556:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
        return false;
    355a:	e013      	b.n	3584 <twi_transfer+0x6e>
    355c:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    3560:	b193      	cbz	r3, 3588 <twi_transfer+0x72>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    3562:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3566:	f7ff ffae 	bl	34c6 <nrf_twi_event_clear>
    356a:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    356e:	b11b      	cbz	r3, 3578 <twi_transfer+0x62>
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    3570:	f44f 7192 	mov.w	r1, #292	; 0x124
    3574:	4620      	mov	r0, r4
    3576:	e7dc      	b.n	3532 <twi_transfer+0x1c>
                if (!twi_send_byte(p_twi, p_cb))
    3578:	4629      	mov	r1, r5
    357a:	f7ff ffac 	bl	34d6 <twi_send_byte>
    357e:	4602      	mov	r2, r0
    3580:	2800      	cmp	r0, #0
    3582:	d1dc      	bne.n	353e <twi_transfer+0x28>
}
    3584:	4610      	mov	r0, r2
    3586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3588:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    358c:	2b00      	cmp	r3, #0
    358e:	d0d6      	beq.n	353e <twi_transfer+0x28>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    3590:	f44f 7184 	mov.w	r1, #264	; 0x108
    3594:	f7ff ff97 	bl	34c6 <nrf_twi_event_clear>
    3598:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    359c:	2b00      	cmp	r3, #0
    359e:	d1e7      	bne.n	3570 <twi_transfer+0x5a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    35a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    35a2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    35a4:	428b      	cmp	r3, r1
    35a6:	d2ca      	bcs.n	353e <twi_transfer+0x28>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    35a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    35aa:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
    35ae:	54c8      	strb	r0, [r1, r3]
        ++(p_cb->bytes_transferred);
    35b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    35b2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    35b4:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    35b6:	1e48      	subs	r0, r1, #1
    35b8:	4283      	cmp	r3, r0
        ++(p_cb->bytes_transferred);
    35ba:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    35bc:	d108      	bne.n	35d0 <twi_transfer+0xba>
    35be:	6a28      	ldr	r0, [r5, #32]
    35c0:	0640      	lsls	r0, r0, #25
    35c2:	d41d      	bmi.n	3600 <twi_transfer+0xea>
    p_reg->SHORTS = mask;
    35c4:	2302      	movs	r3, #2
    35c6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35ca:	2301      	movs	r3, #1
    35cc:	6223      	str	r3, [r4, #32]
    35ce:	e7b6      	b.n	353e <twi_transfer+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    35d0:	428b      	cmp	r3, r1
    35d2:	d1fa      	bne.n	35ca <twi_transfer+0xb4>
    35d4:	6a2b      	ldr	r3, [r5, #32]
    35d6:	065b      	lsls	r3, r3, #25
    35d8:	d5b1      	bpl.n	353e <twi_transfer+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    35da:	2302      	movs	r3, #2
    35dc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    35e0:	e7d0      	b.n	3584 <twi_transfer+0x6e>
    return true;
    35e2:	2201      	movs	r2, #1
    35e4:	e7ce      	b.n	3584 <twi_transfer+0x6e>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    35e6:	f44f 7192 	mov.w	r1, #292	; 0x124
    35ea:	f7ff ff6c 	bl	34c6 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    35ee:	f44f 718e 	mov.w	r1, #284	; 0x11c
    35f2:	f7ff ff68 	bl	34c6 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    35f6:	f44f 7184 	mov.w	r1, #264	; 0x108
    35fa:	f7ff ff64 	bl	34c6 <nrf_twi_event_clear>
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    35fe:	e7a0      	b.n	3542 <twi_transfer+0x2c>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    3600:	428b      	cmp	r3, r1
    3602:	d1e2      	bne.n	35ca <twi_transfer+0xb4>
    3604:	e7e9      	b.n	35da <twi_transfer+0xc4>

00003606 <arch_system_halt>:
	__asm__ volatile(
    3606:	f04f 0220 	mov.w	r2, #32
    360a:	f3ef 8311 	mrs	r3, BASEPRI
    360e:	f382 8811 	msr	BASEPRI, r2
    3612:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
    3616:	e7fe      	b.n	3616 <arch_system_halt+0x10>

00003618 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3618:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    361a:	f7ff fff4 	bl	3606 <arch_system_halt>

0000361e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    361e:	b570      	push	{r4, r5, r6, lr}
    3620:	4605      	mov	r5, r0
    3622:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    3624:	f7ff f95a 	bl	28dc <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    3628:	4631      	mov	r1, r6
    362a:	4604      	mov	r4, r0
    362c:	4628      	mov	r0, r5
    362e:	f7ff fff3 	bl	3618 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    3632:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    3634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3638:	f7fd ba40 	b.w	abc <z_impl_k_thread_abort>

0000363c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    363c:	f7ff bc99 	b.w	2f72 <z_clock_idle_exit>

00003640 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3640:	7b43      	ldrb	r3, [r0, #13]
    3642:	06db      	lsls	r3, r3, #27
    3644:	bf03      	ittte	eq
    3646:	6980      	ldreq	r0, [r0, #24]
    3648:	fab0 f080 	clzeq	r0, r0
    364c:	0940      	lsreq	r0, r0, #5
    364e:	2000      	movne	r0, #0
}
    3650:	4770      	bx	lr

00003652 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3652:	b921      	cbnz	r1, 365e <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3654:	f3ef 8005 	mrs	r0, IPSR
    3658:	b908      	cbnz	r0, 365e <z_reschedule+0xc>
    365a:	f7fd b837 	b.w	6cc <arch_swap>
	__asm__ volatile(
    365e:	f381 8811 	msr	BASEPRI, r1
    3662:	f3bf 8f6f 	isb	sy
}
    3666:	4770      	bx	lr

00003668 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3668:	4603      	mov	r3, r0
    366a:	b920      	cbnz	r0, 3676 <z_reschedule_irqlock+0xe>
    366c:	f3ef 8205 	mrs	r2, IPSR
    3670:	b90a      	cbnz	r2, 3676 <z_reschedule_irqlock+0xe>
    3672:	f7fd b82b 	b.w	6cc <arch_swap>
    3676:	f383 8811 	msr	BASEPRI, r3
    367a:	f3bf 8f6f 	isb	sy
}
    367e:	4770      	bx	lr

00003680 <z_reschedule_unlocked>:
	__asm__ volatile(
    3680:	f04f 0320 	mov.w	r3, #32
    3684:	f3ef 8011 	mrs	r0, BASEPRI
    3688:	f383 8811 	msr	BASEPRI, r3
    368c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    3690:	f7ff bfea 	b.w	3668 <z_reschedule_irqlock>

00003694 <z_priq_dumb_best>:
	return list->head == list;
    3694:	6803      	ldr	r3, [r0, #0]
}
    3696:	4298      	cmp	r0, r3
    3698:	bf14      	ite	ne
    369a:	4618      	movne	r0, r3
    369c:	2000      	moveq	r0, #0
    369e:	4770      	bx	lr

000036a0 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    36a0:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    36a4:	b570      	push	{r4, r5, r6, lr}
    36a6:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    36a8:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    36ac:	b1cb      	cbz	r3, 36e2 <z_thread_timeout+0x42>
    36ae:	f04f 0320 	mov.w	r3, #32
    36b2:	f3ef 8611 	mrs	r6, BASEPRI
    36b6:	f383 8811 	msr	BASEPRI, r3
    36ba:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    36be:	4629      	mov	r1, r5
    36c0:	f850 0c10 	ldr.w	r0, [r0, #-16]
    36c4:	f7fe ff40 	bl	2548 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    36c8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    36cc:	f023 0302 	bic.w	r3, r3, #2
    36d0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    36d4:	f386 8811 	msr	BASEPRI, r6
    36d8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    36dc:	2300      	movs	r3, #0
    36de:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    36e2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    36e6:	f023 0314 	bic.w	r3, r3, #20
    36ea:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    36ee:	4628      	mov	r0, r5
    36f0:	f7ff ffa6 	bl	3640 <z_is_thread_ready>
    36f4:	b120      	cbz	r0, 3700 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    36f6:	4628      	mov	r0, r5
}
    36f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    36fc:	f7fe bf74 	b.w	25e8 <z_add_thread_to_ready_q>
    3700:	bd70      	pop	{r4, r5, r6, pc}

00003702 <z_unpend_first_thread>:
{
    3702:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3704:	f04f 0320 	mov.w	r3, #32
    3708:	f3ef 8211 	mrs	r2, BASEPRI
    370c:	f383 8811 	msr	BASEPRI, r3
    3710:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3714:	f7ff ffbe 	bl	3694 <z_priq_dumb_best>
    3718:	4604      	mov	r4, r0
	__asm__ volatile(
    371a:	f382 8811 	msr	BASEPRI, r2
    371e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3722:	b1c8      	cbz	r0, 3758 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3724:	f04f 0320 	mov.w	r3, #32
    3728:	f3ef 8511 	mrs	r5, BASEPRI
    372c:	f383 8811 	msr	BASEPRI, r3
    3730:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3734:	4601      	mov	r1, r0
    3736:	6880      	ldr	r0, [r0, #8]
    3738:	f7fe ff06 	bl	2548 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    373c:	7b63      	ldrb	r3, [r4, #13]
    373e:	f023 0302 	bic.w	r3, r3, #2
    3742:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3744:	f385 8811 	msr	BASEPRI, r5
    3748:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    374c:	2300      	movs	r3, #0
    374e:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    3750:	f104 0018 	add.w	r0, r4, #24
    3754:	f000 f816 	bl	3784 <z_abort_timeout>
}
    3758:	4620      	mov	r0, r4
    375a:	bd38      	pop	{r3, r4, r5, pc}

0000375c <z_impl_k_sem_init>:
	sem->limit = limit;
    375c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    3760:	e9c0 0000 	strd	r0, r0, [r0]
}
    3764:	4770      	bx	lr

00003766 <z_new_thread_init>:
{
    3766:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    3768:	9c02      	ldr	r4, [sp, #8]
    376a:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    376c:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
    376e:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
    3770:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    3772:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
    3774:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    3776:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    377a:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    377e:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    3782:	bd10      	pop	{r4, pc}

00003784 <z_abort_timeout>:
{
    3784:	b510      	push	{r4, lr}
	__asm__ volatile(
    3786:	f04f 0220 	mov.w	r2, #32
    378a:	f3ef 8411 	mrs	r4, BASEPRI
    378e:	f382 8811 	msr	BASEPRI, r2
    3792:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3796:	6803      	ldr	r3, [r0, #0]
    3798:	b13b      	cbz	r3, 37aa <z_abort_timeout+0x26>
			remove_timeout(to);
    379a:	f7ff f9bf 	bl	2b1c <remove_timeout>
			ret = 0;
    379e:	2000      	movs	r0, #0
	__asm__ volatile(
    37a0:	f384 8811 	msr	BASEPRI, r4
    37a4:	f3bf 8f6f 	isb	sy
}
    37a8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    37aa:	f06f 0015 	mvn.w	r0, #21
    37ae:	e7f7      	b.n	37a0 <z_abort_timeout+0x1c>

000037b0 <z_get_next_timeout_expiry>:
{
    37b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    37b2:	f04f 0320 	mov.w	r3, #32
    37b6:	f3ef 8411 	mrs	r4, BASEPRI
    37ba:	f383 8811 	msr	BASEPRI, r3
    37be:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    37c2:	f7ff f9bf 	bl	2b44 <next_timeout>
	__asm__ volatile(
    37c6:	f384 8811 	msr	BASEPRI, r4
    37ca:	f3bf 8f6f 	isb	sy
}
    37ce:	bd10      	pop	{r4, pc}

000037d0 <z_set_timeout_expiry>:
{
    37d0:	b570      	push	{r4, r5, r6, lr}
    37d2:	4604      	mov	r4, r0
    37d4:	460e      	mov	r6, r1
	__asm__ volatile(
    37d6:	f04f 0320 	mov.w	r3, #32
    37da:	f3ef 8511 	mrs	r5, BASEPRI
    37de:	f383 8811 	msr	BASEPRI, r3
    37e2:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    37e6:	f7ff f9ad 	bl	2b44 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    37ea:	2801      	cmp	r0, #1
    37ec:	dd05      	ble.n	37fa <z_set_timeout_expiry+0x2a>
    37ee:	42a0      	cmp	r0, r4
    37f0:	dd03      	ble.n	37fa <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    37f2:	4631      	mov	r1, r6
    37f4:	4620      	mov	r0, r4
    37f6:	f7fc feeb 	bl	5d0 <z_clock_set_timeout>
	__asm__ volatile(
    37fa:	f385 8811 	msr	BASEPRI, r5
    37fe:	f3bf 8f6f 	isb	sy
}
    3802:	bd70      	pop	{r4, r5, r6, pc}

00003804 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    3804:	4770      	bx	lr
