
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	2000c050 	.word	0x2000c050
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00004b15 	.word	0x00004b15
   8:	0001f435 	.word	0x0001f435
		if (fdtable[fd].obj == NULL) {
   c:	000049e9 	.word	0x000049e9
  10:	000049e9 	.word	0x000049e9
  14:	000049e9 	.word	0x000049e9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	000049e9 	.word	0x000049e9
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	000049e9 	.word	0x000049e9
	errno = ENFILE;
  20:	000049e9 	.word	0x000049e9
	return -1;
  24:	000049e9 	.word	0x000049e9
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	000049e9 	.word	0x000049e9
  2c:	00004881 	.word	0x00004881
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	000049e9 	.word	0x000049e9
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	000049e9 	.word	0x000049e9
  38:	0000482d 	.word	0x0000482d
  3c:	0001f425 	.word	0x0001f425

00000040 <_irq_vector_table>:
  40:	00004ad5 00021d73 00004ad5 00004ad5     .J..s....J...J..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00004ad5 00004ad5 00004ad5 00004ad5     .J...J...J...J..
  60:	00004ad5 00004ad5 00004ad5 00004ad5     .J...J...J...J..
  70:	00004ad5 00004ad5 00004ad5 00004ad5     .J...J...J...J..
  80:	00004ad5 00004ad5 00004ad5 00004ad5     .J...J...J...J..
  90:	00004ad5 00004ad5 00004ad5 00004ad5     .J...J...J...J..
  a0:	00004ad5 00004ad5 00004ad5 00004ad5     .J...J...J...J..
  b0:	00004ad5 00004ad5 00004ad5 00004ad5     .J...J...J...J..
  c0:	00004ad5 00004ad5 00004ad5 00004ad5     .J...J...J...J..
  d0:	00004ad5 00004ad5 00004ad5              .J...J...J..

Disassembly of section _TEXT_SECTION_NAME_2:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <CONFIG_LVGL_HOR_RES+0x8>
      e2:	b94a      	cbnz	r2, f8 <CONFIG_LVGL_HOR_RES+0x8>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	9f09      	ldr	r7, [sp, #36]	; 0x24
     11a:	4615      	mov	r5, r2
     11c:	4604      	mov	r4, r0
     11e:	468e      	mov	lr, r1
     120:	461e      	mov	r6, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80cc 	bne.w	2c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>
     128:	428a      	cmp	r2, r1
     12a:	fab2 fc82 	clz	ip, r2
     12e:	d94c      	bls.n	1ca <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xa>
     130:	f1bc 0f00 	cmp.w	ip, #0
     134:	d00b      	beq.n	14e <CONFIG_IDLE_STACK_SIZE+0xe>
     136:	f1cc 0820 	rsb	r8, ip, #32
     13a:	fa01 fe0c 	lsl.w	lr, r1, ip
     13e:	fa20 f808 	lsr.w	r8, r0, r8
     142:	fa02 f50c 	lsl.w	r5, r2, ip
     146:	ea48 0e0e 	orr.w	lr, r8, lr
     14a:	fa00 f40c 	lsl.w	r4, r0, ip
     14e:	ea4f 4915 	mov.w	r9, r5, lsr #16
     152:	fa1f f885 	uxth.w	r8, r5
     156:	fbbe faf9 	udiv	sl, lr, r9
     15a:	0c21      	lsrs	r1, r4, #16
     15c:	fb09 e31a 	mls	r3, r9, sl, lr
     160:	fb0a fb08 	mul.w	fp, sl, r8
     164:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     168:	459b      	cmp	fp, r3
     16a:	d92a      	bls.n	1c2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2>
     16c:	18eb      	adds	r3, r5, r3
     16e:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     172:	d204      	bcs.n	17e <CONFIG_IDLE_STACK_SIZE+0x3e>
     174:	459b      	cmp	fp, r3
     176:	d902      	bls.n	17e <CONFIG_IDLE_STACK_SIZE+0x3e>
     178:	f1aa 0002 	sub.w	r0, sl, #2
     17c:	442b      	add	r3, r5
     17e:	eba3 030b 	sub.w	r3, r3, fp
     182:	b2a4      	uxth	r4, r4
     184:	fbb3 f2f9 	udiv	r2, r3, r9
     188:	fb09 3312 	mls	r3, r9, r2, r3
     18c:	fb02 f808 	mul.w	r8, r2, r8
     190:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     194:	45a0      	cmp	r8, r4
     196:	d916      	bls.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     198:	192c      	adds	r4, r5, r4
     19a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19e:	d203      	bcs.n	1a8 <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x18>
     1a0:	45a0      	cmp	r8, r4
     1a2:	d901      	bls.n	1a8 <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x18>
     1a4:	1e93      	subs	r3, r2, #2
     1a6:	442c      	add	r4, r5
     1a8:	eba4 0408 	sub.w	r4, r4, r8
     1ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1b0:	b127      	cbz	r7, 1bc <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x2c>
     1b2:	fa24 f40c 	lsr.w	r4, r4, ip
     1b6:	2300      	movs	r3, #0
     1b8:	603c      	str	r4, [r7, #0]
     1ba:	607b      	str	r3, [r7, #4]
     1bc:	4631      	mov	r1, r6
     1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1c2:	4650      	mov	r0, sl
     1c4:	e7db      	b.n	17e <CONFIG_IDLE_STACK_SIZE+0x3e>
     1c6:	4613      	mov	r3, r2
     1c8:	e7ee      	b.n	1a8 <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x18>
     1ca:	b902      	cbnz	r2, 1ce <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xe>
     1cc:	deff      	udf	#255	; 0xff
     1ce:	f1bc 0f00 	cmp.w	ip, #0
     1d2:	d12e      	bne.n	232 <CONFIG_FLASH_SIZE+0x32>
     1d4:	1a8b      	subs	r3, r1, r2
     1d6:	2601      	movs	r6, #1
     1d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1dc:	b2aa      	uxth	r2, r5
     1de:	fbb3 f8fe 	udiv	r8, r3, lr
     1e2:	0c21      	lsrs	r1, r4, #16
     1e4:	fb0e 3318 	mls	r3, lr, r8, r3
     1e8:	fb08 f902 	mul.w	r9, r8, r2
     1ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1f0:	4599      	cmp	r9, r3
     1f2:	d961      	bls.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     1f4:	18eb      	adds	r3, r5, r3
     1f6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     1fa:	d204      	bcs.n	206 <CONFIG_FLASH_SIZE+0x6>
     1fc:	4599      	cmp	r9, r3
     1fe:	d902      	bls.n	206 <CONFIG_FLASH_SIZE+0x6>
     200:	f1a8 0002 	sub.w	r0, r8, #2
     204:	442b      	add	r3, r5
     206:	eba3 0309 	sub.w	r3, r3, r9
     20a:	b2a4      	uxth	r4, r4
     20c:	fbb3 f1fe 	udiv	r1, r3, lr
     210:	fb0e 3311 	mls	r3, lr, r1, r3
     214:	434a      	muls	r2, r1
     216:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     21a:	42a2      	cmp	r2, r4
     21c:	d94e      	bls.n	2bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     21e:	192c      	adds	r4, r5, r4
     220:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     224:	d203      	bcs.n	22e <CONFIG_FLASH_SIZE+0x2e>
     226:	42a2      	cmp	r2, r4
     228:	d901      	bls.n	22e <CONFIG_FLASH_SIZE+0x2e>
     22a:	1e8b      	subs	r3, r1, #2
     22c:	442c      	add	r4, r5
     22e:	1aa4      	subs	r4, r4, r2
     230:	e7bc      	b.n	1ac <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x1c>
     232:	f1cc 0e20 	rsb	lr, ip, #32
     236:	fa02 f50c 	lsl.w	r5, r2, ip
     23a:	fa21 f90e 	lsr.w	r9, r1, lr
     23e:	fa01 f30c 	lsl.w	r3, r1, ip
     242:	fa20 fe0e 	lsr.w	lr, r0, lr
     246:	ea4e 0303 	orr.w	r3, lr, r3
     24a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     24e:	fa00 f40c 	lsl.w	r4, r0, ip
     252:	fbb9 f1f8 	udiv	r1, r9, r8
     256:	fa1f fe85 	uxth.w	lr, r5
     25a:	fb08 9211 	mls	r2, r8, r1, r9
     25e:	0c18      	lsrs	r0, r3, #16
     260:	fb01 f60e 	mul.w	r6, r1, lr
     264:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     268:	4296      	cmp	r6, r2
     26a:	d921      	bls.n	2b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     26c:	18aa      	adds	r2, r5, r2
     26e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     272:	d203      	bcs.n	27c <CONFIG_FLASH_SIZE+0x7c>
     274:	4296      	cmp	r6, r2
     276:	d901      	bls.n	27c <CONFIG_FLASH_SIZE+0x7c>
     278:	1e88      	subs	r0, r1, #2
     27a:	442a      	add	r2, r5
     27c:	1b92      	subs	r2, r2, r6
     27e:	b29b      	uxth	r3, r3
     280:	fbb2 f9f8 	udiv	r9, r2, r8
     284:	fb08 2219 	mls	r2, r8, r9, r2
     288:	fb09 fe0e 	mul.w	lr, r9, lr
     28c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     290:	459e      	cmp	lr, r3
     292:	d90f      	bls.n	2b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
     294:	18eb      	adds	r3, r5, r3
     296:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     29a:	d204      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     29c:	459e      	cmp	lr, r3
     29e:	d902      	bls.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2a0:	f1a9 0602 	sub.w	r6, r9, #2
     2a4:	442b      	add	r3, r5
     2a6:	eba3 030e 	sub.w	r3, r3, lr
     2aa:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     2ae:	e793      	b.n	1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     2b0:	4608      	mov	r0, r1
     2b2:	e7e3      	b.n	27c <CONFIG_FLASH_SIZE+0x7c>
     2b4:	464e      	mov	r6, r9
     2b6:	e7f6      	b.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2b8:	4640      	mov	r0, r8
     2ba:	e7a4      	b.n	206 <CONFIG_FLASH_SIZE+0x6>
     2bc:	460b      	mov	r3, r1
     2be:	e7b6      	b.n	22e <CONFIG_FLASH_SIZE+0x2e>
     2c0:	428b      	cmp	r3, r1
     2c2:	d905      	bls.n	2d0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     2c4:	b10f      	cbz	r7, 2ca <CONFIG_BT_HCI_TX_STACK_SIZE+0x4a>
     2c6:	e9c7 0100 	strd	r0, r1, [r7]
     2ca:	2600      	movs	r6, #0
     2cc:	4630      	mov	r0, r6
     2ce:	e775      	b.n	1bc <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x2c>
     2d0:	fab3 fc83 	clz	ip, r3
     2d4:	f1bc 0f00 	cmp.w	ip, #0
     2d8:	d10f      	bne.n	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     2da:	428b      	cmp	r3, r1
     2dc:	d301      	bcc.n	2e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     2de:	4282      	cmp	r2, r0
     2e0:	d809      	bhi.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     2e2:	1a84      	subs	r4, r0, r2
     2e4:	eb61 0e03 	sbc.w	lr, r1, r3
     2e8:	2001      	movs	r0, #1
     2ea:	2f00      	cmp	r7, #0
     2ec:	d06a      	beq.n	3c4 <CONFIG_BT_RPA_TIMEOUT+0x40>
     2ee:	e9c7 4e00 	strd	r4, lr, [r7]
     2f2:	2600      	movs	r6, #0
     2f4:	e762      	b.n	1bc <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x2c>
     2f6:	4660      	mov	r0, ip
     2f8:	e7f7      	b.n	2ea <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     2fa:	f1cc 0e20 	rsb	lr, ip, #32
     2fe:	fa03 f30c 	lsl.w	r3, r3, ip
     302:	fa22 f50e 	lsr.w	r5, r2, lr
     306:	fa21 f40e 	lsr.w	r4, r1, lr
     30a:	431d      	orrs	r5, r3
     30c:	fa01 f30c 	lsl.w	r3, r1, ip
     310:	fa20 f10e 	lsr.w	r1, r0, lr
     314:	430b      	orrs	r3, r1
     316:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     31a:	fa00 f60c 	lsl.w	r6, r0, ip
     31e:	fbb4 f9fa 	udiv	r9, r4, sl
     322:	fa1f f885 	uxth.w	r8, r5
     326:	fb0a 4019 	mls	r0, sl, r9, r4
     32a:	0c1c      	lsrs	r4, r3, #16
     32c:	fb09 f108 	mul.w	r1, r9, r8
     330:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     334:	42a1      	cmp	r1, r4
     336:	fa02 f20c 	lsl.w	r2, r2, ip
     33a:	d93f      	bls.n	3bc <CONFIG_BT_RPA_TIMEOUT+0x38>
     33c:	192c      	adds	r4, r5, r4
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d204      	bcs.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     344:	42a1      	cmp	r1, r4
     346:	d902      	bls.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     348:	f1a9 0002 	sub.w	r0, r9, #2
     34c:	442c      	add	r4, r5
     34e:	1a64      	subs	r4, r4, r1
     350:	b29b      	uxth	r3, r3
     352:	fbb4 f9fa 	udiv	r9, r4, sl
     356:	fb0a 4419 	mls	r4, sl, r9, r4
     35a:	fb09 f808 	mul.w	r8, r9, r8
     35e:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     362:	4588      	cmp	r8, r1
     364:	d92c      	bls.n	3c0 <CONFIG_BT_RPA_TIMEOUT+0x3c>
     366:	1869      	adds	r1, r5, r1
     368:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     36c:	d204      	bcs.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     36e:	4588      	cmp	r8, r1
     370:	d902      	bls.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     372:	f1a9 0302 	sub.w	r3, r9, #2
     376:	4429      	add	r1, r5
     378:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     37c:	eba1 0108 	sub.w	r1, r1, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	4549      	cmp	r1, r9
     386:	46c2      	mov	sl, r8
     388:	464c      	mov	r4, r9
     38a:	d302      	bcc.n	392 <CONFIG_BT_RPA_TIMEOUT+0xe>
     38c:	d106      	bne.n	39c <CONFIG_BT_RPA_TIMEOUT+0x18>
     38e:	4546      	cmp	r6, r8
     390:	d204      	bcs.n	39c <CONFIG_BT_RPA_TIMEOUT+0x18>
     392:	ebb8 0a02 	subs.w	sl, r8, r2
     396:	eb69 0405 	sbc.w	r4, r9, r5
     39a:	3801      	subs	r0, #1
     39c:	b197      	cbz	r7, 3c4 <CONFIG_BT_RPA_TIMEOUT+0x40>
     39e:	ebb6 030a 	subs.w	r3, r6, sl
     3a2:	eb61 0604 	sbc.w	r6, r1, r4
     3a6:	fa06 fe0e 	lsl.w	lr, r6, lr
     3aa:	fa23 f30c 	lsr.w	r3, r3, ip
     3ae:	ea4e 0303 	orr.w	r3, lr, r3
     3b2:	fa26 f60c 	lsr.w	r6, r6, ip
     3b6:	e9c7 3600 	strd	r3, r6, [r7]
     3ba:	e79a      	b.n	2f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x72>
     3bc:	4648      	mov	r0, r9
     3be:	e7c6      	b.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     3c0:	464b      	mov	r3, r9
     3c2:	e7d9      	b.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     3c4:	463e      	mov	r6, r7
     3c6:	e6f9      	b.n	1bc <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x2c>

000003c8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     3cc:	4d45      	ldr	r5, [pc, #276]	; (4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>)
     3ce:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
     3d2:	6899      	ldr	r1, [r3, #8]
     3d4:	f011 0101 	ands.w	r1, r1, #1
{
     3d8:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     3da:	d121      	bne.n	420 <CONFIG_LOG_BUFFER_SIZE+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     3dc:	aa01      	add	r2, sp, #4
     3de:	f640 4003 	movw	r0, #3075	; 0xc03
     3e2:	f006 fef1 	bl	71c8 <bt_hci_cmd_send_sync>
		if (err) {
     3e6:	4604      	mov	r4, r0
     3e8:	2800      	cmp	r0, #0
     3ea:	d177      	bne.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		hci_reset_complete(rsp);
     3ec:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
     3ee:	689b      	ldr	r3, [r3, #8]
	if (status) {
     3f0:	781b      	ldrb	r3, [r3, #0]
     3f2:	b993      	cbnz	r3, 41a <CONFIG_LOG_BUFFER_SIZE+0x1a>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     3f4:	f3bf 8f5b 	dmb	ish
     3f8:	462b      	mov	r3, r5
     3fa:	f853 2f70 	ldr.w	r2, [r3, #112]!
     3fe:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     402:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     406:	f3bf 8f5b 	dmb	ish
     40a:	e853 1f00 	ldrex	r1, [r3]
     40e:	e843 2000 	strex	r0, r2, [r3]
     412:	2800      	cmp	r0, #0
     414:	d1f9      	bne.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     416:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     41a:	9801      	ldr	r0, [sp, #4]
     41c:	f017 f8da 	bl	175d4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     420:	aa01      	add	r2, sp, #4
     422:	2100      	movs	r1, #0
     424:	f241 0003 	movw	r0, #4099	; 0x1003
     428:	f006 fece 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     42c:	4604      	mov	r4, r0
     42e:	2800      	cmp	r0, #0
     430:	d154      	bne.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	read_local_features_complete(rsp);
     432:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     434:	482c      	ldr	r0, [pc, #176]	; (4e8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9c>)
     436:	6899      	ldr	r1, [r3, #8]
     438:	2208      	movs	r2, #8
     43a:	3101      	adds	r1, #1
     43c:	f01f f8dc 	bl	1f5f8 <memcpy>
	net_buf_unref(rsp);
     440:	9801      	ldr	r0, [sp, #4]
     442:	f017 f8c7 	bl	175d4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     446:	4621      	mov	r1, r4
     448:	aa01      	add	r2, sp, #4
     44a:	f241 0001 	movw	r0, #4097	; 0x1001
     44e:	f006 febb 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     452:	4604      	mov	r4, r0
     454:	2800      	cmp	r0, #0
     456:	d141      	bne.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	read_local_ver_complete(rsp);
     458:	9801      	ldr	r0, [sp, #4]
     45a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     45c:	785a      	ldrb	r2, [r3, #1]
     45e:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     460:	78d9      	ldrb	r1, [r3, #3]
     462:	789a      	ldrb	r2, [r3, #2]
     464:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     468:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
     46a:	791a      	ldrb	r2, [r3, #4]
     46c:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     46e:	7a19      	ldrb	r1, [r3, #8]
     470:	79da      	ldrb	r2, [r3, #7]
     472:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     476:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     478:	795a      	ldrb	r2, [r3, #5]
     47a:	799b      	ldrb	r3, [r3, #6]
     47c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     480:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
     482:	f017 f8a7 	bl	175d4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     486:	4621      	mov	r1, r4
     488:	aa01      	add	r2, sp, #4
     48a:	f241 0002 	movw	r0, #4098	; 0x1002
     48e:	f006 fe9b 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     492:	4604      	mov	r4, r0
     494:	bb10      	cbnz	r0, 4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	read_supported_commands_complete(rsp);
     496:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     498:	4814      	ldr	r0, [pc, #80]	; (4ec <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa0>)
     49a:	6899      	ldr	r1, [r3, #8]
     49c:	2240      	movs	r2, #64	; 0x40
     49e:	3101      	adds	r1, #1
     4a0:	f01f f8aa 	bl	1f5f8 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     4a4:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
     4a8:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
     4aa:	f043 0306 	orr.w	r3, r3, #6
     4ae:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
     4b2:	f017 f88f 	bl	175d4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     4b6:	7f2b      	ldrb	r3, [r5, #28]
     4b8:	0659      	lsls	r1, r3, #25
     4ba:	d41f      	bmi.n	4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>
		BT_ERR("Non-LE capable controller detected!");
     4bc:	2301      	movs	r3, #1
     4be:	f04f 0100 	mov.w	r1, #0
     4c2:	f363 0107 	bfi	r1, r3, #0, #8
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     4c6:	4a0a      	ldr	r2, [pc, #40]	; (4f0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa4>)
     4c8:	4b0a      	ldr	r3, [pc, #40]	; (4f4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa8>)
     4ca:	480b      	ldr	r0, [pc, #44]	; (4f8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xac>)
     4cc:	1a9b      	subs	r3, r3, r2
     4ce:	08db      	lsrs	r3, r3, #3
     4d0:	f363 118f 	bfi	r1, r3, #6, #10
     4d4:	f01e fabe 	bl	1ea54 <log_0>
		return -ENODEV;
     4d8:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     4dc:	4620      	mov	r0, r4
     4de:	b006      	add	sp, #24
     4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4e4:	2000dd18 	.word	0x2000dd18
     4e8:	2000dd30 	.word	0x2000dd30
     4ec:	2000dd38 	.word	0x2000dd38
     4f0:	00025a6c 	.word	0x00025a6c
     4f4:	00025b34 	.word	0x00025b34
     4f8:	00027a95 	.word	0x00027a95
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     4fc:	4621      	mov	r1, r4
     4fe:	aa01      	add	r2, sp, #4
     500:	f242 0003 	movw	r0, #8195	; 0x2003
     504:	f006 fe60 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     508:	4604      	mov	r4, r0
     50a:	2800      	cmp	r0, #0
     50c:	d1e6      	bne.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	read_le_features_complete(rsp);
     50e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     510:	48bd      	ldr	r0, [pc, #756]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     512:	6899      	ldr	r1, [r3, #8]
     514:	2208      	movs	r2, #8
     516:	3101      	adds	r1, #1
     518:	f01f f86e 	bl	1f5f8 <memcpy>
	net_buf_unref(rsp);
     51c:	9801      	ldr	r0, [sp, #4]
     51e:	f017 f859 	bl	175d4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     522:	4621      	mov	r1, r4
     524:	aa01      	add	r2, sp, #4
     526:	f242 0002 	movw	r0, #8194	; 0x2002
     52a:	f006 fe4d 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     52e:	4604      	mov	r4, r0
     530:	2800      	cmp	r0, #0
     532:	d1d3      	bne.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	le_read_buffer_size_complete(rsp);
     534:	9b01      	ldr	r3, [sp, #4]
     536:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     538:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     53c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
     540:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
     542:	b121      	cbz	r1, 54e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x102>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     544:	78da      	ldrb	r2, [r3, #3]
		arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_init(sem, initial_count, limit);
     546:	48b1      	ldr	r0, [pc, #708]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     548:	4611      	mov	r1, r2
     54a:	f024 ff10 	bl	2536e <z_impl_k_sem_init>
	net_buf_unref(rsp);
     54e:	9801      	ldr	r0, [sp, #4]
     550:	f017 f840 	bl	175d4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     554:	7f2c      	ldrb	r4, [r5, #28]
     556:	f014 0420 	ands.w	r4, r4, #32
     55a:	f000 80d5 	beq.w	708 <CONFIG_BT_COMPANY_ID+0x117>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     55e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
     562:	071a      	lsls	r2, r3, #28
     564:	d511      	bpl.n	58a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x13e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     566:	aa01      	add	r2, sp, #4
     568:	2100      	movs	r1, #0
     56a:	f242 001c 	movw	r0, #8220	; 0x201c
     56e:	f006 fe2b 	bl	71c8 <bt_hci_cmd_send_sync>
		if (err) {
     572:	4604      	mov	r4, r0
     574:	2800      	cmp	r0, #0
     576:	d1b1      	bne.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		le_read_supp_states_complete(rsp);
     578:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     57a:	6883      	ldr	r3, [r0, #8]
     57c:	f853 2f01 	ldr.w	r2, [r3, #1]!
     580:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     582:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
     586:	f017 f825 	bl	175d4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     58a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     58e:	069b      	lsls	r3, r3, #26
     590:	f100 80d6 	bmi.w	740 <CONFIG_BT_COMPANY_ID+0x14f>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     594:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     598:	065f      	lsls	r7, r3, #25
     59a:	f100 80fd 	bmi.w	798 <CONFIG_BT_COMPANY_ID+0x1a7>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     59e:	2108      	movs	r1, #8
     5a0:	f242 0001 	movw	r0, #8193	; 0x2001
     5a4:	f006 fca2 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
     5a8:	4604      	mov	r4, r0
     5aa:	2800      	cmp	r0, #0
     5ac:	f000 80b3 	beq.w	716 <CONFIG_BT_COMPANY_ID+0x125>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     5b0:	2108      	movs	r1, #8
     5b2:	4408      	add	r0, r1
     5b4:	f022 f83e 	bl	22634 <net_buf_simple_add>
		    BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     5b8:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     5bc:	f011 0f40 	tst.w	r1, #64	; 0x40
     5c0:	f240 2302 	movw	r3, #514	; 0x202
     5c4:	bf08      	it	eq
     5c6:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     5c8:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     5ca:	bf4c      	ite	mi
     5cc:	f043 032c 	orrmi.w	r3, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     5d0:	f043 030c 	orrpl.w	r3, r3, #12
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     5d4:	4602      	mov	r2, r0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     5d6:	0688      	lsls	r0, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     5d8:	f895 0079 	ldrb.w	r0, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     5dc:	bf48      	it	mi
     5de:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     5e2:	f010 0f09 	tst.w	r0, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     5e6:	bf18      	it	ne
     5e8:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     5ec:	07c9      	lsls	r1, r1, #31
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     5ee:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
     5f2:	f001 0106 	and.w	r1, r1, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     5f6:	bf48      	it	mi
     5f8:	f043 0310 	orrmi.w	r3, r3, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     5fc:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     5fe:	bf08      	it	eq
     600:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     604:	4618      	mov	r0, r3
     606:	2100      	movs	r1, #0
     608:	f01f fb98 	bl	1fd3c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     60c:	4621      	mov	r1, r4
     60e:	2200      	movs	r2, #0
     610:	f242 0001 	movw	r0, #8193	; 0x2001
     614:	f006 fdd8 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     618:	4604      	mov	r4, r0
     61a:	2800      	cmp	r0, #0
     61c:	f47f af5e 	bne.w	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     620:	7f2b      	ldrb	r3, [r5, #28]
     622:	069a      	lsls	r2, r3, #26
     624:	d41e      	bmi.n	664 <CONFIG_BT_COMPANY_ID+0x73>
	if (bt_dev.le.mtu) {
     626:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
     62a:	b9d9      	cbnz	r1, 664 <CONFIG_BT_COMPANY_ID+0x73>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     62c:	aa01      	add	r2, sp, #4
     62e:	f241 0005 	movw	r0, #4101	; 0x1005
     632:	f006 fdc9 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     636:	4604      	mov	r4, r0
     638:	2800      	cmp	r0, #0
     63a:	f47f af4f 	bne.w	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	if (bt_dev.le.mtu) {
     63e:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
     642:	b963      	cbnz	r3, 65e <CONFIG_BT_COMPANY_ID+0x6d>
	read_buffer_size_complete(rsp);
     644:	9b01      	ldr	r3, [sp, #4]
     646:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
     648:	785a      	ldrb	r2, [r3, #1]
     64a:	7899      	ldrb	r1, [r3, #2]
     64c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     650:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
     654:	889a      	ldrh	r2, [r3, #4]
     656:	486d      	ldr	r0, [pc, #436]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     658:	4611      	mov	r1, r2
     65a:	f024 fe88 	bl	2536e <z_impl_k_sem_init>
	net_buf_unref(rsp);
     65e:	9801      	ldr	r0, [sp, #4]
     660:	f016 ffb8 	bl	175d4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     664:	2108      	movs	r1, #8
     666:	f640 4001 	movw	r0, #3073	; 0xc01
     66a:	f006 fc3f 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
     66e:	4604      	mov	r4, r0
     670:	2800      	cmp	r0, #0
     672:	d050      	beq.n	716 <CONFIG_BT_COMPANY_ID+0x125>
	ev = net_buf_add(buf, sizeof(*ev));
     674:	2108      	movs	r1, #8
     676:	4408      	add	r0, r1
     678:	f021 ffdc 	bl	22634 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     67c:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     680:	07db      	lsls	r3, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     682:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     684:	f140 80b5 	bpl.w	7f2 <CONFIG_BT_COMPANY_ID+0x201>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     688:	a15d      	add	r1, pc, #372	; (adr r1, 800 <CONFIG_ISR_STACK_SIZE>)
     68a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     68e:	f01f fb55 	bl	1fd3c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     692:	4621      	mov	r1, r4
     694:	2200      	movs	r2, #0
     696:	f640 4001 	movw	r0, #3073	; 0xc01
     69a:	f006 fd95 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     69e:	4604      	mov	r4, r0
     6a0:	2800      	cmp	r0, #0
     6a2:	f47f af1b 	bne.w	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     6a6:	4601      	mov	r1, r0
     6a8:	466a      	mov	r2, sp
     6aa:	f64f 4001 	movw	r0, #64513	; 0xfc01
     6ae:	f006 fd8b 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     6b2:	4e57      	ldr	r6, [pc, #348]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     6b4:	4b57      	ldr	r3, [pc, #348]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
     6b6:	1af6      	subs	r6, r6, r3
     6b8:	f3c6 06c9 	ubfx	r6, r6, #3, #10
     6bc:	2800      	cmp	r0, #0
     6be:	f000 80b5 	beq.w	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		BT_WARN("Vendor HCI extensions not available");
     6c2:	f04f 0100 	mov.w	r1, #0
     6c6:	2302      	movs	r3, #2
     6c8:	f363 0107 	bfi	r1, r3, #0, #8
     6cc:	4852      	ldr	r0, [pc, #328]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     6ce:	f366 118f 	bfi	r1, r6, #6, #10
		BT_WARN("Failed to read supported vendor commands");
     6d2:	f01e f9bf 	bl	1ea54 <log_0>
		err = bt_conn_init();
     6d6:	f009 f867 	bl	97a8 <bt_conn_init>
		if (err) {
     6da:	4604      	mov	r4, r0
     6dc:	2800      	cmp	r0, #0
     6de:	f47f aefd 	bne.w	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
     6e2:	494e      	ldr	r1, [pc, #312]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     6e4:	484e      	ldr	r0, [pc, #312]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     6e6:	f024 fec0 	bl	2546a <k_delayed_work_init>
		if (!bt_dev.id_count) {
     6ea:	79eb      	ldrb	r3, [r5, #7]
     6ec:	2b00      	cmp	r3, #0
     6ee:	f040 811e 	bne.w	92e <CONFIG_BT_RX_STACK_SIZE+0x96>
			BT_INFO("No ID address. App must call settings_load()");
     6f2:	2303      	movs	r3, #3
     6f4:	f04f 0100 	mov.w	r1, #0
     6f8:	f363 0107 	bfi	r1, r3, #0, #8
     6fc:	f366 118f 	bfi	r1, r6, #6, #10
     700:	4848      	ldr	r0, [pc, #288]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     702:	f01e f9a7 	bl	1ea54 <log_0>
			return 0;
     706:	e6e9      	b.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     708:	2102      	movs	r1, #2
     70a:	f640 406d 	movw	r0, #3181	; 0xc6d
     70e:	f006 fbed 	bl	6eec <bt_hci_cmd_create>
		if (!buf) {
     712:	4606      	mov	r6, r0
     714:	b910      	cbnz	r0, 71c <CONFIG_BT_COMPANY_ID+0x12b>
		return -ENOBUFS;
     716:	f06f 0436 	mvn.w	r4, #54	; 0x36
     71a:	e6df      	b.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     71c:	2102      	movs	r1, #2
     71e:	3008      	adds	r0, #8
     720:	f021 ff88 	bl	22634 <net_buf_simple_add>
		cp_le->le = 0x01;
     724:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
     726:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
     728:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     72a:	4622      	mov	r2, r4
     72c:	4631      	mov	r1, r6
     72e:	f640 406d 	movw	r0, #3181	; 0xc6d
     732:	f006 fd49 	bl	71c8 <bt_hci_cmd_send_sync>
		if (err) {
     736:	4604      	mov	r4, r0
     738:	2800      	cmp	r0, #0
     73a:	f43f af10 	beq.w	55e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x112>
     73e:	e6cd      	b.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
     740:	aa01      	add	r2, sp, #4
     742:	2100      	movs	r1, #0
     744:	f242 002f 	movw	r0, #8239	; 0x202f
     748:	f006 fd3e 	bl	71c8 <bt_hci_cmd_send_sync>
		if (err) {
     74c:	4604      	mov	r4, r0
     74e:	2800      	cmp	r0, #0
     750:	f47f aec4 	bne.w	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		rp = (void *)rsp->data;
     754:	9801      	ldr	r0, [sp, #4]
     756:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
     758:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
     75c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
     760:	f016 ff38 	bl	175d4 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     764:	2104      	movs	r1, #4
     766:	f242 0024 	movw	r0, #8228	; 0x2024
     76a:	f006 fbbf 	bl	6eec <bt_hci_cmd_create>
		if (!buf) {
     76e:	4606      	mov	r6, r0
     770:	2800      	cmp	r0, #0
     772:	d0d0      	beq.n	716 <CONFIG_BT_COMPANY_ID+0x125>
		cp = net_buf_add(buf, sizeof(*cp));
     774:	2104      	movs	r1, #4
     776:	3008      	adds	r0, #8
     778:	f021 ff5c 	bl	22634 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     77c:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     77e:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     782:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     784:	4631      	mov	r1, r6
     786:	f242 0024 	movw	r0, #8228	; 0x2024
     78a:	f006 fd1d 	bl	71c8 <bt_hci_cmd_send_sync>
		if (err) {
     78e:	4604      	mov	r4, r0
     790:	2800      	cmp	r0, #0
     792:	f43f aeff 	beq.w	594 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x148>
     796:	e6a1      	b.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
     798:	2102      	movs	r1, #2
     79a:	f242 002e 	movw	r0, #8238	; 0x202e
     79e:	f006 fba5 	bl	6eec <bt_hci_cmd_create>
		if (!buf) {
     7a2:	4604      	mov	r4, r0
     7a4:	2800      	cmp	r0, #0
     7a6:	d0b6      	beq.n	716 <CONFIG_BT_COMPANY_ID+0x125>
		cp = net_buf_add(buf, sizeof(*cp));
     7a8:	2102      	movs	r1, #2
     7aa:	3008      	adds	r0, #8
     7ac:	f021 ff42 	bl	22634 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
     7b0:	f06f 037b 	mvn.w	r3, #123	; 0x7b
     7b4:	7003      	strb	r3, [r0, #0]
     7b6:	2303      	movs	r3, #3
     7b8:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
     7ba:	4621      	mov	r1, r4
     7bc:	2200      	movs	r2, #0
     7be:	f242 002e 	movw	r0, #8238	; 0x202e
     7c2:	f006 fd01 	bl	71c8 <bt_hci_cmd_send_sync>
		if (err) {
     7c6:	4604      	mov	r4, r0
     7c8:	2800      	cmp	r0, #0
     7ca:	f47f ae87 	bne.w	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     7ce:	4601      	mov	r1, r0
     7d0:	aa01      	add	r2, sp, #4
     7d2:	f242 002a 	movw	r0, #8234	; 0x202a
     7d6:	f006 fcf7 	bl	71c8 <bt_hci_cmd_send_sync>
		if (err) {
     7da:	4604      	mov	r4, r0
     7dc:	2800      	cmp	r0, #0
     7de:	f47f ae7d 	bne.w	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
		le_read_resolving_list_size_complete(rsp);
     7e2:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     7e4:	6883      	ldr	r3, [r0, #8]
     7e6:	785b      	ldrb	r3, [r3, #1]
     7e8:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
		net_buf_unref(rsp);
     7ec:	f016 fef2 	bl	175d4 <net_buf_unref>
     7f0:	e6d5      	b.n	59e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x152>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     7f2:	480d      	ldr	r0, [pc, #52]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7f4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     7f8:	e749      	b.n	68e <CONFIG_BT_COMPANY_ID+0x9d>
     7fa:	bf00      	nop
     7fc:	f3af 8000 	nop.w
     800:	02008890 	.word	0x02008890
     804:	20008000 	.word	0x20008000
     808:	2000dd90 	.word	0x2000dd90
     80c:	2000dda4 	.word	0x2000dda4
     810:	00025b34 	.word	0x00025b34
     814:	00025a6c 	.word	0x00025a6c
     818:	00027ab9 	.word	0x00027ab9
     81c:	00007369 	.word	0x00007369
     820:	2000de00 	.word	0x2000de00
     824:	00027b8d 	.word	0x00027b8d
     828:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
     82c:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
     82e:	4843      	ldr	r0, [pc, #268]	; (93c <CONFIG_BT_RX_STACK_SIZE+0xa4>)
	rp.info = (void *)rsp->data;
     830:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     832:	2203      	movs	r2, #3
     834:	f04f 0300 	mov.w	r3, #0
     838:	f362 0307 	bfi	r3, r2, #0, #8
     83c:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     840:	2a03      	cmp	r2, #3
		return plat_str[platform];
     842:	bf96      	itet	ls
     844:	493e      	ldrls	r1, [pc, #248]	; (940 <CONFIG_BT_RX_STACK_SIZE+0xa8>)
	return "unknown";
     846:	493f      	ldrhi	r1, [pc, #252]	; (944 <CONFIG_BT_RX_STACK_SIZE+0xac>)
		return plat_str[platform];
     848:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     84c:	f366 138f 	bfi	r3, r6, #6, #10
     850:	f01e f921 	bl	1ea96 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     854:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     858:	2203      	movs	r2, #3
     85a:	f04f 0300 	mov.w	r3, #0
     85e:	f362 0307 	bfi	r3, r2, #0, #8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     862:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     864:	f366 138f 	bfi	r3, r6, #6, #10
     868:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     86c:	d138      	bne.n	8e0 <CONFIG_BT_RX_STACK_SIZE+0x48>
	if (variant < ARRAY_SIZE(nordic_str)) {
     86e:	2a03      	cmp	r2, #3
     870:	d836      	bhi.n	8e0 <CONFIG_BT_RX_STACK_SIZE+0x48>
		return nordic_str[variant];
     872:	4935      	ldr	r1, [pc, #212]	; (948 <CONFIG_BT_RX_STACK_SIZE+0xb0>)
     874:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     878:	4834      	ldr	r0, [pc, #208]	; (94c <CONFIG_BT_RX_STACK_SIZE+0xb4>)
     87a:	f01e f90c 	bl	1ea96 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     87e:	2203      	movs	r2, #3
     880:	f04f 0300 	mov.w	r3, #0
     884:	f362 0307 	bfi	r3, r2, #0, #8
     888:	7962      	ldrb	r2, [r4, #5]
     88a:	4831      	ldr	r0, [pc, #196]	; (950 <CONFIG_BT_RX_STACK_SIZE+0xb8>)
	if (variant < ARRAY_SIZE(var_str)) {
     88c:	2a03      	cmp	r2, #3
		return var_str[variant];
     88e:	bf96      	itet	ls
     890:	4930      	ldrls	r1, [pc, #192]	; (954 <CONFIG_BT_RX_STACK_SIZE+0xbc>)
	return "unknown";
     892:	492c      	ldrhi	r1, [pc, #176]	; (944 <CONFIG_BT_RX_STACK_SIZE+0xac>)
		return var_str[variant];
     894:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     898:	e9cd 1201 	strd	r1, r2, [sp, #4]
     89c:	79a2      	ldrb	r2, [r4, #6]
     89e:	9203      	str	r2, [sp, #12]
     8a0:	f8b4 2007 	ldrh.w	r2, [r4, #7]
     8a4:	9204      	str	r2, [sp, #16]
     8a6:	f8d4 2009 	ldr.w	r2, [r4, #9]
     8aa:	9205      	str	r2, [sp, #20]
     8ac:	f366 138f 	bfi	r3, r6, #6, #10
     8b0:	2205      	movs	r2, #5
     8b2:	a901      	add	r1, sp, #4
     8b4:	f01e f922 	bl	1eafc <log_n>
	net_buf_unref(rsp);
     8b8:	9800      	ldr	r0, [sp, #0]
     8ba:	f016 fe8b 	bl	175d4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     8be:	466a      	mov	r2, sp
     8c0:	2100      	movs	r1, #0
     8c2:	f64f 4002 	movw	r0, #64514	; 0xfc02
     8c6:	f006 fc7f 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     8ca:	4604      	mov	r4, r0
     8cc:	b150      	cbz	r0, 8e4 <CONFIG_BT_RX_STACK_SIZE+0x4c>
		BT_WARN("Failed to read supported vendor features");
     8ce:	f04f 0100 	mov.w	r1, #0
     8d2:	2302      	movs	r3, #2
     8d4:	f363 0107 	bfi	r1, r3, #0, #8
     8d8:	f366 118f 	bfi	r1, r6, #6, #10
     8dc:	481e      	ldr	r0, [pc, #120]	; (958 <CONFIG_BT_RX_STACK_SIZE+0xc0>)
     8de:	e6f8      	b.n	6d2 <CONFIG_BT_COMPANY_ID+0xe1>
		return "unknown";
     8e0:	4918      	ldr	r1, [pc, #96]	; (944 <CONFIG_BT_RX_STACK_SIZE+0xac>)
     8e2:	e7c9      	b.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
	rp.cmds = (void *)rsp->data;
     8e4:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     8e6:	481d      	ldr	r0, [pc, #116]	; (95c <CONFIG_BT_RX_STACK_SIZE+0xc4>)
     8e8:	6899      	ldr	r1, [r3, #8]
     8ea:	2202      	movs	r2, #2
     8ec:	3101      	adds	r1, #1
     8ee:	f01e fe83 	bl	1f5f8 <memcpy>
	net_buf_unref(rsp);
     8f2:	9800      	ldr	r0, [sp, #0]
     8f4:	f016 fe6e 	bl	175d4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     8f8:	466a      	mov	r2, sp
     8fa:	4621      	mov	r1, r4
     8fc:	f64f 4003 	movw	r0, #64515	; 0xfc03
     900:	f006 fc62 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
     904:	b140      	cbz	r0, 918 <CONFIG_BT_RX_STACK_SIZE+0x80>
		BT_WARN("Failed to read supported vendor commands");
     906:	f04f 0100 	mov.w	r1, #0
     90a:	2302      	movs	r3, #2
     90c:	f363 0107 	bfi	r1, r3, #0, #8
     910:	f366 118f 	bfi	r1, r6, #6, #10
     914:	4812      	ldr	r0, [pc, #72]	; (960 <CONFIG_BT_RX_STACK_SIZE+0xc8>)
     916:	e6dc      	b.n	6d2 <CONFIG_BT_COMPANY_ID+0xe1>
	rp.feat = (void *)rsp->data;
     918:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
     91a:	4812      	ldr	r0, [pc, #72]	; (964 <CONFIG_BT_RX_STACK_SIZE+0xcc>)
     91c:	6899      	ldr	r1, [r3, #8]
     91e:	2201      	movs	r2, #1
     920:	4411      	add	r1, r2
     922:	f01e fe69 	bl	1f5f8 <memcpy>
	net_buf_unref(rsp);
     926:	9800      	ldr	r0, [sp, #0]
     928:	f016 fe54 	bl	175d4 <net_buf_unref>
	if (err) {
     92c:	e6d3      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     92e:	2104      	movs	r1, #4
     930:	480d      	ldr	r0, [pc, #52]	; (968 <CONFIG_BT_RX_STACK_SIZE+0xd0>)
     932:	f01f f9aa 	bl	1fc8a <atomic_or>
	bt_finalize_init();
     936:	f007 fa73 	bl	7e20 <bt_finalize_init>
	return 0;
     93a:	e5cf      	b.n	4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
     93c:	00027add 	.word	0x00027add
     940:	00026144 	.word	0x00026144
     944:	0002820e 	.word	0x0002820e
     948:	0002610c 	.word	0x0002610c
     94c:	00027af6 	.word	0x00027af6
     950:	00027b0e 	.word	0x00027b0e
     954:	00026174 	.word	0x00026174
     958:	00027b3b 	.word	0x00027b3b
     95c:	2000dd79 	.word	0x2000dd79
     960:	00027b64 	.word	0x00027b64
     964:	2000dd78 	.word	0x2000dd78
     968:	2000dd88 	.word	0x2000dd88
     96c:	00000000 	.word	0x00000000

00000970 <ll_adv_enable>:
{
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
{
     970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     974:	b091      	sub	sp, #68	; 0x44
	u16_t const handle = 0;
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     976:	2302      	movs	r3, #2
     978:	930f      	str	r3, [sp, #60]	; 0x3c
	u32_t ticks_slot_offset;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	u32_t ret;

	if (!enable) {
     97a:	b930      	cbnz	r0, 98a <ll_adv_enable+0x1a>
		return disable(handle);
     97c:	f011 fe46 	bl	1260c <disable.constprop.5>
     980:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     982:	4630      	mov	r0, r6
     984:	b011      	add	sp, #68	; 0x44
     986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(u16_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     98a:	4f89      	ldr	r7, [pc, #548]	; (bb0 <ll_adv_enable+0x240>)
     98c:	f897 60cc 	ldrb.w	r6, [r7, #204]	; 0xcc
     990:	f016 0601 	ands.w	r6, r6, #1
     994:	463d      	mov	r5, r7
     996:	d001      	beq.n	99c <ll_adv_enable+0x2c>
	return BT_HCI_ERR_CMD_DISALLOWED;
     998:	260c      	movs	r6, #12
     99a:	e7f2      	b.n	982 <ll_adv_enable+0x12>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     99c:	f897 802c 	ldrb.w	r8, [r7, #44]	; 0x2c
		ull_filter_adv_update(lll->filter_policy);
     9a0:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
     9a4:	2227      	movs	r2, #39	; 0x27
     9a6:	232d      	movs	r3, #45	; 0x2d
     9a8:	fb12 3808 	smlabb	r8, r2, r8, r3
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9ac:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
     9b0:	fb02 7303 	mla	r3, r2, r3, r7
     9b4:	337d      	adds	r3, #125	; 0x7d
     9b6:	f000 0003 	and.w	r0, r0, #3
     9ba:	930b      	str	r3, [sp, #44]	; 0x2c
     9bc:	f015 fb26 	bl	1600c <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     9c0:	f897 00da 	ldrb.w	r0, [r7, #218]	; 0xda
     9c4:	0784      	lsls	r4, r0, #30
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9c6:	eb07 0b08 	add.w	fp, r7, r8
     9ca:	f140 80b1 	bpl.w	b30 <ll_adv_enable+0x1c0>
			rl_idx = ull_filter_rl_find(adv->id_addr_type,
     9ce:	4632      	mov	r2, r6
     9d0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
     9d4:	f3c0 0080 	ubfx	r0, r0, #2, #1
     9d8:	f015 fb8e 	bl	160f8 <ull_filter_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
     9dc:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ull_filter_rl_find(adv->id_addr_type,
     9de:	4681      	mov	r9, r0
			if (rl_idx != FILTER_IDX_NONE) {
     9e0:	d002      	beq.n	9e8 <ll_adv_enable+0x78>
				ull_filter_rpa_update(false);
     9e2:	4630      	mov	r0, r6
     9e4:	f015 fdb0 	bl	16548 <ull_filter_rpa_update>
			ull_filter_adv_pdu_update(adv, rl_idx, pdu_adv);
     9e8:	465a      	mov	r2, fp
     9ea:	4649      	mov	r1, r9
     9ec:	4870      	ldr	r0, [pc, #448]	; (bb0 <ll_adv_enable+0x240>)
     9ee:	f015 fb19 	bl	16024 <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, rl_idx, pdu_scan);
     9f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     9f4:	486e      	ldr	r0, [pc, #440]	; (bb0 <ll_adv_enable+0x240>)
     9f6:	4649      	mov	r1, r9
     9f8:	f015 fb14 	bl	16024 <ull_filter_adv_pdu_update>
		if (pdu_adv->tx_addr &&
     9fc:	f817 3008 	ldrb.w	r3, [r7, r8]
     a00:	0658      	lsls	r0, r3, #25
     a02:	f100 80ac 	bmi.w	b5e <ll_adv_enable+0x1ee>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     a06:	f817 3008 	ldrb.w	r3, [r7, r8]
     a0a:	f013 0f0e 	tst.w	r3, #14
     a0e:	f000 80b0 	beq.w	b72 <ll_adv_enable+0x202>
	u8_t ch_map = lll->chan_map;
     a12:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	adv->rl_idx = rl_idx;
     a16:	f885 90db 	strb.w	r9, [r5, #219]	; 0xdb
	u8_t ch_map = lll->chan_map;
     a1a:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     a1e:	2101      	movs	r1, #1
     a20:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
	u8_t ch_map = lll->chan_map;
     a24:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     a28:	f020 ff90 	bl	2194c <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     a2c:	2800      	cmp	r0, #0
     a2e:	f000 81b1 	beq.w	d94 <ll_adv_enable+0x424>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     a32:	f817 4008 	ldrb.w	r4, [r7, r8]
		const u8_t rsp_data_len = pdu_scan->len;
     a36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		const u8_t adv_data_len = pdu_adv->len;
     a38:	f89b 3001 	ldrb.w	r3, [fp, #1]
		const u8_t rsp_data_len = pdu_scan->len;
     a3c:	7852      	ldrb	r2, [r2, #1]
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     a3e:	f004 040f 	and.w	r4, r4, #15
     a42:	2c02      	cmp	r4, #2
     a44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     a48:	f040 8173 	bne.w	d32 <ll_adv_enable+0x3c2>
			adv_size += adv_data_len;
     a4c:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     a4e:	00db      	lsls	r3, r3, #3
     a50:	4358      	muls	r0, r3
     a52:	f500 70aa 	add.w	r0, r0, #340	; 0x154
     a56:	2364      	movs	r3, #100	; 0x64
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     a58:	fb01 0003 	mla	r0, r1, r3, r0
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     a5c:	f895 3020 	ldrb.w	r3, [r5, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     a60:	4954      	ldr	r1, [pc, #336]	; (bb4 <ll_adv_enable+0x244>)
	hdr->parent = parent;
     a62:	61ed      	str	r5, [r5, #28]
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     a64:	2400      	movs	r4, #0
	hdr->is_stop = 0U;
     a66:	f364 0300 	bfi	r3, r4, #0, #1
     a6a:	f885 3020 	strb.w	r3, [r5, #32]
	adv->evt.ticks_xtal_to_start =
     a6e:	2331      	movs	r3, #49	; 0x31
     a70:	602b      	str	r3, [r5, #0]
     a72:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     a76:	a34c      	add	r3, pc, #304	; (adr r3, ba8 <ll_adv_enable+0x238>)
     a78:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
     a7c:	606c      	str	r4, [r5, #4]
	adv->evt.ticks_preempt_to_start =
     a7e:	60ac      	str	r4, [r5, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     a80:	fba0 0101 	umull	r0, r1, r0, r1
     a84:	f7ff fb2c 	bl	e0 <__aeabi_uldivmod>
     a88:	60e8      	str	r0, [r5, #12]
	u16_t interval = adv->interval;
     a8a:	f8b5 90d8 	ldrh.w	r9, [r5, #216]	; 0xd8
	ticks_anchor = ticker_ticks_now_get();
     a8e:	f021 f88a 	bl	21ba6 <ticker_ticks_now_get>
     a92:	4682      	mov	sl, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     a94:	f1b9 0f00 	cmp.w	r9, #0
     a98:	d106      	bne.n	aa8 <ll_adv_enable+0x138>
     a9a:	f817 4008 	ldrb.w	r4, [r7, r8]
     a9e:	f004 040f 	and.w	r4, r4, #15
     aa2:	1e63      	subs	r3, r4, #1
     aa4:	425c      	negs	r4, r3
     aa6:	415c      	adcs	r4, r3
     aa8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
     aac:	f8df 8110 	ldr.w	r8, [pc, #272]	; bc0 <ll_adv_enable+0x250>
     ab0:	68ea      	ldr	r2, [r5, #12]
     ab2:	f364 0300 	bfi	r3, r4, #0, #1
     ab6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	if (lll->is_hdcd) {
     aba:	f013 0401 	ands.w	r4, r3, #1
     abe:	4b3e      	ldr	r3, [pc, #248]	; (bb8 <ll_adv_enable+0x248>)
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ac0:	9204      	str	r2, [sp, #16]
     ac2:	af0f      	add	r7, sp, #60	; 0x3c
     ac4:	e9cd 8707 	strd	r8, r7, [sp, #28]
     ac8:	e9cd 3505 	strd	r3, r5, [sp, #20]
	if (lll->is_hdcd) {
     acc:	f000 814a 	beq.w	d64 <ll_adv_enable+0x3f4>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ad0:	2000      	movs	r0, #0
     ad2:	e9cd 0200 	strd	r0, r2, [sp]
     ad6:	2103      	movs	r1, #3
     ad8:	e9cd 0002 	strd	r0, r0, [sp, #8]
     adc:	4653      	mov	r3, sl
     ade:	2202      	movs	r2, #2
     ae0:	f00e fcd4 	bl	f48c <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     ae4:	4639      	mov	r1, r7
     ae6:	f010 fd17 	bl	11518 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     aea:	2800      	cmp	r0, #0
     aec:	f040 8152 	bne.w	d94 <ll_adv_enable+0x424>
		ret_cb = TICKER_STATUS_BUSY;
     af0:	2202      	movs	r2, #2
     af2:	920f      	str	r2, [sp, #60]	; 0x3c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     af4:	e9cd 8707 	strd	r8, r7, [sp, #28]
     af8:	4a30      	ldr	r2, [pc, #192]	; (bbc <ll_adv_enable+0x24c>)
     afa:	9506      	str	r5, [sp, #24]
     afc:	e9cd 0002 	strd	r0, r0, [sp, #8]
     b00:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     b04:	e9cd 0204 	strd	r0, r2, [sp, #16]
     b08:	9300      	str	r3, [sp, #0]
     b0a:	9001      	str	r0, [sp, #4]
     b0c:	4653      	mov	r3, sl
     b0e:	2201      	movs	r2, #1
     b10:	2103      	movs	r1, #3
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b12:	f00e fcbb 	bl	f48c <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     b16:	4639      	mov	r1, r7
     b18:	f010 fcfe 	bl	11518 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     b1c:	2800      	cmp	r0, #0
     b1e:	f040 8139 	bne.w	d94 <ll_adv_enable+0x424>
	adv->is_enabled = 1;
     b22:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
     b26:	f043 0301 	orr.w	r3, r3, #1
     b2a:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
	return 0;
     b2e:	e728      	b.n	982 <ll_adv_enable+0x12>
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     b30:	f817 0008 	ldrb.w	r0, [r7, r8]
     b34:	4631      	mov	r1, r6
     b36:	f3c0 1080 	ubfx	r0, r0, #6, #1
     b3a:	f00e fd73 	bl	f624 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     b3e:	2206      	movs	r2, #6
     b40:	4601      	mov	r1, r0
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     b42:	4604      	mov	r4, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     b44:	f10b 0002 	add.w	r0, fp, #2
     b48:	f01e fd56 	bl	1f5f8 <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b4e:	2206      	movs	r2, #6
     b50:	4621      	mov	r1, r4
     b52:	1c98      	adds	r0, r3, #2
     b54:	f01e fd50 	bl	1f5f8 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
     b58:	f04f 09ff 	mov.w	r9, #255	; 0xff
     b5c:	e74e      	b.n	9fc <ll_adv_enable+0x8c>
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     b5e:	2106      	movs	r1, #6
     b60:	f10b 0002 	add.w	r0, fp, #2
     b64:	f020 febb 	bl	218de <mem_nz>
		if (pdu_adv->tx_addr &&
     b68:	2800      	cmp	r0, #0
     b6a:	f47f af4c 	bne.w	a06 <ll_adv_enable+0x96>
			return BT_HCI_ERR_INVALID_PARAM;
     b6e:	2612      	movs	r6, #18
     b70:	e707      	b.n	982 <ll_adv_enable+0x12>
		if (lll->conn) {
     b72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b74:	2b00      	cmp	r3, #0
     b76:	f47f af0f 	bne.w	998 <ll_adv_enable+0x28>
		link = ll_rx_link_alloc();
     b7a:	f010 fc25 	bl	113c8 <ll_rx_link_alloc>
		if (!link) {
     b7e:	4682      	mov	sl, r0
     b80:	b128      	cbz	r0, b8e <ll_adv_enable+0x21e>
		node_rx = ll_rx_alloc();
     b82:	f010 fc2d 	bl	113e0 <ll_rx_alloc>
		if (!node_rx) {
     b86:	b920      	cbnz	r0, b92 <ll_adv_enable+0x222>
			ll_rx_link_release(link);
     b88:	4650      	mov	r0, sl
     b8a:	f010 fc23 	bl	113d4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     b8e:	2607      	movs	r6, #7
     b90:	e6f7      	b.n	982 <ll_adv_enable+0x12>
     b92:	900c      	str	r0, [sp, #48]	; 0x30
		conn = ll_conn_acquire();
     b94:	f012 fbfe 	bl	13394 <ll_conn_acquire>
		if (!conn) {
     b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     b9a:	4604      	mov	r4, r0
     b9c:	b990      	cbnz	r0, bc4 <ll_adv_enable+0x254>
			ll_rx_release(node_rx);
     b9e:	4618      	mov	r0, r3
     ba0:	f010 fc24 	bl	113ec <ll_rx_release>
     ba4:	e7f0      	b.n	b88 <ll_adv_enable+0x218>
     ba6:	bf00      	nop
     ba8:	1afd498d 	.word	0x1afd498d
     bac:	00000007 	.word	0x00000007
     bb0:	200010c0 	.word	0x200010c0
     bb4:	3b9aca00 	.word	0x3b9aca00
     bb8:	000120a1 	.word	0x000120a1
     bbc:	000122fd 	.word	0x000122fd
     bc0:	0001150d 	.word	0x0001150d
		conn_lll = &conn->lll;
     bc4:	f100 021c 	add.w	r2, r0, #28
     bc8:	920c      	str	r2, [sp, #48]	; 0x30
		conn_lll->handle = 0xFFFF;
     bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
     bce:	8582      	strh	r2, [r0, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     bd0:	6f82      	ldr	r2, [r0, #120]	; 0x78
     bd2:	b912      	cbnz	r2, bda <ll_adv_enable+0x26a>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     bd4:	f100 0270 	add.w	r2, r0, #112	; 0x70
     bd8:	6782      	str	r2, [r0, #120]	; 0x78
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     bda:	f104 026c 	add.w	r2, r4, #108	; 0x6c
     bde:	f104 0168 	add.w	r1, r4, #104	; 0x68
     be2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     be4:	930d      	str	r3, [sp, #52]	; 0x34
     be6:	f020 fe85 	bl	218f4 <memq_init>
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
     bea:	4a71      	ldr	r2, [pc, #452]	; (db0 <ll_adv_enable+0x440>)
		conn->llcp_terminate.node_rx.hdr.link = link;
     bec:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
     bf0:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
     bf4:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
		conn_lll->phy_tx = BIT(0);
     bf8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
     bfc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
		conn_lll->phy_tx = BIT(0);
     c00:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     c04:	f022 0207 	bic.w	r2, r2, #7
     c08:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     c0c:	f042 0201 	orr.w	r2, r2, #1
     c10:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
     c14:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
     c18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
     c20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		conn_lll->data_chan_use = 0;
     c24:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
     c26:	f362 0100 	bfi	r1, r2, #0, #1
     c2a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
		conn->connect_expire = 6;
     c2e:	2106      	movs	r1, #6
     c30:	f8a4 10c4 	strh.w	r1, [r4, #196]	; 0xc4
		conn->common.fex_valid = 0;
     c34:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
		conn_lll->data_chan_use = 0;
     c38:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
		conn->common.fex_valid = 0;
     c3c:	f021 0103 	bic.w	r1, r1, #3
     c40:	f884 10dc 	strb.w	r1, [r4, #220]	; 0xdc
		conn->llcp_feature.features = LL_FEAT;
     c44:	495b      	ldr	r1, [pc, #364]	; (db4 <ll_adv_enable+0x444>)
     c46:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     c4a:	f894 1122 	ldrb.w	r1, [r4, #290]	; 0x122
		conn_lll->latency_prepare = 0;
     c4e:	8662      	strh	r2, [r4, #50]	; 0x32
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     c50:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->latency_event = 0;
     c54:	6362      	str	r2, [r4, #52]	; 0x34
		conn_lll->slave.window_widening_event_us = 0;
     c56:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
		conn_lll->slave.window_size_prepare_us = 0;
     c5a:	6562      	str	r2, [r4, #84]	; 0x54
		conn->supervision_expire = 0;
     c5c:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->procedure_expire = 0;
     c60:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     c64:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
     c68:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_rx = NULL;
     c6c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     c70:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     c74:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     c78:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
		conn->llcp_terminate.reason_peer = 0;
     c7c:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
		conn_lll->link_tx_free = NULL;
     c80:	67a2      	str	r2, [r4, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     c82:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     c86:	f884 1122 	strb.w	r1, [r4, #290]	; 0x122
		conn_lll->sn = 0;
     c8a:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     c8e:	f8a4 2150 	strh.w	r2, [r4, #336]	; 0x150
		conn_lll->sn = 0;
     c92:	f021 011f 	bic.w	r1, r1, #31
     c96:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     c9a:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
		conn->llcp_conn_param.req = 0;
     c9e:	f8a4 2170 	strh.w	r2, [r4, #368]	; 0x170
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     ca2:	f021 0107 	bic.w	r1, r1, #7
     ca6:	f884 1152 	strb.w	r1, [r4, #338]	; 0x152
		conn->llcp_conn_param.disabled = 0;
     caa:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     cae:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
		conn->llcp_conn_param.disabled = 0;
     cb2:	f362 1104 	bfi	r1, r2, #4, #1
		conn->llcp_length.cache.tx_octets = 0U;
     cb6:	f8a4 21a4 	strh.w	r2, [r4, #420]	; 0x1a4
		conn->llcp_conn_param.disabled = 0;
     cba:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     cbe:	f012 fc9d 	bl	135fc <ull_conn_default_tx_octets_get>
     cc2:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     cc6:	f012 fc9f 	bl	13608 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     cca:	493b      	ldr	r1, [pc, #236]	; (db8 <ll_adv_enable+0x448>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     ccc:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     cd0:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
     cd4:	4001      	ands	r1, r0
     cd6:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     cda:	f012 fc9b 	bl	13614 <ull_conn_default_phy_tx_get>
     cde:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
     ce2:	f360 0102 	bfi	r1, r0, #0, #3
     ce6:	f884 11ac 	strb.w	r1, [r4, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     cea:	f012 fc99 	bl	13620 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     cf0:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		lll->conn = conn_lll;
     cf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		adv->link_cc_free = link;
     cf6:	f8c5 a0d0 	str.w	sl, [r5, #208]	; 0xd0
		lll->conn = conn_lll;
     cfa:	626b      	str	r3, [r5, #36]	; 0x24
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     cfc:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
     d00:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->parent = parent;
     d04:	61e4      	str	r4, [r4, #28]
		conn->phy_pref_flags = 0;
     d06:	2200      	movs	r2, #0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     d08:	f360 1106 	bfi	r1, r0, #4, #3
		conn->phy_pref_flags = 0;
     d0c:	f362 01c3 	bfi	r1, r2, #3, #1
	hdr->is_stop = 0U;
     d10:	f362 0300 	bfi	r3, r2, #0, #1
     d14:	f884 11ac 	strb.w	r1, [r4, #428]	; 0x1ac
		conn->tx_data = conn->tx_data_last = 0;
     d18:	e9c4 226f 	strd	r2, r2, [r4, #444]	; 0x1bc
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     d1c:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
     d20:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
     d24:	e9c4 2205 	strd	r2, r2, [r4, #20]
     d28:	f884 3020 	strb.w	r3, [r4, #32]
		lll_clock_wait();
     d2c:	f014 fb38 	bl	153a0 <lll_clock_wait>
     d30:	e66f      	b.n	a12 <ll_adv_enable+0xa2>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     d32:	2c01      	cmp	r4, #1
     d34:	d012      	beq.n	d5c <ll_adv_enable+0x3ec>
					  BYTES2US(ADVA_SIZE + rsp_data_len,
     d36:	00d2      	lsls	r2, r2, #3
		const u16_t scan_rsp_us  = ll_hdr_us +
     d38:	3280      	adds	r2, #128	; 0x80
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     d3a:	b94c      	cbnz	r4, d50 <ll_adv_enable+0x3e0>
				adv_size += adv_data_len;
     d3c:	3310      	adds	r3, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
     d3e:	f502 7227 	add.w	r2, r2, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     d42:	00db      	lsls	r3, r3, #3
     d44:	f102 0098 	add.w	r0, r2, #152	; 0x98
     d48:	4418      	add	r0, r3
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     d4a:	f503 739a 	add.w	r3, r3, #308	; 0x134
     d4e:	e683      	b.n	a58 <ll_adv_enable+0xe8>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     d50:	2c06      	cmp	r4, #6
     d52:	d0f3      	beq.n	d3c <ll_adv_enable+0x3cc>
		u32_t adv_size		= ll_hdr_size + ADVA_SIZE;
     d54:	2310      	movs	r3, #16
	u32_t slot_us	= EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
     d56:	f44f 72aa 	mov.w	r2, #340	; 0x154
     d5a:	e7f2      	b.n	d42 <ll_adv_enable+0x3d2>
				adv_size += TARGETA_SIZE;
     d5c:	2316      	movs	r3, #22
				slot_us += conn_ind_us;
     d5e:	f44f 722d 	mov.w	r2, #692	; 0x2b4
     d62:	e7ee      	b.n	d42 <ll_adv_enable+0x3d2>
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     d64:	4815      	ldr	r0, [pc, #84]	; (dbc <ll_adv_enable+0x44c>)
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     d6a:	fa1f f889 	uxth.w	r8, r9
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     d6e:	e9cd 4302 	strd	r4, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     d72:	fba8 0100 	umull	r0, r1, r8, r0
     d76:	2391      	movs	r3, #145	; 0x91
     d78:	fb03 1108 	mla	r1, r3, r8, r1
     d7c:	a30a      	add	r3, pc, #40	; (adr r3, da8 <ll_adv_enable+0x438>)
     d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
     d82:	f7ff f9ad 	bl	e0 <__aeabi_uldivmod>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     d86:	4653      	mov	r3, sl
     d88:	e9cd 4000 	strd	r4, r0, [sp]
     d8c:	2202      	movs	r2, #2
     d8e:	2103      	movs	r1, #3
     d90:	4620      	mov	r0, r4
     d92:	e6be      	b.n	b12 <ll_adv_enable+0x1a2>
	if (adv->lll.conn) {
     d94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     d96:	2b00      	cmp	r3, #0
     d98:	f43f adfe 	beq.w	998 <ll_adv_enable+0x28>
		conn_release(adv);
     d9c:	4808      	ldr	r0, [pc, #32]	; (dc0 <ll_adv_enable+0x450>)
     d9e:	f011 fa01 	bl	121a4 <conn_release>
     da2:	e5f9      	b.n	998 <ll_adv_enable+0x28>
     da4:	f3af 8000 	nop.w
     da8:	1afd498d 	.word	0x1afd498d
     dac:	00000007 	.word	0x00000007
     db0:	01480148 	.word	0x01480148
     db4:	0001417f 	.word	0x0001417f
     db8:	feff0000 	.word	0xfeff0000
     dbc:	84e72a00 	.word	0x84e72a00
     dc0:	200010c0 	.word	0x200010c0
     dc4:	00000000 	.word	0x00000000

00000dc8 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, u32_t ticks_at_expire, u16_t lazy)
{
     dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dcc:	4692      	mov	sl, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     dce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
     dd4:	429a      	cmp	r2, r3
{
     dd6:	b08d      	sub	sp, #52	; 0x34
     dd8:	4604      	mov	r4, r0
     dda:	4688      	mov	r8, r1
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     ddc:	d10c      	bne.n	df8 <ull_conn_llcp+0x30>
     dde:	f240 3303 	movw	r3, #771	; 0x303
     de2:	4aca      	ldr	r2, [pc, #808]	; (110c <ull_conn_llcp+0x344>)
     de4:	49ca      	ldr	r1, [pc, #808]	; (1110 <ull_conn_llcp+0x348>)
     de6:	48cb      	ldr	r0, [pc, #812]	; (1114 <ull_conn_llcp+0x34c>)
     de8:	f01c fce5 	bl	1d7b6 <printk>
     dec:	4040      	eors	r0, r0
     dee:	f380 8811 	msr	BASEPRI, r0
     df2:	f04f 0003 	mov.w	r0, #3
     df6:	df02      	svc	2

	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     df8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
     dfc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
     e00:	4293      	cmp	r3, r2
     e02:	d110      	bne.n	e26 <ull_conn_llcp+0x5e>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_rx) {
     e04:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
     e08:	f011 0501 	ands.w	r5, r1, #1
     e0c:	d10b      	bne.n	e26 <ull_conn_llcp+0x5e>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     e0e:	f894 0105 	ldrb.w	r0, [r4, #261]	; 0x105
     e12:	f894 6104 	ldrb.w	r6, [r4, #260]	; 0x104
     e16:	4286      	cmp	r6, r0
     e18:	d01d      	beq.n	e56 <ull_conn_llcp+0x8e>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
     e1a:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     e1c:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     e1e:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
     e22:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
#endif /* CONFIG_BT_CTLR_PHY */
		}
	}

	/* check if procedure is requested */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     e26:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
     e2a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
     e2e:	1acb      	subs	r3, r1, r3
     e30:	f003 0303 	and.w	r3, r3, #3
     e34:	2b02      	cmp	r3, #2
     e36:	f040 83bd 	bne.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		switch (conn->llcp_type) {
     e3a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
     e3e:	3b01      	subs	r3, #1
     e40:	2b05      	cmp	r3, #5
     e42:	f201 808c 	bhi.w	1f5e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbd6>
     e46:	e8df f013 	tbh	[pc, r3, lsl #1]
     e4a:	0363      	.short	0x0363
     e4c:	05d90589 	.word	0x05d90589
     e50:	0710088a 	.word	0x0710088a
     e54:	072f      	.short	0x072f
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     e56:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
     e5a:	f894 6118 	ldrb.w	r6, [r4, #280]	; 0x118
     e5e:	42b3      	cmp	r3, r6
     e60:	d063      	beq.n	f2a <ull_conn_llcp+0x162>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     e62:	1b9b      	subs	r3, r3, r6
     e64:	07de      	lsls	r6, r3, #31
     e66:	d5de      	bpl.n	e26 <ull_conn_llcp+0x5e>
		return;
	}

	if (conn->common.fex_valid) {
     e68:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
     e6c:	f011 0601 	ands.w	r6, r1, #1
     e70:	d02e      	beq.n	ed0 <ull_conn_llcp+0x108>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
     e72:	f010 fae9 	bl	11448 <ll_pdu_rx_alloc>
		if (!rx) {
     e76:	4606      	mov	r6, r0
     e78:	2800      	cmp	r0, #0
     e7a:	d0d4      	beq.n	e26 <ull_conn_llcp+0x5e>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
     e7c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
     e80:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
     e84:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     e86:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     e88:	2302      	movs	r3, #2
     e8a:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     e8c:	f890 3020 	ldrb.w	r3, [r0, #32]
     e90:	f043 0303 	orr.w	r3, r3, #3
     e94:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     e98:	2309      	movs	r3, #9
     e9a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     e9e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     ea2:	2208      	movs	r2, #8
     ea4:	4629      	mov	r1, r5
     ea6:	3024      	adds	r0, #36	; 0x24
     ea8:	f01e fbd0 	bl	1f64c <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le24(conn->llcp_feature.features,
     eac:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
     eb0:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	dst[1] = val >> 8;
     eb4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
     eb8:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
     eba:	f886 2025 	strb.w	r2, [r6, #37]	; 0x25
	dst[2] = val >> 16;
     ebe:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     ec2:	4631      	mov	r1, r6
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     ec4:	6808      	ldr	r0, [r1, #0]
     ec6:	f010 fa97 	bl	113f8 <ll_rx_put>
		ll_rx_sched();
     eca:	f010 fa9f 	bl	1140c <ll_rx_sched>
     ece:	e7aa      	b.n	e26 <ull_conn_llcp+0x5e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     ed0:	4891      	ldr	r0, [pc, #580]	; (1118 <ull_conn_llcp+0x350>)
     ed2:	f020 fcbf 	bl	21854 <mem_acquire>
	if (tx) {
     ed6:	4605      	mov	r5, r0
     ed8:	2800      	cmp	r0, #0
     eda:	d0a4      	beq.n	e26 <ull_conn_llcp+0x5e>
		conn->llcp_feature.ack--;
     edc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
     ee0:	3b01      	subs	r3, #1
     ee2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features = LL_FEAT;
     ee6:	4b8d      	ldr	r3, [pc, #564]	; (111c <ull_conn_llcp+0x354>)
     ee8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     eec:	7903      	ldrb	r3, [r0, #4]
     eee:	f043 0303 	orr.w	r3, r3, #3
     ef2:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
     ef4:	2309      	movs	r3, #9
     ef6:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
     ef8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
     efc:	2b00      	cmp	r3, #0
     efe:	bfac      	ite	ge
     f00:	2308      	movge	r3, #8
     f02:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
     f04:	2208      	movs	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
     f06:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
     f08:	4631      	mov	r1, r6
     f0a:	4410      	add	r0, r2
     f0c:	f01e fb9e 	bl	1f64c <memset>
		sys_put_le24(conn->llcp_feature.features,
     f10:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
     f14:	722b      	strb	r3, [r5, #8]
	dst[1] = val >> 8;
     f16:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
     f1a:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
     f1c:	726a      	strb	r2, [r5, #9]
	dst[2] = val >> 16;
     f1e:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
     f20:	4629      	mov	r1, r5

		pr = &pdu_ctrl_tx->llctrl.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
		pr->rx_phys = conn->llcp_phy.rx;

		ctrl_tx_enqueue(conn, tx);
     f22:	4620      	mov	r0, r4
     f24:	f021 f85f 	bl	21fe6 <ctrl_tx_enqueue>
     f28:	e0ca      	b.n	10c0 <ull_conn_llcp+0x2f8>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     f2a:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
     f2e:	f894 5120 	ldrb.w	r5, [r4, #288]	; 0x120
     f32:	42ab      	cmp	r3, r5
     f34:	d064      	beq.n	1000 <ull_conn_llcp+0x238>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     f36:	1b5b      	subs	r3, r3, r5
     f38:	07d8      	lsls	r0, r3, #31
     f3a:	f57f af74 	bpl.w	e26 <ull_conn_llcp+0x5e>
	if (conn->llcp_version.tx == 0U) {
     f3e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
     f42:	07d9      	lsls	r1, r3, #31
     f44:	d425      	bmi.n	f92 <ull_conn_llcp+0x1ca>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     f46:	4874      	ldr	r0, [pc, #464]	; (1118 <ull_conn_llcp+0x350>)
     f48:	f020 fc84 	bl	21854 <mem_acquire>
		if (tx) {
     f4c:	4601      	mov	r1, r0
     f4e:	2800      	cmp	r0, #0
     f50:	f43f af69 	beq.w	e26 <ull_conn_llcp+0x5e>
			conn->llcp_version.ack--;
     f54:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
     f58:	3b01      	subs	r3, #1
     f5a:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
			conn->llcp_version.tx = 1U;
     f5e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
     f62:	f043 0301 	orr.w	r3, r3, #1
     f66:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
			pdu->ll_id = PDU_DATA_LLID_CTRL;
     f6a:	7903      	ldrb	r3, [r0, #4]
     f6c:	f043 0303 	orr.w	r3, r3, #3
     f70:	7103      	strb	r3, [r0, #4]
			pdu->len =
     f72:	2306      	movs	r3, #6
     f74:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
     f76:	230c      	movs	r3, #12
     f78:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
     f7a:	230a      	movs	r3, #10
     f7c:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
     f7e:	f06f 030e 	mvn.w	r3, #14
     f82:	7243      	strb	r3, [r0, #9]
     f84:	2305      	movs	r3, #5
     f86:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
     f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f8c:	72c3      	strb	r3, [r0, #11]
     f8e:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, tx);
     f90:	e7c7      	b.n	f22 <ull_conn_llcp+0x15a>
	} else if (conn->llcp_version.rx) {
     f92:	079a      	lsls	r2, r3, #30
     f94:	d526      	bpl.n	fe4 <ull_conn_llcp+0x21c>
		rx = ll_pdu_rx_alloc();
     f96:	f010 fa57 	bl	11448 <ll_pdu_rx_alloc>
		if (!rx) {
     f9a:	4601      	mov	r1, r0
     f9c:	2800      	cmp	r0, #0
     f9e:	f43f af42 	beq.w	e26 <ull_conn_llcp+0x5e>
		conn->llcp_version.ack = conn->llcp_version.req;
     fa2:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
     fa6:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		rx->hdr.handle = conn->lll.handle;
     faa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     fac:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     fae:	2302      	movs	r3, #2
     fb0:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     fb2:	f890 3020 	ldrb.w	r3, [r0, #32]
     fb6:	f043 0303 	orr.w	r3, r3, #3
     fba:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     fbe:	2306      	movs	r3, #6
     fc0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     fc4:	230c      	movs	r3, #12
     fc6:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
     fca:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
     fce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		pdu->llctrl.version_ind.company_id =
     fd2:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
     fd6:	f8a0 3025 	strh.w	r3, [r0, #37]	; 0x25
		pdu->llctrl.version_ind.sub_version_number =
     fda:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
     fde:	f8a0 3027 	strh.w	r3, [r0, #39]	; 0x27
     fe2:	e76f      	b.n	ec4 <ull_conn_llcp+0xfc>
		LL_ASSERT(0);
     fe4:	f640 3302 	movw	r3, #2818	; 0xb02
	case LLCP_PHY_STATE_RSP_WAIT:
		/* no nothing */
		break;

	default:
		LL_ASSERT(0);
     fe8:	4a48      	ldr	r2, [pc, #288]	; (110c <ull_conn_llcp+0x344>)
     fea:	494d      	ldr	r1, [pc, #308]	; (1120 <ull_conn_llcp+0x358>)
     fec:	4849      	ldr	r0, [pc, #292]	; (1114 <ull_conn_llcp+0x34c>)
     fee:	f01c fbe2 	bl	1d7b6 <printk>
     ff2:	4040      	eors	r0, r0
     ff4:	f380 8811 	msr	BASEPRI, r0
     ff8:	f04f 0003 	mov.w	r0, #3
     ffc:	df02      	svc	2
		break;
     ffe:	e712      	b.n	e26 <ull_conn_llcp+0x5e>
		} else if (conn->llcp_conn_param.ack !=
    1000:	f894 5171 	ldrb.w	r5, [r4, #369]	; 0x171
    1004:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    1008:	429d      	cmp	r5, r3
    100a:	f000 8138 	beq.w	127e <ull_conn_llcp+0x4b6>
	conn_upd = conn_upd_curr;
    100e:	4d45      	ldr	r5, [pc, #276]	; (1124 <ull_conn_llcp+0x35c>)
    1010:	682b      	ldr	r3, [r5, #0]
	if (conn_upd && (conn_upd != conn)) {
    1012:	b113      	cbz	r3, 101a <ull_conn_llcp+0x252>
    1014:	429c      	cmp	r4, r3
    1016:	f47f af06 	bne.w	e26 <ull_conn_llcp+0x5e>
	switch (conn->llcp_conn_param.state) {
    101a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    101e:	f003 0307 	and.w	r3, r3, #7
    1022:	2b05      	cmp	r3, #5
    1024:	f200 8128 	bhi.w	1278 <ull_conn_llcp+0x4b0>
    1028:	a201      	add	r2, pc, #4	; (adr r2, 1030 <ull_conn_llcp+0x268>)
    102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    102e:	bf00      	nop
    1030:	00001049 	.word	0x00001049
    1034:	000010cb 	.word	0x000010cb
    1038:	00001221 	.word	0x00001221
    103c:	00000e27 	.word	0x00000e27
    1040:	00000e27 	.word	0x00000e27
    1044:	00000e27 	.word	0x00000e27
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1048:	4833      	ldr	r0, [pc, #204]	; (1118 <ull_conn_llcp+0x350>)
			event_counter = lll->event_counter +
    104a:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    104c:	8e67      	ldrh	r7, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    104e:	f020 fc01 	bl	21854 <mem_acquire>
	if (!tx) {
    1052:	4601      	mov	r1, r0
    1054:	2800      	cmp	r0, #0
    1056:	f43f aee6 	beq.w	e26 <ull_conn_llcp+0x5e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    105a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    105e:	2204      	movs	r2, #4
    1060:	f362 0302 	bfi	r3, r2, #0, #3
    1064:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1068:	7903      	ldrb	r3, [r0, #4]
    106a:	f043 0303 	orr.w	r3, r3, #3
    106e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1070:	2318      	movs	r3, #24
    1072:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1074:	230f      	movs	r3, #15
    1076:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1078:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    107c:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    107e:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    1082:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1084:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    1088:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    108a:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    108e:	81c3      	strh	r3, [r0, #14]
			event_counter = lll->event_counter +
    1090:	443e      	add	r6, r7
	p->preferred_periodicity = 0U;
    1092:	2300      	movs	r3, #0
    1094:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    1096:	74c3      	strb	r3, [r0, #19]
    1098:	7503      	strb	r3, [r0, #20]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    109a:	4456      	add	r6, sl
	p->offset1 = sys_cpu_to_le16(0xffff);
    109c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    10a0:	f8a0 6011 	strh.w	r6, [r0, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    10a4:	7543      	strb	r3, [r0, #21]
    10a6:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    10a8:	75c3      	strb	r3, [r0, #23]
    10aa:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    10ac:	7643      	strb	r3, [r0, #25]
    10ae:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    10b0:	76c3      	strb	r3, [r0, #27]
    10b2:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    10b4:	7743      	strb	r3, [r0, #29]
    10b6:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, tx);
    10b8:	4620      	mov	r0, r4
    10ba:	f020 ff94 	bl	21fe6 <ctrl_tx_enqueue>
	conn_upd_curr = conn;
    10be:	602c      	str	r4, [r5, #0]
		conn->procedure_expire = conn->procedure_reload;
    10c0:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    10c4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    10c8:	e6ad      	b.n	e26 <ull_conn_llcp+0x5e>
	if (conn->llcp_conn_param.status) {
    10ca:	f894 6173 	ldrb.w	r6, [r4, #371]	; 0x173
    10ce:	b35e      	cbz	r6, 1128 <ull_conn_llcp+0x360>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    10d0:	4811      	ldr	r0, [pc, #68]	; (1118 <ull_conn_llcp+0x350>)
    10d2:	f020 fbbf 	bl	21854 <mem_acquire>
		if (!tx) {
    10d6:	4601      	mov	r1, r0
    10d8:	2800      	cmp	r0, #0
    10da:	f43f aea4 	beq.w	e26 <ull_conn_llcp+0x5e>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    10de:	7903      	ldrb	r3, [r0, #4]
    10e0:	f043 0303 	orr.w	r3, r3, #3
    10e4:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    10e6:	2311      	movs	r3, #17
    10e8:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    10ea:	2303      	movs	r3, #3
    10ec:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    10ee:	230f      	movs	r3, #15
    10f0:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    10f2:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    10f6:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
    10f8:	4620      	mov	r0, r4
    10fa:	f020 ff74 	bl	21fe6 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    10fe:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    1102:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
		conn_upd_curr = NULL;
    1106:	2300      	movs	r3, #0
    1108:	602b      	str	r3, [r5, #0]
		return;
    110a:	e68c      	b.n	e26 <ull_conn_llcp+0x5e>
    110c:	00029456 	.word	0x00029456
    1110:	00029502 	.word	0x00029502
    1114:	00027ff4 	.word	0x00027ff4
    1118:	20001400 	.word	0x20001400
    111c:	0001417f 	.word	0x0001417f
    1120:	0002a0ca 	.word	0x0002a0ca
    1124:	20001380 	.word	0x20001380
	if (!conn->lll.role) {
    1128:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    112c:	2b00      	cmp	r3, #0
    112e:	db34      	blt.n	119a <ull_conn_llcp+0x3d2>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1130:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_offset_us = 0U;
    1134:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1138:	2205      	movs	r2, #5
    113a:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    113e:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1142:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    1146:	2301      	movs	r3, #1
    1148:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    114c:	b312      	cbz	r2, 1194 <ull_conn_llcp+0x3cc>
				((conn->llcp_conn_param.interval_min /
    114e:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1152:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    1156:	3301      	adds	r3, #1
			conn->llcp_cu.interval =
    1158:	fb13 f302 	smulbb	r3, r3, r2
    115c:	b29b      	uxth	r3, r3
    115e:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1162:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    1166:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    116a:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    116e:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1172:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
    1176:	2202      	movs	r2, #2
    1178:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    117c:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1180:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    1184:	f362 0382 	bfi	r3, r2, #2, #1
		conn->llcp_cu.ack--;
    1188:	3801      	subs	r0, #1
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    118a:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    118e:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		return;
    1192:	e648      	b.n	e26 <ull_conn_llcp+0x5e>
				conn->llcp_conn_param.interval_max;
    1194:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    1198:	e7e1      	b.n	115e <ull_conn_llcp+0x396>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    119a:	48d9      	ldr	r0, [pc, #868]	; (1500 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178>)
    119c:	f020 fb5a 	bl	21854 <mem_acquire>
	if (!tx) {
    11a0:	4601      	mov	r1, r0
    11a2:	2800      	cmp	r0, #0
    11a4:	f43f ae3f 	beq.w	e26 <ull_conn_llcp+0x5e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    11a8:	7903      	ldrb	r3, [r0, #4]
    11aa:	f043 0303 	orr.w	r3, r3, #3
    11ae:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    11b0:	2318      	movs	r3, #24
    11b2:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    11b4:	2310      	movs	r3, #16
    11b6:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
    11b8:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    11bc:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
    11be:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    11c2:	8143      	strh	r3, [r0, #10]
	rsp->latency =
    11c4:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    11c8:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
    11ca:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    11ce:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    11d0:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    11d4:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    11d6:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
    11da:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    11de:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    11e2:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    11e6:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
    11ea:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    11ee:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
    11f2:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    11f6:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
    11fa:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    11fe:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    1202:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    1206:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    120a:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
    120e:	4620      	mov	r0, r4
    1210:	f020 fee9 	bl	21fe6 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1214:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    1218:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    121c:	602e      	str	r6, [r5, #0]
    121e:	e602      	b.n	e26 <ull_conn_llcp+0x5e>
	if (conn->llcp_enc.pause_tx) {
    1220:	078b      	lsls	r3, r1, #30
    1222:	f53f ae00 	bmi.w	e26 <ull_conn_llcp+0x5e>
	rx = ll_pdu_rx_alloc();
    1226:	f010 f90f 	bl	11448 <ll_pdu_rx_alloc>
	if (!rx) {
    122a:	4601      	mov	r1, r0
    122c:	2800      	cmp	r0, #0
    122e:	f43f adfa 	beq.w	e26 <ull_conn_llcp+0x5e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1232:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    1236:	2203      	movs	r2, #3
    1238:	f362 0302 	bfi	r3, r2, #0, #3
    123c:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    1240:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1242:	80c3      	strh	r3, [r0, #6]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1244:	2302      	movs	r3, #2
    1246:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1248:	f890 3020 	ldrb.w	r3, [r0, #32]
    124c:	4313      	orrs	r3, r2
    124e:	f880 3020 	strb.w	r3, [r0, #32]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1252:	2318      	movs	r3, #24
    1254:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1258:	230f      	movs	r3, #15
    125a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    125e:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1262:	8483      	strh	r3, [r0, #36]	; 0x24
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1264:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    1268:	84c3      	strh	r3, [r0, #38]	; 0x26
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    126a:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    126e:	8503      	strh	r3, [r0, #40]	; 0x28
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1270:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    1274:	8543      	strh	r3, [r0, #42]	; 0x2a
	ll_rx_put(rx->hdr.link, rx);
    1276:	e625      	b.n	ec4 <ull_conn_llcp+0xfc>
		LL_ASSERT(0);
    1278:	f640 430f 	movw	r3, #3087	; 0xc0f
    127c:	e6b4      	b.n	fe8 <ull_conn_llcp+0x220>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    127e:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
    1282:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    1286:	4283      	cmp	r3, r0
    1288:	f000 8099 	beq.w	13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
	switch (conn->llcp_length.state) {
    128c:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    1290:	f3c3 0502 	ubfx	r5, r3, #0, #3
    1294:	b2e9      	uxtb	r1, r5
    1296:	2907      	cmp	r1, #7
    1298:	f000 808e 	beq.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    129c:	2201      	movs	r2, #1
    129e:	408a      	lsls	r2, r1
    12a0:	f012 0f4e 	tst.w	r2, #78	; 0x4e
    12a4:	f47f adbf 	bne.w	e26 <ull_conn_llcp+0x5e>
    12a8:	f012 0f30 	tst.w	r2, #48	; 0x30
    12ac:	d12d      	bne.n	130a <ull_conn_llcp+0x542>
    12ae:	2900      	cmp	r1, #0
    12b0:	f040 8082 	bne.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    12b4:	4892      	ldr	r0, [pc, #584]	; (1500 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178>)
    12b6:	f020 facd 	bl	21854 <mem_acquire>
		if (!tx) {
    12ba:	4601      	mov	r1, r0
    12bc:	2800      	cmp	r0, #0
    12be:	f43f adb2 	beq.w	e26 <ull_conn_llcp+0x5e>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    12c2:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
		conn->default_tx_time = conn->llcp_length.tx_time;
    12c6:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    12ca:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    12ce:	2201      	movs	r2, #1
    12d0:	f362 0302 	bfi	r3, r2, #0, #3
    12d4:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    12d8:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
    12dc:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    12e0:	790a      	ldrb	r2, [r1, #4]
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    12e2:	818b      	strh	r3, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    12e4:	f042 0203 	orr.w	r2, r2, #3
    12e8:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    12ea:	2209      	movs	r2, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    12ec:	f045 0348 	orr.w	r3, r5, #72	; 0x48
		pdu_ctrl_tx->len =
    12f0:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    12f2:	2214      	movs	r2, #20
    12f4:	71ca      	strb	r2, [r1, #7]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    12f6:	728b      	strb	r3, [r1, #10]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    12f8:	f045 021b 	orr.w	r2, r5, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    12fc:	f045 0301 	orr.w	r3, r5, #1
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1300:	720a      	strb	r2, [r1, #8]
    1302:	724d      	strb	r5, [r1, #9]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1304:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1306:	81c8      	strh	r0, [r1, #14]
		ctrl_tx_enqueue(conn, tx);
    1308:	e60b      	b.n	f22 <ull_conn_llcp+0x15a>
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    130a:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    130e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		lll->max_rx_time = conn->llcp_length.rx_time;
    1312:	f8b4 21a0 	ldrh.w	r2, [r4, #416]	; 0x1a0
    1316:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    131a:	f003 0207 	and.w	r2, r3, #7
    131e:	2a04      	cmp	r2, #4
		tx_octets = conn->llcp_length.tx_octets;
    1320:	f8b4 619e 	ldrh.w	r6, [r4, #414]	; 0x19e
		u16_t tx_time = conn->llcp_length.tx_time;
    1324:	f8b4 51a2 	ldrh.w	r5, [r4, #418]	; 0x1a2
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1328:	d144      	bne.n	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
			if (!conn->llcp_length.cache.tx_octets) {
    132a:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    132e:	bb9a      	cbnz	r2, 1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
				conn->llcp_length.ack = conn->llcp_length.req;
    1330:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    1334:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		rx = conn->llcp_rx;
    1338:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    133c:	b10f      	cbz	r7, 1342 <ull_conn_llcp+0x57a>
    133e:	683b      	ldr	r3, [r7, #0]
    1340:	b963      	cbnz	r3, 135c <ull_conn_llcp+0x594>
    1342:	f640 43ce 	movw	r3, #3278	; 0xcce
    1346:	4a6f      	ldr	r2, [pc, #444]	; (1504 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17c>)
    1348:	496f      	ldr	r1, [pc, #444]	; (1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>)
    134a:	4870      	ldr	r0, [pc, #448]	; (150c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x184>)
    134c:	f01c fa33 	bl	1d7b6 <printk>
    1350:	4040      	eors	r0, r0
    1352:	f380 8811 	msr	BASEPRI, r0
    1356:	f04f 0003 	mov.w	r0, #3
    135a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    135c:	6838      	ldr	r0, [r7, #0]
    135e:	6843      	ldr	r3, [r0, #4]
    1360:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		rx->hdr.handle = conn->lll.handle;
    1364:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1366:	80fb      	strh	r3, [r7, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1368:	2302      	movs	r3, #2
    136a:	713b      	strb	r3, [r7, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    136c:	f897 3020 	ldrb.w	r3, [r7, #32]
    1370:	f043 0303 	orr.w	r3, r3, #3
    1374:	f887 3020 	strb.w	r3, [r7, #32]
		pdu_ctrl_rx->len =
    1378:	2309      	movs	r3, #9
    137a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    137e:	2315      	movs	r3, #21
    1380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1384:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    1388:	84bb      	strh	r3, [r7, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    138a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    138e:	853e      	strh	r6, [r7, #40]	; 0x28
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1390:	84fb      	strh	r3, [r7, #38]	; 0x26
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1392:	857d      	strh	r5, [r7, #42]	; 0x2a
		ll_rx_put(rx->hdr.link, rx);
    1394:	4639      	mov	r1, r7
    1396:	e596      	b.n	ec6 <ull_conn_llcp+0xfe>
				conn->llcp_length.tx_octets =
    1398:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    139c:	f8b4 11a6 	ldrh.w	r1, [r4, #422]	; 0x1a6
    13a0:	f8a4 11a2 	strh.w	r1, [r4, #418]	; 0x1a2
				conn->llcp_length.cache.tx_octets = 0;
    13a4:	2200      	movs	r2, #0
    13a6:	f8a4 21a4 	strh.w	r2, [r4, #420]	; 0x1a4
			conn->llcp_length.state =
    13aa:	f362 0302 	bfi	r3, r2, #0, #3
    13ae:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
    13b2:	e7c1      	b.n	1338 <ull_conn_llcp+0x570>
    13b4:	2206      	movs	r2, #6
    13b6:	e7f8      	b.n	13aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22>
		LL_ASSERT(0);
    13b8:	f640 43f6 	movw	r3, #3318	; 0xcf6
    13bc:	e614      	b.n	fe8 <ull_conn_llcp+0x220>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    13be:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
    13c2:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    13c6:	428b      	cmp	r3, r1
    13c8:	f43f ad2d 	beq.w	e26 <ull_conn_llcp+0x5e>
	switch (conn->llcp_phy.state) {
    13cc:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    13d0:	f003 0003 	and.w	r0, r3, #3
    13d4:	2803      	cmp	r0, #3
    13d6:	f200 808f 	bhi.w	14f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x170>
    13da:	a501      	add	r5, pc, #4	; (adr r5, 13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>)
    13dc:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
    13e0:	000013f1 	.word	0x000013f1
    13e4:	00000e27 	.word	0x00000e27
    13e8:	00000e27 	.word	0x00000e27
    13ec:	00001455 	.word	0x00001455
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    13f0:	4843      	ldr	r0, [pc, #268]	; (1500 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178>)
    13f2:	f020 fa2f 	bl	21854 <mem_acquire>
		if (!tx) {
    13f6:	4601      	mov	r1, r0
    13f8:	2800      	cmp	r0, #0
    13fa:	f43f ad14 	beq.w	e26 <ull_conn_llcp+0x5e>
		conn->phy_pref_tx = conn->llcp_phy.tx;
    13fe:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    1402:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
    1406:	f894 51ab 	ldrb.w	r5, [r4, #427]	; 0x1ab
		conn->phy_pref_tx = conn->llcp_phy.tx;
    140a:	f3c2 0082 	ubfx	r0, r2, #2, #3
    140e:	f360 0302 	bfi	r3, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1412:	f3c2 1242 	ubfx	r2, r2, #5, #3
    1416:	f362 1306 	bfi	r3, r2, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    141a:	f3c5 0540 	ubfx	r5, r5, #1, #1
    141e:	f365 03c3 	bfi	r3, r5, #3, #1
    1422:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    1426:	f8b4 31aa 	ldrh.w	r3, [r4, #426]	; 0x1aa
    142a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    142e:	f023 0301 	bic.w	r3, r3, #1
    1432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1436:	f043 0301 	orr.w	r3, r3, #1
    143a:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    143e:	790b      	ldrb	r3, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    1440:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1442:	f043 0303 	orr.w	r3, r3, #3
    1446:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    1448:	2303      	movs	r3, #3
    144a:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    144c:	2316      	movs	r3, #22
    144e:	71cb      	strb	r3, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
    1450:	724a      	strb	r2, [r1, #9]
    1452:	e566      	b.n	f22 <ull_conn_llcp+0x15a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    1454:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    1458:	f3c3 0182 	ubfx	r1, r3, #2, #3
    145c:	078f      	lsls	r7, r1, #30
    145e:	d539      	bpl.n	14d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c>
			conn->llcp_phy.tx = BIT(1);
    1460:	2102      	movs	r1, #2
			conn->llcp_phy.tx = 0U;
    1462:	f361 0384 	bfi	r3, r1, #2, #3
    1466:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    146a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    146e:	0959      	lsrs	r1, r3, #5
    1470:	078d      	lsls	r5, r1, #30
    1472:	d538      	bpl.n	14e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15e>
			conn->llcp_phy.rx = BIT(1);
    1474:	2102      	movs	r1, #2
			conn->llcp_phy.rx = 0U;
    1476:	f361 1347 	bfi	r3, r1, #5, #3
    147a:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    147e:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    1482:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    1486:	f3c1 0082 	ubfx	r0, r1, #2, #3
    148a:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
    148e:	4283      	cmp	r3, r0
    1490:	bf08      	it	eq
    1492:	2000      	moveq	r0, #0
    1494:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1498:	f360 0384 	bfi	r3, r0, #2, #3
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    149c:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
    14a0:	0949      	lsrs	r1, r1, #5
    14a2:	f000 0007 	and.w	r0, r0, #7
			conn->llcp.phy_upd_ind.rx = 0U;
    14a6:	4288      	cmp	r0, r1
    14a8:	bf08      	it	eq
    14aa:	2100      	moveq	r1, #0
    14ac:	f361 1347 	bfi	r3, r1, #5, #3
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    14b0:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.initiate = 1U;
    14b4:	b2db      	uxtb	r3, r3
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    14b6:	f3c1 0180 	ubfx	r1, r1, #2, #1
    14ba:	f043 0301 	orr.w	r3, r3, #1
    14be:	f361 0341 	bfi	r3, r1, #1, #1
    14c2:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_ack -= 2U;
    14c6:	3a02      	subs	r2, #2
		conn->llcp_type = LLCP_PHY_UPD;
    14c8:	2306      	movs	r3, #6
    14ca:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
    14ce:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	break;
    14d2:	e4a8      	b.n	e26 <ull_conn_llcp+0x5e>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    14d4:	07ce      	lsls	r6, r1, #31
    14d6:	d501      	bpl.n	14dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x154>
			conn->llcp_phy.tx = BIT(0);
    14d8:	2101      	movs	r1, #1
    14da:	e7c2      	b.n	1462 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xda>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    14dc:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.tx = BIT(2);
    14e0:	bf18      	it	ne
    14e2:	2104      	movne	r1, #4
    14e4:	e7bd      	b.n	1462 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xda>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    14e6:	07c8      	lsls	r0, r1, #31
    14e8:	d501      	bpl.n	14ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x166>
			conn->llcp_phy.rx = BIT(0);
    14ea:	2101      	movs	r1, #1
    14ec:	e7c3      	b.n	1476 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    14ee:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    14f2:	bf18      	it	ne
    14f4:	2104      	movne	r1, #4
    14f6:	e7be      	b.n	1476 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee>
		LL_ASSERT(0);
    14f8:	f640 5377 	movw	r3, #3447	; 0xd77
    14fc:	e574      	b.n	fe8 <ull_conn_llcp+0x220>
    14fe:	bf00      	nop
    1500:	20001400 	.word	0x20001400
    1504:	00029456 	.word	0x00029456
    1508:	0002951d 	.word	0x0002951d
    150c:	00027ff4 	.word	0x00027ff4
	conn_upd = conn_upd_curr;
    1510:	4a2e      	ldr	r2, [pc, #184]	; (15cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x244>)
	if (!conn_upd) {
    1512:	6813      	ldr	r3, [r2, #0]
    1514:	b903      	cbnz	r3, 1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>
		conn_upd_curr = conn;
    1516:	6014      	str	r4, [r2, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1518:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    151a:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    151c:	441e      	add	r6, r3
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    151e:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1522:	4456      	add	r6, sl
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1524:	f013 0003 	ands.w	r0, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1528:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    152a:	d053      	beq.n	15d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24c>
		rx = ll_pdu_rx_alloc_peek(1);
    152c:	2001      	movs	r0, #1
    152e:	f00f ff73 	bl	11418 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1532:	4607      	mov	r7, r0
    1534:	2800      	cmp	r0, #0
    1536:	d03d      	beq.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1538:	4825      	ldr	r0, [pc, #148]	; (15d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x248>)
    153a:	f020 f98b 	bl	21854 <mem_acquire>
		if (!tx) {
    153e:	4605      	mov	r5, r0
    1540:	b3c0      	cbz	r0, 15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		(void)ll_pdu_rx_alloc();
    1542:	f00f ff81 	bl	11448 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1546:	683b      	ldr	r3, [r7, #0]
    1548:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    154c:	605a      	str	r2, [r3, #4]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    154e:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_rx = rx;
    1552:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1556:	f36f 0301 	bfc	r3, #0, #2
    155a:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    155e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1560:	441e      	add	r6, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1562:	792b      	ldrb	r3, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1564:	3606      	adds	r6, #6
    1566:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1568:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    156c:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1570:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1572:	230c      	movs	r3, #12
    1574:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1576:	2300      	movs	r3, #0
    1578:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    157a:	f894 3114 	ldrb.w	r3, [r4, #276]	; 0x114
    157e:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1580:	f240 42e2 	movw	r2, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1584:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1588:	fbb3 f3f2 	udiv	r3, r3, r2
    158c:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1590:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    1594:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1598:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
    159c:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    15a0:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
    15a4:	f8a5 300f 	strh.w	r3, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    15a8:	f8a5 6011 	strh.w	r6, [r5, #17]
			ctrl_tx_enqueue(conn, tx);
    15ac:	4629      	mov	r1, r5
    15ae:	4620      	mov	r0, r4
    15b0:	f020 fd19 	bl	21fe6 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    15b4:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
    15b8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    15bc:	429a      	cmp	r2, r3
    15be:	f040 84dd 	bne.w	1f7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbf4>
	return 0;
    15c2:	2000      	movs	r0, #0
}
    15c4:	b00d      	add	sp, #52	; 0x34
    15c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ca:	bf00      	nop
    15cc:	20001380 	.word	0x20001380
    15d0:	20001400 	.word	0x20001400
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    15d4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    15d8:	930b      	str	r3, [sp, #44]	; 0x2c
    15da:	1af7      	subs	r7, r6, r3
    15dc:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    15de:	043b      	lsls	r3, r7, #16
    15e0:	d4e8      	bmi.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		conn->llcp_cu.ack = conn->llcp_cu.req;
    15e2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    15e6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
		conn->llcp_ack = conn->llcp_req;
    15ea:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    15ee:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    15f2:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    15f6:	428b      	cmp	r3, r1
    15f8:	d009      	beq.n	160e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x286>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    15fa:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    15fe:	f003 0307 	and.w	r3, r3, #7
    1602:	2b05      	cmp	r3, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1604:	bf04      	itt	eq
    1606:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171
			conn->procedure_expire = 0U;
    160a:	f8a4 00cc 	strheq.w	r0, [r4, #204]	; 0xcc
		if (conn_upd_curr == conn) {
    160e:	6813      	ldr	r3, [r2, #0]
		rx = conn->llcp_rx;
    1610:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		if (conn_upd_curr == conn) {
    1614:	429c      	cmp	r4, r3
			conn_upd_curr = NULL;
    1616:	bf04      	itt	eq
    1618:	2300      	moveq	r3, #0
    161a:	6013      	streq	r3, [r2, #0]
		LL_ASSERT(rx && rx->hdr.link);
    161c:	b10d      	cbz	r5, 1622 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29a>
    161e:	682b      	ldr	r3, [r5, #0]
    1620:	b963      	cbnz	r3, 163c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b4>
    1622:	f640 039b 	movw	r3, #2203	; 0x89b
    1626:	4ac0      	ldr	r2, [pc, #768]	; (1928 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a0>)
    1628:	49c0      	ldr	r1, [pc, #768]	; (192c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a4>)
    162a:	48c1      	ldr	r0, [pc, #772]	; (1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>)
    162c:	f01c f8c3 	bl	1d7b6 <printk>
    1630:	4040      	eors	r0, r0
    1632:	f380 8811 	msr	BASEPRI, r0
    1636:	f04f 0003 	mov.w	r0, #3
    163a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    163c:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    163e:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
		conn->llcp_rx = rx->hdr.link->mem;
    1642:	6843      	ldr	r3, [r0, #4]
    1644:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    1648:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    164a:	f8b4 c10a 	ldrh.w	ip, [r4, #266]	; 0x10a
    164e:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    1652:	429a      	cmp	r2, r3
    1654:	d113      	bne.n	167e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f6>
    1656:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1658:	4563      	cmp	r3, ip
    165a:	d110      	bne.n	167e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f6>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    165c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1660:	fb03 fe02 	mul.w	lr, r3, r2
    1664:	f242 7310 	movw	r3, #10000	; 0x2710
    1668:	fb03 e301 	mla	r3, r3, r1, lr
    166c:	3b01      	subs	r3, #1
    166e:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    1672:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
    1676:	b29b      	uxth	r3, r3
    1678:	459e      	cmp	lr, r3
    167a:	f000 812e 	beq.w	18da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x552>
			rx->hdr.handle = lll->handle;
    167e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1680:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1682:	230a      	movs	r3, #10
    1684:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    1686:	2300      	movs	r3, #0
    1688:	f885 3020 	strb.w	r3, [r5, #32]
			cu->interval = conn->llcp_cu.interval;
    168c:	846a      	strh	r2, [r5, #34]	; 0x22
			cu->latency = conn->llcp_cu.latency;
    168e:	f8a5 c024 	strh.w	ip, [r5, #36]	; 0x24
			cu->timeout = conn->llcp_cu.timeout;
    1692:	84e9      	strh	r1, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1694:	4629      	mov	r1, r5
    1696:	f00f feaf 	bl	113f8 <ll_rx_put>
		ll_rx_sched();
    169a:	f00f feb7 	bl	1140c <ll_rx_sched>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    169e:	6823      	ldr	r3, [r4, #0]
    16a0:	2b00      	cmp	r3, #0
    16a2:	da0a      	bge.n	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
			u32_t ticks_prepare_to_start =
    16a4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    16a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    16ac:	4290      	cmp	r0, r2
    16ae:	bf2c      	ite	cs
    16b0:	4480      	addcs	r8, r0
    16b2:	4490      	addcc	r8, r2
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    16b4:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    16b6:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * lll->interval;
    16ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    16bc:	f8b4 5108 	ldrh.w	r5, [r4, #264]	; 0x108
    16c0:	f8df b294 	ldr.w	fp, [pc, #660]	; 1958 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d0>
		conn_interval_old = instant_latency * lll->interval;
    16c4:	fb13 f307 	smulbb	r3, r3, r7
    16c8:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    16ca:	fbb3 f1f5 	udiv	r1, r3, r5
    16ce:	fa1f f981 	uxth.w	r9, r1
		conn_interval_new = latency * conn->llcp_cu.interval;
    16d2:	fb15 f209 	smulbb	r2, r5, r9
    16d6:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    16d8:	4293      	cmp	r3, r2
    16da:	f240 40e2 	movw	r0, #1250	; 0x4e2
    16de:	f080 80ff 	bcs.w	18e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x558>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    16e2:	1ad3      	subs	r3, r2, r3
    16e4:	4358      	muls	r0, r3
    16e6:	fba0 010b 	umull	r0, r1, r0, fp
    16ea:	a38d      	add	r3, pc, #564	; (adr r3, 1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>)
    16ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    16f0:	f7fe fcf6 	bl	e0 <__aeabi_uldivmod>
    16f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16f8:	4480      	add	r8, r0
		lll->latency_prepare += lazy;
    16fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    16fc:	449a      	add	sl, r3
		lll->latency_prepare -= (instant_latency - latency);
    16fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1700:	1b9e      	subs	r6, r3, r6
		} else if (lll->role) {
    1702:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    1706:	444e      	add	r6, r9
    1708:	4456      	add	r6, sl
		} else if (lll->role) {
    170a:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    170c:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    1710:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1712:	fb0a f505 	mul.w	r5, sl, r5
		} else if (lll->role) {
    1716:	f280 80f1 	bge.w	18fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x574>
			lll->slave.window_widening_prepare_us -=
    171a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    171c:	6c63      	ldr	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    171e:	fb03 2717 	mls	r7, r3, r7, r2
    1722:	64e7      	str	r7, [r4, #76]	; 0x4c
				(((lll_conn_ppm_local_get() +
    1724:	f020 fe27 	bl	22376 <lll_conn_ppm_local_get>
    1728:	4606      	mov	r6, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    172a:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    172e:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1732:	f013 fee5 	bl	15500 <lll_conn_ppm_get>
				conn->llcp_cu.win_size * 1250U;
    1736:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
				(((lll_conn_ppm_local_get() +
    173a:	4406      	add	r6, r0
				conn->llcp_cu.win_size * 1250U;
    173c:	fb0a f202 	mul.w	r2, sl, r2
			lll->slave.window_size_prepare_us =
    1740:	6562      	str	r2, [r4, #84]	; 0x54
				   lll_conn_ppm_get(conn->slave.sca)) *
    1742:	436e      	muls	r6, r5
			conn->slave.ticks_to_offset = 0U;
    1744:	2200      	movs	r2, #0
    1746:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    174a:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    174e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1750:	4878      	ldr	r0, [pc, #480]	; (1934 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ac>)
    1752:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1756:	086b      	lsrs	r3, r5, #1
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1758:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->slave.window_widening_periodic_us *
    175c:	fb06 f009 	mul.w	r0, r6, r9
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1760:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1762:	4402      	add	r2, r0
			lll->slave.window_widening_periodic_us =
    1764:	6466      	str	r6, [r4, #68]	; 0x44
			lll->slave.window_widening_max_us =
    1766:	64a3      	str	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us +=
    1768:	429a      	cmp	r2, r3
    176a:	bf94      	ite	ls
    176c:	64e2      	strls	r2, [r4, #76]	; 0x4c
    176e:	64e3      	strhi	r3, [r4, #76]	; 0x4c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1770:	fba0 010b 	umull	r0, r1, r0, fp
    1774:	a36a      	add	r3, pc, #424	; (adr r3, 1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>)
    1776:	e9d3 2300 	ldrd	r2, r3, [r3]
    177a:	f7fe fcb1 	bl	e0 <__aeabi_uldivmod>
    177e:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1782:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    1786:	fbb0 f0fa 	udiv	r0, r0, sl
    178a:	fb0a f000 	mul.w	r0, sl, r0
    178e:	a364      	add	r3, pc, #400	; (adr r3, 1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>)
    1790:	e9d3 2300 	ldrd	r2, r3, [r3]
    1794:	fba0 010b 	umull	r0, r1, r0, fp
    1798:	f7fe fca2 	bl	e0 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    179c:	1bae      	subs	r6, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    179e:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    17a2:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    17a6:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->interval = conn->llcp_cu.interval;
    17aa:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    17ac:	f242 7310 	movw	r3, #10000	; 0x2710
    17b0:	fb03 5202 	mla	r2, r3, r2, r5
		lll->latency = conn->llcp_cu.latency;
    17b4:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    17b8:	4b5f      	ldr	r3, [pc, #380]	; (1938 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b0>)
		lll->latency = conn->llcp_cu.latency;
    17ba:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    17bc:	3a01      	subs	r2, #1
    17be:	fbb2 f2f5 	udiv	r2, r2, r5
    17c2:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    17c6:	4a5d      	ldr	r2, [pc, #372]	; (193c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b4>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    17c8:	442b      	add	r3, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    17ca:	442a      	add	r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    17cc:	fbb3 f3f5 	udiv	r3, r3, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    17d0:	fbb2 f5f5 	udiv	r5, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    17d4:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    17d8:	1d8a      	adds	r2, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    17da:	b2ab      	uxth	r3, r5
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    17dc:	4293      	cmp	r3, r2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    17de:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
				     (conn->apto_reload - (lll->latency + 6)) :
    17e2:	bfc2      	ittt	gt
    17e4:	1a5b      	subgt	r3, r3, r1
    17e6:	3b06      	subgt	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    17e8:	b29b      	uxthgt	r3, r3
    17ea:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    17ee:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
    17f2:	075d      	lsls	r5, r3, #29
			conn->supervision_expire = 0U;
    17f4:	bf44      	itt	mi
    17f6:	2300      	movmi	r3, #0
    17f8:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    17fc:	2102      	movs	r1, #2
    17fe:	2001      	movs	r0, #1
    1800:	f015 fd78 	bl	172f4 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1804:	2200      	movs	r2, #0
    1806:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1808:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    180a:	2001      	movs	r0, #1
    180c:	f00d f998 	bl	eb40 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1810:	4620      	mov	r0, r4
    1812:	f011 fdcb 	bl	133ac <ll_conn_handle_get>
    1816:	3003      	adds	r0, #3
    1818:	b2c5      	uxtb	r5, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    181a:	4b49      	ldr	r3, [pc, #292]	; (1940 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b8>)
    181c:	9400      	str	r4, [sp, #0]
    181e:	462a      	mov	r2, r5
    1820:	2101      	movs	r1, #1
    1822:	2000      	movs	r0, #0
    1824:	f00d fec4 	bl	f5b0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1828:	f030 0302 	bics.w	r3, r0, #2
    182c:	d00c      	beq.n	1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>
    182e:	f44f 6314 	mov.w	r3, #2368	; 0x940
    1832:	4a3d      	ldr	r2, [pc, #244]	; (1928 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a0>)
    1834:	4943      	ldr	r1, [pc, #268]	; (1944 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5bc>)
    1836:	483e      	ldr	r0, [pc, #248]	; (1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>)
    1838:	f01b ffbd 	bl	1d7b6 <printk>
    183c:	4040      	eors	r0, r0
    183e:	f380 8811 	msr	BASEPRI, r0
    1842:	f04f 0003 	mov.w	r0, #3
    1846:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1848:	fba6 670b 	umull	r6, r7, r6, fp
    184c:	a334      	add	r3, pc, #208	; (adr r3, 1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>)
    184e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1852:	4630      	mov	r0, r6
    1854:	4639      	mov	r1, r7
    1856:	f7fe fc43 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    185a:	4b3b      	ldr	r3, [pc, #236]	; (1948 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c0>)
    185c:	9408      	str	r4, [sp, #32]
    185e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    1862:	4b3a      	ldr	r3, [pc, #232]	; (194c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c4>)
    1864:	9305      	str	r3, [sp, #20]
    1866:	68e3      	ldr	r3, [r4, #12]
    1868:	9304      	str	r3, [sp, #16]
    186a:	2300      	movs	r3, #0
    186c:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    186e:	4b38      	ldr	r3, [pc, #224]	; (1950 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c8>)
    1870:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1874:	fba4 bc03 	umull	fp, ip, r4, r3
    1878:	2307      	movs	r3, #7
    187a:	fb03 cc04 	mla	ip, r3, r4, ip
    187e:	ebb6 000b 	subs.w	r0, r6, fp
    1882:	eb67 010c 	sbc.w	r1, r7, ip
    1886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    188a:	2300      	movs	r3, #0
    188c:	f7fe fc28 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1890:	4643      	mov	r3, r8
    1892:	e9cd 4001 	strd	r4, r0, [sp, #4]
    1896:	f8cd 9000 	str.w	r9, [sp]
    189a:	462a      	mov	r2, r5
    189c:	2101      	movs	r1, #1
    189e:	2000      	movs	r0, #0
    18a0:	f00d fdf4 	bl	f48c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    18a4:	f030 0302 	bics.w	r3, r0, #2
    18a8:	d00c      	beq.n	18c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x53c>
    18aa:	f640 135a 	movw	r3, #2394	; 0x95a
    18ae:	4a1e      	ldr	r2, [pc, #120]	; (1928 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a0>)
    18b0:	4924      	ldr	r1, [pc, #144]	; (1944 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5bc>)
    18b2:	481f      	ldr	r0, [pc, #124]	; (1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>)
    18b4:	f01b ff7f 	bl	1d7b6 <printk>
    18b8:	4040      	eors	r0, r0
    18ba:	f380 8811 	msr	BASEPRI, r0
    18be:	f04f 0003 	mov.w	r0, #3
    18c2:	df02      	svc	2
		if (mayfly_was_enabled) {
    18c4:	f1ba 0f00 	cmp.w	sl, #0
    18c8:	d004      	beq.n	18d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54c>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    18ca:	2201      	movs	r2, #1
    18cc:	2102      	movs	r1, #2
    18ce:	4610      	mov	r0, r2
    18d0:	f00d f936 	bl	eb40 <mayfly_enable>
				return -ECANCELED;
    18d4:	f06f 0047 	mvn.w	r0, #71	; 0x47
    18d8:	e674      	b.n	15c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23c>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    18da:	2303      	movs	r3, #3
    18dc:	712b      	strb	r3, [r5, #4]
    18de:	e6d9      	b.n	1694 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30c>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    18e0:	fb05 3111 	mls	r1, r5, r1, r3
    18e4:	b289      	uxth	r1, r1
    18e6:	4348      	muls	r0, r1
    18e8:	a30d      	add	r3, pc, #52	; (adr r3, 1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>)
    18ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    18ee:	fba0 010b 	umull	r0, r1, r0, fp
    18f2:	f7fe fbf5 	bl	e0 <__aeabi_uldivmod>
    18f6:	eba8 0800 	sub.w	r8, r8, r0
    18fa:	e6fe      	b.n	16fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x372>
			LL_ASSERT(0);
    18fc:	f44f 6311 	mov.w	r3, #2320	; 0x910
    1900:	4a09      	ldr	r2, [pc, #36]	; (1928 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a0>)
    1902:	4914      	ldr	r1, [pc, #80]	; (1954 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5cc>)
    1904:	480a      	ldr	r0, [pc, #40]	; (1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>)
    1906:	f01b ff56 	bl	1d7b6 <printk>
    190a:	4040      	eors	r0, r0
    190c:	f380 8811 	msr	BASEPRI, r0
    1910:	f04f 0003 	mov.w	r0, #3
    1914:	df02      	svc	2
		u32_t ticks_win_offset = 0;
    1916:	f04f 0900 	mov.w	r9, #0
		periodic_us = conn_interval_us;
    191a:	462e      	mov	r6, r5
    191c:	e741      	b.n	17a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x41a>
    191e:	bf00      	nop
    1920:	1afd498d 	.word	0x1afd498d
    1924:	00000007 	.word	0x00000007
    1928:	00029456 	.word	0x00029456
    192c:	0002951d 	.word	0x0002951d
    1930:	00027ff4 	.word	0x00027ff4
    1934:	000f4240 	.word	0x000f4240
    1938:	026259ff 	.word	0x026259ff
    193c:	01c9c37f 	.word	0x01c9c37f
    1940:	00012f95 	.word	0x00012f95
    1944:	000293b5 	.word	0x000293b5
    1948:	00012f3d 	.word	0x00012f3d
    194c:	00015aa1 	.word	0x00015aa1
    1950:	1afd498d 	.word	0x1afd498d
    1954:	0002a0ca 	.word	0x0002a0ca
    1958:	3b9aca00 	.word	0x3b9aca00
			event_counter = lll->event_counter +
    195c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    195e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1960:	4413      	add	r3, r2
					lll->latency_prepare + lazy;
    1962:	449a      	add	sl, r3
	if (conn->llcp.chan_map.initiate) {
    1964:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1968:	07d8      	lsls	r0, r3, #31
			event_counter = lll->event_counter +
    196a:	fa1f fa8a 	uxth.w	sl, sl
	if (conn->llcp.chan_map.initiate) {
    196e:	d525      	bpl.n	19bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x634>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1970:	48cb      	ldr	r0, [pc, #812]	; (1ca0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x918>)
    1972:	f01f ff6f 	bl	21854 <mem_acquire>
		if (tx) {
    1976:	4605      	mov	r5, r0
    1978:	2800      	cmp	r0, #0
    197a:	f43f ae1b 	beq.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
			conn->llcp.chan_map.initiate = 0U;
    197e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1982:	f36f 0300 	bfc	r3, #0, #1
    1986:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    198a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    198c:	449a      	add	sl, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    198e:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    1990:	f10a 0a06 	add.w	sl, sl, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1994:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    1998:	f8a4 a0f2 	strh.w	sl, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    199c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    199e:	2308      	movs	r3, #8
    19a0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    19a2:	2301      	movs	r3, #1
    19a4:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    19a6:	2205      	movs	r2, #5
    19a8:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    19ac:	3008      	adds	r0, #8
    19ae:	f01d fe23 	bl	1f5f8 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    19b2:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    19b6:	f8a5 300d 	strh.w	r3, [r5, #13]
    19ba:	e5f7      	b.n	15ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x224>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    19bc:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    19c0:	ebaa 0a03 	sub.w	sl, sl, r3
    19c4:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
    19c8:	f47f adf4 	bne.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		memcpy(&lll->data_chan_map[0],
    19cc:	f104 0538 	add.w	r5, r4, #56	; 0x38
		conn->llcp_ack = conn->llcp_req;
    19d0:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    19d4:	2205      	movs	r2, #5
    19d6:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    19da:	4628      	mov	r0, r5
    19dc:	f01d fe0c 	bl	1f5f8 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    19e0:	2105      	movs	r1, #5
    19e2:	4628      	mov	r0, r5
    19e4:	f01f ffb2 	bl	2194c <util_ones_count_get>
		lll->data_chan_count =
    19e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    19ec:	f360 0305 	bfi	r3, r0, #0, #6
    19f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    19f4:	2301      	movs	r3, #1
    19f6:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
    19fa:	e5db      	b.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
	if (conn->llcp.encryption.state) {
    19fc:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
    1a00:	f016 0603 	ands.w	r6, r6, #3
    1a04:	d063      	beq.n	1ace <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x746>
		if (lll->role &&
    1a06:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	f6bf add2 	bge.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
    1a10:	2e01      	cmp	r6, #1
    1a12:	f47f adcf 	bne.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1a16:	48a2      	ldr	r0, [pc, #648]	; (1ca0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x918>)
    1a18:	f01f ff1c 	bl	21854 <mem_acquire>
	if (!tx) {
    1a1c:	4607      	mov	r7, r0
    1a1e:	2800      	cmp	r0, #0
    1a20:	f43f adc8 	beq.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a24:	7903      	ldrb	r3, [r0, #4]
    1a26:	f043 0303 	orr.w	r3, r3, #3
    1a2a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1a2c:	230d      	movs	r3, #13
    1a2e:	7143      	strb	r3, [r0, #5]
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1a30:	2304      	movs	r3, #4
    1a32:	71c3      	strb	r3, [r0, #7]
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1a34:	4b9b      	ldr	r3, [pc, #620]	; (1ca4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x91c>)
    1a36:	6818      	ldr	r0, [r3, #0]
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    1a38:	6843      	ldr	r3, [r0, #4]
    1a3a:	685e      	ldr	r6, [r3, #4]
    1a3c:	f107 0508 	add.w	r5, r7, #8
    1a40:	b11e      	cbz	r6, 1a4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c2>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    1a42:	2300      	movs	r3, #0
    1a44:	220c      	movs	r2, #12
    1a46:	4629      	mov	r1, r5
    1a48:	47b0      	blx	r6
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs), 0);

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    1a4a:	4629      	mov	r1, r5
    1a4c:	2208      	movs	r2, #8
    1a4e:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    1a52:	f01d fdd1 	bl	1f5f8 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    1a56:	2204      	movs	r2, #4
    1a58:	f107 0110 	add.w	r1, r7, #16
    1a5c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    1a60:	f01d fdca 	bl	1f5f8 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, tx);
    1a64:	4639      	mov	r1, r7
    1a66:	4620      	mov	r0, r4
    1a68:	f020 fabd 	bl	21fe6 <ctrl_tx_enqueue>
			rx = ll_pdu_rx_alloc();
    1a6c:	f00f fcec 	bl	11448 <ll_pdu_rx_alloc>
			if (!rx) {
    1a70:	4605      	mov	r5, r0
    1a72:	2800      	cmp	r0, #0
    1a74:	f43f ad9e 	beq.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
			rx->hdr.handle = conn->lll.handle;
    1a78:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1a7a:	80c3      	strh	r3, [r0, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1a7c:	f890 3020 	ldrb.w	r3, [r0, #32]
    1a80:	f043 0303 	orr.w	r3, r3, #3
    1a84:	f880 3020 	strb.w	r3, [r0, #32]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1a88:	2317      	movs	r3, #23
    1a8a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1a8e:	2602      	movs	r6, #2
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1a90:	2303      	movs	r3, #3
    1a92:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1a96:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1a98:	7106      	strb	r6, [r0, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1a9a:	f204 1155 	addw	r1, r4, #341	; 0x155
    1a9e:	3024      	adds	r0, #36	; 0x24
    1aa0:	f01d fdaa 	bl	1f5f8 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    1aa4:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    1aa8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    1aac:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    1ab0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ll_rx_put(rx->hdr.link, rx);
    1ab4:	4629      	mov	r1, r5
    1ab6:	6828      	ldr	r0, [r5, #0]
    1ab8:	f00f fc9e 	bl	113f8 <ll_rx_put>
			ll_rx_sched();
    1abc:	f00f fca6 	bl	1140c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    1ac0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1ac4:	f366 0301 	bfi	r3, r6, #0, #2
    1ac8:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    1acc:	e572      	b.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1ace:	4874      	ldr	r0, [pc, #464]	; (1ca0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x918>)
    1ad0:	f01f fec0 	bl	21854 <mem_acquire>
	if (!tx) {
    1ad4:	4605      	mov	r5, r0
    1ad6:	2800      	cmp	r0, #0
    1ad8:	f43f ad6c 	beq.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
	if (!lll->role) {
    1adc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1ae0:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    1ae2:	f100 0704 	add.w	r7, r0, #4
	if (!lll->role) {
    1ae6:	db47      	blt.n	1b78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f0>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    1ae8:	f104 087f 	add.w	r8, r4, #127	; 0x7f
    1aec:	4643      	mov	r3, r8
    1aee:	4632      	mov	r2, r6
    1af0:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    1af4:	f204 105d 	addw	r0, r4, #349	; 0x15d
    1af8:	f020 fd1c 	bl	22534 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    1afc:	2210      	movs	r2, #16
    1afe:	4641      	mov	r1, r8
    1b00:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    1b04:	f01d fd78 	bl	1f5f8 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1b08:	f104 0198 	add.w	r1, r4, #152	; 0x98
    1b0c:	2208      	movs	r2, #8
    1b0e:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    1b12:	f01d fd71 	bl	1f5f8 <memcpy>
		lll->ccm_rx.direction = 0;
    1b16:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
		lll->ccm_rx.counter = 0;
    1b1a:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
		lll->ccm_rx.direction = 0;
    1b1e:	f366 0300 	bfi	r3, r6, #0, #1
    1b22:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    1b26:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
		lll->ccm_rx.counter = 0;
    1b2a:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
		lll->ccm_tx.direction = 1;
    1b2e:	f043 0301 	orr.w	r3, r3, #1
    1b32:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    1b36:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    1b3a:	f884 6091 	strb.w	r6, [r4, #145]	; 0x91
		lll->enc_rx = 1;
    1b3e:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.counter = 0;
    1b42:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    1b46:	f884 6093 	strb.w	r6, [r4, #147]	; 0x93
    1b4a:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
    1b4e:	f884 6095 	strb.w	r6, [r4, #149]	; 0x95
    1b52:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    1b56:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
		lll->enc_rx = 1;
    1b5a:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1b5e:	4639      	mov	r1, r7
    1b60:	4620      	mov	r0, r4
    1b62:	f020 fa43 	bl	21fec <start_enc_rsp_send>
			ctrl_tx_enqueue(conn, tx);
    1b66:	4629      	mov	r1, r5
    1b68:	4620      	mov	r0, r4
    1b6a:	f020 fa3c 	bl	21fe6 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    1b6e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1b72:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1b76:	e51d      	b.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
	else if (!lll->enc_rx) {
    1b78:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    1b7c:	071a      	lsls	r2, r3, #28
    1b7e:	d465      	bmi.n	1c4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c4>
		if (conn->llcp.encryption.error_code) {
    1b80:	f894 60ed 	ldrb.w	r6, [r4, #237]	; 0xed
    1b84:	b1f6      	cbz	r6, 1bc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x83c>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1b86:	7903      	ldrb	r3, [r0, #4]
    1b88:	f043 0303 	orr.w	r3, r3, #3
    1b8c:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1b8e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    1b92:	07db      	lsls	r3, r3, #31
    1b94:	d511      	bpl.n	1bba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x832>
	    (conn->llcp_feature.features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    1b96:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    1b9a:	075f      	lsls	r7, r3, #29
    1b9c:	d50d      	bpl.n	1bba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x832>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1b9e:	2311      	movs	r3, #17
    1ba0:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1ba2:	2303      	movs	r3, #3
    1ba4:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    1ba6:	7246      	strb	r6, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    1ba8:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    1baa:	716b      	strb	r3, [r5, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1bac:	796b      	ldrb	r3, [r5, #5]
    1bae:	3301      	adds	r3, #1
    1bb0:	716b      	strb	r3, [r5, #5]
	conn->llcp.encryption.error_code = 0U;
    1bb2:	2300      	movs	r3, #0
    1bb4:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    1bb8:	e7d5      	b.n	1b66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7de>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1bba:	230d      	movs	r3, #13
    1bbc:	71eb      	strb	r3, [r5, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    1bbe:	722e      	strb	r6, [r5, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    1bc0:	2301      	movs	r3, #1
    1bc2:	e7f2      	b.n	1baa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x822>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    1bc4:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    1bc8:	463b      	mov	r3, r7
    1bca:	4632      	mov	r2, r6
    1bcc:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    1bd0:	f204 105d 	addw	r0, r4, #349	; 0x15d
    1bd4:	f020 fcae 	bl	22534 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    1bd8:	2210      	movs	r2, #16
    1bda:	4639      	mov	r1, r7
    1bdc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    1be0:	f01d fd0a 	bl	1f5f8 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1be4:	2208      	movs	r2, #8
    1be6:	f104 0198 	add.w	r1, r4, #152	; 0x98
    1bea:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    1bee:	f01d fd03 	bl	1f5f8 <memcpy>
			lll->ccm_rx.direction = 1U;
    1bf2:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
			lll->ccm_rx.counter = 0U;
    1bf6:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    1bfa:	f043 0301 	orr.w	r3, r3, #1
    1bfe:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    1c02:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
			lll->ccm_rx.counter = 0U;
    1c06:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
			lll->ccm_tx.direction = 0U;
    1c0a:	f366 0300 	bfi	r3, r6, #0, #1
    1c0e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    1c12:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    1c16:	f884 6091 	strb.w	r6, [r4, #145]	; 0x91
			lll->enc_rx = 1U;
    1c1a:	f043 0308 	orr.w	r3, r3, #8
    1c1e:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c22:	792b      	ldrb	r3, [r5, #4]
			lll->ccm_rx.counter = 0U;
    1c24:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c28:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_rx.counter = 0U;
    1c2c:	f884 6093 	strb.w	r6, [r4, #147]	; 0x93
    1c30:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
    1c34:	f884 6095 	strb.w	r6, [r4, #149]	; 0x95
    1c38:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    1c3c:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c40:	712b      	strb	r3, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1c42:	2301      	movs	r3, #1
    1c44:	716b      	strb	r3, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1c46:	2305      	movs	r3, #5
    1c48:	71eb      	strb	r3, [r5, #7]
			ctrl_tx_enqueue(conn, tx);
    1c4a:	e78c      	b.n	1b66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7de>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1c4c:	4639      	mov	r1, r7
    1c4e:	4620      	mov	r0, r4
    1c50:	f020 f9cc 	bl	21fec <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, tx);
    1c54:	4629      	mov	r1, r5
    1c56:	4620      	mov	r0, r4
    1c58:	f020 f9c5 	bl	21fe6 <ctrl_tx_enqueue>
		conn->llcp_enc.pause_rx = 0U;
    1c5c:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    1c60:	f023 0303 	bic.w	r3, r3, #3
    1c64:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    1c68:	e781      	b.n	1b6e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1c6a:	480d      	ldr	r0, [pc, #52]	; (1ca0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x918>)
    1c6c:	f01f fdf2 	bl	21854 <mem_acquire>
	if (tx) {
    1c70:	4601      	mov	r1, r0
    1c72:	2800      	cmp	r0, #0
    1c74:	f43f ac9e 	beq.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		conn->llcp_ack = conn->llcp_req;
    1c78:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1c7c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c80:	7903      	ldrb	r3, [r0, #4]
    1c82:	f043 0303 	orr.w	r3, r3, #3
    1c86:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1c88:	2301      	movs	r3, #1
    1c8a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1c8c:	2312      	movs	r3, #18
    1c8e:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, tx);
    1c90:	4620      	mov	r0, r4
    1c92:	f020 f9a8 	bl	21fe6 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    1c96:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1c9a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1c9e:	e489      	b.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
    1ca0:	20001400 	.word	0x20001400
    1ca4:	20001384 	.word	0x20001384
			event_counter = lll->event_counter +
    1ca8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1caa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1cac:	4413      	add	r3, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    1cae:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
					lll->latency_prepare + lazy;
    1cb2:	449a      	add	sl, r3
	if (conn->llcp.phy_upd_ind.initiate) {
    1cb4:	07d0      	lsls	r0, r2, #31
			event_counter = lll->event_counter +
    1cb6:	fa1f fa8a 	uxth.w	sl, sl
	if (conn->llcp.phy_upd_ind.initiate) {
    1cba:	d568      	bpl.n	1d8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa06>
		rx = ll_pdu_rx_alloc_peek(2);
    1cbc:	2002      	movs	r0, #2
    1cbe:	f00f fbab 	bl	11418 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1cc2:	4606      	mov	r6, r0
    1cc4:	2800      	cmp	r0, #0
    1cc6:	f43f ac75 	beq.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1cca:	48c0      	ldr	r0, [pc, #768]	; (1fcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc44>)
    1ccc:	f01f fdc2 	bl	21854 <mem_acquire>
		if (!tx) {
    1cd0:	4605      	mov	r5, r0
    1cd2:	2800      	cmp	r0, #0
    1cd4:	f43f ac6e 	beq.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1cd8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1cdc:	f36f 0300 	bfc	r3, #0, #1
    1ce0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    1ce4:	b2db      	uxtb	r3, r3
    1ce6:	f3c3 0782 	ubfx	r7, r3, #2, #3
    1cea:	ea57 1753 	orrs.w	r7, r7, r3, lsr #5
    1cee:	d137      	bne.n	1d60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9d8>
			conn->llcp_ack = conn->llcp_req;
    1cf0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    1cf4:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    1cf8:	079b      	lsls	r3, r3, #30
			conn->llcp.phy_upd_ind.instant = 0U;
    1cfa:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    1cfe:	d519      	bpl.n	1d34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ac>
				(void)ll_pdu_rx_alloc();
    1d00:	f00f fba2 	bl	11448 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    1d04:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1d06:	80f3      	strh	r3, [r6, #6]
				upd->status = 0U;
    1d08:	f886 7020 	strb.w	r7, [r6, #32]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1d0c:	230e      	movs	r3, #14
    1d0e:	7133      	strb	r3, [r6, #4]
				upd->tx = lll->phy_tx;
    1d10:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    1d14:	6830      	ldr	r0, [r6, #0]
				upd->tx = lll->phy_tx;
    1d16:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d1a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
				upd->rx = lll->phy_rx;
    1d1e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    1d22:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d26:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
				ll_rx_put(rx->hdr.link, rx);
    1d2a:	4631      	mov	r1, r6
    1d2c:	f00f fb64 	bl	113f8 <ll_rx_put>
				ll_rx_sched();
    1d30:	f00f fb6c 	bl	1140c <ll_rx_sched>
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d34:	792b      	ldrb	r3, [r5, #4]
    1d36:	f043 0303 	orr.w	r3, r3, #3
    1d3a:	712b      	strb	r3, [r5, #4]
		pdu_ctrl_tx->len =
    1d3c:	2305      	movs	r3, #5
    1d3e:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
    1d40:	2318      	movs	r3, #24
    1d42:	71eb      	strb	r3, [r5, #7]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    1d44:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1d48:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1d4c:	722b      	strb	r3, [r5, #8]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    1d4e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1d52:	f3c3 1342 	ubfx	r3, r3, #5, #3
    1d56:	726b      	strb	r3, [r5, #9]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    1d58:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    1d5c:	816b      	strh	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
    1d5e:	e425      	b.n	15ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x224>
			conn->llcp.phy_upd_ind.instant = event_counter +
    1d60:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1d62:	449a      	add	sl, r3
							 lll->latency +
    1d64:	f10a 0a06 	add.w	sl, sl, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    1d68:	f8a4 a0ee 	strh.w	sl, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    1d6c:	f00f fb6c 	bl	11448 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    1d70:	6833      	ldr	r3, [r6, #0]
    1d72:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1d76:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    1d78:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    1d7c:	f00f fb64 	bl	11448 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    1d80:	6803      	ldr	r3, [r0, #0]
    1d82:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1d86:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    1d88:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    1d8c:	e7d2      	b.n	1d34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ac>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    1d8e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    1d92:	ebaa 0a03 	sub.w	sl, sl, r3
    1d96:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
    1d9a:	f47f ac0b 	bne.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		old_tx = lll->phy_tx;
    1d9e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    1da2:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    1da6:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
		if (conn->llcp.phy_upd_ind.tx) {
    1daa:	f012 0f1c 	tst.w	r2, #28
		old_tx = lll->phy_tx;
    1dae:	f003 0707 	and.w	r7, r3, #7
		old_rx = lll->phy_rx;
    1db2:	f005 0507 	and.w	r5, r5, #7
		u16_t eff_rx_time = lll->max_rx_time;
    1db6:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
		if (conn->llcp.phy_upd_ind.tx) {
    1dba:	d16a      	bne.n	1e92 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0a>
		u16_t eff_tx_time = lll->max_tx_time;
    1dbc:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
		if (conn->llcp.phy_upd_ind.rx) {
    1dc0:	f012 0fe0 	tst.w	r2, #224	; 0xe0
    1dc4:	d008      	beq.n	1dd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa50>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1dc6:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    1dca:	0952      	lsrs	r2, r2, #5
    1dcc:	f362 0302 	bfi	r3, r2, #0, #3
    1dd0:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
		eff_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
    1dd4:	f44f 76a4 	mov.w	r6, #328	; 0x148
		lll->phy_flags = conn->phy_pref_flags;
    1dd8:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    1ddc:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		rx = conn->llcp_rx;
    1de0:	f8d4 9100 	ldr.w	r9, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
    1de4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1de8:	f363 02c3 	bfi	r2, r3, #3, #1
    1dec:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
    1df0:	f1b9 0f00 	cmp.w	r9, #0
    1df4:	d002      	beq.n	1dfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa74>
    1df6:	f8d9 3000 	ldr.w	r3, [r9]
    1dfa:	b963      	cbnz	r3, 1e16 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8e>
    1dfc:	f44f 6360 	mov.w	r3, #3584	; 0xe00
    1e00:	4a73      	ldr	r2, [pc, #460]	; (1fd0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc48>)
    1e02:	4974      	ldr	r1, [pc, #464]	; (1fd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4c>)
    1e04:	4874      	ldr	r0, [pc, #464]	; (1fd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc50>)
    1e06:	f01b fcd6 	bl	1d7b6 <printk>
    1e0a:	4040      	eors	r0, r0
    1e0c:	f380 8811 	msr	BASEPRI, r0
    1e10:	f04f 0003 	mov.w	r0, #3
    1e14:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    1e16:	f8d9 0000 	ldr.w	r0, [r9]
    1e1a:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    1e1e:	6843      	ldr	r3, [r0, #4]
    1e20:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1e24:	f894 e0ec 	ldrb.w	lr, [r4, #236]	; 0xec
    1e28:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    1e2c:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1e30:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1e34:	f01e 0f02 	tst.w	lr, #2
    1e38:	fa5f fc82 	uxtb.w	ip, r2
    1e3c:	b2d9      	uxtb	r1, r3
    1e3e:	d142      	bne.n	1ec6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb3e>
    1e40:	4567      	cmp	r7, ip
    1e42:	d140      	bne.n	1ec6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb3e>
    1e44:	428d      	cmp	r5, r1
    1e46:	d13e      	bne.n	1ec6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb3e>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1e48:	2303      	movs	r3, #3
    1e4a:	f889 3004 	strb.w	r3, [r9, #4]
			ll_rx_put(rx->hdr.link, rx);
    1e4e:	4649      	mov	r1, r9
    1e50:	f00f fad2 	bl	113f8 <ll_rx_put>
				rx = conn->llcp_rx;
    1e54:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    1e58:	b10d      	cbz	r5, 1e5e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xad6>
    1e5a:	682b      	ldr	r3, [r5, #0]
    1e5c:	b963      	cbnz	r3, 1e78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf0>
    1e5e:	f640 630f 	movw	r3, #3599	; 0xe0f
    1e62:	4a5b      	ldr	r2, [pc, #364]	; (1fd0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc48>)
    1e64:	495b      	ldr	r1, [pc, #364]	; (1fd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4c>)
    1e66:	485c      	ldr	r0, [pc, #368]	; (1fd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc50>)
    1e68:	f01b fca5 	bl	1d7b6 <printk>
    1e6c:	4040      	eors	r0, r0
    1e6e:	f380 8811 	msr	BASEPRI, r0
    1e72:	f04f 0003 	mov.w	r0, #3
    1e76:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
    1e78:	6828      	ldr	r0, [r5, #0]
    1e7a:	6843      	ldr	r3, [r0, #4]
    1e7c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1e80:	2303      	movs	r3, #3
    1e82:	712b      	strb	r3, [r5, #4]
		ll_rx_put(rx->hdr.link, rx);
    1e84:	4629      	mov	r1, r5
    1e86:	f00f fab7 	bl	113f8 <ll_rx_put>
		ll_rx_sched();
    1e8a:	f00f fabf 	bl	1140c <ll_rx_sched>
    1e8e:	f7ff bb91 	b.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    1e92:	f3c2 0182 	ubfx	r1, r2, #2, #3
    1e96:	f361 0302 	bfi	r3, r1, #0, #3
    1e9a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	u16_t time = PKT_US(max_octets, phy);
    1e9e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    1ea2:	330e      	adds	r3, #14
    1ea4:	00db      	lsls	r3, r3, #3
    1ea6:	f3c1 0140 	ubfx	r1, r1, #1, #1
    1eaa:	40cb      	lsrs	r3, r1
	if (time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
    1eac:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1eb0:	d306      	bcc.n	1ec0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb38>
		eff_time = MIN(time, default_time);
    1eb2:	f8b4 80d8 	ldrh.w	r8, [r4, #216]	; 0xd8
    1eb6:	b29b      	uxth	r3, r3
    1eb8:	4598      	cmp	r8, r3
    1eba:	bf28      	it	cs
    1ebc:	4698      	movcs	r8, r3
    1ebe:	e77f      	b.n	1dc0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa38>
		eff_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
    1ec0:	f44f 78a4 	mov.w	r8, #328	; 0x148
    1ec4:	e77c      	b.n	1dc0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa38>
		rx->hdr.handle = lll->handle;
    1ec6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    1ec8:	f8a9 1006 	strh.w	r1, [r9, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1ecc:	210e      	movs	r1, #14
    1ece:	f889 1004 	strb.w	r1, [r9, #4]
		upd->status = 0U;
    1ed2:	2100      	movs	r1, #0
    1ed4:	f889 1020 	strb.w	r1, [r9, #32]
		upd->tx = lll->phy_tx;
    1ed8:	f889 2021 	strb.w	r2, [r9, #33]	; 0x21
		upd->rx = lll->phy_rx;
    1edc:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    1ee0:	4649      	mov	r1, r9
    1ee2:	f00f fa89 	bl	113f8 <ll_rx_put>
		rx = conn->llcp_rx;
    1ee6:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1eea:	b10d      	cbz	r5, 1ef0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb68>
    1eec:	682b      	ldr	r3, [r5, #0]
    1eee:	b963      	cbnz	r3, 1f0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb82>
    1ef0:	f640 632c 	movw	r3, #3628	; 0xe2c
    1ef4:	4a36      	ldr	r2, [pc, #216]	; (1fd0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc48>)
    1ef6:	4937      	ldr	r1, [pc, #220]	; (1fd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4c>)
    1ef8:	4837      	ldr	r0, [pc, #220]	; (1fd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc50>)
    1efa:	f01b fc5c 	bl	1d7b6 <printk>
    1efe:	4040      	eors	r0, r0
    1f00:	f380 8811 	msr	BASEPRI, r0
    1f04:	f04f 0003 	mov.w	r0, #3
    1f08:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    1f0a:	6828      	ldr	r0, [r5, #0]
    1f0c:	6843      	ldr	r3, [r0, #4]
    1f0e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    1f12:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    1f16:	4543      	cmp	r3, r8
    1f18:	d303      	bcc.n	1f22 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb9a>
    1f1a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    1f1e:	42b3      	cmp	r3, r6
    1f20:	d2ae      	bcs.n	1e80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf8>
		rx->hdr.handle = lll->handle;
    1f22:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		lll->max_tx_time = eff_tx_time;
    1f24:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    1f28:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
    1f2c:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f2e:	2302      	movs	r3, #2
    1f30:	712b      	strb	r3, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1f32:	f895 3020 	ldrb.w	r3, [r5, #32]
    1f36:	f043 0303 	orr.w	r3, r3, #3
    1f3a:	f885 3020 	strb.w	r3, [r5, #32]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1f3e:	2309      	movs	r3, #9
    1f40:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1f44:	2315      	movs	r3, #21
    1f46:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1f4a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    1f4e:	84ab      	strh	r3, [r5, #36]	; 0x24
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1f50:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    1f54:	852b      	strh	r3, [r5, #40]	; 0x28
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1f56:	84ee      	strh	r6, [r5, #38]	; 0x26
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1f58:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
    1f5c:	e792      	b.n	1e84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xafc>
			LL_ASSERT(0);
    1f5e:	f240 3376 	movw	r3, #886	; 0x376
    1f62:	4a1b      	ldr	r2, [pc, #108]	; (1fd0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc48>)
    1f64:	491d      	ldr	r1, [pc, #116]	; (1fdc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc54>)
    1f66:	481c      	ldr	r0, [pc, #112]	; (1fd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc50>)
    1f68:	f01b fc25 	bl	1d7b6 <printk>
    1f6c:	4040      	eors	r0, r0
    1f6e:	f380 8811 	msr	BASEPRI, r0
    1f72:	f04f 0003 	mov.w	r0, #3
    1f76:	df02      	svc	2
			break;
    1f78:	f7ff bb1c 	b.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f7c:	4813      	ldr	r0, [pc, #76]	; (1fcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc44>)
    1f7e:	f01f fc69 	bl	21854 <mem_acquire>
		if (tx) {
    1f82:	4601      	mov	r1, r0
    1f84:	b180      	cbz	r0, 1fa8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc20>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    1f86:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    1f8a:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f8e:	7903      	ldrb	r3, [r0, #4]
    1f90:	f043 0303 	orr.w	r3, r3, #3
    1f94:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1f96:	2302      	movs	r3, #2
    1f98:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    1f9a:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    1f9c:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
    1fa0:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    1fa2:	4620      	mov	r0, r4
    1fa4:	f020 f81f 	bl	21fe6 <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    1fa8:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    1fac:	2800      	cmp	r0, #0
    1fae:	f47f ab08 	bne.w	15c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23a>
			conn->procedure_expire = conn->supervision_reload;
    1fb2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    1fb6:	2b01      	cmp	r3, #1
    1fb8:	d903      	bls.n	1fc2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc3a>
			conn->procedure_expire = conn->supervision_reload;
    1fba:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1fbe:	f7ff bb00 	b.w	15c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23a>
				conn->procedure_expire++;
    1fc2:	3301      	adds	r3, #1
    1fc4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1fc8:	f7ff bafc 	b.w	15c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23c>
    1fcc:	20001400 	.word	0x20001400
    1fd0:	00029456 	.word	0x00029456
    1fd4:	0002951d 	.word	0x0002951d
    1fd8:	00027ff4 	.word	0x00027ff4
    1fdc:	0002a0ca 	.word	0x0002a0ca

00001fe0 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(u32_t status, void *param);
static void ticker_op_cb(u32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fe4:	b097      	sub	sp, #92	; 0x5c
    1fe6:	461d      	mov	r5, r3
    1fe8:	900e      	str	r0, [sp, #56]	; 0x38
	u16_t win_offset;
	u16_t timeout;
	u16_t interval;
	u8_t chan_sel;

	((struct lll_adv *)ftr->param)->conn = NULL;
    1fea:	6813      	ldr	r3, [r2, #0]

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    1fec:	4628      	mov	r0, r5
{
    1fee:	4690      	mov	r8, r2
	((struct lll_adv *)ftr->param)->conn = NULL;
    1ff0:	2200      	movs	r2, #0
{
    1ff2:	460c      	mov	r4, r1
	conn = lll->hdr.parent;
    1ff4:	f850 6b0c 	ldr.w	r6, [r0], #12
	((struct lll_adv *)ftr->param)->conn = NULL;
    1ff8:	609a      	str	r2, [r3, #8]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1ffa:	f105 0a08 	add.w	sl, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1ffe:	2203      	movs	r2, #3
    2000:	3132      	adds	r1, #50	; 0x32
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2002:	f8d3 9000 	ldr.w	r9, [r3]
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2006:	f105 071c 	add.w	r7, r5, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    200a:	f01d faf5 	bl	1f5f8 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    200e:	2204      	movs	r2, #4
    2010:	f104 012e 	add.w	r1, r4, #46	; 0x2e
    2014:	4650      	mov	r0, sl
    2016:	f01d faef 	bl	1f5f8 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    201a:	2205      	movs	r2, #5
    201c:	f104 013e 	add.w	r1, r4, #62	; 0x3e
    2020:	4638      	mov	r0, r7
    2022:	f01d fae9 	bl	1f5f8 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2026:	2105      	movs	r1, #5
    2028:	4638      	mov	r0, r7
    202a:	f01f fc8f 	bl	2194c <util_ones_count_get>
    202e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    2032:	f360 0305 	bfi	r3, r0, #0, #6
    2036:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    203a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    203e:	f3c3 0304 	ubfx	r3, r3, #0, #5
    2042:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2046:	8f27      	ldrh	r7, [r4, #56]	; 0x38
	lll->interval = interval;
    2048:	826f      	strh	r7, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    204a:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
    204e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    2052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2056:	82ab      	strh	r3, [r5, #20]

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2058:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    205a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	conn_interval_us = interval * 1250U;

	/* calculate the window widening */
	conn->slave.sca = pdu_adv->connect_ind.sca;
    205e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2062:	f896 20dc 	ldrb.w	r2, [r6, #220]	; 0xdc
    2066:	095b      	lsrs	r3, r3, #5
    2068:	f363 0284 	bfi	r2, r3, #2, #3
    206c:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
	lll->slave.window_widening_periodic_us =
		(((lll_conn_ppm_local_get() +
    2070:	f020 f981 	bl	22376 <lll_conn_ppm_local_get>
    2074:	900a      	str	r0, [sp, #40]	; 0x28
		   lll_conn_ppm_get(conn->slave.sca)) *
    2076:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
    207a:	f3c0 0082 	ubfx	r0, r0, #2, #3
    207e:	f013 fa3f 	bl	15500 <lll_conn_ppm_get>
		(((lll_conn_ppm_local_get() +
    2082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					      conn_interval_us);
	/* Dispatch LE Ping PDU 6 connection events (that peer would
	 * listen to) before 30s timeout
	 * TODO: "peer listens to" is greater than 30s due to latency
	 */
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2084:	8aa9      	ldrh	r1, [r5, #20]
	conn_interval_us = interval * 1250U;
    2086:	f240 4be2 	movw	fp, #1250	; 0x4e2
    208a:	fb0b f707 	mul.w	r7, fp, r7
		(((lll_conn_ppm_local_get() +
    208e:	4418      	add	r0, r3
		   lll_conn_ppm_get(conn->slave.sca)) *
    2090:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2092:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2096:	4bb8      	ldr	r3, [pc, #736]	; (2378 <ull_slave_setup+0x398>)
    2098:	f200 203f 	addw	r0, r0, #575	; 0x23f
    209c:	fbb0 f0f3 	udiv	r0, r0, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    20a0:	087b      	lsrs	r3, r7, #1
    20a2:	3b96      	subs	r3, #150	; 0x96
    20a4:	62eb      	str	r3, [r5, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    20a6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	lll->slave.window_widening_periodic_us =
    20aa:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    20ac:	fb0b f303 	mul.w	r3, fp, r3
    20b0:	63eb      	str	r3, [r5, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    20b2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    20b4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    20b8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    20bc:	f242 7310 	movw	r3, #10000	; 0x2710
    20c0:	fb03 7302 	mla	r3, r3, r2, r7
    20c4:	3b01      	subs	r3, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20c6:	4aad      	ldr	r2, [pc, #692]	; (237c <ull_slave_setup+0x39c>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    20c8:	fbb3 f3f7 	udiv	r3, r3, r7
    20cc:	f8a6 30c6 	strh.w	r3, [r6, #198]	; 0xc6
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    20d0:	4bab      	ldr	r3, [pc, #684]	; (2380 <ull_slave_setup+0x3a0>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20d2:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    20d4:	443b      	add	r3, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20d6:	443a      	add	r2, r7
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    20d8:	fbb3 f3f7 	udiv	r3, r3, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20dc:	fbb2 f2f7 	udiv	r2, r2, r7
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    20e0:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20e4:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20e6:	4283      	cmp	r3, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20e8:	f8a6 30d2 	strh.w	r3, [r6, #210]	; 0xd2
			     (conn->apto_reload - (lll->latency + 6)) :
    20ec:	bfc2      	ittt	gt
    20ee:	1a5b      	subgt	r3, r3, r1
    20f0:	3b06      	subgt	r3, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20f2:	b29b      	uxthgt	r3, r3
			     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    20f4:	4651      	mov	r1, sl
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20f6:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    20fa:	2204      	movs	r2, #4
    20fc:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    2100:	f01d fa7a 	bl	1f5f8 <memcpy>
	       sizeof(conn->slave.force));

#if defined(CONFIG_BT_CTLR_PRIVACY)
	u8_t own_addr_type = pdu_adv->rx_addr;
	u8_t own_addr[BDADDR_SIZE];
	u8_t rl_idx = ftr->rl_idx;
    2104:	f898 3015 	ldrb.w	r3, [r8, #21]
	u8_t own_addr_type = pdu_adv->rx_addr;
    2108:	f894 a020 	ldrb.w	sl, [r4, #32]
	u8_t rl_idx = ftr->rl_idx;
    210c:	930a      	str	r3, [sp, #40]	; 0x28

	memcpy(own_addr, &pdu_adv->connect_ind.adv_addr[0], BDADDR_SIZE);
    210e:	2206      	movs	r2, #6
    2110:	f104 0128 	add.w	r1, r4, #40	; 0x28
    2114:	a814      	add	r0, sp, #80	; 0x50
    2116:	f01d fa6f 	bl	1f5f8 <memcpy>
#endif

	peer_addr_type = pdu_adv->tx_addr;
    211a:	f894 3020 	ldrb.w	r3, [r4, #32]
    211e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2122:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2126:	f104 0322 	add.w	r3, r4, #34	; 0x22
    212a:	4619      	mov	r1, r3
    212c:	2206      	movs	r2, #6
    212e:	a812      	add	r0, sp, #72	; 0x48
    2130:	9311      	str	r3, [sp, #68]	; 0x44
    2132:	f01d fa61 	bl	1f5f8 <memcpy>

	chan_sel = pdu_adv->chan_sel;
    2136:	f894 2020 	ldrb.w	r2, [r4, #32]
	u8_t own_addr_type = pdu_adv->rx_addr;
    213a:	f3ca 1ac0 	ubfx	sl, sl, #7, #1
	chan_sel = pdu_adv->chan_sel;
    213e:	f3c2 1340 	ubfx	r3, r2, #5, #1

	cc = (void *)pdu_adv;
	cc->status = 0U;
    2142:	f44f 7280 	mov.w	r2, #256	; 0x100
	chan_sel = pdu_adv->chan_sel;
    2146:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	cc->status = 0U;
    214a:	8422      	strh	r2, [r4, #32]
	chan_sel = pdu_adv->chan_sel;
    214c:	b2db      	uxtb	r3, r3
	cc->role = 1U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	cc->own_addr_type = own_addr_type;
    214e:	f884 a02f 	strb.w	sl, [r4, #47]	; 0x2f
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    2152:	2206      	movs	r2, #6
    2154:	a914      	add	r1, sp, #80	; 0x50
    2156:	f104 0030 	add.w	r0, r4, #48	; 0x30
	chan_sel = pdu_adv->chan_sel;
    215a:	930d      	str	r3, [sp, #52]	; 0x34
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    215c:	f01d fa4c 	bl	1f5f8 <memcpy>

	if (rl_idx != FILTER_IDX_NONE) {
    2160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2162:	2bff      	cmp	r3, #255	; 0xff
    2164:	f104 0b29 	add.w	fp, r4, #41	; 0x29
    2168:	f104 0a23 	add.w	sl, r4, #35	; 0x23
    216c:	f000 80ee 	beq.w	234c <ull_slave_setup+0x36c>
		/* TODO: store rl_idx instead if safe */
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2170:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2172:	980a      	ldr	r0, [sp, #40]	; 0x28
    2174:	4619      	mov	r1, r3
    2176:	4652      	mov	r2, sl
    2178:	f013 fe9a 	bl	15eb0 <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    217c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    2180:	3302      	adds	r3, #2
    2182:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2186:	2206      	movs	r2, #6
    2188:	a912      	add	r1, sp, #72	; 0x48
    218a:	4658      	mov	r0, fp
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    218c:	f01d fa34 	bl	1f5f8 <memcpy>
	}

	cc->interval = lll->interval;
    2190:	8a6b      	ldrh	r3, [r5, #18]
    2192:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->latency = lll->latency;
    2194:	8aab      	ldrh	r3, [r5, #20]
    2196:	8723      	strh	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
    2198:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    219c:	8763      	strh	r3, [r4, #58]	; 0x3a
	cc->sca = conn->slave.sca;
    219e:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
    21a2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    21a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

	lll->handle = ll_conn_handle_get(conn);
    21aa:	4630      	mov	r0, r6
    21ac:	f011 f8fe 	bl	133ac <ll_conn_handle_get>
		struct node_rx_cs *cs;

		/* pick the rx node instance stored within the connection
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;
    21b0:	f8d8 a004 	ldr.w	sl, [r8, #4]
	lll->handle = ll_conn_handle_get(conn);
    21b4:	8228      	strh	r0, [r5, #16]

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    21b6:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    21b8:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    21ba:	980e      	ldr	r0, [sp, #56]	; 0x38
    21bc:	f00f f91c 	bl	113f8 <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    21c0:	8a2b      	ldrh	r3, [r5, #16]
    21c2:	f8aa 3006 	strh.w	r3, [sl, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    21c6:	230d      	movs	r3, #13
    21c8:	f88a 3004 	strb.w	r3, [sl, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    21cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		link = rx->link;
    21ce:	f8da 0000 	ldr.w	r0, [sl]
		if (chan_sel) {
    21d2:	2b00      	cmp	r3, #0
    21d4:	f000 80c7 	beq.w	2366 <ull_slave_setup+0x386>
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    21d8:	7a6a      	ldrb	r2, [r5, #9]
				      lll->access_addr[0];
    21da:	7a2b      	ldrb	r3, [r5, #8]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    21dc:	7ae9      	ldrb	r1, [r5, #11]
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    21de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				      lll->access_addr[2];
    21e2:	7aaa      	ldrb	r2, [r5, #10]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    21e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

			lll->data_chan_sel = 1;
    21e8:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
			lll->data_chan_id = aa_ms ^ aa_ls;
    21ec:	4053      	eors	r3, r2
			lll->data_chan_sel = 1;
    21ee:	f041 0140 	orr.w	r1, r1, #64	; 0x40
			lll->data_chan_id = aa_ms ^ aa_ls;
    21f2:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    21f4:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21

			cs->csa = 0x01;
    21f8:	2301      	movs	r3, #1
		} else {
			cs->csa = 0x00;
    21fa:	f88a 3020 	strb.w	r3, [sl, #32]
		}
	}

	ll_rx_put(link, rx);
    21fe:	4651      	mov	r1, sl
    2200:	f00f f8fa 	bl	113f8 <ll_rx_put>
	ll_rx_sched();
    2204:	f00f f902 	bl	1140c <ll_rx_sched>
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2208:	f8d8 b010 	ldr.w	fp, [r8, #16]
    220c:	f8df a190 	ldr.w	sl, [pc, #400]	; 23a0 <ull_slave_setup+0x3c0>
	conn->evt.ticks_xtal_to_start =
    2210:	2400      	movs	r4, #0
    2212:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2214:	f20b 4052 	addw	r0, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    2218:	e9c6 3400 	strd	r3, r4, [r6]
	conn->evt.ticks_preempt_to_start =
    221c:	60b4      	str	r4, [r6, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    221e:	a354      	add	r3, pc, #336	; (adr r3, 2370 <ull_slave_setup+0x390>)
    2220:	e9d3 2300 	ldrd	r2, r3, [r3]
    2224:	fba0 010a 	umull	r0, r1, r0, sl
    2228:	f7fd ff5a 	bl	e0 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    222c:	6aab      	ldr	r3, [r5, #40]	; 0x28

	conn_offset_us = ftr->us_radio_end;
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    222e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2232:	1aff      	subs	r7, r7, r3
    2234:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2238:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
    223c:	eba3 030b 	sub.w	r3, r3, fp
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    2240:	f240 4be2 	movw	fp, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2244:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    2248:	fb0b bb02 	mla	fp, fp, r2, fp
	conn_offset_us -= EVENT_OVERHEAD_START_US;
	conn_offset_us -= EVENT_TICKER_RES_MARGIN_US;
	conn_offset_us -= EVENT_JITTER_US;
	conn_offset_us -= ftr->us_radio_rdy;
    224c:	445b      	add	r3, fp

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    224e:	4622      	mov	r2, r4
    2250:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2252:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2254:	2001      	movs	r0, #1
	conn_offset_us -= ftr->us_radio_rdy;
    2256:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2258:	f00c fc72 	bl	eb40 <mayfly_enable>
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    225c:	4648      	mov	r0, r9
    225e:	f010 f9b3 	bl	125c8 <ull_adv_handle_get>
    2262:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2264:	4b47      	ldr	r3, [pc, #284]	; (2384 <ull_slave_setup+0x3a4>)
    2266:	f8cd 9000 	str.w	r9, [sp]
    226a:	b2d2      	uxtb	r2, r2
    226c:	2101      	movs	r1, #1
    226e:	4620      	mov	r0, r4
    2270:	f00d f99e 	bl	f5b0 <ticker_stop>
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_adv, ticker_op_stop_adv_cb, adv);
	ticker_op_stop_adv_cb(ticker_status, adv);
    2274:	4649      	mov	r1, r9
    2276:	f013 fbf7 	bl	15a68 <ticker_op_stop_adv_cb>

	/* Stop Direct Adv Stop */
	if (adv->lll.is_hdcd) {
    227a:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    227e:	07db      	lsls	r3, r3, #31
    2280:	d506      	bpl.n	2290 <ull_slave_setup+0x2b0>
		/* Advertiser stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2282:	2201      	movs	r2, #1
    2284:	9400      	str	r4, [sp, #0]
    2286:	4623      	mov	r3, r4
    2288:	4611      	mov	r1, r2
    228a:	4620      	mov	r0, r4
    228c:	f00d f990 	bl	f5b0 <ticker_stop>
			    TICKER_ID_ADV_STOP, NULL, NULL);
	}

	/* Start Slave */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2290:	4630      	mov	r0, r6
    2292:	f011 f88b 	bl	133ac <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2296:	fba7 450a 	umull	r4, r5, r7, sl
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    229a:	4681      	mov	r9, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    229c:	a334      	add	r3, pc, #208	; (adr r3, 2370 <ull_slave_setup+0x390>)
    229e:	e9d3 2300 	ldrd	r2, r3, [r3]
    22a2:	4620      	mov	r0, r4
    22a4:	4629      	mov	r1, r5
    22a6:	f7fd ff1b 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
    22ae:	f1a3 0831 	sub.w	r8, r3, #49	; 0x31
    22b2:	f240 131d 	movw	r3, #285	; 0x11d
    22b6:	9308      	str	r3, [sp, #32]
    22b8:	4b33      	ldr	r3, [pc, #204]	; (2388 <ull_slave_setup+0x3a8>)
    22ba:	e9cd 6306 	strd	r6, r3, [sp, #24]
    22be:	4b33      	ldr	r3, [pc, #204]	; (238c <ull_slave_setup+0x3ac>)
    22c0:	9305      	str	r3, [sp, #20]
    22c2:	68f3      	ldr	r3, [r6, #12]
    22c4:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22c6:	4b32      	ldr	r3, [pc, #200]	; (2390 <ull_slave_setup+0x3b0>)
    22c8:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    22cc:	fba6 bc03 	umull	fp, ip, r6, r3
    22d0:	2307      	movs	r3, #7
    22d2:	fb03 cc06 	mla	ip, r3, r6, ip
    22d6:	ebb4 000b 	subs.w	r0, r4, fp
    22da:	eb65 010c 	sbc.w	r1, r5, ip
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    22de:	f109 0703 	add.w	r7, r9, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22e6:	f04f 0900 	mov.w	r9, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22ea:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22ec:	f8cd 900c 	str.w	r9, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22f0:	f7fd fef6 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    22f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    22f6:	a31e      	add	r3, pc, #120	; (adr r3, 2370 <ull_slave_setup+0x390>)
    22f8:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22fc:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2300:	fba1 010a 	umull	r0, r1, r1, sl
    2304:	f7fd feec 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2308:	b2ff      	uxtb	r7, r7
    230a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    230e:	9000      	str	r0, [sp, #0]
    2310:	4643      	mov	r3, r8
    2312:	463a      	mov	r2, r7
    2314:	2101      	movs	r1, #1
    2316:	4648      	mov	r0, r9
    2318:	f00d f8b8 	bl	f48c <ticker_start>
#endif /* CONFIG_BT_CTLR_CONN_META */
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_slave_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    231c:	f030 0302 	bics.w	r3, r0, #2
    2320:	d00c      	beq.n	233c <ull_slave_setup+0x35c>
    2322:	f240 131f 	movw	r3, #287	; 0x11f
    2326:	4a1b      	ldr	r2, [pc, #108]	; (2394 <ull_slave_setup+0x3b4>)
    2328:	491b      	ldr	r1, [pc, #108]	; (2398 <ull_slave_setup+0x3b8>)
    232a:	481c      	ldr	r0, [pc, #112]	; (239c <ull_slave_setup+0x3bc>)
    232c:	f01b fa43 	bl	1d7b6 <printk>
    2330:	4040      	eors	r0, r0
    2332:	f380 8811 	msr	BASEPRI, r0
    2336:	f04f 0003 	mov.w	r0, #3
    233a:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    233c:	2201      	movs	r2, #1
    233e:	2102      	movs	r1, #2
    2340:	4610      	mov	r0, r2
    2342:	f00c fbfd 	bl	eb40 <mayfly_enable>
#endif
}
    2346:	b017      	add	sp, #92	; 0x5c
    2348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    234c:	2206      	movs	r2, #6
    234e:	2100      	movs	r1, #0
    2350:	4658      	mov	r0, fp
    2352:	f01d f97b 	bl	1f64c <memset>
		cc->peer_addr_type = peer_addr_type;
    2356:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    235a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    235e:	2206      	movs	r2, #6
    2360:	a912      	add	r1, sp, #72	; 0x48
    2362:	4650      	mov	r0, sl
    2364:	e712      	b.n	218c <ull_slave_setup+0x1ac>
			cs->csa = 0x00;
    2366:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    236a:	e746      	b.n	21fa <ull_slave_setup+0x21a>
    236c:	f3af 8000 	nop.w
    2370:	1afd498d 	.word	0x1afd498d
    2374:	00000007 	.word	0x00000007
    2378:	000f4240 	.word	0x000f4240
    237c:	01c9c37f 	.word	0x01c9c37f
    2380:	026259ff 	.word	0x026259ff
    2384:	00015a69 	.word	0x00015a69
    2388:	00015a3d 	.word	0x00015a3d
    238c:	00015aa1 	.word	0x00015aa1
    2390:	1afd498d 	.word	0x1afd498d
    2394:	000296ae 	.word	0x000296ae
    2398:	000293b5 	.word	0x000293b5
    239c:	00027ff4 	.word	0x00027ff4
    23a0:	3b9aca00 	.word	0x3b9aca00
    23a4:	00000000 	.word	0x00000000

000023a8 <ull_slave_done>:
 * @param ticks_drift_plus[out]  Positive part of drift uncertainty window
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_slave_done(struct node_rx_event_done *done, u32_t *ticks_drift_plus,
		    u32_t *ticks_drift_minus)
{
    23a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    23ac:	4689      	mov	r9, r1
	u32_t window_widening_event_us;
	u32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.slave.start_to_address_actual_us;
	window_widening_event_us =
    23ae:	e9d0 710b 	ldrd	r7, r1, [r0, #44]	; 0x2c
		done->extra.slave.window_widening_event_us;
	preamble_to_addr_us =
    23b2:	6b46      	ldr	r6, [r0, #52]	; 0x34
		done->extra.slave.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
    23b4:	4d16      	ldr	r5, [pc, #88]	; (2410 <ull_slave_done+0x68>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    23b6:	198c      	adds	r4, r1, r6
	start_to_address_expected_us = EVENT_JITTER_US +
    23b8:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    23ba:	42a7      	cmp	r7, r4
{
    23bc:	4690      	mov	r8, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    23be:	a312      	add	r3, pc, #72	; (adr r3, 2408 <ull_slave_done+0x60>)
    23c0:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    23c4:	d815      	bhi.n	23f2 <ull_slave_done+0x4a>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    23c6:	fba1 0105 	umull	r0, r1, r1, r5
    23ca:	f7fd fe89 	bl	e0 <__aeabi_uldivmod>
    23ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    23d2:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    23d6:	1be0      	subs	r0, r4, r7
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    23d8:	a30b      	add	r3, pc, #44	; (adr r3, 2408 <ull_slave_done+0x60>)
    23da:	e9d3 2300 	ldrd	r2, r3, [r3]
    23de:	fba0 0105 	umull	r0, r1, r0, r5
    23e2:	f7fd fe7d 	bl	e0 <__aeabi_uldivmod>
    23e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    23ea:	f8c8 0000 	str.w	r0, [r8]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    23ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    23f2:	fba7 0105 	umull	r0, r1, r7, r5
    23f6:	f7fd fe73 	bl	e0 <__aeabi_uldivmod>
    23fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    23fe:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    2402:	f106 0030 	add.w	r0, r6, #48	; 0x30
    2406:	e7e7      	b.n	23d8 <ull_slave_done+0x30>
    2408:	1afd498d 	.word	0x1afd498d
    240c:	00000007 	.word	0x00000007
    2410:	3b9aca00 	.word	0x3b9aca00
    2414:	00000000 	.word	0x00000000

00002418 <erase_op>:
}

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
    2418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    241c:	4604      	mov	r4, r0
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    241e:	f020 fb93 	bl	22b48 <nrfx_nvmc_flash_page_size_get>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 0U;

	if (e_ctx->enable_time_limit) {
    2422:	7b25      	ldrb	r5, [r4, #12]
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2424:	4682      	mov	sl, r0
	if (e_ctx->enable_time_limit) {
    2426:	b115      	cbz	r5, 242e <erase_op+0x16>
		ticks_begin = ticker_ticks_now_get();
    2428:	f01f fbbd 	bl	21ba6 <ticker_ticks_now_get>
    242c:	4605      	mov	r5, r0
		if (e_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    242e:	f20f 0968 	addw	r9, pc, #104	; 0x68
    2432:	e9d9 8900 	ldrd	r8, r9, [r9]
    2436:	f8df b068 	ldr.w	fp, [pc, #104]	; 24a0 <erase_op+0x88>
	u32_t ticks_begin = 0U;
    243a:	2700      	movs	r7, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    243c:	6860      	ldr	r0, [r4, #4]
    243e:	f016 f945 	bl	186cc <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    2442:	68a3      	ldr	r3, [r4, #8]
    2444:	eba3 030a 	sub.w	r3, r3, sl
    2448:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    244a:	6863      	ldr	r3, [r4, #4]
    244c:	4453      	add	r3, sl
    244e:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
    2450:	7b23      	ldrb	r3, [r4, #12]
		i++;
    2452:	3701      	adds	r7, #1
		if (e_ctx->enable_time_limit) {
    2454:	b94b      	cbnz	r3, 246a <erase_op+0x52>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    2456:	68a3      	ldr	r3, [r4, #8]
    2458:	2b00      	cmp	r3, #0
    245a:	d1ef      	bne.n	243c <erase_op+0x24>

	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    245c:	68a0      	ldr	r0, [r4, #8]
    245e:	3000      	adds	r0, #0
    2460:	bf18      	it	ne
    2462:	2001      	movne	r0, #1
}
    2464:	4240      	negs	r0, r0
    2466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    246a:	f01f fb9c 	bl	21ba6 <ticker_ticks_now_get>
    246e:	4629      	mov	r1, r5
    2470:	f01f fb9b 	bl	21baa <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    2474:	fbb0 f6f7 	udiv	r6, r0, r7
    2478:	4406      	add	r6, r0
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    247a:	6960      	ldr	r0, [r4, #20]
    247c:	4642      	mov	r2, r8
    247e:	464b      	mov	r3, r9
    2480:	fba0 010b 	umull	r0, r1, r0, fp
    2484:	f7fd fe2c 	bl	e0 <__aeabi_uldivmod>
    2488:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    248c:	4286      	cmp	r6, r0
    248e:	d9e2      	bls.n	2456 <erase_op+0x3e>
    2490:	e7e4      	b.n	245c <erase_op+0x44>
    2492:	bf00      	nop
    2494:	f3af 8000 	nop.w
    2498:	1afd498d 	.word	0x1afd498d
    249c:	00000007 	.word	0x00000007
    24a0:	3b9aca00 	.word	0x3b9aca00
    24a4:	00000000 	.word	0x00000000

000024a8 <work_in_time_slice>:
{
    24a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24ac:	b08f      	sub	sp, #60	; 0x3c
	struct flash_context *context = p_flash_op_desc->context;
    24ae:	f8d0 a004 	ldr.w	sl, [r0, #4]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    24b2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 258c <work_in_time_slice+0xe4>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    24b6:	f10d 0137 	add.w	r1, sp, #55	; 0x37
{
    24ba:	4680      	mov	r8, r0
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    24bc:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    24c0:	f01f fc11 	bl	21ce6 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    24c4:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    24c8:	930a      	str	r3, [sp, #40]	; 0x28
    24ca:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    24ce:	930b      	str	r3, [sp, #44]	; 0x2c
    24d0:	f01f fb69 	bl	21ba6 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(context->interval),
    24d4:	f8da 4010 	ldr.w	r4, [sl, #16]
    24d8:	fba4 4509 	umull	r4, r5, r4, r9
    24dc:	a326      	add	r3, pc, #152	; (adr r3, 2578 <work_in_time_slice+0xd0>)
    24de:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    24e2:	2700      	movs	r7, #0
    24e4:	4683      	mov	fp, r0
			   HAL_TICKER_US_TO_TICKS(context->interval),
    24e6:	4629      	mov	r1, r5
    24e8:	4620      	mov	r0, r4
    24ea:	f7fd fdf9 	bl	e0 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    24ee:	e9cd 7707 	strd	r7, r7, [sp, #28]
    24f2:	4b23      	ldr	r3, [pc, #140]	; (2580 <work_in_time_slice+0xd8>)
    24f4:	9305      	str	r3, [sp, #20]
    24f6:	f8cd 8018 	str.w	r8, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    24fa:	4606      	mov	r6, r0
			   HAL_TICKER_US_TO_TICKS(context->slot),
    24fc:	f8da 0014 	ldr.w	r0, [sl, #20]
    2500:	a31d      	add	r3, pc, #116	; (adr r3, 2578 <work_in_time_slice+0xd0>)
    2502:	e9d3 2300 	ldrd	r2, r3, [r3]
    2506:	fba0 0109 	umull	r0, r1, r0, r9
    250a:	f7fd fde9 	bl	e0 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(context->interval),
    250e:	4b1d      	ldr	r3, [pc, #116]	; (2584 <work_in_time_slice+0xdc>)
    2510:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    2514:	fba6 9a03 	umull	r9, sl, r6, r3
	err = ticker_start(instance_index,
    2518:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(context->interval),
    251c:	2307      	movs	r3, #7
	err = ticker_start(instance_index,
    251e:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(context->interval),
    2522:	fb03 aa06 	mla	sl, r3, r6, sl
    2526:	ebb4 0009 	subs.w	r0, r4, r9
    252a:	eb65 010a 	sbc.w	r1, r5, sl
    252e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2532:	2300      	movs	r3, #0
    2534:	f7fd fdd4 	bl	e0 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2538:	465b      	mov	r3, fp
    253a:	e9cd 6001 	strd	r6, r0, [sp, #4]
    253e:	9700      	str	r7, [sp, #0]
    2540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2542:	980a      	ldr	r0, [sp, #40]	; 0x28
    2544:	2103      	movs	r1, #3
    2546:	f00c ffa1 	bl	f48c <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    254a:	f030 0302 	bics.w	r3, r0, #2
    254e:	d10a      	bne.n	2566 <work_in_time_slice+0xbe>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2550:	f645 11b3 	movw	r1, #22963	; 0x59b3
    2554:	480c      	ldr	r0, [pc, #48]	; (2588 <work_in_time_slice+0xe0>)
    2556:	f01a f9db 	bl	1c910 <z_impl_k_sem_take>
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    255a:	b938      	cbnz	r0, 256c <work_in_time_slice+0xc4>
		result = p_flash_op_desc->result;
    255c:	f8d8 0008 	ldr.w	r0, [r8, #8]
}
    2560:	b00f      	add	sp, #60	; 0x3c
    2562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = -ECANCELED;
    2566:	f06f 0047 	mvn.w	r0, #71	; 0x47
    256a:	e7f9      	b.n	2560 <work_in_time_slice+0xb8>
		result = -ETIMEDOUT;
    256c:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	return result;
    2570:	e7f6      	b.n	2560 <work_in_time_slice+0xb8>
    2572:	bf00      	nop
    2574:	f3af 8000 	nop.w
    2578:	1afd498d 	.word	0x1afd498d
    257c:	00000007 	.word	0x00000007
    2580:	00017f61 	.word	0x00017f61
    2584:	1afd498d 	.word	0x1afd498d
    2588:	200018d0 	.word	0x200018d0
    258c:	3b9aca00 	.word	0x3b9aca00

00002590 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
    2590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 1U;

	if (w_ctx->enable_time_limit) {
    2594:	7b06      	ldrb	r6, [r0, #12]
{
    2596:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
    2598:	b116      	cbz	r6, 25a0 <write_op+0x10>
		ticks_begin = ticker_ticks_now_get();
    259a:	f01f fb04 	bl	21ba6 <ticker_ticks_now_get>
    259e:	4606      	mov	r6, r0
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    25a0:	6860      	ldr	r0, [r4, #4]
    25a2:	f010 0503 	ands.w	r5, r0, #3
    25a6:	d067      	beq.n	2678 <write_op+0xe8>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    25a8:	68a3      	ldr	r3, [r4, #8]
		if (count > w_ctx->len) {
			count = w_ctx->len;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    25aa:	6821      	ldr	r1, [r4, #0]
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    25ac:	f1c5 0504 	rsb	r5, r5, #4
		if (count > w_ctx->len) {
    25b0:	429d      	cmp	r5, r3
    25b2:	bf28      	it	cs
    25b4:	461d      	movcs	r5, r3
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    25b6:	462a      	mov	r2, r5
    25b8:	f016 f8b6 	bl	18728 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
    25bc:	6863      	ldr	r3, [r4, #4]
    25be:	442b      	add	r3, r5
    25c0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    25c2:	6823      	ldr	r3, [r4, #0]
    25c4:	442b      	add	r3, r5
    25c6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    25c8:	68a3      	ldr	r3, [r4, #8]
    25ca:	1b5d      	subs	r5, r3, r5
				      count);

		shift_write_context(count, w_ctx);

#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		if (w_ctx->enable_time_limit) {
    25cc:	7b23      	ldrb	r3, [r4, #12]
	w_ctx->len -= shift;
    25ce:	60a5      	str	r5, [r4, #8]
		if (w_ctx->enable_time_limit) {
    25d0:	2b00      	cmp	r3, #0
    25d2:	d051      	beq.n	2678 <write_op+0xe8>
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    25d4:	f01f fae7 	bl	21ba6 <ticker_ticks_now_get>
    25d8:	4631      	mov	r1, r6
    25da:	f01f fae6 	bl	21baa <ticker_ticks_diff_get>
						      ticks_begin);
			if (ticks_diff * 2U >
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    25de:	492c      	ldr	r1, [pc, #176]	; (2690 <write_op+0x100>)
			if (ticks_diff * 2U >
    25e0:	0045      	lsls	r5, r0, #1
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    25e2:	6960      	ldr	r0, [r4, #20]
    25e4:	a328      	add	r3, pc, #160	; (adr r3, 2688 <write_op+0xf8>)
    25e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    25ea:	fba0 0101 	umull	r0, r1, r0, r1
    25ee:	f7fd fd77 	bl	e0 <__aeabi_uldivmod>
    25f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff * 2U >
    25f6:	4285      	cmp	r5, r0
    25f8:	d93e      	bls.n	2678 <write_op+0xe8>
				nvmc_wait_ready();
    25fa:	f015 fca1 	bl	17f40 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
    25fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	nvmc_wait_ready();

	return FLASH_OP_DONE;
}
    2602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
    2606:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    2608:	6860      	ldr	r0, [r4, #4]
    260a:	6819      	ldr	r1, [r3, #0]
    260c:	f016 f87e 	bl	1870c <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
    2610:	6863      	ldr	r3, [r4, #4]
    2612:	3304      	adds	r3, #4
    2614:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    2616:	6823      	ldr	r3, [r4, #0]
    2618:	3304      	adds	r3, #4
    261a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    261c:	68a3      	ldr	r3, [r4, #8]
    261e:	3b04      	subs	r3, #4
    2620:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
    2622:	7b23      	ldrb	r3, [r4, #12]
		i++;
    2624:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
    2626:	b193      	cbz	r3, 264e <write_op+0xbe>
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    2628:	f01f fabd 	bl	21ba6 <ticker_ticks_now_get>
    262c:	4631      	mov	r1, r6
    262e:	f01f fabc 	bl	21baa <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    2632:	fbb0 f7f5 	udiv	r7, r0, r5
    2636:	4407      	add	r7, r0
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2638:	6960      	ldr	r0, [r4, #20]
    263a:	4642      	mov	r2, r8
    263c:	464b      	mov	r3, r9
    263e:	fba0 010a 	umull	r0, r1, r0, sl
    2642:	f7fd fd4d 	bl	e0 <__aeabi_uldivmod>
    2646:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    264a:	4287      	cmp	r7, r0
    264c:	d8d5      	bhi.n	25fa <write_op+0x6a>
	while (w_ctx->len >= sizeof(u32_t)) {
    264e:	68a2      	ldr	r2, [r4, #8]
    2650:	2a03      	cmp	r2, #3
    2652:	d8d8      	bhi.n	2606 <write_op+0x76>
	if (w_ctx->len) {
    2654:	b162      	cbz	r2, 2670 <write_op+0xe0>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    2656:	e9d4 1000 	ldrd	r1, r0, [r4]
    265a:	f016 f865 	bl	18728 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
    265e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
	w_ctx->data_addr += shift;
    2662:	6823      	ldr	r3, [r4, #0]
    2664:	440b      	add	r3, r1
	w_ctx->flash_addr += shift;
    2666:	440a      	add	r2, r1
	w_ctx->data_addr += shift;
    2668:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    266a:	2300      	movs	r3, #0
	w_ctx->flash_addr += shift;
    266c:	6062      	str	r2, [r4, #4]
	w_ctx->len -= shift;
    266e:	60a3      	str	r3, [r4, #8]
	nvmc_wait_ready();
    2670:	f015 fc66 	bl	17f40 <nvmc_wait_ready>
	return FLASH_OP_DONE;
    2674:	2000      	movs	r0, #0
    2676:	e7c4      	b.n	2602 <write_op+0x72>
	u32_t ticks_begin = 0U;
    2678:	2501      	movs	r5, #1
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    267a:	f8df a014 	ldr.w	sl, [pc, #20]	; 2690 <write_op+0x100>
    267e:	f20f 0908 	addw	r9, pc, #8
    2682:	e9d9 8900 	ldrd	r8, r9, [r9]
    2686:	e7e2      	b.n	264e <write_op+0xbe>
    2688:	1afd498d 	.word	0x1afd498d
    268c:	00000007 	.word	0x00000007
    2690:	3b9aca00 	.word	0x3b9aca00

00002694 <cts_sync_service_discovered>:
    return BT_GATT_ITER_CONTINUE;
}

u8_t cts_sync_service_discovered(struct bt_conn* conn, const struct bt_gatt_attr* attr,
        struct bt_gatt_discover_params* params)
{
    2694:	b570      	push	{r4, r5, r6, lr}
    2696:	4606      	mov	r6, r0
    if (!attr) {
    2698:	460d      	mov	r5, r1
    269a:	b921      	cbnz	r1, 26a6 <cts_sync_service_discovered+0x12>
        printk("CTS Service Discovery completed");
    269c:	4811      	ldr	r0, [pc, #68]	; (26e4 <cts_sync_service_discovered+0x50>)
    read_params.by_uuid.uuid = &uuid;
    read_params.by_uuid.start_handle = attr->handle;
    read_params.by_uuid.end_handle = 0xffff;
    offset = 0;
    if (bt_gatt_read(conn, &read_params) < 0) {
        printk("Could not initiate read of CCC data.");
    269e:	f01b f88a 	bl	1d7b6 <printk>
    }

    return BT_GATT_ITER_STOP;
}
    26a2:	2000      	movs	r0, #0
    26a4:	bd70      	pop	{r4, r5, r6, pc}
    memset(&read_params, 0, sizeof(read_params));
    26a6:	4c10      	ldr	r4, [pc, #64]	; (26e8 <cts_sync_service_discovered+0x54>)
    printk("Discovered attribute, handle: %u\n", attr->handle);
    26a8:	8a09      	ldrh	r1, [r1, #16]
    26aa:	4810      	ldr	r0, [pc, #64]	; (26ec <cts_sync_service_discovered+0x58>)
    26ac:	f01b f883 	bl	1d7b6 <printk>
    memset(&read_params, 0, sizeof(read_params));
    26b0:	2210      	movs	r2, #16
    26b2:	2100      	movs	r1, #0
    26b4:	4620      	mov	r0, r4
    26b6:	f01c ffc9 	bl	1f64c <memset>
    read_params.func = cts_sync_read;
    26ba:	4b0d      	ldr	r3, [pc, #52]	; (26f0 <cts_sync_service_discovered+0x5c>)
    26bc:	6023      	str	r3, [r4, #0]
    read_params.by_uuid.uuid = &uuid;
    26be:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <cts_sync_service_discovered+0x60>)
    26c0:	60e3      	str	r3, [r4, #12]
    read_params.by_uuid.start_handle = attr->handle;
    26c2:	8a2b      	ldrh	r3, [r5, #16]
    26c4:	8123      	strh	r3, [r4, #8]
    read_params.by_uuid.end_handle = 0xffff;
    26c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    26ca:	8163      	strh	r3, [r4, #10]
    offset = 0;
    26cc:	4b0a      	ldr	r3, [pc, #40]	; (26f8 <cts_sync_service_discovered+0x64>)
    26ce:	2200      	movs	r2, #0
    if (bt_gatt_read(conn, &read_params) < 0) {
    26d0:	4621      	mov	r1, r4
    26d2:	4630      	mov	r0, r6
    offset = 0;
    26d4:	601a      	str	r2, [r3, #0]
    if (bt_gatt_read(conn, &read_params) < 0) {
    26d6:	f009 ff97 	bl	c608 <bt_gatt_read>
    26da:	2800      	cmp	r0, #0
    26dc:	dae1      	bge.n	26a2 <cts_sync_service_discovered+0xe>
        printk("Could not initiate read of CCC data.");
    26de:	4807      	ldr	r0, [pc, #28]	; (26fc <cts_sync_service_discovered+0x68>)
    26e0:	e7dd      	b.n	269e <cts_sync_service_discovered+0xa>
    26e2:	bf00      	nop
    26e4:	00026ba5 	.word	0x00026ba5
    26e8:	20000030 	.word	0x20000030
    26ec:	00026bc5 	.word	0x00026bc5
    26f0:	00002759 	.word	0x00002759
    26f4:	2000602a 	.word	0x2000602a
    26f8:	2000002c 	.word	0x2000002c
    26fc:	00026be7 	.word	0x00026be7

00002700 <cts_sync_processor>:
 //#define BT_UUID_CTS                       BT_UUID_DECLARE_16(0x1805)
 //#define BT_UUID_CTS_CURRENT_TIME          BT_UUID_DECLARE_16(0x2a2b)


static void cts_sync_processor(struct bt_conn *conn, void *data)
{
    2700:	b537      	push	{r0, r1, r2, r4, r5, lr}
    memcpy(&uuid, BT_UUID_CTS_CURRENT_TIME, sizeof(uuid));
    2702:	4c11      	ldr	r4, [pc, #68]	; (2748 <cts_sync_processor+0x48>)
    2704:	2300      	movs	r3, #0
    2706:	2204      	movs	r2, #4
{
    2708:	4605      	mov	r5, r0
    memcpy(&uuid, BT_UUID_CTS_CURRENT_TIME, sizeof(uuid));
    270a:	f88d 3004 	strb.w	r3, [sp, #4]
    270e:	eb0d 0102 	add.w	r1, sp, r2
    2712:	f642 232b 	movw	r3, #10795	; 0x2a2b
    2716:	4620      	mov	r0, r4
    2718:	f8ad 3006 	strh.w	r3, [sp, #6]
    271c:	f01c ff6c 	bl	1f5f8 <memcpy>
    cts_discovery_params.func = cts_sync_service_discovered;
    2720:	490a      	ldr	r1, [pc, #40]	; (274c <cts_sync_processor+0x4c>)
    2722:	4b0b      	ldr	r3, [pc, #44]	; (2750 <cts_sync_processor+0x50>)
    2724:	604b      	str	r3, [r1, #4]
    cts_discovery_params.start_handle = 0x0001;
    2726:	2301      	movs	r3, #1
    2728:	810b      	strh	r3, [r1, #8]
    cts_discovery_params.end_handle = 0xFFFF;
    272a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    272e:	81cb      	strh	r3, [r1, #14]
    cts_discovery_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
    cts_discovery_params.uuid = &uuid;

    if (bt_gatt_discover(conn, &cts_discovery_params) != 0) {
    2730:	4628      	mov	r0, r5
    cts_discovery_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
    2732:	2303      	movs	r3, #3
    2734:	740b      	strb	r3, [r1, #16]
    cts_discovery_params.uuid = &uuid;
    2736:	600c      	str	r4, [r1, #0]
    if (bt_gatt_discover(conn, &cts_discovery_params) != 0) {
    2738:	f009 fbb0 	bl	be9c <bt_gatt_discover>
    273c:	b110      	cbz	r0, 2744 <cts_sync_processor+0x44>
        printk("CTS Sync > GATT discovery FAILED.\n");
    273e:	4805      	ldr	r0, [pc, #20]	; (2754 <cts_sync_processor+0x54>)
    2740:	f01b f839 	bl	1d7b6 <printk>
    }
}
    2744:	b003      	add	sp, #12
    2746:	bd30      	pop	{r4, r5, pc}
    2748:	2000602a 	.word	0x2000602a
    274c:	20000018 	.word	0x20000018
    2750:	00002695 	.word	0x00002695
    2754:	00026b02 	.word	0x00026b02

00002758 <cts_sync_read>:
{
    2758:	b5f0      	push	{r4, r5, r6, r7, lr}
    275a:	b087      	sub	sp, #28
    printk("Reading CCC data: err %d, %d bytes, offset %d.", err, length, offset);
    275c:	4d1e      	ldr	r5, [pc, #120]	; (27d8 <cts_sync_read+0x80>)
{
    275e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
    printk("Reading CCC data: err %d, %d bytes, offset %d.", err, length, offset);
    2762:	481e      	ldr	r0, [pc, #120]	; (27dc <cts_sync_read+0x84>)
    2764:	4c1e      	ldr	r4, [pc, #120]	; (27e0 <cts_sync_read+0x88>)
{
    2766:	461f      	mov	r7, r3
    printk("Reading CCC data: err %d, %d bytes, offset %d.", err, length, offset);
    2768:	4632      	mov	r2, r6
    276a:	682b      	ldr	r3, [r5, #0]
    276c:	f01b f823 	bl	1d7b6 <printk>
    if (!data || length <= 0) {
    2770:	b107      	cbz	r7, 2774 <cts_sync_read+0x1c>
    2772:	bb1e      	cbnz	r6, 27bc <cts_sync_read+0x64>
    printk("CTS sync to clock started.\n Y%04d D%03d T%2d:%2d:%2d",
    2774:	79a3      	ldrb	r3, [r4, #6]
    2776:	9301      	str	r3, [sp, #4]
    2778:	7963      	ldrb	r3, [r4, #5]
    277a:	9300      	str	r3, [sp, #0]
    277c:	78e2      	ldrb	r2, [r4, #3]
    277e:	7923      	ldrb	r3, [r4, #4]
    2780:	8821      	ldrh	r1, [r4, #0]
    2782:	4818      	ldr	r0, [pc, #96]	; (27e4 <cts_sync_read+0x8c>)
    2784:	f01b f817 	bl	1d7b6 <printk>
    memset(&clock_datetime, 0, sizeof(cts_datetime_t));
    2788:	220a      	movs	r2, #10
    278a:	2100      	movs	r1, #0
    278c:	a803      	add	r0, sp, #12
    278e:	f01c ff5d 	bl	1f64c <memset>
    clock_datetime.year = cts_datetime->year;
    2792:	8822      	ldrh	r2, [r4, #0]
    2794:	f8ad 200c 	strh.w	r2, [sp, #12]
    clock_datetime.month = cts_datetime->month;
    2798:	8862      	ldrh	r2, [r4, #2]
    clock_datetime.seconds = cts_datetime->seconds;
    279a:	79a3      	ldrb	r3, [r4, #6]
    clock_datetime.month = cts_datetime->month;
    279c:	f8ad 200e 	strh.w	r2, [sp, #14]
    printk("CTS sync to clock complete.");
    27a0:	4811      	ldr	r0, [pc, #68]	; (27e8 <cts_sync_read+0x90>)
    clock_datetime.hours = cts_datetime->hours;
    27a2:	88a2      	ldrh	r2, [r4, #4]
    27a4:	f8ad 2010 	strh.w	r2, [sp, #16]
    clock_datetime.seconds = cts_datetime->seconds;
    27a8:	f88d 3012 	strb.w	r3, [sp, #18]
    printk("CTS sync to clock complete.");
    27ac:	f01b f803 	bl	1d7b6 <printk>
    time_sync_timeout = TIME_SYNC_WAIT;
    27b0:	4b0e      	ldr	r3, [pc, #56]	; (27ec <cts_sync_read+0x94>)
    27b2:	223c      	movs	r2, #60	; 0x3c
    27b4:	601a      	str	r2, [r3, #0]
        return BT_GATT_ITER_STOP;
    27b6:	2000      	movs	r0, #0
}
    27b8:	b007      	add	sp, #28
    27ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy(&datetime_buf + offset, data, length);
    27bc:	682b      	ldr	r3, [r5, #0]
    27be:	200a      	movs	r0, #10
    27c0:	4632      	mov	r2, r6
    27c2:	fb00 4003 	mla	r0, r0, r3, r4
    27c6:	4639      	mov	r1, r7
    27c8:	f01c ff16 	bl	1f5f8 <memcpy>
    offset += length;
    27cc:	682b      	ldr	r3, [r5, #0]
    27ce:	441e      	add	r6, r3
    27d0:	602e      	str	r6, [r5, #0]
    return BT_GATT_ITER_CONTINUE;
    27d2:	2001      	movs	r0, #1
    27d4:	e7f0      	b.n	27b8 <cts_sync_read+0x60>
    27d6:	bf00      	nop
    27d8:	2000002c 	.word	0x2000002c
    27dc:	00026b25 	.word	0x00026b25
    27e0:	20006020 	.word	0x20006020
    27e4:	00026b54 	.word	0x00026b54
    27e8:	00026b89 	.word	0x00026b89
    27ec:	2000de94 	.word	0x2000de94

000027f0 <cts_sync_init>:
	.disconnected = disconnected,
};

void cts_sync_init()
{
    bt_conn_cb_register(&conn_callbacks);
    27f0:	4801      	ldr	r0, [pc, #4]	; (27f8 <cts_sync_init+0x8>)
    27f2:	f006 bb8d 	b.w	8f10 <bt_conn_cb_register>
    27f6:	bf00      	nop
    27f8:	2000de78 	.word	0x2000de78

000027fc <cts_sync_loop>:
 //   cts_register_write_cb(cts_write_cb);
 //  sync_local_cts_to_clock();
}

void cts_sync_loop()
{
    27fc:	b510      	push	{r4, lr}
    if (time_sync_timeout > 0) {
    27fe:	4c07      	ldr	r4, [pc, #28]	; (281c <cts_sync_loop+0x20>)
    2800:	6823      	ldr	r3, [r4, #0]
    2802:	2b00      	cmp	r3, #0
    2804:	dd02      	ble.n	280c <cts_sync_loop+0x10>
        time_sync_timeout--;
    2806:	3b01      	subs	r3, #1
    } else {
        bt_conn_foreach(BT_CONN_TYPE_ALL, cts_sync_processor, NULL);
        time_sync_timeout = TIME_SYNC_WAIT;
    2808:	6023      	str	r3, [r4, #0]
    }
}
    280a:	bd10      	pop	{r4, pc}
        bt_conn_foreach(BT_CONN_TYPE_ALL, cts_sync_processor, NULL);
    280c:	2200      	movs	r2, #0
    280e:	4904      	ldr	r1, [pc, #16]	; (2820 <cts_sync_loop+0x24>)
    2810:	2007      	movs	r0, #7
    2812:	f006 fe4d 	bl	94b0 <bt_conn_foreach>
        time_sync_timeout = TIME_SYNC_WAIT;
    2816:	233c      	movs	r3, #60	; 0x3c
    2818:	e7f6      	b.n	2808 <cts_sync_loop+0xc>
    281a:	bf00      	nop
    281c:	2000de94 	.word	0x2000de94
    2820:	00002701 	.word	0x00002701

00002824 <test_counter_interrupt_fn>:


static void test_counter_interrupt_fn(struct device *counter_dev,
		u8_t chan_id, u32_t ticks,
		void *user_data)
{
    2824:	b538      	push	{r3, r4, r5, lr}
	int err;
	//todo replace this with proper internal time system, that keeps track of date
	pinetime_datetime.seconds++;
    2826:	4915      	ldr	r1, [pc, #84]	; (287c <test_counter_interrupt_fn+0x58>)
    2828:	798c      	ldrb	r4, [r1, #6]
    282a:	3401      	adds	r4, #1
    282c:	b2e4      	uxtb	r4, r4
	if (pinetime_datetime.seconds > 59) {
    282e:	2c3b      	cmp	r4, #59	; 0x3b
    2830:	d80a      	bhi.n	2848 <test_counter_interrupt_fn+0x24>
	pinetime_datetime.seconds++;
    2832:	718c      	strb	r4, [r1, #6]
 *
 * @return Number of alarm channels.
 */
static inline u8_t counter_get_num_of_channels(const struct device *dev)
{
	const struct counter_config_info *config =
    2834:	e9d0 1200 	ldrd	r1, r2, [r0]
			(struct counter_config_info *)dev->config->config_info;

	return config->channels;
    2838:	6889      	ldr	r1, [r1, #8]
				      const struct counter_alarm_cfg *alarm_cfg)
{
	const struct counter_driver_api *api =
				(struct counter_driver_api *)dev->driver_api;

	if (chan_id >= counter_get_num_of_channels(dev)) {
    283a:	7a49      	ldrb	r1, [r1, #9]
    283c:	b9b1      	cbnz	r1, 286c <test_counter_interrupt_fn+0x48>
	// after expiring the alarm is set again
	err = counter_set_channel_alarm(counter_dev, ALARM_CHANNEL_ID,
			user_data);

	if (err != 0) {
		printk("Alarm could not be set\n");
    283e:	4810      	ldr	r0, [pc, #64]	; (2880 <test_counter_interrupt_fn+0x5c>)
	}
}
    2840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Alarm could not be set\n");
    2844:	f01a bfb7 	b.w	1d7b6 <printk>
		pinetime_datetime.minutes++;
    2848:	794c      	ldrb	r4, [r1, #5]
    284a:	3401      	adds	r4, #1
    284c:	b2e4      	uxtb	r4, r4
		pinetime_datetime.seconds=0;
    284e:	2500      	movs	r5, #0
		if (pinetime_datetime.minutes > 59){
    2850:	2c3b      	cmp	r4, #59	; 0x3b
		pinetime_datetime.seconds=0;
    2852:	718d      	strb	r5, [r1, #6]
		if (pinetime_datetime.minutes > 59){
    2854:	d801      	bhi.n	285a <test_counter_interrupt_fn+0x36>
		pinetime_datetime.minutes++;
    2856:	714c      	strb	r4, [r1, #5]
    2858:	e7ec      	b.n	2834 <test_counter_interrupt_fn+0x10>
			pinetime_datetime.hours++;
    285a:	790c      	ldrb	r4, [r1, #4]
			pinetime_datetime.minutes=0;
    285c:	714d      	strb	r5, [r1, #5]
			pinetime_datetime.hours++;
    285e:	3401      	adds	r4, #1
    2860:	b2e4      	uxtb	r4, r4
			if (pinetime_datetime.hours > 23)
    2862:	2c17      	cmp	r4, #23
			pinetime_datetime.hours++;
    2864:	bf94      	ite	ls
    2866:	710c      	strbls	r4, [r1, #4]
				pinetime_datetime.hours=0;
    2868:	710d      	strbhi	r5, [r1, #4]
    286a:	e7e3      	b.n	2834 <test_counter_interrupt_fn+0x10>
		return -ENOTSUP;
	}

	return api->set_alarm(dev, chan_id, alarm_cfg);
    286c:	68d4      	ldr	r4, [r2, #12]
    286e:	2100      	movs	r1, #0
    2870:	461a      	mov	r2, r3
    2872:	47a0      	blx	r4
	if (err != 0) {
    2874:	2800      	cmp	r0, #0
    2876:	d1e2      	bne.n	283e <test_counter_interrupt_fn+0x1a>
}
    2878:	bd38      	pop	{r3, r4, r5, pc}
    287a:	bf00      	nop
    287c:	2000602e 	.word	0x2000602e
    2880:	00026cf9 	.word	0x00026cf9

00002884 <init_clock>:
	pinetime_datetime.hours=datetime->hours;
    2884:	4b06      	ldr	r3, [pc, #24]	; (28a0 <init_clock+0x1c>)
    2886:	7902      	ldrb	r2, [r0, #4]
    2888:	711a      	strb	r2, [r3, #4]
	pinetime_datetime.minutes=datetime->minutes;
    288a:	7942      	ldrb	r2, [r0, #5]
    288c:	715a      	strb	r2, [r3, #5]
	pinetime_datetime.seconds=datetime->seconds;
    288e:	7982      	ldrb	r2, [r0, #6]
    2890:	719a      	strb	r2, [r3, #6]
	pinetime_datetime.day=datetime->day;
    2892:	78c2      	ldrb	r2, [r0, #3]
    2894:	70da      	strb	r2, [r3, #3]
	pinetime_datetime.month=datetime->month;
    2896:	7882      	ldrb	r2, [r0, #2]
    2898:	709a      	strb	r2, [r3, #2]
	pinetime_datetime.year=datetime->year;
    289a:	8802      	ldrh	r2, [r0, #0]
    289c:	801a      	strh	r2, [r3, #0]
}
    289e:	4770      	bx	lr
    28a0:	2000602e 	.word	0x2000602e

000028a4 <main>:
}



void main(void)
{
    28a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;
	struct device *counter_dev;

	err = bt_enable(NULL);
    28a8:	2000      	movs	r0, #0
{
    28aa:	b08d      	sub	sp, #52	; 0x34
	err = bt_enable(NULL);
    28ac:	f005 fb48 	bl	7f40 <bt_enable>
	if (err) {
    28b0:	4604      	mov	r4, r0
    28b2:	b130      	cbz	r0, 28c2 <main+0x1e>
		printk("Bluetooth init failed (err %d)\n", err);
    28b4:	4601      	mov	r1, r0
    28b6:	486d      	ldr	r0, [pc, #436]	; (2a6c <main+0x1c8>)
    28b8:	f01a ff7d 	bl	1d7b6 <printk>
		lv_task_handler();
		k_sleep(K_MSEC(10));
		++count;
		cts_sync_loop();  //todo this should be activated by button or something - not looped
	}
}
    28bc:	b00d      	add	sp, #52	; 0x34
    28be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	printk("Bluetooth initialized\n");
    28c2:	486b      	ldr	r0, [pc, #428]	; (2a70 <main+0x1cc>)
    28c4:	f01a ff77 	bl	1d7b6 <printk>
		settings_load();
    28c8:	f01c faef 	bl	1eeaa <settings_load>
	printk("bt_le_adv_start\n");
    28cc:	4869      	ldr	r0, [pc, #420]	; (2a74 <main+0x1d0>)
    28ce:	f01a ff72 	bl	1d7b6 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    28d2:	2309      	movs	r3, #9
    28d4:	f8ad 4010 	strh.w	r4, [sp, #16]
    28d8:	f88d 3011 	strb.w	r3, [sp, #17]
    28dc:	23a0      	movs	r3, #160	; 0xa0
    28de:	f8ad 3012 	strh.w	r3, [sp, #18]
    28e2:	23f0      	movs	r3, #240	; 0xf0
    28e4:	f8ad 3014 	strh.w	r3, [sp, #20]
    28e8:	4963      	ldr	r1, [pc, #396]	; (2a78 <main+0x1d4>)
    28ea:	9400      	str	r4, [sp, #0]
    28ec:	4623      	mov	r3, r4
    28ee:	2203      	movs	r2, #3
    28f0:	a804      	add	r0, sp, #16
    28f2:	f01d faa1 	bl	1fe38 <bt_le_adv_start>
	if (err) {
    28f6:	4601      	mov	r1, r0
    28f8:	2800      	cmp	r0, #0
    28fa:	d042      	beq.n	2982 <main+0xde>
		printk("Advertising failed to start (err %d)\n", err);
    28fc:	485f      	ldr	r0, [pc, #380]	; (2a7c <main+0x1d8>)
    28fe:	f01a ff5a 	bl	1d7b6 <printk>
	cts_sync_init();
    2902:	f7ff ff75 	bl	27f0 <cts_sync_init>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2906:	485e      	ldr	r0, [pc, #376]	; (2a80 <main+0x1dc>)
    2908:	f019 f926 	bl	1bb58 <z_impl_device_get_binding>
    290c:	4605      	mov	r5, r0
	return api->start(dev);
    290e:	6843      	ldr	r3, [r0, #4]
	alarm_cfg.flags = 0;
    2910:	4c5c      	ldr	r4, [pc, #368]	; (2a84 <main+0x1e0>)
    2912:	681b      	ldr	r3, [r3, #0]
    2914:	4798      	blx	r3
	const struct counter_config_info *config =
    2916:	682b      	ldr	r3, [r5, #0]
	u64_t ticks = (us * config->freq) / USEC_PER_SEC;
    2918:	495b      	ldr	r1, [pc, #364]	; (2a88 <main+0x1e4>)
    291a:	689b      	ldr	r3, [r3, #8]
    291c:	4a5a      	ldr	r2, [pc, #360]	; (2a88 <main+0x1e4>)
    291e:	6858      	ldr	r0, [r3, #4]
    2920:	2600      	movs	r6, #0
    2922:	2300      	movs	r3, #0
    2924:	60e6      	str	r6, [r4, #12]
    2926:	fba0 0101 	umull	r0, r1, r0, r1
    292a:	f7fd fbd9 	bl	e0 <__aeabi_uldivmod>
	alarm_cfg.callback = test_counter_interrupt_fn;
    292e:	4b57      	ldr	r3, [pc, #348]	; (2a8c <main+0x1e8>)
	alarm_cfg.user_data = &alarm_cfg;
    2930:	60a4      	str	r4, [r4, #8]
	alarm_cfg.callback = test_counter_interrupt_fn;
    2932:	6023      	str	r3, [r4, #0]
	const struct counter_config_info *config =
    2934:	682b      	ldr	r3, [r5, #0]
	return (ticks > (u64_t)UINT32_MAX) ? UINT32_MAX : ticks;
    2936:	6060      	str	r0, [r4, #4]
	return config->channels;
    2938:	689b      	ldr	r3, [r3, #8]
	if (chan_id >= counter_get_num_of_channels(dev)) {
    293a:	7a5b      	ldrb	r3, [r3, #9]
    293c:	b12b      	cbz	r3, 294a <main+0xa6>
	return api->set_alarm(dev, chan_id, alarm_cfg);
    293e:	686b      	ldr	r3, [r5, #4]
    2940:	4622      	mov	r2, r4
    2942:	68db      	ldr	r3, [r3, #12]
    2944:	4631      	mov	r1, r6
    2946:	4628      	mov	r0, r5
    2948:	4798      	blx	r3
	char count_str[11] = {0};
    294a:	2400      	movs	r4, #0
	init_clock(&localtime);
    294c:	a806      	add	r0, sp, #24
    294e:	f7ff ff99 	bl	2884 <init_clock>
	char count_str[11] = {0};
    2952:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    2956:	f8cd 402b 	str.w	r4, [sp, #43]	; 0x2b
    295a:	484d      	ldr	r0, [pc, #308]	; (2a90 <main+0x1ec>)
    295c:	f019 f8fc 	bl	1bb58 <z_impl_device_get_binding>
	if (display_dev == NULL) {
    2960:	4606      	mov	r6, r0
    2962:	b990      	cbnz	r0, 298a <main+0xe6>
		LOG_ERR("device not found.  Aborting test.");
    2964:	2301      	movs	r3, #1
    2966:	f04f 0100 	mov.w	r1, #0
    296a:	f363 0107 	bfi	r1, r3, #0, #8
    296e:	4a49      	ldr	r2, [pc, #292]	; (2a94 <main+0x1f0>)
    2970:	4b49      	ldr	r3, [pc, #292]	; (2a98 <main+0x1f4>)
    2972:	484a      	ldr	r0, [pc, #296]	; (2a9c <main+0x1f8>)
    2974:	1a9b      	subs	r3, r3, r2
    2976:	08db      	lsrs	r3, r3, #3
    2978:	f363 118f 	bfi	r1, r3, #6, #10
    297c:	f01c f86a 	bl	1ea54 <log_0>
		return;
    2980:	e79c      	b.n	28bc <main+0x18>
	printk("Advertising successfully started\n");
    2982:	4847      	ldr	r0, [pc, #284]	; (2aa0 <main+0x1fc>)
    2984:	f01a ff17 	bl	1d7b6 <printk>
    2988:	e7bb      	b.n	2902 <main+0x5e>
    298a:	4846      	ldr	r0, [pc, #280]	; (2aa4 <main+0x200>)
    298c:	f019 f8e4 	bl	1bb58 <z_impl_device_get_binding>
    2990:	4605      	mov	r5, r0
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    2992:	6843      	ldr	r3, [r0, #4]
    2994:	2216      	movs	r2, #22
    2996:	681f      	ldr	r7, [r3, #0]
    2998:	4621      	mov	r1, r4
    299a:	2301      	movs	r3, #1
    299c:	47b8      	blx	r7
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    299e:	686b      	ldr	r3, [r5, #4]
		sprintf(snum, "%2d:%2d:%2d", pinetime_datetime.hours, pinetime_datetime.minutes,pinetime_datetime.seconds); 
    29a0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 2ab4 <main+0x210>
    29a4:	685f      	ldr	r7, [r3, #4]
		lv_label_set_text(clock_label, "#00ffff"); 
    29a6:	f8df 9110 	ldr.w	r9, [pc, #272]	; 2ab8 <main+0x214>
    29aa:	4623      	mov	r3, r4
    29ac:	2216      	movs	r2, #22
    29ae:	4621      	mov	r1, r4
    29b0:	4628      	mov	r0, r5
    29b2:	47b8      	blx	r7
	hello_world_label = lv_label_create(lv_scr_act(), NULL);
    29b4:	f01a fb39 	bl	1d02a <lv_scr_act>
    29b8:	4621      	mov	r1, r4
    29ba:	f018 fd8d 	bl	1b4d8 <lv_label_create>
	lv_label_set_long_mode(hello_world_label, LV_LABEL_LONG_BREAK);     //Break the long lines
    29be:	2101      	movs	r1, #1
	hello_world_label = lv_label_create(lv_scr_act(), NULL);
    29c0:	4605      	mov	r5, r0
	lv_label_set_long_mode(hello_world_label, LV_LABEL_LONG_BREAK);     //Break the long lines
    29c2:	f022 fa3a 	bl	24e3a <lv_label_set_long_mode>
	lv_label_set_recolor(hello_world_label, true);                      //Enable re-coloring by commands in the text
    29c6:	4628      	mov	r0, r5
    29c8:	2101      	movs	r1, #1
    29ca:	f022 fa5d 	bl	24e88 <lv_label_set_recolor>
	lv_obj_set_width(hello_world_label, 240);
    29ce:	4628      	mov	r0, r5
    29d0:	21f0      	movs	r1, #240	; 0xf0
    29d2:	f020 fabb 	bl	22f4c <lv_obj_set_width>
	lv_label_set_text(hello_world_label, "#00ffff Open Source Watch"); //recoloring should be blue ...
    29d6:	4934      	ldr	r1, [pc, #208]	; (2aa8 <main+0x204>)
    29d8:	4628      	mov	r0, r5
    29da:	f022 f9d9 	bl	24d90 <lv_label_set_text>
	count_label = lv_label_create(lv_scr_act(), NULL);
    29de:	f01a fb24 	bl	1d02a <lv_scr_act>
    29e2:	4621      	mov	r1, r4
    29e4:	f018 fd78 	bl	1b4d8 <lv_label_create>
    29e8:	4607      	mov	r7, r0
	clock_label = lv_label_create(lv_scr_act(), NULL);
    29ea:	f01a fb1e 	bl	1d02a <lv_scr_act>
    29ee:	4621      	mov	r1, r4
    29f0:	f018 fd72 	bl	1b4d8 <lv_label_create>
	lv_obj_align(count_label, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
    29f4:	4623      	mov	r3, r4
	clock_label = lv_label_create(lv_scr_act(), NULL);
    29f6:	4605      	mov	r5, r0
	lv_obj_align(count_label, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
    29f8:	2205      	movs	r2, #5
    29fa:	4621      	mov	r1, r4
    29fc:	4638      	mov	r0, r7
    29fe:	9400      	str	r4, [sp, #0]
    2a00:	f020 faf8 	bl	22ff4 <lv_obj_align>
	lv_obj_align(clock_label, NULL, LV_ALIGN_CENTER, 0, 0);
    2a04:	4623      	mov	r3, r4
    2a06:	4622      	mov	r2, r4
    2a08:	4621      	mov	r1, r4
    2a0a:	4628      	mov	r0, r5
    2a0c:	9400      	str	r4, [sp, #0]
    2a0e:	f020 faf1 	bl	22ff4 <lv_obj_align>
static inline int display_blanking_off(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->driver_api;

	return api->blanking_off(dev);
    2a12:	6873      	ldr	r3, [r6, #4]
    2a14:	4630      	mov	r0, r6
    2a16:	685b      	ldr	r3, [r3, #4]
		sprintf(snum, "%2d:%2d:%2d", pinetime_datetime.hours, pinetime_datetime.minutes,pinetime_datetime.seconds); 
    2a18:	4e24      	ldr	r6, [pc, #144]	; (2aac <main+0x208>)
    2a1a:	4798      	blx	r3
    2a1c:	79b3      	ldrb	r3, [r6, #6]
    2a1e:	9300      	str	r3, [sp, #0]
    2a20:	7973      	ldrb	r3, [r6, #5]
    2a22:	7932      	ldrb	r2, [r6, #4]
    2a24:	4641      	mov	r1, r8
    2a26:	a803      	add	r0, sp, #12
    2a28:	f003 f8ea 	bl	5c00 <sprintf>
		lv_label_set_text(clock_label, "#00ffff"); 
    2a2c:	4649      	mov	r1, r9
    2a2e:	4628      	mov	r0, r5
    2a30:	f022 f9ae 	bl	24d90 <lv_label_set_text>
		lv_label_set_text(clock_label, snum); 
    2a34:	a903      	add	r1, sp, #12
    2a36:	4628      	mov	r0, r5
    2a38:	f022 f9aa 	bl	24d90 <lv_label_set_text>
		if ((count % 100) == 0U) {
    2a3c:	2364      	movs	r3, #100	; 0x64
    2a3e:	fbb4 f2f3 	udiv	r2, r4, r3
    2a42:	fb03 4312 	mls	r3, r3, r2, r4
    2a46:	b93b      	cbnz	r3, 2a58 <main+0x1b4>
			sprintf(count_str, "%d", count/100U);
    2a48:	4919      	ldr	r1, [pc, #100]	; (2ab0 <main+0x20c>)
    2a4a:	a809      	add	r0, sp, #36	; 0x24
    2a4c:	f003 f8d8 	bl	5c00 <sprintf>
			lv_label_set_text(count_label, count_str);
    2a50:	a909      	add	r1, sp, #36	; 0x24
    2a52:	4638      	mov	r0, r7
    2a54:	f022 f99c 	bl	24d90 <lv_label_set_text>
		lv_task_handler();
    2a58:	f018 f828 	bl	1aaac <lv_task_handler>
	return z_impl_k_sleep(ms);
    2a5c:	200a      	movs	r0, #10
    2a5e:	f019 fefd 	bl	1c85c <z_impl_k_sleep>
		++count;
    2a62:	3401      	adds	r4, #1
		cts_sync_loop();  //todo this should be activated by button or something - not looped
    2a64:	f7ff feca 	bl	27fc <cts_sync_loop>
		sprintf(snum, "%2d:%2d:%2d", pinetime_datetime.hours, pinetime_datetime.minutes,pinetime_datetime.seconds); 
    2a68:	e7d8      	b.n	2a1c <main+0x178>
    2a6a:	bf00      	nop
    2a6c:	00026c0c 	.word	0x00026c0c
    2a70:	00026c2c 	.word	0x00026c2c
    2a74:	00026c43 	.word	0x00026c43
    2a78:	00025c98 	.word	0x00025c98
    2a7c:	00026c54 	.word	0x00026c54
    2a80:	00026c9c 	.word	0x00026c9c
    2a84:	20000040 	.word	0x20000040
    2a88:	000f4240 	.word	0x000f4240
    2a8c:	00002825 	.word	0x00002825
    2a90:	00026ca2 	.word	0x00026ca2
    2a94:	00025a6c 	.word	0x00025a6c
    2a98:	00025a6c 	.word	0x00025a6c
    2a9c:	00026caa 	.word	0x00026caa
    2aa0:	00026c7a 	.word	0x00026c7a
    2aa4:	00026ccc 	.word	0x00026ccc
    2aa8:	00026cd3 	.word	0x00026cd3
    2aac:	2000602e 	.word	0x2000602e
    2ab0:	000288f7 	.word	0x000288f7
    2ab4:	00026b7d 	.word	0x00026b7d
    2ab8:	00026ced 	.word	0x00026ced

00002abc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
    2abc:	b510      	push	{r4, lr}
	int i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    2abe:	4c09      	ldr	r4, [pc, #36]	; (2ae4 <crc8_ccitt+0x28>)
    2ac0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    2ac2:	4291      	cmp	r1, r2
    2ac4:	d100      	bne.n	2ac8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    2ac6:	bd10      	pop	{r4, pc}
		val ^= p[i];
    2ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
    2acc:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    2ace:	0918      	lsrs	r0, r3, #4
    2ad0:	5c20      	ldrb	r0, [r4, r0]
    2ad2:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    2ad6:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    2ad8:	0918      	lsrs	r0, r3, #4
    2ada:	5c20      	ldrb	r0, [r4, r0]
    2adc:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    2ae0:	b2c0      	uxtb	r0, r0
    2ae2:	e7ee      	b.n	2ac2 <crc8_ccitt+0x6>
    2ae4:	00026d11 	.word	0x00026d11

00002ae8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2ae8:	680b      	ldr	r3, [r1, #0]
    2aea:	3301      	adds	r3, #1
    2aec:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2aee:	4b01      	ldr	r3, [pc, #4]	; (2af4 <char_out+0xc>)
    2af0:	681b      	ldr	r3, [r3, #0]
    2af2:	4718      	bx	r3
    2af4:	2000de98 	.word	0x2000de98

00002af8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2afc:	b085      	sub	sp, #20
    2afe:	469b      	mov	fp, r3
    2b00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    2b02:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2b8c <_printk_dec_ulong+0x94>
    2b06:	2c01      	cmp	r4, #1
    2b08:	bfb8      	it	lt
    2b0a:	2401      	movlt	r4, #1
    2b0c:	2b01      	cmp	r3, #1
    2b0e:	bf0c      	ite	eq
    2b10:	2330      	moveq	r3, #48	; 0x30
    2b12:	2320      	movne	r3, #32
    2b14:	4616      	mov	r6, r2
    2b16:	4682      	mov	sl, r0
    2b18:	4688      	mov	r8, r1
    2b1a:	9302      	str	r3, [sp, #8]
    2b1c:	2501      	movs	r5, #1
    2b1e:	270a      	movs	r7, #10
    2b20:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    2b22:	fbb6 f3f9 	udiv	r3, r6, r9
    2b26:	9301      	str	r3, [sp, #4]
    2b28:	b90a      	cbnz	r2, 2b2e <_printk_dec_ulong+0x36>
    2b2a:	45b1      	cmp	r9, r6
    2b2c:	d81d      	bhi.n	2b6a <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    2b2e:	9b01      	ldr	r3, [sp, #4]
    2b30:	4641      	mov	r1, r8
    2b32:	f103 0030 	add.w	r0, r3, #48	; 0x30
    2b36:	47d0      	blx	sl
			digits++;
    2b38:	3501      	adds	r5, #1
			found_largest_digit = 1;
    2b3a:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    2b3c:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    2b3e:	3f01      	subs	r7, #1
	while (pos >= 10) {
    2b40:	2f01      	cmp	r7, #1
		remainder %= pos;
    2b42:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    2b46:	f04f 030a 	mov.w	r3, #10
    2b4a:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    2b4e:	d1e8      	bne.n	2b22 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    2b50:	4641      	mov	r1, r8
    2b52:	f106 0030 	add.w	r0, r6, #48	; 0x30
    2b56:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2b58:	f1bb 0f03 	cmp.w	fp, #3
    2b5c:	d102      	bne.n	2b64 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
    2b5e:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    2b60:	2c00      	cmp	r4, #0
    2b62:	dc0e      	bgt.n	2b82 <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
    2b64:	b005      	add	sp, #20
    2b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    2b6a:	42bc      	cmp	r4, r7
    2b6c:	dbe6      	blt.n	2b3c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    2b6e:	f1bb 0f02 	cmp.w	fp, #2
    2b72:	d8e3      	bhi.n	2b3c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2b74:	4641      	mov	r1, r8
    2b76:	9802      	ldr	r0, [sp, #8]
    2b78:	9203      	str	r2, [sp, #12]
			digits++;
    2b7a:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2b7c:	47d0      	blx	sl
			digits++;
    2b7e:	9a03      	ldr	r2, [sp, #12]
    2b80:	e7dc      	b.n	2b3c <_printk_dec_ulong+0x44>
			out(' ', ctx);
    2b82:	4641      	mov	r1, r8
    2b84:	2020      	movs	r0, #32
    2b86:	47d0      	blx	sl
    2b88:	3c01      	subs	r4, #1
    2b8a:	e7e9      	b.n	2b60 <_printk_dec_ulong+0x68>
    2b8c:	3b9aca00 	.word	0x3b9aca00

00002b90 <vprintk>:
{
    2b90:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    2b92:	2300      	movs	r3, #0
    2b94:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    2b96:	4602      	mov	r2, r0
    2b98:	460b      	mov	r3, r1
    2b9a:	4803      	ldr	r0, [pc, #12]	; (2ba8 <vprintk+0x18>)
    2b9c:	a901      	add	r1, sp, #4
    2b9e:	f01a fc9a 	bl	1d4d6 <z_vprintk>
}
    2ba2:	b003      	add	sp, #12
    2ba4:	f85d fb04 	ldr.w	pc, [sp], #4
    2ba8:	00002ae9 	.word	0x00002ae9

00002bac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2bac:	b530      	push	{r4, r5, lr}
    2bae:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    2bb0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    2bb4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2bb6:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2bb8:	a901      	add	r1, sp, #4
    2bba:	4805      	ldr	r0, [pc, #20]	; (2bd0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    2bbc:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2bbe:	f01a fc8a 	bl	1d4d6 <z_vprintk>

	if (ctx.count < ctx.max) {
    2bc2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    2bc6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    2bc8:	bfb8      	it	lt
    2bca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    2bcc:	b005      	add	sp, #20
    2bce:	bd30      	pop	{r4, r5, pc}
    2bd0:	0001d4b1 	.word	0x0001d4b1

00002bd4 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    2bd4:	4b01      	ldr	r3, [pc, #4]	; (2bdc <uECC_get_rng+0x8>)
    2bd6:	6818      	ldr	r0, [r3, #0]
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop
    2bdc:	2000de9c 	.word	0x2000de9c

00002be0 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    2be0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    2be2:	2208      	movs	r2, #8
{
    2be4:	b089      	sub	sp, #36	; 0x24
    2be6:	460c      	mov	r4, r1
    2be8:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    2bea:	f01a ffe7 	bl	1dbbc <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    2bee:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2bf0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    2bf2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2bf4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    2bf6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    2bf8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    2bfa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    2bfc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    2bfe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    2c00:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    2c02:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2c04:	2308      	movs	r3, #8
    2c06:	466a      	mov	r2, sp
    2c08:	4669      	mov	r1, sp
    2c0a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    2c0c:	e9cd 7701 	strd	r7, r7, [sp, #4]
    2c10:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2c12:	f01a fed8 	bl	1d9c6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c16:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2c18:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c1a:	466a      	mov	r2, sp
    2c1c:	4631      	mov	r1, r6
    2c1e:	4630      	mov	r0, r6
    2c20:	f01a fed1 	bl	1d9c6 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    2c24:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2c26:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    2c28:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2c2a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    2c2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2c2e:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    2c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c32:	4405      	add	r5, r0
	tmp[7] = 0;
    2c34:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2c38:	466a      	mov	r2, sp
    2c3a:	2308      	movs	r3, #8
    2c3c:	4669      	mov	r1, sp
    2c3e:	4668      	mov	r0, sp
    2c40:	f01a fec1 	bl	1d9c6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c44:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2c46:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c48:	2308      	movs	r3, #8
    2c4a:	466a      	mov	r2, sp
    2c4c:	4630      	mov	r0, r6
    2c4e:	f01a feba 	bl	1d9c6 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    2c52:	6a23      	ldr	r3, [r4, #32]
    2c54:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    2c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c58:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    2c5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c5c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    2c5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2c60:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    2c62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2c64:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c66:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c68:	2308      	movs	r3, #8
    2c6a:	466a      	mov	r2, sp
    2c6c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    2c6e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    2c72:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c74:	f01a fea7 	bl	1d9c6 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    2c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c7a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    2c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    2c7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    2c80:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    2c82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2c84:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    2c86:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    2c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    2c8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    2c8c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    2c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    2c92:	6a23      	ldr	r3, [r4, #32]
    2c94:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c96:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2c98:	2308      	movs	r3, #8
    2c9a:	466a      	mov	r2, sp
    2c9c:	4630      	mov	r0, r6
    2c9e:	f01a fe92 	bl	1d9c6 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    2ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ca4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    2ca6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2ca8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    2caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2cac:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    2cae:	6a23      	ldr	r3, [r4, #32]
    2cb0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    2cb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cb4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2cb6:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2cb8:	2308      	movs	r3, #8
    2cba:	466a      	mov	r2, sp
    2cbc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    2cbe:	e9cd 7704 	strd	r7, r7, [sp, #16]
    2cc2:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2cc4:	f01a ffb0 	bl	1dc28 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    2cc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2cca:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    2ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2cce:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    2cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2cd2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    2cd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2cd6:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    2cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2cda:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    2cdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2cde:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2ce0:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2ce2:	2308      	movs	r3, #8
    2ce4:	466a      	mov	r2, sp
    2ce6:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    2ce8:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2cec:	f01a ff9c 	bl	1dc28 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    2cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2cf2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    2cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2cf6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    2cf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2cfa:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    2cfc:	6a23      	ldr	r3, [r4, #32]
    2cfe:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    2d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d02:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    2d04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    2d06:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    2d0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2d0c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2d0e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2d10:	2308      	movs	r3, #8
    2d12:	466a      	mov	r2, sp
    2d14:	4630      	mov	r0, r6
    2d16:	f01a ff87 	bl	1dc28 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    2d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2d1c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    2d1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    2d20:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    2d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d26:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    2d28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d2a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    2d2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    2d2e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    2d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2d34:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2d36:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2d38:	2308      	movs	r3, #8
    2d3a:	466a      	mov	r2, sp
    2d3c:	4630      	mov	r0, r6
    2d3e:	f01a ff73 	bl	1dc28 <uECC_vli_sub>

	if (carry < 0) {
    2d42:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    2d44:	4c0d      	ldr	r4, [pc, #52]	; (2d7c <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    2d46:	d40f      	bmi.n	2d68 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    2d48:	b935      	cbnz	r5, 2d58 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    2d4a:	2208      	movs	r2, #8
    2d4c:	4631      	mov	r1, r6
    2d4e:	4620      	mov	r0, r4
    2d50:	f01a ff40 	bl	1dbd4 <uECC_vli_cmp_unsafe>
		while (carry || 
    2d54:	2801      	cmp	r0, #1
    2d56:	d00f      	beq.n	2d78 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    2d58:	2308      	movs	r3, #8
    2d5a:	4622      	mov	r2, r4
    2d5c:	4631      	mov	r1, r6
    2d5e:	4630      	mov	r0, r6
    2d60:	f01a ff62 	bl	1dc28 <uECC_vli_sub>
    2d64:	1a2d      	subs	r5, r5, r0
    2d66:	e7ef      	b.n	2d48 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    2d68:	2308      	movs	r3, #8
    2d6a:	4622      	mov	r2, r4
    2d6c:	4631      	mov	r1, r6
    2d6e:	4630      	mov	r0, r6
    2d70:	f01a fe29 	bl	1d9c6 <uECC_vli_add>
		while (carry < 0);
    2d74:	182d      	adds	r5, r5, r0
    2d76:	d4f7      	bmi.n	2d68 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    2d78:	b009      	add	sp, #36	; 0x24
    2d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d7c:	00025cb4 	.word	0x00025cb4

00002d80 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2d80:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    2d82:	4e28      	ldr	r6, [pc, #160]	; (2e24 <tc_aes128_set_encrypt_key+0xa4>)
{
    2d84:	4607      	mov	r7, r0
    2d86:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    2d88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    2d8a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    2d8c:	ad01      	add	r5, sp, #4
    2d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2d90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2d94:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2d98:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2d9c:	2f00      	cmp	r7, #0
    2d9e:	d03c      	beq.n	2e1a <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    2da0:	2c00      	cmp	r4, #0
    2da2:	d03c      	beq.n	2e1e <tc_aes128_set_encrypt_key+0x9e>
    2da4:	1f38      	subs	r0, r7, #4
    2da6:	4621      	mov	r1, r4
    2da8:	4602      	mov	r2, r0
    2daa:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2dac:	784b      	ldrb	r3, [r1, #1]
    2dae:	780d      	ldrb	r5, [r1, #0]
    2db0:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2db2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    2db6:	78cd      	ldrb	r5, [r1, #3]
    2db8:	432b      	orrs	r3, r5
    2dba:	788d      	ldrb	r5, [r1, #2]
    2dbc:	3104      	adds	r1, #4
    2dbe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    2dc2:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2dc4:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    2dc8:	d1f0      	bne.n	2dac <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2dca:	4c17      	ldr	r4, [pc, #92]	; (2e28 <tc_aes128_set_encrypt_key+0xa8>)
    2dcc:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    2dce:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    2dd0:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    2dd2:	d118      	bne.n	2e06 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    2dd4:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2dd8:	0e1a      	lsrs	r2, r3, #24
    2dda:	5ca5      	ldrb	r5, [r4, r2]
    2ddc:	b2da      	uxtb	r2, r3
    2dde:	5ca2      	ldrb	r2, [r4, r2]
    2de0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    2de4:	f3c3 4507 	ubfx	r5, r3, #16, #8
    2de8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2dec:	5d65      	ldrb	r5, [r4, r5]
    2dee:	5ce3      	ldrb	r3, [r4, r3]
    2df0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    2df4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2df8:	ad0c      	add	r5, sp, #48	; 0x30
    2dfa:	f021 0303 	bic.w	r3, r1, #3
    2dfe:	442b      	add	r3, r5
    2e00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    2e04:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    2e06:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    2e0a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    2e0c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    2e0e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    2e10:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    2e12:	d1dc      	bne.n	2dce <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    2e14:	2001      	movs	r0, #1
}
    2e16:	b00d      	add	sp, #52	; 0x34
    2e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2e1a:	4638      	mov	r0, r7
    2e1c:	e7fb      	b.n	2e16 <tc_aes128_set_encrypt_key+0x96>
    2e1e:	4620      	mov	r0, r4
    2e20:	e7f9      	b.n	2e16 <tc_aes128_set_encrypt_key+0x96>
    2e22:	bf00      	nop
    2e24:	00025be0 	.word	0x00025be0
    2e28:	00026d21 	.word	0x00026d21

00002e2c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    2e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2e30:	4615      	mov	r5, r2
    2e32:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    2e34:	4607      	mov	r7, r0
    2e36:	2800      	cmp	r0, #0
    2e38:	d059      	beq.n	2eee <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    2e3a:	2900      	cmp	r1, #0
    2e3c:	d05a      	beq.n	2ef4 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    2e3e:	2a00      	cmp	r2, #0
    2e40:	d05a      	beq.n	2ef8 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    2e42:	2310      	movs	r3, #16
    2e44:	460a      	mov	r2, r1
    2e46:	4668      	mov	r0, sp
    2e48:	4619      	mov	r1, r3
    2e4a:	f01a fcf8 	bl	1d83e <_copy>
	add_round_key(state, s->words);
    2e4e:	4629      	mov	r1, r5
    2e50:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    2e52:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2efc <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    2e56:	f01b fbfe 	bl	1e656 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    2e5a:	f105 0610 	add.w	r6, r5, #16
    2e5e:	46c8      	mov	r8, r9
    2e60:	35a0      	adds	r5, #160	; 0xa0
    2e62:	466c      	mov	r4, sp
{
    2e64:	466a      	mov	r2, sp
    2e66:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    2e68:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    2e6a:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    2e6c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2e70:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    2e74:	d1f8      	bne.n	2e68 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    2e76:	4668      	mov	r0, sp
    2e78:	f01b fc32 	bl	1e6e0 <shift_rows>
	mult_row_column(t, s);
    2e7c:	4669      	mov	r1, sp
    2e7e:	a804      	add	r0, sp, #16
    2e80:	f01b fc67 	bl	1e752 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    2e84:	a901      	add	r1, sp, #4
    2e86:	a805      	add	r0, sp, #20
    2e88:	f01b fc63 	bl	1e752 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    2e8c:	a902      	add	r1, sp, #8
    2e8e:	a806      	add	r0, sp, #24
    2e90:	f01b fc5f 	bl	1e752 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    2e94:	a903      	add	r1, sp, #12
    2e96:	a807      	add	r0, sp, #28
    2e98:	f01b fc5b 	bl	1e752 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2e9c:	2310      	movs	r3, #16
    2e9e:	4619      	mov	r1, r3
    2ea0:	eb0d 0203 	add.w	r2, sp, r3
    2ea4:	4668      	mov	r0, sp
    2ea6:	f01a fcca 	bl	1d83e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    2eaa:	4631      	mov	r1, r6
    2eac:	4668      	mov	r0, sp
    2eae:	3610      	adds	r6, #16
    2eb0:	f01b fbd1 	bl	1e656 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    2eb4:	42ae      	cmp	r6, r5
    2eb6:	d1d4      	bne.n	2e62 <tc_aes_encrypt+0x36>
    2eb8:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    2eba:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    2ebc:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    2ebe:	f818 3003 	ldrb.w	r3, [r8, r3]
    2ec2:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    2ec6:	d1f8      	bne.n	2eba <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    2ec8:	4668      	mov	r0, sp
    2eca:	f01b fc09 	bl	1e6e0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    2ece:	4629      	mov	r1, r5
    2ed0:	4668      	mov	r0, sp
    2ed2:	f01b fbc0 	bl	1e656 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    2ed6:	2310      	movs	r3, #16
    2ed8:	4619      	mov	r1, r3
    2eda:	466a      	mov	r2, sp
    2edc:	4638      	mov	r0, r7
    2ede:	f01a fcae 	bl	1d83e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    2ee2:	4668      	mov	r0, sp
    2ee4:	2210      	movs	r2, #16
    2ee6:	4631      	mov	r1, r6
    2ee8:	f01a fcb6 	bl	1d858 <_set>

	return TC_CRYPTO_SUCCESS;
    2eec:	2001      	movs	r0, #1
}
    2eee:	b009      	add	sp, #36	; 0x24
    2ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    2ef4:	4608      	mov	r0, r1
    2ef6:	e7fa      	b.n	2eee <tc_aes_encrypt+0xc2>
    2ef8:	4610      	mov	r0, r2
    2efa:	e7f8      	b.n	2eee <tc_aes_encrypt+0xc2>
    2efc:	00026d21 	.word	0x00026d21

00002f00 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    2f00:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2f02:	2200      	movs	r2, #0
{
    2f04:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    2f06:	490d      	ldr	r1, [pc, #52]	; (2f3c <enable_logger+0x3c>)
    2f08:	480d      	ldr	r0, [pc, #52]	; (2f40 <enable_logger+0x40>)
    2f0a:	f022 fb1d 	bl	25548 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2f0e:	4d0d      	ldr	r5, [pc, #52]	; (2f44 <enable_logger+0x44>)
    2f10:	490d      	ldr	r1, [pc, #52]	; (2f48 <enable_logger+0x48>)
    2f12:	2400      	movs	r4, #0
    2f14:	230e      	movs	r3, #14
    2f16:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2f1a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    2f1e:	e9cd 4400 	strd	r4, r4, [sp]
    2f22:	4b0a      	ldr	r3, [pc, #40]	; (2f4c <enable_logger+0x4c>)
    2f24:	f44f 7240 	mov.w	r2, #768	; 0x300
    2f28:	4628      	mov	r0, r5
    2f2a:	f019 fd69 	bl	1ca00 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    2f2e:	4908      	ldr	r1, [pc, #32]	; (2f50 <enable_logger+0x50>)
    2f30:	4628      	mov	r0, r5
    2f32:	f022 fa27 	bl	25384 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    2f36:	4620      	mov	r0, r4
    2f38:	b007      	add	sp, #28
    2f3a:	bd30      	pop	{r4, r5, pc}
    2f3c:	00002f55 	.word	0x00002f55
    2f40:	20000064 	.word	0x20000064
    2f44:	200000ac 	.word	0x200000ac
    2f48:	2000a828 	.word	0x2000a828
    2f4c:	00003329 	.word	0x00003329
    2f50:	00026e21 	.word	0x00026e21

00002f54 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2f54:	4801      	ldr	r0, [pc, #4]	; (2f5c <log_process_thread_timer_expiry_fn+0x8>)
    2f56:	f019 bcaf 	b.w	1c8b8 <z_impl_k_sem_give>
    2f5a:	bf00      	nop
    2f5c:	2000e620 	.word	0x2000e620

00002f60 <log_core_init>:
{
    2f60:	b508      	push	{r3, lr}
		log_msg_pool_init();
    2f62:	f000 fa41 	bl	33e8 <log_msg_pool_init>
		log_list_init(&list);
    2f66:	4809      	ldr	r0, [pc, #36]	; (2f8c <log_core_init+0x2c>)
    2f68:	f01b fd31 	bl	1e9ce <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2f6c:	2304      	movs	r3, #4
    2f6e:	2228      	movs	r2, #40	; 0x28
    2f70:	4807      	ldr	r0, [pc, #28]	; (2f90 <log_core_init+0x30>)
    2f72:	4908      	ldr	r1, [pc, #32]	; (2f94 <log_core_init+0x34>)
    2f74:	f021 ffe3 	bl	24f3e <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    2f78:	4b07      	ldr	r3, [pc, #28]	; (2f98 <log_core_init+0x38>)
    2f7a:	4a08      	ldr	r2, [pc, #32]	; (2f9c <log_core_init+0x3c>)
    2f7c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2f7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    2f82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    2f86:	f000 baa5 	b.w	34d4 <log_output_timestamp_freq_set>
    2f8a:	bf00      	nop
    2f8c:	2000005c 	.word	0x2000005c
    2f90:	20000090 	.word	0x20000090
    2f94:	2000d190 	.word	0x2000d190
    2f98:	2000dea0 	.word	0x2000dea0
    2f9c:	0001ea0d 	.word	0x0001ea0d

00002fa0 <dropped_notify>:
{
    2fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2fa2:	4b0f      	ldr	r3, [pc, #60]	; (2fe0 <dropped_notify+0x40>)
    2fa4:	f3bf 8f5b 	dmb	ish
    2fa8:	2500      	movs	r5, #0
    2faa:	e853 7f00 	ldrex	r7, [r3]
    2fae:	e843 5200 	strex	r2, r5, [r3]
    2fb2:	2a00      	cmp	r2, #0
    2fb4:	d1f9      	bne.n	2faa <dropped_notify+0xa>
    2fb6:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2fba:	4c0a      	ldr	r4, [pc, #40]	; (2fe4 <dropped_notify+0x44>)
    2fbc:	4e0a      	ldr	r6, [pc, #40]	; (2fe8 <dropped_notify+0x48>)
    2fbe:	1b36      	subs	r6, r6, r4
    2fc0:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2fc2:	42b5      	cmp	r5, r6
    2fc4:	db00      	blt.n	2fc8 <dropped_notify+0x28>
}
    2fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2fc8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2fca:	795b      	ldrb	r3, [r3, #5]
    2fcc:	b12b      	cbz	r3, 2fda <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    2fce:	6823      	ldr	r3, [r4, #0]
    2fd0:	68db      	ldr	r3, [r3, #12]
    2fd2:	b113      	cbz	r3, 2fda <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    2fd4:	4639      	mov	r1, r7
    2fd6:	4620      	mov	r0, r4
    2fd8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2fda:	3501      	adds	r5, #1
    2fdc:	3410      	adds	r4, #16
    2fde:	e7f0      	b.n	2fc2 <dropped_notify+0x22>
    2fe0:	20000054 	.word	0x20000054
    2fe4:	00025bdc 	.word	0x00025bdc
    2fe8:	00025bdc 	.word	0x00025bdc

00002fec <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2fec:	4b06      	ldr	r3, [pc, #24]	; (3008 <log_dropped+0x1c>)
    2fee:	f3bf 8f5b 	dmb	ish
    2ff2:	e853 2f00 	ldrex	r2, [r3]
    2ff6:	3201      	adds	r2, #1
    2ff8:	e843 2100 	strex	r1, r2, [r3]
    2ffc:	2900      	cmp	r1, #0
    2ffe:	d1f8      	bne.n	2ff2 <log_dropped+0x6>
    3000:	f3bf 8f5b 	dmb	ish
}
    3004:	4770      	bx	lr
    3006:	bf00      	nop
    3008:	20000054 	.word	0x20000054

0000300c <log_backend_enable>:
	id += backend - log_backend_get(0);
    300c:	4b09      	ldr	r3, [pc, #36]	; (3034 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    300e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    3010:	1ac3      	subs	r3, r0, r3
    3012:	111b      	asrs	r3, r3, #4
    3014:	3301      	adds	r3, #1
{
    3016:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    3018:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    301a:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    301c:	4c06      	ldr	r4, [pc, #24]	; (3038 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    301e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    3020:	2201      	movs	r2, #1
    3022:	715a      	strb	r2, [r3, #5]
    3024:	7822      	ldrb	r2, [r4, #0]
    3026:	b912      	cbnz	r2, 302e <log_backend_enable+0x22>
    3028:	4804      	ldr	r0, [pc, #16]	; (303c <log_backend_enable+0x30>)
    302a:	f019 fc45 	bl	1c8b8 <z_impl_k_sem_give>
	backend_attached = true;
    302e:	2301      	movs	r3, #1
    3030:	7023      	strb	r3, [r4, #0]
}
    3032:	bd10      	pop	{r4, pc}
    3034:	00025bdc 	.word	0x00025bdc
    3038:	2000605c 	.word	0x2000605c
    303c:	2000e620 	.word	0x2000e620

00003040 <log_init>:
{
    3040:	b570      	push	{r4, r5, r6, lr}
    3042:	4b11      	ldr	r3, [pc, #68]	; (3088 <log_init+0x48>)
    3044:	f3bf 8f5b 	dmb	ish
    3048:	e853 5f00 	ldrex	r5, [r3]
    304c:	1c6a      	adds	r2, r5, #1
    304e:	e843 2100 	strex	r1, r2, [r3]
    3052:	2900      	cmp	r1, #0
    3054:	d1f8      	bne.n	3048 <log_init+0x8>
    3056:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    305a:	b92d      	cbnz	r5, 3068 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    305c:	4c0b      	ldr	r4, [pc, #44]	; (308c <log_init+0x4c>)
    305e:	4e0c      	ldr	r6, [pc, #48]	; (3090 <log_init+0x50>)
    3060:	1b36      	subs	r6, r6, r4
    3062:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    3064:	42b5      	cmp	r5, r6
    3066:	db00      	blt.n	306a <log_init+0x2a>
}
    3068:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    306a:	7b23      	ldrb	r3, [r4, #12]
    306c:	b143      	cbz	r3, 3080 <log_init+0x40>
			if (backend->api->init != NULL) {
    306e:	6823      	ldr	r3, [r4, #0]
    3070:	695b      	ldr	r3, [r3, #20]
    3072:	b103      	cbz	r3, 3076 <log_init+0x36>
				backend->api->init();
    3074:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    3076:	2204      	movs	r2, #4
    3078:	2100      	movs	r1, #0
    307a:	4620      	mov	r0, r4
    307c:	f7ff ffc6 	bl	300c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3080:	3501      	adds	r5, #1
    3082:	3410      	adds	r4, #16
    3084:	e7ee      	b.n	3064 <log_init+0x24>
    3086:	bf00      	nop
    3088:	20000058 	.word	0x20000058
    308c:	00025bdc 	.word	0x00025bdc
    3090:	00025bdc 	.word	0x00025bdc

00003094 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    3094:	4b16      	ldr	r3, [pc, #88]	; (30f0 <log_strdup+0x5c>)
    3096:	4298      	cmp	r0, r3
{
    3098:	b537      	push	{r0, r1, r2, r4, r5, lr}
    309a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    309c:	d302      	bcc.n	30a4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    309e:	4b15      	ldr	r3, [pc, #84]	; (30f4 <log_strdup+0x60>)
    30a0:	4298      	cmp	r0, r3
    30a2:	d31f      	bcc.n	30e4 <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    30a4:	2200      	movs	r2, #0
    30a6:	a901      	add	r1, sp, #4
    30a8:	4813      	ldr	r0, [pc, #76]	; (30f8 <log_strdup+0x64>)
    30aa:	f018 fefb 	bl	1bea4 <k_mem_slab_alloc>
	if (err != 0) {
    30ae:	4605      	mov	r5, r0
    30b0:	b9d8      	cbnz	r0, 30ea <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    30b2:	2201      	movs	r2, #1
    30b4:	9b01      	ldr	r3, [sp, #4]
    30b6:	f3bf 8f5b 	dmb	ish
    30ba:	e853 1f00 	ldrex	r1, [r3]
    30be:	e843 2000 	strex	r0, r2, [r3]
    30c2:	2800      	cmp	r0, #0
    30c4:	d1f9      	bne.n	30ba <log_strdup+0x26>
    30c6:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    30ca:	9801      	ldr	r0, [sp, #4]
    30cc:	4621      	mov	r1, r4
    30ce:	221f      	movs	r2, #31
    30d0:	3004      	adds	r0, #4
    30d2:	f01c fa3e 	bl	1f552 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    30d6:	9c01      	ldr	r4, [sp, #4]
    30d8:	237e      	movs	r3, #126	; 0x7e
    30da:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    30de:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    30e2:	3404      	adds	r4, #4
}
    30e4:	4620      	mov	r0, r4
    30e6:	b003      	add	sp, #12
    30e8:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    30ea:	4c04      	ldr	r4, [pc, #16]	; (30fc <log_strdup+0x68>)
    30ec:	e7fa      	b.n	30e4 <log_strdup+0x50>
    30ee:	bf00      	nop
    30f0:	000257b8 	.word	0x000257b8
    30f4:	00031efc 	.word	0x00031efc
    30f8:	20000090 	.word	0x20000090
    30fc:	00026e29 	.word	0x00026e29

00003100 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    3100:	b148      	cbz	r0, 3116 <log_is_strdup+0x16>
    3102:	4b05      	ldr	r3, [pc, #20]	; (3118 <log_is_strdup+0x18>)
    3104:	4298      	cmp	r0, r3
    3106:	d305      	bcc.n	3114 <log_is_strdup+0x14>
    3108:	33a0      	adds	r3, #160	; 0xa0
    310a:	4298      	cmp	r0, r3
    310c:	bf2c      	ite	cs
    310e:	2000      	movcs	r0, #0
    3110:	2001      	movcc	r0, #1
    3112:	4770      	bx	lr
    3114:	2000      	movs	r0, #0
}
    3116:	4770      	bx	lr
    3118:	2000d190 	.word	0x2000d190

0000311c <z_impl_log_process>:
{
    311c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    3120:	4b46      	ldr	r3, [pc, #280]	; (323c <z_impl_log_process+0x120>)
    3122:	781b      	ldrb	r3, [r3, #0]
{
    3124:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    3126:	b903      	cbnz	r3, 312a <z_impl_log_process+0xe>
    3128:	b360      	cbz	r0, 3184 <z_impl_log_process+0x68>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    312a:	f04f 0320 	mov.w	r3, #32
    312e:	f3ef 8611 	mrs	r6, BASEPRI
    3132:	f383 8811 	msr	BASEPRI, r3
    3136:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    313a:	4841      	ldr	r0, [pc, #260]	; (3240 <z_impl_log_process+0x124>)
    313c:	f01b fc57 	bl	1e9ee <log_list_head_get>
    3140:	4604      	mov	r4, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3142:	f386 8811 	msr	BASEPRI, r6
    3146:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    314a:	b178      	cbz	r0, 316c <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    314c:	f3bf 8f5b 	dmb	ish
    3150:	4b3c      	ldr	r3, [pc, #240]	; (3244 <z_impl_log_process+0x128>)
    3152:	e853 2f00 	ldrex	r2, [r3]
    3156:	3a01      	subs	r2, #1
    3158:	e843 2100 	strex	r1, r2, [r3]
    315c:	2900      	cmp	r1, #0
    315e:	d1f8      	bne.n	3152 <z_impl_log_process+0x36>
    3160:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    3164:	b18d      	cbz	r5, 318a <z_impl_log_process+0x6e>
	log_msg_put(msg);
    3166:	4620      	mov	r0, r4
    3168:	f01b fcf3 	bl	1eb52 <log_msg_put>
	if (!bypass && dropped_cnt) {
    316c:	b925      	cbnz	r5, 3178 <z_impl_log_process+0x5c>
    316e:	4b36      	ldr	r3, [pc, #216]	; (3248 <z_impl_log_process+0x12c>)
    3170:	681b      	ldr	r3, [r3, #0]
    3172:	b10b      	cbz	r3, 3178 <z_impl_log_process+0x5c>
		dropped_notify();
    3174:	f7ff ff14 	bl	2fa0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    3178:	4831      	ldr	r0, [pc, #196]	; (3240 <z_impl_log_process+0x124>)
    317a:	f01b fc36 	bl	1e9ea <log_list_head_peek>
    317e:	1c05      	adds	r5, r0, #0
    3180:	bf18      	it	ne
    3182:	2501      	movne	r5, #1
}
    3184:	4628      	mov	r0, r5
    3186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    318a:	4b30      	ldr	r3, [pc, #192]	; (324c <z_impl_log_process+0x130>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    318c:	781b      	ldrb	r3, [r3, #0]
    318e:	b9ab      	cbnz	r3, 31bc <z_impl_log_process+0xa0>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3190:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
    3192:	07db      	lsls	r3, r3, #31
    3194:	d412      	bmi.n	31bc <z_impl_log_process+0xa0>
	msg_str = log_msg_str_get(msg);
    3196:	f01b fcef 	bl	1eb78 <log_msg_str_get>
    319a:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    319c:	4620      	mov	r0, r4
    319e:	f01b fcb8 	bl	1eb12 <log_msg_nargs_get>
    31a2:	4601      	mov	r1, r0
    31a4:	4648      	mov	r0, r9
    31a6:	f01b fc35 	bl	1ea14 <z_log_get_s_mask>
    31aa:	4b29      	ldr	r3, [pc, #164]	; (3250 <z_impl_log_process+0x134>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    31ac:	4a29      	ldr	r2, [pc, #164]	; (3254 <z_impl_log_process+0x138>)
    31ae:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 326c <z_impl_log_process+0x150>
    31b2:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    31b4:	4607      	mov	r7, r0
				LOG_ERR(ERR_MSG, idx, msg_str);
    31b6:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    31ba:	b937      	cbnz	r7, 31ca <z_impl_log_process+0xae>
    31bc:	4e26      	ldr	r6, [pc, #152]	; (3258 <z_impl_log_process+0x13c>)
    31be:	4f27      	ldr	r7, [pc, #156]	; (325c <z_impl_log_process+0x140>)
    31c0:	1bbf      	subs	r7, r7, r6
    31c2:	113f      	asrs	r7, r7, #4
    31c4:	f04f 0800 	mov.w	r8, #0
    31c8:	e034      	b.n	3234 <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
    31ca:	fab7 f687 	clz	r6, r7
    31ce:	f1c6 061f 	rsb	r6, r6, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    31d2:	4631      	mov	r1, r6
    31d4:	4620      	mov	r0, r4
    31d6:	f01b fc9f 	bl	1eb18 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    31da:	4b21      	ldr	r3, [pc, #132]	; (3260 <z_impl_log_process+0x144>)
    31dc:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    31de:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    31e0:	d302      	bcc.n	31e8 <z_impl_log_process+0xcc>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    31e2:	4b20      	ldr	r3, [pc, #128]	; (3264 <z_impl_log_process+0x148>)
    31e4:	4298      	cmp	r0, r3
    31e6:	d314      	bcc.n	3212 <z_impl_log_process+0xf6>
    31e8:	4610      	mov	r0, r2
    31ea:	f7ff ff89 	bl	3100 <log_is_strdup>
    31ee:	b980      	cbnz	r0, 3212 <z_impl_log_process+0xf6>
    31f0:	4b1d      	ldr	r3, [pc, #116]	; (3268 <z_impl_log_process+0x14c>)
    31f2:	429a      	cmp	r2, r3
    31f4:	d00d      	beq.n	3212 <z_impl_log_process+0xf6>
				LOG_ERR(ERR_MSG, idx, msg_str);
    31f6:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    31fa:	f043 0301 	orr.w	r3, r3, #1
    31fe:	f363 0807 	bfi	r8, r3, #0, #8
    3202:	f36a 188f 	bfi	r8, sl, #6, #10
    3206:	4643      	mov	r3, r8
    3208:	464a      	mov	r2, r9
    320a:	4631      	mov	r1, r6
    320c:	4658      	mov	r0, fp
    320e:	f01b fc42 	bl	1ea96 <log_2>
		mask &= ~BIT(idx);
    3212:	2301      	movs	r3, #1
    3214:	fa03 f606 	lsl.w	r6, r3, r6
    3218:	ea27 0706 	bic.w	r7, r7, r6
    321c:	e7cd      	b.n	31ba <z_impl_log_process+0x9e>
	return backend->cb->active;
    321e:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    3220:	795b      	ldrb	r3, [r3, #5]
    3222:	b123      	cbz	r3, 322e <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
    3224:	6833      	ldr	r3, [r6, #0]
    3226:	4621      	mov	r1, r4
    3228:	681b      	ldr	r3, [r3, #0]
    322a:	4630      	mov	r0, r6
    322c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    322e:	f108 0801 	add.w	r8, r8, #1
    3232:	3610      	adds	r6, #16
    3234:	45b8      	cmp	r8, r7
    3236:	dbf2      	blt.n	321e <z_impl_log_process+0x102>
    3238:	e795      	b.n	3166 <z_impl_log_process+0x4a>
    323a:	bf00      	nop
    323c:	2000605c 	.word	0x2000605c
    3240:	2000005c 	.word	0x2000005c
    3244:	20000050 	.word	0x20000050
    3248:	20000054 	.word	0x20000054
    324c:	2000605d 	.word	0x2000605d
    3250:	00025b94 	.word	0x00025b94
    3254:	00025a6c 	.word	0x00025a6c
    3258:	00025bdc 	.word	0x00025bdc
    325c:	00025bdc 	.word	0x00025bdc
    3260:	000257b8 	.word	0x000257b8
    3264:	00031efc 	.word	0x00031efc
    3268:	00026e29 	.word	0x00026e29
    326c:	00026e47 	.word	0x00026e47

00003270 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    3270:	4b26      	ldr	r3, [pc, #152]	; (330c <msg_finalize+0x9c>)
{
    3272:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    3274:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    3276:	8141      	strh	r1, [r0, #10]
{
    3278:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    327a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    327c:	4c24      	ldr	r4, [pc, #144]	; (3310 <msg_finalize+0xa0>)
    327e:	60e8      	str	r0, [r5, #12]
    3280:	f3bf 8f5b 	dmb	ish
    3284:	e854 3f00 	ldrex	r3, [r4]
    3288:	3301      	adds	r3, #1
    328a:	e844 3200 	strex	r2, r3, [r4]
    328e:	2a00      	cmp	r2, #0
    3290:	d1f8      	bne.n	3284 <msg_finalize+0x14>
    3292:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    3296:	f04f 0320 	mov.w	r3, #32
    329a:	f3ef 8611 	mrs	r6, BASEPRI
    329e:	f383 8811 	msr	BASEPRI, r3
    32a2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    32a6:	481b      	ldr	r0, [pc, #108]	; (3314 <msg_finalize+0xa4>)
    32a8:	4629      	mov	r1, r5
    32aa:	f01b fb94 	bl	1e9d6 <log_list_add_tail>
	__asm__ volatile(
    32ae:	f386 8811 	msr	BASEPRI, r6
    32b2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    32b6:	4b18      	ldr	r3, [pc, #96]	; (3318 <msg_finalize+0xa8>)
    32b8:	781a      	ldrb	r2, [r3, #0]
    32ba:	b17a      	cbz	r2, 32dc <msg_finalize+0x6c>
	__asm__ volatile(
    32bc:	f04f 0320 	mov.w	r3, #32
    32c0:	f3ef 8411 	mrs	r4, BASEPRI
    32c4:	f383 8811 	msr	BASEPRI, r3
    32c8:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    32cc:	2000      	movs	r0, #0
    32ce:	f7ff ff25 	bl	311c <z_impl_log_process>
	__asm__ volatile(
    32d2:	f384 8811 	msr	BASEPRI, r4
    32d6:	f3bf 8f6f 	isb	sy
}
    32da:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    32dc:	490f      	ldr	r1, [pc, #60]	; (331c <msg_finalize+0xac>)
    32de:	6823      	ldr	r3, [r4, #0]
    32e0:	6809      	ldr	r1, [r1, #0]
    32e2:	2900      	cmp	r1, #0
    32e4:	d0f9      	beq.n	32da <msg_finalize+0x6a>
    32e6:	2b01      	cmp	r3, #1
    32e8:	d106      	bne.n	32f8 <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
    32ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    32ee:	480c      	ldr	r0, [pc, #48]	; (3320 <msg_finalize+0xb0>)
}
    32f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    32f4:	f019 bdd4 	b.w	1cea0 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    32f8:	2b0a      	cmp	r3, #10
    32fa:	d1ee      	bne.n	32da <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    32fc:	4808      	ldr	r0, [pc, #32]	; (3320 <msg_finalize+0xb0>)
    32fe:	f022 f92f 	bl	25560 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3302:	4808      	ldr	r0, [pc, #32]	; (3324 <msg_finalize+0xb4>)
}
    3304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3308:	f019 bad6 	b.w	1c8b8 <z_impl_k_sem_give>
    330c:	2000dea0 	.word	0x2000dea0
    3310:	20000050 	.word	0x20000050
    3314:	2000005c 	.word	0x2000005c
    3318:	2000605d 	.word	0x2000605d
    331c:	20000118 	.word	0x20000118
    3320:	20000064 	.word	0x20000064
    3324:	2000e620 	.word	0x2000e620

00003328 <log_process_thread_func>:
{
    3328:	b508      	push	{r3, lr}
	log_init();
    332a:	f7ff fe89 	bl	3040 <log_init>
	return z_impl_k_current_get();
    332e:	f019 fabd 	bl	1c8ac <z_impl_k_current_get>
	proc_tid = process_tid;
    3332:	4b0b      	ldr	r3, [pc, #44]	; (3360 <log_process_thread_func+0x38>)
    3334:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3336:	b130      	cbz	r0, 3346 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    3338:	4b0a      	ldr	r3, [pc, #40]	; (3364 <log_process_thread_func+0x3c>)
	    process_tid &&
    333a:	681b      	ldr	r3, [r3, #0]
    333c:	2b09      	cmp	r3, #9
    333e:	dd02      	ble.n	3346 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    3340:	4809      	ldr	r0, [pc, #36]	; (3368 <log_process_thread_func+0x40>)
    3342:	f019 fab9 	bl	1c8b8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    3346:	4c08      	ldr	r4, [pc, #32]	; (3368 <log_process_thread_func+0x40>)
    3348:	2000      	movs	r0, #0
    334a:	f7ff fee7 	bl	311c <z_impl_log_process>
		if (log_process(false) == false) {
    334e:	2800      	cmp	r0, #0
    3350:	d1fa      	bne.n	3348 <log_process_thread_func+0x20>
    3352:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3356:	4620      	mov	r0, r4
    3358:	f019 fada 	bl	1c910 <z_impl_k_sem_take>
    335c:	e7f4      	b.n	3348 <log_process_thread_func+0x20>
    335e:	bf00      	nop
    3360:	20000118 	.word	0x20000118
    3364:	20000050 	.word	0x20000050
    3368:	2000e620 	.word	0x2000e620

0000336c <z_impl_log_panic>:
{
    336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    336e:	4f0e      	ldr	r7, [pc, #56]	; (33a8 <z_impl_log_panic+0x3c>)
    3370:	783d      	ldrb	r5, [r7, #0]
    3372:	b975      	cbnz	r5, 3392 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    3374:	4c0d      	ldr	r4, [pc, #52]	; (33ac <z_impl_log_panic+0x40>)
    3376:	4e0e      	ldr	r6, [pc, #56]	; (33b0 <z_impl_log_panic+0x44>)
	log_init();
    3378:	f7ff fe62 	bl	3040 <log_init>
    337c:	1b36      	subs	r6, r6, r4
    337e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3380:	42b5      	cmp	r5, r6
    3382:	db07      	blt.n	3394 <z_impl_log_panic+0x28>
    3384:	2000      	movs	r0, #0
    3386:	f7ff fec9 	bl	311c <z_impl_log_process>
		while (log_process(false) == true) {
    338a:	2800      	cmp	r0, #0
    338c:	d1fa      	bne.n	3384 <z_impl_log_panic+0x18>
	panic_mode = true;
    338e:	2301      	movs	r3, #1
    3390:	703b      	strb	r3, [r7, #0]
}
    3392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3394:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3396:	795b      	ldrb	r3, [r3, #5]
    3398:	b11b      	cbz	r3, 33a2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    339a:	6823      	ldr	r3, [r4, #0]
    339c:	4620      	mov	r0, r4
    339e:	691b      	ldr	r3, [r3, #16]
    33a0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    33a2:	3501      	adds	r5, #1
    33a4:	3410      	adds	r4, #16
    33a6:	e7eb      	b.n	3380 <z_impl_log_panic+0x14>
    33a8:	2000605d 	.word	0x2000605d
    33ac:	00025bdc 	.word	0x00025bdc
    33b0:	00025bdc 	.word	0x00025bdc

000033b4 <log_free>:
{
    33b4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    33b6:	3804      	subs	r0, #4
    33b8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    33ba:	f3bf 8f5b 	dmb	ish
    33be:	e850 3f00 	ldrex	r3, [r0]
    33c2:	1e5a      	subs	r2, r3, #1
    33c4:	e840 2100 	strex	r1, r2, [r0]
    33c8:	2900      	cmp	r1, #0
    33ca:	d1f8      	bne.n	33be <log_free+0xa>
    33cc:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    33d0:	2b01      	cmp	r3, #1
    33d2:	d103      	bne.n	33dc <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    33d4:	a901      	add	r1, sp, #4
    33d6:	4803      	ldr	r0, [pc, #12]	; (33e4 <log_free+0x30>)
    33d8:	f018 fd90 	bl	1befc <k_mem_slab_free>
}
    33dc:	b003      	add	sp, #12
    33de:	f85d fb04 	ldr.w	pc, [sp], #4
    33e2:	bf00      	nop
    33e4:	20000090 	.word	0x20000090

000033e8 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    33e8:	2320      	movs	r3, #32
    33ea:	461a      	mov	r2, r3
    33ec:	4901      	ldr	r1, [pc, #4]	; (33f4 <log_msg_pool_init+0xc>)
    33ee:	4802      	ldr	r0, [pc, #8]	; (33f8 <log_msg_pool_init+0x10>)
    33f0:	f021 bda5 	b.w	24f3e <k_mem_slab_init>
    33f4:	2000d230 	.word	0x2000d230
    33f8:	2000011c 	.word	0x2000011c

000033fc <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    33fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    33fe:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    3400:	4d09      	ldr	r5, [pc, #36]	; (3428 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    3402:	9301      	str	r3, [sp, #4]
    3404:	2001      	movs	r0, #1
    3406:	f7ff fe89 	bl	311c <z_impl_log_process>
    340a:	4604      	mov	r4, r0
			log_dropped();
    340c:	f7ff fdee 	bl	2fec <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3410:	2200      	movs	r2, #0
    3412:	a901      	add	r1, sp, #4
    3414:	4628      	mov	r0, r5
    3416:	f018 fd45 	bl	1bea4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    341a:	b108      	cbz	r0, 3420 <log_msg_no_space_handle+0x24>
    341c:	2c00      	cmp	r4, #0
    341e:	d1f1      	bne.n	3404 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    3420:	9801      	ldr	r0, [sp, #4]
    3422:	b003      	add	sp, #12
    3424:	bd30      	pop	{r4, r5, pc}
    3426:	bf00      	nop
    3428:	2000011c 	.word	0x2000011c

0000342c <log_msg_chunk_alloc>:
{
    342c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    342e:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    3430:	a901      	add	r1, sp, #4
    3432:	4806      	ldr	r0, [pc, #24]	; (344c <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    3434:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    3436:	f018 fd35 	bl	1bea4 <k_mem_slab_alloc>
	if (err != 0) {
    343a:	b110      	cbz	r0, 3442 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    343c:	f7ff ffde 	bl	33fc <log_msg_no_space_handle>
    3440:	9001      	str	r0, [sp, #4]
}
    3442:	9801      	ldr	r0, [sp, #4]
    3444:	b003      	add	sp, #12
    3446:	f85d fb04 	ldr.w	pc, [sp], #4
    344a:	bf00      	nop
    344c:	2000011c 	.word	0x2000011c

00003450 <msg_free>:
{
    3450:	b5f0      	push	{r4, r5, r6, r7, lr}
    3452:	7a04      	ldrb	r4, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    3454:	7a46      	ldrb	r6, [r0, #9]
{
    3456:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    3458:	f014 0401 	ands.w	r4, r4, #1
{
    345c:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    345e:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    3462:	d00e      	beq.n	3482 <msg_free+0x32>
	if (msg->hdr.params.generic.ext == 1) {
    3464:	9b01      	ldr	r3, [sp, #4]
    3466:	7a1a      	ldrb	r2, [r3, #8]
    3468:	0792      	lsls	r2, r2, #30
    346a:	d504      	bpl.n	3476 <msg_free+0x26>
		cont_free(msg->payload.ext.next);
    346c:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    346e:	4c18      	ldr	r4, [pc, #96]	; (34d0 <msg_free+0x80>)
    3470:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    3472:	9b03      	ldr	r3, [sp, #12]
    3474:	bb2b      	cbnz	r3, 34c2 <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    3476:	a901      	add	r1, sp, #4
    3478:	4815      	ldr	r0, [pc, #84]	; (34d0 <msg_free+0x80>)
    347a:	f018 fd3f 	bl	1befc <k_mem_slab_free>
}
    347e:	b005      	add	sp, #20
    3480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    3482:	2e00      	cmp	r6, #0
    3484:	d0ee      	beq.n	3464 <msg_free+0x14>
		for (i = 0; i < nargs; i++) {
    3486:	4625      	mov	r5, r4
    3488:	e017      	b.n	34ba <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    348a:	4629      	mov	r1, r5
    348c:	f01b fb44 	bl	1eb18 <log_msg_arg_get>
    3490:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    3492:	f7ff fe35 	bl	3100 <log_is_strdup>
    3496:	b178      	cbz	r0, 34b8 <msg_free+0x68>
				if (smask == 0) {
    3498:	b93c      	cbnz	r4, 34aa <msg_free+0x5a>
					smask = z_log_get_s_mask(
    349a:	9b01      	ldr	r3, [sp, #4]
    349c:	4631      	mov	r1, r6
    349e:	6918      	ldr	r0, [r3, #16]
    34a0:	f01b fab8 	bl	1ea14 <z_log_get_s_mask>
					if (smask == 0) {
    34a4:	4604      	mov	r4, r0
    34a6:	2800      	cmp	r0, #0
    34a8:	d0dc      	beq.n	3464 <msg_free+0x14>
				if (smask & BIT(i)) {
    34aa:	fa24 f305 	lsr.w	r3, r4, r5
    34ae:	07db      	lsls	r3, r3, #31
    34b0:	d502      	bpl.n	34b8 <msg_free+0x68>
					log_free(buf);
    34b2:	4638      	mov	r0, r7
    34b4:	f7ff ff7e 	bl	33b4 <log_free>
		for (i = 0; i < nargs; i++) {
    34b8:	3501      	adds	r5, #1
    34ba:	42ae      	cmp	r6, r5
    34bc:	9801      	ldr	r0, [sp, #4]
    34be:	d8e4      	bhi.n	348a <msg_free+0x3a>
    34c0:	e7d0      	b.n	3464 <msg_free+0x14>
		next = cont->next;
    34c2:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    34c4:	a903      	add	r1, sp, #12
    34c6:	4620      	mov	r0, r4
    34c8:	f018 fd18 	bl	1befc <k_mem_slab_free>
		cont = next;
    34cc:	9503      	str	r5, [sp, #12]
    34ce:	e7d0      	b.n	3472 <msg_free+0x22>
    34d0:	2000011c 	.word	0x2000011c

000034d4 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    34d4:	4a08      	ldr	r2, [pc, #32]	; (34f8 <log_output_timestamp_freq_set+0x24>)
{
    34d6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    34d8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    34da:	4c08      	ldr	r4, [pc, #32]	; (34fc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    34dc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    34de:	2100      	movs	r1, #0
    34e0:	42a0      	cmp	r0, r4
    34e2:	d804      	bhi.n	34ee <log_output_timestamp_freq_set+0x1a>
    34e4:	b101      	cbz	r1, 34e8 <log_output_timestamp_freq_set+0x14>
    34e6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    34e8:	4b05      	ldr	r3, [pc, #20]	; (3500 <log_output_timestamp_freq_set+0x2c>)
    34ea:	6018      	str	r0, [r3, #0]
}
    34ec:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    34ee:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    34f0:	005b      	lsls	r3, r3, #1
    34f2:	2101      	movs	r1, #1
    34f4:	e7f4      	b.n	34e0 <log_output_timestamp_freq_set+0xc>
    34f6:	bf00      	nop
    34f8:	2000013c 	.word	0x2000013c
    34fc:	000f4240 	.word	0x000f4240
    3500:	20000138 	.word	0x20000138

00003504 <read_pnp_id>:

#if CONFIG_BT_GATT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   u16_t len, u16_t offset)
{
    3504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    3506:	2407      	movs	r4, #7
    3508:	9402      	str	r4, [sp, #8]
    350a:	4c04      	ldr	r4, [pc, #16]	; (351c <read_pnp_id+0x18>)
    350c:	9401      	str	r4, [sp, #4]
    350e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    3512:	9400      	str	r4, [sp, #0]
    3514:	f01d fc27 	bl	20d66 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    3518:	b004      	add	sp, #16
    351a:	bd10      	pop	{r4, pc}
    351c:	2000e4b6 	.word	0x2000e4b6

00003520 <blvl_ccc_cfg_changed>:
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    3520:	2303      	movs	r3, #3
    3522:	f04f 0200 	mov.w	r2, #0
    3526:	f363 0207 	bfi	r2, r3, #0, #8
    352a:	4807      	ldr	r0, [pc, #28]	; (3548 <blvl_ccc_cfg_changed+0x28>)
    352c:	4b07      	ldr	r3, [pc, #28]	; (354c <blvl_ccc_cfg_changed+0x2c>)
    352e:	1a1b      	subs	r3, r3, r0
    3530:	08db      	lsrs	r3, r3, #3
    3532:	4807      	ldr	r0, [pc, #28]	; (3550 <blvl_ccc_cfg_changed+0x30>)
    3534:	f363 128f 	bfi	r2, r3, #6, #10
    3538:	4b06      	ldr	r3, [pc, #24]	; (3554 <blvl_ccc_cfg_changed+0x34>)
    353a:	2901      	cmp	r1, #1
    353c:	bf14      	ite	ne
    353e:	4601      	movne	r1, r0
    3540:	4619      	moveq	r1, r3
    3542:	4805      	ldr	r0, [pc, #20]	; (3558 <blvl_ccc_cfg_changed+0x38>)
    3544:	f01b ba93 	b.w	1ea6e <log_1>
    3548:	00025a6c 	.word	0x00025a6c
    354c:	00025a74 	.word	0x00025a74
    3550:	00026ea7 	.word	0x00026ea7
    3554:	00026e9f 	.word	0x00026e9f
    3558:	00026eb0 	.word	0x00026eb0

0000355c <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    355c:	b510      	push	{r4, lr}
	u8_t lvl8 = battery_level;
    355e:	4c08      	ldr	r4, [pc, #32]	; (3580 <read_blvl+0x24>)
{
    3560:	b086      	sub	sp, #24
	u8_t lvl8 = battery_level;
    3562:	7824      	ldrb	r4, [r4, #0]
    3564:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    3568:	2401      	movs	r4, #1
    356a:	9402      	str	r4, [sp, #8]
    356c:	f10d 0417 	add.w	r4, sp, #23
    3570:	9401      	str	r4, [sp, #4]
    3572:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    3576:	9400      	str	r4, [sp, #0]
    3578:	f01d fbf5 	bl	20d66 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    357c:	b006      	add	sp, #24
    357e:	bd10      	pop	{r4, pc}
    3580:	2000e4bd 	.word	0x2000e4bd

00003584 <hrs_init>:

static int hrs_init(struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    3584:	4b02      	ldr	r3, [pc, #8]	; (3590 <hrs_init+0xc>)
    3586:	2201      	movs	r2, #1
    3588:	701a      	strb	r2, [r3, #0]

	return 0;
}
    358a:	2000      	movs	r0, #0
    358c:	4770      	bx	lr
    358e:	bf00      	nop
    3590:	2000605e 	.word	0x2000605e

00003594 <read_blsc>:
{
    3594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    3596:	2401      	movs	r4, #1
    3598:	9402      	str	r4, [sp, #8]
    359a:	4c04      	ldr	r4, [pc, #16]	; (35ac <read_blsc+0x18>)
    359c:	9401      	str	r4, [sp, #4]
    359e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    35a2:	9400      	str	r4, [sp, #0]
    35a4:	f01d fbdf 	bl	20d66 <bt_gatt_attr_read>
}
    35a8:	b004      	add	sp, #16
    35aa:	bd10      	pop	{r4, pc}
    35ac:	2000605e 	.word	0x2000605e

000035b0 <hrmc_ccc_cfg_changed>:
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    35b0:	2303      	movs	r3, #3
    35b2:	f04f 0200 	mov.w	r2, #0
    35b6:	f363 0207 	bfi	r2, r3, #0, #8
    35ba:	4807      	ldr	r0, [pc, #28]	; (35d8 <hrmc_ccc_cfg_changed+0x28>)
    35bc:	4b07      	ldr	r3, [pc, #28]	; (35dc <hrmc_ccc_cfg_changed+0x2c>)
    35be:	1a1b      	subs	r3, r3, r0
    35c0:	08db      	lsrs	r3, r3, #3
    35c2:	4807      	ldr	r0, [pc, #28]	; (35e0 <hrmc_ccc_cfg_changed+0x30>)
    35c4:	f363 128f 	bfi	r2, r3, #6, #10
    35c8:	4b06      	ldr	r3, [pc, #24]	; (35e4 <hrmc_ccc_cfg_changed+0x34>)
    35ca:	2901      	cmp	r1, #1
    35cc:	bf14      	ite	ne
    35ce:	4601      	movne	r1, r0
    35d0:	4619      	moveq	r1, r3
    35d2:	4805      	ldr	r0, [pc, #20]	; (35e8 <hrmc_ccc_cfg_changed+0x38>)
    35d4:	f01b ba4b 	b.w	1ea6e <log_1>
    35d8:	00025a6c 	.word	0x00025a6c
    35dc:	00025b84 	.word	0x00025b84
    35e0:	00026ea7 	.word	0x00026ea7
    35e4:	00026e9f 	.word	0x00026e9f
    35e8:	00026ec9 	.word	0x00026ec9

000035ec <nvs_prev_ate>:

/* walking through allocation entry list, from newest to oldest entries
 * read ate from addr, modify addr to the previous ate
 */
static int nvs_prev_ate(struct nvs_fs *fs, u32_t *addr, struct nvs_ate *ate)
{
    35ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    35f0:	2308      	movs	r3, #8
{
    35f2:	b085      	sub	sp, #20
    35f4:	460d      	mov	r5, r1
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    35f6:	6809      	ldr	r1, [r1, #0]
	int rc;
	struct nvs_ate close_ate, end_ate;
	u32_t data_end_addr, ate_end_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    35f8:	7c04      	ldrb	r4, [r0, #16]
{
    35fa:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    35fc:	f01b fb30 	bl	1ec60 <nvs_flash_rd>

	rc = nvs_flash_ate_rd(fs, *addr, ate);
	if (rc) {
    3600:	b968      	cbnz	r0, 361e <nvs_prev_ate+0x32>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3602:	2108      	movs	r1, #8
    3604:	4620      	mov	r0, r4
    3606:	f01b fb76 	bl	1ecf6 <nvs_al_size.isra.1>
		return rc;
	}

	*addr += ate_size;
    360a:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    360c:	89bb      	ldrh	r3, [r7, #12]
	*addr += ate_size;
    360e:	4401      	add	r1, r0
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    3610:	b28a      	uxth	r2, r1
    3612:	1a1b      	subs	r3, r3, r0
    3614:	429a      	cmp	r2, r3
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3616:	4606      	mov	r6, r0
	*addr += ate_size;
    3618:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    361a:	d003      	beq.n	3624 <nvs_prev_ate+0x38>
		return 0;
    361c:	2000      	movs	r0, #0
	/* remark: if there was absolutely no valid data in the sector *addr
	 * is kept at sector_end - 2*ate_size, the next read will contain
	 * invalid data and continue with a sector jump
	 */
	return 0;
}
    361e:	b005      	add	sp, #20
    3620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
    3624:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    3626:	bf03      	ittte	eq
    3628:	89fb      	ldrheq	r3, [r7, #14]
    362a:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    362e:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
    3632:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
    3636:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    3638:	2308      	movs	r3, #8
    363a:	466a      	mov	r2, sp
    363c:	4638      	mov	r0, r7
    363e:	f01b fb0f 	bl	1ec60 <nvs_flash_rd>
	if (rc) {
    3642:	2800      	cmp	r0, #0
    3644:	d1eb      	bne.n	361e <nvs_prev_ate+0x32>
    3646:	466a      	mov	r2, sp
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    3648:	4603      	mov	r3, r0
		if (data8[i] != value) {
    364a:	f812 1b01 	ldrb.w	r1, [r2], #1
    364e:	29ff      	cmp	r1, #255	; 0xff
    3650:	d115      	bne.n	367e <nvs_prev_ate+0x92>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    3652:	3301      	adds	r3, #1
    3654:	2b08      	cmp	r3, #8
    3656:	d1f8      	bne.n	364a <nvs_prev_ate+0x5e>
		*addr = fs->ate_wra;
    3658:	687b      	ldr	r3, [r7, #4]
    365a:	602b      	str	r3, [r5, #0]
		return 0;
    365c:	e7df      	b.n	361e <nvs_prev_ate+0x32>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    365e:	89ba      	ldrh	r2, [r7, #12]
    3660:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    3664:	1b92      	subs	r2, r2, r6
    3666:	4293      	cmp	r3, r2
    3668:	d20f      	bcs.n	368a <nvs_prev_ate+0x9e>
		    !(close_ate.offset % ate_size)) {
    366a:	fbb3 f2f6 	udiv	r2, r3, r6
    366e:	fb06 3212 	mls	r2, r6, r2, r3
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    3672:	b952      	cbnz	r2, 368a <nvs_prev_ate+0x9e>
			(*addr) &= ADDR_SECT_MASK;
    3674:	0c24      	lsrs	r4, r4, #16
    3676:	0424      	lsls	r4, r4, #16
			(*addr) += close_ate.offset;
    3678:	441c      	add	r4, r3
    367a:	602c      	str	r4, [r5, #0]
			return 0;
    367c:	e7cf      	b.n	361e <nvs_prev_ate+0x32>
	if (!nvs_ate_crc8_check(&close_ate)) {
    367e:	4668      	mov	r0, sp
    3680:	f01b fb24 	bl	1eccc <nvs_ate_crc8_check>
    3684:	682c      	ldr	r4, [r5, #0]
    3686:	2800      	cmp	r0, #0
    3688:	d0e9      	beq.n	365e <nvs_prev_ate+0x72>
	data_end_addr = *addr & ADDR_SECT_MASK;
    368a:	4b10      	ldr	r3, [pc, #64]	; (36cc <nvs_prev_ate+0xe0>)
	*addr -= ate_size;
    368c:	1ba4      	subs	r4, r4, r6
    368e:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    3690:	ea04 0803 	and.w	r8, r4, r3
			data_end_addr &= ADDR_SECT_MASK;
    3694:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
    3696:	45a0      	cmp	r8, r4
    3698:	d2c0      	bcs.n	361c <nvs_prev_ate+0x30>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    369a:	2308      	movs	r3, #8
    369c:	eb0d 0203 	add.w	r2, sp, r3
    36a0:	4621      	mov	r1, r4
    36a2:	4638      	mov	r0, r7
    36a4:	f01b fadc 	bl	1ec60 <nvs_flash_rd>
		if (rc) {
    36a8:	2800      	cmp	r0, #0
    36aa:	d1b8      	bne.n	361e <nvs_prev_ate+0x32>
		if (!nvs_ate_crc8_check(&end_ate)) {
    36ac:	a802      	add	r0, sp, #8
    36ae:	f01b fb0d 	bl	1eccc <nvs_ate_crc8_check>
    36b2:	b940      	cbnz	r0, 36c6 <nvs_prev_ate+0xda>
			data_end_addr += end_ate.offset + end_ate.len;
    36b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    36b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			*addr = ate_end_addr;
    36bc:	602c      	str	r4, [r5, #0]
			data_end_addr &= ADDR_SECT_MASK;
    36be:	ea08 0809 	and.w	r8, r8, r9
			data_end_addr += end_ate.offset + end_ate.len;
    36c2:	4413      	add	r3, r2
    36c4:	4498      	add	r8, r3
		ate_end_addr -= ate_size;
    36c6:	1ba4      	subs	r4, r4, r6
    36c8:	e7e5      	b.n	3696 <nvs_prev_ate+0xaa>
    36ca:	bf00      	nop
    36cc:	ffff0000 	.word	0xffff0000

000036d0 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    36d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36d4:	4604      	mov	r4, r0
    36d6:	b093      	sub	sp, #76	; 0x4c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	u32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    36d8:	2108      	movs	r1, #8
    36da:	7c00      	ldrb	r0, [r0, #16]
    36dc:	f01b fb0b 	bl	1ecf6 <nvs_al_size.isra.1>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    36e0:	6863      	ldr	r3, [r4, #4]
    36e2:	0c1b      	lsrs	r3, r3, #16
    36e4:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    36e6:	4681      	mov	r9, r0
	nvs_sector_advance(fs, &sec_addr);
    36e8:	a901      	add	r1, sp, #4
    36ea:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    36ec:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    36ee:	f01b fb0b 	bl	1ed08 <nvs_sector_advance.isra.2>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    36f2:	9b01      	ldr	r3, [sp, #4]
    36f4:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    36f6:	ad04      	add	r5, sp, #16
	gc_addr = sec_addr + fs->sector_size - ate_size;
    36f8:	4419      	add	r1, r3
    36fa:	eba1 0109 	sub.w	r1, r1, r9
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    36fe:	462a      	mov	r2, r5
    3700:	2308      	movs	r3, #8
    3702:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    3704:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    3706:	f01b faab 	bl	1ec60 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    370a:	1e02      	subs	r2, r0, #0
    370c:	db70      	blt.n	37f0 <nvs_gc+0x120>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    370e:	2300      	movs	r3, #0
		if (data8[i] != value) {
    3710:	5cea      	ldrb	r2, [r5, r3]
    3712:	2aff      	cmp	r2, #255	; 0xff
    3714:	d170      	bne.n	37f8 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    3716:	3301      	adds	r3, #1
    3718:	2b08      	cmp	r3, #8
    371a:	d1f9      	bne.n	3710 <nvs_gc+0x40>
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, 0xff);
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    371c:	9901      	ldr	r1, [sp, #4]
    371e:	4620      	mov	r0, r4
    3720:	f01b fb1f 	bl	1ed62 <nvs_flash_erase_sector>
    3724:	4602      	mov	r2, r0
		if (rc) {
    3726:	e063      	b.n	37f0 <nvs_gc+0x120>
		bytes_to_copy = MIN(block_size, len);
    3728:	4556      	cmp	r6, sl
    372a:	4635      	mov	r5, r6
    372c:	bf28      	it	cs
    372e:	4655      	movcs	r5, sl
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    3730:	aa0a      	add	r2, sp, #40	; 0x28
    3732:	462b      	mov	r3, r5
    3734:	4639      	mov	r1, r7
    3736:	4620      	mov	r0, r4
    3738:	f01b fa92 	bl	1ec60 <nvs_flash_rd>
		if (rc) {
    373c:	4602      	mov	r2, r0
    373e:	2800      	cmp	r0, #0
    3740:	d156      	bne.n	37f0 <nvs_gc+0x120>
	if (!len) {
    3742:	b135      	cbz	r5, 3752 <nvs_gc+0x82>
    3744:	aa0a      	add	r2, sp, #40	; 0x28
    3746:	462b      	mov	r3, r5
    3748:	68a1      	ldr	r1, [r4, #8]
    374a:	4620      	mov	r0, r4
    374c:	f01b fb2f 	bl	1edae <nvs_flash_al_wrt.part.4>
    3750:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    3752:	4629      	mov	r1, r5
    3754:	7c20      	ldrb	r0, [r4, #16]
    3756:	f01b face 	bl	1ecf6 <nvs_al_size.isra.1>
    375a:	68a3      	ldr	r3, [r4, #8]
    375c:	4418      	add	r0, r3
    375e:	60a0      	str	r0, [r4, #8]
		if (rc) {
    3760:	2a00      	cmp	r2, #0
    3762:	d145      	bne.n	37f0 <nvs_gc+0x120>
		len -= bytes_to_copy;
    3764:	ebaa 0a05 	sub.w	sl, sl, r5
		addr += bytes_to_copy;
    3768:	442f      	add	r7, r5
    376a:	e037      	b.n	37dc <nvs_gc+0x10c>
				return rc;
			}
		}

		/* stop gc at end of the sector */
		if (gc_prev_addr == stop_addr) {
    376c:	45d9      	cmp	r9, fp
    376e:	d0d5      	beq.n	371c <nvs_gc+0x4c>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    3770:	aa06      	add	r2, sp, #24
    3772:	a902      	add	r1, sp, #8
    3774:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
    3776:	f8dd b008 	ldr.w	fp, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    377a:	f7ff ff37 	bl	35ec <nvs_prev_ate>
		if (rc) {
    377e:	4602      	mov	r2, r0
    3780:	2800      	cmp	r0, #0
    3782:	d135      	bne.n	37f0 <nvs_gc+0x120>
		wlk_addr = fs->ate_wra;
    3784:	6863      	ldr	r3, [r4, #4]
    3786:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3788:	aa08      	add	r2, sp, #32
    378a:	a903      	add	r1, sp, #12
    378c:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    378e:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3790:	f7ff ff2c 	bl	35ec <nvs_prev_ate>
			if (rc) {
    3794:	4602      	mov	r2, r0
    3796:	bb58      	cbnz	r0, 37f0 <nvs_gc+0x120>
			if ((wlk_ate.id == gc_ate.id) &&
    3798:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    379c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    37a0:	429a      	cmp	r2, r3
    37a2:	d1f1      	bne.n	3788 <nvs_gc+0xb8>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    37a4:	a808      	add	r0, sp, #32
    37a6:	f01b fa91 	bl	1eccc <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    37aa:	2800      	cmp	r0, #0
    37ac:	d1ec      	bne.n	3788 <nvs_gc+0xb8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    37ae:	455d      	cmp	r5, fp
    37b0:	d1dc      	bne.n	376c <nvs_gc+0x9c>
    37b2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d0d8      	beq.n	376c <nvs_gc+0x9c>
			data_addr += gc_ate.offset;
    37ba:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    37be:	ea0b 0708 	and.w	r7, fp, r8
			data_addr += gc_ate.offset;
    37c2:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
    37c4:	a806      	add	r0, sp, #24
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    37c6:	68a3      	ldr	r3, [r4, #8]
    37c8:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    37cc:	f01b fa8a 	bl	1ece4 <nvs_ate_crc8_update>
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    37d0:	7c26      	ldrb	r6, [r4, #16]
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    37d2:	f8bd a01c 	ldrh.w	sl, [sp, #28]
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    37d6:	4276      	negs	r6, r6
    37d8:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    37dc:	f1ba 0f00 	cmp.w	sl, #0
    37e0:	d1a2      	bne.n	3728 <nvs_gc+0x58>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    37e2:	a906      	add	r1, sp, #24
    37e4:	4620      	mov	r0, r4
    37e6:	f01b fb26 	bl	1ee36 <nvs_flash_ate_wrt>
			if (rc) {
    37ea:	4602      	mov	r2, r0
    37ec:	2800      	cmp	r0, #0
    37ee:	d0bd      	beq.n	376c <nvs_gc+0x9c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    37f0:	4610      	mov	r0, r2
    37f2:	b013      	add	sp, #76	; 0x4c
    37f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	stop_addr = gc_addr - ate_size;
    37f8:	9b02      	ldr	r3, [sp, #8]
	gc_addr &= ADDR_SECT_MASK;
    37fa:	4a05      	ldr	r2, [pc, #20]	; (3810 <nvs_gc+0x140>)
	gc_addr += close_ate.offset;
    37fc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	stop_addr = gc_addr - ate_size;
    3800:	eba3 0909 	sub.w	r9, r3, r9
	gc_addr &= ADDR_SECT_MASK;
    3804:	4013      	ands	r3, r2
	gc_addr += close_ate.offset;
    3806:	440b      	add	r3, r1
    3808:	9302      	str	r3, [sp, #8]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    380a:	4690      	mov	r8, r2
    380c:	e7b0      	b.n	3770 <nvs_gc+0xa0>
    380e:	bf00      	nop
    3810:	ffff0000 	.word	0xffff0000

00003814 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    3814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3818:	4604      	mov	r4, r0
    381a:	b087      	sub	sp, #28
    381c:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;

	k_mutex_init(&fs->nvs_lock);
    381e:	f100 0614 	add.w	r6, r0, #20
	z_impl_k_mutex_init(mutex);
    3822:	4630      	mov	r0, r6
    3824:	f021 fbb6 	bl	24f94 <z_impl_k_mutex_init>
    3828:	4628      	mov	r0, r5
    382a:	f018 f995 	bl	1bb58 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    382e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    3830:	b998      	cbnz	r0, 385a <nvs_init+0x46>
		LOG_ERR("No valid flash device found");
    3832:	2301      	movs	r3, #1
    3834:	f04f 0100 	mov.w	r1, #0
    3838:	f363 0107 	bfi	r1, r3, #0, #8
    383c:	4aa0      	ldr	r2, [pc, #640]	; (3ac0 <nvs_init+0x2ac>)
    383e:	4ba1      	ldr	r3, [pc, #644]	; (3ac4 <nvs_init+0x2b0>)
    3840:	48a1      	ldr	r0, [pc, #644]	; (3ac8 <nvs_init+0x2b4>)
    3842:	1a9b      	subs	r3, r3, r2
    3844:	08db      	lsrs	r3, r3, #3
    3846:	f363 118f 	bfi	r1, r3, #6, #10
    384a:	f01b f903 	bl	1ea54 <log_0>
		return -ENXIO;
    384e:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    3852:	4628      	mov	r0, r5
    3854:	b007      	add	sp, #28
    3856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
    385a:	6843      	ldr	r3, [r0, #4]
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    385c:	7d1b      	ldrb	r3, [r3, #20]
    385e:	7423      	strb	r3, [r4, #16]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    3860:	2b20      	cmp	r3, #32
    3862:	d910      	bls.n	3886 <nvs_init+0x72>
		LOG_ERR("Unsupported write block size");
    3864:	2301      	movs	r3, #1
    3866:	f04f 0100 	mov.w	r1, #0
    386a:	f363 0107 	bfi	r1, r3, #0, #8
    386e:	4a94      	ldr	r2, [pc, #592]	; (3ac0 <nvs_init+0x2ac>)
    3870:	4b94      	ldr	r3, [pc, #592]	; (3ac4 <nvs_init+0x2b0>)
    3872:	4896      	ldr	r0, [pc, #600]	; (3acc <nvs_init+0x2b8>)
    3874:	1a9b      	subs	r3, r3, r2
    3876:	08db      	lsrs	r3, r3, #3
    3878:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Unable to get page info");
    387c:	f01b f8ea 	bl	1ea54 <log_0>
		return -EINVAL;
    3880:	f06f 0515 	mvn.w	r5, #21
    3884:	e7e5      	b.n	3852 <nvs_init+0x3e>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    3886:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3888:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    388a:	aa03      	add	r2, sp, #12
    388c:	f01f f912 	bl	22ab4 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    3890:	b160      	cbz	r0, 38ac <nvs_init+0x98>
		LOG_ERR("Unable to get page info");
    3892:	2301      	movs	r3, #1
    3894:	f04f 0100 	mov.w	r1, #0
    3898:	f363 0107 	bfi	r1, r3, #0, #8
    389c:	4a88      	ldr	r2, [pc, #544]	; (3ac0 <nvs_init+0x2ac>)
    389e:	4b89      	ldr	r3, [pc, #548]	; (3ac4 <nvs_init+0x2b0>)
    38a0:	488b      	ldr	r0, [pc, #556]	; (3ad0 <nvs_init+0x2bc>)
    38a2:	1a9b      	subs	r3, r3, r2
    38a4:	08db      	lsrs	r3, r3, #3
    38a6:	f363 118f 	bfi	r1, r3, #6, #10
    38aa:	e7e7      	b.n	387c <nvs_init+0x68>
	if (!fs->sector_size || fs->sector_size % info.size) {
    38ac:	89a3      	ldrh	r3, [r4, #12]
    38ae:	b12b      	cbz	r3, 38bc <nvs_init+0xa8>
    38b0:	9a04      	ldr	r2, [sp, #16]
    38b2:	fbb3 f5f2 	udiv	r5, r3, r2
    38b6:	fb02 3515 	mls	r5, r2, r5, r3
    38ba:	b165      	cbz	r5, 38d6 <nvs_init+0xc2>
		LOG_ERR("Invalid sector size");
    38bc:	2301      	movs	r3, #1
    38be:	f04f 0100 	mov.w	r1, #0
    38c2:	f363 0107 	bfi	r1, r3, #0, #8
    38c6:	4a7e      	ldr	r2, [pc, #504]	; (3ac0 <nvs_init+0x2ac>)
    38c8:	4b7e      	ldr	r3, [pc, #504]	; (3ac4 <nvs_init+0x2b0>)
    38ca:	4882      	ldr	r0, [pc, #520]	; (3ad4 <nvs_init+0x2c0>)
    38cc:	1a9b      	subs	r3, r3, r2
    38ce:	08db      	lsrs	r3, r3, #3
    38d0:	f363 118f 	bfi	r1, r3, #6, #10
    38d4:	e7d2      	b.n	387c <nvs_init+0x68>
	if (fs->sector_count < 2) {
    38d6:	89e3      	ldrh	r3, [r4, #14]
    38d8:	2b01      	cmp	r3, #1
    38da:	d80c      	bhi.n	38f6 <nvs_init+0xe2>
		LOG_ERR("Configuration error - sector count");
    38dc:	2301      	movs	r3, #1
    38de:	f04f 0100 	mov.w	r1, #0
    38e2:	f363 0107 	bfi	r1, r3, #0, #8
    38e6:	4a76      	ldr	r2, [pc, #472]	; (3ac0 <nvs_init+0x2ac>)
    38e8:	4b76      	ldr	r3, [pc, #472]	; (3ac4 <nvs_init+0x2b0>)
    38ea:	487b      	ldr	r0, [pc, #492]	; (3ad8 <nvs_init+0x2c4>)
    38ec:	1a9b      	subs	r3, r3, r2
    38ee:	08db      	lsrs	r3, r3, #3
    38f0:	f363 118f 	bfi	r1, r3, #6, #10
    38f4:	e7c2      	b.n	387c <nvs_init+0x68>
	u32_t addr = 0U;
    38f6:	9500      	str	r5, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    38f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    38fc:	4630      	mov	r0, r6
    38fe:	f018 fbc7 	bl	1c090 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3902:	2108      	movs	r1, #8
    3904:	7c20      	ldrb	r0, [r4, #16]
    3906:	f01b f9f6 	bl	1ecf6 <nvs_al_size.isra.1>
	u16_t i, closed_sectors = 0;
    390a:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    390c:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    390e:	89e3      	ldrh	r3, [r4, #14]
    3910:	fa1f f885 	uxth.w	r8, r5
    3914:	4543      	cmp	r3, r8
    3916:	d805      	bhi.n	3924 <nvs_init+0x110>
	if (closed_sectors == fs->sector_count) {
    3918:	89e3      	ldrh	r3, [r4, #14]
    391a:	454b      	cmp	r3, r9
    391c:	d11e      	bne.n	395c <nvs_init+0x148>
		return -EDEADLK;
    391e:	f06f 0520 	mvn.w	r5, #32
    3922:	e796      	b.n	3852 <nvs_init+0x3e>
		       (u16_t)(fs->sector_size - ate_size);
    3924:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    3926:	042b      	lsls	r3, r5, #16
		       (u16_t)(fs->sector_size - ate_size);
    3928:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    392a:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    392e:	2208      	movs	r2, #8
    3930:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    3932:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    3934:	f01b f9f2 	bl	1ed1c <nvs_flash_cmp_const.constprop.6>
		if (rc) {
    3938:	b170      	cbz	r0, 3958 <nvs_init+0x144>
			nvs_sector_advance(fs, &addr);
    393a:	4669      	mov	r1, sp
    393c:	89e0      	ldrh	r0, [r4, #14]
    393e:	f01b f9e3 	bl	1ed08 <nvs_sector_advance.isra.2>
			closed_sectors++;
    3942:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    3946:	2208      	movs	r2, #8
    3948:	9900      	ldr	r1, [sp, #0]
    394a:	4620      	mov	r0, r4
			closed_sectors++;
    394c:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    3950:	f01b f9e4 	bl	1ed1c <nvs_flash_cmp_const.constprop.6>
			if (!rc) {
    3954:	2800      	cmp	r0, #0
    3956:	d0df      	beq.n	3918 <nvs_init+0x104>
    3958:	3501      	adds	r5, #1
    395a:	e7d8      	b.n	390e <nvs_init+0xfa>
	if (i == fs->sector_count) {
    395c:	4598      	cmp	r8, r3
    395e:	d10a      	bne.n	3976 <nvs_init+0x162>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, 0xff,
    3960:	9900      	ldr	r1, [sp, #0]
    3962:	2208      	movs	r2, #8
    3964:	1bc9      	subs	r1, r1, r7
    3966:	4620      	mov	r0, r4
    3968:	f01b f9d8 	bl	1ed1c <nvs_flash_cmp_const.constprop.6>
		if (!rc) {
    396c:	b918      	cbnz	r0, 3976 <nvs_init+0x162>
			nvs_sector_advance(fs, &addr);
    396e:	4669      	mov	r1, sp
    3970:	89e0      	ldrh	r0, [r4, #14]
    3972:	f01b f9c9 	bl	1ed08 <nvs_sector_advance.isra.2>
	fs->ate_wra = addr - ate_size;
    3976:	9b00      	ldr	r3, [sp, #0]
    3978:	1bda      	subs	r2, r3, r7
    397a:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    397c:	4a57      	ldr	r2, [pc, #348]	; (3adc <nvs_init+0x2c8>)
    397e:	4013      	ands	r3, r2
    3980:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    3982:	4690      	mov	r8, r2
	while (fs->ate_wra >= fs->data_wra) {
    3984:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    3988:	4299      	cmp	r1, r3
    398a:	d30e      	bcc.n	39aa <nvs_init+0x196>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    398c:	2308      	movs	r3, #8
    398e:	aa01      	add	r2, sp, #4
    3990:	4620      	mov	r0, r4
    3992:	f01b f965 	bl	1ec60 <nvs_flash_rd>
		if (rc) {
    3996:	4605      	mov	r5, r0
    3998:	bb18      	cbnz	r0, 39e2 <nvs_init+0x1ce>
    399a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    399c:	f813 2b01 	ldrb.w	r2, [r3], #1
    39a0:	2aff      	cmp	r2, #255	; 0xff
    39a2:	d175      	bne.n	3a90 <nvs_init+0x27c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    39a4:	3501      	adds	r5, #1
    39a6:	2d08      	cmp	r5, #8
    39a8:	d1f8      	bne.n	399c <nvs_init+0x188>
	while (fs->ate_wra > fs->data_wra) {
    39aa:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    39ae:	428a      	cmp	r2, r1
    39b0:	d906      	bls.n	39c0 <nvs_init+0x1ac>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, 0xff, empty_len);
    39b2:	1a52      	subs	r2, r2, r1
    39b4:	4620      	mov	r0, r4
    39b6:	f01b f9b1 	bl	1ed1c <nvs_flash_cmp_const.constprop.6>
		if (rc < 0) {
    39ba:	1e05      	subs	r5, r0, #0
    39bc:	db11      	blt.n	39e2 <nvs_init+0x1ce>
		if (!rc) {
    39be:	d14a      	bne.n	3a56 <nvs_init+0x242>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    39c0:	6863      	ldr	r3, [r4, #4]
    39c2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 3adc <nvs_init+0x2c8>
	nvs_sector_advance(fs, &addr);
    39c6:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    39c8:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    39cc:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    39ce:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    39d0:	f01b f99a 	bl	1ed08 <nvs_sector_advance.isra.2>
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
    39d4:	89a2      	ldrh	r2, [r4, #12]
    39d6:	9900      	ldr	r1, [sp, #0]
    39d8:	4620      	mov	r0, r4
    39da:	f01b f99f 	bl	1ed1c <nvs_flash_cmp_const.constprop.6>
	if (rc < 0) {
    39de:	1e05      	subs	r5, r0, #0
    39e0:	da3e      	bge.n	3a60 <nvs_init+0x24c>
	z_impl_k_mutex_unlock(mutex);
    39e2:	4630      	mov	r0, r6
    39e4:	f018 fbc6 	bl	1c174 <z_impl_k_mutex_unlock>
	if (rc) {
    39e8:	2d00      	cmp	r5, #0
    39ea:	f47f af32 	bne.w	3852 <nvs_init+0x3e>
	fs->ready = true;
    39ee:	2301      	movs	r3, #1
    39f0:	7463      	strb	r3, [r4, #17]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    39f2:	2203      	movs	r2, #3
    39f4:	f04f 0300 	mov.w	r3, #0
    39f8:	f362 0307 	bfi	r3, r2, #0, #8
    39fc:	4e31      	ldr	r6, [pc, #196]	; (3ac4 <nvs_init+0x2b0>)
    39fe:	4a30      	ldr	r2, [pc, #192]	; (3ac0 <nvs_init+0x2ac>)
    3a00:	89e1      	ldrh	r1, [r4, #14]
    3a02:	4837      	ldr	r0, [pc, #220]	; (3ae0 <nvs_init+0x2cc>)
    3a04:	1ab6      	subs	r6, r6, r2
    3a06:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    3a0a:	f366 138f 	bfi	r3, r6, #6, #10
    3a0e:	89a2      	ldrh	r2, [r4, #12]
    3a10:	f01b f841 	bl	1ea96 <log_2>
	LOG_INF("alloc wra: %d, %x",
    3a14:	6861      	ldr	r1, [r4, #4]
    3a16:	4833      	ldr	r0, [pc, #204]	; (3ae4 <nvs_init+0x2d0>)
    3a18:	2203      	movs	r2, #3
    3a1a:	f04f 0300 	mov.w	r3, #0
    3a1e:	f362 0307 	bfi	r3, r2, #0, #8
    3a22:	f366 138f 	bfi	r3, r6, #6, #10
    3a26:	b28a      	uxth	r2, r1
    3a28:	0c09      	lsrs	r1, r1, #16
    3a2a:	f01b f834 	bl	1ea96 <log_2>
	LOG_INF("data wra: %d, %x",
    3a2e:	68a1      	ldr	r1, [r4, #8]
    3a30:	482d      	ldr	r0, [pc, #180]	; (3ae8 <nvs_init+0x2d4>)
    3a32:	2203      	movs	r2, #3
    3a34:	f04f 0300 	mov.w	r3, #0
    3a38:	f362 0307 	bfi	r3, r2, #0, #8
    3a3c:	f366 138f 	bfi	r3, r6, #6, #10
    3a40:	b28a      	uxth	r2, r1
    3a42:	0c09      	lsrs	r1, r1, #16
    3a44:	f01b f827 	bl	1ea96 <log_2>
	return 0;
    3a48:	e703      	b.n	3852 <nvs_init+0x3e>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    3a4a:	f1b9 0f00 	cmp.w	r9, #0
    3a4e:	d034      	beq.n	3aba <nvs_init+0x2a6>
				return -ESPIPE;
    3a50:	f06f 051c 	mvn.w	r5, #28
    3a54:	e6fd      	b.n	3852 <nvs_init+0x3e>
		fs->data_wra += fs->write_block_size;
    3a56:	68a3      	ldr	r3, [r4, #8]
    3a58:	7c22      	ldrb	r2, [r4, #16]
    3a5a:	4413      	add	r3, r2
    3a5c:	60a3      	str	r3, [r4, #8]
    3a5e:	e7a4      	b.n	39aa <nvs_init+0x196>
	if (rc) {
    3a60:	d0bf      	beq.n	39e2 <nvs_init+0x1ce>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    3a62:	6861      	ldr	r1, [r4, #4]
    3a64:	4620      	mov	r0, r4
    3a66:	f01b f97c 	bl	1ed62 <nvs_flash_erase_sector>
		if (rc) {
    3a6a:	4605      	mov	r5, r0
    3a6c:	2800      	cmp	r0, #0
    3a6e:	d1b8      	bne.n	39e2 <nvs_init+0x1ce>
		fs->ate_wra &= ADDR_SECT_MASK;
    3a70:	6860      	ldr	r0, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    3a72:	89a3      	ldrh	r3, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    3a74:	ea00 0008 	and.w	r0, r0, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    3a78:	4418      	add	r0, r3
    3a7a:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
    3a7e:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    3a80:	ea00 0008 	and.w	r0, r0, r8
    3a84:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    3a86:	4620      	mov	r0, r4
    3a88:	f7ff fe22 	bl	36d0 <nvs_gc>
    3a8c:	4605      	mov	r5, r0
		if (rc) {
    3a8e:	e7a8      	b.n	39e2 <nvs_init+0x1ce>
		if (!nvs_ate_crc8_check(&last_ate)) {
    3a90:	a801      	add	r0, sp, #4
    3a92:	f01b f91b 	bl	1eccc <nvs_ate_crc8_check>
    3a96:	6865      	ldr	r5, [r4, #4]
    3a98:	b978      	cbnz	r0, 3aba <nvs_init+0x2a6>
			fs->data_wra = addr & ADDR_SECT_MASK;
    3a9a:	9800      	ldr	r0, [sp, #0]
			fs->data_wra += last_ate.offset;
    3a9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    3aa0:	f8bd 9008 	ldrh.w	r9, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    3aa4:	ea00 0008 	and.w	r0, r0, r8
			fs->data_wra += last_ate.offset;
    3aa8:	4402      	add	r2, r0
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    3aaa:	4649      	mov	r1, r9
    3aac:	7c20      	ldrb	r0, [r4, #16]
    3aae:	f01b f922 	bl	1ecf6 <nvs_al_size.isra.1>
    3ab2:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    3ab4:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    3ab6:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    3ab8:	d0c7      	beq.n	3a4a <nvs_init+0x236>
		fs->ate_wra -= ate_size;
    3aba:	1bed      	subs	r5, r5, r7
    3abc:	6065      	str	r5, [r4, #4]
    3abe:	e761      	b.n	3984 <nvs_init+0x170>
    3ac0:	00025a6c 	.word	0x00025a6c
    3ac4:	00025b7c 	.word	0x00025b7c
    3ac8:	00026ef6 	.word	0x00026ef6
    3acc:	00026f12 	.word	0x00026f12
    3ad0:	00026f2f 	.word	0x00026f2f
    3ad4:	00026f47 	.word	0x00026f47
    3ad8:	00026f5b 	.word	0x00026f5b
    3adc:	ffff0000 	.word	0xffff0000
    3ae0:	00026f7e 	.word	0x00026f7e
    3ae4:	00026f95 	.word	0x00026f95
    3ae8:	00026fa7 	.word	0x00026fa7

00003aec <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, u16_t id, const void *data, size_t len)
{
    3aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3af0:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	u32_t wlk_addr, rd_addr;
	u16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    3af2:	7c43      	ldrb	r3, [r0, #17]
{
    3af4:	b089      	sub	sp, #36	; 0x24
    3af6:	4604      	mov	r4, r0
    3af8:	4689      	mov	r9, r1
    3afa:	4690      	mov	r8, r2
	if (!fs->ready) {
    3afc:	b99b      	cbnz	r3, 3b26 <nvs_write+0x3a>
		LOG_ERR("NVS not initialized");
    3afe:	2301      	movs	r3, #1
    3b00:	f04f 0100 	mov.w	r1, #0
    3b04:	f363 0107 	bfi	r1, r3, #0, #8
    3b08:	4a67      	ldr	r2, [pc, #412]	; (3ca8 <nvs_write+0x1bc>)
    3b0a:	4b68      	ldr	r3, [pc, #416]	; (3cac <nvs_write+0x1c0>)
    3b0c:	4868      	ldr	r0, [pc, #416]	; (3cb0 <nvs_write+0x1c4>)
    3b0e:	1a9b      	subs	r3, r3, r2
    3b10:	08db      	lsrs	r3, r3, #3
    3b12:	f363 118f 	bfi	r1, r3, #6, #10
    3b16:	f01a ff9d 	bl	1ea54 <log_0>
		return -EACCES;
    3b1a:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    3b1e:	4628      	mov	r0, r5
    3b20:	b009      	add	sp, #36	; 0x24
    3b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3b26:	f890 a010 	ldrb.w	sl, [r0, #16]
    3b2a:	2108      	movs	r1, #8
    3b2c:	4650      	mov	r0, sl
    3b2e:	f01b f8e2 	bl	1ecf6 <nvs_al_size.isra.1>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    3b32:	89a3      	ldrh	r3, [r4, #12]
    3b34:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    3b38:	1a9b      	subs	r3, r3, r2
    3b3a:	42b3      	cmp	r3, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3b3c:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    3b3e:	f0c0 80ae 	bcc.w	3c9e <nvs_write+0x1b2>
    3b42:	b11e      	cbz	r6, 3b4c <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
    3b44:	f1b8 0f00 	cmp.w	r8, #0
    3b48:	f000 80a9 	beq.w	3c9e <nvs_write+0x1b2>
	wlk_addr = fs->ate_wra;
    3b4c:	6863      	ldr	r3, [r4, #4]
    3b4e:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3b50:	aa04      	add	r2, sp, #16
    3b52:	a903      	add	r1, sp, #12
    3b54:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    3b56:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3b5a:	f7ff fd47 	bl	35ec <nvs_prev_ate>
		if (rc) {
    3b5e:	4605      	mov	r5, r0
    3b60:	2800      	cmp	r0, #0
    3b62:	d1dc      	bne.n	3b1e <nvs_write+0x32>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    3b64:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    3b68:	454b      	cmp	r3, r9
    3b6a:	d005      	beq.n	3b78 <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
    3b6c:	6862      	ldr	r2, [r4, #4]
    3b6e:	9b03      	ldr	r3, [sp, #12]
    3b70:	429a      	cmp	r2, r3
    3b72:	d1ed      	bne.n	3b50 <nvs_write+0x64>
		if (len == 0) {
    3b74:	b9de      	cbnz	r6, 3bae <nvs_write+0xc2>
    3b76:	e7d2      	b.n	3b1e <nvs_write+0x32>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    3b78:	a804      	add	r0, sp, #16
    3b7a:	f01b f8a7 	bl	1eccc <nvs_ate_crc8_check>
    3b7e:	2800      	cmp	r0, #0
    3b80:	d1f4      	bne.n	3b6c <nvs_write+0x80>
		if (len == 0) {
    3b82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3b86:	b186      	cbz	r6, 3baa <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    3b88:	42b3      	cmp	r3, r6
    3b8a:	d110      	bne.n	3bae <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    3b8c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    3b90:	ea4f 411b 	mov.w	r1, fp, lsr #16
    3b94:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    3b96:	4401      	add	r1, r0
    3b98:	4633      	mov	r3, r6
    3b9a:	4642      	mov	r2, r8
    3b9c:	4620      	mov	r0, r4
    3b9e:	f01b f86d 	bl	1ec7c <nvs_flash_block_cmp>
			if (rc <= 0) {
    3ba2:	2800      	cmp	r0, #0
    3ba4:	dc03      	bgt.n	3bae <nvs_write+0xc2>
    3ba6:	4605      	mov	r5, r0
    3ba8:	e7b9      	b.n	3b1e <nvs_write+0x32>
			if (wlk_ate.len == 0U) {
    3baa:	2b00      	cmp	r3, #0
    3bac:	d0b7      	beq.n	3b1e <nvs_write+0x32>
	data_size = nvs_al_size(fs, len);
    3bae:	4631      	mov	r1, r6
    3bb0:	4650      	mov	r0, sl
    3bb2:	f01b f8a0 	bl	1ecf6 <nvs_al_size.isra.1>
	if (data_size) {
    3bb6:	2800      	cmp	r0, #0
    3bb8:	d13e      	bne.n	3c38 <nvs_write+0x14c>
	u16_t required_space = 0U; /* no space, appropriate for delete ate */
    3bba:	4607      	mov	r7, r0
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    3bbc:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    3bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3bc4:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
    3bc6:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 3cb4 <nvs_write+0x1c8>
    3bca:	f018 fa61 	bl	1c090 <z_impl_k_mutex_lock>
	gc_count = 0;
    3bce:	2300      	movs	r3, #0
		if (gc_count == fs->sector_count) {
    3bd0:	89e2      	ldrh	r2, [r4, #14]
    3bd2:	4293      	cmp	r3, r2
    3bd4:	d060      	beq.n	3c98 <nvs_write+0x1ac>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    3bd6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    3bda:	1878      	adds	r0, r7, r1
    3bdc:	4282      	cmp	r2, r0
    3bde:	d32e      	bcc.n	3c3e <nvs_write+0x152>
	entry.part = 0xff;
    3be0:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    3be2:	a806      	add	r0, sp, #24
	entry.id = id;
    3be4:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    3be8:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (u16_t)len;
    3bec:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    3bf0:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    3bf4:	f01b f876 	bl	1ece4 <nvs_ate_crc8_update>
	if (!len) {
    3bf8:	b136      	cbz	r6, 3c08 <nvs_write+0x11c>
    3bfa:	4633      	mov	r3, r6
    3bfc:	4642      	mov	r2, r8
    3bfe:	68a1      	ldr	r1, [r4, #8]
    3c00:	4620      	mov	r0, r4
    3c02:	f01b f8d4 	bl	1edae <nvs_flash_al_wrt.part.4>
    3c06:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    3c08:	4631      	mov	r1, r6
    3c0a:	7c20      	ldrb	r0, [r4, #16]
    3c0c:	f01b f873 	bl	1ecf6 <nvs_al_size.isra.1>
    3c10:	68a3      	ldr	r3, [r4, #8]
    3c12:	4418      	add	r0, r3
    3c14:	60a0      	str	r0, [r4, #8]
	if (rc) {
    3c16:	2d00      	cmp	r5, #0
    3c18:	d144      	bne.n	3ca4 <nvs_write+0x1b8>
	rc = nvs_flash_ate_wrt(fs, &entry);
    3c1a:	a906      	add	r1, sp, #24
    3c1c:	4620      	mov	r0, r4
    3c1e:	f01b f90a 	bl	1ee36 <nvs_flash_ate_wrt>
	if (rc) {
    3c22:	4605      	mov	r5, r0
    3c24:	2800      	cmp	r0, #0
    3c26:	d13d      	bne.n	3ca4 <nvs_write+0x1b8>
	rc = len;
    3c28:	4632      	mov	r2, r6
    3c2a:	9201      	str	r2, [sp, #4]
	z_impl_k_mutex_unlock(mutex);
    3c2c:	4650      	mov	r0, sl
    3c2e:	f018 faa1 	bl	1c174 <z_impl_k_mutex_unlock>
	return rc;
    3c32:	9a01      	ldr	r2, [sp, #4]
    3c34:	4615      	mov	r5, r2
    3c36:	e772      	b.n	3b1e <nvs_write+0x32>
		required_space = data_size + ate_size;
    3c38:	4407      	add	r7, r0
    3c3a:	b2bf      	uxth	r7, r7
    3c3c:	e7be      	b.n	3bbc <nvs_write+0xd0>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3c3e:	2108      	movs	r1, #8
    3c40:	7c20      	ldrb	r0, [r4, #16]
    3c42:	9301      	str	r3, [sp, #4]
    3c44:	f01b f857 	bl	1ecf6 <nvs_al_size.isra.1>
	close_ate.id = 0xFFFF;
    3c48:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3c4c:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    3c50:	2100      	movs	r1, #0
    3c52:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (u16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    3c56:	1811      	adds	r1, r2, r0
    3c58:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    3c5c:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    3c5e:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    3c62:	440a      	add	r2, r1
    3c64:	1a12      	subs	r2, r2, r0
    3c66:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    3c68:	a806      	add	r0, sp, #24
    3c6a:	f01b f83b 	bl	1ece4 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    3c6e:	a906      	add	r1, sp, #24
    3c70:	4620      	mov	r0, r4
    3c72:	f01b f8e0 	bl	1ee36 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    3c76:	1d21      	adds	r1, r4, #4
    3c78:	89e0      	ldrh	r0, [r4, #14]
    3c7a:	f01b f845 	bl	1ed08 <nvs_sector_advance.isra.2>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    3c7e:	6862      	ldr	r2, [r4, #4]
    3c80:	ea02 020b 	and.w	r2, r2, fp
    3c84:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    3c86:	4620      	mov	r0, r4
    3c88:	f7ff fd22 	bl	36d0 <nvs_gc>
		if (rc) {
    3c8c:	4602      	mov	r2, r0
    3c8e:	2800      	cmp	r0, #0
    3c90:	d1cb      	bne.n	3c2a <nvs_write+0x13e>
		gc_count++;
    3c92:	9b01      	ldr	r3, [sp, #4]
    3c94:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    3c96:	e79b      	b.n	3bd0 <nvs_write+0xe4>
			rc = -ENOSPC;
    3c98:	f06f 021b 	mvn.w	r2, #27
    3c9c:	e7c5      	b.n	3c2a <nvs_write+0x13e>
		return -EINVAL;
    3c9e:	f06f 0515 	mvn.w	r5, #21
    3ca2:	e73c      	b.n	3b1e <nvs_write+0x32>
			if (rc) {
    3ca4:	462a      	mov	r2, r5
    3ca6:	e7c0      	b.n	3c2a <nvs_write+0x13e>
    3ca8:	00025a6c 	.word	0x00025a6c
    3cac:	00025b7c 	.word	0x00025b7c
    3cb0:	00026ee2 	.word	0x00026ee2
    3cb4:	ffff0000 	.word	0xffff0000

00003cb8 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, u16_t id, void *data, size_t len,
		      u16_t cnt)
{
    3cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    3cbc:	461f      	mov	r7, r3
	u32_t wlk_addr, rd_addr;
	u16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    3cbe:	7c43      	ldrb	r3, [r0, #17]
{
    3cc0:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    3cc4:	4604      	mov	r4, r0
    3cc6:	468a      	mov	sl, r1
    3cc8:	4691      	mov	r9, r2
	if (!fs->ready) {
    3cca:	b993      	cbnz	r3, 3cf2 <nvs_read_hist+0x3a>
		LOG_ERR("NVS not initialized");
    3ccc:	2301      	movs	r3, #1
    3cce:	f04f 0100 	mov.w	r1, #0
    3cd2:	f363 0107 	bfi	r1, r3, #0, #8
    3cd6:	4a29      	ldr	r2, [pc, #164]	; (3d7c <nvs_read_hist+0xc4>)
    3cd8:	4b29      	ldr	r3, [pc, #164]	; (3d80 <nvs_read_hist+0xc8>)
    3cda:	482a      	ldr	r0, [pc, #168]	; (3d84 <nvs_read_hist+0xcc>)
    3cdc:	1a9b      	subs	r3, r3, r2
    3cde:	08db      	lsrs	r3, r3, #3
    3ce0:	f363 118f 	bfi	r1, r3, #6, #10
    3ce4:	f01a feb6 	bl	1ea54 <log_0>
		return -EACCES;
    3ce8:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    3cec:	b004      	add	sp, #16
    3cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3cf2:	2108      	movs	r1, #8
    3cf4:	7c00      	ldrb	r0, [r0, #16]
    3cf6:	f01a fffe 	bl	1ecf6 <nvs_al_size.isra.1>
	if (len > (fs->sector_size - 2 * ate_size)) {
    3cfa:	89a3      	ldrh	r3, [r4, #12]
    3cfc:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
    3d00:	42b8      	cmp	r0, r7
    3d02:	d338      	bcc.n	3d76 <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
    3d04:	6863      	ldr	r3, [r4, #4]
    3d06:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    3d08:	2500      	movs	r5, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3d0a:	aa02      	add	r2, sp, #8
    3d0c:	a901      	add	r1, sp, #4
    3d0e:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    3d10:	9e01      	ldr	r6, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3d12:	f7ff fc6b 	bl	35ec <nvs_prev_ate>
		if (rc) {
    3d16:	2800      	cmp	r0, #0
    3d18:	d1e8      	bne.n	3cec <nvs_read_hist+0x34>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    3d1a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3d1e:	4553      	cmp	r3, sl
    3d20:	d105      	bne.n	3d2e <nvs_read_hist+0x76>
    3d22:	a802      	add	r0, sp, #8
    3d24:	f01a ffd2 	bl	1eccc <nvs_ate_crc8_check>
    3d28:	b908      	cbnz	r0, 3d2e <nvs_read_hist+0x76>
			cnt_his++;
    3d2a:	3501      	adds	r5, #1
    3d2c:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    3d2e:	6862      	ldr	r2, [r4, #4]
    3d30:	9b01      	ldr	r3, [sp, #4]
    3d32:	429a      	cmp	r2, r3
    3d34:	d018      	beq.n	3d68 <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
    3d36:	4545      	cmp	r5, r8
    3d38:	d9e7      	bls.n	3d0a <nvs_read_hist+0x52>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    3d3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    3d3e:	b1bb      	cbz	r3, 3d70 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    3d40:	4545      	cmp	r5, r8
    3d42:	d315      	bcc.n	3d70 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
    3d44:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    3d48:	0c31      	lsrs	r1, r6, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    3d4a:	42bb      	cmp	r3, r7
	rd_addr &= ADDR_SECT_MASK;
    3d4c:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    3d50:	bf28      	it	cs
    3d52:	463b      	movcs	r3, r7
    3d54:	4401      	add	r1, r0
    3d56:	464a      	mov	r2, r9
    3d58:	4620      	mov	r0, r4
    3d5a:	f01a ff81 	bl	1ec60 <nvs_flash_rd>
	if (rc) {
    3d5e:	2800      	cmp	r0, #0
    3d60:	d1c4      	bne.n	3cec <nvs_read_hist+0x34>
	return wlk_ate.len;
    3d62:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    3d66:	e7c1      	b.n	3cec <nvs_read_hist+0x34>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    3d68:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3d6c:	4553      	cmp	r3, sl
    3d6e:	d0e4      	beq.n	3d3a <nvs_read_hist+0x82>
		return -ENOENT;
    3d70:	f06f 0001 	mvn.w	r0, #1
    3d74:	e7ba      	b.n	3cec <nvs_read_hist+0x34>
		return -EINVAL;
    3d76:	f06f 0015 	mvn.w	r0, #21
    3d7a:	e7b7      	b.n	3cec <nvs_read_hist+0x34>
    3d7c:	00025a6c 	.word	0x00025a6c
    3d80:	00025b7c 	.word	0x00025b7c
    3d84:	00026ee2 	.word	0x00026ee2

00003d88 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    3d88:	4b08      	ldr	r3, [pc, #32]	; (3dac <get_flash_area_from_id+0x24>)
{
    3d8a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    3d8c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    3d8e:	4b08      	ldr	r3, [pc, #32]	; (3db0 <get_flash_area_from_id+0x28>)
    3d90:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    3d92:	2300      	movs	r3, #0
    3d94:	429d      	cmp	r5, r3
    3d96:	dc02      	bgt.n	3d9e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    3d98:	2200      	movs	r2, #0
}
    3d9a:	4610      	mov	r0, r2
    3d9c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    3d9e:	011c      	lsls	r4, r3, #4
    3da0:	190a      	adds	r2, r1, r4
    3da2:	5d0c      	ldrb	r4, [r1, r4]
    3da4:	4284      	cmp	r4, r0
    3da6:	d0f8      	beq.n	3d9a <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    3da8:	3301      	adds	r3, #1
    3daa:	e7f3      	b.n	3d94 <get_flash_area_from_id+0xc>
    3dac:	00025f2c 	.word	0x00025f2c
    3db0:	2000df0c 	.word	0x2000df0c

00003db4 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    3db4:	4b08      	ldr	r3, [pc, #32]	; (3dd8 <flash_area_open+0x24>)
    3db6:	681b      	ldr	r3, [r3, #0]
{
    3db8:	b510      	push	{r4, lr}
    3dba:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    3dbc:	b12b      	cbz	r3, 3dca <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    3dbe:	f7ff ffe3 	bl	3d88 <get_flash_area_from_id>
	if (area == NULL) {
    3dc2:	b128      	cbz	r0, 3dd0 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    3dc4:	6020      	str	r0, [r4, #0]
	return 0;
    3dc6:	2000      	movs	r0, #0
}
    3dc8:	bd10      	pop	{r4, pc}
		return -EACCES;
    3dca:	f06f 000c 	mvn.w	r0, #12
    3dce:	e7fb      	b.n	3dc8 <flash_area_open+0x14>
		return -ENOENT;
    3dd0:	f06f 0001 	mvn.w	r0, #1
    3dd4:	e7f8      	b.n	3dc8 <flash_area_open+0x14>
    3dd6:	bf00      	nop
    3dd8:	2000df0c 	.word	0x2000df0c

00003ddc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    3ddc:	b530      	push	{r4, r5, lr}
    3dde:	b089      	sub	sp, #36	; 0x24
    3de0:	460c      	mov	r4, r1
    3de2:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    3de4:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    3de6:	f7ff ffcf 	bl	3d88 <get_flash_area_from_id>
	if (fa == NULL) {
    3dea:	b1b8      	cbz	r0, 3e1c <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    3dec:	6843      	ldr	r3, [r0, #4]
    3dee:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    3df0:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    3df2:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    3df4:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    3df6:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    3dfa:	2300      	movs	r3, #0
    3dfc:	9305      	str	r3, [sp, #20]
	cb_data->status = 0;
    3dfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3e02:	f017 fea9 	bl	1bb58 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    3e06:	b160      	cbz	r0, 3e22 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    3e08:	aa01      	add	r2, sp, #4
    3e0a:	4907      	ldr	r1, [pc, #28]	; (3e28 <flash_area_get_sectors+0x4c>)
    3e0c:	f01e fe56 	bl	22abc <flash_page_foreach>
	if (cb_data->status == 0) {
    3e10:	9807      	ldr	r0, [sp, #28]
    3e12:	b908      	cbnz	r0, 3e18 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    3e14:	9b05      	ldr	r3, [sp, #20]
    3e16:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    3e18:	b009      	add	sp, #36	; 0x24
    3e1a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    3e1c:	f06f 0015 	mvn.w	r0, #21
    3e20:	e7fa      	b.n	3e18 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    3e22:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    3e26:	e7f7      	b.n	3e18 <flash_area_get_sectors+0x3c>
    3e28:	0001ee6f 	.word	0x0001ee6f

00003e2c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    3e2c:	4b0e      	ldr	r3, [pc, #56]	; (3e68 <settings_save_one+0x3c>)
{
    3e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    3e32:	681c      	ldr	r4, [r3, #0]
{
    3e34:	4606      	mov	r6, r0
    3e36:	460f      	mov	r7, r1
    3e38:	4690      	mov	r8, r2
	if (!cs) {
    3e3a:	b194      	cbz	r4, 3e62 <settings_save_one+0x36>
	return z_impl_k_mutex_lock(mutex, timeout);
    3e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e40:	480a      	ldr	r0, [pc, #40]	; (3e6c <settings_save_one+0x40>)
    3e42:	f018 f925 	bl	1c090 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    3e46:	6863      	ldr	r3, [r4, #4]
    3e48:	463a      	mov	r2, r7
    3e4a:	689d      	ldr	r5, [r3, #8]
    3e4c:	4631      	mov	r1, r6
    3e4e:	4643      	mov	r3, r8
    3e50:	4620      	mov	r0, r4
    3e52:	47a8      	blx	r5
    3e54:	4604      	mov	r4, r0
	z_impl_k_mutex_unlock(mutex);
    3e56:	4805      	ldr	r0, [pc, #20]	; (3e6c <settings_save_one+0x40>)
    3e58:	f018 f98c 	bl	1c174 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    3e5c:	4620      	mov	r0, r4
    3e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    3e62:	f06f 0401 	mvn.w	r4, #1
    3e66:	e7f9      	b.n	3e5c <settings_save_one+0x30>
    3e68:	20000148 	.word	0x20000148
    3e6c:	2000e694 	.word	0x2000e694

00003e70 <settings_src_register>:
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    3e70:	4b0e      	ldr	r3, [pc, #56]	; (3eac <settings_src_register+0x3c>)
{
    3e72:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    3e74:	681c      	ldr	r4, [r3, #0]
	prev = NULL;
    3e76:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    3e78:	4622      	mov	r2, r4
    3e7a:	b932      	cbnz	r2, 3e8a <settings_src_register+0x1a>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node);

Z_GENLIST_INSERT(slist, snode)
    3e7c:	b941      	cbnz	r1, 3e90 <settings_src_register+0x20>
	parent->next = child;
    3e7e:	6004      	str	r4, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
    3e80:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    3e82:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    3e84:	b95a      	cbnz	r2, 3e9e <settings_src_register+0x2e>
	list->tail = node;
    3e86:	6058      	str	r0, [r3, #4]
    3e88:	e009      	b.n	3e9e <settings_src_register+0x2e>
    3e8a:	4611      	mov	r1, r2
    3e8c:	6812      	ldr	r2, [r2, #0]
    3e8e:	e7f4      	b.n	3e7a <settings_src_register+0xa>
Z_GENLIST_INSERT(slist, snode)
    3e90:	680c      	ldr	r4, [r1, #0]
    3e92:	b93c      	cbnz	r4, 3ea4 <settings_src_register+0x34>
	parent->next = child;
    3e94:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    3e96:	685a      	ldr	r2, [r3, #4]
    3e98:	b912      	cbnz	r2, 3ea0 <settings_src_register+0x30>
	list->head = node;
    3e9a:	e9c3 0000 	strd	r0, r0, [r3]
}
    3e9e:	bd10      	pop	{r4, pc}
	parent->next = child;
    3ea0:	6010      	str	r0, [r2, #0]
    3ea2:	e7f0      	b.n	3e86 <settings_src_register+0x16>
    3ea4:	6004      	str	r4, [r0, #0]
    3ea6:	6008      	str	r0, [r1, #0]
    3ea8:	e7f9      	b.n	3e9e <settings_src_register+0x2e>
    3eaa:	bf00      	nop
    3eac:	20000140 	.word	0x20000140

00003eb0 <settings_dst_register>:
	settings_save_dst = cs;
    3eb0:	4b01      	ldr	r3, [pc, #4]	; (3eb8 <settings_dst_register+0x8>)
    3eb2:	6018      	str	r0, [r3, #0]
}
    3eb4:	4770      	bx	lr
    3eb6:	bf00      	nop
    3eb8:	20000148 	.word	0x20000148

00003ebc <settings_load_subtree>:
{
    3ebc:	b530      	push	{r4, r5, lr}
    3ebe:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    3ec0:	2300      	movs	r3, #0
{
    3ec2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    3ec4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    3ec8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    3eca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3ece:	480b      	ldr	r0, [pc, #44]	; (3efc <settings_load_subtree+0x40>)
    3ed0:	f018 f8de 	bl	1c090 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3ed4:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <settings_load_subtree+0x44>)
    3ed6:	681c      	ldr	r4, [r3, #0]
    3ed8:	b134      	cbz	r4, 3ee8 <settings_load_subtree+0x2c>
		cs->cs_itf->csi_load(cs, &arg);
    3eda:	6863      	ldr	r3, [r4, #4]
    3edc:	4620      	mov	r0, r4
    3ede:	681b      	ldr	r3, [r3, #0]
    3ee0:	a901      	add	r1, sp, #4
    3ee2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3ee4:	6824      	ldr	r4, [r4, #0]
	return node->next;
    3ee6:	e7f7      	b.n	3ed8 <settings_load_subtree+0x1c>
	rc = settings_commit_subtree(subtree);
    3ee8:	4628      	mov	r0, r5
    3eea:	f000 f8cb 	bl	4084 <settings_commit_subtree>
    3eee:	4604      	mov	r4, r0
	z_impl_k_mutex_unlock(mutex);
    3ef0:	4802      	ldr	r0, [pc, #8]	; (3efc <settings_load_subtree+0x40>)
    3ef2:	f018 f93f 	bl	1c174 <z_impl_k_mutex_unlock>
}
    3ef6:	4620      	mov	r0, r4
    3ef8:	b005      	add	sp, #20
    3efa:	bd30      	pop	{r4, r5, pc}
    3efc:	2000e694 	.word	0x2000e694
    3f00:	20000140 	.word	0x20000140

00003f04 <settings_load_subtree_direct>:
{
    3f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    3f06:	e9cd 0101 	strd	r0, r1, [sp, #4]
    3f0a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    3f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f10:	4809      	ldr	r0, [pc, #36]	; (3f38 <settings_load_subtree_direct+0x34>)
    3f12:	f018 f8bd 	bl	1c090 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3f16:	4b09      	ldr	r3, [pc, #36]	; (3f3c <settings_load_subtree_direct+0x38>)
    3f18:	681c      	ldr	r4, [r3, #0]
    3f1a:	b134      	cbz	r4, 3f2a <settings_load_subtree_direct+0x26>
		cs->cs_itf->csi_load(cs, &arg);
    3f1c:	6863      	ldr	r3, [r4, #4]
    3f1e:	4620      	mov	r0, r4
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	a901      	add	r1, sp, #4
    3f24:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3f26:	6824      	ldr	r4, [r4, #0]
	return node->next;
    3f28:	e7f7      	b.n	3f1a <settings_load_subtree_direct+0x16>
	z_impl_k_mutex_unlock(mutex);
    3f2a:	4803      	ldr	r0, [pc, #12]	; (3f38 <settings_load_subtree_direct+0x34>)
    3f2c:	f018 f922 	bl	1c174 <z_impl_k_mutex_unlock>
}
    3f30:	2000      	movs	r0, #0
    3f32:	b004      	add	sp, #16
    3f34:	bd10      	pop	{r4, pc}
    3f36:	bf00      	nop
    3f38:	2000e694 	.word	0x2000e694
    3f3c:	20000140 	.word	0x20000140

00003f40 <settings_store_init>:
	list->head = NULL;
    3f40:	4b02      	ldr	r3, [pc, #8]	; (3f4c <settings_store_init+0xc>)
    3f42:	2200      	movs	r2, #0
	list->tail = NULL;
    3f44:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    3f48:	4770      	bx	lr
    3f4a:	bf00      	nop
    3f4c:	20000140 	.word	0x20000140

00003f50 <settings_init>:
	list->head = NULL;
    3f50:	4b02      	ldr	r3, [pc, #8]	; (3f5c <settings_init+0xc>)
    3f52:	2200      	movs	r2, #0
	list->tail = NULL;
    3f54:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    3f58:	f7ff bff2 	b.w	3f40 <settings_store_init>
    3f5c:	2000014c 	.word	0x2000014c

00003f60 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    3f60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3f64:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    3f66:	460e      	mov	r6, r1
    3f68:	b109      	cbz	r1, 3f6e <settings_parse_and_lookup+0xe>
		*next = NULL;
    3f6a:	2300      	movs	r3, #0
    3f6c:	600b      	str	r3, [r1, #0]
    3f6e:	4c1c      	ldr	r4, [pc, #112]	; (3fe0 <settings_parse_and_lookup+0x80>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3f70:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3fe8 <settings_parse_and_lookup+0x88>
    3f74:	2500      	movs	r5, #0
    3f76:	4544      	cmp	r4, r8
    3f78:	d308      	bcc.n	3f8c <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3f7a:	4b1a      	ldr	r3, [pc, #104]	; (3fe4 <settings_parse_and_lookup+0x84>)
    3f7c:	681c      	ldr	r4, [r3, #0]
    3f7e:	b10c      	cbz	r4, 3f84 <settings_parse_and_lookup+0x24>
    3f80:	3c14      	subs	r4, #20
    3f82:	b9c4      	cbnz	r4, 3fb6 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    3f84:	4628      	mov	r0, r5
    3f86:	b002      	add	sp, #8
    3f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3f8c:	aa01      	add	r2, sp, #4
    3f8e:	6821      	ldr	r1, [r4, #0]
    3f90:	4638      	mov	r0, r7
    3f92:	f01a ff91 	bl	1eeb8 <settings_name_steq>
    3f96:	b160      	cbz	r0, 3fb2 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    3f98:	b925      	cbnz	r5, 3fa4 <settings_parse_and_lookup+0x44>
			if (next) {
    3f9a:	b10e      	cbz	r6, 3fa0 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    3f9c:	9b01      	ldr	r3, [sp, #4]
    3f9e:	6033      	str	r3, [r6, #0]
    3fa0:	4625      	mov	r5, r4
    3fa2:	e006      	b.n	3fb2 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3fa4:	2200      	movs	r2, #0
    3fa6:	6829      	ldr	r1, [r5, #0]
    3fa8:	6820      	ldr	r0, [r4, #0]
    3faa:	f01a ff85 	bl	1eeb8 <settings_name_steq>
    3fae:	2800      	cmp	r0, #0
    3fb0:	d1f3      	bne.n	3f9a <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3fb2:	3414      	adds	r4, #20
    3fb4:	e7df      	b.n	3f76 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3fb6:	aa01      	add	r2, sp, #4
    3fb8:	6821      	ldr	r1, [r4, #0]
    3fba:	4638      	mov	r0, r7
    3fbc:	f01a ff7c 	bl	1eeb8 <settings_name_steq>
    3fc0:	b160      	cbz	r0, 3fdc <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    3fc2:	b925      	cbnz	r5, 3fce <settings_parse_and_lookup+0x6e>
			if (next) {
    3fc4:	b10e      	cbz	r6, 3fca <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    3fc6:	9b01      	ldr	r3, [sp, #4]
    3fc8:	6033      	str	r3, [r6, #0]
    3fca:	4625      	mov	r5, r4
    3fcc:	e006      	b.n	3fdc <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3fce:	2200      	movs	r2, #0
    3fd0:	6829      	ldr	r1, [r5, #0]
    3fd2:	6820      	ldr	r0, [r4, #0]
    3fd4:	f01a ff70 	bl	1eeb8 <settings_name_steq>
    3fd8:	2800      	cmp	r0, #0
    3fda:	d1f3      	bne.n	3fc4 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3fdc:	6964      	ldr	r4, [r4, #20]
    3fde:	e7ce      	b.n	3f7e <settings_parse_and_lookup+0x1e>
    3fe0:	00025a08 	.word	0x00025a08
    3fe4:	2000014c 	.word	0x2000014c
    3fe8:	00025a6c 	.word	0x00025a6c

00003fec <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    3fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3ff0:	b085      	sub	sp, #20
    3ff2:	4605      	mov	r5, r0
    3ff4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    3ff6:	9003      	str	r0, [sp, #12]
{
    3ff8:	460e      	mov	r6, r1
    3ffa:	4617      	mov	r7, r2
    3ffc:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
    3ffe:	b1b4      	cbz	r4, 402e <CONFIG_HEAP_MEM_POOL_SIZE+0x2e>
    4000:	6821      	ldr	r1, [r4, #0]
    4002:	b179      	cbz	r1, 4024 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    4004:	aa03      	add	r2, sp, #12
    4006:	f01a ff57 	bl	1eeb8 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    400a:	b958      	cbnz	r0, 4024 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    400c:	2000      	movs	r0, #0
    400e:	e006      	b.n	401e <CONFIG_HEAP_MEM_POOL_SIZE+0x1e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    4010:	68a3      	ldr	r3, [r4, #8]
    4012:	9300      	str	r3, [sp, #0]
    4014:	463a      	mov	r2, r7
    4016:	4643      	mov	r3, r8
    4018:	4631      	mov	r1, r6
    401a:	9803      	ldr	r0, [sp, #12]
    401c:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    401e:	b005      	add	sp, #20
    4020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    4024:	f8d4 9004 	ldr.w	r9, [r4, #4]
    4028:	f1b9 0f00 	cmp.w	r9, #0
    402c:	d1f0      	bne.n	4010 <CONFIG_HEAP_MEM_POOL_SIZE+0x10>
		ch = settings_parse_and_lookup(name, &name_key);
    402e:	a903      	add	r1, sp, #12
    4030:	4628      	mov	r0, r5
    4032:	f7ff ff95 	bl	3f60 <settings_parse_and_lookup>
		if (!ch) {
    4036:	2800      	cmp	r0, #0
    4038:	d0e8      	beq.n	400c <CONFIG_HEAP_MEM_POOL_SIZE+0xc>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    403a:	6884      	ldr	r4, [r0, #8]
    403c:	9803      	ldr	r0, [sp, #12]
    403e:	4631      	mov	r1, r6
    4040:	4643      	mov	r3, r8
    4042:	463a      	mov	r2, r7
    4044:	47a0      	blx	r4
		if (rc != 0) {
    4046:	4606      	mov	r6, r0
    4048:	2800      	cmp	r0, #0
    404a:	d0df      	beq.n	400c <CONFIG_HEAP_MEM_POOL_SIZE+0xc>
			LOG_ERR("set-value failure. key: %s error(%d)",
    404c:	2301      	movs	r3, #1
    404e:	f04f 0400 	mov.w	r4, #0
    4052:	f363 0407 	bfi	r4, r3, #0, #8
    4056:	4908      	ldr	r1, [pc, #32]	; (4078 <CONFIG_HEAP_MEM_POOL_SIZE+0x78>)
    4058:	4b08      	ldr	r3, [pc, #32]	; (407c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>)
    405a:	1ac9      	subs	r1, r1, r3
    405c:	08c9      	lsrs	r1, r1, #3
    405e:	4628      	mov	r0, r5
    4060:	f361 148f 	bfi	r4, r1, #6, #10
    4064:	f7ff f816 	bl	3094 <log_strdup>
    4068:	4623      	mov	r3, r4
    406a:	4601      	mov	r1, r0
    406c:	4632      	mov	r2, r6
    406e:	4804      	ldr	r0, [pc, #16]	; (4080 <CONFIG_HEAP_MEM_POOL_SIZE+0x80>)
    4070:	f01a fd11 	bl	1ea96 <log_2>
    4074:	e7ca      	b.n	400c <CONFIG_HEAP_MEM_POOL_SIZE+0xc>
    4076:	bf00      	nop
    4078:	00025bc4 	.word	0x00025bc4
    407c:	00025a6c 	.word	0x00025a6c
    4080:	00026fd2 	.word	0x00026fd2

00004084 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    4084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4086:	4c18      	ldr	r4, [pc, #96]	; (40e8 <settings_commit_subtree+0x64>)
    4088:	4f18      	ldr	r7, [pc, #96]	; (40ec <settings_commit_subtree+0x68>)
{
    408a:	4606      	mov	r6, r0
	rc = 0;
    408c:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    408e:	42bc      	cmp	r4, r7
    4090:	d306      	bcc.n	40a0 <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    4092:	4b17      	ldr	r3, [pc, #92]	; (40f0 <settings_commit_subtree+0x6c>)
    4094:	681c      	ldr	r4, [r3, #0]
    4096:	b10c      	cbz	r4, 409c <settings_commit_subtree+0x18>
    4098:	3c14      	subs	r4, #20
    409a:	b99c      	cbnz	r4, 40c4 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    409c:	4628      	mov	r0, r5
    409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    40a0:	b91e      	cbnz	r6, 40aa <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    40a2:	68e3      	ldr	r3, [r4, #12]
    40a4:	b94b      	cbnz	r3, 40ba <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    40a6:	3414      	adds	r4, #20
    40a8:	e7f1      	b.n	408e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    40aa:	2200      	movs	r2, #0
    40ac:	4631      	mov	r1, r6
    40ae:	6820      	ldr	r0, [r4, #0]
    40b0:	f01a ff02 	bl	1eeb8 <settings_name_steq>
    40b4:	2800      	cmp	r0, #0
    40b6:	d1f4      	bne.n	40a2 <settings_commit_subtree+0x1e>
    40b8:	e7f5      	b.n	40a6 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    40ba:	4798      	blx	r3
				rc = rc2;
    40bc:	2d00      	cmp	r5, #0
    40be:	bf08      	it	eq
    40c0:	4605      	moveq	r5, r0
    40c2:	e7f0      	b.n	40a6 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    40c4:	b91e      	cbnz	r6, 40ce <settings_commit_subtree+0x4a>
		if (ch->h_commit) {
    40c6:	68e3      	ldr	r3, [r4, #12]
    40c8:	b94b      	cbnz	r3, 40de <settings_commit_subtree+0x5a>
    40ca:	6964      	ldr	r4, [r4, #20]
    40cc:	e7e3      	b.n	4096 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    40ce:	2200      	movs	r2, #0
    40d0:	4631      	mov	r1, r6
    40d2:	6820      	ldr	r0, [r4, #0]
    40d4:	f01a fef0 	bl	1eeb8 <settings_name_steq>
    40d8:	2800      	cmp	r0, #0
    40da:	d1f4      	bne.n	40c6 <settings_commit_subtree+0x42>
    40dc:	e7f5      	b.n	40ca <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    40de:	4798      	blx	r3
				rc = rc2;
    40e0:	2d00      	cmp	r5, #0
    40e2:	bf08      	it	eq
    40e4:	4605      	moveq	r5, r0
    40e6:	e7f0      	b.n	40ca <settings_commit_subtree+0x46>
    40e8:	00025a08 	.word	0x00025a08
    40ec:	00025a6c 	.word	0x00025a6c
    40f0:	2000014c 	.word	0x2000014c

000040f4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    40f4:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    40f6:	4c06      	ldr	r4, [pc, #24]	; (4110 <settings_subsys_init+0x1c>)
    40f8:	7823      	ldrb	r3, [r4, #0]
    40fa:	b93b      	cbnz	r3, 410c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    40fc:	f7ff ff28 	bl	3f50 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    4100:	f000 f864 	bl	41cc <settings_backend_init>

	if (!err) {
    4104:	b908      	cbnz	r0, 410a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    4106:	2301      	movs	r3, #1
    4108:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    410a:	bd10      	pop	{r4, pc}
		return 0;
    410c:	2000      	movs	r0, #0
    410e:	e7fc      	b.n	410a <settings_subsys_init+0x16>
    4110:	2000605f 	.word	0x2000605f

00004114 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    4114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	u16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    4118:	8e84      	ldrh	r4, [r0, #52]	; 0x34
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    411a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 41c8 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    411e:	3401      	adds	r4, #1
{
    4120:	b098      	sub	sp, #96	; 0x60
    4122:	4680      	mov	r8, r0
    4124:	468a      	mov	sl, r1
	name_id = cf->last_name_id + 1;
    4126:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    4128:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    412c:	1e65      	subs	r5, r4, #1
    412e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    4130:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    4134:	d045      	beq.n	41c2 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    4136:	234a      	movs	r3, #74	; 0x4a
    4138:	aa05      	add	r2, sp, #20
    413a:	4629      	mov	r1, r5
    413c:	4630      	mov	r0, r6
    413e:	f01a fe8f 	bl	1ee60 <nvs_read>
    4142:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    4146:	343f      	adds	r4, #63	; 0x3f
    4148:	b2a4      	uxth	r4, r4
    414a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    414c:	4621      	mov	r1, r4
    414e:	2301      	movs	r3, #1
    4150:	f10d 020b 	add.w	r2, sp, #11
    4154:	4630      	mov	r0, r6
    4156:	f01a fe83 	bl	1ee60 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    415a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    415c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    415e:	dc03      	bgt.n	4168 <settings_nvs_load+0x54>
    4160:	2800      	cmp	r0, #0
    4162:	dc03      	bgt.n	416c <settings_nvs_load+0x58>
{
    4164:	462c      	mov	r4, r5
    4166:	e7e1      	b.n	412c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    4168:	2800      	cmp	r0, #0
    416a:	dc16      	bgt.n	419a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    416c:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
    4170:	42ab      	cmp	r3, r5
    4172:	d109      	bne.n	4188 <settings_nvs_load+0x74>
				cf->last_name_id--;
    4174:	4642      	mov	r2, r8
    4176:	1e6b      	subs	r3, r5, #1
    4178:	f822 3f34 	strh.w	r3, [r2, #52]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    417c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4180:	2302      	movs	r3, #2
    4182:	4630      	mov	r0, r6
    4184:	f7ff fcb2 	bl	3aec <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    4188:	4629      	mov	r1, r5
    418a:	4630      	mov	r0, r6
    418c:	f01a fe64 	bl	1ee58 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    4190:	4621      	mov	r1, r4
    4192:	4630      	mov	r0, r6
    4194:	f01a fe60 	bl	1ee58 <nvs_delete>
			continue;
    4198:	e7e4      	b.n	4164 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    419a:	ab18      	add	r3, sp, #96	; 0x60
    419c:	441f      	add	r7, r3
    419e:	2300      	movs	r3, #0
    41a0:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    41a4:	464a      	mov	r2, r9
    41a6:	f8cd a000 	str.w	sl, [sp]
    41aa:	ab03      	add	r3, sp, #12
    41ac:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    41ae:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    41b0:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    41b4:	f7ff ff1a 	bl	3fec <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    41b8:	2800      	cmp	r0, #0
    41ba:	d0d3      	beq.n	4164 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    41bc:	b018      	add	sp, #96	; 0x60
    41be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41c2:	2000      	movs	r0, #0
	return ret;
    41c4:	e7fa      	b.n	41bc <settings_nvs_load+0xa8>
    41c6:	bf00      	nop
    41c8:	0001ef25 	.word	0x0001ef25

000041cc <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    41cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	u16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	u32_t sector_cnt = 1;
    41ce:	2301      	movs	r3, #1

	rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fa);
    41d0:	4669      	mov	r1, sp
    41d2:	2004      	movs	r0, #4
	u32_t sector_cnt = 1;
    41d4:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fa);
    41d6:	f7ff fded 	bl	3db4 <flash_area_open>
	if (rc) {
    41da:	4604      	mov	r4, r0
    41dc:	2800      	cmp	r0, #0
    41de:	d137      	bne.n	4250 <settings_backend_init+0x84>
		return rc;
	}

	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &sector_cnt,
    41e0:	aa02      	add	r2, sp, #8
    41e2:	a901      	add	r1, sp, #4
    41e4:	2004      	movs	r0, #4
    41e6:	f7ff fdf9 	bl	3ddc <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    41ea:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &sector_cnt,
    41ee:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    41f0:	d02e      	beq.n	4250 <settings_backend_init+0x84>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    41f2:	b140      	cbz	r0, 4206 <settings_backend_init+0x3a>
    41f4:	f110 040c 	adds.w	r4, r0, #12
    41f8:	d005      	beq.n	4206 <settings_backend_init+0x3a>
		k_panic();
    41fa:	4040      	eors	r0, r0
    41fc:	f380 8811 	msr	BASEPRI, r0
    4200:	f04f 0004 	mov.w	r0, #4
    4204:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    4206:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    4208:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    420c:	d223      	bcs.n	4256 <settings_backend_init+0x8a>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    420e:	9a00      	ldr	r2, [sp, #0]
    4210:	2300      	movs	r3, #0
    4212:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    4214:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    4216:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    4218:	4285      	cmp	r5, r0
    421a:	b29c      	uxth	r4, r3
    421c:	d303      	bcc.n	4226 <settings_backend_init+0x5a>
			break;
		}
		cnt++;
    421e:	3301      	adds	r3, #1
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    4220:	2b08      	cmp	r3, #8
    4222:	d1f8      	bne.n	4216 <settings_backend_init+0x4a>
    4224:	461c      	mov	r4, r3
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    4226:	4d0d      	ldr	r5, [pc, #52]	; (425c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    4228:	6853      	ldr	r3, [r2, #4]
    422a:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    422c:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    422e:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    4230:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    4232:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    4234:	63ab      	str	r3, [r5, #56]	; 0x38
	rc = settings_nvs_backend_init(&default_settings_nvs);
    4236:	f01a ff0a 	bl	1f04e <settings_nvs_backend_init>
	if (rc) {
    423a:	4604      	mov	r4, r0
    423c:	b940      	cbnz	r0, 4250 <settings_backend_init+0x84>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    423e:	4e08      	ldr	r6, [pc, #32]	; (4260 <settings_backend_init+0x94>)
    4240:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    4242:	4628      	mov	r0, r5
    4244:	f7ff fe14 	bl	3e70 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    4248:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    424a:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    424c:	f7ff fe30 	bl	3eb0 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    4250:	4620      	mov	r0, r4
    4252:	b004      	add	sp, #16
    4254:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    4256:	f06f 0424 	mvn.w	r4, #36	; 0x24
    425a:	e7f9      	b.n	4250 <settings_backend_init+0x84>
    425c:	20000154 	.word	0x20000154
    4260:	2000df10 	.word	0x2000df10

00004264 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4264:	4b16      	ldr	r3, [pc, #88]	; (42c0 <nrf_power_clock_isr+0x5c>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    4266:	b507      	push	{r0, r1, r2, lr}
    4268:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    426a:	b182      	cbz	r2, 428e <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    426c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4270:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    4274:	07d1      	lsls	r1, r2, #31
    4276:	d50a      	bpl.n	428e <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4278:	2200      	movs	r2, #0
    427a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    427c:	681b      	ldr	r3, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    427e:	4811      	ldr	r0, [pc, #68]	; (42c4 <nrf_power_clock_isr+0x60>)
    4280:	9300      	str	r3, [sp, #0]
    (void)dummy;
    4282:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    4284:	6883      	ldr	r3, [r0, #8]
    4286:	7a59      	ldrb	r1, [r3, #9]
    4288:	b909      	cbnz	r1, 428e <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    428a:	f01a ff0a 	bl	1f0a2 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    428e:	4b0e      	ldr	r3, [pc, #56]	; (42c8 <nrf_power_clock_isr+0x64>)
    4290:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    4292:	b18a      	cbz	r2, 42b8 <nrf_power_clock_isr+0x54>
    return p_reg->INTENSET & mask;
    4294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4298:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    429c:	0792      	lsls	r2, r2, #30
    429e:	d50b      	bpl.n	42b8 <nrf_power_clock_isr+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42a0:	2200      	movs	r2, #0
    42a2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    42a4:	681b      	ldr	r3, [r3, #0]
    42a6:	9301      	str	r3, [sp, #4]
    (void)dummy;
    42a8:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    42aa:	4806      	ldr	r0, [pc, #24]	; (42c4 <nrf_power_clock_isr+0x60>)
    42ac:	2101      	movs	r1, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    42ae:	b003      	add	sp, #12
    42b0:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    42b4:	f01a bef5 	b.w	1f0a2 <clkstarted_handle>
}
    42b8:	b003      	add	sp, #12
    42ba:	f85d fb04 	ldr.w	pc, [sp], #4
    42be:	bf00      	nop
    42c0:	40000100 	.word	0x40000100
    42c4:	2000e524 	.word	0x2000e524
    42c8:	40000104 	.word	0x40000104

000042cc <st7789v_set_orientation>:
	return -ENOTSUP;
}

static int st7789v_set_orientation(const struct device *dev,
			    const enum display_orientation orientation)
{
    42cc:	b508      	push	{r3, lr}
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
    42ce:	b181      	cbz	r1, 42f2 <st7789v_set_orientation+0x26>
		return 0;
	}
	LOG_ERR("Changing display orientation not implemented");
    42d0:	2301      	movs	r3, #1
    42d2:	f04f 0100 	mov.w	r1, #0
    42d6:	f363 0107 	bfi	r1, r3, #0, #8
    42da:	4a07      	ldr	r2, [pc, #28]	; (42f8 <st7789v_set_orientation+0x2c>)
    42dc:	4b07      	ldr	r3, [pc, #28]	; (42fc <st7789v_set_orientation+0x30>)
    42de:	4808      	ldr	r0, [pc, #32]	; (4300 <st7789v_set_orientation+0x34>)
    42e0:	1a9b      	subs	r3, r3, r2
    42e2:	08db      	lsrs	r3, r3, #3
    42e4:	f363 118f 	bfi	r1, r3, #6, #10
    42e8:	f01a fbb4 	bl	1ea54 <log_0>
	return -ENOTSUP;
    42ec:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    42f0:	bd08      	pop	{r3, pc}
		return 0;
    42f2:	4608      	mov	r0, r1
    42f4:	e7fc      	b.n	42f0 <st7789v_set_orientation+0x24>
    42f6:	bf00      	nop
    42f8:	00025a6c 	.word	0x00025a6c
    42fc:	00025b74 	.word	0x00025b74
    4300:	000270d5 	.word	0x000270d5

00004304 <st7789v_set_pixel_format>:
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    4304:	2910      	cmp	r1, #16
{
    4306:	b508      	push	{r3, lr}
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    4308:	d010      	beq.n	432c <st7789v_set_pixel_format+0x28>
	LOG_ERR("Pixel format change not implemented");
    430a:	2301      	movs	r3, #1
    430c:	f04f 0100 	mov.w	r1, #0
    4310:	f363 0107 	bfi	r1, r3, #0, #8
    4314:	4a06      	ldr	r2, [pc, #24]	; (4330 <st7789v_set_pixel_format+0x2c>)
    4316:	4b07      	ldr	r3, [pc, #28]	; (4334 <st7789v_set_pixel_format+0x30>)
    4318:	4807      	ldr	r0, [pc, #28]	; (4338 <st7789v_set_pixel_format+0x34>)
    431a:	1a9b      	subs	r3, r3, r2
    431c:	08db      	lsrs	r3, r3, #3
    431e:	f363 118f 	bfi	r1, r3, #6, #10
    4322:	f01a fb97 	bl	1ea54 <log_0>
	return -ENOTSUP;
    4326:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    432a:	bd08      	pop	{r3, pc}
		return 0;
    432c:	2000      	movs	r0, #0
    432e:	e7fc      	b.n	432a <st7789v_set_pixel_format+0x26>
    4330:	00025a6c 	.word	0x00025a6c
    4334:	00025b74 	.word	0x00025b74
    4338:	00027102 	.word	0x00027102

0000433c <st7789v_init>:
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
			 sizeof(st7789v_rgb_param));
}

static int st7789v_init(struct device *dev)
{
    433c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4340:	4607      	mov	r7, r0
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
    4342:	6884      	ldr	r4, [r0, #8]
    4344:	489e      	ldr	r0, [pc, #632]	; (45c0 <st7789v_init+0x284>)
    4346:	f017 fc07 	bl	1bb58 <z_impl_device_get_binding>

	data->spi_dev = device_get_binding(DT_INST_0_SITRONIX_ST7789V_BUS_NAME);
    434a:	6020      	str	r0, [r4, #0]
	if (data->spi_dev == NULL) {
    434c:	b998      	cbnz	r0, 4376 <st7789v_init+0x3a>
		LOG_ERR("Could not get SPI device for LCD");
    434e:	2301      	movs	r3, #1
    4350:	f04f 0100 	mov.w	r1, #0
    4354:	f363 0107 	bfi	r1, r3, #0, #8
    4358:	4a9a      	ldr	r2, [pc, #616]	; (45c4 <st7789v_init+0x288>)
    435a:	4b9b      	ldr	r3, [pc, #620]	; (45c8 <st7789v_init+0x28c>)
    435c:	489b      	ldr	r0, [pc, #620]	; (45cc <st7789v_init+0x290>)
    435e:	1a9b      	subs	r3, r3, r2
    4360:	08db      	lsrs	r3, r3, #3
    4362:	f363 118f 	bfi	r1, r3, #6, #10
#endif

	data->cmd_data_gpio = device_get_binding(
			DT_INST_0_SITRONIX_ST7789V_CMD_DATA_GPIOS_CONTROLLER);
	if (data->cmd_data_gpio == NULL) {
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    4366:	f01a fb75 	bl	1ea54 <log_0>
		return -EPERM;
    436a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	st7789v_lcd_init(data);

	st7789v_exit_sleep(data);

	return 0;
}
    436e:	4628      	mov	r0, r5
    4370:	b002      	add	sp, #8
    4372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
    4376:	4a96      	ldr	r2, [pc, #600]	; (45d0 <st7789v_init+0x294>)
    4378:	f44f 7380 	mov.w	r3, #256	; 0x100
    437c:	e9c4 2301 	strd	r2, r3, [r4, #4]
    4380:	4894      	ldr	r0, [pc, #592]	; (45d4 <st7789v_init+0x298>)
    4382:	f017 fbe9 	bl	1bb58 <z_impl_device_get_binding>
	data->cs_ctrl.delay = 0U;
    4386:	2619      	movs	r6, #25
    4388:	2500      	movs	r5, #0
	data->spi_config.cs = &(data->cs_ctrl);
    438a:	f104 0310 	add.w	r3, r4, #16
	data->cs_ctrl.gpio_dev = device_get_binding(
    438e:	6120      	str	r0, [r4, #16]
	data->cs_ctrl.delay = 0U;
    4390:	e9c4 6505 	strd	r6, r5, [r4, #20]
	data->spi_config.cs = &(data->cs_ctrl);
    4394:	60e3      	str	r3, [r4, #12]
    4396:	488f      	ldr	r0, [pc, #572]	; (45d4 <st7789v_init+0x298>)
    4398:	f017 fbde 	bl	1bb58 <z_impl_device_get_binding>
	data->reset_gpio = device_get_binding(
    439c:	61e0      	str	r0, [r4, #28]
	if (data->reset_gpio == NULL) {
    439e:	b960      	cbnz	r0, 43ba <st7789v_init+0x7e>
		LOG_ERR("Could not get GPIO port for display reset");
    43a0:	2301      	movs	r3, #1
    43a2:	f04f 0100 	mov.w	r1, #0
    43a6:	f363 0107 	bfi	r1, r3, #0, #8
    43aa:	4a86      	ldr	r2, [pc, #536]	; (45c4 <st7789v_init+0x288>)
    43ac:	4b86      	ldr	r3, [pc, #536]	; (45c8 <st7789v_init+0x28c>)
    43ae:	488a      	ldr	r0, [pc, #552]	; (45d8 <st7789v_init+0x29c>)
    43b0:	1a9b      	subs	r3, r3, r2
    43b2:	08db      	lsrs	r3, r3, #3
    43b4:	f363 118f 	bfi	r1, r3, #6, #10
    43b8:	e7d5      	b.n	4366 <st7789v_init+0x2a>
	return api->config(port, access_op, pin, flags);
    43ba:	6843      	ldr	r3, [r0, #4]
    43bc:	4629      	mov	r1, r5
    43be:	f8d3 8000 	ldr.w	r8, [r3]
    43c2:	221a      	movs	r2, #26
    43c4:	2301      	movs	r3, #1
    43c6:	47c0      	blx	r8
	if (gpio_pin_configure(data->reset_gpio, ST7789V_RESET_PIN,
    43c8:	4605      	mov	r5, r0
    43ca:	b180      	cbz	r0, 43ee <st7789v_init+0xb2>
		LOG_ERR("Couldn't configure reset pin");
    43cc:	2301      	movs	r3, #1
    43ce:	f04f 0100 	mov.w	r1, #0
    43d2:	f363 0107 	bfi	r1, r3, #0, #8
    43d6:	4a7b      	ldr	r2, [pc, #492]	; (45c4 <st7789v_init+0x288>)
    43d8:	4b7b      	ldr	r3, [pc, #492]	; (45c8 <st7789v_init+0x28c>)
    43da:	4880      	ldr	r0, [pc, #512]	; (45dc <st7789v_init+0x2a0>)
    43dc:	1a9b      	subs	r3, r3, r2
    43de:	08db      	lsrs	r3, r3, #3
    43e0:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Couldn't configure cmd/DATA pin");
    43e4:	f01a fb36 	bl	1ea54 <log_0>
		return -EIO;
    43e8:	f06f 0504 	mvn.w	r5, #4
    43ec:	e7bf      	b.n	436e <st7789v_init+0x32>
    43ee:	4879      	ldr	r0, [pc, #484]	; (45d4 <st7789v_init+0x298>)
    43f0:	f017 fbb2 	bl	1bb58 <z_impl_device_get_binding>
	data->cmd_data_gpio = device_get_binding(
    43f4:	6220      	str	r0, [r4, #32]
	if (data->cmd_data_gpio == NULL) {
    43f6:	b960      	cbnz	r0, 4412 <st7789v_init+0xd6>
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    43f8:	2301      	movs	r3, #1
    43fa:	f04f 0100 	mov.w	r1, #0
    43fe:	f363 0107 	bfi	r1, r3, #0, #8
    4402:	4a70      	ldr	r2, [pc, #448]	; (45c4 <st7789v_init+0x288>)
    4404:	4b70      	ldr	r3, [pc, #448]	; (45c8 <st7789v_init+0x28c>)
    4406:	4876      	ldr	r0, [pc, #472]	; (45e0 <st7789v_init+0x2a4>)
    4408:	1a9b      	subs	r3, r3, r2
    440a:	08db      	lsrs	r3, r3, #3
    440c:	f363 118f 	bfi	r1, r3, #6, #10
    4410:	e7a9      	b.n	4366 <st7789v_init+0x2a>
    4412:	6843      	ldr	r3, [r0, #4]
    4414:	4629      	mov	r1, r5
    4416:	f8d3 8000 	ldr.w	r8, [r3]
    441a:	2212      	movs	r2, #18
    441c:	2301      	movs	r3, #1
    441e:	47c0      	blx	r8
	if (gpio_pin_configure(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN,
    4420:	4605      	mov	r5, r0
    4422:	b160      	cbz	r0, 443e <st7789v_init+0x102>
		LOG_ERR("Couldn't configure cmd/DATA pin");
    4424:	2301      	movs	r3, #1
    4426:	f04f 0100 	mov.w	r1, #0
    442a:	f363 0107 	bfi	r1, r3, #0, #8
    442e:	4a65      	ldr	r2, [pc, #404]	; (45c4 <st7789v_init+0x288>)
    4430:	4b65      	ldr	r3, [pc, #404]	; (45c8 <st7789v_init+0x28c>)
    4432:	486c      	ldr	r0, [pc, #432]	; (45e4 <st7789v_init+0x2a8>)
    4434:	1a9b      	subs	r3, r3, r2
    4436:	08db      	lsrs	r3, r3, #3
    4438:	f363 118f 	bfi	r1, r3, #6, #10
    443c:	e7d2      	b.n	43e4 <st7789v_init+0xa8>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 1);
    443e:	2201      	movs	r2, #1
    4440:	211a      	movs	r1, #26
    4442:	69e0      	ldr	r0, [r4, #28]
    4444:	f01a ff38 	bl	1f2b8 <gpio_pin_write>
	k_sleep(K_MSEC(1));
    4448:	2001      	movs	r0, #1
    444a:	f01a ff23 	bl	1f294 <k_sleep>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 0);
    444e:	462a      	mov	r2, r5
    4450:	211a      	movs	r1, #26
    4452:	69e0      	ldr	r0, [r4, #28]
    4454:	f01a ff30 	bl	1f2b8 <gpio_pin_write>
	k_sleep(K_MSEC(6));
    4458:	2006      	movs	r0, #6
    445a:	f01a ff1b 	bl	1f294 <k_sleep>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 1);
    445e:	2201      	movs	r2, #1
    4460:	211a      	movs	r1, #26
    4462:	69e0      	ldr	r0, [r4, #28]
    4464:	f01a ff28 	bl	1f2b8 <gpio_pin_write>
	k_sleep(K_MSEC(20));
    4468:	2014      	movs	r0, #20
    446a:	f01a ff13 	bl	1f294 <k_sleep>
	st7789v_blanking_on(dev);
    446e:	4638      	mov	r0, r7
    4470:	f01a ff5f 	bl	1f332 <st7789v_blanking_on>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PORCTRL, st7789v_porch_param,
    4474:	4620      	mov	r0, r4
	data->x_offset = x_offset;
    4476:	62a5      	str	r5, [r4, #40]	; 0x28
	st7789v_transmit(p_st7789v, ST7789V_CMD_PORCTRL, st7789v_porch_param,
    4478:	2305      	movs	r3, #5
    447a:	4a5b      	ldr	r2, [pc, #364]	; (45e8 <st7789v_init+0x2ac>)
    447c:	21b2      	movs	r1, #178	; 0xb2
    447e:	f01a ff27 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_CMD2EN, st7789v_cmd2en_param,
    4482:	4620      	mov	r0, r4
    4484:	2304      	movs	r3, #4
    4486:	4a59      	ldr	r2, [pc, #356]	; (45ec <st7789v_init+0x2b0>)
    4488:	21df      	movs	r1, #223	; 0xdf
    448a:	f01a ff21 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
    448e:	f10d 0207 	add.w	r2, sp, #7
    4492:	4620      	mov	r0, r4
    4494:	2301      	movs	r3, #1
    4496:	21ba      	movs	r1, #186	; 0xba
	tmp = 0x00;
    4498:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
    449c:	f01a ff18 	bl	1f2d0 <st7789v_transmit>
	tmp = 0x0f;
    44a0:	230f      	movs	r3, #15
    44a2:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_FRCTRL2, &tmp, 1);
    44a6:	f10d 0207 	add.w	r2, sp, #7
    44aa:	4620      	mov	r0, r4
    44ac:	2301      	movs	r3, #1
    44ae:	21c6      	movs	r1, #198	; 0xc6
    44b0:	f01a ff0e 	bl	1f2d0 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_GCTRL;
    44b4:	2335      	movs	r3, #53	; 0x35
    44b6:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GCTRL, &tmp, 1);
    44ba:	f10d 0207 	add.w	r2, sp, #7
    44be:	4620      	mov	r0, r4
    44c0:	2301      	movs	r3, #1
    44c2:	21b7      	movs	r1, #183	; 0xb7
    44c4:	f01a ff04 	bl	1f2d0 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_VCOM;
    44c8:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VCOMS, &tmp, 1);
    44cc:	f10d 0207 	add.w	r2, sp, #7
	tmp = 0x01;
    44d0:	2601      	movs	r6, #1
	st7789v_transmit(p_st7789v, ST7789V_CMD_VCOMS, &tmp, 1);
    44d2:	4620      	mov	r0, r4
    44d4:	2301      	movs	r3, #1
    44d6:	21bb      	movs	r1, #187	; 0xbb
    44d8:	f01a fefa 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
    44dc:	4633      	mov	r3, r6
    44de:	f10d 0207 	add.w	r2, sp, #7
    44e2:	4620      	mov	r0, r4
    44e4:	21c2      	movs	r1, #194	; 0xc2
	tmp = 0x01;
    44e6:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
    44ea:	f01a fef1 	bl	1f2d0 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_VRHS;
    44ee:	2312      	movs	r3, #18
    44f0:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VRH, &tmp, 1);
    44f4:	f10d 0207 	add.w	r2, sp, #7
    44f8:	4633      	mov	r3, r6
    44fa:	4620      	mov	r0, r4
    44fc:	21c3      	movs	r1, #195	; 0xc3
    44fe:	f01a fee7 	bl	1f2d0 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_VDVS;
    4502:	2320      	movs	r3, #32
    4504:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDS, &tmp, 1);
    4508:	f10d 0207 	add.w	r2, sp, #7
    450c:	4633      	mov	r3, r6
    450e:	4620      	mov	r0, r4
    4510:	21c4      	movs	r1, #196	; 0xc4
    4512:	f01a fedd 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PWCTRL1, st7789v_pwctrl1_param,
    4516:	4620      	mov	r0, r4
    4518:	2302      	movs	r3, #2
    451a:	4a35      	ldr	r2, [pc, #212]	; (45f0 <st7789v_init+0x2b4>)
    451c:	21d0      	movs	r1, #208	; 0xd0
    451e:	f01a fed7 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
    4522:	4633      	mov	r3, r6
    4524:	f10d 0207 	add.w	r2, sp, #7
    4528:	4620      	mov	r0, r4
    452a:	2136      	movs	r1, #54	; 0x36
	tmp = DT_INST_0_SITRONIX_ST7789V_MDAC;
    452c:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
    4530:	f01a fece 	bl	1f2d0 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_COLMOD;
    4534:	2305      	movs	r3, #5
    4536:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_COLMOD, &tmp, 1);
    453a:	f10d 0207 	add.w	r2, sp, #7
    453e:	4633      	mov	r3, r6
    4540:	4620      	mov	r0, r4
    4542:	213a      	movs	r1, #58	; 0x3a
    4544:	f01a fec4 	bl	1f2d0 <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_LCM;
    4548:	232c      	movs	r3, #44	; 0x2c
    454a:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_LCMCTRL, &tmp, 1);
    454e:	f10d 0207 	add.w	r2, sp, #7
    4552:	4633      	mov	r3, r6
    4554:	4620      	mov	r0, r4
    4556:	21c0      	movs	r1, #192	; 0xc0
    4558:	f01a feba 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
    455c:	4633      	mov	r3, r6
    455e:	f10d 0207 	add.w	r2, sp, #7
    4562:	4620      	mov	r0, r4
    4564:	2126      	movs	r1, #38	; 0x26
	tmp = DT_INST_0_SITRONIX_ST7789V_GAMMA;
    4566:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
    456a:	f01a feb1 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_INV_ON, NULL, 0);
    456e:	462b      	mov	r3, r5
    4570:	462a      	mov	r2, r5
    4572:	4620      	mov	r0, r4
    4574:	2121      	movs	r1, #33	; 0x21
    4576:	f01a feab 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PVGAMCTRL, st7789v_pvgam_param,
    457a:	4620      	mov	r0, r4
    457c:	230e      	movs	r3, #14
    457e:	4a1d      	ldr	r2, [pc, #116]	; (45f4 <st7789v_init+0x2b8>)
    4580:	21e0      	movs	r1, #224	; 0xe0
    4582:	f01a fea5 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_NVGAMCTRL, st7789v_nvgam_param,
    4586:	4620      	mov	r0, r4
    4588:	230e      	movs	r3, #14
    458a:	4a1b      	ldr	r2, [pc, #108]	; (45f8 <st7789v_init+0x2bc>)
    458c:	21e1      	movs	r1, #225	; 0xe1
    458e:	f01a fe9f 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RAMCTRL, st7789v_ram_param,
    4592:	4620      	mov	r0, r4
    4594:	2302      	movs	r3, #2
    4596:	4a19      	ldr	r2, [pc, #100]	; (45fc <st7789v_init+0x2c0>)
    4598:	21b0      	movs	r1, #176	; 0xb0
    459a:	f01a fe99 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
    459e:	4620      	mov	r0, r4
    45a0:	2303      	movs	r3, #3
    45a2:	4a17      	ldr	r2, [pc, #92]	; (4600 <st7789v_init+0x2c4>)
    45a4:	21b1      	movs	r1, #177	; 0xb1
    45a6:	f01a fe93 	bl	1f2d0 <st7789v_transmit>
	st7789v_transmit(data, ST7789V_CMD_SLEEP_OUT, NULL, 0);
    45aa:	4620      	mov	r0, r4
    45ac:	462b      	mov	r3, r5
    45ae:	462a      	mov	r2, r5
    45b0:	2111      	movs	r1, #17
    45b2:	f01a fe8d 	bl	1f2d0 <st7789v_transmit>
	k_sleep(K_MSEC(120));
    45b6:	2078      	movs	r0, #120	; 0x78
    45b8:	f01a fe6c 	bl	1f294 <k_sleep>
    45bc:	e6d7      	b.n	436e <st7789v_init+0x32>
    45be:	bf00      	nop
    45c0:	0002701d 	.word	0x0002701d
    45c4:	00025a6c 	.word	0x00025a6c
    45c8:	00025b74 	.word	0x00025b74
    45cc:	00027023 	.word	0x00027023
    45d0:	007a1200 	.word	0x007a1200
    45d4:	00026ccc 	.word	0x00026ccc
    45d8:	00027044 	.word	0x00027044
    45dc:	0002706e 	.word	0x0002706e
    45e0:	0002708b 	.word	0x0002708b
    45e4:	000270b5 	.word	0x000270b5
    45e8:	2000e4d0 	.word	0x2000e4d0
    45ec:	2000e4be 	.word	0x2000e4be
    45f0:	2000e4e3 	.word	0x2000e4e3
    45f4:	2000e4d5 	.word	0x2000e4d5
    45f8:	2000e4c2 	.word	0x2000e4c2
    45fc:	2000e4e5 	.word	0x2000e4e5
    4600:	2000e4e7 	.word	0x2000e4e7

00004604 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    4604:	4b0d      	ldr	r3, [pc, #52]	; (463c <rtc1_nrf_isr+0x38>)
    4606:	2200      	movs	r2, #0
    4608:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    460c:	f04f 0220 	mov.w	r2, #32
    4610:	f3ef 8111 	mrs	r1, BASEPRI
    4614:	f382 8811 	msr	BASEPRI, r2
    4618:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    461c:	4a08      	ldr	r2, [pc, #32]	; (4640 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    461e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    4622:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    4624:	1ac0      	subs	r0, r0, r3
    4626:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    462a:	4403      	add	r3, r0
    462c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    462e:	f381 8811 	msr	BASEPRI, r1
    4632:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    4636:	f018 bb9b 	b.w	1cd70 <z_clock_announce>
    463a:	bf00      	nop
    463c:	40011000 	.word	0x40011000
    4640:	200001a8 	.word	0x200001a8

00004644 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    4644:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4646:	481c      	ldr	r0, [pc, #112]	; (46b8 <z_clock_driver_init+0x74>)
    4648:	f017 fa86 	bl	1bb58 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    464c:	b380      	cbz	r0, 46b0 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    464e:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    4650:	4d1a      	ldr	r5, [pc, #104]	; (46bc <z_clock_driver_init+0x78>)
    4652:	681b      	ldr	r3, [r3, #0]
    4654:	2101      	movs	r1, #1
    4656:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    4658:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    465a:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    465c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    4660:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    4664:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    4668:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    466c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4670:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4678:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    467a:	681b      	ldr	r3, [r3, #0]
    467c:	9301      	str	r3, [sp, #4]
    (void)dummy;
    467e:	9b01      	ldr	r3, [sp, #4]
    4680:	4b0f      	ldr	r3, [pc, #60]	; (46c0 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    4682:	4631      	mov	r1, r6
    4684:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4688:	2011      	movs	r0, #17
    468a:	4622      	mov	r2, r4
    468c:	f000 f93a 	bl	4904 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    4690:	2011      	movs	r0, #17
    4692:	f000 f905 	bl	48a0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4696:	4b0b      	ldr	r3, [pc, #44]	; (46c4 <z_clock_driver_init+0x80>)
    4698:	601e      	str	r6, [r3, #0]
    469a:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    469c:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    46a0:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    46a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    46a6:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    46aa:	4620      	mov	r0, r4
}
    46ac:	b002      	add	sp, #8
    46ae:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    46b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    46b4:	e7fa      	b.n	46ac <z_clock_driver_init+0x68>
    46b6:	bf00      	nop
    46b8:	00026ffd 	.word	0x00026ffd
    46bc:	40011000 	.word	0x40011000
    46c0:	e000e100 	.word	0xe000e100
    46c4:	40011008 	.word	0x40011008

000046c8 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    46ca:	4e25      	ldr	r6, [pc, #148]	; (4760 <z_clock_set_timeout+0x98>)
    46cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    46d0:	bf08      	it	eq
    46d2:	4630      	moveq	r0, r6
	__asm__ volatile(
    46d4:	f04f 0320 	mov.w	r3, #32
    46d8:	f3ef 8511 	mrs	r5, BASEPRI
    46dc:	f383 8811 	msr	BASEPRI, r3
    46e0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    46e4:	491f      	ldr	r1, [pc, #124]	; (4764 <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    46e6:	4b20      	ldr	r3, [pc, #128]	; (4768 <z_clock_set_timeout+0xa0>)
    46e8:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
    46ec:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    46ee:	1ae2      	subs	r2, r4, r3
    46f0:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    46f4:	0212      	lsls	r2, r2, #8
    46f6:	d419      	bmi.n	472c <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    46f8:	1e42      	subs	r2, r0, #1
    46fa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    46fe:	42b2      	cmp	r2, r6
    4700:	bfa8      	it	ge
    4702:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4704:	1c78      	adds	r0, r7, #1
    4706:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    4708:	42b0      	cmp	r0, r6
    470a:	bf94      	ite	ls
    470c:	1818      	addls	r0, r3, r0
    470e:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    4710:	1b04      	subs	r4, r0, r4
    4712:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    4716:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    471a:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
    471c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    4720:	d906      	bls.n	4730 <z_clock_set_timeout+0x68>
	__asm__ volatile(
    4722:	f385 8811 	msr	BASEPRI, r5
    4726:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
    472c:	2200      	movs	r2, #0
    472e:	e7e9      	b.n	4704 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    4730:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    4734:	4a0d      	ldr	r2, [pc, #52]	; (476c <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    4736:	1ac3      	subs	r3, r0, r3
    4738:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    473c:	1e5c      	subs	r4, r3, #1
    473e:	4294      	cmp	r4, r2
    4740:	d905      	bls.n	474e <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4742:	4b0b      	ldr	r3, [pc, #44]	; (4770 <z_clock_set_timeout+0xa8>)
    4744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4748:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    474c:	e7e9      	b.n	4722 <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
    474e:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    4750:	bf02      	ittt	eq
    4752:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4754:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4758:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    475c:	e7e1      	b.n	4722 <z_clock_set_timeout+0x5a>
    475e:	bf00      	nop
    4760:	00fffffe 	.word	0x00fffffe
    4764:	40011000 	.word	0x40011000
    4768:	200001a8 	.word	0x200001a8
    476c:	007ffffe 	.word	0x007ffffe
    4770:	e000e100 	.word	0xe000e100

00004774 <z_clock_elapsed>:
	__asm__ volatile(
    4774:	f04f 0220 	mov.w	r2, #32
    4778:	f3ef 8311 	mrs	r3, BASEPRI
    477c:	f382 8811 	msr	BASEPRI, r2
    4780:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    4784:	4a06      	ldr	r2, [pc, #24]	; (47a0 <z_clock_elapsed+0x2c>)
    4786:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    478a:	4a06      	ldr	r2, [pc, #24]	; (47a4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    478c:	6812      	ldr	r2, [r2, #0]
    478e:	1a80      	subs	r0, r0, r2
    4790:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    4794:	f383 8811 	msr	BASEPRI, r3
    4798:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    479c:	4770      	bx	lr
    479e:	bf00      	nop
    47a0:	40011000 	.word	0x40011000
    47a4:	200001a8 	.word	0x200001a8

000047a8 <z_timer_cycle_get_32>:
	__asm__ volatile(
    47a8:	f04f 0320 	mov.w	r3, #32
    47ac:	f3ef 8211 	mrs	r2, BASEPRI
    47b0:	f383 8811 	msr	BASEPRI, r3
    47b4:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    47b8:	4906      	ldr	r1, [pc, #24]	; (47d4 <z_timer_cycle_get_32+0x2c>)
    47ba:	4b07      	ldr	r3, [pc, #28]	; (47d8 <z_timer_cycle_get_32+0x30>)
    47bc:	6808      	ldr	r0, [r1, #0]
    47be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    47c2:	f382 8811 	msr	BASEPRI, r2
    47c6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    47ca:	1a1b      	subs	r3, r3, r0
    47cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    47d0:	4418      	add	r0, r3
    47d2:	4770      	bx	lr
    47d4:	200001a8 	.word	0x200001a8
    47d8:	40011000 	.word	0x40011000

000047dc <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    47dc:	4804      	ldr	r0, [pc, #16]	; (47f0 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    47de:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    47e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    47e2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    47e4:	d003      	beq.n	47ee <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    47e6:	4903      	ldr	r1, [pc, #12]	; (47f4 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    47e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    47ec:	600a      	str	r2, [r1, #0]

000047ee <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    47ee:	4770      	bx	lr
    ldr r0, =_kernel
    47f0:	20005f64 	.word	0x20005f64
    ldr r1, =_SCS_ICSR
    47f4:	e000ed04 	.word	0xe000ed04

000047f8 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    47f8:	4a09      	ldr	r2, [pc, #36]	; (4820 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    47fa:	490a      	ldr	r1, [pc, #40]	; (4824 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    47fc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    47fe:	6809      	ldr	r1, [r1, #0]
    4800:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4802:	4909      	ldr	r1, [pc, #36]	; (4828 <arch_swap+0x30>)
	_current->arch.basepri = key;
    4804:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4806:	684b      	ldr	r3, [r1, #4]
    4808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    480c:	604b      	str	r3, [r1, #4]
    480e:	2300      	movs	r3, #0
    4810:	f383 8811 	msr	BASEPRI, r3
    4814:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4818:	6893      	ldr	r3, [r2, #8]
}
    481a:	6e98      	ldr	r0, [r3, #104]	; 0x68
    481c:	4770      	bx	lr
    481e:	bf00      	nop
    4820:	20005f64 	.word	0x20005f64
    4824:	00026a68 	.word	0x00026a68
    4828:	e000ed00 	.word	0xe000ed00

0000482c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    482c:	4912      	ldr	r1, [pc, #72]	; (4878 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    482e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4830:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    4834:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4836:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    483a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    483e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4840:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4844:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4848:	4f0c      	ldr	r7, [pc, #48]	; (487c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    484a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    484e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    4850:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4852:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4854:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    4856:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4858:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    485a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    485e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4860:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4862:	f01a fdee 	bl	1f442 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4866:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    486a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    486e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4872:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    4876:	4770      	bx	lr
    ldr r1, =_kernel
    4878:	20005f64 	.word	0x20005f64
    ldr v4, =_SCS_ICSR
    487c:	e000ed04 	.word	0xe000ed04

00004880 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    4880:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4884:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4886:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    488a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    488e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4890:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4894:	2902      	cmp	r1, #2
    beq _oops
    4896:	d0ff      	beq.n	4898 <_oops>

00004898 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4898:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    489a:	f01a fdc7 	bl	1f42c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    489e:	bd01      	pop	{r0, pc}

000048a0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    48a0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    48a2:	2b00      	cmp	r3, #0
    48a4:	db08      	blt.n	48b8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48a6:	2201      	movs	r2, #1
    48a8:	f000 001f 	and.w	r0, r0, #31
    48ac:	fa02 f000 	lsl.w	r0, r2, r0
    48b0:	095b      	lsrs	r3, r3, #5
    48b2:	4a02      	ldr	r2, [pc, #8]	; (48bc <arch_irq_enable+0x1c>)
    48b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    48b8:	4770      	bx	lr
    48ba:	bf00      	nop
    48bc:	e000e100 	.word	0xe000e100

000048c0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    48c0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    48c2:	2b00      	cmp	r3, #0
    48c4:	db0d      	blt.n	48e2 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48c6:	2201      	movs	r2, #1
    48c8:	095b      	lsrs	r3, r3, #5
    48ca:	f000 001f 	and.w	r0, r0, #31
    48ce:	fa02 f000 	lsl.w	r0, r2, r0
    48d2:	3320      	adds	r3, #32
    48d4:	4a03      	ldr	r2, [pc, #12]	; (48e4 <arch_irq_disable+0x24>)
    48d6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    48da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48de:	f3bf 8f6f 	isb	sy
}
    48e2:	4770      	bx	lr
    48e4:	e000e100 	.word	0xe000e100

000048e8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    48e8:	0942      	lsrs	r2, r0, #5
    48ea:	4b05      	ldr	r3, [pc, #20]	; (4900 <arch_irq_is_enabled+0x18>)
    48ec:	f000 001f 	and.w	r0, r0, #31
    48f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    48f4:	2301      	movs	r3, #1
    48f6:	fa03 f000 	lsl.w	r0, r3, r0
}
    48fa:	4010      	ands	r0, r2
    48fc:	4770      	bx	lr
    48fe:	bf00      	nop
    4900:	e000e100 	.word	0xe000e100

00004904 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4904:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4906:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4908:	bfa8      	it	ge
    490a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    490e:	f101 0101 	add.w	r1, r1, #1
    4912:	ea4f 1141 	mov.w	r1, r1, lsl #5
    4916:	bfae      	itee	ge
    4918:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    491c:	f000 000f 	andlt.w	r0, r0, #15
    4920:	4b03      	ldrlt	r3, [pc, #12]	; (4930 <z_arm_irq_priority_set+0x2c>)
    4922:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4924:	bfac      	ite	ge
    4926:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    492a:	5419      	strblt	r1, [r3, r0]
}
    492c:	4770      	bx	lr
    492e:	bf00      	nop
    4930:	e000ed14 	.word	0xe000ed14

00004934 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    4934:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    4936:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    4938:	4b04      	ldr	r3, [pc, #16]	; (494c <_arch_isr_direct_pm+0x18>)
    493a:	6a18      	ldr	r0, [r3, #32]
    493c:	b118      	cbz	r0, 4946 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    493e:	2200      	movs	r2, #0
    4940:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    4942:	f020 fafa 	bl	24f3a <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    4946:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    4948:	bd08      	pop	{r3, pc}
    494a:	bf00      	nop
    494c:	20005f64 	.word	0x20005f64

00004950 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    4950:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4952:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    4954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4956:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
    4958:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    495a:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
    495c:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    495e:	f020 fd16 	bl	2538e <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    4962:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    4966:	4a0a      	ldr	r2, [pc, #40]	; (4990 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    4968:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    496c:	f022 0201 	bic.w	r2, r2, #1
    4970:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    4972:	9a06      	ldr	r2, [sp, #24]
    4974:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    4976:	9a07      	ldr	r2, [sp, #28]
    4978:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    497a:	9a08      	ldr	r2, [sp, #32]
    497c:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    497e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    4982:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    4984:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    4986:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    4988:	2300      	movs	r3, #0
    498a:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    498c:	b002      	add	sp, #8
    498e:	bd70      	pop	{r4, r5, r6, pc}
    4990:	0001d7eb 	.word	0x0001d7eb

00004994 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    4994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4996:	4605      	mov	r5, r0
    4998:	460c      	mov	r4, r1
    499a:	4617      	mov	r7, r2
    499c:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    499e:	f000 fb93 	bl	50c8 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    49a2:	4b0a      	ldr	r3, [pc, #40]	; (49cc <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    49a4:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    49a6:	4628      	mov	r0, r5
	_current = main_thread;
    49a8:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    49aa:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    49ae:	f01a fd48 	bl	1f442 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    49b2:	4630      	mov	r0, r6
    49b4:	f384 8809 	msr	PSP, r4
    49b8:	2100      	movs	r1, #0
    49ba:	b663      	cpsie	if
    49bc:	f381 8811 	msr	BASEPRI, r1
    49c0:	f3bf 8f6f 	isb	sy
    49c4:	2200      	movs	r2, #0
    49c6:	2300      	movs	r3, #0
    49c8:	f018 ff0f 	bl	1d7ea <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    49cc:	20005f64 	.word	0x20005f64

000049d0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    49d0:	4901      	ldr	r1, [pc, #4]	; (49d8 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    49d2:	2210      	movs	r2, #16
	str r2, [r1]
    49d4:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    49d6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    49d8:	e000ed10 	.word	0xe000ed10

000049dc <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    49dc:	4040      	eors	r0, r0
	msr BASEPRI, r0
    49de:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    49e2:	bf30      	wfi

	bx lr
    49e4:	4770      	bx	lr
    49e6:	bf00      	nop

000049e8 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    49e8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    49ec:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    49f0:	4672      	mov	r2, lr

	push {r0, lr}
    49f2:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    49f4:	f000 fa46 	bl	4e84 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    49f8:	bd01      	pop	{r0, pc}
    49fa:	bf00      	nop

000049fc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    49fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    49fe:	4606      	mov	r6, r0

	if (esf != NULL) {
    4a00:	460c      	mov	r4, r1
    4a02:	2900      	cmp	r1, #0
    4a04:	d038      	beq.n	4a78 <z_arm_fatal_error+0x7c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4a06:	2201      	movs	r2, #1
    4a08:	f04f 0300 	mov.w	r3, #0
    4a0c:	f362 0307 	bfi	r3, r2, #0, #8
    4a10:	4d1d      	ldr	r5, [pc, #116]	; (4a88 <z_arm_fatal_error+0x8c>)
    4a12:	4a1e      	ldr	r2, [pc, #120]	; (4a8c <z_arm_fatal_error+0x90>)
    4a14:	481e      	ldr	r0, [pc, #120]	; (4a90 <z_arm_fatal_error+0x94>)
    4a16:	1aad      	subs	r5, r5, r2
    4a18:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    4a1c:	f365 138f 	bfi	r3, r5, #6, #10
    4a20:	f8ad 3000 	strh.w	r3, [sp]
    4a24:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    4a28:	6809      	ldr	r1, [r1, #0]
    4a2a:	f01a f84c 	bl	1eac6 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4a2e:	2201      	movs	r2, #1
    4a30:	f04f 0300 	mov.w	r3, #0
    4a34:	f362 0307 	bfi	r3, r2, #0, #8
    4a38:	f365 138f 	bfi	r3, r5, #6, #10
    4a3c:	f8ad 3000 	strh.w	r3, [sp]
    4a40:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4a44:	68e1      	ldr	r1, [r4, #12]
    4a46:	4813      	ldr	r0, [pc, #76]	; (4a94 <z_arm_fatal_error+0x98>)
    4a48:	f01a f83d 	bl	1eac6 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4a4c:	2301      	movs	r3, #1
    4a4e:	f04f 0200 	mov.w	r2, #0
    4a52:	f363 0207 	bfi	r2, r3, #0, #8
    4a56:	f365 128f 	bfi	r2, r5, #6, #10
    4a5a:	69e1      	ldr	r1, [r4, #28]
    4a5c:	480e      	ldr	r0, [pc, #56]	; (4a98 <z_arm_fatal_error+0x9c>)
    4a5e:	f01a f806 	bl	1ea6e <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4a62:	f04f 0200 	mov.w	r2, #0
    4a66:	2301      	movs	r3, #1
    4a68:	f363 0207 	bfi	r2, r3, #0, #8
    4a6c:	f365 128f 	bfi	r2, r5, #6, #10
    4a70:	69a1      	ldr	r1, [r4, #24]
    4a72:	480a      	ldr	r0, [pc, #40]	; (4a9c <z_arm_fatal_error+0xa0>)
    4a74:	f019 fffb 	bl	1ea6e <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4a78:	4621      	mov	r1, r4
    4a7a:	4630      	mov	r0, r6
}
    4a7c:	b002      	add	sp, #8
    4a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    4a82:	f017 b8b1 	b.w	1bbe8 <z_fatal_error>
    4a86:	bf00      	nop
    4a88:	00025bb4 	.word	0x00025bb4
    4a8c:	00025a6c 	.word	0x00025a6c
    4a90:	00027140 	.word	0x00027140
    4a94:	0002716f 	.word	0x0002716f
    4a98:	0002719e 	.word	0x0002719e
    4a9c:	000271ad 	.word	0x000271ad

00004aa0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4aa0:	bf30      	wfi
    b z_SysNmiOnReset
    4aa2:	f7ff bffd 	b.w	4aa0 <z_SysNmiOnReset>
    4aa6:	bf00      	nop

00004aa8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4aa8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4aaa:	4b08      	ldr	r3, [pc, #32]	; (4acc <z_arm_prep_c+0x24>)
    4aac:	4a08      	ldr	r2, [pc, #32]	; (4ad0 <z_arm_prep_c+0x28>)
    4aae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    4ab2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4ab4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ab8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    4abc:	f017 f912 	bl	1bce4 <z_bss_zero>
	z_data_copy();
    4ac0:	f017 f91a 	bl	1bcf8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    4ac4:	f000 face 	bl	5064 <z_arm_int_lib_init>
	z_cstart();
    4ac8:	f017 f948 	bl	1bd5c <z_cstart>
    4acc:	00000000 	.word	0x00000000
    4ad0:	e000ed00 	.word	0xe000ed00

00004ad4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4ad4:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    4ad6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4ad8:	4a0b      	ldr	r2, [pc, #44]	; (4b08 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4ada:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    4adc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4ade:	bf1e      	ittt	ne
	movne	r1, #0
    4ae0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4ae2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    4ae4:	f020 fa29 	blne	24f3a <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4ae8:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4aea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4aee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4af2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    4af6:	4905      	ldr	r1, [pc, #20]	; (4b0c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4af8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4afa:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    4afc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4afe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4b02:	4903      	ldr	r1, [pc, #12]	; (4b10 <_isr_wrapper+0x3c>)
	bx r1
    4b04:	4708      	bx	r1
    4b06:	0000      	.short	0x0000
	ldr r2, =_kernel
    4b08:	20005f64 	.word	0x20005f64
	ldr r1, =_sw_isr_table
    4b0c:	000257b8 	.word	0x000257b8
	ldr r1, =z_arm_int_exit
    4b10:	000047dd 	.word	0x000047dd

00004b14 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4b14:	f01a ffb1 	bl	1fa7a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4b18:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4b1a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    4b1e:	4808      	ldr	r0, [pc, #32]	; (4b40 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    4b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4b24:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4b26:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4b2a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4b2e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4b30:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4b32:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4b36:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4b3a:	f7ff ffb5 	bl	4aa8 <z_arm_prep_c>
    4b3e:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    4b40:	2000c190 	.word	0x2000c190

00004b44 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4b44:	2301      	movs	r3, #1
    4b46:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    4b4a:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    4b4c:	f363 0107 	bfi	r1, r3, #0, #8
    4b50:	4c33      	ldr	r4, [pc, #204]	; (4c20 <usage_fault.isra.2+0xdc>)
    4b52:	4b34      	ldr	r3, [pc, #208]	; (4c24 <usage_fault.isra.2+0xe0>)
    4b54:	4834      	ldr	r0, [pc, #208]	; (4c28 <usage_fault.isra.2+0xe4>)
    4b56:	1ae4      	subs	r4, r4, r3
    4b58:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    4b5c:	f364 118f 	bfi	r1, r4, #6, #10
    4b60:	f019 ff78 	bl	1ea54 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4b64:	4b31      	ldr	r3, [pc, #196]	; (4c2c <usage_fault.isra.2+0xe8>)
    4b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b68:	019a      	lsls	r2, r3, #6
    4b6a:	d509      	bpl.n	4b80 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    4b6c:	f04f 0100 	mov.w	r1, #0
    4b70:	2301      	movs	r3, #1
    4b72:	f363 0107 	bfi	r1, r3, #0, #8
    4b76:	f364 118f 	bfi	r1, r4, #6, #10
    4b7a:	482d      	ldr	r0, [pc, #180]	; (4c30 <usage_fault.isra.2+0xec>)
    4b7c:	f019 ff6a 	bl	1ea54 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4b80:	4b2a      	ldr	r3, [pc, #168]	; (4c2c <usage_fault.isra.2+0xe8>)
    4b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b84:	01db      	lsls	r3, r3, #7
    4b86:	d509      	bpl.n	4b9c <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    4b88:	f04f 0100 	mov.w	r1, #0
    4b8c:	2301      	movs	r3, #1
    4b8e:	f363 0107 	bfi	r1, r3, #0, #8
    4b92:	f364 118f 	bfi	r1, r4, #6, #10
    4b96:	4827      	ldr	r0, [pc, #156]	; (4c34 <usage_fault.isra.2+0xf0>)
    4b98:	f019 ff5c 	bl	1ea54 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4b9c:	4b23      	ldr	r3, [pc, #140]	; (4c2c <usage_fault.isra.2+0xe8>)
    4b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ba0:	0318      	lsls	r0, r3, #12
    4ba2:	d509      	bpl.n	4bb8 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  No coprocessor instructions");
    4ba4:	f04f 0100 	mov.w	r1, #0
    4ba8:	2301      	movs	r3, #1
    4baa:	f363 0107 	bfi	r1, r3, #0, #8
    4bae:	f364 118f 	bfi	r1, r4, #6, #10
    4bb2:	4821      	ldr	r0, [pc, #132]	; (4c38 <usage_fault.isra.2+0xf4>)
    4bb4:	f019 ff4e 	bl	1ea54 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4bb8:	4b1c      	ldr	r3, [pc, #112]	; (4c2c <usage_fault.isra.2+0xe8>)
    4bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bbc:	0359      	lsls	r1, r3, #13
    4bbe:	d509      	bpl.n	4bd4 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4bc0:	f04f 0100 	mov.w	r1, #0
    4bc4:	2301      	movs	r3, #1
    4bc6:	f363 0107 	bfi	r1, r3, #0, #8
    4bca:	f364 118f 	bfi	r1, r4, #6, #10
    4bce:	481b      	ldr	r0, [pc, #108]	; (4c3c <usage_fault.isra.2+0xf8>)
    4bd0:	f019 ff40 	bl	1ea54 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4bd4:	4b15      	ldr	r3, [pc, #84]	; (4c2c <usage_fault.isra.2+0xe8>)
    4bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bd8:	039a      	lsls	r2, r3, #14
    4bda:	d509      	bpl.n	4bf0 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4bdc:	f04f 0100 	mov.w	r1, #0
    4be0:	2301      	movs	r3, #1
    4be2:	f363 0107 	bfi	r1, r3, #0, #8
    4be6:	f364 118f 	bfi	r1, r4, #6, #10
    4bea:	4815      	ldr	r0, [pc, #84]	; (4c40 <usage_fault.isra.2+0xfc>)
    4bec:	f019 ff32 	bl	1ea54 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4bf0:	4b0e      	ldr	r3, [pc, #56]	; (4c2c <usage_fault.isra.2+0xe8>)
    4bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bf4:	03db      	lsls	r3, r3, #15
    4bf6:	d509      	bpl.n	4c0c <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4bf8:	f04f 0100 	mov.w	r1, #0
    4bfc:	2301      	movs	r3, #1
    4bfe:	f363 0107 	bfi	r1, r3, #0, #8
    4c02:	f364 118f 	bfi	r1, r4, #6, #10
    4c06:	480f      	ldr	r0, [pc, #60]	; (4c44 <usage_fault.isra.2+0x100>)
    4c08:	f019 ff24 	bl	1ea54 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4c0c:	4a07      	ldr	r2, [pc, #28]	; (4c2c <usage_fault.isra.2+0xe8>)
    4c0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c10:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4c14:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4c18:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4c1a:	2000      	movs	r0, #0
    4c1c:	bd10      	pop	{r4, pc}
    4c1e:	bf00      	nop
    4c20:	00025bb4 	.word	0x00025bb4
    4c24:	00025a6c 	.word	0x00025a6c
    4c28:	0002733b 	.word	0x0002733b
    4c2c:	e000ed00 	.word	0xe000ed00
    4c30:	00027353 	.word	0x00027353
    4c34:	00027366 	.word	0x00027366
    4c38:	00027380 	.word	0x00027380
    4c3c:	0002739e 	.word	0x0002739e
    4c40:	000273c3 	.word	0x000273c3
    4c44:	000273dd 	.word	0x000273dd

00004c48 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    4c4a:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4c4c:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    4c4e:	f04f 0100 	mov.w	r1, #0
    4c52:	f363 0107 	bfi	r1, r3, #0, #8
    4c56:	4c36      	ldr	r4, [pc, #216]	; (4d30 <mem_manage_fault.isra.4+0xe8>)
    4c58:	4b36      	ldr	r3, [pc, #216]	; (4d34 <mem_manage_fault.isra.4+0xec>)
    4c5a:	1ae4      	subs	r4, r4, r3
    4c5c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    4c60:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4c64:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    4c66:	4834      	ldr	r0, [pc, #208]	; (4d38 <mem_manage_fault.isra.4+0xf0>)
    4c68:	f019 fef4 	bl	1ea54 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4c6c:	4b33      	ldr	r3, [pc, #204]	; (4d3c <mem_manage_fault.isra.4+0xf4>)
    4c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c70:	06d9      	lsls	r1, r3, #27
    4c72:	d509      	bpl.n	4c88 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4c74:	f04f 0100 	mov.w	r1, #0
    4c78:	2301      	movs	r3, #1
    4c7a:	f363 0107 	bfi	r1, r3, #0, #8
    4c7e:	f364 118f 	bfi	r1, r4, #6, #10
    4c82:	482f      	ldr	r0, [pc, #188]	; (4d40 <mem_manage_fault.isra.4+0xf8>)
    4c84:	f019 fee6 	bl	1ea54 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4c88:	4b2c      	ldr	r3, [pc, #176]	; (4d3c <mem_manage_fault.isra.4+0xf4>)
    4c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c8c:	071a      	lsls	r2, r3, #28
    4c8e:	d509      	bpl.n	4ca4 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    4c90:	f04f 0100 	mov.w	r1, #0
    4c94:	2301      	movs	r3, #1
    4c96:	f363 0107 	bfi	r1, r3, #0, #8
    4c9a:	f364 118f 	bfi	r1, r4, #6, #10
    4c9e:	4829      	ldr	r0, [pc, #164]	; (4d44 <mem_manage_fault.isra.4+0xfc>)
    4ca0:	f019 fed8 	bl	1ea54 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4ca4:	4d25      	ldr	r5, [pc, #148]	; (4d3c <mem_manage_fault.isra.4+0xf4>)
    4ca6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4ca8:	079b      	lsls	r3, r3, #30
    4caa:	d51c      	bpl.n	4ce6 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    4cac:	2301      	movs	r3, #1
    4cae:	f04f 0100 	mov.w	r1, #0
    4cb2:	f363 0107 	bfi	r1, r3, #0, #8
    4cb6:	f364 118f 	bfi	r1, r4, #6, #10
    4cba:	4823      	ldr	r0, [pc, #140]	; (4d48 <mem_manage_fault.isra.4+0x100>)
    4cbc:	f019 feca 	bl	1ea54 <log_0>
		mmfar = SCB->MMFAR;
    4cc0:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4cc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4cc4:	0618      	lsls	r0, r3, #24
    4cc6:	d50e      	bpl.n	4ce6 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4cc8:	f04f 0200 	mov.w	r2, #0
    4ccc:	2301      	movs	r3, #1
    4cce:	f363 0207 	bfi	r2, r3, #0, #8
    4cd2:	f364 128f 	bfi	r2, r4, #6, #10
    4cd6:	481d      	ldr	r0, [pc, #116]	; (4d4c <mem_manage_fault.isra.4+0x104>)
    4cd8:	f019 fec9 	bl	1ea6e <log_1>
			if (from_hard_fault) {
    4cdc:	b11f      	cbz	r7, 4ce6 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4cde:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4ce4:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4ce6:	4b15      	ldr	r3, [pc, #84]	; (4d3c <mem_manage_fault.isra.4+0xf4>)
    4ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cea:	07da      	lsls	r2, r3, #31
    4cec:	d509      	bpl.n	4d02 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    4cee:	f04f 0100 	mov.w	r1, #0
    4cf2:	2301      	movs	r3, #1
    4cf4:	f363 0107 	bfi	r1, r3, #0, #8
    4cf8:	f364 118f 	bfi	r1, r4, #6, #10
    4cfc:	4814      	ldr	r0, [pc, #80]	; (4d50 <mem_manage_fault.isra.4+0x108>)
    4cfe:	f019 fea9 	bl	1ea54 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4d02:	4b0e      	ldr	r3, [pc, #56]	; (4d3c <mem_manage_fault.isra.4+0xf4>)
    4d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d06:	069b      	lsls	r3, r3, #26
    4d08:	d509      	bpl.n	4d1e <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    4d0a:	f04f 0100 	mov.w	r1, #0
    4d0e:	2301      	movs	r3, #1
    4d10:	f363 0107 	bfi	r1, r3, #0, #8
    4d14:	f364 118f 	bfi	r1, r4, #6, #10
    4d18:	480e      	ldr	r0, [pc, #56]	; (4d54 <mem_manage_fault.isra.4+0x10c>)
    4d1a:	f019 fe9b 	bl	1ea54 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    4d1e:	4b07      	ldr	r3, [pc, #28]	; (4d3c <mem_manage_fault.isra.4+0xf4>)
    4d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4d24:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4d26:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4d2a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4d2c:	7030      	strb	r0, [r6, #0]
}
    4d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d30:	00025bb4 	.word	0x00025bb4
    4d34:	00025a6c 	.word	0x00025a6c
    4d38:	00027263 	.word	0x00027263
    4d3c:	e000ed00 	.word	0xe000ed00
    4d40:	00027279 	.word	0x00027279
    4d44:	000272ac 	.word	0x000272ac
    4d48:	000272bf 	.word	0x000272bf
    4d4c:	000272d7 	.word	0x000272d7
    4d50:	000272ed 	.word	0x000272ed
    4d54:	0002730c 	.word	0x0002730c

00004d58 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    4d5a:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4d5c:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4d5e:	f04f 0100 	mov.w	r1, #0
    4d62:	f363 0107 	bfi	r1, r3, #0, #8
    4d66:	4c3c      	ldr	r4, [pc, #240]	; (4e58 <bus_fault.isra.5+0x100>)
    4d68:	4b3c      	ldr	r3, [pc, #240]	; (4e5c <bus_fault.isra.5+0x104>)
    4d6a:	1ae4      	subs	r4, r4, r3
    4d6c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    4d70:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4d74:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    4d76:	483a      	ldr	r0, [pc, #232]	; (4e60 <bus_fault.isra.5+0x108>)
    4d78:	f019 fe6c 	bl	1ea54 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4d7c:	4b39      	ldr	r3, [pc, #228]	; (4e64 <bus_fault.isra.5+0x10c>)
    4d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d80:	04d9      	lsls	r1, r3, #19
    4d82:	d509      	bpl.n	4d98 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    4d84:	f04f 0100 	mov.w	r1, #0
    4d88:	2301      	movs	r3, #1
    4d8a:	f363 0107 	bfi	r1, r3, #0, #8
    4d8e:	f364 118f 	bfi	r1, r4, #6, #10
    4d92:	4835      	ldr	r0, [pc, #212]	; (4e68 <bus_fault.isra.5+0x110>)
    4d94:	f019 fe5e 	bl	1ea54 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4d98:	4b32      	ldr	r3, [pc, #200]	; (4e64 <bus_fault.isra.5+0x10c>)
    4d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d9c:	051a      	lsls	r2, r3, #20
    4d9e:	d509      	bpl.n	4db4 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    4da0:	f04f 0100 	mov.w	r1, #0
    4da4:	2301      	movs	r3, #1
    4da6:	f363 0107 	bfi	r1, r3, #0, #8
    4daa:	f364 118f 	bfi	r1, r4, #6, #10
    4dae:	482f      	ldr	r0, [pc, #188]	; (4e6c <bus_fault.isra.5+0x114>)
    4db0:	f019 fe50 	bl	1ea54 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4db4:	4d2b      	ldr	r5, [pc, #172]	; (4e64 <bus_fault.isra.5+0x10c>)
    4db6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4db8:	059b      	lsls	r3, r3, #22
    4dba:	d51c      	bpl.n	4df6 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    4dbc:	2301      	movs	r3, #1
    4dbe:	f04f 0100 	mov.w	r1, #0
    4dc2:	f363 0107 	bfi	r1, r3, #0, #8
    4dc6:	f364 118f 	bfi	r1, r4, #6, #10
    4dca:	4829      	ldr	r0, [pc, #164]	; (4e70 <bus_fault.isra.5+0x118>)
    4dcc:	f019 fe42 	bl	1ea54 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    4dd0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4dd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4dd4:	0418      	lsls	r0, r3, #16
    4dd6:	d50e      	bpl.n	4df6 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4dd8:	f04f 0200 	mov.w	r2, #0
    4ddc:	2301      	movs	r3, #1
    4dde:	f363 0207 	bfi	r2, r3, #0, #8
    4de2:	f364 128f 	bfi	r2, r4, #6, #10
    4de6:	4823      	ldr	r0, [pc, #140]	; (4e74 <bus_fault.isra.5+0x11c>)
    4de8:	f019 fe41 	bl	1ea6e <log_1>
			if (from_hard_fault) {
    4dec:	b11f      	cbz	r7, 4df6 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4dee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4df0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4df4:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4df6:	4b1b      	ldr	r3, [pc, #108]	; (4e64 <bus_fault.isra.5+0x10c>)
    4df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dfa:	0559      	lsls	r1, r3, #21
    4dfc:	d509      	bpl.n	4e12 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    4dfe:	f04f 0100 	mov.w	r1, #0
    4e02:	2301      	movs	r3, #1
    4e04:	f363 0107 	bfi	r1, r3, #0, #8
    4e08:	f364 118f 	bfi	r1, r4, #6, #10
    4e0c:	481a      	ldr	r0, [pc, #104]	; (4e78 <bus_fault.isra.5+0x120>)
    4e0e:	f019 fe21 	bl	1ea54 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4e12:	4b14      	ldr	r3, [pc, #80]	; (4e64 <bus_fault.isra.5+0x10c>)
    4e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e16:	05d2      	lsls	r2, r2, #23
    4e18:	d511      	bpl.n	4e3e <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    4e1a:	f04f 0100 	mov.w	r1, #0
    4e1e:	2301      	movs	r3, #1
    4e20:	f363 0107 	bfi	r1, r3, #0, #8
    4e24:	4815      	ldr	r0, [pc, #84]	; (4e7c <bus_fault.isra.5+0x124>)
    4e26:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4e2a:	f019 fe13 	bl	1ea54 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4e2e:	4a0d      	ldr	r2, [pc, #52]	; (4e64 <bus_fault.isra.5+0x10c>)
    4e30:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4e32:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4e34:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4e38:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4e3a:	7030      	strb	r0, [r6, #0]
}
    4e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e40:	049b      	lsls	r3, r3, #18
    4e42:	d5f4      	bpl.n	4e2e <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4e44:	f04f 0100 	mov.w	r1, #0
    4e48:	2301      	movs	r3, #1
    4e4a:	f363 0107 	bfi	r1, r3, #0, #8
    4e4e:	f364 118f 	bfi	r1, r4, #6, #10
    4e52:	480b      	ldr	r0, [pc, #44]	; (4e80 <bus_fault.isra.5+0x128>)
    4e54:	e7e9      	b.n	4e2a <bus_fault.isra.5+0xd2>
    4e56:	bf00      	nop
    4e58:	00025bb4 	.word	0x00025bb4
    4e5c:	00025a6c 	.word	0x00025a6c
    4e60:	000271db 	.word	0x000271db
    4e64:	e000ed00 	.word	0xe000ed00
    4e68:	000271f1 	.word	0x000271f1
    4e6c:	000272ac 	.word	0x000272ac
    4e70:	00027202 	.word	0x00027202
    4e74:	0002721b 	.word	0x0002721b
    4e78:	00027230 	.word	0x00027230
    4e7c:	0002724b 	.word	0x0002724b
    4e80:	0002730c 	.word	0x0002730c

00004e84 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    4e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4e88:	4b64      	ldr	r3, [pc, #400]	; (501c <z_arm_fault+0x198>)
    4e8a:	685e      	ldr	r6, [r3, #4]
{
    4e8c:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4e8e:	f3c6 0408 	ubfx	r4, r6, #0, #9
    4e92:	2500      	movs	r5, #0
    4e94:	f385 8811 	msr	BASEPRI, r5
    4e98:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4e9c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4ea0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4ea4:	d111      	bne.n	4eca <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4ea6:	f002 030c 	and.w	r3, r2, #12
    4eaa:	2b08      	cmp	r3, #8
    4eac:	d10f      	bne.n	4ece <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4eae:	2301      	movs	r3, #1
    4eb0:	f04f 0100 	mov.w	r1, #0
    4eb4:	f363 0107 	bfi	r1, r3, #0, #8
    4eb8:	4a59      	ldr	r2, [pc, #356]	; (5020 <z_arm_fault+0x19c>)
    4eba:	4b5a      	ldr	r3, [pc, #360]	; (5024 <z_arm_fault+0x1a0>)
    4ebc:	485a      	ldr	r0, [pc, #360]	; (5028 <z_arm_fault+0x1a4>)
    4ebe:	1a9b      	subs	r3, r3, r2
    4ec0:	08db      	lsrs	r3, r3, #3
    4ec2:	f363 118f 	bfi	r1, r3, #6, #10
    4ec6:	f019 fdc5 	bl	1ea54 <log_0>
		return NULL;
    4eca:	462f      	mov	r7, r5
    4ecc:	e004      	b.n	4ed8 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4ece:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    4ed0:	bf4e      	itee	mi
    4ed2:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    4ed4:	4607      	movpl	r7, r0
			*nested_exc = true;
    4ed6:	2501      	movpl	r5, #1
	*recoverable = false;
    4ed8:	2300      	movs	r3, #0
    4eda:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    4ede:	1ee3      	subs	r3, r4, #3
    4ee0:	2b09      	cmp	r3, #9
    4ee2:	d87f      	bhi.n	4fe4 <z_arm_fault+0x160>
    4ee4:	e8df f003 	tbb	[pc, r3]
    4ee8:	4c6d6905 	.word	0x4c6d6905
    4eec:	7e7e7e7e 	.word	0x7e7e7e7e
    4ef0:	717e      	.short	0x717e
	PR_FAULT_INFO("***** HARD FAULT *****");
    4ef2:	2301      	movs	r3, #1
    4ef4:	f04f 0100 	mov.w	r1, #0
    4ef8:	f363 0107 	bfi	r1, r3, #0, #8
    4efc:	4e49      	ldr	r6, [pc, #292]	; (5024 <z_arm_fault+0x1a0>)
    4efe:	4b48      	ldr	r3, [pc, #288]	; (5020 <z_arm_fault+0x19c>)
    4f00:	484a      	ldr	r0, [pc, #296]	; (502c <z_arm_fault+0x1a8>)
    4f02:	1af6      	subs	r6, r6, r3
    4f04:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    4f08:	f366 118f 	bfi	r1, r6, #6, #10
    4f0c:	f019 fda2 	bl	1ea54 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4f10:	4b42      	ldr	r3, [pc, #264]	; (501c <z_arm_fault+0x198>)
    4f12:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    4f14:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4f18:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    4f1c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4f20:	d00b      	beq.n	4f3a <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    4f22:	f04f 0100 	mov.w	r1, #0
    4f26:	2301      	movs	r3, #1
    4f28:	f363 0107 	bfi	r1, r3, #0, #8
    4f2c:	4840      	ldr	r0, [pc, #256]	; (5030 <z_arm_fault+0x1ac>)
    4f2e:	f366 118f 	bfi	r1, r6, #6, #10
	PR_FAULT_INFO(
    4f32:	f019 fd8f 	bl	1ea54 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    4f36:	2400      	movs	r4, #0
    4f38:	e025      	b.n	4f86 <z_arm_fault+0x102>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f3c:	005b      	lsls	r3, r3, #1
    4f3e:	d522      	bpl.n	4f86 <z_arm_fault+0x102>
		PR_EXC("  Fault escalation (see below)");
    4f40:	2301      	movs	r3, #1
    4f42:	f04f 0100 	mov.w	r1, #0
    4f46:	f363 0107 	bfi	r1, r3, #0, #8
    4f4a:	f366 118f 	bfi	r1, r6, #6, #10
    4f4e:	4839      	ldr	r0, [pc, #228]	; (5034 <z_arm_fault+0x1b0>)
    4f50:	f019 fd80 	bl	1ea54 <log_0>
		if (SCB_MMFSR != 0) {
    4f54:	4b38      	ldr	r3, [pc, #224]	; (5038 <z_arm_fault+0x1b4>)
    4f56:	781b      	ldrb	r3, [r3, #0]
    4f58:	b12b      	cbz	r3, 4f66 <z_arm_fault+0xe2>
			reason = mem_manage_fault(esf, 1, recoverable);
    4f5a:	f10d 0107 	add.w	r1, sp, #7
    4f5e:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4f60:	f7ff fe72 	bl	4c48 <mem_manage_fault.isra.4>
    4f64:	e00e      	b.n	4f84 <z_arm_fault+0x100>
		} else if (SCB_BFSR != 0) {
    4f66:	4b35      	ldr	r3, [pc, #212]	; (503c <z_arm_fault+0x1b8>)
    4f68:	781b      	ldrb	r3, [r3, #0]
    4f6a:	b12b      	cbz	r3, 4f78 <z_arm_fault+0xf4>
			reason = bus_fault(esf, 1, recoverable);
    4f6c:	f10d 0107 	add.w	r1, sp, #7
    4f70:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4f72:	f7ff fef1 	bl	4d58 <bus_fault.isra.5>
    4f76:	e005      	b.n	4f84 <z_arm_fault+0x100>
		} else if (SCB_UFSR != 0) {
    4f78:	4b31      	ldr	r3, [pc, #196]	; (5040 <z_arm_fault+0x1bc>)
    4f7a:	881b      	ldrh	r3, [r3, #0]
    4f7c:	b29b      	uxth	r3, r3
    4f7e:	b113      	cbz	r3, 4f86 <z_arm_fault+0x102>
			reason = usage_fault(esf);
    4f80:	f7ff fde0 	bl	4b44 <usage_fault.isra.2>
    4f84:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4f86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4f8a:	b99b      	cbnz	r3, 4fb4 <z_arm_fault+0x130>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4f8c:	2220      	movs	r2, #32
    4f8e:	4639      	mov	r1, r7
    4f90:	a802      	add	r0, sp, #8
    4f92:	f01a fb31 	bl	1f5f8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f98:	2d00      	cmp	r5, #0
    4f9a:	d03a      	beq.n	5012 <z_arm_fault+0x18e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4fa0:	b922      	cbnz	r2, 4fac <z_arm_fault+0x128>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4fa2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4fa6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4faa:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4fac:	a902      	add	r1, sp, #8
    4fae:	4620      	mov	r0, r4
    4fb0:	f7ff fd24 	bl	49fc <z_arm_fatal_error>
}
    4fb4:	b00a      	add	sp, #40	; 0x28
    4fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4fba:	f10d 0107 	add.w	r1, sp, #7
    4fbe:	2000      	movs	r0, #0
    4fc0:	e7ce      	b.n	4f60 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    4fc2:	f10d 0107 	add.w	r1, sp, #7
    4fc6:	2000      	movs	r0, #0
    4fc8:	e7d3      	b.n	4f72 <z_arm_fault+0xee>
	PR_FAULT_INFO(
    4fca:	2301      	movs	r3, #1
    4fcc:	f04f 0100 	mov.w	r1, #0
    4fd0:	f363 0107 	bfi	r1, r3, #0, #8
    4fd4:	4a12      	ldr	r2, [pc, #72]	; (5020 <z_arm_fault+0x19c>)
    4fd6:	4b13      	ldr	r3, [pc, #76]	; (5024 <z_arm_fault+0x1a0>)
    4fd8:	481a      	ldr	r0, [pc, #104]	; (5044 <z_arm_fault+0x1c0>)
    4fda:	1a9b      	subs	r3, r3, r2
    4fdc:	08db      	lsrs	r3, r3, #3
    4fde:	f363 118f 	bfi	r1, r3, #6, #10
    4fe2:	e7a6      	b.n	4f32 <z_arm_fault+0xae>
	PR_FAULT_INFO("***** %s %d) *****",
    4fe4:	2201      	movs	r2, #1
    4fe6:	f04f 0300 	mov.w	r3, #0
    4fea:	f362 0307 	bfi	r3, r2, #0, #8
    4fee:	490d      	ldr	r1, [pc, #52]	; (5024 <z_arm_fault+0x1a0>)
    4ff0:	4a0b      	ldr	r2, [pc, #44]	; (5020 <z_arm_fault+0x19c>)
    4ff2:	4815      	ldr	r0, [pc, #84]	; (5048 <z_arm_fault+0x1c4>)
    4ff4:	1a89      	subs	r1, r1, r2
    4ff6:	08c9      	lsrs	r1, r1, #3
    4ff8:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    4ffc:	f361 138f 	bfi	r3, r1, #6, #10
    5000:	f1a4 0210 	sub.w	r2, r4, #16
    5004:	4911      	ldr	r1, [pc, #68]	; (504c <z_arm_fault+0x1c8>)
    5006:	bf18      	it	ne
    5008:	4601      	movne	r1, r0
    500a:	4811      	ldr	r0, [pc, #68]	; (5050 <z_arm_fault+0x1cc>)
    500c:	f019 fd43 	bl	1ea96 <log_2>
    5010:	e791      	b.n	4f36 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5012:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5016:	f023 0301 	bic.w	r3, r3, #1
    501a:	e7c6      	b.n	4faa <z_arm_fault+0x126>
    501c:	e000ed00 	.word	0xe000ed00
    5020:	00025a6c 	.word	0x00025a6c
    5024:	00025bb4 	.word	0x00025bb4
    5028:	00027408 	.word	0x00027408
    502c:	00027433 	.word	0x00027433
    5030:	0002744a 	.word	0x0002744a
    5034:	0002746b 	.word	0x0002746b
    5038:	e000ed28 	.word	0xe000ed28
    503c:	e000ed29 	.word	0xe000ed29
    5040:	e000ed2a 	.word	0xe000ed2a
    5044:	0002748a 	.word	0x0002748a
    5048:	000274d5 	.word	0x000274d5
    504c:	000274c0 	.word	0x000274c0
    5050:	000274ee 	.word	0x000274ee

00005054 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5054:	4a02      	ldr	r2, [pc, #8]	; (5060 <z_arm_fault_init+0xc>)
    5056:	6953      	ldr	r3, [r2, #20]
    5058:	f043 0310 	orr.w	r3, r3, #16
    505c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    505e:	4770      	bx	lr
    5060:	e000ed00 	.word	0xe000ed00

00005064 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5064:	4804      	ldr	r0, [pc, #16]	; (5078 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    5066:	2300      	movs	r3, #0
    5068:	2120      	movs	r1, #32
    506a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    506c:	3301      	adds	r3, #1
    506e:	2b27      	cmp	r3, #39	; 0x27
    5070:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    5074:	d1f9      	bne.n	506a <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    5076:	4770      	bx	lr
    5078:	e000e100 	.word	0xe000e100

0000507c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    507c:	b538      	push	{r3, r4, r5, lr}
    507e:	4605      	mov	r5, r0
	__asm__ volatile(
    5080:	f04f 0320 	mov.w	r3, #32
    5084:	f3ef 8411 	mrs	r4, BASEPRI
    5088:	f383 8811 	msr	BASEPRI, r3
    508c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    5090:	f017 fa38 	bl	1c504 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    5094:	4b0a      	ldr	r3, [pc, #40]	; (50c0 <z_impl_k_thread_abort+0x44>)
    5096:	689b      	ldr	r3, [r3, #8]
    5098:	42ab      	cmp	r3, r5
    509a:	d10b      	bne.n	50b4 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    509c:	4b09      	ldr	r3, [pc, #36]	; (50c4 <z_impl_k_thread_abort+0x48>)
    509e:	685a      	ldr	r2, [r3, #4]
    50a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
    50a4:	b912      	cbnz	r2, 50ac <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    50a6:	4620      	mov	r0, r4
    50a8:	f7ff fba6 	bl	47f8 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    50ac:	685a      	ldr	r2, [r3, #4]
    50ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    50b2:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    50b4:	4620      	mov	r0, r4
}
    50b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    50ba:	f020 b8aa 	b.w	25212 <z_reschedule_irqlock>
    50be:	bf00      	nop
    50c0:	20005f64 	.word	0x20005f64
    50c4:	e000ed00 	.word	0xe000ed00

000050c8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    50c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    50ca:	4b08      	ldr	r3, [pc, #32]	; (50ec <z_arm_configure_static_mpu_regions+0x24>)
    50cc:	9301      	str	r3, [sp, #4]
    50ce:	4b08      	ldr	r3, [pc, #32]	; (50f0 <z_arm_configure_static_mpu_regions+0x28>)
    50d0:	9302      	str	r3, [sp, #8]
    50d2:	4b08      	ldr	r3, [pc, #32]	; (50f4 <z_arm_configure_static_mpu_regions+0x2c>)
    50d4:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    50d6:	ab01      	add	r3, sp, #4
    50d8:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    50da:	4a07      	ldr	r2, [pc, #28]	; (50f8 <z_arm_configure_static_mpu_regions+0x30>)
    50dc:	4b07      	ldr	r3, [pc, #28]	; (50fc <z_arm_configure_static_mpu_regions+0x34>)
    50de:	2101      	movs	r1, #1
    50e0:	4668      	mov	r0, sp
    50e2:	f000 f8b5 	bl	5250 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    50e6:	b005      	add	sp, #20
    50e8:	f85d fb04 	ldr.w	pc, [sp], #4
    50ec:	20000000 	.word	0x20000000
    50f0:	00000000 	.word	0x00000000
    50f4:	060b0000 	.word	0x060b0000
    50f8:	20000000 	.word	0x20000000
    50fc:	20010000 	.word	0x20010000

00005100 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    5100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    5102:	4f2e      	ldr	r7, [pc, #184]	; (51bc <mpu_configure_regions+0xbc>)
    5104:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    5106:	2100      	movs	r1, #0
    5108:	42b1      	cmp	r1, r6
    510a:	da22      	bge.n	5152 <mpu_configure_regions+0x52>
		if (regions[i]->size == 0U) {
    510c:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    5110:	f8dc 4004 	ldr.w	r4, [ip, #4]
    5114:	2c00      	cmp	r4, #0
    5116:	d04f      	beq.n	51b8 <mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    5118:	b1eb      	cbz	r3, 5156 <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    511a:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    511e:	ea14 0f0e 	tst.w	r4, lr
    5122:	d106      	bne.n	5132 <mpu_configure_regions+0x32>
		&&
    5124:	2c1f      	cmp	r4, #31
    5126:	d904      	bls.n	5132 <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    5128:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    512c:	ea1e 0f05 	tst.w	lr, r5
    5130:	d011      	beq.n	5156 <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    5132:	2301      	movs	r3, #1
    5134:	f04f 0200 	mov.w	r2, #0
    5138:	f363 0207 	bfi	r2, r3, #0, #8
    513c:	4820      	ldr	r0, [pc, #128]	; (51c0 <mpu_configure_regions+0xc0>)
    513e:	4b21      	ldr	r3, [pc, #132]	; (51c4 <mpu_configure_regions+0xc4>)
    5140:	1a1b      	subs	r3, r3, r0
    5142:	08db      	lsrs	r3, r3, #3
    5144:	4820      	ldr	r0, [pc, #128]	; (51c8 <mpu_configure_regions+0xc8>)
    5146:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    514a:	f019 fc90 	bl	1ea6e <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    514e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    5152:	4610      	mov	r0, r2
    5154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    5156:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    5158:	b2d5      	uxtb	r5, r2
	region_conf.base = new_region->start;
    515a:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    515e:	f8dc c008 	ldr.w	ip, [ip, #8]
    5162:	d91a      	bls.n	519a <mpu_configure_regions+0x9a>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    5164:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5168:	d819      	bhi.n	519e <mpu_configure_regions+0x9e>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    516a:	3c01      	subs	r4, #1
    516c:	fab4 f484 	clz	r4, r4
    5170:	f1c4 041f 	rsb	r4, r4, #31
    5174:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    5176:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5178:	ea4c 0404 	orr.w	r4, ip, r4
    517c:	d911      	bls.n	51a2 <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    517e:	2301      	movs	r3, #1
    5180:	f04f 0200 	mov.w	r2, #0
    5184:	f363 0207 	bfi	r2, r3, #0, #8
    5188:	490d      	ldr	r1, [pc, #52]	; (51c0 <mpu_configure_regions+0xc0>)
    518a:	4b0e      	ldr	r3, [pc, #56]	; (51c4 <mpu_configure_regions+0xc4>)
    518c:	480f      	ldr	r0, [pc, #60]	; (51cc <mpu_configure_regions+0xcc>)
    518e:	1a5b      	subs	r3, r3, r1
    5190:	08db      	lsrs	r3, r3, #3
    5192:	f363 128f 	bfi	r2, r3, #6, #10
    5196:	4629      	mov	r1, r5
    5198:	e7d7      	b.n	514a <mpu_configure_regions+0x4a>
		return REGION_32B;
    519a:	2408      	movs	r4, #8
    519c:	e7eb      	b.n	5176 <mpu_configure_regions+0x76>
		return REGION_4G;
    519e:	243e      	movs	r4, #62	; 0x3e
    51a0:	e7e9      	b.n	5176 <mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    51a2:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    51a6:	432a      	orrs	r2, r5
    51a8:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    51ac:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    51b0:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    51b2:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    51b4:	613c      	str	r4, [r7, #16]
		reg_index++;
    51b6:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    51b8:	3101      	adds	r1, #1
    51ba:	e7a5      	b.n	5108 <mpu_configure_regions+0x8>
    51bc:	e000ed90 	.word	0xe000ed90
    51c0:	00025a6c 	.word	0x00025a6c
    51c4:	00025ba4 	.word	0x00025ba4
    51c8:	00027505 	.word	0x00027505
    51cc:	00027528 	.word	0x00027528

000051d0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    51d0:	4b03      	ldr	r3, [pc, #12]	; (51e0 <arm_core_mpu_enable+0x10>)
    51d2:	2205      	movs	r2, #5
    51d4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    51d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    51da:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    51de:	4770      	bx	lr
    51e0:	e000ed90 	.word	0xe000ed90

000051e4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    51e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    51e8:	4b01      	ldr	r3, [pc, #4]	; (51f0 <arm_core_mpu_disable+0xc>)
    51ea:	2200      	movs	r2, #0
    51ec:	605a      	str	r2, [r3, #4]
}
    51ee:	4770      	bx	lr
    51f0:	e000ed90 	.word	0xe000ed90

000051f4 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    51f4:	4913      	ldr	r1, [pc, #76]	; (5244 <arm_mpu_init+0x50>)
    51f6:	6808      	ldr	r0, [r1, #0]
    51f8:	2808      	cmp	r0, #8
{
    51fa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    51fc:	d81e      	bhi.n	523c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    51fe:	f7ff fff1 	bl	51e4 <arm_core_mpu_disable>
	MPU->RNR = index;
    5202:	4c11      	ldr	r4, [pc, #68]	; (5248 <arm_mpu_init+0x54>)
    5204:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5206:	2200      	movs	r2, #0
    5208:	4290      	cmp	r0, r2
    520a:	f101 010c 	add.w	r1, r1, #12
    520e:	d105      	bne.n	521c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5210:	4b0e      	ldr	r3, [pc, #56]	; (524c <arm_mpu_init+0x58>)
    5212:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    5214:	f7ff ffdc 	bl	51d0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    5218:	2000      	movs	r0, #0
}
    521a:	bd10      	pop	{r4, pc}
    521c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    521e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    5222:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5226:	4313      	orrs	r3, r2
    5228:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    522c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    522e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5232:	f043 0301 	orr.w	r3, r3, #1
    5236:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5238:	3201      	adds	r2, #1
    523a:	e7e5      	b.n	5208 <arm_mpu_init+0x14>
		return -1;
    523c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5240:	e7eb      	b.n	521a <arm_mpu_init+0x26>
    5242:	bf00      	nop
    5244:	00025f8c 	.word	0x00025f8c
    5248:	e000ed90 	.word	0xe000ed90
    524c:	20006060 	.word	0x20006060

00005250 <arm_core_mpu_configure_static_mpu_regions>:
{
    5250:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    5252:	4c03      	ldr	r4, [pc, #12]	; (5260 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5254:	2301      	movs	r3, #1
    5256:	7822      	ldrb	r2, [r4, #0]
    5258:	f7ff ff52 	bl	5100 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    525c:	7020      	strb	r0, [r4, #0]
}
    525e:	bd10      	pop	{r4, pc}
    5260:	20006060 	.word	0x20006060

00005264 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    5264:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5266:	4a08      	ldr	r2, [pc, #32]	; (5288 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    5268:	2300      	movs	r3, #0
    526a:	7812      	ldrb	r2, [r2, #0]
    526c:	f7ff ff48 	bl	5100 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5270:	f110 0f16 	cmn.w	r0, #22
    5274:	d003      	beq.n	527e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    5276:	4b05      	ldr	r3, [pc, #20]	; (528c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    5278:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    527a:	2807      	cmp	r0, #7
    527c:	dd00      	ble.n	5280 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    527e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    5280:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    5282:	611a      	str	r2, [r3, #16]
    5284:	3001      	adds	r0, #1
    5286:	e7f8      	b.n	527a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    5288:	20006060 	.word	0x20006060
    528c:	e000ed90 	.word	0xe000ed90

00005290 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    5290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5294:	b09f      	sub	sp, #124	; 0x7c
    5296:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    5298:	2300      	movs	r3, #0
{
    529a:	9001      	str	r0, [sp, #4]
    529c:	9104      	str	r1, [sp, #16]
	count = 0;
    529e:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
    52a0:	4613      	mov	r3, r2
    52a2:	f813 0b01 	ldrb.w	r0, [r3], #1
    52a6:	9305      	str	r3, [sp, #20]
    52a8:	b158      	cbz	r0, 52c2 <z_prf+0x32>
		if (c != '%') {
    52aa:	2825      	cmp	r0, #37	; 0x25
    52ac:	f000 8085 	beq.w	53ba <z_prf+0x12a>
			PUTC(c);
    52b0:	9904      	ldr	r1, [sp, #16]
    52b2:	9b01      	ldr	r3, [sp, #4]
    52b4:	4798      	blx	r3
    52b6:	3001      	adds	r0, #1
    52b8:	f040 840d 	bne.w	5ad6 <z_prf+0x846>
    52bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    52c0:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
    52c2:	9800      	ldr	r0, [sp, #0]
    52c4:	b01f      	add	sp, #124	; 0x7c
    52c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    52ca:	2c23      	cmp	r4, #35	; 0x23
    52cc:	d06c      	beq.n	53a8 <z_prf+0x118>
    52ce:	d861      	bhi.n	5394 <z_prf+0x104>
    52d0:	2c00      	cmp	r4, #0
    52d2:	d0f6      	beq.n	52c2 <z_prf+0x32>
					fspace = true;
    52d4:	2c20      	cmp	r4, #32
    52d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    52d8:	bf08      	it	eq
    52da:	2301      	moveq	r3, #1
    52dc:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    52de:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    52e2:	f8dd 8014 	ldr.w	r8, [sp, #20]
    52e6:	48b9      	ldr	r0, [pc, #740]	; (55cc <z_prf+0x33c>)
    52e8:	f818 4b01 	ldrb.w	r4, [r8], #1
    52ec:	4621      	mov	r1, r4
    52ee:	f01a f943 	bl	1f578 <strchr>
    52f2:	2800      	cmp	r0, #0
    52f4:	d1e9      	bne.n	52ca <z_prf+0x3a>
			if (c == '*') {
    52f6:	2c2a      	cmp	r4, #42	; 0x2a
    52f8:	d166      	bne.n	53c8 <z_prf+0x138>
				width = va_arg(vargs, int);
    52fa:	f856 3b04 	ldr.w	r3, [r6], #4
    52fe:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    5300:	2b00      	cmp	r3, #0
					width = -width;
    5302:	bfbf      	itttt	lt
    5304:	425b      	neglt	r3, r3
    5306:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    5308:	2301      	movlt	r3, #1
    530a:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    530c:	9b05      	ldr	r3, [sp, #20]
    530e:	f898 4000 	ldrb.w	r4, [r8]
    5312:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    5316:	2c2e      	cmp	r4, #46	; 0x2e
    5318:	d17c      	bne.n	5414 <z_prf+0x184>
				if (c == '*') {
    531a:	f898 3000 	ldrb.w	r3, [r8]
    531e:	2b2a      	cmp	r3, #42	; 0x2a
    5320:	d175      	bne.n	540e <z_prf+0x17e>
					precision = va_arg(vargs, int);
    5322:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    5326:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    532a:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    532e:	48a8      	ldr	r0, [pc, #672]	; (55d0 <z_prf+0x340>)
    5330:	4621      	mov	r1, r4
    5332:	4627      	mov	r7, r4
    5334:	f01a f920 	bl	1f578 <strchr>
    5338:	2800      	cmp	r0, #0
    533a:	d06e      	beq.n	541a <z_prf+0x18a>
				c = *format++;
    533c:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    533e:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    5340:	f813 4b01 	ldrb.w	r4, [r3], #1
    5344:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
    5346:	d107      	bne.n	5358 <z_prf+0xc8>
    5348:	2c68      	cmp	r4, #104	; 0x68
    534a:	d105      	bne.n	5358 <z_prf+0xc8>
					c = *format++;
    534c:	f108 0302 	add.w	r3, r8, #2
    5350:	f898 4001 	ldrb.w	r4, [r8, #1]
    5354:	9305      	str	r3, [sp, #20]
					i = 'H';
    5356:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    5358:	2c67      	cmp	r4, #103	; 0x67
    535a:	d87c      	bhi.n	5456 <z_prf+0x1c6>
    535c:	2c65      	cmp	r4, #101	; 0x65
    535e:	f080 8139 	bcs.w	55d4 <z_prf+0x344>
    5362:	2c47      	cmp	r4, #71	; 0x47
    5364:	d85d      	bhi.n	5422 <z_prf+0x192>
    5366:	2c45      	cmp	r4, #69	; 0x45
    5368:	f080 8134 	bcs.w	55d4 <z_prf+0x344>
    536c:	2c00      	cmp	r4, #0
    536e:	d0a8      	beq.n	52c2 <z_prf+0x32>
    5370:	2c25      	cmp	r4, #37	; 0x25
    5372:	f000 83ac 	beq.w	5ace <z_prf+0x83e>
				PUTC('%');
    5376:	9904      	ldr	r1, [sp, #16]
    5378:	9b01      	ldr	r3, [sp, #4]
    537a:	2025      	movs	r0, #37	; 0x25
    537c:	4798      	blx	r3
    537e:	3001      	adds	r0, #1
    5380:	d09c      	beq.n	52bc <z_prf+0x2c>
				PUTC(c);
    5382:	9904      	ldr	r1, [sp, #16]
    5384:	9b01      	ldr	r3, [sp, #4]
    5386:	4620      	mov	r0, r4
    5388:	4798      	blx	r3
    538a:	3001      	adds	r0, #1
    538c:	d096      	beq.n	52bc <z_prf+0x2c>
				count += 2;
    538e:	9b00      	ldr	r3, [sp, #0]
    5390:	3302      	adds	r3, #2
    5392:	e3a2      	b.n	5ada <z_prf+0x84a>
				switch (c) {
    5394:	2c2d      	cmp	r4, #45	; 0x2d
    5396:	d00a      	beq.n	53ae <z_prf+0x11e>
    5398:	2c30      	cmp	r4, #48	; 0x30
    539a:	d00b      	beq.n	53b4 <z_prf+0x124>
					fplus = true;
    539c:	2c2b      	cmp	r4, #43	; 0x2b
    539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    53a0:	bf08      	it	eq
    53a2:	2301      	moveq	r3, #1
    53a4:	9309      	str	r3, [sp, #36]	; 0x24
    53a6:	e79a      	b.n	52de <z_prf+0x4e>
					falt = true;
    53a8:	2301      	movs	r3, #1
    53aa:	9306      	str	r3, [sp, #24]
    53ac:	e797      	b.n	52de <z_prf+0x4e>
					fminus = true;
    53ae:	2301      	movs	r3, #1
    53b0:	930b      	str	r3, [sp, #44]	; 0x2c
    53b2:	e794      	b.n	52de <z_prf+0x4e>
					fzero = true;
    53b4:	2301      	movs	r3, #1
    53b6:	9308      	str	r3, [sp, #32]
    53b8:	e791      	b.n	52de <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    53ba:	2300      	movs	r3, #0
    53bc:	9308      	str	r3, [sp, #32]
    53be:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    53c2:	930b      	str	r3, [sp, #44]	; 0x2c
    53c4:	9306      	str	r3, [sp, #24]
    53c6:	e78c      	b.n	52e2 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    53c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    53cc:	2b09      	cmp	r3, #9
				width = 0;
    53ce:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    53d0:	d8a1      	bhi.n	5316 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    53d2:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    53d4:	f8dd 8014 	ldr.w	r8, [sp, #20]
    53d8:	f818 4b01 	ldrb.w	r4, [r8], #1
    53dc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    53e0:	2b09      	cmp	r3, #9
    53e2:	d898      	bhi.n	5316 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    53e4:	9b07      	ldr	r3, [sp, #28]
    53e6:	f8cd 8014 	str.w	r8, [sp, #20]
    53ea:	fb02 4403 	mla	r4, r2, r3, r4
    53ee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    53f2:	9307      	str	r3, [sp, #28]
    53f4:	e7ee      	b.n	53d4 <z_prf+0x144>
    53f6:	fb01 3505 	mla	r5, r1, r5, r3
    53fa:	3d30      	subs	r5, #48	; 0x30
    53fc:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    53fe:	4642      	mov	r2, r8
    5400:	f812 3b01 	ldrb.w	r3, [r2], #1
    5404:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    5408:	2809      	cmp	r0, #9
    540a:	d9f4      	bls.n	53f6 <z_prf+0x166>
    540c:	e78d      	b.n	532a <z_prf+0x9a>
	int i = 0;
    540e:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    5410:	210a      	movs	r1, #10
    5412:	e7f4      	b.n	53fe <z_prf+0x16e>
			precision = -1;
    5414:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5418:	e789      	b.n	532e <z_prf+0x9e>
    541a:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
    541e:	4607      	mov	r7, r0
    5420:	e79a      	b.n	5358 <z_prf+0xc8>
			switch (c) {
    5422:	2c63      	cmp	r4, #99	; 0x63
    5424:	d05a      	beq.n	54dc <z_prf+0x24c>
    5426:	d820      	bhi.n	546a <z_prf+0x1da>
    5428:	2c58      	cmp	r4, #88	; 0x58
    542a:	d1a4      	bne.n	5376 <z_prf+0xe6>
				if (c == 'o') {
    542c:	2c6f      	cmp	r4, #111	; 0x6f
    542e:	f106 0904 	add.w	r9, r6, #4
    5432:	6831      	ldr	r1, [r6, #0]
    5434:	f040 831c 	bne.w	5a70 <z_prf+0x7e0>
	if (alt_form) {
    5438:	9b06      	ldr	r3, [sp, #24]
    543a:	2b00      	cmp	r3, #0
    543c:	f000 830a 	beq.w	5a54 <z_prf+0x7c4>
		*buf++ = '0';
    5440:	2330      	movs	r3, #48	; 0x30
    5442:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
    5446:	2900      	cmp	r1, #0
    5448:	f040 830f 	bne.w	5a6a <z_prf+0x7da>
			*buf++ = 0;
    544c:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
    5450:	4688      	mov	r8, r1
			return 1;
    5452:	2601      	movs	r6, #1
    5454:	e026      	b.n	54a4 <z_prf+0x214>
			switch (c) {
    5456:	2c70      	cmp	r4, #112	; 0x70
    5458:	f000 82e7 	beq.w	5a2a <z_prf+0x79a>
    545c:	d828      	bhi.n	54b0 <z_prf+0x220>
    545e:	2c6e      	cmp	r4, #110	; 0x6e
    5460:	f000 82d0 	beq.w	5a04 <z_prf+0x774>
    5464:	d8e2      	bhi.n	542c <z_prf+0x19c>
    5466:	2c69      	cmp	r4, #105	; 0x69
    5468:	d185      	bne.n	5376 <z_prf+0xe6>
				switch (i) {
    546a:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    546c:	2c00      	cmp	r4, #0
    546e:	f106 0904 	add.w	r9, r6, #4
    5472:	f280 809c 	bge.w	55ae <z_prf+0x31e>
		*buf++ = '-';
    5476:	232d      	movs	r3, #45	; 0x2d
    5478:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
    547c:	4261      	negs	r1, r4
		*buf++ = ' ';
    547e:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
    5482:	4630      	mov	r0, r6
    5484:	220a      	movs	r2, #10
    5486:	f01a f903 	bl	1f690 <_to_x>
				if (fplus || fspace || val < 0) {
    548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    548c:	4406      	add	r6, r0
    548e:	a817      	add	r0, sp, #92	; 0x5c
    5490:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    5492:	2b00      	cmp	r3, #0
    5494:	f040 8324 	bne.w	5ae0 <z_prf+0x850>
    5498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    549a:	2b00      	cmp	r3, #0
    549c:	f040 8320 	bne.w	5ae0 <z_prf+0x850>
    54a0:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
    54a4:	2d00      	cmp	r5, #0
    54a6:	da22      	bge.n	54ee <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    54a8:	2500      	movs	r5, #0
    54aa:	462f      	mov	r7, r5
    54ac:	46aa      	mov	sl, r5
    54ae:	e0e5      	b.n	567c <z_prf+0x3ec>
			switch (c) {
    54b0:	2c75      	cmp	r4, #117	; 0x75
    54b2:	d0bb      	beq.n	542c <z_prf+0x19c>
    54b4:	2c78      	cmp	r4, #120	; 0x78
    54b6:	d0b9      	beq.n	542c <z_prf+0x19c>
    54b8:	2c73      	cmp	r4, #115	; 0x73
    54ba:	f47f af5c 	bne.w	5376 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    54be:	46b1      	mov	r9, r6
					precision = INT_MAX;
    54c0:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
    54c2:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
    54c6:	bfb8      	it	lt
    54c8:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    54cc:	2600      	movs	r6, #0
    54ce:	42b5      	cmp	r5, r6
    54d0:	f040 82bb 	bne.w	5a4a <z_prf+0x7ba>
    54d4:	462e      	mov	r6, r5
    54d6:	2500      	movs	r5, #0
    54d8:	46a8      	mov	r8, r5
    54da:	e009      	b.n	54f0 <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
    54dc:	46b1      	mov	r9, r6
				break;
    54de:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    54e2:	f859 3b04 	ldr.w	r3, [r9], #4
    54e6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
    54ea:	2601      	movs	r6, #1
				break;
    54ec:	4645      	mov	r5, r8
    54ee:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
    54f0:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    54f4:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
    54f6:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
    54f8:	462f      	mov	r7, r5
    54fa:	46aa      	mov	sl, r5
			if (zero_head < 0) {
    54fc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    5500:	1991      	adds	r1, r2, r6
    5502:	9106      	str	r1, [sp, #24]
    5504:	9907      	ldr	r1, [sp, #28]
    5506:	1990      	adds	r0, r2, r6
    5508:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    550a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    550c:	b911      	cbnz	r1, 5514 <z_prf+0x284>
    550e:	2c00      	cmp	r4, #0
    5510:	f300 8304 	bgt.w	5b1c <z_prf+0x88c>
			while (prefix-- > 0) {
    5514:	eb03 0b08 	add.w	fp, r3, r8
    5518:	455b      	cmp	r3, fp
    551a:	f040 8301 	bne.w	5b20 <z_prf+0x890>
			while (zero_head-- > 0) {
    551e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    5522:	f080 830d 	bcs.w	5b40 <z_prf+0x8b0>
			clen -= prefix;
    5526:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    552a:	f1ba 0f00 	cmp.w	sl, #0
    552e:	d011      	beq.n	5554 <z_prf+0x2c4>
				c = *cptr;
    5530:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
    5534:	eb0b 0806 	add.w	r8, fp, r6
    5538:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    553c:	2b09      	cmp	r3, #9
    553e:	eba8 060b 	sub.w	r6, r8, fp
    5542:	f240 8308 	bls.w	5b56 <z_prf+0x8c6>
    5546:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
    5548:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    554c:	f080 830c 	bcs.w	5b68 <z_prf+0x8d8>
				clen -= zero.predot;
    5550:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
    5554:	b1af      	cbz	r7, 5582 <z_prf+0x2f2>
    5556:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
    555a:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
    555e:	9904      	ldr	r1, [sp, #16]
    5560:	9b01      	ldr	r3, [sp, #4]
    5562:	4650      	mov	r0, sl
    5564:	4798      	blx	r3
    5566:	3001      	adds	r0, #1
    5568:	f43f aea8 	beq.w	52bc <z_prf+0x2c>
				} while (c != '.');
    556c:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
    5570:	eba8 060b 	sub.w	r6, r8, fp
    5574:	d1f1      	bne.n	555a <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
    5576:	46b8      	mov	r8, r7
    5578:	f1b8 0f00 	cmp.w	r8, #0
    557c:	f300 82fd 	bgt.w	5b7a <z_prf+0x8ea>
				clen -= zero.postdot;
    5580:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
    5582:	b195      	cbz	r5, 55aa <z_prf+0x31a>
				c = *cptr;
    5584:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
    5588:	eb0b 0806 	add.w	r8, fp, r6
    558c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    5590:	2b09      	cmp	r3, #9
    5592:	eba8 060b 	sub.w	r6, r8, fp
    5596:	f240 82fb 	bls.w	5b90 <z_prf+0x900>
    559a:	282e      	cmp	r0, #46	; 0x2e
    559c:	f000 82f8 	beq.w	5b90 <z_prf+0x900>
				while (zero.trail-- > 0) {
    55a0:	462f      	mov	r7, r5
    55a2:	2f00      	cmp	r7, #0
    55a4:	f300 82fd 	bgt.w	5ba2 <z_prf+0x912>
				clen -= zero.trail;
    55a8:	1b76      	subs	r6, r6, r5
    55aa:	445e      	add	r6, fp
    55ac:	e30c      	b.n	5bc8 <z_prf+0x938>
	} else if (fplus) {
    55ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    55b0:	b123      	cbz	r3, 55bc <z_prf+0x32c>
		*buf++ = '+';
    55b2:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    55b4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    55b8:	4621      	mov	r1, r4
    55ba:	e760      	b.n	547e <z_prf+0x1ee>
	} else if (fspace) {
    55bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    55be:	b10b      	cbz	r3, 55c4 <z_prf+0x334>
		*buf++ = ' ';
    55c0:	2320      	movs	r3, #32
    55c2:	e7f7      	b.n	55b4 <z_prf+0x324>
	} else if (fspace) {
    55c4:	4621      	mov	r1, r4
    55c6:	ae17      	add	r6, sp, #92	; 0x5c
    55c8:	e75b      	b.n	5482 <z_prf+0x1f2>
    55ca:	bf00      	nop
    55cc:	0002754e 	.word	0x0002754e
    55d0:	00027554 	.word	0x00027554
				u.d = va_arg(vargs, double);
    55d4:	f106 0907 	add.w	r9, r6, #7
    55d8:	f029 0907 	bic.w	r9, r9, #7
    55dc:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    55e0:	02d8      	lsls	r0, r3, #11
    55e2:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    55e6:	02d6      	lsls	r6, r2, #11
    55e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    55ec:	9602      	str	r6, [sp, #8]
    55ee:	9003      	str	r0, [sp, #12]
    55f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
    55f4:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    55f6:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    55fa:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    55fe:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
    5602:	da43      	bge.n	568c <z_prf+0x3fc>
		*buf++ = '-';
    5604:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    5606:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    560a:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    560e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    5612:	4299      	cmp	r1, r3
    5614:	d155      	bne.n	56c2 <z_prf+0x432>
		if (!fract) {
    5616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    561a:	4313      	orrs	r3, r2
    561c:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    5620:	f107 0b03 	add.w	fp, r7, #3
    5624:	d142      	bne.n	56ac <z_prf+0x41c>
			if (isupper(c)) {
    5626:	2c19      	cmp	r4, #25
    5628:	d83a      	bhi.n	56a0 <z_prf+0x410>
				*buf++ = 'I';
    562a:	2349      	movs	r3, #73	; 0x49
    562c:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    562e:	234e      	movs	r3, #78	; 0x4e
    5630:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    5632:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    5634:	2500      	movs	r5, #0
		return buf - start;
    5636:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    5638:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    563a:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    563c:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    5640:	462f      	mov	r7, r5
    5642:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    5644:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5646:	2b00      	cmp	r3, #0
    5648:	f040 81d9 	bne.w	59fe <z_prf+0x76e>
    564c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    564e:	2b00      	cmp	r3, #0
    5650:	f040 81d5 	bne.w	59fe <z_prf+0x76e>
    5654:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    5658:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    565c:	f1d3 0800 	rsbs	r8, r3, #0
    5660:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    5664:	ab1e      	add	r3, sp, #120	; 0x78
    5666:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    5668:	44bb      	add	fp, r7
    566a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    566e:	3b30      	subs	r3, #48	; 0x30
    5670:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    5674:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    5676:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    5678:	f200 8237 	bhi.w	5aea <z_prf+0x85a>
			} else if (fzero) {
    567c:	9b08      	ldr	r3, [sp, #32]
    567e:	2b00      	cmp	r3, #0
    5680:	f000 8236 	beq.w	5af0 <z_prf+0x860>
    5684:	9b07      	ldr	r3, [sp, #28]
    5686:	1b9a      	subs	r2, r3, r6
    5688:	ab17      	add	r3, sp, #92	; 0x5c
    568a:	e737      	b.n	54fc <z_prf+0x26c>
	} else if (fplus) {
    568c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    568e:	b10b      	cbz	r3, 5694 <z_prf+0x404>
		*buf++ = '+';
    5690:	232b      	movs	r3, #43	; 0x2b
    5692:	e7b8      	b.n	5606 <z_prf+0x376>
	} else if (fspace) {
    5694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5696:	b10b      	cbz	r3, 569c <z_prf+0x40c>
		*buf++ = ' ';
    5698:	2320      	movs	r3, #32
    569a:	e7b4      	b.n	5606 <z_prf+0x376>
	} else if (fspace) {
    569c:	af17      	add	r7, sp, #92	; 0x5c
    569e:	e7b6      	b.n	560e <z_prf+0x37e>
				*buf++ = 'i';
    56a0:	2369      	movs	r3, #105	; 0x69
    56a2:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    56a4:	236e      	movs	r3, #110	; 0x6e
    56a6:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    56a8:	2366      	movs	r3, #102	; 0x66
    56aa:	e7c3      	b.n	5634 <z_prf+0x3a4>
			if (isupper(c)) {
    56ac:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    56ae:	bf99      	ittee	ls
    56b0:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    56b2:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    56b4:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    56b6:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    56b8:	bf94      	ite	ls
    56ba:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    56bc:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    56be:	707a      	strb	r2, [r7, #1]
    56c0:	e7b8      	b.n	5634 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    56c2:	9b02      	ldr	r3, [sp, #8]
    56c4:	9803      	ldr	r0, [sp, #12]
    56c6:	430b      	orrs	r3, r1
    56c8:	930c      	str	r3, [sp, #48]	; 0x30
    56ca:	17cb      	asrs	r3, r1, #31
    56cc:	4303      	orrs	r3, r0
    56ce:	930d      	str	r3, [sp, #52]	; 0x34
    56d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    56d4:	2c46      	cmp	r4, #70	; 0x46
    56d6:	bf08      	it	eq
    56d8:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    56da:	4313      	orrs	r3, r2
    56dc:	f000 80ff 	beq.w	58de <z_prf+0x64e>
		if (exp == 0) {
    56e0:	2900      	cmp	r1, #0
    56e2:	f000 809f 	beq.w	5824 <z_prf+0x594>
		fract |= HIGHBIT64;
    56e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    56e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    56ec:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    56f0:	9313      	str	r3, [sp, #76]	; 0x4c
    56f2:	2600      	movs	r6, #0
	while (exp <= -3) {
    56f4:	f118 0f02 	cmn.w	r8, #2
    56f8:	f2c0 80a8 	blt.w	584c <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    56fc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    5700:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    5704:	f1b8 0f00 	cmp.w	r8, #0
    5708:	f300 80cc 	bgt.w	58a4 <z_prf+0x614>
		_rlrshift(&fract);
    570c:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    570e:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    5712:	f019 ffdf 	bl	1f6d4 <_rlrshift>
	while (exp < (0 + 4)) {
    5716:	f1b8 0f04 	cmp.w	r8, #4
    571a:	d1f7      	bne.n	570c <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    571c:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    571e:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    5722:	bfb8      	it	lt
    5724:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    5726:	2b47      	cmp	r3, #71	; 0x47
    5728:	f040 80e1 	bne.w	58ee <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
    572c:	1cf2      	adds	r2, r6, #3
    572e:	db02      	blt.n	5736 <z_prf+0x4a6>
    5730:	42ae      	cmp	r6, r5
    5732:	f340 80d7 	ble.w	58e4 <z_prf+0x654>
			c += 'e' - 'g';
    5736:	3c02      	subs	r4, #2
    5738:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    573a:	2d00      	cmp	r5, #0
    573c:	f000 80dd 	beq.w	58fa <z_prf+0x66a>
		if (!falt && (precision > 0)) {
    5740:	9b06      	ldr	r3, [sp, #24]
				precision--;
    5742:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    5744:	2b00      	cmp	r3, #0
    5746:	f040 80d8 	bne.w	58fa <z_prf+0x66a>
    574a:	2d00      	cmp	r5, #0
    574c:	bfd4      	ite	le
    574e:	f04f 0800 	movle.w	r8, #0
    5752:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    5756:	2c66      	cmp	r4, #102	; 0x66
    5758:	f040 80d1 	bne.w	58fe <z_prf+0x66e>
		if (exp < 0) {
    575c:	eb16 0a05 	adds.w	sl, r6, r5
    5760:	f140 80d5 	bpl.w	590e <z_prf+0x67e>
	digit_count = 16;
    5764:	2310      	movs	r3, #16
    5766:	9311      	str	r3, [sp, #68]	; 0x44
    5768:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    576a:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    576e:	2200      	movs	r2, #0
    5770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    5774:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    5778:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    577c:	f080 80c9 	bcs.w	5912 <z_prf+0x682>
	fract += ltemp;
    5780:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5782:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5784:	9915      	ldr	r1, [sp, #84]	; 0x54
    5786:	189b      	adds	r3, r3, r2
    5788:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    578a:	eb41 0202 	adc.w	r2, r1, r2
    578e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    5792:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    5796:	930e      	str	r3, [sp, #56]	; 0x38
    5798:	2300      	movs	r3, #0
    579a:	930f      	str	r3, [sp, #60]	; 0x3c
    579c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    57a0:	4313      	orrs	r3, r2
    57a2:	d006      	beq.n	57b2 <z_prf+0x522>
		_ldiv5(&fract);
    57a4:	a812      	add	r0, sp, #72	; 0x48
    57a6:	f019 ffa7 	bl	1f6f8 <_ldiv5>
		_rlrshift(&fract);
    57aa:	a812      	add	r0, sp, #72	; 0x48
    57ac:	f019 ff92 	bl	1f6d4 <_rlrshift>
		decexp++;
    57b0:	3601      	adds	r6, #1
	if (c == 'f') {
    57b2:	2c66      	cmp	r4, #102	; 0x66
    57b4:	f040 80c7 	bne.w	5946 <z_prf+0x6b6>
		if (decexp > 0) {
    57b8:	2e00      	cmp	r6, #0
    57ba:	f340 80b1 	ble.w	5920 <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
    57be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    57c0:	2b00      	cmp	r3, #0
    57c2:	dd07      	ble.n	57d4 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    57c4:	a911      	add	r1, sp, #68	; 0x44
    57c6:	a812      	add	r0, sp, #72	; 0x48
    57c8:	f019 ffc2 	bl	1f750 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    57cc:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    57ce:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    57d2:	d1f4      	bne.n	57be <z_prf+0x52e>
			zp->predot = decexp;
    57d4:	46b2      	mov	sl, r6
    57d6:	46bb      	mov	fp, r7
			decexp = 0;
    57d8:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    57da:	9b06      	ldr	r3, [sp, #24]
    57dc:	b913      	cbnz	r3, 57e4 <z_prf+0x554>
    57de:	2d00      	cmp	r5, #0
    57e0:	f340 80af 	ble.w	5942 <z_prf+0x6b2>
			*buf++ = '.';
    57e4:	232e      	movs	r3, #46	; 0x2e
    57e6:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    57ea:	2e00      	cmp	r6, #0
    57ec:	f000 80a7 	beq.w	593e <z_prf+0x6ae>
    57f0:	2d00      	cmp	r5, #0
    57f2:	f340 80a6 	ble.w	5942 <z_prf+0x6b2>
			zp->postdot = -decexp;
    57f6:	4277      	negs	r7, r6
    57f8:	42af      	cmp	r7, r5
    57fa:	bfa8      	it	ge
    57fc:	462f      	movge	r7, r5
			precision -= zp->postdot;
    57fe:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    5800:	2d00      	cmp	r5, #0
    5802:	dd03      	ble.n	580c <z_prf+0x57c>
    5804:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5806:	2b00      	cmp	r3, #0
    5808:	f300 8091 	bgt.w	592e <z_prf+0x69e>
	if (prune_zero) {
    580c:	f1b8 0f00 	cmp.w	r8, #0
    5810:	f040 80af 	bne.w	5972 <z_prf+0x6e2>
	*buf = 0;
    5814:	2300      	movs	r3, #0
	return buf - start;
    5816:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    5818:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    581c:	ebab 0b06 	sub.w	fp, fp, r6
    5820:	e710      	b.n	5644 <z_prf+0x3b4>
				exp--;
    5822:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    5824:	9b02      	ldr	r3, [sp, #8]
    5826:	18db      	adds	r3, r3, r3
    5828:	9302      	str	r3, [sp, #8]
    582a:	9b03      	ldr	r3, [sp, #12]
    582c:	415b      	adcs	r3, r3
    582e:	9303      	str	r3, [sp, #12]
    5830:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5834:	2a00      	cmp	r2, #0
    5836:	f173 0300 	sbcs.w	r3, r3, #0
    583a:	daf2      	bge.n	5822 <z_prf+0x592>
    583c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5840:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    5844:	e74f      	b.n	56e6 <z_prf+0x456>
			_rlrshift(&fract);
    5846:	a812      	add	r0, sp, #72	; 0x48
    5848:	f019 ff44 	bl	1f6d4 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    584c:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    5850:	f04f 0b00 	mov.w	fp, #0
    5854:	48b9      	ldr	r0, [pc, #740]	; (5b3c <z_prf+0x8ac>)
    5856:	2100      	movs	r1, #0
    5858:	4559      	cmp	r1, fp
    585a:	bf08      	it	eq
    585c:	4560      	cmpeq	r0, ip
    585e:	f108 0801 	add.w	r8, r8, #1
    5862:	d3f0      	bcc.n	5846 <z_prf+0x5b6>
		fract *= 5U;
    5864:	2005      	movs	r0, #5
    5866:	fba2 2300 	umull	r2, r3, r2, r0
    586a:	fb00 330c 	mla	r3, r0, ip, r3
    586e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    5872:	46dc      	mov	ip, fp
    5874:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    5876:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    587a:	f04f 0b00 	mov.w	fp, #0
    587e:	2100      	movs	r1, #0
    5880:	458b      	cmp	fp, r1
    5882:	bf08      	it	eq
    5884:	459a      	cmpeq	sl, r3
    5886:	d206      	bcs.n	5896 <z_prf+0x606>
    5888:	f1bc 0f00 	cmp.w	ip, #0
    588c:	f43f af32 	beq.w	56f4 <z_prf+0x464>
    5890:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    5894:	e72e      	b.n	56f4 <z_prf+0x464>
			fract <<= 1;
    5896:	1892      	adds	r2, r2, r2
    5898:	415b      	adcs	r3, r3
			exp--;
    589a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    589e:	f04f 0c01 	mov.w	ip, #1
    58a2:	e7ec      	b.n	587e <z_prf+0x5ee>
		_ldiv5(&fract);
    58a4:	a812      	add	r0, sp, #72	; 0x48
    58a6:	f019 ff27 	bl	1f6f8 <_ldiv5>
		exp--;
    58aa:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    58ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    58b2:	3601      	adds	r6, #1
    58b4:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    58b8:	2300      	movs	r3, #0
    58ba:	459b      	cmp	fp, r3
    58bc:	bf08      	it	eq
    58be:	4582      	cmpeq	sl, r0
    58c0:	d206      	bcs.n	58d0 <z_prf+0x640>
    58c2:	f1bc 0f00 	cmp.w	ip, #0
    58c6:	f43f af1d 	beq.w	5704 <z_prf+0x474>
    58ca:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    58ce:	e719      	b.n	5704 <z_prf+0x474>
			fract <<= 1;
    58d0:	1849      	adds	r1, r1, r1
    58d2:	4140      	adcs	r0, r0
			exp--;
    58d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    58d8:	f04f 0c01 	mov.w	ip, #1
    58dc:	e7ec      	b.n	58b8 <z_prf+0x628>
	if ((exp | fract) != 0) {
    58de:	2600      	movs	r6, #0
    58e0:	46b0      	mov	r8, r6
    58e2:	e713      	b.n	570c <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    58e4:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    58e6:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    58e8:	b923      	cbnz	r3, 58f4 <z_prf+0x664>
			c = 'f';
    58ea:	2466      	movs	r4, #102	; 0x66
    58ec:	e72d      	b.n	574a <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    58ee:	f04f 0800 	mov.w	r8, #0
    58f2:	e730      	b.n	5756 <z_prf+0x4c6>
    58f4:	f04f 0800 	mov.w	r8, #0
    58f8:	e730      	b.n	575c <z_prf+0x4cc>
    58fa:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    58fe:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    5902:	2310      	movs	r3, #16
    5904:	459a      	cmp	sl, r3
    5906:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    5908:	bfa8      	it	ge
    590a:	469a      	movge	sl, r3
    590c:	e72f      	b.n	576e <z_prf+0x4de>
		if (exp < 0) {
    590e:	2466      	movs	r4, #102	; 0x66
    5910:	e7f7      	b.n	5902 <z_prf+0x672>
		_ldiv5(&ltemp);
    5912:	a814      	add	r0, sp, #80	; 0x50
    5914:	f019 fef0 	bl	1f6f8 <_ldiv5>
		_rlrshift(&ltemp);
    5918:	a814      	add	r0, sp, #80	; 0x50
    591a:	f019 fedb 	bl	1f6d4 <_rlrshift>
    591e:	e72b      	b.n	5778 <z_prf+0x4e8>
			*buf++ = '0';
    5920:	46bb      	mov	fp, r7
    5922:	2330      	movs	r3, #48	; 0x30
    5924:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    5928:	f04f 0a00 	mov.w	sl, #0
    592c:	e755      	b.n	57da <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    592e:	a911      	add	r1, sp, #68	; 0x44
    5930:	a812      	add	r0, sp, #72	; 0x48
    5932:	f019 ff0d 	bl	1f750 <_get_digit>
			precision--;
    5936:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    5938:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    593c:	e760      	b.n	5800 <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
    593e:	4637      	mov	r7, r6
    5940:	e75e      	b.n	5800 <z_prf+0x570>
    5942:	2700      	movs	r7, #0
    5944:	e762      	b.n	580c <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
    5946:	a911      	add	r1, sp, #68	; 0x44
    5948:	a812      	add	r0, sp, #72	; 0x48
    594a:	f019 ff01 	bl	1f750 <_get_digit>
		if (falt || (precision > 0)) {
    594e:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    5950:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    5952:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    5954:	bf18      	it	ne
    5956:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    595a:	2b00      	cmp	r3, #0
    595c:	d13b      	bne.n	59d6 <z_prf+0x746>
    595e:	2d00      	cmp	r5, #0
    5960:	dc39      	bgt.n	59d6 <z_prf+0x746>
		if (*buf++ != '0') {
    5962:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    5966:	f1b8 0f00 	cmp.w	r8, #0
    596a:	d045      	beq.n	59f8 <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
    596c:	f04f 0a00 	mov.w	sl, #0
    5970:	4657      	mov	r7, sl
		while (*--buf == '0')
    5972:	465b      	mov	r3, fp
    5974:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    5978:	2a30      	cmp	r2, #48	; 0x30
    597a:	d0fa      	beq.n	5972 <z_prf+0x6e2>
		if (*buf != '.') {
    597c:	2a2e      	cmp	r2, #46	; 0x2e
    597e:	bf18      	it	ne
    5980:	469b      	movne	fp, r3
    5982:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    5984:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    5988:	2b45      	cmp	r3, #69	; 0x45
    598a:	f47f af43 	bne.w	5814 <z_prf+0x584>
		if (decexp < 0) {
    598e:	2e00      	cmp	r6, #0
		*buf++ = c;
    5990:	465a      	mov	r2, fp
			decexp = -decexp;
    5992:	bfba      	itte	lt
    5994:	4276      	neglt	r6, r6
			*buf++ = '-';
    5996:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    5998:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    599a:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    599c:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    59a0:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    59a4:	dd0a      	ble.n	59bc <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
    59a6:	2164      	movs	r1, #100	; 0x64
    59a8:	fb96 f3f1 	sdiv	r3, r6, r1
    59ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
    59b0:	f10b 0203 	add.w	r2, fp, #3
    59b4:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    59b8:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    59bc:	210a      	movs	r1, #10
    59be:	4693      	mov	fp, r2
    59c0:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    59c4:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    59c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    59cc:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    59ce:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    59d2:	7056      	strb	r6, [r2, #1]
    59d4:	e71e      	b.n	5814 <z_prf+0x584>
			*buf++ = '.';
    59d6:	232e      	movs	r3, #46	; 0x2e
    59d8:	f107 0b02 	add.w	fp, r7, #2
    59dc:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    59de:	2d00      	cmp	r5, #0
    59e0:	ddc1      	ble.n	5966 <z_prf+0x6d6>
    59e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    59e4:	2b00      	cmp	r3, #0
    59e6:	ddbe      	ble.n	5966 <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
    59e8:	a911      	add	r1, sp, #68	; 0x44
    59ea:	a812      	add	r0, sp, #72	; 0x48
    59ec:	f019 feb0 	bl	1f750 <_get_digit>
			precision--;
    59f0:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    59f2:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    59f6:	e7f2      	b.n	59de <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
    59f8:	46c2      	mov	sl, r8
    59fa:	4647      	mov	r7, r8
    59fc:	e7c2      	b.n	5984 <z_prf+0x6f4>
					prefix = 1;
    59fe:	f04f 0801 	mov.w	r8, #1
    5a02:	e62f      	b.n	5664 <z_prf+0x3d4>
				switch (i) {
    5a04:	46b1      	mov	r9, r6
    5a06:	2f68      	cmp	r7, #104	; 0x68
    5a08:	f859 3b04 	ldr.w	r3, [r9], #4
    5a0c:	d005      	beq.n	5a1a <z_prf+0x78a>
    5a0e:	dc01      	bgt.n	5a14 <z_prf+0x784>
    5a10:	2f48      	cmp	r7, #72	; 0x48
    5a12:	d007      	beq.n	5a24 <z_prf+0x794>
					*va_arg(vargs, int *) = count;
    5a14:	9a00      	ldr	r2, [sp, #0]
    5a16:	601a      	str	r2, [r3, #0]
					break;
    5a18:	e001      	b.n	5a1e <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
    5a1a:	9a00      	ldr	r2, [sp, #0]
    5a1c:	801a      	strh	r2, [r3, #0]
				continue;
    5a1e:	464e      	mov	r6, r9
    5a20:	9a05      	ldr	r2, [sp, #20]
    5a22:	e43d      	b.n	52a0 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    5a24:	9a00      	ldr	r2, [sp, #0]
    5a26:	701a      	strb	r2, [r3, #0]
					break;
    5a28:	e7f9      	b.n	5a1e <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
    5a2a:	46b1      	mov	r9, r6
		*buf++ = '0';
    5a2c:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    5a30:	2210      	movs	r2, #16
    5a32:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    5a36:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    5a3a:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    5a3e:	f019 fe27 	bl	1f690 <_to_x>
				prefix = 2;
    5a42:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    5a46:	1c86      	adds	r6, r0, #2
				break;
    5a48:	e52c      	b.n	54a4 <z_prf+0x214>
					if (cptr[clen] == '\0') {
    5a4a:	5d9a      	ldrb	r2, [r3, r6]
    5a4c:	2a00      	cmp	r2, #0
    5a4e:	d04a      	beq.n	5ae6 <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
    5a50:	3601      	adds	r6, #1
    5a52:	e53c      	b.n	54ce <z_prf+0x23e>
	if (alt_form) {
    5a54:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    5a56:	2208      	movs	r2, #8
    5a58:	4620      	mov	r0, r4
    5a5a:	f019 fe19 	bl	1f690 <_to_x>
    5a5e:	ae17      	add	r6, sp, #92	; 0x5c
    5a60:	1ba6      	subs	r6, r4, r6
    5a62:	4406      	add	r6, r0
			prefix = 0;
    5a64:	f04f 0800 	mov.w	r8, #0
    5a68:	e51c      	b.n	54a4 <z_prf+0x214>
		*buf++ = '0';
    5a6a:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    5a6e:	e7f2      	b.n	5a56 <z_prf+0x7c6>
				} else if (c == 'u') {
    5a70:	2c75      	cmp	r4, #117	; 0x75
    5a72:	d105      	bne.n	5a80 <z_prf+0x7f0>
	return _to_x(buf, value, 10);
    5a74:	220a      	movs	r2, #10
    5a76:	a817      	add	r0, sp, #92	; 0x5c
    5a78:	f019 fe0a 	bl	1f690 <_to_x>
    5a7c:	4606      	mov	r6, r0
    5a7e:	e7f1      	b.n	5a64 <z_prf+0x7d4>
	if (alt_form) {
    5a80:	9b06      	ldr	r3, [sp, #24]
    5a82:	b193      	cbz	r3, 5aaa <z_prf+0x81a>
		*buf++ = '0';
    5a84:	f647 0330 	movw	r3, #30768	; 0x7830
    5a88:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    5a8c:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    5a90:	2210      	movs	r2, #16
    5a92:	4638      	mov	r0, r7
    5a94:	f019 fdfc 	bl	1f690 <_to_x>
	if (prefix == 'X') {
    5a98:	2c58      	cmp	r4, #88	; 0x58
    5a9a:	d008      	beq.n	5aae <z_prf+0x81e>
	return len + (buf - buf0);
    5a9c:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    5a9e:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    5aa0:	1bbe      	subs	r6, r7, r6
    5aa2:	4406      	add	r6, r0
						prefix = 2;
    5aa4:	ea4f 0843 	mov.w	r8, r3, lsl #1
    5aa8:	e4fc      	b.n	54a4 <z_prf+0x214>
	if (alt_form) {
    5aaa:	af17      	add	r7, sp, #92	; 0x5c
    5aac:	e7f0      	b.n	5a90 <z_prf+0x800>
    5aae:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    5ab0:	f812 3b01 	ldrb.w	r3, [r2], #1
    5ab4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    5ab8:	2919      	cmp	r1, #25
    5aba:	d803      	bhi.n	5ac4 <z_prf+0x834>
			*buf += 'A' - 'a';
    5abc:	3b20      	subs	r3, #32
    5abe:	f802 3c01 	strb.w	r3, [r2, #-1]
    5ac2:	e7f5      	b.n	5ab0 <z_prf+0x820>
	} while (*buf++);
    5ac4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    5ac8:	2b00      	cmp	r3, #0
    5aca:	d1f1      	bne.n	5ab0 <z_prf+0x820>
    5acc:	e7e6      	b.n	5a9c <z_prf+0x80c>
				PUTC('%');
    5ace:	9904      	ldr	r1, [sp, #16]
    5ad0:	4620      	mov	r0, r4
    5ad2:	f7ff bbee 	b.w	52b2 <z_prf+0x22>
				count++;
    5ad6:	9b00      	ldr	r3, [sp, #0]
    5ad8:	3301      	adds	r3, #1
				count += 2;
    5ada:	9300      	str	r3, [sp, #0]
				continue;
    5adc:	46b1      	mov	r9, r6
    5ade:	e79e      	b.n	5a1e <z_prf+0x78e>
					prefix = 1;
    5ae0:	f04f 0801 	mov.w	r8, #1
    5ae4:	e4de      	b.n	54a4 <z_prf+0x214>
    5ae6:	4615      	mov	r5, r2
    5ae8:	e4f6      	b.n	54d8 <z_prf+0x248>
			cptr = buf;
    5aea:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    5aec:	2200      	movs	r2, #0
    5aee:	e507      	b.n	5500 <z_prf+0x270>
    5af0:	ab17      	add	r3, sp, #92	; 0x5c
    5af2:	9a08      	ldr	r2, [sp, #32]
    5af4:	e504      	b.n	5500 <z_prf+0x270>
    5af6:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    5afa:	9904      	ldr	r1, [sp, #16]
    5afc:	9b01      	ldr	r3, [sp, #4]
    5afe:	2020      	movs	r0, #32
    5b00:	4798      	blx	r3
    5b02:	3001      	adds	r0, #1
    5b04:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    5b08:	f43f abd8 	beq.w	52bc <z_prf+0x2c>
				while (width-- > 0) {
    5b0c:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    5b10:	d2f1      	bcs.n	5af6 <z_prf+0x866>
				count += width;
    5b12:	9900      	ldr	r1, [sp, #0]
    5b14:	4421      	add	r1, r4
    5b16:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    5b18:	465c      	mov	r4, fp
    5b1a:	e4fb      	b.n	5514 <z_prf+0x284>
    5b1c:	46a3      	mov	fp, r4
    5b1e:	e7f5      	b.n	5b0c <z_prf+0x87c>
				PUTC(*cptr++);
    5b20:	f813 0b01 	ldrb.w	r0, [r3], #1
    5b24:	9307      	str	r3, [sp, #28]
    5b26:	9904      	ldr	r1, [sp, #16]
    5b28:	9b01      	ldr	r3, [sp, #4]
    5b2a:	9208      	str	r2, [sp, #32]
    5b2c:	4798      	blx	r3
    5b2e:	3001      	adds	r0, #1
    5b30:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    5b34:	f47f acf0 	bne.w	5518 <z_prf+0x288>
    5b38:	f7ff bbc0 	b.w	52bc <z_prf+0x2c>
    5b3c:	33333332 	.word	0x33333332
				PUTC('0');
    5b40:	9904      	ldr	r1, [sp, #16]
    5b42:	9b01      	ldr	r3, [sp, #4]
    5b44:	9207      	str	r2, [sp, #28]
    5b46:	2030      	movs	r0, #48	; 0x30
    5b48:	4798      	blx	r3
    5b4a:	3001      	adds	r0, #1
    5b4c:	9a07      	ldr	r2, [sp, #28]
    5b4e:	f47f ace6 	bne.w	551e <z_prf+0x28e>
    5b52:	f7ff bbb3 	b.w	52bc <z_prf+0x2c>
					PUTC(c);
    5b56:	9904      	ldr	r1, [sp, #16]
    5b58:	9b01      	ldr	r3, [sp, #4]
    5b5a:	4798      	blx	r3
    5b5c:	3001      	adds	r0, #1
    5b5e:	f43f abad 	beq.w	52bc <z_prf+0x2c>
					c = *++cptr;
    5b62:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    5b66:	e4e7      	b.n	5538 <z_prf+0x2a8>
					PUTC('0');
    5b68:	9904      	ldr	r1, [sp, #16]
    5b6a:	9b01      	ldr	r3, [sp, #4]
    5b6c:	2030      	movs	r0, #48	; 0x30
    5b6e:	4798      	blx	r3
    5b70:	3001      	adds	r0, #1
    5b72:	f47f ace9 	bne.w	5548 <z_prf+0x2b8>
    5b76:	f7ff bba1 	b.w	52bc <z_prf+0x2c>
					PUTC('0');
    5b7a:	9904      	ldr	r1, [sp, #16]
    5b7c:	9b01      	ldr	r3, [sp, #4]
    5b7e:	2030      	movs	r0, #48	; 0x30
    5b80:	4798      	blx	r3
    5b82:	3001      	adds	r0, #1
    5b84:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5b88:	f47f acf6 	bne.w	5578 <z_prf+0x2e8>
    5b8c:	f7ff bb96 	b.w	52bc <z_prf+0x2c>
					PUTC(c);
    5b90:	9904      	ldr	r1, [sp, #16]
    5b92:	9b01      	ldr	r3, [sp, #4]
    5b94:	4798      	blx	r3
    5b96:	3001      	adds	r0, #1
    5b98:	f43f ab90 	beq.w	52bc <z_prf+0x2c>
					c = *++cptr;
    5b9c:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    5ba0:	e4f4      	b.n	558c <z_prf+0x2fc>
					PUTC('0');
    5ba2:	9904      	ldr	r1, [sp, #16]
    5ba4:	9b01      	ldr	r3, [sp, #4]
    5ba6:	2030      	movs	r0, #48	; 0x30
    5ba8:	4798      	blx	r3
    5baa:	3001      	adds	r0, #1
    5bac:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    5bb0:	f47f acf7 	bne.w	55a2 <z_prf+0x312>
    5bb4:	f7ff bb82 	b.w	52bc <z_prf+0x2c>
				PUTC(*cptr++);
    5bb8:	9904      	ldr	r1, [sp, #16]
    5bba:	f81b 0b01 	ldrb.w	r0, [fp], #1
    5bbe:	9b01      	ldr	r3, [sp, #4]
    5bc0:	4798      	blx	r3
    5bc2:	3001      	adds	r0, #1
    5bc4:	f43f ab7a 	beq.w	52bc <z_prf+0x2c>
    5bc8:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    5bcc:	2b00      	cmp	r3, #0
    5bce:	dcf3      	bgt.n	5bb8 <z_prf+0x928>
			count += clen;
    5bd0:	9b00      	ldr	r3, [sp, #0]
    5bd2:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    5bd4:	2c00      	cmp	r4, #0
			count += clen;
    5bd6:	4413      	add	r3, r2
    5bd8:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    5bda:	f77f af20 	ble.w	5a1e <z_prf+0x78e>
    5bde:	4625      	mov	r5, r4
    5be0:	e006      	b.n	5bf0 <z_prf+0x960>
					PUTC(' ');
    5be2:	9904      	ldr	r1, [sp, #16]
    5be4:	9b01      	ldr	r3, [sp, #4]
    5be6:	2020      	movs	r0, #32
    5be8:	4798      	blx	r3
    5bea:	3001      	adds	r0, #1
    5bec:	f43f ab66 	beq.w	52bc <z_prf+0x2c>
				while (width-- > 0) {
    5bf0:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    5bf4:	d2f5      	bcs.n	5be2 <z_prf+0x952>
				count += width;
    5bf6:	9b00      	ldr	r3, [sp, #0]
    5bf8:	4423      	add	r3, r4
    5bfa:	9300      	str	r3, [sp, #0]
    5bfc:	e70f      	b.n	5a1e <z_prf+0x78e>
    5bfe:	bf00      	nop

00005c00 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    5c00:	b40e      	push	{r1, r2, r3}
    5c02:	b50f      	push	{r0, r1, r2, r3, lr}
    5c04:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    5c06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    5c0a:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    5c0e:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    5c10:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    5c12:	4806      	ldr	r0, [pc, #24]	; (5c2c <sprintf+0x2c>)
	va_start(vargs, format);
    5c14:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    5c16:	a902      	add	r1, sp, #8
    5c18:	f7ff fb3a 	bl	5290 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    5c1c:	9b02      	ldr	r3, [sp, #8]
    5c1e:	2200      	movs	r2, #0
    5c20:	701a      	strb	r2, [r3, #0]
	return r;
}
    5c22:	b004      	add	sp, #16
    5c24:	f85d eb04 	ldr.w	lr, [sp], #4
    5c28:	b003      	add	sp, #12
    5c2a:	4770      	bx	lr
    5c2c:	0001f77f 	.word	0x0001f77f

00005c30 <set_lvgl_rendering_cb>:
 */

#include "lvgl_display.h"

int set_lvgl_rendering_cb(lv_disp_drv_t *disp_drv)
{
    5c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5c32:	4604      	mov	r4, r0
	int err = 0;
	struct device *display_dev = (struct device *)disp_drv->user_data;
    5c34:	6a00      	ldr	r0, [r0, #32]
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->driver_api;

	api->get_capabilities(dev, capabilities);
    5c36:	6843      	ldr	r3, [r0, #4]
    5c38:	4669      	mov	r1, sp
    5c3a:	69db      	ldr	r3, [r3, #28]
    5c3c:	4798      	blx	r3
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);

	switch (cap.current_pixel_format) {
    5c3e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    5c42:	3a01      	subs	r2, #1
    5c44:	2300      	movs	r3, #0
    5c46:	2a0f      	cmp	r2, #15
    5c48:	d820      	bhi.n	5c8c <set_lvgl_rendering_cb+0x5c>
    5c4a:	e8df f002 	tbb	[pc, r2]
    5c4e:	190f      	.short	0x190f
    5c50:	1f1f191f 	.word	0x1f1f191f
    5c54:	1f1f081f 	.word	0x1f1f081f
    5c58:	1f1f1f1f 	.word	0x1f1f1f1f
    5c5c:	141f      	.short	0x141f
	case PIXEL_FORMAT_ARGB_8888:
		disp_drv->flush_cb = lvgl_flush_cb_32bit;
    5c5e:	4a0e      	ldr	r2, [pc, #56]	; (5c98 <set_lvgl_rendering_cb+0x68>)
		disp_drv->rounder_cb = NULL;
    5c60:	e9c4 2303 	strd	r2, r3, [r4, #12]
		break;
	case PIXEL_FORMAT_MONO01:
	case PIXEL_FORMAT_MONO10:
		disp_drv->flush_cb = lvgl_flush_cb_mono;
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
    5c64:	6163      	str	r3, [r4, #20]
	int err = 0;
    5c66:	2000      	movs	r0, #0
		break;

	}

	return err;
}
    5c68:	b004      	add	sp, #16
    5c6a:	bd10      	pop	{r4, pc}
		disp_drv->flush_cb = lvgl_flush_cb_24bit;
    5c6c:	4a0b      	ldr	r2, [pc, #44]	; (5c9c <set_lvgl_rendering_cb+0x6c>)
		disp_drv->rounder_cb = NULL;
    5c6e:	e9c4 2303 	strd	r2, r3, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    5c72:	4b0b      	ldr	r3, [pc, #44]	; (5ca0 <set_lvgl_rendering_cb+0x70>)
    5c74:	e7f6      	b.n	5c64 <set_lvgl_rendering_cb+0x34>
		disp_drv->flush_cb = lvgl_flush_cb_16bit;
    5c76:	4a0b      	ldr	r2, [pc, #44]	; (5ca4 <set_lvgl_rendering_cb+0x74>)
		disp_drv->rounder_cb = NULL;
    5c78:	e9c4 2303 	strd	r2, r3, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_16bit;
    5c7c:	4b0a      	ldr	r3, [pc, #40]	; (5ca8 <set_lvgl_rendering_cb+0x78>)
    5c7e:	e7f1      	b.n	5c64 <set_lvgl_rendering_cb+0x34>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
    5c80:	4b0a      	ldr	r3, [pc, #40]	; (5cac <set_lvgl_rendering_cb+0x7c>)
    5c82:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
    5c84:	4b0a      	ldr	r3, [pc, #40]	; (5cb0 <set_lvgl_rendering_cb+0x80>)
    5c86:	6123      	str	r3, [r4, #16]
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
    5c88:	4b0a      	ldr	r3, [pc, #40]	; (5cb4 <set_lvgl_rendering_cb+0x84>)
    5c8a:	e7eb      	b.n	5c64 <set_lvgl_rendering_cb+0x34>
		disp_drv->rounder_cb = NULL;
    5c8c:	e9c4 3303 	strd	r3, r3, [r4, #12]
		disp_drv->set_px_cb = NULL;
    5c90:	6163      	str	r3, [r4, #20]
		err = -ENOTSUP;
    5c92:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
    5c96:	e7e7      	b.n	5c68 <set_lvgl_rendering_cb+0x38>
    5c98:	0001fa2f 	.word	0x0001fa2f
    5c9c:	0001f961 	.word	0x0001f961
    5ca0:	0001f9b3 	.word	0x0001f9b3
    5ca4:	0001f8e7 	.word	0x0001f8e7
    5ca8:	0001f933 	.word	0x0001f933
    5cac:	0001f79f 	.word	0x0001f79f
    5cb0:	0001f8af 	.word	0x0001f8af
    5cb4:	0001f819 	.word	0x0001f819

00005cb8 <lvgl_log>:
	 * * LOG_LEVEL_ERR 1
	 * * LOG_LEVEL_WRN 2
	 * * LOG_LEVEL_INF 3
	 * * LOG_LEVEL_DBG 4
	 */
	u8_t zephyr_level = LOG_LEVEL_DBG - level;
    5cb8:	f1c0 0004 	rsb	r0, r0, #4
    5cbc:	b240      	sxtb	r0, r0
{
    5cbe:	b410      	push	{r4}
	u8_t zephyr_level = LOG_LEVEL_DBG - level;
    5cc0:	b2c4      	uxtb	r4, r0

	ARG_UNUSED(file);
	ARG_UNUSED(line);

	Z_LOG(zephyr_level, "%s", dsc);
    5cc2:	2c03      	cmp	r4, #3
{
    5cc4:	4619      	mov	r1, r3
	Z_LOG(zephyr_level, "%s", dsc);
    5cc6:	d818      	bhi.n	5cfa <lvgl_log+0x42>
    5cc8:	f04f 0300 	mov.w	r3, #0
    5ccc:	f360 0302 	bfi	r3, r0, #0, #3
    5cd0:	4a0b      	ldr	r2, [pc, #44]	; (5d00 <lvgl_log+0x48>)
    5cd2:	480c      	ldr	r0, [pc, #48]	; (5d04 <lvgl_log+0x4c>)
    5cd4:	1a12      	subs	r2, r2, r0
    5cd6:	f36f 03c5 	bfc	r3, #3, #3
    5cda:	08d2      	lsrs	r2, r2, #3
    5cdc:	2c04      	cmp	r4, #4
    5cde:	f362 138f 	bfi	r3, r2, #6, #10
    5ce2:	d105      	bne.n	5cf0 <lvgl_log+0x38>
    5ce4:	460a      	mov	r2, r1
    5ce6:	4808      	ldr	r0, [pc, #32]	; (5d08 <lvgl_log+0x50>)
    5ce8:	4908      	ldr	r1, [pc, #32]	; (5d0c <lvgl_log+0x54>)
}
    5cea:	bc10      	pop	{r4}
	Z_LOG(zephyr_level, "%s", dsc);
    5cec:	f018 bed3 	b.w	1ea96 <log_2>
    5cf0:	461a      	mov	r2, r3
    5cf2:	4807      	ldr	r0, [pc, #28]	; (5d10 <lvgl_log+0x58>)
}
    5cf4:	bc10      	pop	{r4}
	Z_LOG(zephyr_level, "%s", dsc);
    5cf6:	f018 beba 	b.w	1ea6e <log_1>
}
    5cfa:	bc10      	pop	{r4}
    5cfc:	4770      	bx	lr
    5cfe:	bf00      	nop
    5d00:	00025b9c 	.word	0x00025b9c
    5d04:	00025a6c 	.word	0x00025a6c
    5d08:	000278bd 	.word	0x000278bd
    5d0c:	00027558 	.word	0x00027558
    5d10:	000278d2 	.word	0x000278d2

00005d14 <lvgl_init>:
	return 0;
}
#endif /* CONFIG_LVGL_BUFFER_ALLOC_STATIC */

static int lvgl_init(struct device *dev)
{
    5d14:	b510      	push	{r4, lr}
    5d16:	b08a      	sub	sp, #40	; 0x28
    5d18:	482a      	ldr	r0, [pc, #168]	; (5dc4 <lvgl_init+0xb0>)
    5d1a:	f015 ff1d 	bl	1bb58 <z_impl_device_get_binding>

	struct device *display_dev =
		device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
	lv_disp_drv_t disp_drv;

	if (display_dev == NULL) {
    5d1e:	4604      	mov	r4, r0
    5d20:	b990      	cbnz	r0, 5d48 <lvgl_init+0x34>
		LOG_ERR("Display device not found.");
    5d22:	2301      	movs	r3, #1
    5d24:	f04f 0100 	mov.w	r1, #0
    5d28:	f363 0107 	bfi	r1, r3, #0, #8
    5d2c:	4a26      	ldr	r2, [pc, #152]	; (5dc8 <lvgl_init+0xb4>)
    5d2e:	4b27      	ldr	r3, [pc, #156]	; (5dcc <lvgl_init+0xb8>)
    5d30:	4827      	ldr	r0, [pc, #156]	; (5dd0 <lvgl_init+0xbc>)
    5d32:	1a9b      	subs	r3, r3, r2
    5d34:	08db      	lsrs	r3, r3, #3
    5d36:	f363 118f 	bfi	r1, r3, #6, #10
    5d3a:	f018 fe8b 	bl	1ea54 <log_0>
		return -ENODEV;
    5d3e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Failed to register display device.");
		return -EPERM;
	}

	return 0;
}
    5d42:	4620      	mov	r0, r4
    5d44:	b00a      	add	sp, #40	; 0x28
    5d46:	bd10      	pop	{r4, pc}
	lv_log_register_print_cb(lvgl_log);
    5d48:	4822      	ldr	r0, [pc, #136]	; (5dd4 <lvgl_init+0xc0>)
    5d4a:	f015 f925 	bl	1af98 <lv_log_register_print_cb>
	lv_init();
    5d4e:	f013 f8e5 	bl	18f1c <lv_init>
	lv_disp_drv_init(&disp_drv);
    5d52:	a801      	add	r0, sp, #4
    5d54:	f01e fbaf 	bl	244b6 <lv_disp_drv_init>
	disp_drv->buffer = &disp_buf;
    5d58:	481f      	ldr	r0, [pc, #124]	; (5dd8 <lvgl_init+0xc4>)
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    5d5a:	4920      	ldr	r1, [pc, #128]	; (5ddc <lvgl_init+0xc8>)
	disp_drv.user_data = (void *) display_dev;
    5d5c:	9409      	str	r4, [sp, #36]	; 0x24
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    5d5e:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
    5d62:	2200      	movs	r2, #0
	disp_drv->buffer = &disp_buf;
    5d64:	9002      	str	r0, [sp, #8]
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    5d66:	f01e fbbc 	bl	244e2 <lv_disp_buf_init>
	if (set_lvgl_rendering_cb(&disp_drv) != 0) {
    5d6a:	a801      	add	r0, sp, #4
    5d6c:	f7ff ff60 	bl	5c30 <set_lvgl_rendering_cb>
    5d70:	4604      	mov	r4, r0
    5d72:	b180      	cbz	r0, 5d96 <lvgl_init+0x82>
		LOG_ERR("Display not supported.");
    5d74:	2301      	movs	r3, #1
    5d76:	f04f 0100 	mov.w	r1, #0
    5d7a:	f363 0107 	bfi	r1, r3, #0, #8
    5d7e:	4a12      	ldr	r2, [pc, #72]	; (5dc8 <lvgl_init+0xb4>)
    5d80:	4b12      	ldr	r3, [pc, #72]	; (5dcc <lvgl_init+0xb8>)
    5d82:	4817      	ldr	r0, [pc, #92]	; (5de0 <lvgl_init+0xcc>)
    5d84:	1a9b      	subs	r3, r3, r2
    5d86:	08db      	lsrs	r3, r3, #3
    5d88:	f363 118f 	bfi	r1, r3, #6, #10
    5d8c:	f018 fe62 	bl	1ea54 <log_0>
		return -ENOTSUP;
    5d90:	f06f 0422 	mvn.w	r4, #34	; 0x22
    5d94:	e7d5      	b.n	5d42 <lvgl_init+0x2e>
	if (lv_disp_drv_register(&disp_drv) == NULL) {
    5d96:	a801      	add	r0, sp, #4
    5d98:	f014 fd76 	bl	1a888 <lv_disp_drv_register>
    5d9c:	2800      	cmp	r0, #0
    5d9e:	d1d0      	bne.n	5d42 <lvgl_init+0x2e>
		LOG_ERR("Failed to register display device.");
    5da0:	2301      	movs	r3, #1
    5da2:	f04f 0100 	mov.w	r1, #0
    5da6:	f363 0107 	bfi	r1, r3, #0, #8
    5daa:	4a07      	ldr	r2, [pc, #28]	; (5dc8 <lvgl_init+0xb4>)
    5dac:	4b07      	ldr	r3, [pc, #28]	; (5dcc <lvgl_init+0xb8>)
    5dae:	480d      	ldr	r0, [pc, #52]	; (5de4 <lvgl_init+0xd0>)
    5db0:	1a9b      	subs	r3, r3, r2
    5db2:	08db      	lsrs	r3, r3, #3
    5db4:	f363 118f 	bfi	r1, r3, #6, #10
    5db8:	f018 fe4c 	bl	1ea54 <log_0>
		return -EPERM;
    5dbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    5dc0:	e7bf      	b.n	5d42 <lvgl_init+0x2e>
    5dc2:	bf00      	nop
    5dc4:	00026ca2 	.word	0x00026ca2
    5dc8:	00025a6c 	.word	0x00025a6c
    5dcc:	00025b9c 	.word	0x00025b9c
    5dd0:	00027561 	.word	0x00027561
    5dd4:	00005cb9 	.word	0x00005cb9
    5dd8:	200001ac 	.word	0x200001ac
    5ddc:	20006061 	.word	0x20006061
    5de0:	0002757b 	.word	0x0002757b
    5de4:	00027592 	.word	0x00027592

00005de8 <nordicsemi_nrf52_init>:
    5de8:	f04f 0320 	mov.w	r3, #32
    5dec:	f3ef 8211 	mrs	r2, BASEPRI
    5df0:	f383 8811 	msr	BASEPRI, r3
    5df4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5df8:	4906      	ldr	r1, [pc, #24]	; (5e14 <nordicsemi_nrf52_init+0x2c>)
    5dfa:	2301      	movs	r3, #1
    5dfc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5e00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5e04:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    5e08:	f382 8811 	msr	BASEPRI, r2
    5e0c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5e10:	2000      	movs	r0, #0
    5e12:	4770      	bx	lr
    5e14:	4001e000 	.word	0x4001e000

00005e18 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5e18:	b120      	cbz	r0, 5e24 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    5e1a:	4b03      	ldr	r3, [pc, #12]	; (5e28 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5e1c:	0180      	lsls	r0, r0, #6
    5e1e:	f043 0301 	orr.w	r3, r3, #1
    5e22:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5e24:	4770      	bx	lr
    5e26:	bf00      	nop
    5e28:	00025c90 	.word	0x00025c90

00005e2c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    5e2c:	2940      	cmp	r1, #64	; 0x40
    5e2e:	4b0e      	ldr	r3, [pc, #56]	; (5e68 <bt_hex_real+0x3c>)
{
    5e30:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    5e32:	bf28      	it	cs
    5e34:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    5e36:	4c0d      	ldr	r4, [pc, #52]	; (5e6c <bt_hex_real+0x40>)
    5e38:	1846      	adds	r6, r0, r1
    5e3a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    5e3c:	42b0      	cmp	r0, r6
    5e3e:	f103 0302 	add.w	r3, r3, #2
    5e42:	d104      	bne.n	5e4e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    5e44:	2300      	movs	r3, #0
    5e46:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    5e4a:	4807      	ldr	r0, [pc, #28]	; (5e68 <bt_hex_real+0x3c>)
    5e4c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    5e4e:	7802      	ldrb	r2, [r0, #0]
    5e50:	0912      	lsrs	r2, r2, #4
    5e52:	5ca2      	ldrb	r2, [r4, r2]
    5e54:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    5e58:	f810 2b01 	ldrb.w	r2, [r0], #1
    5e5c:	f002 020f 	and.w	r2, r2, #15
    5e60:	5ca2      	ldrb	r2, [r4, r2]
    5e62:	f803 2c01 	strb.w	r2, [r3, #-1]
    5e66:	e7e9      	b.n	5e3c <bt_hex_real+0x10>
    5e68:	2000a3e1 	.word	0x2000a3e1
    5e6c:	00027612 	.word	0x00027612

00005e70 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    5e70:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    5e72:	7803      	ldrb	r3, [r0, #0]
    5e74:	b08b      	sub	sp, #44	; 0x2c
    5e76:	4604      	mov	r4, r0
    5e78:	ad07      	add	r5, sp, #28
    5e7a:	2b03      	cmp	r3, #3
    5e7c:	d821      	bhi.n	5ec2 <bt_addr_le_str_real+0x52>
    5e7e:	e8df f003 	tbb	[pc, r3]
    5e82:	1a02      	.short	0x1a02
    5e84:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5e86:	4912      	ldr	r1, [pc, #72]	; (5ed0 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5e88:	4628      	mov	r0, r5
    5e8a:	f019 fb58 	bl	1f53e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5e8e:	7863      	ldrb	r3, [r4, #1]
    5e90:	9304      	str	r3, [sp, #16]
    5e92:	78a3      	ldrb	r3, [r4, #2]
    5e94:	9303      	str	r3, [sp, #12]
    5e96:	78e3      	ldrb	r3, [r4, #3]
    5e98:	9302      	str	r3, [sp, #8]
    5e9a:	7923      	ldrb	r3, [r4, #4]
    5e9c:	9301      	str	r3, [sp, #4]
    5e9e:	7963      	ldrb	r3, [r4, #5]
    5ea0:	9300      	str	r3, [sp, #0]
    5ea2:	9505      	str	r5, [sp, #20]
    5ea4:	79a3      	ldrb	r3, [r4, #6]
    5ea6:	4a0b      	ldr	r2, [pc, #44]	; (5ed4 <bt_addr_le_str_real+0x64>)
    5ea8:	480b      	ldr	r0, [pc, #44]	; (5ed8 <bt_addr_le_str_real+0x68>)
    5eaa:	211e      	movs	r1, #30
    5eac:	f017 fc90 	bl	1d7d0 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    5eb0:	4809      	ldr	r0, [pc, #36]	; (5ed8 <bt_addr_le_str_real+0x68>)
    5eb2:	b00b      	add	sp, #44	; 0x2c
    5eb4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    5eb6:	4909      	ldr	r1, [pc, #36]	; (5edc <bt_addr_le_str_real+0x6c>)
    5eb8:	e7e6      	b.n	5e88 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    5eba:	4909      	ldr	r1, [pc, #36]	; (5ee0 <bt_addr_le_str_real+0x70>)
    5ebc:	e7e4      	b.n	5e88 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    5ebe:	4909      	ldr	r1, [pc, #36]	; (5ee4 <bt_addr_le_str_real+0x74>)
    5ec0:	e7e2      	b.n	5e88 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    5ec2:	4a09      	ldr	r2, [pc, #36]	; (5ee8 <bt_addr_le_str_real+0x78>)
    5ec4:	210a      	movs	r1, #10
    5ec6:	4628      	mov	r0, r5
    5ec8:	f017 fc82 	bl	1d7d0 <snprintk>
		break;
    5ecc:	e7df      	b.n	5e8e <bt_addr_le_str_real+0x1e>
    5ece:	bf00      	nop
    5ed0:	000275cd 	.word	0x000275cd
    5ed4:	000275ef 	.word	0x000275ef
    5ed8:	2000a462 	.word	0x2000a462
    5edc:	000275d4 	.word	0x000275d4
    5ee0:	000275db 	.word	0x000275db
    5ee4:	000275e5 	.word	0x000275e5
    5ee8:	00028ff7 	.word	0x00028ff7

00005eec <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    5eec:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
    5ef0:	4c69      	ldr	r4, [pc, #420]	; (6098 <ecc_thread+0x1ac>)
		BT_ERR("public key is not valid (ret %d)", ret);
    5ef2:	4b6a      	ldr	r3, [pc, #424]	; (609c <ecc_thread+0x1b0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ef4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 60b8 <ecc_thread+0x1cc>
    5ef8:	1ae4      	subs	r4, r4, r3
    5efa:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    5efe:	4645      	mov	r5, r8
	return z_impl_k_sem_take(sem, timeout);
    5f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5f04:	4866      	ldr	r0, [pc, #408]	; (60a0 <ecc_thread+0x1b4>)
    5f06:	f016 fd03 	bl	1c910 <z_impl_k_sem_take>
    5f0a:	f3bf 8f5b 	dmb	ish
    5f0e:	f8d8 3000 	ldr.w	r3, [r8]
    5f12:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5f16:	f013 0901 	ands.w	r9, r3, #1
    5f1a:	d061      	beq.n	5fe0 <ecc_thread+0xf4>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5f1c:	f8df b190 	ldr.w	fp, [pc, #400]	; 60b0 <ecc_thread+0x1c4>
    5f20:	f8df 9198 	ldr.w	r9, [pc, #408]	; 60bc <ecc_thread+0x1d0>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5f24:	f8df a198 	ldr.w	sl, [pc, #408]	; 60c0 <ecc_thread+0x1d4>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5f28:	485e      	ldr	r0, [pc, #376]	; (60a4 <ecc_thread+0x1b8>)
    5f2a:	465a      	mov	r2, fp
    5f2c:	4649      	mov	r1, r9
    5f2e:	f017 fc9e 	bl	1d86e <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    5f32:	2800      	cmp	r0, #0
    5f34:	d141      	bne.n	5fba <ecc_thread+0xce>
			BT_ERR("Failed to create ECC public/private pair");
    5f36:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    5f3a:	f043 0301 	orr.w	r3, r3, #1
    5f3e:	f363 0707 	bfi	r7, r3, #0, #8
    5f42:	f364 178f 	bfi	r7, r4, #6, #10
    5f46:	4639      	mov	r1, r7
    5f48:	4857      	ldr	r0, [pc, #348]	; (60a8 <ecc_thread+0x1bc>)
    5f4a:	f018 fd83 	bl	1ea54 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    5f4e:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5f52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5f56:	2001      	movs	r0, #1
    5f58:	f002 fd72 	bl	8a40 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5f5c:	f100 0b08 	add.w	fp, r0, #8
    5f60:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5f62:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5f64:	4658      	mov	r0, fp
    5f66:	f01c fb65 	bl	22634 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5f6a:	233e      	movs	r3, #62	; 0x3e
    5f6c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5f6e:	2342      	movs	r3, #66	; 0x42
    5f70:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5f72:	2101      	movs	r1, #1
    5f74:	4658      	mov	r0, fp
    5f76:	f01c fb5d 	bl	22634 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    5f7a:	2308      	movs	r3, #8
    5f7c:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    5f7e:	2141      	movs	r1, #65	; 0x41
    5f80:	4658      	mov	r0, fp
    5f82:	f01c fb57 	bl	22634 <net_buf_simple_add>
    5f86:	4683      	mov	fp, r0
	evt->status = status;
    5f88:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    5f8c:	f1ba 0f00 	cmp.w	sl, #0
    5f90:	d01d      	beq.n	5fce <ecc_thread+0xe2>
		(void)memset(evt->key, 0, sizeof(evt->key));
    5f92:	2240      	movs	r2, #64	; 0x40
    5f94:	2100      	movs	r1, #0
    5f96:	f019 fb59 	bl	1f64c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f9a:	f3bf 8f5b 	dmb	ish
    5f9e:	e855 3f00 	ldrex	r3, [r5]
    5fa2:	f023 0301 	bic.w	r3, r3, #1
    5fa6:	e845 3200 	strex	r2, r3, [r5]
    5faa:	2a00      	cmp	r2, #0
    5fac:	d1f7      	bne.n	5f9e <ecc_thread+0xb2>
    5fae:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5fb2:	4648      	mov	r0, r9
	bt_recv(buf);
    5fb4:	f001 fe14 	bl	7be0 <bt_recv>
    5fb8:	e7a2      	b.n	5f00 <ecc_thread+0x14>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5fba:	2220      	movs	r2, #32
    5fbc:	4651      	mov	r1, sl
    5fbe:	4648      	mov	r0, r9
    5fc0:	f019 fb0a 	bl	1f5d8 <memcmp>
    5fc4:	2800      	cmp	r0, #0
    5fc6:	d0af      	beq.n	5f28 <ecc_thread+0x3c>
	return 0;
    5fc8:	f04f 0a00 	mov.w	sl, #0
    5fcc:	e7c1      	b.n	5f52 <ecc_thread+0x66>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    5fce:	4935      	ldr	r1, [pc, #212]	; (60a4 <ecc_thread+0x1b8>)
    5fd0:	f019 fdbf 	bl	1fb52 <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    5fd4:	4935      	ldr	r1, [pc, #212]	; (60ac <ecc_thread+0x1c0>)
    5fd6:	f10b 0021 	add.w	r0, fp, #33	; 0x21
    5fda:	f019 fdba 	bl	1fb52 <sys_memcpy_swap.constprop.2>
    5fde:	e7dc      	b.n	5f9a <ecc_thread+0xae>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5fe0:	f3bf 8f5b 	dmb	ish
    5fe4:	f8d8 3000 	ldr.w	r3, [r8]
    5fe8:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5fec:	079b      	lsls	r3, r3, #30
    5fee:	d587      	bpl.n	5f00 <ecc_thread+0x14>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    5ff0:	492f      	ldr	r1, [pc, #188]	; (60b0 <ecc_thread+0x1c4>)
    5ff2:	482c      	ldr	r0, [pc, #176]	; (60a4 <ecc_thread+0x1b8>)
    5ff4:	f018 fb0c 	bl	1e610 <uECC_valid_public_key>
	if (ret < 0) {
    5ff8:	1e01      	subs	r1, r0, #0
    5ffa:	da3e      	bge.n	607a <ecc_thread+0x18e>
		BT_ERR("public key is not valid (ret %d)", ret);
    5ffc:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    6000:	f043 0301 	orr.w	r3, r3, #1
    6004:	f363 0607 	bfi	r6, r3, #0, #8
    6008:	f364 168f 	bfi	r6, r4, #6, #10
    600c:	4632      	mov	r2, r6
    600e:	4829      	ldr	r0, [pc, #164]	; (60b4 <ecc_thread+0x1c8>)
    6010:	f018 fd2d 	bl	1ea6e <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6018:	2001      	movs	r0, #1
    601a:	f002 fd11 	bl	8a40 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    601e:	f100 0b08 	add.w	fp, r0, #8
    6022:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6024:	4682      	mov	sl, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6026:	4658      	mov	r0, fp
    6028:	f01c fb04 	bl	22634 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    602c:	233e      	movs	r3, #62	; 0x3e
    602e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6030:	2322      	movs	r3, #34	; 0x22
    6032:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    6034:	2101      	movs	r1, #1
    6036:	4658      	mov	r0, fp
    6038:	f01c fafc 	bl	22634 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    603c:	2309      	movs	r3, #9
    603e:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6040:	2121      	movs	r1, #33	; 0x21
    6042:	4658      	mov	r0, fp
    6044:	f01c faf6 	bl	22634 <net_buf_simple_add>
    6048:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    604a:	3001      	adds	r0, #1
    604c:	f1b9 0f00 	cmp.w	r9, #0
    6050:	d11c      	bne.n	608c <ecc_thread+0x1a0>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    6052:	221f      	movs	r2, #31
    6054:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    6056:	4649      	mov	r1, r9
    6058:	2220      	movs	r2, #32
    605a:	f019 faf7 	bl	1f64c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    605e:	f3bf 8f5b 	dmb	ish
    6062:	e855 3f00 	ldrex	r3, [r5]
    6066:	f023 0302 	bic.w	r3, r3, #2
    606a:	e845 3200 	strex	r2, r3, [r5]
    606e:	2a00      	cmp	r2, #0
    6070:	d1f7      	bne.n	6062 <ecc_thread+0x176>
    6072:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    6076:	4650      	mov	r0, sl
    6078:	e79c      	b.n	5fb4 <ecc_thread+0xc8>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    607a:	4a0a      	ldr	r2, [pc, #40]	; (60a4 <ecc_thread+0x1b8>)
    607c:	4b0c      	ldr	r3, [pc, #48]	; (60b0 <ecc_thread+0x1c4>)
    607e:	f1a2 0120 	sub.w	r1, r2, #32
    6082:	4610      	mov	r0, r2
    6084:	f017 fc42 	bl	1d90c <uECC_shared_secret>
    6088:	4681      	mov	r9, r0
    608a:	e7c3      	b.n	6014 <ecc_thread+0x128>
		evt->status = 0U;
    608c:	2200      	movs	r2, #0
    608e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    6090:	4904      	ldr	r1, [pc, #16]	; (60a4 <ecc_thread+0x1b8>)
    6092:	f019 fd5e 	bl	1fb52 <sys_memcpy_swap.constprop.2>
    6096:	e7e2      	b.n	605e <ecc_thread+0x172>
    6098:	00025b3c 	.word	0x00025b3c
    609c:	00025a6c 	.word	0x00025a6c
    60a0:	2000e638 	.word	0x2000e638
    60a4:	2000a4a0 	.word	0x2000a4a0
    60a8:	00027631 	.word	0x00027631
    60ac:	2000a4c0 	.word	0x2000a4c0
    60b0:	00025fac 	.word	0x00025fac
    60b4:	0002765a 	.word	0x0002765a
    60b8:	20000234 	.word	0x20000234
    60bc:	2000a480 	.word	0x2000a480
    60c0:	0002605c 	.word	0x0002605c

000060c4 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    60c4:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    60c6:	7d05      	ldrb	r5, [r0, #20]
    60c8:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    60ca:	b9ad      	cbnz	r5, 60f8 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    60cc:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    60ce:	881a      	ldrh	r2, [r3, #0]
    60d0:	f242 0125 	movw	r1, #8229	; 0x2025
    60d4:	428a      	cmp	r2, r1
    60d6:	d017      	beq.n	6108 <bt_hci_ecc_send+0x44>
    60d8:	f242 0126 	movw	r1, #8230	; 0x2026
    60dc:	428a      	cmp	r2, r1
    60de:	d03c      	beq.n	615a <bt_hci_ecc_send+0x96>
    60e0:	f242 0101 	movw	r1, #8193	; 0x2001
    60e4:	428a      	cmp	r2, r1
    60e6:	d107      	bne.n	60f8 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    60e8:	78da      	ldrb	r2, [r3, #3]
    60ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    60ee:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    60f0:	791a      	ldrb	r2, [r3, #4]
    60f2:	f022 0201 	bic.w	r2, r2, #1
    60f6:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    60f8:	4b32      	ldr	r3, [pc, #200]	; (61c4 <bt_hci_ecc_send+0x100>)
    60fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    60fe:	4620      	mov	r0, r4
    6100:	691b      	ldr	r3, [r3, #16]
}
    6102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    6106:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    6108:	2103      	movs	r1, #3
    610a:	3008      	adds	r0, #8
    610c:	f01c fabb 	bl	22686 <net_buf_simple_pull>
	net_buf_unref(buf);
    6110:	4620      	mov	r0, r4
    6112:	f011 fa5f 	bl	175d4 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6116:	f3bf 8f5b 	dmb	ish
    611a:	4b2b      	ldr	r3, [pc, #172]	; (61c8 <bt_hci_ecc_send+0x104>)
    611c:	681a      	ldr	r2, [r3, #0]
    611e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    6122:	0790      	lsls	r0, r2, #30
    6124:	d507      	bpl.n	6136 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6126:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    6128:	4629      	mov	r1, r5
    612a:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    612e:	f019 fced 	bl	1fb0c <send_cmd_status>
}
    6132:	2000      	movs	r0, #0
    6134:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6136:	f3bf 8f5b 	dmb	ish
    613a:	e853 2f00 	ldrex	r2, [r3]
    613e:	f042 0101 	orr.w	r1, r2, #1
    6142:	e843 1000 	strex	r0, r1, [r3]
    6146:	2800      	cmp	r0, #0
    6148:	d1f7      	bne.n	613a <bt_hci_ecc_send+0x76>
    614a:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    614e:	07d1      	lsls	r1, r2, #31
    6150:	d4e9      	bmi.n	6126 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    6152:	481e      	ldr	r0, [pc, #120]	; (61cc <bt_hci_ecc_send+0x108>)
    6154:	f016 fbb0 	bl	1c8b8 <z_impl_k_sem_give>
    6158:	e7e6      	b.n	6128 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    615a:	2103      	movs	r1, #3
    615c:	3008      	adds	r0, #8
    615e:	f01c fa92 	bl	22686 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6162:	f3bf 8f5b 	dmb	ish
    6166:	4b18      	ldr	r3, [pc, #96]	; (61c8 <bt_hci_ecc_send+0x104>)
    6168:	681a      	ldr	r2, [r3, #0]
    616a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    616e:	07d2      	lsls	r2, r2, #31
    6170:	d507      	bpl.n	6182 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6172:	250c      	movs	r5, #12
	net_buf_unref(buf);
    6174:	4620      	mov	r0, r4
    6176:	f011 fa2d 	bl	175d4 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    617a:	4629      	mov	r1, r5
    617c:	f242 0026 	movw	r0, #8230	; 0x2026
    6180:	e7d5      	b.n	612e <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    6182:	89a2      	ldrh	r2, [r4, #12]
    6184:	2a3f      	cmp	r2, #63	; 0x3f
    6186:	d91b      	bls.n	61c0 <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6188:	f3bf 8f5b 	dmb	ish
    618c:	e853 2f00 	ldrex	r2, [r3]
    6190:	f042 0102 	orr.w	r1, r2, #2
    6194:	e843 1000 	strex	r0, r1, [r3]
    6198:	2800      	cmp	r0, #0
    619a:	d1f7      	bne.n	618c <bt_hci_ecc_send+0xc8>
    619c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    61a0:	0793      	lsls	r3, r2, #30
    61a2:	d4e6      	bmi.n	6172 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    61a4:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    61a6:	480a      	ldr	r0, [pc, #40]	; (61d0 <bt_hci_ecc_send+0x10c>)
    61a8:	4631      	mov	r1, r6
    61aa:	f019 fcd2 	bl	1fb52 <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    61ae:	f106 0120 	add.w	r1, r6, #32
    61b2:	4808      	ldr	r0, [pc, #32]	; (61d4 <bt_hci_ecc_send+0x110>)
    61b4:	f019 fccd 	bl	1fb52 <sys_memcpy_swap.constprop.2>
    61b8:	4804      	ldr	r0, [pc, #16]	; (61cc <bt_hci_ecc_send+0x108>)
    61ba:	f016 fb7d 	bl	1c8b8 <z_impl_k_sem_give>
    61be:	e7d9      	b.n	6174 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    61c0:	2512      	movs	r5, #18
    61c2:	e7d7      	b.n	6174 <bt_hci_ecc_send+0xb0>
    61c4:	2000dd18 	.word	0x2000dd18
    61c8:	20000234 	.word	0x20000234
    61cc:	2000e638 	.word	0x2000e638
    61d0:	2000a4a0 	.word	0x2000a4a0
    61d4:	2000a4c0 	.word	0x2000a4c0

000061d8 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    61d8:	b510      	push	{r4, lr}
    61da:	b086      	sub	sp, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    61dc:	4c0b      	ldr	r4, [pc, #44]	; (620c <bt_hci_ecc_init+0x34>)
    61de:	490c      	ldr	r1, [pc, #48]	; (6210 <bt_hci_ecc_init+0x38>)
    61e0:	2300      	movs	r3, #0
    61e2:	220a      	movs	r2, #10
    61e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    61e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
    61ec:	e9cd 3300 	strd	r3, r3, [sp]
    61f0:	f240 424c 	movw	r2, #1100	; 0x44c
    61f4:	4b07      	ldr	r3, [pc, #28]	; (6214 <bt_hci_ecc_init+0x3c>)
    61f6:	4620      	mov	r0, r4
    61f8:	f016 fc02 	bl	1ca00 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    61fc:	4906      	ldr	r1, [pc, #24]	; (6218 <bt_hci_ecc_init+0x40>)
    61fe:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    6200:	b006      	add	sp, #24
    6202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6206:	f01f b8bd 	b.w	25384 <z_impl_k_thread_name_set>
    620a:	bf00      	nop
    620c:	200001c8 	.word	0x200001c8
    6210:	2000ab28 	.word	0x2000ab28
    6214:	00005eed 	.word	0x00005eed
    6218:	0002762a 	.word	0x0002762a

0000621c <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    621c:	b538      	push	{r3, r4, r5, lr}
	int err;
	BT_INFO("Saving ID");
    621e:	f04f 0100 	mov.w	r1, #0
    6222:	2303      	movs	r3, #3
    6224:	f363 0107 	bfi	r1, r3, #0, #8
    6228:	4c19      	ldr	r4, [pc, #100]	; (6290 <save_id+0x74>)
    622a:	4b1a      	ldr	r3, [pc, #104]	; (6294 <save_id+0x78>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    622c:	4d1a      	ldr	r5, [pc, #104]	; (6298 <save_id+0x7c>)
	BT_INFO("Saving ID");
    622e:	481b      	ldr	r0, [pc, #108]	; (629c <save_id+0x80>)
    6230:	1ae4      	subs	r4, r4, r3
    6232:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    6236:	f364 118f 	bfi	r1, r4, #6, #10
    623a:	f018 fc0b 	bl	1ea54 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    623e:	79ea      	ldrb	r2, [r5, #7]
    6240:	4817      	ldr	r0, [pc, #92]	; (62a0 <save_id+0x84>)
    6242:	4629      	mov	r1, r5
    6244:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    6248:	f7fd fdf0 	bl	3e2c <settings_save_one>
	if (err) {
    624c:	4601      	mov	r1, r0
    624e:	b148      	cbz	r0, 6264 <save_id+0x48>
		BT_ERR("Failed to save ID (err %d)", err);
    6250:	f04f 0200 	mov.w	r2, #0
    6254:	2301      	movs	r3, #1
    6256:	f363 0207 	bfi	r2, r3, #0, #8
    625a:	f364 128f 	bfi	r2, r4, #6, #10
    625e:	4811      	ldr	r0, [pc, #68]	; (62a4 <save_id+0x88>)
    6260:	f018 fc05 	bl	1ea6e <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    6264:	79ea      	ldrb	r2, [r5, #7]
    6266:	4910      	ldr	r1, [pc, #64]	; (62a8 <save_id+0x8c>)
    6268:	4810      	ldr	r0, [pc, #64]	; (62ac <save_id+0x90>)
    626a:	0112      	lsls	r2, r2, #4
    626c:	f7fd fdde 	bl	3e2c <settings_save_one>
	if (err) {
    6270:	4601      	mov	r1, r0
    6272:	b158      	cbz	r0, 628c <save_id+0x70>
		BT_ERR("Failed to save IRK (err %d)", err);
    6274:	2301      	movs	r3, #1
    6276:	f04f 0200 	mov.w	r2, #0
    627a:	f363 0207 	bfi	r2, r3, #0, #8
    627e:	f364 128f 	bfi	r2, r4, #6, #10
    6282:	480b      	ldr	r0, [pc, #44]	; (62b0 <save_id+0x94>)
	}
#endif
}
    6284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
    6288:	f018 bbf1 	b.w	1ea6e <log_1>
}
    628c:	bd38      	pop	{r3, r4, r5, pc}
    628e:	bf00      	nop
    6290:	00025b5c 	.word	0x00025b5c
    6294:	00025a6c 	.word	0x00025a6c
    6298:	2000dd18 	.word	0x2000dd18
    629c:	00027724 	.word	0x00027724
    62a0:	0002772e 	.word	0x0002772e
    62a4:	00027734 	.word	0x00027734
    62a8:	2000ddf0 	.word	0x2000ddf0
    62ac:	0002774f 	.word	0x0002774f
    62b0:	00027756 	.word	0x00027756

000062b4 <set>:
{
    62b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    62b8:	4616      	mov	r6, r2
    62ba:	461f      	mov	r7, r3
	if (!name) {
    62bc:	4605      	mov	r5, r0
    62be:	b980      	cbnz	r0, 62e2 <set+0x2e>
		BT_ERR("Insufficient number of arguments");
    62c0:	2301      	movs	r3, #1
    62c2:	f04f 0100 	mov.w	r1, #0
    62c6:	f363 0107 	bfi	r1, r3, #0, #8
    62ca:	4a4c      	ldr	r2, [pc, #304]	; (63fc <set+0x148>)
    62cc:	4b4c      	ldr	r3, [pc, #304]	; (6400 <set+0x14c>)
    62ce:	484d      	ldr	r0, [pc, #308]	; (6404 <set+0x150>)
    62d0:	1a9b      	subs	r3, r3, r2
    62d2:	08db      	lsrs	r3, r3, #3
    62d4:	f363 118f 	bfi	r1, r3, #6, #10
    62d8:	f018 fbbc 	bl	1ea54 <log_0>
	return -ENOENT;
    62dc:	f06f 0401 	mvn.w	r4, #1
    62e0:	e023      	b.n	632a <set+0x76>
	len = settings_name_next(name, &next);
    62e2:	a901      	add	r1, sp, #4
    62e4:	f018 fe08 	bl	1eef8 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    62e8:	4947      	ldr	r1, [pc, #284]	; (6408 <set+0x154>)
    62ea:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    62ec:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    62ee:	4628      	mov	r0, r5
    62f0:	f019 f963 	bl	1f5ba <strncmp>
    62f4:	4681      	mov	r9, r0
    62f6:	2800      	cmp	r0, #0
    62f8:	d13c      	bne.n	6374 <set+0xc0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    62fa:	f3bf 8f5b 	dmb	ish
    62fe:	4d43      	ldr	r5, [pc, #268]	; (640c <set+0x158>)
    6300:	682c      	ldr	r4, [r5, #0]
    6302:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    6306:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    630a:	b194      	cbz	r4, 6332 <set+0x7e>
			BT_WARN("Ignoring identities stored in flash");
    630c:	2302      	movs	r3, #2
    630e:	f04f 0100 	mov.w	r1, #0
    6312:	f363 0107 	bfi	r1, r3, #0, #8
    6316:	4a39      	ldr	r2, [pc, #228]	; (63fc <set+0x148>)
    6318:	4b39      	ldr	r3, [pc, #228]	; (6400 <set+0x14c>)
    631a:	483d      	ldr	r0, [pc, #244]	; (6410 <set+0x15c>)
    631c:	1a9b      	subs	r3, r3, r2
    631e:	08db      	lsrs	r3, r3, #3
    6320:	f363 118f 	bfi	r1, r3, #6, #10
    6324:	f018 fb96 	bl	1ea54 <log_0>
			return 0;
    6328:	464c      	mov	r4, r9
}
    632a:	4620      	mov	r0, r4
    632c:	b003      	add	sp, #12
    632e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    6332:	3d70      	subs	r5, #112	; 0x70
    6334:	2207      	movs	r2, #7
    6336:	4629      	mov	r1, r5
    6338:	4638      	mov	r0, r7
    633a:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    633c:	2806      	cmp	r0, #6
    633e:	d814      	bhi.n	636a <set+0xb6>
				BT_ERR("Invalid length ID address in storage");
    6340:	2301      	movs	r3, #1
    6342:	f04f 0100 	mov.w	r1, #0
    6346:	4a2d      	ldr	r2, [pc, #180]	; (63fc <set+0x148>)
    6348:	4832      	ldr	r0, [pc, #200]	; (6414 <set+0x160>)
    634a:	f363 0107 	bfi	r1, r3, #0, #8
    634e:	4b2c      	ldr	r3, [pc, #176]	; (6400 <set+0x14c>)
    6350:	1a9b      	subs	r3, r3, r2
    6352:	08db      	lsrs	r3, r3, #3
    6354:	f363 118f 	bfi	r1, r3, #6, #10
    6358:	f018 fb7c 	bl	1ea54 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    635c:	2207      	movs	r2, #7
    635e:	4621      	mov	r1, r4
    6360:	4628      	mov	r0, r5
    6362:	f019 f973 	bl	1f64c <memset>
			bt_dev.id_count = 0U;
    6366:	71ec      	strb	r4, [r5, #7]
    6368:	e7df      	b.n	632a <set+0x76>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    636a:	2307      	movs	r3, #7
    636c:	fbb0 f0f3 	udiv	r0, r0, r3
    6370:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    6372:	e7da      	b.n	632a <set+0x76>
	if (!strncmp(name, "name", len)) {
    6374:	4642      	mov	r2, r8
    6376:	4928      	ldr	r1, [pc, #160]	; (6418 <set+0x164>)
    6378:	4628      	mov	r0, r5
    637a:	f019 f91e 	bl	1f5ba <strncmp>
    637e:	4604      	mov	r4, r0
    6380:	b9c8      	cbnz	r0, 63b6 <set+0x102>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    6382:	4926      	ldr	r1, [pc, #152]	; (641c <set+0x168>)
    6384:	2241      	movs	r2, #65	; 0x41
    6386:	4638      	mov	r0, r7
    6388:	47b0      	blx	r6
		if (len < 0) {
    638a:	1e01      	subs	r1, r0, #0
    638c:	da0e      	bge.n	63ac <set+0xf8>
			BT_ERR("Failed to read device name from storage"
    638e:	2301      	movs	r3, #1
    6390:	f04f 0200 	mov.w	r2, #0
    6394:	f363 0207 	bfi	r2, r3, #0, #8
    6398:	4818      	ldr	r0, [pc, #96]	; (63fc <set+0x148>)
    639a:	4b19      	ldr	r3, [pc, #100]	; (6400 <set+0x14c>)
    639c:	1a1b      	subs	r3, r3, r0
    639e:	08db      	lsrs	r3, r3, #3
    63a0:	f363 128f 	bfi	r2, r3, #6, #10
    63a4:	481e      	ldr	r0, [pc, #120]	; (6420 <set+0x16c>)
    63a6:	f018 fb62 	bl	1ea6e <log_1>
    63aa:	e7be      	b.n	632a <set+0x76>
			bt_dev.name[len] = '\0';
    63ac:	4b1d      	ldr	r3, [pc, #116]	; (6424 <set+0x170>)
    63ae:	440b      	add	r3, r1
    63b0:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    63b4:	e7b9      	b.n	632a <set+0x76>
	if (!strncmp(name, "irk", len)) {
    63b6:	4642      	mov	r2, r8
    63b8:	491b      	ldr	r1, [pc, #108]	; (6428 <set+0x174>)
    63ba:	4628      	mov	r0, r5
    63bc:	f019 f8fd 	bl	1f5ba <strncmp>
    63c0:	4604      	mov	r4, r0
    63c2:	2800      	cmp	r0, #0
    63c4:	d18a      	bne.n	62dc <set+0x28>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    63c6:	2210      	movs	r2, #16
    63c8:	4918      	ldr	r1, [pc, #96]	; (642c <set+0x178>)
    63ca:	4638      	mov	r0, r7
    63cc:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    63ce:	280f      	cmp	r0, #15
    63d0:	d8ab      	bhi.n	632a <set+0x76>
				BT_ERR("Invalid length IRK in storage");
    63d2:	2301      	movs	r3, #1
    63d4:	f04f 0100 	mov.w	r1, #0
    63d8:	4a08      	ldr	r2, [pc, #32]	; (63fc <set+0x148>)
    63da:	4815      	ldr	r0, [pc, #84]	; (6430 <set+0x17c>)
    63dc:	f363 0107 	bfi	r1, r3, #0, #8
    63e0:	4b07      	ldr	r3, [pc, #28]	; (6400 <set+0x14c>)
    63e2:	1a9b      	subs	r3, r3, r2
    63e4:	08db      	lsrs	r3, r3, #3
    63e6:	f363 118f 	bfi	r1, r3, #6, #10
    63ea:	f018 fb33 	bl	1ea54 <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    63ee:	2210      	movs	r2, #16
    63f0:	4621      	mov	r1, r4
    63f2:	480e      	ldr	r0, [pc, #56]	; (642c <set+0x178>)
    63f4:	f019 f92a 	bl	1f64c <memset>
    63f8:	e797      	b.n	632a <set+0x76>
    63fa:	bf00      	nop
    63fc:	00025a6c 	.word	0x00025a6c
    6400:	00025b5c 	.word	0x00025b5c
    6404:	00027772 	.word	0x00027772
    6408:	000275e2 	.word	0x000275e2
    640c:	2000dd88 	.word	0x2000dd88
    6410:	00027793 	.word	0x00027793
    6414:	000277b7 	.word	0x000277b7
    6418:	00027d28 	.word	0x00027d28
    641c:	2000de20 	.word	0x2000de20
    6420:	000277dc 	.word	0x000277dc
    6424:	2000dd18 	.word	0x2000dd18
    6428:	00027752 	.word	0x00027752
    642c:	2000ddf0 	.word	0x2000ddf0
    6430:	0002780e 	.word	0x0002780e

00006434 <bt_settings_encode_key>:
{
    6434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6438:	b088      	sub	sp, #32
    643a:	799c      	ldrb	r4, [r3, #6]
    643c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    6440:	795d      	ldrb	r5, [r3, #5]
    6442:	791e      	ldrb	r6, [r3, #4]
    6444:	78df      	ldrb	r7, [r3, #3]
    6446:	f893 c002 	ldrb.w	ip, [r3, #2]
    644a:	f893 e001 	ldrb.w	lr, [r3, #1]
    644e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    6450:	f1b8 0f00 	cmp.w	r8, #0
    6454:	d00e      	beq.n	6474 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    6456:	e9cd 3806 	strd	r3, r8, [sp, #24]
    645a:	e9cd ce04 	strd	ip, lr, [sp, #16]
    645e:	4613      	mov	r3, r2
    6460:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6464:	e9cd 4500 	strd	r4, r5, [sp]
    6468:	4a08      	ldr	r2, [pc, #32]	; (648c <bt_settings_encode_key+0x58>)
    646a:	f017 f9b1 	bl	1d7d0 <snprintk>
}
    646e:	b008      	add	sp, #32
    6470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    6474:	e9cd e305 	strd	lr, r3, [sp, #20]
    6478:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    647c:	4613      	mov	r3, r2
    647e:	e9cd 5601 	strd	r5, r6, [sp, #4]
    6482:	9400      	str	r4, [sp, #0]
    6484:	4a02      	ldr	r2, [pc, #8]	; (6490 <bt_settings_encode_key+0x5c>)
    6486:	f017 f9a3 	bl	1d7d0 <snprintk>
}
    648a:	e7f0      	b.n	646e <bt_settings_encode_key+0x3a>
    648c:	00027686 	.word	0x00027686
    6490:	000276aa 	.word	0x000276aa

00006494 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6494:	4909      	ldr	r1, [pc, #36]	; (64bc <bt_settings_save_id+0x28>)
    6496:	f3bf 8f5b 	dmb	ish
    649a:	e851 3f00 	ldrex	r3, [r1]
    649e:	f043 0201 	orr.w	r2, r3, #1
    64a2:	e841 2000 	strex	r0, r2, [r1]
    64a6:	2800      	cmp	r0, #0
    64a8:	d1f7      	bne.n	649a <bt_settings_save_id+0x6>
    64aa:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    64ae:	07db      	lsls	r3, r3, #31
    64b0:	d403      	bmi.n	64ba <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    64b2:	3908      	subs	r1, #8
    64b4:	4802      	ldr	r0, [pc, #8]	; (64c0 <bt_settings_save_id+0x2c>)
    64b6:	f01e bdd8 	b.w	2506a <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    64ba:	4770      	bx	lr
    64bc:	2000df54 	.word	0x2000df54
    64c0:	20005fa0 	.word	0x20005fa0

000064c4 <commit>:

static int commit(void)
{
    64c4:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    64c6:	4c1f      	ldr	r4, [pc, #124]	; (6544 <commit+0x80>)
    64c8:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
    64cc:	b913      	cbnz	r3, 64d4 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    64ce:	481e      	ldr	r0, [pc, #120]	; (6548 <commit+0x84>)
    64d0:	f001 fdb6 	bl	8040 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    64d4:	79e3      	ldrb	r3, [r4, #7]
    64d6:	b9bb      	cbnz	r3, 6508 <commit+0x44>
		bt_setup_public_id_addr();
    64d8:	f001 fe50 	bl	817c <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    64dc:	79e3      	ldrb	r3, [r4, #7]
    64de:	b99b      	cbnz	r3, 6508 <commit+0x44>
		int err;

		err = bt_setup_random_id_addr();
    64e0:	f001 fed8 	bl	8294 <bt_setup_random_id_addr>
		if (err) {
    64e4:	4604      	mov	r4, r0
    64e6:	b178      	cbz	r0, 6508 <commit+0x44>
			BT_ERR("Unable to setup an identity address");
    64e8:	2301      	movs	r3, #1
    64ea:	f04f 0100 	mov.w	r1, #0
    64ee:	f363 0107 	bfi	r1, r3, #0, #8
    64f2:	4a16      	ldr	r2, [pc, #88]	; (654c <commit+0x88>)
    64f4:	4b16      	ldr	r3, [pc, #88]	; (6550 <commit+0x8c>)
    64f6:	4817      	ldr	r0, [pc, #92]	; (6554 <commit+0x90>)
    64f8:	1a9b      	subs	r3, r3, r2
    64fa:	08db      	lsrs	r3, r3, #3
    64fc:	f363 118f 	bfi	r1, r3, #6, #10
    6500:	f018 faa8 	bl	1ea54 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    6504:	4620      	mov	r0, r4
    6506:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6508:	4d13      	ldr	r5, [pc, #76]	; (6558 <commit+0x94>)
    650a:	f3bf 8f5b 	dmb	ish
    650e:	682b      	ldr	r3, [r5, #0]
    6510:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6514:	079b      	lsls	r3, r3, #30
    6516:	d401      	bmi.n	651c <commit+0x58>
		bt_finalize_init();
    6518:	f001 fc82 	bl	7e20 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    651c:	f3bf 8f5b 	dmb	ish
    6520:	e855 4f00 	ldrex	r4, [r5]
    6524:	f424 3300 	bic.w	r3, r4, #131072	; 0x20000
    6528:	e845 3200 	strex	r2, r3, [r5]
    652c:	2a00      	cmp	r2, #0
    652e:	d1f7      	bne.n	6520 <commit+0x5c>
    6530:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    6534:	f414 3400 	ands.w	r4, r4, #131072	; 0x20000
    6538:	d0e4      	beq.n	6504 <commit+0x40>
		bt_settings_save_id();
    653a:	f7ff ffab 	bl	6494 <bt_settings_save_id>
	return 0;
    653e:	2400      	movs	r4, #0
    6540:	e7e0      	b.n	6504 <commit+0x40>
    6542:	bf00      	nop
    6544:	2000dd18 	.word	0x2000dd18
    6548:	000276f0 	.word	0x000276f0
    654c:	00025a6c 	.word	0x00025a6c
    6550:	00025b5c 	.word	0x00025b5c
    6554:	00027700 	.word	0x00027700
    6558:	2000dd88 	.word	0x2000dd88

0000655c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    655c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    655e:	f7fd fdc9 	bl	40f4 <settings_subsys_init>
	if (err) {
    6562:	4604      	mov	r4, r0
    6564:	b170      	cbz	r0, 6584 <bt_settings_init+0x28>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    6566:	2301      	movs	r3, #1
    6568:	f04f 0200 	mov.w	r2, #0
    656c:	f363 0207 	bfi	r2, r3, #0, #8
    6570:	4905      	ldr	r1, [pc, #20]	; (6588 <bt_settings_init+0x2c>)
    6572:	4b06      	ldr	r3, [pc, #24]	; (658c <bt_settings_init+0x30>)
    6574:	1a5b      	subs	r3, r3, r1
    6576:	08db      	lsrs	r3, r3, #3
    6578:	4601      	mov	r1, r0
    657a:	f363 128f 	bfi	r2, r3, #6, #10
    657e:	4804      	ldr	r0, [pc, #16]	; (6590 <bt_settings_init+0x34>)
    6580:	f018 fa75 	bl	1ea6e <log_1>
		return err;
	}

	return 0;
}
    6584:	4620      	mov	r0, r4
    6586:	bd10      	pop	{r4, pc}
    6588:	00025a6c 	.word	0x00025a6c
    658c:	00025b5c 	.word	0x00025b5c
    6590:	000276cb 	.word	0x000276cb

00006594 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    6594:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    6596:	7802      	ldrb	r2, [r0, #0]
    6598:	2a01      	cmp	r2, #1
{
    659a:	4604      	mov	r4, r0
    659c:	460b      	mov	r3, r1
	switch (src->type) {
    659e:	d017      	beq.n	65d0 <uuid_to_uuid128+0x3c>
    65a0:	b11a      	cbz	r2, 65aa <uuid_to_uuid128+0x16>
    65a2:	2a02      	cmp	r2, #2
    65a4:	d02c      	beq.n	6600 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    65a6:	bcf0      	pop	{r4, r5, r6, r7}
    65a8:	4770      	bx	lr
		*dst = uuid128_base;
    65aa:	4a18      	ldr	r2, [pc, #96]	; (660c <uuid_to_uuid128+0x78>)
    65ac:	460d      	mov	r5, r1
    65ae:	f102 0710 	add.w	r7, r2, #16
    65b2:	6810      	ldr	r0, [r2, #0]
    65b4:	6851      	ldr	r1, [r2, #4]
    65b6:	462e      	mov	r6, r5
    65b8:	c603      	stmia	r6!, {r0, r1}
    65ba:	3208      	adds	r2, #8
    65bc:	42ba      	cmp	r2, r7
    65be:	4635      	mov	r5, r6
    65c0:	d1f7      	bne.n	65b2 <uuid_to_uuid128+0x1e>
    65c2:	7812      	ldrb	r2, [r2, #0]
    65c4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    65c6:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    65c8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    65ca:	0a12      	lsrs	r2, r2, #8
    65cc:	739a      	strb	r2, [r3, #14]
    65ce:	e7ea      	b.n	65a6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    65d0:	4a0e      	ldr	r2, [pc, #56]	; (660c <uuid_to_uuid128+0x78>)
    65d2:	460d      	mov	r5, r1
    65d4:	f102 0710 	add.w	r7, r2, #16
    65d8:	6810      	ldr	r0, [r2, #0]
    65da:	6851      	ldr	r1, [r2, #4]
    65dc:	462e      	mov	r6, r5
    65de:	c603      	stmia	r6!, {r0, r1}
    65e0:	3208      	adds	r2, #8
    65e2:	42ba      	cmp	r2, r7
    65e4:	4635      	mov	r5, r6
    65e6:	d1f7      	bne.n	65d8 <uuid_to_uuid128+0x44>
    65e8:	7812      	ldrb	r2, [r2, #0]
    65ea:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    65ec:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    65ee:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    65f0:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    65f4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    65f6:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    65f8:	0a12      	lsrs	r2, r2, #8
    65fa:	7399      	strb	r1, [r3, #14]
    65fc:	741a      	strb	r2, [r3, #16]
    65fe:	e7d2      	b.n	65a6 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    6600:	4601      	mov	r1, r0
    6602:	2211      	movs	r2, #17
    6604:	4618      	mov	r0, r3
}
    6606:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    6608:	f018 bff6 	b.w	1f5f8 <memcpy>
    660c:	0002783b 	.word	0x0002783b

00006610 <le_dhkey_complete>:
{
    6610:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    6612:	4c06      	ldr	r4, [pc, #24]	; (662c <le_dhkey_complete+0x1c>)
    6614:	6822      	ldr	r2, [r4, #0]
    6616:	b132      	cbz	r2, 6626 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    6618:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    661a:	7803      	ldrb	r3, [r0, #0]
    661c:	b923      	cbnz	r3, 6628 <le_dhkey_complete+0x18>
    661e:	3001      	adds	r0, #1
    6620:	4790      	blx	r2
		dh_key_cb = NULL;
    6622:	2300      	movs	r3, #0
    6624:	6023      	str	r3, [r4, #0]
}
    6626:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    6628:	2000      	movs	r0, #0
    662a:	e7f9      	b.n	6620 <le_dhkey_complete+0x10>
    662c:	20000250 	.word	0x20000250

00006630 <ver_str>:
{
    6630:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    6632:	4d0b      	ldr	r5, [pc, #44]	; (6660 <ver_str+0x30>)
{
    6634:	4606      	mov	r6, r0
	const char * const str[] = {
    6636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    6638:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    663a:	ac01      	add	r4, sp, #4
    663c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    663e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	if (ver < ARRAY_SIZE(str)) {
    6646:	2e0a      	cmp	r6, #10
	const char * const str[] = {
    6648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		return str[ver];
    664c:	bf9b      	ittet	ls
    664e:	ab0c      	addls	r3, sp, #48	; 0x30
    6650:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    6654:	4803      	ldrhi	r0, [pc, #12]	; (6664 <ver_str+0x34>)
		return str[ver];
    6656:	f856 0c2c 	ldrls.w	r0, [r6, #-44]
}
    665a:	b00c      	add	sp, #48	; 0x30
    665c:	bd70      	pop	{r4, r5, r6, pc}
    665e:	bf00      	nop
    6660:	00025c0c 	.word	0x00025c0c
    6664:	0002820e 	.word	0x0002820e

00006668 <le_pkey_complete>:
{
    6668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    666a:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    666c:	480f      	ldr	r0, [pc, #60]	; (66ac <le_pkey_complete+0x44>)
    666e:	f06f 0110 	mvn.w	r1, #16
    6672:	f019 faf5 	bl	1fc60 <atomic_and>
	if (!evt->status) {
    6676:	7833      	ldrb	r3, [r6, #0]
    6678:	b943      	cbnz	r3, 668c <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    667a:	1c71      	adds	r1, r6, #1
    667c:	2240      	movs	r2, #64	; 0x40
    667e:	480c      	ldr	r0, [pc, #48]	; (66b0 <le_pkey_complete+0x48>)
    6680:	f018 ffba 	bl	1f5f8 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6684:	2108      	movs	r1, #8
    6686:	4809      	ldr	r0, [pc, #36]	; (66ac <le_pkey_complete+0x44>)
    6688:	f019 faff 	bl	1fc8a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    668c:	4d09      	ldr	r5, [pc, #36]	; (66b4 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    668e:	4f08      	ldr	r7, [pc, #32]	; (66b0 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6690:	682c      	ldr	r4, [r5, #0]
    6692:	b90c      	cbnz	r4, 6698 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    6694:	602c      	str	r4, [r5, #0]
}
    6696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    6698:	7832      	ldrb	r2, [r6, #0]
    669a:	6823      	ldr	r3, [r4, #0]
    669c:	2a00      	cmp	r2, #0
    669e:	bf0c      	ite	eq
    66a0:	4638      	moveq	r0, r7
    66a2:	2000      	movne	r0, #0
    66a4:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    66a6:	6864      	ldr	r4, [r4, #4]
    66a8:	e7f3      	b.n	6692 <le_pkey_complete+0x2a>
    66aa:	bf00      	nop
    66ac:	2000dd88 	.word	0x2000dd88
    66b0:	2000a4e0 	.word	0x2000a4e0
    66b4:	20000254 	.word	0x20000254

000066b8 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    66b8:	2302      	movs	r3, #2
    66ba:	f04f 0200 	mov.w	r2, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    66be:	6881      	ldr	r1, [r0, #8]
    66c0:	4805      	ldr	r0, [pc, #20]	; (66d8 <hci_data_buf_overflow+0x20>)
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    66c2:	7809      	ldrb	r1, [r1, #0]
    66c4:	f363 0207 	bfi	r2, r3, #0, #8
    66c8:	4b04      	ldr	r3, [pc, #16]	; (66dc <hci_data_buf_overflow+0x24>)
    66ca:	1a1b      	subs	r3, r3, r0
    66cc:	08db      	lsrs	r3, r3, #3
    66ce:	f363 128f 	bfi	r2, r3, #6, #10
    66d2:	4803      	ldr	r0, [pc, #12]	; (66e0 <hci_data_buf_overflow+0x28>)
    66d4:	f018 b9cb 	b.w	1ea6e <log_1>
    66d8:	00025a6c 	.word	0x00025a6c
    66dc:	00025b34 	.word	0x00025b34
    66e0:	00027f3d 	.word	0x00027f3d

000066e4 <le_data_len_change>:
	u16_t handle = sys_le16_to_cpu(evt->handle);
    66e4:	6883      	ldr	r3, [r0, #8]
{
    66e6:	b510      	push	{r4, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    66e8:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    66ea:	4620      	mov	r0, r4
    66ec:	f002 fe86 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    66f0:	b980      	cbnz	r0, 6714 <le_data_len_change+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    66f2:	2301      	movs	r3, #1
    66f4:	f04f 0200 	mov.w	r2, #0
    66f8:	f363 0207 	bfi	r2, r3, #0, #8
    66fc:	4907      	ldr	r1, [pc, #28]	; (671c <le_data_len_change+0x38>)
    66fe:	4b08      	ldr	r3, [pc, #32]	; (6720 <le_data_len_change+0x3c>)
    6700:	4808      	ldr	r0, [pc, #32]	; (6724 <le_data_len_change+0x40>)
    6702:	1a5b      	subs	r3, r3, r1
    6704:	08db      	lsrs	r3, r3, #3
    6706:	4621      	mov	r1, r4
    6708:	f363 128f 	bfi	r2, r3, #6, #10
}
    670c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6710:	f018 b9ad 	b.w	1ea6e <log_1>
}
    6714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    6718:	f019 bc45 	b.w	1ffa6 <bt_conn_unref>
    671c:	00025a6c 	.word	0x00025a6c
    6720:	00025b34 	.word	0x00025b34
    6724:	000280ad 	.word	0x000280ad

00006728 <le_conn_update_complete>:
{
    6728:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    672a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    672c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6730:	4630      	mov	r0, r6
    6732:	f002 fe63 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    6736:	4604      	mov	r4, r0
    6738:	b980      	cbnz	r0, 675c <le_conn_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    673a:	2301      	movs	r3, #1
    673c:	f04f 0200 	mov.w	r2, #0
    6740:	f363 0207 	bfi	r2, r3, #0, #8
    6744:	491e      	ldr	r1, [pc, #120]	; (67c0 <le_conn_update_complete+0x98>)
    6746:	4b1f      	ldr	r3, [pc, #124]	; (67c4 <le_conn_update_complete+0x9c>)
    6748:	481f      	ldr	r0, [pc, #124]	; (67c8 <le_conn_update_complete+0xa0>)
    674a:	1a5b      	subs	r3, r3, r1
    674c:	08db      	lsrs	r3, r3, #3
    674e:	f363 128f 	bfi	r2, r3, #6, #10
    6752:	4631      	mov	r1, r6
    6754:	f018 f98b 	bl	1ea6e <log_1>
}
    6758:	b002      	add	sp, #8
    675a:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    675c:	782b      	ldrb	r3, [r5, #0]
    675e:	b9bb      	cbnz	r3, 6790 <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    6760:	792a      	ldrb	r2, [r5, #4]
    6762:	78eb      	ldrb	r3, [r5, #3]
    6764:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6768:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    676c:	79aa      	ldrb	r2, [r5, #6]
    676e:	796b      	ldrb	r3, [r5, #5]
    6770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6774:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6778:	79eb      	ldrb	r3, [r5, #7]
    677a:	7a2a      	ldrb	r2, [r5, #8]
    677c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6780:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
		notify_le_param_updated(conn);
    6784:	f002 fb3a 	bl	8dfc <notify_le_param_updated>
	bt_conn_unref(conn);
    6788:	4620      	mov	r0, r4
    678a:	f019 fc0c 	bl	1ffa6 <bt_conn_unref>
    678e:	e7e3      	b.n	6758 <le_conn_update_complete+0x30>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    6790:	2b1a      	cmp	r3, #26
    6792:	d1f9      	bne.n	6788 <le_conn_update_complete+0x60>
    6794:	78c3      	ldrb	r3, [r0, #3]
    6796:	2b01      	cmp	r3, #1
    6798:	d1f6      	bne.n	6788 <le_conn_update_complete+0x60>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    679a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    679e:	3004      	adds	r0, #4
    67a0:	f019 fa73 	bl	1fc8a <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    67a4:	0543      	lsls	r3, r0, #21
    67a6:	d4ef      	bmi.n	6788 <le_conn_update_complete+0x60>
		param.interval_min = conn->le.interval_min;
    67a8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    67ac:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    67ae:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    67b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    67b4:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    67b6:	4620      	mov	r0, r4
    67b8:	f003 f9a0 	bl	9afc <bt_l2cap_update_conn_param>
    67bc:	e7e4      	b.n	6788 <le_conn_update_complete+0x60>
    67be:	bf00      	nop
    67c0:	00025a6c 	.word	0x00025a6c
    67c4:	00025b34 	.word	0x00025b34
    67c8:	000280ad 	.word	0x000280ad

000067cc <hci_vendor_event>:
{
    67cc:	b510      	push	{r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    67ce:	2302      	movs	r3, #2
    67d0:	f04f 0400 	mov.w	r4, #0
    67d4:	4a0a      	ldr	r2, [pc, #40]	; (6800 <hci_vendor_event+0x34>)
    67d6:	8981      	ldrh	r1, [r0, #12]
    67d8:	6880      	ldr	r0, [r0, #8]
    67da:	f363 0407 	bfi	r4, r3, #0, #8
    67de:	4b09      	ldr	r3, [pc, #36]	; (6804 <hci_vendor_event+0x38>)
    67e0:	1a9b      	subs	r3, r3, r2
    67e2:	08db      	lsrs	r3, r3, #3
    67e4:	f363 148f 	bfi	r4, r3, #6, #10
    67e8:	f7ff fb20 	bl	5e2c <bt_hex_real>
    67ec:	f7fc fc52 	bl	3094 <log_strdup>
    67f0:	4622      	mov	r2, r4
    67f2:	4601      	mov	r1, r0
}
    67f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    67f8:	4803      	ldr	r0, [pc, #12]	; (6808 <hci_vendor_event+0x3c>)
    67fa:	f018 b938 	b.w	1ea6e <log_1>
    67fe:	bf00      	nop
    6800:	00025a6c 	.word	0x00025a6c
    6804:	00025b34 	.word	0x00025b34
    6808:	0002806f 	.word	0x0002806f

0000680c <update_sec_level>:
{
    680c:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    680e:	7ac3      	ldrb	r3, [r0, #11]
{
    6810:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    6812:	b913      	cbnz	r3, 681a <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    6814:	2301      	movs	r3, #1
    6816:	7243      	strb	r3, [r0, #9]
}
    6818:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    681a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    681e:	b31b      	cbz	r3, 6868 <update_sec_level+0x5c>
    6820:	7a5a      	ldrb	r2, [r3, #9]
    6822:	07d1      	lsls	r1, r2, #31
    6824:	d520      	bpl.n	6868 <update_sec_level+0x5c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    6826:	06d2      	lsls	r2, r2, #27
    6828:	d51c      	bpl.n	6864 <update_sec_level+0x58>
    682a:	7a1b      	ldrb	r3, [r3, #8]
    682c:	2b10      	cmp	r3, #16
    682e:	d119      	bne.n	6864 <update_sec_level+0x58>
			conn->sec_level = BT_SECURITY_L4;
    6830:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    6832:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    6834:	7aa2      	ldrb	r2, [r4, #10]
    6836:	7a63      	ldrb	r3, [r4, #9]
    6838:	429a      	cmp	r2, r3
    683a:	d9ed      	bls.n	6818 <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    683c:	2301      	movs	r3, #1
    683e:	f04f 0100 	mov.w	r1, #0
    6842:	f363 0107 	bfi	r1, r3, #0, #8
    6846:	4a09      	ldr	r2, [pc, #36]	; (686c <update_sec_level+0x60>)
    6848:	4b09      	ldr	r3, [pc, #36]	; (6870 <update_sec_level+0x64>)
    684a:	480a      	ldr	r0, [pc, #40]	; (6874 <update_sec_level+0x68>)
    684c:	1a9b      	subs	r3, r3, r2
    684e:	08db      	lsrs	r3, r3, #3
    6850:	f363 118f 	bfi	r1, r3, #6, #10
    6854:	f018 f8fe 	bl	1ea54 <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    6858:	4620      	mov	r0, r4
    685a:	2105      	movs	r1, #5
}
    685c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    6860:	f019 bba4 	b.w	1ffac <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    6864:	2303      	movs	r3, #3
    6866:	e7e4      	b.n	6832 <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    6868:	2302      	movs	r3, #2
    686a:	e7e2      	b.n	6832 <update_sec_level+0x26>
    686c:	00025a6c 	.word	0x00025a6c
    6870:	00025b34 	.word	0x00025b34
    6874:	000281e8 	.word	0x000281e8

00006878 <hci_encrypt_key_refresh_complete>:
{
    6878:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    687a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    687c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6880:	4630      	mov	r0, r6
    6882:	f002 fdbb 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    6886:	4604      	mov	r4, r0
    6888:	b980      	cbnz	r0, 68ac <hci_encrypt_key_refresh_complete+0x34>
		BT_ERR("Unable to look up conn with handle %u", handle);
    688a:	2301      	movs	r3, #1
    688c:	f04f 0200 	mov.w	r2, #0
    6890:	f363 0207 	bfi	r2, r3, #0, #8
    6894:	4917      	ldr	r1, [pc, #92]	; (68f4 <hci_encrypt_key_refresh_complete+0x7c>)
    6896:	4b18      	ldr	r3, [pc, #96]	; (68f8 <hci_encrypt_key_refresh_complete+0x80>)
    6898:	4818      	ldr	r0, [pc, #96]	; (68fc <hci_encrypt_key_refresh_complete+0x84>)
    689a:	1a5b      	subs	r3, r3, r1
    689c:	08db      	lsrs	r3, r3, #3
    689e:	4631      	mov	r1, r6
    68a0:	f363 128f 	bfi	r2, r3, #6, #10
}
    68a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    68a8:	f018 b8e1 	b.w	1ea6e <log_1>
	if (evt->status) {
    68ac:	7829      	ldrb	r1, [r5, #0]
    68ae:	b189      	cbz	r1, 68d4 <hci_encrypt_key_refresh_complete+0x5c>
	conn->required_sec_level = conn->sec_level;
    68b0:	7a43      	ldrb	r3, [r0, #9]
    68b2:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    68b4:	f019 fc2f 	bl	20116 <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    68b8:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    68ba:	2b29      	cmp	r3, #41	; 0x29
    68bc:	bf9a      	itte	ls
    68be:	4a10      	ldrls	r2, [pc, #64]	; (6900 <hci_encrypt_key_refresh_complete+0x88>)
    68c0:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    68c2:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    68c4:	4620      	mov	r0, r4
    68c6:	f002 fb07 	bl	8ed8 <bt_conn_security_changed>
	bt_conn_unref(conn);
    68ca:	4620      	mov	r0, r4
}
    68cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    68d0:	f019 bb69 	b.w	1ffa6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    68d4:	7883      	ldrb	r3, [r0, #2]
    68d6:	2b01      	cmp	r3, #1
    68d8:	d104      	bne.n	68e4 <hci_encrypt_key_refresh_complete+0x6c>
		bt_smp_update_keys(conn);
    68da:	f007 fe49 	bl	e570 <bt_smp_update_keys>
		update_sec_level(conn);
    68de:	4620      	mov	r0, r4
    68e0:	f7ff ff94 	bl	680c <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    68e4:	7a63      	ldrb	r3, [r4, #9]
    68e6:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    68e8:	7829      	ldrb	r1, [r5, #0]
    68ea:	4620      	mov	r0, r4
    68ec:	f019 fc13 	bl	20116 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    68f0:	2100      	movs	r1, #0
    68f2:	e7e7      	b.n	68c4 <hci_encrypt_key_refresh_complete+0x4c>
    68f4:	00025a6c 	.word	0x00025a6c
    68f8:	00025b34 	.word	0x00025b34
    68fc:	00027f65 	.word	0x00027f65
    6900:	0002784c 	.word	0x0002784c

00006904 <hci_encrypt_change>:
{
    6904:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    6906:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6908:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    690c:	4630      	mov	r0, r6
    690e:	f002 fd75 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    6912:	4604      	mov	r4, r0
    6914:	b980      	cbnz	r0, 6938 <hci_encrypt_change+0x34>
		BT_ERR("Unable to look up conn with handle %u", handle);
    6916:	2301      	movs	r3, #1
    6918:	f04f 0200 	mov.w	r2, #0
    691c:	f363 0207 	bfi	r2, r3, #0, #8
    6920:	4919      	ldr	r1, [pc, #100]	; (6988 <hci_encrypt_change+0x84>)
    6922:	4b1a      	ldr	r3, [pc, #104]	; (698c <hci_encrypt_change+0x88>)
    6924:	481a      	ldr	r0, [pc, #104]	; (6990 <hci_encrypt_change+0x8c>)
    6926:	1a5b      	subs	r3, r3, r1
    6928:	08db      	lsrs	r3, r3, #3
    692a:	4631      	mov	r1, r6
    692c:	f363 128f 	bfi	r2, r3, #6, #10
}
    6930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    6934:	f018 b89b 	b.w	1ea6e <log_1>
	if (evt->status) {
    6938:	7829      	ldrb	r1, [r5, #0]
    693a:	b189      	cbz	r1, 6960 <hci_encrypt_change+0x5c>
	conn->required_sec_level = conn->sec_level;
    693c:	7a43      	ldrb	r3, [r0, #9]
    693e:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    6940:	f019 fbe9 	bl	20116 <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    6944:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    6946:	2b29      	cmp	r3, #41	; 0x29
    6948:	bf9a      	itte	ls
    694a:	4a12      	ldrls	r2, [pc, #72]	; (6994 <hci_encrypt_change+0x90>)
    694c:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    694e:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    6950:	4620      	mov	r0, r4
    6952:	f002 fac1 	bl	8ed8 <bt_conn_security_changed>
	bt_conn_unref(conn);
    6956:	4620      	mov	r0, r4
}
    6958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    695c:	f019 bb23 	b.w	1ffa6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    6960:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    6962:	78eb      	ldrb	r3, [r5, #3]
    6964:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    6966:	2a01      	cmp	r2, #1
    6968:	d105      	bne.n	6976 <hci_encrypt_change+0x72>
		if (conn->encrypt) {
    696a:	b10b      	cbz	r3, 6970 <hci_encrypt_change+0x6c>
			bt_smp_update_keys(conn);
    696c:	f007 fe00 	bl	e570 <bt_smp_update_keys>
		update_sec_level(conn);
    6970:	4620      	mov	r0, r4
    6972:	f7ff ff4b 	bl	680c <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    6976:	7a63      	ldrb	r3, [r4, #9]
    6978:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    697a:	7829      	ldrb	r1, [r5, #0]
    697c:	4620      	mov	r0, r4
    697e:	f019 fbca 	bl	20116 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    6982:	2100      	movs	r1, #0
    6984:	e7e4      	b.n	6950 <hci_encrypt_change+0x4c>
    6986:	bf00      	nop
    6988:	00025a6c 	.word	0x00025a6c
    698c:	00025b34 	.word	0x00025b34
    6990:	00027f65 	.word	0x00027f65
    6994:	0002784c 	.word	0x0002784c

00006998 <find_pending_connect.part.18>:
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    6998:	b507      	push	{r0, r1, r2, lr}
		conn = bt_conn_lookup_state_le(peer_addr,
    699a:	2104      	movs	r1, #4
    699c:	f002 fd66 	bl	946c <bt_conn_lookup_state_le>
		if (!conn) {
    69a0:	b960      	cbnz	r0, 69bc <find_pending_connect.part.18+0x24>
			conn = bt_conn_lookup_state_le(BT_ADDR_LE_NONE,
    69a2:	4b08      	ldr	r3, [pc, #32]	; (69c4 <find_pending_connect.part.18+0x2c>)
    69a4:	6818      	ldr	r0, [r3, #0]
    69a6:	889a      	ldrh	r2, [r3, #4]
    69a8:	9000      	str	r0, [sp, #0]
    69aa:	799b      	ldrb	r3, [r3, #6]
    69ac:	f8ad 2004 	strh.w	r2, [sp, #4]
    69b0:	2103      	movs	r1, #3
    69b2:	4668      	mov	r0, sp
    69b4:	f88d 3006 	strb.w	r3, [sp, #6]
    69b8:	f002 fd58 	bl	946c <bt_conn_lookup_state_le>
}
    69bc:	b003      	add	sp, #12
    69be:	f85d fb04 	ldr.w	pc, [sp], #4
    69c2:	bf00      	nop
    69c4:	00025c38 	.word	0x00025c38

000069c8 <handle_event>:
{
    69c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    69ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    69ce:	4604      	mov	r4, r0
    69d0:	4608      	mov	r0, r1
		if (handler->event != event) {
    69d2:	7811      	ldrb	r1, [r2, #0]
    69d4:	42a1      	cmp	r1, r4
    69d6:	d01e      	beq.n	6a16 <handle_event+0x4e>
			continue;
    69d8:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    69da:	429a      	cmp	r2, r3
    69dc:	d1f9      	bne.n	69d2 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    69de:	2302      	movs	r3, #2
    69e0:	f04f 0500 	mov.w	r5, #0
    69e4:	4a19      	ldr	r2, [pc, #100]	; (6a4c <handle_event+0x84>)
    69e6:	8986      	ldrh	r6, [r0, #12]
    69e8:	6880      	ldr	r0, [r0, #8]
    69ea:	f363 0507 	bfi	r5, r3, #0, #8
    69ee:	4b18      	ldr	r3, [pc, #96]	; (6a50 <handle_event+0x88>)
    69f0:	1a9b      	subs	r3, r3, r2
    69f2:	08db      	lsrs	r3, r3, #3
    69f4:	4631      	mov	r1, r6
    69f6:	f363 158f 	bfi	r5, r3, #6, #10
    69fa:	f7ff fa17 	bl	5e2c <bt_hex_real>
    69fe:	f7fc fb49 	bl	3094 <log_strdup>
    6a02:	f8ad 5000 	strh.w	r5, [sp]
    6a06:	4603      	mov	r3, r0
    6a08:	4632      	mov	r2, r6
    6a0a:	4621      	mov	r1, r4
    6a0c:	4811      	ldr	r0, [pc, #68]	; (6a54 <handle_event+0x8c>)
    6a0e:	f018 f85a 	bl	1eac6 <log_3>
}
    6a12:	b002      	add	sp, #8
    6a14:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    6a16:	8981      	ldrh	r1, [r0, #12]
    6a18:	7853      	ldrb	r3, [r2, #1]
    6a1a:	428b      	cmp	r3, r1
    6a1c:	d911      	bls.n	6a42 <handle_event+0x7a>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    6a1e:	2201      	movs	r2, #1
    6a20:	f04f 0300 	mov.w	r3, #0
    6a24:	f362 0307 	bfi	r3, r2, #0, #8
    6a28:	4808      	ldr	r0, [pc, #32]	; (6a4c <handle_event+0x84>)
    6a2a:	4a09      	ldr	r2, [pc, #36]	; (6a50 <handle_event+0x88>)
    6a2c:	1a12      	subs	r2, r2, r0
    6a2e:	08d2      	lsrs	r2, r2, #3
    6a30:	4809      	ldr	r0, [pc, #36]	; (6a58 <handle_event+0x90>)
    6a32:	f362 138f 	bfi	r3, r2, #6, #10
    6a36:	4622      	mov	r2, r4
}
    6a38:	b002      	add	sp, #8
    6a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    6a3e:	f018 b82a 	b.w	1ea96 <log_2>
		handler->handler(buf);
    6a42:	6853      	ldr	r3, [r2, #4]
}
    6a44:	b002      	add	sp, #8
    6a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    6a4a:	4718      	bx	r3
    6a4c:	00025a6c 	.word	0x00025a6c
    6a50:	00025b34 	.word	0x00025b34
    6a54:	00027eb3 	.word	0x00027eb3
    6a58:	00027e91 	.word	0x00027e91

00006a5c <hci_le_meta_event>:
{
    6a5c:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6a5e:	2101      	movs	r1, #1
{
    6a60:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6a62:	3008      	adds	r0, #8
    6a64:	f01b fe17 	bl	22696 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6a68:	4621      	mov	r1, r4
    6a6a:	230a      	movs	r3, #10
    6a6c:	4a02      	ldr	r2, [pc, #8]	; (6a78 <hci_le_meta_event+0x1c>)
    6a6e:	7800      	ldrb	r0, [r0, #0]
}
    6a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6a74:	f7ff bfa8 	b.w	69c8 <handle_event>
    6a78:	0002607c 	.word	0x0002607c

00006a7c <hci_cmd_done>:
{
    6a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6a80:	4606      	mov	r6, r0
    6a82:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6a84:	7990      	ldrb	r0, [r2, #6]
    6a86:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 6b78 <hci_cmd_done+0xfc>
{
    6a8a:	460f      	mov	r7, r1
    6a8c:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6a8e:	f010 fd05 	bl	1749c <net_buf_pool_get>
    6a92:	4580      	cmp	r8, r0
    6a94:	d01a      	beq.n	6acc <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    6a96:	2302      	movs	r3, #2
    6a98:	f04f 0400 	mov.w	r4, #0
    6a9c:	f363 0407 	bfi	r4, r3, #0, #8
    6aa0:	4a30      	ldr	r2, [pc, #192]	; (6b64 <hci_cmd_done+0xe8>)
    6aa2:	4b31      	ldr	r3, [pc, #196]	; (6b68 <hci_cmd_done+0xec>)
    6aa4:	79a8      	ldrb	r0, [r5, #6]
    6aa6:	9600      	str	r6, [sp, #0]
    6aa8:	1ad2      	subs	r2, r2, r3
    6aaa:	08d2      	lsrs	r2, r2, #3
    6aac:	f362 148f 	bfi	r4, r2, #6, #10
    6ab0:	9001      	str	r0, [sp, #4]
    6ab2:	f010 fcf3 	bl	1749c <net_buf_pool_get>
    6ab6:	4623      	mov	r3, r4
    6ab8:	e9cd 0802 	strd	r0, r8, [sp, #8]
    6abc:	2204      	movs	r2, #4
    6abe:	4669      	mov	r1, sp
    6ac0:	482a      	ldr	r0, [pc, #168]	; (6b6c <hci_cmd_done+0xf0>)
    6ac2:	f018 f81b 	bl	1eafc <log_n>
}
    6ac6:	b005      	add	sp, #20
    6ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    6acc:	4628      	mov	r0, r5
    6ace:	f010 fceb 	bl	174a8 <net_buf_id>
    6ad2:	4c27      	ldr	r4, [pc, #156]	; (6b70 <hci_cmd_done+0xf4>)
    6ad4:	f04f 080c 	mov.w	r8, #12
    6ad8:	fb08 4000 	mla	r0, r8, r0, r4
    6adc:	8843      	ldrh	r3, [r0, #2]
    6ade:	42b3      	cmp	r3, r6
    6ae0:	d015      	beq.n	6b0e <hci_cmd_done+0x92>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    6ae2:	2302      	movs	r3, #2
    6ae4:	f04f 0900 	mov.w	r9, #0
    6ae8:	f363 0907 	bfi	r9, r3, #0, #8
    6aec:	4a1d      	ldr	r2, [pc, #116]	; (6b64 <hci_cmd_done+0xe8>)
    6aee:	4b1e      	ldr	r3, [pc, #120]	; (6b68 <hci_cmd_done+0xec>)
    6af0:	1ad2      	subs	r2, r2, r3
    6af2:	08d2      	lsrs	r2, r2, #3
    6af4:	4628      	mov	r0, r5
    6af6:	f362 198f 	bfi	r9, r2, #6, #10
    6afa:	f010 fcd5 	bl	174a8 <net_buf_id>
    6afe:	fb08 4000 	mla	r0, r8, r0, r4
    6b02:	464b      	mov	r3, r9
    6b04:	8842      	ldrh	r2, [r0, #2]
    6b06:	481b      	ldr	r0, [pc, #108]	; (6b74 <hci_cmd_done+0xf8>)
    6b08:	4631      	mov	r1, r6
    6b0a:	f017 ffc4 	bl	1ea96 <log_2>
	if (cmd(buf)->state && !status) {
    6b0e:	4628      	mov	r0, r5
    6b10:	f010 fcca 	bl	174a8 <net_buf_id>
    6b14:	260c      	movs	r6, #12
    6b16:	fb06 4000 	mla	r0, r6, r0, r4
    6b1a:	6843      	ldr	r3, [r0, #4]
    6b1c:	b15b      	cbz	r3, 6b36 <hci_cmd_done+0xba>
    6b1e:	b957      	cbnz	r7, 6b36 <hci_cmd_done+0xba>
		struct cmd_state_set *update = cmd(buf)->state;
    6b20:	4628      	mov	r0, r5
    6b22:	f010 fcc1 	bl	174a8 <net_buf_id>
    6b26:	fb06 4000 	mla	r0, r6, r0, r4
    6b2a:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    6b2c:	7a1a      	ldrb	r2, [r3, #8]
    6b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
    6b32:	f019 f8b9 	bl	1fca8 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    6b36:	4628      	mov	r0, r5
    6b38:	f010 fcb6 	bl	174a8 <net_buf_id>
    6b3c:	260c      	movs	r6, #12
    6b3e:	fb06 4000 	mla	r0, r6, r0, r4
    6b42:	6883      	ldr	r3, [r0, #8]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d0be      	beq.n	6ac6 <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
    6b48:	4628      	mov	r0, r5
    6b4a:	f010 fcad 	bl	174a8 <net_buf_id>
    6b4e:	4370      	muls	r0, r6
    6b50:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
    6b52:	4628      	mov	r0, r5
    6b54:	f010 fca8 	bl	174a8 <net_buf_id>
    6b58:	fb06 4000 	mla	r0, r6, r0, r4
    6b5c:	6880      	ldr	r0, [r0, #8]
	z_impl_k_sem_give(sem);
    6b5e:	f015 feab 	bl	1c8b8 <z_impl_k_sem_give>
    6b62:	e7b0      	b.n	6ac6 <hci_cmd_done+0x4a>
    6b64:	00025b34 	.word	0x00025b34
    6b68:	00025a6c 	.word	0x00025a6c
    6b6c:	00027ed5 	.word	0x00027ed5
    6b70:	20000238 	.word	0x20000238
    6b74:	00027f0a 	.word	0x00027f0a
    6b78:	2000e748 	.word	0x2000e748

00006b7c <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    6b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    6b7e:	4e0b      	ldr	r6, [pc, #44]	; (6bac <id_find+0x30>)
{
    6b80:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    6b82:	2500      	movs	r5, #0
    6b84:	79f3      	ldrb	r3, [r6, #7]
    6b86:	b2ec      	uxtb	r4, r5
    6b88:	42a3      	cmp	r3, r4
    6b8a:	d802      	bhi.n	6b92 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    6b8c:	f06f 0401 	mvn.w	r4, #1
    6b90:	e009      	b.n	6ba6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    6b92:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    6b96:	2207      	movs	r2, #7
    6b98:	4431      	add	r1, r6
    6b9a:	4638      	mov	r0, r7
    6b9c:	f018 fd1c 	bl	1f5d8 <memcmp>
    6ba0:	3501      	adds	r5, #1
    6ba2:	2800      	cmp	r0, #0
    6ba4:	d1ee      	bne.n	6b84 <id_find+0x8>
}
    6ba6:	4620      	mov	r0, r4
    6ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6baa:	bf00      	nop
    6bac:	2000dd18 	.word	0x2000dd18

00006bb0 <hci_tx_thread>:
{
    6bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Uncleared pending sent_cmd");
    6bb4:	4a52      	ldr	r2, [pc, #328]	; (6d00 <hci_tx_thread+0x150>)
    6bb6:	4b53      	ldr	r3, [pc, #332]	; (6d04 <hci_tx_thread+0x154>)
    6bb8:	1a9b      	subs	r3, r3, r2
    6bba:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
		events[0].state = K_POLL_STATE_NOT_READY;
    6bbe:	4a52      	ldr	r2, [pc, #328]	; (6d08 <hci_tx_thread+0x158>)
    6bc0:	68d3      	ldr	r3, [r2, #12]
    6bc2:	f36f 3310 	bfc	r3, #12, #5
    6bc6:	60d3      	str	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6bc8:	f102 0014 	add.w	r0, r2, #20
    6bcc:	f002 fad0 	bl	9170 <bt_conn_prepare_events>
    6bd0:	1c47      	adds	r7, r0, #1
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    6bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6bd6:	4639      	mov	r1, r7
    6bd8:	484b      	ldr	r0, [pc, #300]	; (6d08 <hci_tx_thread+0x158>)
    6bda:	f016 f9a3 	bl	1cf24 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6bde:	b160      	cbz	r0, 6bfa <hci_tx_thread+0x4a>
    6be0:	f640 73ab 	movw	r3, #4011	; 0xfab
    6be4:	4a49      	ldr	r2, [pc, #292]	; (6d0c <hci_tx_thread+0x15c>)
    6be6:	494a      	ldr	r1, [pc, #296]	; (6d10 <hci_tx_thread+0x160>)
    6be8:	484a      	ldr	r0, [pc, #296]	; (6d14 <hci_tx_thread+0x164>)
    6bea:	f016 fde4 	bl	1d7b6 <printk>
    6bee:	4040      	eors	r0, r0
    6bf0:	f380 8811 	msr	BASEPRI, r0
    6bf4:	f04f 0003 	mov.w	r0, #3
    6bf8:	df02      	svc	2
{
    6bfa:	4d43      	ldr	r5, [pc, #268]	; (6d08 <hci_tx_thread+0x158>)
	return z_impl_k_sem_take(sem, timeout);
    6bfc:	4c46      	ldr	r4, [pc, #280]	; (6d18 <hci_tx_thread+0x168>)
	for (; count; ev++, count--) {
    6bfe:	b917      	cbnz	r7, 6c06 <hci_tx_thread+0x56>
	z_impl_k_yield();
    6c00:	f015 fde0 	bl	1c7c4 <z_impl_k_yield>
    6c04:	e7db      	b.n	6bbe <hci_tx_thread+0xe>
		switch (ev->state) {
    6c06:	68e9      	ldr	r1, [r5, #12]
    6c08:	f3c1 3104 	ubfx	r1, r1, #12, #5
    6c0c:	2901      	cmp	r1, #1
    6c0e:	d960      	bls.n	6cd2 <hci_tx_thread+0x122>
    6c10:	2904      	cmp	r1, #4
    6c12:	d168      	bne.n	6ce6 <hci_tx_thread+0x136>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6c14:	7b29      	ldrb	r1, [r5, #12]
    6c16:	2900      	cmp	r1, #0
    6c18:	d15e      	bne.n	6cd8 <hci_tx_thread+0x128>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6c1a:	4840      	ldr	r0, [pc, #256]	; (6d1c <hci_tx_thread+0x16c>)
    6c1c:	f01b fcdc 	bl	225d8 <net_buf_get>
	BT_ASSERT(buf);
    6c20:	4606      	mov	r6, r0
    6c22:	b960      	cbnz	r0, 6c3e <hci_tx_thread+0x8e>
    6c24:	f640 734c 	movw	r3, #3916	; 0xf4c
    6c28:	4a38      	ldr	r2, [pc, #224]	; (6d0c <hci_tx_thread+0x15c>)
    6c2a:	493d      	ldr	r1, [pc, #244]	; (6d20 <hci_tx_thread+0x170>)
    6c2c:	4839      	ldr	r0, [pc, #228]	; (6d14 <hci_tx_thread+0x164>)
    6c2e:	f016 fdc2 	bl	1d7b6 <printk>
    6c32:	4040      	eors	r0, r0
    6c34:	f380 8811 	msr	BASEPRI, r0
    6c38:	f04f 0003 	mov.w	r0, #3
    6c3c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6c3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6c42:	4838      	ldr	r0, [pc, #224]	; (6d24 <hci_tx_thread+0x174>)
    6c44:	f015 fe64 	bl	1c910 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6c48:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    6c4c:	b193      	cbz	r3, 6c74 <hci_tx_thread+0xc4>
		BT_ERR("Uncleared pending sent_cmd");
    6c4e:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    6c52:	f043 0301 	orr.w	r3, r3, #1
    6c56:	f363 0807 	bfi	r8, r3, #0, #8
    6c5a:	f36b 188f 	bfi	r8, fp, #6, #10
    6c5e:	4641      	mov	r1, r8
    6c60:	4831      	ldr	r0, [pc, #196]	; (6d28 <hci_tx_thread+0x178>)
    6c62:	f017 fef7 	bl	1ea54 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6c66:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    6c6a:	f010 fcb3 	bl	175d4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6c6e:	2300      	movs	r3, #0
    6c70:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    6c74:	4630      	mov	r0, r6
    6c76:	f01b fcd9 	bl	2262c <net_buf_ref>
    6c7a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		return bt_hci_ecc_send(buf);
    6c7e:	4630      	mov	r0, r6
    6c80:	f7ff fa20 	bl	60c4 <bt_hci_ecc_send>
	if (err) {
    6c84:	4601      	mov	r1, r0
    6c86:	b320      	cbz	r0, 6cd2 <hci_tx_thread+0x122>
		BT_ERR("Unable to send to driver (err %d)", err);
    6c88:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    6c8c:	f043 0301 	orr.w	r3, r3, #1
    6c90:	f363 0907 	bfi	r9, r3, #0, #8
    6c94:	f36b 198f 	bfi	r9, fp, #6, #10
    6c98:	464a      	mov	r2, r9
    6c9a:	4824      	ldr	r0, [pc, #144]	; (6d2c <hci_tx_thread+0x17c>)
    6c9c:	f017 fee7 	bl	1ea6e <log_1>
	z_impl_k_sem_give(sem);
    6ca0:	4820      	ldr	r0, [pc, #128]	; (6d24 <hci_tx_thread+0x174>)
    6ca2:	f015 fe09 	bl	1c8b8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    6ca6:	4630      	mov	r0, r6
    6ca8:	f010 fbfe 	bl	174a8 <net_buf_id>
    6cac:	4a20      	ldr	r2, [pc, #128]	; (6d30 <hci_tx_thread+0x180>)
    6cae:	230c      	movs	r3, #12
    6cb0:	fb03 2000 	mla	r0, r3, r0, r2
    6cb4:	211f      	movs	r1, #31
    6cb6:	2200      	movs	r2, #0
    6cb8:	8840      	ldrh	r0, [r0, #2]
    6cba:	f7ff fedf 	bl	6a7c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6cbe:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    6cc2:	f010 fc87 	bl	175d4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6cc6:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6cc8:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    6cca:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    6cce:	f010 fc81 	bl	175d4 <net_buf_unref>
	for (; count; ev++, count--) {
    6cd2:	3514      	adds	r5, #20
    6cd4:	3f01      	subs	r7, #1
    6cd6:	e792      	b.n	6bfe <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6cd8:	2901      	cmp	r1, #1
    6cda:	d1fa      	bne.n	6cd2 <hci_tx_thread+0x122>
					conn = CONTAINER_OF(ev->fifo,
    6cdc:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    6cde:	3834      	subs	r0, #52	; 0x34
    6ce0:	f002 fcee 	bl	96c0 <bt_conn_process_tx>
    6ce4:	e7f5      	b.n	6cd2 <hci_tx_thread+0x122>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6ce6:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    6cea:	f043 0302 	orr.w	r3, r3, #2
    6cee:	f363 0a07 	bfi	sl, r3, #0, #8
    6cf2:	f36b 1a8f 	bfi	sl, fp, #6, #10
    6cf6:	4652      	mov	r2, sl
    6cf8:	480e      	ldr	r0, [pc, #56]	; (6d34 <hci_tx_thread+0x184>)
    6cfa:	f017 feb8 	bl	1ea6e <log_1>
    6cfe:	e7e8      	b.n	6cd2 <hci_tx_thread+0x122>
    6d00:	00025a6c 	.word	0x00025a6c
    6d04:	00025b34 	.word	0x00025b34
    6d08:	2000df58 	.word	0x2000df58
    6d0c:	00027fbe 	.word	0x00027fbe
    6d10:	00027feb 	.word	0x00027feb
    6d14:	00027ff4 	.word	0x00027ff4
    6d18:	2000dd18 	.word	0x2000dd18
    6d1c:	2000dddc 	.word	0x2000dddc
    6d20:	00029ae0 	.word	0x00029ae0
    6d24:	2000ddc0 	.word	0x2000ddc0
    6d28:	00028011 	.word	0x00028011
    6d2c:	0002802c 	.word	0x0002802c
    6d30:	20000238 	.word	0x20000238
    6d34:	0002804e 	.word	0x0002804e

00006d38 <hci_num_completed_packets>:
{
    6d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				BT_ERR("packets count mismatch");
    6d3c:	4b4f      	ldr	r3, [pc, #316]	; (6e7c <hci_num_completed_packets+0x144>)
    6d3e:	4c50      	ldr	r4, [pc, #320]	; (6e80 <hci_num_completed_packets+0x148>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    6d40:	f8d0 9008 	ldr.w	r9, [r0, #8]
				BT_ERR("packets count mismatch");
    6d44:	1ae4      	subs	r4, r4, r3
    6d46:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	for (i = 0; i < evt->num_handles; i++) {
    6d4a:	2500      	movs	r5, #0
    6d4c:	f899 3000 	ldrb.w	r3, [r9]
    6d50:	429d      	cmp	r5, r3
    6d52:	db02      	blt.n	6d5a <hci_num_completed_packets+0x22>
}
    6d54:	b003      	add	sp, #12
    6d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    6d5a:	eb09 0385 	add.w	r3, r9, r5, lsl #2
    6d5e:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    6d62:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    6d66:	f04f 0320 	mov.w	r3, #32
    6d6a:	f3ef 8211 	mrs	r2, BASEPRI
    6d6e:	f383 8811 	msr	BASEPRI, r3
    6d72:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    6d76:	4658      	mov	r0, fp
    6d78:	9201      	str	r2, [sp, #4]
    6d7a:	f002 fb3f 	bl	93fc <bt_conn_lookup_handle>
		if (!conn) {
    6d7e:	9a01      	ldr	r2, [sp, #4]
    6d80:	4682      	mov	sl, r0
    6d82:	b990      	cbnz	r0, 6daa <hci_num_completed_packets+0x72>
	__asm__ volatile(
    6d84:	f382 8811 	msr	BASEPRI, r2
    6d88:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    6d8c:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    6d90:	f043 0301 	orr.w	r3, r3, #1
    6d94:	f363 0707 	bfi	r7, r3, #0, #8
    6d98:	f364 178f 	bfi	r7, r4, #6, #10
    6d9c:	463a      	mov	r2, r7
    6d9e:	4659      	mov	r1, fp
    6da0:	4838      	ldr	r0, [pc, #224]	; (6e84 <hci_num_completed_packets+0x14c>)
    6da2:	f017 fe64 	bl	1ea6e <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    6da6:	3501      	adds	r5, #1
    6da8:	e7d0      	b.n	6d4c <hci_num_completed_packets+0x14>
    6daa:	f382 8811 	msr	BASEPRI, r2
    6dae:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6db2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    6db6:	b3b6      	cbz	r6, 6e26 <hci_num_completed_packets+0xee>
	__asm__ volatile(
    6db8:	f04f 0220 	mov.w	r2, #32
    6dbc:	f3ef 8111 	mrs	r1, BASEPRI
    6dc0:	f382 8811 	msr	BASEPRI, r2
    6dc4:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    6dc8:	f8da 201c 	ldr.w	r2, [sl, #28]
    6dcc:	b172      	cbz	r2, 6dec <hci_num_completed_packets+0xb4>
				conn->pending_no_cb--;
    6dce:	3a01      	subs	r2, #1
    6dd0:	f8ca 201c 	str.w	r2, [sl, #28]
	__asm__ volatile(
    6dd4:	f381 8811 	msr	BASEPRI, r1
    6dd8:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    6ddc:	4650      	mov	r0, sl
    6dde:	f002 f809 	bl	8df4 <bt_conn_get_pkts>
    6de2:	3e01      	subs	r6, #1
    6de4:	f015 fd68 	bl	1c8b8 <z_impl_k_sem_give>
    6de8:	b2b6      	uxth	r6, r6
    6dea:	e7e4      	b.n	6db6 <hci_num_completed_packets+0x7e>
Z_GENLIST_IS_EMPTY(slist)
    6dec:	f8da 2014 	ldr.w	r2, [sl, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6df0:	b142      	cbz	r2, 6e04 <hci_num_completed_packets+0xcc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6df2:	f8da 0018 	ldr.w	r0, [sl, #24]
    6df6:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    6df8:	f8ca 3014 	str.w	r3, [sl, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6dfc:	4282      	cmp	r2, r0
	list->tail = node;
    6dfe:	bf08      	it	eq
    6e00:	f8ca 3018 	streq.w	r3, [sl, #24]
    6e04:	f381 8811 	msr	BASEPRI, r1
    6e08:	f3bf 8f6f 	isb	sy
			if (!node) {
    6e0c:	b97a      	cbnz	r2, 6e2e <hci_num_completed_packets+0xf6>
				BT_ERR("packets count mismatch");
    6e0e:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    6e12:	f042 0201 	orr.w	r2, r2, #1
    6e16:	f362 0807 	bfi	r8, r2, #0, #8
    6e1a:	f364 188f 	bfi	r8, r4, #6, #10
    6e1e:	4641      	mov	r1, r8
    6e20:	4819      	ldr	r0, [pc, #100]	; (6e88 <hci_num_completed_packets+0x150>)
    6e22:	f017 fe17 	bl	1ea54 <log_0>
		bt_conn_unref(conn);
    6e26:	4650      	mov	r0, sl
    6e28:	f019 f8bd 	bl	1ffa6 <bt_conn_unref>
    6e2c:	e7bb      	b.n	6da6 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    6e2e:	f04f 0120 	mov.w	r1, #32
    6e32:	f3ef 8011 	mrs	r0, BASEPRI
    6e36:	f381 8811 	msr	BASEPRI, r1
    6e3a:	f3bf 8f6f 	isb	sy
			tx->pending_no_cb = 0U;
    6e3e:	2300      	movs	r3, #0
			conn->pending_no_cb = tx->pending_no_cb;
    6e40:	68d1      	ldr	r1, [r2, #12]
    6e42:	f8ca 101c 	str.w	r1, [sl, #28]
	parent->next = child;
    6e46:	6013      	str	r3, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    6e48:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
			tx->pending_no_cb = 0U;
    6e4c:	60d3      	str	r3, [r2, #12]
    6e4e:	b989      	cbnz	r1, 6e74 <hci_num_completed_packets+0x13c>
	list->head = node;
    6e50:	e9ca 2208 	strd	r2, r2, [sl, #32]
	__asm__ volatile(
    6e54:	f380 8811 	msr	BASEPRI, r0
    6e58:	f3bf 8f6f 	isb	sy
    6e5c:	2101      	movs	r1, #1
    6e5e:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    6e62:	f018 ff12 	bl	1fc8a <atomic_or>
    6e66:	07c3      	lsls	r3, r0, #31
    6e68:	d4b8      	bmi.n	6ddc <hci_num_completed_packets+0xa4>
		k_queue_append(&work_q->queue, work);
    6e6a:	4659      	mov	r1, fp
    6e6c:	4807      	ldr	r0, [pc, #28]	; (6e8c <hci_num_completed_packets+0x154>)
    6e6e:	f01e f8fc 	bl	2506a <k_queue_append>
    6e72:	e7b3      	b.n	6ddc <hci_num_completed_packets+0xa4>
	parent->next = child;
    6e74:	600a      	str	r2, [r1, #0]
	list->tail = node;
    6e76:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
    6e7a:	e7eb      	b.n	6e54 <hci_num_completed_packets+0x11c>
    6e7c:	00025a6c 	.word	0x00025a6c
    6e80:	00025b34 	.word	0x00025b34
    6e84:	00027f8b 	.word	0x00027f8b
    6e88:	00027fa7 	.word	0x00027fa7
    6e8c:	20005fa0 	.word	0x20005fa0

00006e90 <hci_cmd_status>:
{
    6e90:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6e92:	2104      	movs	r1, #4
{
    6e94:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6e96:	3008      	adds	r0, #8
    6e98:	f01b fbfd 	bl	22696 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    6e9c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    6e9e:	7801      	ldrb	r1, [r0, #0]
    6ea0:	8840      	ldrh	r0, [r0, #2]
    6ea2:	4622      	mov	r2, r4
    6ea4:	f7ff fdea 	bl	6a7c <hci_cmd_done>
	if (ncmd) {
    6ea8:	b125      	cbz	r5, 6eb4 <hci_cmd_status+0x24>
    6eaa:	4803      	ldr	r0, [pc, #12]	; (6eb8 <hci_cmd_status+0x28>)
}
    6eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6eb0:	f015 bd02 	b.w	1c8b8 <z_impl_k_sem_give>
    6eb4:	bd38      	pop	{r3, r4, r5, pc}
    6eb6:	bf00      	nop
    6eb8:	2000ddc0 	.word	0x2000ddc0

00006ebc <hci_cmd_complete>:
{
    6ebc:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6ebe:	2103      	movs	r1, #3
{
    6ec0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6ec2:	3008      	adds	r0, #8
    6ec4:	f01b fbe7 	bl	22696 <net_buf_simple_pull_mem>
	status = buf->data[0];
    6ec8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    6eca:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    6ecc:	7819      	ldrb	r1, [r3, #0]
    6ece:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    6ed2:	4622      	mov	r2, r4
    6ed4:	f7ff fdd2 	bl	6a7c <hci_cmd_done>
	if (ncmd) {
    6ed8:	b125      	cbz	r5, 6ee4 <hci_cmd_complete+0x28>
    6eda:	4803      	ldr	r0, [pc, #12]	; (6ee8 <hci_cmd_complete+0x2c>)
}
    6edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6ee0:	f015 bcea 	b.w	1c8b8 <z_impl_k_sem_give>
    6ee4:	bd38      	pop	{r3, r4, r5, pc}
    6ee6:	bf00      	nop
    6ee8:	2000ddc0 	.word	0x2000ddc0

00006eec <bt_hci_cmd_create>:
{
    6eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ef0:	4681      	mov	r9, r0
    6ef2:	468a      	mov	sl, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6ef4:	4816      	ldr	r0, [pc, #88]	; (6f50 <bt_hci_cmd_create+0x64>)
	cmd(buf)->opcode = opcode;
    6ef6:	4f17      	ldr	r7, [pc, #92]	; (6f54 <bt_hci_cmd_create+0x68>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6efc:	f01b fb66 	bl	225cc <net_buf_alloc_fixed>
    6f00:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    6f02:	f100 0808 	add.w	r8, r0, #8
    6f06:	2100      	movs	r1, #0
	*(u8_t *)net_buf_user_data(buf) = type;
    6f08:	2600      	movs	r6, #0
    6f0a:	4640      	mov	r0, r8
    6f0c:	f01b fb7d 	bl	2260a <net_buf_simple_reserve>
    6f10:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
    6f12:	4620      	mov	r0, r4
    6f14:	f010 fac8 	bl	174a8 <net_buf_id>
    6f18:	250c      	movs	r5, #12
    6f1a:	fb05 7000 	mla	r0, r5, r0, r7
    6f1e:	f8a0 9002 	strh.w	r9, [r0, #2]
	cmd(buf)->sync = NULL;
    6f22:	4620      	mov	r0, r4
    6f24:	f010 fac0 	bl	174a8 <net_buf_id>
    6f28:	fb05 7000 	mla	r0, r5, r0, r7
    6f2c:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
    6f2e:	4620      	mov	r0, r4
    6f30:	f010 faba 	bl	174a8 <net_buf_id>
    6f34:	fb05 7000 	mla	r0, r5, r0, r7
	hdr = net_buf_add(buf, sizeof(*hdr));
    6f38:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    6f3a:	6046      	str	r6, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    6f3c:	4640      	mov	r0, r8
    6f3e:	f01b fb79 	bl	22634 <net_buf_simple_add>
	hdr->param_len = param_len;
    6f42:	f880 a002 	strb.w	sl, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    6f46:	f8a0 9000 	strh.w	r9, [r0]
}
    6f4a:	4620      	mov	r0, r4
    6f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f50:	2000e748 	.word	0x2000e748
    6f54:	20000238 	.word	0x20000238

00006f58 <bt_hci_cmd_send>:
{
    6f58:	b538      	push	{r3, r4, r5, lr}
    6f5a:	4604      	mov	r4, r0
	if (!buf) {
    6f5c:	460d      	mov	r5, r1
    6f5e:	b919      	cbnz	r1, 6f68 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    6f60:	f7ff ffc4 	bl	6eec <bt_hci_cmd_create>
		if (!buf) {
    6f64:	4605      	mov	r5, r0
    6f66:	b310      	cbz	r0, 6fae <bt_hci_cmd_send+0x56>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6f68:	f640 4335 	movw	r3, #3125	; 0xc35
    6f6c:	429c      	cmp	r4, r3
    6f6e:	d118      	bne.n	6fa2 <bt_hci_cmd_send+0x4a>
		return bt_hci_ecc_send(buf);
    6f70:	4628      	mov	r0, r5
    6f72:	f7ff f8a7 	bl	60c4 <bt_hci_ecc_send>
		if (err) {
    6f76:	4604      	mov	r4, r0
    6f78:	b188      	cbz	r0, 6f9e <bt_hci_cmd_send+0x46>
			BT_ERR("Unable to send to driver (err %d)", err);
    6f7a:	2301      	movs	r3, #1
    6f7c:	f04f 0200 	mov.w	r2, #0
    6f80:	f363 0207 	bfi	r2, r3, #0, #8
    6f84:	490b      	ldr	r1, [pc, #44]	; (6fb4 <bt_hci_cmd_send+0x5c>)
    6f86:	4b0c      	ldr	r3, [pc, #48]	; (6fb8 <bt_hci_cmd_send+0x60>)
    6f88:	1a5b      	subs	r3, r3, r1
    6f8a:	08db      	lsrs	r3, r3, #3
    6f8c:	4601      	mov	r1, r0
    6f8e:	f363 128f 	bfi	r2, r3, #6, #10
    6f92:	480a      	ldr	r0, [pc, #40]	; (6fbc <bt_hci_cmd_send+0x64>)
    6f94:	f017 fd6b 	bl	1ea6e <log_1>
			net_buf_unref(buf);
    6f98:	4628      	mov	r0, r5
    6f9a:	f010 fb1b 	bl	175d4 <net_buf_unref>
}
    6f9e:	4620      	mov	r0, r4
    6fa0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6fa2:	4629      	mov	r1, r5
    6fa4:	4806      	ldr	r0, [pc, #24]	; (6fc0 <bt_hci_cmd_send+0x68>)
    6fa6:	f01b fb34 	bl	22612 <net_buf_put>
	return 0;
    6faa:	2400      	movs	r4, #0
    6fac:	e7f7      	b.n	6f9e <bt_hci_cmd_send+0x46>
			return -ENOBUFS;
    6fae:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6fb2:	e7f4      	b.n	6f9e <bt_hci_cmd_send+0x46>
    6fb4:	00025a6c 	.word	0x00025a6c
    6fb8:	00025b34 	.word	0x00025b34
    6fbc:	0002802c 	.word	0x0002802c
    6fc0:	2000dddc 	.word	0x2000dddc

00006fc4 <le_ltk_request>:
{
    6fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    6fc6:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6fc8:	8826      	ldrh	r6, [r4, #0]
    6fca:	b2b7      	uxth	r7, r6
{
    6fcc:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    6fce:	4638      	mov	r0, r7
    6fd0:	f002 fa14 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    6fd4:	4605      	mov	r5, r0
    6fd6:	b980      	cbnz	r0, 6ffa <le_ltk_request+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6fd8:	2301      	movs	r3, #1
    6fda:	f04f 0200 	mov.w	r2, #0
    6fde:	f363 0207 	bfi	r2, r3, #0, #8
    6fe2:	4928      	ldr	r1, [pc, #160]	; (7084 <le_ltk_request+0xc0>)
    6fe4:	4b28      	ldr	r3, [pc, #160]	; (7088 <le_ltk_request+0xc4>)
    6fe6:	4829      	ldr	r0, [pc, #164]	; (708c <le_ltk_request+0xc8>)
    6fe8:	1a5b      	subs	r3, r3, r1
    6fea:	08db      	lsrs	r3, r3, #3
    6fec:	f363 128f 	bfi	r2, r3, #6, #10
    6ff0:	4639      	mov	r1, r7
    6ff2:	f017 fd3c 	bl	1ea6e <log_1>
}
    6ff6:	b007      	add	sp, #28
    6ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    6ffa:	af02      	add	r7, sp, #8
    6ffc:	f8d4 2002 	ldr.w	r2, [r4, #2]
    7000:	f8d4 3006 	ldr.w	r3, [r4, #6]
    7004:	9701      	str	r7, [sp, #4]
    7006:	8961      	ldrh	r1, [r4, #10]
    7008:	9100      	str	r1, [sp, #0]
    700a:	f01a fb1c 	bl	21646 <bt_smp_request_ltk>
    700e:	b340      	cbz	r0, 7062 <le_ltk_request+0x9e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    7010:	2112      	movs	r1, #18
    7012:	f242 001a 	movw	r0, #8218	; 0x201a
    7016:	f7ff ff69 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    701a:	4604      	mov	r4, r0
    701c:	b988      	cbnz	r0, 7042 <le_ltk_request+0x7e>
		BT_ERR("Out of command buffers");
    701e:	2301      	movs	r3, #1
    7020:	f04f 0100 	mov.w	r1, #0
    7024:	f363 0107 	bfi	r1, r3, #0, #8
    7028:	4a16      	ldr	r2, [pc, #88]	; (7084 <le_ltk_request+0xc0>)
    702a:	4b17      	ldr	r3, [pc, #92]	; (7088 <le_ltk_request+0xc4>)
    702c:	4818      	ldr	r0, [pc, #96]	; (7090 <le_ltk_request+0xcc>)
    702e:	1a9b      	subs	r3, r3, r2
    7030:	08db      	lsrs	r3, r3, #3
    7032:	f363 118f 	bfi	r1, r3, #6, #10
    7036:	f017 fd0d 	bl	1ea54 <log_0>
	bt_conn_unref(conn);
    703a:	4628      	mov	r0, r5
    703c:	f018 ffb3 	bl	1ffa6 <bt_conn_unref>
    7040:	e7d9      	b.n	6ff6 <le_ltk_request+0x32>
	cp = net_buf_add(buf, sizeof(*cp));
    7042:	2112      	movs	r1, #18
    7044:	3008      	adds	r0, #8
    7046:	f01b faf5 	bl	22634 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    704a:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    704c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    7050:	2210      	movs	r2, #16
    7052:	f018 fad1 	bl	1f5f8 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    7056:	4621      	mov	r1, r4
    7058:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    705c:	f7ff ff7c 	bl	6f58 <bt_hci_cmd_send>
    7060:	e7eb      	b.n	703a <le_ltk_request+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    7062:	2102      	movs	r1, #2
    7064:	f242 001b 	movw	r0, #8219	; 0x201b
    7068:	f7ff ff40 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    706c:	4604      	mov	r4, r0
    706e:	2800      	cmp	r0, #0
    7070:	d0d5      	beq.n	701e <le_ltk_request+0x5a>
	cp = net_buf_add(buf, sizeof(*cp));
    7072:	2102      	movs	r1, #2
    7074:	3008      	adds	r0, #8
    7076:	f01b fadd 	bl	22634 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    707a:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    707c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    707e:	f242 001b 	movw	r0, #8219	; 0x201b
    7082:	e7eb      	b.n	705c <le_ltk_request+0x98>
    7084:	00025a6c 	.word	0x00025a6c
    7088:	00025b34 	.word	0x00025b34
    708c:	000280ad 	.word	0x000280ad
    7090:	000280d1 	.word	0x000280d1

00007094 <le_conn_param_neg_reply>:
{
    7094:	b570      	push	{r4, r5, r6, lr}
    7096:	4606      	mov	r6, r0
    7098:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    709a:	f242 0021 	movw	r0, #8225	; 0x2021
    709e:	2103      	movs	r1, #3
    70a0:	f7ff ff24 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    70a4:	4604      	mov	r4, r0
    70a6:	b978      	cbnz	r0, 70c8 <le_conn_param_neg_reply+0x34>
		BT_ERR("Unable to allocate buffer");
    70a8:	2301      	movs	r3, #1
    70aa:	f04f 0100 	mov.w	r1, #0
    70ae:	f363 0107 	bfi	r1, r3, #0, #8
    70b2:	4a0c      	ldr	r2, [pc, #48]	; (70e4 <le_conn_param_neg_reply+0x50>)
    70b4:	4b0c      	ldr	r3, [pc, #48]	; (70e8 <le_conn_param_neg_reply+0x54>)
    70b6:	480d      	ldr	r0, [pc, #52]	; (70ec <le_conn_param_neg_reply+0x58>)
    70b8:	1a9b      	subs	r3, r3, r2
    70ba:	08db      	lsrs	r3, r3, #3
    70bc:	f363 118f 	bfi	r1, r3, #6, #10
}
    70c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    70c4:	f017 bcc6 	b.w	1ea54 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    70c8:	2103      	movs	r1, #3
    70ca:	3008      	adds	r0, #8
    70cc:	f01b fab2 	bl	22634 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    70d0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    70d2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    70d4:	4621      	mov	r1, r4
    70d6:	f242 0021 	movw	r0, #8225	; 0x2021
}
    70da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    70de:	f7ff bf3b 	b.w	6f58 <bt_hci_cmd_send>
    70e2:	bf00      	nop
    70e4:	00025a6c 	.word	0x00025a6c
    70e8:	00025b34 	.word	0x00025b34
    70ec:	00028093 	.word	0x00028093

000070f0 <le_conn_param_req>:
{
    70f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    70f2:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    70f4:	78d9      	ldrb	r1, [r3, #3]
    70f6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    70f8:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    70fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    70fe:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    7102:	7959      	ldrb	r1, [r3, #5]
    7104:	791a      	ldrb	r2, [r3, #4]
    7106:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    710a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    710e:	799a      	ldrb	r2, [r3, #6]
    7110:	79d9      	ldrb	r1, [r3, #7]
    7112:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7116:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    711a:	7a1a      	ldrb	r2, [r3, #8]
    711c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    711e:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7120:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    7124:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7126:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    712a:	f002 f967 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    712e:	4607      	mov	r7, r0
    7130:	b9a0      	cbnz	r0, 715c <le_conn_param_req+0x6c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7132:	2301      	movs	r3, #1
    7134:	f04f 0200 	mov.w	r2, #0
    7138:	f363 0207 	bfi	r2, r3, #0, #8
    713c:	491f      	ldr	r1, [pc, #124]	; (71bc <le_conn_param_req+0xcc>)
    713e:	4b20      	ldr	r3, [pc, #128]	; (71c0 <le_conn_param_req+0xd0>)
    7140:	4820      	ldr	r0, [pc, #128]	; (71c4 <le_conn_param_req+0xd4>)
    7142:	1a5b      	subs	r3, r3, r1
    7144:	08db      	lsrs	r3, r3, #3
    7146:	4621      	mov	r1, r4
    7148:	f363 128f 	bfi	r2, r3, #6, #10
    714c:	f017 fc8f 	bl	1ea6e <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    7150:	2102      	movs	r1, #2
    7152:	4620      	mov	r0, r4
    7154:	f7ff ff9e 	bl	7094 <le_conn_param_neg_reply>
}
    7158:	b003      	add	sp, #12
    715a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    715c:	4669      	mov	r1, sp
    715e:	f001 fe81 	bl	8e64 <le_param_req>
    7162:	b938      	cbnz	r0, 7174 <le_conn_param_req+0x84>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    7164:	211e      	movs	r1, #30
    7166:	4620      	mov	r0, r4
    7168:	f7ff ff94 	bl	7094 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    716c:	4638      	mov	r0, r7
    716e:	f018 ff1a 	bl	1ffa6 <bt_conn_unref>
    7172:	e7f1      	b.n	7158 <le_conn_param_req+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    7174:	210e      	movs	r1, #14
    7176:	f242 0020 	movw	r0, #8224	; 0x2020
    717a:	f7ff feb7 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    717e:	4605      	mov	r5, r0
    7180:	2800      	cmp	r0, #0
    7182:	d0f3      	beq.n	716c <le_conn_param_req+0x7c>
	cp = net_buf_add(buf, sizeof(*cp));
    7184:	210e      	movs	r1, #14
    7186:	3008      	adds	r0, #8
    7188:	f01b fa54 	bl	22634 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    718c:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    718e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    7190:	2100      	movs	r1, #0
    7192:	f018 fa5b 	bl	1f64c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    7196:	f8bd 3000 	ldrh.w	r3, [sp]
    719a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    719c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    71a0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    71a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    71a6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    71a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    71ac:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    71ae:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    71b0:	4629      	mov	r1, r5
    71b2:	f242 0020 	movw	r0, #8224	; 0x2020
    71b6:	f7ff fecf 	bl	6f58 <bt_hci_cmd_send>
    71ba:	e7d7      	b.n	716c <le_conn_param_req+0x7c>
    71bc:	00025a6c 	.word	0x00025a6c
    71c0:	00025b34 	.word	0x00025b34
    71c4:	000280ad 	.word	0x000280ad

000071c8 <bt_hci_cmd_send_sync>:
{
    71c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ca:	4615      	mov	r5, r2
    71cc:	b087      	sub	sp, #28
	if (!buf) {
    71ce:	460c      	mov	r4, r1
    71d0:	b919      	cbnz	r1, 71da <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    71d2:	f7ff fe8b 	bl	6eec <bt_hci_cmd_create>
		if (!buf) {
    71d6:	4604      	mov	r4, r0
    71d8:	b3a8      	cbz	r0, 7246 <bt_hci_cmd_send_sync+0x7e>
	z_impl_k_sem_init(sem, initial_count, limit);
    71da:	2201      	movs	r2, #1
    71dc:	2100      	movs	r1, #0
    71de:	4668      	mov	r0, sp
    71e0:	f01e f8c5 	bl	2536e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    71e4:	4620      	mov	r0, r4
    71e6:	f010 f95f 	bl	174a8 <net_buf_id>
    71ea:	4f18      	ldr	r7, [pc, #96]	; (724c <bt_hci_cmd_send_sync+0x84>)
    71ec:	260c      	movs	r6, #12
    71ee:	fb06 7000 	mla	r0, r6, r0, r7
    71f2:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    71f6:	4620      	mov	r0, r4
    71f8:	f01b fa18 	bl	2262c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    71fc:	4621      	mov	r1, r4
    71fe:	4814      	ldr	r0, [pc, #80]	; (7250 <bt_hci_cmd_send_sync+0x88>)
    7200:	f01b fa07 	bl	22612 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    7204:	f242 7110 	movw	r1, #10000	; 0x2710
    7208:	4668      	mov	r0, sp
    720a:	f015 fb81 	bl	1c910 <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    720e:	4620      	mov	r0, r4
    7210:	f010 f94a 	bl	174a8 <net_buf_id>
    7214:	4370      	muls	r0, r6
    7216:	5c3b      	ldrb	r3, [r7, r0]
    7218:	b173      	cbz	r3, 7238 <bt_hci_cmd_send_sync+0x70>
		switch (cmd(buf)->status) {
    721a:	4620      	mov	r0, r4
    721c:	f010 f944 	bl	174a8 <net_buf_id>
    7220:	4370      	muls	r0, r6
    7222:	5c3b      	ldrb	r3, [r7, r0]
    7224:	2b09      	cmp	r3, #9
			err = -EIO;
    7226:	bf0c      	ite	eq
    7228:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    722c:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    7230:	4620      	mov	r0, r4
    7232:	f010 f9cf 	bl	175d4 <net_buf_unref>
    7236:	e003      	b.n	7240 <bt_hci_cmd_send_sync+0x78>
		if (rsp) {
    7238:	2d00      	cmp	r5, #0
    723a:	d0f9      	beq.n	7230 <bt_hci_cmd_send_sync+0x68>
			*rsp = buf;
    723c:	602c      	str	r4, [r5, #0]
		err = 0;
    723e:	461d      	mov	r5, r3
}
    7240:	4628      	mov	r0, r5
    7242:	b007      	add	sp, #28
    7244:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOBUFS;
    7246:	f06f 0536 	mvn.w	r5, #54	; 0x36
    724a:	e7f9      	b.n	7240 <bt_hci_cmd_send_sync+0x78>
    724c:	20000238 	.word	0x20000238
    7250:	2000dddc 	.word	0x2000dddc

00007254 <set_advertise_enable>:
{
    7254:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    7256:	2101      	movs	r1, #1
{
    7258:	b085      	sub	sp, #20
    725a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    725c:	f242 000a 	movw	r0, #8202	; 0x200a
    7260:	f7ff fe44 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    7264:	4604      	mov	r4, r0
    7266:	b1e8      	cbz	r0, 72a4 <set_advertise_enable+0x50>
	if (enable) {
    7268:	3008      	adds	r0, #8
    726a:	b1cd      	cbz	r5, 72a0 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    726c:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    726e:	f01b f9f0 	bl	22652 <net_buf_simple_add_u8>
	state->target = target;
    7272:	4b0e      	ldr	r3, [pc, #56]	; (72ac <set_advertise_enable+0x58>)
    7274:	9301      	str	r3, [sp, #4]
	cmd(buf)->state = &state;
    7276:	4620      	mov	r0, r4
	state->bit = bit;
    7278:	2305      	movs	r3, #5
    727a:	9302      	str	r3, [sp, #8]
	state->val = val;
    727c:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    7280:	f010 f912 	bl	174a8 <net_buf_id>
    7284:	4a0a      	ldr	r2, [pc, #40]	; (72b0 <set_advertise_enable+0x5c>)
    7286:	230c      	movs	r3, #12
    7288:	fb03 2000 	mla	r0, r3, r0, r2
    728c:	ab01      	add	r3, sp, #4
    728e:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    7290:	2200      	movs	r2, #0
    7292:	4621      	mov	r1, r4
    7294:	f242 000a 	movw	r0, #8202	; 0x200a
    7298:	f7ff ff96 	bl	71c8 <bt_hci_cmd_send_sync>
}
    729c:	b005      	add	sp, #20
    729e:	bd30      	pop	{r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    72a0:	4629      	mov	r1, r5
    72a2:	e7e4      	b.n	726e <set_advertise_enable+0x1a>
		return -ENOBUFS;
    72a4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    72a8:	e7f8      	b.n	729c <set_advertise_enable+0x48>
    72aa:	bf00      	nop
    72ac:	2000dd88 	.word	0x2000dd88
    72b0:	20000238 	.word	0x20000238

000072b4 <set_random_address>:
{
    72b4:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    72b6:	4d14      	ldr	r5, [pc, #80]	; (7308 <set_random_address+0x54>)
    72b8:	2206      	movs	r2, #6
    72ba:	f105 010a 	add.w	r1, r5, #10
    72be:	4606      	mov	r6, r0
    72c0:	f018 f98a 	bl	1f5d8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    72c4:	4604      	mov	r4, r0
    72c6:	b1d0      	cbz	r0, 72fe <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    72c8:	2106      	movs	r1, #6
    72ca:	f242 0005 	movw	r0, #8197	; 0x2005
    72ce:	f7ff fe0d 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    72d2:	4604      	mov	r4, r0
    72d4:	b1a8      	cbz	r0, 7302 <set_random_address+0x4e>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    72d6:	2206      	movs	r2, #6
    72d8:	4631      	mov	r1, r6
    72da:	3008      	adds	r0, #8
    72dc:	f01b f9b0 	bl	22640 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    72e0:	4621      	mov	r1, r4
    72e2:	2200      	movs	r2, #0
    72e4:	f242 0005 	movw	r0, #8197	; 0x2005
    72e8:	f7ff ff6e 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    72ec:	4604      	mov	r4, r0
    72ee:	b930      	cbnz	r0, 72fe <set_random_address+0x4a>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    72f0:	4631      	mov	r1, r6
    72f2:	f105 000a 	add.w	r0, r5, #10
    72f6:	f018 fcc2 	bl	1fc7e <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    72fa:	2301      	movs	r3, #1
    72fc:	726b      	strb	r3, [r5, #9]
}
    72fe:	4620      	mov	r0, r4
    7300:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    7302:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7306:	e7fa      	b.n	72fe <set_random_address+0x4a>
    7308:	2000dd18 	.word	0x2000dd18

0000730c <le_set_private_addr>:
{
    730c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    730e:	4d12      	ldr	r5, [pc, #72]	; (7358 <le_set_private_addr+0x4c>)
{
    7310:	4603      	mov	r3, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    7312:	210f      	movs	r1, #15
    7314:	f105 0070 	add.w	r0, r5, #112	; 0x70
    7318:	f018 fd07 	bl	1fd2a <atomic_test_bit>
    731c:	b9d0      	cbnz	r0, 7354 <le_set_private_addr+0x48>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    731e:	eb05 1003 	add.w	r0, r5, r3, lsl #4
    7322:	4669      	mov	r1, sp
    7324:	30d8      	adds	r0, #216	; 0xd8
    7326:	f018 fbda 	bl	1fade <bt_rpa_create>
	if (!err) {
    732a:	4604      	mov	r4, r0
    732c:	b950      	cbnz	r0, 7344 <le_set_private_addr+0x38>
		err = set_random_address(&rpa);
    732e:	4668      	mov	r0, sp
    7330:	f7ff ffc0 	bl	72b4 <set_random_address>
		if (!err) {
    7334:	4604      	mov	r4, r0
    7336:	b928      	cbnz	r0, 7344 <le_set_private_addr+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    733c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    7340:	f018 fca3 	bl	1fc8a <atomic_or>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7344:	4a05      	ldr	r2, [pc, #20]	; (735c <le_set_private_addr+0x50>)
    7346:	4906      	ldr	r1, [pc, #24]	; (7360 <le_set_private_addr+0x54>)
    7348:	4806      	ldr	r0, [pc, #24]	; (7364 <le_set_private_addr+0x58>)
    734a:	f015 fc27 	bl	1cb9c <k_delayed_work_submit_to_queue>
}
    734e:	4620      	mov	r0, r4
    7350:	b003      	add	sp, #12
    7352:	bd30      	pop	{r4, r5, pc}
		return 0;
    7354:	2400      	movs	r4, #0
    7356:	e7fa      	b.n	734e <le_set_private_addr+0x42>
    7358:	2000dd18 	.word	0x2000dd18
    735c:	000dbba0 	.word	0x000dbba0
    7360:	2000de00 	.word	0x2000de00
    7364:	20005fa0 	.word	0x20005fa0

00007368 <rpa_timeout>:
{
    7368:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    736a:	4c17      	ldr	r4, [pc, #92]	; (73c8 <rpa_timeout+0x60>)
    736c:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
    7370:	f104 0070 	add.w	r0, r4, #112	; 0x70
    7374:	f018 fc74 	bl	1fc60 <atomic_and>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    7378:	2105      	movs	r1, #5
    737a:	f104 0070 	add.w	r0, r4, #112	; 0x70
    737e:	f018 fcd4 	bl	1fd2a <atomic_test_bit>
    7382:	b1d8      	cbz	r0, 73bc <rpa_timeout+0x54>
		set_advertise_enable(false);
    7384:	2000      	movs	r0, #0
    7386:	f7ff ff65 	bl	7254 <set_advertise_enable>
		err_adv = le_set_private_addr(bt_dev.adv_id);
    738a:	7a20      	ldrb	r0, [r4, #8]
    738c:	f7ff ffbe 	bl	730c <le_set_private_addr>
    7390:	4604      	mov	r4, r0
		set_advertise_enable(true);
    7392:	2001      	movs	r0, #1
    7394:	f7ff ff5e 	bl	7254 <set_advertise_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    7398:	210b      	movs	r1, #11
    739a:	480c      	ldr	r0, [pc, #48]	; (73cc <rpa_timeout+0x64>)
    739c:	f018 fcc5 	bl	1fd2a <atomic_test_bit>
    73a0:	b170      	cbz	r0, 73c0 <rpa_timeout+0x58>
		err_scan = le_set_private_addr(BT_ID_DEFAULT);
    73a2:	2000      	movs	r0, #0
    73a4:	f7ff ffb2 	bl	730c <le_set_private_addr>
	if (err_adv || err_scan) {
    73a8:	ea54 0300 	orrs.w	r3, r4, r0
    73ac:	d00a      	beq.n	73c4 <rpa_timeout+0x5c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    73ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    73b2:	4806      	ldr	r0, [pc, #24]	; (73cc <rpa_timeout+0x64>)
}
    73b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73b8:	f018 bc67 	b.w	1fc8a <atomic_or>
	int err_adv = 0, err_scan = 0;
    73bc:	4604      	mov	r4, r0
    73be:	e7eb      	b.n	7398 <rpa_timeout+0x30>
	if (err_adv || err_scan) {
    73c0:	2c00      	cmp	r4, #0
    73c2:	d1f4      	bne.n	73ae <rpa_timeout+0x46>
}
    73c4:	bd10      	pop	{r4, pc}
    73c6:	bf00      	nop
    73c8:	2000dd18 	.word	0x2000dd18
    73cc:	2000dd88 	.word	0x2000dd88

000073d0 <hci_id_add>:
{
    73d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73d2:	4607      	mov	r7, r0
    73d4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    73d6:	f242 0027 	movw	r0, #8231	; 0x2027
    73da:	2127      	movs	r1, #39	; 0x27
    73dc:	f7ff fd86 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    73e0:	4604      	mov	r4, r0
    73e2:	b1d0      	cbz	r0, 741a <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    73e4:	2127      	movs	r1, #39	; 0x27
    73e6:	3008      	adds	r0, #8
    73e8:	f01b f924 	bl	22634 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    73ec:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    73ee:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    73f0:	f018 fc48 	bl	1fc84 <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    73f4:	4631      	mov	r1, r6
    73f6:	2210      	movs	r2, #16
    73f8:	1de8      	adds	r0, r5, #7
    73fa:	f018 f8fd 	bl	1f5f8 <memcpy>
	memcpy(cp->local_irk, bt_dev.irk, 16);
    73fe:	2210      	movs	r2, #16
    7400:	4907      	ldr	r1, [pc, #28]	; (7420 <hci_id_add+0x50>)
    7402:	f105 0017 	add.w	r0, r5, #23
    7406:	f018 f8f7 	bl	1f5f8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    740a:	4621      	mov	r1, r4
    740c:	2200      	movs	r2, #0
    740e:	f242 0027 	movw	r0, #8231	; 0x2027
}
    7412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    7416:	f7ff bed7 	b.w	71c8 <bt_hci_cmd_send_sync>
}
    741a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7420:	2000ddf0 	.word	0x2000ddf0

00007424 <set_ad>:
{
    7424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7428:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    742a:	2120      	movs	r1, #32
{
    742c:	4682      	mov	sl, r0
    742e:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7430:	f7ff fd5c 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    7434:	4607      	mov	r7, r0
    7436:	2800      	cmp	r0, #0
    7438:	d05a      	beq.n	74f0 <set_ad+0xcc>
	set_data = net_buf_add(buf, sizeof(*set_data));
    743a:	2120      	movs	r1, #32
    743c:	3008      	adds	r0, #8
    743e:	f01b f8f9 	bl	22634 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    7442:	2220      	movs	r2, #32
    7444:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    7446:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    7448:	f018 f900 	bl	1f64c <memset>
	for (c = 0; c < ad_len; c++) {
    744c:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    7450:	454c      	cmp	r4, r9
    7452:	d106      	bne.n	7462 <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7454:	4639      	mov	r1, r7
    7456:	4650      	mov	r0, sl
    7458:	2200      	movs	r2, #0
}
    745a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    745e:	f7ff beb3 	b.w	71c8 <bt_hci_cmd_send_sync>
		for (i = 0; i < ad[c].len; i++) {
    7462:	6826      	ldr	r6, [r4, #0]
    7464:	f04f 0b00 	mov.w	fp, #0
    7468:	6863      	ldr	r3, [r4, #4]
    746a:	459b      	cmp	fp, r3
    746c:	d301      	bcc.n	7472 <set_ad+0x4e>
    746e:	3408      	adds	r4, #8
    7470:	e7ee      	b.n	7450 <set_ad+0x2c>
			if (set_data->len + len + 2 > 31) {
    7472:	782b      	ldrb	r3, [r5, #0]
			int len = data[i].data_len;
    7474:	7872      	ldrb	r2, [r6, #1]
			u8_t type = data[i].type;
    7476:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
    7478:	1c98      	adds	r0, r3, #2
    747a:	eb00 0c02 	add.w	ip, r0, r2
    747e:	f1bc 0f1f 	cmp.w	ip, #31
    7482:	dd1a      	ble.n	74ba <set_ad+0x96>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7484:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    7486:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    748a:	d100      	bne.n	748e <set_ad+0x6a>
    748c:	b9a2      	cbnz	r2, 74b8 <set_ad+0x94>
					net_buf_unref(buf);
    748e:	4638      	mov	r0, r7
    7490:	f010 f8a0 	bl	175d4 <net_buf_unref>
					BT_ERR("Too big advertising data");
    7494:	2301      	movs	r3, #1
    7496:	f04f 0100 	mov.w	r1, #0
    749a:	f363 0107 	bfi	r1, r3, #0, #8
    749e:	4a16      	ldr	r2, [pc, #88]	; (74f8 <set_ad+0xd4>)
    74a0:	4b16      	ldr	r3, [pc, #88]	; (74fc <set_ad+0xd8>)
    74a2:	4817      	ldr	r0, [pc, #92]	; (7500 <set_ad+0xdc>)
    74a4:	1a9b      	subs	r3, r3, r2
    74a6:	08db      	lsrs	r3, r3, #3
    74a8:	f363 118f 	bfi	r1, r3, #6, #10
    74ac:	f017 fad2 	bl	1ea54 <log_0>
					return -EINVAL;
    74b0:	f06f 0015 	mvn.w	r0, #21
}
    74b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    74b8:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    74ba:	eb05 0c03 	add.w	ip, r5, r3
    74be:	3301      	adds	r3, #1
    74c0:	fa4f f882 	sxtb.w	r8, r2
			set_data->data[set_data->len++] = type;
    74c4:	fa55 f383 	uxtab	r3, r5, r3
			set_data->data[set_data->len++] = len + 1;
    74c8:	f108 0e01 	add.w	lr, r8, #1
			set_data->data[set_data->len++] = type;
    74cc:	b2c0      	uxtb	r0, r0
			set_data->data[set_data->len++] = len + 1;
    74ce:	f88c e001 	strb.w	lr, [ip, #1]
			set_data->data[set_data->len++] = type;
    74d2:	7028      	strb	r0, [r5, #0]
    74d4:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    74d6:	3001      	adds	r0, #1
    74d8:	6871      	ldr	r1, [r6, #4]
    74da:	4428      	add	r0, r5
    74dc:	f018 f88c 	bl	1f5f8 <memcpy>
			set_data->len += len;
    74e0:	782b      	ldrb	r3, [r5, #0]
    74e2:	4498      	add	r8, r3
    74e4:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
    74e8:	f10b 0b01 	add.w	fp, fp, #1
    74ec:	3608      	adds	r6, #8
    74ee:	e7bb      	b.n	7468 <set_ad+0x44>
		return -ENOBUFS;
    74f0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    74f4:	e7de      	b.n	74b4 <set_ad+0x90>
    74f6:	bf00      	nop
    74f8:	00025a6c 	.word	0x00025a6c
    74fc:	00025b34 	.word	0x00025b34
    7500:	000280e8 	.word	0x000280e8

00007504 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    7504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7508:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	struct bt_data data;
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    750a:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    750e:	4615      	mov	r5, r2
    7510:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7512:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    7514:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7516:	a902      	add	r1, sp, #8
    7518:	f242 0008 	movw	r0, #8200	; 0x2008
{
    751c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    7520:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    7524:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7528:	f7ff ff7c 	bl	7424 <set_ad>
	if (err) {
    752c:	4604      	mov	r4, r0
    752e:	bb10      	cbnz	r0, 7576 <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    7530:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    7534:	f1b8 0f00 	cmp.w	r8, #0
    7538:	d011      	beq.n	755e <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    753a:	b115      	cbz	r5, 7542 <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    753c:	4602      	mov	r2, r0
    753e:	42b2      	cmp	r2, r6
    7540:	d11d      	bne.n	757e <le_adv_update+0x7a>
				return -EINVAL;
			}
		}

		name = bt_get_name();
		data = (struct bt_data)BT_DATA(
    7542:	4d14      	ldr	r5, [pc, #80]	; (7594 <le_adv_update+0x90>)
    7544:	4628      	mov	r0, r5
    7546:	f018 f825 	bl	1f594 <strlen>
    754a:	2309      	movs	r3, #9
    754c:	f88d 3000 	strb.w	r3, [sp]
			BT_DATA_NAME_COMPLETE,
			name, strlen(name));

		d[1].data = &data;
		d[1].len = 1;
    7550:	2301      	movs	r3, #1
		data = (struct bt_data)BT_DATA(
    7552:	f88d 0001 	strb.w	r0, [sp, #1]
    7556:	9501      	str	r5, [sp, #4]
		d[1].data = &data;
    7558:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    755c:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    755e:	9b02      	ldr	r3, [sp, #8]
    7560:	b913      	cbnz	r3, 7568 <le_adv_update+0x64>
    7562:	9b04      	ldr	r3, [sp, #16]
    7564:	b903      	cbnz	r3, 7568 <le_adv_update+0x64>
    7566:	b137      	cbz	r7, 7576 <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    7568:	2202      	movs	r2, #2
    756a:	a902      	add	r1, sp, #8
    756c:	f242 0009 	movw	r0, #8201	; 0x2009
    7570:	f7ff ff58 	bl	7424 <set_ad>
    7574:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    7576:	4620      	mov	r0, r4
    7578:	b006      	add	sp, #24
    757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    757e:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    7582:	3908      	subs	r1, #8
    7584:	2901      	cmp	r1, #1
    7586:	d901      	bls.n	758c <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    7588:	3201      	adds	r2, #1
    758a:	e7d8      	b.n	753e <le_adv_update+0x3a>
				return -EINVAL;
    758c:	f06f 0415 	mvn.w	r4, #21
    7590:	e7f1      	b.n	7576 <le_adv_update+0x72>
    7592:	bf00      	nop
    7594:	2000de20 	.word	0x2000de20

00007598 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
    7598:	7b43      	ldrb	r3, [r0, #13]
    759a:	2b06      	cmp	r3, #6
{
    759c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    75a0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    75a2:	d11e      	bne.n	75e2 <conn_auto_initiate+0x4a>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    75a4:	1d05      	adds	r5, r0, #4
    75a6:	210d      	movs	r1, #13
    75a8:	4628      	mov	r0, r5
    75aa:	f018 fbbe 	bl	1fd2a <atomic_test_bit>
    75ae:	b9d8      	cbnz	r0, 75e8 <conn_auto_initiate+0x50>
    75b0:	78e3      	ldrb	r3, [r4, #3]
    75b2:	b123      	cbz	r3, 75be <conn_auto_initiate+0x26>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    75b4:	4b52      	ldr	r3, [pc, #328]	; (7700 <conn_auto_initiate+0x168>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    75b6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    75ba:	0719      	lsls	r1, r3, #28
    75bc:	d514      	bpl.n	75e8 <conn_auto_initiate+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    75be:	2102      	movs	r1, #2
    75c0:	f242 0016 	movw	r0, #8214	; 0x2016
    75c4:	f7ff fc92 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    75c8:	4606      	mov	r6, r0
    75ca:	b168      	cbz	r0, 75e8 <conn_auto_initiate+0x50>
	cp = net_buf_add(buf, sizeof(*cp));
    75cc:	2102      	movs	r1, #2
    75ce:	3008      	adds	r0, #8
    75d0:	f01b f830 	bl	22634 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    75d4:	8823      	ldrh	r3, [r4, #0]
    75d6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    75d8:	4631      	mov	r1, r6
    75da:	f242 0016 	movw	r0, #8214	; 0x2016
    75de:	f7ff fcbb 	bl	6f58 <bt_hci_cmd_send>
}
    75e2:	b002      	add	sp, #8
    75e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    75e8:	210c      	movs	r1, #12
    75ea:	4628      	mov	r0, r5
    75ec:	f018 fb9d 	bl	1fd2a <atomic_test_bit>
    75f0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 7700 <conn_auto_initiate+0x168>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    75f4:	4606      	mov	r6, r0
    75f6:	bb00      	cbnz	r0, 763a <conn_auto_initiate+0xa2>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    75f8:	f898 3079 	ldrb.w	r3, [r8, #121]	; 0x79
    75fc:	07da      	lsls	r2, r3, #31
    75fe:	d51c      	bpl.n	763a <conn_auto_initiate+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    7600:	2107      	movs	r1, #7
    7602:	f242 0032 	movw	r0, #8242	; 0x2032
    7606:	f7ff fc71 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    760a:	4607      	mov	r7, r0
    760c:	b1a8      	cbz	r0, 763a <conn_auto_initiate+0xa2>
	cp = net_buf_add(buf, sizeof(*cp));
    760e:	2107      	movs	r1, #7
    7610:	3008      	adds	r0, #8
    7612:	f01b f80f 	bl	22634 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7616:	8823      	ldrh	r3, [r4, #0]
    7618:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    761a:	2302      	movs	r3, #2
	cp->all_phys = 0U;
    761c:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    761e:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    7620:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    7622:	7146      	strb	r6, [r0, #5]
    7624:	7186      	strb	r6, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    7626:	4639      	mov	r1, r7
    7628:	f242 0032 	movw	r0, #8242	; 0x2032
    762c:	f7ff fc94 	bl	6f58 <bt_hci_cmd_send>
    7630:	2180      	movs	r1, #128	; 0x80
    7632:	4628      	mov	r0, r5
    7634:	f018 fb29 	bl	1fc8a <atomic_or>
			return;
    7638:	e7d3      	b.n	75e2 <conn_auto_initiate+0x4a>
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    763a:	f898 3078 	ldrb.w	r3, [r8, #120]	; 0x78
    763e:	069b      	lsls	r3, r3, #26
    7640:	d514      	bpl.n	766c <conn_auto_initiate+0xd4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    7642:	aa01      	add	r2, sp, #4
    7644:	2100      	movs	r1, #0
    7646:	f242 002f 	movw	r0, #8239	; 0x202f
    764a:	f7ff fdbd 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    764e:	b1f0      	cbz	r0, 768e <conn_auto_initiate+0xf6>
		BT_ERR("Failed to read DLE max data len");
    7650:	2301      	movs	r3, #1
    7652:	f04f 0100 	mov.w	r1, #0
    7656:	f363 0107 	bfi	r1, r3, #0, #8
    765a:	4a2a      	ldr	r2, [pc, #168]	; (7704 <conn_auto_initiate+0x16c>)
    765c:	4b2a      	ldr	r3, [pc, #168]	; (7708 <conn_auto_initiate+0x170>)
    765e:	482b      	ldr	r0, [pc, #172]	; (770c <conn_auto_initiate+0x174>)
    7660:	1a9b      	subs	r3, r3, r2
    7662:	08db      	lsrs	r3, r3, #3
    7664:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to send LE Set Data Length Command");
    7668:	f017 f9f4 	bl	1ea54 <log_0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    766c:	78e3      	ldrb	r3, [r4, #3]
    766e:	2b01      	cmp	r3, #1
    7670:	d1b7      	bne.n	75e2 <conn_auto_initiate+0x4a>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    7672:	2108      	movs	r1, #8
    7674:	4628      	mov	r0, r5
    7676:	f018 fb58 	bl	1fd2a <atomic_test_bit>
    767a:	2800      	cmp	r0, #0
    767c:	d1b1      	bne.n	75e2 <conn_auto_initiate+0x4a>
    767e:	f241 3288 	movw	r2, #5000	; 0x1388
    7682:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7686:	4822      	ldr	r0, [pc, #136]	; (7710 <conn_auto_initiate+0x178>)
    7688:	f015 fa88 	bl	1cb9c <k_delayed_work_submit_to_queue>
    768c:	e7a9      	b.n	75e2 <conn_auto_initiate+0x4a>
	rp = (void *)rsp->data;
    768e:	9801      	ldr	r0, [sp, #4]
    7690:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    7692:	f8b3 8001 	ldrh.w	r8, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    7696:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	net_buf_unref(rsp);
    769a:	f00f ff9b 	bl	175d4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    769e:	2106      	movs	r1, #6
    76a0:	f242 0022 	movw	r0, #8226	; 0x2022
    76a4:	f7ff fc22 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    76a8:	4606      	mov	r6, r0
    76aa:	b960      	cbnz	r0, 76c6 <conn_auto_initiate+0x12e>
		BT_ERR("Failed to create LE Set Data Length Command");
    76ac:	2301      	movs	r3, #1
    76ae:	f04f 0100 	mov.w	r1, #0
    76b2:	f363 0107 	bfi	r1, r3, #0, #8
    76b6:	4a13      	ldr	r2, [pc, #76]	; (7704 <conn_auto_initiate+0x16c>)
    76b8:	4b13      	ldr	r3, [pc, #76]	; (7708 <conn_auto_initiate+0x170>)
    76ba:	4816      	ldr	r0, [pc, #88]	; (7714 <conn_auto_initiate+0x17c>)
    76bc:	1a9b      	subs	r3, r3, r2
    76be:	08db      	lsrs	r3, r3, #3
    76c0:	f363 118f 	bfi	r1, r3, #6, #10
    76c4:	e7d0      	b.n	7668 <conn_auto_initiate+0xd0>
	cp = net_buf_add(buf, sizeof(*cp));
    76c6:	2106      	movs	r1, #6
    76c8:	3008      	adds	r0, #8
    76ca:	f01a ffb3 	bl	22634 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    76ce:	8823      	ldrh	r3, [r4, #0]
    76d0:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    76d2:	f8a0 8002 	strh.w	r8, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    76d6:	8087      	strh	r7, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    76d8:	4631      	mov	r1, r6
    76da:	f242 0022 	movw	r0, #8226	; 0x2022
    76de:	f7ff fc3b 	bl	6f58 <bt_hci_cmd_send>
	if (err) {
    76e2:	2800      	cmp	r0, #0
    76e4:	d0c2      	beq.n	766c <conn_auto_initiate+0xd4>
		BT_ERR("Failed to send LE Set Data Length Command");
    76e6:	2301      	movs	r3, #1
    76e8:	f04f 0100 	mov.w	r1, #0
    76ec:	f363 0107 	bfi	r1, r3, #0, #8
    76f0:	4a04      	ldr	r2, [pc, #16]	; (7704 <conn_auto_initiate+0x16c>)
    76f2:	4b05      	ldr	r3, [pc, #20]	; (7708 <conn_auto_initiate+0x170>)
    76f4:	4808      	ldr	r0, [pc, #32]	; (7718 <conn_auto_initiate+0x180>)
    76f6:	1a9b      	subs	r3, r3, r2
    76f8:	08db      	lsrs	r3, r3, #3
    76fa:	f363 118f 	bfi	r1, r3, #6, #10
    76fe:	e7b3      	b.n	7668 <conn_auto_initiate+0xd0>
    7700:	2000dd18 	.word	0x2000dd18
    7704:	00025a6c 	.word	0x00025a6c
    7708:	00025b34 	.word	0x00025b34
    770c:	00027ddd 	.word	0x00027ddd
    7710:	20005fa0 	.word	0x20005fa0
    7714:	00027dfd 	.word	0x00027dfd
    7718:	00027e29 	.word	0x00027e29

0000771c <le_phy_update_complete>:
{
    771c:	b538      	push	{r3, r4, r5, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    771e:	6883      	ldr	r3, [r0, #8]
    7720:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    7724:	4628      	mov	r0, r5
    7726:	f001 fe69 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    772a:	4604      	mov	r4, r0
    772c:	b980      	cbnz	r0, 7750 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    772e:	2301      	movs	r3, #1
    7730:	f04f 0200 	mov.w	r2, #0
    7734:	f363 0207 	bfi	r2, r3, #0, #8
    7738:	4910      	ldr	r1, [pc, #64]	; (777c <le_phy_update_complete+0x60>)
    773a:	4b11      	ldr	r3, [pc, #68]	; (7780 <le_phy_update_complete+0x64>)
    773c:	4811      	ldr	r0, [pc, #68]	; (7784 <le_phy_update_complete+0x68>)
    773e:	1a5b      	subs	r3, r3, r1
    7740:	08db      	lsrs	r3, r3, #3
    7742:	f363 128f 	bfi	r2, r3, #6, #10
    7746:	4629      	mov	r1, r5
}
    7748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    774c:	f017 b98f 	b.w	1ea6e <log_1>
	    !atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    7750:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7752:	f06f 0180 	mvn.w	r1, #128	; 0x80
    7756:	4628      	mov	r0, r5
    7758:	f018 fa82 	bl	1fc60 <atomic_and>
	if (!IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) ||
    775c:	0603      	lsls	r3, r0, #24
    775e:	d507      	bpl.n	7770 <le_phy_update_complete+0x54>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7764:	4628      	mov	r0, r5
    7766:	f018 fa90 	bl	1fc8a <atomic_or>
	conn_auto_initiate(conn);
    776a:	4620      	mov	r0, r4
    776c:	f7ff ff14 	bl	7598 <conn_auto_initiate>
	bt_conn_unref(conn);
    7770:	4620      	mov	r0, r4
}
    7772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7776:	f018 bc16 	b.w	1ffa6 <bt_conn_unref>
    777a:	bf00      	nop
    777c:	00025a6c 	.word	0x00025a6c
    7780:	00025b34 	.word	0x00025b34
    7784:	000280ad 	.word	0x000280ad

00007788 <le_remote_feat_complete>:
{
    7788:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    778a:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    778c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7790:	4630      	mov	r0, r6
    7792:	f001 fe33 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    7796:	4604      	mov	r4, r0
    7798:	b980      	cbnz	r0, 77bc <le_remote_feat_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    779a:	2301      	movs	r3, #1
    779c:	f04f 0200 	mov.w	r2, #0
    77a0:	f363 0207 	bfi	r2, r3, #0, #8
    77a4:	490f      	ldr	r1, [pc, #60]	; (77e4 <le_remote_feat_complete+0x5c>)
    77a6:	4b10      	ldr	r3, [pc, #64]	; (77e8 <le_remote_feat_complete+0x60>)
    77a8:	4810      	ldr	r0, [pc, #64]	; (77ec <le_remote_feat_complete+0x64>)
    77aa:	1a5b      	subs	r3, r3, r1
    77ac:	08db      	lsrs	r3, r3, #3
    77ae:	4631      	mov	r1, r6
    77b0:	f363 128f 	bfi	r2, r3, #6, #10
}
    77b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    77b8:	f017 b959 	b.w	1ea6e <log_1>
	if (!evt->status) {
    77bc:	782b      	ldrb	r3, [r5, #0]
    77be:	b923      	cbnz	r3, 77ca <le_remote_feat_complete+0x42>
		memcpy(conn->le.features, evt->features,
    77c0:	2208      	movs	r2, #8
    77c2:	1ce9      	adds	r1, r5, #3
    77c4:	3094      	adds	r0, #148	; 0x94
    77c6:	f017 ff17 	bl	1f5f8 <memcpy>
    77ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    77ce:	1d20      	adds	r0, r4, #4
    77d0:	f018 fa5b 	bl	1fc8a <atomic_or>
	conn_auto_initiate(conn);
    77d4:	4620      	mov	r0, r4
    77d6:	f7ff fedf 	bl	7598 <conn_auto_initiate>
	bt_conn_unref(conn);
    77da:	4620      	mov	r0, r4
}
    77dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    77e0:	f018 bbe1 	b.w	1ffa6 <bt_conn_unref>
    77e4:	00025a6c 	.word	0x00025a6c
    77e8:	00025b34 	.word	0x00025b34
    77ec:	000280ad 	.word	0x000280ad

000077f0 <bt_unpair>:
{
    77f0:	b530      	push	{r4, r5, lr}
    77f2:	b085      	sub	sp, #20
    77f4:	460d      	mov	r5, r1
    77f6:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
    77fa:	b9d0      	cbnz	r0, 7832 <bt_unpair+0x42>
	if (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    77fc:	b949      	cbnz	r1, 7812 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
    77fe:	f10d 0207 	add.w	r2, sp, #7
    7802:	490d      	ldr	r1, [pc, #52]	; (7838 <bt_unpair+0x48>)
    7804:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7808:	f006 ffa2 	bl	e750 <bt_foreach_bond>
		return 0;
    780c:	2000      	movs	r0, #0
}
    780e:	b005      	add	sp, #20
    7810:	bd30      	pop	{r4, r5, pc}
	if (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7812:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
    7814:	2207      	movs	r2, #7
    7816:	f8cd 000b 	str.w	r0, [sp, #11]
    781a:	a902      	add	r1, sp, #8
    781c:	4628      	mov	r0, r5
    781e:	f017 fedb 	bl	1f5d8 <memcmp>
    7822:	2800      	cmp	r0, #0
    7824:	d0eb      	beq.n	77fe <bt_unpair+0xe>
	unpair(id, addr);
    7826:	4629      	mov	r1, r5
    7828:	f89d 0007 	ldrb.w	r0, [sp, #7]
    782c:	f018 fa4d 	bl	1fcca <unpair>
	return 0;
    7830:	e7ec      	b.n	780c <bt_unpair+0x1c>
		return -EINVAL;
    7832:	f06f 0015 	mvn.w	r0, #21
    7836:	e7ea      	b.n	780e <bt_unpair+0x1e>
    7838:	0001fd21 	.word	0x0001fd21

0000783c <bt_id_add>:
{
    783c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    783e:	4e65      	ldr	r6, [pc, #404]	; (79d4 <bt_id_add+0x198>)
    7840:	f896 20a4 	ldrb.w	r2, [r6, #164]	; 0xa4
    7844:	f896 30a5 	ldrb.w	r3, [r6, #165]	; 0xa5
{
    7848:	4605      	mov	r5, r0
    784a:	4634      	mov	r4, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    784c:	b10a      	cbz	r2, 7852 <bt_id_add+0x16>
    784e:	429a      	cmp	r2, r3
    7850:	d204      	bcs.n	785c <bt_id_add+0x20>
		bt_dev.le.rl_entries++;
    7852:	3301      	adds	r3, #1
    7854:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    7858:	b003      	add	sp, #12
    785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    785c:	2105      	movs	r1, #5
    785e:	2000      	movs	r0, #0
    7860:	f001 fe04 	bl	946c <bt_conn_lookup_state_le>
	if (conn) {
    7864:	4607      	mov	r7, r0
    7866:	b168      	cbz	r0, 7884 <bt_id_add+0x48>
    7868:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    786c:	f106 0070 	add.w	r0, r6, #112	; 0x70
    7870:	f018 fa0b 	bl	1fc8a <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_ADD;
    7874:	7a6b      	ldrb	r3, [r5, #9]
    7876:	f043 0304 	orr.w	r3, r3, #4
    787a:	726b      	strb	r3, [r5, #9]
		bt_conn_unref(conn);
    787c:	4638      	mov	r0, r7
    787e:	f018 fb92 	bl	1ffa6 <bt_conn_unref>
		return;
    7882:	e7e9      	b.n	7858 <bt_id_add+0x1c>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    7884:	f106 0070 	add.w	r0, r6, #112	; 0x70
    7888:	2105      	movs	r1, #5
    788a:	f018 fa4e 	bl	1fd2a <atomic_test_bit>
	if (adv_enabled) {
    788e:	4606      	mov	r6, r0
    7890:	b110      	cbz	r0, 7898 <bt_id_add+0x5c>
		set_advertise_enable(false);
    7892:	4638      	mov	r0, r7
    7894:	f7ff fcde 	bl	7254 <set_advertise_enable>
	if (bt_dev.le.rl_entries) {
    7898:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    789c:	b193      	cbz	r3, 78c4 <bt_id_add+0x88>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    789e:	2000      	movs	r0, #0
    78a0:	f018 fa61 	bl	1fd66 <addr_res_enable>
		if (err) {
    78a4:	b170      	cbz	r0, 78c4 <bt_id_add+0x88>
			BT_WARN("Failed to disable address resolution");
    78a6:	2302      	movs	r3, #2
    78a8:	f04f 0100 	mov.w	r1, #0
    78ac:	f363 0107 	bfi	r1, r3, #0, #8
    78b0:	4a49      	ldr	r2, [pc, #292]	; (79d8 <bt_id_add+0x19c>)
    78b2:	4b4a      	ldr	r3, [pc, #296]	; (79dc <bt_id_add+0x1a0>)
    78b4:	484a      	ldr	r0, [pc, #296]	; (79e0 <bt_id_add+0x1a4>)
    78b6:	1a9b      	subs	r3, r3, r2
    78b8:	08db      	lsrs	r3, r3, #3
    78ba:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("Set privacy mode command is not supported");
    78be:	f017 f8c9 	bl	1ea54 <log_0>
	if (err) {
    78c2:	e029      	b.n	7918 <bt_id_add+0xdc>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    78c4:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    78c8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    78cc:	429a      	cmp	r2, r3
    78ce:	d12c      	bne.n	792a <bt_id_add+0xee>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    78d0:	2302      	movs	r3, #2
    78d2:	f04f 0100 	mov.w	r1, #0
    78d6:	f363 0107 	bfi	r1, r3, #0, #8
    78da:	4d40      	ldr	r5, [pc, #256]	; (79dc <bt_id_add+0x1a0>)
    78dc:	4b3e      	ldr	r3, [pc, #248]	; (79d8 <bt_id_add+0x19c>)
    78de:	4841      	ldr	r0, [pc, #260]	; (79e4 <bt_id_add+0x1a8>)
    78e0:	1aed      	subs	r5, r5, r3
    78e2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    78e6:	f365 118f 	bfi	r1, r5, #6, #10
    78ea:	f017 f8b3 	bl	1ea54 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    78ee:	2200      	movs	r2, #0
    78f0:	4611      	mov	r1, r2
    78f2:	f242 0029 	movw	r0, #8233	; 0x2029
    78f6:	f7ff fc67 	bl	71c8 <bt_hci_cmd_send_sync>
		if (err) {
    78fa:	b140      	cbz	r0, 790e <bt_id_add+0xd2>
			BT_ERR("Failed to clear resolution list");
    78fc:	f04f 0100 	mov.w	r1, #0
    7900:	2301      	movs	r3, #1
    7902:	f363 0107 	bfi	r1, r3, #0, #8
    7906:	f365 118f 	bfi	r1, r5, #6, #10
    790a:	4837      	ldr	r0, [pc, #220]	; (79e8 <bt_id_add+0x1ac>)
    790c:	e7d7      	b.n	78be <bt_id_add+0x82>
		bt_dev.le.rl_entries++;
    790e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    7912:	3301      	adds	r3, #1
    7914:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    7918:	2001      	movs	r0, #1
    791a:	f018 fa24 	bl	1fd66 <addr_res_enable>
	if (adv_enabled) {
    791e:	2e00      	cmp	r6, #0
    7920:	d09a      	beq.n	7858 <bt_id_add+0x1c>
		set_advertise_enable(true);
    7922:	2001      	movs	r0, #1
    7924:	f7ff fc96 	bl	7254 <set_advertise_enable>
    7928:	e796      	b.n	7858 <bt_id_add+0x1c>
	err = hci_id_add(&keys->addr, keys->irk.val);
    792a:	1c6f      	adds	r7, r5, #1
    792c:	f105 0126 	add.w	r1, r5, #38	; 0x26
    7930:	4638      	mov	r0, r7
    7932:	f7ff fd4d 	bl	73d0 <hci_id_add>
	if (err) {
    7936:	4605      	mov	r5, r0
    7938:	b160      	cbz	r0, 7954 <bt_id_add+0x118>
		BT_ERR("Failed to add IRK to controller");
    793a:	2301      	movs	r3, #1
    793c:	f04f 0100 	mov.w	r1, #0
    7940:	f363 0107 	bfi	r1, r3, #0, #8
    7944:	4a24      	ldr	r2, [pc, #144]	; (79d8 <bt_id_add+0x19c>)
    7946:	4b25      	ldr	r3, [pc, #148]	; (79dc <bt_id_add+0x1a0>)
    7948:	4828      	ldr	r0, [pc, #160]	; (79ec <bt_id_add+0x1b0>)
    794a:	1a9b      	subs	r3, r3, r2
    794c:	08db      	lsrs	r3, r3, #3
    794e:	f363 118f 	bfi	r1, r3, #6, #10
    7952:	e7b4      	b.n	78be <bt_id_add+0x82>
	bt_dev.le.rl_entries++;
    7954:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    7958:	3301      	adds	r3, #1
    795a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    795e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    7962:	075b      	lsls	r3, r3, #29
    7964:	d40c      	bmi.n	7980 <bt_id_add+0x144>
		BT_WARN("Set privacy mode command is not supported");
    7966:	2302      	movs	r3, #2
    7968:	f04f 0100 	mov.w	r1, #0
    796c:	f363 0107 	bfi	r1, r3, #0, #8
    7970:	4a19      	ldr	r2, [pc, #100]	; (79d8 <bt_id_add+0x19c>)
    7972:	4b1a      	ldr	r3, [pc, #104]	; (79dc <bt_id_add+0x1a0>)
    7974:	481e      	ldr	r0, [pc, #120]	; (79f0 <bt_id_add+0x1b4>)
    7976:	1a9b      	subs	r3, r3, r2
    7978:	08db      	lsrs	r3, r3, #3
    797a:	f363 118f 	bfi	r1, r3, #6, #10
    797e:	e79e      	b.n	78be <bt_id_add+0x82>
	bt_addr_le_copy(&cp.id_addr, addr);
    7980:	4639      	mov	r1, r7
    7982:	4668      	mov	r0, sp
    7984:	f018 f97e 	bl	1fc84 <bt_addr_le_copy>
	cp.mode = mode;
    7988:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    798a:	2108      	movs	r1, #8
    798c:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    7990:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    7994:	f7ff faaa 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    7998:	4604      	mov	r4, r0
    799a:	b960      	cbnz	r0, 79b6 <bt_id_add+0x17a>
		BT_ERR("Failed to set privacy mode");
    799c:	2301      	movs	r3, #1
    799e:	f04f 0100 	mov.w	r1, #0
    79a2:	f363 0107 	bfi	r1, r3, #0, #8
    79a6:	4a0c      	ldr	r2, [pc, #48]	; (79d8 <bt_id_add+0x19c>)
    79a8:	4b0c      	ldr	r3, [pc, #48]	; (79dc <bt_id_add+0x1a0>)
    79aa:	4812      	ldr	r0, [pc, #72]	; (79f4 <bt_id_add+0x1b8>)
    79ac:	1a9b      	subs	r3, r3, r2
    79ae:	08db      	lsrs	r3, r3, #3
    79b0:	f363 118f 	bfi	r1, r3, #6, #10
    79b4:	e783      	b.n	78be <bt_id_add+0x82>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    79b6:	2208      	movs	r2, #8
    79b8:	4669      	mov	r1, sp
    79ba:	4410      	add	r0, r2
    79bc:	f01a fe40 	bl	22640 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    79c0:	462a      	mov	r2, r5
    79c2:	4621      	mov	r1, r4
    79c4:	f242 004e 	movw	r0, #8270	; 0x204e
    79c8:	f7ff fbfe 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    79cc:	2800      	cmp	r0, #0
    79ce:	d0a3      	beq.n	7918 <bt_id_add+0xdc>
    79d0:	e7e4      	b.n	799c <bt_id_add+0x160>
    79d2:	bf00      	nop
    79d4:	2000dd18 	.word	0x2000dd18
    79d8:	00025a6c 	.word	0x00025a6c
    79dc:	00025b34 	.word	0x00025b34
    79e0:	0002793a 	.word	0x0002793a
    79e4:	0002795f 	.word	0x0002795f
    79e8:	00027990 	.word	0x00027990
    79ec:	000279b0 	.word	0x000279b0
    79f0:	000279d0 	.word	0x000279d0
    79f4:	000279fa 	.word	0x000279fa

000079f8 <bt_id_del>:
{
    79f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    79fc:	4e46      	ldr	r6, [pc, #280]	; (7b18 <bt_id_del+0x120>)
    79fe:	f896 20a4 	ldrb.w	r2, [r6, #164]	; 0xa4
    7a02:	f896 30a5 	ldrb.w	r3, [r6, #165]	; 0xa5
{
    7a06:	4605      	mov	r5, r0
    7a08:	4634      	mov	r4, r6
	if (!bt_dev.le.rl_size ||
    7a0a:	b112      	cbz	r2, 7a12 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    7a0c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    7a0e:	4293      	cmp	r3, r2
    7a10:	dd04      	ble.n	7a1c <bt_id_del+0x24>
		bt_dev.le.rl_entries--;
    7a12:	3b01      	subs	r3, #1
    7a14:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    7a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    7a1c:	2105      	movs	r1, #5
    7a1e:	2000      	movs	r0, #0
    7a20:	f001 fd24 	bl	946c <bt_conn_lookup_state_le>
	if (conn) {
    7a24:	4607      	mov	r7, r0
    7a26:	b170      	cbz	r0, 7a46 <bt_id_del+0x4e>
    7a28:	f106 0070 	add.w	r0, r6, #112	; 0x70
    7a2c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    7a30:	f018 f92b 	bl	1fc8a <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_DEL;
    7a34:	7a6b      	ldrb	r3, [r5, #9]
    7a36:	f043 0308 	orr.w	r3, r3, #8
    7a3a:	726b      	strb	r3, [r5, #9]
		bt_conn_unref(conn);
    7a3c:	4638      	mov	r0, r7
}
    7a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    7a42:	f018 bab0 	b.w	1ffa6 <bt_conn_unref>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    7a46:	f106 0070 	add.w	r0, r6, #112	; 0x70
    7a4a:	2105      	movs	r1, #5
    7a4c:	f018 f96d 	bl	1fd2a <atomic_test_bit>
	if (adv_enabled) {
    7a50:	4606      	mov	r6, r0
    7a52:	b110      	cbz	r0, 7a5a <bt_id_del+0x62>
		set_advertise_enable(false);
    7a54:	4638      	mov	r0, r7
    7a56:	f7ff fbfd 	bl	7254 <set_advertise_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    7a5a:	2000      	movs	r0, #0
    7a5c:	f018 f983 	bl	1fd66 <addr_res_enable>
	if (err) {
    7a60:	4607      	mov	r7, r0
    7a62:	b1d8      	cbz	r0, 7a9c <bt_id_del+0xa4>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    7a64:	2301      	movs	r3, #1
    7a66:	f04f 0200 	mov.w	r2, #0
    7a6a:	f363 0207 	bfi	r2, r3, #0, #8
    7a6e:	492b      	ldr	r1, [pc, #172]	; (7b1c <bt_id_del+0x124>)
    7a70:	4b2b      	ldr	r3, [pc, #172]	; (7b20 <bt_id_del+0x128>)
    7a72:	1a5b      	subs	r3, r3, r1
    7a74:	08db      	lsrs	r3, r3, #3
    7a76:	4601      	mov	r1, r0
    7a78:	f363 128f 	bfi	r2, r3, #6, #10
    7a7c:	4829      	ldr	r0, [pc, #164]	; (7b24 <bt_id_del+0x12c>)
    7a7e:	f016 fff6 	bl	1ea6e <log_1>
	if (bt_dev.le.rl_entries) {
    7a82:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    7a86:	b113      	cbz	r3, 7a8e <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    7a88:	2001      	movs	r0, #1
    7a8a:	f018 f96c 	bl	1fd66 <addr_res_enable>
	if (adv_enabled) {
    7a8e:	2e00      	cmp	r6, #0
    7a90:	d0c2      	beq.n	7a18 <bt_id_del+0x20>
		set_advertise_enable(true);
    7a92:	2001      	movs	r0, #1
}
    7a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		set_advertise_enable(true);
    7a98:	f7ff bbdc 	b.w	7254 <set_advertise_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7a9c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    7aa0:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    7aa4:	429a      	cmp	r2, r3
    7aa6:	d20c      	bcs.n	7ac2 <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
    7aa8:	3b01      	subs	r3, #1
    7aaa:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    7aae:	896b      	ldrh	r3, [r5, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    7ab0:	491d      	ldr	r1, [pc, #116]	; (7b28 <bt_id_del+0x130>)
		keys->keys &= ~BT_KEYS_IRK;
    7ab2:	f023 0302 	bic.w	r3, r3, #2
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    7ab6:	4602      	mov	r2, r0
		keys->keys &= ~BT_KEYS_IRK;
    7ab8:	816b      	strh	r3, [r5, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    7aba:	2002      	movs	r0, #2
    7abc:	f006 fe5e 	bl	e77c <bt_keys_foreach>
		goto done;
    7ac0:	e7df      	b.n	7a82 <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    7ac2:	2107      	movs	r1, #7
    7ac4:	f242 0028 	movw	r0, #8232	; 0x2028
    7ac8:	f7ff fa10 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    7acc:	4680      	mov	r8, r0
    7ace:	2800      	cmp	r0, #0
    7ad0:	d0d7      	beq.n	7a82 <bt_id_del+0x8a>
	cp = net_buf_add(buf, sizeof(*cp));
    7ad2:	2107      	movs	r1, #7
    7ad4:	3008      	adds	r0, #8
    7ad6:	f01a fdad 	bl	22634 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    7ada:	1c69      	adds	r1, r5, #1
    7adc:	f018 f8d2 	bl	1fc84 <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    7ae0:	463a      	mov	r2, r7
    7ae2:	4641      	mov	r1, r8
    7ae4:	f242 0028 	movw	r0, #8232	; 0x2028
    7ae8:	f7ff fb6e 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    7aec:	b170      	cbz	r0, 7b0c <bt_id_del+0x114>
		BT_ERR("Failed to remove IRK from controller");
    7aee:	2301      	movs	r3, #1
    7af0:	f04f 0100 	mov.w	r1, #0
    7af4:	f363 0107 	bfi	r1, r3, #0, #8
    7af8:	4a08      	ldr	r2, [pc, #32]	; (7b1c <bt_id_del+0x124>)
    7afa:	4b09      	ldr	r3, [pc, #36]	; (7b20 <bt_id_del+0x128>)
    7afc:	480b      	ldr	r0, [pc, #44]	; (7b2c <bt_id_del+0x134>)
    7afe:	1a9b      	subs	r3, r3, r2
    7b00:	08db      	lsrs	r3, r3, #3
    7b02:	f363 118f 	bfi	r1, r3, #6, #10
    7b06:	f016 ffa5 	bl	1ea54 <log_0>
		goto done;
    7b0a:	e7ba      	b.n	7a82 <bt_id_del+0x8a>
	bt_dev.le.rl_entries--;
    7b0c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    7b10:	3b01      	subs	r3, #1
    7b12:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    7b16:	e7b4      	b.n	7a82 <bt_id_del+0x8a>
    7b18:	2000dd18 	.word	0x2000dd18
    7b1c:	00025a6c 	.word	0x00025a6c
    7b20:	00025b34 	.word	0x00025b34
    7b24:	00027a43 	.word	0x00027a43
    7b28:	0001fd5d 	.word	0x0001fd5d
    7b2c:	00027a70 	.word	0x00027a70

00007b30 <id_create>:
{
    7b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b34:	4b28      	ldr	r3, [pc, #160]	; (7bd8 <id_create+0xa8>)
    7b36:	ebc0 07c0 	rsb	r7, r0, r0, lsl #3
    7b3a:	b086      	sub	sp, #24
    7b3c:	4604      	mov	r4, r0
    7b3e:	4615      	mov	r5, r2
    7b40:	441f      	add	r7, r3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7b42:	460e      	mov	r6, r1
    7b44:	4698      	mov	r8, r3
    7b46:	b361      	cbz	r1, 7ba2 <id_create+0x72>
    7b48:	2300      	movs	r3, #0
    7b4a:	2207      	movs	r2, #7
    7b4c:	4669      	mov	r1, sp
    7b4e:	4630      	mov	r0, r6
    7b50:	9300      	str	r3, [sp, #0]
    7b52:	f8cd 3003 	str.w	r3, [sp, #3]
    7b56:	f017 fd3f 	bl	1f5d8 <memcmp>
    7b5a:	b310      	cbz	r0, 7ba2 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    7b5c:	4631      	mov	r1, r6
    7b5e:	4638      	mov	r0, r7
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7b60:	f018 f890 	bl	1fc84 <bt_addr_le_copy>
		u8_t zero_irk[16] = { 0 };
    7b64:	2610      	movs	r6, #16
    7b66:	4632      	mov	r2, r6
    7b68:	2100      	movs	r1, #0
    7b6a:	a802      	add	r0, sp, #8
    7b6c:	fb06 8404 	mla	r4, r6, r4, r8
    7b70:	f017 fd6c 	bl	1f64c <memset>
		if (irk && memcmp(irk, zero_irk, 16)) {
    7b74:	34d8      	adds	r4, #216	; 0xd8
    7b76:	b32d      	cbz	r5, 7bc4 <id_create+0x94>
    7b78:	4632      	mov	r2, r6
    7b7a:	a902      	add	r1, sp, #8
    7b7c:	4628      	mov	r0, r5
    7b7e:	f017 fd2b 	bl	1f5d8 <memcmp>
    7b82:	b1f8      	cbz	r0, 7bc4 <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
    7b84:	4632      	mov	r2, r6
    7b86:	4629      	mov	r1, r5
    7b88:	4620      	mov	r0, r4
				memcpy(irk, &bt_dev.irk[id], 16);
    7b8a:	f017 fd35 	bl	1f5f8 <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7b8e:	2101      	movs	r1, #1
    7b90:	4812      	ldr	r0, [pc, #72]	; (7bdc <id_create+0xac>)
    7b92:	f018 f8ca 	bl	1fd2a <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    7b96:	b108      	cbz	r0, 7b9c <id_create+0x6c>
		bt_settings_save_id();
    7b98:	f7fe fc7c 	bl	6494 <bt_settings_save_id>
}
    7b9c:	b006      	add	sp, #24
    7b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_addr_le_create_static(&new_addr);
    7ba2:	a802      	add	r0, sp, #8
    7ba4:	f018 f92f 	bl	1fe06 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    7ba8:	a802      	add	r0, sp, #8
    7baa:	f7fe ffe7 	bl	6b7c <id_find>
    7bae:	2800      	cmp	r0, #0
    7bb0:	daf7      	bge.n	7ba2 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    7bb2:	a902      	add	r1, sp, #8
    7bb4:	4638      	mov	r0, r7
    7bb6:	f018 f865 	bl	1fc84 <bt_addr_le_copy>
		if (addr) {
    7bba:	2e00      	cmp	r6, #0
    7bbc:	d0d2      	beq.n	7b64 <id_create+0x34>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7bbe:	4639      	mov	r1, r7
    7bc0:	4630      	mov	r0, r6
    7bc2:	e7cd      	b.n	7b60 <id_create+0x30>
			bt_rand(&bt_dev.irk[id], 16);
    7bc4:	2110      	movs	r1, #16
    7bc6:	4620      	mov	r0, r4
    7bc8:	f008 ffa4 	bl	10b14 <bt_rand>
			if (irk) {
    7bcc:	2d00      	cmp	r5, #0
    7bce:	d0de      	beq.n	7b8e <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
    7bd0:	2210      	movs	r2, #16
    7bd2:	4621      	mov	r1, r4
    7bd4:	4628      	mov	r0, r5
    7bd6:	e7d8      	b.n	7b8a <id_create+0x5a>
    7bd8:	2000dd18 	.word	0x2000dd18
    7bdc:	2000dd88 	.word	0x2000dd88

00007be0 <bt_recv>:
{
    7be0:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7be2:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    7be4:	2901      	cmp	r1, #1
{
    7be6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    7be8:	d054      	beq.n	7c94 <bt_recv+0xb4>
    7bea:	2903      	cmp	r1, #3
    7bec:	f040 8084 	bne.w	7cf8 <bt_recv+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7bf0:	8983      	ldrh	r3, [r0, #12]
    7bf2:	2b03      	cmp	r3, #3
    7bf4:	d80c      	bhi.n	7c10 <bt_recv+0x30>
    7bf6:	f240 237f 	movw	r3, #639	; 0x27f
    7bfa:	4a49      	ldr	r2, [pc, #292]	; (7d20 <bt_recv+0x140>)
    7bfc:	4949      	ldr	r1, [pc, #292]	; (7d24 <bt_recv+0x144>)
    7bfe:	484a      	ldr	r0, [pc, #296]	; (7d28 <bt_recv+0x148>)
    7c00:	f015 fdd9 	bl	1d7b6 <printk>
    7c04:	4040      	eors	r0, r0
    7c06:	f380 8811 	msr	BASEPRI, r0
    7c0a:	f04f 0003 	mov.w	r0, #3
    7c0e:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7c10:	2104      	movs	r1, #4
    7c12:	f104 0008 	add.w	r0, r4, #8
    7c16:	f01a fd3e 	bl	22696 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    7c1a:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    7c1c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    7c1e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->id = BT_CONN_ID_INVALID;
    7c20:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    7c22:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    7c26:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    7c28:	82e0      	strh	r0, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    7c2a:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    7c2c:	d011      	beq.n	7c52 <bt_recv+0x72>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    7c2e:	2001      	movs	r0, #1
    7c30:	f04f 0300 	mov.w	r3, #0
    7c34:	f360 0307 	bfi	r3, r0, #0, #8
    7c38:	4d3c      	ldr	r5, [pc, #240]	; (7d2c <bt_recv+0x14c>)
    7c3a:	483d      	ldr	r0, [pc, #244]	; (7d30 <bt_recv+0x150>)
    7c3c:	1b40      	subs	r0, r0, r5
    7c3e:	08c0      	lsrs	r0, r0, #3
    7c40:	f360 138f 	bfi	r3, r0, #6, #10
    7c44:	483b      	ldr	r0, [pc, #236]	; (7d34 <bt_recv+0x154>)
    7c46:	f016 ff26 	bl	1ea96 <log_2>
	net_buf_unref(buf);
    7c4a:	4620      	mov	r0, r4
    7c4c:	f00f fcc2 	bl	175d4 <net_buf_unref>
    7c50:	e01e      	b.n	7c90 <bt_recv+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    7c52:	f001 fbd3 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    7c56:	4605      	mov	r5, r0
    7c58:	b978      	cbnz	r0, 7c7a <bt_recv+0x9a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    7c5a:	2301      	movs	r3, #1
    7c5c:	f04f 0200 	mov.w	r2, #0
    7c60:	f363 0207 	bfi	r2, r3, #0, #8
    7c64:	4931      	ldr	r1, [pc, #196]	; (7d2c <bt_recv+0x14c>)
    7c66:	4b32      	ldr	r3, [pc, #200]	; (7d30 <bt_recv+0x150>)
    7c68:	4833      	ldr	r0, [pc, #204]	; (7d38 <bt_recv+0x158>)
    7c6a:	1a5b      	subs	r3, r3, r1
    7c6c:	08db      	lsrs	r3, r3, #3
    7c6e:	f363 128f 	bfi	r2, r3, #6, #10
    7c72:	8ae1      	ldrh	r1, [r4, #22]
    7c74:	f016 fefb 	bl	1ea6e <log_1>
		net_buf_unref(buf);
    7c78:	e7e7      	b.n	7c4a <bt_recv+0x6a>
	acl(buf)->id = bt_conn_index(conn);
    7c7a:	f001 fd89 	bl	9790 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    7c7e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_index(conn);
    7c80:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    7c82:	4621      	mov	r1, r4
    7c84:	4628      	mov	r0, r5
    7c86:	f001 f94b 	bl	8f20 <bt_conn_recv>
	bt_conn_unref(conn);
    7c8a:	4628      	mov	r0, r5
    7c8c:	f018 f98b 	bl	1ffa6 <bt_conn_unref>
		return 0;
    7c90:	2000      	movs	r0, #0
}
    7c92:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7c94:	8983      	ldrh	r3, [r0, #12]
    7c96:	2b01      	cmp	r3, #1
    7c98:	d80c      	bhi.n	7cb4 <bt_recv+0xd4>
    7c9a:	f640 7339 	movw	r3, #3897	; 0xf39
    7c9e:	4a20      	ldr	r2, [pc, #128]	; (7d20 <bt_recv+0x140>)
    7ca0:	4920      	ldr	r1, [pc, #128]	; (7d24 <bt_recv+0x144>)
    7ca2:	4821      	ldr	r0, [pc, #132]	; (7d28 <bt_recv+0x148>)
    7ca4:	f015 fd87 	bl	1d7b6 <printk>
    7ca8:	4040      	eors	r0, r0
    7caa:	f380 8811 	msr	BASEPRI, r0
    7cae:	f04f 0003 	mov.w	r0, #3
    7cb2:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7cb4:	2102      	movs	r1, #2
    7cb6:	f104 0008 	add.w	r0, r4, #8
    7cba:	f01a fcec 	bl	22696 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7cbe:	7802      	ldrb	r2, [r0, #0]
    7cc0:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7cc2:	4605      	mov	r5, r0
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    7cc4:	d811      	bhi.n	7cea <bt_recv+0x10a>
    7cc6:	2301      	movs	r3, #1
    7cc8:	4093      	lsls	r3, r2
    7cca:	4a1c      	ldr	r2, [pc, #112]	; (7d3c <bt_recv+0x15c>)
    7ccc:	4213      	tst	r3, r2
    7cce:	d00c      	beq.n	7cea <bt_recv+0x10a>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7cd0:	f640 733d 	movw	r3, #3901	; 0xf3d
    7cd4:	4a12      	ldr	r2, [pc, #72]	; (7d20 <bt_recv+0x140>)
    7cd6:	491a      	ldr	r1, [pc, #104]	; (7d40 <bt_recv+0x160>)
    7cd8:	4813      	ldr	r0, [pc, #76]	; (7d28 <bt_recv+0x148>)
    7cda:	f015 fd6c 	bl	1d7b6 <printk>
    7cde:	4040      	eors	r0, r0
    7ce0:	f380 8811 	msr	BASEPRI, r0
    7ce4:	f04f 0003 	mov.w	r0, #3
    7ce8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    7cea:	2305      	movs	r3, #5
    7cec:	4a15      	ldr	r2, [pc, #84]	; (7d44 <bt_recv+0x164>)
    7cee:	7828      	ldrb	r0, [r5, #0]
    7cf0:	4621      	mov	r1, r4
    7cf2:	f7fe fe69 	bl	69c8 <handle_event>
    7cf6:	e7a8      	b.n	7c4a <bt_recv+0x6a>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    7cf8:	2301      	movs	r3, #1
    7cfa:	f04f 0200 	mov.w	r2, #0
    7cfe:	f363 0207 	bfi	r2, r3, #0, #8
    7d02:	480a      	ldr	r0, [pc, #40]	; (7d2c <bt_recv+0x14c>)
    7d04:	4b0a      	ldr	r3, [pc, #40]	; (7d30 <bt_recv+0x150>)
    7d06:	1a1b      	subs	r3, r3, r0
    7d08:	08db      	lsrs	r3, r3, #3
    7d0a:	f363 128f 	bfi	r2, r3, #6, #10
    7d0e:	480e      	ldr	r0, [pc, #56]	; (7d48 <bt_recv+0x168>)
    7d10:	f016 fead 	bl	1ea6e <log_1>
		net_buf_unref(buf);
    7d14:	4620      	mov	r0, r4
    7d16:	f00f fc5d 	bl	175d4 <net_buf_unref>
		return -EINVAL;
    7d1a:	f06f 0015 	mvn.w	r0, #21
    7d1e:	e7b8      	b.n	7c92 <bt_recv+0xb2>
    7d20:	00027fbe 	.word	0x00027fbe
    7d24:	00027c5c 	.word	0x00027c5c
    7d28:	00027ff4 	.word	0x00027ff4
    7d2c:	00025a6c 	.word	0x00025a6c
    7d30:	00025b34 	.word	0x00025b34
    7d34:	00027c75 	.word	0x00027c75
    7d38:	00027c99 	.word	0x00027c99
    7d3c:	0408c000 	.word	0x0408c000
    7d40:	00027cbb 	.word	0x00027cbb
    7d44:	0002611c 	.word	0x0002611c
    7d48:	00027cd9 	.word	0x00027cd9

00007d4c <bt_recv_prio>:
{
    7d4c:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7d4e:	7d03      	ldrb	r3, [r0, #20]
    7d50:	2b01      	cmp	r3, #1
{
    7d52:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7d54:	d00c      	beq.n	7d70 <bt_recv_prio+0x24>
    7d56:	f241 33a6 	movw	r3, #5030	; 0x13a6
    7d5a:	4a20      	ldr	r2, [pc, #128]	; (7ddc <bt_recv_prio+0x90>)
    7d5c:	4920      	ldr	r1, [pc, #128]	; (7de0 <bt_recv_prio+0x94>)
    7d5e:	4821      	ldr	r0, [pc, #132]	; (7de4 <bt_recv_prio+0x98>)
    7d60:	f015 fd29 	bl	1d7b6 <printk>
    7d64:	4040      	eors	r0, r0
    7d66:	f380 8811 	msr	BASEPRI, r0
    7d6a:	f04f 0003 	mov.w	r0, #3
    7d6e:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7d70:	89a3      	ldrh	r3, [r4, #12]
    7d72:	2b01      	cmp	r3, #1
    7d74:	d80c      	bhi.n	7d90 <bt_recv_prio+0x44>
    7d76:	f241 33a7 	movw	r3, #5031	; 0x13a7
    7d7a:	4a18      	ldr	r2, [pc, #96]	; (7ddc <bt_recv_prio+0x90>)
    7d7c:	491a      	ldr	r1, [pc, #104]	; (7de8 <bt_recv_prio+0x9c>)
    7d7e:	4819      	ldr	r0, [pc, #100]	; (7de4 <bt_recv_prio+0x98>)
    7d80:	f015 fd19 	bl	1d7b6 <printk>
    7d84:	4040      	eors	r0, r0
    7d86:	f380 8811 	msr	BASEPRI, r0
    7d8a:	f04f 0003 	mov.w	r0, #3
    7d8e:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7d90:	2102      	movs	r1, #2
    7d92:	f104 0008 	add.w	r0, r4, #8
    7d96:	f01a fc7e 	bl	22696 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    7d9a:	7802      	ldrb	r2, [r0, #0]
    7d9c:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7d9e:	4605      	mov	r5, r0
    7da0:	d804      	bhi.n	7dac <bt_recv_prio+0x60>
    7da2:	2301      	movs	r3, #1
    7da4:	4093      	lsls	r3, r2
    7da6:	4a11      	ldr	r2, [pc, #68]	; (7dec <bt_recv_prio+0xa0>)
    7da8:	4213      	tst	r3, r2
    7daa:	d10c      	bne.n	7dc6 <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    7dac:	f241 33aa 	movw	r3, #5034	; 0x13aa
    7db0:	4a0a      	ldr	r2, [pc, #40]	; (7ddc <bt_recv_prio+0x90>)
    7db2:	490f      	ldr	r1, [pc, #60]	; (7df0 <bt_recv_prio+0xa4>)
    7db4:	480b      	ldr	r0, [pc, #44]	; (7de4 <bt_recv_prio+0x98>)
    7db6:	f015 fcfe 	bl	1d7b6 <printk>
    7dba:	4040      	eors	r0, r0
    7dbc:	f380 8811 	msr	BASEPRI, r0
    7dc0:	f04f 0003 	mov.w	r0, #3
    7dc4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    7dc6:	2304      	movs	r3, #4
    7dc8:	4a0a      	ldr	r2, [pc, #40]	; (7df4 <bt_recv_prio+0xa8>)
    7dca:	7828      	ldrb	r0, [r5, #0]
    7dcc:	4621      	mov	r1, r4
    7dce:	f7fe fdfb 	bl	69c8 <handle_event>
	net_buf_unref(buf);
    7dd2:	4620      	mov	r0, r4
    7dd4:	f00f fbfe 	bl	175d4 <net_buf_unref>
}
    7dd8:	2000      	movs	r0, #0
    7dda:	bd38      	pop	{r3, r4, r5, pc}
    7ddc:	00027fbe 	.word	0x00027fbe
    7de0:	00027ced 	.word	0x00027ced
    7de4:	00027ff4 	.word	0x00027ff4
    7de8:	00027c5c 	.word	0x00027c5c
    7dec:	0408c000 	.word	0x0408c000
    7df0:	00027cbc 	.word	0x00027cbc
    7df4:	00026154 	.word	0x00026154

00007df8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    7df8:	4a08      	ldr	r2, [pc, #32]	; (7e1c <bt_hci_driver_register+0x24>)
    7dfa:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    7dfe:	b93b      	cbnz	r3, 7e10 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    7e00:	68c1      	ldr	r1, [r0, #12]
    7e02:	b141      	cbz	r1, 7e16 <bt_hci_driver_register+0x1e>
    7e04:	6901      	ldr	r1, [r0, #16]
    7e06:	b131      	cbz	r1, 7e16 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    7e08:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    7e0c:	4618      	mov	r0, r3
    7e0e:	4770      	bx	lr
		return -EALREADY;
    7e10:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7e14:	4770      	bx	lr
		return -EINVAL;
    7e16:	f06f 0015 	mvn.w	r0, #21
}
    7e1a:	4770      	bx	lr
    7e1c:	2000dd18 	.word	0x2000dd18

00007e20 <bt_finalize_init>:
{
    7e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7e24:	4c37      	ldr	r4, [pc, #220]	; (7f04 <bt_finalize_init+0xe4>)
    7e26:	4d38      	ldr	r5, [pc, #224]	; (7f08 <bt_finalize_init+0xe8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7e28:	4e38      	ldr	r6, [pc, #224]	; (7f0c <bt_finalize_init+0xec>)
		BT_INFO("Identity[%d]: %s",
    7e2a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 7f24 <bt_finalize_init+0x104>
{
    7e2e:	b087      	sub	sp, #28
    7e30:	2102      	movs	r1, #2
    7e32:	f104 0070 	add.w	r0, r4, #112	; 0x70
    7e36:	f017 ff28 	bl	1fc8a <atomic_or>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7e3a:	f04f 0700 	mov.w	r7, #0
    7e3e:	2303      	movs	r3, #3
    7e40:	f363 0707 	bfi	r7, r3, #0, #8
    7e44:	4b32      	ldr	r3, [pc, #200]	; (7f10 <bt_finalize_init+0xf0>)
    7e46:	4933      	ldr	r1, [pc, #204]	; (7f14 <bt_finalize_init+0xf4>)
    7e48:	1aed      	subs	r5, r5, r3
    7e4a:	79e3      	ldrb	r3, [r4, #7]
    7e4c:	4620      	mov	r0, r4
    7e4e:	2b01      	cmp	r3, #1
    7e50:	bf88      	it	hi
    7e52:	460e      	movhi	r6, r1
    7e54:	f7fe f80c 	bl	5e70 <bt_addr_le_str_real>
    7e58:	f7fb f91c 	bl	3094 <log_strdup>
    7e5c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    7e60:	f365 178f 	bfi	r7, r5, #6, #10
    7e64:	463b      	mov	r3, r7
    7e66:	4602      	mov	r2, r0
    7e68:	4631      	mov	r1, r6
    7e6a:	482b      	ldr	r0, [pc, #172]	; (7f18 <bt_finalize_init+0xf8>)
    7e6c:	f016 fe13 	bl	1ea96 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7e70:	4627      	mov	r7, r4
    7e72:	2601      	movs	r6, #1
    7e74:	79e3      	ldrb	r3, [r4, #7]
    7e76:	429e      	cmp	r6, r3
    7e78:	f107 0707 	add.w	r7, r7, #7
    7e7c:	db2c      	blt.n	7ed8 <bt_finalize_init+0xb8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    7e7e:	7c27      	ldrb	r7, [r4, #16]
    7e80:	2303      	movs	r3, #3
    7e82:	4638      	mov	r0, r7
    7e84:	f04f 0600 	mov.w	r6, #0
    7e88:	f363 0607 	bfi	r6, r3, #0, #8
    7e8c:	f7fe fbd0 	bl	6630 <ver_str>
    7e90:	8a63      	ldrh	r3, [r4, #18]
    7e92:	9304      	str	r3, [sp, #16]
    7e94:	f365 168f 	bfi	r6, r5, #6, #10
    7e98:	8ae3      	ldrh	r3, [r4, #22]
    7e9a:	9305      	str	r3, [sp, #20]
    7e9c:	a902      	add	r1, sp, #8
    7e9e:	e9cd 0702 	strd	r0, r7, [sp, #8]
    7ea2:	4633      	mov	r3, r6
    7ea4:	2204      	movs	r2, #4
    7ea6:	481d      	ldr	r0, [pc, #116]	; (7f1c <bt_finalize_init+0xfc>)
    7ea8:	f016 fe28 	bl	1eafc <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    7eac:	f04f 0600 	mov.w	r6, #0
    7eb0:	2303      	movs	r3, #3
    7eb2:	f363 0607 	bfi	r6, r3, #0, #8
    7eb6:	f365 168f 	bfi	r6, r5, #6, #10
    7eba:	7c65      	ldrb	r5, [r4, #17]
    7ebc:	4628      	mov	r0, r5
    7ebe:	f7fe fbb7 	bl	6630 <ver_str>
    7ec2:	f8ad 6000 	strh.w	r6, [sp]
    7ec6:	4601      	mov	r1, r0
    7ec8:	8aa3      	ldrh	r3, [r4, #20]
    7eca:	4815      	ldr	r0, [pc, #84]	; (7f20 <bt_finalize_init+0x100>)
    7ecc:	462a      	mov	r2, r5
    7ece:	f016 fdfa 	bl	1eac6 <log_3>
}
    7ed2:	b007      	add	sp, #28
    7ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    7ed8:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    7edc:	f043 0303 	orr.w	r3, r3, #3
    7ee0:	4638      	mov	r0, r7
    7ee2:	f363 0807 	bfi	r8, r3, #0, #8
    7ee6:	f7fd ffc3 	bl	5e70 <bt_addr_le_str_real>
    7eea:	f7fb f8d3 	bl	3094 <log_strdup>
    7eee:	f365 188f 	bfi	r8, r5, #6, #10
    7ef2:	4602      	mov	r2, r0
    7ef4:	4631      	mov	r1, r6
    7ef6:	4643      	mov	r3, r8
    7ef8:	4648      	mov	r0, r9
    7efa:	f016 fdcc 	bl	1ea96 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7efe:	3601      	adds	r6, #1
    7f00:	e7b8      	b.n	7e74 <bt_finalize_init+0x54>
    7f02:	bf00      	nop
    7f04:	2000dd18 	.word	0x2000dd18
    7f08:	00025b34 	.word	0x00025b34
    7f0c:	00026c2b 	.word	0x00026c2b
    7f10:	00025a6c 	.word	0x00025a6c
    7f14:	000278b1 	.word	0x000278b1
    7f18:	000278b5 	.word	0x000278b5
    7f1c:	000278d5 	.word	0x000278d5
    7f20:	00027913 	.word	0x00027913
    7f24:	000278c4 	.word	0x000278c4

00007f28 <init_work>:
{
    7f28:	b510      	push	{r4, lr}
	err = bt_init();
    7f2a:	f7f8 fa4d 	bl	3c8 <bt_init>
	if (ready_cb) {
    7f2e:	4b03      	ldr	r3, [pc, #12]	; (7f3c <init_work+0x14>)
    7f30:	681b      	ldr	r3, [r3, #0]
    7f32:	b113      	cbz	r3, 7f3a <init_work+0x12>
}
    7f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    7f38:	4718      	bx	r3
}
    7f3a:	bd10      	pop	{r4, pc}
    7f3c:	20000258 	.word	0x20000258

00007f40 <bt_enable>:
{
    7f40:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    7f42:	4d34      	ldr	r5, [pc, #208]	; (8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>)
    7f44:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    7f48:	b086      	sub	sp, #24
    7f4a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    7f4c:	b993      	cbnz	r3, 7f74 <bt_enable+0x34>
		BT_ERR("No HCI driver registered");
    7f4e:	2301      	movs	r3, #1
    7f50:	f04f 0100 	mov.w	r1, #0
    7f54:	f363 0107 	bfi	r1, r3, #0, #8
    7f58:	4a2f      	ldr	r2, [pc, #188]	; (8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>)
    7f5a:	4b30      	ldr	r3, [pc, #192]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
    7f5c:	4830      	ldr	r0, [pc, #192]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7f5e:	1a9b      	subs	r3, r3, r2
    7f60:	08db      	lsrs	r3, r3, #3
    7f62:	f363 118f 	bfi	r1, r3, #6, #10
    7f66:	f016 fd75 	bl	1ea54 <log_0>
		return -ENODEV;
    7f6a:	f06f 0412 	mvn.w	r4, #18
}
    7f6e:	4620      	mov	r0, r4
    7f70:	b006      	add	sp, #24
    7f72:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    7f74:	2101      	movs	r1, #1
    7f76:	f105 0070 	add.w	r0, r5, #112	; 0x70
    7f7a:	f017 fe86 	bl	1fc8a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7f7e:	07c2      	lsls	r2, r0, #31
    7f80:	d444      	bmi.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
		err = bt_settings_init();
    7f82:	f7fe faeb 	bl	655c <bt_settings_init>
		if (err) {
    7f86:	4604      	mov	r4, r0
    7f88:	2800      	cmp	r0, #0
    7f8a:	d1f0      	bne.n	7f6e <bt_enable+0x2e>
	ready_cb = cb;
    7f8c:	4b25      	ldr	r3, [pc, #148]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7f8e:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7f90:	f06f 0308 	mvn.w	r3, #8
    7f94:	e9cd 0302 	strd	r0, r3, [sp, #8]
    7f98:	e9cd 0004 	strd	r0, r0, [sp, #16]
    7f9c:	e9cd 0000 	strd	r0, r0, [sp]
    7fa0:	4b21      	ldr	r3, [pc, #132]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    7fa2:	4922      	ldr	r1, [pc, #136]	; (802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>)
    7fa4:	4822      	ldr	r0, [pc, #136]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7fa6:	f44f 7220 	mov.w	r2, #640	; 0x280
    7faa:	f014 fd29 	bl	1ca00 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7fae:	4921      	ldr	r1, [pc, #132]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7fb0:	481f      	ldr	r0, [pc, #124]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7fb2:	f01d f9e7 	bl	25384 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    7fb6:	f7fe f90f 	bl	61d8 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    7fba:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    7fbe:	68db      	ldr	r3, [r3, #12]
    7fc0:	4798      	blx	r3
	if (err) {
    7fc2:	4604      	mov	r4, r0
    7fc4:	b178      	cbz	r0, 7fe6 <bt_enable+0xa6>
		BT_ERR("HCI driver open failed (%d)", err);
    7fc6:	2301      	movs	r3, #1
    7fc8:	f04f 0200 	mov.w	r2, #0
    7fcc:	f363 0207 	bfi	r2, r3, #0, #8
    7fd0:	4911      	ldr	r1, [pc, #68]	; (8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>)
    7fd2:	4b12      	ldr	r3, [pc, #72]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
    7fd4:	1a5b      	subs	r3, r3, r1
    7fd6:	08db      	lsrs	r3, r3, #3
    7fd8:	4601      	mov	r1, r0
    7fda:	f363 128f 	bfi	r2, r3, #6, #10
    7fde:	4816      	ldr	r0, [pc, #88]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7fe0:	f016 fd45 	bl	1ea6e <log_1>
		return err;
    7fe4:	e7c3      	b.n	7f6e <bt_enable+0x2e>
	if (!cb) {
    7fe6:	b926      	cbnz	r6, 7ff2 <bt_enable+0xb2>
}
    7fe8:	b006      	add	sp, #24
    7fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    7fee:	f7f8 b9eb 	b.w	3c8 <bt_init>
    7ff2:	2101      	movs	r1, #1
    7ff4:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    7ff8:	f017 fe47 	bl	1fc8a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7ffc:	07c3      	lsls	r3, r0, #31
    7ffe:	d4b6      	bmi.n	7f6e <bt_enable+0x2e>
		k_queue_append(&work_q->queue, work);
    8000:	f105 0164 	add.w	r1, r5, #100	; 0x64
    8004:	480d      	ldr	r0, [pc, #52]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    8006:	f01d f830 	bl	2506a <k_queue_append>
    800a:	e7b0      	b.n	7f6e <bt_enable+0x2e>
		return -EALREADY;
    800c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8010:	e7ad      	b.n	7f6e <bt_enable+0x2e>
    8012:	bf00      	nop
    8014:	2000dd18 	.word	0x2000dd18
    8018:	00025a6c 	.word	0x00025a6c
    801c:	00025b34 	.word	0x00025b34
    8020:	00027876 	.word	0x00027876
    8024:	20000258 	.word	0x20000258
    8028:	00006bb1 	.word	0x00006bb1
    802c:	2000af78 	.word	0x2000af78
    8030:	2000025c 	.word	0x2000025c
    8034:	0002788f 	.word	0x0002788f
    8038:	00027895 	.word	0x00027895
    803c:	20005fa0 	.word	0x20005fa0

00008040 <bt_set_name>:
{
    8040:	b530      	push	{r4, r5, lr}
    8042:	b085      	sub	sp, #20
    8044:	4604      	mov	r4, r0
	size_t len = strlen(name);
    8046:	f017 faa5 	bl	1f594 <strlen>
	if (len >= sizeof(bt_dev.name)) {
    804a:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    804c:	4605      	mov	r5, r0
	if (len >= sizeof(bt_dev.name)) {
    804e:	d839      	bhi.n	80c4 <bt_set_name+0x84>
	if (!strcmp(bt_dev.name, name)) {
    8050:	4621      	mov	r1, r4
    8052:	481e      	ldr	r0, [pc, #120]	; (80cc <bt_set_name+0x8c>)
    8054:	f017 faa5 	bl	1f5a2 <strcmp>
    8058:	b910      	cbnz	r0, 8060 <bt_set_name+0x20>
	return 0;
    805a:	2000      	movs	r0, #0
}
    805c:	b005      	add	sp, #20
    805e:	bd30      	pop	{r4, r5, pc}
	strncpy(bt_dev.name, name, sizeof(bt_dev.name));
    8060:	4621      	mov	r1, r4
    8062:	2242      	movs	r2, #66	; 0x42
    8064:	4819      	ldr	r0, [pc, #100]	; (80cc <bt_set_name+0x8c>)
    8066:	f017 fa74 	bl	1f552 <strncpy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING_NAME)) {
    806a:	2106      	movs	r1, #6
    806c:	4818      	ldr	r0, [pc, #96]	; (80d0 <bt_set_name+0x90>)
    806e:	f017 fe5c 	bl	1fd2a <atomic_test_bit>
    8072:	b188      	cbz	r0, 8098 <bt_set_name+0x58>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    8074:	2309      	movs	r3, #9
    8076:	4620      	mov	r0, r4
    8078:	f88d 3000 	strb.w	r3, [sp]
    807c:	f017 fa8a 	bl	1f594 <strlen>
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    8080:	2201      	movs	r2, #1
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    8082:	f88d 0001 	strb.w	r0, [sp, #1]
		set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, &sd, 1);
    8086:	a902      	add	r1, sp, #8
    8088:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    808c:	9401      	str	r4, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    808e:	f8cd d008 	str.w	sp, [sp, #8]
    8092:	9203      	str	r2, [sp, #12]
		set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, &sd, 1);
    8094:	f7ff f9c6 	bl	7424 <set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    8098:	462a      	mov	r2, r5
    809a:	490c      	ldr	r1, [pc, #48]	; (80cc <bt_set_name+0x8c>)
    809c:	480d      	ldr	r0, [pc, #52]	; (80d4 <bt_set_name+0x94>)
    809e:	f7fb fec5 	bl	3e2c <settings_save_one>
		if (err) {
    80a2:	2800      	cmp	r0, #0
    80a4:	d0d9      	beq.n	805a <bt_set_name+0x1a>
			BT_WARN("Unable to store name");
    80a6:	2302      	movs	r3, #2
    80a8:	f04f 0100 	mov.w	r1, #0
    80ac:	f363 0107 	bfi	r1, r3, #0, #8
    80b0:	4a09      	ldr	r2, [pc, #36]	; (80d8 <bt_set_name+0x98>)
    80b2:	4b0a      	ldr	r3, [pc, #40]	; (80dc <bt_set_name+0x9c>)
    80b4:	480a      	ldr	r0, [pc, #40]	; (80e0 <bt_set_name+0xa0>)
    80b6:	1a9b      	subs	r3, r3, r2
    80b8:	08db      	lsrs	r3, r3, #3
    80ba:	f363 118f 	bfi	r1, r3, #6, #10
    80be:	f016 fcc9 	bl	1ea54 <log_0>
    80c2:	e7ca      	b.n	805a <bt_set_name+0x1a>
		return -ENOMEM;
    80c4:	f06f 000b 	mvn.w	r0, #11
    80c8:	e7c8      	b.n	805c <bt_set_name+0x1c>
    80ca:	bf00      	nop
    80cc:	2000de20 	.word	0x2000de20
    80d0:	2000dd88 	.word	0x2000dd88
    80d4:	00027d10 	.word	0x00027d10
    80d8:	00025a6c 	.word	0x00025a6c
    80dc:	00025b34 	.word	0x00025b34
    80e0:	00027d18 	.word	0x00027d18

000080e4 <bt_get_name>:
}
    80e4:	4800      	ldr	r0, [pc, #0]	; (80e8 <bt_get_name+0x4>)
    80e6:	4770      	bx	lr
    80e8:	2000de20 	.word	0x2000de20

000080ec <bt_id_create>:
{
    80ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    80ee:	460e      	mov	r6, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    80f0:	4605      	mov	r5, r0
    80f2:	b930      	cbnz	r0, 8102 <bt_id_create+0x16>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    80f4:	4b1d      	ldr	r3, [pc, #116]	; (816c <bt_id_create+0x80>)
    80f6:	79dc      	ldrb	r4, [r3, #7]
    80f8:	2c01      	cmp	r4, #1
    80fa:	d12f      	bne.n	815c <bt_id_create+0x70>
		return -ENOMEM;
    80fc:	f06f 040b 	mvn.w	r4, #11
    8100:	e021      	b.n	8146 <bt_id_create+0x5a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8102:	2300      	movs	r3, #0
    8104:	2207      	movs	r2, #7
    8106:	4669      	mov	r1, sp
    8108:	9300      	str	r3, [sp, #0]
    810a:	f8cd 3003 	str.w	r3, [sp, #3]
    810e:	f017 fa63 	bl	1f5d8 <memcmp>
    8112:	2800      	cmp	r0, #0
    8114:	d0ee      	beq.n	80f4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    8116:	782b      	ldrb	r3, [r5, #0]
    8118:	2b01      	cmp	r3, #1
    811a:	d104      	bne.n	8126 <bt_id_create+0x3a>
    811c:	79ab      	ldrb	r3, [r5, #6]
    811e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8122:	2bc0      	cmp	r3, #192	; 0xc0
    8124:	d012      	beq.n	814c <bt_id_create+0x60>
			BT_ERR("Only static random identity address supported");
    8126:	2301      	movs	r3, #1
    8128:	f04f 0100 	mov.w	r1, #0
    812c:	f363 0107 	bfi	r1, r3, #0, #8
    8130:	4a0f      	ldr	r2, [pc, #60]	; (8170 <bt_id_create+0x84>)
    8132:	4b10      	ldr	r3, [pc, #64]	; (8174 <bt_id_create+0x88>)
    8134:	4810      	ldr	r0, [pc, #64]	; (8178 <bt_id_create+0x8c>)
    8136:	1a9b      	subs	r3, r3, r2
    8138:	08db      	lsrs	r3, r3, #3
    813a:	f363 118f 	bfi	r1, r3, #6, #10
    813e:	f016 fc89 	bl	1ea54 <log_0>
			return -EINVAL;
    8142:	f06f 0415 	mvn.w	r4, #21
}
    8146:	4620      	mov	r0, r4
    8148:	b002      	add	sp, #8
    814a:	bd70      	pop	{r4, r5, r6, pc}
		if (id_find(addr) >= 0) {
    814c:	4628      	mov	r0, r5
    814e:	f7fe fd15 	bl	6b7c <id_find>
    8152:	2800      	cmp	r0, #0
    8154:	dbce      	blt.n	80f4 <bt_id_create+0x8>
			return -EALREADY;
    8156:	f06f 0444 	mvn.w	r4, #68	; 0x44
    815a:	e7f4      	b.n	8146 <bt_id_create+0x5a>
	new_id = bt_dev.id_count++;
    815c:	1c62      	adds	r2, r4, #1
    815e:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    8160:	4629      	mov	r1, r5
    8162:	4632      	mov	r2, r6
    8164:	4620      	mov	r0, r4
    8166:	f7ff fce3 	bl	7b30 <id_create>
	return new_id;
    816a:	e7ec      	b.n	8146 <bt_id_create+0x5a>
    816c:	2000dd18 	.word	0x2000dd18
    8170:	00025a6c 	.word	0x00025a6c
    8174:	00025b34 	.word	0x00025b34
    8178:	00027a15 	.word	0x00027a15

0000817c <bt_setup_public_id_addr>:
{
    817c:	b570      	push	{r4, r5, r6, lr}
    817e:	b08e      	sub	sp, #56	; 0x38
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    8180:	aa0a      	add	r2, sp, #40	; 0x28
    8182:	2100      	movs	r1, #0
    8184:	f241 0009 	movw	r0, #4105	; 0x1009
    8188:	f7ff f81e 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    818c:	4e3b      	ldr	r6, [pc, #236]	; (827c <bt_setup_public_id_addr+0x100>)
    818e:	4604      	mov	r4, r0
    8190:	b188      	cbz	r0, 81b6 <bt_setup_public_id_addr+0x3a>
		BT_WARN("Failed to read public address");
    8192:	2302      	movs	r3, #2
    8194:	f04f 0100 	mov.w	r1, #0
    8198:	f363 0107 	bfi	r1, r3, #0, #8
    819c:	4a38      	ldr	r2, [pc, #224]	; (8280 <bt_setup_public_id_addr+0x104>)
    819e:	4b39      	ldr	r3, [pc, #228]	; (8284 <bt_setup_public_id_addr+0x108>)
    81a0:	4839      	ldr	r0, [pc, #228]	; (8288 <bt_setup_public_id_addr+0x10c>)
    81a2:	1a9b      	subs	r3, r3, r2
    81a4:	08db      	lsrs	r3, r3, #3
    81a6:	f363 118f 	bfi	r1, r3, #6, #10
    81aa:	f016 fc53 	bl	1ea54 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    81ae:	2300      	movs	r3, #0
    81b0:	71f3      	strb	r3, [r6, #7]
}
    81b2:	b00e      	add	sp, #56	; 0x38
    81b4:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    81b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    81b8:	9002      	str	r0, [sp, #8]
    81ba:	689d      	ldr	r5, [r3, #8]
    81bc:	f8ad 000c 	strh.w	r0, [sp, #12]
    81c0:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    81c2:	2206      	movs	r2, #6
    81c4:	a902      	add	r1, sp, #8
    81c6:	4628      	mov	r0, r5
    81c8:	f017 fa06 	bl	1f5d8 <memcmp>
    81cc:	b918      	cbnz	r0, 81d6 <bt_setup_public_id_addr+0x5a>
		net_buf_unref(rsp);
    81ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    81d0:	f00f fa00 	bl	175d4 <net_buf_unref>
    81d4:	e7eb      	b.n	81ae <bt_setup_public_id_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    81d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    81da:	2206      	movs	r2, #6
    81dc:	4669      	mov	r1, sp
    81de:	4628      	mov	r0, r5
    81e0:	9300      	str	r3, [sp, #0]
    81e2:	f8ad 3004 	strh.w	r3, [sp, #4]
    81e6:	f017 f9f7 	bl	1f5d8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    81ea:	2800      	cmp	r0, #0
    81ec:	d0ef      	beq.n	81ce <bt_setup_public_id_addr+0x52>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    81ee:	4629      	mov	r1, r5
    81f0:	f10d 0011 	add.w	r0, sp, #17
    81f4:	f017 fd43 	bl	1fc7e <bt_addr_copy>
	net_buf_unref(rsp);
    81f8:	980a      	ldr	r0, [sp, #40]	; 0x28
	addr->type = BT_ADDR_LE_PUBLIC;
    81fa:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    81fe:	f00f f9e9 	bl	175d4 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    8202:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    8204:	2210      	movs	r2, #16
    8206:	4621      	mov	r1, r4
    8208:	a80a      	add	r0, sp, #40	; 0x28
	bt_dev.id_count = bt_read_public_addr(&addr);
    820a:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    820c:	f017 fa1e 	bl	1f64c <memset>
	if (!(bt_dev.vs_commands[1] & BIT(1))) {
    8210:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    8214:	079b      	lsls	r3, r3, #30
    8216:	d514      	bpl.n	8242 <bt_setup_public_id_addr+0xc6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    8218:	aa06      	add	r2, sp, #24
    821a:	4621      	mov	r1, r4
    821c:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    8220:	f7fe ffd2 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    8224:	b1e8      	cbz	r0, 8262 <bt_setup_public_id_addr+0xe6>
		BT_WARN("Failed to read identity root");
    8226:	2302      	movs	r3, #2
    8228:	f04f 0100 	mov.w	r1, #0
    822c:	f363 0107 	bfi	r1, r3, #0, #8
    8230:	4a13      	ldr	r2, [pc, #76]	; (8280 <bt_setup_public_id_addr+0x104>)
    8232:	4b14      	ldr	r3, [pc, #80]	; (8284 <bt_setup_public_id_addr+0x108>)
    8234:	4815      	ldr	r0, [pc, #84]	; (828c <bt_setup_public_id_addr+0x110>)
    8236:	1a9b      	subs	r3, r3, r2
    8238:	08db      	lsrs	r3, r3, #3
    823a:	f363 118f 	bfi	r1, r3, #6, #10
    823e:	f016 fc09 	bl	1ea54 <log_0>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    8242:	a906      	add	r1, sp, #24
    8244:	a80a      	add	r0, sp, #40	; 0x28
    8246:	f019 faa8 	bl	2179a <bt_smp_irk_get>
    824a:	b1a8      	cbz	r0, 8278 <bt_setup_public_id_addr+0xfc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    824c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    8250:	480f      	ldr	r0, [pc, #60]	; (8290 <bt_setup_public_id_addr+0x114>)
    8252:	f017 fd1a 	bl	1fc8a <atomic_or>
	u8_t *irk = NULL;
    8256:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    8258:	a904      	add	r1, sp, #16
    825a:	2000      	movs	r0, #0
    825c:	f7ff fc68 	bl	7b30 <id_create>
    8260:	e7a7      	b.n	81b2 <bt_setup_public_id_addr+0x36>
	rp = (void *)rsp->data;
    8262:	9b06      	ldr	r3, [sp, #24]
	memcpy(ir, rp->ir, 16);
    8264:	6899      	ldr	r1, [r3, #8]
    8266:	2210      	movs	r2, #16
    8268:	3101      	adds	r1, #1
    826a:	a80a      	add	r0, sp, #40	; 0x28
    826c:	f017 f9c4 	bl	1f5f8 <memcpy>
	net_buf_unref(rsp);
    8270:	9806      	ldr	r0, [sp, #24]
    8272:	f00f f9af 	bl	175d4 <net_buf_unref>
    8276:	e7e4      	b.n	8242 <bt_setup_public_id_addr+0xc6>
		irk = ir_irk;
    8278:	aa06      	add	r2, sp, #24
    827a:	e7ed      	b.n	8258 <bt_setup_public_id_addr+0xdc>
    827c:	2000dd18 	.word	0x2000dd18
    8280:	00025a6c 	.word	0x00025a6c
    8284:	00025b34 	.word	0x00025b34
    8288:	00027d2d 	.word	0x00027d2d
    828c:	00027d4b 	.word	0x00027d4b
    8290:	2000dd88 	.word	0x2000dd88

00008294 <bt_setup_random_id_addr>:
{
    8294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.id_count) {
    8298:	4c47      	ldr	r4, [pc, #284]	; (83b8 <bt_setup_random_id_addr+0x124>)
    829a:	79e7      	ldrb	r7, [r4, #7]
{
    829c:	b08d      	sub	sp, #52	; 0x34
    829e:	4626      	mov	r6, r4
	if (!bt_dev.id_count) {
    82a0:	b99f      	cbnz	r7, 82ca <bt_setup_random_id_addr+0x36>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    82a2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    82a6:	f013 0501 	ands.w	r5, r3, #1
    82aa:	d118      	bne.n	82de <bt_setup_random_id_addr+0x4a>
		BT_WARN("Read Static Addresses command not available");
    82ac:	2302      	movs	r3, #2
    82ae:	f04f 0100 	mov.w	r1, #0
    82b2:	f363 0107 	bfi	r1, r3, #0, #8
    82b6:	4a41      	ldr	r2, [pc, #260]	; (83bc <bt_setup_random_id_addr+0x128>)
    82b8:	4b41      	ldr	r3, [pc, #260]	; (83c0 <bt_setup_random_id_addr+0x12c>)
    82ba:	4842      	ldr	r0, [pc, #264]	; (83c4 <bt_setup_random_id_addr+0x130>)
    82bc:	1a9b      	subs	r3, r3, r2
    82be:	08db      	lsrs	r3, r3, #3
    82c0:	f363 118f 	bfi	r1, r3, #6, #10
    82c4:	f016 fbc6 	bl	1ea54 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    82c8:	71e5      	strb	r5, [r4, #7]
    82ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    82ce:	483e      	ldr	r0, [pc, #248]	; (83c8 <bt_setup_random_id_addr+0x134>)
    82d0:	f017 fcdb 	bl	1fc8a <atomic_or>
	return bt_id_create(NULL, NULL);
    82d4:	2100      	movs	r1, #0
    82d6:	4608      	mov	r0, r1
    82d8:	f7ff ff08 	bl	80ec <bt_id_create>
    82dc:	e05e      	b.n	839c <bt_setup_random_id_addr+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    82de:	aa02      	add	r2, sp, #8
    82e0:	4639      	mov	r1, r7
    82e2:	f64f 4009 	movw	r0, #64521	; 0xfc09
    82e6:	f7fe ff6f 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    82ea:	b178      	cbz	r0, 830c <bt_setup_random_id_addr+0x78>
		BT_WARN("Failed to read static addresses");
    82ec:	2302      	movs	r3, #2
    82ee:	f04f 0100 	mov.w	r1, #0
    82f2:	f363 0107 	bfi	r1, r3, #0, #8
    82f6:	4a31      	ldr	r2, [pc, #196]	; (83bc <bt_setup_random_id_addr+0x128>)
    82f8:	4b31      	ldr	r3, [pc, #196]	; (83c0 <bt_setup_random_id_addr+0x12c>)
    82fa:	4834      	ldr	r0, [pc, #208]	; (83cc <bt_setup_random_id_addr+0x138>)
    82fc:	1a9b      	subs	r3, r3, r2
    82fe:	08db      	lsrs	r3, r3, #3
    8300:	f363 118f 	bfi	r1, r3, #6, #10
    8304:	f016 fba6 	bl	1ea54 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    8308:	71e7      	strb	r7, [r4, #7]
		if (bt_dev.id_count) {
    830a:	e7de      	b.n	82ca <bt_setup_random_id_addr+0x36>
	rp = (void *)rsp->data;
    830c:	9b02      	ldr	r3, [sp, #8]
    830e:	689c      	ldr	r4, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    8310:	7865      	ldrb	r5, [r4, #1]
    8312:	1c2f      	adds	r7, r5, #0
    8314:	bf18      	it	ne
    8316:	2701      	movne	r7, #1
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    8318:	3402      	adds	r4, #2
	for (i = 0; i < cnt; i++) {
    831a:	4287      	cmp	r7, r0
    831c:	dc41      	bgt.n	83a2 <bt_setup_random_id_addr+0x10e>
	net_buf_unref(rsp);
    831e:	9802      	ldr	r0, [sp, #8]
    8320:	f00f f958 	bl	175d4 <net_buf_unref>
	if (!cnt) {
    8324:	b96d      	cbnz	r5, 8342 <bt_setup_random_id_addr+0xae>
		BT_WARN("No static addresses stored in controller");
    8326:	2302      	movs	r3, #2
    8328:	f04f 0100 	mov.w	r1, #0
    832c:	f363 0107 	bfi	r1, r3, #0, #8
    8330:	4a22      	ldr	r2, [pc, #136]	; (83bc <bt_setup_random_id_addr+0x128>)
    8332:	4b23      	ldr	r3, [pc, #140]	; (83c0 <bt_setup_random_id_addr+0x12c>)
    8334:	4826      	ldr	r0, [pc, #152]	; (83d0 <bt_setup_random_id_addr+0x13c>)
    8336:	1a9b      	subs	r3, r3, r2
    8338:	08db      	lsrs	r3, r3, #3
    833a:	f363 118f 	bfi	r1, r3, #6, #10
    833e:	f016 fb89 	bl	1ea54 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    8342:	71f7      	strb	r7, [r6, #7]
		if (bt_dev.id_count) {
    8344:	2d00      	cmp	r5, #0
    8346:	d0c0      	beq.n	82ca <bt_setup_random_id_addr+0x36>
    8348:	f8df 907c 	ldr.w	r9, [pc, #124]	; 83c8 <bt_setup_random_id_addr+0x134>
    834c:	2400      	movs	r4, #0
    834e:	b2e7      	uxtb	r7, r4
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    8350:	2516      	movs	r5, #22
    8352:	437d      	muls	r5, r7
    8354:	1da8      	adds	r0, r5, #6
    8356:	ab06      	add	r3, sp, #24
    8358:	a902      	add	r1, sp, #8
    835a:	4418      	add	r0, r3
    835c:	f019 fa1d 	bl	2179a <bt_smp_irk_get>
    8360:	b330      	cbz	r0, 83b0 <bt_setup_random_id_addr+0x11c>
    8362:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    8366:	4648      	mov	r0, r9
    8368:	f017 fc8f 	bl	1fc8a <atomic_or>
				u8_t *irk = NULL;
    836c:	f04f 0800 	mov.w	r8, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    8370:	ab06      	add	r3, sp, #24
    8372:	1959      	adds	r1, r3, r5
    8374:	f10d 0001 	add.w	r0, sp, #1
    8378:	f017 fc81 	bl	1fc7e <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    837c:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    837e:	4642      	mov	r2, r8
    8380:	4669      	mov	r1, sp
    8382:	4638      	mov	r0, r7
				addr.type = BT_ADDR_LE_RANDOM;
    8384:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    8388:	3401      	adds	r4, #1
    838a:	f7ff fbd1 	bl	7b30 <id_create>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    838e:	79f2      	ldrb	r2, [r6, #7]
    8390:	b2e3      	uxtb	r3, r4
    8392:	429a      	cmp	r2, r3
    8394:	d8db      	bhi.n	834e <bt_setup_random_id_addr+0xba>
			return set_random_address(&bt_dev.id_addr[0].a);
    8396:	480f      	ldr	r0, [pc, #60]	; (83d4 <bt_setup_random_id_addr+0x140>)
    8398:	f7fe ff8c 	bl	72b4 <set_random_address>
}
    839c:	b00d      	add	sp, #52	; 0x34
    839e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    83a2:	2216      	movs	r2, #22
    83a4:	4621      	mov	r1, r4
    83a6:	a806      	add	r0, sp, #24
    83a8:	f017 f926 	bl	1f5f8 <memcpy>
	for (i = 0; i < cnt; i++) {
    83ac:	2001      	movs	r0, #1
    83ae:	e7b4      	b.n	831a <bt_setup_random_id_addr+0x86>
					irk = ir_irk;
    83b0:	f10d 0808 	add.w	r8, sp, #8
    83b4:	e7dc      	b.n	8370 <bt_setup_random_id_addr+0xdc>
    83b6:	bf00      	nop
    83b8:	2000dd18 	.word	0x2000dd18
    83bc:	00025a6c 	.word	0x00025a6c
    83c0:	00025b34 	.word	0x00025b34
    83c4:	00027d68 	.word	0x00027d68
    83c8:	2000dd88 	.word	0x2000dd88
    83cc:	00027d94 	.word	0x00027d94
    83d0:	00027db4 	.word	0x00027db4
    83d4:	2000dd19 	.word	0x2000dd19

000083d8 <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    83d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    83dc:	4ea7      	ldr	r6, [pc, #668]	; (867c <bt_le_adv_start_internal+0x2a4>)
{
    83de:	b08d      	sub	sp, #52	; 0x34
    83e0:	4605      	mov	r5, r0
    83e2:	9102      	str	r1, [sp, #8]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    83e4:	f106 0070 	add.w	r0, r6, #112	; 0x70
    83e8:	2101      	movs	r1, #1
{
    83ea:	4693      	mov	fp, r2
    83ec:	4699      	mov	r9, r3
    83ee:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    83f2:	f017 fc9a 	bl	1fd2a <atomic_test_bit>
    83f6:	2800      	cmp	r0, #0
    83f8:	f000 8133 	beq.w	8662 <bt_le_adv_start_internal+0x28a>
	if (param->id >= bt_dev.id_count ||
    83fc:	7828      	ldrb	r0, [r5, #0]
    83fe:	79f3      	ldrb	r3, [r6, #7]
    8400:	4283      	cmp	r3, r0
    8402:	d805      	bhi.n	8410 <bt_le_adv_start_internal+0x38>
		return -EAGAIN;
	}

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    8404:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);

	return 0;
}
    8408:	4620      	mov	r0, r4
    840a:	b00d      	add	sp, #52	; 0x34
    840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    8410:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8414:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    8416:	2207      	movs	r2, #7
    8418:	a906      	add	r1, sp, #24
    841a:	4430      	add	r0, r6
    841c:	9306      	str	r3, [sp, #24]
    841e:	f8cd 301b 	str.w	r3, [sp, #27]
    8422:	f017 f8d9 	bl	1f5d8 <memcmp>
	if (param->id >= bt_dev.id_count ||
    8426:	2800      	cmp	r0, #0
    8428:	d0ec      	beq.n	8404 <bt_le_adv_start_internal+0x2c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    842a:	786b      	ldrb	r3, [r5, #1]
    842c:	07d8      	lsls	r0, r3, #31
    842e:	d405      	bmi.n	843c <bt_le_adv_start_internal+0x64>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    8430:	7c32      	ldrb	r2, [r6, #16]
    8432:	2a08      	cmp	r2, #8
    8434:	d802      	bhi.n	843c <bt_le_adv_start_internal+0x64>
    8436:	886a      	ldrh	r2, [r5, #2]
    8438:	2a9f      	cmp	r2, #159	; 0x9f
    843a:	d9e3      	bls.n	8404 <bt_le_adv_start_internal+0x2c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    843c:	06d9      	lsls	r1, r3, #27
    843e:	d402      	bmi.n	8446 <bt_le_adv_start_internal+0x6e>
    8440:	f1b8 0f00 	cmp.w	r8, #0
    8444:	d108      	bne.n	8458 <bt_le_adv_start_internal+0x80>
		if (param->interval_min > param->interval_max ||
    8446:	886a      	ldrh	r2, [r5, #2]
    8448:	88ab      	ldrh	r3, [r5, #4]
    844a:	429a      	cmp	r2, r3
    844c:	d8da      	bhi.n	8404 <bt_le_adv_start_internal+0x2c>
    844e:	2a1f      	cmp	r2, #31
    8450:	d9d8      	bls.n	8404 <bt_le_adv_start_internal+0x2c>
		    param->interval_min < 0x0020 ||
    8452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    8456:	d8d5      	bhi.n	8404 <bt_le_adv_start_internal+0x2c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    8458:	2105      	movs	r1, #5
    845a:	4889      	ldr	r0, [pc, #548]	; (8680 <bt_le_adv_start_internal+0x2a8>)
    845c:	f017 fc65 	bl	1fd2a <atomic_test_bit>
    8460:	4601      	mov	r1, r0
    8462:	2800      	cmp	r0, #0
    8464:	f040 8100 	bne.w	8668 <bt_le_adv_start_internal+0x290>
	(void)memset(&set_param, 0, sizeof(set_param));
    8468:	220f      	movs	r2, #15
    846a:	a808      	add	r0, sp, #32
    846c:	f017 f8ee 	bl	1f64c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    8470:	886b      	ldrh	r3, [r5, #2]
    8472:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    8476:	88ab      	ldrh	r3, [r5, #4]
    8478:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = 0x07;
    847c:	2307      	movs	r3, #7
    847e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	if (bt_dev.adv_id != param->id) {
    8482:	7a32      	ldrb	r2, [r6, #8]
    8484:	782b      	ldrb	r3, [r5, #0]
    8486:	429a      	cmp	r2, r3
    8488:	d004      	beq.n	8494 <bt_le_adv_start_internal+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    848a:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
    848e:	487c      	ldr	r0, [pc, #496]	; (8680 <bt_le_adv_start_internal+0x2a8>)
    8490:	f017 fbe6 	bl	1fc60 <atomic_and>
	bt_dev.adv_id = param->id;
    8494:	782f      	ldrb	r7, [r5, #0]
    8496:	7237      	strb	r7, [r6, #8]
		set_param.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;
    8498:	2300      	movs	r3, #0
    849a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    849e:	786b      	ldrb	r3, [r5, #1]
    84a0:	f013 0a01 	ands.w	sl, r3, #1
    84a4:	f003 0204 	and.w	r2, r3, #4
    84a8:	d071      	beq.n	858e <bt_le_adv_start_internal+0x1b6>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    84aa:	2a00      	cmp	r2, #0
    84ac:	d158      	bne.n	8560 <bt_le_adv_start_internal+0x188>
			err = le_set_private_addr(param->id);
    84ae:	4638      	mov	r0, r7
    84b0:	f7fe ff2c 	bl	730c <le_set_private_addr>
			if (err) {
    84b4:	4604      	mov	r4, r0
    84b6:	2800      	cmp	r0, #0
    84b8:	d1a6      	bne.n	8408 <bt_le_adv_start_internal+0x30>
			if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    84ba:	f896 2078 	ldrb.w	r2, [r6, #120]	; 0x78
    84be:	0652      	lsls	r2, r2, #25
				set_param.own_addr_type =
    84c0:	bf4c      	ite	mi
    84c2:	2203      	movmi	r2, #3
				set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    84c4:	2201      	movpl	r2, #1
    84c6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		if (dir_adv) {
    84ca:	f1b8 0f00 	cmp.w	r8, #0
    84ce:	d05b      	beq.n	8588 <bt_le_adv_start_internal+0x1b0>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    84d0:	786a      	ldrb	r2, [r5, #1]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    84d2:	f012 0f10 	tst.w	r2, #16
    84d6:	bf18      	it	ne
    84d8:	f04f 0a04 	movne.w	sl, #4
			bt_addr_le_copy(&set_param.direct_addr, peer);
    84dc:	4641      	mov	r1, r8
    84de:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    84e2:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    84e6:	f017 fbcd 	bl	1fc84 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    84ea:	210f      	movs	r1, #15
    84ec:	f242 0006 	movw	r0, #8198	; 0x2006
    84f0:	f7fe fcfc 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    84f4:	4604      	mov	r4, r0
    84f6:	2800      	cmp	r0, #0
    84f8:	f000 80b9 	beq.w	866e <bt_le_adv_start_internal+0x296>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    84fc:	220f      	movs	r2, #15
    84fe:	a908      	add	r1, sp, #32
    8500:	3008      	adds	r0, #8
    8502:	f01a f89d 	bl	22640 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    8506:	4621      	mov	r1, r4
    8508:	2200      	movs	r2, #0
    850a:	f242 0006 	movw	r0, #8198	; 0x2006
    850e:	f7fe fe5b 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    8512:	4604      	mov	r4, r0
    8514:	2800      	cmp	r0, #0
    8516:	f47f af77 	bne.w	8408 <bt_le_adv_start_internal+0x30>
	if (!dir_adv) {
    851a:	f1b8 0f00 	cmp.w	r8, #0
    851e:	d05d      	beq.n	85dc <bt_le_adv_start_internal+0x204>
	struct bt_conn *conn = NULL;
    8520:	2600      	movs	r6, #0
	err = set_advertise_enable(true);
    8522:	2001      	movs	r0, #1
    8524:	f7fe fe96 	bl	7254 <set_advertise_enable>
	if (err) {
    8528:	4604      	mov	r4, r0
    852a:	2800      	cmp	r0, #0
    852c:	d07d      	beq.n	862a <bt_le_adv_start_internal+0x252>
		BT_ERR("Failed to start advertiser");
    852e:	2301      	movs	r3, #1
    8530:	f04f 0100 	mov.w	r1, #0
    8534:	f363 0107 	bfi	r1, r3, #0, #8
    8538:	4a52      	ldr	r2, [pc, #328]	; (8684 <bt_le_adv_start_internal+0x2ac>)
    853a:	4b53      	ldr	r3, [pc, #332]	; (8688 <bt_le_adv_start_internal+0x2b0>)
    853c:	4853      	ldr	r0, [pc, #332]	; (868c <bt_le_adv_start_internal+0x2b4>)
    853e:	1a9b      	subs	r3, r3, r2
    8540:	08db      	lsrs	r3, r3, #3
    8542:	f363 118f 	bfi	r1, r3, #6, #10
    8546:	f016 fa85 	bl	1ea54 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    854a:	2e00      	cmp	r6, #0
    854c:	f43f af5c 	beq.w	8408 <bt_le_adv_start_internal+0x30>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8550:	4630      	mov	r0, r6
    8552:	2100      	movs	r1, #0
    8554:	f000 fe88 	bl	9268 <bt_conn_set_state>
			bt_conn_unref(conn);
    8558:	4630      	mov	r0, r6
    855a:	f017 fd24 	bl	1ffa6 <bt_conn_unref>
    855e:	e753      	b.n	8408 <bt_le_adv_start_internal+0x30>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8560:	00fa      	lsls	r2, r7, #3
    8562:	1bd1      	subs	r1, r2, r7
    8564:	5c71      	ldrb	r1, [r6, r1]
    8566:	2901      	cmp	r1, #1
    8568:	d002      	beq.n	8570 <bt_le_adv_start_internal+0x198>
			set_param.own_addr_type = id_addr->type;
    856a:	1bd7      	subs	r7, r2, r7
    856c:	5df2      	ldrb	r2, [r6, r7]
    856e:	e7aa      	b.n	84c6 <bt_le_adv_start_internal+0xee>
				err = set_random_address(&id_addr->a);
    8570:	2007      	movs	r0, #7
    8572:	fb10 1007 	smlabb	r0, r0, r7, r1
    8576:	4430      	add	r0, r6
    8578:	9203      	str	r2, [sp, #12]
    857a:	f7fe fe9b 	bl	72b4 <set_random_address>
				if (err) {
    857e:	9a03      	ldr	r2, [sp, #12]
    8580:	4604      	mov	r4, r0
    8582:	2800      	cmp	r0, #0
    8584:	d0f1      	beq.n	856a <bt_le_adv_start_internal+0x192>
    8586:	e73f      	b.n	8408 <bt_le_adv_start_internal+0x30>
			set_param.type = BT_LE_ADV_IND;
    8588:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
    858c:	e7ad      	b.n	84ea <bt_le_adv_start_internal+0x112>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    858e:	b1ea      	cbz	r2, 85cc <bt_le_adv_start_internal+0x1f4>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8590:	00fa      	lsls	r2, r7, #3
    8592:	1bd1      	subs	r1, r2, r7
    8594:	5c71      	ldrb	r1, [r6, r1]
    8596:	2901      	cmp	r1, #1
    8598:	d116      	bne.n	85c8 <bt_le_adv_start_internal+0x1f0>
				err = set_random_address(&id_addr->a);
    859a:	2007      	movs	r0, #7
    859c:	fb10 1007 	smlabb	r0, r0, r7, r1
    85a0:	4430      	add	r0, r6
    85a2:	9203      	str	r2, [sp, #12]
    85a4:	f7fe fe86 	bl	72b4 <set_random_address>
    85a8:	9a03      	ldr	r2, [sp, #12]
    85aa:	4604      	mov	r4, r0
			set_param.own_addr_type = id_addr->type;
    85ac:	1bd7      	subs	r7, r2, r7
    85ae:	5df3      	ldrb	r3, [r6, r7]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    85b0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		if (err) {
    85b4:	2c00      	cmp	r4, #0
    85b6:	f47f af27 	bne.w	8408 <bt_le_adv_start_internal+0x30>
		if (sd) {
    85ba:	f1b9 0f00 	cmp.w	r9, #0
    85be:	d00b      	beq.n	85d8 <bt_le_adv_start_internal+0x200>
			set_param.type = BT_LE_ADV_SCAN_IND;
    85c0:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    85c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    85c6:	e790      	b.n	84ea <bt_le_adv_start_internal+0x112>
	int err = 0;
    85c8:	4654      	mov	r4, sl
    85ca:	e7ef      	b.n	85ac <bt_le_adv_start_internal+0x1d4>
			err = le_set_private_addr(param->id);
    85cc:	4638      	mov	r0, r7
    85ce:	f7fe fe9d 	bl	730c <le_set_private_addr>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    85d2:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    85d4:	4604      	mov	r4, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    85d6:	e7eb      	b.n	85b0 <bt_le_adv_start_internal+0x1d8>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    85d8:	2303      	movs	r3, #3
    85da:	e7f2      	b.n	85c2 <bt_le_adv_start_internal+0x1ea>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    85dc:	786b      	ldrb	r3, [r5, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    85de:	9802      	ldr	r0, [sp, #8]
    85e0:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    85e4:	f003 0301 	and.w	r3, r3, #1
    85e8:	9201      	str	r2, [sp, #4]
    85ea:	9300      	str	r3, [sp, #0]
    85ec:	464a      	mov	r2, r9
    85ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85f0:	4659      	mov	r1, fp
    85f2:	f7fe ff87 	bl	7504 <le_adv_update>
		if (err) {
    85f6:	4604      	mov	r4, r0
    85f8:	2800      	cmp	r0, #0
    85fa:	f47f af05 	bne.w	8408 <bt_le_adv_start_internal+0x30>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    85fe:	786b      	ldrb	r3, [r5, #1]
    8600:	07db      	lsls	r3, r3, #31
    8602:	d58d      	bpl.n	8520 <bt_le_adv_start_internal+0x148>
			conn = bt_conn_add_le(param->id, BT_ADDR_LE_NONE);
    8604:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    8608:	9304      	str	r3, [sp, #16]
    860a:	a904      	add	r1, sp, #16
    860c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8610:	7828      	ldrb	r0, [r5, #0]
    8612:	f8ad 3014 	strh.w	r3, [sp, #20]
    8616:	f88d 3016 	strb.w	r3, [sp, #22]
    861a:	f000 fde5 	bl	91e8 <bt_conn_add_le>
			if (!conn) {
    861e:	4606      	mov	r6, r0
    8620:	b340      	cbz	r0, 8674 <bt_le_adv_start_internal+0x29c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    8622:	2103      	movs	r1, #3
    8624:	f000 fe20 	bl	9268 <bt_conn_set_state>
    8628:	e77b      	b.n	8522 <bt_le_adv_start_internal+0x14a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    862a:	b116      	cbz	r6, 8632 <bt_le_adv_start_internal+0x25a>
		bt_conn_unref(conn);
    862c:	4630      	mov	r0, r6
    862e:	f017 fcba 	bl	1ffa6 <bt_conn_unref>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_KEEP_ADVERTISING,
    8632:	786a      	ldrb	r2, [r5, #1]
    8634:	4812      	ldr	r0, [pc, #72]	; (8680 <bt_le_adv_start_internal+0x2a8>)
    8636:	f082 0202 	eor.w	r2, r2, #2
    863a:	f3c2 0240 	ubfx	r2, r2, #1, #1
    863e:	2108      	movs	r1, #8
    8640:	f017 fb32 	bl	1fca8 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_NAME,
    8644:	786a      	ldrb	r2, [r5, #1]
    8646:	480e      	ldr	r0, [pc, #56]	; (8680 <bt_le_adv_start_internal+0x2a8>)
    8648:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    864c:	2106      	movs	r1, #6
    864e:	f017 fb2b 	bl	1fca8 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
    8652:	786a      	ldrb	r2, [r5, #1]
    8654:	480a      	ldr	r0, [pc, #40]	; (8680 <bt_le_adv_start_internal+0x2a8>)
    8656:	f002 0201 	and.w	r2, r2, #1
    865a:	2107      	movs	r1, #7
    865c:	f017 fb24 	bl	1fca8 <atomic_set_bit_to>
	return 0;
    8660:	e6d2      	b.n	8408 <bt_le_adv_start_internal+0x30>
		return -EAGAIN;
    8662:	f06f 040a 	mvn.w	r4, #10
    8666:	e6cf      	b.n	8408 <bt_le_adv_start_internal+0x30>
		return -EALREADY;
    8668:	f06f 0444 	mvn.w	r4, #68	; 0x44
    866c:	e6cc      	b.n	8408 <bt_le_adv_start_internal+0x30>
		return -ENOBUFS;
    866e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8672:	e6c9      	b.n	8408 <bt_le_adv_start_internal+0x30>
				return -ENOMEM;
    8674:	f06f 040b 	mvn.w	r4, #11
    8678:	e6c6      	b.n	8408 <bt_le_adv_start_internal+0x30>
    867a:	bf00      	nop
    867c:	2000dd18 	.word	0x2000dd18
    8680:	2000dd88 	.word	0x2000dd88
    8684:	00025a6c 	.word	0x00025a6c
    8688:	00025b34 	.word	0x00025b34
    868c:	00027bf8 	.word	0x00027bf8

00008690 <bt_le_adv_stop>:

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
}

int bt_le_adv_stop(void)
{
    8690:	b513      	push	{r0, r1, r4, lr}
    8692:	f46f 7180 	mvn.w	r1, #256	; 0x100
    8696:	4817      	ldr	r0, [pc, #92]	; (86f4 <bt_le_adv_stop+0x64>)
    8698:	f017 fae2 	bl	1fc60 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    869c:	2105      	movs	r1, #5
    869e:	4815      	ldr	r0, [pc, #84]	; (86f4 <bt_le_adv_stop+0x64>)
    86a0:	f017 fb43 	bl	1fd2a <atomic_test_bit>
    86a4:	b318      	cbz	r0, 86ee <bt_le_adv_stop+0x5e>
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL)) {
		struct bt_conn *conn;

		conn = bt_conn_lookup_state_le(BT_ADDR_LE_NONE,
    86a6:	4b14      	ldr	r3, [pc, #80]	; (86f8 <bt_le_adv_stop+0x68>)
    86a8:	6818      	ldr	r0, [r3, #0]
    86aa:	889a      	ldrh	r2, [r3, #4]
    86ac:	9000      	str	r0, [sp, #0]
    86ae:	799b      	ldrb	r3, [r3, #6]
    86b0:	f8ad 2004 	strh.w	r2, [sp, #4]
    86b4:	2103      	movs	r1, #3
    86b6:	4668      	mov	r0, sp
    86b8:	f88d 3006 	strb.w	r3, [sp, #6]
    86bc:	f000 fed6 	bl	946c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_ADV);
		if (conn) {
    86c0:	4604      	mov	r4, r0
    86c2:	b128      	cbz	r0, 86d0 <bt_le_adv_stop+0x40>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    86c4:	2100      	movs	r1, #0
    86c6:	f000 fdcf 	bl	9268 <bt_conn_set_state>
			bt_conn_unref(conn);
    86ca:	4620      	mov	r0, r4
    86cc:	f017 fc6b 	bl	1ffa6 <bt_conn_unref>
		}

		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_DIR_ADV);
    86d0:	2104      	movs	r1, #4
    86d2:	2000      	movs	r0, #0
    86d4:	f000 feca 	bl	946c <bt_conn_lookup_state_le>
		if (conn) {
    86d8:	4604      	mov	r4, r0
    86da:	b128      	cbz	r0, 86e8 <bt_le_adv_stop+0x58>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    86dc:	2100      	movs	r1, #0
    86de:	f000 fdc3 	bl	9268 <bt_conn_set_state>
			bt_conn_unref(conn);
    86e2:	4620      	mov	r0, r4
    86e4:	f017 fc5f 	bl	1ffa6 <bt_conn_unref>
		}
	}

	err = set_advertise_enable(false);
    86e8:	2000      	movs	r0, #0
    86ea:	f7fe fdb3 	bl	7254 <set_advertise_enable>
			le_set_private_addr(bt_dev.adv_id);
		}
	}

	return 0;
}
    86ee:	b002      	add	sp, #8
    86f0:	bd10      	pop	{r4, pc}
    86f2:	bf00      	nop
    86f4:	2000dd88 	.word	0x2000dd88
    86f8:	00025c38 	.word	0x00025c38

000086fc <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    86fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *adv_conn;
	int err;

	BT_ASSERT(atomic_test_bit(bt_dev.flags,
    86fe:	2107      	movs	r1, #7
    8700:	4819      	ldr	r0, [pc, #100]	; (8768 <bt_le_adv_resume+0x6c>)
    8702:	f017 fb12 	bl	1fd2a <atomic_test_bit>
    8706:	b960      	cbnz	r0, 8722 <bt_le_adv_resume+0x26>
    8708:	f241 73a4 	movw	r3, #6052	; 0x17a4
    870c:	4a17      	ldr	r2, [pc, #92]	; (876c <bt_le_adv_resume+0x70>)
    870e:	4918      	ldr	r1, [pc, #96]	; (8770 <bt_le_adv_resume+0x74>)
    8710:	4818      	ldr	r0, [pc, #96]	; (8774 <bt_le_adv_resume+0x78>)
    8712:	f015 f850 	bl	1d7b6 <printk>
    8716:	4040      	eors	r0, r0
    8718:	f380 8811 	msr	BASEPRI, r0
    871c:	f04f 0003 	mov.w	r0, #3
    8720:	df02      	svc	2
				  BT_DEV_ADVERTISING_CONNECTABLE));

	adv_conn = bt_conn_add_le(bt_dev.adv_id, BT_ADDR_LE_NONE);
    8722:	4b15      	ldr	r3, [pc, #84]	; (8778 <bt_le_adv_resume+0x7c>)
    8724:	4d15      	ldr	r5, [pc, #84]	; (877c <bt_le_adv_resume+0x80>)
    8726:	6818      	ldr	r0, [r3, #0]
    8728:	889a      	ldrh	r2, [r3, #4]
    872a:	9000      	str	r0, [sp, #0]
    872c:	799b      	ldrb	r3, [r3, #6]
    872e:	7a28      	ldrb	r0, [r5, #8]
    8730:	f8ad 2004 	strh.w	r2, [sp, #4]
    8734:	4669      	mov	r1, sp
    8736:	f88d 3006 	strb.w	r3, [sp, #6]
    873a:	f000 fd55 	bl	91e8 <bt_conn_add_le>
	if (!adv_conn) {
    873e:	4604      	mov	r4, r0
    8740:	b180      	cbz	r0, 8764 <bt_le_adv_resume+0x68>
		return;
	}

	bt_conn_set_state(adv_conn, BT_CONN_CONNECT_ADV);
    8742:	2103      	movs	r1, #3
    8744:	f000 fd90 	bl	9268 <bt_conn_set_state>

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		le_set_private_addr(bt_dev.adv_id);
    8748:	7a28      	ldrb	r0, [r5, #8]
    874a:	f7fe fddf 	bl	730c <le_set_private_addr>
	}

	err = set_advertise_enable(true);
    874e:	2001      	movs	r0, #1
    8750:	f7fe fd80 	bl	7254 <set_advertise_enable>
	if (err) {
    8754:	b118      	cbz	r0, 875e <bt_le_adv_resume+0x62>
		bt_conn_set_state(adv_conn, BT_CONN_DISCONNECTED);
    8756:	2100      	movs	r1, #0
    8758:	4620      	mov	r0, r4
    875a:	f000 fd85 	bl	9268 <bt_conn_set_state>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(adv_conn);
    875e:	4620      	mov	r0, r4
    8760:	f017 fc21 	bl	1ffa6 <bt_conn_unref>
}
    8764:	b003      	add	sp, #12
    8766:	bd30      	pop	{r4, r5, pc}
    8768:	2000dd88 	.word	0x2000dd88
    876c:	00027fbe 	.word	0x00027fbe
    8770:	00027bba 	.word	0x00027bba
    8774:	00027ff4 	.word	0x00027ff4
    8778:	00025c38 	.word	0x00025c38
    877c:	2000dd18 	.word	0x2000dd18

00008780 <hci_disconn_complete>:
{
    8780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8782:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8784:	7835      	ldrb	r5, [r6, #0]
    8786:	bba5      	cbnz	r5, 87f2 <hci_disconn_complete+0x72>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8788:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    878c:	4638      	mov	r0, r7
    878e:	f000 fe35 	bl	93fc <bt_conn_lookup_handle>
	if (!conn) {
    8792:	4604      	mov	r4, r0
    8794:	b9e0      	cbnz	r0, 87d0 <hci_disconn_complete+0x50>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8796:	2301      	movs	r3, #1
    8798:	f04f 0200 	mov.w	r2, #0
    879c:	f363 0207 	bfi	r2, r3, #0, #8
    87a0:	4914      	ldr	r1, [pc, #80]	; (87f4 <hci_disconn_complete+0x74>)
    87a2:	4b15      	ldr	r3, [pc, #84]	; (87f8 <hci_disconn_complete+0x78>)
    87a4:	4815      	ldr	r0, [pc, #84]	; (87fc <hci_disconn_complete+0x7c>)
    87a6:	1a5b      	subs	r3, r3, r1
    87a8:	08db      	lsrs	r3, r3, #3
    87aa:	f363 128f 	bfi	r2, r3, #6, #10
    87ae:	4639      	mov	r1, r7
    87b0:	f016 f95d 	bl	1ea6e <log_1>
	    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    87b4:	2108      	movs	r1, #8
    87b6:	4812      	ldr	r0, [pc, #72]	; (8800 <hci_disconn_complete+0x80>)
    87b8:	f017 fab7 	bl	1fd2a <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    87bc:	b1c8      	cbz	r0, 87f2 <hci_disconn_complete+0x72>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    87be:	2105      	movs	r1, #5
    87c0:	480f      	ldr	r0, [pc, #60]	; (8800 <hci_disconn_complete+0x80>)
    87c2:	f017 fab2 	bl	1fd2a <atomic_test_bit>
	    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    87c6:	b9a0      	cbnz	r0, 87f2 <hci_disconn_complete+0x72>
}
    87c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_le_adv_resume();
    87cc:	f7ff bf96 	b.w	86fc <bt_le_adv_resume>
	conn->err = evt->reason;
    87d0:	78f3      	ldrb	r3, [r6, #3]
    87d2:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    87d4:	4629      	mov	r1, r5
    87d6:	f000 fd47 	bl	9268 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    87da:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    87dc:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    87de:	2b01      	cmp	r3, #1
		bt_conn_unref(conn);
    87e0:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    87e2:	d003      	beq.n	87ec <hci_disconn_complete+0x6c>
}
    87e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    87e8:	f017 bbdd 	b.w	1ffa6 <bt_conn_unref>
	bt_conn_unref(conn);
    87ec:	f017 fbdb 	bl	1ffa6 <bt_conn_unref>
    87f0:	e7e0      	b.n	87b4 <hci_disconn_complete+0x34>
}
    87f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87f4:	00025a6c 	.word	0x00025a6c
    87f8:	00025b34 	.word	0x00025b34
    87fc:	00027f65 	.word	0x00027f65
    8800:	2000dd88 	.word	0x2000dd88

00008804 <enh_conn_complete>:
{
    8804:	b5f0      	push	{r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8806:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
	u16_t handle = sys_le16_to_cpu(evt->handle);
    880a:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    880e:	b085      	sub	sp, #20
    8810:	4605      	mov	r5, r0
    8812:	485a      	ldr	r0, [pc, #360]	; (897c <enh_conn_complete+0x178>)
    8814:	f017 fa24 	bl	1fc60 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    8818:	03c3      	lsls	r3, r0, #15
	u16_t handle = sys_le16_to_cpu(evt->handle);
    881a:	b2be      	uxth	r6, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    881c:	d504      	bpl.n	8828 <enh_conn_complete+0x24>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id, NULL);
    881e:	2200      	movs	r2, #0
    8820:	4957      	ldr	r1, [pc, #348]	; (8980 <enh_conn_complete+0x17c>)
    8822:	2002      	movs	r0, #2
    8824:	f005 ffaa 	bl	e77c <bt_keys_foreach>
	if (evt->status) {
    8828:	782b      	ldrb	r3, [r5, #0]
    882a:	b343      	cbz	r3, 887e <enh_conn_complete+0x7a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    882c:	78eb      	ldrb	r3, [r5, #3]
    882e:	2b01      	cmp	r3, #1
    8830:	d15a      	bne.n	88e8 <enh_conn_complete+0xe4>
    8832:	2000      	movs	r0, #0
    8834:	f7fe f8b0 	bl	6998 <find_pending_connect.part.18>
		if (!conn) {
    8838:	4604      	mov	r4, r0
    883a:	2800      	cmp	r0, #0
    883c:	d054      	beq.n	88e8 <enh_conn_complete+0xe4>
		conn->err = evt->status;
    883e:	7829      	ldrb	r1, [r5, #0]
    8840:	7301      	strb	r1, [r0, #12]
			if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    8842:	293c      	cmp	r1, #60	; 0x3c
    8844:	d10c      	bne.n	8860 <enh_conn_complete+0x5c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8846:	f06f 0120 	mvn.w	r1, #32
    884a:	484c      	ldr	r0, [pc, #304]	; (897c <enh_conn_complete+0x178>)
    884c:	f017 fa08 	bl	1fc60 <atomic_and>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8850:	2100      	movs	r1, #0
    8852:	4620      	mov	r0, r4
    8854:	f000 fd08 	bl	9268 <bt_conn_set_state>
	bt_conn_unref(conn);
    8858:	4620      	mov	r0, r4
    885a:	f017 fba4 	bl	1ffa6 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
    885e:	e043      	b.n	88e8 <enh_conn_complete+0xe4>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    8860:	2302      	movs	r3, #2
    8862:	f04f 0200 	mov.w	r2, #0
    8866:	f363 0207 	bfi	r2, r3, #0, #8
    886a:	4846      	ldr	r0, [pc, #280]	; (8984 <enh_conn_complete+0x180>)
    886c:	4b46      	ldr	r3, [pc, #280]	; (8988 <enh_conn_complete+0x184>)
    886e:	1a1b      	subs	r3, r3, r0
    8870:	08db      	lsrs	r3, r3, #3
    8872:	f363 128f 	bfi	r2, r3, #6, #10
    8876:	4845      	ldr	r0, [pc, #276]	; (898c <enh_conn_complete+0x188>)
    8878:	f016 f8f9 	bl	1ea6e <log_1>
		bt_conn_unref(conn);
    887c:	e7ec      	b.n	8858 <enh_conn_complete+0x54>
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    887e:	1d2c      	adds	r4, r5, #4
    8880:	4621      	mov	r1, r4
    8882:	a802      	add	r0, sp, #8
    8884:	f017 f9fe 	bl	1fc84 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8888:	f89d 3008 	ldrb.w	r3, [sp, #8]
    888c:	3b02      	subs	r3, #2
    888e:	b2db      	uxtb	r3, r3
    8890:	2b01      	cmp	r3, #1
    8892:	d82b      	bhi.n	88ec <enh_conn_complete+0xe8>
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    8894:	f105 0111 	add.w	r1, r5, #17
    8898:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    889c:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    88a0:	f017 f9ed 	bl	1fc7e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    88a4:	2301      	movs	r3, #1
    88a6:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    88aa:	78eb      	ldrb	r3, [r5, #3]
    88ac:	2b01      	cmp	r3, #1
    88ae:	d10c      	bne.n	88ca <enh_conn_complete+0xc6>
    88b0:	a802      	add	r0, sp, #8
    88b2:	f7fe f871 	bl	6998 <find_pending_connect.part.18>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    88b6:	78eb      	ldrb	r3, [r5, #3]
    88b8:	2b01      	cmp	r3, #1
    88ba:	4604      	mov	r4, r0
    88bc:	d104      	bne.n	88c8 <enh_conn_complete+0xc4>
    88be:	f06f 0120 	mvn.w	r1, #32
    88c2:	482e      	ldr	r0, [pc, #184]	; (897c <enh_conn_complete+0x178>)
    88c4:	f017 f9cc 	bl	1fc60 <atomic_and>
	if (!conn) {
    88c8:	b9ac      	cbnz	r4, 88f6 <enh_conn_complete+0xf2>
		BT_ERR("Unable to add new conn for handle %u", handle);
    88ca:	2301      	movs	r3, #1
    88cc:	f04f 0200 	mov.w	r2, #0
    88d0:	f363 0207 	bfi	r2, r3, #0, #8
    88d4:	492b      	ldr	r1, [pc, #172]	; (8984 <enh_conn_complete+0x180>)
    88d6:	4b2c      	ldr	r3, [pc, #176]	; (8988 <enh_conn_complete+0x184>)
    88d8:	482d      	ldr	r0, [pc, #180]	; (8990 <enh_conn_complete+0x18c>)
    88da:	1a5b      	subs	r3, r3, r1
    88dc:	08db      	lsrs	r3, r3, #3
    88de:	f363 128f 	bfi	r2, r3, #6, #10
    88e2:	4631      	mov	r1, r6
    88e4:	f016 f8c3 	bl	1ea6e <log_1>
}
    88e8:	b005      	add	sp, #20
    88ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    88ec:	4621      	mov	r1, r4
    88ee:	4668      	mov	r0, sp
    88f0:	f017 f9c8 	bl	1fc84 <bt_addr_le_copy>
    88f4:	e7d9      	b.n	88aa <enh_conn_complete+0xa6>
	conn->handle = handle;
    88f6:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    88f8:	a902      	add	r1, sp, #8
	conn->handle = handle;
    88fa:	f820 7b70 	strh.w	r7, [r0], #112
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    88fe:	f017 f9c1 	bl	1fc84 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    8902:	7e2a      	ldrb	r2, [r5, #24]
    8904:	7deb      	ldrb	r3, [r5, #23]
    8906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    890a:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    890e:	7eaa      	ldrb	r2, [r5, #26]
    8910:	7e6b      	ldrb	r3, [r5, #25]
    8912:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8916:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    891a:	7eeb      	ldrb	r3, [r5, #27]
    891c:	7f2a      	ldrb	r2, [r5, #28]
    891e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8922:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
	conn->role = evt->role;
    8926:	78ee      	ldrb	r6, [r5, #3]
    8928:	70e6      	strb	r6, [r4, #3]
	conn->err = 0U;
    892a:	2700      	movs	r7, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    892c:	2e01      	cmp	r6, #1
	conn->err = 0U;
    892e:	7327      	strb	r7, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8930:	d11c      	bne.n	896c <enh_conn_complete+0x168>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    8932:	4669      	mov	r1, sp
    8934:	f104 0077 	add.w	r0, r4, #119	; 0x77
    8938:	f017 f9a4 	bl	1fc84 <bt_addr_le_copy>
			bt_addr_copy(&conn->le.resp_addr.a, &evt->local_rpa);
    893c:	f105 010b 	add.w	r1, r5, #11
    8940:	f104 007f 	add.w	r0, r4, #127	; 0x7f
    8944:	f017 f99b 	bl	1fc7e <bt_addr_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8948:	4b12      	ldr	r3, [pc, #72]	; (8994 <enh_conn_complete+0x190>)
			conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    894a:	f884 607e 	strb.w	r6, [r4, #126]	; 0x7e
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    894e:	2108      	movs	r1, #8
    8950:	f103 0070 	add.w	r0, r3, #112	; 0x70
    8954:	f017 f9e9 	bl	1fd2a <atomic_test_bit>
    8958:	b140      	cbz	r0, 896c <enh_conn_complete+0x168>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    895a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
    895e:	463a      	mov	r2, r7
    8960:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8964:	4313      	orrs	r3, r2
    8966:	d001      	beq.n	896c <enh_conn_complete+0x168>
			bt_le_adv_resume();
    8968:	f7ff fec8 	bl	86fc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    896c:	4620      	mov	r0, r4
    896e:	2106      	movs	r1, #6
    8970:	f000 fc7a 	bl	9268 <bt_conn_set_state>
	conn_auto_initiate(conn);
    8974:	4620      	mov	r0, r4
    8976:	f7fe fe0f 	bl	7598 <conn_auto_initiate>
    897a:	e76d      	b.n	8858 <enh_conn_complete+0x54>
    897c:	2000dd88 	.word	0x2000dd88
    8980:	0001fde7 	.word	0x0001fde7
    8984:	00025a6c 	.word	0x00025a6c
    8988:	00025b34 	.word	0x00025b34
    898c:	00027e53 	.word	0x00027e53
    8990:	00027e6c 	.word	0x00027e6c
    8994:	2000dd18 	.word	0x2000dd18

00008998 <le_legacy_conn_complete>:
{
    8998:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    899a:	6884      	ldr	r4, [r0, #8]
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    899c:	4e27      	ldr	r6, [pc, #156]	; (8a3c <le_legacy_conn_complete+0xa4>)
	enh.status         = evt->status;
    899e:	7823      	ldrb	r3, [r4, #0]
{
    89a0:	b08a      	sub	sp, #40	; 0x28
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    89a2:	ad03      	add	r5, sp, #12
	enh.status         = evt->status;
    89a4:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    89a8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    89ac:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    89b0:	78e3      	ldrb	r3, [r4, #3]
    89b2:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    89b6:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    89ba:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    89be:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    89c2:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    89c6:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    89ca:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    89ce:	7c63      	ldrb	r3, [r4, #17]
    89d0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    89d4:	1d21      	adds	r1, r4, #4
    89d6:	4628      	mov	r0, r5
    89d8:	f017 f954 	bl	1fc84 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    89dc:	f10d 0013 	add.w	r0, sp, #19
    89e0:	f106 010a 	add.w	r1, r6, #10
    89e4:	f017 f94b 	bl	1fc7e <bt_addr_copy>
	if (evt->role == BT_HCI_ROLE_SLAVE) {
    89e8:	78e3      	ldrb	r3, [r4, #3]
    89ea:	2b01      	cmp	r3, #1
		id_addr = bt_lookup_id_addr(bt_dev.adv_id, &enh.peer_addr);
    89ec:	bf0c      	ite	eq
    89ee:	7a30      	ldrbeq	r0, [r6, #8]
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    89f0:	2000      	movne	r0, #0
		id_addr = bt_lookup_id_addr(bt_dev.adv_id, &enh.peer_addr);
    89f2:	4629      	mov	r1, r5
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    89f4:	f017 f9cf 	bl	1fd96 <bt_lookup_id_addr>
	if (id_addr != &enh.peer_addr) {
    89f8:	42a8      	cmp	r0, r5
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    89fa:	4604      	mov	r4, r0
	if (id_addr != &enh.peer_addr) {
    89fc:	d013      	beq.n	8a26 <le_legacy_conn_complete+0x8e>
		bt_addr_copy(&enh.peer_rpa, &enh.peer_addr.a);
    89fe:	f10d 010d 	add.w	r1, sp, #13
    8a02:	f10d 0019 	add.w	r0, sp, #25
    8a06:	f017 f93a 	bl	1fc7e <bt_addr_copy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    8a0a:	4621      	mov	r1, r4
    8a0c:	4628      	mov	r0, r5
    8a0e:	f017 f939 	bl	1fc84 <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    8a12:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8a16:	3302      	adds	r3, #2
    8a18:	f88d 300c 	strb.w	r3, [sp, #12]
	enh_conn_complete(&enh);
    8a1c:	a802      	add	r0, sp, #8
    8a1e:	f7ff fef1 	bl	8804 <enh_conn_complete>
}
    8a22:	b00a      	add	sp, #40	; 0x28
    8a24:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    8a26:	2300      	movs	r3, #0
    8a28:	4669      	mov	r1, sp
    8a2a:	f10d 0019 	add.w	r0, sp, #25
    8a2e:	9300      	str	r3, [sp, #0]
    8a30:	f8ad 3004 	strh.w	r3, [sp, #4]
    8a34:	f017 f923 	bl	1fc7e <bt_addr_copy>
    8a38:	e7f0      	b.n	8a1c <le_legacy_conn_complete+0x84>
    8a3a:	bf00      	nop
    8a3c:	2000dd18 	.word	0x2000dd18

00008a40 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    8a40:	b538      	push	{r3, r4, r5, lr}
    8a42:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    8a44:	4805      	ldr	r0, [pc, #20]	; (8a5c <bt_buf_get_rx+0x1c>)
    8a46:	f019 fdc1 	bl	225cc <net_buf_alloc_fixed>
#endif

	if (buf) {
    8a4a:	4604      	mov	r4, r0
    8a4c:	b120      	cbz	r0, 8a58 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8a4e:	2100      	movs	r1, #0
    8a50:	3008      	adds	r0, #8
    8a52:	f019 fdda 	bl	2260a <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    8a56:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    8a58:	4620      	mov	r0, r4
    8a5a:	bd38      	pop	{r3, r4, r5, pc}
    8a5c:	2000e768 	.word	0x2000e768

00008a60 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    8a60:	b510      	push	{r4, lr}
    8a62:	4601      	mov	r1, r0
	__asm__ volatile(
    8a64:	f04f 0320 	mov.w	r3, #32
    8a68:	f3ef 8011 	mrs	r0, BASEPRI
    8a6c:	f383 8811 	msr	BASEPRI, r3
    8a70:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    8a74:	4a0c      	ldr	r2, [pc, #48]	; (8aa8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    8a76:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    8a78:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    8a7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile(
    8a80:	f380 8811 	msr	BASEPRI, r0
    8a84:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    8a88:	b924      	cbnz	r4, 8a94 <bt_buf_get_cmd_complete+0x34>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8a8a:	2001      	movs	r0, #1
}
    8a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8a90:	f7ff bfd6 	b.w	8a40 <bt_buf_get_rx>
    8a94:	2201      	movs	r2, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8a96:	f104 0008 	add.w	r0, r4, #8
    8a9a:	7522      	strb	r2, [r4, #20]
		buf->len = 0U;
    8a9c:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8a9e:	4619      	mov	r1, r3
    8aa0:	f019 fdb3 	bl	2260a <net_buf_simple_reserve>
}
    8aa4:	4620      	mov	r0, r4
    8aa6:	bd10      	pop	{r4, pc}
    8aa8:	2000dd18 	.word	0x2000dd18

00008aac <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, s32_t timeout)
{
	switch (evt) {
    8aac:	280e      	cmp	r0, #14
{
    8aae:	460b      	mov	r3, r1
    8ab0:	b510      	push	{r4, lr}
    8ab2:	4611      	mov	r1, r2
	switch (evt) {
    8ab4:	d315      	bcc.n	8ae2 <bt_buf_get_evt+0x36>
    8ab6:	280f      	cmp	r0, #15
    8ab8:	d90e      	bls.n	8ad8 <bt_buf_get_evt+0x2c>
    8aba:	2813      	cmp	r0, #19
    8abc:	d111      	bne.n	8ae2 <bt_buf_get_evt+0x36>
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
    8abe:	480d      	ldr	r0, [pc, #52]	; (8af4 <bt_buf_get_evt+0x48>)
	default:
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
    8ac0:	f019 fd84 	bl	225cc <net_buf_alloc_fixed>
			if (buf) {
    8ac4:	4604      	mov	r4, r0
    8ac6:	b128      	cbz	r0, 8ad4 <bt_buf_get_evt+0x28>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    8ac8:	2100      	movs	r1, #0
    8aca:	3008      	adds	r0, #8
    8acc:	f019 fd9d 	bl	2260a <net_buf_simple_reserve>
    8ad0:	2301      	movs	r3, #1
    8ad2:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    8ad4:	4620      	mov	r0, r4
    8ad6:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    8ad8:	4610      	mov	r0, r2
}
    8ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_cmd_complete(timeout);
    8ade:	f7ff bfbf 	b.w	8a60 <bt_buf_get_cmd_complete>
		if (discardable) {
    8ae2:	b10b      	cbz	r3, 8ae8 <bt_buf_get_evt+0x3c>
			buf = net_buf_alloc(&discardable_pool, timeout);
    8ae4:	4804      	ldr	r0, [pc, #16]	; (8af8 <bt_buf_get_evt+0x4c>)
    8ae6:	e7eb      	b.n	8ac0 <bt_buf_get_evt+0x14>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8ae8:	2001      	movs	r0, #1
}
    8aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8aee:	f7ff bfa7 	b.w	8a40 <bt_buf_get_rx>
    8af2:	bf00      	nop
    8af4:	2000e788 	.word	0x2000e788
    8af8:	2000e708 	.word	0x2000e708

00008afc <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    8afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    8afe:	4d26      	ldr	r5, [pc, #152]	; (8b98 <bt_pub_key_gen+0x9c>)
    8b00:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
    8b04:	f003 0306 	and.w	r3, r3, #6
    8b08:	2b06      	cmp	r3, #6
    8b0a:	d011      	beq.n	8b30 <bt_pub_key_gen+0x34>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    8b0c:	2302      	movs	r3, #2
    8b0e:	f04f 0100 	mov.w	r1, #0
    8b12:	f363 0107 	bfi	r1, r3, #0, #8
    8b16:	4a21      	ldr	r2, [pc, #132]	; (8b9c <bt_pub_key_gen+0xa0>)
    8b18:	4b21      	ldr	r3, [pc, #132]	; (8ba0 <bt_pub_key_gen+0xa4>)
    8b1a:	4822      	ldr	r0, [pc, #136]	; (8ba4 <bt_pub_key_gen+0xa8>)
    8b1c:	1a9b      	subs	r3, r3, r2
    8b1e:	08db      	lsrs	r3, r3, #3
    8b20:	f363 118f 	bfi	r1, r3, #6, #10
    8b24:	f015 ff96 	bl	1ea54 <log_0>
		return -ENOTSUP;
    8b28:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    8b2c:	4620      	mov	r0, r4
    8b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    8b30:	4e1d      	ldr	r6, [pc, #116]	; (8ba8 <bt_pub_key_gen+0xac>)
    8b32:	6833      	ldr	r3, [r6, #0]
    8b34:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    8b36:	6030      	str	r0, [r6, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    8b38:	2110      	movs	r1, #16
    8b3a:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8b3e:	f017 f8a4 	bl	1fc8a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8b42:	f010 0710 	ands.w	r7, r0, #16
    8b46:	d124      	bne.n	8b92 <bt_pub_key_gen+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8b48:	f06f 0108 	mvn.w	r1, #8
    8b4c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8b50:	f017 f886 	bl	1fc60 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    8b54:	463a      	mov	r2, r7
    8b56:	4639      	mov	r1, r7
    8b58:	f242 0025 	movw	r0, #8229	; 0x2025
    8b5c:	f7fe fb34 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    8b60:	4604      	mov	r4, r0
    8b62:	2800      	cmp	r0, #0
    8b64:	d0e2      	beq.n	8b2c <bt_pub_key_gen+0x30>
		BT_ERR("Sending LE P256 Public Key command failed");
    8b66:	2301      	movs	r3, #1
    8b68:	f04f 0100 	mov.w	r1, #0
    8b6c:	4a0b      	ldr	r2, [pc, #44]	; (8b9c <bt_pub_key_gen+0xa0>)
    8b6e:	480f      	ldr	r0, [pc, #60]	; (8bac <bt_pub_key_gen+0xb0>)
    8b70:	f363 0107 	bfi	r1, r3, #0, #8
    8b74:	4b0a      	ldr	r3, [pc, #40]	; (8ba0 <bt_pub_key_gen+0xa4>)
    8b76:	1a9b      	subs	r3, r3, r2
    8b78:	08db      	lsrs	r3, r3, #3
    8b7a:	f363 118f 	bfi	r1, r3, #6, #10
    8b7e:	f015 ff69 	bl	1ea54 <log_0>
    8b82:	f06f 0110 	mvn.w	r1, #16
    8b86:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8b8a:	f017 f869 	bl	1fc60 <atomic_and>
		pub_key_cb = NULL;
    8b8e:	6037      	str	r7, [r6, #0]
		return err;
    8b90:	e7cc      	b.n	8b2c <bt_pub_key_gen+0x30>
		return 0;
    8b92:	2400      	movs	r4, #0
    8b94:	e7ca      	b.n	8b2c <bt_pub_key_gen+0x30>
    8b96:	bf00      	nop
    8b98:	2000dd18 	.word	0x2000dd18
    8b9c:	00025a6c 	.word	0x00025a6c
    8ba0:	00025b34 	.word	0x00025b34
    8ba4:	00027c13 	.word	0x00027c13
    8ba8:	20000254 	.word	0x20000254
    8bac:	00027c32 	.word	0x00027c32

00008bb0 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    8bb0:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    8bb2:	2103      	movs	r1, #3
    8bb4:	4803      	ldr	r0, [pc, #12]	; (8bc4 <bt_pub_key_get+0x14>)
    8bb6:	f017 f8b8 	bl	1fd2a <atomic_test_bit>
    8bba:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    8bbc:	4802      	ldr	r0, [pc, #8]	; (8bc8 <bt_pub_key_get+0x18>)
    8bbe:	bf08      	it	eq
    8bc0:	2000      	moveq	r0, #0
    8bc2:	bd08      	pop	{r3, pc}
    8bc4:	2000dd88 	.word	0x2000dd88
    8bc8:	2000a4e0 	.word	0x2000a4e0

00008bcc <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    8bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8bce:	4c1a      	ldr	r4, [pc, #104]	; (8c38 <bt_dh_key_gen+0x6c>)
    8bd0:	6822      	ldr	r2, [r4, #0]
{
    8bd2:	4607      	mov	r7, r0
    8bd4:	460b      	mov	r3, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8bd6:	b112      	cbz	r2, 8bde <bt_dh_key_gen+0x12>
		return -EBUSY;
    8bd8:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    8bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8bde:	2104      	movs	r1, #4
    8be0:	4816      	ldr	r0, [pc, #88]	; (8c3c <bt_dh_key_gen+0x70>)
    8be2:	f017 f8a2 	bl	1fd2a <atomic_test_bit>
    8be6:	4606      	mov	r6, r0
    8be8:	2800      	cmp	r0, #0
    8bea:	d1f5      	bne.n	8bd8 <bt_dh_key_gen+0xc>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    8bec:	2103      	movs	r1, #3
    8bee:	4813      	ldr	r0, [pc, #76]	; (8c3c <bt_dh_key_gen+0x70>)
    8bf0:	f017 f89b 	bl	1fd2a <atomic_test_bit>
    8bf4:	b1e8      	cbz	r0, 8c32 <bt_dh_key_gen+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    8bf6:	2140      	movs	r1, #64	; 0x40
    8bf8:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    8bfc:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    8bfe:	f7fe f975 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
    8c02:	4605      	mov	r5, r0
    8c04:	b918      	cbnz	r0, 8c0e <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    8c06:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    8c08:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8c0c:	e7e6      	b.n	8bdc <bt_dh_key_gen+0x10>
	cp = net_buf_add(buf, sizeof(*cp));
    8c0e:	2140      	movs	r1, #64	; 0x40
    8c10:	3008      	adds	r0, #8
    8c12:	f019 fd0f 	bl	22634 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    8c16:	2240      	movs	r2, #64	; 0x40
    8c18:	4639      	mov	r1, r7
    8c1a:	f016 fced 	bl	1f5f8 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    8c1e:	4632      	mov	r2, r6
    8c20:	4629      	mov	r1, r5
    8c22:	f242 0026 	movw	r0, #8230	; 0x2026
    8c26:	f7fe facf 	bl	71c8 <bt_hci_cmd_send_sync>
	if (err) {
    8c2a:	2800      	cmp	r0, #0
    8c2c:	d0d6      	beq.n	8bdc <bt_dh_key_gen+0x10>
		dh_key_cb = NULL;
    8c2e:	6026      	str	r6, [r4, #0]
		return err;
    8c30:	e7d4      	b.n	8bdc <bt_dh_key_gen+0x10>
		return -EADDRNOTAVAIL;
    8c32:	f06f 0030 	mvn.w	r0, #48	; 0x30
    8c36:	e7d1      	b.n	8bdc <bt_dh_key_gen+0x10>
    8c38:	20000250 	.word	0x20000250
    8c3c:	2000dd88 	.word	0x2000dd88

00008c40 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    8c40:	2300      	movs	r3, #0
{
    8c42:	4601      	mov	r1, r0
	tx->user_data = NULL;
    8c44:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    8c48:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    8c4a:	4801      	ldr	r0, [pc, #4]	; (8c50 <tx_free+0x10>)
    8c4c:	f01c ba0d 	b.w	2506a <k_queue_append>
    8c50:	2000e6a8 	.word	0x2000e6a8

00008c54 <notify_connected>:
{
    8c54:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    8c56:	4b09      	ldr	r3, [pc, #36]	; (8c7c <notify_connected+0x28>)
    8c58:	681c      	ldr	r4, [r3, #0]
{
    8c5a:	4605      	mov	r5, r0
    8c5c:	7b29      	ldrb	r1, [r5, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    8c5e:	b92c      	cbnz	r4, 8c6c <notify_connected+0x18>
	if (!conn->err) {
    8c60:	b951      	cbnz	r1, 8c78 <notify_connected+0x24>
		bt_gatt_connected(conn);
    8c62:	4628      	mov	r0, r5
}
    8c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    8c68:	f003 bdd2 	b.w	c810 <bt_gatt_connected>
		if (cb->connected) {
    8c6c:	6823      	ldr	r3, [r4, #0]
    8c6e:	b10b      	cbz	r3, 8c74 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    8c70:	4628      	mov	r0, r5
    8c72:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8c74:	69a4      	ldr	r4, [r4, #24]
    8c76:	e7f1      	b.n	8c5c <notify_connected+0x8>
}
    8c78:	bd38      	pop	{r3, r4, r5, pc}
    8c7a:	bf00      	nop
    8c7c:	200002cc 	.word	0x200002cc

00008c80 <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    8c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c84:	4604      	mov	r4, r0
    8c86:	460e      	mov	r6, r1
    8c88:	4691      	mov	r9, r2
    8c8a:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    8c8c:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    8c8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8c92:	4844      	ldr	r0, [pc, #272]	; (8da4 <send_frag+0x124>)
    8c94:	f013 fe3c 	bl	1c910 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    8c98:	7b63      	ldrb	r3, [r4, #13]
    8c9a:	2b06      	cmp	r3, #6
    8c9c:	d152      	bne.n	8d44 <send_frag+0xc4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    8c9e:	2104      	movs	r1, #4
    8ca0:	f106 0008 	add.w	r0, r6, #8
    8ca4:	f019 fce7 	bl	22676 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8ca8:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8caa:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8cac:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8cb0:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8cb2:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8cb4:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    8cb6:	f04f 0320 	mov.w	r3, #32
    8cba:	f3ef 8211 	mrs	r2, BASEPRI
    8cbe:	f383 8811 	msr	BASEPRI, r3
    8cc2:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    8cc6:	2d00      	cmp	r5, #0
    8cc8:	d04e      	beq.n	8d68 <send_frag+0xe8>
	parent->next = child;
    8cca:	2300      	movs	r3, #0
    8ccc:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    8cce:	69a3      	ldr	r3, [r4, #24]
    8cd0:	2b00      	cmp	r3, #0
    8cd2:	d146      	bne.n	8d62 <send_frag+0xe2>
	list->head = node;
    8cd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    8cd8:	f382 8811 	msr	BASEPRI, r2
    8cdc:	f3bf 8f6f 	isb	sy
    8ce0:	2302      	movs	r3, #2
    8ce2:	7533      	strb	r3, [r6, #20]
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    8ce4:	4630      	mov	r0, r6
    8ce6:	f017 f89c 	bl	1fe22 <bt_send>
	if (err) {
    8cea:	4601      	mov	r1, r0
    8cec:	2800      	cmp	r0, #0
    8cee:	d057      	beq.n	8da0 <send_frag+0x120>
		BT_ERR("Unable to send to driver (err %d)", err);
    8cf0:	2301      	movs	r3, #1
    8cf2:	f04f 0200 	mov.w	r2, #0
    8cf6:	f363 0207 	bfi	r2, r3, #0, #8
    8cfa:	482b      	ldr	r0, [pc, #172]	; (8da8 <send_frag+0x128>)
    8cfc:	4b2b      	ldr	r3, [pc, #172]	; (8dac <send_frag+0x12c>)
    8cfe:	1a1b      	subs	r3, r3, r0
    8d00:	08db      	lsrs	r3, r3, #3
    8d02:	f363 128f 	bfi	r2, r3, #6, #10
    8d06:	482a      	ldr	r0, [pc, #168]	; (8db0 <send_frag+0x130>)
    8d08:	f015 feb1 	bl	1ea6e <log_1>
	__asm__ volatile(
    8d0c:	f04f 0320 	mov.w	r3, #32
    8d10:	f3ef 8111 	mrs	r1, BASEPRI
    8d14:	f383 8811 	msr	BASEPRI, r3
    8d18:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    8d1c:	2d00      	cmp	r5, #0
    8d1e:	d039      	beq.n	8d94 <send_frag+0x114>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8d20:	6963      	ldr	r3, [r4, #20]
    8d22:	2200      	movs	r2, #0
    8d24:	b153      	cbz	r3, 8d3c <send_frag+0xbc>
    8d26:	429d      	cmp	r5, r3
    8d28:	d131      	bne.n	8d8e <send_frag+0x10e>
Z_GENLIST_REMOVE(slist, snode)
    8d2a:	682b      	ldr	r3, [r5, #0]
    8d2c:	bb4a      	cbnz	r2, 8d82 <send_frag+0x102>
    8d2e:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    8d30:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    8d32:	4295      	cmp	r5, r2
    8d34:	d100      	bne.n	8d38 <send_frag+0xb8>
	list->tail = node;
    8d36:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    8d38:	2300      	movs	r3, #0
    8d3a:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    8d3c:	f381 8811 	msr	BASEPRI, r1
    8d40:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    8d44:	4817      	ldr	r0, [pc, #92]	; (8da4 <send_frag+0x124>)
    8d46:	f013 fdb7 	bl	1c8b8 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    8d4a:	b115      	cbz	r5, 8d52 <send_frag+0xd2>
		tx_free(tx);
    8d4c:	4628      	mov	r0, r5
    8d4e:	f7ff ff77 	bl	8c40 <tx_free>
	}

	if (always_consume) {
    8d52:	b11f      	cbz	r7, 8d5c <send_frag+0xdc>
		net_buf_unref(buf);
    8d54:	4630      	mov	r0, r6
    8d56:	f00e fc3d 	bl	175d4 <net_buf_unref>
	}
	return false;
    8d5a:	2700      	movs	r7, #0
}
    8d5c:	4638      	mov	r0, r7
    8d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d62:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8d64:	61a5      	str	r5, [r4, #24]
    8d66:	e7b7      	b.n	8cd8 <send_frag+0x58>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    8d68:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    8d6a:	b133      	cbz	r3, 8d7a <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    8d6c:	f103 080c 	add.w	r8, r3, #12
    8d70:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    8d72:	3301      	adds	r3, #1
    8d74:	f8c8 3000 	str.w	r3, [r8]
    8d78:	e7ae      	b.n	8cd8 <send_frag+0x58>
			pending_no_cb = &conn->pending_no_cb;
    8d7a:	f104 081c 	add.w	r8, r4, #28
    8d7e:	69e3      	ldr	r3, [r4, #28]
    8d80:	e7f7      	b.n	8d72 <send_frag+0xf2>
	parent->next = child;
    8d82:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    8d84:	69a3      	ldr	r3, [r4, #24]
    8d86:	429d      	cmp	r5, r3
	list->tail = node;
    8d88:	bf08      	it	eq
    8d8a:	61a2      	streq	r2, [r4, #24]
    8d8c:	e7d4      	b.n	8d38 <send_frag+0xb8>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8d8e:	461a      	mov	r2, r3
    8d90:	681b      	ldr	r3, [r3, #0]
    8d92:	e7c7      	b.n	8d24 <send_frag+0xa4>
			(*pending_no_cb)--;
    8d94:	f8d8 3000 	ldr.w	r3, [r8]
    8d98:	3b01      	subs	r3, #1
    8d9a:	f8c8 3000 	str.w	r3, [r8]
    8d9e:	e7cd      	b.n	8d3c <send_frag+0xbc>
	return true;
    8da0:	2701      	movs	r7, #1
    8da2:	e7db      	b.n	8d5c <send_frag+0xdc>
    8da4:	2000dda4 	.word	0x2000dda4
    8da8:	00025a6c 	.word	0x00025a6c
    8dac:	00025a84 	.word	0x00025a84
    8db0:	0002802c 	.word	0x0002802c

00008db4 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    8db4:	b570      	push	{r4, r5, r6, lr}
    8db6:	4605      	mov	r5, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    8db8:	f100 0634 	add.w	r6, r0, #52	; 0x34
    8dbc:	2100      	movs	r1, #0
    8dbe:	4630      	mov	r0, r6
    8dc0:	f019 fc0a 	bl	225d8 <net_buf_get>
    8dc4:	4604      	mov	r4, r0
    8dc6:	b950      	cbnz	r0, 8dde <conn_cleanup+0x2a>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    8dc8:	4628      	mov	r0, r5
    8dca:	f017 f854 	bl	1fe76 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8dce:	4622      	mov	r2, r4
    8dd0:	f105 0150 	add.w	r1, r5, #80	; 0x50
    8dd4:	4806      	ldr	r0, [pc, #24]	; (8df0 <conn_cleanup+0x3c>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    8dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8dda:	f013 bedf 	b.w	1cb9c <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    8dde:	6960      	ldr	r0, [r4, #20]
    8de0:	b108      	cbz	r0, 8de6 <conn_cleanup+0x32>
			tx_free(tx_data(buf)->tx);
    8de2:	f7ff ff2d 	bl	8c40 <tx_free>
		net_buf_unref(buf);
    8de6:	4620      	mov	r0, r4
    8de8:	f00e fbf4 	bl	175d4 <net_buf_unref>
    8dec:	e7e6      	b.n	8dbc <conn_cleanup+0x8>
    8dee:	bf00      	nop
    8df0:	20005fa0 	.word	0x20005fa0

00008df4 <bt_conn_get_pkts>:
}
    8df4:	4800      	ldr	r0, [pc, #0]	; (8df8 <bt_conn_get_pkts+0x4>)
    8df6:	4770      	bx	lr
    8df8:	2000dda4 	.word	0x2000dda4

00008dfc <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8dfc:	1d02      	adds	r2, r0, #4
{
    8dfe:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8e00:	2109      	movs	r1, #9
{
    8e02:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8e04:	4610      	mov	r0, r2
    8e06:	f017 f82f 	bl	1fe68 <atomic_test_bit>
    8e0a:	b1c8      	cbz	r0, 8e40 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    8e0c:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8e10:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    8e14:	4299      	cmp	r1, r3
    8e16:	d813      	bhi.n	8e40 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    8e18:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    8e1c:	4299      	cmp	r1, r3
    8e1e:	d30f      	bcc.n	8e40 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    8e20:	e9d4 1323 	ldrd	r1, r3, [r4, #140]	; 0x8c
    8e24:	4299      	cmp	r1, r3
    8e26:	d10b      	bne.n	8e40 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8e28:	f3bf 8f5b 	dmb	ish
    8e2c:	e852 3f00 	ldrex	r3, [r2]
    8e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    8e34:	e842 3100 	strex	r1, r3, [r2]
    8e38:	2900      	cmp	r1, #0
    8e3a:	d1f7      	bne.n	8e2c <notify_le_param_updated+0x30>
    8e3c:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    8e40:	4b07      	ldr	r3, [pc, #28]	; (8e60 <notify_le_param_updated+0x64>)
    8e42:	681d      	ldr	r5, [r3, #0]
    8e44:	b905      	cbnz	r5, 8e48 <notify_le_param_updated+0x4c>
}
    8e46:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    8e48:	68ee      	ldr	r6, [r5, #12]
    8e4a:	b13e      	cbz	r6, 8e5c <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    8e4c:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
    8e50:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
    8e54:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
    8e58:	4620      	mov	r0, r4
    8e5a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    8e5c:	69ad      	ldr	r5, [r5, #24]
    8e5e:	e7f1      	b.n	8e44 <notify_le_param_updated+0x48>
    8e60:	200002cc 	.word	0x200002cc

00008e64 <le_param_req>:
{
    8e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e66:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    8e68:	4608      	mov	r0, r1
{
    8e6a:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    8e6c:	f016 ff9b 	bl	1fda6 <bt_le_conn_params_valid>
    8e70:	4605      	mov	r5, r0
    8e72:	b910      	cbnz	r0, 8e7a <le_param_req+0x16>
		return false;
    8e74:	2500      	movs	r5, #0
}
    8e76:	4628      	mov	r0, r5
    8e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    8e7a:	4b09      	ldr	r3, [pc, #36]	; (8ea0 <le_param_req+0x3c>)
    8e7c:	681c      	ldr	r4, [r3, #0]
    8e7e:	2c00      	cmp	r4, #0
    8e80:	d0f9      	beq.n	8e76 <le_param_req+0x12>
		if (!cb->le_param_req) {
    8e82:	68a3      	ldr	r3, [r4, #8]
    8e84:	b90b      	cbnz	r3, 8e8a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    8e86:	69a4      	ldr	r4, [r4, #24]
    8e88:	e7f9      	b.n	8e7e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    8e8a:	4631      	mov	r1, r6
    8e8c:	4638      	mov	r0, r7
    8e8e:	4798      	blx	r3
    8e90:	2800      	cmp	r0, #0
    8e92:	d0ef      	beq.n	8e74 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    8e94:	4630      	mov	r0, r6
    8e96:	f016 ff86 	bl	1fda6 <bt_le_conn_params_valid>
    8e9a:	2800      	cmp	r0, #0
    8e9c:	d1f3      	bne.n	8e86 <le_param_req+0x22>
    8e9e:	e7e9      	b.n	8e74 <le_param_req+0x10>
    8ea0:	200002cc 	.word	0x200002cc

00008ea4 <bt_conn_identity_resolved>:
{
    8ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    8ea6:	78c3      	ldrb	r3, [r0, #3]
{
    8ea8:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    8eaa:	b93b      	cbnz	r3, 8ebc <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    8eac:	f100 067e 	add.w	r6, r0, #126	; 0x7e
	for (cb = callback_list; cb; cb = cb->_next) {
    8eb0:	4b08      	ldr	r3, [pc, #32]	; (8ed4 <bt_conn_identity_resolved+0x30>)
    8eb2:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    8eb4:	f104 0770 	add.w	r7, r4, #112	; 0x70
	for (cb = callback_list; cb; cb = cb->_next) {
    8eb8:	b91d      	cbnz	r5, 8ec2 <bt_conn_identity_resolved+0x1e>
}
    8eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    8ebc:	f100 0677 	add.w	r6, r0, #119	; 0x77
    8ec0:	e7f6      	b.n	8eb0 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    8ec2:	692b      	ldr	r3, [r5, #16]
    8ec4:	b11b      	cbz	r3, 8ece <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    8ec6:	463a      	mov	r2, r7
    8ec8:	4631      	mov	r1, r6
    8eca:	4620      	mov	r0, r4
    8ecc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8ece:	69ad      	ldr	r5, [r5, #24]
    8ed0:	e7f2      	b.n	8eb8 <bt_conn_identity_resolved+0x14>
    8ed2:	bf00      	nop
    8ed4:	200002cc 	.word	0x200002cc

00008ed8 <bt_conn_security_changed>:
	for (cb = callback_list; cb; cb = cb->_next) {
    8ed8:	4b0c      	ldr	r3, [pc, #48]	; (8f0c <bt_conn_security_changed+0x34>)
{
    8eda:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    8edc:	681d      	ldr	r5, [r3, #0]
{
    8ede:	4604      	mov	r4, r0
    8ee0:	460e      	mov	r6, r1
	for (cb = callback_list; cb; cb = cb->_next) {
    8ee2:	b955      	cbnz	r5, 8efa <bt_conn_security_changed+0x22>
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
    8ee4:	b98e      	cbnz	r6, 8f0a <bt_conn_security_changed+0x32>
    8ee6:	7a63      	ldrb	r3, [r4, #9]
    8ee8:	2b01      	cmp	r3, #1
    8eea:	d90e      	bls.n	8f0a <bt_conn_security_changed+0x32>
		bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    8eec:	f104 0170 	add.w	r1, r4, #112	; 0x70
    8ef0:	7a20      	ldrb	r0, [r4, #8]
}
    8ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    8ef6:	f005 bde5 	b.w	eac4 <bt_keys_update_usage>
		if (cb->security_changed) {
    8efa:	696b      	ldr	r3, [r5, #20]
    8efc:	b11b      	cbz	r3, 8f06 <bt_conn_security_changed+0x2e>
			cb->security_changed(conn, conn->sec_level, err);
    8efe:	4632      	mov	r2, r6
    8f00:	7a61      	ldrb	r1, [r4, #9]
    8f02:	4620      	mov	r0, r4
    8f04:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8f06:	69ad      	ldr	r5, [r5, #24]
    8f08:	e7eb      	b.n	8ee2 <bt_conn_security_changed+0xa>
}
    8f0a:	bd70      	pop	{r4, r5, r6, pc}
    8f0c:	200002cc 	.word	0x200002cc

00008f10 <bt_conn_cb_register>:
	cb->_next = callback_list;
    8f10:	4b02      	ldr	r3, [pc, #8]	; (8f1c <bt_conn_cb_register+0xc>)
    8f12:	681a      	ldr	r2, [r3, #0]
    8f14:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    8f16:	6018      	str	r0, [r3, #0]
}
    8f18:	4770      	bx	lr
    8f1a:	bf00      	nop
    8f1c:	200002cc 	.word	0x200002cc

00008f20 <bt_conn_recv>:
{
    8f20:	b570      	push	{r4, r5, r6, lr}
    8f22:	4616      	mov	r6, r2
    8f24:	4604      	mov	r4, r0
    8f26:	460d      	mov	r5, r1
	tx_notify(conn);
    8f28:	f016 ffca 	bl	1fec0 <tx_notify>
	switch (flags) {
    8f2c:	2e01      	cmp	r6, #1
    8f2e:	d020      	beq.n	8f72 <bt_conn_recv+0x52>
    8f30:	2e02      	cmp	r6, #2
    8f32:	f040 8081 	bne.w	9038 <bt_conn_recv+0x118>
		len = sys_le16_to_cpu(hdr->len);
    8f36:	68ab      	ldr	r3, [r5, #8]
    8f38:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    8f3a:	89e3      	ldrh	r3, [r4, #14]
    8f3c:	b183      	cbz	r3, 8f60 <bt_conn_recv+0x40>
			BT_ERR("Unexpected first L2CAP frame");
    8f3e:	2301      	movs	r3, #1
    8f40:	f04f 0100 	mov.w	r1, #0
    8f44:	f363 0107 	bfi	r1, r3, #0, #8
    8f48:	4a46      	ldr	r2, [pc, #280]	; (9064 <bt_conn_recv+0x144>)
    8f4a:	4b47      	ldr	r3, [pc, #284]	; (9068 <bt_conn_recv+0x148>)
    8f4c:	4847      	ldr	r0, [pc, #284]	; (906c <bt_conn_recv+0x14c>)
    8f4e:	1a9b      	subs	r3, r3, r2
    8f50:	08db      	lsrs	r3, r3, #3
    8f52:	f363 118f 	bfi	r1, r3, #6, #10
    8f56:	f015 fd7d 	bl	1ea54 <log_0>
			bt_conn_reset_rx_state(conn);
    8f5a:	4620      	mov	r0, r4
    8f5c:	f016 ff8b 	bl	1fe76 <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    8f60:	89ab      	ldrh	r3, [r5, #12]
    8f62:	1af3      	subs	r3, r6, r3
    8f64:	3304      	adds	r3, #4
    8f66:	b29b      	uxth	r3, r3
    8f68:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d04f      	beq.n	900e <bt_conn_recv+0xee>
			conn->rx = buf;
    8f6e:	6125      	str	r5, [r4, #16]
}
    8f70:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    8f72:	89e3      	ldrh	r3, [r4, #14]
    8f74:	b9ab      	cbnz	r3, 8fa2 <bt_conn_recv+0x82>
			BT_ERR("Unexpected L2CAP continuation");
    8f76:	2301      	movs	r3, #1
    8f78:	f04f 0100 	mov.w	r1, #0
    8f7c:	f363 0107 	bfi	r1, r3, #0, #8
    8f80:	4a38      	ldr	r2, [pc, #224]	; (9064 <bt_conn_recv+0x144>)
    8f82:	4b39      	ldr	r3, [pc, #228]	; (9068 <bt_conn_recv+0x148>)
    8f84:	483a      	ldr	r0, [pc, #232]	; (9070 <bt_conn_recv+0x150>)
    8f86:	1a9b      	subs	r3, r3, r2
    8f88:	08db      	lsrs	r3, r3, #3
    8f8a:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("L2CAP data overflow");
    8f8e:	f015 fd61 	bl	1ea54 <log_0>
			bt_conn_reset_rx_state(conn);
    8f92:	4620      	mov	r0, r4
    8f94:	f016 ff6f 	bl	1fe76 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    8f98:	4628      	mov	r0, r5
}
    8f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    8f9e:	f00e bb19 	b.w	175d4 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    8fa2:	89ae      	ldrh	r6, [r5, #12]
    8fa4:	42b3      	cmp	r3, r6
    8fa6:	d20c      	bcs.n	8fc2 <bt_conn_recv+0xa2>
			BT_ERR("L2CAP data overflow");
    8fa8:	2301      	movs	r3, #1
    8faa:	f04f 0100 	mov.w	r1, #0
    8fae:	f363 0107 	bfi	r1, r3, #0, #8
    8fb2:	4a2c      	ldr	r2, [pc, #176]	; (9064 <bt_conn_recv+0x144>)
    8fb4:	4b2c      	ldr	r3, [pc, #176]	; (9068 <bt_conn_recv+0x148>)
    8fb6:	482f      	ldr	r0, [pc, #188]	; (9074 <bt_conn_recv+0x154>)
    8fb8:	1a9b      	subs	r3, r3, r2
    8fba:	08db      	lsrs	r3, r3, #3
    8fbc:	f363 118f 	bfi	r1, r3, #6, #10
    8fc0:	e7e5      	b.n	8f8e <bt_conn_recv+0x6e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    8fc2:	6920      	ldr	r0, [r4, #16]
    8fc4:	3008      	adds	r0, #8
    8fc6:	f019 fb7a 	bl	226be <net_buf_simple_tailroom>
    8fca:	4286      	cmp	r6, r0
    8fcc:	d90c      	bls.n	8fe8 <bt_conn_recv+0xc8>
			BT_ERR("Not enough buffer space for L2CAP data");
    8fce:	2301      	movs	r3, #1
    8fd0:	f04f 0100 	mov.w	r1, #0
    8fd4:	f363 0107 	bfi	r1, r3, #0, #8
    8fd8:	4a22      	ldr	r2, [pc, #136]	; (9064 <bt_conn_recv+0x144>)
    8fda:	4b23      	ldr	r3, [pc, #140]	; (9068 <bt_conn_recv+0x148>)
    8fdc:	4826      	ldr	r0, [pc, #152]	; (9078 <bt_conn_recv+0x158>)
    8fde:	1a9b      	subs	r3, r3, r2
    8fe0:	08db      	lsrs	r3, r3, #3
    8fe2:	f363 118f 	bfi	r1, r3, #6, #10
    8fe6:	e7d2      	b.n	8f8e <bt_conn_recv+0x6e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    8fe8:	6920      	ldr	r0, [r4, #16]
    8fea:	89aa      	ldrh	r2, [r5, #12]
    8fec:	68a9      	ldr	r1, [r5, #8]
    8fee:	3008      	adds	r0, #8
    8ff0:	f019 fb26 	bl	22640 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    8ff4:	89e3      	ldrh	r3, [r4, #14]
    8ff6:	89aa      	ldrh	r2, [r5, #12]
    8ff8:	1a9b      	subs	r3, r3, r2
    8ffa:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    8ffc:	4628      	mov	r0, r5
    8ffe:	f00e fae9 	bl	175d4 <net_buf_unref>
		if (conn->rx_len) {
    9002:	89e3      	ldrh	r3, [r4, #14]
    9004:	2b00      	cmp	r3, #0
    9006:	d1b3      	bne.n	8f70 <bt_conn_recv+0x50>
		buf = conn->rx;
    9008:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    900a:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    900c:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    900e:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    9010:	89aa      	ldrh	r2, [r5, #12]
    9012:	8819      	ldrh	r1, [r3, #0]
    9014:	1d0b      	adds	r3, r1, #4
    9016:	4293      	cmp	r3, r2
    9018:	d01e      	beq.n	9058 <bt_conn_recv+0x138>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    901a:	2001      	movs	r0, #1
    901c:	f04f 0300 	mov.w	r3, #0
    9020:	f360 0307 	bfi	r3, r0, #0, #8
    9024:	4c0f      	ldr	r4, [pc, #60]	; (9064 <bt_conn_recv+0x144>)
    9026:	4810      	ldr	r0, [pc, #64]	; (9068 <bt_conn_recv+0x148>)
    9028:	1b00      	subs	r0, r0, r4
    902a:	08c0      	lsrs	r0, r0, #3
    902c:	f360 138f 	bfi	r3, r0, #6, #10
    9030:	4812      	ldr	r0, [pc, #72]	; (907c <bt_conn_recv+0x15c>)
    9032:	f015 fd30 	bl	1ea96 <log_2>
		net_buf_unref(buf);
    9036:	e7af      	b.n	8f98 <bt_conn_recv+0x78>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    9038:	2301      	movs	r3, #1
    903a:	f04f 0200 	mov.w	r2, #0
    903e:	f363 0207 	bfi	r2, r3, #0, #8
    9042:	4908      	ldr	r1, [pc, #32]	; (9064 <bt_conn_recv+0x144>)
    9044:	4b08      	ldr	r3, [pc, #32]	; (9068 <bt_conn_recv+0x148>)
    9046:	480e      	ldr	r0, [pc, #56]	; (9080 <bt_conn_recv+0x160>)
    9048:	1a5b      	subs	r3, r3, r1
    904a:	08db      	lsrs	r3, r3, #3
    904c:	f363 128f 	bfi	r2, r3, #6, #10
    9050:	4631      	mov	r1, r6
    9052:	f015 fd0c 	bl	1ea6e <log_1>
		bt_conn_reset_rx_state(conn);
    9056:	e79c      	b.n	8f92 <bt_conn_recv+0x72>
	bt_l2cap_recv(conn, buf);
    9058:	4629      	mov	r1, r5
    905a:	4620      	mov	r0, r4
}
    905c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    9060:	f000 bd0a 	b.w	9a78 <bt_l2cap_recv>
    9064:	00025a6c 	.word	0x00025a6c
    9068:	00025a84 	.word	0x00025a84
    906c:	00028265 	.word	0x00028265
    9070:	00028282 	.word	0x00028282
    9074:	000282a0 	.word	0x000282a0
    9078:	000282b4 	.word	0x000282b4
    907c:	000282f9 	.word	0x000282f9
    9080:	000282db 	.word	0x000282db

00009084 <bt_conn_send_cb>:
{
    9084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9088:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    908a:	7b43      	ldrb	r3, [r0, #13]
    908c:	2b06      	cmp	r3, #6
{
    908e:	4606      	mov	r6, r0
    9090:	460d      	mov	r5, r1
    9092:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    9094:	d013      	beq.n	90be <bt_conn_send_cb+0x3a>
		BT_ERR("not connected!");
    9096:	2301      	movs	r3, #1
    9098:	f04f 0100 	mov.w	r1, #0
    909c:	f363 0107 	bfi	r1, r3, #0, #8
    90a0:	4a2c      	ldr	r2, [pc, #176]	; (9154 <bt_conn_send_cb+0xd0>)
    90a2:	4b2d      	ldr	r3, [pc, #180]	; (9158 <bt_conn_send_cb+0xd4>)
    90a4:	482d      	ldr	r0, [pc, #180]	; (915c <bt_conn_send_cb+0xd8>)
    90a6:	1a9b      	subs	r3, r3, r2
    90a8:	08db      	lsrs	r3, r3, #3
    90aa:	f363 118f 	bfi	r1, r3, #6, #10
    90ae:	f015 fcd1 	bl	1ea54 <log_0>
		net_buf_unref(buf);
    90b2:	4628      	mov	r0, r5
    90b4:	f00e fa8e 	bl	175d4 <net_buf_unref>
			return -ENOTCONN;
    90b8:	f06f 0038 	mvn.w	r0, #56	; 0x38
    90bc:	e021      	b.n	9102 <bt_conn_send_cb+0x7e>
	if (cb) {
    90be:	2a00      	cmp	r2, #0
    90c0:	d045      	beq.n	914e <bt_conn_send_cb+0xca>
	return z_impl_k_current_get();
    90c2:	f013 fbf3 	bl	1c8ac <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    90c6:	4b26      	ldr	r3, [pc, #152]	; (9160 <bt_conn_send_cb+0xdc>)
    90c8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    90ca:	4826      	ldr	r0, [pc, #152]	; (9164 <bt_conn_send_cb+0xe0>)
    90cc:	bf0c      	ite	eq
    90ce:	2100      	moveq	r1, #0
    90d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    90d4:	f01b fff2 	bl	250bc <z_impl_k_queue_get>
    90d8:	4604      	mov	r4, r0
		if (!tx) {
    90da:	b9a0      	cbnz	r0, 9106 <bt_conn_send_cb+0x82>
			BT_ERR("Unable to allocate TX context");
    90dc:	2301      	movs	r3, #1
    90de:	f04f 0100 	mov.w	r1, #0
    90e2:	4a1c      	ldr	r2, [pc, #112]	; (9154 <bt_conn_send_cb+0xd0>)
    90e4:	4820      	ldr	r0, [pc, #128]	; (9168 <bt_conn_send_cb+0xe4>)
    90e6:	f363 0107 	bfi	r1, r3, #0, #8
    90ea:	4b1b      	ldr	r3, [pc, #108]	; (9158 <bt_conn_send_cb+0xd4>)
    90ec:	1a9b      	subs	r3, r3, r2
    90ee:	08db      	lsrs	r3, r3, #3
    90f0:	f363 118f 	bfi	r1, r3, #6, #10
    90f4:	f015 fcae 	bl	1ea54 <log_0>
			net_buf_unref(buf);
    90f8:	4628      	mov	r0, r5
    90fa:	f00e fa6b 	bl	175d4 <net_buf_unref>
			return -ENOBUFS;
    90fe:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    9106:	7b73      	ldrb	r3, [r6, #13]
    9108:	2b06      	cmp	r3, #6
    910a:	d014      	beq.n	9136 <bt_conn_send_cb+0xb2>
			BT_WARN("Disconnected while allocating context");
    910c:	2302      	movs	r3, #2
    910e:	f04f 0100 	mov.w	r1, #0
    9112:	4a10      	ldr	r2, [pc, #64]	; (9154 <bt_conn_send_cb+0xd0>)
    9114:	4815      	ldr	r0, [pc, #84]	; (916c <bt_conn_send_cb+0xe8>)
    9116:	f363 0107 	bfi	r1, r3, #0, #8
    911a:	4b0f      	ldr	r3, [pc, #60]	; (9158 <bt_conn_send_cb+0xd4>)
    911c:	1a9b      	subs	r3, r3, r2
    911e:	08db      	lsrs	r3, r3, #3
    9120:	f363 118f 	bfi	r1, r3, #6, #10
    9124:	f015 fc96 	bl	1ea54 <log_0>
			net_buf_unref(buf);
    9128:	4628      	mov	r0, r5
    912a:	f00e fa53 	bl	175d4 <net_buf_unref>
			tx_free(tx);
    912e:	4620      	mov	r0, r4
    9130:	f7ff fd86 	bl	8c40 <tx_free>
    9134:	e7c0      	b.n	90b8 <bt_conn_send_cb+0x34>
		tx->pending_no_cb = 0U;
    9136:	2300      	movs	r3, #0
		tx->user_data = user_data;
    9138:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    913c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    913e:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    9140:	f106 0034 	add.w	r0, r6, #52	; 0x34
    9144:	4629      	mov	r1, r5
    9146:	f019 fa64 	bl	22612 <net_buf_put>
	return 0;
    914a:	2000      	movs	r0, #0
    914c:	e7d9      	b.n	9102 <bt_conn_send_cb+0x7e>
		tx_data(buf)->tx = NULL;
    914e:	616a      	str	r2, [r5, #20]
    9150:	e7f6      	b.n	9140 <bt_conn_send_cb+0xbc>
    9152:	bf00      	nop
    9154:	00025a6c 	.word	0x00025a6c
    9158:	00025a84 	.word	0x00025a84
    915c:	00028315 	.word	0x00028315
    9160:	20005fb0 	.word	0x20005fb0
    9164:	2000e6a8 	.word	0x2000e6a8
    9168:	00028324 	.word	0x00028324
    916c:	00028342 	.word	0x00028342

00009170 <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0U;
    9170:	4b1a      	ldr	r3, [pc, #104]	; (91dc <bt_conn_prepare_events+0x6c>)
{
    9172:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    9174:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    9176:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    9178:	609a      	str	r2, [r3, #8]
{
    917a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    917c:	f013 febe 	bl	1cefc <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    9180:	4b17      	ldr	r3, [pc, #92]	; (91e0 <bt_conn_prepare_events+0x70>)
    9182:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    9186:	f016 fe69 	bl	1fe5c <atomic_get>
    918a:	4619      	mov	r1, r3
    918c:	b908      	cbnz	r0, 9192 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    918e:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    9190:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    9192:	7b5a      	ldrb	r2, [r3, #13]
    9194:	b99a      	cbnz	r2, 91be <bt_conn_prepare_events+0x4e>
    9196:	f3bf 8f5b 	dmb	ish
    919a:	1d1a      	adds	r2, r3, #4
    919c:	e852 0f00 	ldrex	r0, [r2]
    91a0:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    91a4:	e842 ce00 	strex	lr, ip, [r2]
    91a8:	f1be 0f00 	cmp.w	lr, #0
    91ac:	d1f6      	bne.n	919c <bt_conn_prepare_events+0x2c>
    91ae:	f3bf 8f5b 	dmb	ish
    91b2:	0642      	lsls	r2, r0, #25
    91b4:	d503      	bpl.n	91be <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    91b6:	4618      	mov	r0, r3
    91b8:	f7ff fdfc 	bl	8db4 <conn_cleanup>
    91bc:	e7e7      	b.n	918e <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    91be:	7b4b      	ldrb	r3, [r1, #13]
    91c0:	2b06      	cmp	r3, #6
    91c2:	d1e4      	bne.n	918e <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    91c4:	4b07      	ldr	r3, [pc, #28]	; (91e4 <bt_conn_prepare_events+0x74>)
    91c6:	f104 0014 	add.w	r0, r4, #20
    91ca:	2200      	movs	r2, #0
    91cc:	2104      	movs	r1, #4
    91ce:	f013 fe95 	bl	1cefc <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    91d2:	2301      	movs	r3, #1
    91d4:	f884 3020 	strb.w	r3, [r4, #32]
    91d8:	2002      	movs	r0, #2
	return ev_count;
    91da:	e7d9      	b.n	9190 <bt_conn_prepare_events+0x20>
    91dc:	2000df94 	.word	0x2000df94
    91e0:	20000300 	.word	0x20000300
    91e4:	20000334 	.word	0x20000334

000091e8 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(u8_t id, const bt_addr_le_t *peer)
{
    91e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    91ec:	4c1a      	ldr	r4, [pc, #104]	; (9258 <bt_conn_add_le+0x70>)
    91ee:	f104 064c 	add.w	r6, r4, #76	; 0x4c
{
    91f2:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    91f4:	4630      	mov	r0, r6
{
    91f6:	460f      	mov	r7, r1
		if (!atomic_get(&conns[i].ref)) {
    91f8:	f016 fe30 	bl	1fe5c <atomic_get>
    91fc:	4605      	mov	r5, r0
    91fe:	b110      	cbz	r0, 9206 <bt_conn_add_le+0x1e>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    9200:	2000      	movs	r0, #0
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    9202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    9206:	4601      	mov	r1, r0
    9208:	22a0      	movs	r2, #160	; 0xa0
    920a:	4620      	mov	r0, r4
    920c:	f016 fa1e 	bl	1f64c <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    9210:	4912      	ldr	r1, [pc, #72]	; (925c <bt_conn_add_le+0x74>)
    9212:	f104 0050 	add.w	r0, r4, #80	; 0x50
    9216:	f01c f928 	bl	2546a <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    921a:	4b11      	ldr	r3, [pc, #68]	; (9260 <bt_conn_add_le+0x78>)
    921c:	62a5      	str	r5, [r4, #40]	; 0x28
    921e:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9222:	2501      	movs	r5, #1
    9224:	f3bf 8f5b 	dmb	ish
    9228:	e856 3f00 	ldrex	r3, [r6]
    922c:	e846 5200 	strex	r2, r5, [r6]
    9230:	2a00      	cmp	r2, #0
    9232:	d1f9      	bne.n	9228 <bt_conn_add_le+0x40>
    9234:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    9238:	2207      	movs	r2, #7
    923a:	4639      	mov	r1, r7
    923c:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->id = id;
    9240:	f884 8008 	strb.w	r8, [r4, #8]
    9244:	f016 f9d8 	bl	1f5f8 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    9248:	4b06      	ldr	r3, [pc, #24]	; (9264 <bt_conn_add_le+0x7c>)
	conn->sec_level = BT_SECURITY_L1;
    924a:	7265      	strb	r5, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    924c:	72a5      	strb	r5, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    924e:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    9250:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			conn = &conns[i];
    9254:	4620      	mov	r0, r4
	return conn;
    9256:	e7d4      	b.n	9202 <bt_conn_add_le+0x1a>
    9258:	20000300 	.word	0x20000300
    925c:	0000953d 	.word	0x0000953d
    9260:	0001ff07 	.word	0x0001ff07
    9264:	00280018 	.word	0x00280018

00009268 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    9268:	b570      	push	{r4, r5, r6, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    926a:	7b45      	ldrb	r5, [r0, #13]
    926c:	428d      	cmp	r5, r1
{
    926e:	4604      	mov	r4, r0
    9270:	460e      	mov	r6, r1
	if (conn->state == state) {
    9272:	d10f      	bne.n	9294 <bt_conn_set_state+0x2c>
		BT_WARN("no transition");
    9274:	2302      	movs	r3, #2
    9276:	f04f 0100 	mov.w	r1, #0
    927a:	f363 0107 	bfi	r1, r3, #0, #8
    927e:	4a59      	ldr	r2, [pc, #356]	; (93e4 <bt_conn_set_state+0x17c>)
    9280:	4b59      	ldr	r3, [pc, #356]	; (93e8 <bt_conn_set_state+0x180>)
    9282:	485a      	ldr	r0, [pc, #360]	; (93ec <bt_conn_set_state+0x184>)
    9284:	1a9b      	subs	r3, r3, r2
    9286:	08db      	lsrs	r3, r3, #3
    9288:	f363 118f 	bfi	r1, r3, #6, #10
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    928c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no transition");
    9290:	f015 bbe0 	b.w	1ea54 <log_0>
	conn->state = state;
    9294:	7361      	strb	r1, [r4, #13]
	switch (old_state) {
    9296:	b915      	cbnz	r5, 929e <bt_conn_set_state+0x36>
#endif /* defined(CONFIG_BT_BREDR) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    9298:	304c      	adds	r0, #76	; 0x4c
    929a:	f016 fe04 	bl	1fea6 <atomic_inc>
	switch (conn->state) {
    929e:	7b63      	ldrb	r3, [r4, #13]
    92a0:	2b07      	cmp	r3, #7
    92a2:	f200 808d 	bhi.w	93c0 <bt_conn_set_state+0x158>
    92a6:	e8df f003 	tbb	[pc, r3]
    92aa:	8a1b      	.short	0x8a1b
    92ac:	8a8a8a8a 	.word	0x8a8a8a8a
    92b0:	8a04      	.short	0x8a04
		if (conn->type == BT_CONN_TYPE_SCO) {
    92b2:	78a3      	ldrb	r3, [r4, #2]
    92b4:	2b04      	cmp	r3, #4
    92b6:	f000 8082 	beq.w	93be <bt_conn_set_state+0x156>
	z_impl_k_queue_init(queue);
    92ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
    92be:	f01b fecc 	bl	2505a <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    92c2:	2100      	movs	r1, #0
    92c4:	484a      	ldr	r0, [pc, #296]	; (93f0 <bt_conn_set_state+0x188>)
    92c6:	f013 fe81 	bl	1cfcc <z_impl_k_poll_signal_raise>
	list->head = NULL;
    92ca:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    92cc:	4620      	mov	r0, r4
	list->tail = NULL;
    92ce:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
    92d2:	f000 faff 	bl	98d4 <bt_l2cap_connected>
		notify_connected(conn);
    92d6:	4620      	mov	r0, r4
}
    92d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    92dc:	f7ff bcba 	b.w	8c54 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    92e0:	78a3      	ldrb	r3, [r4, #2]
    92e2:	2b04      	cmp	r3, #4
    92e4:	d105      	bne.n	92f2 <bt_conn_set_state+0x8a>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    92e6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
}
    92ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_dec(&conn->ref);
    92ee:	f016 bdcd 	b.w	1fe8c <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    92f2:	1fab      	subs	r3, r5, #6
    92f4:	2b01      	cmp	r3, #1
    92f6:	d851      	bhi.n	939c <bt_conn_set_state+0x134>
	z_impl_k_sem_give(sem);
    92f8:	4d3e      	ldr	r5, [pc, #248]	; (93f4 <bt_conn_set_state+0x18c>)
		tx->pending_no_cb = 0U;
    92fa:	2600      	movs	r6, #0
	__asm__ volatile(
    92fc:	f04f 0320 	mov.w	r3, #32
    9300:	f3ef 8211 	mrs	r2, BASEPRI
    9304:	f383 8811 	msr	BASEPRI, r3
    9308:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    930c:	69e3      	ldr	r3, [r4, #28]
    930e:	b14b      	cbz	r3, 9324 <bt_conn_set_state+0xbc>
			conn->pending_no_cb--;
    9310:	3b01      	subs	r3, #1
    9312:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    9314:	f382 8811 	msr	BASEPRI, r2
    9318:	f3bf 8f6f 	isb	sy
    931c:	4628      	mov	r0, r5
    931e:	f013 facb 	bl	1c8b8 <z_impl_k_sem_give>
    9322:	e7eb      	b.n	92fc <bt_conn_set_state+0x94>
Z_GENLIST_IS_EMPTY(slist)
    9324:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    9326:	b128      	cbz	r0, 9334 <bt_conn_set_state+0xcc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9328:	69a1      	ldr	r1, [r4, #24]
    932a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    932c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    932e:	4288      	cmp	r0, r1
	list->tail = node;
    9330:	bf08      	it	eq
    9332:	61a3      	streq	r3, [r4, #24]
    9334:	f382 8811 	msr	BASEPRI, r2
    9338:	f3bf 8f6f 	isb	sy
		if (!node) {
    933c:	b188      	cbz	r0, 9362 <bt_conn_set_state+0xfa>
	__asm__ volatile(
    933e:	f04f 0220 	mov.w	r2, #32
    9342:	f3ef 8311 	mrs	r3, BASEPRI
    9346:	f382 8811 	msr	BASEPRI, r2
    934a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    934e:	68c2      	ldr	r2, [r0, #12]
    9350:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    9352:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    9354:	f383 8811 	msr	BASEPRI, r3
    9358:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    935c:	f7ff fc70 	bl	8c40 <tx_free>
    9360:	e7dc      	b.n	931c <bt_conn_set_state+0xb4>
			tx_notify(conn);
    9362:	4620      	mov	r0, r4
    9364:	f016 fdac 	bl	1fec0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    9368:	78a3      	ldrb	r3, [r4, #2]
    936a:	2b01      	cmp	r3, #1
    936c:	d103      	bne.n	9376 <bt_conn_set_state+0x10e>
				k_delayed_work_cancel(&conn->update_work);
    936e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    9372:	f01c f882 	bl	2547a <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9376:	f3bf 8f5b 	dmb	ish
    937a:	3404      	adds	r4, #4
    937c:	e854 3f00 	ldrex	r3, [r4]
    9380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9384:	e844 3200 	strex	r2, r3, [r4]
    9388:	2a00      	cmp	r2, #0
    938a:	d1f7      	bne.n	937c <bt_conn_set_state+0x114>
    938c:	f3bf 8f5b 	dmb	ish
	return z_impl_k_poll_signal_raise(signal, result);
    9390:	2100      	movs	r1, #0
    9392:	4817      	ldr	r0, [pc, #92]	; (93f0 <bt_conn_set_state+0x188>)
}
    9394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9398:	f013 be18 	b.w	1cfcc <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    939c:	2d05      	cmp	r5, #5
    939e:	d103      	bne.n	93a8 <bt_conn_set_state+0x140>
			notify_connected(conn);
    93a0:	4620      	mov	r0, r4
    93a2:	f7ff fc57 	bl	8c54 <notify_connected>
    93a6:	e79e      	b.n	92e6 <bt_conn_set_state+0x7e>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    93a8:	2d01      	cmp	r5, #1
    93aa:	d103      	bne.n	93b4 <bt_conn_set_state+0x14c>
			if (conn->err) {
    93ac:	7b23      	ldrb	r3, [r4, #12]
    93ae:	2b00      	cmp	r3, #0
    93b0:	d099      	beq.n	92e6 <bt_conn_set_state+0x7e>
    93b2:	e7f5      	b.n	93a0 <bt_conn_set_state+0x138>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    93b4:	2d04      	cmp	r5, #4
    93b6:	d0f9      	beq.n	93ac <bt_conn_set_state+0x144>
		} else if (old_state == BT_CONN_CONNECT_AUTO) {
    93b8:	3d02      	subs	r5, #2
    93ba:	2d01      	cmp	r5, #1
    93bc:	d993      	bls.n	92e6 <bt_conn_set_state+0x7e>
}
    93be:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("no valid (%u) state was set", state);
    93c0:	2302      	movs	r3, #2
    93c2:	f04f 0200 	mov.w	r2, #0
    93c6:	f363 0207 	bfi	r2, r3, #0, #8
    93ca:	4906      	ldr	r1, [pc, #24]	; (93e4 <bt_conn_set_state+0x17c>)
    93cc:	4b06      	ldr	r3, [pc, #24]	; (93e8 <bt_conn_set_state+0x180>)
    93ce:	480a      	ldr	r0, [pc, #40]	; (93f8 <bt_conn_set_state+0x190>)
    93d0:	1a5b      	subs	r3, r3, r1
    93d2:	08db      	lsrs	r3, r3, #3
    93d4:	4631      	mov	r1, r6
    93d6:	f363 128f 	bfi	r2, r3, #6, #10
}
    93da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    93de:	f015 bb46 	b.w	1ea6e <log_1>
    93e2:	bf00      	nop
    93e4:	00025a6c 	.word	0x00025a6c
    93e8:	00025a84 	.word	0x00025a84
    93ec:	00028368 	.word	0x00028368
    93f0:	2000df94 	.word	0x2000df94
    93f4:	2000dda4 	.word	0x2000dda4
    93f8:	00028376 	.word	0x00028376

000093fc <bt_conn_lookup_handle>:
{
    93fc:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    93fe:	4c0b      	ldr	r4, [pc, #44]	; (942c <bt_conn_lookup_handle+0x30>)
{
    9400:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    9402:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    9406:	f016 fd29 	bl	1fe5c <atomic_get>
    940a:	b158      	cbz	r0, 9424 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    940c:	7b63      	ldrb	r3, [r4, #13]
    940e:	3b06      	subs	r3, #6
    9410:	2b01      	cmp	r3, #1
    9412:	d808      	bhi.n	9426 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    9414:	8823      	ldrh	r3, [r4, #0]
    9416:	4293      	cmp	r3, r2
    9418:	d105      	bne.n	9426 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    941a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    941e:	f016 fd42 	bl	1fea6 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    9422:	4620      	mov	r0, r4
}
    9424:	bd10      	pop	{r4, pc}
	return NULL;
    9426:	2000      	movs	r0, #0
    9428:	e7fc      	b.n	9424 <bt_conn_lookup_handle+0x28>
    942a:	bf00      	nop
    942c:	20000300 	.word	0x20000300

00009430 <bt_conn_lookup_addr_le>:
{
    9430:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    9432:	4c0d      	ldr	r4, [pc, #52]	; (9468 <bt_conn_lookup_addr_le+0x38>)
{
    9434:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    9436:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    943a:	f016 fd0f 	bl	1fe5c <atomic_get>
    943e:	b908      	cbnz	r0, 9444 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    9440:	2000      	movs	r0, #0
}
    9442:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    9444:	78a2      	ldrb	r2, [r4, #2]
    9446:	2a01      	cmp	r2, #1
    9448:	d1fa      	bne.n	9440 <bt_conn_lookup_addr_le+0x10>
		if (conns[i].id == id &&
    944a:	7a22      	ldrb	r2, [r4, #8]
    944c:	429a      	cmp	r2, r3
    944e:	d1f7      	bne.n	9440 <bt_conn_lookup_addr_le+0x10>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    9450:	4620      	mov	r0, r4
    9452:	f016 fd90 	bl	1ff76 <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    9456:	2800      	cmp	r0, #0
    9458:	d1f2      	bne.n	9440 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    945a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    945e:	f016 fd22 	bl	1fea6 <atomic_inc>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    9462:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    9464:	e7ed      	b.n	9442 <bt_conn_lookup_addr_le+0x12>
    9466:	bf00      	nop
    9468:	20000300 	.word	0x20000300

0000946c <bt_conn_lookup_state_le>:
{
    946c:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    946e:	4c0e      	ldr	r4, [pc, #56]	; (94a8 <bt_conn_lookup_state_le+0x3c>)
{
    9470:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    9472:	f104 004c 	add.w	r0, r4, #76	; 0x4c
{
    9476:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    9478:	f016 fcf0 	bl	1fe5c <atomic_get>
    947c:	b908      	cbnz	r0, 9482 <bt_conn_lookup_state_le+0x16>
	return NULL;
    947e:	2000      	movs	r0, #0
}
    9480:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    9482:	78a2      	ldrb	r2, [r4, #2]
    9484:	2a01      	cmp	r2, #1
    9486:	d1fa      	bne.n	947e <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    9488:	b93b      	cbnz	r3, 949a <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    948a:	7b63      	ldrb	r3, [r4, #13]
    948c:	42ab      	cmp	r3, r5
    948e:	d1f6      	bne.n	947e <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    9490:	4806      	ldr	r0, [pc, #24]	; (94ac <bt_conn_lookup_state_le+0x40>)
    9492:	f016 fd08 	bl	1fea6 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    9496:	4804      	ldr	r0, [pc, #16]	; (94a8 <bt_conn_lookup_state_le+0x3c>)
    9498:	e7f2      	b.n	9480 <bt_conn_lookup_state_le+0x14>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    949a:	4619      	mov	r1, r3
    949c:	4620      	mov	r0, r4
    949e:	f016 fd6a 	bl	1ff76 <bt_conn_addr_le_cmp>
    94a2:	2800      	cmp	r0, #0
    94a4:	d0f1      	beq.n	948a <bt_conn_lookup_state_le+0x1e>
    94a6:	e7ea      	b.n	947e <bt_conn_lookup_state_le+0x12>
    94a8:	20000300 	.word	0x20000300
    94ac:	2000034c 	.word	0x2000034c

000094b0 <bt_conn_foreach>:
		if (!atomic_get(&conns[i].ref)) {
    94b0:	4b09      	ldr	r3, [pc, #36]	; (94d8 <bt_conn_foreach+0x28>)
{
    94b2:	b570      	push	{r4, r5, r6, lr}
    94b4:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    94b6:	f103 004c 	add.w	r0, r3, #76	; 0x4c
{
    94ba:	460c      	mov	r4, r1
		if (!atomic_get(&conns[i].ref)) {
    94bc:	f016 fcce 	bl	1fe5c <atomic_get>
    94c0:	b140      	cbz	r0, 94d4 <bt_conn_foreach+0x24>
		if (!(conns[i].type & type)) {
    94c2:	7899      	ldrb	r1, [r3, #2]
    94c4:	4229      	tst	r1, r5
    94c6:	d005      	beq.n	94d4 <bt_conn_foreach+0x24>
		func(&conns[i], data);
    94c8:	4618      	mov	r0, r3
    94ca:	4611      	mov	r1, r2
    94cc:	4623      	mov	r3, r4
}
    94ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		func(&conns[i], data);
    94d2:	4718      	bx	r3
}
    94d4:	bd70      	pop	{r4, r5, r6, pc}
    94d6:	bf00      	nop
    94d8:	20000300 	.word	0x20000300

000094dc <send_conn_le_param_update>:
{
    94dc:	b538      	push	{r3, r4, r5, lr}
    94de:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    94e0:	4608      	mov	r0, r1
{
    94e2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    94e4:	f016 fc5f 	bl	1fda6 <bt_le_conn_params_valid>
    94e8:	b310      	cbz	r0, 9530 <send_conn_le_param_update+0x54>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    94ea:	4b13      	ldr	r3, [pc, #76]	; (9538 <send_conn_le_param_update+0x5c>)
    94ec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    94f0:	079a      	lsls	r2, r3, #30
    94f2:	d407      	bmi.n	9504 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    94f4:	78e3      	ldrb	r3, [r4, #3]
    94f6:	b17b      	cbz	r3, 9518 <send_conn_le_param_update+0x3c>
	return bt_l2cap_update_conn_param(conn, param);
    94f8:	4629      	mov	r1, r5
    94fa:	4620      	mov	r0, r4
}
    94fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    9500:	f000 bafc 	b.w	9afc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9504:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    9508:	079b      	lsls	r3, r3, #30
    950a:	d5f3      	bpl.n	94f4 <send_conn_le_param_update+0x18>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    950c:	210a      	movs	r1, #10
    950e:	1d20      	adds	r0, r4, #4
    9510:	f016 fcaa 	bl	1fe68 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    9514:	2800      	cmp	r0, #0
    9516:	d1ed      	bne.n	94f4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    9518:	4629      	mov	r1, r5
    951a:	4620      	mov	r0, r4
    951c:	f016 fd83 	bl	20026 <bt_conn_le_conn_update>
		if (rc == 0) {
    9520:	b928      	cbnz	r0, 952e <send_conn_le_param_update+0x52>
			conn->le.pending_latency = param->latency;
    9522:	88ab      	ldrh	r3, [r5, #4]
    9524:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
			conn->le.pending_timeout = param->timeout;
    9528:	88eb      	ldrh	r3, [r5, #6]
    952a:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
}
    952e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9530:	f06f 0015 	mvn.w	r0, #21
    9534:	e7fb      	b.n	952e <send_conn_le_param_update+0x52>
    9536:	bf00      	nop
    9538:	2000dd18 	.word	0x2000dd18

0000953c <conn_update_timeout>:
{
    953c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    953e:	f810 3c43 	ldrb.w	r3, [r0, #-67]
{
    9542:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    9544:	f1a0 0650 	sub.w	r6, r0, #80	; 0x50
	if (conn->state == BT_CONN_DISCONNECTED) {
    9548:	b9f3      	cbnz	r3, 9588 <conn_update_timeout+0x4c>
		bt_l2cap_disconnected(conn);
    954a:	4630      	mov	r0, r6
    954c:	f016 fdd0 	bl	200f0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    9550:	4b25      	ldr	r3, [pc, #148]	; (95e8 <conn_update_timeout+0xac>)
    9552:	681d      	ldr	r5, [r3, #0]
    9554:	b985      	cbnz	r5, 9578 <conn_update_timeout+0x3c>
	atomic_dec(&conn->ref);
    9556:	1f20      	subs	r0, r4, #4
    9558:	f016 fc98 	bl	1fe8c <atomic_dec>
		    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    955c:	2108      	movs	r1, #8
    955e:	4823      	ldr	r0, [pc, #140]	; (95ec <conn_update_timeout+0xb0>)
    9560:	f016 fc82 	bl	1fe68 <atomic_test_bit>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9564:	b130      	cbz	r0, 9574 <conn_update_timeout+0x38>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    9566:	2105      	movs	r1, #5
    9568:	4820      	ldr	r0, [pc, #128]	; (95ec <conn_update_timeout+0xb0>)
    956a:	f016 fc7d 	bl	1fe68 <atomic_test_bit>
		    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    956e:	b908      	cbnz	r0, 9574 <conn_update_timeout+0x38>
			bt_le_adv_resume();
    9570:	f7ff f8c4 	bl	86fc <bt_le_adv_resume>
}
    9574:	b004      	add	sp, #16
    9576:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    9578:	686b      	ldr	r3, [r5, #4]
    957a:	b11b      	cbz	r3, 9584 <conn_update_timeout+0x48>
			cb->disconnected(conn, conn->err);
    957c:	f814 1c44 	ldrb.w	r1, [r4, #-68]
    9580:	4630      	mov	r0, r6
    9582:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9584:	69ad      	ldr	r5, [r5, #24]
    9586:	e7e5      	b.n	9554 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    9588:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
    958c:	2b01      	cmp	r3, #1
    958e:	d1f1      	bne.n	9574 <conn_update_timeout+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9590:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    9594:	f1a0 054c 	sub.w	r5, r0, #76	; 0x4c
    9598:	e855 3f00 	ldrex	r3, [r5]
    959c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    95a0:	e845 2100 	strex	r1, r2, [r5]
    95a4:	2900      	cmp	r1, #0
    95a6:	d1f7      	bne.n	9598 <conn_update_timeout+0x5c>
    95a8:	f3bf 8f5b 	dmb	ish
    95ac:	059b      	lsls	r3, r3, #22
    95ae:	d514      	bpl.n	95da <conn_update_timeout+0x9e>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    95b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    95b2:	9300      	str	r3, [sp, #0]
    95b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    95b6:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    95b8:	4669      	mov	r1, sp
			send_conn_le_param_update(conn, param);
    95ba:	4630      	mov	r0, r6
    95bc:	f7ff ff8e 	bl	94dc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    95c0:	f3bf 8f5b 	dmb	ish
    95c4:	e855 3f00 	ldrex	r3, [r5]
    95c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    95cc:	e845 3200 	strex	r2, r3, [r5]
    95d0:	2a00      	cmp	r2, #0
    95d2:	d1f7      	bne.n	95c4 <conn_update_timeout+0x88>
    95d4:	f3bf 8f5b 	dmb	ish
    95d8:	e7cc      	b.n	9574 <conn_update_timeout+0x38>
			param = BT_LE_CONN_PARAM(
    95da:	4a05      	ldr	r2, [pc, #20]	; (95f0 <conn_update_timeout+0xb4>)
    95dc:	6851      	ldr	r1, [r2, #4]
    95de:	6810      	ldr	r0, [r2, #0]
    95e0:	ab02      	add	r3, sp, #8
    95e2:	c303      	stmia	r3!, {r0, r1}
			send_conn_le_param_update(conn, param);
    95e4:	a902      	add	r1, sp, #8
    95e6:	e7e8      	b.n	95ba <conn_update_timeout+0x7e>
    95e8:	200002cc 	.word	0x200002cc
    95ec:	2000dd88 	.word	0x2000dd88
    95f0:	00025c40 	.word	0x00025c40

000095f4 <bt_conn_create_pdu_timeout>:
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    95f4:	4b10      	ldr	r3, [pc, #64]	; (9638 <bt_conn_create_pdu_timeout+0x44>)
{
    95f6:	b570      	push	{r4, r5, r6, lr}
		buf = net_buf_alloc(pool, timeout);
    95f8:	2800      	cmp	r0, #0
    95fa:	bf08      	it	eq
    95fc:	4618      	moveq	r0, r3
{
    95fe:	460e      	mov	r6, r1
		buf = net_buf_alloc(pool, timeout);
    9600:	4611      	mov	r1, r2
{
    9602:	4615      	mov	r5, r2
		buf = net_buf_alloc(pool, timeout);
    9604:	f018 ffe2 	bl	225cc <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    9608:	4604      	mov	r4, r0
    960a:	b980      	cbnz	r0, 962e <bt_conn_create_pdu_timeout+0x3a>
		BT_WARN("Unable to allocate buffer: timeout %d", timeout);
    960c:	2302      	movs	r3, #2
    960e:	f04f 0200 	mov.w	r2, #0
    9612:	f363 0207 	bfi	r2, r3, #0, #8
    9616:	4909      	ldr	r1, [pc, #36]	; (963c <bt_conn_create_pdu_timeout+0x48>)
    9618:	4b09      	ldr	r3, [pc, #36]	; (9640 <bt_conn_create_pdu_timeout+0x4c>)
    961a:	480a      	ldr	r0, [pc, #40]	; (9644 <bt_conn_create_pdu_timeout+0x50>)
    961c:	1a5b      	subs	r3, r3, r1
    961e:	08db      	lsrs	r3, r3, #3
    9620:	f363 128f 	bfi	r2, r3, #6, #10
    9624:	4629      	mov	r1, r5
    9626:	f015 fa22 	bl	1ea6e <log_1>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    962a:	4620      	mov	r0, r4
    962c:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_reserve(buf, reserve);
    962e:	1d31      	adds	r1, r6, #4
    9630:	3008      	adds	r0, #8
    9632:	f018 ffea 	bl	2260a <net_buf_simple_reserve>
	return buf;
    9636:	e7f8      	b.n	962a <bt_conn_create_pdu_timeout+0x36>
    9638:	2000e6c8 	.word	0x2000e6c8
    963c:	00025a6c 	.word	0x00025a6c
    9640:	00025a84 	.word	0x00025a84
    9644:	00028216 	.word	0x00028216

00009648 <bt_conn_create_frag_timeout>:
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    9648:	460a      	mov	r2, r1
    964a:	4601      	mov	r1, r0
    964c:	4801      	ldr	r0, [pc, #4]	; (9654 <bt_conn_create_frag_timeout+0xc>)
    964e:	f7ff bfd1 	b.w	95f4 <bt_conn_create_pdu_timeout>
    9652:	bf00      	nop
    9654:	2000e728 	.word	0x2000e728

00009658 <create_frag.isra.11>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    9658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    965c:	4606      	mov	r6, r0
    965e:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    9660:	2000      	movs	r0, #0
    9662:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9666:	f7ff ffef 	bl	9648 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    966a:	7833      	ldrb	r3, [r6, #0]
    966c:	2b06      	cmp	r3, #6
	frag = bt_conn_create_frag(0);
    966e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9670:	f04f 0600 	mov.w	r6, #0
    9674:	d005      	beq.n	9682 <create_frag.isra.11+0x2a>
		net_buf_unref(frag);
    9676:	f00d ffad 	bl	175d4 <net_buf_unref>
		return NULL;
    967a:	4635      	mov	r5, r6
}
    967c:	4628      	mov	r0, r5
    967e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    9682:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9684:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    9688:	4e0c      	ldr	r6, [pc, #48]	; (96bc <create_frag.isra.11+0x64>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    968a:	4638      	mov	r0, r7
    968c:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    9690:	f019 f815 	bl	226be <net_buf_simple_tailroom>
    9694:	4580      	cmp	r8, r0
    9696:	d20c      	bcs.n	96b2 <create_frag.isra.11+0x5a>
	return bt_dev.le.mtu;
    9698:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    969c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    96a0:	4632      	mov	r2, r6
    96a2:	4638      	mov	r0, r7
    96a4:	f018 ffcc 	bl	22640 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    96a8:	4631      	mov	r1, r6
    96aa:	4620      	mov	r0, r4
    96ac:	f018 ffeb 	bl	22686 <net_buf_simple_pull>
	return frag;
    96b0:	e7e4      	b.n	967c <create_frag.isra.11+0x24>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    96b2:	4638      	mov	r0, r7
    96b4:	f019 f803 	bl	226be <net_buf_simple_tailroom>
    96b8:	b286      	uxth	r6, r0
    96ba:	e7ef      	b.n	969c <create_frag.isra.11+0x44>
    96bc:	2000dd18 	.word	0x2000dd18

000096c0 <bt_conn_process_tx>:
{
    96c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    96c2:	7b43      	ldrb	r3, [r0, #13]
{
    96c4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    96c6:	b993      	cbnz	r3, 96ee <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    96c8:	f3bf 8f5b 	dmb	ish
    96cc:	1d03      	adds	r3, r0, #4
    96ce:	e853 2f00 	ldrex	r2, [r3]
    96d2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    96d6:	e843 1400 	strex	r4, r1, [r3]
    96da:	2c00      	cmp	r4, #0
    96dc:	d1f7      	bne.n	96ce <bt_conn_process_tx+0xe>
    96de:	f3bf 8f5b 	dmb	ish
    96e2:	0653      	lsls	r3, r2, #25
    96e4:	d503      	bpl.n	96ee <bt_conn_process_tx+0x2e>
}
    96e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    96ea:	f7ff bb63 	b.w	8db4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    96ee:	2100      	movs	r1, #0
    96f0:	f105 0034 	add.w	r0, r5, #52	; 0x34
    96f4:	f018 ff70 	bl	225d8 <net_buf_get>
	BT_ASSERT(buf);
    96f8:	4604      	mov	r4, r0
    96fa:	b960      	cbnz	r0, 9716 <bt_conn_process_tx+0x56>
    96fc:	f240 6316 	movw	r3, #1558	; 0x616
    9700:	4a1f      	ldr	r2, [pc, #124]	; (9780 <bt_conn_process_tx+0xc0>)
    9702:	4920      	ldr	r1, [pc, #128]	; (9784 <bt_conn_process_tx+0xc4>)
    9704:	4820      	ldr	r0, [pc, #128]	; (9788 <bt_conn_process_tx+0xc8>)
    9706:	f014 f856 	bl	1d7b6 <printk>
    970a:	4040      	eors	r0, r0
    970c:	f380 8811 	msr	BASEPRI, r0
    9710:	f04f 0003 	mov.w	r0, #3
    9714:	df02      	svc	2
	return bt_dev.le.mtu;
    9716:	4e1d      	ldr	r6, [pc, #116]	; (978c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    9718:	89a1      	ldrh	r1, [r4, #12]
    971a:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    971e:	4291      	cmp	r1, r2
    9720:	d807      	bhi.n	9732 <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    9722:	2300      	movs	r3, #0
    9724:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    9726:	4621      	mov	r1, r4
    9728:	4628      	mov	r0, r5
    972a:	f7ff faa9 	bl	8c80 <send_frag>
	if (!send_buf(conn, buf)) {
    972e:	b140      	cbz	r0, 9742 <bt_conn_process_tx+0x82>
}
    9730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    9732:	f105 070d 	add.w	r7, r5, #13
    9736:	4621      	mov	r1, r4
    9738:	4638      	mov	r0, r7
    973a:	f7ff ff8d 	bl	9658 <create_frag.isra.11>
	if (!frag) {
    973e:	4601      	mov	r1, r0
    9740:	b920      	cbnz	r0, 974c <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
    9742:	4620      	mov	r0, r4
}
    9744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    9748:	f00d bf44 	b.w	175d4 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    974c:	2301      	movs	r3, #1
    974e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    9750:	4628      	mov	r0, r5
    9752:	f7ff fa95 	bl	8c80 <send_frag>
    9756:	2800      	cmp	r0, #0
    9758:	d0f3      	beq.n	9742 <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
    975a:	89a2      	ldrh	r2, [r4, #12]
    975c:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    9760:	429a      	cmp	r2, r3
    9762:	d802      	bhi.n	976a <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    9764:	2300      	movs	r3, #0
    9766:	2201      	movs	r2, #1
    9768:	e7dd      	b.n	9726 <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
    976a:	4621      	mov	r1, r4
    976c:	4638      	mov	r0, r7
    976e:	f7ff ff73 	bl	9658 <create_frag.isra.11>
		if (!frag) {
    9772:	4601      	mov	r1, r0
    9774:	2800      	cmp	r0, #0
    9776:	d0e4      	beq.n	9742 <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    9778:	2301      	movs	r3, #1
    977a:	461a      	mov	r2, r3
    977c:	e7e8      	b.n	9750 <bt_conn_process_tx+0x90>
    977e:	bf00      	nop
    9780:	0002823c 	.word	0x0002823c
    9784:	00029ae0 	.word	0x00029ae0
    9788:	00027ff4 	.word	0x00027ff4
    978c:	2000dd18 	.word	0x2000dd18

00009790 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    9790:	4b03      	ldr	r3, [pc, #12]	; (97a0 <bt_conn_index+0x10>)
    9792:	1ac0      	subs	r0, r0, r3
    9794:	4b03      	ldr	r3, [pc, #12]	; (97a4 <bt_conn_index+0x14>)
    9796:	1140      	asrs	r0, r0, #5
    9798:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    979a:	b2c0      	uxtb	r0, r0
    979c:	4770      	bx	lr
    979e:	bf00      	nop
    97a0:	20000300 	.word	0x20000300
    97a4:	cccccccd 	.word	0xcccccccd

000097a8 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    97a8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    97aa:	490b      	ldr	r1, [pc, #44]	; (97d8 <bt_conn_init+0x30>)
    97ac:	480b      	ldr	r0, [pc, #44]	; (97dc <bt_conn_init+0x34>)
    97ae:	f01b fc5c 	bl	2506a <k_queue_append>
    97b2:	490b      	ldr	r1, [pc, #44]	; (97e0 <bt_conn_init+0x38>)
    97b4:	4809      	ldr	r0, [pc, #36]	; (97dc <bt_conn_init+0x34>)
    97b6:	f01b fc58 	bl	2506a <k_queue_append>
    97ba:	490a      	ldr	r1, [pc, #40]	; (97e4 <bt_conn_init+0x3c>)
    97bc:	4807      	ldr	r0, [pc, #28]	; (97dc <bt_conn_init+0x34>)
    97be:	f01b fc54 	bl	2506a <k_queue_append>
	}

	bt_att_init();
    97c2:	f016 ff9f 	bl	20704 <bt_att_init>

	err = bt_smp_init();
    97c6:	f004 ff69 	bl	e69c <bt_smp_init>
	if (err) {
    97ca:	4604      	mov	r4, r0
    97cc:	b908      	cbnz	r0, 97d2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    97ce:	f016 fce2 	bl	20196 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    97d2:	4620      	mov	r0, r4
    97d4:	bd10      	pop	{r4, pc}
    97d6:	bf00      	nop
    97d8:	200002d0 	.word	0x200002d0
    97dc:	2000e6a8 	.word	0x2000e6a8
    97e0:	200002e0 	.word	0x200002e0
    97e4:	200002f0 	.word	0x200002f0

000097e8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    97e8:	4a0d      	ldr	r2, [pc, #52]	; (9820 <l2cap_accept+0x38>)
{
    97ea:	b508      	push	{r3, lr}
		if (l2cap->chan.chan.conn) {
    97ec:	6813      	ldr	r3, [r2, #0]
    97ee:	b923      	cbnz	r3, 97fa <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    97f0:	480c      	ldr	r0, [pc, #48]	; (9824 <l2cap_accept+0x3c>)
    97f2:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    97f4:	600a      	str	r2, [r1, #0]

		return 0;
    97f6:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    97f8:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    97fa:	2301      	movs	r3, #1
    97fc:	f04f 0200 	mov.w	r2, #0
    9800:	f363 0207 	bfi	r2, r3, #0, #8
    9804:	4908      	ldr	r1, [pc, #32]	; (9828 <l2cap_accept+0x40>)
    9806:	4b09      	ldr	r3, [pc, #36]	; (982c <l2cap_accept+0x44>)
    9808:	1a5b      	subs	r3, r3, r1
    980a:	08db      	lsrs	r3, r3, #3
    980c:	4601      	mov	r1, r0
    980e:	f363 128f 	bfi	r2, r3, #6, #10
    9812:	4807      	ldr	r0, [pc, #28]	; (9830 <l2cap_accept+0x48>)
    9814:	f015 f92b 	bl	1ea6e <log_1>
	return -ENOMEM;
    9818:	f06f 000b 	mvn.w	r0, #11
    981c:	e7ec      	b.n	97f8 <l2cap_accept+0x10>
    981e:	bf00      	nop
    9820:	200003a0 	.word	0x200003a0
    9824:	000261b4 	.word	0x000261b4
    9828:	00025a6c 	.word	0x00025a6c
    982c:	00025b4c 	.word	0x00025b4c
    9830:	0002841d 	.word	0x0002841d

00009834 <l2cap_create_le_sig_pdu.isra.8>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    9834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9836:	4605      	mov	r5, r0
    9838:	460f      	mov	r7, r1
    983a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    983c:	2104      	movs	r1, #4
    983e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    9842:	2000      	movs	r0, #0
    9844:	f7ff fed6 	bl	95f4 <bt_conn_create_pdu_timeout>
	if (!buf) {
    9848:	4604      	mov	r4, r0
    984a:	b980      	cbnz	r0, 986e <l2cap_create_le_sig_pdu.isra.8+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    984c:	2301      	movs	r3, #1
    984e:	f04f 0200 	mov.w	r2, #0
    9852:	f363 0207 	bfi	r2, r3, #0, #8
    9856:	490a      	ldr	r1, [pc, #40]	; (9880 <l2cap_create_le_sig_pdu.isra.8+0x4c>)
    9858:	4b0a      	ldr	r3, [pc, #40]	; (9884 <l2cap_create_le_sig_pdu.isra.8+0x50>)
    985a:	480b      	ldr	r0, [pc, #44]	; (9888 <l2cap_create_le_sig_pdu.isra.8+0x54>)
    985c:	1a5b      	subs	r3, r3, r1
    985e:	08db      	lsrs	r3, r3, #3
    9860:	f363 128f 	bfi	r2, r3, #6, #10
    9864:	4629      	mov	r1, r5
    9866:	f015 f902 	bl	1ea6e <log_1>
}
    986a:	4620      	mov	r0, r4
    986c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    986e:	2104      	movs	r1, #4
    9870:	3008      	adds	r0, #8
    9872:	f018 fedf 	bl	22634 <net_buf_simple_add>
	hdr->code = code;
    9876:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    9878:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    987a:	8046      	strh	r6, [r0, #2]
	return buf;
    987c:	e7f5      	b.n	986a <l2cap_create_le_sig_pdu.isra.8+0x36>
    987e:	bf00      	nop
    9880:	00025a6c 	.word	0x00025a6c
    9884:	00025b4c 	.word	0x00025b4c
    9888:	00028444 	.word	0x00028444

0000988c <l2cap_rtx_timeout>:
{
    988c:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    988e:	f04f 0200 	mov.w	r2, #0
    9892:	2301      	movs	r3, #1
    9894:	f363 0207 	bfi	r2, r3, #0, #8
    9898:	490b      	ldr	r1, [pc, #44]	; (98c8 <l2cap_rtx_timeout+0x3c>)
    989a:	4b0c      	ldr	r3, [pc, #48]	; (98cc <l2cap_rtx_timeout+0x40>)
    989c:	1a5b      	subs	r3, r3, r1
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    989e:	f1a0 0410 	sub.w	r4, r0, #16
    98a2:	08db      	lsrs	r3, r3, #3
{
    98a4:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    98a6:	f363 128f 	bfi	r2, r3, #6, #10
    98aa:	4621      	mov	r1, r4
    98ac:	4808      	ldr	r0, [pc, #32]	; (98d0 <l2cap_rtx_timeout+0x44>)
    98ae:	f015 f8de 	bl	1ea6e <log_1>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    98b2:	f855 0c10 	ldr.w	r0, [r5, #-16]
    98b6:	4621      	mov	r1, r4
    98b8:	f016 fbdf 	bl	2007a <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    98bc:	4620      	mov	r0, r4
}
    98be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    98c2:	f016 bbfa 	b.w	200ba <bt_l2cap_chan_del>
    98c6:	bf00      	nop
    98c8:	00025a6c 	.word	0x00025a6c
    98cc:	00025b4c 	.word	0x00025b4c
    98d0:	00028506 	.word	0x00028506

000098d4 <bt_l2cap_connected>:
{
    98d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    98d8:	4e21      	ldr	r6, [pc, #132]	; (9960 <bt_l2cap_connected+0x8c>)
    98da:	4f22      	ldr	r7, [pc, #136]	; (9964 <bt_l2cap_connected+0x90>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    98dc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 9968 <bt_l2cap_connected+0x94>
{
    98e0:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    98e2:	42be      	cmp	r6, r7
    98e4:	d302      	bcc.n	98ec <bt_l2cap_connected+0x18>
}
    98e6:	b002      	add	sp, #8
    98e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (fchan->accept(conn, &chan) < 0) {
    98ec:	6873      	ldr	r3, [r6, #4]
    98ee:	a901      	add	r1, sp, #4
    98f0:	4628      	mov	r0, r5
    98f2:	4798      	blx	r3
    98f4:	2800      	cmp	r0, #0
    98f6:	db2d      	blt.n	9954 <bt_l2cap_connected+0x80>
		ch = BT_L2CAP_LE_CHAN(chan);
    98f8:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    98fa:	8833      	ldrh	r3, [r6, #0]
    98fc:	86a3      	strh	r3, [r4, #52]	; 0x34
		ch->tx.cid = fchan->cid;
    98fe:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    9902:	4641      	mov	r1, r8
    9904:	f104 0010 	add.w	r0, r4, #16
    9908:	f01b fdaf 	bl	2546a <k_delayed_work_init>
	parent->next = child;
    990c:	2300      	movs	r3, #0
    990e:	60a3      	str	r3, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    9910:	6ca9      	ldr	r1, [r5, #72]	; 0x48
	sys_slist_append(&conn->channels, &chan->node);
    9912:	f104 0208 	add.w	r2, r4, #8
    9916:	b9f9      	cbnz	r1, 9958 <bt_l2cap_connected+0x84>
	list->head = node;
    9918:	e9c5 2211 	strd	r2, r2, [r5, #68]	; 0x44
		if (chan->ops->connected) {
    991c:	9801      	ldr	r0, [sp, #4]
	chan->destroy = destroy;
    991e:	60e3      	str	r3, [r4, #12]
		if (chan->ops->connected) {
    9920:	6843      	ldr	r3, [r0, #4]
	chan->conn = conn;
    9922:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    9924:	681b      	ldr	r3, [r3, #0]
    9926:	b103      	cbz	r3, 992a <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
    9928:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    992a:	9b01      	ldr	r3, [sp, #4]
    992c:	f3bf 8f5b 	dmb	ish
    9930:	3330      	adds	r3, #48	; 0x30
    9932:	e853 2f00 	ldrex	r2, [r3]
    9936:	f042 0201 	orr.w	r2, r2, #1
    993a:	e843 2100 	strex	r1, r2, [r3]
    993e:	2900      	cmp	r1, #0
    9940:	d1f7      	bne.n	9932 <bt_l2cap_connected+0x5e>
    9942:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    9946:	9801      	ldr	r0, [sp, #4]
    9948:	6843      	ldr	r3, [r0, #4]
    994a:	699b      	ldr	r3, [r3, #24]
    994c:	b113      	cbz	r3, 9954 <bt_l2cap_connected+0x80>
			chan->ops->status(chan, chan->status);
    994e:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9952:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    9954:	3608      	adds	r6, #8
    9956:	e7c4      	b.n	98e2 <bt_l2cap_connected+0xe>
	parent->next = child;
    9958:	600a      	str	r2, [r1, #0]
	list->tail = node;
    995a:	64aa      	str	r2, [r5, #72]	; 0x48
    995c:	e7de      	b.n	991c <bt_l2cap_connected+0x48>
    995e:	bf00      	nop
    9960:	000259c8 	.word	0x000259c8
    9964:	000259e0 	.word	0x000259e0
    9968:	0000988d 	.word	0x0000988d

0000996c <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    996c:	898b      	ldrh	r3, [r1, #12]
    996e:	2b03      	cmp	r3, #3
{
    9970:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9972:	4605      	mov	r5, r0
    9974:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    9976:	d80e      	bhi.n	9996 <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
    9978:	2301      	movs	r3, #1
    997a:	f04f 0100 	mov.w	r1, #0
    997e:	f363 0107 	bfi	r1, r3, #0, #8
    9982:	4a36      	ldr	r2, [pc, #216]	; (9a5c <l2cap_recv+0xf0>)
    9984:	4b36      	ldr	r3, [pc, #216]	; (9a60 <l2cap_recv+0xf4>)
    9986:	4837      	ldr	r0, [pc, #220]	; (9a64 <l2cap_recv+0xf8>)
    9988:	1a9b      	subs	r3, r3, r2
    998a:	08db      	lsrs	r3, r3, #3
    998c:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid ident value in L2CAP PDU");
    9990:	f015 f860 	bl	1ea54 <log_0>
		return 0;
    9994:	e017      	b.n	99c6 <l2cap_recv+0x5a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9996:	2104      	movs	r1, #4
    9998:	f106 0008 	add.w	r0, r6, #8
    999c:	f018 fe7b 	bl	22696 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    99a0:	89b1      	ldrh	r1, [r6, #12]
	len = sys_le16_to_cpu(hdr->len);
    99a2:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    99a4:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    99a6:	4604      	mov	r4, r0
	if (buf->len != len) {
    99a8:	d010      	beq.n	99cc <l2cap_recv+0x60>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    99aa:	2001      	movs	r0, #1
    99ac:	f04f 0300 	mov.w	r3, #0
    99b0:	f360 0307 	bfi	r3, r0, #0, #8
    99b4:	4c29      	ldr	r4, [pc, #164]	; (9a5c <l2cap_recv+0xf0>)
    99b6:	482a      	ldr	r0, [pc, #168]	; (9a60 <l2cap_recv+0xf4>)
    99b8:	1b00      	subs	r0, r0, r4
    99ba:	08c0      	lsrs	r0, r0, #3
    99bc:	f360 138f 	bfi	r3, r0, #6, #10
    99c0:	4829      	ldr	r0, [pc, #164]	; (9a68 <l2cap_recv+0xfc>)
    99c2:	f015 f868 	bl	1ea96 <log_2>
}
    99c6:	2000      	movs	r0, #0
    99c8:	b002      	add	sp, #8
    99ca:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    99cc:	7843      	ldrb	r3, [r0, #1]
    99ce:	b963      	cbnz	r3, 99ea <l2cap_recv+0x7e>
		BT_ERR("Invalid ident value in L2CAP PDU");
    99d0:	2301      	movs	r3, #1
    99d2:	f04f 0100 	mov.w	r1, #0
    99d6:	f363 0107 	bfi	r1, r3, #0, #8
    99da:	4a20      	ldr	r2, [pc, #128]	; (9a5c <l2cap_recv+0xf0>)
    99dc:	4b20      	ldr	r3, [pc, #128]	; (9a60 <l2cap_recv+0xf4>)
    99de:	4823      	ldr	r0, [pc, #140]	; (9a6c <l2cap_recv+0x100>)
    99e0:	1a9b      	subs	r3, r3, r2
    99e2:	08db      	lsrs	r3, r3, #3
    99e4:	f363 118f 	bfi	r1, r3, #6, #10
    99e8:	e7d2      	b.n	9990 <l2cap_recv+0x24>
	switch (hdr->code) {
    99ea:	7801      	ldrb	r1, [r0, #0]
    99ec:	2901      	cmp	r1, #1
    99ee:	d0ea      	beq.n	99c6 <l2cap_recv+0x5a>
    99f0:	2913      	cmp	r1, #19
    99f2:	d10e      	bne.n	9a12 <l2cap_recv+0xa6>
	if (buf->len < sizeof(*rsp)) {
    99f4:	2a01      	cmp	r2, #1
    99f6:	d8e6      	bhi.n	99c6 <l2cap_recv+0x5a>
		BT_ERR("Too small LE conn param rsp");
    99f8:	2301      	movs	r3, #1
    99fa:	f04f 0100 	mov.w	r1, #0
    99fe:	f363 0107 	bfi	r1, r3, #0, #8
    9a02:	4a16      	ldr	r2, [pc, #88]	; (9a5c <l2cap_recv+0xf0>)
    9a04:	4b16      	ldr	r3, [pc, #88]	; (9a60 <l2cap_recv+0xf4>)
    9a06:	481a      	ldr	r0, [pc, #104]	; (9a70 <l2cap_recv+0x104>)
    9a08:	1a9b      	subs	r3, r3, r2
    9a0a:	08db      	lsrs	r3, r3, #3
    9a0c:	f363 118f 	bfi	r1, r3, #6, #10
    9a10:	e7be      	b.n	9990 <l2cap_recv+0x24>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    9a12:	2302      	movs	r3, #2
    9a14:	f04f 0200 	mov.w	r2, #0
    9a18:	f363 0207 	bfi	r2, r3, #0, #8
    9a1c:	480f      	ldr	r0, [pc, #60]	; (9a5c <l2cap_recv+0xf0>)
    9a1e:	4b10      	ldr	r3, [pc, #64]	; (9a60 <l2cap_recv+0xf4>)
    9a20:	1a1b      	subs	r3, r3, r0
    9a22:	08db      	lsrs	r3, r3, #3
    9a24:	f363 128f 	bfi	r2, r3, #6, #10
    9a28:	4812      	ldr	r0, [pc, #72]	; (9a74 <l2cap_recv+0x108>)
    9a2a:	f015 f820 	bl	1ea6e <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    9a2e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    9a30:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    9a32:	2202      	movs	r2, #2
    9a34:	2001      	movs	r0, #1
    9a36:	f7ff fefd 	bl	9834 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    9a3a:	4604      	mov	r4, r0
    9a3c:	2800      	cmp	r0, #0
    9a3e:	d0c2      	beq.n	99c6 <l2cap_recv+0x5a>
	rej = net_buf_add(buf, sizeof(*rej));
    9a40:	2102      	movs	r1, #2
    9a42:	3008      	adds	r0, #8
    9a44:	f018 fdf6 	bl	22634 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    9a48:	2300      	movs	r3, #0
    9a4a:	7003      	strb	r3, [r0, #0]
    9a4c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    9a4e:	4622      	mov	r2, r4
    9a50:	9300      	str	r3, [sp, #0]
    9a52:	2105      	movs	r1, #5
    9a54:	4628      	mov	r0, r5
    9a56:	f016 fb70 	bl	2013a <bt_l2cap_send_cb>
    9a5a:	e7b4      	b.n	99c6 <l2cap_recv+0x5a>
    9a5c:	00025a6c 	.word	0x00025a6c
    9a60:	00025b4c 	.word	0x00025b4c
    9a64:	0002846c 	.word	0x0002846c
    9a68:	0002848a 	.word	0x0002848a
    9a6c:	000284ab 	.word	0x000284ab
    9a70:	000284cc 	.word	0x000284cc
    9a74:	000284e8 	.word	0x000284e8

00009a78 <bt_l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    9a78:	898b      	ldrh	r3, [r1, #12]
    9a7a:	2b03      	cmp	r3, #3
{
    9a7c:	b570      	push	{r4, r5, r6, lr}
    9a7e:	4606      	mov	r6, r0
    9a80:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    9a82:	d812      	bhi.n	9aaa <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
    9a84:	2301      	movs	r3, #1
    9a86:	f04f 0100 	mov.w	r1, #0
    9a8a:	f363 0107 	bfi	r1, r3, #0, #8
    9a8e:	4a17      	ldr	r2, [pc, #92]	; (9aec <bt_l2cap_recv+0x74>)
    9a90:	4b17      	ldr	r3, [pc, #92]	; (9af0 <bt_l2cap_recv+0x78>)
    9a92:	4818      	ldr	r0, [pc, #96]	; (9af4 <bt_l2cap_recv+0x7c>)
    9a94:	1a9b      	subs	r3, r3, r2
    9a96:	08db      	lsrs	r3, r3, #3
    9a98:	f363 118f 	bfi	r1, r3, #6, #10
    9a9c:	f014 ffda 	bl	1ea54 <log_0>
	net_buf_unref(buf);
    9aa0:	4620      	mov	r0, r4
}
    9aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    9aa6:	f00d bd95 	b.w	175d4 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9aaa:	2104      	movs	r1, #4
    9aac:	f104 0008 	add.w	r0, r4, #8
    9ab0:	f018 fdf1 	bl	22696 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    9ab4:	8845      	ldrh	r5, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    9ab6:	4630      	mov	r0, r6
    9ab8:	4629      	mov	r1, r5
    9aba:	f016 fb62 	bl	20182 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9abe:	b978      	cbnz	r0, 9ae0 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    9ac0:	2302      	movs	r3, #2
    9ac2:	f04f 0200 	mov.w	r2, #0
    9ac6:	f363 0207 	bfi	r2, r3, #0, #8
    9aca:	4908      	ldr	r1, [pc, #32]	; (9aec <bt_l2cap_recv+0x74>)
    9acc:	4b08      	ldr	r3, [pc, #32]	; (9af0 <bt_l2cap_recv+0x78>)
    9ace:	480a      	ldr	r0, [pc, #40]	; (9af8 <bt_l2cap_recv+0x80>)
    9ad0:	1a5b      	subs	r3, r3, r1
    9ad2:	08db      	lsrs	r3, r3, #3
    9ad4:	f363 128f 	bfi	r2, r3, #6, #10
    9ad8:	4629      	mov	r1, r5
    9ada:	f014 ffc8 	bl	1ea6e <log_1>
		net_buf_unref(buf);
    9ade:	e7df      	b.n	9aa0 <bt_l2cap_recv+0x28>
	chan->ops->recv(chan, buf);
    9ae0:	6843      	ldr	r3, [r0, #4]
    9ae2:	4621      	mov	r1, r4
    9ae4:	691b      	ldr	r3, [r3, #16]
    9ae6:	4798      	blx	r3
    9ae8:	e7da      	b.n	9aa0 <bt_l2cap_recv+0x28>
    9aea:	bf00      	nop
    9aec:	00025a6c 	.word	0x00025a6c
    9af0:	00025b4c 	.word	0x00025b4c
    9af4:	000283db 	.word	0x000283db
    9af8:	000283f8 	.word	0x000283f8

00009afc <bt_l2cap_update_conn_param>:
{
    9afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    9afe:	4b15      	ldr	r3, [pc, #84]	; (9b54 <bt_l2cap_update_conn_param+0x58>)
    9b00:	781a      	ldrb	r2, [r3, #0]
    9b02:	3201      	adds	r2, #1
	if (!ident) {
    9b04:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    9b08:	bf08      	it	eq
    9b0a:	2201      	moveq	r2, #1
    9b0c:	701a      	strb	r2, [r3, #0]
{
    9b0e:	4605      	mov	r5, r0
    9b10:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    9b12:	2208      	movs	r2, #8
    9b14:	7819      	ldrb	r1, [r3, #0]
    9b16:	2012      	movs	r0, #18
    9b18:	f7ff fe8c 	bl	9834 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    9b1c:	4606      	mov	r6, r0
    9b1e:	b1b0      	cbz	r0, 9b4e <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    9b20:	2108      	movs	r1, #8
    9b22:	4408      	add	r0, r1
    9b24:	f018 fd86 	bl	22634 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    9b28:	8823      	ldrh	r3, [r4, #0]
    9b2a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    9b2c:	8863      	ldrh	r3, [r4, #2]
    9b2e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    9b30:	88a3      	ldrh	r3, [r4, #4]
    9b32:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    9b34:	88e3      	ldrh	r3, [r4, #6]
    9b36:	80c3      	strh	r3, [r0, #6]
    9b38:	2400      	movs	r4, #0
    9b3a:	9400      	str	r4, [sp, #0]
    9b3c:	4623      	mov	r3, r4
    9b3e:	4632      	mov	r2, r6
    9b40:	2105      	movs	r1, #5
    9b42:	4628      	mov	r0, r5
    9b44:	f016 faf9 	bl	2013a <bt_l2cap_send_cb>
	return 0;
    9b48:	4620      	mov	r0, r4
}
    9b4a:	b002      	add	sp, #8
    9b4c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    9b4e:	f06f 000b 	mvn.w	r0, #11
    9b52:	e7fa      	b.n	9b4a <bt_l2cap_update_conn_param+0x4e>
    9b54:	2000a520 	.word	0x2000a520

00009b58 <find_type_cb>:
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    9b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
    9b5c:	680e      	ldr	r6, [r1, #0]
{
    9b5e:	b092      	sub	sp, #72	; 0x48
    9b60:	4605      	mov	r5, r0
    9b62:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9b64:	2700      	movs	r7, #0
    9b66:	f642 0301 	movw	r3, #10241	; 0x2801
    9b6a:	a902      	add	r1, sp, #8
    9b6c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9b6e:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9b72:	f88d 7008 	strb.w	r7, [sp, #8]
    9b76:	f8ad 300a 	strh.w	r3, [sp, #10]
    9b7a:	f016 f81f 	bl	1fbbc <bt_uuid_cmp>
    9b7e:	2800      	cmp	r0, #0
    9b80:	d03e      	beq.n	9c00 <find_type_cb+0xa8>
		goto skip;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    9b82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9b86:	a903      	add	r1, sp, #12
    9b88:	6828      	ldr	r0, [r5, #0]
    9b8a:	f88d 700c 	strb.w	r7, [sp, #12]
    9b8e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9b92:	f016 f813 	bl	1fbbc <bt_uuid_cmp>
    9b96:	b150      	cbz	r0, 9bae <find_type_cb+0x56>
		if (data->group &&
    9b98:	68a3      	ldr	r3, [r4, #8]
    9b9a:	b123      	cbz	r3, 9ba6 <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    9b9c:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    9b9e:	8859      	ldrh	r1, [r3, #2]
    9ba0:	4291      	cmp	r1, r2
    9ba2:	d200      	bcs.n	9ba6 <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9ba4:	805a      	strh	r2, [r3, #2]
		}
		return BT_GATT_ITER_CONTINUE;
    9ba6:	2001      	movs	r0, #1
	return BT_GATT_ITER_CONTINUE;

skip:
	data->group = NULL;
	return BT_GATT_ITER_CONTINUE;
}
    9ba8:	b012      	add	sp, #72	; 0x48
    9baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    9bae:	6862      	ldr	r2, [r4, #4]
    9bb0:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
    9bb4:	8992      	ldrh	r2, [r2, #12]
    9bb6:	1a9b      	subs	r3, r3, r2
    9bb8:	2b03      	cmp	r3, #3
    9bba:	d9f5      	bls.n	9ba8 <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    9bbc:	2310      	movs	r3, #16
    9bbe:	9000      	str	r0, [sp, #0]
    9bc0:	686e      	ldr	r6, [r5, #4]
    9bc2:	eb0d 0203 	add.w	r2, sp, r3
    9bc6:	4629      	mov	r1, r5
    9bc8:	4640      	mov	r0, r8
    9bca:	47b0      	blx	r6
	if (read < 0) {
    9bcc:	1e06      	subs	r6, r0, #0
    9bce:	db17      	blt.n	9c00 <find_type_cb+0xa8>
	if (read != data->value_len) {
    9bd0:	7c22      	ldrb	r2, [r4, #16]
    9bd2:	68e0      	ldr	r0, [r4, #12]
    9bd4:	4296      	cmp	r6, r2
    9bd6:	d03c      	beq.n	9c52 <find_type_cb+0xfa>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    9bd8:	4601      	mov	r1, r0
    9bda:	a80d      	add	r0, sp, #52	; 0x34
    9bdc:	f016 f818 	bl	1fc10 <bt_uuid_create>
    9be0:	b988      	cbnz	r0, 9c06 <find_type_cb+0xae>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    9be2:	2302      	movs	r3, #2
    9be4:	f04f 0200 	mov.w	r2, #0
    9be8:	f363 0207 	bfi	r2, r3, #0, #8
    9bec:	491b      	ldr	r1, [pc, #108]	; (9c5c <find_type_cb+0x104>)
    9bee:	4b1c      	ldr	r3, [pc, #112]	; (9c60 <find_type_cb+0x108>)
    9bf0:	481c      	ldr	r0, [pc, #112]	; (9c64 <find_type_cb+0x10c>)
    9bf2:	1a5b      	subs	r3, r3, r1
    9bf4:	08db      	lsrs	r3, r3, #3
    9bf6:	7c21      	ldrb	r1, [r4, #16]
    9bf8:	f363 128f 	bfi	r2, r3, #6, #10
			BT_WARN("Unable to create UUID: size %d", read);
    9bfc:	f014 ff37 	bl	1ea6e <log_1>
	data->group = NULL;
    9c00:	2300      	movs	r3, #0
    9c02:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    9c04:	e7cf      	b.n	9ba6 <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    9c06:	b2f2      	uxtb	r2, r6
    9c08:	a904      	add	r1, sp, #16
    9c0a:	a808      	add	r0, sp, #32
    9c0c:	f016 f800 	bl	1fc10 <bt_uuid_create>
    9c10:	b968      	cbnz	r0, 9c2e <find_type_cb+0xd6>
			BT_WARN("Unable to create UUID: size %d", read);
    9c12:	2302      	movs	r3, #2
    9c14:	f04f 0200 	mov.w	r2, #0
    9c18:	f363 0207 	bfi	r2, r3, #0, #8
    9c1c:	490f      	ldr	r1, [pc, #60]	; (9c5c <find_type_cb+0x104>)
    9c1e:	4b10      	ldr	r3, [pc, #64]	; (9c60 <find_type_cb+0x108>)
    9c20:	4811      	ldr	r0, [pc, #68]	; (9c68 <find_type_cb+0x110>)
    9c22:	1a5b      	subs	r3, r3, r1
    9c24:	08db      	lsrs	r3, r3, #3
    9c26:	f363 128f 	bfi	r2, r3, #6, #10
    9c2a:	4631      	mov	r1, r6
    9c2c:	e7e6      	b.n	9bfc <find_type_cb+0xa4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    9c2e:	a908      	add	r1, sp, #32
    9c30:	a80d      	add	r0, sp, #52	; 0x34
    9c32:	f015 ffc3 	bl	1fbbc <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    9c36:	2800      	cmp	r0, #0
    9c38:	d1e2      	bne.n	9c00 <find_type_cb+0xa8>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9c3a:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    9c3c:	2300      	movs	r3, #0
    9c3e:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9c40:	2104      	movs	r1, #4
    9c42:	3008      	adds	r0, #8
    9c44:	f018 fcf6 	bl	22634 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    9c48:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9c4a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    9c4c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9c4e:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    9c50:	e7a9      	b.n	9ba6 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    9c52:	4632      	mov	r2, r6
    9c54:	a904      	add	r1, sp, #16
    9c56:	f015 fcbf 	bl	1f5d8 <memcmp>
    9c5a:	e7ec      	b.n	9c36 <find_type_cb+0xde>
    9c5c:	00025a6c 	.word	0x00025a6c
    9c60:	00025a7c 	.word	0x00025a7c
    9c64:	000286a4 	.word	0x000286a4
    9c68:	000286c3 	.word	0x000286c3

00009c6c <att_cb.isra.6>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    9c6c:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    9c6e:	7800      	ldrb	r0, [r0, #0]
    9c70:	f016 fa92 	bl	20198 <att_op_get_type>
    9c74:	3801      	subs	r0, #1
    9c76:	b2c0      	uxtb	r0, r0
    9c78:	2804      	cmp	r0, #4
    9c7a:	bf96      	itet	ls
    9c7c:	4b02      	ldrls	r3, [pc, #8]	; (9c88 <att_cb.isra.6+0x1c>)
    9c7e:	4803      	ldrhi	r0, [pc, #12]	; (9c8c <att_cb.isra.6+0x20>)
    9c80:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    9c84:	bd08      	pop	{r3, pc}
    9c86:	bf00      	nop
    9c88:	000261d0 	.word	0x000261d0
    9c8c:	000204f1 	.word	0x000204f1

00009c90 <att_send>:
{
    9c90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9c94:	4698      	mov	r8, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9c96:	688b      	ldr	r3, [r1, #8]
    9c98:	781b      	ldrb	r3, [r3, #0]
    9c9a:	2bd2      	cmp	r3, #210	; 0xd2
{
    9c9c:	4607      	mov	r7, r0
    9c9e:	460c      	mov	r4, r1
    9ca0:	4616      	mov	r6, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9ca2:	d118      	bne.n	9cd6 <att_send+0x46>
		err = bt_smp_sign(conn, buf);
    9ca4:	f004 fb44 	bl	e330 <bt_smp_sign>
		if (err) {
    9ca8:	4605      	mov	r5, r0
    9caa:	b1a0      	cbz	r0, 9cd6 <att_send+0x46>
			BT_ERR("Error signing data");
    9cac:	2301      	movs	r3, #1
    9cae:	f04f 0100 	mov.w	r1, #0
    9cb2:	f363 0107 	bfi	r1, r3, #0, #8
    9cb6:	4a0f      	ldr	r2, [pc, #60]	; (9cf4 <att_send+0x64>)
    9cb8:	4b0f      	ldr	r3, [pc, #60]	; (9cf8 <att_send+0x68>)
    9cba:	4810      	ldr	r0, [pc, #64]	; (9cfc <att_send+0x6c>)
    9cbc:	1a9b      	subs	r3, r3, r2
    9cbe:	08db      	lsrs	r3, r3, #3
    9cc0:	f363 118f 	bfi	r1, r3, #6, #10
    9cc4:	f014 fec6 	bl	1ea54 <log_0>
			net_buf_unref(buf);
    9cc8:	4620      	mov	r0, r4
    9cca:	f00d fc83 	bl	175d4 <net_buf_unref>
}
    9cce:	4628      	mov	r0, r5
    9cd0:	b002      	add	sp, #8
    9cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    9cd6:	b91e      	cbnz	r6, 9ce0 <att_send+0x50>
				cb ? cb : att_cb(buf),
    9cd8:	68a0      	ldr	r0, [r4, #8]
    9cda:	f7ff ffc7 	bl	9c6c <att_cb.isra.6>
    9cde:	4606      	mov	r6, r0
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    9ce0:	f8cd 8000 	str.w	r8, [sp]
    9ce4:	4633      	mov	r3, r6
    9ce6:	4622      	mov	r2, r4
    9ce8:	2104      	movs	r1, #4
    9cea:	4638      	mov	r0, r7
    9cec:	f016 fa25 	bl	2013a <bt_l2cap_send_cb>
    9cf0:	4605      	mov	r5, r0
    9cf2:	e7ec      	b.n	9cce <att_send+0x3e>
    9cf4:	00025a6c 	.word	0x00025a6c
    9cf8:	00025a7c 	.word	0x00025a7c
    9cfc:	0002858a 	.word	0x0002858a

00009d00 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    9d00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	};
	struct bt_att *att;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9d02:	2200      	movs	r2, #0
{
    9d04:	4606      	mov	r6, r0
    9d06:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9d08:	4814      	ldr	r0, [pc, #80]	; (9d5c <bt_att_accept+0x5c>)
    9d0a:	a901      	add	r1, sp, #4
    9d0c:	f012 f8ca 	bl	1bea4 <k_mem_slab_alloc>
    9d10:	4604      	mov	r4, r0
    9d12:	b198      	cbz	r0, 9d3c <bt_att_accept+0x3c>
		BT_ERR("No available ATT context for conn %p", conn);
    9d14:	2301      	movs	r3, #1
    9d16:	f04f 0200 	mov.w	r2, #0
    9d1a:	f363 0207 	bfi	r2, r3, #0, #8
    9d1e:	4910      	ldr	r1, [pc, #64]	; (9d60 <bt_att_accept+0x60>)
    9d20:	4b10      	ldr	r3, [pc, #64]	; (9d64 <bt_att_accept+0x64>)
    9d22:	4811      	ldr	r0, [pc, #68]	; (9d68 <bt_att_accept+0x68>)
    9d24:	1a5b      	subs	r3, r3, r1
    9d26:	08db      	lsrs	r3, r3, #3
    9d28:	f363 128f 	bfi	r2, r3, #6, #10
    9d2c:	4631      	mov	r1, r6
    9d2e:	f014 fe9e 	bl	1ea6e <log_1>
		return -ENOMEM;
    9d32:	f06f 040b 	mvn.w	r4, #11
	att->chan.chan.ops = &ops;
	k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
	*chan = &att->chan.chan;

	return 0;
}
    9d36:	4620      	mov	r0, r4
    9d38:	b002      	add	sp, #8
    9d3a:	bd70      	pop	{r4, r5, r6, pc}
	(void)memset(att, 0, sizeof(*att));
    9d3c:	4601      	mov	r1, r0
    9d3e:	22f8      	movs	r2, #248	; 0xf8
    9d40:	9801      	ldr	r0, [sp, #4]
    9d42:	f015 fc83 	bl	1f64c <memset>
	att->chan.chan.ops = &ops;
    9d46:	9801      	ldr	r0, [sp, #4]
    9d48:	4b08      	ldr	r3, [pc, #32]	; (9d6c <bt_att_accept+0x6c>)
    9d4a:	6043      	str	r3, [r0, #4]
	z_impl_k_sem_init(sem, initial_count, limit);
    9d4c:	2203      	movs	r2, #3
    9d4e:	4611      	mov	r1, r2
    9d50:	30c0      	adds	r0, #192	; 0xc0
    9d52:	f01b fb0c 	bl	2536e <z_impl_k_sem_init>
	*chan = &att->chan.chan;
    9d56:	9b01      	ldr	r3, [sp, #4]
    9d58:	602b      	str	r3, [r5, #0]
	return 0;
    9d5a:	e7ec      	b.n	9d36 <bt_att_accept+0x36>
    9d5c:	2000e5cc 	.word	0x2000e5cc
    9d60:	00025a6c 	.word	0x00025a6c
    9d64:	00025a7c 	.word	0x00025a7c
    9d68:	000285be 	.word	0x000285be
    9d6c:	000262d4 	.word	0x000262d4

00009d70 <bt_att_connected>:
{
    9d70:	b510      	push	{r4, lr}
    9d72:	4604      	mov	r4, r0
	z_impl_k_queue_init(queue);
    9d74:	30d8      	adds	r0, #216	; 0xd8
    9d76:	f01b f970 	bl	2505a <z_impl_k_queue_init>
    9d7a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    9d7e:	f01b f96c 	bl	2505a <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9d82:	2317      	movs	r3, #23
    9d84:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9d88:	86e3      	strh	r3, [r4, #54]	; 0x36
	k_delayed_work_init(&att->timeout_work, att_timeout);
    9d8a:	4904      	ldr	r1, [pc, #16]	; (9d9c <bt_att_connected+0x2c>)
    9d8c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9d90:	f01b fb6b 	bl	2546a <k_delayed_work_init>
	list->head = NULL;
    9d94:	2300      	movs	r3, #0
	list->tail = NULL;
    9d96:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
}
    9d9a:	bd10      	pop	{r4, pc}
    9d9c:	0000ab31 	.word	0x0000ab31

00009da0 <att_req_sent>:
{
    9da0:	b538      	push	{r3, r4, r5, lr}
    9da2:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    9da4:	2104      	movs	r1, #4
{
    9da6:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    9da8:	f016 f9e0 	bl	2016c <bt_l2cap_le_lookup_tx_cid>
	if (att->req) {
    9dac:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    9db0:	b133      	cbz	r3, 9dc0 <att_req_sent+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9db2:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
    9db6:	f247 5230 	movw	r2, #30000	; 0x7530
    9dba:	4804      	ldr	r0, [pc, #16]	; (9dcc <att_req_sent+0x2c>)
    9dbc:	f012 feee 	bl	1cb9c <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    9dc0:	4629      	mov	r1, r5
    9dc2:	4620      	mov	r0, r4
}
    9dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    9dc8:	f016 bb92 	b.w	204f0 <att_pdu_sent>
    9dcc:	20005fa0 	.word	0x20005fa0

00009dd0 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    9dd0:	7b43      	ldrb	r3, [r0, #13]
    9dd2:	2b06      	cmp	r3, #6
{
    9dd4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9dd6:	d00f      	beq.n	9df8 <att_chan_get+0x28>
		BT_WARN("Not connected");
    9dd8:	2302      	movs	r3, #2
    9dda:	f04f 0100 	mov.w	r1, #0
    9dde:	f363 0107 	bfi	r1, r3, #0, #8
    9de2:	4a1a      	ldr	r2, [pc, #104]	; (9e4c <att_chan_get+0x7c>)
    9de4:	4b1a      	ldr	r3, [pc, #104]	; (9e50 <att_chan_get+0x80>)
    9de6:	481b      	ldr	r0, [pc, #108]	; (9e54 <att_chan_get+0x84>)
    9de8:	1a9b      	subs	r3, r3, r2
    9dea:	08db      	lsrs	r3, r3, #3
    9dec:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("ATT context flagged as disconnected");
    9df0:	f014 fe30 	bl	1ea54 <log_0>
		return NULL;
    9df4:	2400      	movs	r4, #0
    9df6:	e012      	b.n	9e1e <att_chan_get+0x4e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    9df8:	2104      	movs	r1, #4
    9dfa:	f016 f9c2 	bl	20182 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9dfe:	4604      	mov	r4, r0
    9e00:	b978      	cbnz	r0, 9e22 <att_chan_get+0x52>
		BT_ERR("Unable to find ATT channel");
    9e02:	2301      	movs	r3, #1
    9e04:	f04f 0100 	mov.w	r1, #0
    9e08:	f363 0107 	bfi	r1, r3, #0, #8
    9e0c:	4a0f      	ldr	r2, [pc, #60]	; (9e4c <att_chan_get+0x7c>)
    9e0e:	4b10      	ldr	r3, [pc, #64]	; (9e50 <att_chan_get+0x80>)
    9e10:	4811      	ldr	r0, [pc, #68]	; (9e58 <att_chan_get+0x88>)
    9e12:	1a9b      	subs	r3, r3, r2
    9e14:	08db      	lsrs	r3, r3, #3
    9e16:	f363 118f 	bfi	r1, r3, #6, #10
    9e1a:	f014 fe1b 	bl	1ea54 <log_0>
}
    9e1e:	4620      	mov	r0, r4
    9e20:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9e22:	f3bf 8f5b 	dmb	ish
    9e26:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    9e2a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    9e2e:	075b      	lsls	r3, r3, #29
    9e30:	d5f5      	bpl.n	9e1e <att_chan_get+0x4e>
		BT_WARN("ATT context flagged as disconnected");
    9e32:	2302      	movs	r3, #2
    9e34:	f04f 0100 	mov.w	r1, #0
    9e38:	f363 0107 	bfi	r1, r3, #0, #8
    9e3c:	4a03      	ldr	r2, [pc, #12]	; (9e4c <att_chan_get+0x7c>)
    9e3e:	4b04      	ldr	r3, [pc, #16]	; (9e50 <att_chan_get+0x80>)
    9e40:	4806      	ldr	r0, [pc, #24]	; (9e5c <att_chan_get+0x8c>)
    9e42:	1a9b      	subs	r3, r3, r2
    9e44:	08db      	lsrs	r3, r3, #3
    9e46:	f363 118f 	bfi	r1, r3, #6, #10
    9e4a:	e7d1      	b.n	9df0 <att_chan_get+0x20>
    9e4c:	00025a6c 	.word	0x00025a6c
    9e50:	00025a7c 	.word	0x00025a7c
    9e54:	00028526 	.word	0x00028526
    9e58:	00028534 	.word	0x00028534
    9e5c:	0002854f 	.word	0x0002854f

00009e60 <prep_write_cb>:
{
    9e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e62:	460c      	mov	r4, r1
    9e64:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    9e66:	4601      	mov	r1, r0
    9e68:	222a      	movs	r2, #42	; 0x2a
    9e6a:	6820      	ldr	r0, [r4, #0]
    9e6c:	f016 ffd1 	bl	20e12 <bt_gatt_check_perm>
    9e70:	4605      	mov	r5, r0
    9e72:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    9e74:	2800      	cmp	r0, #0
    9e76:	d12d      	bne.n	9ed4 <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    9e78:	7cb3      	ldrb	r3, [r6, #18]
    9e7a:	065b      	lsls	r3, r3, #25
    9e7c:	d514      	bpl.n	9ea8 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    9e7e:	2301      	movs	r3, #1
    9e80:	9301      	str	r3, [sp, #4]
    9e82:	89e3      	ldrh	r3, [r4, #14]
    9e84:	9300      	str	r3, [sp, #0]
    9e86:	68b7      	ldr	r7, [r6, #8]
    9e88:	89a3      	ldrh	r3, [r4, #12]
    9e8a:	68a2      	ldr	r2, [r4, #8]
    9e8c:	6820      	ldr	r0, [r4, #0]
    9e8e:	4631      	mov	r1, r6
    9e90:	47b8      	blx	r7
	if (write != 0) {
    9e92:	b148      	cbz	r0, 9ea8 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    9e94:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    9e98:	bf26      	itte	cs
    9e9a:	4240      	negcs	r0, r0
    9e9c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    9e9e:	200e      	movcc	r0, #14
		data->err = err_to_att(write);
    9ea0:	7420      	strb	r0, [r4, #16]
}
    9ea2:	4628      	mov	r0, r5
    9ea4:	b003      	add	sp, #12
    9ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    9ea8:	2100      	movs	r1, #0
    9eaa:	480b      	ldr	r0, [pc, #44]	; (9ed8 <prep_write_cb+0x78>)
    9eac:	f018 fb8e 	bl	225cc <net_buf_alloc_fixed>
    9eb0:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    9eb2:	b910      	cbnz	r0, 9eba <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    9eb4:	2309      	movs	r3, #9
    9eb6:	7423      	strb	r3, [r4, #16]
		return BT_GATT_ITER_STOP;
    9eb8:	e7f3      	b.n	9ea2 <prep_write_cb+0x42>
	attr_data->handle = attr->handle;
    9eba:	8a33      	ldrh	r3, [r6, #16]
    9ebc:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    9ebe:	89e3      	ldrh	r3, [r4, #14]
    9ec0:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    9ec2:	89a2      	ldrh	r2, [r4, #12]
    9ec4:	68a1      	ldr	r1, [r4, #8]
    9ec6:	3008      	adds	r0, #8
    9ec8:	f018 fbba 	bl	22640 <net_buf_simple_add_mem>
	data->err = 0U;
    9ecc:	2300      	movs	r3, #0
    9ece:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    9ed0:	2501      	movs	r5, #1
    9ed2:	e7e6      	b.n	9ea2 <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    9ed4:	2500      	movs	r5, #0
    9ed6:	e7e4      	b.n	9ea2 <prep_write_cb+0x42>
    9ed8:	2000e7a8 	.word	0x2000e7a8

00009edc <bt_att_create_pdu>:
{
    9edc:	b570      	push	{r4, r5, r6, lr}
    9ede:	460e      	mov	r6, r1
    9ee0:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    9ee2:	f7ff ff75 	bl	9dd0 <att_chan_get>
	if (!att) {
    9ee6:	4604      	mov	r4, r0
    9ee8:	b198      	cbz	r0, 9f12 <bt_att_create_pdu+0x36>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    9eea:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    9eee:	1c6a      	adds	r2, r5, #1
    9ef0:	428a      	cmp	r2, r1
    9ef2:	d910      	bls.n	9f16 <bt_att_create_pdu+0x3a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    9ef4:	2002      	movs	r0, #2
    9ef6:	f04f 0300 	mov.w	r3, #0
    9efa:	f360 0307 	bfi	r3, r0, #0, #8
    9efe:	4c1a      	ldr	r4, [pc, #104]	; (9f68 <bt_att_create_pdu+0x8c>)
    9f00:	481a      	ldr	r0, [pc, #104]	; (9f6c <bt_att_create_pdu+0x90>)
    9f02:	1b00      	subs	r0, r0, r4
    9f04:	08c0      	lsrs	r0, r0, #3
    9f06:	f360 138f 	bfi	r3, r0, #6, #10
    9f0a:	4819      	ldr	r0, [pc, #100]	; (9f70 <bt_att_create_pdu+0x94>)
    9f0c:	f014 fdc3 	bl	1ea96 <log_2>
		return NULL;
    9f10:	2400      	movs	r4, #0
}
    9f12:	4620      	mov	r0, r4
    9f14:	bd70      	pop	{r4, r5, r6, pc}
	switch (att_op_get_type(op)) {
    9f16:	4630      	mov	r0, r6
    9f18:	f016 f93e 	bl	20198 <att_op_get_type>
    9f1c:	2802      	cmp	r0, #2
    9f1e:	d001      	beq.n	9f24 <bt_att_create_pdu+0x48>
    9f20:	2804      	cmp	r0, #4
    9f22:	d117      	bne.n	9f54 <bt_att_create_pdu+0x78>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    9f24:	f247 5230 	movw	r2, #30000	; 0x7530
		buf = bt_l2cap_create_pdu(NULL, 0);
    9f28:	2100      	movs	r1, #0
    9f2a:	4608      	mov	r0, r1
    9f2c:	f016 f902 	bl	20134 <bt_l2cap_create_pdu_timeout>
    9f30:	4604      	mov	r4, r0
	if (!buf) {
    9f32:	b990      	cbnz	r0, 9f5a <bt_att_create_pdu+0x7e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    9f34:	2301      	movs	r3, #1
    9f36:	f04f 0200 	mov.w	r2, #0
    9f3a:	f363 0207 	bfi	r2, r3, #0, #8
    9f3e:	490a      	ldr	r1, [pc, #40]	; (9f68 <bt_att_create_pdu+0x8c>)
    9f40:	4b0a      	ldr	r3, [pc, #40]	; (9f6c <bt_att_create_pdu+0x90>)
    9f42:	480c      	ldr	r0, [pc, #48]	; (9f74 <bt_att_create_pdu+0x98>)
    9f44:	1a5b      	subs	r3, r3, r1
    9f46:	08db      	lsrs	r3, r3, #3
    9f48:	f363 128f 	bfi	r2, r3, #6, #10
    9f4c:	4631      	mov	r1, r6
    9f4e:	f014 fd8e 	bl	1ea6e <log_1>
		return NULL;
    9f52:	e7de      	b.n	9f12 <bt_att_create_pdu+0x36>
		buf = bt_l2cap_create_pdu(NULL, 0);
    9f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9f58:	e7e6      	b.n	9f28 <bt_att_create_pdu+0x4c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9f5a:	2101      	movs	r1, #1
    9f5c:	3008      	adds	r0, #8
    9f5e:	f018 fb69 	bl	22634 <net_buf_simple_add>
	hdr->code = op;
    9f62:	7006      	strb	r6, [r0, #0]
	return buf;
    9f64:	e7d5      	b.n	9f12 <bt_att_create_pdu+0x36>
    9f66:	bf00      	nop
    9f68:	00025a6c 	.word	0x00025a6c
    9f6c:	00025a7c 	.word	0x00025a7c
    9f70:	000285e3 	.word	0x000285e3
    9f74:	00028444 	.word	0x00028444

00009f78 <att_indicate>:
{
    9f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9f7a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9f7c:	f101 0008 	add.w	r0, r1, #8
{
    9f80:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    9f82:	f018 fb90 	bl	226a6 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    9f86:	89ab      	ldrh	r3, [r5, #12]
    9f88:	68aa      	ldr	r2, [r5, #8]
    9f8a:	4601      	mov	r1, r0
    9f8c:	4620      	mov	r0, r4
    9f8e:	f017 f846 	bl	2101e <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    9f92:	2200      	movs	r2, #0
    9f94:	211e      	movs	r1, #30
    9f96:	4620      	mov	r0, r4
    9f98:	f7ff ffa0 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    9f9c:	4602      	mov	r2, r0
    9f9e:	b130      	cbz	r0, 9fae <att_indicate+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent, NULL);
    9fa0:	2300      	movs	r3, #0
    9fa2:	9300      	str	r3, [sp, #0]
    9fa4:	2104      	movs	r1, #4
    9fa6:	4b03      	ldr	r3, [pc, #12]	; (9fb4 <att_indicate+0x3c>)
    9fa8:	4620      	mov	r0, r4
    9faa:	f016 f8c6 	bl	2013a <bt_l2cap_send_cb>
}
    9fae:	2000      	movs	r0, #0
    9fb0:	b003      	add	sp, #12
    9fb2:	bd30      	pop	{r4, r5, pc}
    9fb4:	00020549 	.word	0x00020549

00009fb8 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    9fb8:	688b      	ldr	r3, [r1, #8]
{
    9fba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    9fbe:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9fc0:	2d16      	cmp	r5, #22
{
    9fc2:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9fc4:	d921      	bls.n	a00a <att_mtu_req+0x52>
	struct bt_conn *conn = att->chan.chan.conn;
    9fc6:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    9fca:	2202      	movs	r2, #2
    9fcc:	2103      	movs	r1, #3
    9fce:	4640      	mov	r0, r8
    9fd0:	f7ff ff84 	bl	9edc <bt_att_create_pdu>
	if (!pdu) {
    9fd4:	4607      	mov	r7, r0
    9fd6:	b1d0      	cbz	r0, a00e <att_mtu_req+0x56>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    9fd8:	2102      	movs	r1, #2
    9fda:	3008      	adds	r0, #8
    9fdc:	f018 fb2a 	bl	22634 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9fe0:	2400      	movs	r4, #0
    9fe2:	2341      	movs	r3, #65	; 0x41
    9fe4:	7003      	strb	r3, [r0, #0]
    9fe6:	7044      	strb	r4, [r0, #1]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    9fe8:	4b0a      	ldr	r3, [pc, #40]	; (a014 <att_mtu_req+0x5c>)
    9fea:	9400      	str	r4, [sp, #0]
    9fec:	463a      	mov	r2, r7
    9fee:	2104      	movs	r1, #4
    9ff0:	4640      	mov	r0, r8
    9ff2:	f016 f8a2 	bl	2013a <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    9ff6:	2d41      	cmp	r5, #65	; 0x41
    9ff8:	bf28      	it	cs
    9ffa:	2541      	movcs	r5, #65	; 0x41
    9ffc:	86f5      	strh	r5, [r6, #54]	; 0x36
	att->chan.tx.mtu = att->chan.rx.mtu;
    9ffe:	f8a6 5042 	strh.w	r5, [r6, #66]	; 0x42
	return 0;
    a002:	4620      	mov	r0, r4
}
    a004:	b002      	add	sp, #8
    a006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    a00a:	2004      	movs	r0, #4
    a00c:	e7fa      	b.n	a004 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
    a00e:	200e      	movs	r0, #14
    a010:	e7f8      	b.n	a004 <att_mtu_req+0x4c>
    a012:	bf00      	nop
    a014:	0002057b 	.word	0x0002057b

0000a018 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    a018:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a01c:	4688      	mov	r8, r1
    a01e:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    a020:	2101      	movs	r1, #1
    a022:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    a024:	4605      	mov	r5, r0
    a026:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    a028:	f7ff ff58 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    a02c:	4604      	mov	r4, r0
    a02e:	b180      	cbz	r0, a052 <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    a030:	2104      	movs	r1, #4
    a032:	3008      	adds	r0, #8
    a034:	f018 fafe 	bl	22634 <net_buf_simple_add>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    a038:	2300      	movs	r3, #0
	rsp->request = req;
    a03a:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    a03e:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    a042:	70c6      	strb	r6, [r0, #3]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    a044:	4622      	mov	r2, r4
    a046:	9300      	str	r3, [sp, #0]
    a048:	2104      	movs	r1, #4
    a04a:	4b03      	ldr	r3, [pc, #12]	; (a058 <send_err_rsp.part.11+0x40>)
    a04c:	4628      	mov	r0, r5
    a04e:	f016 f874 	bl	2013a <bt_l2cap_send_cb>
}
    a052:	b002      	add	sp, #8
    a054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a058:	0002057b 	.word	0x0002057b

0000a05c <bt_att_recv>:
{
    a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    a05e:	898b      	ldrh	r3, [r1, #12]
{
    a060:	4604      	mov	r4, r0
    a062:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    a064:	b97b      	cbnz	r3, a086 <bt_att_recv+0x2a>
		BT_ERR("Too small ATT PDU received");
    a066:	2301      	movs	r3, #1
    a068:	f04f 0100 	mov.w	r1, #0
    a06c:	f363 0107 	bfi	r1, r3, #0, #8
    a070:	4a51      	ldr	r2, [pc, #324]	; (a1b8 <bt_att_recv+0x15c>)
    a072:	4b52      	ldr	r3, [pc, #328]	; (a1bc <bt_att_recv+0x160>)
    a074:	4852      	ldr	r0, [pc, #328]	; (a1c0 <bt_att_recv+0x164>)
    a076:	1a9b      	subs	r3, r3, r2
    a078:	08db      	lsrs	r3, r3, #3
    a07a:	f363 118f 	bfi	r1, r3, #6, #10
			BT_WARN("Ignoring unexpected indication");
    a07e:	f014 fce9 	bl	1ea54 <log_0>
}
    a082:	2000      	movs	r0, #0
    a084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a086:	2101      	movs	r1, #1
    a088:	f107 0008 	add.w	r0, r7, #8
    a08c:	f018 fb03 	bl	22696 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    a090:	4a4c      	ldr	r2, [pc, #304]	; (a1c4 <bt_att_recv+0x168>)
    a092:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a094:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    a096:	2300      	movs	r3, #0
    a098:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
    a09a:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    a09e:	428e      	cmp	r6, r1
    a0a0:	d122      	bne.n	a0e8 <bt_att_recv+0x8c>
		if (handler->type == ATT_REQUEST &&
    a0a2:	00db      	lsls	r3, r3, #3
    a0a4:	441a      	add	r2, r3
    a0a6:	7896      	ldrb	r6, [r2, #2]
    a0a8:	2e01      	cmp	r6, #1
    a0aa:	d13c      	bne.n	a126 <bt_att_recv+0xca>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a0ac:	f3bf 8f5b 	dmb	ish
    a0b0:	f104 0290 	add.w	r2, r4, #144	; 0x90
    a0b4:	e852 1f00 	ldrex	r1, [r2]
    a0b8:	f041 0c01 	orr.w	ip, r1, #1
    a0bc:	e842 ce00 	strex	lr, ip, [r2]
    a0c0:	f1be 0f00 	cmp.w	lr, #0
    a0c4:	d1f6      	bne.n	a0b4 <bt_att_recv+0x58>
    a0c6:	f3bf 8f5b 	dmb	ish
    a0ca:	07c9      	lsls	r1, r1, #31
    a0cc:	d54b      	bpl.n	a166 <bt_att_recv+0x10a>
			BT_WARN("Ignoring unexpected request");
    a0ce:	2302      	movs	r3, #2
    a0d0:	f04f 0100 	mov.w	r1, #0
    a0d4:	f363 0107 	bfi	r1, r3, #0, #8
    a0d8:	4a37      	ldr	r2, [pc, #220]	; (a1b8 <bt_att_recv+0x15c>)
    a0da:	4b38      	ldr	r3, [pc, #224]	; (a1bc <bt_att_recv+0x160>)
    a0dc:	483a      	ldr	r0, [pc, #232]	; (a1c8 <bt_att_recv+0x16c>)
    a0de:	1a9b      	subs	r3, r3, r2
    a0e0:	08db      	lsrs	r3, r3, #3
    a0e2:	f363 118f 	bfi	r1, r3, #6, #10
    a0e6:	e7ca      	b.n	a07e <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    a0e8:	3301      	adds	r3, #1
    a0ea:	2b1c      	cmp	r3, #28
    a0ec:	d1d5      	bne.n	a09a <bt_att_recv+0x3e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    a0ee:	2302      	movs	r3, #2
    a0f0:	f04f 0200 	mov.w	r2, #0
    a0f4:	f363 0207 	bfi	r2, r3, #0, #8
    a0f8:	482f      	ldr	r0, [pc, #188]	; (a1b8 <bt_att_recv+0x15c>)
    a0fa:	4b30      	ldr	r3, [pc, #192]	; (a1bc <bt_att_recv+0x160>)
    a0fc:	1a1b      	subs	r3, r3, r0
    a0fe:	08db      	lsrs	r3, r3, #3
    a100:	4832      	ldr	r0, [pc, #200]	; (a1cc <bt_att_recv+0x170>)
    a102:	f363 128f 	bfi	r2, r3, #6, #10
    a106:	f014 fcb2 	bl	1ea6e <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    a10a:	7829      	ldrb	r1, [r5, #0]
    a10c:	4608      	mov	r0, r1
    a10e:	f016 f843 	bl	20198 <att_op_get_type>
    a112:	2800      	cmp	r0, #0
    a114:	d0b5      	beq.n	a082 <bt_att_recv+0x26>
	if (!req) {
    a116:	2900      	cmp	r1, #0
    a118:	d0b3      	beq.n	a082 <bt_att_recv+0x26>
    a11a:	2306      	movs	r3, #6
    a11c:	2200      	movs	r2, #0
    a11e:	6820      	ldr	r0, [r4, #0]
    a120:	f7ff ff7a 	bl	a018 <send_err_rsp.part.11>
    a124:	e7ad      	b.n	a082 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
    a126:	2e05      	cmp	r6, #5
    a128:	d11d      	bne.n	a166 <bt_att_recv+0x10a>
    a12a:	f3bf 8f5b 	dmb	ish
    a12e:	f104 0290 	add.w	r2, r4, #144	; 0x90
    a132:	e852 1f00 	ldrex	r1, [r2]
    a136:	f041 0c02 	orr.w	ip, r1, #2
    a13a:	e842 ce00 	strex	lr, ip, [r2]
    a13e:	f1be 0f00 	cmp.w	lr, #0
    a142:	d1f6      	bne.n	a132 <bt_att_recv+0xd6>
    a144:	f3bf 8f5b 	dmb	ish
    a148:	078a      	lsls	r2, r1, #30
    a14a:	d50c      	bpl.n	a166 <bt_att_recv+0x10a>
			BT_WARN("Ignoring unexpected indication");
    a14c:	2302      	movs	r3, #2
    a14e:	f04f 0100 	mov.w	r1, #0
    a152:	f363 0107 	bfi	r1, r3, #0, #8
    a156:	4a18      	ldr	r2, [pc, #96]	; (a1b8 <bt_att_recv+0x15c>)
    a158:	4b18      	ldr	r3, [pc, #96]	; (a1bc <bt_att_recv+0x160>)
    a15a:	481d      	ldr	r0, [pc, #116]	; (a1d0 <bt_att_recv+0x174>)
    a15c:	1a9b      	subs	r3, r3, r2
    a15e:	08db      	lsrs	r3, r3, #3
    a160:	f363 118f 	bfi	r1, r3, #6, #10
    a164:	e78b      	b.n	a07e <bt_att_recv+0x22>
	if (buf->len < handler->expect_len) {
    a166:	4403      	add	r3, r0
    a168:	89b9      	ldrh	r1, [r7, #12]
    a16a:	785a      	ldrb	r2, [r3, #1]
    a16c:	428a      	cmp	r2, r1
    a16e:	d913      	bls.n	a198 <bt_att_recv+0x13c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    a170:	2201      	movs	r2, #1
    a172:	f04f 0300 	mov.w	r3, #0
    a176:	f362 0307 	bfi	r3, r2, #0, #8
    a17a:	480f      	ldr	r0, [pc, #60]	; (a1b8 <bt_att_recv+0x15c>)
    a17c:	4a0f      	ldr	r2, [pc, #60]	; (a1bc <bt_att_recv+0x160>)
    a17e:	1a12      	subs	r2, r2, r0
    a180:	08d2      	lsrs	r2, r2, #3
    a182:	f362 138f 	bfi	r3, r2, #6, #10
    a186:	4813      	ldr	r0, [pc, #76]	; (a1d4 <bt_att_recv+0x178>)
    a188:	782a      	ldrb	r2, [r5, #0]
    a18a:	f014 fc84 	bl	1ea96 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    a18e:	2e01      	cmp	r6, #1
    a190:	f47f af77 	bne.w	a082 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
    a194:	2304      	movs	r3, #4
    a196:	e00a      	b.n	a1ae <bt_att_recv+0x152>
		err = handler->func(att, buf);
    a198:	685b      	ldr	r3, [r3, #4]
    a19a:	4639      	mov	r1, r7
    a19c:	4620      	mov	r0, r4
    a19e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    a1a0:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    a1a2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    a1a4:	f47f af6d 	bne.w	a082 <bt_att_recv+0x26>
    a1a8:	2800      	cmp	r0, #0
    a1aa:	f43f af6a 	beq.w	a082 <bt_att_recv+0x26>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    a1ae:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    a1b0:	2900      	cmp	r1, #0
    a1b2:	f43f af66 	beq.w	a082 <bt_att_recv+0x26>
    a1b6:	e7b1      	b.n	a11c <bt_att_recv+0xc0>
    a1b8:	00025a6c 	.word	0x00025a6c
    a1bc:	00025a7c 	.word	0x00025a7c
    a1c0:	00028615 	.word	0x00028615
    a1c4:	000261e4 	.word	0x000261e4
    a1c8:	00028630 	.word	0x00028630
    a1cc:	0002868a 	.word	0x0002868a
    a1d0:	0002864c 	.word	0x0002864c
    a1d4:	0002866b 	.word	0x0002866b

0000a1d8 <att_write_rsp>:
{
    a1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    a1dc:	460e      	mov	r6, r1
    a1de:	3100      	adds	r1, #0
{
    a1e0:	b088      	sub	sp, #32
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    a1e2:	bf18      	it	ne
    a1e4:	2101      	movne	r1, #1
{
    a1e6:	4605      	mov	r5, r0
    a1e8:	4690      	mov	r8, r2
    a1ea:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    a1ec:	f016 ff40 	bl	21070 <bt_gatt_change_aware>
    a1f0:	2800      	cmp	r0, #0
    a1f2:	d04e      	beq.n	a292 <att_write_rsp+0xba>
	if (!handle) {
    a1f4:	2f00      	cmp	r7, #0
    a1f6:	d04e      	beq.n	a296 <att_write_rsp+0xbe>
	(void)memset(&data, 0, sizeof(data));
    a1f8:	2218      	movs	r2, #24
    a1fa:	2100      	movs	r1, #0
    a1fc:	a802      	add	r0, sp, #8
    a1fe:	f015 fa25 	bl	1f64c <memset>
	if (rsp) {
    a202:	f1b8 0f00 	cmp.w	r8, #0
    a206:	d124      	bne.n	a252 <att_write_rsp+0x7a>
	data.offset = offset;
    a208:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a20c:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.value = value;
    a210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a212:	9305      	str	r3, [sp, #20]
	data.len = len;
    a214:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    a218:	f8ad 3018 	strh.w	r3, [sp, #24]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a21c:	2301      	movs	r3, #1
    a21e:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a222:	4a1e      	ldr	r2, [pc, #120]	; (a29c <att_write_rsp+0xc4>)
	data.conn = conn;
    a224:	9502      	str	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a226:	ab02      	add	r3, sp, #8
    a228:	4639      	mov	r1, r7
    a22a:	4638      	mov	r0, r7
	data.req = req;
    a22c:	f88d 6010 	strb.w	r6, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a230:	f016 f80e 	bl	20250 <bt_gatt_foreach_attr>
	if (data.err) {
    a234:	f89d 401c 	ldrb.w	r4, [sp, #28]
    a238:	b30c      	cbz	r4, a27e <att_write_rsp+0xa6>
		if (rsp) {
    a23a:	f1b8 0f00 	cmp.w	r8, #0
    a23e:	d019      	beq.n	a274 <att_write_rsp+0x9c>
			net_buf_unref(data.buf);
    a240:	9803      	ldr	r0, [sp, #12]
    a242:	f00d f9c7 	bl	175d4 <net_buf_unref>
	if (!req) {
    a246:	b976      	cbnz	r6, a266 <att_write_rsp+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    a248:	2400      	movs	r4, #0
}
    a24a:	4620      	mov	r0, r4
    a24c:	b008      	add	sp, #32
    a24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    a252:	2200      	movs	r2, #0
    a254:	4641      	mov	r1, r8
    a256:	4628      	mov	r0, r5
    a258:	f7ff fe40 	bl	9edc <bt_att_create_pdu>
    a25c:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    a25e:	2800      	cmp	r0, #0
    a260:	d1d2      	bne.n	a208 <att_write_rsp+0x30>
			return BT_ATT_ERR_UNLIKELY;
    a262:	240e      	movs	r4, #14
    a264:	e7f1      	b.n	a24a <att_write_rsp+0x72>
    a266:	f89d 301c 	ldrb.w	r3, [sp, #28]
    a26a:	463a      	mov	r2, r7
    a26c:	4631      	mov	r1, r6
    a26e:	4628      	mov	r0, r5
    a270:	f7ff fed2 	bl	a018 <send_err_rsp.part.11>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    a274:	2e18      	cmp	r6, #24
    a276:	d1e7      	bne.n	a248 <att_write_rsp+0x70>
    a278:	f89d 401c 	ldrb.w	r4, [sp, #28]
    a27c:	e7e5      	b.n	a24a <att_write_rsp+0x72>
	if (data.buf) {
    a27e:	9a03      	ldr	r2, [sp, #12]
    a280:	2a00      	cmp	r2, #0
    a282:	d0e1      	beq.n	a248 <att_write_rsp+0x70>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    a284:	9400      	str	r4, [sp, #0]
    a286:	4b06      	ldr	r3, [pc, #24]	; (a2a0 <att_write_rsp+0xc8>)
    a288:	2104      	movs	r1, #4
    a28a:	4628      	mov	r0, r5
    a28c:	f015 ff55 	bl	2013a <bt_l2cap_send_cb>
    a290:	e7db      	b.n	a24a <att_write_rsp+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a292:	2412      	movs	r4, #18
    a294:	e7d9      	b.n	a24a <att_write_rsp+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    a296:	2401      	movs	r4, #1
    a298:	e7d7      	b.n	a24a <att_write_rsp+0x72>
    a29a:	bf00      	nop
    a29c:	000205ad 	.word	0x000205ad
    a2a0:	0002057b 	.word	0x0002057b

0000a2a4 <att_signed_write_cmd>:
{
    a2a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    a2a8:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a2aa:	6807      	ldr	r7, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    a2ac:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    a2b0:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    a2b2:	4620      	mov	r0, r4
    a2b4:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    a2b6:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    a2ba:	f018 f9dc 	bl	22676 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    a2be:	4629      	mov	r1, r5
    a2c0:	4638      	mov	r0, r7
    a2c2:	f003 ffad 	bl	e220 <bt_smp_sign_verify>
	if (err) {
    a2c6:	4606      	mov	r6, r0
    a2c8:	b188      	cbz	r0, a2ee <att_signed_write_cmd+0x4a>
		BT_ERR("Error verifying data");
    a2ca:	2301      	movs	r3, #1
    a2cc:	f04f 0100 	mov.w	r1, #0
    a2d0:	f363 0107 	bfi	r1, r3, #0, #8
    a2d4:	4a11      	ldr	r2, [pc, #68]	; (a31c <att_signed_write_cmd+0x78>)
    a2d6:	4b12      	ldr	r3, [pc, #72]	; (a320 <att_signed_write_cmd+0x7c>)
    a2d8:	4812      	ldr	r0, [pc, #72]	; (a324 <att_signed_write_cmd+0x80>)
    a2da:	1a9b      	subs	r3, r3, r2
    a2dc:	08db      	lsrs	r3, r3, #3
    a2de:	f363 118f 	bfi	r1, r3, #6, #10
    a2e2:	f014 fbb7 	bl	1ea54 <log_0>
		return 0;
    a2e6:	2000      	movs	r0, #0
}
    a2e8:	b004      	add	sp, #16
    a2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    a2ee:	2101      	movs	r1, #1
    a2f0:	4620      	mov	r0, r4
    a2f2:	f018 f9c8 	bl	22686 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    a2f6:	2102      	movs	r1, #2
    a2f8:	4620      	mov	r0, r4
    a2fa:	f018 f9c4 	bl	22686 <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    a2fe:	89ab      	ldrh	r3, [r5, #12]
    a300:	3b0c      	subs	r3, #12
    a302:	b29b      	uxth	r3, r3
    a304:	9302      	str	r3, [sp, #8]
    a306:	68ab      	ldr	r3, [r5, #8]
    a308:	4632      	mov	r2, r6
    a30a:	e9cd 6300 	strd	r6, r3, [sp]
    a30e:	4631      	mov	r1, r6
    a310:	4643      	mov	r3, r8
    a312:	4638      	mov	r0, r7
    a314:	f7ff ff60 	bl	a1d8 <att_write_rsp>
    a318:	e7e6      	b.n	a2e8 <att_signed_write_cmd+0x44>
    a31a:	bf00      	nop
    a31c:	00025a6c 	.word	0x00025a6c
    a320:	00025a7c 	.word	0x00025a7c
    a324:	0002859d 	.word	0x0002859d

0000a328 <att_exec_write_req>:
{
    a328:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(att, req->flags);
    a32c:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    a32e:	4607      	mov	r7, r0
	return att_exec_write_rsp(att, req->flags);
    a330:	f893 8000 	ldrb.w	r8, [r3]
	struct bt_conn *conn = att->chan.chan.conn;
    a334:	f857 6be8 	ldr.w	r6, [r7], #232
	u8_t err = 0U;
    a338:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    a33a:	2100      	movs	r1, #0
    a33c:	4638      	mov	r0, r7
    a33e:	f018 f94b 	bl	225d8 <net_buf_get>
    a342:	4605      	mov	r5, r0
    a344:	b988      	cbnz	r0, a36a <att_exec_write_req+0x42>
	if (err) {
    a346:	bb64      	cbnz	r4, a3a2 <att_exec_write_req+0x7a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    a348:	4622      	mov	r2, r4
    a34a:	2119      	movs	r1, #25
    a34c:	4630      	mov	r0, r6
    a34e:	f7ff fdc5 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    a352:	4602      	mov	r2, r0
    a354:	b338      	cbz	r0, a3a6 <att_exec_write_req+0x7e>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    a356:	9400      	str	r4, [sp, #0]
    a358:	4b14      	ldr	r3, [pc, #80]	; (a3ac <att_exec_write_req+0x84>)
    a35a:	2104      	movs	r1, #4
    a35c:	4630      	mov	r0, r6
    a35e:	f015 feec 	bl	2013a <bt_l2cap_send_cb>
}
    a362:	4620      	mov	r0, r4
    a364:	b004      	add	sp, #16
    a366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    a36a:	b9b4      	cbnz	r4, a39a <att_exec_write_req+0x72>
    a36c:	f1b8 0f01 	cmp.w	r8, #1
    a370:	d113      	bne.n	a39a <att_exec_write_req+0x72>
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    a372:	89aa      	ldrh	r2, [r5, #12]
    a374:	8aab      	ldrh	r3, [r5, #20]
    a376:	9202      	str	r2, [sp, #8]
    a378:	68aa      	ldr	r2, [r5, #8]
    a37a:	9201      	str	r2, [sp, #4]
    a37c:	8aea      	ldrh	r2, [r5, #22]
    a37e:	9200      	str	r2, [sp, #0]
    a380:	2118      	movs	r1, #24
    a382:	4622      	mov	r2, r4
    a384:	4630      	mov	r0, r6
    a386:	f7ff ff27 	bl	a1d8 <att_write_rsp>
			if (err) {
    a38a:	4604      	mov	r4, r0
    a38c:	b128      	cbz	r0, a39a <att_exec_write_req+0x72>
	if (!req) {
    a38e:	4603      	mov	r3, r0
    a390:	8aaa      	ldrh	r2, [r5, #20]
    a392:	2118      	movs	r1, #24
    a394:	4630      	mov	r0, r6
    a396:	f7ff fe3f 	bl	a018 <send_err_rsp.part.11>
		net_buf_unref(buf);
    a39a:	4628      	mov	r0, r5
    a39c:	f00d f91a 	bl	175d4 <net_buf_unref>
    a3a0:	e7cb      	b.n	a33a <att_exec_write_req+0x12>
		return 0;
    a3a2:	4604      	mov	r4, r0
    a3a4:	e7dd      	b.n	a362 <att_exec_write_req+0x3a>
		return BT_ATT_ERR_UNLIKELY;
    a3a6:	240e      	movs	r4, #14
    a3a8:	e7db      	b.n	a362 <att_exec_write_req+0x3a>
    a3aa:	bf00      	nop
    a3ac:	0002057b 	.word	0x0002057b

0000a3b0 <att_prepare_write_req>:
{
    a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3b4:	460c      	mov	r4, r1
    a3b6:	b089      	sub	sp, #36	; 0x24
    a3b8:	4683      	mov	fp, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    a3ba:	2104      	movs	r1, #4
    a3bc:	f104 0008 	add.w	r0, r4, #8
    a3c0:	f018 f969 	bl	22696 <net_buf_simple_pull_mem>
	struct bt_conn *conn = att->chan.chan.conn;
    a3c4:	f8db 5000 	ldr.w	r5, [fp]
	handle = sys_le16_to_cpu(req->handle);
    a3c8:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    a3cc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    a3d0:	f8d4 8008 	ldr.w	r8, [r4, #8]
    a3d4:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    a3d6:	2101      	movs	r1, #1
    a3d8:	4628      	mov	r0, r5
	handle = sys_le16_to_cpu(req->handle);
    a3da:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    a3de:	f016 fe47 	bl	21070 <bt_gatt_change_aware>
    a3e2:	2800      	cmp	r0, #0
    a3e4:	d04b      	beq.n	a47e <att_prepare_write_req+0xce>
	if (!handle) {
    a3e6:	2e00      	cmp	r6, #0
    a3e8:	d04b      	beq.n	a482 <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    a3ea:	2214      	movs	r2, #20
    a3ec:	2100      	movs	r1, #0
    a3ee:	a803      	add	r0, sp, #12
    a3f0:	f015 f92c 	bl	1f64c <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a3f4:	2301      	movs	r3, #1
    a3f6:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    a3fa:	4a24      	ldr	r2, [pc, #144]	; (a48c <att_prepare_write_req+0xdc>)
	data.conn = conn;
    a3fc:	9503      	str	r5, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    a3fe:	ab03      	add	r3, sp, #12
    a400:	4631      	mov	r1, r6
    a402:	4630      	mov	r0, r6
	data.offset = offset;
    a404:	f8ad 901a 	strh.w	r9, [sp, #26]
	data.value = value;
    a408:	f8cd 8014 	str.w	r8, [sp, #20]
	data.len = len;
    a40c:	f8ad 7018 	strh.w	r7, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    a410:	f015 ff1e 	bl	20250 <bt_gatt_foreach_attr>
	if (data.err) {
    a414:	f89d 401c 	ldrb.w	r4, [sp, #28]
    a418:	b154      	cbz	r4, a430 <att_prepare_write_req+0x80>
	if (!req) {
    a41a:	4623      	mov	r3, r4
    a41c:	4632      	mov	r2, r6
    a41e:	2116      	movs	r1, #22
    a420:	4628      	mov	r0, r5
    a422:	f7ff fdf9 	bl	a018 <send_err_rsp.part.11>
		return 0;
    a426:	2400      	movs	r4, #0
}
    a428:	4620      	mov	r0, r4
    a42a:	b009      	add	sp, #36	; 0x24
    a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&att->prep_queue, data.buf);
    a430:	9904      	ldr	r1, [sp, #16]
    a432:	f10b 00e8 	add.w	r0, fp, #232	; 0xe8
    a436:	f018 f8ec 	bl	22612 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    a43a:	4622      	mov	r2, r4
    a43c:	2117      	movs	r1, #23
    a43e:	4628      	mov	r0, r5
    a440:	f7ff fd4c 	bl	9edc <bt_att_create_pdu>
    a444:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    a446:	b1f0      	cbz	r0, a486 <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    a448:	2104      	movs	r1, #4
    a44a:	3008      	adds	r0, #8
    a44c:	f018 f8f2 	bl	22634 <net_buf_simple_add>
    a450:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    a452:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    a456:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    a45a:	9804      	ldr	r0, [sp, #16]
    a45c:	4639      	mov	r1, r7
    a45e:	3008      	adds	r0, #8
    a460:	f018 f8e8 	bl	22634 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    a464:	463a      	mov	r2, r7
    a466:	4641      	mov	r1, r8
    a468:	1d30      	adds	r0, r6, #4
    a46a:	f015 f8c5 	bl	1f5f8 <memcpy>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a46e:	9400      	str	r4, [sp, #0]
    a470:	4b07      	ldr	r3, [pc, #28]	; (a490 <att_prepare_write_req+0xe0>)
    a472:	9a04      	ldr	r2, [sp, #16]
    a474:	2104      	movs	r1, #4
    a476:	4628      	mov	r0, r5
    a478:	f015 fe5f 	bl	2013a <bt_l2cap_send_cb>
	return 0;
    a47c:	e7d4      	b.n	a428 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a47e:	2412      	movs	r4, #18
    a480:	e7d2      	b.n	a428 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_INVALID_HANDLE;
    a482:	2401      	movs	r4, #1
    a484:	e7d0      	b.n	a428 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    a486:	240e      	movs	r4, #14
    a488:	e7ce      	b.n	a428 <att_prepare_write_req+0x78>
    a48a:	bf00      	nop
    a48c:	00009e61 	.word	0x00009e61
    a490:	0002057b 	.word	0x0002057b

0000a494 <att_read_group_req>:
{
    a494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    a498:	7b0c      	ldrb	r4, [r1, #12]
    a49a:	3c04      	subs	r4, #4
    a49c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    a49e:	2c02      	cmp	r4, #2
{
    a4a0:	4680      	mov	r8, r0
    a4a2:	b08f      	sub	sp, #60	; 0x3c
    a4a4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    a4a6:	d001      	beq.n	a4ac <att_read_group_req+0x18>
    a4a8:	2c10      	cmp	r4, #16
    a4aa:	d16e      	bne.n	a58a <att_read_group_req+0xf6>
	req = net_buf_pull_mem(buf, sizeof(*req));
    a4ac:	2104      	movs	r1, #4
    a4ae:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    a4b0:	f8d8 9000 	ldr.w	r9, [r8]
	req = net_buf_pull_mem(buf, sizeof(*req));
    a4b4:	f018 f8ef 	bl	22696 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a4b8:	ae04      	add	r6, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    a4ba:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a4bc:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a4be:	1d01      	adds	r1, r0, #4
    a4c0:	4622      	mov	r2, r4
    a4c2:	4630      	mov	r0, r6
    a4c4:	f015 fba4 	bl	1fc10 <bt_uuid_create>
    a4c8:	2800      	cmp	r0, #0
    a4ca:	d060      	beq.n	a58e <att_read_group_req+0xfa>
	if (!start || !end) {
    a4cc:	2d00      	cmp	r5, #0
    a4ce:	d036      	beq.n	a53e <att_read_group_req+0xaa>
    a4d0:	2400      	movs	r4, #0
    a4d2:	b39f      	cbz	r7, a53c <att_read_group_req+0xa8>
	if (start > end) {
    a4d4:	42bd      	cmp	r5, r7
    a4d6:	d832      	bhi.n	a53e <att_read_group_req+0xaa>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a4d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a4dc:	a902      	add	r1, sp, #8
    a4de:	4630      	mov	r0, r6
    a4e0:	f88d 4008 	strb.w	r4, [sp, #8]
    a4e4:	f8ad 300a 	strh.w	r3, [sp, #10]
    a4e8:	f015 fb68 	bl	1fbbc <bt_uuid_cmp>
    a4ec:	bb90      	cbnz	r0, a554 <att_read_group_req+0xc0>
	struct bt_conn *conn = att->chan.chan.conn;
    a4ee:	f8d8 9000 	ldr.w	r9, [r8]
	(void)memset(&data, 0, sizeof(data));
    a4f2:	2214      	movs	r2, #20
    a4f4:	2100      	movs	r1, #0
    a4f6:	a809      	add	r0, sp, #36	; 0x24
    a4f8:	f015 f8a8 	bl	1f64c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    a4fc:	2201      	movs	r2, #1
    a4fe:	2111      	movs	r1, #17
    a500:	4648      	mov	r0, r9
    a502:	f7ff fceb 	bl	9edc <bt_att_create_pdu>
    a506:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    a508:	2800      	cmp	r0, #0
    a50a:	d040      	beq.n	a58e <att_read_group_req+0xfa>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a50c:	2101      	movs	r1, #1
    a50e:	3008      	adds	r0, #8
	data.uuid = uuid;
    a510:	e9cd 8609 	strd	r8, r6, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a514:	f018 f88e 	bl	22634 <net_buf_simple_add>
	data.rsp->len = 0U;
    a518:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a51a:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a51c:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    a51e:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a520:	4a1c      	ldr	r2, [pc, #112]	; (a594 <att_read_group_req+0x100>)
	data.group = NULL;
    a522:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a524:	4639      	mov	r1, r7
    a526:	4628      	mov	r0, r5
    a528:	f015 fe92 	bl	20250 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    a52c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a52e:	781c      	ldrb	r4, [r3, #0]
    a530:	bb1c      	cbnz	r4, a57a <att_read_group_req+0xe6>
		net_buf_unref(data.buf);
    a532:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a534:	f00d f84e 	bl	175d4 <net_buf_unref>
	if (!req) {
    a538:	230a      	movs	r3, #10
    a53a:	e018      	b.n	a56e <att_read_group_req+0xda>
			*err = 0U;
    a53c:	463d      	mov	r5, r7
	if (!req) {
    a53e:	2301      	movs	r3, #1
    a540:	462a      	mov	r2, r5
    a542:	2110      	movs	r1, #16
    a544:	4648      	mov	r0, r9
    a546:	f7ff fd67 	bl	a018 <send_err_rsp.part.11>
		return 0;
    a54a:	2400      	movs	r4, #0
}
    a54c:	4620      	mov	r0, r4
    a54e:	b00f      	add	sp, #60	; 0x3c
    a550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    a554:	f642 0301 	movw	r3, #10241	; 0x2801
    a558:	a903      	add	r1, sp, #12
    a55a:	4630      	mov	r0, r6
    a55c:	f88d 400c 	strb.w	r4, [sp, #12]
    a560:	f8ad 300e 	strh.w	r3, [sp, #14]
    a564:	f015 fb2a 	bl	1fbbc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a568:	2800      	cmp	r0, #0
    a56a:	d0c0      	beq.n	a4ee <att_read_group_req+0x5a>
	if (!req) {
    a56c:	2310      	movs	r3, #16
    a56e:	462a      	mov	r2, r5
    a570:	2110      	movs	r1, #16
    a572:	4648      	mov	r0, r9
    a574:	f7ff fd50 	bl	a018 <send_err_rsp.part.11>
		return 0;
    a578:	e7e8      	b.n	a54c <att_read_group_req+0xb8>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a57a:	9600      	str	r6, [sp, #0]
    a57c:	4b06      	ldr	r3, [pc, #24]	; (a598 <att_read_group_req+0x104>)
    a57e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a580:	2104      	movs	r1, #4
    a582:	4648      	mov	r0, r9
    a584:	f015 fdd9 	bl	2013a <bt_l2cap_send_cb>
	return 0;
    a588:	e7df      	b.n	a54a <att_read_group_req+0xb6>
		return BT_ATT_ERR_INVALID_PDU;
    a58a:	2404      	movs	r4, #4
    a58c:	e7de      	b.n	a54c <att_read_group_req+0xb8>
		return BT_ATT_ERR_UNLIKELY;
    a58e:	240e      	movs	r4, #14
    a590:	e7dc      	b.n	a54c <att_read_group_req+0xb8>
    a592:	bf00      	nop
    a594:	00020301 	.word	0x00020301
    a598:	0002057b 	.word	0x0002057b

0000a59c <att_read_mult_req>:
{
    a59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    a5a0:	6805      	ldr	r5, [r0, #0]
{
    a5a2:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    a5a4:	2214      	movs	r2, #20
{
    a5a6:	4606      	mov	r6, r0
    a5a8:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    a5aa:	a803      	add	r0, sp, #12
    a5ac:	2100      	movs	r1, #0
    a5ae:	f015 f84d 	bl	1f64c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    a5b2:	2200      	movs	r2, #0
    a5b4:	210f      	movs	r1, #15
    a5b6:	4628      	mov	r0, r5
    a5b8:	f7ff fc90 	bl	9edc <bt_att_create_pdu>
    a5bc:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    a5be:	b378      	cbz	r0, a620 <att_read_mult_req+0x84>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a5c0:	f8df 9064 	ldr.w	r9, [pc, #100]	; a628 <att_read_mult_req+0x8c>
	data.att = att;
    a5c4:	9603      	str	r6, [sp, #12]
		handle = net_buf_pull_le16(buf);
    a5c6:	f104 0708 	add.w	r7, r4, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a5ca:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    a5ce:	89a3      	ldrh	r3, [r4, #12]
    a5d0:	2b01      	cmp	r3, #1
    a5d2:	d808      	bhi.n	a5e6 <att_read_mult_req+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a5d4:	2400      	movs	r4, #0
    a5d6:	9400      	str	r4, [sp, #0]
    a5d8:	4b12      	ldr	r3, [pc, #72]	; (a624 <att_read_mult_req+0x88>)
    a5da:	9a05      	ldr	r2, [sp, #20]
    a5dc:	2104      	movs	r1, #4
    a5de:	4628      	mov	r0, r5
    a5e0:	f015 fdab 	bl	2013a <bt_l2cap_send_cb>
	return 0;
    a5e4:	e018      	b.n	a618 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    a5e6:	4638      	mov	r0, r7
    a5e8:	f018 f85d 	bl	226a6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a5ec:	ab03      	add	r3, sp, #12
    a5ee:	464a      	mov	r2, r9
    a5f0:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    a5f2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a5f4:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a5f8:	f015 fe2a 	bl	20250 <bt_gatt_foreach_attr>
		if (data.err) {
    a5fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
    a600:	2b00      	cmp	r3, #0
    a602:	d0e4      	beq.n	a5ce <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    a604:	9805      	ldr	r0, [sp, #20]
    a606:	f00c ffe5 	bl	175d4 <net_buf_unref>
	if (!req) {
    a60a:	f89d 301c 	ldrb.w	r3, [sp, #28]
    a60e:	4632      	mov	r2, r6
    a610:	210e      	movs	r1, #14
    a612:	4628      	mov	r0, r5
    a614:	f7ff fd00 	bl	a018 <send_err_rsp.part.11>
			return 0;
    a618:	2000      	movs	r0, #0
}
    a61a:	b009      	add	sp, #36	; 0x24
    a61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    a620:	200e      	movs	r0, #14
    a622:	e7fa      	b.n	a61a <att_read_mult_req+0x7e>
    a624:	0002057b 	.word	0x0002057b
    a628:	00020609 	.word	0x00020609

0000a62c <att_read_rsp>:
{
    a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    a630:	6805      	ldr	r5, [r0, #0]
{
    a632:	b088      	sub	sp, #32
    a634:	4604      	mov	r4, r0
    a636:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    a638:	4628      	mov	r0, r5
    a63a:	2101      	movs	r1, #1
{
    a63c:	4690      	mov	r8, r2
    a63e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    a640:	f016 fd16 	bl	21070 <bt_gatt_change_aware>
    a644:	b3a0      	cbz	r0, a6b0 <att_read_rsp+0x84>
	if (!handle) {
    a646:	b3ae      	cbz	r6, a6b4 <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    a648:	2214      	movs	r2, #20
    a64a:	2100      	movs	r1, #0
    a64c:	a803      	add	r0, sp, #12
    a64e:	f014 fffd 	bl	1f64c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    a652:	2200      	movs	r2, #0
    a654:	4641      	mov	r1, r8
    a656:	4628      	mov	r0, r5
    a658:	f7ff fc40 	bl	9edc <bt_att_create_pdu>
    a65c:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    a65e:	b358      	cbz	r0, a6b8 <att_read_rsp+0x8c>
	data.offset = offset;
    a660:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a664:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a668:	2301      	movs	r3, #1
    a66a:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a66e:	4a13      	ldr	r2, [pc, #76]	; (a6bc <att_read_rsp+0x90>)
	data.att = att;
    a670:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a672:	ab03      	add	r3, sp, #12
    a674:	4631      	mov	r1, r6
    a676:	4630      	mov	r0, r6
    a678:	f015 fdea 	bl	20250 <bt_gatt_foreach_attr>
	if (data.err) {
    a67c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    a680:	b174      	cbz	r4, a6a0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    a682:	9805      	ldr	r0, [sp, #20]
    a684:	f00c ffa6 	bl	175d4 <net_buf_unref>
	if (!req) {
    a688:	f89d 301c 	ldrb.w	r3, [sp, #28]
    a68c:	4632      	mov	r2, r6
    a68e:	4639      	mov	r1, r7
    a690:	4628      	mov	r0, r5
    a692:	f7ff fcc1 	bl	a018 <send_err_rsp.part.11>
		return 0;
    a696:	2400      	movs	r4, #0
}
    a698:	4620      	mov	r0, r4
    a69a:	b008      	add	sp, #32
    a69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a6a0:	9400      	str	r4, [sp, #0]
    a6a2:	4b07      	ldr	r3, [pc, #28]	; (a6c0 <att_read_rsp+0x94>)
    a6a4:	9a05      	ldr	r2, [sp, #20]
    a6a6:	2104      	movs	r1, #4
    a6a8:	4628      	mov	r0, r5
    a6aa:	f015 fd46 	bl	2013a <bt_l2cap_send_cb>
	return 0;
    a6ae:	e7f3      	b.n	a698 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a6b0:	2412      	movs	r4, #18
    a6b2:	e7f1      	b.n	a698 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    a6b4:	2401      	movs	r4, #1
    a6b6:	e7ef      	b.n	a698 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a6b8:	240e      	movs	r4, #14
    a6ba:	e7ed      	b.n	a698 <att_read_rsp+0x6c>
    a6bc:	00020609 	.word	0x00020609
    a6c0:	0002057b 	.word	0x0002057b

0000a6c4 <att_read_type_req>:
{
    a6c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    a6c8:	7b0c      	ldrb	r4, [r1, #12]
    a6ca:	3c04      	subs	r4, #4
    a6cc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    a6ce:	2c02      	cmp	r4, #2
{
    a6d0:	4680      	mov	r8, r0
    a6d2:	b08f      	sub	sp, #60	; 0x3c
    a6d4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    a6d6:	d001      	beq.n	a6dc <att_read_type_req+0x18>
    a6d8:	2c10      	cmp	r4, #16
    a6da:	d154      	bne.n	a786 <att_read_type_req+0xc2>
	req = net_buf_pull_mem(buf, sizeof(*req));
    a6dc:	2104      	movs	r1, #4
    a6de:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    a6e0:	f8d8 7000 	ldr.w	r7, [r8]
	req = net_buf_pull_mem(buf, sizeof(*req));
    a6e4:	f017 ffd7 	bl	22696 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a6e8:	f10d 090c 	add.w	r9, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    a6ec:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a6ee:	8846      	ldrh	r6, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a6f0:	1d01      	adds	r1, r0, #4
    a6f2:	4622      	mov	r2, r4
    a6f4:	4648      	mov	r0, r9
    a6f6:	f015 fa8b 	bl	1fc10 <bt_uuid_create>
    a6fa:	b188      	cbz	r0, a720 <att_read_type_req+0x5c>
	if (!start || !end) {
    a6fc:	b19d      	cbz	r5, a726 <att_read_type_req+0x62>
    a6fe:	b18e      	cbz	r6, a724 <att_read_type_req+0x60>
	if (start > end) {
    a700:	42b5      	cmp	r5, r6
    a702:	d810      	bhi.n	a726 <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    a704:	f8d8 7000 	ldr.w	r7, [r8]
	(void)memset(&data, 0, sizeof(data));
    a708:	2218      	movs	r2, #24
    a70a:	2100      	movs	r1, #0
    a70c:	a808      	add	r0, sp, #32
    a70e:	f014 ff9d 	bl	1f64c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    a712:	2201      	movs	r2, #1
    a714:	2109      	movs	r1, #9
    a716:	4638      	mov	r0, r7
    a718:	f7ff fbe0 	bl	9edc <bt_att_create_pdu>
    a71c:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    a71e:	b968      	cbnz	r0, a73c <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    a720:	240e      	movs	r4, #14
    a722:	e007      	b.n	a734 <att_read_type_req+0x70>
			*err = 0U;
    a724:	4635      	mov	r5, r6
	if (!req) {
    a726:	2301      	movs	r3, #1
    a728:	462a      	mov	r2, r5
    a72a:	2108      	movs	r1, #8
    a72c:	4638      	mov	r0, r7
    a72e:	f7ff fc73 	bl	a018 <send_err_rsp.part.11>
		return 0;
    a732:	2400      	movs	r4, #0
}
    a734:	4620      	mov	r0, r4
    a736:	b00f      	add	sp, #60	; 0x3c
    a738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a73c:	2101      	movs	r1, #1
    a73e:	3008      	adds	r0, #8
	data.uuid = uuid;
    a740:	e9cd 8908 	strd	r8, r9, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a744:	f017 ff76 	bl	22634 <net_buf_simple_add>
	data.rsp->len = 0U;
    a748:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a74c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a74e:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a750:	4a0e      	ldr	r2, [pc, #56]	; (a78c <att_read_type_req+0xc8>)
	data.rsp->len = 0U;
    a752:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a756:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a758:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a75c:	4628      	mov	r0, r5
    a75e:	ab08      	add	r3, sp, #32
    a760:	f015 fd76 	bl	20250 <bt_gatt_foreach_attr>
	if (data.err) {
    a764:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    a768:	b12c      	cbz	r4, a776 <att_read_type_req+0xb2>
		net_buf_unref(data.buf);
    a76a:	980a      	ldr	r0, [sp, #40]	; 0x28
    a76c:	f00c ff32 	bl	175d4 <net_buf_unref>
	if (!req) {
    a770:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    a774:	e7d8      	b.n	a728 <att_read_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a776:	9400      	str	r4, [sp, #0]
    a778:	4b05      	ldr	r3, [pc, #20]	; (a790 <att_read_type_req+0xcc>)
    a77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a77c:	2104      	movs	r1, #4
    a77e:	4638      	mov	r0, r7
    a780:	f015 fcdb 	bl	2013a <bt_l2cap_send_cb>
	return 0;
    a784:	e7d6      	b.n	a734 <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    a786:	2404      	movs	r4, #4
    a788:	e7d4      	b.n	a734 <att_read_type_req+0x70>
    a78a:	bf00      	nop
    a78c:	000203cf 	.word	0x000203cf
    a790:	0002057b 	.word	0x0002057b

0000a794 <att_find_type_req>:
{
    a794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a798:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a79a:	f8d0 b000 	ldr.w	fp, [r0]
{
    a79e:	b08b      	sub	sp, #44	; 0x2c
    a7a0:	4681      	mov	r9, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    a7a2:	2106      	movs	r1, #6
    a7a4:	f108 0008 	add.w	r0, r8, #8
    a7a8:	f017 ff75 	bl	22696 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    a7ac:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    a7ae:	b1fd      	cbz	r5, a7f0 <att_find_type_req+0x5c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a7b0:	8847      	ldrh	r7, [r0, #2]
	if (!start || !end) {
    a7b2:	b1e7      	cbz	r7, a7ee <att_find_type_req+0x5a>
	if (start > end) {
    a7b4:	42bd      	cmp	r5, r7
    a7b6:	d81b      	bhi.n	a7f0 <att_find_type_req+0x5c>
	type = sys_le16_to_cpu(req->type);
    a7b8:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a7ba:	f8ad 300e 	strh.w	r3, [sp, #14]
    a7be:	2400      	movs	r4, #0
    a7c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a7c4:	a904      	add	r1, sp, #16
    a7c6:	a803      	add	r0, sp, #12
	value = buf->data;
    a7c8:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a7cc:	f88d 400c 	strb.w	r4, [sp, #12]
    a7d0:	f88d 4010 	strb.w	r4, [sp, #16]
    a7d4:	f8ad 3012 	strh.w	r3, [sp, #18]
    a7d8:	f015 f9f0 	bl	1fbbc <bt_uuid_cmp>
    a7dc:	4606      	mov	r6, r0
    a7de:	b190      	cbz	r0, a806 <att_find_type_req+0x72>
	if (!req) {
    a7e0:	230a      	movs	r3, #10
    a7e2:	462a      	mov	r2, r5
    a7e4:	2106      	movs	r1, #6
    a7e6:	4658      	mov	r0, fp
    a7e8:	f7ff fc16 	bl	a018 <send_err_rsp.part.11>
		return 0;
    a7ec:	e007      	b.n	a7fe <att_find_type_req+0x6a>
			*err = 0U;
    a7ee:	463d      	mov	r5, r7
	if (!req) {
    a7f0:	2301      	movs	r3, #1
    a7f2:	462a      	mov	r2, r5
    a7f4:	2106      	movs	r1, #6
    a7f6:	4658      	mov	r0, fp
    a7f8:	f7ff fc0e 	bl	a018 <send_err_rsp.part.11>
		return 0;
    a7fc:	2400      	movs	r4, #0
}
    a7fe:	4620      	mov	r0, r4
    a800:	b00b      	add	sp, #44	; 0x2c
    a802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(void)memset(&data, 0, sizeof(data));
    a806:	2214      	movs	r2, #20
	return att_find_type_rsp(att, start_handle, end_handle, value,
    a808:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    a80c:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    a810:	4601      	mov	r1, r0
    a812:	eb0d 0002 	add.w	r0, sp, r2
    a816:	f014 ff19 	bl	1f64c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    a81a:	4632      	mov	r2, r6
    a81c:	2107      	movs	r1, #7
    a81e:	4640      	mov	r0, r8
    a820:	f7ff fb5c 	bl	9edc <bt_att_create_pdu>
    a824:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    a826:	b310      	cbz	r0, a86e <att_find_type_req+0xda>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a828:	230a      	movs	r3, #10
    a82a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a82e:	4a11      	ldr	r2, [pc, #68]	; (a874 <att_find_type_req+0xe0>)
	data.value_len = value_len;
    a830:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a834:	ab05      	add	r3, sp, #20
    a836:	4639      	mov	r1, r7
    a838:	4628      	mov	r0, r5
	data.att = att;
    a83a:	f8cd 9014 	str.w	r9, [sp, #20]
	data.value = value;
    a83e:	e9cd 6a07 	strd	r6, sl, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a842:	f015 fd05 	bl	20250 <bt_gatt_foreach_attr>
	if (data.err) {
    a846:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    a84a:	b144      	cbz	r4, a85e <att_find_type_req+0xca>
		net_buf_unref(data.buf);
    a84c:	9806      	ldr	r0, [sp, #24]
    a84e:	f00c fec1 	bl	175d4 <net_buf_unref>
	if (!req) {
    a852:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    a856:	462a      	mov	r2, r5
    a858:	2106      	movs	r1, #6
    a85a:	4640      	mov	r0, r8
    a85c:	e7cc      	b.n	a7f8 <att_find_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a85e:	9400      	str	r4, [sp, #0]
    a860:	4b05      	ldr	r3, [pc, #20]	; (a878 <att_find_type_req+0xe4>)
    a862:	9a06      	ldr	r2, [sp, #24]
    a864:	2104      	movs	r1, #4
    a866:	4640      	mov	r0, r8
    a868:	f015 fc67 	bl	2013a <bt_l2cap_send_cb>
	return 0;
    a86c:	e7c7      	b.n	a7fe <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    a86e:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    a870:	e7c5      	b.n	a7fe <att_find_type_req+0x6a>
    a872:	bf00      	nop
    a874:	00009b59 	.word	0x00009b59
    a878:	0002057b 	.word	0x0002057b

0000a87c <att_find_info_req>:
{
    a87c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    a87e:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    a880:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    a882:	881d      	ldrh	r5, [r3, #0]
{
    a884:	b087      	sub	sp, #28
    a886:	4607      	mov	r7, r0
	if (!start || !end) {
    a888:	b195      	cbz	r5, a8b0 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a88a:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    a88c:	b17c      	cbz	r4, a8ae <att_find_info_req+0x32>
	if (start > end) {
    a88e:	42a5      	cmp	r5, r4
    a890:	d80e      	bhi.n	a8b0 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    a892:	2210      	movs	r2, #16
    a894:	2100      	movs	r1, #0
    a896:	a802      	add	r0, sp, #8
    a898:	f014 fed8 	bl	1f64c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    a89c:	2200      	movs	r2, #0
    a89e:	2105      	movs	r1, #5
    a8a0:	4630      	mov	r0, r6
    a8a2:	f7ff fb1b 	bl	9edc <bt_att_create_pdu>
    a8a6:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    a8a8:	b958      	cbnz	r0, a8c2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    a8aa:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    a8ac:	e007      	b.n	a8be <att_find_info_req+0x42>
			*err = 0U;
    a8ae:	4625      	mov	r5, r4
	if (!req) {
    a8b0:	2301      	movs	r3, #1
    a8b2:	462a      	mov	r2, r5
    a8b4:	2104      	movs	r1, #4
    a8b6:	4630      	mov	r0, r6
    a8b8:	f7ff fbae 	bl	a018 <send_err_rsp.part.11>
		return 0;
    a8bc:	2000      	movs	r0, #0
}
    a8be:	b007      	add	sp, #28
    a8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a8c2:	4621      	mov	r1, r4
    a8c4:	ab02      	add	r3, sp, #8
    a8c6:	4a0a      	ldr	r2, [pc, #40]	; (a8f0 <att_find_info_req+0x74>)
	data.att = att;
    a8c8:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a8ca:	4628      	mov	r0, r5
    a8cc:	f015 fcc0 	bl	20250 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    a8d0:	9c04      	ldr	r4, [sp, #16]
    a8d2:	b924      	cbnz	r4, a8de <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    a8d4:	9803      	ldr	r0, [sp, #12]
    a8d6:	f00c fe7d 	bl	175d4 <net_buf_unref>
	if (!req) {
    a8da:	230a      	movs	r3, #10
    a8dc:	e7e9      	b.n	a8b2 <att_find_info_req+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    a8de:	2400      	movs	r4, #0
    a8e0:	9400      	str	r4, [sp, #0]
    a8e2:	4b04      	ldr	r3, [pc, #16]	; (a8f4 <att_find_info_req+0x78>)
    a8e4:	9a03      	ldr	r2, [sp, #12]
    a8e6:	2104      	movs	r1, #4
    a8e8:	4630      	mov	r0, r6
    a8ea:	f015 fc26 	bl	2013a <bt_l2cap_send_cb>
	return 0;
    a8ee:	e7e5      	b.n	a8bc <att_find_info_req+0x40>
    a8f0:	00020267 	.word	0x00020267
    a8f4:	0002057b 	.word	0x0002057b

0000a8f8 <bt_att_req_alloc>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

struct bt_att_req *bt_att_req_alloc(s32_t timeout)
{
    a8f8:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a8fa:	4602      	mov	r2, r0
	struct bt_att_req *req = NULL;
    a8fc:	2400      	movs	r4, #0
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a8fe:	a901      	add	r1, sp, #4
    a900:	4806      	ldr	r0, [pc, #24]	; (a91c <bt_att_req_alloc+0x24>)
	struct bt_att_req *req = NULL;
    a902:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a904:	f011 face 	bl	1bea4 <k_mem_slab_alloc>
    a908:	4603      	mov	r3, r0
    a90a:	b928      	cbnz	r0, a918 <bt_att_req_alloc+0x20>
		return NULL;
	}

	BT_DBG("req %p", req);

	req->func = NULL;
    a90c:	9801      	ldr	r0, [sp, #4]
	req->destroy = NULL;
    a90e:	e9c0 3301 	strd	r3, r3, [r0, #4]
	req->user_data = NULL;
    a912:	6183      	str	r3, [r0, #24]

	return req;
}
    a914:	b002      	add	sp, #8
    a916:	bd10      	pop	{r4, pc}
		return NULL;
    a918:	4620      	mov	r0, r4
    a91a:	e7fb      	b.n	a914 <bt_att_req_alloc+0x1c>
    a91c:	2000e5e8 	.word	0x2000e5e8

0000a920 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    a920:	b507      	push	{r0, r1, r2, lr}
    a922:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    a924:	a901      	add	r1, sp, #4
    a926:	4803      	ldr	r0, [pc, #12]	; (a934 <bt_att_req_free+0x14>)
    a928:	f011 fae8 	bl	1befc <k_mem_slab_free>
}
    a92c:	b003      	add	sp, #12
    a92e:	f85d fb04 	ldr.w	pc, [sp], #4
    a932:	bf00      	nop
    a934:	2000e5e8 	.word	0x2000e5e8

0000a938 <att_handle_rsp>:
{
    a938:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    a93c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    a93e:	30a0      	adds	r0, #160	; 0xa0
{
    a940:	461e      	mov	r6, r3
    a942:	460f      	mov	r7, r1
    a944:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    a946:	f01a fd98 	bl	2547a <k_delayed_work_cancel>
	if (!att->req) {
    a94a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    a94e:	bb03      	cbnz	r3, a992 <att_handle_rsp+0x5a>
		BT_WARN("No pending ATT request");
    a950:	2302      	movs	r3, #2
    a952:	f04f 0100 	mov.w	r1, #0
    a956:	f363 0107 	bfi	r1, r3, #0, #8
    a95a:	4a1f      	ldr	r2, [pc, #124]	; (a9d8 <att_handle_rsp+0xa0>)
    a95c:	4b1f      	ldr	r3, [pc, #124]	; (a9dc <att_handle_rsp+0xa4>)
    a95e:	4820      	ldr	r0, [pc, #128]	; (a9e0 <att_handle_rsp+0xa8>)
    a960:	1a9b      	subs	r3, r3, r2
    a962:	08db      	lsrs	r3, r3, #3
    a964:	f363 118f 	bfi	r1, r3, #6, #10
    a968:	f014 f874 	bl	1ea54 <log_0>
Z_GENLIST_IS_EMPTY(slist)
    a96c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    a970:	b159      	cbz	r1, a98a <att_handle_rsp+0x52>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a972:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    a976:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    a978:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a97c:	4291      	cmp	r1, r2
	list->tail = node;
    a97e:	bf08      	it	eq
    a980:	f8c4 309c 	streq.w	r3, [r4, #156]	; 0x9c
	att_send_req(att, ATT_REQ(node));
    a984:	4620      	mov	r0, r4
    a986:	f015 fd7f 	bl	20488 <att_send_req>
}
    a98a:	2000      	movs	r0, #0
    a98c:	b002      	add	sp, #8
    a98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req == &cancel) {
    a992:	4a14      	ldr	r2, [pc, #80]	; (a9e4 <att_handle_rsp+0xac>)
    a994:	4293      	cmp	r3, r2
    a996:	d103      	bne.n	a9a0 <att_handle_rsp+0x68>
		att->req = NULL;
    a998:	2300      	movs	r3, #0
    a99a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		goto process;
    a99e:	e7e5      	b.n	a96c <att_handle_rsp+0x34>
	if (att->req->buf) {
    a9a0:	6918      	ldr	r0, [r3, #16]
    a9a2:	b128      	cbz	r0, a9b0 <att_handle_rsp+0x78>
		net_buf_unref(att->req->buf);
    a9a4:	f00c fe16 	bl	175d4 <net_buf_unref>
		att->req->buf = NULL;
    a9a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    a9ac:	2200      	movs	r2, #0
    a9ae:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    a9b0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	att->req->func = NULL;
    a9b4:	2500      	movs	r5, #0
	func = att->req->func;
    a9b6:	f8d0 9004 	ldr.w	r9, [r0, #4]
	params = att->req->user_data;
    a9ba:	f8d0 a018 	ldr.w	sl, [r0, #24]
	att->req->func = NULL;
    a9be:	6045      	str	r5, [r0, #4]
	att_req_destroy(att->req);
    a9c0:	f015 fea9 	bl	20716 <att_req_destroy>
	att->req = NULL;
    a9c4:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	func(att->chan.chan.conn, err, pdu, len, params);
    a9c8:	f8cd a000 	str.w	sl, [sp]
    a9cc:	4643      	mov	r3, r8
    a9ce:	463a      	mov	r2, r7
    a9d0:	4631      	mov	r1, r6
    a9d2:	6820      	ldr	r0, [r4, #0]
    a9d4:	47c8      	blx	r9
    a9d6:	e7c9      	b.n	a96c <att_handle_rsp+0x34>
    a9d8:	00025a6c 	.word	0x00025a6c
    a9dc:	00025a7c 	.word	0x00025a7c
    a9e0:	00028573 	.word	0x00028573
    a9e4:	20000430 	.word	0x20000430

0000a9e8 <att_error_rsp>:
	if (!att->req || att->req == &cancel) {
    a9e8:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
{
    a9ec:	b570      	push	{r4, r5, r6, lr}
    a9ee:	4605      	mov	r5, r0
	if (!att->req || att->req == &cancel) {
    a9f0:	b352      	cbz	r2, aa48 <att_error_rsp+0x60>
    a9f2:	4b1a      	ldr	r3, [pc, #104]	; (aa5c <att_error_rsp+0x74>)
    a9f4:	429a      	cmp	r2, r3
    a9f6:	d027      	beq.n	aa48 <att_error_rsp+0x60>
	if (att->req->buf) {
    a9f8:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    a9fa:	6888      	ldr	r0, [r1, #8]
	if (att->req->buf) {
    a9fc:	b12b      	cbz	r3, aa0a <att_error_rsp+0x22>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    a9fe:	8994      	ldrh	r4, [r2, #12]
    aa00:	6919      	ldr	r1, [r3, #16]
    aa02:	4421      	add	r1, r4
    aa04:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    aa06:	89d1      	ldrh	r1, [r2, #14]
    aa08:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    aa0a:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    aa0c:	78c4      	ldrb	r4, [r0, #3]
	if (att->req->retrying) {
    aa0e:	b9e3      	cbnz	r3, aa4a <att_error_rsp+0x62>
	switch (err) {
    aa10:	2c05      	cmp	r4, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    aa12:	6828      	ldr	r0, [r5, #0]
	switch (err) {
    aa14:	d006      	beq.n	aa24 <att_error_rsp+0x3c>
    aa16:	2c0f      	cmp	r4, #15
    aa18:	d117      	bne.n	aa4a <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    aa1a:	7a43      	ldrb	r3, [r0, #9]
    aa1c:	2b01      	cmp	r3, #1
    aa1e:	d814      	bhi.n	aa4a <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    aa20:	2102      	movs	r1, #2
    aa22:	e007      	b.n	aa34 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    aa24:	7a43      	ldrb	r3, [r0, #9]
    aa26:	2b01      	cmp	r3, #1
    aa28:	d9fa      	bls.n	aa20 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    aa2a:	2b02      	cmp	r3, #2
    aa2c:	d00a      	beq.n	aa44 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    aa2e:	2b03      	cmp	r3, #3
    aa30:	d10b      	bne.n	aa4a <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    aa32:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    aa34:	f015 fa6a 	bl	1ff0c <bt_conn_set_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    aa38:	b938      	cbnz	r0, aa4a <att_error_rsp+0x62>
		att->req->retrying = true;
    aa3a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    aa3e:	2201      	movs	r2, #1
    aa40:	751a      	strb	r2, [r3, #20]
}
    aa42:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    aa44:	2103      	movs	r1, #3
    aa46:	e7f5      	b.n	aa34 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    aa48:	240e      	movs	r4, #14
	return att_handle_rsp(att, NULL, 0, err);
    aa4a:	2200      	movs	r2, #0
    aa4c:	4623      	mov	r3, r4
    aa4e:	4628      	mov	r0, r5
    aa50:	4611      	mov	r1, r2
}
    aa52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    aa56:	f7ff bf6f 	b.w	a938 <att_handle_rsp>
    aa5a:	bf00      	nop
    aa5c:	20000430 	.word	0x20000430

0000aa60 <bt_att_encrypt_change>:
{
    aa60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    aa62:	4604      	mov	r4, r0
	if (hci_status) {
    aa64:	b139      	cbz	r1, aa76 <bt_att_encrypt_change+0x16>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    aa66:	2200      	movs	r2, #0
    aa68:	2305      	movs	r3, #5
    aa6a:	4611      	mov	r1, r2
}
    aa6c:	b002      	add	sp, #8
    aa6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    aa72:	f7ff bf61 	b.w	a938 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    aa76:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
    aa78:	4628      	mov	r0, r5
    aa7a:	f001 ff21 	bl	c8c0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    aa7e:	7a6b      	ldrb	r3, [r5, #9]
    aa80:	2b01      	cmp	r3, #1
    aa82:	d03d      	beq.n	ab00 <bt_att_encrypt_change+0xa0>
	if (!att->req || !att->req->retrying) {
    aa84:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d039      	beq.n	ab00 <bt_att_encrypt_change+0xa0>
    aa8c:	7d1b      	ldrb	r3, [r3, #20]
    aa8e:	2b00      	cmp	r3, #0
    aa90:	d036      	beq.n	ab00 <bt_att_encrypt_change+0xa0>
	k_sem_take(&att->tx_sem, K_FOREVER);
    aa92:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
	return z_impl_k_sem_take(sem, timeout);
    aa96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa9a:	4630      	mov	r0, r6
    aa9c:	f011 ff38 	bl	1c910 <z_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    aaa0:	6823      	ldr	r3, [r4, #0]
    aaa2:	7b5b      	ldrb	r3, [r3, #13]
    aaa4:	2b06      	cmp	r3, #6
    aaa6:	d11b      	bne.n	aae0 <bt_att_encrypt_change+0x80>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aaa8:	f3bf 8f5b 	dmb	ish
    aaac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    aab0:	f3bf 8f5b 	dmb	ish
	if (!att_is_connected(att)) {
    aab4:	075b      	lsls	r3, r3, #29
    aab6:	d513      	bpl.n	aae0 <bt_att_encrypt_change+0x80>
		BT_WARN("Disconnected");
    aab8:	2302      	movs	r3, #2
    aaba:	f04f 0100 	mov.w	r1, #0
    aabe:	4a11      	ldr	r2, [pc, #68]	; (ab04 <bt_att_encrypt_change+0xa4>)
    aac0:	4811      	ldr	r0, [pc, #68]	; (ab08 <bt_att_encrypt_change+0xa8>)
    aac2:	f363 0107 	bfi	r1, r3, #0, #8
    aac6:	4b11      	ldr	r3, [pc, #68]	; (ab0c <bt_att_encrypt_change+0xac>)
    aac8:	1a9b      	subs	r3, r3, r2
    aaca:	08db      	lsrs	r3, r3, #3
    aacc:	f363 118f 	bfi	r1, r3, #6, #10
    aad0:	f013 ffc0 	bl	1ea54 <log_0>
	z_impl_k_sem_give(sem);
    aad4:	4630      	mov	r0, r6
}
    aad6:	b002      	add	sp, #8
    aad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aadc:	f011 beec 	b.w	1c8b8 <z_impl_k_sem_give>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    aae0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    aae4:	691a      	ldr	r2, [r3, #16]
    aae6:	6890      	ldr	r0, [r2, #8]
    aae8:	f7ff f8c0 	bl	9c6c <att_cb.isra.6>
    aaec:	2600      	movs	r6, #0
    aaee:	4603      	mov	r3, r0
    aaf0:	9600      	str	r6, [sp, #0]
    aaf2:	2104      	movs	r1, #4
    aaf4:	4628      	mov	r0, r5
    aaf6:	f015 fb20 	bl	2013a <bt_l2cap_send_cb>
	att->req->buf = NULL;
    aafa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    aafe:	611e      	str	r6, [r3, #16]
}
    ab00:	b002      	add	sp, #8
    ab02:	bd70      	pop	{r4, r5, r6, pc}
    ab04:	00025a6c 	.word	0x00025a6c
    ab08:	00028608 	.word	0x00028608
    ab0c:	00025a7c 	.word	0x00025a7c

0000ab10 <bt_att_disconnected>:
{
    ab10:	b513      	push	{r0, r1, r4, lr}
    ab12:	4604      	mov	r4, r0
	struct bt_att *att = ATT_CHAN(chan);
    ab14:	9001      	str	r0, [sp, #4]
	att_reset(att);
    ab16:	f015 fe3e 	bl	20796 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    ab1a:	6820      	ldr	r0, [r4, #0]
    ab1c:	f001 ff5c 	bl	c9d8 <bt_gatt_disconnected>
	k_mem_slab_free(&att_slab, (void **)&att);
    ab20:	a901      	add	r1, sp, #4
    ab22:	4802      	ldr	r0, [pc, #8]	; (ab2c <bt_att_disconnected+0x1c>)
    ab24:	f011 f9ea 	bl	1befc <k_mem_slab_free>
}
    ab28:	b002      	add	sp, #8
    ab2a:	bd10      	pop	{r4, pc}
    ab2c:	2000e5cc 	.word	0x2000e5cc

0000ab30 <att_timeout>:
{
    ab30:	b513      	push	{r0, r1, r4, lr}
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
    ab32:	f1a0 03a0 	sub.w	r3, r0, #160	; 0xa0
    ab36:	9301      	str	r3, [sp, #4]
	BT_ERR("ATT Timeout");
    ab38:	f04f 0100 	mov.w	r1, #0
    ab3c:	2301      	movs	r3, #1
    ab3e:	4a0e      	ldr	r2, [pc, #56]	; (ab78 <att_timeout+0x48>)
    ab40:	f363 0107 	bfi	r1, r3, #0, #8
    ab44:	4b0d      	ldr	r3, [pc, #52]	; (ab7c <att_timeout+0x4c>)
    ab46:	1a9b      	subs	r3, r3, r2
    ab48:	08db      	lsrs	r3, r3, #3
    ab4a:	f363 118f 	bfi	r1, r3, #6, #10
{
    ab4e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    ab50:	480b      	ldr	r0, [pc, #44]	; (ab80 <att_timeout+0x50>)
    ab52:	f013 ff7f 	bl	1ea54 <log_0>
	att_reset(att);
    ab56:	9801      	ldr	r0, [sp, #4]
    ab58:	f015 fe1d 	bl	20796 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    ab5c:	f854 0ca0 	ldr.w	r0, [r4, #-160]
    ab60:	f001 ff3a 	bl	c9d8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    ab64:	2300      	movs	r3, #0
    ab66:	f844 3ca0 	str.w	r3, [r4, #-160]
	k_mem_slab_free(&att_slab, (void **)&att);
    ab6a:	a901      	add	r1, sp, #4
    ab6c:	4805      	ldr	r0, [pc, #20]	; (ab84 <att_timeout+0x54>)
    ab6e:	f011 f9c5 	bl	1befc <k_mem_slab_free>
}
    ab72:	b002      	add	sp, #8
    ab74:	bd10      	pop	{r4, pc}
    ab76:	bf00      	nop
    ab78:	00025a6c 	.word	0x00025a6c
    ab7c:	00025a7c 	.word	0x00025a7c
    ab80:	000285b2 	.word	0x000285b2
    ab84:	2000e5cc 	.word	0x2000e5cc

0000ab88 <bt_att_req_cancel>:

	return att_send_req(att, req);
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    ab88:	b510      	push	{r4, lr}
    ab8a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    ab8c:	b370      	cbz	r0, abec <bt_att_req_cancel+0x64>
    ab8e:	b369      	cbz	r1, abec <bt_att_req_cancel+0x64>
		return;
	}

	att = att_chan_get(conn);
    ab90:	f7ff f91e 	bl	9dd0 <att_chan_get>
	if (!att) {
    ab94:	b350      	cbz	r0, abec <bt_att_req_cancel+0x64>
		return;
	}

	/* Check if request is outstanding */
	if (att->req == req) {
    ab96:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    ab9a:	429c      	cmp	r4, r3
    ab9c:	d107      	bne.n	abae <bt_att_req_cancel+0x26>
		att->req = &cancel;
    ab9e:	4b14      	ldr	r3, [pc, #80]	; (abf0 <bt_att_req_cancel+0x68>)
    aba0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	} else {
		/* Remove request from the list */
		sys_slist_find_and_remove(&att->reqs, &req->node);
	}

	att_req_destroy(req);
    aba4:	4620      	mov	r0, r4
}
    aba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    abaa:	f015 bdb4 	b.w	20716 <att_req_destroy>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    abae:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    abb2:	2200      	movs	r2, #0
    abb4:	2b00      	cmp	r3, #0
    abb6:	d0f5      	beq.n	aba4 <bt_att_req_cancel+0x1c>
    abb8:	429c      	cmp	r4, r3
    abba:	d114      	bne.n	abe6 <bt_att_req_cancel+0x5e>
Z_GENLIST_REMOVE(slist, snode)
    abbc:	6823      	ldr	r3, [r4, #0]
    abbe:	b952      	cbnz	r2, abd6 <bt_att_req_cancel+0x4e>
    abc0:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	list->head = node;
    abc4:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
Z_GENLIST_REMOVE(slist, snode)
    abc8:	4294      	cmp	r4, r2
    abca:	d101      	bne.n	abd0 <bt_att_req_cancel+0x48>
	list->tail = node;
    abcc:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	parent->next = child;
    abd0:	2300      	movs	r3, #0
    abd2:	6023      	str	r3, [r4, #0]
    abd4:	e7e6      	b.n	aba4 <bt_att_req_cancel+0x1c>
    abd6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    abd8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    abdc:	429c      	cmp	r4, r3
	list->tail = node;
    abde:	bf08      	it	eq
    abe0:	f8c0 209c 	streq.w	r2, [r0, #156]	; 0x9c
    abe4:	e7f4      	b.n	abd0 <bt_att_req_cancel+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    abe6:	461a      	mov	r2, r3
    abe8:	681b      	ldr	r3, [r3, #0]
    abea:	e7e3      	b.n	abb4 <bt_att_req_cancel+0x2c>
}
    abec:	bd10      	pop	{r4, pc}
    abee:	bf00      	nop
    abf0:	20000430 	.word	0x20000430

0000abf4 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static u16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    abf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    abf6:	490f      	ldr	r1, [pc, #60]	; (ac34 <find_static_attr+0x40>)
	u16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    abf8:	4f0f      	ldr	r7, [pc, #60]	; (ac38 <find_static_attr+0x44>)
	u16_t handle = 1;
    abfa:	2501      	movs	r5, #1
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    abfc:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ac00:	f1a1 0308 	sub.w	r3, r1, #8
    ac04:	42bb      	cmp	r3, r7
    ac06:	d211      	bcs.n	ac2c <find_static_attr+0x38>
    ac08:	f851 6c04 	ldr.w	r6, [r1, #-4]
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    ac0c:	2200      	movs	r2, #0
    ac0e:	e006      	b.n	ac1e <find_static_attr+0x2a>
			if (attr == &static_svc->attrs[i]) {
    ac10:	f851 4c08 	ldr.w	r4, [r1, #-8]
    ac14:	fb0c 4402 	mla	r4, ip, r2, r4
    ac18:	42a0      	cmp	r0, r4
    ac1a:	d008      	beq.n	ac2e <find_static_attr+0x3a>
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    ac1c:	3201      	adds	r2, #1
    ac1e:	18ab      	adds	r3, r5, r2
    ac20:	42b2      	cmp	r2, r6
    ac22:	b29b      	uxth	r3, r3
    ac24:	d1f4      	bne.n	ac10 <find_static_attr+0x1c>
    ac26:	3108      	adds	r1, #8
    ac28:	461d      	mov	r5, r3
    ac2a:	e7e9      	b.n	ac00 <find_static_attr+0xc>
				return handle;
			}
		}
	}

	return 0;
    ac2c:	2300      	movs	r3, #0
}
    ac2e:	4618      	mov	r0, r3
    ac30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac32:	bf00      	nop
    ac34:	000259e8 	.word	0x000259e8
    ac38:	00025a08 	.word	0x00025a08

0000ac3c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    ac3c:	490c      	ldr	r1, [pc, #48]	; (ac70 <db_hash_store+0x34>)
    ac3e:	480d      	ldr	r0, [pc, #52]	; (ac74 <db_hash_store+0x38>)
{
    ac40:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    ac42:	2210      	movs	r2, #16
    ac44:	f7f9 f8f2 	bl	3e2c <settings_save_one>
	if (err) {
    ac48:	4601      	mov	r1, r0
    ac4a:	b178      	cbz	r0, ac6c <db_hash_store+0x30>
		BT_ERR("Failed to save Database Hash (err %d)", err);
    ac4c:	2301      	movs	r3, #1
    ac4e:	f04f 0200 	mov.w	r2, #0
    ac52:	f363 0207 	bfi	r2, r3, #0, #8
    ac56:	4808      	ldr	r0, [pc, #32]	; (ac78 <db_hash_store+0x3c>)
    ac58:	4b08      	ldr	r3, [pc, #32]	; (ac7c <db_hash_store+0x40>)
    ac5a:	1a1b      	subs	r3, r3, r0
    ac5c:	08db      	lsrs	r3, r3, #3
    ac5e:	f363 128f 	bfi	r2, r3, #6, #10
    ac62:	4807      	ldr	r0, [pc, #28]	; (ac80 <db_hash_store+0x44>)
}
    ac64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    ac68:	f013 bf01 	b.w	1ea6e <log_1>
}
    ac6c:	bd08      	pop	{r3, pc}
    ac6e:	bf00      	nop
    ac70:	2000a521 	.word	0x2000a521
    ac74:	0002882d 	.word	0x0002882d
    ac78:	00025a6c 	.word	0x00025a6c
    ac7c:	00025b2c 	.word	0x00025b2c
    ac80:	00028835 	.word	0x00028835

0000ac84 <db_hash_set>:

static u8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    ac84:	b510      	push	{r4, lr}
	int len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    ac86:	490d      	ldr	r1, [pc, #52]	; (acbc <db_hash_set+0x38>)
{
    ac88:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    ac8a:	4618      	mov	r0, r3
    ac8c:	2210      	movs	r2, #16
    ac8e:	47a0      	blx	r4
	if (len < 0) {
    ac90:	1e04      	subs	r4, r0, #0
    ac92:	da10      	bge.n	acb6 <db_hash_set+0x32>
		BT_ERR("Failed to decode value (err %d)", len);
    ac94:	2301      	movs	r3, #1
    ac96:	f04f 0200 	mov.w	r2, #0
    ac9a:	f363 0207 	bfi	r2, r3, #0, #8
    ac9e:	4908      	ldr	r1, [pc, #32]	; (acc0 <db_hash_set+0x3c>)
    aca0:	4b08      	ldr	r3, [pc, #32]	; (acc4 <db_hash_set+0x40>)
    aca2:	4809      	ldr	r0, [pc, #36]	; (acc8 <db_hash_set+0x44>)
    aca4:	1a5b      	subs	r3, r3, r1
    aca6:	08db      	lsrs	r3, r3, #3
    aca8:	f363 128f 	bfi	r2, r3, #6, #10
    acac:	4621      	mov	r1, r4
    acae:	f013 fede 	bl	1ea6e <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    acb2:	4620      	mov	r0, r4
    acb4:	bd10      	pop	{r4, pc}
	return 0;
    acb6:	2400      	movs	r4, #0
    acb8:	e7fb      	b.n	acb2 <db_hash_set+0x2e>
    acba:	bf00      	nop
    acbc:	2000a531 	.word	0x2000a531
    acc0:	00025a6c 	.word	0x00025a6c
    acc4:	00025b2c 	.word	0x00025b2c
    acc8:	0002880d 	.word	0x0002880d

0000accc <sc_store>:
{
    accc:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    acce:	4604      	mov	r4, r0
{
    acd0:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    acd2:	f814 2b01 	ldrb.w	r2, [r4], #1
{
    acd6:	4605      	mov	r5, r0
	if (cfg->id) {
    acd8:	b31a      	cbz	r2, ad22 <sc_store+0x56>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    acda:	ae02      	add	r6, sp, #8
    acdc:	2104      	movs	r1, #4
    acde:	4630      	mov	r0, r6
    ace0:	f012 f9aa 	bl	1d038 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    ace4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    ace6:	4623      	mov	r3, r4
    ace8:	4a0f      	ldr	r2, [pc, #60]	; (ad28 <sc_store+0x5c>)
    acea:	2124      	movs	r1, #36	; 0x24
    acec:	a803      	add	r0, sp, #12
    acee:	f7fb fba1 	bl	6434 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    acf2:	f105 0108 	add.w	r1, r5, #8
    acf6:	2204      	movs	r2, #4
    acf8:	a803      	add	r0, sp, #12
    acfa:	f7f9 f897 	bl	3e2c <settings_save_one>
	if (err) {
    acfe:	4601      	mov	r1, r0
    ad00:	b168      	cbz	r0, ad1e <sc_store+0x52>
		BT_ERR("failed to store SC (err %d)", err);
    ad02:	2301      	movs	r3, #1
    ad04:	f04f 0200 	mov.w	r2, #0
    ad08:	f363 0207 	bfi	r2, r3, #0, #8
    ad0c:	4807      	ldr	r0, [pc, #28]	; (ad2c <sc_store+0x60>)
    ad0e:	4b08      	ldr	r3, [pc, #32]	; (ad30 <sc_store+0x64>)
    ad10:	1a1b      	subs	r3, r3, r0
    ad12:	08db      	lsrs	r3, r3, #3
    ad14:	f363 128f 	bfi	r2, r3, #6, #10
    ad18:	4806      	ldr	r0, [pc, #24]	; (ad34 <sc_store+0x68>)
    ad1a:	f013 fea8 	bl	1ea6e <log_1>
}
    ad1e:	b00c      	add	sp, #48	; 0x30
    ad20:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    ad22:	9200      	str	r2, [sp, #0]
    ad24:	e7df      	b.n	ace6 <sc_store+0x1a>
    ad26:	bf00      	nop
    ad28:	00028999 	.word	0x00028999
    ad2c:	00025a6c 	.word	0x00025a6c
    ad30:	00025b2c 	.word	0x00025b2c
    ad34:	00028974 	.word	0x00028974

0000ad38 <sc_clear>:
{
    ad38:	b570      	push	{r4, r5, r6, lr}
		if (cfg->data.start || cfg->data.end) {
    ad3a:	8903      	ldrh	r3, [r0, #8]
{
    ad3c:	b08c      	sub	sp, #48	; 0x30
    ad3e:	4604      	mov	r4, r0
		if (cfg->data.start || cfg->data.end) {
    ad40:	b90b      	cbnz	r3, ad46 <sc_clear+0xe>
    ad42:	8943      	ldrh	r3, [r0, #10]
    ad44:	b33b      	cbz	r3, ad96 <sc_clear+0x5e>
		if (modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    ad46:	4625      	mov	r5, r4
    ad48:	f815 0b01 	ldrb.w	r0, [r5], #1
    ad4c:	4629      	mov	r1, r5
    ad4e:	f015 f86a 	bl	1fe26 <bt_addr_le_is_bonded>
    ad52:	b300      	cbz	r0, ad96 <sc_clear+0x5e>
			if (cfg->id) {
    ad54:	7822      	ldrb	r2, [r4, #0]
    ad56:	b32a      	cbz	r2, ada4 <sc_clear+0x6c>
				u8_to_dec(id_str, sizeof(id_str), cfg->id);
    ad58:	ae02      	add	r6, sp, #8
    ad5a:	2104      	movs	r1, #4
    ad5c:	4630      	mov	r0, r6
    ad5e:	f012 f96b 	bl	1d038 <u8_to_dec>
				bt_settings_encode_key(key, sizeof(key), "sc",
    ad62:	9600      	str	r6, [sp, #0]
				bt_settings_encode_key(key, sizeof(key), "sc",
    ad64:	2124      	movs	r1, #36	; 0x24
    ad66:	462b      	mov	r3, r5
    ad68:	4a0f      	ldr	r2, [pc, #60]	; (ada8 <sc_clear+0x70>)
    ad6a:	a803      	add	r0, sp, #12
    ad6c:	f7fb fb62 	bl	6434 <bt_settings_encode_key>
			err = settings_delete(key);
    ad70:	a803      	add	r0, sp, #12
    ad72:	f014 f89d 	bl	1eeb0 <settings_delete>
			if (err) {
    ad76:	4601      	mov	r1, r0
    ad78:	b168      	cbz	r0, ad96 <sc_clear+0x5e>
				BT_ERR("failed to delete SC (err %d)", err);
    ad7a:	2301      	movs	r3, #1
    ad7c:	f04f 0200 	mov.w	r2, #0
    ad80:	f363 0207 	bfi	r2, r3, #0, #8
    ad84:	4809      	ldr	r0, [pc, #36]	; (adac <sc_clear+0x74>)
    ad86:	4b0a      	ldr	r3, [pc, #40]	; (adb0 <sc_clear+0x78>)
    ad88:	1a1b      	subs	r3, r3, r0
    ad8a:	08db      	lsrs	r3, r3, #3
    ad8c:	f363 128f 	bfi	r2, r3, #6, #10
    ad90:	4808      	ldr	r0, [pc, #32]	; (adb4 <sc_clear+0x7c>)
    ad92:	f013 fe6c 	bl	1ea6e <log_1>
	memset(cfg, 0, sizeof(*cfg));
    ad96:	220c      	movs	r2, #12
    ad98:	2100      	movs	r1, #0
    ad9a:	4620      	mov	r0, r4
    ad9c:	f014 fc56 	bl	1f64c <memset>
}
    ada0:	b00c      	add	sp, #48	; 0x30
    ada2:	bd70      	pop	{r4, r5, r6, pc}
				bt_settings_encode_key(key, sizeof(key), "sc",
    ada4:	9200      	str	r2, [sp, #0]
    ada6:	e7dd      	b.n	ad64 <sc_clear+0x2c>
    ada8:	00028999 	.word	0x00028999
    adac:	00025a6c 	.word	0x00025a6c
    adb0:	00025b2c 	.word	0x00025b2c
    adb4:	000288fa 	.word	0x000288fa

0000adb8 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    adb8:	6882      	ldr	r2, [r0, #8]
    adba:	4b1f      	ldr	r3, [pc, #124]	; (ae38 <disconnected_cb+0x80>)
    adbc:	429a      	cmp	r2, r3
{
    adbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adc2:	4607      	mov	r7, r0
    adc4:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    adc6:	d102      	bne.n	adce <disconnected_cb+0x16>
	ccc = attr->user_data;
    adc8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    adca:	8963      	ldrh	r3, [r4, #10]
    adcc:	b9eb      	cbnz	r3, ae0a <disconnected_cb+0x52>
}
    adce:	2001      	movs	r0, #1
    add0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    add4:	4629      	mov	r1, r5
    add6:	4630      	mov	r0, r6
    add8:	f015 f8cd 	bl	1ff76 <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    addc:	b9e8      	cbnz	r0, ae1a <disconnected_cb+0x62>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    adde:	f106 0870 	add.w	r8, r6, #112	; 0x70
    ade2:	4641      	mov	r1, r8
    ade4:	7a30      	ldrb	r0, [r6, #8]
    ade6:	f015 f81e 	bl	1fe26 <bt_addr_le_is_bonded>
    adea:	b948      	cbnz	r0, ae00 <disconnected_cb+0x48>
				clear_ccc_cfg(cfg);
    adec:	4620      	mov	r0, r4
    adee:	f015 fd8c 	bl	2090a <clear_ccc_cfg>
    adf2:	e018      	b.n	ae26 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
    adf4:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    adf6:	f015 f8d6 	bl	1ffa6 <bt_conn_unref>
	if (!value_used) {
    adfa:	2d06      	cmp	r5, #6
    adfc:	d0e7      	beq.n	adce <disconnected_cb+0x16>
    adfe:	e012      	b.n	ae26 <disconnected_cb+0x6e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ae00:	4641      	mov	r1, r8
    ae02:	4628      	mov	r0, r5
    ae04:	f015 fd7e 	bl	20904 <bt_addr_le_copy>
    ae08:	e00d      	b.n	ae26 <disconnected_cb+0x6e>
		if (!cfg->value) {
    ae0a:	8923      	ldrh	r3, [r4, #8]
    ae0c:	b15b      	cbz	r3, ae26 <disconnected_cb+0x6e>
		if (conn->id != cfg->id ||
    ae0e:	4625      	mov	r5, r4
    ae10:	7a32      	ldrb	r2, [r6, #8]
    ae12:	f815 3b01 	ldrb.w	r3, [r5], #1
    ae16:	429a      	cmp	r2, r3
    ae18:	d0dc      	beq.n	add4 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    ae1a:	4629      	mov	r1, r5
    ae1c:	7820      	ldrb	r0, [r4, #0]
    ae1e:	f7fe fb07 	bl	9430 <bt_conn_lookup_addr_le>
			if (tmp) {
    ae22:	2800      	cmp	r0, #0
    ae24:	d1e6      	bne.n	adf4 <disconnected_cb+0x3c>
		if (ccc->cfg_changed) {
    ae26:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    ae28:	2100      	movs	r1, #0
    ae2a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d0ce      	beq.n	adce <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    ae30:	4638      	mov	r0, r7
    ae32:	4798      	blx	r3
    ae34:	e7cb      	b.n	adce <disconnected_cb+0x16>
    ae36:	bf00      	nop
    ae38:	0000b0e5 	.word	0x0000b0e5

0000ae3c <gatt_notify>:
{
    ae3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae40:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    ae42:	8992      	ldrh	r2, [r2, #12]
{
    ae44:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    ae46:	3202      	adds	r2, #2
    ae48:	211b      	movs	r1, #27
{
    ae4a:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    ae4c:	f7ff f846 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    ae50:	4605      	mov	r5, r0
    ae52:	b1c8      	cbz	r0, ae88 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    ae54:	f100 0708 	add.w	r7, r0, #8
    ae58:	2102      	movs	r1, #2
    ae5a:	4638      	mov	r0, r7
    ae5c:	f017 fbea 	bl	22634 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    ae60:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    ae62:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    ae64:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    ae68:	4638      	mov	r0, r7
    ae6a:	f017 fbe3 	bl	22634 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    ae6e:	89a2      	ldrh	r2, [r4, #12]
    ae70:	68a1      	ldr	r1, [r4, #8]
    ae72:	4630      	mov	r0, r6
    ae74:	f014 fbc0 	bl	1f5f8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    ae78:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ae7c:	4629      	mov	r1, r5
    ae7e:	4640      	mov	r0, r8
}
    ae80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    ae84:	f015 bcda 	b.w	2083c <bt_att_send>
		BT_WARN("No buffer available to send notification");
    ae88:	2302      	movs	r3, #2
    ae8a:	f04f 0100 	mov.w	r1, #0
    ae8e:	4a07      	ldr	r2, [pc, #28]	; (aeac <gatt_notify+0x70>)
    ae90:	4807      	ldr	r0, [pc, #28]	; (aeb0 <gatt_notify+0x74>)
    ae92:	f363 0107 	bfi	r1, r3, #0, #8
    ae96:	4b07      	ldr	r3, [pc, #28]	; (aeb4 <gatt_notify+0x78>)
    ae98:	1a9b      	subs	r3, r3, r2
    ae9a:	08db      	lsrs	r3, r3, #3
    ae9c:	f363 118f 	bfi	r1, r3, #6, #10
    aea0:	f013 fdd8 	bl	1ea54 <log_0>
}
    aea4:	f06f 000b 	mvn.w	r0, #11
    aea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aeac:	00025a6c 	.word	0x00025a6c
    aeb0:	00028894 	.word	0x00028894
    aeb4:	00025b2c 	.word	0x00025b2c

0000aeb8 <gatt_send.constprop.37>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aebc:	4606      	mov	r6, r0
    aebe:	4688      	mov	r8, r1
    aec0:	4617      	mov	r7, r2
	if (params) {
    aec2:	461c      	mov	r4, r3
    aec4:	b343      	cbz	r3, af18 <gatt_send.constprop.37+0x60>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    aec6:	f247 5030 	movw	r0, #30000	; 0x7530
    aeca:	f7ff fd15 	bl	a8f8 <bt_att_req_alloc>
		if (!req) {
    aece:	4605      	mov	r5, r0
    aed0:	b348      	cbz	r0, af26 <gatt_send.constprop.37+0x6e>
		req->destroy = destroy;
    aed2:	2300      	movs	r3, #0
		req->user_data = params;
    aed4:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    aed6:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    aeda:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    aedc:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    aede:	4601      	mov	r1, r0
    aee0:	4630      	mov	r0, r6
    aee2:	f015 fcdb 	bl	2089c <bt_att_req_send>
		if (err) {
    aee6:	4604      	mov	r4, r0
    aee8:	b918      	cbnz	r0, aef2 <gatt_send.constprop.37+0x3a>
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    aeea:	2400      	movs	r4, #0
}
    aeec:	4620      	mov	r0, r4
    aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_att_req_free(req);
    aef2:	4628      	mov	r0, r5
    aef4:	f7ff fd14 	bl	a920 <bt_att_req_free>
		BT_ERR("Error sending ATT PDU: %d", err);
    aef8:	2301      	movs	r3, #1
    aefa:	f04f 0200 	mov.w	r2, #0
    aefe:	f363 0207 	bfi	r2, r3, #0, #8
    af02:	490a      	ldr	r1, [pc, #40]	; (af2c <gatt_send.constprop.37+0x74>)
    af04:	4b0a      	ldr	r3, [pc, #40]	; (af30 <gatt_send.constprop.37+0x78>)
    af06:	480b      	ldr	r0, [pc, #44]	; (af34 <gatt_send.constprop.37+0x7c>)
    af08:	1a5b      	subs	r3, r3, r1
    af0a:	08db      	lsrs	r3, r3, #3
    af0c:	f363 128f 	bfi	r2, r3, #6, #10
    af10:	4621      	mov	r1, r4
    af12:	f013 fdac 	bl	1ea6e <log_1>
    af16:	e7e9      	b.n	aeec <gatt_send.constprop.37+0x34>
		err = bt_att_send(conn, buf, NULL, NULL);
    af18:	461a      	mov	r2, r3
    af1a:	f015 fc8f 	bl	2083c <bt_att_send>
	if (err) {
    af1e:	4604      	mov	r4, r0
    af20:	2800      	cmp	r0, #0
    af22:	d0e2      	beq.n	aeea <gatt_send.constprop.37+0x32>
    af24:	e7e8      	b.n	aef8 <gatt_send.constprop.37+0x40>
			return -ENOMEM;
    af26:	f06f 040b 	mvn.w	r4, #11
    af2a:	e7df      	b.n	aeec <gatt_send.constprop.37+0x34>
    af2c:	00025a6c 	.word	0x00025a6c
    af30:	00025b2c 	.word	0x00025b2c
    af34:	000288e0 	.word	0x000288e0

0000af38 <gatt_indicate>:
{
    af38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af3c:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    af3e:	8a12      	ldrh	r2, [r2, #16]
{
    af40:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    af42:	3202      	adds	r2, #2
    af44:	211d      	movs	r1, #29
{
    af46:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    af48:	f7fe ffc8 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    af4c:	4605      	mov	r5, r0
    af4e:	b1e8      	cbz	r0, af8c <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    af50:	f100 0608 	add.w	r6, r0, #8
    af54:	2102      	movs	r1, #2
    af56:	4630      	mov	r0, r6
    af58:	f017 fb6c 	bl	22634 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    af5c:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    af5e:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    af60:	f827 9b02 	strh.w	r9, [r7], #2
	net_buf_add(buf, params->len);
    af64:	4630      	mov	r0, r6
    af66:	f017 fb65 	bl	22634 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    af6a:	8a22      	ldrh	r2, [r4, #16]
    af6c:	68e1      	ldr	r1, [r4, #12]
    af6e:	4638      	mov	r0, r7
    af70:	f014 fb42 	bl	1f5f8 <memcpy>
	if (!params->func) {
    af74:	68a3      	ldr	r3, [r4, #8]
    af76:	b933      	cbnz	r3, af86 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    af78:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    af7a:	4629      	mov	r1, r5
    af7c:	4640      	mov	r0, r8
}
    af7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    af82:	f7ff bf99 	b.w	aeb8 <gatt_send.constprop.37>
    af86:	4623      	mov	r3, r4
    af88:	4a09      	ldr	r2, [pc, #36]	; (afb0 <gatt_indicate+0x78>)
    af8a:	e7f6      	b.n	af7a <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
    af8c:	2302      	movs	r3, #2
    af8e:	f04f 0100 	mov.w	r1, #0
    af92:	4a08      	ldr	r2, [pc, #32]	; (afb4 <gatt_indicate+0x7c>)
    af94:	4808      	ldr	r0, [pc, #32]	; (afb8 <gatt_indicate+0x80>)
    af96:	f363 0107 	bfi	r1, r3, #0, #8
    af9a:	4b08      	ldr	r3, [pc, #32]	; (afbc <gatt_indicate+0x84>)
    af9c:	1a9b      	subs	r3, r3, r2
    af9e:	08db      	lsrs	r3, r3, #3
    afa0:	f363 118f 	bfi	r1, r3, #6, #10
    afa4:	f013 fd56 	bl	1ea54 <log_0>
}
    afa8:	f06f 000b 	mvn.w	r0, #11
    afac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    afb0:	000208f5 	.word	0x000208f5
    afb4:	00025a6c 	.word	0x00025a6c
    afb8:	0002886d 	.word	0x0002886d
    afbc:	00025b2c 	.word	0x00025b2c

0000afc0 <ccc_load>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    afc0:	6882      	ldr	r2, [r0, #8]
    afc2:	4b22      	ldr	r3, [pc, #136]	; (b04c <ccc_load+0x8c>)
    afc4:	429a      	cmp	r2, r3
{
    afc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    afc8:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    afca:	d002      	beq.n	afd2 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    afcc:	2001      	movs	r0, #1
}
    afce:	b002      	add	sp, #8
    afd0:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    afd2:	688a      	ldr	r2, [r1, #8]
	ccc = attr->user_data;
    afd4:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    afd6:	b94a      	cbnz	r2, afec <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    afd8:	790a      	ldrb	r2, [r1, #4]
    afda:	6809      	ldr	r1, [r1, #0]
    afdc:	4630      	mov	r0, r6
    afde:	f015 fd75 	bl	20acc <ccc_find_cfg>
	if (!cfg) {
    afe2:	2800      	cmp	r0, #0
    afe4:	d0f2      	beq.n	afcc <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    afe6:	f015 fc90 	bl	2090a <clear_ccc_cfg>
    afea:	e7ef      	b.n	afcc <ccc_load+0xc>
	} else if (!load->count) {
    afec:	68cb      	ldr	r3, [r1, #12]
    afee:	b353      	cbz	r3, b046 <ccc_load+0x86>
	if (load->entry->handle != attr->handle) {
    aff0:	8812      	ldrh	r2, [r2, #0]
    aff2:	8a03      	ldrh	r3, [r0, #16]
    aff4:	429a      	cmp	r2, r3
    aff6:	d00a      	beq.n	b00e <ccc_load+0x4e>
		if (load->entry->handle < attr->handle) {
    aff8:	d2e8      	bcs.n	afcc <ccc_load+0xc>
	load->count--;
    affa:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    affc:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    affe:	3801      	subs	r0, #1
	load->entry++;
    b000:	3304      	adds	r3, #4
	load->count--;
    b002:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b004:	3000      	adds	r0, #0
	load->entry++;
    b006:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b008:	bf18      	it	ne
    b00a:	2001      	movne	r0, #1
    b00c:	e7df      	b.n	afce <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    b00e:	790a      	ldrb	r2, [r1, #4]
    b010:	6809      	ldr	r1, [r1, #0]
    b012:	4630      	mov	r0, r6
    b014:	f015 fd5a 	bl	20acc <ccc_find_cfg>
	if (!cfg) {
    b018:	4605      	mov	r5, r0
    b01a:	b980      	cbnz	r0, b03e <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    b01c:	9000      	str	r0, [sp, #0]
    b01e:	4602      	mov	r2, r0
    b020:	f8cd 0003 	str.w	r0, [sp, #3]
    b024:	4669      	mov	r1, sp
    b026:	4630      	mov	r0, r6
    b028:	f015 fd50 	bl	20acc <ccc_find_cfg>
		if (!cfg) {
    b02c:	4605      	mov	r5, r0
    b02e:	2800      	cmp	r0, #0
    b030:	d0e3      	beq.n	affa <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    b032:	6821      	ldr	r1, [r4, #0]
    b034:	3001      	adds	r0, #1
    b036:	f015 fc65 	bl	20904 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    b03a:	7923      	ldrb	r3, [r4, #4]
    b03c:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    b03e:	68a3      	ldr	r3, [r4, #8]
    b040:	885b      	ldrh	r3, [r3, #2]
    b042:	812b      	strh	r3, [r5, #8]
    b044:	e7d9      	b.n	affa <ccc_load+0x3a>
		return BT_GATT_ITER_STOP;
    b046:	4618      	mov	r0, r3
    b048:	e7c1      	b.n	afce <ccc_load+0xe>
    b04a:	bf00      	nop
    b04c:	0000b0e5 	.word	0x0000b0e5

0000b050 <ccc_save>:
{
    b050:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b052:	6882      	ldr	r2, [r0, #8]
    b054:	4b0b      	ldr	r3, [pc, #44]	; (b084 <ccc_save+0x34>)
    b056:	429a      	cmp	r2, r3
{
    b058:	4605      	mov	r5, r0
    b05a:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b05c:	d110      	bne.n	b080 <ccc_save+0x30>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    b05e:	790a      	ldrb	r2, [r1, #4]
    b060:	68c0      	ldr	r0, [r0, #12]
    b062:	6809      	ldr	r1, [r1, #0]
    b064:	f015 fd32 	bl	20acc <ccc_find_cfg>
	if (!cfg) {
    b068:	b150      	cbz	r0, b080 <ccc_save+0x30>
	save->store[save->count].handle = attr->handle;
    b06a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    b06e:	8a29      	ldrh	r1, [r5, #16]
    b070:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    b074:	3301      	adds	r3, #1
	save->store[save->count].handle = attr->handle;
    b076:	8111      	strh	r1, [r2, #8]
	save->store[save->count].value = cfg->value;
    b078:	8901      	ldrh	r1, [r0, #8]
    b07a:	8151      	strh	r1, [r2, #10]
	save->count++;
    b07c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    b080:	2001      	movs	r0, #1
    b082:	bd38      	pop	{r3, r4, r5, pc}
    b084:	0000b0e5 	.word	0x0000b0e5

0000b088 <remove_peer_from_attr>:
{
    b088:	b508      	push	{r3, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b08a:	6882      	ldr	r2, [r0, #8]
    b08c:	4b07      	ldr	r3, [pc, #28]	; (b0ac <remove_peer_from_attr+0x24>)
    b08e:	429a      	cmp	r2, r3
    b090:	d109      	bne.n	b0a6 <remove_peer_from_attr+0x1e>
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    b092:	790a      	ldrb	r2, [r1, #4]
    b094:	68c0      	ldr	r0, [r0, #12]
    b096:	6809      	ldr	r1, [r1, #0]
    b098:	f015 fd18 	bl	20acc <ccc_find_cfg>
	if (cfg) {
    b09c:	b118      	cbz	r0, b0a6 <remove_peer_from_attr+0x1e>
		memset(cfg, 0, sizeof(*cfg));
    b09e:	220a      	movs	r2, #10
    b0a0:	2100      	movs	r1, #0
    b0a2:	f014 fad3 	bl	1f64c <memset>
}
    b0a6:	2001      	movs	r0, #1
    b0a8:	bd08      	pop	{r3, pc}
    b0aa:	bf00      	nop
    b0ac:	0000b0e5 	.word	0x0000b0e5

0000b0b0 <find_cf_cfg_by_addr.part.14>:
static struct gatt_cf_cfg *find_cf_cfg_by_addr(const bt_addr_le_t *addr)
    b0b0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    b0b2:	2207      	movs	r2, #7
    b0b4:	4909      	ldr	r1, [pc, #36]	; (b0dc <find_cf_cfg_by_addr.part.14+0x2c>)
    b0b6:	4c0a      	ldr	r4, [pc, #40]	; (b0e0 <find_cf_cfg_by_addr.part.14+0x30>)
    b0b8:	4605      	mov	r5, r0
    b0ba:	f014 fa8d 	bl	1f5d8 <memcmp>
		if (!bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
    b0be:	b138      	cbz	r0, b0d0 <find_cf_cfg_by_addr.part.14+0x20>
    b0c0:	2207      	movs	r2, #7
    b0c2:	f104 0111 	add.w	r1, r4, #17
    b0c6:	4628      	mov	r0, r5
    b0c8:	f014 fa86 	bl	1f5d8 <memcmp>
    b0cc:	b918      	cbnz	r0, b0d6 <find_cf_cfg_by_addr.part.14+0x26>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    b0ce:	2001      	movs	r0, #1
			return &cf_cfg[i];
    b0d0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
    b0d4:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    b0d6:	2000      	movs	r0, #0
    b0d8:	e7fc      	b.n	b0d4 <find_cf_cfg_by_addr.part.14+0x24>
    b0da:	bf00      	nop
    b0dc:	2000044d 	.word	0x2000044d
    b0e0:	2000044c 	.word	0x2000044c

0000b0e4 <bt_gatt_attr_write_ccc>:
{
    b0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b0e8:	4698      	mov	r8, r3
    b0ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    b0ee:	68ce      	ldr	r6, [r1, #12]
{
    b0f0:	4607      	mov	r7, r0
    b0f2:	4689      	mov	r9, r1
	if (offset) {
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d14e      	bne.n	b196 <bt_gatt_attr_write_ccc+0xb2>
	if (!len || len > sizeof(u16_t)) {
    b0f8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    b0fc:	2b01      	cmp	r3, #1
    b0fe:	d84d      	bhi.n	b19c <bt_gatt_attr_write_ccc+0xb8>
	if (len < sizeof(u16_t)) {
    b100:	f1b8 0f01 	cmp.w	r8, #1
		value = *(u8_t *)buf;
    b104:	7814      	ldrb	r4, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    b106:	bf18      	it	ne
    b108:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    b10a:	4631      	mov	r1, r6
		value = *(u8_t *)buf;
    b10c:	bf0c      	ite	eq
    b10e:	b2a4      	uxtheq	r4, r4
    b110:	ea44 2403 	orrne.w	r4, r4, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    b114:	f015 fce9 	bl	20aea <find_ccc_cfg>
	if (!cfg) {
    b118:	4605      	mov	r5, r0
    b11a:	bb00      	cbnz	r0, b15e <bt_gatt_attr_write_ccc+0x7a>
		if (!value) {
    b11c:	b914      	cbnz	r4, b124 <bt_gatt_attr_write_ccc+0x40>
			return len;
    b11e:	4640      	mov	r0, r8
}
    b120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    b124:	4631      	mov	r1, r6
    b126:	f015 fce0 	bl	20aea <find_ccc_cfg>
		if (!cfg) {
    b12a:	4605      	mov	r5, r0
    b12c:	b980      	cbnz	r0, b150 <bt_gatt_attr_write_ccc+0x6c>
			BT_WARN("No space to store CCC cfg");
    b12e:	2302      	movs	r3, #2
    b130:	f04f 0100 	mov.w	r1, #0
    b134:	f363 0107 	bfi	r1, r3, #0, #8
    b138:	4a1a      	ldr	r2, [pc, #104]	; (b1a4 <bt_gatt_attr_write_ccc+0xc0>)
    b13a:	4b1b      	ldr	r3, [pc, #108]	; (b1a8 <bt_gatt_attr_write_ccc+0xc4>)
    b13c:	481b      	ldr	r0, [pc, #108]	; (b1ac <bt_gatt_attr_write_ccc+0xc8>)
    b13e:	1a9b      	subs	r3, r3, r2
    b140:	08db      	lsrs	r3, r3, #3
    b142:	f363 118f 	bfi	r1, r3, #6, #10
    b146:	f013 fc85 	bl	1ea54 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    b14a:	f06f 0010 	mvn.w	r0, #16
    b14e:	e7e7      	b.n	b120 <bt_gatt_attr_write_ccc+0x3c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b150:	f107 0170 	add.w	r1, r7, #112	; 0x70
    b154:	3001      	adds	r0, #1
    b156:	f015 fbd5 	bl	20904 <bt_addr_le_copy>
		cfg->id = conn->id;
    b15a:	7a3b      	ldrb	r3, [r7, #8]
    b15c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    b15e:	6933      	ldr	r3, [r6, #16]
    b160:	b96b      	cbnz	r3, b17e <bt_gatt_attr_write_ccc+0x9a>
	if (cfg->value != ccc->value) {
    b162:	8973      	ldrh	r3, [r6, #10]
	cfg->value = value;
    b164:	812c      	strh	r4, [r5, #8]
	if (cfg->value != ccc->value) {
    b166:	42a3      	cmp	r3, r4
    b168:	d003      	beq.n	b172 <bt_gatt_attr_write_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
    b16a:	4631      	mov	r1, r6
    b16c:	4648      	mov	r0, r9
    b16e:	f015 fbb7 	bl	208e0 <gatt_ccc_changed>
	if (!value) {
    b172:	2c00      	cmp	r4, #0
    b174:	d1d3      	bne.n	b11e <bt_gatt_attr_write_ccc+0x3a>
		clear_ccc_cfg(cfg);
    b176:	4628      	mov	r0, r5
    b178:	f015 fbc7 	bl	2090a <clear_ccc_cfg>
    b17c:	e7cf      	b.n	b11e <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    b17e:	4622      	mov	r2, r4
    b180:	4649      	mov	r1, r9
    b182:	4638      	mov	r0, r7
    b184:	4798      	blx	r3
		if (write < 0) {
    b186:	2800      	cmp	r0, #0
    b188:	dbca      	blt.n	b120 <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
    b18a:	3801      	subs	r0, #1
    b18c:	2801      	cmp	r0, #1
    b18e:	d9e8      	bls.n	b162 <bt_gatt_attr_write_ccc+0x7e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    b190:	f06f 000d 	mvn.w	r0, #13
    b194:	e7c4      	b.n	b120 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b196:	f06f 0006 	mvn.w	r0, #6
    b19a:	e7c1      	b.n	b120 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    b19c:	f06f 000c 	mvn.w	r0, #12
    b1a0:	e7be      	b.n	b120 <bt_gatt_attr_write_ccc+0x3c>
    b1a2:	bf00      	nop
    b1a4:	00025a6c 	.word	0x00025a6c
    b1a8:	00025b2c 	.word	0x00025b2c
    b1ac:	000286e9 	.word	0x000286e9

0000b1b0 <sc_commit>:
{
    b1b0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b1b2:	f06f 0102 	mvn.w	r1, #2
    b1b6:	4807      	ldr	r0, [pc, #28]	; (b1d4 <sc_commit+0x24>)
    b1b8:	f015 fc33 	bl	20a22 <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    b1bc:	2100      	movs	r1, #0
    b1be:	4805      	ldr	r0, [pc, #20]	; (b1d4 <sc_commit+0x24>)
    b1c0:	f015 fc26 	bl	20a10 <atomic_test_bit>
    b1c4:	b120      	cbz	r0, b1d0 <sc_commit+0x20>
    b1c6:	220a      	movs	r2, #10
    b1c8:	4903      	ldr	r1, [pc, #12]	; (b1d8 <sc_commit+0x28>)
    b1ca:	4804      	ldr	r0, [pc, #16]	; (b1dc <sc_commit+0x2c>)
    b1cc:	f011 fce6 	bl	1cb9c <k_delayed_work_submit_to_queue>
}
    b1d0:	2000      	movs	r0, #0
    b1d2:	bd08      	pop	{r3, pc}
    b1d4:	200004c4 	.word	0x200004c4
    b1d8:	200004a4 	.word	0x200004a4
    b1dc:	20005fa0 	.word	0x20005fa0

0000b1e0 <gatt_write_ccc.constprop.33>:
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    b1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1e4:	4689      	mov	r9, r1
    b1e6:	4690      	mov	r8, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    b1e8:	2112      	movs	r1, #18
    b1ea:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    b1ec:	4607      	mov	r7, r0
    b1ee:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    b1f0:	f7fe fe74 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    b1f4:	4604      	mov	r4, r0
    b1f6:	b308      	cbz	r0, b23c <gatt_write_ccc.constprop.33+0x5c>
	req = net_buf_add(buf, sizeof(*req));
    b1f8:	f100 0608 	add.w	r6, r0, #8
    b1fc:	2102      	movs	r1, #2
    b1fe:	4630      	mov	r0, r6
    b200:	f017 fa18 	bl	22634 <net_buf_simple_add>
	net_buf_add_le16(buf, value);
    b204:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    b206:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    b20a:	4630      	mov	r0, r6
    b20c:	f017 fa29 	bl	22662 <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b210:	f3bf 8f5b 	dmb	ish
    b214:	f105 030c 	add.w	r3, r5, #12
    b218:	e853 2f00 	ldrex	r2, [r3]
    b21c:	f042 0204 	orr.w	r2, r2, #4
    b220:	e843 2100 	strex	r1, r2, [r3]
    b224:	2900      	cmp	r1, #0
    b226:	d1f7      	bne.n	b218 <gatt_write_ccc.constprop.33+0x38>
    b228:	f3bf 8f5b 	dmb	ish
	return gatt_send(conn, buf, func, params, NULL);
    b22c:	462b      	mov	r3, r5
    b22e:	4621      	mov	r1, r4
    b230:	4638      	mov	r0, r7
    b232:	4a04      	ldr	r2, [pc, #16]	; (b244 <gatt_write_ccc.constprop.33+0x64>)
}
    b234:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    b238:	f7ff be3e 	b.w	aeb8 <gatt_send.constprop.37>
}
    b23c:	f06f 000b 	mvn.w	r0, #11
    b240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b244:	00020d0d 	.word	0x00020d0d

0000b248 <gatt_sub_find_free>:
{
    b248:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b24a:	4606      	mov	r6, r0
	if (free_sub) {
    b24c:	460d      	mov	r5, r1
    b24e:	b109      	cbz	r1, b254 <gatt_sub_find_free+0xc>
		*free_sub = NULL;
    b250:	2300      	movs	r3, #0
    b252:	600b      	str	r3, [r1, #0]
		if (!bt_conn_addr_le_cmp(conn, &sub->peer)) {
    b254:	4c14      	ldr	r4, [pc, #80]	; (b2a8 <gatt_sub_find_free+0x60>)
    b256:	4630      	mov	r0, r6
    b258:	4621      	mov	r1, r4
    b25a:	f014 fe8c 	bl	1ff76 <bt_conn_addr_le_cmp>
    b25e:	b300      	cbz	r0, b2a2 <gatt_sub_find_free+0x5a>
		} else if (free_sub &&
    b260:	b155      	cbz	r5, b278 <gatt_sub_find_free+0x30>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    b262:	2300      	movs	r3, #0
    b264:	2207      	movs	r2, #7
    b266:	4621      	mov	r1, r4
    b268:	4668      	mov	r0, sp
    b26a:	9300      	str	r3, [sp, #0]
    b26c:	f8cd 3003 	str.w	r3, [sp, #3]
    b270:	f014 f9b2 	bl	1f5d8 <memcmp>
		} else if (free_sub &&
    b274:	b900      	cbnz	r0, b278 <gatt_sub_find_free+0x30>
			*free_sub = sub;
    b276:	602c      	str	r4, [r5, #0]
		if (!bt_conn_addr_le_cmp(conn, &sub->peer)) {
    b278:	4c0c      	ldr	r4, [pc, #48]	; (b2ac <gatt_sub_find_free+0x64>)
    b27a:	4630      	mov	r0, r6
    b27c:	4621      	mov	r1, r4
    b27e:	f014 fe7a 	bl	1ff76 <bt_conn_addr_le_cmp>
    b282:	b170      	cbz	r0, b2a2 <gatt_sub_find_free+0x5a>
		} else if (free_sub &&
    b284:	b155      	cbz	r5, b29c <gatt_sub_find_free+0x54>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    b286:	2300      	movs	r3, #0
    b288:	2207      	movs	r2, #7
    b28a:	4621      	mov	r1, r4
    b28c:	4668      	mov	r0, sp
    b28e:	9300      	str	r3, [sp, #0]
    b290:	f8cd 3003 	str.w	r3, [sp, #3]
    b294:	f014 f9a0 	bl	1f5d8 <memcmp>
		} else if (free_sub &&
    b298:	b900      	cbnz	r0, b29c <gatt_sub_find_free+0x54>
			*free_sub = sub;
    b29a:	602c      	str	r4, [r5, #0]
	return NULL;
    b29c:	2000      	movs	r0, #0
}
    b29e:	b002      	add	sp, #8
    b2a0:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_sub *sub = &subscriptions[i];
    b2a2:	4620      	mov	r0, r4
    b2a4:	e7fb      	b.n	b29e <gatt_sub_find_free+0x56>
    b2a6:	bf00      	nop
    b2a8:	200004e0 	.word	0x200004e0
    b2ac:	200004f0 	.word	0x200004f0

0000b2b0 <find_sc_cfg.part.11>:
static struct gatt_sc_cfg *find_sc_cfg(u8_t id, bt_addr_le_t *addr)
    b2b0:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    b2b2:	4c0e      	ldr	r4, [pc, #56]	; (b2ec <find_sc_cfg.part.11+0x3c>)
    b2b4:	7823      	ldrb	r3, [r4, #0]
    b2b6:	4283      	cmp	r3, r0
static struct gatt_sc_cfg *find_sc_cfg(u8_t id, bt_addr_le_t *addr)
    b2b8:	4605      	mov	r5, r0
    b2ba:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    b2bc:	d00a      	beq.n	b2d4 <find_sc_cfg.part.11+0x24>
    b2be:	7b23      	ldrb	r3, [r4, #12]
    b2c0:	42ab      	cmp	r3, r5
    b2c2:	d111      	bne.n	b2e8 <find_sc_cfg.part.11+0x38>
    b2c4:	2207      	movs	r2, #7
    b2c6:	4631      	mov	r1, r6
    b2c8:	4809      	ldr	r0, [pc, #36]	; (b2f0 <find_sc_cfg.part.11+0x40>)
    b2ca:	f014 f985 	bl	1f5d8 <memcmp>
    b2ce:	b958      	cbnz	r0, b2e8 <find_sc_cfg.part.11+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    b2d0:	2001      	movs	r0, #1
    b2d2:	e005      	b.n	b2e0 <find_sc_cfg.part.11+0x30>
    b2d4:	2207      	movs	r2, #7
    b2d6:	1c60      	adds	r0, r4, #1
    b2d8:	f014 f97e 	bl	1f5d8 <memcmp>
		if (id == sc_cfg[i].id &&
    b2dc:	2800      	cmp	r0, #0
    b2de:	d1ee      	bne.n	b2be <find_sc_cfg.part.11+0xe>
			return &sc_cfg[i];
    b2e0:	230c      	movs	r3, #12
    b2e2:	fb03 4000 	mla	r0, r3, r0, r4
    b2e6:	e000      	b.n	b2ea <find_sc_cfg.part.11+0x3a>
	return NULL;
    b2e8:	2000      	movs	r0, #0
}
    b2ea:	bd70      	pop	{r4, r5, r6, pc}
    b2ec:	2000603a 	.word	0x2000603a
    b2f0:	20006047 	.word	0x20006047

0000b2f4 <sc_save>:
{
    b2f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b2f8:	4680      	mov	r8, r0
    b2fa:	460f      	mov	r7, r1
    b2fc:	4616      	mov	r6, r2
    b2fe:	461d      	mov	r5, r3
    b300:	f7ff ffd6 	bl	b2b0 <find_sc_cfg.part.11>
	if (!cfg) {
    b304:	4604      	mov	r4, r0
    b306:	b9e8      	cbnz	r0, b344 <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    b308:	4669      	mov	r1, sp
    b30a:	9000      	str	r0, [sp, #0]
    b30c:	f8cd 0003 	str.w	r0, [sp, #3]
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    b310:	f7ff ffce 	bl	b2b0 <find_sc_cfg.part.11>
		if (!cfg) {
    b314:	4604      	mov	r4, r0
    b316:	b980      	cbnz	r0, b33a <sc_save+0x46>
			BT_ERR("unable to save SC: no cfg left");
    b318:	2301      	movs	r3, #1
    b31a:	f04f 0100 	mov.w	r1, #0
    b31e:	f363 0107 	bfi	r1, r3, #0, #8
    b322:	4a15      	ldr	r2, [pc, #84]	; (b378 <sc_save+0x84>)
    b324:	4b15      	ldr	r3, [pc, #84]	; (b37c <sc_save+0x88>)
    b326:	4816      	ldr	r0, [pc, #88]	; (b380 <sc_save+0x8c>)
    b328:	1a9b      	subs	r3, r3, r2
    b32a:	08db      	lsrs	r3, r3, #3
    b32c:	f363 118f 	bfi	r1, r3, #6, #10
    b330:	f013 fb90 	bl	1ea54 <log_0>
}
    b334:	b002      	add	sp, #8
    b336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    b33a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    b33e:	4639      	mov	r1, r7
    b340:	f015 fae0 	bl	20904 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    b344:	8922      	ldrh	r2, [r4, #8]
    b346:	8963      	ldrh	r3, [r4, #10]
    b348:	b96a      	cbnz	r2, b366 <sc_save+0x72>
    b34a:	b973      	cbnz	r3, b36a <sc_save+0x76>
		cfg->data.start = start;
    b34c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    b34e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    b350:	4621      	mov	r1, r4
    b352:	f811 0b01 	ldrb.w	r0, [r1], #1
    b356:	f014 fd66 	bl	1fe26 <bt_addr_le_is_bonded>
    b35a:	2800      	cmp	r0, #0
    b35c:	d0ea      	beq.n	b334 <sc_save+0x40>
		sc_store(cfg);
    b35e:	4620      	mov	r0, r4
    b360:	f7ff fcb4 	bl	accc <sc_store>
    b364:	e7e6      	b.n	b334 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
    b366:	4296      	cmp	r6, r2
    b368:	d302      	bcc.n	b370 <sc_save+0x7c>
    b36a:	429d      	cmp	r5, r3
    b36c:	d8ef      	bhi.n	b34e <sc_save+0x5a>
    b36e:	e7e1      	b.n	b334 <sc_save+0x40>
	if (*end < new_end) {
    b370:	429d      	cmp	r5, r3
		*start = new_start;
    b372:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    b374:	d9ec      	bls.n	b350 <sc_save+0x5c>
    b376:	e7ea      	b.n	b34e <sc_save+0x5a>
    b378:	00025a6c 	.word	0x00025a6c
    b37c:	00025b2c 	.word	0x00025b2c
    b380:	00028917 	.word	0x00028917

0000b384 <notify_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    b384:	6882      	ldr	r2, [r0, #8]
    b386:	4b33      	ldr	r3, [pc, #204]	; (b454 <notify_cb+0xd0>)
    b388:	429a      	cmp	r2, r3
{
    b38a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    b38e:	4607      	mov	r7, r0
    b390:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b392:	d003      	beq.n	b39c <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    b394:	2001      	movs	r0, #1
}
    b396:	b002      	add	sp, #8
    b398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ccc = attr->user_data;
    b39c:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    b39e:	4b2e      	ldr	r3, [pc, #184]	; (b458 <notify_cb+0xd4>)
    b3a0:	429e      	cmp	r6, r3
    b3a2:	d02f      	beq.n	b404 <notify_cb+0x80>
		if (cfg->value != data->type) {
    b3a4:	88a2      	ldrh	r2, [r4, #4]
    b3a6:	8933      	ldrh	r3, [r6, #8]
    b3a8:	429a      	cmp	r2, r3
    b3aa:	d1f3      	bne.n	b394 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    b3ac:	4631      	mov	r1, r6
    b3ae:	f811 0b01 	ldrb.w	r0, [r1], #1
    b3b2:	f7fe f83d 	bl	9430 <bt_conn_lookup_addr_le>
		if (!conn) {
    b3b6:	4605      	mov	r5, r0
    b3b8:	2800      	cmp	r0, #0
    b3ba:	d0eb      	beq.n	b394 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
    b3bc:	7b43      	ldrb	r3, [r0, #13]
    b3be:	2b06      	cmp	r3, #6
    b3c0:	d11d      	bne.n	b3fe <notify_cb+0x7a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    b3c2:	6973      	ldr	r3, [r6, #20]
    b3c4:	b9b3      	cbnz	r3, b3f4 <notify_cb+0x70>
		if (data->type == BT_GATT_CCC_INDICATE) {
    b3c6:	8a39      	ldrh	r1, [r7, #16]
    b3c8:	88a3      	ldrh	r3, [r4, #4]
    b3ca:	68a2      	ldr	r2, [r4, #8]
    b3cc:	3901      	subs	r1, #1
    b3ce:	2b02      	cmp	r3, #2
    b3d0:	b289      	uxth	r1, r1
			err = gatt_indicate(conn, attr->handle - 1,
    b3d2:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    b3d4:	d10b      	bne.n	b3ee <notify_cb+0x6a>
			err = gatt_indicate(conn, attr->handle - 1,
    b3d6:	f7ff fdaf 	bl	af38 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    b3da:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    b3dc:	4628      	mov	r0, r5
    b3de:	f014 fde2 	bl	1ffa6 <bt_conn_unref>
		if (err < 0) {
    b3e2:	2e00      	cmp	r6, #0
    b3e4:	f04f 0000 	mov.w	r0, #0
    b3e8:	dbd5      	blt.n	b396 <notify_cb+0x12>
		data->err = 0;
    b3ea:	6020      	str	r0, [r4, #0]
    b3ec:	e7d2      	b.n	b394 <notify_cb+0x10>
			err = gatt_notify(conn, attr->handle - 1,
    b3ee:	f7ff fd25 	bl	ae3c <gatt_notify>
    b3f2:	e7f2      	b.n	b3da <notify_cb+0x56>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    b3f4:	4639      	mov	r1, r7
    b3f6:	4798      	blx	r3
    b3f8:	2800      	cmp	r0, #0
    b3fa:	d1e4      	bne.n	b3c6 <notify_cb+0x42>
			bt_conn_unref(conn);
    b3fc:	4628      	mov	r0, r5
			bt_conn_unref(conn);
    b3fe:	f014 fdd2 	bl	1ffa6 <bt_conn_unref>
			continue;
    b402:	e7c7      	b.n	b394 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    b404:	f04f 0800 	mov.w	r8, #0
    b408:	4d14      	ldr	r5, [pc, #80]	; (b45c <notify_cb+0xd8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    b40a:	46c2      	mov	sl, r8
    b40c:	f105 0901 	add.w	r9, r5, #1
    b410:	2207      	movs	r2, #7
    b412:	4669      	mov	r1, sp
    b414:	4648      	mov	r0, r9
    b416:	f8cd a000 	str.w	sl, [sp]
    b41a:	f8cd a003 	str.w	sl, [sp, #3]
    b41e:	f014 f8db 	bl	1f5d8 <memcmp>
    b422:	b160      	cbz	r0, b43e <notify_cb+0xba>
			conn = bt_conn_lookup_state_le(&cfg->peer,
    b424:	2106      	movs	r1, #6
    b426:	4648      	mov	r0, r9
    b428:	f7fe f820 	bl	946c <bt_conn_lookup_state_le>
			if (!conn) {
    b42c:	b970      	cbnz	r0, b44c <notify_cb+0xc8>
				sc = (struct sc_data *)data->ind_params->data;
    b42e:	68a3      	ldr	r3, [r4, #8]
				sc_save(cfg->id, &cfg->peer,
    b430:	7828      	ldrb	r0, [r5, #0]
				sc = (struct sc_data *)data->ind_params->data;
    b432:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    b434:	4649      	mov	r1, r9
    b436:	8853      	ldrh	r3, [r2, #2]
    b438:	8812      	ldrh	r2, [r2, #0]
    b43a:	f7ff ff5b 	bl	b2f4 <sc_save>
				continue;
    b43e:	350c      	adds	r5, #12
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    b440:	f1b8 0f00 	cmp.w	r8, #0
    b444:	d1ae      	bne.n	b3a4 <notify_cb+0x20>
    b446:	f04f 0801 	mov.w	r8, #1
    b44a:	e7df      	b.n	b40c <notify_cb+0x88>
			bt_conn_unref(conn);
    b44c:	f014 fdab 	bl	1ffa6 <bt_conn_unref>
    b450:	e7f5      	b.n	b43e <notify_cb+0xba>
    b452:	bf00      	nop
    b454:	0000b0e5 	.word	0x0000b0e5
    b458:	2000dfd4 	.word	0x2000dfd4
    b45c:	2000603a 	.word	0x2000603a

0000b460 <sc_set>:
{
    b460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b464:	460e      	mov	r6, r1
    b466:	b087      	sub	sp, #28
    b468:	4690      	mov	r8, r2
    b46a:	4699      	mov	r9, r3
	if (!name) {
    b46c:	4605      	mov	r5, r0
    b46e:	b998      	cbnz	r0, b498 <sc_set+0x38>
		BT_ERR("Insufficient number of arguments");
    b470:	2301      	movs	r3, #1
    b472:	f04f 0100 	mov.w	r1, #0
    b476:	f363 0107 	bfi	r1, r3, #0, #8
    b47a:	4a3d      	ldr	r2, [pc, #244]	; (b570 <sc_set+0x110>)
    b47c:	4b3d      	ldr	r3, [pc, #244]	; (b574 <sc_set+0x114>)
    b47e:	483e      	ldr	r0, [pc, #248]	; (b578 <sc_set+0x118>)
    b480:	1a9b      	subs	r3, r3, r2
    b482:	08db      	lsrs	r3, r3, #3
    b484:	f363 118f 	bfi	r1, r3, #6, #10
    b488:	f013 fae4 	bl	1ea54 <log_0>
		return -EINVAL;
    b48c:	f06f 0415 	mvn.w	r4, #21
}
    b490:	4620      	mov	r0, r4
    b492:	b007      	add	sp, #28
    b494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    b498:	a902      	add	r1, sp, #8
    b49a:	f014 fb6b 	bl	1fb74 <bt_settings_decode_key>
	if (err) {
    b49e:	4604      	mov	r4, r0
    b4a0:	b198      	cbz	r0, b4ca <sc_set+0x6a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    b4a2:	2301      	movs	r3, #1
    b4a4:	f04f 0400 	mov.w	r4, #0
    b4a8:	4a31      	ldr	r2, [pc, #196]	; (b570 <sc_set+0x110>)
    b4aa:	f363 0407 	bfi	r4, r3, #0, #8
    b4ae:	4b31      	ldr	r3, [pc, #196]	; (b574 <sc_set+0x114>)
    b4b0:	1a9b      	subs	r3, r3, r2
    b4b2:	08db      	lsrs	r3, r3, #3
    b4b4:	4628      	mov	r0, r5
    b4b6:	f363 148f 	bfi	r4, r3, #6, #10
    b4ba:	f7f7 fdeb 	bl	3094 <log_strdup>
    b4be:	4622      	mov	r2, r4
    b4c0:	4601      	mov	r1, r0
    b4c2:	482e      	ldr	r0, [pc, #184]	; (b57c <sc_set+0x11c>)
    b4c4:	f013 fad3 	bl	1ea6e <log_1>
    b4c8:	e7e0      	b.n	b48c <sc_set+0x2c>
	settings_name_next(name, &next);
    b4ca:	a901      	add	r1, sp, #4
    b4cc:	4628      	mov	r0, r5
    b4ce:	f013 fd13 	bl	1eef8 <settings_name_next>
	if (!next) {
    b4d2:	9801      	ldr	r0, [sp, #4]
    b4d4:	b330      	cbz	r0, b524 <sc_set+0xc4>
		id = strtol(next, NULL, 10);
    b4d6:	220a      	movs	r2, #10
    b4d8:	4621      	mov	r1, r4
    b4da:	f013 ffba 	bl	1f452 <strtol>
    b4de:	b2c7      	uxtb	r7, r0
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    b4e0:	a902      	add	r1, sp, #8
    b4e2:	4638      	mov	r0, r7
    b4e4:	f7ff fee4 	bl	b2b0 <find_sc_cfg.part.11>
	if (!cfg && len_rd) {
    b4e8:	4605      	mov	r5, r0
    b4ea:	2800      	cmp	r0, #0
    b4ec:	d139      	bne.n	b562 <sc_set+0x102>
    b4ee:	2e00      	cmp	r6, #0
    b4f0:	d0ce      	beq.n	b490 <sc_set+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    b4f2:	a904      	add	r1, sp, #16
    b4f4:	9004      	str	r0, [sp, #16]
    b4f6:	f8cd 0013 	str.w	r0, [sp, #19]
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    b4fa:	f7ff fed9 	bl	b2b0 <find_sc_cfg.part.11>
		if (!cfg) {
    b4fe:	4605      	mov	r5, r0
    b500:	b990      	cbnz	r0, b528 <sc_set+0xc8>
			BT_ERR("Unable to restore SC: no cfg left");
    b502:	2301      	movs	r3, #1
    b504:	f04f 0100 	mov.w	r1, #0
    b508:	f363 0107 	bfi	r1, r3, #0, #8
    b50c:	4a18      	ldr	r2, [pc, #96]	; (b570 <sc_set+0x110>)
    b50e:	4b19      	ldr	r3, [pc, #100]	; (b574 <sc_set+0x114>)
    b510:	481b      	ldr	r0, [pc, #108]	; (b580 <sc_set+0x120>)
    b512:	1a9b      	subs	r3, r3, r2
    b514:	08db      	lsrs	r3, r3, #3
    b516:	f363 118f 	bfi	r1, r3, #6, #10
    b51a:	f013 fa9b 	bl	1ea54 <log_0>
			return -ENOMEM;
    b51e:	f06f 040b 	mvn.w	r4, #11
    b522:	e7b5      	b.n	b490 <sc_set+0x30>
		id = BT_ID_DEFAULT;
    b524:	4627      	mov	r7, r4
    b526:	e7db      	b.n	b4e0 <sc_set+0x80>
		cfg->id = id;
    b528:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    b52c:	a902      	add	r1, sp, #8
    b52e:	f015 f9e9 	bl	20904 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    b532:	f105 0108 	add.w	r1, r5, #8
    b536:	2204      	movs	r2, #4
    b538:	4648      	mov	r0, r9
    b53a:	47c0      	blx	r8
		if (len < 0) {
    b53c:	1e05      	subs	r5, r0, #0
    b53e:	daa7      	bge.n	b490 <sc_set+0x30>
			BT_ERR("Failed to decode value (err %d)", len);
    b540:	2301      	movs	r3, #1
    b542:	f04f 0200 	mov.w	r2, #0
    b546:	f363 0207 	bfi	r2, r3, #0, #8
    b54a:	4909      	ldr	r1, [pc, #36]	; (b570 <sc_set+0x110>)
    b54c:	4b09      	ldr	r3, [pc, #36]	; (b574 <sc_set+0x114>)
    b54e:	480d      	ldr	r0, [pc, #52]	; (b584 <sc_set+0x124>)
    b550:	1a5b      	subs	r3, r3, r1
    b552:	08db      	lsrs	r3, r3, #3
    b554:	f363 128f 	bfi	r2, r3, #6, #10
    b558:	4629      	mov	r1, r5
    b55a:	f013 fa88 	bl	1ea6e <log_1>
			return len;
    b55e:	462c      	mov	r4, r5
    b560:	e796      	b.n	b490 <sc_set+0x30>
	if (len_rd) {
    b562:	2e00      	cmp	r6, #0
    b564:	d1e5      	bne.n	b532 <sc_set+0xd2>
		memset(cfg, 0, sizeof(*cfg));
    b566:	220c      	movs	r2, #12
    b568:	4631      	mov	r1, r6
    b56a:	f014 f86f 	bl	1f64c <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    b56e:	e78f      	b.n	b490 <sc_set+0x30>
    b570:	00025a6c 	.word	0x00025a6c
    b574:	00025b2c 	.word	0x00025b2c
    b578:	00027772 	.word	0x00027772
    b57c:	00028936 	.word	0x00028936
    b580:	00028952 	.word	0x00028952
    b584:	0002880d 	.word	0x0002880d

0000b588 <find_cf_cfg.part.10>:
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
    b588:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (!conn) {
    b58a:	4605      	mov	r5, r0
    b58c:	4c13      	ldr	r4, [pc, #76]	; (b5dc <find_cf_cfg.part.10+0x54>)
    b58e:	b130      	cbz	r0, b59e <find_cf_cfg.part.10+0x16>
		} else if (!bt_conn_addr_le_cmp(conn, &cf_cfg[i].peer)) {
    b590:	1c61      	adds	r1, r4, #1
    b592:	f014 fcf0 	bl	1ff76 <bt_conn_addr_le_cmp>
    b596:	b9c0      	cbnz	r0, b5ca <find_cf_cfg.part.10+0x42>
			return &cf_cfg[i];
    b598:	4420      	add	r0, r4
}
    b59a:	b003      	add	sp, #12
    b59c:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cf_cfg[i].peer, BT_ADDR_LE_ANY)) {
    b59e:	9000      	str	r0, [sp, #0]
    b5a0:	2207      	movs	r2, #7
    b5a2:	f8cd 0003 	str.w	r0, [sp, #3]
    b5a6:	4669      	mov	r1, sp
    b5a8:	1c60      	adds	r0, r4, #1
    b5aa:	f014 f815 	bl	1f5d8 <memcmp>
    b5ae:	2800      	cmp	r0, #0
    b5b0:	d0f2      	beq.n	b598 <find_cf_cfg.part.10+0x10>
    b5b2:	2207      	movs	r2, #7
    b5b4:	4669      	mov	r1, sp
    b5b6:	f104 0011 	add.w	r0, r4, #17
    b5ba:	9500      	str	r5, [sp, #0]
    b5bc:	f8cd 5003 	str.w	r5, [sp, #3]
    b5c0:	f014 f80a 	bl	1f5d8 <memcmp>
    b5c4:	e006      	b.n	b5d4 <find_cf_cfg.part.10+0x4c>
	return NULL;
    b5c6:	2000      	movs	r0, #0
    b5c8:	e7e7      	b.n	b59a <find_cf_cfg.part.10+0x12>
		} else if (!bt_conn_addr_le_cmp(conn, &cf_cfg[i].peer)) {
    b5ca:	f104 0111 	add.w	r1, r4, #17
    b5ce:	4628      	mov	r0, r5
    b5d0:	f014 fcd1 	bl	1ff76 <bt_conn_addr_le_cmp>
			if (!bt_addr_le_cmp(&cf_cfg[i].peer, BT_ADDR_LE_ANY)) {
    b5d4:	2800      	cmp	r0, #0
    b5d6:	d1f6      	bne.n	b5c6 <find_cf_cfg.part.10+0x3e>
		} else if (!bt_conn_addr_le_cmp(conn, &cf_cfg[i].peer)) {
    b5d8:	2010      	movs	r0, #16
    b5da:	e7dd      	b.n	b598 <find_cf_cfg.part.10+0x10>
    b5dc:	2000044c 	.word	0x2000044c

0000b5e0 <cf_write>:
{
    b5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5e4:	4690      	mov	r8, r2
    b5e6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    b5ea:	2a01      	cmp	r2, #1
{
    b5ec:	4606      	mov	r6, r0
    b5ee:	461f      	mov	r7, r3
	if (offset > sizeof(cfg->data)) {
    b5f0:	d844      	bhi.n	b67c <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
    b5f2:	441a      	add	r2, r3
    b5f4:	2a01      	cmp	r2, #1
    b5f6:	461d      	mov	r5, r3
    b5f8:	dc43      	bgt.n	b682 <cf_write+0xa2>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    b5fa:	f7ff ffc5 	bl	b588 <find_cf_cfg.part.10>
	if (!cfg) {
    b5fe:	4604      	mov	r4, r0
    b600:	b9b0      	cbnz	r0, b630 <cf_write+0x50>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    b602:	f7ff ffc1 	bl	b588 <find_cf_cfg.part.10>
	if (!cfg) {
    b606:	4604      	mov	r4, r0
    b608:	b990      	cbnz	r0, b630 <cf_write+0x50>
		BT_WARN("No space to store Client Supported Features");
    b60a:	2302      	movs	r3, #2
    b60c:	f04f 0100 	mov.w	r1, #0
    b610:	f363 0107 	bfi	r1, r3, #0, #8
    b614:	4a1c      	ldr	r2, [pc, #112]	; (b688 <cf_write+0xa8>)
    b616:	4b1d      	ldr	r3, [pc, #116]	; (b68c <cf_write+0xac>)
    b618:	481d      	ldr	r0, [pc, #116]	; (b690 <cf_write+0xb0>)
    b61a:	1a9b      	subs	r3, r3, r2
    b61c:	08db      	lsrs	r3, r3, #3
    b61e:	f363 118f 	bfi	r1, r3, #6, #10
    b622:	f013 fa17 	bl	1ea54 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    b626:	f06f 0510 	mvn.w	r5, #16
}
    b62a:	4628      	mov	r0, r5
    b62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i < len && i < last_byte; i++) {
    b630:	2300      	movs	r3, #0
    b632:	429f      	cmp	r7, r3
    b634:	d915      	bls.n	b662 <cf_write+0x82>
    b636:	b13b      	cbz	r3, b648 <cf_write+0x68>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    b638:	f898 3000 	ldrb.w	r3, [r8]
    b63c:	7a22      	ldrb	r2, [r4, #8]
    b63e:	f003 0301 	and.w	r3, r3, #1
    b642:	4313      	orrs	r3, r2
    b644:	7223      	strb	r3, [r4, #8]
		BT_DBG("byte %u: data 0x%02x value 0x%02x", i, cfg->data[i],
    b646:	e00e      	b.n	b666 <cf_write+0x86>
    b648:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    b64a:	f898 2000 	ldrb.w	r2, [r8]
    b64e:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    b650:	07d0      	lsls	r0, r2, #31
	for (i = 0U; i < len && i < last_byte; i++) {
    b652:	f04f 0301 	mov.w	r3, #1
			if ((BIT(bit) & chg_bits) &&
    b656:	d5ec      	bpl.n	b632 <cf_write+0x52>
    b658:	07ca      	lsls	r2, r1, #31
    b65a:	d5ea      	bpl.n	b632 <cf_write+0x52>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    b65c:	f06f 0512 	mvn.w	r5, #18
    b660:	e7e3      	b.n	b62a <cf_write+0x4a>
	for (i = 0U; i < len && i < last_byte; i++) {
    b662:	2f00      	cmp	r7, #0
    b664:	d1e8      	bne.n	b638 <cf_write+0x58>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b666:	f106 0170 	add.w	r1, r6, #112	; 0x70
    b66a:	1c60      	adds	r0, r4, #1
    b66c:	f015 f94a 	bl	20904 <bt_addr_le_copy>
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    b670:	2100      	movs	r1, #0
    b672:	f104 000c 	add.w	r0, r4, #12
    b676:	f015 fa52 	bl	20b1e <atomic_set_bit>
	return len;
    b67a:	e7d6      	b.n	b62a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b67c:	f06f 0506 	mvn.w	r5, #6
    b680:	e7d3      	b.n	b62a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    b682:	f06f 050c 	mvn.w	r5, #12
    b686:	e7d0      	b.n	b62a <cf_write+0x4a>
    b688:	00025a6c 	.word	0x00025a6c
    b68c:	00025b2c 	.word	0x00025b2c
    b690:	000287af 	.word	0x000287af

0000b694 <sc_indicate_rsp>:
{
    b694:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b696:	f06f 0102 	mvn.w	r1, #2
    b69a:	4604      	mov	r4, r0
    b69c:	480d      	ldr	r0, [pc, #52]	; (b6d4 <sc_indicate_rsp+0x40>)
    b69e:	f015 f9c0 	bl	20a22 <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    b6a2:	2100      	movs	r1, #0
    b6a4:	480b      	ldr	r0, [pc, #44]	; (b6d4 <sc_indicate_rsp+0x40>)
    b6a6:	f015 f9b3 	bl	20a10 <atomic_test_bit>
    b6aa:	b120      	cbz	r0, b6b6 <sc_indicate_rsp+0x22>
    b6ac:	2200      	movs	r2, #0
    b6ae:	490a      	ldr	r1, [pc, #40]	; (b6d8 <sc_indicate_rsp+0x44>)
    b6b0:	480a      	ldr	r0, [pc, #40]	; (b6dc <sc_indicate_rsp+0x48>)
    b6b2:	f011 fa73 	bl	1cb9c <k_delayed_work_submit_to_queue>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    b6b6:	4620      	mov	r0, r4
    b6b8:	f7ff ff66 	bl	b588 <find_cf_cfg.part.10>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    b6bc:	b140      	cbz	r0, b6d0 <sc_indicate_rsp+0x3c>
    b6be:	7a03      	ldrb	r3, [r0, #8]
    b6c0:	07db      	lsls	r3, r3, #31
    b6c2:	d505      	bpl.n	b6d0 <sc_indicate_rsp+0x3c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    b6c4:	2100      	movs	r1, #0
    b6c6:	300c      	adds	r0, #12
}
    b6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    b6cc:	f015 ba27 	b.w	20b1e <atomic_set_bit>
}
    b6d0:	bd10      	pop	{r4, pc}
    b6d2:	bf00      	nop
    b6d4:	200004c4 	.word	0x200004c4
    b6d8:	200004a4 	.word	0x200004a4
    b6dc:	20005fa0 	.word	0x20005fa0

0000b6e0 <cf_set>:
{
    b6e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b6e4:	460f      	mov	r7, r1
    b6e6:	4615      	mov	r5, r2
    b6e8:	461e      	mov	r6, r3
	if (!name) {
    b6ea:	4680      	mov	r8, r0
    b6ec:	b998      	cbnz	r0, b716 <cf_set+0x36>
		BT_ERR("Insufficient number of arguments");
    b6ee:	2301      	movs	r3, #1
    b6f0:	f04f 0100 	mov.w	r1, #0
    b6f4:	f363 0107 	bfi	r1, r3, #0, #8
    b6f8:	4a2c      	ldr	r2, [pc, #176]	; (b7ac <cf_set+0xcc>)
    b6fa:	4b2d      	ldr	r3, [pc, #180]	; (b7b0 <cf_set+0xd0>)
    b6fc:	482d      	ldr	r0, [pc, #180]	; (b7b4 <cf_set+0xd4>)
    b6fe:	1a9b      	subs	r3, r3, r2
    b700:	08db      	lsrs	r3, r3, #3
    b702:	f363 118f 	bfi	r1, r3, #6, #10
    b706:	f013 f9a5 	bl	1ea54 <log_0>
		return -EINVAL;
    b70a:	f06f 0415 	mvn.w	r4, #21
}
    b70e:	4620      	mov	r0, r4
    b710:	b002      	add	sp, #8
    b712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
    b716:	4669      	mov	r1, sp
    b718:	f014 fa2c 	bl	1fb74 <bt_settings_decode_key>
	if (err) {
    b71c:	4604      	mov	r4, r0
    b71e:	b198      	cbz	r0, b748 <cf_set+0x68>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    b720:	2301      	movs	r3, #1
    b722:	f04f 0400 	mov.w	r4, #0
    b726:	4a21      	ldr	r2, [pc, #132]	; (b7ac <cf_set+0xcc>)
    b728:	f363 0407 	bfi	r4, r3, #0, #8
    b72c:	4b20      	ldr	r3, [pc, #128]	; (b7b0 <cf_set+0xd0>)
    b72e:	1a9b      	subs	r3, r3, r2
    b730:	08db      	lsrs	r3, r3, #3
    b732:	4640      	mov	r0, r8
    b734:	f363 148f 	bfi	r4, r3, #6, #10
    b738:	f7f7 fcac 	bl	3094 <log_strdup>
    b73c:	4622      	mov	r2, r4
    b73e:	4601      	mov	r1, r0
    b740:	481d      	ldr	r0, [pc, #116]	; (b7b8 <cf_set+0xd8>)
    b742:	f013 f994 	bl	1ea6e <log_1>
    b746:	e7e0      	b.n	b70a <cf_set+0x2a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    b748:	4668      	mov	r0, sp
    b74a:	f7ff fcb1 	bl	b0b0 <find_cf_cfg_by_addr.part.14>
	if (!cfg) {
    b74e:	4601      	mov	r1, r0
    b750:	b980      	cbnz	r0, b774 <cf_set+0x94>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    b752:	f7ff ff19 	bl	b588 <find_cf_cfg.part.10>
		if (!cfg) {
    b756:	4601      	mov	r1, r0
    b758:	b960      	cbnz	r0, b774 <cf_set+0x94>
			BT_ERR("Unable to restore CF: no cfg left");
    b75a:	2301      	movs	r3, #1
    b75c:	f363 0107 	bfi	r1, r3, #0, #8
    b760:	4a12      	ldr	r2, [pc, #72]	; (b7ac <cf_set+0xcc>)
    b762:	4b13      	ldr	r3, [pc, #76]	; (b7b0 <cf_set+0xd0>)
    b764:	4815      	ldr	r0, [pc, #84]	; (b7bc <cf_set+0xdc>)
    b766:	1a9b      	subs	r3, r3, r2
    b768:	08db      	lsrs	r3, r3, #3
    b76a:	f363 118f 	bfi	r1, r3, #6, #10
    b76e:	f013 f971 	bl	1ea54 <log_0>
			return 0;
    b772:	e7cc      	b.n	b70e <cf_set+0x2e>
	if (len_rd) {
    b774:	b1b7      	cbz	r7, b7a4 <cf_set+0xc4>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    b776:	2201      	movs	r2, #1
    b778:	3108      	adds	r1, #8
    b77a:	4630      	mov	r0, r6
    b77c:	47a8      	blx	r5
		if (len < 0) {
    b77e:	1e05      	subs	r5, r0, #0
    b780:	dac5      	bge.n	b70e <cf_set+0x2e>
			BT_ERR("Failed to decode value (err %d)", len);
    b782:	2301      	movs	r3, #1
    b784:	f04f 0200 	mov.w	r2, #0
    b788:	f363 0207 	bfi	r2, r3, #0, #8
    b78c:	4907      	ldr	r1, [pc, #28]	; (b7ac <cf_set+0xcc>)
    b78e:	4b08      	ldr	r3, [pc, #32]	; (b7b0 <cf_set+0xd0>)
    b790:	480b      	ldr	r0, [pc, #44]	; (b7c0 <cf_set+0xe0>)
    b792:	1a5b      	subs	r3, r3, r1
    b794:	08db      	lsrs	r3, r3, #3
    b796:	f363 128f 	bfi	r2, r3, #6, #10
    b79a:	4629      	mov	r1, r5
    b79c:	f013 f967 	bl	1ea6e <log_1>
			return len;
    b7a0:	462c      	mov	r4, r5
    b7a2:	e7b4      	b.n	b70e <cf_set+0x2e>
		clear_cf_cfg(cfg);
    b7a4:	4608      	mov	r0, r1
    b7a6:	f015 f971 	bl	20a8c <clear_cf_cfg>
    b7aa:	e7b0      	b.n	b70e <cf_set+0x2e>
    b7ac:	00025a6c 	.word	0x00025a6c
    b7b0:	00025b2c 	.word	0x00025b2c
    b7b4:	00027772 	.word	0x00027772
    b7b8:	00028936 	.word	0x00028936
    b7bc:	0002878d 	.word	0x0002878d
    b7c0:	0002880d 	.word	0x0002880d

0000b7c4 <read_ppcp>:
{
    b7c4:	b513      	push	{r0, r1, r4, lr}
    b7c6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    b7ca:	4c0b      	ldr	r4, [pc, #44]	; (b7f8 <read_ppcp+0x34>)
{
    b7cc:	4610      	mov	r0, r2
	if (offset > value_len) {
    b7ce:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    b7d0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    b7d4:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    b7d8:	d80b      	bhi.n	b7f2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    b7da:	f1c1 0408 	rsb	r4, r1, #8
    b7de:	429c      	cmp	r4, r3
    b7e0:	bfa8      	it	ge
    b7e2:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    b7e4:	4622      	mov	r2, r4
    b7e6:	4469      	add	r1, sp
    b7e8:	f013 ff06 	bl	1f5f8 <memcpy>
}
    b7ec:	4620      	mov	r0, r4
    b7ee:	b002      	add	sp, #8
    b7f0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b7f2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    b7f6:	e7f9      	b.n	b7ec <read_ppcp+0x28>
    b7f8:	00280018 	.word	0x00280018

0000b7fc <bt_gatt_init>:
{
    b7fc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b7fe:	4b1c      	ldr	r3, [pc, #112]	; (b870 <bt_gatt_init+0x74>)
    b800:	f3bf 8f5b 	dmb	ish
    b804:	2201      	movs	r2, #1
    b806:	e853 1f00 	ldrex	r1, [r3]
    b80a:	2900      	cmp	r1, #0
    b80c:	d103      	bne.n	b816 <bt_gatt_init+0x1a>
    b80e:	e843 2000 	strex	r0, r2, [r3]
    b812:	2800      	cmp	r0, #0
    b814:	d1f7      	bne.n	b806 <bt_gatt_init+0xa>
    b816:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    b81a:	d122      	bne.n	b862 <bt_gatt_init+0x66>
    b81c:	4a15      	ldr	r2, [pc, #84]	; (b874 <bt_gatt_init+0x78>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    b81e:	4916      	ldr	r1, [pc, #88]	; (b878 <bt_gatt_init+0x7c>)
    b820:	8813      	ldrh	r3, [r2, #0]
    b822:	4c16      	ldr	r4, [pc, #88]	; (b87c <bt_gatt_init+0x80>)
	if (!atomic_cas(&init, 0, 1)) {
    b824:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    b826:	42a1      	cmp	r1, r4
    b828:	d31c      	bcc.n	b864 <bt_gatt_init+0x68>
    b82a:	b100      	cbz	r0, b82e <bt_gatt_init+0x32>
    b82c:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    b82e:	4914      	ldr	r1, [pc, #80]	; (b880 <bt_gatt_init+0x84>)
    b830:	4814      	ldr	r0, [pc, #80]	; (b884 <bt_gatt_init+0x88>)
    b832:	f019 fe1a 	bl	2546a <k_delayed_work_init>
    b836:	220a      	movs	r2, #10
    b838:	4912      	ldr	r1, [pc, #72]	; (b884 <bt_gatt_init+0x88>)
    b83a:	4813      	ldr	r0, [pc, #76]	; (b888 <bt_gatt_init+0x8c>)
    b83c:	f011 f9ae 	bl	1cb9c <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
    b840:	4912      	ldr	r1, [pc, #72]	; (b88c <bt_gatt_init+0x90>)
    b842:	4813      	ldr	r0, [pc, #76]	; (b890 <bt_gatt_init+0x94>)
    b844:	f019 fe11 	bl	2546a <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b848:	f3bf 8f5b 	dmb	ish
    b84c:	4b11      	ldr	r3, [pc, #68]	; (b894 <bt_gatt_init+0x98>)
    b84e:	e853 2f00 	ldrex	r2, [r3]
    b852:	f042 0202 	orr.w	r2, r2, #2
    b856:	e843 2100 	strex	r1, r2, [r3]
    b85a:	2900      	cmp	r1, #0
    b85c:	d1f7      	bne.n	b84e <bt_gatt_init+0x52>
    b85e:	f3bf 8f5b 	dmb	ish
}
    b862:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    b864:	6848      	ldr	r0, [r1, #4]
    b866:	4403      	add	r3, r0
    b868:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    b86a:	3108      	adds	r1, #8
    b86c:	2001      	movs	r0, #1
    b86e:	e7da      	b.n	b826 <bt_gatt_init+0x2a>
    b870:	200004c8 	.word	0x200004c8
    b874:	20006038 	.word	0x20006038
    b878:	000259e0 	.word	0x000259e0
    b87c:	00025a08 	.word	0x00025a08
    b880:	00020e0d 	.word	0x00020e0d
    b884:	2000046c 	.word	0x2000046c
    b888:	20005fa0 	.word	0x20005fa0
    b88c:	0000bd15 	.word	0x0000bd15
    b890:	200004a4 	.word	0x200004a4
    b894:	200004c4 	.word	0x200004c4

0000b898 <bt_gatt_attr_value_handle>:
{
    b898:	b508      	push	{r3, lr}
	if ((attr != NULL)
    b89a:	b188      	cbz	r0, b8c0 <bt_gatt_attr_value_handle+0x28>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    b89c:	6841      	ldr	r1, [r0, #4]
    b89e:	4b09      	ldr	r3, [pc, #36]	; (b8c4 <bt_gatt_attr_value_handle+0x2c>)
    b8a0:	4299      	cmp	r1, r3
    b8a2:	d10d      	bne.n	b8c0 <bt_gatt_attr_value_handle+0x28>
		handle = chrc->value_handle;
    b8a4:	68c3      	ldr	r3, [r0, #12]
    b8a6:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    b8a8:	b91b      	cbnz	r3, b8b2 <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    b8aa:	8a03      	ldrh	r3, [r0, #16]
    b8ac:	b11b      	cbz	r3, b8b6 <bt_gatt_attr_value_handle+0x1e>
    b8ae:	3301      	adds	r3, #1
    b8b0:	b29b      	uxth	r3, r3
}
    b8b2:	4618      	mov	r0, r3
    b8b4:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    b8b6:	f7ff f99d 	bl	abf4 <find_static_attr>
    b8ba:	3001      	adds	r0, #1
    b8bc:	b283      	uxth	r3, r0
	return handle;
    b8be:	e7f8      	b.n	b8b2 <bt_gatt_attr_value_handle+0x1a>
	u16_t handle = 0;
    b8c0:	2300      	movs	r3, #0
    b8c2:	e7f6      	b.n	b8b2 <bt_gatt_attr_value_handle+0x1a>
    b8c4:	00020d95 	.word	0x00020d95

0000b8c8 <bt_gatt_foreach_attr_type>:
{
    b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8cc:	b089      	sub	sp, #36	; 0x24
    b8ce:	4699      	mov	r9, r3
    b8d0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    b8d4:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    b8d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b8da:	2d00      	cmp	r5, #0
    b8dc:	bf08      	it	eq
    b8de:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    b8e0:	4b25      	ldr	r3, [pc, #148]	; (b978 <bt_gatt_foreach_attr_type+0xb0>)
    b8e2:	881b      	ldrh	r3, [r3, #0]
    b8e4:	4283      	cmp	r3, r0
{
    b8e6:	4607      	mov	r7, r0
    b8e8:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    b8ea:	d33c      	bcc.n	b966 <bt_gatt_foreach_attr_type+0x9e>
    b8ec:	f8df a090 	ldr.w	sl, [pc, #144]	; b980 <bt_gatt_foreach_attr_type+0xb8>
		u16_t handle = 1;
    b8f0:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    b8f2:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b8f6:	4b21      	ldr	r3, [pc, #132]	; (b97c <bt_gatt_foreach_attr_type+0xb4>)
    b8f8:	f1aa 0208 	sub.w	r2, sl, #8
    b8fc:	429a      	cmp	r2, r3
    b8fe:	d232      	bcs.n	b966 <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    b900:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    b904:	4422      	add	r2, r4
    b906:	42ba      	cmp	r2, r7
    b908:	d234      	bcs.n	b974 <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    b90a:	b294      	uxth	r4, r2
				continue;
    b90c:	f10a 0a08 	add.w	sl, sl, #8
    b910:	e7f1      	b.n	b8f6 <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    b912:	9903      	ldr	r1, [sp, #12]
    b914:	4640      	mov	r0, r8
    b916:	f014 f951 	bl	1fbbc <bt_uuid_cmp>
    b91a:	b1c0      	cbz	r0, b94e <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    b91c:	3401      	adds	r4, #1
    b91e:	3601      	adds	r6, #1
    b920:	b2a4      	uxth	r4, r4
    b922:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    b926:	42b2      	cmp	r2, r6
    b928:	d9f0      	bls.n	b90c <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    b92a:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    b92e:	2214      	movs	r2, #20
    b930:	fb0b 1106 	mla	r1, fp, r6, r1
    b934:	a803      	add	r0, sp, #12
    b936:	f013 fe5f 	bl	1f5f8 <memcpy>
	if (attr->handle > end_handle) {
    b93a:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    b93c:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    b940:	429c      	cmp	r4, r3
    b942:	d810      	bhi.n	b966 <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    b944:	42bc      	cmp	r4, r7
    b946:	d3e9      	bcc.n	b91c <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    b948:	f1b8 0f00 	cmp.w	r8, #0
    b94c:	d1e1      	bne.n	b912 <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    b94e:	f1b9 0f00 	cmp.w	r9, #0
    b952:	d10b      	bne.n	b96c <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    b954:	3d01      	subs	r5, #1
    b956:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    b958:	9914      	ldr	r1, [sp, #80]	; 0x50
    b95a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b95c:	a803      	add	r0, sp, #12
    b95e:	4798      	blx	r3
	if (!*num_matches) {
    b960:	b10d      	cbz	r5, b966 <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    b962:	2800      	cmp	r0, #0
    b964:	d1da      	bne.n	b91c <bt_gatt_foreach_attr_type+0x54>
}
    b966:	b009      	add	sp, #36	; 0x24
    b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    b96c:	9a06      	ldr	r2, [sp, #24]
    b96e:	4591      	cmp	r9, r2
    b970:	d1d4      	bne.n	b91c <bt_gatt_foreach_attr_type+0x54>
    b972:	e7ef      	b.n	b954 <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    b974:	2600      	movs	r6, #0
    b976:	e7d4      	b.n	b922 <bt_gatt_foreach_attr_type+0x5a>
    b978:	20006038 	.word	0x20006038
    b97c:	00025a08 	.word	0x00025a08
    b980:	000259e8 	.word	0x000259e8

0000b984 <db_hash_gen>:
{
    b984:	b530      	push	{r4, r5, lr}
    b986:	b0c9      	sub	sp, #292	; 0x124
	u8_t key[16] = {};
    b988:	2210      	movs	r2, #16
    b98a:	2100      	movs	r1, #0
{
    b98c:	4604      	mov	r4, r0
	u8_t key[16] = {};
    b98e:	4668      	mov	r0, sp
    b990:	f013 fe5c 	bl	1f64c <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    b994:	aa1c      	add	r2, sp, #112	; 0x70
    b996:	4669      	mov	r1, sp
    b998:	a804      	add	r0, sp, #16
    b99a:	f012 ff4d 	bl	1e838 <tc_cmac_setup>
    b99e:	b978      	cbnz	r0, b9c0 <db_hash_gen+0x3c>
		BT_ERR("Unable to setup AES CMAC");
    b9a0:	2301      	movs	r3, #1
    b9a2:	f04f 0100 	mov.w	r1, #0
    b9a6:	f363 0107 	bfi	r1, r3, #0, #8
    b9aa:	4a1a      	ldr	r2, [pc, #104]	; (ba14 <db_hash_gen+0x90>)
    b9ac:	4b1a      	ldr	r3, [pc, #104]	; (ba18 <db_hash_gen+0x94>)
    b9ae:	481b      	ldr	r0, [pc, #108]	; (ba1c <db_hash_gen+0x98>)
    b9b0:	1a9b      	subs	r3, r3, r2
    b9b2:	08db      	lsrs	r3, r3, #3
    b9b4:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to calculate hash");
    b9b8:	f013 f84c 	bl	1ea54 <log_0>
}
    b9bc:	b049      	add	sp, #292	; 0x124
    b9be:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    b9c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b9c4:	2001      	movs	r0, #1
    b9c6:	ab04      	add	r3, sp, #16
    b9c8:	4a15      	ldr	r2, [pc, #84]	; (ba20 <db_hash_gen+0x9c>)
    b9ca:	f015 fa14 	bl	20df6 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    b9ce:	a904      	add	r1, sp, #16
    b9d0:	4814      	ldr	r0, [pc, #80]	; (ba24 <db_hash_gen+0xa0>)
    b9d2:	f012 ffc7 	bl	1e964 <tc_cmac_final>
    b9d6:	b960      	cbnz	r0, b9f2 <db_hash_gen+0x6e>
		BT_ERR("Unable to calculate hash");
    b9d8:	2301      	movs	r3, #1
    b9da:	f04f 0100 	mov.w	r1, #0
    b9de:	f363 0107 	bfi	r1, r3, #0, #8
    b9e2:	4a0c      	ldr	r2, [pc, #48]	; (ba14 <db_hash_gen+0x90>)
    b9e4:	4b0c      	ldr	r3, [pc, #48]	; (ba18 <db_hash_gen+0x94>)
    b9e6:	4810      	ldr	r0, [pc, #64]	; (ba28 <db_hash_gen+0xa4>)
    b9e8:	1a9b      	subs	r3, r3, r2
    b9ea:	08db      	lsrs	r3, r3, #3
    b9ec:	f363 118f 	bfi	r1, r3, #6, #10
    b9f0:	e7e2      	b.n	b9b8 <db_hash_gen+0x34>
    b9f2:	4b0c      	ldr	r3, [pc, #48]	; (ba24 <db_hash_gen+0xa0>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    b9f4:	2208      	movs	r2, #8
    b9f6:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    b9fa:	7818      	ldrb	r0, [r3, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b9fc:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    ba00:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    ba04:	3a01      	subs	r2, #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    ba06:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    ba08:	d1f7      	bne.n	b9fa <db_hash_gen+0x76>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    ba0a:	2c00      	cmp	r4, #0
    ba0c:	d0d6      	beq.n	b9bc <db_hash_gen+0x38>
		db_hash_store();
    ba0e:	f7ff f915 	bl	ac3c <db_hash_store>
    ba12:	e7d3      	b.n	b9bc <db_hash_gen+0x38>
    ba14:	00025a6c 	.word	0x00025a6c
    ba18:	00025b2c 	.word	0x00025b2c
    ba1c:	000287db 	.word	0x000287db
    ba20:	00020965 	.word	0x00020965
    ba24:	2000a521 	.word	0x2000a521
    ba28:	000287f4 	.word	0x000287f4

0000ba2c <db_hash_commit>:

static int db_hash_commit(void)
{
    ba2c:	b508      	push	{r3, lr}
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
    ba2e:	4828      	ldr	r0, [pc, #160]	; (bad0 <db_hash_commit+0xa4>)
    ba30:	f011 f974 	bl	1cd1c <z_timeout_remaining>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    ba34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ba38:	fb80 0103 	smull	r0, r1, r0, r3
    ba3c:	0bc3      	lsrs	r3, r0, #15
	/* Stop work and generate the hash */
	if (k_delayed_work_remaining_get(&db_hash_work)) {
    ba3e:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    ba42:	d005      	beq.n	ba50 <db_hash_commit+0x24>
		k_delayed_work_cancel(&db_hash_work);
    ba44:	4823      	ldr	r0, [pc, #140]	; (bad4 <db_hash_commit+0xa8>)
    ba46:	f019 fd18 	bl	2547a <k_delayed_work_cancel>
		db_hash_gen(false);
    ba4a:	2000      	movs	r0, #0
    ba4c:	f7ff ff9a 	bl	b984 <db_hash_gen>
	}

	/* Check if hash matches then skip SC update */
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    ba50:	2210      	movs	r2, #16
    ba52:	4921      	ldr	r1, [pc, #132]	; (bad8 <db_hash_commit+0xac>)
    ba54:	4821      	ldr	r0, [pc, #132]	; (badc <db_hash_commit+0xb0>)
    ba56:	f013 fdbf 	bl	1f5d8 <memcmp>
    ba5a:	b920      	cbnz	r0, ba66 <db_hash_commit+0x3a>
		BT_DBG("Database Hash matches");
		k_delayed_work_cancel(&gatt_sc.work);
    ba5c:	4820      	ldr	r0, [pc, #128]	; (bae0 <db_hash_commit+0xb4>)
    ba5e:	f019 fd0c 	bl	2547a <k_delayed_work_cancel>

	/* Hash did not match overwrite with current hash */
	db_hash_store();

	return 0;
}
    ba62:	2000      	movs	r0, #0
    ba64:	bd08      	pop	{r3, pc}
    ba66:	4a1f      	ldr	r2, [pc, #124]	; (bae4 <db_hash_commit+0xb8>)
    ba68:	f3bf 8f5b 	dmb	ish
    ba6c:	f102 0338 	add.w	r3, r2, #56	; 0x38
    ba70:	e853 1f00 	ldrex	r1, [r3]
    ba74:	f041 0001 	orr.w	r0, r1, #1
    ba78:	e843 0c00 	strex	ip, r0, [r3]
    ba7c:	f1bc 0f00 	cmp.w	ip, #0
    ba80:	d1f6      	bne.n	ba70 <db_hash_commit+0x44>
    ba82:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    ba86:	f011 0f01 	tst.w	r1, #1
    ba8a:	4613      	mov	r3, r2
    ba8c:	d10e      	bne.n	baac <db_hash_commit+0x80>
		gatt_sc.start = start;
    ba8e:	4b16      	ldr	r3, [pc, #88]	; (bae8 <db_hash_commit+0xbc>)
    ba90:	6153      	str	r3, [r2, #20]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    ba92:	2101      	movs	r1, #1
    ba94:	4815      	ldr	r0, [pc, #84]	; (baec <db_hash_commit+0xc0>)
    ba96:	f014 ffbb 	bl	20a10 <atomic_test_bit>
    ba9a:	b920      	cbnz	r0, baa6 <db_hash_commit+0x7a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ba9c:	220a      	movs	r2, #10
    ba9e:	4910      	ldr	r1, [pc, #64]	; (bae0 <db_hash_commit+0xb4>)
    baa0:	4813      	ldr	r0, [pc, #76]	; (baf0 <db_hash_commit+0xc4>)
    baa2:	f011 f87b 	bl	1cb9c <k_delayed_work_submit_to_queue>
	db_hash_store();
    baa6:	f7ff f8c9 	bl	ac3c <db_hash_store>
	return 0;
    baaa:	e7da      	b.n	ba62 <db_hash_commit+0x36>
	if (new_start >= *start && new_end <= *end) {
    baac:	8ad1      	ldrh	r1, [r2, #22]
    baae:	8a92      	ldrh	r2, [r2, #20]
    bab0:	2a01      	cmp	r2, #1
    bab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bab6:	d805      	bhi.n	bac4 <db_hash_commit+0x98>
    bab8:	4291      	cmp	r1, r2
    baba:	d0f4      	beq.n	baa6 <db_hash_commit+0x7a>
		*end = new_end;
    babc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bac0:	82da      	strh	r2, [r3, #22]
    bac2:	e7e6      	b.n	ba92 <db_hash_commit+0x66>
		*start = new_start;
    bac4:	2001      	movs	r0, #1
	if (*end < new_end) {
    bac6:	4291      	cmp	r1, r2
		*start = new_start;
    bac8:	8298      	strh	r0, [r3, #20]
	if (*end < new_end) {
    baca:	d0e2      	beq.n	ba92 <db_hash_commit+0x66>
    bacc:	e7f6      	b.n	babc <db_hash_commit+0x90>
    bace:	bf00      	nop
    bad0:	20000478 	.word	0x20000478
    bad4:	2000046c 	.word	0x2000046c
    bad8:	2000a521 	.word	0x2000a521
    badc:	2000a531 	.word	0x2000a531
    bae0:	200004a4 	.word	0x200004a4
    bae4:	2000048c 	.word	0x2000048c
    bae8:	ffff0001 	.word	0xffff0001
    baec:	200004c4 	.word	0x200004c4
    baf0:	20005fa0 	.word	0x20005fa0

0000baf4 <ccc_set_direct>:
{
    baf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    baf8:	b0b9      	sub	sp, #228	; 0xe4
    bafa:	4689      	mov	r9, r1
    bafc:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    bafe:	4940      	ldr	r1, [pc, #256]	; (bc00 <ccc_set_direct+0x10c>)
    bb00:	9840      	ldr	r0, [sp, #256]	; 0x100
    bb02:	466a      	mov	r2, sp
{
    bb04:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    bb06:	f013 f9d7 	bl	1eeb8 <settings_name_steq>
    bb0a:	b998      	cbnz	r0, bb34 <ccc_set_direct+0x40>
			BT_ERR("Invalid key");
    bb0c:	2301      	movs	r3, #1
    bb0e:	f04f 0100 	mov.w	r1, #0
    bb12:	f363 0107 	bfi	r1, r3, #0, #8
    bb16:	4a3b      	ldr	r2, [pc, #236]	; (bc04 <ccc_set_direct+0x110>)
    bb18:	4b3b      	ldr	r3, [pc, #236]	; (bc08 <ccc_set_direct+0x114>)
    bb1a:	483c      	ldr	r0, [pc, #240]	; (bc0c <ccc_set_direct+0x118>)
    bb1c:	1a9b      	subs	r3, r3, r2
    bb1e:	08db      	lsrs	r3, r3, #3
    bb20:	f363 118f 	bfi	r1, r3, #6, #10
    bb24:	f012 ff96 	bl	1ea54 <log_0>
			return -EINVAL;
    bb28:	f06f 0515 	mvn.w	r5, #21
}
    bb2c:	4628      	mov	r0, r5
    bb2e:	b039      	add	sp, #228	; 0xe4
    bb30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    bb34:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    bb36:	a901      	add	r1, sp, #4
    bb38:	4620      	mov	r0, r4
    bb3a:	f013 f9dd 	bl	1eef8 <settings_name_next>
		if (!name) {
    bb3e:	b98c      	cbnz	r4, bb64 <ccc_set_direct+0x70>
			BT_ERR("Insufficient number of arguments");
    bb40:	2301      	movs	r3, #1
    bb42:	f04f 0100 	mov.w	r1, #0
    bb46:	f363 0107 	bfi	r1, r3, #0, #8
    bb4a:	4a2e      	ldr	r2, [pc, #184]	; (bc04 <ccc_set_direct+0x110>)
    bb4c:	4b2e      	ldr	r3, [pc, #184]	; (bc08 <ccc_set_direct+0x114>)
    bb4e:	4830      	ldr	r0, [pc, #192]	; (bc10 <ccc_set_direct+0x11c>)
    bb50:	1a9b      	subs	r3, r3, r2
    bb52:	08db      	lsrs	r3, r3, #3
    bb54:	f363 118f 	bfi	r1, r3, #6, #10
    bb58:	f012 ff7c 	bl	1ea54 <log_0>
			return -EINVAL;
    bb5c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    bb60:	4625      	mov	r5, r4
    bb62:	e7e3      	b.n	bb2c <ccc_set_direct+0x38>
		} else if (!next) {
    bb64:	9801      	ldr	r0, [sp, #4]
    bb66:	b9e0      	cbnz	r0, bba2 <ccc_set_direct+0xae>
		err = bt_settings_decode_key(name, &addr);
    bb68:	ae02      	add	r6, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    bb6a:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    bb6e:	4631      	mov	r1, r6
    bb70:	4620      	mov	r0, r4
    bb72:	f013 ffff 	bl	1fb74 <bt_settings_decode_key>
		if (err) {
    bb76:	4605      	mov	r5, r0
    bb78:	b1c0      	cbz	r0, bbac <ccc_set_direct+0xb8>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    bb7a:	2301      	movs	r3, #1
    bb7c:	f04f 0500 	mov.w	r5, #0
    bb80:	4a20      	ldr	r2, [pc, #128]	; (bc04 <ccc_set_direct+0x110>)
    bb82:	f363 0507 	bfi	r5, r3, #0, #8
    bb86:	4b20      	ldr	r3, [pc, #128]	; (bc08 <ccc_set_direct+0x114>)
    bb88:	1a9b      	subs	r3, r3, r2
    bb8a:	08db      	lsrs	r3, r3, #3
    bb8c:	4620      	mov	r0, r4
    bb8e:	f363 158f 	bfi	r5, r3, #6, #10
    bb92:	f7f7 fa7f 	bl	3094 <log_strdup>
    bb96:	462a      	mov	r2, r5
    bb98:	4601      	mov	r1, r0
    bb9a:	481e      	ldr	r0, [pc, #120]	; (bc14 <ccc_set_direct+0x120>)
    bb9c:	f012 ff67 	bl	1ea6e <log_1>
    bba0:	e7dc      	b.n	bb5c <ccc_set_direct+0x68>
			load.addr_with_id.id = strtol(next, NULL, 10);
    bba2:	220a      	movs	r2, #10
    bba4:	2100      	movs	r1, #0
    bba6:	f013 fc54 	bl	1f452 <strtol>
    bbaa:	e7dd      	b.n	bb68 <ccc_set_direct+0x74>
		load.addr_with_id.addr = &addr;
    bbac:	9604      	str	r6, [sp, #16]
		if (len_rd) {
    bbae:	f1b9 0f00 	cmp.w	r9, #0
    bbb2:	d021      	beq.n	bbf8 <ccc_set_direct+0x104>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    bbb4:	ae08      	add	r6, sp, #32
    bbb6:	22c0      	movs	r2, #192	; 0xc0
    bbb8:	4631      	mov	r1, r6
    bbba:	4640      	mov	r0, r8
    bbbc:	47b8      	blx	r7
			if (len < 0) {
    bbbe:	1e04      	subs	r4, r0, #0
    bbc0:	da0f      	bge.n	bbe2 <ccc_set_direct+0xee>
				BT_ERR("Failed to decode value (err %d)", len);
    bbc2:	2301      	movs	r3, #1
    bbc4:	f04f 0200 	mov.w	r2, #0
    bbc8:	f363 0207 	bfi	r2, r3, #0, #8
    bbcc:	490d      	ldr	r1, [pc, #52]	; (bc04 <ccc_set_direct+0x110>)
    bbce:	4b0e      	ldr	r3, [pc, #56]	; (bc08 <ccc_set_direct+0x114>)
    bbd0:	4811      	ldr	r0, [pc, #68]	; (bc18 <ccc_set_direct+0x124>)
    bbd2:	1a5b      	subs	r3, r3, r1
    bbd4:	08db      	lsrs	r3, r3, #3
    bbd6:	f363 128f 	bfi	r2, r3, #6, #10
    bbda:	4621      	mov	r1, r4
    bbdc:	f012 ff47 	bl	1ea6e <log_1>
				return len;
    bbe0:	e7be      	b.n	bb60 <ccc_set_direct+0x6c>
			load.count = len / sizeof(*ccc_store);
    bbe2:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    bbe4:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    bbe6:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    bbe8:	ab04      	add	r3, sp, #16
    bbea:	4a0c      	ldr	r2, [pc, #48]	; (bc1c <ccc_set_direct+0x128>)
    bbec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bbf0:	2001      	movs	r0, #1
    bbf2:	f015 f900 	bl	20df6 <bt_gatt_foreach_attr>
	return 0;
    bbf6:	e799      	b.n	bb2c <ccc_set_direct+0x38>
			load.count = 0;
    bbf8:	e9cd 0006 	strd	r0, r0, [sp, #24]
    bbfc:	e7f4      	b.n	bbe8 <ccc_set_direct+0xf4>
    bbfe:	bf00      	nop
    bc00:	0002877a 	.word	0x0002877a
    bc04:	00025a6c 	.word	0x00025a6c
    bc08:	00025b2c 	.word	0x00025b2c
    bc0c:	00028781 	.word	0x00028781
    bc10:	00027772 	.word	0x00027772
    bc14:	00028936 	.word	0x00028936
    bc18:	0002880d 	.word	0x0002880d
    bc1c:	0000afc1 	.word	0x0000afc1

0000bc20 <bt_gatt_indicate>:
{
    bc20:	b570      	push	{r4, r5, r6, lr}
    bc22:	4605      	mov	r5, r0
    bc24:	b08a      	sub	sp, #40	; 0x28
    bc26:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    bc28:	4837      	ldr	r0, [pc, #220]	; (bd08 <bt_gatt_indicate+0xe8>)
    bc2a:	2101      	movs	r1, #1
    bc2c:	f014 fef0 	bl	20a10 <atomic_test_bit>
    bc30:	2800      	cmp	r0, #0
    bc32:	d060      	beq.n	bcf6 <bt_gatt_indicate+0xd6>
	attr = params->attr;
    bc34:	6870      	ldr	r0, [r6, #4]
    bc36:	9004      	str	r0, [sp, #16]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    bc38:	b115      	cbz	r5, bc40 <bt_gatt_indicate+0x20>
    bc3a:	7b6b      	ldrb	r3, [r5, #13]
    bc3c:	2b06      	cmp	r3, #6
    bc3e:	d15d      	bne.n	bcfc <bt_gatt_indicate+0xdc>
	handle = attr->handle ? : find_static_attr(attr);
    bc40:	8a04      	ldrh	r4, [r0, #16]
    bc42:	b93c      	cbnz	r4, bc54 <bt_gatt_indicate+0x34>
    bc44:	f7fe ffd6 	bl	abf4 <find_static_attr>
	if (!handle) {
    bc48:	4604      	mov	r4, r0
    bc4a:	b918      	cbnz	r0, bc54 <bt_gatt_indicate+0x34>
		return -ENOENT;
    bc4c:	f06f 0001 	mvn.w	r0, #1
}
    bc50:	b00a      	add	sp, #40	; 0x28
    bc52:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid) {
    bc54:	6832      	ldr	r2, [r6, #0]
    bc56:	b1b2      	cbz	r2, bc86 <bt_gatt_indicate+0x66>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    bc58:	a904      	add	r1, sp, #16
    bc5a:	9102      	str	r1, [sp, #8]
    bc5c:	492b      	ldr	r1, [pc, #172]	; (bd0c <bt_gatt_indicate+0xec>)
    bc5e:	9101      	str	r1, [sp, #4]
    bc60:	2101      	movs	r1, #1
		attr = NULL;
    bc62:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    bc64:	9100      	str	r1, [sp, #0]
    bc66:	4620      	mov	r0, r4
    bc68:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    bc6c:	9304      	str	r3, [sp, #16]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    bc6e:	f7ff fe2b 	bl	b8c8 <bt_gatt_foreach_attr_type>
		if (!attr) {
    bc72:	9804      	ldr	r0, [sp, #16]
    bc74:	2800      	cmp	r0, #0
    bc76:	d0e9      	beq.n	bc4c <bt_gatt_indicate+0x2c>
		handle = attr->handle ? : find_static_attr(attr);
    bc78:	8a04      	ldrh	r4, [r0, #16]
    bc7a:	b924      	cbnz	r4, bc86 <bt_gatt_indicate+0x66>
    bc7c:	f7fe ffba 	bl	abf4 <find_static_attr>
		if (!handle) {
    bc80:	4604      	mov	r4, r0
    bc82:	2800      	cmp	r0, #0
    bc84:	d0e2      	beq.n	bc4c <bt_gatt_indicate+0x2c>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    bc86:	9b04      	ldr	r3, [sp, #16]
    bc88:	6818      	ldr	r0, [r3, #0]
    bc8a:	2300      	movs	r3, #0
    bc8c:	f88d 3014 	strb.w	r3, [sp, #20]
    bc90:	a905      	add	r1, sp, #20
    bc92:	f642 0303 	movw	r3, #10243	; 0x2803
    bc96:	f8ad 3016 	strh.w	r3, [sp, #22]
    bc9a:	f013 ff8f 	bl	1fbbc <bt_uuid_cmp>
    bc9e:	b938      	cbnz	r0, bcb0 <bt_gatt_indicate+0x90>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    bca0:	6870      	ldr	r0, [r6, #4]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    bca2:	68c3      	ldr	r3, [r0, #12]
    bca4:	799b      	ldrb	r3, [r3, #6]
    bca6:	069b      	lsls	r3, r3, #26
    bca8:	d52b      	bpl.n	bd02 <bt_gatt_indicate+0xe2>
		handle = bt_gatt_attr_value_handle(params->attr);
    bcaa:	f7ff fdf5 	bl	b898 <bt_gatt_attr_value_handle>
    bcae:	4604      	mov	r4, r0
	if (conn) {
    bcb0:	b12d      	cbz	r5, bcbe <bt_gatt_indicate+0x9e>
		return gatt_indicate(conn, handle, params);
    bcb2:	4632      	mov	r2, r6
    bcb4:	4621      	mov	r1, r4
    bcb6:	4628      	mov	r0, r5
    bcb8:	f7ff f93e 	bl	af38 <gatt_indicate>
    bcbc:	e7c8      	b.n	bc50 <bt_gatt_indicate+0x30>
	data.err = -ENOTCONN;
    bcbe:	f06f 0338 	mvn.w	r3, #56	; 0x38
    bcc2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    bcc4:	2302      	movs	r3, #2
    bcc6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    bcca:	f642 1302 	movw	r3, #10498	; 0x2902
    bcce:	f8ad 301a 	strh.w	r3, [sp, #26]
    bcd2:	ab07      	add	r3, sp, #28
    bcd4:	9302      	str	r3, [sp, #8]
    bcd6:	4b0e      	ldr	r3, [pc, #56]	; (bd10 <bt_gatt_indicate+0xf0>)
    bcd8:	9301      	str	r3, [sp, #4]
    bcda:	2301      	movs	r3, #1
    bcdc:	9300      	str	r3, [sp, #0]
    bcde:	4620      	mov	r0, r4
    bce0:	462b      	mov	r3, r5
    bce2:	aa06      	add	r2, sp, #24
    bce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    bce8:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    bcea:	f88d 5018 	strb.w	r5, [sp, #24]
    bcee:	f7ff fdeb 	bl	b8c8 <bt_gatt_foreach_attr_type>
	return data.err;
    bcf2:	9807      	ldr	r0, [sp, #28]
    bcf4:	e7ac      	b.n	bc50 <bt_gatt_indicate+0x30>
		return -EAGAIN;
    bcf6:	f06f 000a 	mvn.w	r0, #10
    bcfa:	e7a9      	b.n	bc50 <bt_gatt_indicate+0x30>
		return -ENOTCONN;
    bcfc:	f06f 0038 	mvn.w	r0, #56	; 0x38
    bd00:	e7a6      	b.n	bc50 <bt_gatt_indicate+0x30>
			return -EINVAL;
    bd02:	f06f 0015 	mvn.w	r0, #21
    bd06:	e7a3      	b.n	bc50 <bt_gatt_indicate+0x30>
    bd08:	2000dd88 	.word	0x2000dd88
    bd0c:	00020ac7 	.word	0x00020ac7
    bd10:	0000b385 	.word	0x0000b385

0000bd14 <sc_process>:
{
    bd14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    bd16:	f100 0520 	add.w	r5, r0, #32
{
    bd1a:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    bd1c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    bd20:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    bd22:	f1a0 0618 	sub.w	r6, r0, #24
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bd26:	f06f 0101 	mvn.w	r1, #1
    bd2a:	4628      	mov	r0, r5
    bd2c:	f014 fe79 	bl	20a22 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    bd30:	4b0d      	ldr	r3, [pc, #52]	; (bd68 <sc_process+0x54>)
    bd32:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    bd36:	4b0d      	ldr	r3, [pc, #52]	; (bd6c <sc_process+0x58>)
    bd38:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    bd3c:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    bd3e:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    bd40:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    bd44:	2304      	movs	r3, #4
	sc->start = 0U;
    bd46:	f824 0c04 	strh.w	r0, [r4, #-4]
	sc->end = 0U;
    bd4a:	f824 0c02 	strh.w	r0, [r4, #-2]
	sc->params.len = sizeof(sc_range);
    bd4e:	f824 3c08 	strh.w	r3, [r4, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    bd52:	4631      	mov	r1, r6
    bd54:	f7ff ff64 	bl	bc20 <bt_gatt_indicate>
    bd58:	b918      	cbnz	r0, bd62 <sc_process+0x4e>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    bd5a:	2101      	movs	r1, #1
    bd5c:	4628      	mov	r0, r5
    bd5e:	f014 fede 	bl	20b1e <atomic_set_bit>
}
    bd62:	b002      	add	sp, #8
    bd64:	bd70      	pop	{r4, r5, r6, pc}
    bd66:	bf00      	nop
    bd68:	00026318 	.word	0x00026318
    bd6c:	0000b695 	.word	0x0000b695

0000bd70 <update_ccc>:
{
    bd70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    bd74:	4b40      	ldr	r3, [pc, #256]	; (be78 <update_ccc+0x108>)
    bd76:	6882      	ldr	r2, [r0, #8]
    bd78:	429a      	cmp	r2, r3
{
    bd7a:	4606      	mov	r6, r0
    bd7c:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    bd7e:	d126      	bne.n	bdce <update_ccc+0x5e>
				BT_WARN("CCC %p not writable", attr);
    bd80:	4b3e      	ldr	r3, [pc, #248]	; (be7c <update_ccc+0x10c>)
	ccc = attr->user_data;
    bd82:	68c7      	ldr	r7, [r0, #12]
    bd84:	4d3e      	ldr	r5, [pc, #248]	; (be80 <update_ccc+0x110>)
	struct bt_conn *conn = data->conn;
    bd86:	680c      	ldr	r4, [r1, #0]
				BT_WARN("CCC %p not writable", attr);
    bd88:	1aed      	subs	r5, r5, r3
		if (!ccc->cfg[i].value ||
    bd8a:	893b      	ldrh	r3, [r7, #8]
				BT_WARN("CCC %p not writable", attr);
    bd8c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		if (!ccc->cfg[i].value ||
    bd90:	b1eb      	cbz	r3, bdce <update_ccc+0x5e>
		    bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    bd92:	1c79      	adds	r1, r7, #1
    bd94:	4620      	mov	r0, r4
    bd96:	f014 f8ee 	bl	1ff76 <bt_conn_addr_le_cmp>
		if (!ccc->cfg[i].value ||
    bd9a:	b9c0      	cbnz	r0, bdce <update_ccc+0x5e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    bd9c:	222a      	movs	r2, #42	; 0x2a
    bd9e:	4631      	mov	r1, r6
    bda0:	4620      	mov	r0, r4
    bda2:	f015 f836 	bl	20e12 <bt_gatt_check_perm>
		if (err) {
    bda6:	b310      	cbz	r0, bdee <update_ccc+0x7e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    bda8:	2803      	cmp	r0, #3
    bdaa:	d014      	beq.n	bdd6 <update_ccc+0x66>
				sec = BT_SECURITY_L3;
    bdac:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    bdae:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
    bdb0:	bf14      	ite	ne
    bdb2:	f04f 0902 	movne.w	r9, #2
    bdb6:	f04f 0903 	moveq.w	r9, #3
			    bt_conn_get_security(conn) < sec) {
    bdba:	f014 f8da 	bl	1ff72 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    bdbe:	4581      	cmp	r9, r0
    bdc0:	d915      	bls.n	bdee <update_ccc+0x7e>
				if (data->sec < sec) {
    bdc2:	f898 3004 	ldrb.w	r3, [r8, #4]
    bdc6:	454b      	cmp	r3, r9
    bdc8:	d201      	bcs.n	bdce <update_ccc+0x5e>
					data->sec = sec;
    bdca:	f888 9004 	strb.w	r9, [r8, #4]
}
    bdce:	2001      	movs	r0, #1
    bdd0:	b003      	add	sp, #12
    bdd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				BT_WARN("CCC %p not writable", attr);
    bdd6:	2302      	movs	r3, #2
    bdd8:	f04f 0200 	mov.w	r2, #0
    bddc:	f363 0207 	bfi	r2, r3, #0, #8
    bde0:	f365 128f 	bfi	r2, r5, #6, #10
    bde4:	4631      	mov	r1, r6
    bde6:	4827      	ldr	r0, [pc, #156]	; (be84 <update_ccc+0x114>)
    bde8:	f012 fe41 	bl	1ea6e <log_1>
				continue;
    bdec:	e7ef      	b.n	bdce <update_ccc+0x5e>
		gatt_ccc_changed(attr, ccc);
    bdee:	4639      	mov	r1, r7
    bdf0:	4630      	mov	r0, r6
    bdf2:	f014 fd75 	bl	208e0 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    bdf6:	4b24      	ldr	r3, [pc, #144]	; (be88 <update_ccc+0x118>)
    bdf8:	429f      	cmp	r7, r3
    bdfa:	d1e8      	bne.n	bdce <update_ccc+0x5e>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    bdfc:	f104 0170 	add.w	r1, r4, #112	; 0x70
    be00:	7a20      	ldrb	r0, [r4, #8]
    be02:	f7ff fa55 	bl	b2b0 <find_sc_cfg.part.11>
	if (!cfg) {
    be06:	4606      	mov	r6, r0
    be08:	2800      	cmp	r0, #0
    be0a:	d0e0      	beq.n	bdce <update_ccc+0x5e>
	if (!(cfg->data.start || cfg->data.end)) {
    be0c:	8902      	ldrh	r2, [r0, #8]
    be0e:	8943      	ldrh	r3, [r0, #10]
    be10:	ea53 0102 	orrs.w	r1, r3, r2
    be14:	d0db      	beq.n	bdce <update_ccc+0x5e>
	index = bt_conn_index(conn);
    be16:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    be18:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    be1c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    be20:	f7fd fcb6 	bl	9790 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    be24:	4919      	ldr	r1, [pc, #100]	; (be8c <update_ccc+0x11c>)
    be26:	4a1a      	ldr	r2, [pc, #104]	; (be90 <update_ccc+0x120>)
    be28:	2314      	movs	r3, #20
    be2a:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    be2e:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    be30:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    be32:	4a18      	ldr	r2, [pc, #96]	; (be94 <update_ccc+0x124>)
    be34:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    be36:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    be38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	sc_restore_params[index].data = &sc_range[0];
    be3c:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    be3e:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    be40:	eb01 0180 	add.w	r1, r1, r0, lsl #2
	sc_restore_params[index].len = sizeof(sc_range);
    be44:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    be46:	4620      	mov	r0, r4
    be48:	f7ff feea 	bl	bc20 <bt_gatt_indicate>
    be4c:	b148      	cbz	r0, be62 <update_ccc+0xf2>
		BT_ERR("SC restore indication failed");
    be4e:	f04f 0100 	mov.w	r1, #0
    be52:	2301      	movs	r3, #1
    be54:	f363 0107 	bfi	r1, r3, #0, #8
    be58:	f365 118f 	bfi	r1, r5, #6, #10
    be5c:	480e      	ldr	r0, [pc, #56]	; (be98 <update_ccc+0x128>)
    be5e:	f012 fdf9 	bl	1ea54 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    be62:	2204      	movs	r2, #4
    be64:	2100      	movs	r1, #0
    be66:	f106 0008 	add.w	r0, r6, #8
    be6a:	f013 fbef 	bl	1f64c <memset>
		sc_store(cfg);
    be6e:	4630      	mov	r0, r6
    be70:	f7fe ff2c 	bl	accc <sc_store>
    be74:	e7ab      	b.n	bdce <update_ccc+0x5e>
    be76:	bf00      	nop
    be78:	0000b0e5 	.word	0x0000b0e5
    be7c:	00025a6c 	.word	0x00025a6c
    be80:	00025b2c 	.word	0x00025b2c
    be84:	000289a4 	.word	0x000289a4
    be88:	2000dfd4 	.word	0x2000dfd4
    be8c:	200004cc 	.word	0x200004cc
    be90:	00026318 	.word	0x00026318
    be94:	00020b65 	.word	0x00020b65
    be98:	000289b8 	.word	0x000289b8

0000be9c <bt_gatt_discover>:
{
    be9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    be9e:	7b43      	ldrb	r3, [r0, #13]
    bea0:	2b06      	cmp	r3, #6
{
    bea2:	b085      	sub	sp, #20
    bea4:	4605      	mov	r5, r0
    bea6:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    bea8:	f040 80e4 	bne.w	c074 <bt_gatt_discover+0x1d8>
	switch (params->type) {
    beac:	7c09      	ldrb	r1, [r1, #16]
    beae:	2905      	cmp	r1, #5
    beb0:	f200 80d1 	bhi.w	c056 <bt_gatt_discover+0x1ba>
    beb4:	e8df f001 	tbb	[pc, r1]
    beb8:	6a6a0303 	.word	0x6a6a0303
    bebc:	bb88      	.short	0xbb88
		if (params->uuid) {
    bebe:	6823      	ldr	r3, [r4, #0]
    bec0:	2b00      	cmp	r3, #0
    bec2:	d045      	beq.n	bf50 <bt_gatt_discover+0xb4>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    bec4:	2206      	movs	r2, #6
    bec6:	4611      	mov	r1, r2
    bec8:	f7fe f808 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    becc:	4606      	mov	r6, r0
    bece:	b918      	cbnz	r0, bed8 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    bed0:	f06f 000b 	mvn.w	r0, #11
}
    bed4:	b005      	add	sp, #20
    bed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    bed8:	f100 0708 	add.w	r7, r0, #8
    bedc:	2106      	movs	r1, #6
    bede:	4638      	mov	r0, r7
    bee0:	f016 fba8 	bl	22634 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    bee4:	8923      	ldrh	r3, [r4, #8]
    bee6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    bee8:	89e3      	ldrh	r3, [r4, #14]
    beea:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    beec:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    beee:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    bef0:	f642 0301 	movw	r3, #10241	; 0x2801
    bef4:	bf08      	it	eq
    bef6:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    befa:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    befc:	6823      	ldr	r3, [r4, #0]
    befe:	7819      	ldrb	r1, [r3, #0]
    bf00:	b1a9      	cbz	r1, bf2e <bt_gatt_discover+0x92>
    bf02:	2902      	cmp	r1, #2
    bf04:	d01e      	beq.n	bf44 <bt_gatt_discover+0xa8>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    bf06:	2301      	movs	r3, #1
    bf08:	f04f 0200 	mov.w	r2, #0
    bf0c:	f363 0207 	bfi	r2, r3, #0, #8
    bf10:	485a      	ldr	r0, [pc, #360]	; (c07c <bt_gatt_discover+0x1e0>)
    bf12:	4b5b      	ldr	r3, [pc, #364]	; (c080 <bt_gatt_discover+0x1e4>)
    bf14:	1a1b      	subs	r3, r3, r0
    bf16:	08db      	lsrs	r3, r3, #3
    bf18:	485a      	ldr	r0, [pc, #360]	; (c084 <bt_gatt_discover+0x1e8>)
    bf1a:	f363 128f 	bfi	r2, r3, #6, #10
    bf1e:	f012 fda6 	bl	1ea6e <log_1>
		net_buf_unref(buf);
    bf22:	4630      	mov	r0, r6
    bf24:	f00b fb56 	bl	175d4 <net_buf_unref>
	return -EINVAL;
    bf28:	f06f 0015 	mvn.w	r0, #21
    bf2c:	e7d2      	b.n	bed4 <bt_gatt_discover+0x38>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    bf2e:	8859      	ldrh	r1, [r3, #2]
    bf30:	4638      	mov	r0, r7
    bf32:	f016 fb96 	bl	22662 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    bf36:	4a54      	ldr	r2, [pc, #336]	; (c088 <bt_gatt_discover+0x1ec>)
    bf38:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    bf3a:	4631      	mov	r1, r6
    bf3c:	4628      	mov	r0, r5
    bf3e:	f7fe ffbb 	bl	aeb8 <gatt_send.constprop.37>
    bf42:	e7c7      	b.n	bed4 <bt_gatt_discover+0x38>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    bf44:	2210      	movs	r2, #16
    bf46:	1c59      	adds	r1, r3, #1
    bf48:	4638      	mov	r0, r7
    bf4a:	f016 fb79 	bl	22640 <net_buf_simple_add_mem>
		break;
    bf4e:	e7f2      	b.n	bf36 <bt_gatt_discover+0x9a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    bf50:	2204      	movs	r2, #4
    bf52:	2110      	movs	r1, #16
    bf54:	f7fd ffc2 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    bf58:	4606      	mov	r6, r0
    bf5a:	2800      	cmp	r0, #0
    bf5c:	d0b8      	beq.n	bed0 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    bf5e:	f100 0708 	add.w	r7, r0, #8
    bf62:	2104      	movs	r1, #4
    bf64:	4638      	mov	r0, r7
    bf66:	f016 fb65 	bl	22634 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    bf6a:	8923      	ldrh	r3, [r4, #8]
    bf6c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    bf6e:	89e3      	ldrh	r3, [r4, #14]
    bf70:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    bf72:	7c23      	ldrb	r3, [r4, #16]
    bf74:	b93b      	cbnz	r3, bf86 <bt_gatt_discover+0xea>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_PRIMARY)->val);
    bf76:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    bf7a:	4638      	mov	r0, r7
    bf7c:	f016 fb71 	bl	22662 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    bf80:	4623      	mov	r3, r4
    bf82:	4a42      	ldr	r2, [pc, #264]	; (c08c <bt_gatt_discover+0x1f0>)
    bf84:	e7d9      	b.n	bf3a <bt_gatt_discover+0x9e>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    bf86:	f642 0101 	movw	r1, #10241	; 0x2801
    bf8a:	e7f6      	b.n	bf7a <bt_gatt_discover+0xde>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    bf8c:	2204      	movs	r2, #4
    bf8e:	2108      	movs	r1, #8
    bf90:	f7fd ffa4 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    bf94:	4606      	mov	r6, r0
    bf96:	2800      	cmp	r0, #0
    bf98:	d09a      	beq.n	bed0 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    bf9a:	f100 0708 	add.w	r7, r0, #8
    bf9e:	2104      	movs	r1, #4
    bfa0:	4638      	mov	r0, r7
    bfa2:	f016 fb47 	bl	22634 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    bfa6:	8923      	ldrh	r3, [r4, #8]
    bfa8:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    bfaa:	89e3      	ldrh	r3, [r4, #14]
    bfac:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    bfae:	7c23      	ldrb	r3, [r4, #16]
    bfb0:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_INCLUDE)->val);
    bfb2:	bf0c      	ite	eq
    bfb4:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    bfb8:	f642 0103 	movwne	r1, #10243	; 0x2803
    bfbc:	4638      	mov	r0, r7
    bfbe:	f016 fb50 	bl	22662 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    bfc2:	4623      	mov	r3, r4
    bfc4:	4a32      	ldr	r2, [pc, #200]	; (c090 <bt_gatt_discover+0x1f4>)
    bfc6:	e7b8      	b.n	bf3a <bt_gatt_discover+0x9e>
		if (params->uuid &&
    bfc8:	6820      	ldr	r0, [r4, #0]
    bfca:	b380      	cbz	r0, c02e <bt_gatt_discover+0x192>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    bfcc:	2600      	movs	r6, #0
    bfce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bfd2:	4669      	mov	r1, sp
    bfd4:	f88d 6000 	strb.w	r6, [sp]
    bfd8:	f8ad 3002 	strh.w	r3, [sp, #2]
    bfdc:	f013 fdee 	bl	1fbbc <bt_uuid_cmp>
		if (params->uuid &&
    bfe0:	2800      	cmp	r0, #0
    bfe2:	d0a1      	beq.n	bf28 <bt_gatt_discover+0x8c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    bfe4:	f642 0301 	movw	r3, #10241	; 0x2801
    bfe8:	a901      	add	r1, sp, #4
    bfea:	6820      	ldr	r0, [r4, #0]
    bfec:	f88d 6004 	strb.w	r6, [sp, #4]
    bff0:	f8ad 3006 	strh.w	r3, [sp, #6]
    bff4:	f013 fde2 	bl	1fbbc <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    bff8:	2800      	cmp	r0, #0
    bffa:	d095      	beq.n	bf28 <bt_gatt_discover+0x8c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    bffc:	f642 0302 	movw	r3, #10242	; 0x2802
    c000:	a902      	add	r1, sp, #8
    c002:	6820      	ldr	r0, [r4, #0]
    c004:	f88d 6008 	strb.w	r6, [sp, #8]
    c008:	f8ad 300a 	strh.w	r3, [sp, #10]
    c00c:	f013 fdd6 	bl	1fbbc <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    c010:	2800      	cmp	r0, #0
    c012:	d089      	beq.n	bf28 <bt_gatt_discover+0x8c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    c014:	f642 0303 	movw	r3, #10243	; 0x2803
    c018:	a903      	add	r1, sp, #12
    c01a:	6820      	ldr	r0, [r4, #0]
    c01c:	f88d 600c 	strb.w	r6, [sp, #12]
    c020:	f8ad 300e 	strh.w	r3, [sp, #14]
    c024:	f013 fdca 	bl	1fbbc <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    c028:	2800      	cmp	r0, #0
    c02a:	f43f af7d 	beq.w	bf28 <bt_gatt_discover+0x8c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    c02e:	2204      	movs	r2, #4
    c030:	4611      	mov	r1, r2
    c032:	4628      	mov	r0, r5
    c034:	f7fd ff52 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    c038:	4606      	mov	r6, r0
    c03a:	2800      	cmp	r0, #0
    c03c:	f43f af48 	beq.w	bed0 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    c040:	2104      	movs	r1, #4
    c042:	3008      	adds	r0, #8
    c044:	f016 faf6 	bl	22634 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    c048:	8923      	ldrh	r3, [r4, #8]
    c04a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    c04c:	89e3      	ldrh	r3, [r4, #14]
    c04e:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    c050:	4a10      	ldr	r2, [pc, #64]	; (c094 <bt_gatt_discover+0x1f8>)
    c052:	4623      	mov	r3, r4
    c054:	e771      	b.n	bf3a <bt_gatt_discover+0x9e>
		BT_ERR("Invalid discovery type: %u", params->type);
    c056:	2301      	movs	r3, #1
    c058:	f04f 0200 	mov.w	r2, #0
    c05c:	f363 0207 	bfi	r2, r3, #0, #8
    c060:	4806      	ldr	r0, [pc, #24]	; (c07c <bt_gatt_discover+0x1e0>)
    c062:	4b07      	ldr	r3, [pc, #28]	; (c080 <bt_gatt_discover+0x1e4>)
    c064:	1a1b      	subs	r3, r3, r0
    c066:	08db      	lsrs	r3, r3, #3
    c068:	f363 128f 	bfi	r2, r3, #6, #10
    c06c:	480a      	ldr	r0, [pc, #40]	; (c098 <bt_gatt_discover+0x1fc>)
    c06e:	f012 fcfe 	bl	1ea6e <log_1>
    c072:	e759      	b.n	bf28 <bt_gatt_discover+0x8c>
		return -ENOTCONN;
    c074:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c078:	e72c      	b.n	bed4 <bt_gatt_discover+0x38>
    c07a:	bf00      	nop
    c07c:	00025a6c 	.word	0x00025a6c
    c080:	00025b2c 	.word	0x00025b2c
    c084:	0002872c 	.word	0x0002872c
    c088:	00020ea3 	.word	0x00020ea3
    c08c:	0000c09d 	.word	0x0000c09d
    c090:	0000c1b5 	.word	0x0000c1b5
    c094:	0000c4ad 	.word	0x0000c4ad
    c098:	00028741 	.word	0x00028741

0000c09c <gatt_read_group_rsp>:
{
    c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0a0:	b08f      	sub	sp, #60	; 0x3c
    c0a2:	4690      	mov	r8, r2
    c0a4:	4681      	mov	r9, r0
    c0a6:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
    c0a8:	460a      	mov	r2, r1
    c0aa:	b131      	cbz	r1, c0ba <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    c0ac:	686b      	ldr	r3, [r5, #4]
    c0ae:	462a      	mov	r2, r5
    c0b0:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    c0b2:	4798      	blx	r3
}
    c0b4:	b00f      	add	sp, #60	; 0x3c
    c0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
    c0ba:	f898 1000 	ldrb.w	r1, [r8]
    c0be:	2906      	cmp	r1, #6
    c0c0:	d015      	beq.n	c0ee <gatt_read_group_rsp+0x52>
    c0c2:	2914      	cmp	r1, #20
    c0c4:	d012      	beq.n	c0ec <gatt_read_group_rsp+0x50>
		BT_ERR("Invalid data len %u", rsp->len);
    c0c6:	2301      	movs	r3, #1
    c0c8:	f04f 0200 	mov.w	r2, #0
    c0cc:	f363 0207 	bfi	r2, r3, #0, #8
    c0d0:	4835      	ldr	r0, [pc, #212]	; (c1a8 <gatt_read_group_rsp+0x10c>)
    c0d2:	4b36      	ldr	r3, [pc, #216]	; (c1ac <gatt_read_group_rsp+0x110>)
    c0d4:	1a1b      	subs	r3, r3, r0
    c0d6:	08db      	lsrs	r3, r3, #3
    c0d8:	f363 128f 	bfi	r2, r3, #6, #10
    c0dc:	4834      	ldr	r0, [pc, #208]	; (c1b0 <gatt_read_group_rsp+0x114>)
    c0de:	f012 fcc6 	bl	1ea6e <log_1>
	params->func(conn, NULL, params);
    c0e2:	686b      	ldr	r3, [r5, #4]
    c0e4:	462a      	mov	r2, r5
    c0e6:	2100      	movs	r1, #0
    c0e8:	4648      	mov	r0, r9
    c0ea:	e7e2      	b.n	c0b2 <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    c0ec:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    c0ee:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    c0f0:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    c0f4:	b29c      	uxth	r4, r3
    c0f6:	f108 0701 	add.w	r7, r8, #1
	u16_t start_handle, end_handle = 0U;
    c0fa:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    c0fc:	f898 3000 	ldrb.w	r3, [r8]
    c100:	42a3      	cmp	r3, r4
    c102:	d909      	bls.n	c118 <gatt_read_group_rsp+0x7c>
	if (length == 0U && end_handle) {
    c104:	2c00      	cmp	r4, #0
    c106:	d1ec      	bne.n	c0e2 <gatt_read_group_rsp+0x46>
    c108:	2e00      	cmp	r6, #0
    c10a:	d0ea      	beq.n	c0e2 <gatt_read_group_rsp+0x46>
	gatt_discover_next(conn, handle, params);
    c10c:	462a      	mov	r2, r5
    c10e:	4631      	mov	r1, r6
    c110:	4648      	mov	r0, r9
    c112:	f014 fea9 	bl	20e68 <gatt_discover_next>
    c116:	e7cd      	b.n	c0b4 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
    c118:	2214      	movs	r2, #20
    c11a:	2100      	movs	r1, #0
    c11c:	a809      	add	r0, sp, #36	; 0x24
    c11e:	f013 fa95 	bl	1f64c <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    c122:	f8b7 a000 	ldrh.w	sl, [r7]
    c126:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    c12a:	2b00      	cmp	r3, #0
    c12c:	d0d9      	beq.n	c0e2 <gatt_read_group_rsp+0x46>
		end_handle = sys_le16_to_cpu(data->end_handle);
    c12e:	f8b7 b002 	ldrh.w	fp, [r7, #2]
    c132:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    c136:	2e00      	cmp	r6, #0
    c138:	d0d3      	beq.n	c0e2 <gatt_read_group_rsp+0x46>
    c13a:	42b3      	cmp	r3, r6
    c13c:	d8d1      	bhi.n	c0e2 <gatt_read_group_rsp+0x46>
		switch (u.uuid.type) {
    c13e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    c142:	b32b      	cbz	r3, c190 <gatt_read_group_rsp+0xf4>
    c144:	2b02      	cmp	r3, #2
    c146:	d02a      	beq.n	c19e <gatt_read_group_rsp+0x102>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    c148:	f04f 0300 	mov.w	r3, #0
    c14c:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    c150:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
    c152:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    c156:	2b00      	cmp	r3, #0
    c158:	f642 0301 	movw	r3, #10241	; 0x2801
    c15c:	bf08      	it	eq
    c15e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    c162:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    c166:	ab04      	add	r3, sp, #16
    c168:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    c16a:	ab01      	add	r3, sp, #4
    c16c:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    c16e:	ab02      	add	r3, sp, #8
    c170:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
    c172:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    c176:	686b      	ldr	r3, [r5, #4]
    c178:	462a      	mov	r2, r5
    c17a:	a909      	add	r1, sp, #36	; 0x24
    c17c:	4648      	mov	r0, r9
    c17e:	4798      	blx	r3
    c180:	2800      	cmp	r0, #0
    c182:	d097      	beq.n	c0b4 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    c184:	f898 2000 	ldrb.w	r2, [r8]
    c188:	1aa4      	subs	r4, r4, r2
    c18a:	b2a4      	uxth	r4, r4
    c18c:	4417      	add	r7, r2
    c18e:	e7b5      	b.n	c0fc <gatt_read_group_rsp+0x60>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    c190:	2202      	movs	r2, #2
    c192:	1d39      	adds	r1, r7, #4
    c194:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    c198:	f013 fa2e 	bl	1f5f8 <memcpy>
			break;
    c19c:	e7d4      	b.n	c148 <gatt_read_group_rsp+0xac>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    c19e:	2210      	movs	r2, #16
    c1a0:	1d39      	adds	r1, r7, #4
    c1a2:	f10d 0011 	add.w	r0, sp, #17
    c1a6:	e7f7      	b.n	c198 <gatt_read_group_rsp+0xfc>
    c1a8:	00025a6c 	.word	0x00025a6c
    c1ac:	00025b2c 	.word	0x00025b2c
    c1b0:	000288bd 	.word	0x000288bd

0000c1b4 <gatt_read_type_rsp>:
{
    c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1b8:	b091      	sub	sp, #68	; 0x44
    c1ba:	4690      	mov	r8, r2
    c1bc:	4607      	mov	r7, r0
    c1be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	if (err) {
    c1c0:	460a      	mov	r2, r1
    c1c2:	b121      	cbz	r1, c1ce <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
    c1c4:	6873      	ldr	r3, [r6, #4]
    c1c6:	4632      	mov	r2, r6
    c1c8:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    c1ca:	4798      	blx	r3
	if (!handle) {
    c1cc:	e084      	b.n	c2d8 <gatt_read_type_rsp+0x124>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    c1ce:	7c30      	ldrb	r0, [r6, #16]
    c1d0:	f898 1000 	ldrb.w	r1, [r8]
    c1d4:	2802      	cmp	r0, #2
    c1d6:	f040 808b 	bne.w	c2f0 <gatt_read_type_rsp+0x13c>
	switch (rsp->len) {
    c1da:	2906      	cmp	r1, #6
    c1dc:	d01d      	beq.n	c21a <gatt_read_type_rsp+0x66>
    c1de:	2908      	cmp	r1, #8
    c1e0:	f040 808a 	bne.w	c2f8 <gatt_read_type_rsp+0x144>
		u.uuid.type = BT_UUID_TYPE_16;
    c1e4:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	for (length--, pdu = rsp->data; length >= rsp->len;
    c1e8:	1e5c      	subs	r4, r3, #1
    c1ea:	b2a4      	uxth	r4, r4
    c1ec:	f108 0501 	add.w	r5, r8, #1
	u16_t handle = 0U;
    c1f0:	f04f 0900 	mov.w	r9, #0
			value.uuid = &u.uuid;
    c1f4:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
	for (length--, pdu = rsp->data; length >= rsp->len;
    c1f8:	f898 3000 	ldrb.w	r3, [r8]
    c1fc:	42a3      	cmp	r3, r4
    c1fe:	d90f      	bls.n	c220 <gatt_read_type_rsp+0x6c>
	if (length == 0U && handle) {
    c200:	2c00      	cmp	r4, #0
    c202:	f040 8087 	bne.w	c314 <gatt_read_type_rsp+0x160>
    c206:	f1b9 0f00 	cmp.w	r9, #0
    c20a:	f000 8083 	beq.w	c314 <gatt_read_type_rsp+0x160>
	gatt_discover_next(conn, handle, params);
    c20e:	4632      	mov	r2, r6
    c210:	4649      	mov	r1, r9
    c212:	4638      	mov	r0, r7
    c214:	f014 fe28 	bl	20e68 <gatt_discover_next>
    c218:	e05e      	b.n	c2d8 <gatt_read_type_rsp+0x124>
		u.uuid.type = BT_UUID_TYPE_128;
    c21a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
		break;
    c21e:	e7e3      	b.n	c1e8 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
    c220:	f8b5 b000 	ldrh.w	fp, [r5]
    c224:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    c228:	f1b9 0f00 	cmp.w	r9, #0
    c22c:	d072      	beq.n	c314 <gatt_read_type_rsp+0x160>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    c22e:	886b      	ldrh	r3, [r5, #2]
    c230:	f8ad 3014 	strh.w	r3, [sp, #20]
    c234:	b299      	uxth	r1, r3
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    c236:	88ab      	ldrh	r3, [r5, #4]
    c238:	f8ad 3016 	strh.w	r3, [sp, #22]
    c23c:	b29a      	uxth	r2, r3
		switch (u.uuid.type) {
    c23e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    c242:	b313      	cbz	r3, c28a <gatt_read_type_rsp+0xd6>
    c244:	2b02      	cmp	r3, #2
    c246:	d029      	beq.n	c29c <gatt_read_type_rsp+0xe8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    c248:	6831      	ldr	r1, [r6, #0]
    c24a:	2900      	cmp	r1, #0
    c24c:	d14a      	bne.n	c2e4 <gatt_read_type_rsp+0x130>
		attr = (&(struct bt_gatt_attr) {
    c24e:	2210      	movs	r2, #16
    c250:	2100      	movs	r1, #0
    c252:	a807      	add	r0, sp, #28
    c254:	f013 f9fa 	bl	1f64c <memset>
			.uuid = BT_UUID_GATT_INCLUDE,
    c258:	2300      	movs	r3, #0
    c25a:	f88d 3008 	strb.w	r3, [sp, #8]
    c25e:	f642 0302 	movw	r3, #10242	; 0x2802
    c262:	f8ad 300a 	strh.w	r3, [sp, #10]
		attr = (&(struct bt_gatt_attr) {
    c266:	ab02      	add	r3, sp, #8
    c268:	9306      	str	r3, [sp, #24]
    c26a:	ab04      	add	r3, sp, #16
    c26c:	9309      	str	r3, [sp, #36]	; 0x24
		attr->handle = handle;
    c26e:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    c272:	6873      	ldr	r3, [r6, #4]
    c274:	4632      	mov	r2, r6
    c276:	a906      	add	r1, sp, #24
    c278:	4638      	mov	r0, r7
    c27a:	4798      	blx	r3
    c27c:	b360      	cbz	r0, c2d8 <gatt_read_type_rsp+0x124>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    c27e:	f898 2000 	ldrb.w	r2, [r8]
    c282:	1aa4      	subs	r4, r4, r2
    c284:	b2a4      	uxth	r4, r4
    c286:	4415      	add	r5, r2
    c288:	e7b6      	b.n	c1f8 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
    c28a:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    c28e:	79ab      	ldrb	r3, [r5, #6]
    c290:	79ea      	ldrb	r2, [r5, #7]
    c292:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c296:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			break;
    c29a:	e7d5      	b.n	c248 <gatt_read_type_rsp+0x94>
			params->_included.start_handle = value.start_handle;
    c29c:	8171      	strh	r1, [r6, #10]
			params->_included.end_handle = value.end_handle;
    c29e:	81b2      	strh	r2, [r6, #12]
			params->_included.attr_handle = handle;
    c2a0:	f8a6 9008 	strh.w	r9, [r6, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    c2a4:	461a      	mov	r2, r3
    c2a6:	210a      	movs	r1, #10
    c2a8:	4638      	mov	r0, r7
    c2aa:	9301      	str	r3, [sp, #4]
    c2ac:	f7fd fe16 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    c2b0:	4604      	mov	r4, r0
    c2b2:	b1a0      	cbz	r0, c2de <gatt_read_type_rsp+0x12a>
	req = net_buf_add(buf, sizeof(*req));
    c2b4:	9b01      	ldr	r3, [sp, #4]
    c2b6:	3008      	adds	r0, #8
    c2b8:	4619      	mov	r1, r3
    c2ba:	f016 f9bb 	bl	22634 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    c2be:	8973      	ldrh	r3, [r6, #10]
    c2c0:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    c2c2:	4a47      	ldr	r2, [pc, #284]	; (c3e0 <gatt_read_type_rsp+0x22c>)
    c2c4:	4633      	mov	r3, r6
    c2c6:	4621      	mov	r1, r4
    c2c8:	4638      	mov	r0, r7
    c2ca:	f7fe fdf5 	bl	aeb8 <gatt_send.constprop.37>
			return read_included_uuid(conn, params);
    c2ce:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
    c2d2:	f1b9 0f00 	cmp.w	r9, #0
    c2d6:	d19a      	bne.n	c20e <gatt_read_type_rsp+0x5a>
}
    c2d8:	b011      	add	sp, #68	; 0x44
    c2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    c2de:	f06f 000b 	mvn.w	r0, #11
    c2e2:	e7f4      	b.n	c2ce <gatt_read_type_rsp+0x11a>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    c2e4:	4650      	mov	r0, sl
    c2e6:	f013 fc69 	bl	1fbbc <bt_uuid_cmp>
    c2ea:	2800      	cmp	r0, #0
    c2ec:	d0af      	beq.n	c24e <gatt_read_type_rsp+0x9a>
    c2ee:	e7c6      	b.n	c27e <gatt_read_type_rsp+0xca>
	switch (rsp->len) {
    c2f0:	2907      	cmp	r1, #7
    c2f2:	d015      	beq.n	c320 <gatt_read_type_rsp+0x16c>
    c2f4:	2915      	cmp	r1, #21
    c2f6:	d012      	beq.n	c31e <gatt_read_type_rsp+0x16a>
		BT_ERR("Invalid data len %u", rsp->len);
    c2f8:	2301      	movs	r3, #1
    c2fa:	f04f 0200 	mov.w	r2, #0
    c2fe:	f363 0207 	bfi	r2, r3, #0, #8
    c302:	4838      	ldr	r0, [pc, #224]	; (c3e4 <gatt_read_type_rsp+0x230>)
    c304:	4b38      	ldr	r3, [pc, #224]	; (c3e8 <gatt_read_type_rsp+0x234>)
    c306:	1a1b      	subs	r3, r3, r0
    c308:	08db      	lsrs	r3, r3, #3
    c30a:	f363 128f 	bfi	r2, r3, #6, #10
    c30e:	4837      	ldr	r0, [pc, #220]	; (c3ec <gatt_read_type_rsp+0x238>)
    c310:	f012 fbad 	bl	1ea6e <log_1>
	params->func(conn, NULL, params);
    c314:	6873      	ldr	r3, [r6, #4]
    c316:	4632      	mov	r2, r6
    c318:	2100      	movs	r1, #0
    c31a:	4638      	mov	r0, r7
    c31c:	e755      	b.n	c1ca <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    c31e:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    c320:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    c322:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    c326:	b2a4      	uxth	r4, r4
    c328:	f108 0501 	add.w	r5, r8, #1
	u16_t handle = 0U;
    c32c:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    c330:	f898 3000 	ldrb.w	r3, [r8]
    c334:	42a3      	cmp	r3, r4
    c336:	f63f af63 	bhi.w	c200 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    c33a:	f8b5 b000 	ldrh.w	fp, [r5]
    c33e:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    c342:	f1b9 0f00 	cmp.w	r9, #0
    c346:	d0e5      	beq.n	c314 <gatt_read_type_rsp+0x160>
		switch (u.uuid.type) {
    c348:	f89d 3018 	ldrb.w	r3, [sp, #24]
    c34c:	2b00      	cmp	r3, #0
    c34e:	d032      	beq.n	c3b6 <gatt_read_type_rsp+0x202>
    c350:	2b02      	cmp	r3, #2
    c352:	d037      	beq.n	c3c4 <gatt_read_type_rsp+0x210>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    c354:	6831      	ldr	r1, [r6, #0]
    c356:	f10d 0a18 	add.w	sl, sp, #24
    c35a:	2900      	cmp	r1, #0
    c35c:	d139      	bne.n	c3d2 <gatt_read_type_rsp+0x21e>
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    c35e:	2300      	movs	r3, #0
    c360:	930f      	str	r3, [sp, #60]	; 0x3c
    c362:	930d      	str	r3, [sp, #52]	; 0x34
    c364:	f88d 300c 	strb.w	r3, [sp, #12]
    c368:	f642 0303 	movw	r3, #10243	; 0x2803
    c36c:	f8ad 300e 	strh.w	r3, [sp, #14]
    c370:	ab03      	add	r3, sp, #12
    c372:	930b      	str	r3, [sp, #44]	; 0x2c
    c374:	4b1e      	ldr	r3, [pc, #120]	; (c3f0 <gatt_read_type_rsp+0x23c>)
    c376:	930c      	str	r3, [sp, #48]	; 0x30
    c378:	f8cd a010 	str.w	sl, [sp, #16]
    c37c:	792a      	ldrb	r2, [r5, #4]
    c37e:	78eb      	ldrb	r3, [r5, #3]
		attr->handle = handle;
    c380:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    c384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c388:	f8ad 3014 	strh.w	r3, [sp, #20]
    c38c:	78ab      	ldrb	r3, [r5, #2]
    c38e:	f88d 3016 	strb.w	r3, [sp, #22]
    c392:	ab04      	add	r3, sp, #16
    c394:	930e      	str	r3, [sp, #56]	; 0x38
    c396:	2301      	movs	r3, #1
    c398:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    c39c:	4632      	mov	r2, r6
    c39e:	6873      	ldr	r3, [r6, #4]
    c3a0:	a90b      	add	r1, sp, #44	; 0x2c
    c3a2:	4638      	mov	r0, r7
    c3a4:	4798      	blx	r3
    c3a6:	2800      	cmp	r0, #0
    c3a8:	d096      	beq.n	c2d8 <gatt_read_type_rsp+0x124>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    c3aa:	f898 2000 	ldrb.w	r2, [r8]
    c3ae:	1aa4      	subs	r4, r4, r2
    c3b0:	b2a4      	uxth	r4, r4
    c3b2:	4415      	add	r5, r2
    c3b4:	e7bc      	b.n	c330 <gatt_read_type_rsp+0x17c>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    c3b6:	796b      	ldrb	r3, [r5, #5]
    c3b8:	79aa      	ldrb	r2, [r5, #6]
    c3ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c3be:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    c3c2:	e7c7      	b.n	c354 <gatt_read_type_rsp+0x1a0>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    c3c4:	2210      	movs	r2, #16
    c3c6:	1d69      	adds	r1, r5, #5
    c3c8:	f10d 0019 	add.w	r0, sp, #25
    c3cc:	f013 f914 	bl	1f5f8 <memcpy>
			break;
    c3d0:	e7c0      	b.n	c354 <gatt_read_type_rsp+0x1a0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    c3d2:	4650      	mov	r0, sl
    c3d4:	f013 fbf2 	bl	1fbbc <bt_uuid_cmp>
    c3d8:	2800      	cmp	r0, #0
    c3da:	d0c0      	beq.n	c35e <gatt_read_type_rsp+0x1aa>
    c3dc:	e7e5      	b.n	c3aa <gatt_read_type_rsp+0x1f6>
    c3de:	bf00      	nop
    c3e0:	0000c3f5 	.word	0x0000c3f5
    c3e4:	00025a6c 	.word	0x00025a6c
    c3e8:	00025b2c 	.word	0x00025b2c
    c3ec:	000288bd 	.word	0x000288bd
    c3f0:	00020d95 	.word	0x00020d95

0000c3f4 <read_included_uuid_cb>:
{
    c3f4:	b570      	push	{r4, r5, r6, lr}
    c3f6:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    c3f8:	2b10      	cmp	r3, #16
{
    c3fa:	4605      	mov	r5, r0
    c3fc:	4611      	mov	r1, r2
    c3fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
    c400:	d015      	beq.n	c42e <read_included_uuid_cb+0x3a>
		BT_ERR("Invalid data len %u", length);
    c402:	2101      	movs	r1, #1
    c404:	f04f 0200 	mov.w	r2, #0
    c408:	f361 0207 	bfi	r2, r1, #0, #8
    c40c:	4824      	ldr	r0, [pc, #144]	; (c4a0 <read_included_uuid_cb+0xac>)
    c40e:	4925      	ldr	r1, [pc, #148]	; (c4a4 <read_included_uuid_cb+0xb0>)
    c410:	1a40      	subs	r0, r0, r1
    c412:	08c0      	lsrs	r0, r0, #3
    c414:	f360 128f 	bfi	r2, r0, #6, #10
    c418:	4619      	mov	r1, r3
    c41a:	4823      	ldr	r0, [pc, #140]	; (c4a8 <read_included_uuid_cb+0xb4>)
    c41c:	f012 fb27 	bl	1ea6e <log_1>
		params->func(conn, NULL, params);
    c420:	6863      	ldr	r3, [r4, #4]
    c422:	4622      	mov	r2, r4
    c424:	2100      	movs	r1, #0
    c426:	4628      	mov	r0, r5
    c428:	4798      	blx	r3
}
    c42a:	b00e      	add	sp, #56	; 0x38
    c42c:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    c42e:	8962      	ldrh	r2, [r4, #10]
    c430:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
    c434:	89a2      	ldrh	r2, [r4, #12]
    c436:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
    c43a:	2202      	movs	r2, #2
    c43c:	f88d 2010 	strb.w	r2, [sp, #16]
	value.uuid = &u.uuid;
    c440:	ae04      	add	r6, sp, #16
	memcpy(u.u128.val, pdu, length);
    c442:	461a      	mov	r2, r3
    c444:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
    c448:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    c44a:	f013 f8d5 	bl	1f5f8 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    c44e:	6821      	ldr	r1, [r4, #0]
    c450:	b9f9      	cbnz	r1, c492 <read_included_uuid_cb+0x9e>
	attr = (&(struct bt_gatt_attr) {
    c452:	2210      	movs	r2, #16
    c454:	2100      	movs	r1, #0
    c456:	a80a      	add	r0, sp, #40	; 0x28
    c458:	f013 f8f8 	bl	1f64c <memset>
		.uuid = BT_UUID_GATT_INCLUDE,
    c45c:	2300      	movs	r3, #0
    c45e:	f88d 3004 	strb.w	r3, [sp, #4]
    c462:	f642 0302 	movw	r3, #10242	; 0x2802
    c466:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (&(struct bt_gatt_attr) {
    c46a:	ab01      	add	r3, sp, #4
    c46c:	9309      	str	r3, [sp, #36]	; 0x24
    c46e:	ab02      	add	r3, sp, #8
    c470:	930c      	str	r3, [sp, #48]	; 0x30
	attr->handle = params->_included.attr_handle;
    c472:	8923      	ldrh	r3, [r4, #8]
    c474:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    c478:	4622      	mov	r2, r4
    c47a:	6863      	ldr	r3, [r4, #4]
    c47c:	a909      	add	r1, sp, #36	; 0x24
    c47e:	4628      	mov	r0, r5
    c480:	4798      	blx	r3
    c482:	2800      	cmp	r0, #0
    c484:	d0d1      	beq.n	c42a <read_included_uuid_cb+0x36>
	gatt_discover_next(conn, params->start_handle, params);
    c486:	4622      	mov	r2, r4
    c488:	8921      	ldrh	r1, [r4, #8]
    c48a:	4628      	mov	r0, r5
    c48c:	f014 fcec 	bl	20e68 <gatt_discover_next>
	return;
    c490:	e7cb      	b.n	c42a <read_included_uuid_cb+0x36>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    c492:	4630      	mov	r0, r6
    c494:	f013 fb92 	bl	1fbbc <bt_uuid_cmp>
    c498:	2800      	cmp	r0, #0
    c49a:	d0da      	beq.n	c452 <read_included_uuid_cb+0x5e>
    c49c:	e7f3      	b.n	c486 <read_included_uuid_cb+0x92>
    c49e:	bf00      	nop
    c4a0:	00025b2c 	.word	0x00025b2c
    c4a4:	00025a6c 	.word	0x00025a6c
    c4a8:	000288bd 	.word	0x000288bd

0000c4ac <gatt_find_info_rsp>:
{
    c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4b0:	b091      	sub	sp, #68	; 0x44
    c4b2:	4682      	mov	sl, r0
    c4b4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	if (err) {
    c4b6:	4608      	mov	r0, r1
    c4b8:	b991      	cbnz	r1, c4e0 <gatt_find_info_rsp+0x34>
	switch (rsp->format) {
    c4ba:	7811      	ldrb	r1, [r2, #0]
    c4bc:	2901      	cmp	r1, #1
    c4be:	d015      	beq.n	c4ec <gatt_find_info_rsp+0x40>
    c4c0:	2902      	cmp	r1, #2
    c4c2:	d029      	beq.n	c518 <gatt_find_info_rsp+0x6c>
		BT_ERR("Invalid format %u", rsp->format);
    c4c4:	2301      	movs	r3, #1
    c4c6:	f04f 0200 	mov.w	r2, #0
    c4ca:	f363 0207 	bfi	r2, r3, #0, #8
    c4ce:	484b      	ldr	r0, [pc, #300]	; (c5fc <gatt_find_info_rsp+0x150>)
    c4d0:	4b4b      	ldr	r3, [pc, #300]	; (c600 <gatt_find_info_rsp+0x154>)
    c4d2:	1a1b      	subs	r3, r3, r0
    c4d4:	08db      	lsrs	r3, r3, #3
    c4d6:	f363 128f 	bfi	r2, r3, #6, #10
    c4da:	484a      	ldr	r0, [pc, #296]	; (c604 <gatt_find_info_rsp+0x158>)
    c4dc:	f012 fac7 	bl	1ea6e <log_1>
	params->func(conn, NULL, params);
    c4e0:	6873      	ldr	r3, [r6, #4]
    c4e2:	4632      	mov	r2, r6
    c4e4:	2100      	movs	r1, #0
    c4e6:	4650      	mov	r0, sl
    c4e8:	4798      	blx	r3
    c4ea:	e084      	b.n	c5f6 <gatt_find_info_rsp+0x14a>
		u.uuid.type = BT_UUID_TYPE_16;
    c4ec:	f88d 0018 	strb.w	r0, [sp, #24]
		len = sizeof(*info.i16);
    c4f0:	f04f 0804 	mov.w	r8, #4
	length--;
    c4f4:	1e5c      	subs	r4, r3, #1
    c4f6:	b2a4      	uxth	r4, r4
	if (length < len) {
    c4f8:	4544      	cmp	r4, r8
    c4fa:	d3f1      	bcc.n	c4e0 <gatt_find_info_rsp+0x34>
	for (i = length / len, pdu = rsp->info; i != 0;
    c4fc:	fbb4 f4f8 	udiv	r4, r4, r8
	bool skip = false;
    c500:	2300      	movs	r3, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    c502:	1c55      	adds	r5, r2, #1
	u16_t handle = 0U;
    c504:	9301      	str	r3, [sp, #4]
    c506:	af06      	add	r7, sp, #24
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    c508:	4699      	mov	r9, r3
	for (i = length / len, pdu = rsp->info; i != 0;
    c50a:	b954      	cbnz	r4, c522 <gatt_find_info_rsp+0x76>
	gatt_discover_next(conn, handle, params);
    c50c:	4632      	mov	r2, r6
    c50e:	9901      	ldr	r1, [sp, #4]
    c510:	4650      	mov	r0, sl
    c512:	f014 fca9 	bl	20e68 <gatt_discover_next>
	return;
    c516:	e06e      	b.n	c5f6 <gatt_find_info_rsp+0x14a>
		u.uuid.type = BT_UUID_TYPE_128;
    c518:	f88d 1018 	strb.w	r1, [sp, #24]
		len = sizeof(*info.i128);
    c51c:	f04f 0812 	mov.w	r8, #18
		break;
    c520:	e7e8      	b.n	c4f4 <gatt_find_info_rsp+0x48>
		handle = sys_le16_to_cpu(info.i16->handle);
    c522:	f8b5 b000 	ldrh.w	fp, [r5]
    c526:	fa1f f28b 	uxth.w	r2, fp
    c52a:	9201      	str	r2, [sp, #4]
		if (skip) {
    c52c:	b11b      	cbz	r3, c536 <gatt_find_info_rsp+0x8a>
			skip = false;
    c52e:	2300      	movs	r3, #0
	     i--, pdu = (const u8_t *)pdu + len) {
    c530:	3c01      	subs	r4, #1
    c532:	4445      	add	r5, r8
    c534:	e7e9      	b.n	c50a <gatt_find_info_rsp+0x5e>
		switch (u.uuid.type) {
    c536:	f89d 3018 	ldrb.w	r3, [sp, #24]
    c53a:	2b00      	cmp	r3, #0
    c53c:	d038      	beq.n	c5b0 <gatt_find_info_rsp+0x104>
    c53e:	2b02      	cmp	r3, #2
    c540:	d03d      	beq.n	c5be <gatt_find_info_rsp+0x112>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    c542:	6831      	ldr	r1, [r6, #0]
    c544:	2900      	cmp	r1, #0
    c546:	d141      	bne.n	c5cc <gatt_find_info_rsp+0x120>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    c548:	7c33      	ldrb	r3, [r6, #16]
    c54a:	2b04      	cmp	r3, #4
    c54c:	d144      	bne.n	c5d8 <gatt_find_info_rsp+0x12c>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    c54e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c552:	a902      	add	r1, sp, #8
    c554:	4638      	mov	r0, r7
    c556:	f88d 9008 	strb.w	r9, [sp, #8]
    c55a:	f8ad 300a 	strh.w	r3, [sp, #10]
    c55e:	f013 fb2d 	bl	1fbbc <bt_uuid_cmp>
    c562:	2800      	cmp	r0, #0
    c564:	d0e3      	beq.n	c52e <gatt_find_info_rsp+0x82>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    c566:	f642 0301 	movw	r3, #10241	; 0x2801
    c56a:	a903      	add	r1, sp, #12
    c56c:	4638      	mov	r0, r7
    c56e:	f88d 900c 	strb.w	r9, [sp, #12]
    c572:	f8ad 300e 	strh.w	r3, [sp, #14]
    c576:	f013 fb21 	bl	1fbbc <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    c57a:	2800      	cmp	r0, #0
    c57c:	d0d7      	beq.n	c52e <gatt_find_info_rsp+0x82>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    c57e:	f642 0302 	movw	r3, #10242	; 0x2802
    c582:	a904      	add	r1, sp, #16
    c584:	4638      	mov	r0, r7
    c586:	f88d 9010 	strb.w	r9, [sp, #16]
    c58a:	f8ad 3012 	strh.w	r3, [sp, #18]
    c58e:	f013 fb15 	bl	1fbbc <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    c592:	2800      	cmp	r0, #0
    c594:	d0cb      	beq.n	c52e <gatt_find_info_rsp+0x82>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    c596:	f642 0303 	movw	r3, #10243	; 0x2803
    c59a:	a905      	add	r1, sp, #20
    c59c:	4638      	mov	r0, r7
    c59e:	f88d 9014 	strb.w	r9, [sp, #20]
    c5a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    c5a6:	f013 fb09 	bl	1fbbc <bt_uuid_cmp>
    c5aa:	b9a8      	cbnz	r0, c5d8 <gatt_find_info_rsp+0x12c>
				skip = true;
    c5ac:	2301      	movs	r3, #1
    c5ae:	e7bf      	b.n	c530 <gatt_find_info_rsp+0x84>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    c5b0:	78ab      	ldrb	r3, [r5, #2]
    c5b2:	78ea      	ldrb	r2, [r5, #3]
    c5b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c5b8:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    c5bc:	e7c1      	b.n	c542 <gatt_find_info_rsp+0x96>
			memcpy(u.u128.val, info.i128->uuid, 16);
    c5be:	2210      	movs	r2, #16
    c5c0:	1ca9      	adds	r1, r5, #2
    c5c2:	f10d 0019 	add.w	r0, sp, #25
    c5c6:	f013 f817 	bl	1f5f8 <memcpy>
			break;
    c5ca:	e7ba      	b.n	c542 <gatt_find_info_rsp+0x96>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    c5cc:	4638      	mov	r0, r7
    c5ce:	f013 faf5 	bl	1fbbc <bt_uuid_cmp>
    c5d2:	2800      	cmp	r0, #0
    c5d4:	d0b8      	beq.n	c548 <gatt_find_info_rsp+0x9c>
    c5d6:	e7aa      	b.n	c52e <gatt_find_info_rsp+0x82>
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    c5d8:	2210      	movs	r2, #16
    c5da:	2100      	movs	r1, #0
    c5dc:	a80c      	add	r0, sp, #48	; 0x30
    c5de:	f013 f835 	bl	1f64c <memset>
    c5e2:	970b      	str	r7, [sp, #44]	; 0x2c
		attr->handle = handle;
    c5e4:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    c5e8:	6873      	ldr	r3, [r6, #4]
    c5ea:	4632      	mov	r2, r6
    c5ec:	a90b      	add	r1, sp, #44	; 0x2c
    c5ee:	4650      	mov	r0, sl
    c5f0:	4798      	blx	r3
    c5f2:	2800      	cmp	r0, #0
    c5f4:	d19b      	bne.n	c52e <gatt_find_info_rsp+0x82>
}
    c5f6:	b011      	add	sp, #68	; 0x44
    c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5fc:	00025a6c 	.word	0x00025a6c
    c600:	00025b2c 	.word	0x00025b2c
    c604:	0002885b 	.word	0x0002885b

0000c608 <bt_gatt_read>:
	if (conn->state != BT_CONN_CONNECTED) {
    c608:	7b43      	ldrb	r3, [r0, #13]
    c60a:	2b06      	cmp	r3, #6
{
    c60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c610:	4605      	mov	r5, r0
    c612:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    c614:	d166      	bne.n	c6e4 <bt_gatt_read+0xdc>
	if (params->handle_count == 0) {
    c616:	684a      	ldr	r2, [r1, #4]
    c618:	bb1a      	cbnz	r2, c662 <bt_gatt_read+0x5a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    c61a:	2204      	movs	r2, #4
    c61c:	2108      	movs	r1, #8
    c61e:	f7fd fc5d 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    c622:	4606      	mov	r6, r0
    c624:	b918      	cbnz	r0, c62e <bt_gatt_read+0x26>
		return -ENOMEM;
    c626:	f06f 000b 	mvn.w	r0, #11
}
    c62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req = net_buf_add(buf, sizeof(*req));
    c62e:	f100 0708 	add.w	r7, r0, #8
    c632:	2104      	movs	r1, #4
    c634:	4638      	mov	r0, r7
    c636:	f015 fffd 	bl	22634 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
    c63a:	8923      	ldrh	r3, [r4, #8]
    c63c:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    c63e:	68e1      	ldr	r1, [r4, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
    c640:	8963      	ldrh	r3, [r4, #10]
    c642:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    c644:	780b      	ldrb	r3, [r1, #0]
    c646:	b933      	cbnz	r3, c656 <bt_gatt_read+0x4e>
		net_buf_add_le16(buf, BT_UUID_16(params->by_uuid.uuid)->val);
    c648:	8849      	ldrh	r1, [r1, #2]
    c64a:	4638      	mov	r0, r7
    c64c:	f016 f809 	bl	22662 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    c650:	4623      	mov	r3, r4
    c652:	4a26      	ldr	r2, [pc, #152]	; (c6ec <bt_gatt_read+0xe4>)
    c654:	e019      	b.n	c68a <bt_gatt_read+0x82>
		net_buf_add_mem(buf, BT_UUID_128(params->by_uuid.uuid)->val, 16);
    c656:	2210      	movs	r2, #16
    c658:	3101      	adds	r1, #1
    c65a:	4638      	mov	r0, r7
    c65c:	f015 fff0 	bl	22640 <net_buf_simple_add_mem>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    c660:	e7f6      	b.n	c650 <bt_gatt_read+0x48>
	if (params->handle_count > 1) {
    c662:	2a01      	cmp	r2, #1
    c664:	d91e      	bls.n	c6a4 <bt_gatt_read+0x9c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
    c666:	0052      	lsls	r2, r2, #1
    c668:	210e      	movs	r1, #14
    c66a:	f7fd fc37 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    c66e:	4606      	mov	r6, r0
    c670:	2800      	cmp	r0, #0
    c672:	d0d8      	beq.n	c626 <bt_gatt_read+0x1e>
    c674:	2700      	movs	r7, #0
		net_buf_add_le16(buf, params->handles[i]);
    c676:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
    c67a:	6862      	ldr	r2, [r4, #4]
    c67c:	b2fb      	uxtb	r3, r7
    c67e:	429a      	cmp	r2, r3
    c680:	f107 0701 	add.w	r7, r7, #1
    c684:	d807      	bhi.n	c696 <bt_gatt_read+0x8e>
	return gatt_send(conn, buf, gatt_read_multiple_rsp, params, NULL);
    c686:	4a1a      	ldr	r2, [pc, #104]	; (c6f0 <bt_gatt_read+0xe8>)
    c688:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    c68a:	4631      	mov	r1, r6
    c68c:	4628      	mov	r0, r5
}
    c68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    c692:	f7fe bc11 	b.w	aeb8 <gatt_send.constprop.37>
		net_buf_add_le16(buf, params->handles[i]);
    c696:	68a2      	ldr	r2, [r4, #8]
    c698:	4640      	mov	r0, r8
    c69a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    c69e:	f015 ffe0 	bl	22662 <net_buf_simple_add_le16>
    c6a2:	e7ea      	b.n	c67a <bt_gatt_read+0x72>
	if (params->single.offset) {
    c6a4:	894b      	ldrh	r3, [r1, #10]
    c6a6:	b17b      	cbz	r3, c6c8 <bt_gatt_read+0xc0>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
    c6a8:	2204      	movs	r2, #4
    c6aa:	210c      	movs	r1, #12
    c6ac:	f7fd fc16 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    c6b0:	4606      	mov	r6, r0
    c6b2:	2800      	cmp	r0, #0
    c6b4:	d0b7      	beq.n	c626 <bt_gatt_read+0x1e>
	req = net_buf_add(buf, sizeof(*req));
    c6b6:	2104      	movs	r1, #4
    c6b8:	3008      	adds	r0, #8
    c6ba:	f015 ffbb 	bl	22634 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    c6be:	8923      	ldrh	r3, [r4, #8]
    c6c0:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
    c6c2:	8963      	ldrh	r3, [r4, #10]
    c6c4:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    c6c6:	e7c3      	b.n	c650 <bt_gatt_read+0x48>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    c6c8:	2202      	movs	r2, #2
    c6ca:	210a      	movs	r1, #10
    c6cc:	f7fd fc06 	bl	9edc <bt_att_create_pdu>
	if (!buf) {
    c6d0:	4606      	mov	r6, r0
    c6d2:	2800      	cmp	r0, #0
    c6d4:	d0a7      	beq.n	c626 <bt_gatt_read+0x1e>
	req = net_buf_add(buf, sizeof(*req));
    c6d6:	2102      	movs	r1, #2
    c6d8:	3008      	adds	r0, #8
    c6da:	f015 ffab 	bl	22634 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    c6de:	8923      	ldrh	r3, [r4, #8]
    c6e0:	8003      	strh	r3, [r0, #0]
    c6e2:	e7b5      	b.n	c650 <bt_gatt_read+0x48>
		return -ENOTCONN;
    c6e4:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c6e8:	e79f      	b.n	c62a <bt_gatt_read+0x22>
    c6ea:	bf00      	nop
    c6ec:	0000c6f5 	.word	0x0000c6f5
    c6f0:	00020a41 	.word	0x00020a41

0000c6f4 <gatt_read_rsp>:
{
    c6f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c6f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c6fa:	4606      	mov	r6, r0
    c6fc:	4690      	mov	r8, r2
    c6fe:	4699      	mov	r9, r3
	if (err || !length) {
    c700:	460f      	mov	r7, r1
    c702:	b901      	cbnz	r1, c706 <gatt_read_rsp+0x12>
    c704:	b953      	cbnz	r3, c71c <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
    c706:	2300      	movs	r3, #0
    c708:	930a      	str	r3, [sp, #40]	; 0x28
    c70a:	6825      	ldr	r5, [r4, #0]
    c70c:	4622      	mov	r2, r4
    c70e:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    c710:	4630      	mov	r0, r6
    c712:	46ac      	mov	ip, r5
}
    c714:	b003      	add	sp, #12
    c716:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    c71a:	4760      	bx	ip
	if (!params->handle_count) {
    c71c:	6863      	ldr	r3, [r4, #4]
    c71e:	2b00      	cmp	r3, #0
    c720:	d14d      	bne.n	c7be <gatt_read_rsp+0xca>
	for (length--, pdu = rsp->data; length;
    c722:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    c726:	b2ad      	uxth	r5, r5
    c728:	f102 0901 	add.w	r9, r2, #1
    c72c:	b35d      	cbz	r5, c786 <gatt_read_rsp+0x92>
		handle = sys_le16_to_cpu(data->handle);
    c72e:	f8b9 2000 	ldrh.w	r2, [r9]
    c732:	b293      	uxth	r3, r2
		if (!handle) {
    c734:	b983      	cbnz	r3, c758 <gatt_read_rsp+0x64>
			BT_ERR("Invalid handle");
    c736:	2301      	movs	r3, #1
    c738:	f04f 0100 	mov.w	r1, #0
    c73c:	f363 0107 	bfi	r1, r3, #0, #8
    c740:	4a30      	ldr	r2, [pc, #192]	; (c804 <gatt_read_rsp+0x110>)
    c742:	4b31      	ldr	r3, [pc, #196]	; (c808 <gatt_read_rsp+0x114>)
    c744:	4831      	ldr	r0, [pc, #196]	; (c80c <gatt_read_rsp+0x118>)
    c746:	1a9b      	subs	r3, r3, r2
    c748:	08db      	lsrs	r3, r3, #3
    c74a:	f363 118f 	bfi	r1, r3, #6, #10
}
    c74e:	b003      	add	sp, #12
    c750:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
    c754:	f012 b97e 	b.w	1ea54 <log_0>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    c758:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
    c75c:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    c75e:	42ab      	cmp	r3, r5
    c760:	bf8c      	ite	hi
    c762:	1eab      	subhi	r3, r5, #2
    c764:	3b02      	subls	r3, #2
    c766:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
    c768:	9300      	str	r3, [sp, #0]
    c76a:	6827      	ldr	r7, [r4, #0]
    c76c:	f109 0302 	add.w	r3, r9, #2
    c770:	4622      	mov	r2, r4
    c772:	2100      	movs	r1, #0
    c774:	4630      	mov	r0, r6
    c776:	47b8      	blx	r7
    c778:	2800      	cmp	r0, #0
    c77a:	d03f      	beq.n	c7fc <gatt_read_rsp+0x108>
		if (rsp->len > length) {
    c77c:	f898 1000 	ldrb.w	r1, [r8]
    c780:	b28b      	uxth	r3, r1
    c782:	429d      	cmp	r5, r3
    c784:	d20b      	bcs.n	c79e <gatt_read_rsp+0xaa>
	if (bt_gatt_read(conn, params) < 0) {
    c786:	4621      	mov	r1, r4
    c788:	4630      	mov	r0, r6
    c78a:	f7ff ff3d 	bl	c608 <bt_gatt_read>
    c78e:	2800      	cmp	r0, #0
    c790:	da34      	bge.n	c7fc <gatt_read_rsp+0x108>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    c792:	2300      	movs	r3, #0
    c794:	930a      	str	r3, [sp, #40]	; 0x28
    c796:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    c798:	4622      	mov	r2, r4
    c79a:	210e      	movs	r1, #14
    c79c:	e7b8      	b.n	c710 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
    c79e:	8922      	ldrh	r2, [r4, #8]
    c7a0:	8960      	ldrh	r0, [r4, #10]
    c7a2:	4290      	cmp	r0, r2
    c7a4:	d105      	bne.n	c7b2 <gatt_read_rsp+0xbe>
			params->func(conn, 0, params, NULL, 0);
    c7a6:	2300      	movs	r3, #0
    c7a8:	930a      	str	r3, [sp, #40]	; 0x28
    c7aa:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
    c7ac:	4622      	mov	r2, r4
    c7ae:	4619      	mov	r1, r3
    c7b0:	e7ae      	b.n	c710 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
    c7b2:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    c7b4:	1aed      	subs	r5, r5, r3
		params->by_uuid.start_handle++;
    c7b6:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    c7b8:	b2ad      	uxth	r5, r5
    c7ba:	4489      	add	r9, r1
    c7bc:	e7b6      	b.n	c72c <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
    c7be:	f8cd 9000 	str.w	r9, [sp]
    c7c2:	4613      	mov	r3, r2
    c7c4:	6825      	ldr	r5, [r4, #0]
    c7c6:	4622      	mov	r2, r4
    c7c8:	47a8      	blx	r5
    c7ca:	b1b8      	cbz	r0, c7fc <gatt_read_rsp+0x108>
	if (length < (bt_att_get_mtu(conn) - 1)) {
    c7cc:	4630      	mov	r0, r6
    c7ce:	f013 ff9b 	bl	20708 <bt_att_get_mtu>
    c7d2:	3801      	subs	r0, #1
    c7d4:	4581      	cmp	r9, r0
    c7d6:	da03      	bge.n	c7e0 <gatt_read_rsp+0xec>
		params->func(conn, 0, params, NULL, 0);
    c7d8:	970a      	str	r7, [sp, #40]	; 0x28
    c7da:	6825      	ldr	r5, [r4, #0]
    c7dc:	463b      	mov	r3, r7
    c7de:	e7e5      	b.n	c7ac <gatt_read_rsp+0xb8>
	params->single.offset += length;
    c7e0:	8963      	ldrh	r3, [r4, #10]
    c7e2:	eb09 0503 	add.w	r5, r9, r3
    c7e6:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
    c7e8:	4621      	mov	r1, r4
    c7ea:	4630      	mov	r0, r6
    c7ec:	f7ff ff0c 	bl	c608 <bt_gatt_read>
    c7f0:	2800      	cmp	r0, #0
    c7f2:	da03      	bge.n	c7fc <gatt_read_rsp+0x108>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    c7f4:	970a      	str	r7, [sp, #40]	; 0x28
    c7f6:	6825      	ldr	r5, [r4, #0]
    c7f8:	463b      	mov	r3, r7
    c7fa:	e7cd      	b.n	c798 <gatt_read_rsp+0xa4>
}
    c7fc:	b003      	add	sp, #12
    c7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c802:	bf00      	nop
    c804:	00025a6c 	.word	0x00025a6c
    c808:	00025b2c 	.word	0x00025b2c
    c80c:	000288d1 	.word	0x000288d1

0000c810 <bt_gatt_connected>:
{
    c810:	b570      	push	{r4, r5, r6, lr}
    c812:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c814:	f100 0670 	add.w	r6, r0, #112	; 0x70
{
    c818:	4605      	mov	r5, r0
	data.conn = conn;
    c81a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    c81c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c81e:	4631      	mov	r1, r6
    c820:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    c822:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c826:	f013 fafe 	bl	1fe26 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    c82a:	b190      	cbz	r0, c852 <bt_gatt_connected+0x42>
		if (conn->id) {
    c82c:	7a2a      	ldrb	r2, [r5, #8]
    c82e:	b362      	cbz	r2, c88a <bt_gatt_connected+0x7a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    c830:	ac02      	add	r4, sp, #8
    c832:	2104      	movs	r1, #4
    c834:	4620      	mov	r0, r4
    c836:	f010 fbff 	bl	1d038 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c83a:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c83c:	4a1d      	ldr	r2, [pc, #116]	; (c8b4 <bt_gatt_connected+0xa4>)
    c83e:	2124      	movs	r1, #36	; 0x24
    c840:	a805      	add	r0, sp, #20
    c842:	4633      	mov	r3, r6
    c844:	f7f9 fdf6 	bl	6434 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    c848:	aa05      	add	r2, sp, #20
    c84a:	491b      	ldr	r1, [pc, #108]	; (c8b8 <bt_gatt_connected+0xa8>)
    c84c:	4610      	mov	r0, r2
    c84e:	f7f7 fb59 	bl	3f04 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c852:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c856:	ab03      	add	r3, sp, #12
    c858:	4a18      	ldr	r2, [pc, #96]	; (c8bc <bt_gatt_connected+0xac>)
    c85a:	2001      	movs	r0, #1
    c85c:	f014 facb 	bl	20df6 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    c860:	4628      	mov	r0, r5
    c862:	f013 fb86 	bl	1ff72 <bt_conn_get_security>
    c866:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    c86a:	4288      	cmp	r0, r1
    c86c:	d202      	bcs.n	c874 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    c86e:	4628      	mov	r0, r5
    c870:	f013 fb4c 	bl	1ff0c <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    c874:	2100      	movs	r1, #0
    c876:	4628      	mov	r0, r5
    c878:	f7fe fce6 	bl	b248 <gatt_sub_find_free>
	if (!sub) {
    c87c:	b118      	cbz	r0, c886 <bt_gatt_connected+0x76>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    c87e:	6884      	ldr	r4, [r0, #8]
    c880:	b10c      	cbz	r4, c886 <bt_gatt_connected+0x76>
    c882:	3c10      	subs	r4, #16
    c884:	b91c      	cbnz	r4, c88e <bt_gatt_connected+0x7e>
}
    c886:	b00e      	add	sp, #56	; 0x38
    c888:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c88a:	9200      	str	r2, [sp, #0]
    c88c:	e7d6      	b.n	c83c <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    c88e:	4631      	mov	r1, r6
    c890:	7a28      	ldrb	r0, [r5, #8]
    c892:	f013 fac8 	bl	1fe26 <bt_addr_le_is_bonded>
    c896:	b158      	cbz	r0, c8b0 <bt_gatt_connected+0xa0>
		    !atomic_test_bit(params->flags,
    c898:	2101      	movs	r1, #1
    c89a:	f104 000c 	add.w	r0, r4, #12
    c89e:	f014 f8b7 	bl	20a10 <atomic_test_bit>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    c8a2:	b928      	cbnz	r0, c8b0 <bt_gatt_connected+0xa0>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    c8a4:	4623      	mov	r3, r4
    c8a6:	8922      	ldrh	r2, [r4, #8]
    c8a8:	88e1      	ldrh	r1, [r4, #6]
    c8aa:	4628      	mov	r0, r5
    c8ac:	f7fe fc98 	bl	b1e0 <gatt_write_ccc.constprop.33>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c8b0:	6924      	ldr	r4, [r4, #16]
    c8b2:	e7e5      	b.n	c880 <bt_gatt_connected+0x70>
    c8b4:	0002877d 	.word	0x0002877d
    c8b8:	0000baf5 	.word	0x0000baf5
    c8bc:	0000bd71 	.word	0x0000bd71

0000c8c0 <bt_gatt_encrypt_change>:
{
    c8c0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c8c2:	4a06      	ldr	r2, [pc, #24]	; (c8dc <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    c8c4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c8c6:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    c8c8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c8ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    c8ce:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c8d2:	f014 fa90 	bl	20df6 <bt_gatt_foreach_attr>
}
    c8d6:	b003      	add	sp, #12
    c8d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c8dc:	0000bd71 	.word	0x0000bd71

0000c8e0 <db_hash_read>:
{
    c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8e2:	4604      	mov	r4, r0
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
    c8e4:	4815      	ldr	r0, [pc, #84]	; (c93c <db_hash_read+0x5c>)
    c8e6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    c8ea:	461f      	mov	r7, r3
    c8ec:	4616      	mov	r6, r2
    c8ee:	f010 fa15 	bl	1cd1c <z_timeout_remaining>
    c8f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c8f6:	fb80 0103 	smull	r0, r1, r0, r3
    c8fa:	0bc3      	lsrs	r3, r0, #15
	if (k_delayed_work_remaining_get(&db_hash_work)) {
    c8fc:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    c900:	d005      	beq.n	c90e <db_hash_read+0x2e>
		k_delayed_work_cancel(&db_hash_work);
    c902:	480f      	ldr	r0, [pc, #60]	; (c940 <db_hash_read+0x60>)
    c904:	f018 fdb9 	bl	2547a <k_delayed_work_cancel>
		db_hash_gen(true);
    c908:	2001      	movs	r0, #1
    c90a:	f7ff f83b 	bl	b984 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    c90e:	2101      	movs	r1, #1
    c910:	4620      	mov	r0, r4
    c912:	f014 fbad 	bl	21070 <bt_gatt_change_aware>
	if (offset > value_len) {
    c916:	2d10      	cmp	r5, #16
    c918:	d80c      	bhi.n	c934 <db_hash_read+0x54>
	len = MIN(buf_len, value_len - offset);
    c91a:	f1c5 0410 	rsb	r4, r5, #16
    c91e:	42bc      	cmp	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    c920:	4908      	ldr	r1, [pc, #32]	; (c944 <db_hash_read+0x64>)
	len = MIN(buf_len, value_len - offset);
    c922:	bfa8      	it	ge
    c924:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    c926:	4622      	mov	r2, r4
    c928:	4429      	add	r1, r5
    c92a:	4630      	mov	r0, r6
    c92c:	f012 fe64 	bl	1f5f8 <memcpy>
}
    c930:	4620      	mov	r0, r4
    c932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c934:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    c938:	e7fa      	b.n	c930 <db_hash_read+0x50>
    c93a:	bf00      	nop
    c93c:	20000478 	.word	0x20000478
    c940:	2000046c 	.word	0x2000046c
    c944:	2000a521 	.word	0x2000a521

0000c948 <bt_gatt_store_ccc>:
{
    c948:	b570      	push	{r4, r5, r6, lr}
    c94a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    c94c:	2300      	movs	r3, #0
{
    c94e:	4604      	mov	r4, r0
    c950:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    c952:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    c954:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    c958:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    c95a:	4a1a      	ldr	r2, [pc, #104]	; (c9c4 <bt_gatt_store_ccc+0x7c>)
    c95c:	ab0d      	add	r3, sp, #52	; 0x34
    c95e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c962:	2001      	movs	r0, #1
    c964:	f014 fa47 	bl	20df6 <bt_gatt_foreach_attr>
	if (id) {
    c968:	b33c      	cbz	r4, c9ba <bt_gatt_store_ccc+0x72>
		u8_to_dec(id_str, sizeof(id_str), id);
    c96a:	ae03      	add	r6, sp, #12
    c96c:	4622      	mov	r2, r4
    c96e:	2104      	movs	r1, #4
    c970:	4630      	mov	r0, r6
    c972:	f010 fb61 	bl	1d038 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc",
    c976:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc",
    c978:	4a13      	ldr	r2, [pc, #76]	; (c9c8 <bt_gatt_store_ccc+0x80>)
    c97a:	462b      	mov	r3, r5
    c97c:	2124      	movs	r1, #36	; 0x24
    c97e:	a804      	add	r0, sp, #16
    c980:	f7f9 fd58 	bl	6434 <bt_settings_encode_key>
	if (save.count) {
    c984:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    c986:	b1d2      	cbz	r2, c9be <bt_gatt_store_ccc+0x76>
		len = save.count * sizeof(*save.store);
    c988:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    c98a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    c98c:	a804      	add	r0, sp, #16
    c98e:	f7f7 fa4d 	bl	3e2c <settings_save_one>
	if (err) {
    c992:	4604      	mov	r4, r0
    c994:	b170      	cbz	r0, c9b4 <bt_gatt_store_ccc+0x6c>
		BT_ERR("Failed to store CCCs (err %d)", err);
    c996:	2301      	movs	r3, #1
    c998:	f04f 0200 	mov.w	r2, #0
    c99c:	f363 0207 	bfi	r2, r3, #0, #8
    c9a0:	490a      	ldr	r1, [pc, #40]	; (c9cc <bt_gatt_store_ccc+0x84>)
    c9a2:	4b0b      	ldr	r3, [pc, #44]	; (c9d0 <bt_gatt_store_ccc+0x88>)
    c9a4:	1a5b      	subs	r3, r3, r1
    c9a6:	08db      	lsrs	r3, r3, #3
    c9a8:	4601      	mov	r1, r0
    c9aa:	f363 128f 	bfi	r2, r3, #6, #10
    c9ae:	4809      	ldr	r0, [pc, #36]	; (c9d4 <bt_gatt_store_ccc+0x8c>)
    c9b0:	f012 f85d 	bl	1ea6e <log_1>
}
    c9b4:	4620      	mov	r0, r4
    c9b6:	b040      	add	sp, #256	; 0x100
    c9b8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc",
    c9ba:	9400      	str	r4, [sp, #0]
    c9bc:	e7dc      	b.n	c978 <bt_gatt_store_ccc+0x30>
		str = NULL;
    c9be:	4611      	mov	r1, r2
    c9c0:	e7e4      	b.n	c98c <bt_gatt_store_ccc+0x44>
    c9c2:	bf00      	nop
    c9c4:	0000b051 	.word	0x0000b051
    c9c8:	0002877d 	.word	0x0002877d
    c9cc:	00025a6c 	.word	0x00025a6c
    c9d0:	00025b2c 	.word	0x00025b2c
    c9d4:	0002875c 	.word	0x0002875c

0000c9d8 <bt_gatt_disconnected>:
{
    c9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9dc:	4604      	mov	r4, r0
    c9de:	b08c      	sub	sp, #48	; 0x30
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    c9e0:	4603      	mov	r3, r0
    c9e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c9e6:	2001      	movs	r0, #1
    c9e8:	4a49      	ldr	r2, [pc, #292]	; (cb10 <bt_gatt_disconnected+0x138>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c9ea:	f104 0570 	add.w	r5, r4, #112	; 0x70
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    c9ee:	f014 fa02 	bl	20df6 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c9f2:	4629      	mov	r1, r5
    c9f4:	7a20      	ldrb	r0, [r4, #8]
    c9f6:	f013 fa16 	bl	1fe26 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d039      	beq.n	ca72 <bt_gatt_disconnected+0x9a>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    c9fe:	4629      	mov	r1, r5
    ca00:	7a20      	ldrb	r0, [r4, #8]
    ca02:	f7ff ffa1 	bl	c948 <bt_gatt_store_ccc>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    ca06:	4620      	mov	r0, r4
    ca08:	f7fe fdbe 	bl	b588 <find_cf_cfg.part.10>
	if (!cfg) {
    ca0c:	4606      	mov	r6, r0
    ca0e:	2800      	cmp	r0, #0
    ca10:	d054      	beq.n	cabc <bt_gatt_disconnected+0xe4>
		if (conn->id) {
    ca12:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    ca14:	3608      	adds	r6, #8
		if (conn->id) {
    ca16:	2a00      	cmp	r2, #0
    ca18:	d052      	beq.n	cac0 <bt_gatt_disconnected+0xe8>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    ca1a:	af02      	add	r7, sp, #8
    ca1c:	2104      	movs	r1, #4
    ca1e:	4638      	mov	r0, r7
    ca20:	f010 fb0a 	bl	1d038 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    ca24:	9700      	str	r7, [sp, #0]
    ca26:	462b      	mov	r3, r5
    ca28:	4a3a      	ldr	r2, [pc, #232]	; (cb14 <bt_gatt_disconnected+0x13c>)
    ca2a:	2124      	movs	r1, #36	; 0x24
    ca2c:	a803      	add	r0, sp, #12
    ca2e:	f7f9 fd01 	bl	6434 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    ca32:	7a23      	ldrb	r3, [r4, #8]
    ca34:	2701      	movs	r7, #1
    ca36:	b93b      	cbnz	r3, ca48 <bt_gatt_disconnected+0x70>
		bt_settings_encode_key(key, sizeof(key), "cf",
    ca38:	2300      	movs	r3, #0
    ca3a:	9300      	str	r3, [sp, #0]
    ca3c:	4a35      	ldr	r2, [pc, #212]	; (cb14 <bt_gatt_disconnected+0x13c>)
    ca3e:	462b      	mov	r3, r5
    ca40:	2124      	movs	r1, #36	; 0x24
    ca42:	a803      	add	r0, sp, #12
    ca44:	f7f9 fcf6 	bl	6434 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    ca48:	4631      	mov	r1, r6
    ca4a:	463a      	mov	r2, r7
    ca4c:	a803      	add	r0, sp, #12
    ca4e:	f7f7 f9ed 	bl	3e2c <settings_save_one>
	if (err) {
    ca52:	4601      	mov	r1, r0
    ca54:	b168      	cbz	r0, ca72 <bt_gatt_disconnected+0x9a>
		BT_ERR("Failed to store Client Features (err %d)", err);
    ca56:	2301      	movs	r3, #1
    ca58:	f04f 0200 	mov.w	r2, #0
    ca5c:	f363 0207 	bfi	r2, r3, #0, #8
    ca60:	482d      	ldr	r0, [pc, #180]	; (cb18 <bt_gatt_disconnected+0x140>)
    ca62:	4b2e      	ldr	r3, [pc, #184]	; (cb1c <bt_gatt_disconnected+0x144>)
    ca64:	1a1b      	subs	r3, r3, r0
    ca66:	08db      	lsrs	r3, r3, #3
    ca68:	f363 128f 	bfi	r2, r3, #6, #10
    ca6c:	482c      	ldr	r0, [pc, #176]	; (cb20 <bt_gatt_disconnected+0x148>)
    ca6e:	f011 fffe 	bl	1ea6e <log_1>
	sub = gatt_sub_find(conn);
    ca72:	2100      	movs	r1, #0
    ca74:	4620      	mov	r0, r4
    ca76:	f7fe fbe7 	bl	b248 <gatt_sub_find_free>
	if (!sub) {
    ca7a:	4680      	mov	r8, r0
    ca7c:	b398      	cbz	r0, cae6 <bt_gatt_disconnected+0x10e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    ca7e:	6883      	ldr	r3, [r0, #8]
    ca80:	b38b      	cbz	r3, cae6 <bt_gatt_disconnected+0x10e>
    ca82:	f1b3 0710 	subs.w	r7, r3, #16
    ca86:	d02e      	beq.n	cae6 <bt_gatt_disconnected+0x10e>
    ca88:	681e      	ldr	r6, [r3, #0]
    ca8a:	b106      	cbz	r6, ca8e <bt_gatt_disconnected+0xb6>
    ca8c:	3e10      	subs	r6, #16
	if (!cfg || !conn->id) {
    ca8e:	f04f 0900 	mov.w	r9, #0
		    (atomic_test_bit(params->flags,
    ca92:	46ca      	mov	sl, r9
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    ca94:	4629      	mov	r1, r5
    ca96:	7a20      	ldrb	r0, [r4, #8]
    ca98:	f013 f9c5 	bl	1fe26 <bt_addr_le_is_bonded>
    ca9c:	b990      	cbnz	r0, cac4 <bt_gatt_disconnected+0xec>
			params->value = 0U;
    ca9e:	f8a7 a008 	strh.w	sl, [r7, #8]
			gatt_sub_remove(conn, sub, prev, params);
    caa2:	463b      	mov	r3, r7
    caa4:	464a      	mov	r2, r9
    caa6:	4641      	mov	r1, r8
    caa8:	4620      	mov	r0, r4
    caaa:	f014 f90f 	bl	20ccc <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    caae:	b1d6      	cbz	r6, cae6 <bt_gatt_disconnected+0x10e>
    cab0:	6933      	ldr	r3, [r6, #16]
    cab2:	b103      	cbz	r3, cab6 <bt_gatt_disconnected+0xde>
    cab4:	3b10      	subs	r3, #16
	if (!cfg || !conn->id) {
    cab6:	4637      	mov	r7, r6
    cab8:	461e      	mov	r6, r3
    caba:	e7eb      	b.n	ca94 <bt_gatt_disconnected+0xbc>
		len = 0;
    cabc:	4607      	mov	r7, r0
    cabe:	e7bb      	b.n	ca38 <bt_gatt_disconnected+0x60>
		if (conn->id) {
    cac0:	2701      	movs	r7, #1
    cac2:	e7b9      	b.n	ca38 <bt_gatt_disconnected+0x60>
		    (atomic_test_bit(params->flags,
    cac4:	2100      	movs	r1, #0
    cac6:	f107 000c 	add.w	r0, r7, #12
    caca:	f013 ffa1 	bl	20a10 <atomic_test_bit>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    cace:	2800      	cmp	r0, #0
    cad0:	d1e5      	bne.n	ca9e <bt_gatt_disconnected+0xc6>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    cad2:	f898 3000 	ldrb.w	r3, [r8]
    cad6:	b11b      	cbz	r3, cae0 <bt_gatt_disconnected+0x108>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    cad8:	4629      	mov	r1, r5
    cada:	4640      	mov	r0, r8
    cadc:	f013 ff12 	bl	20904 <bt_addr_le_copy>
			prev = &params->node;
    cae0:	f107 0910 	add.w	r9, r7, #16
    cae4:	e7e3      	b.n	caae <bt_gatt_disconnected+0xd6>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    cae6:	4620      	mov	r0, r4
    cae8:	f7fe fd4e 	bl	b588 <find_cf_cfg.part.10>
	if (!cfg) {
    caec:	4606      	mov	r6, r0
    caee:	b138      	cbz	r0, cb00 <bt_gatt_disconnected+0x128>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    caf0:	4629      	mov	r1, r5
    caf2:	7a20      	ldrb	r0, [r4, #8]
    caf4:	f013 f997 	bl	1fe26 <bt_addr_le_is_bonded>
    caf8:	b928      	cbnz	r0, cb06 <bt_gatt_disconnected+0x12e>
		clear_cf_cfg(cfg);
    cafa:	4630      	mov	r0, r6
    cafc:	f013 ffc6 	bl	20a8c <clear_cf_cfg>
}
    cb00:	b00c      	add	sp, #48	; 0x30
    cb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    cb06:	4629      	mov	r1, r5
    cb08:	1c70      	adds	r0, r6, #1
    cb0a:	f013 fefb 	bl	20904 <bt_addr_le_copy>
}
    cb0e:	e7f7      	b.n	cb00 <bt_gatt_disconnected+0x128>
    cb10:	0000adb9 	.word	0x0000adb9
    cb14:	00028993 	.word	0x00028993
    cb18:	00025a6c 	.word	0x00025a6c
    cb1c:	00025b2c 	.word	0x00025b2c
    cb20:	00028703 	.word	0x00028703

0000cb24 <bt_gatt_clear>:
{
    cb24:	b570      	push	{r4, r5, r6, lr}
    cb26:	b08e      	sub	sp, #56	; 0x38
    cb28:	4605      	mov	r5, r0
    cb2a:	460c      	mov	r4, r1
	struct addr_with_id addr_with_id = {
    cb2c:	9103      	str	r1, [sp, #12]
    cb2e:	f88d 0010 	strb.w	r0, [sp, #16]
	if (id) {
    cb32:	2800      	cmp	r0, #0
    cb34:	d049      	beq.n	cbca <bt_gatt_clear+0xa6>
		u8_to_dec(id_str, sizeof(id_str), id);
    cb36:	ae02      	add	r6, sp, #8
    cb38:	4602      	mov	r2, r0
    cb3a:	2104      	movs	r1, #4
    cb3c:	4630      	mov	r0, r6
    cb3e:	f010 fa7b 	bl	1d038 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc",
    cb42:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc",
    cb44:	4623      	mov	r3, r4
    cb46:	4a30      	ldr	r2, [pc, #192]	; (cc08 <bt_gatt_clear+0xe4>)
    cb48:	2124      	movs	r1, #36	; 0x24
    cb4a:	a805      	add	r0, sp, #20
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    cb4c:	ae03      	add	r6, sp, #12
		bt_settings_encode_key(key, sizeof(key), "ccc",
    cb4e:	f7f9 fc71 	bl	6434 <bt_settings_encode_key>
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    cb52:	4633      	mov	r3, r6
    cb54:	4a2d      	ldr	r2, [pc, #180]	; (cc0c <bt_gatt_clear+0xe8>)
    cb56:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cb5a:	2001      	movs	r0, #1
    cb5c:	f014 f94b 	bl	20df6 <bt_gatt_foreach_attr>
	return settings_delete(key);
    cb60:	a805      	add	r0, sp, #20
    cb62:	f012 f9a5 	bl	1eeb0 <settings_delete>
	if (err < 0) {
    cb66:	2800      	cmp	r0, #0
    cb68:	db2d      	blt.n	cbc6 <bt_gatt_clear+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    cb6a:	4621      	mov	r1, r4
    cb6c:	4628      	mov	r0, r5
    cb6e:	f7fe fb9f 	bl	b2b0 <find_sc_cfg.part.11>
		if (cfg) {
    cb72:	b108      	cbz	r0, cb78 <bt_gatt_clear+0x54>
			sc_clear(cfg);
    cb74:	f7fe f8e0 	bl	ad38 <sc_clear>
	if (id) {
    cb78:	b34d      	cbz	r5, cbce <bt_gatt_clear+0xaa>
		u8_to_dec(id_str, sizeof(id_str), id);
    cb7a:	462a      	mov	r2, r5
    cb7c:	2104      	movs	r1, #4
    cb7e:	4630      	mov	r0, r6
    cb80:	f010 fa5a 	bl	1d038 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "cf",
    cb84:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "cf",
    cb86:	a805      	add	r0, sp, #20
    cb88:	4623      	mov	r3, r4
    cb8a:	4a21      	ldr	r2, [pc, #132]	; (cc10 <bt_gatt_clear+0xec>)
    cb8c:	2124      	movs	r1, #36	; 0x24
    cb8e:	f7f9 fc51 	bl	6434 <bt_settings_encode_key>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    cb92:	4620      	mov	r0, r4
    cb94:	f7fe fa8c 	bl	b0b0 <find_cf_cfg_by_addr.part.14>
	if (cfg) {
    cb98:	b108      	cbz	r0, cb9e <bt_gatt_clear+0x7a>
		clear_cf_cfg(cfg);
    cb9a:	f013 ff77 	bl	20a8c <clear_cf_cfg>
	return settings_delete(key);
    cb9e:	a805      	add	r0, sp, #20
    cba0:	f012 f986 	bl	1eeb0 <settings_delete>
	if (err < 0) {
    cba4:	2800      	cmp	r0, #0
    cba6:	db0e      	blt.n	cbc6 <bt_gatt_clear+0xa2>
    cba8:	2207      	movs	r2, #7
    cbaa:	491a      	ldr	r1, [pc, #104]	; (cc14 <bt_gatt_clear+0xf0>)
    cbac:	4d19      	ldr	r5, [pc, #100]	; (cc14 <bt_gatt_clear+0xf0>)
    cbae:	4620      	mov	r0, r4
    cbb0:	f012 fd12 	bl	1f5d8 <memcmp>
		if (!bt_addr_le_cmp(addr, &subscriptions[i].peer)) {
    cbb4:	b170      	cbz	r0, cbd4 <bt_gatt_clear+0xb0>
    cbb6:	2207      	movs	r2, #7
    cbb8:	f105 0110 	add.w	r1, r5, #16
    cbbc:	4620      	mov	r0, r4
    cbbe:	f012 fd0b 	bl	1f5d8 <memcmp>
    cbc2:	b130      	cbz	r0, cbd2 <bt_gatt_clear+0xae>
	return 0;
    cbc4:	2000      	movs	r0, #0
}
    cbc6:	b00e      	add	sp, #56	; 0x38
    cbc8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc",
    cbca:	9000      	str	r0, [sp, #0]
    cbcc:	e7ba      	b.n	cb44 <bt_gatt_clear+0x20>
		bt_settings_encode_key(key, sizeof(key), "cf",
    cbce:	9500      	str	r5, [sp, #0]
    cbd0:	e7d9      	b.n	cb86 <bt_gatt_clear+0x62>
	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
    cbd2:	2001      	movs	r0, #1
			sub = &subscriptions[i];
    cbd4:	eb05 1500 	add.w	r5, r5, r0, lsl #4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    cbd8:	68aa      	ldr	r2, [r5, #8]
    cbda:	2a00      	cmp	r2, #0
    cbdc:	d0f2      	beq.n	cbc4 <bt_gatt_clear+0xa0>
    cbde:	f1b2 0310 	subs.w	r3, r2, #16
    cbe2:	d0ef      	beq.n	cbc4 <bt_gatt_clear+0xa0>
    cbe4:	6814      	ldr	r4, [r2, #0]
    cbe6:	b104      	cbz	r4, cbea <bt_gatt_clear+0xc6>
    cbe8:	3c10      	subs	r4, #16
		params->value = 0U;
    cbea:	2600      	movs	r6, #0
		gatt_sub_remove(NULL, sub, prev, params);
    cbec:	2200      	movs	r2, #0
		params->value = 0U;
    cbee:	811e      	strh	r6, [r3, #8]
		gatt_sub_remove(NULL, sub, prev, params);
    cbf0:	4629      	mov	r1, r5
    cbf2:	4610      	mov	r0, r2
    cbf4:	f014 f86a 	bl	20ccc <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    cbf8:	2c00      	cmp	r4, #0
    cbfa:	d0e3      	beq.n	cbc4 <bt_gatt_clear+0xa0>
    cbfc:	6922      	ldr	r2, [r4, #16]
    cbfe:	b102      	cbz	r2, cc02 <bt_gatt_clear+0xde>
    cc00:	3a10      	subs	r2, #16
	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
    cc02:	4623      	mov	r3, r4
    cc04:	4614      	mov	r4, r2
    cc06:	e7f1      	b.n	cbec <bt_gatt_clear+0xc8>
    cc08:	0002877d 	.word	0x0002877d
    cc0c:	0000b089 	.word	0x0000b089
    cc10:	00028993 	.word	0x00028993
    cc14:	200004e0 	.word	0x200004e0

0000cc18 <get_io_capa>:
static const u8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    cc18:	4b10      	ldr	r3, [pc, #64]	; (cc5c <get_io_capa+0x44>)
    cc1a:	681b      	ldr	r3, [r3, #0]
    cc1c:	b1bb      	cbz	r3, cc4e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    cc1e:	681a      	ldr	r2, [r3, #0]
    cc20:	b142      	cbz	r2, cc34 <get_io_capa+0x1c>
    cc22:	6859      	ldr	r1, [r3, #4]
    cc24:	b131      	cbz	r1, cc34 <get_io_capa+0x1c>
    cc26:	6899      	ldr	r1, [r3, #8]
    cc28:	b911      	cbnz	r1, cc30 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    cc2a:	490d      	ldr	r1, [pc, #52]	; (cc60 <get_io_capa+0x48>)
    cc2c:	7809      	ldrb	r1, [r1, #0]
    cc2e:	b939      	cbnz	r1, cc40 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    cc30:	2004      	movs	r0, #4
    cc32:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    cc34:	490a      	ldr	r1, [pc, #40]	; (cc60 <get_io_capa+0x48>)
    cc36:	7809      	ldrb	r1, [r1, #0]
    cc38:	b111      	cbz	r1, cc40 <get_io_capa+0x28>
    cc3a:	b10a      	cbz	r2, cc40 <get_io_capa+0x28>
    cc3c:	6899      	ldr	r1, [r3, #8]
    cc3e:	b941      	cbnz	r1, cc52 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    cc40:	685b      	ldr	r3, [r3, #4]
    cc42:	b943      	cbnz	r3, cc56 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    cc44:	2a00      	cmp	r2, #0
    cc46:	bf0c      	ite	eq
    cc48:	2003      	moveq	r0, #3
    cc4a:	2000      	movne	r0, #0
    cc4c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    cc4e:	2003      	movs	r0, #3
    cc50:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    cc52:	2001      	movs	r0, #1
    cc54:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    cc56:	2002      	movs	r0, #2
	}
}
    cc58:	4770      	bx	lr
    cc5a:	bf00      	nop
    cc5c:	200002c8 	.word	0x200002c8
    cc60:	2000a542 	.word	0x2000a542

0000cc64 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
    cc64:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    cc66:	188f      	adds	r7, r1, r2
{
    cc68:	b08b      	sub	sp, #44	; 0x2c
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    cc6a:	1d14      	adds	r4, r2, #4
{
    cc6c:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    cc6e:	683b      	ldr	r3, [r7, #0]
    cc70:	9301      	str	r3, [sp, #4]
{
    cc72:	4606      	mov	r6, r0
	sys_mem_swap(m, len + sizeof(cnt));
    cc74:	4621      	mov	r1, r4
    cc76:	4628      	mov	r0, r5
    cc78:	f014 fa2c 	bl	210d4 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    cc7c:	4631      	mov	r1, r6
    cc7e:	2210      	movs	r2, #16
    cc80:	a802      	add	r0, sp, #8
    cc82:	f014 fa1d 	bl	210c0 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    cc86:	ab06      	add	r3, sp, #24
    cc88:	4622      	mov	r2, r4
    cc8a:	4629      	mov	r1, r5
    cc8c:	a802      	add	r0, sp, #8
    cc8e:	f014 fa48 	bl	21122 <bt_smp_aes_cmac>
	if (err) {
    cc92:	4606      	mov	r6, r0
    cc94:	b180      	cbz	r0, ccb8 <smp_sign_buf+0x54>
		BT_ERR("Data signing failed");
    cc96:	2301      	movs	r3, #1
    cc98:	f04f 0100 	mov.w	r1, #0
    cc9c:	f363 0107 	bfi	r1, r3, #0, #8
    cca0:	4a0f      	ldr	r2, [pc, #60]	; (cce0 <smp_sign_buf+0x7c>)
    cca2:	4b10      	ldr	r3, [pc, #64]	; (cce4 <smp_sign_buf+0x80>)
    cca4:	4810      	ldr	r0, [pc, #64]	; (cce8 <smp_sign_buf+0x84>)
    cca6:	1a9b      	subs	r3, r3, r2
    cca8:	08db      	lsrs	r3, r3, #3
    ccaa:	f363 118f 	bfi	r1, r3, #6, #10
    ccae:	f011 fed1 	bl	1ea54 <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    ccb2:	4630      	mov	r0, r6
    ccb4:	b00b      	add	sp, #44	; 0x2c
    ccb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    ccb8:	a806      	add	r0, sp, #24
    ccba:	2110      	movs	r1, #16
    ccbc:	f014 fa0a 	bl	210d4 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    ccc0:	2204      	movs	r2, #4
    ccc2:	eb0d 0102 	add.w	r1, sp, r2
    ccc6:	a807      	add	r0, sp, #28
    ccc8:	f012 fc96 	bl	1f5f8 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    cccc:	4621      	mov	r1, r4
    ccce:	4628      	mov	r0, r5
    ccd0:	f014 fa00 	bl	210d4 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    ccd4:	220c      	movs	r2, #12
    ccd6:	a907      	add	r1, sp, #28
    ccd8:	4638      	mov	r0, r7
    ccda:	f012 fc8d 	bl	1f5f8 <memcpy>
	return 0;
    ccde:	e7e8      	b.n	ccb2 <smp_sign_buf+0x4e>
    cce0:	00025a6c 	.word	0x00025a6c
    cce4:	00025b64 	.word	0x00025b64
    cce8:	00028d43 	.word	0x00028d43

0000ccec <smp_ident_info>:
{
    ccec:	b570      	push	{r4, r5, r6, lr}
    ccee:	460b      	mov	r3, r1
    ccf0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ccf2:	210c      	movs	r1, #12
    ccf4:	3094      	adds	r0, #148	; 0x94
    ccf6:	f014 fa0b 	bl	21110 <atomic_test_bit>
    ccfa:	b328      	cbz	r0, cd48 <smp_ident_info+0x5c>
		struct bt_smp_ident_info *req = (void *)buf->data;
    ccfc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    ccfe:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    cd00:	f103 0570 	add.w	r5, r3, #112	; 0x70
    cd04:	462a      	mov	r2, r5
    cd06:	7a19      	ldrb	r1, [r3, #8]
    cd08:	2002      	movs	r0, #2
    cd0a:	f014 fd6b 	bl	217e4 <bt_keys_get_type>
		if (!keys) {
    cd0e:	b9b0      	cbnz	r0, cd3e <smp_ident_info+0x52>
			BT_ERR("Unable to get keys for %s",
    cd10:	2301      	movs	r3, #1
    cd12:	f04f 0400 	mov.w	r4, #0
    cd16:	4a10      	ldr	r2, [pc, #64]	; (cd58 <smp_ident_info+0x6c>)
    cd18:	f363 0407 	bfi	r4, r3, #0, #8
    cd1c:	4b0f      	ldr	r3, [pc, #60]	; (cd5c <smp_ident_info+0x70>)
    cd1e:	1a9b      	subs	r3, r3, r2
    cd20:	08db      	lsrs	r3, r3, #3
    cd22:	4628      	mov	r0, r5
    cd24:	f363 148f 	bfi	r4, r3, #6, #10
    cd28:	f7f9 f8a2 	bl	5e70 <bt_addr_le_str_real>
    cd2c:	f7f6 f9b2 	bl	3094 <log_strdup>
    cd30:	4622      	mov	r2, r4
    cd32:	4601      	mov	r1, r0
    cd34:	480a      	ldr	r0, [pc, #40]	; (cd60 <smp_ident_info+0x74>)
    cd36:	f011 fe9a 	bl	1ea6e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    cd3a:	2008      	movs	r0, #8
}
    cd3c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    cd3e:	2210      	movs	r2, #16
    cd40:	4631      	mov	r1, r6
    cd42:	3026      	adds	r0, #38	; 0x26
    cd44:	f012 fc58 	bl	1f5f8 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    cd48:	f104 0090 	add.w	r0, r4, #144	; 0x90
    cd4c:	2109      	movs	r1, #9
    cd4e:	f014 f9d0 	bl	210f2 <atomic_set_bit>
	return 0;
    cd52:	2000      	movs	r0, #0
    cd54:	e7f2      	b.n	cd3c <smp_ident_info+0x50>
    cd56:	bf00      	nop
    cd58:	00025a6c 	.word	0x00025a6c
    cd5c:	00025b64 	.word	0x00025b64
    cd60:	00028cb3 	.word	0x00028cb3

0000cd64 <smp_encrypt_info>:
{
    cd64:	b570      	push	{r4, r5, r6, lr}
    cd66:	460b      	mov	r3, r1
    cd68:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cd6a:	210c      	movs	r1, #12
    cd6c:	3094      	adds	r0, #148	; 0x94
    cd6e:	f014 f9cf 	bl	21110 <atomic_test_bit>
    cd72:	b328      	cbz	r0, cdc0 <smp_encrypt_info+0x5c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    cd74:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    cd76:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    cd78:	f103 0570 	add.w	r5, r3, #112	; 0x70
    cd7c:	462a      	mov	r2, r5
    cd7e:	7a19      	ldrb	r1, [r3, #8]
    cd80:	2004      	movs	r0, #4
    cd82:	f014 fd2f 	bl	217e4 <bt_keys_get_type>
		if (!keys) {
    cd86:	b9b0      	cbnz	r0, cdb6 <smp_encrypt_info+0x52>
			BT_ERR("Unable to get keys for %s",
    cd88:	2301      	movs	r3, #1
    cd8a:	f04f 0400 	mov.w	r4, #0
    cd8e:	4a10      	ldr	r2, [pc, #64]	; (cdd0 <smp_encrypt_info+0x6c>)
    cd90:	f363 0407 	bfi	r4, r3, #0, #8
    cd94:	4b0f      	ldr	r3, [pc, #60]	; (cdd4 <smp_encrypt_info+0x70>)
    cd96:	1a9b      	subs	r3, r3, r2
    cd98:	08db      	lsrs	r3, r3, #3
    cd9a:	4628      	mov	r0, r5
    cd9c:	f363 148f 	bfi	r4, r3, #6, #10
    cda0:	f7f9 f866 	bl	5e70 <bt_addr_le_str_real>
    cda4:	f7f6 f976 	bl	3094 <log_strdup>
    cda8:	4622      	mov	r2, r4
    cdaa:	4601      	mov	r1, r0
    cdac:	480a      	ldr	r0, [pc, #40]	; (cdd8 <smp_encrypt_info+0x74>)
    cdae:	f011 fe5e 	bl	1ea6e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    cdb2:	2008      	movs	r0, #8
}
    cdb4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    cdb6:	2210      	movs	r2, #16
    cdb8:	4631      	mov	r1, r6
    cdba:	3016      	adds	r0, #22
    cdbc:	f012 fc1c 	bl	1f5f8 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    cdc0:	f104 0090 	add.w	r0, r4, #144	; 0x90
    cdc4:	2107      	movs	r1, #7
    cdc6:	f014 f994 	bl	210f2 <atomic_set_bit>
	return 0;
    cdca:	2000      	movs	r0, #0
    cdcc:	e7f2      	b.n	cdb4 <smp_encrypt_info+0x50>
    cdce:	bf00      	nop
    cdd0:	00025a6c 	.word	0x00025a6c
    cdd4:	00025b64 	.word	0x00025b64
    cdd8:	00028cb3 	.word	0x00028cb3

0000cddc <get_auth.isra.0>:
	if (sc_supported) {
    cddc:	4b0c      	ldr	r3, [pc, #48]	; (ce10 <get_auth.isra.0+0x34>)
    cdde:	781b      	ldrb	r3, [r3, #0]
static u8_t get_auth(struct bt_conn *conn, u8_t auth)
    cde0:	b510      	push	{r4, lr}
	if (sc_supported) {
    cde2:	b17b      	cbz	r3, ce04 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    cde4:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    cde8:	f7ff ff16 	bl	cc18 <get_io_capa>
	if (bondable) {
    cdec:	4b09      	ldr	r3, [pc, #36]	; (ce14 <get_auth.isra.0+0x38>)
    cdee:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    cdf0:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    cdf2:	bf0c      	ite	eq
    cdf4:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    cdf8:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    cdfc:	b12b      	cbz	r3, ce0a <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    cdfe:	f044 0001 	orr.w	r0, r4, #1
}
    ce02:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    ce04:	f000 0407 	and.w	r4, r0, #7
    ce08:	e7ee      	b.n	cde8 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    ce0a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    ce0e:	e7f8      	b.n	ce02 <get_auth.isra.0+0x26>
    ce10:	2000a542 	.word	0x2000a542
    ce14:	2000e4ea 	.word	0x2000e4ea

0000ce18 <smp_chan_get>:
{
    ce18:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    ce1a:	2106      	movs	r1, #6
    ce1c:	f013 f9b1 	bl	20182 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ce20:	4604      	mov	r4, r0
    ce22:	b968      	cbnz	r0, ce40 <smp_chan_get+0x28>
		BT_ERR("Unable to find SMP channel");
    ce24:	2301      	movs	r3, #1
    ce26:	f04f 0100 	mov.w	r1, #0
    ce2a:	f363 0107 	bfi	r1, r3, #0, #8
    ce2e:	4a05      	ldr	r2, [pc, #20]	; (ce44 <smp_chan_get+0x2c>)
    ce30:	4b05      	ldr	r3, [pc, #20]	; (ce48 <smp_chan_get+0x30>)
    ce32:	4806      	ldr	r0, [pc, #24]	; (ce4c <smp_chan_get+0x34>)
    ce34:	1a9b      	subs	r3, r3, r2
    ce36:	08db      	lsrs	r3, r3, #3
    ce38:	f363 118f 	bfi	r1, r3, #6, #10
    ce3c:	f011 fe0a 	bl	1ea54 <log_0>
}
    ce40:	4620      	mov	r0, r4
    ce42:	bd10      	pop	{r4, pc}
    ce44:	00025a6c 	.word	0x00025a6c
    ce48:	00025b64 	.word	0x00025b64
    ce4c:	00028c84 	.word	0x00028c84

0000ce50 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    ce50:	4a0d      	ldr	r2, [pc, #52]	; (ce88 <bt_smp_accept+0x38>)
{
    ce52:	b508      	push	{r3, lr}
		if (smp->chan.chan.conn) {
    ce54:	6813      	ldr	r3, [r2, #0]
    ce56:	b923      	cbnz	r3, ce62 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    ce58:	480c      	ldr	r0, [pc, #48]	; (ce8c <bt_smp_accept+0x3c>)
    ce5a:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan.chan;
    ce5c:	600a      	str	r2, [r1, #0]

		return 0;
    ce5e:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    ce60:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    ce62:	2301      	movs	r3, #1
    ce64:	f04f 0200 	mov.w	r2, #0
    ce68:	f363 0207 	bfi	r2, r3, #0, #8
    ce6c:	4908      	ldr	r1, [pc, #32]	; (ce90 <bt_smp_accept+0x40>)
    ce6e:	4b09      	ldr	r3, [pc, #36]	; (ce94 <bt_smp_accept+0x44>)
    ce70:	1a5b      	subs	r3, r3, r1
    ce72:	08db      	lsrs	r3, r3, #3
    ce74:	4601      	mov	r1, r0
    ce76:	f363 128f 	bfi	r2, r3, #6, #10
    ce7a:	4807      	ldr	r0, [pc, #28]	; (ce98 <bt_smp_accept+0x48>)
    ce7c:	f011 fdf7 	bl	1ea6e <log_1>
	return -ENOMEM;
    ce80:	f06f 000b 	mvn.w	r0, #11
    ce84:	e7ec      	b.n	ce60 <bt_smp_accept+0x10>
    ce86:	bf00      	nop
    ce88:	20000500 	.word	0x20000500
    ce8c:	0002648c 	.word	0x0002648c
    ce90:	00025a6c 	.word	0x00025a6c
    ce94:	00025b64 	.word	0x00025b64
    ce98:	000289e3 	.word	0x000289e3

0000ce9c <smp_init>:
{
    ce9c:	b538      	push	{r3, r4, r5, lr}
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    ce9e:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
    cea2:	4604      	mov	r4, r0
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    cea4:	22ec      	movs	r2, #236	; 0xec
    cea6:	2100      	movs	r1, #0
    cea8:	4628      	mov	r0, r5
    ceaa:	f012 fbcf 	bl	1f64c <memset>
	if (bt_rand(smp->prnd, 16)) {
    ceae:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    ceb2:	2110      	movs	r1, #16
    ceb4:	f003 fe2e 	bl	10b14 <bt_rand>
    ceb8:	4604      	mov	r4, r0
    ceba:	b948      	cbnz	r0, ced0 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    cebc:	2105      	movs	r1, #5
    cebe:	4628      	mov	r0, r5
    cec0:	f014 f917 	bl	210f2 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    cec4:	f7fb fe74 	bl	8bb0 <bt_pub_key_get>
    cec8:	4b02      	ldr	r3, [pc, #8]	; (ced4 <smp_init+0x38>)
    ceca:	6018      	str	r0, [r3, #0]
}
    cecc:	4620      	mov	r0, r4
    cece:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ced0:	2408      	movs	r4, #8
    ced2:	e7fb      	b.n	cecc <smp_init+0x30>
    ced4:	2000069c 	.word	0x2000069c

0000ced8 <smp_send.isra.7>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ced8:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ceda:	2300      	movs	r3, #0
    cedc:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    cede:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    cee0:	4613      	mov	r3, r2
    cee2:	6800      	ldr	r0, [r0, #0]
    cee4:	460a      	mov	r2, r1
    cee6:	2106      	movs	r1, #6
    cee8:	f013 f927 	bl	2013a <bt_l2cap_send_cb>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ceec:	4804      	ldr	r0, [pc, #16]	; (cf00 <smp_send.isra.7+0x28>)
    ceee:	f247 5230 	movw	r2, #30000	; 0x7530
    cef2:	f504 71be 	add.w	r1, r4, #380	; 0x17c
}
    cef6:	b002      	add	sp, #8
    cef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cefc:	f00f be4e 	b.w	1cb9c <k_delayed_work_submit_to_queue>
    cf00:	20005fa0 	.word	0x20005fa0

0000cf04 <smp_send_pairing_confirm>:
{
    cf04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    cf06:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
{
    cf0a:	4605      	mov	r5, r0
	switch (smp->method) {
    cf0c:	2b03      	cmp	r3, #3
    cf0e:	d826      	bhi.n	cf5e <smp_send_pairing_confirm+0x5a>
    cf10:	e8df f003 	tbb	[pc, r3]
    cf14:	27020227 	.word	0x27020227
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    cf18:	f890 316c 	ldrb.w	r3, [r0, #364]	; 0x16c
    cf1c:	f8d0 4168 	ldr.w	r4, [r0, #360]	; 0x168
    cf20:	40dc      	lsrs	r4, r3
    cf22:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    cf26:	f064 047f 	orn	r4, r4, #127	; 0x7f
    cf2a:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    cf2c:	2103      	movs	r1, #3
    cf2e:	4628      	mov	r0, r5
    cf30:	f014 f9ae 	bl	21290 <smp_create_pdu.isra.6>
	if (!buf) {
    cf34:	4606      	mov	r6, r0
    cf36:	b190      	cbz	r0, cf5e <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    cf38:	2110      	movs	r1, #16
    cf3a:	3008      	adds	r0, #8
    cf3c:	f015 fb7a 	bl	22634 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    cf40:	9000      	str	r0, [sp, #0]
    cf42:	480f      	ldr	r0, [pc, #60]	; (cf80 <smp_send_pairing_confirm+0x7c>)
    cf44:	4623      	mov	r3, r4
    cf46:	f105 02b7 	add.w	r2, r5, #183	; 0xb7
    cf4a:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
    cf4e:	6800      	ldr	r0, [r0, #0]
    cf50:	f014 f903 	bl	2115a <smp_f4>
    cf54:	4604      	mov	r4, r0
    cf56:	b130      	cbz	r0, cf66 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    cf58:	4630      	mov	r0, r6
    cf5a:	f00a fb3b 	bl	175d4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    cf5e:	2008      	movs	r0, #8
    cf60:	e00c      	b.n	cf7c <smp_send_pairing_confirm+0x78>
		r = 0U;
    cf62:	2400      	movs	r4, #0
    cf64:	e7e2      	b.n	cf2c <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL, NULL);
    cf66:	4602      	mov	r2, r0
    cf68:	4631      	mov	r1, r6
    cf6a:	4628      	mov	r0, r5
    cf6c:	f7ff ffb4 	bl	ced8 <smp_send.isra.7>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    cf70:	f105 0094 	add.w	r0, r5, #148	; 0x94
    cf74:	4621      	mov	r1, r4
    cf76:	f014 f961 	bl	2123c <atomic_clear_bit>
	return 0;
    cf7a:	4620      	mov	r0, r4
}
    cf7c:	b002      	add	sp, #8
    cf7e:	bd70      	pop	{r4, r5, r6, pc}
    cf80:	2000069c 	.word	0x2000069c

0000cf84 <smp_public_key_slave.part.13>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    cf84:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
    cf86:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
static u8_t smp_public_key_slave(struct bt_smp *smp)
    cf8a:	4604      	mov	r4, r0
	switch (smp->method) {
    cf8c:	2b05      	cmp	r3, #5
    cf8e:	d814      	bhi.n	cfba <smp_public_key_slave.part.13+0x36>
    cf90:	e8df f003 	tbb	[pc, r3]
    cf94:	030d3603 	.word	0x030d3603
    cf98:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cf9a:	3090      	adds	r0, #144	; 0x90
    cf9c:	2104      	movs	r1, #4
    cf9e:	f014 f8a8 	bl	210f2 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    cfa2:	4620      	mov	r0, r4
    cfa4:	f7ff ffae 	bl	cf04 <smp_send_pairing_confirm>
		if (err) {
    cfa8:	2800      	cmp	r0, #0
    cfaa:	d037      	beq.n	d01c <smp_public_key_slave.part.13+0x98>
}
    cfac:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    cfae:	2104      	movs	r1, #4
    cfb0:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    cfb4:	f003 fdae 	bl	10b14 <bt_rand>
    cfb8:	b108      	cbz	r0, cfbe <smp_public_key_slave.part.13+0x3a>
		return BT_SMP_ERR_UNSPECIFIED;
    cfba:	2008      	movs	r0, #8
    cfbc:	e7f6      	b.n	cfac <smp_public_key_slave.part.13+0x28>
		smp->passkey %= 1000000;
    cfbe:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    cfc2:	4a1f      	ldr	r2, [pc, #124]	; (d040 <smp_public_key_slave.part.13+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
    cfc4:	4d1f      	ldr	r5, [pc, #124]	; (d044 <smp_public_key_slave.part.13+0xc0>)
		smp->passkey %= 1000000;
    cfc6:	fbb1 f3f2 	udiv	r3, r1, r2
    cfca:	fb02 1313 	mls	r3, r2, r3, r1
    cfce:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	if (bt_auth && bt_auth->passkey_display) {
    cfd2:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    cfd4:	f884 016c 	strb.w	r0, [r4, #364]	; 0x16c
	if (bt_auth && bt_auth->passkey_display) {
    cfd8:	b163      	cbz	r3, cff4 <smp_public_key_slave.part.13+0x70>
    cfda:	681b      	ldr	r3, [r3, #0]
    cfdc:	b153      	cbz	r3, cff4 <smp_public_key_slave.part.13+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    cfde:	210a      	movs	r1, #10
    cfe0:	f104 0094 	add.w	r0, r4, #148	; 0x94
    cfe4:	f014 f885 	bl	210f2 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    cfe8:	682b      	ldr	r3, [r5, #0]
    cfea:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    cfee:	681b      	ldr	r3, [r3, #0]
    cff0:	6820      	ldr	r0, [r4, #0]
    cff2:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    cff4:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cff6:	f104 0090 	add.w	r0, r4, #144	; 0x90
    cffa:	f014 f87a 	bl	210f2 <atomic_set_bit>
		break;
    cffe:	e00d      	b.n	d01c <smp_public_key_slave.part.13+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d000:	2103      	movs	r1, #3
    d002:	3090      	adds	r0, #144	; 0x90
    d004:	f014 f875 	bl	210f2 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d008:	f104 0094 	add.w	r0, r4, #148	; 0x94
    d00c:	2109      	movs	r1, #9
    d00e:	f014 f870 	bl	210f2 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    d012:	4b0c      	ldr	r3, [pc, #48]	; (d044 <smp_public_key_slave.part.13+0xc0>)
    d014:	6820      	ldr	r0, [r4, #0]
    d016:	681b      	ldr	r3, [r3, #0]
    d018:	685b      	ldr	r3, [r3, #4]
    d01a:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    d01c:	490a      	ldr	r1, [pc, #40]	; (d048 <smp_public_key_slave.part.13+0xc4>)
    d01e:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    d022:	f7fb fdd3 	bl	8bcc <bt_dh_key_gen>
    d026:	4605      	mov	r5, r0
    d028:	2800      	cmp	r0, #0
    d02a:	d1c6      	bne.n	cfba <smp_public_key_slave.part.13+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    d02c:	f104 0094 	add.w	r0, r4, #148	; 0x94
    d030:	2107      	movs	r1, #7
    d032:	f014 f85e 	bl	210f2 <atomic_set_bit>
	return 0;
    d036:	4628      	mov	r0, r5
    d038:	e7b8      	b.n	cfac <smp_public_key_slave.part.13+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    d03a:	2104      	movs	r1, #4
    d03c:	e7db      	b.n	cff6 <smp_public_key_slave.part.13+0x72>
    d03e:	bf00      	nop
    d040:	000f4240 	.word	0x000f4240
    d044:	200002c8 	.word	0x200002c8
    d048:	0000d729 	.word	0x0000d729

0000d04c <compute_and_check_and_send_slave_dhcheck>:
{
    d04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)memset(r, 0, sizeof(r));
    d050:	2210      	movs	r2, #16
{
    d052:	b0a3      	sub	sp, #140	; 0x8c
    d054:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    d056:	2100      	movs	r1, #0
    d058:	eb0d 0002 	add.w	r0, sp, r2
    d05c:	f012 faf6 	bl	1f64c <memset>
	switch (smp->method) {
    d060:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    d064:	2b05      	cmp	r3, #5
    d066:	f200 8083 	bhi.w	d170 <compute_and_check_and_send_slave_dhcheck+0x124>
    d06a:	e8df f003 	tbb	[pc, r3]
    d06e:	0309      	.short	0x0309
    d070:	83810903 	.word	0x83810903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    d074:	2204      	movs	r2, #4
    d076:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    d07a:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    d07c:	f012 fabc 	bl	1f5f8 <memcpy>
	u8_t m[53] = { 0x00, /* counter */
    d080:	ae14      	add	r6, sp, #80	; 0x50
    d082:	2235      	movs	r2, #53	; 0x35
    d084:	2100      	movs	r1, #0
    d086:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    d088:	f8d4 a000 	ldr.w	sl, [r4]
	u8_t m[53] = { 0x00, /* counter */
    d08c:	f012 fade 	bl	1f64c <memset>
    d090:	2362      	movs	r3, #98	; 0x62
    d092:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
	sys_memcpy_swap(ws, w, 32);
    d096:	ad0c      	add	r5, sp, #48	; 0x30
	u8_t m[53] = { 0x00, /* counter */
    d098:	f646 4374 	movw	r3, #27764	; 0x6c74
    d09c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
	sys_memcpy_swap(ws, w, 32);
    d0a0:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    d0a2:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    d0a4:	f204 1127 	addw	r1, r4, #295	; 0x127
    d0a8:	4628      	mov	r0, r5
	u8_t m[53] = { 0x00, /* counter */
    d0aa:	f04f 0b01 	mov.w	fp, #1
    d0ae:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    d0b2:	f88d b083 	strb.w	fp, [sp, #131]	; 0x83
	sys_memcpy_swap(ws, w, 32);
    d0b6:	f014 f803 	bl	210c0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    d0ba:	ab08      	add	r3, sp, #32
    d0bc:	2220      	movs	r2, #32
    d0be:	4629      	mov	r1, r5
    d0c0:	4855      	ldr	r0, [pc, #340]	; (d218 <compute_and_check_and_send_slave_dhcheck+0x1cc>)
    d0c2:	f014 f82e 	bl	21122 <bt_smp_aes_cmac>
	if (err) {
    d0c6:	2800      	cmp	r0, #0
    d0c8:	d152      	bne.n	d170 <compute_and_check_and_send_slave_dhcheck+0x124>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d0ca:	f104 08c7 	add.w	r8, r4, #199	; 0xc7
	sys_memcpy_swap(m + 5, n1, 16);
    d0ce:	2210      	movs	r2, #16
    d0d0:	4641      	mov	r1, r8
    d0d2:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d0d6:	f104 09b7 	add.w	r9, r4, #183	; 0xb7
	sys_memcpy_swap(m + 5, n1, 16);
    d0da:	f013 fff1 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    d0de:	2210      	movs	r2, #16
    d0e0:	4649      	mov	r1, r9
    d0e2:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    d0e6:	f013 ffeb 	bl	210c0 <sys_memcpy_swap>
	m[37] = a1->type;
    d0ea:	f89a 3077 	ldrb.w	r3, [sl, #119]	; 0x77
    d0ee:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    d0f2:	2206      	movs	r2, #6
    d0f4:	f10a 0178 	add.w	r1, sl, #120	; 0x78
    d0f8:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    d0fc:	f013 ffe0 	bl	210c0 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    d100:	f204 1757 	addw	r7, r4, #343	; 0x157
	m[44] = a2->type;
    d104:	f89a 307e 	ldrb.w	r3, [sl, #126]	; 0x7e
    d108:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    d10c:	2206      	movs	r2, #6
    d10e:	f10a 017f 	add.w	r1, sl, #127	; 0x7f
    d112:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    d116:	f013 ffd3 	bl	210c0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    d11a:	463b      	mov	r3, r7
    d11c:	2235      	movs	r2, #53	; 0x35
    d11e:	4631      	mov	r1, r6
    d120:	a808      	add	r0, sp, #32
    d122:	f013 fffe 	bl	21122 <bt_smp_aes_cmac>
	if (err) {
    d126:	bb18      	cbnz	r0, d170 <compute_and_check_and_send_slave_dhcheck+0x124>
	sys_mem_swap(mackey, 16);
    d128:	2110      	movs	r1, #16
    d12a:	4638      	mov	r0, r7
		   smp->tk)) {
    d12c:	f104 0ad7 	add.w	sl, r4, #215	; 0xd7
	sys_mem_swap(mackey, 16);
    d130:	f013 ffd0 	bl	210d4 <sys_mem_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    d134:	4653      	mov	r3, sl
    d136:	2235      	movs	r2, #53	; 0x35
    d138:	4631      	mov	r1, r6
    d13a:	a808      	add	r0, sp, #32
	m[0] = 0x01;
    d13c:	f88d b050 	strb.w	fp, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    d140:	f013 ffef 	bl	21122 <bt_smp_aes_cmac>
	if (err) {
    d144:	b9a0      	cbnz	r0, d170 <compute_and_check_and_send_slave_dhcheck+0x124>
	sys_mem_swap(ltk, 16);
    d146:	2110      	movs	r1, #16
    d148:	4650      	mov	r0, sl
    d14a:	f013 ffc3 	bl	210d4 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    d14e:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d150:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.resp_addr,
    d152:	f852 3ba1 	ldr.w	r3, [r2], #161
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d156:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    d158:	f103 0177 	add.w	r1, r3, #119	; 0x77
		   &smp->chan.chan.conn->le.resp_addr,
    d15c:	337e      	adds	r3, #126	; 0x7e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d15e:	e9cd 2300 	strd	r2, r3, [sp]
    d162:	9102      	str	r1, [sp, #8]
    d164:	ab04      	add	r3, sp, #16
    d166:	4642      	mov	r2, r8
    d168:	4649      	mov	r1, r9
    d16a:	f014 f81b 	bl	211a4 <smp_f6>
    d16e:	b148      	cbz	r0, d184 <compute_and_check_and_send_slave_dhcheck+0x138>
		return BT_SMP_ERR_UNSPECIFIED;
    d170:	2008      	movs	r0, #8
    d172:	e048      	b.n	d206 <compute_and_check_and_send_slave_dhcheck+0x1ba>
		if (smp->oobd_remote) {
    d174:	f8d4 1174 	ldr.w	r1, [r4, #372]	; 0x174
    d178:	2900      	cmp	r1, #0
    d17a:	d081      	beq.n	d080 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    d17c:	2210      	movs	r2, #16
    d17e:	eb0d 0002 	add.w	r0, sp, r2
    d182:	e77b      	b.n	d07c <compute_and_check_and_send_slave_dhcheck+0x30>
	if (smp->method == LE_SC_OOB) {
    d184:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    d188:	2b05      	cmp	r3, #5
    d18a:	d108      	bne.n	d19e <compute_and_check_and_send_slave_dhcheck+0x152>
		if (smp->oobd_local) {
    d18c:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d190:	2210      	movs	r2, #16
    d192:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    d196:	2900      	cmp	r1, #0
    d198:	d038      	beq.n	d20c <compute_and_check_and_send_slave_dhcheck+0x1c0>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d19a:	f012 fa2d 	bl	1f5f8 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    d19e:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d1a0:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.init_addr,
    d1a2:	f852 3b9a 	ldr.w	r3, [r2], #154
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d1a6:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    d1a8:	f103 017e 	add.w	r1, r3, #126	; 0x7e
		   &smp->chan.chan.conn->le.init_addr,
    d1ac:	3377      	adds	r3, #119	; 0x77
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d1ae:	e9cd 2300 	strd	r2, r3, [sp]
    d1b2:	9102      	str	r1, [sp, #8]
    d1b4:	ab04      	add	r3, sp, #16
    d1b6:	464a      	mov	r2, r9
    d1b8:	4641      	mov	r1, r8
    d1ba:	f013 fff3 	bl	211a4 <smp_f6>
    d1be:	2800      	cmp	r0, #0
    d1c0:	d1d6      	bne.n	d170 <compute_and_check_and_send_slave_dhcheck+0x124>
	if (memcmp(smp->e, re, 16)) {
    d1c2:	4629      	mov	r1, r5
    d1c4:	2210      	movs	r2, #16
    d1c6:	f204 1047 	addw	r0, r4, #327	; 0x147
    d1ca:	f012 fa05 	bl	1f5d8 <memcmp>
    d1ce:	4605      	mov	r5, r0
    d1d0:	b9f8      	cbnz	r0, d212 <compute_and_check_and_send_slave_dhcheck+0x1c6>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    d1d2:	210d      	movs	r1, #13
    d1d4:	4620      	mov	r0, r4
    d1d6:	f014 f85b 	bl	21290 <smp_create_pdu.isra.6>
	if (!buf) {
    d1da:	4607      	mov	r7, r0
    d1dc:	2800      	cmp	r0, #0
    d1de:	d0c7      	beq.n	d170 <compute_and_check_and_send_slave_dhcheck+0x124>
	req = net_buf_add(buf, sizeof(*req));
    d1e0:	2110      	movs	r1, #16
    d1e2:	3008      	adds	r0, #8
    d1e4:	f015 fa26 	bl	22634 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    d1e8:	2210      	movs	r2, #16
    d1ea:	4631      	mov	r1, r6
    d1ec:	f012 fa04 	bl	1f5f8 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    d1f0:	462a      	mov	r2, r5
    d1f2:	4639      	mov	r1, r7
    d1f4:	4620      	mov	r0, r4
    d1f6:	f7ff fe6f 	bl	ced8 <smp_send.isra.7>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d1fa:	f104 0094 	add.w	r0, r4, #148	; 0x94
    d1fe:	2101      	movs	r1, #1
    d200:	f013 ff77 	bl	210f2 <atomic_set_bit>
	return 0;
    d204:	4628      	mov	r0, r5
}
    d206:	b023      	add	sp, #140	; 0x8c
    d208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memset(r, 0, sizeof(r));
    d20c:	f012 fa1e 	bl	1f64c <memset>
    d210:	e7c5      	b.n	d19e <compute_and_check_and_send_slave_dhcheck+0x152>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    d212:	200b      	movs	r0, #11
    d214:	e7f7      	b.n	d206 <compute_and_check_and_send_slave_dhcheck+0x1ba>
    d216:	bf00      	nop
    d218:	00028c34 	.word	0x00028c34

0000d21c <smp_pairing_req>:
{
    d21c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    d220:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d222:	78eb      	ldrb	r3, [r5, #3]
    d224:	3b07      	subs	r3, #7
    d226:	2b09      	cmp	r3, #9
{
    d228:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d22a:	d904      	bls.n	d236 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    d22c:	2506      	movs	r5, #6
}
    d22e:	4628      	mov	r0, r5
    d230:	b002      	add	sp, #8
    d232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    d236:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    d238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    d23c:	b163      	cbz	r3, d258 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    d23e:	f104 0694 	add.w	r6, r4, #148	; 0x94
    d242:	210e      	movs	r1, #14
    d244:	4630      	mov	r0, r6
    d246:	f013 ff63 	bl	21110 <atomic_test_bit>
    d24a:	b980      	cbnz	r0, d26e <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    d24c:	4620      	mov	r0, r4
    d24e:	f7ff fe25 	bl	ce9c <smp_init>
		if (ret) {
    d252:	b160      	cbz	r0, d26e <smp_pairing_req+0x52>
			return ret;
    d254:	b2c5      	uxtb	r5, r0
    d256:	e7ea      	b.n	d22e <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d258:	f107 0170 	add.w	r1, r7, #112	; 0x70
    d25c:	7a38      	ldrb	r0, [r7, #8]
    d25e:	f001 fa33 	bl	e6c8 <bt_keys_get_addr>
    d262:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		if (!conn->le.keys) {
    d266:	2800      	cmp	r0, #0
    d268:	d1e9      	bne.n	d23e <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    d26a:	2508      	movs	r5, #8
    d26c:	e7df      	b.n	d22e <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d26e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    d270:	2206      	movs	r2, #6
    d272:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d274:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
	memcpy(smp->preq + 1, req, sizeof(*req));
    d278:	f104 009a 	add.w	r0, r4, #154	; 0x9a
    d27c:	f012 f9bc 	bl	1f5f8 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    d280:	2302      	movs	r3, #2
    d282:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
	rsp->auth_req = get_auth(conn, req->auth_req);
    d286:	78a8      	ldrb	r0, [r5, #2]
    d288:	f7ff fda8 	bl	cddc <get_auth.isra.0>
    d28c:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    d290:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    d292:	f7ff fcc1 	bl	cc18 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    d296:	4bb6      	ldr	r3, [pc, #728]	; (d570 <smp_pairing_req+0x354>)
	rsp->io_capability = get_io_capa();
    d298:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    d29c:	781b      	ldrb	r3, [r3, #0]
    d29e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    d2a2:	2310      	movs	r3, #16
    d2a4:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    d2a8:	792b      	ldrb	r3, [r5, #4]
    d2aa:	f003 0307 	and.w	r3, r3, #7
    d2ae:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d2b2:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d2b4:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d2b8:	f003 0307 	and.w	r3, r3, #7
    d2bc:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d2c0:	d012      	beq.n	d2e8 <smp_pairing_req+0xcc>
    d2c2:	78ab      	ldrb	r3, [r5, #2]
    d2c4:	0718      	lsls	r0, r3, #28
    d2c6:	d50f      	bpl.n	d2e8 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    d2c8:	2105      	movs	r1, #5
    d2ca:	4630      	mov	r0, r6
    d2cc:	f013 ff11 	bl	210f2 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    d2d0:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    d2d4:	f003 0306 	and.w	r3, r3, #6
    d2d8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    d2dc:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
    d2e0:	f003 0306 	and.w	r3, r3, #6
    d2e4:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    d2e8:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d2ec:	0699      	lsls	r1, r3, #26
    d2ee:	d506      	bpl.n	d2fe <smp_pairing_req+0xe2>
    d2f0:	78ab      	ldrb	r3, [r5, #2]
    d2f2:	069a      	lsls	r2, r3, #26
    d2f4:	d503      	bpl.n	d2fe <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    d2f6:	2113      	movs	r1, #19
    d2f8:	4630      	mov	r0, r6
    d2fa:	f013 fefa 	bl	210f2 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    d2fe:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
    d302:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
	smp->remote_dist = rsp->init_key_dist;
    d306:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    d30a:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    d30e:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d312:	07db      	lsls	r3, r3, #31
    d314:	d506      	bpl.n	d324 <smp_pairing_req+0x108>
    d316:	78ab      	ldrb	r3, [r5, #2]
    d318:	07d8      	lsls	r0, r3, #31
    d31a:	d503      	bpl.n	d324 <smp_pairing_req+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    d31c:	210c      	movs	r1, #12
    d31e:	4630      	mov	r0, r6
    d320:	f013 fee7 	bl	210f2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    d324:	2103      	movs	r1, #3
    d326:	4630      	mov	r0, r6
    d328:	f013 fee3 	bl	210f2 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d32c:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    d32e:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d330:	f013 feee 	bl	21110 <atomic_test_bit>
    d334:	f8d4 8000 	ldr.w	r8, [r4]
    d338:	2800      	cmp	r0, #0
    d33a:	d14b      	bne.n	d3d4 <smp_pairing_req+0x1b8>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d33c:	2d04      	cmp	r5, #4
    d33e:	d816      	bhi.n	d36e <smp_pairing_req+0x152>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d340:	f894 009c 	ldrb.w	r0, [r4, #156]	; 0x9c
    d344:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d348:	4318      	orrs	r0, r3
    d34a:	f010 0004 	ands.w	r0, r0, #4
    d34e:	d00e      	beq.n	d36e <smp_pairing_req+0x152>
	method = gen_method_legacy[remote_io][get_io_capa()];
    d350:	f7ff fc62 	bl	cc18 <get_io_capa>
    d354:	4b87      	ldr	r3, [pc, #540]	; (d574 <smp_pairing_req+0x358>)
    d356:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d35a:	441d      	add	r5, r3
    d35c:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    d35e:	2804      	cmp	r0, #4
    d360:	d105      	bne.n	d36e <smp_pairing_req+0x152>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d362:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    d366:	2b00      	cmp	r3, #0
    d368:	bf0c      	ite	eq
    d36a:	2002      	moveq	r0, #2
    d36c:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    d36e:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
	if (!conn->le.keys) {
    d372:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    d376:	b93b      	cbnz	r3, d388 <smp_pairing_req+0x16c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d378:	f108 0170 	add.w	r1, r8, #112	; 0x70
    d37c:	f898 0008 	ldrb.w	r0, [r8, #8]
    d380:	f001 f9a2 	bl	e6c8 <bt_keys_get_addr>
    d384:	f8c8 009c 	str.w	r0, [r8, #156]	; 0x9c
	if (!conn->le.keys ||
    d388:	f8d8 209c 	ldr.w	r2, [r8, #156]	; 0x9c
    d38c:	2a00      	cmp	r2, #0
    d38e:	d142      	bne.n	d416 <smp_pairing_req+0x1fa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d390:	2105      	movs	r1, #5
    d392:	4630      	mov	r0, r6
    d394:	f013 febc 	bl	21110 <atomic_test_bit>
    d398:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    d39c:	2800      	cmp	r0, #0
    d39e:	f040 80cc 	bne.w	d53a <smp_pairing_req+0x31e>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d3a2:	461d      	mov	r5, r3
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d154      	bne.n	d452 <smp_pairing_req+0x236>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d3a8:	210e      	movs	r1, #14
    d3aa:	4630      	mov	r0, r6
    d3ac:	f013 feb0 	bl	21110 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d3b0:	2800      	cmp	r0, #0
    d3b2:	d14e      	bne.n	d452 <smp_pairing_req+0x236>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d3b4:	4f70      	ldr	r7, [pc, #448]	; (d578 <smp_pairing_req+0x35c>)
    d3b6:	683b      	ldr	r3, [r7, #0]
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	d04a      	beq.n	d452 <smp_pairing_req+0x236>
	    bt_auth && bt_auth->pairing_confirm) {
    d3bc:	695b      	ldr	r3, [r3, #20]
    d3be:	2b00      	cmp	r3, #0
    d3c0:	d047      	beq.n	d452 <smp_pairing_req+0x236>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d3c2:	4630      	mov	r0, r6
    d3c4:	2109      	movs	r1, #9
    d3c6:	f013 fe94 	bl	210f2 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    d3ca:	683b      	ldr	r3, [r7, #0]
    d3cc:	6820      	ldr	r0, [r4, #0]
    d3ce:	695b      	ldr	r3, [r3, #20]
    d3d0:	4798      	blx	r3
		return 0;
    d3d2:	e72c      	b.n	d22e <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    d3d4:	f894 009c 	ldrb.w	r0, [r4, #156]	; 0x9c
    d3d8:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    d3dc:	ea00 0302 	and.w	r3, r0, r2
    d3e0:	0719      	lsls	r1, r3, #28
    d3e2:	d506      	bpl.n	d3f2 <smp_pairing_req+0x1d6>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    d3e4:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    d3e8:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
    d3ec:	430b      	orrs	r3, r1
    d3ee:	07db      	lsls	r3, r3, #31
    d3f0:	d40d      	bmi.n	d40e <smp_pairing_req+0x1f2>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d3f2:	2d04      	cmp	r5, #4
    d3f4:	d80d      	bhi.n	d412 <smp_pairing_req+0x1f6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d3f6:	4310      	orrs	r0, r2
    d3f8:	f010 0004 	ands.w	r0, r0, #4
    d3fc:	d0b7      	beq.n	d36e <smp_pairing_req+0x152>
	return gen_method_sc[remote_io][get_io_capa()];
    d3fe:	f7ff fc0b 	bl	cc18 <get_io_capa>
    d402:	4b5e      	ldr	r3, [pc, #376]	; (d57c <smp_pairing_req+0x360>)
    d404:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d408:	441d      	add	r5, r3
    d40a:	5c28      	ldrb	r0, [r5, r0]
    d40c:	e7af      	b.n	d36e <smp_pairing_req+0x152>
			return LE_SC_OOB;
    d40e:	2005      	movs	r0, #5
    d410:	e7ad      	b.n	d36e <smp_pairing_req+0x152>
		return JUST_WORKS;
    d412:	2000      	movs	r0, #0
    d414:	e7ab      	b.n	d36e <smp_pairing_req+0x152>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    d416:	8951      	ldrh	r1, [r2, #10]
	if (!conn->le.keys ||
    d418:	f011 0f24 	tst.w	r1, #36	; 0x24
    d41c:	d0b8      	beq.n	d390 <smp_pairing_req+0x174>
	return MIN(req->max_key_size, rsp->max_key_size);
    d41e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    d422:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    d426:	7a12      	ldrb	r2, [r2, #8]
    d428:	4283      	cmp	r3, r0
    d42a:	bf28      	it	cs
    d42c:	4603      	movcs	r3, r0
    d42e:	429a      	cmp	r2, r3
    d430:	d901      	bls.n	d436 <smp_pairing_req+0x21a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    d432:	2503      	movs	r5, #3
    d434:	e6fb      	b.n	d22e <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    d436:	0689      	lsls	r1, r1, #26
    d438:	d404      	bmi.n	d444 <smp_pairing_req+0x228>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    d43a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    d43e:	2b00      	cmp	r3, #0
    d440:	d1a6      	bne.n	d390 <smp_pairing_req+0x174>
    d442:	e7f6      	b.n	d432 <smp_pairing_req+0x216>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d444:	2105      	movs	r1, #5
    d446:	4630      	mov	r0, r6
    d448:	f013 fe62 	bl	21110 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    d44c:	2800      	cmp	r0, #0
    d44e:	d1f4      	bne.n	d43a <smp_pairing_req+0x21e>
    d450:	e7ef      	b.n	d432 <smp_pairing_req+0x216>
	ret = send_pairing_rsp(smp);
    d452:	4620      	mov	r0, r4
    d454:	f013 ff7d 	bl	21352 <send_pairing_rsp>
	if (ret) {
    d458:	4605      	mov	r5, r0
    d45a:	2800      	cmp	r0, #0
    d45c:	f47f aee7 	bne.w	d22e <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d460:	2103      	movs	r1, #3
    d462:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d466:	f013 fe44 	bl	210f2 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    d46a:	6825      	ldr	r5, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    d46c:	f105 0170 	add.w	r1, r5, #112	; 0x70
    d470:	7a28      	ldrb	r0, [r5, #8]
    d472:	f001 f9ef 	bl	e854 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    d476:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    d47a:	b198      	cbz	r0, d4a4 <smp_pairing_req+0x288>
    d47c:	7a42      	ldrb	r2, [r0, #9]
    d47e:	07d2      	lsls	r2, r2, #31
    d480:	d510      	bpl.n	d4a4 <smp_pairing_req+0x288>
    d482:	b97b      	cbnz	r3, d4a4 <smp_pairing_req+0x288>
		BT_ERR("JustWorks failed, authenticated keys present");
    d484:	2301      	movs	r3, #1
    d486:	f04f 0100 	mov.w	r1, #0
    d48a:	f363 0107 	bfi	r1, r3, #0, #8
    d48e:	4a3c      	ldr	r2, [pc, #240]	; (d580 <smp_pairing_req+0x364>)
    d490:	4b3c      	ldr	r3, [pc, #240]	; (d584 <smp_pairing_req+0x368>)
    d492:	483d      	ldr	r0, [pc, #244]	; (d588 <smp_pairing_req+0x36c>)
    d494:	1a9b      	subs	r3, r3, r2
    d496:	08db      	lsrs	r3, r3, #3
    d498:	f363 118f 	bfi	r1, r3, #6, #10
    d49c:	f011 fada 	bl	1ea54 <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    d4a0:	2108      	movs	r1, #8
    d4a2:	e02f      	b.n	d504 <smp_pairing_req+0x2e8>
	switch (smp->method) {
    d4a4:	2b01      	cmp	r3, #1
    d4a6:	4619      	mov	r1, r3
    d4a8:	d02e      	beq.n	d508 <smp_pairing_req+0x2ec>
    d4aa:	b35b      	cbz	r3, d504 <smp_pairing_req+0x2e8>
    d4ac:	2b02      	cmp	r3, #2
    d4ae:	d135      	bne.n	d51c <smp_pairing_req+0x300>
			if (bt_rand(&passkey, sizeof(passkey))) {
    d4b0:	2104      	movs	r1, #4
    d4b2:	eb0d 0001 	add.w	r0, sp, r1
    d4b6:	f003 fb2d 	bl	10b14 <bt_rand>
    d4ba:	2800      	cmp	r0, #0
    d4bc:	d1f0      	bne.n	d4a0 <smp_pairing_req+0x284>
			passkey %= 1000000;
    d4be:	9901      	ldr	r1, [sp, #4]
    d4c0:	4a32      	ldr	r2, [pc, #200]	; (d58c <smp_pairing_req+0x370>)
		if (bt_auth && bt_auth->passkey_display) {
    d4c2:	4f2d      	ldr	r7, [pc, #180]	; (d578 <smp_pairing_req+0x35c>)
			passkey %= 1000000;
    d4c4:	fbb1 f3f2 	udiv	r3, r1, r2
    d4c8:	fb02 1313 	mls	r3, r2, r3, r1
    d4cc:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    d4ce:	683b      	ldr	r3, [r7, #0]
    d4d0:	b153      	cbz	r3, d4e8 <smp_pairing_req+0x2cc>
    d4d2:	681b      	ldr	r3, [r3, #0]
    d4d4:	b143      	cbz	r3, d4e8 <smp_pairing_req+0x2cc>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    d4d6:	210a      	movs	r1, #10
    d4d8:	4630      	mov	r0, r6
    d4da:	f013 fe0a 	bl	210f2 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    d4de:	683b      	ldr	r3, [r7, #0]
    d4e0:	9901      	ldr	r1, [sp, #4]
    d4e2:	681b      	ldr	r3, [r3, #0]
    d4e4:	4628      	mov	r0, r5
    d4e6:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    d4e8:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    d4ea:	f884 30d7 	strb.w	r3, [r4, #215]	; 0xd7
	dst[1] = val >> 8;
    d4ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    d4f2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d4f4:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
	dst[1] = val >> 8;
    d4f8:	0a1b      	lsrs	r3, r3, #8
    d4fa:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    d4fe:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
	return 0;
    d502:	2100      	movs	r1, #0
	return legacy_request_tk(smp);
    d504:	460d      	mov	r5, r1
    d506:	e692      	b.n	d22e <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d508:	4630      	mov	r0, r6
    d50a:	2109      	movs	r1, #9
    d50c:	f013 fdf1 	bl	210f2 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    d510:	4b19      	ldr	r3, [pc, #100]	; (d578 <smp_pairing_req+0x35c>)
    d512:	681b      	ldr	r3, [r3, #0]
    d514:	4628      	mov	r0, r5
    d516:	685b      	ldr	r3, [r3, #4]
    d518:	4798      	blx	r3
    d51a:	e7f2      	b.n	d502 <smp_pairing_req+0x2e6>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d51c:	2301      	movs	r3, #1
    d51e:	f04f 0200 	mov.w	r2, #0
    d522:	f363 0207 	bfi	r2, r3, #0, #8
    d526:	4816      	ldr	r0, [pc, #88]	; (d580 <smp_pairing_req+0x364>)
    d528:	4b16      	ldr	r3, [pc, #88]	; (d584 <smp_pairing_req+0x368>)
    d52a:	1a1b      	subs	r3, r3, r0
    d52c:	08db      	lsrs	r3, r3, #3
    d52e:	f363 128f 	bfi	r2, r3, #6, #10
    d532:	4817      	ldr	r0, [pc, #92]	; (d590 <smp_pairing_req+0x374>)
    d534:	f011 fa9b 	bl	1ea6e <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    d538:	e7b2      	b.n	d4a0 <smp_pairing_req+0x284>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    d53a:	7aba      	ldrb	r2, [r7, #10]
    d53c:	2a04      	cmp	r2, #4
    d53e:	461d      	mov	r5, r3
    d540:	d128      	bne.n	d594 <smp_pairing_req+0x378>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    d542:	2b00      	cmp	r3, #0
    d544:	f43f af75 	beq.w	d432 <smp_pairing_req+0x216>
	return MIN(req->max_key_size, rsp->max_key_size);
    d548:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
    d54c:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    d550:	4293      	cmp	r3, r2
    d552:	bf28      	it	cs
    d554:	4613      	movcs	r3, r2
    d556:	2b10      	cmp	r3, #16
    d558:	f47f ae68 	bne.w	d22c <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    d55c:	210c      	movs	r1, #12
    d55e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d562:	f013 fdc6 	bl	210f2 <atomic_set_bit>
	return send_pairing_rsp(smp);
    d566:	4620      	mov	r0, r4
    d568:	f013 fef3 	bl	21352 <send_pairing_rsp>
    d56c:	4605      	mov	r5, r0
    d56e:	e65e      	b.n	d22e <smp_pairing_req+0x12>
    d570:	2000a541 	.word	0x2000a541
    d574:	00028c02 	.word	0x00028c02
    d578:	200002c8 	.word	0x200002c8
    d57c:	00028c1b 	.word	0x00028c1b
    d580:	00025a6c 	.word	0x00025a6c
    d584:	00025b64 	.word	0x00025b64
    d588:	00028cd9 	.word	0x00028cd9
    d58c:	000f4240 	.word	0x000f4240
    d590:	00028d06 	.word	0x00028d06
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d594:	2b00      	cmp	r3, #0
    d596:	d1e1      	bne.n	d55c <smp_pairing_req+0x340>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d598:	210e      	movs	r1, #14
    d59a:	4630      	mov	r0, r6
    d59c:	f013 fdb8 	bl	21110 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d5a0:	2800      	cmp	r0, #0
    d5a2:	d1db      	bne.n	d55c <smp_pairing_req+0x340>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d5a4:	4f03      	ldr	r7, [pc, #12]	; (d5b4 <smp_pairing_req+0x398>)
    d5a6:	683b      	ldr	r3, [r7, #0]
    d5a8:	2b00      	cmp	r3, #0
    d5aa:	d0d7      	beq.n	d55c <smp_pairing_req+0x340>
	    bt_auth && bt_auth->pairing_confirm) {
    d5ac:	695b      	ldr	r3, [r3, #20]
    d5ae:	2b00      	cmp	r3, #0
    d5b0:	d0d4      	beq.n	d55c <smp_pairing_req+0x340>
    d5b2:	e706      	b.n	d3c2 <smp_pairing_req+0x1a6>
    d5b4:	200002c8 	.word	0x200002c8

0000d5b8 <sc_send_public_key>:
{
    d5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    d5ba:	210c      	movs	r1, #12
{
    d5bc:	4606      	mov	r6, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    d5be:	f013 fe67 	bl	21290 <smp_create_pdu.isra.6>
	if (!req_buf) {
    d5c2:	4604      	mov	r4, r0
    d5c4:	b1b0      	cbz	r0, d5f4 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    d5c6:	2140      	movs	r1, #64	; 0x40
    d5c8:	3008      	adds	r0, #8
    d5ca:	f015 f833 	bl	22634 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    d5ce:	4d0a      	ldr	r5, [pc, #40]	; (d5f8 <sc_send_public_key+0x40>)
    d5d0:	2220      	movs	r2, #32
    d5d2:	6829      	ldr	r1, [r5, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    d5d4:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    d5d6:	f012 f80f 	bl	1f5f8 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    d5da:	6829      	ldr	r1, [r5, #0]
    d5dc:	2220      	movs	r2, #32
    d5de:	4411      	add	r1, r2
    d5e0:	18b8      	adds	r0, r7, r2
    d5e2:	f012 f809 	bl	1f5f8 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    d5e6:	4630      	mov	r0, r6
    d5e8:	2200      	movs	r2, #0
    d5ea:	4621      	mov	r1, r4
    d5ec:	f7ff fc74 	bl	ced8 <smp_send.isra.7>
	return 0;
    d5f0:	2000      	movs	r0, #0
}
    d5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    d5f4:	2008      	movs	r0, #8
    d5f6:	e7fc      	b.n	d5f2 <sc_send_public_key+0x3a>
    d5f8:	2000069c 	.word	0x2000069c

0000d5fc <smp_public_key>:
{
    d5fc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    d5fe:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    d600:	f100 04e7 	add.w	r4, r0, #231	; 0xe7
{
    d604:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    d606:	2220      	movs	r2, #32
    d608:	4631      	mov	r1, r6
    d60a:	4620      	mov	r0, r4
    d60c:	f011 fff4 	bl	1f5f8 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    d610:	2220      	movs	r2, #32
    d612:	18b1      	adds	r1, r6, r2
    d614:	f205 1007 	addw	r0, r5, #263	; 0x107
    d618:	f011 ffee 	bl	1f5f8 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    d61c:	2240      	movs	r2, #64	; 0x40
    d61e:	4922      	ldr	r1, [pc, #136]	; (d6a8 <smp_public_key+0xac>)
    d620:	4620      	mov	r0, r4
    d622:	f011 ffd9 	bl	1f5d8 <memcmp>
    d626:	b148      	cbz	r0, d63c <smp_public_key+0x40>
	if (!sc_public_key) {
    d628:	4b20      	ldr	r3, [pc, #128]	; (d6ac <smp_public_key+0xb0>)
    d62a:	681c      	ldr	r4, [r3, #0]
    d62c:	bb94      	cbnz	r4, d694 <smp_public_key+0x98>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    d62e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    d632:	2106      	movs	r1, #6
    d634:	f013 fd5d 	bl	210f2 <atomic_set_bit>
		return 0;
    d638:	4620      	mov	r0, r4
}
    d63a:	bd70      	pop	{r4, r5, r6, pc}
		BT_INFO("Remote is using Debug Public key");
    d63c:	2303      	movs	r3, #3
    d63e:	f04f 0100 	mov.w	r1, #0
    d642:	4a1b      	ldr	r2, [pc, #108]	; (d6b0 <smp_public_key+0xb4>)
    d644:	481b      	ldr	r0, [pc, #108]	; (d6b4 <smp_public_key+0xb8>)
    d646:	f363 0107 	bfi	r1, r3, #0, #8
    d64a:	4b1b      	ldr	r3, [pc, #108]	; (d6b8 <smp_public_key+0xbc>)
    d64c:	1a9b      	subs	r3, r3, r2
    d64e:	08db      	lsrs	r3, r3, #3
    d650:	f363 118f 	bfi	r1, r3, #6, #10
    d654:	f011 f9fe 	bl	1ea54 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    d658:	210d      	movs	r1, #13
    d65a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    d65e:	f013 fd48 	bl	210f2 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    d662:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
    d664:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    d668:	b933      	cbnz	r3, d678 <smp_public_key+0x7c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d66a:	f104 0170 	add.w	r1, r4, #112	; 0x70
    d66e:	7a20      	ldrb	r0, [r4, #8]
    d670:	f001 f82a 	bl	e6c8 <bt_keys_get_addr>
    d674:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
	if (!conn->le.keys ||
    d678:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    d67c:	2b00      	cmp	r3, #0
    d67e:	d0d3      	beq.n	d628 <smp_public_key+0x2c>
    d680:	895a      	ldrh	r2, [r3, #10]
    d682:	f002 0224 	and.w	r2, r2, #36	; 0x24
    d686:	2a00      	cmp	r2, #0
    d688:	d0ce      	beq.n	d628 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    d68a:	7a5b      	ldrb	r3, [r3, #9]
    d68c:	079b      	lsls	r3, r3, #30
    d68e:	d5cb      	bpl.n	d628 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    d690:	2003      	movs	r0, #3
    d692:	e7d2      	b.n	d63a <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
    d694:	4628      	mov	r0, r5
    d696:	f7ff ff8f 	bl	d5b8 <sc_send_public_key>
	if (err) {
    d69a:	2800      	cmp	r0, #0
    d69c:	d1cd      	bne.n	d63a <smp_public_key+0x3e>
    d69e:	4628      	mov	r0, r5
}
    d6a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d6a4:	f7ff bc6e 	b.w	cf84 <smp_public_key_slave.part.13>
    d6a8:	00028c44 	.word	0x00028c44
    d6ac:	2000069c 	.word	0x2000069c
    d6b0:	00025a6c 	.word	0x00025a6c
    d6b4:	00028d22 	.word	0x00028d22
    d6b8:	00025b64 	.word	0x00025b64

0000d6bc <smp_pairing_complete>:
{
    d6bc:	b570      	push	{r4, r5, r6, lr}
    d6be:	4604      	mov	r4, r0
    d6c0:	4e17      	ldr	r6, [pc, #92]	; (d720 <smp_pairing_complete+0x64>)
    d6c2:	3094      	adds	r0, #148	; 0x94
	if (!status) {
    d6c4:	b9a9      	cbnz	r1, d6f2 <smp_pairing_complete+0x36>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    d6c6:	210c      	movs	r1, #12
    d6c8:	f013 fd22 	bl	21110 <atomic_test_bit>
		if (bond_flag) {
    d6cc:	4605      	mov	r5, r0
    d6ce:	b120      	cbz	r0, d6da <smp_pairing_complete+0x1e>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    d6d0:	6823      	ldr	r3, [r4, #0]
    d6d2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    d6d6:	f001 f9bd 	bl	ea54 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    d6da:	6833      	ldr	r3, [r6, #0]
    d6dc:	b123      	cbz	r3, d6e8 <smp_pairing_complete+0x2c>
    d6de:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
    d6e0:	b113      	cbz	r3, d6e8 <smp_pairing_complete+0x2c>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    d6e2:	4629      	mov	r1, r5
    d6e4:	6820      	ldr	r0, [r4, #0]
    d6e6:	4798      	blx	r3
	smp_reset(smp);
    d6e8:	4620      	mov	r0, r4
}
    d6ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	smp_reset(smp);
    d6ee:	f013 be66 	b.w	213be <smp_reset>
	switch (smp_err) {
    d6f2:	3901      	subs	r1, #1
    d6f4:	b2c9      	uxtb	r1, r1
    d6f6:	290d      	cmp	r1, #13
    d6f8:	bf9c      	itt	ls
    d6fa:	4b0a      	ldrls	r3, [pc, #40]	; (d724 <smp_pairing_complete+0x68>)
    d6fc:	5c5d      	ldrbls	r5, [r3, r1]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    d6fe:	f04f 0102 	mov.w	r1, #2
	if (!status) {
    d702:	bf88      	it	hi
    d704:	2508      	movhi	r5, #8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    d706:	f013 fd03 	bl	21110 <atomic_test_bit>
    d70a:	b918      	cbnz	r0, d714 <smp_pairing_complete+0x58>
			bt_conn_security_changed(smp->chan.chan.conn, auth_err);
    d70c:	4629      	mov	r1, r5
    d70e:	6820      	ldr	r0, [r4, #0]
    d710:	f7fb fbe2 	bl	8ed8 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    d714:	6833      	ldr	r3, [r6, #0]
    d716:	2b00      	cmp	r3, #0
    d718:	d0e6      	beq.n	d6e8 <smp_pairing_complete+0x2c>
    d71a:	69db      	ldr	r3, [r3, #28]
    d71c:	e7e0      	b.n	d6e0 <smp_pairing_complete+0x24>
    d71e:	bf00      	nop
    d720:	200002c8 	.word	0x200002c8
    d724:	000289d5 	.word	0x000289d5

0000d728 <bt_smp_dhkey_ready>:
{
    d728:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    d72a:	2107      	movs	r1, #7
{
    d72c:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    d72e:	4816      	ldr	r0, [pc, #88]	; (d788 <bt_smp_dhkey_ready+0x60>)
    d730:	f013 fe2a 	bl	21388 <atomic_test_and_clear_bit>
    d734:	b338      	cbz	r0, d786 <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
    d736:	b92c      	cbnz	r4, d744 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    d738:	210b      	movs	r1, #11
			smp_error(smp, err);
    d73a:	4814      	ldr	r0, [pc, #80]	; (d78c <bt_smp_dhkey_ready+0x64>)
}
    d73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    d740:	f013 be68 	b.w	21414 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    d744:	4621      	mov	r1, r4
    d746:	2220      	movs	r2, #32
    d748:	4811      	ldr	r0, [pc, #68]	; (d790 <bt_smp_dhkey_ready+0x68>)
    d74a:	f011 ff55 	bl	1f5f8 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    d74e:	2109      	movs	r1, #9
    d750:	480d      	ldr	r0, [pc, #52]	; (d788 <bt_smp_dhkey_ready+0x60>)
    d752:	f013 fcdd 	bl	21110 <atomic_test_bit>
    d756:	b128      	cbz	r0, d764 <bt_smp_dhkey_ready+0x3c>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    d758:	2108      	movs	r1, #8
    d75a:	480b      	ldr	r0, [pc, #44]	; (d788 <bt_smp_dhkey_ready+0x60>)
}
    d75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    d760:	f013 bcc7 	b.w	210f2 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    d764:	210f      	movs	r1, #15
    d766:	4808      	ldr	r0, [pc, #32]	; (d788 <bt_smp_dhkey_ready+0x60>)
    d768:	f013 fcd2 	bl	21110 <atomic_test_bit>
    d76c:	2800      	cmp	r0, #0
    d76e:	d1f3      	bne.n	d758 <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    d770:	2108      	movs	r1, #8
    d772:	4805      	ldr	r0, [pc, #20]	; (d788 <bt_smp_dhkey_ready+0x60>)
    d774:	f013 fccc 	bl	21110 <atomic_test_bit>
    d778:	b128      	cbz	r0, d786 <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    d77a:	4804      	ldr	r0, [pc, #16]	; (d78c <bt_smp_dhkey_ready+0x64>)
    d77c:	f7ff fc66 	bl	d04c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    d780:	4601      	mov	r1, r0
    d782:	2800      	cmp	r0, #0
    d784:	d1d9      	bne.n	d73a <bt_smp_dhkey_ready+0x12>
}
    d786:	bd10      	pop	{r4, pc}
    d788:	20000594 	.word	0x20000594
    d78c:	20000500 	.word	0x20000500
    d790:	20000627 	.word	0x20000627

0000d794 <bt_smp_recv>:
{
    d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    d796:	898b      	ldrh	r3, [r1, #12]
{
    d798:	4604      	mov	r4, r0
    d79a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    d79c:	b97b      	cbnz	r3, d7be <bt_smp_recv+0x2a>
		BT_ERR("Too small SMP PDU received");
    d79e:	2301      	movs	r3, #1
    d7a0:	f04f 0100 	mov.w	r1, #0
    d7a4:	f363 0107 	bfi	r1, r3, #0, #8
    d7a8:	4a3c      	ldr	r2, [pc, #240]	; (d89c <bt_smp_recv+0x108>)
    d7aa:	4b3d      	ldr	r3, [pc, #244]	; (d8a0 <bt_smp_recv+0x10c>)
    d7ac:	483d      	ldr	r0, [pc, #244]	; (d8a4 <bt_smp_recv+0x110>)
    d7ae:	1a9b      	subs	r3, r3, r2
    d7b0:	08db      	lsrs	r3, r3, #3
    d7b2:	f363 118f 	bfi	r1, r3, #6, #10
    d7b6:	f011 f94d 	bl	1ea54 <log_0>
}
    d7ba:	2000      	movs	r0, #0
    d7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    d7be:	2101      	movs	r1, #1
    d7c0:	f105 0008 	add.w	r0, r5, #8
    d7c4:	f014 ff67 	bl	22696 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d7c8:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    d7ca:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d7cc:	f104 0094 	add.w	r0, r4, #148	; 0x94
    d7d0:	f013 fc9e 	bl	21110 <atomic_test_bit>
    d7d4:	7831      	ldrb	r1, [r6, #0]
    d7d6:	b170      	cbz	r0, d7f6 <bt_smp_recv+0x62>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    d7d8:	2302      	movs	r3, #2
    d7da:	f04f 0200 	mov.w	r2, #0
    d7de:	f363 0207 	bfi	r2, r3, #0, #8
    d7e2:	482e      	ldr	r0, [pc, #184]	; (d89c <bt_smp_recv+0x108>)
    d7e4:	4b2e      	ldr	r3, [pc, #184]	; (d8a0 <bt_smp_recv+0x10c>)
    d7e6:	1a1b      	subs	r3, r3, r0
    d7e8:	08db      	lsrs	r3, r3, #3
    d7ea:	f363 128f 	bfi	r2, r3, #6, #10
    d7ee:	482e      	ldr	r0, [pc, #184]	; (d8a8 <bt_smp_recv+0x114>)
    d7f0:	f011 f93d 	bl	1ea6e <log_1>
		return 0;
    d7f4:	e7e1      	b.n	d7ba <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    d7f6:	290d      	cmp	r1, #13
    d7f8:	d803      	bhi.n	d802 <bt_smp_recv+0x6e>
    d7fa:	4f2c      	ldr	r7, [pc, #176]	; (d8ac <bt_smp_recv+0x118>)
    d7fc:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    d800:	b993      	cbnz	r3, d828 <bt_smp_recv+0x94>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    d802:	2302      	movs	r3, #2
    d804:	f04f 0200 	mov.w	r2, #0
    d808:	f363 0207 	bfi	r2, r3, #0, #8
    d80c:	4823      	ldr	r0, [pc, #140]	; (d89c <bt_smp_recv+0x108>)
    d80e:	4b24      	ldr	r3, [pc, #144]	; (d8a0 <bt_smp_recv+0x10c>)
    d810:	1a1b      	subs	r3, r3, r0
    d812:	08db      	lsrs	r3, r3, #3
    d814:	f363 128f 	bfi	r2, r3, #6, #10
    d818:	4825      	ldr	r0, [pc, #148]	; (d8b0 <bt_smp_recv+0x11c>)
    d81a:	f011 f928 	bl	1ea6e <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    d81e:	2107      	movs	r1, #7
		smp_error(smp, err);
    d820:	4620      	mov	r0, r4
    d822:	f013 fdf7 	bl	21414 <smp_error>
    d826:	e7c8      	b.n	d7ba <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    d828:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d82c:	f013 fdac 	bl	21388 <atomic_test_and_clear_bit>
    d830:	7831      	ldrb	r1, [r6, #0]
    d832:	b990      	cbnz	r0, d85a <bt_smp_recv+0xc6>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    d834:	2302      	movs	r3, #2
    d836:	f04f 0200 	mov.w	r2, #0
    d83a:	f363 0207 	bfi	r2, r3, #0, #8
    d83e:	4817      	ldr	r0, [pc, #92]	; (d89c <bt_smp_recv+0x108>)
    d840:	4b17      	ldr	r3, [pc, #92]	; (d8a0 <bt_smp_recv+0x10c>)
    d842:	1a1b      	subs	r3, r3, r0
    d844:	08db      	lsrs	r3, r3, #3
    d846:	f363 128f 	bfi	r2, r3, #6, #10
    d84a:	481a      	ldr	r0, [pc, #104]	; (d8b4 <bt_smp_recv+0x120>)
    d84c:	f011 f90f 	bl	1ea6e <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    d850:	7833      	ldrb	r3, [r6, #0]
    d852:	2b05      	cmp	r3, #5
    d854:	d0b1      	beq.n	d7ba <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    d856:	2108      	movs	r1, #8
    d858:	e7e2      	b.n	d820 <bt_smp_recv+0x8c>
	if (buf->len != handlers[hdr->code].expect_len) {
    d85a:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    d85e:	89a8      	ldrh	r0, [r5, #12]
    d860:	791b      	ldrb	r3, [r3, #4]
    d862:	4283      	cmp	r3, r0
    d864:	d011      	beq.n	d88a <bt_smp_recv+0xf6>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    d866:	2201      	movs	r2, #1
    d868:	f04f 0300 	mov.w	r3, #0
    d86c:	f362 0307 	bfi	r3, r2, #0, #8
    d870:	4d0a      	ldr	r5, [pc, #40]	; (d89c <bt_smp_recv+0x108>)
    d872:	4a0b      	ldr	r2, [pc, #44]	; (d8a0 <bt_smp_recv+0x10c>)
    d874:	1b52      	subs	r2, r2, r5
    d876:	08d2      	lsrs	r2, r2, #3
    d878:	f362 138f 	bfi	r3, r2, #6, #10
    d87c:	460a      	mov	r2, r1
    d87e:	4601      	mov	r1, r0
    d880:	480d      	ldr	r0, [pc, #52]	; (d8b8 <bt_smp_recv+0x124>)
    d882:	f011 f908 	bl	1ea96 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    d886:	210a      	movs	r1, #10
    d888:	e7ca      	b.n	d820 <bt_smp_recv+0x8c>
	err = handlers[hdr->code].func(smp, buf);
    d88a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    d88e:	4620      	mov	r0, r4
    d890:	4629      	mov	r1, r5
    d892:	4798      	blx	r3
	if (err) {
    d894:	4601      	mov	r1, r0
    d896:	2800      	cmp	r0, #0
    d898:	d08f      	beq.n	d7ba <bt_smp_recv+0x26>
    d89a:	e7c1      	b.n	d820 <bt_smp_recv+0x8c>
    d89c:	00025a6c 	.word	0x00025a6c
    d8a0:	00025b64 	.word	0x00025b64
    d8a4:	00028afa 	.word	0x00028afa
    d8a8:	00028b15 	.word	0x00028b15
    d8ac:	0002641c 	.word	0x0002641c
    d8b0:	00028b46 	.word	0x00028b46
    d8b4:	00028b60 	.word	0x00028b60
    d8b8:	0002866b 	.word	0x0002866b

0000d8bc <smp_pairing_failed>:
{
    d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ERR("reason 0x%x", req->reason);
    d8be:	f04f 0200 	mov.w	r2, #0
    d8c2:	2301      	movs	r3, #1
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    d8c4:	688e      	ldr	r6, [r1, #8]
    d8c6:	491b      	ldr	r1, [pc, #108]	; (d934 <smp_pairing_failed+0x78>)
	BT_ERR("reason 0x%x", req->reason);
    d8c8:	f363 0207 	bfi	r2, r3, #0, #8
    d8cc:	4b1a      	ldr	r3, [pc, #104]	; (d938 <smp_pairing_failed+0x7c>)
	struct bt_conn *conn = smp->chan.chan.conn;
    d8ce:	4604      	mov	r4, r0
    d8d0:	1a5b      	subs	r3, r3, r1
    d8d2:	f854 7b94 	ldr.w	r7, [r4], #148
	BT_ERR("reason 0x%x", req->reason);
    d8d6:	7831      	ldrb	r1, [r6, #0]
    d8d8:	08db      	lsrs	r3, r3, #3
{
    d8da:	4605      	mov	r5, r0
	BT_ERR("reason 0x%x", req->reason);
    d8dc:	f363 128f 	bfi	r2, r3, #6, #10
    d8e0:	4816      	ldr	r0, [pc, #88]	; (d93c <smp_pairing_failed+0x80>)
    d8e2:	f011 f8c4 	bl	1ea6e <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    d8e6:	2109      	movs	r1, #9
    d8e8:	4620      	mov	r0, r4
    d8ea:	f013 fd4d 	bl	21388 <atomic_test_and_clear_bit>
    d8ee:	b198      	cbz	r0, d918 <smp_pairing_failed+0x5c>
		if (bt_auth && bt_auth->cancel) {
    d8f0:	4b13      	ldr	r3, [pc, #76]	; (d940 <smp_pairing_failed+0x84>)
    d8f2:	681b      	ldr	r3, [r3, #0]
    d8f4:	b9bb      	cbnz	r3, d926 <smp_pairing_failed+0x6a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    d8f6:	2102      	movs	r1, #2
    d8f8:	4620      	mov	r0, r4
    d8fa:	f013 fc09 	bl	21110 <atomic_test_bit>
    d8fe:	b128      	cbz	r0, d90c <smp_pairing_failed+0x50>
	    smp->chan.chan.conn->le.keys) {
    d900:	682b      	ldr	r3, [r5, #0]
    d902:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    d906:	b108      	cbz	r0, d90c <smp_pairing_failed+0x50>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    d908:	f000 ffb4 	bl	e874 <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    d90c:	4628      	mov	r0, r5
    d90e:	7831      	ldrb	r1, [r6, #0]
    d910:	f7ff fed4 	bl	d6bc <smp_pairing_complete>
}
    d914:	2000      	movs	r0, #0
    d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    d918:	210a      	movs	r1, #10
    d91a:	4620      	mov	r0, r4
    d91c:	f013 fd34 	bl	21388 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    d920:	2800      	cmp	r0, #0
    d922:	d1e5      	bne.n	d8f0 <smp_pairing_failed+0x34>
    d924:	e7e7      	b.n	d8f6 <smp_pairing_failed+0x3a>
		if (bt_auth && bt_auth->cancel) {
    d926:	691b      	ldr	r3, [r3, #16]
    d928:	2b00      	cmp	r3, #0
    d92a:	d0e4      	beq.n	d8f6 <smp_pairing_failed+0x3a>
			bt_auth->cancel(conn);
    d92c:	4638      	mov	r0, r7
    d92e:	4798      	blx	r3
    d930:	e7e1      	b.n	d8f6 <smp_pairing_failed+0x3a>
    d932:	bf00      	nop
    d934:	00025a6c 	.word	0x00025a6c
    d938:	00025b64 	.word	0x00025b64
    d93c:	00028ccd 	.word	0x00028ccd
    d940:	200002c8 	.word	0x200002c8

0000d944 <smp_timeout>:
{
    d944:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("SMP Timeout");
    d946:	f04f 0100 	mov.w	r1, #0
    d94a:	2301      	movs	r3, #1
    d94c:	f363 0107 	bfi	r1, r3, #0, #8
    d950:	4a10      	ldr	r2, [pc, #64]	; (d994 <smp_timeout+0x50>)
    d952:	4b11      	ldr	r3, [pc, #68]	; (d998 <smp_timeout+0x54>)
    d954:	1a9b      	subs	r3, r3, r2
{
    d956:	4604      	mov	r4, r0
    d958:	08db      	lsrs	r3, r3, #3
	BT_ERR("SMP Timeout");
    d95a:	f363 118f 	bfi	r1, r3, #6, #10
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    d95e:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    d962:	3ce8      	subs	r4, #232	; 0xe8
	BT_ERR("SMP Timeout");
    d964:	480d      	ldr	r0, [pc, #52]	; (d99c <smp_timeout+0x58>)
    d966:	f011 f875 	bl	1ea54 <log_0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    d96a:	2102      	movs	r1, #2
    d96c:	4620      	mov	r0, r4
    d96e:	f013 fbcf 	bl	21110 <atomic_test_bit>
    d972:	b128      	cbz	r0, d980 <smp_timeout+0x3c>
	    smp->chan.chan.conn->le.keys) {
    d974:	682b      	ldr	r3, [r5, #0]
    d976:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    d97a:	b108      	cbz	r0, d980 <smp_timeout+0x3c>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    d97c:	f000 ff7a 	bl	e874 <bt_keys_clear>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    d980:	4620      	mov	r0, r4
    d982:	2104      	movs	r1, #4
    d984:	f013 fbb5 	bl	210f2 <atomic_set_bit>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    d988:	4628      	mov	r0, r5
    d98a:	2108      	movs	r1, #8
}
    d98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    d990:	f7ff be94 	b.w	d6bc <smp_pairing_complete>
    d994:	00025a6c 	.word	0x00025a6c
    d998:	00025b64 	.word	0x00025b64
    d99c:	00028d57 	.word	0x00028d57

0000d9a0 <smp_signing_info>:
{
    d9a0:	b570      	push	{r4, r5, r6, lr}
    d9a2:	460a      	mov	r2, r1
    d9a4:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d9a6:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
    d9a8:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d9ac:	f013 fbb0 	bl	21110 <atomic_test_bit>
    d9b0:	b320      	cbz	r0, d9fc <smp_signing_info+0x5c>
					&conn->le.dst);
    d9b2:	f103 0670 	add.w	r6, r3, #112	; 0x70
		struct bt_smp_signing_info *req = (void *)buf->data;
    d9b6:	6894      	ldr	r4, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    d9b8:	7a19      	ldrb	r1, [r3, #8]
    d9ba:	4632      	mov	r2, r6
    d9bc:	2010      	movs	r0, #16
    d9be:	f013 ff11 	bl	217e4 <bt_keys_get_type>
		if (!keys) {
    d9c2:	b9b0      	cbnz	r0, d9f2 <smp_signing_info+0x52>
			BT_ERR("Unable to get keys for %s",
    d9c4:	2301      	movs	r3, #1
    d9c6:	f04f 0400 	mov.w	r4, #0
    d9ca:	4a14      	ldr	r2, [pc, #80]	; (da1c <smp_signing_info+0x7c>)
    d9cc:	f363 0407 	bfi	r4, r3, #0, #8
    d9d0:	4b13      	ldr	r3, [pc, #76]	; (da20 <smp_signing_info+0x80>)
    d9d2:	1a9b      	subs	r3, r3, r2
    d9d4:	08db      	lsrs	r3, r3, #3
    d9d6:	4630      	mov	r0, r6
    d9d8:	f363 148f 	bfi	r4, r3, #6, #10
    d9dc:	f7f8 fa48 	bl	5e70 <bt_addr_le_str_real>
    d9e0:	f7f5 fb58 	bl	3094 <log_strdup>
    d9e4:	4622      	mov	r2, r4
    d9e6:	4601      	mov	r1, r0
    d9e8:	480e      	ldr	r0, [pc, #56]	; (da24 <smp_signing_info+0x84>)
    d9ea:	f011 f840 	bl	1ea6e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    d9ee:	2008      	movs	r0, #8
}
    d9f0:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    d9f2:	2210      	movs	r2, #16
    d9f4:	4621      	mov	r1, r4
    d9f6:	3050      	adds	r0, #80	; 0x50
    d9f8:	f011 fdfe 	bl	1f5f8 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    d9fc:	f895 3179 	ldrb.w	r3, [r5, #377]	; 0x179
    da00:	f023 0304 	bic.w	r3, r3, #4
    da04:	f885 3179 	strb.w	r3, [r5, #377]	; 0x179
	if (!smp->local_dist && !smp->remote_dist) {
    da08:	f8b5 4178 	ldrh.w	r4, [r5, #376]	; 0x178
    da0c:	b91c      	cbnz	r4, da16 <smp_signing_info+0x76>
		smp_pairing_complete(smp, 0);
    da0e:	4621      	mov	r1, r4
    da10:	4628      	mov	r0, r5
    da12:	f7ff fe53 	bl	d6bc <smp_pairing_complete>
	return 0;
    da16:	2000      	movs	r0, #0
    da18:	e7ea      	b.n	d9f0 <smp_signing_info+0x50>
    da1a:	bf00      	nop
    da1c:	00025a6c 	.word	0x00025a6c
    da20:	00025b64 	.word	0x00025b64
    da24:	00028cb3 	.word	0x00028cb3

0000da28 <smp_master_ident>:
{
    da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da2a:	460a      	mov	r2, r1
    da2c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    da2e:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
    da30:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    da34:	f013 fb6c 	bl	21110 <atomic_test_bit>
    da38:	b388      	cbz	r0, da9e <smp_master_ident+0x76>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    da3a:	f103 0770 	add.w	r7, r3, #112	; 0x70
		struct bt_smp_master_ident *req = (void *)buf->data;
    da3e:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    da40:	7a19      	ldrb	r1, [r3, #8]
    da42:	463a      	mov	r2, r7
    da44:	2004      	movs	r0, #4
    da46:	f013 fecd 	bl	217e4 <bt_keys_get_type>
		if (!keys) {
    da4a:	4605      	mov	r5, r0
    da4c:	b9b0      	cbnz	r0, da7c <smp_master_ident+0x54>
			BT_ERR("Unable to get keys for %s",
    da4e:	2301      	movs	r3, #1
    da50:	f04f 0400 	mov.w	r4, #0
    da54:	4a1d      	ldr	r2, [pc, #116]	; (dacc <smp_master_ident+0xa4>)
    da56:	f363 0407 	bfi	r4, r3, #0, #8
    da5a:	4b1d      	ldr	r3, [pc, #116]	; (dad0 <smp_master_ident+0xa8>)
    da5c:	1a9b      	subs	r3, r3, r2
    da5e:	08db      	lsrs	r3, r3, #3
    da60:	4638      	mov	r0, r7
    da62:	f363 148f 	bfi	r4, r3, #6, #10
    da66:	f7f8 fa03 	bl	5e70 <bt_addr_le_str_real>
    da6a:	f7f5 fb13 	bl	3094 <log_strdup>
    da6e:	4622      	mov	r2, r4
    da70:	4601      	mov	r1, r0
    da72:	4818      	ldr	r0, [pc, #96]	; (dad4 <smp_master_ident+0xac>)
    da74:	f010 fffb 	bl	1ea6e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    da78:	2008      	movs	r0, #8
}
    da7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    da7c:	2202      	movs	r2, #2
    da7e:	4631      	mov	r1, r6
    da80:	3014      	adds	r0, #20
    da82:	f011 fdb9 	bl	1f5f8 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    da86:	2208      	movs	r2, #8
    da88:	1cb1      	adds	r1, r6, #2
    da8a:	f105 000c 	add.w	r0, r5, #12
    da8e:	f011 fdb3 	bl	1f5f8 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    da92:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    da96:	f023 0301 	bic.w	r3, r3, #1
    da9a:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    da9e:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    daa2:	079a      	lsls	r2, r3, #30
    daa4:	d50d      	bpl.n	dac2 <smp_master_ident+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    daa6:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    daa8:	f104 0090 	add.w	r0, r4, #144	; 0x90
    daac:	f013 fb21 	bl	210f2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    dab0:	f8b4 5178 	ldrh.w	r5, [r4, #376]	; 0x178
    dab4:	b91d      	cbnz	r5, dabe <smp_master_ident+0x96>
		smp_pairing_complete(smp, 0);
    dab6:	4629      	mov	r1, r5
    dab8:	4620      	mov	r0, r4
    daba:	f7ff fdff 	bl	d6bc <smp_pairing_complete>
	return 0;
    dabe:	2000      	movs	r0, #0
    dac0:	e7db      	b.n	da7a <smp_master_ident+0x52>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    dac2:	075b      	lsls	r3, r3, #29
    dac4:	d5f4      	bpl.n	dab0 <smp_master_ident+0x88>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    dac6:	210a      	movs	r1, #10
    dac8:	e7ee      	b.n	daa8 <smp_master_ident+0x80>
    daca:	bf00      	nop
    dacc:	00025a6c 	.word	0x00025a6c
    dad0:	00025b64 	.word	0x00025b64
    dad4:	00028cb3 	.word	0x00028cb3

0000dad8 <bt_smp_connected>:
{
    dad8:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    dada:	4905      	ldr	r1, [pc, #20]	; (daf0 <bt_smp_connected+0x18>)
{
    dadc:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    dade:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    dae2:	f017 fcc2 	bl	2546a <k_delayed_work_init>
	smp_reset(smp);
    dae6:	4620      	mov	r0, r4
}
    dae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    daec:	f013 bc67 	b.w	213be <smp_reset>
    daf0:	0000d945 	.word	0x0000d945

0000daf4 <bt_smp_encrypt_change>:
{
    daf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    daf8:	4605      	mov	r5, r0
{
    dafa:	460f      	mov	r7, r1
	struct bt_conn *conn = chan->conn;
    dafc:	f855 6b94 	ldr.w	r6, [r5], #148
{
    db00:	b089      	sub	sp, #36	; 0x24
    db02:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    db04:	2101      	movs	r1, #1
    db06:	4628      	mov	r0, r5
    db08:	f013 fb98 	bl	2123c <atomic_clear_bit>
	if (hci_status) {
    db0c:	b947      	cbnz	r7, db20 <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
    db0e:	7af3      	ldrb	r3, [r6, #11]
    db10:	b133      	cbz	r3, db20 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    db12:	2103      	movs	r1, #3
    db14:	f013 fafc 	bl	21110 <atomic_test_bit>
    db18:	b928      	cbnz	r0, db26 <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
    db1a:	4620      	mov	r0, r4
    db1c:	f013 fc4f 	bl	213be <smp_reset>
}
    db20:	b009      	add	sp, #36	; 0x24
    db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    db26:	2105      	movs	r1, #5
    db28:	4628      	mov	r0, r5
    db2a:	f013 faf1 	bl	21110 <atomic_test_bit>
    db2e:	b198      	cbz	r0, db58 <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    db30:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    db34:	071a      	lsls	r2, r3, #28
    db36:	d507      	bpl.n	db48 <bt_smp_encrypt_change+0x54>
    db38:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    db3c:	071b      	lsls	r3, r3, #28
    db3e:	d503      	bpl.n	db48 <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    db40:	2110      	movs	r1, #16
    db42:	4628      	mov	r0, r5
    db44:	f013 fad5 	bl	210f2 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    db48:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    db4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    db50:	f023 0308 	bic.w	r3, r3, #8
    db54:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    db58:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    db5c:	07df      	lsls	r7, r3, #31
    db5e:	d524      	bpl.n	dbaa <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    db60:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    db62:	f104 0090 	add.w	r0, r4, #144	; 0x90
    db66:	f013 fac4 	bl	210f2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    db6a:	2102      	movs	r1, #2
    db6c:	4628      	mov	r0, r5
    db6e:	f013 fac0 	bl	210f2 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    db72:	f8d4 8000 	ldr.w	r8, [r4]
	struct bt_keys *keys = conn->le.keys;
    db76:	f8d8 709c 	ldr.w	r7, [r8, #156]	; 0x9c
	if (!keys) {
    db7a:	b9f7      	cbnz	r7, dbba <bt_smp_encrypt_change+0xc6>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    db7c:	2301      	movs	r3, #1
    db7e:	f04f 0400 	mov.w	r4, #0
    db82:	4a96      	ldr	r2, [pc, #600]	; (dddc <bt_smp_encrypt_change+0x2e8>)
    db84:	f363 0407 	bfi	r4, r3, #0, #8
    db88:	4b95      	ldr	r3, [pc, #596]	; (dde0 <bt_smp_encrypt_change+0x2ec>)
    db8a:	1a9b      	subs	r3, r3, r2
    db8c:	08db      	lsrs	r3, r3, #3
    db8e:	f108 0070 	add.w	r0, r8, #112	; 0x70
    db92:	f363 148f 	bfi	r4, r3, #6, #10
    db96:	f7f8 f96b 	bl	5e70 <bt_addr_le_str_real>
    db9a:	f7f5 fa7b 	bl	3094 <log_strdup>
    db9e:	4622      	mov	r2, r4
    dba0:	4601      	mov	r1, r0
    dba2:	4890      	ldr	r0, [pc, #576]	; (dde4 <bt_smp_encrypt_change+0x2f0>)
    dba4:	f010 ff63 	bl	1ea6e <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    dba8:	e7ba      	b.n	db20 <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    dbaa:	079e      	lsls	r6, r3, #30
    dbac:	d501      	bpl.n	dbb2 <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    dbae:	2108      	movs	r1, #8
    dbb0:	e7d7      	b.n	db62 <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    dbb2:	0758      	lsls	r0, r3, #29
    dbb4:	d5d9      	bpl.n	db6a <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    dbb6:	210a      	movs	r1, #10
    dbb8:	e7d3      	b.n	db62 <bt_smp_encrypt_change+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    dbba:	2105      	movs	r1, #5
    dbbc:	f013 faa8 	bl	21110 <atomic_test_bit>
    dbc0:	4682      	mov	sl, r0
    dbc2:	b9f0      	cbnz	r0, dc02 <bt_smp_encrypt_change+0x10e>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    dbc4:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    dbc8:	07d9      	lsls	r1, r3, #31
    dbca:	d51a      	bpl.n	dc02 <bt_smp_encrypt_change+0x10e>
	struct bt_keys *keys = conn->le.keys;
    dbcc:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    dbce:	211a      	movs	r1, #26
    dbd0:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    dbd2:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
		bt_rand((void *)&rand, sizeof(rand));
    dbd6:	f002 ff9d 	bl	10b14 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    dbda:	2106      	movs	r1, #6
    dbdc:	4620      	mov	r0, r4
    dbde:	f013 fb57 	bl	21290 <smp_create_pdu.isra.6>
		if (!buf) {
    dbe2:	4681      	mov	r9, r0
    dbe4:	bb40      	cbnz	r0, dc38 <bt_smp_encrypt_change+0x144>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    dbe6:	2301      	movs	r3, #1
    dbe8:	f04f 0100 	mov.w	r1, #0
    dbec:	f363 0107 	bfi	r1, r3, #0, #8
    dbf0:	4a7a      	ldr	r2, [pc, #488]	; (dddc <bt_smp_encrypt_change+0x2e8>)
    dbf2:	4b7b      	ldr	r3, [pc, #492]	; (dde0 <bt_smp_encrypt_change+0x2ec>)
    dbf4:	487c      	ldr	r0, [pc, #496]	; (dde8 <bt_smp_encrypt_change+0x2f4>)
    dbf6:	1a9b      	subs	r3, r3, r2
    dbf8:	08db      	lsrs	r3, r3, #3
    dbfa:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("Unable to allocate Master Ident buffer");
    dbfe:	f010 ff29 	bl	1ea54 <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    dc02:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    dc06:	079a      	lsls	r2, r3, #30
    dc08:	f140 80a9 	bpl.w	dd5e <bt_smp_encrypt_change+0x26a>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    dc0c:	2108      	movs	r1, #8
    dc0e:	4620      	mov	r0, r4
    dc10:	f013 fb3e 	bl	21290 <smp_create_pdu.isra.6>
		if (!buf) {
    dc14:	4606      	mov	r6, r0
    dc16:	2800      	cmp	r0, #0
    dc18:	d169      	bne.n	dcee <bt_smp_encrypt_change+0x1fa>
			BT_ERR("Unable to allocate Ident Info buffer");
    dc1a:	2301      	movs	r3, #1
    dc1c:	f04f 0100 	mov.w	r1, #0
    dc20:	f363 0107 	bfi	r1, r3, #0, #8
    dc24:	4a6d      	ldr	r2, [pc, #436]	; (dddc <bt_smp_encrypt_change+0x2e8>)
    dc26:	4b6e      	ldr	r3, [pc, #440]	; (dde0 <bt_smp_encrypt_change+0x2ec>)
    dc28:	4870      	ldr	r0, [pc, #448]	; (ddec <bt_smp_encrypt_change+0x2f8>)
    dc2a:	1a9b      	subs	r3, r3, r2
    dc2c:	08db      	lsrs	r3, r3, #3
    dc2e:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    dc32:	f010 ff0f 	bl	1ea54 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
    dc36:	e773      	b.n	db20 <bt_smp_encrypt_change+0x2c>
		info = net_buf_add(buf, sizeof(*info));
    dc38:	2110      	movs	r1, #16
    dc3a:	3008      	adds	r0, #8
    dc3c:	f014 fcfa 	bl	22634 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    dc40:	7a32      	ldrb	r2, [r6, #8]
    dc42:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    dc44:	4683      	mov	fp, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    dc46:	f011 fcd7 	bl	1f5f8 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    dc4a:	7a30      	ldrb	r0, [r6, #8]
    dc4c:	280f      	cmp	r0, #15
    dc4e:	d805      	bhi.n	dc5c <bt_smp_encrypt_change+0x168>
			(void)memset(info->ltk + keys->enc_size, 0,
    dc50:	f1c0 0210 	rsb	r2, r0, #16
    dc54:	4651      	mov	r1, sl
    dc56:	4458      	add	r0, fp
    dc58:	f011 fcf8 	bl	1f64c <memset>
		smp_send(smp, buf, NULL, NULL);
    dc5c:	4649      	mov	r1, r9
    dc5e:	2200      	movs	r2, #0
    dc60:	4620      	mov	r0, r4
    dc62:	f7ff f939 	bl	ced8 <smp_send.isra.7>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    dc66:	2107      	movs	r1, #7
    dc68:	4620      	mov	r0, r4
    dc6a:	f013 fb11 	bl	21290 <smp_create_pdu.isra.6>
		if (!buf) {
    dc6e:	4681      	mov	r9, r0
    dc70:	b960      	cbnz	r0, dc8c <bt_smp_encrypt_change+0x198>
			BT_ERR("Unable to allocate Master Ident buffer");
    dc72:	2301      	movs	r3, #1
    dc74:	f04f 0100 	mov.w	r1, #0
    dc78:	f363 0107 	bfi	r1, r3, #0, #8
    dc7c:	4a57      	ldr	r2, [pc, #348]	; (dddc <bt_smp_encrypt_change+0x2e8>)
    dc7e:	4b58      	ldr	r3, [pc, #352]	; (dde0 <bt_smp_encrypt_change+0x2ec>)
    dc80:	485b      	ldr	r0, [pc, #364]	; (ddf0 <bt_smp_encrypt_change+0x2fc>)
    dc82:	1a9b      	subs	r3, r3, r2
    dc84:	08db      	lsrs	r3, r3, #3
    dc86:	f363 118f 	bfi	r1, r3, #6, #10
    dc8a:	e7b8      	b.n	dbfe <bt_smp_encrypt_change+0x10a>
		ident = net_buf_add(buf, sizeof(*ident));
    dc8c:	210a      	movs	r1, #10
    dc8e:	3008      	adds	r0, #8
    dc90:	f014 fcd0 	bl	22634 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    dc94:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    dc96:	4682      	mov	sl, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    dc98:	a905      	add	r1, sp, #20
    dc9a:	3002      	adds	r0, #2
    dc9c:	f011 fcac 	bl	1f5f8 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    dca0:	2202      	movs	r2, #2
    dca2:	a907      	add	r1, sp, #28
    dca4:	4650      	mov	r0, sl
    dca6:	f011 fca7 	bl	1f5f8 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    dcaa:	4649      	mov	r1, r9
    dcac:	4620      	mov	r0, r4
    dcae:	4a51      	ldr	r2, [pc, #324]	; (ddf4 <bt_smp_encrypt_change+0x300>)
    dcb0:	f7ff f912 	bl	ced8 <smp_send.isra.7>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dcb4:	210c      	movs	r1, #12
    dcb6:	4628      	mov	r0, r5
    dcb8:	f013 fa2a 	bl	21110 <atomic_test_bit>
    dcbc:	2800      	cmp	r0, #0
    dcbe:	d0a0      	beq.n	dc02 <bt_smp_encrypt_change+0x10e>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    dcc0:	4630      	mov	r0, r6
    dcc2:	2101      	movs	r1, #1
    dcc4:	f013 fd9e 	bl	21804 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    dcc8:	a901      	add	r1, sp, #4
    dcca:	2210      	movs	r2, #16
    dccc:	f106 006e 	add.w	r0, r6, #110	; 0x6e
    dcd0:	f011 fc92 	bl	1f5f8 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    dcd4:	a905      	add	r1, sp, #20
    dcd6:	2208      	movs	r2, #8
    dcd8:	f106 0064 	add.w	r0, r6, #100	; 0x64
    dcdc:	f011 fc8c 	bl	1f5f8 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    dce0:	2202      	movs	r2, #2
    dce2:	a907      	add	r1, sp, #28
    dce4:	f106 006c 	add.w	r0, r6, #108	; 0x6c
    dce8:	f011 fc86 	bl	1f5f8 <memcpy>
    dcec:	e789      	b.n	dc02 <bt_smp_encrypt_change+0x10e>
		id_info = net_buf_add(buf, sizeof(*id_info));
    dcee:	2110      	movs	r1, #16
    dcf0:	3008      	adds	r0, #8
    dcf2:	f014 fc9f 	bl	22634 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
    dcf6:	f898 1008 	ldrb.w	r1, [r8, #8]
    dcfa:	f8df 910c 	ldr.w	r9, [pc, #268]	; de08 <bt_smp_encrypt_change+0x314>
    dcfe:	23d8      	movs	r3, #216	; 0xd8
    dd00:	2210      	movs	r2, #16
    dd02:	fb12 3101 	smlabb	r1, r2, r1, r3
    dd06:	4449      	add	r1, r9
    dd08:	f011 fc76 	bl	1f5f8 <memcpy>
		smp_send(smp, buf, NULL, NULL);
    dd0c:	4631      	mov	r1, r6
    dd0e:	2200      	movs	r2, #0
    dd10:	4620      	mov	r0, r4
    dd12:	f7ff f8e1 	bl	ced8 <smp_send.isra.7>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
    dd16:	2109      	movs	r1, #9
    dd18:	4620      	mov	r0, r4
    dd1a:	f013 fab9 	bl	21290 <smp_create_pdu.isra.6>
		if (!buf) {
    dd1e:	4606      	mov	r6, r0
    dd20:	b960      	cbnz	r0, dd3c <bt_smp_encrypt_change+0x248>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    dd22:	2301      	movs	r3, #1
    dd24:	f04f 0100 	mov.w	r1, #0
    dd28:	f363 0107 	bfi	r1, r3, #0, #8
    dd2c:	4a2b      	ldr	r2, [pc, #172]	; (dddc <bt_smp_encrypt_change+0x2e8>)
    dd2e:	4b2c      	ldr	r3, [pc, #176]	; (dde0 <bt_smp_encrypt_change+0x2ec>)
    dd30:	4831      	ldr	r0, [pc, #196]	; (ddf8 <bt_smp_encrypt_change+0x304>)
    dd32:	1a9b      	subs	r3, r3, r2
    dd34:	08db      	lsrs	r3, r3, #3
    dd36:	f363 118f 	bfi	r1, r3, #6, #10
    dd3a:	e77a      	b.n	dc32 <bt_smp_encrypt_change+0x13e>
		id_addr_info = net_buf_add(buf, sizeof(*id_addr_info));
    dd3c:	2107      	movs	r1, #7
    dd3e:	3008      	adds	r0, #8
    dd40:	f014 fc78 	bl	22634 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
    dd44:	f898 1008 	ldrb.w	r1, [r8, #8]
    dd48:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
    dd4c:	2207      	movs	r2, #7
    dd4e:	4449      	add	r1, r9
    dd50:	f011 fc52 	bl	1f5f8 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
    dd54:	4a29      	ldr	r2, [pc, #164]	; (ddfc <bt_smp_encrypt_change+0x308>)
    dd56:	4631      	mov	r1, r6
    dd58:	4620      	mov	r0, r4
    dd5a:	f7ff f8bd 	bl	ced8 <smp_send.isra.7>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    dd5e:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    dd62:	075b      	lsls	r3, r3, #29
    dd64:	d530      	bpl.n	ddc8 <bt_smp_encrypt_change+0x2d4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    dd66:	210a      	movs	r1, #10
    dd68:	4620      	mov	r0, r4
    dd6a:	f013 fa91 	bl	21290 <smp_create_pdu.isra.6>
		if (!buf) {
    dd6e:	4606      	mov	r6, r0
    dd70:	b960      	cbnz	r0, dd8c <bt_smp_encrypt_change+0x298>
			BT_ERR("Unable to allocate Signing Info buffer");
    dd72:	2301      	movs	r3, #1
    dd74:	f04f 0100 	mov.w	r1, #0
    dd78:	f363 0107 	bfi	r1, r3, #0, #8
    dd7c:	4a17      	ldr	r2, [pc, #92]	; (dddc <bt_smp_encrypt_change+0x2e8>)
    dd7e:	4b18      	ldr	r3, [pc, #96]	; (dde0 <bt_smp_encrypt_change+0x2ec>)
    dd80:	481f      	ldr	r0, [pc, #124]	; (de00 <bt_smp_encrypt_change+0x30c>)
    dd82:	1a9b      	subs	r3, r3, r2
    dd84:	08db      	lsrs	r3, r3, #3
    dd86:	f363 118f 	bfi	r1, r3, #6, #10
    dd8a:	e752      	b.n	dc32 <bt_smp_encrypt_change+0x13e>
		info = net_buf_add(buf, sizeof(*info));
    dd8c:	2110      	movs	r1, #16
    dd8e:	3008      	adds	r0, #8
    dd90:	f014 fc50 	bl	22634 <net_buf_simple_add>
		bt_rand(info->csrk, sizeof(info->csrk));
    dd94:	2110      	movs	r1, #16
		info = net_buf_add(buf, sizeof(*info));
    dd96:	4680      	mov	r8, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    dd98:	f002 febc 	bl	10b14 <bt_rand>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dd9c:	210c      	movs	r1, #12
    dd9e:	4628      	mov	r0, r5
    dda0:	f013 f9b6 	bl	21110 <atomic_test_bit>
    dda4:	b158      	cbz	r0, ddbe <bt_smp_encrypt_change+0x2ca>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    dda6:	2108      	movs	r1, #8
    dda8:	4638      	mov	r0, r7
    ddaa:	f013 fd2b 	bl	21804 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    ddae:	2210      	movs	r2, #16
    ddb0:	4641      	mov	r1, r8
    ddb2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
    ddb6:	f011 fc1f 	bl	1f5f8 <memcpy>
			keys->local_csrk.cnt = 0U;
    ddba:	2300      	movs	r3, #0
    ddbc:	64fb      	str	r3, [r7, #76]	; 0x4c
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    ddbe:	4a11      	ldr	r2, [pc, #68]	; (de04 <bt_smp_encrypt_change+0x310>)
    ddc0:	4631      	mov	r1, r6
    ddc2:	4620      	mov	r0, r4
    ddc4:	f7ff f888 	bl	ced8 <smp_send.isra.7>
	if (!smp->local_dist && !smp->remote_dist) {
    ddc8:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
    ddcc:	2900      	cmp	r1, #0
    ddce:	f47f aea7 	bne.w	db20 <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
    ddd2:	4620      	mov	r0, r4
    ddd4:	f7ff fc72 	bl	d6bc <smp_pairing_complete>
    ddd8:	e6a2      	b.n	db20 <bt_smp_encrypt_change+0x2c>
    ddda:	bf00      	nop
    dddc:	00025a6c 	.word	0x00025a6c
    dde0:	00025b64 	.word	0x00025b64
    dde4:	00028a08 	.word	0x00028a08
    dde8:	00028a1d 	.word	0x00028a1d
    ddec:	00028a6b 	.word	0x00028a6b
    ddf0:	00028a44 	.word	0x00028a44
    ddf4:	00021477 	.word	0x00021477
    ddf8:	00028a90 	.word	0x00028a90
    ddfc:	00021491 	.word	0x00021491
    de00:	00028aba 	.word	0x00028aba
    de04:	00021483 	.word	0x00021483
    de08:	2000dd18 	.word	0x2000dd18

0000de0c <smp_pairing_random>:
{
    de0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de10:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    de12:	f100 07c7 	add.w	r7, r0, #199	; 0xc7
{
    de16:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    de18:	6889      	ldr	r1, [r1, #8]
    de1a:	2210      	movs	r2, #16
    de1c:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    de1e:	f104 0694 	add.w	r6, r4, #148	; 0x94
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    de22:	f011 fbe9 	bl	1f5f8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    de26:	2105      	movs	r1, #5
    de28:	4630      	mov	r0, r6
    de2a:	f013 f971 	bl	21110 <atomic_test_bit>
    de2e:	2800      	cmp	r0, #0
    de30:	d13d      	bne.n	deae <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
    de32:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    de34:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    de36:	f858 3bd7 	ldr.w	r3, [r8], #215
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    de3a:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    de3c:	f103 027e 	add.w	r2, r3, #126	; 0x7e
    de40:	3377      	adds	r3, #119	; 0x77
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    de42:	9201      	str	r2, [sp, #4]
    de44:	9300      	str	r3, [sp, #0]
    de46:	f104 0299 	add.w	r2, r4, #153	; 0x99
    de4a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    de4e:	4639      	mov	r1, r7
    de50:	4640      	mov	r0, r8
    de52:	f013 fb24 	bl	2149e <smp_c1>
	if (err) {
    de56:	b108      	cbz	r0, de5c <smp_pairing_random+0x50>
		return BT_SMP_ERR_UNSPECIFIED;
    de58:	2508      	movs	r5, #8
    de5a:	e096      	b.n	df8a <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    de5c:	2210      	movs	r2, #16
    de5e:	4629      	mov	r1, r5
    de60:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
    de64:	f011 fbb8 	bl	1f5d8 <memcmp>
    de68:	2800      	cmp	r0, #0
    de6a:	f040 808d 	bne.w	df88 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
    de6e:	2208      	movs	r2, #8
    de70:	4639      	mov	r1, r7
    de72:	4628      	mov	r0, r5
    de74:	f011 fbc0 	bl	1f5f8 <memcpy>
	memcpy(out + 8, r1, 8);
    de78:	2208      	movs	r2, #8
    de7a:	f104 01b7 	add.w	r1, r4, #183	; 0xb7
    de7e:	a80c      	add	r0, sp, #48	; 0x30
    de80:	f011 fbba 	bl	1f5f8 <memcpy>
	return bt_encrypt_le(k, out, out);
    de84:	462a      	mov	r2, r5
    de86:	4629      	mov	r1, r5
    de88:	4640      	mov	r0, r8
    de8a:	f013 fefd 	bl	21c88 <bt_encrypt_le>
		if (err) {
    de8e:	2800      	cmp	r0, #0
    de90:	d1e2      	bne.n	de58 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    de92:	4629      	mov	r1, r5
    de94:	2210      	movs	r2, #16
    de96:	4640      	mov	r0, r8
    de98:	f011 fbae 	bl	1f5f8 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    de9c:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    de9e:	4630      	mov	r0, r6
    dea0:	f013 f927 	bl	210f2 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    dea4:	4620      	mov	r0, r4
    dea6:	f013 fa3b 	bl	21320 <smp_send_pairing_random>
    deaa:	4605      	mov	r5, r0
    deac:	e06d      	b.n	df8a <smp_pairing_random+0x17e>
	switch (smp->method) {
    deae:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    deb2:	2b05      	cmp	r3, #5
    deb4:	d8d0      	bhi.n	de58 <smp_pairing_random+0x4c>
    deb6:	a201      	add	r2, pc, #4	; (adr r2, debc <smp_pairing_random+0xb0>)
    deb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    debc:	0000df43 	.word	0x0000df43
    dec0:	0000df51 	.word	0x0000df51
    dec4:	0000df51 	.word	0x0000df51
    dec8:	0000ded5 	.word	0x0000ded5
    decc:	0000de59 	.word	0x0000de59
    ded0:	0000dfdd 	.word	0x0000dfdd
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    ded4:	4b5a      	ldr	r3, [pc, #360]	; (e040 <smp_pairing_random+0x234>)
    ded6:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    ded8:	2220      	movs	r2, #32
    deda:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    dede:	a80a      	add	r0, sp, #40	; 0x28
    dee0:	f013 f8ee 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    dee4:	2220      	movs	r2, #32
    dee6:	4629      	mov	r1, r5
    dee8:	a812      	add	r0, sp, #72	; 0x48
    deea:	f013 f8e9 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    deee:	2210      	movs	r2, #16
    def0:	f104 01b7 	add.w	r1, r4, #183	; 0xb7
    def4:	a81a      	add	r0, sp, #104	; 0x68
    def6:	f013 f8e3 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    defa:	2210      	movs	r2, #16
    defc:	4639      	mov	r1, r7
    defe:	a806      	add	r0, sp, #24
    df00:	f013 f8de 	bl	210c0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    df04:	ab06      	add	r3, sp, #24
    df06:	2250      	movs	r2, #80	; 0x50
    df08:	a90a      	add	r1, sp, #40	; 0x28
    df0a:	4618      	mov	r0, r3
    df0c:	f013 f909 	bl	21122 <bt_smp_aes_cmac>
	if (err) {
    df10:	2800      	cmp	r0, #0
    df12:	d1a1      	bne.n	de58 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    df14:	2204      	movs	r2, #4
    df16:	a909      	add	r1, sp, #36	; 0x24
    df18:	a805      	add	r0, sp, #20
    df1a:	f011 fb6d 	bl	1f5f8 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    df1e:	9b05      	ldr	r3, [sp, #20]
    df20:	4948      	ldr	r1, [pc, #288]	; (e044 <smp_pairing_random+0x238>)
    df22:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    df24:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    df26:	fbb3 f2f1 	udiv	r2, r3, r1
    df2a:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    df2e:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    df30:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    df32:	f013 f8de 	bl	210f2 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    df36:	4b44      	ldr	r3, [pc, #272]	; (e048 <smp_pairing_random+0x23c>)
    df38:	9905      	ldr	r1, [sp, #20]
    df3a:	681b      	ldr	r3, [r3, #0]
    df3c:	6820      	ldr	r0, [r4, #0]
    df3e:	689b      	ldr	r3, [r3, #8]
    df40:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    df42:	210d      	movs	r1, #13
    df44:	f104 0090 	add.w	r0, r4, #144	; 0x90
    df48:	f013 f8d3 	bl	210f2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    df4c:	210f      	movs	r1, #15
    df4e:	e7a6      	b.n	de9e <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    df50:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
    df54:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df58:	4939      	ldr	r1, [pc, #228]	; (e040 <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    df5a:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df5c:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    df5e:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df62:	9500      	str	r5, [sp, #0]
    df64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    df68:	463a      	mov	r2, r7
    df6a:	6809      	ldr	r1, [r1, #0]
    df6c:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    df70:	f013 f8f3 	bl	2115a <smp_f4>
    df74:	2800      	cmp	r0, #0
    df76:	f47f af6f 	bne.w	de58 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    df7a:	2210      	movs	r2, #16
    df7c:	4629      	mov	r1, r5
    df7e:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
    df82:	f011 fb29 	bl	1f5d8 <memcmp>
    df86:	b120      	cbz	r0, df92 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
    df88:	2504      	movs	r5, #4
}
    df8a:	4628      	mov	r0, r5
    df8c:	b01e      	add	sp, #120	; 0x78
    df8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    df92:	f104 0790 	add.w	r7, r4, #144	; 0x90
    df96:	2103      	movs	r1, #3
    df98:	4638      	mov	r0, r7
    df9a:	f013 f8aa 	bl	210f2 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    df9e:	4620      	mov	r0, r4
    dfa0:	f013 f9be 	bl	21320 <smp_send_pairing_random>
		if (err) {
    dfa4:	4605      	mov	r5, r0
    dfa6:	2800      	cmp	r0, #0
    dfa8:	d1ef      	bne.n	df8a <smp_pairing_random+0x17e>
		smp->passkey_round++;
    dfaa:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
    dfae:	3301      	adds	r3, #1
    dfb0:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    dfb2:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    dfb4:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
		if (smp->passkey_round == 20U) {
    dfb8:	d108      	bne.n	dfcc <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    dfba:	4638      	mov	r0, r7
    dfbc:	210d      	movs	r1, #13
    dfbe:	f013 f898 	bl	210f2 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    dfc2:	210f      	movs	r1, #15
    dfc4:	4630      	mov	r0, r6
    dfc6:	f013 f894 	bl	210f2 <atomic_set_bit>
			return 0;
    dfca:	e7de      	b.n	df8a <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
    dfcc:	2110      	movs	r1, #16
    dfce:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    dfd2:	f002 fd9f 	bl	10b14 <bt_rand>
    dfd6:	2800      	cmp	r0, #0
    dfd8:	d0d7      	beq.n	df8a <smp_pairing_random+0x17e>
    dfda:	e73d      	b.n	de58 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    dfdc:	2110      	movs	r1, #16
    dfde:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    dfe2:	f002 fd97 	bl	10b14 <bt_rand>
    dfe6:	2800      	cmp	r0, #0
    dfe8:	f47f af36 	bne.w	de58 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
    dfec:	4f16      	ldr	r7, [pc, #88]	; (e048 <smp_pairing_random+0x23c>)
    dfee:	683b      	ldr	r3, [r7, #0]
    dff0:	b303      	cbz	r3, e034 <smp_pairing_random+0x228>
    dff2:	68db      	ldr	r3, [r3, #12]
    dff4:	b1f3      	cbz	r3, e034 <smp_pairing_random+0x228>
			struct bt_conn_oob_info info = {
    dff6:	4b15      	ldr	r3, [pc, #84]	; (e04c <smp_pairing_random+0x240>)
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    dff8:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
			struct bt_conn_oob_info info = {
    dffc:	881b      	ldrh	r3, [r3, #0]
    dffe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    e002:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    e006:	07d2      	lsls	r2, r2, #31
    e008:	f003 0301 	and.w	r3, r3, #1
    e00c:	d414      	bmi.n	e038 <smp_pairing_random+0x22c>
    e00e:	2b00      	cmp	r3, #0
    e010:	bf14      	ite	ne
    e012:	2001      	movne	r0, #1
    e014:	2003      	moveq	r0, #3
			smp->oobd_local = NULL;
    e016:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    e018:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    e01c:	e9c4 555c 	strd	r5, r5, [r4, #368]	; 0x170
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    e020:	4630      	mov	r0, r6
    e022:	210b      	movs	r1, #11
    e024:	f013 f865 	bl	210f2 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    e028:	683b      	ldr	r3, [r7, #0]
    e02a:	6820      	ldr	r0, [r4, #0]
    e02c:	68db      	ldr	r3, [r3, #12]
    e02e:	a90a      	add	r1, sp, #40	; 0x28
    e030:	4798      	blx	r3
			return 0;
    e032:	e7aa      	b.n	df8a <smp_pairing_random+0x17e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    e034:	2502      	movs	r5, #2
    e036:	e7a8      	b.n	df8a <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
    e038:	2b00      	cmp	r3, #0
    e03a:	bf18      	it	ne
    e03c:	2002      	movne	r0, #2
    e03e:	e7ea      	b.n	e016 <smp_pairing_random+0x20a>
    e040:	2000069c 	.word	0x2000069c
    e044:	000f4240 	.word	0x000f4240
    e048:	200002c8 	.word	0x200002c8
    e04c:	00025c48 	.word	0x00025c48

0000e050 <bt_smp_pkey_ready>:
{
    e050:	b508      	push	{r3, lr}
	sc_public_key = pkey;
    e052:	4b15      	ldr	r3, [pc, #84]	; (e0a8 <bt_smp_pkey_ready+0x58>)
    e054:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    e056:	b978      	cbnz	r0, e078 <bt_smp_pkey_ready+0x28>
		BT_WARN("Public key not available");
    e058:	2302      	movs	r3, #2
    e05a:	f04f 0100 	mov.w	r1, #0
    e05e:	f363 0107 	bfi	r1, r3, #0, #8
    e062:	4a12      	ldr	r2, [pc, #72]	; (e0ac <bt_smp_pkey_ready+0x5c>)
    e064:	4b12      	ldr	r3, [pc, #72]	; (e0b0 <bt_smp_pkey_ready+0x60>)
    e066:	4813      	ldr	r0, [pc, #76]	; (e0b4 <bt_smp_pkey_ready+0x64>)
    e068:	1a9b      	subs	r3, r3, r2
    e06a:	08db      	lsrs	r3, r3, #3
    e06c:	f363 118f 	bfi	r1, r3, #6, #10
}
    e070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Public key not available");
    e074:	f010 bcee 	b.w	1ea54 <log_0>
    e078:	480f      	ldr	r0, [pc, #60]	; (e0b8 <bt_smp_pkey_ready+0x68>)
    e07a:	f00e fc1d 	bl	1c8b8 <z_impl_k_sem_give>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    e07e:	2106      	movs	r1, #6
    e080:	480e      	ldr	r0, [pc, #56]	; (e0bc <bt_smp_pkey_ready+0x6c>)
    e082:	f013 f845 	bl	21110 <atomic_test_bit>
    e086:	b168      	cbz	r0, e0a4 <bt_smp_pkey_ready+0x54>
	err = sc_send_public_key(smp);
    e088:	480d      	ldr	r0, [pc, #52]	; (e0c0 <bt_smp_pkey_ready+0x70>)
    e08a:	f7ff fa95 	bl	d5b8 <sc_send_public_key>
	if (err) {
    e08e:	b918      	cbnz	r0, e098 <bt_smp_pkey_ready+0x48>
    e090:	480b      	ldr	r0, [pc, #44]	; (e0c0 <bt_smp_pkey_ready+0x70>)
    e092:	f7fe ff77 	bl	cf84 <smp_public_key_slave.part.13>
		if (err) {
    e096:	b128      	cbz	r0, e0a4 <bt_smp_pkey_ready+0x54>
			smp_error(smp, err);
    e098:	4601      	mov	r1, r0
}
    e09a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_error(smp, err);
    e09e:	4808      	ldr	r0, [pc, #32]	; (e0c0 <bt_smp_pkey_ready+0x70>)
    e0a0:	f013 b9b8 	b.w	21414 <smp_error>
}
    e0a4:	bd08      	pop	{r3, pc}
    e0a6:	bf00      	nop
    e0a8:	2000069c 	.word	0x2000069c
    e0ac:	00025a6c 	.word	0x00025a6c
    e0b0:	00025b64 	.word	0x00025b64
    e0b4:	00028ae1 	.word	0x00028ae1
    e0b8:	2000e650 	.word	0x2000e650
    e0bc:	20000594 	.word	0x20000594
    e0c0:	20000500 	.word	0x20000500

0000e0c4 <smp_ident_addr_info>:
{
    e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    e0c8:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e0ca:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    e0cc:	7833      	ldrb	r3, [r6, #0]
{
    e0ce:	4605      	mov	r5, r0
    e0d0:	b37b      	cbz	r3, e132 <smp_ident_addr_info+0x6e>
	if (!bt_addr_le_is_identity(&req->addr)) {
    e0d2:	79b3      	ldrb	r3, [r6, #6]
    e0d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e0d8:	2bc0      	cmp	r3, #192	; 0xc0
    e0da:	d02a      	beq.n	e132 <smp_ident_addr_info+0x6e>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    e0dc:	2301      	movs	r3, #1
    e0de:	f04f 0700 	mov.w	r7, #0
    e0e2:	f363 0707 	bfi	r7, r3, #0, #8
    e0e6:	4d49      	ldr	r5, [pc, #292]	; (e20c <smp_ident_addr_info+0x148>)
    e0e8:	4b49      	ldr	r3, [pc, #292]	; (e210 <smp_ident_addr_info+0x14c>)
    e0ea:	4630      	mov	r0, r6
    e0ec:	1aed      	subs	r5, r5, r3
    e0ee:	f7f7 febf 	bl	5e70 <bt_addr_le_str_real>
    e0f2:	f7f4 ffcf 	bl	3094 <log_strdup>
    e0f6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    e0fa:	f365 178f 	bfi	r7, r5, #6, #10
    e0fe:	4601      	mov	r1, r0
    e100:	463a      	mov	r2, r7
    e102:	4844      	ldr	r0, [pc, #272]	; (e214 <smp_ident_addr_info+0x150>)
    e104:	f010 fcb3 	bl	1ea6e <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    e108:	f04f 0600 	mov.w	r6, #0
    e10c:	2301      	movs	r3, #1
    e10e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    e112:	f363 0607 	bfi	r6, r3, #0, #8
    e116:	f7f7 feab 	bl	5e70 <bt_addr_le_str_real>
    e11a:	f7f4 ffbb 	bl	3094 <log_strdup>
    e11e:	f365 168f 	bfi	r6, r5, #6, #10
    e122:	4601      	mov	r1, r0
    e124:	4632      	mov	r2, r6
    e126:	483c      	ldr	r0, [pc, #240]	; (e218 <smp_ident_addr_info+0x154>)
    e128:	f010 fca1 	bl	1ea6e <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    e12c:	200a      	movs	r0, #10
}
    e12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e132:	210c      	movs	r1, #12
    e134:	f105 0094 	add.w	r0, r5, #148	; 0x94
    e138:	f012 ffea 	bl	21110 <atomic_test_bit>
    e13c:	2800      	cmp	r0, #0
    e13e:	d04b      	beq.n	e1d8 <smp_ident_addr_info+0x114>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e140:	f104 0870 	add.w	r8, r4, #112	; 0x70
    e144:	4642      	mov	r2, r8
    e146:	7a21      	ldrb	r1, [r4, #8]
    e148:	2002      	movs	r0, #2
    e14a:	f013 fb4b 	bl	217e4 <bt_keys_get_type>
		if (!keys) {
    e14e:	4607      	mov	r7, r0
    e150:	b9b0      	cbnz	r0, e180 <smp_ident_addr_info+0xbc>
			BT_ERR("Unable to get keys for %s",
    e152:	2301      	movs	r3, #1
    e154:	f04f 0400 	mov.w	r4, #0
    e158:	4a2d      	ldr	r2, [pc, #180]	; (e210 <smp_ident_addr_info+0x14c>)
    e15a:	f363 0407 	bfi	r4, r3, #0, #8
    e15e:	4b2b      	ldr	r3, [pc, #172]	; (e20c <smp_ident_addr_info+0x148>)
    e160:	1a9b      	subs	r3, r3, r2
    e162:	08db      	lsrs	r3, r3, #3
    e164:	4640      	mov	r0, r8
    e166:	f363 148f 	bfi	r4, r3, #6, #10
    e16a:	f7f7 fe81 	bl	5e70 <bt_addr_le_str_real>
    e16e:	f7f4 ff91 	bl	3094 <log_strdup>
    e172:	4622      	mov	r2, r4
    e174:	4601      	mov	r1, r0
    e176:	4829      	ldr	r0, [pc, #164]	; (e21c <smp_ident_addr_info+0x158>)
    e178:	f010 fc79 	bl	1ea6e <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e17c:	2008      	movs	r0, #8
    e17e:	e7d6      	b.n	e12e <smp_ident_addr_info+0x6a>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    e180:	78e3      	ldrb	r3, [r4, #3]
    e182:	2b00      	cmp	r3, #0
    e184:	d13e      	bne.n	e204 <smp_ident_addr_info+0x140>
			dst = &conn->le.resp_addr;
    e186:	f104 017e 	add.w	r1, r4, #126	; 0x7e
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e18a:	780b      	ldrb	r3, [r1, #0]
    e18c:	2b01      	cmp	r3, #1
    e18e:	d120      	bne.n	e1d2 <smp_ident_addr_info+0x10e>
		if (bt_addr_le_is_rpa(dst)) {
    e190:	798b      	ldrb	r3, [r1, #6]
    e192:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e196:	2b40      	cmp	r3, #64	; 0x40
    e198:	d11b      	bne.n	e1d2 <smp_ident_addr_info+0x10e>
	memcpy(dst, src, sizeof(*dst));
    e19a:	2206      	movs	r2, #6
    e19c:	3101      	adds	r1, #1
    e19e:	f107 0036 	add.w	r0, r7, #54	; 0x36
    e1a2:	f011 fa29 	bl	1f5f8 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    e1a6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    e1aa:	b193      	cbz	r3, e1d2 <smp_ident_addr_info+0x10e>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    e1ac:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    e1b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e1b4:	2bc0      	cmp	r3, #192	; 0xc0
    e1b6:	d00c      	beq.n	e1d2 <smp_ident_addr_info+0x10e>
	memcpy(dst, src, sizeof(*dst));
    e1b8:	2207      	movs	r2, #7
    e1ba:	4631      	mov	r1, r6
    e1bc:	1c78      	adds	r0, r7, #1
    e1be:	f011 fa1b 	bl	1f5f8 <memcpy>
    e1c2:	2207      	movs	r2, #7
    e1c4:	4631      	mov	r1, r6
    e1c6:	4640      	mov	r0, r8
    e1c8:	f011 fa16 	bl	1f5f8 <memcpy>
				bt_conn_identity_resolved(conn);
    e1cc:	4620      	mov	r0, r4
    e1ce:	f7fa fe69 	bl	8ea4 <bt_conn_identity_resolved>
		bt_id_add(keys);
    e1d2:	4638      	mov	r0, r7
    e1d4:	f7f9 fb32 	bl	783c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    e1d8:	f895 3179 	ldrb.w	r3, [r5, #377]	; 0x179
    e1dc:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e1e0:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    e1e2:	f885 2179 	strb.w	r2, [r5, #377]	; 0x179
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e1e6:	d504      	bpl.n	e1f2 <smp_ident_addr_info+0x12e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e1e8:	210a      	movs	r1, #10
    e1ea:	f105 0090 	add.w	r0, r5, #144	; 0x90
    e1ee:	f012 ff80 	bl	210f2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    e1f2:	f8b5 4178 	ldrh.w	r4, [r5, #376]	; 0x178
    e1f6:	b91c      	cbnz	r4, e200 <smp_ident_addr_info+0x13c>
		smp_pairing_complete(smp, 0);
    e1f8:	4621      	mov	r1, r4
    e1fa:	4628      	mov	r0, r5
    e1fc:	f7ff fa5e 	bl	d6bc <smp_pairing_complete>
	return 0;
    e200:	2000      	movs	r0, #0
    e202:	e794      	b.n	e12e <smp_ident_addr_info+0x6a>
			dst = &conn->le.init_addr;
    e204:	f104 0177 	add.w	r1, r4, #119	; 0x77
    e208:	e7bf      	b.n	e18a <smp_ident_addr_info+0xc6>
    e20a:	bf00      	nop
    e20c:	00025b64 	.word	0x00025b64
    e210:	00025a6c 	.word	0x00025a6c
    e214:	00028c9f 	.word	0x00028c9f
    e218:	00028bb6 	.word	0x00028bb6
    e21c:	00028cb3 	.word	0x00028cb3

0000e220 <bt_smp_sign_verify>:
{
    e220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return buf->data + buf->len;
    e222:	898b      	ldrh	r3, [r1, #12]
    e224:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e226:	6889      	ldr	r1, [r1, #8]
{
    e228:	4605      	mov	r5, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e22a:	3b0c      	subs	r3, #12
    e22c:	4419      	add	r1, r3
    e22e:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    e230:	f105 0670 	add.w	r6, r5, #112	; 0x70
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e234:	a801      	add	r0, sp, #4
    e236:	f011 f9df 	bl	1f5f8 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    e23a:	7a29      	ldrb	r1, [r5, #8]
    e23c:	4632      	mov	r2, r6
    e23e:	2010      	movs	r0, #16
    e240:	f000 fab6 	bl	e7b0 <bt_keys_find>
	if (!keys) {
    e244:	4605      	mov	r5, r0
    e246:	b9c0      	cbnz	r0, e27a <bt_smp_sign_verify+0x5a>
		BT_ERR("Unable to find Remote CSRK for %s",
    e248:	2301      	movs	r3, #1
    e24a:	f04f 0400 	mov.w	r4, #0
    e24e:	4a33      	ldr	r2, [pc, #204]	; (e31c <bt_smp_sign_verify+0xfc>)
    e250:	f363 0407 	bfi	r4, r3, #0, #8
    e254:	4b32      	ldr	r3, [pc, #200]	; (e320 <bt_smp_sign_verify+0x100>)
    e256:	1a9b      	subs	r3, r3, r2
    e258:	08db      	lsrs	r3, r3, #3
    e25a:	4630      	mov	r0, r6
    e25c:	f363 148f 	bfi	r4, r3, #6, #10
    e260:	f7f7 fe06 	bl	5e70 <bt_addr_le_str_real>
    e264:	f7f4 ff16 	bl	3094 <log_strdup>
    e268:	4622      	mov	r2, r4
    e26a:	4601      	mov	r1, r0
    e26c:	482d      	ldr	r0, [pc, #180]	; (e324 <bt_smp_sign_verify+0x104>)
    e26e:	f010 fbfe 	bl	1ea6e <log_1>
		return -ENOENT;
    e272:	f06f 0001 	mvn.w	r0, #1
}
    e276:	b004      	add	sp, #16
    e278:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    e27a:	6e03      	ldr	r3, [r0, #96]	; 0x60
    e27c:	9300      	str	r3, [sp, #0]
    e27e:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    e280:	68a0      	ldr	r0, [r4, #8]
    e282:	3b0c      	subs	r3, #12
    e284:	2204      	movs	r2, #4
    e286:	4669      	mov	r1, sp
    e288:	4418      	add	r0, r3
    e28a:	f011 f9b5 	bl	1f5f8 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    e28e:	89a2      	ldrh	r2, [r4, #12]
    e290:	68a1      	ldr	r1, [r4, #8]
    e292:	3a0c      	subs	r2, #12
    e294:	b292      	uxth	r2, r2
    e296:	f105 0050 	add.w	r0, r5, #80	; 0x50
    e29a:	f7fe fce3 	bl	cc64 <smp_sign_buf>
	if (err) {
    e29e:	b1b8      	cbz	r0, e2d0 <bt_smp_sign_verify+0xb0>
		BT_ERR("Unable to create signature for %s",
    e2a0:	2301      	movs	r3, #1
    e2a2:	f04f 0400 	mov.w	r4, #0
    e2a6:	4a1d      	ldr	r2, [pc, #116]	; (e31c <bt_smp_sign_verify+0xfc>)
    e2a8:	f363 0407 	bfi	r4, r3, #0, #8
    e2ac:	4b1c      	ldr	r3, [pc, #112]	; (e320 <bt_smp_sign_verify+0x100>)
    e2ae:	1a9b      	subs	r3, r3, r2
    e2b0:	08db      	lsrs	r3, r3, #3
    e2b2:	4630      	mov	r0, r6
    e2b4:	f363 148f 	bfi	r4, r3, #6, #10
    e2b8:	f7f7 fdda 	bl	5e70 <bt_addr_le_str_real>
    e2bc:	f7f4 feea 	bl	3094 <log_strdup>
    e2c0:	4622      	mov	r2, r4
    e2c2:	4601      	mov	r1, r0
    e2c4:	4818      	ldr	r0, [pc, #96]	; (e328 <bt_smp_sign_verify+0x108>)
    e2c6:	f010 fbd2 	bl	1ea6e <log_1>
		return -EIO;
    e2ca:	f06f 0004 	mvn.w	r0, #4
    e2ce:	e7d2      	b.n	e276 <bt_smp_sign_verify+0x56>
    e2d0:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    e2d2:	68a1      	ldr	r1, [r4, #8]
    e2d4:	3b0c      	subs	r3, #12
    e2d6:	220c      	movs	r2, #12
    e2d8:	4419      	add	r1, r3
    e2da:	a801      	add	r0, sp, #4
    e2dc:	f011 f97c 	bl	1f5d8 <memcmp>
    e2e0:	b1b8      	cbz	r0, e312 <bt_smp_sign_verify+0xf2>
		BT_ERR("Unable to verify signature for %s",
    e2e2:	2301      	movs	r3, #1
    e2e4:	f04f 0400 	mov.w	r4, #0
    e2e8:	4a0c      	ldr	r2, [pc, #48]	; (e31c <bt_smp_sign_verify+0xfc>)
    e2ea:	f363 0407 	bfi	r4, r3, #0, #8
    e2ee:	4b0c      	ldr	r3, [pc, #48]	; (e320 <bt_smp_sign_verify+0x100>)
    e2f0:	1a9b      	subs	r3, r3, r2
    e2f2:	08db      	lsrs	r3, r3, #3
    e2f4:	4630      	mov	r0, r6
    e2f6:	f363 148f 	bfi	r4, r3, #6, #10
    e2fa:	f7f7 fdb9 	bl	5e70 <bt_addr_le_str_real>
    e2fe:	f7f4 fec9 	bl	3094 <log_strdup>
    e302:	4622      	mov	r2, r4
    e304:	4601      	mov	r1, r0
    e306:	4809      	ldr	r0, [pc, #36]	; (e32c <bt_smp_sign_verify+0x10c>)
    e308:	f010 fbb1 	bl	1ea6e <log_1>
		return -EBADMSG;
    e30c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    e310:	e7b1      	b.n	e276 <bt_smp_sign_verify+0x56>
	keys->remote_csrk.cnt++;
    e312:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    e314:	3301      	adds	r3, #1
    e316:	662b      	str	r3, [r5, #96]	; 0x60
	return 0;
    e318:	e7ad      	b.n	e276 <bt_smp_sign_verify+0x56>
    e31a:	bf00      	nop
    e31c:	00025a6c 	.word	0x00025a6c
    e320:	00025b64 	.word	0x00025b64
    e324:	00028b9c 	.word	0x00028b9c
    e328:	00028bbe 	.word	0x00028bbe
    e32c:	00028be0 	.word	0x00028be0

0000e330 <bt_smp_sign>:
{
    e330:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    e332:	f100 0670 	add.w	r6, r0, #112	; 0x70
{
    e336:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    e338:	4632      	mov	r2, r6
    e33a:	7a01      	ldrb	r1, [r0, #8]
    e33c:	2008      	movs	r0, #8
    e33e:	f000 fa37 	bl	e7b0 <bt_keys_find>
	if (!keys) {
    e342:	4604      	mov	r4, r0
    e344:	b9b0      	cbnz	r0, e374 <bt_smp_sign+0x44>
		BT_ERR("Unable to find local CSRK for %s",
    e346:	2301      	movs	r3, #1
    e348:	4a25      	ldr	r2, [pc, #148]	; (e3e0 <bt_smp_sign+0xb0>)
    e34a:	f363 0407 	bfi	r4, r3, #0, #8
    e34e:	4b25      	ldr	r3, [pc, #148]	; (e3e4 <bt_smp_sign+0xb4>)
    e350:	1a9b      	subs	r3, r3, r2
    e352:	08db      	lsrs	r3, r3, #3
    e354:	4630      	mov	r0, r6
    e356:	f363 148f 	bfi	r4, r3, #6, #10
    e35a:	f7f7 fd89 	bl	5e70 <bt_addr_le_str_real>
    e35e:	f7f4 fe99 	bl	3094 <log_strdup>
    e362:	4622      	mov	r2, r4
    e364:	4601      	mov	r1, r0
    e366:	4820      	ldr	r0, [pc, #128]	; (e3e8 <bt_smp_sign+0xb8>)
    e368:	f010 fb81 	bl	1ea6e <log_1>
		return -ENOENT;
    e36c:	f06f 0001 	mvn.w	r0, #1
}
    e370:	b002      	add	sp, #8
    e372:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_add(buf, 12);
    e374:	210c      	movs	r1, #12
    e376:	f105 0008 	add.w	r0, r5, #8
    e37a:	f014 f95b 	bl	22634 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    e37e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e380:	9301      	str	r3, [sp, #4]
    e382:	89ab      	ldrh	r3, [r5, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    e384:	68a8      	ldr	r0, [r5, #8]
    e386:	2204      	movs	r2, #4
    e388:	3b0c      	subs	r3, #12
    e38a:	eb0d 0102 	add.w	r1, sp, r2
    e38e:	4418      	add	r0, r3
    e390:	f011 f932 	bl	1f5f8 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    e394:	89aa      	ldrh	r2, [r5, #12]
    e396:	68a9      	ldr	r1, [r5, #8]
    e398:	3a0c      	subs	r2, #12
    e39a:	b292      	uxth	r2, r2
    e39c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    e3a0:	f7fe fc60 	bl	cc64 <smp_sign_buf>
	if (err) {
    e3a4:	b1b8      	cbz	r0, e3d6 <bt_smp_sign+0xa6>
		BT_ERR("Unable to create signature for %s",
    e3a6:	2301      	movs	r3, #1
    e3a8:	f04f 0400 	mov.w	r4, #0
    e3ac:	4a0c      	ldr	r2, [pc, #48]	; (e3e0 <bt_smp_sign+0xb0>)
    e3ae:	f363 0407 	bfi	r4, r3, #0, #8
    e3b2:	4b0c      	ldr	r3, [pc, #48]	; (e3e4 <bt_smp_sign+0xb4>)
    e3b4:	1a9b      	subs	r3, r3, r2
    e3b6:	08db      	lsrs	r3, r3, #3
    e3b8:	4630      	mov	r0, r6
    e3ba:	f363 148f 	bfi	r4, r3, #6, #10
    e3be:	f7f7 fd57 	bl	5e70 <bt_addr_le_str_real>
    e3c2:	f7f4 fe67 	bl	3094 <log_strdup>
    e3c6:	4622      	mov	r2, r4
    e3c8:	4601      	mov	r1, r0
    e3ca:	4808      	ldr	r0, [pc, #32]	; (e3ec <bt_smp_sign+0xbc>)
    e3cc:	f010 fb4f 	bl	1ea6e <log_1>
		return -EIO;
    e3d0:	f06f 0004 	mvn.w	r0, #4
    e3d4:	e7cc      	b.n	e370 <bt_smp_sign+0x40>
	keys->local_csrk.cnt++;
    e3d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e3d8:	3301      	adds	r3, #1
    e3da:	64e3      	str	r3, [r4, #76]	; 0x4c
	return 0;
    e3dc:	e7c8      	b.n	e370 <bt_smp_sign+0x40>
    e3de:	bf00      	nop
    e3e0:	00025a6c 	.word	0x00025a6c
    e3e4:	00025b64 	.word	0x00025b64
    e3e8:	00028b7b 	.word	0x00028b7b
    e3ec:	00028bbe 	.word	0x00028bbe

0000e3f0 <bt_smp_start_security>:
{
    e3f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    e3f4:	78c7      	ldrb	r7, [r0, #3]
    e3f6:	2f01      	cmp	r7, #1
{
    e3f8:	4604      	mov	r4, r0
	switch (conn->role) {
    e3fa:	d005      	beq.n	e408 <bt_smp_start_security+0x18>
		return -EINVAL;
    e3fc:	f06f 0715 	mvn.w	r7, #21
}
    e400:	4638      	mov	r0, r7
    e402:	b003      	add	sp, #12
    e404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    e408:	f7fe fd06 	bl	ce18 <smp_chan_get>
	if (!smp) {
    e40c:	4605      	mov	r5, r0
    e40e:	2800      	cmp	r0, #0
    e410:	f000 80a2 	beq.w	e558 <bt_smp_start_security+0x168>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e414:	f100 0694 	add.w	r6, r0, #148	; 0x94
    e418:	2104      	movs	r1, #4
    e41a:	4630      	mov	r0, r6
    e41c:	f012 fe78 	bl	21110 <atomic_test_bit>
    e420:	2800      	cmp	r0, #0
    e422:	f040 809c 	bne.w	e55e <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e426:	2103      	movs	r1, #3
    e428:	4630      	mov	r0, r6
    e42a:	f012 fe71 	bl	21110 <atomic_test_bit>
    e42e:	b110      	cbz	r0, e436 <bt_smp_start_security+0x46>
		return -EBUSY;
    e430:	f06f 070f 	mvn.w	r7, #15
    e434:	e7e4      	b.n	e400 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e436:	4639      	mov	r1, r7
    e438:	4630      	mov	r0, r6
    e43a:	f012 fe69 	bl	21110 <atomic_test_bit>
    e43e:	2800      	cmp	r0, #0
    e440:	d1f6      	bne.n	e430 <bt_smp_start_security+0x40>
	switch (conn->required_sec_level) {
    e442:	7aa3      	ldrb	r3, [r4, #10]
    e444:	3b01      	subs	r3, #1
    e446:	2b03      	cmp	r3, #3
    e448:	d813      	bhi.n	e472 <bt_smp_start_security+0x82>
    e44a:	e8df f003 	tbb	[pc, r3]
    e44e:	3b3b      	.short	0x3b3b
    e450:	4602      	.short	0x4602
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e452:	f7fe fbe1 	bl	cc18 <get_io_capa>
    e456:	2803      	cmp	r0, #3
    e458:	d107      	bne.n	e46a <bt_smp_start_security+0x7a>
		       (bt_auth && bt_auth->oob_data_request && oobd_present);
    e45a:	4b42      	ldr	r3, [pc, #264]	; (e564 <bt_smp_start_security+0x174>)
    e45c:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e45e:	b12b      	cbz	r3, e46c <bt_smp_start_security+0x7c>
		       (bt_auth && bt_auth->oob_data_request && oobd_present);
    e460:	68db      	ldr	r3, [r3, #12]
    e462:	b11b      	cbz	r3, e46c <bt_smp_start_security+0x7c>
    e464:	4b40      	ldr	r3, [pc, #256]	; (e568 <bt_smp_start_security+0x178>)
			 oobd_present)) &&
    e466:	781b      	ldrb	r3, [r3, #0]
    e468:	e000      	b.n	e46c <bt_smp_start_security+0x7c>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e46a:	2301      	movs	r3, #1
			 oobd_present)) &&
    e46c:	f003 0301 	and.w	r3, r3, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    e470:	bb43      	cbnz	r3, e4c4 <bt_smp_start_security+0xd4>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    e472:	210b      	movs	r1, #11
    e474:	1d20      	adds	r0, r4, #4
    e476:	f012 fe4b 	bl	21110 <atomic_test_bit>
    e47a:	2800      	cmp	r0, #0
    e47c:	d1be      	bne.n	e3fc <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    e47e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    e482:	b983      	cbnz	r3, e4a6 <bt_smp_start_security+0xb6>
						     conn->id, &conn->le.dst);
    e484:	f104 0770 	add.w	r7, r4, #112	; 0x70
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    e488:	463a      	mov	r2, r7
    e48a:	7a21      	ldrb	r1, [r4, #8]
    e48c:	2020      	movs	r0, #32
    e48e:	f000 f98f 	bl	e7b0 <bt_keys_find>
    e492:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
		if (!conn->le.keys) {
    e496:	b930      	cbnz	r0, e4a6 <bt_smp_start_security+0xb6>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    e498:	463a      	mov	r2, r7
    e49a:	7a21      	ldrb	r1, [r4, #8]
    e49c:	2004      	movs	r0, #4
    e49e:	f000 f987 	bl	e7b0 <bt_keys_find>
    e4a2:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
	if (!conn->le.keys ||
    e4a6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    e4aa:	2b00      	cmp	r3, #0
    e4ac:	d0a6      	beq.n	e3fc <bt_smp_start_security+0xc>
    e4ae:	895a      	ldrh	r2, [r3, #10]
    e4b0:	f002 0224 	and.w	r2, r2, #36	; 0x24
    e4b4:	2a00      	cmp	r2, #0
    e4b6:	d0a1      	beq.n	e3fc <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    e4b8:	7aa2      	ldrb	r2, [r4, #10]
    e4ba:	2a02      	cmp	r2, #2
    e4bc:	d902      	bls.n	e4c4 <bt_smp_start_security+0xd4>
    e4be:	7a5b      	ldrb	r3, [r3, #9]
    e4c0:	07db      	lsls	r3, r3, #31
    e4c2:	d59b      	bpl.n	e3fc <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    e4c4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    e4c8:	b1c3      	cbz	r3, e4fc <bt_smp_start_security+0x10c>
	if (smp_init(smp) != 0) {
    e4ca:	4628      	mov	r0, r5
    e4cc:	f7fe fce6 	bl	ce9c <smp_init>
    e4d0:	4607      	mov	r7, r0
    e4d2:	b1f8      	cbz	r0, e514 <bt_smp_start_security+0x124>
		return -ENOBUFS;
    e4d4:	f06f 0736 	mvn.w	r7, #54	; 0x36
    e4d8:	e792      	b.n	e400 <bt_smp_start_security+0x10>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e4da:	f7fe fb9d 	bl	cc18 <get_io_capa>
			 oobd_present)) &&
    e4de:	2803      	cmp	r0, #3
    e4e0:	d10a      	bne.n	e4f8 <bt_smp_start_security+0x108>
			(bt_auth && bt_auth->oob_data_request &&
    e4e2:	4b20      	ldr	r3, [pc, #128]	; (e564 <bt_smp_start_security+0x174>)
    e4e4:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e4e6:	2b00      	cmp	r3, #0
    e4e8:	d0c0      	beq.n	e46c <bt_smp_start_security+0x7c>
			(bt_auth && bt_auth->oob_data_request &&
    e4ea:	68db      	ldr	r3, [r3, #12]
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d0bd      	beq.n	e46c <bt_smp_start_security+0x7c>
    e4f0:	4b1d      	ldr	r3, [pc, #116]	; (e568 <bt_smp_start_security+0x178>)
    e4f2:	781b      	ldrb	r3, [r3, #0]
    e4f4:	2b00      	cmp	r3, #0
    e4f6:	d0b9      	beq.n	e46c <bt_smp_start_security+0x7c>
			 oobd_present)) &&
    e4f8:	4b1c      	ldr	r3, [pc, #112]	; (e56c <bt_smp_start_security+0x17c>)
    e4fa:	e7b4      	b.n	e466 <bt_smp_start_security+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e4fc:	f104 0170 	add.w	r1, r4, #112	; 0x70
    e500:	7a20      	ldrb	r0, [r4, #8]
    e502:	f000 f8e1 	bl	e6c8 <bt_keys_get_addr>
    e506:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
		if (!conn->le.keys) {
    e50a:	2800      	cmp	r0, #0
    e50c:	d1dd      	bne.n	e4ca <bt_smp_start_security+0xda>
			return -ENOMEM;
    e50e:	f06f 070b 	mvn.w	r7, #11
    e512:	e775      	b.n	e400 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    e514:	210b      	movs	r1, #11
    e516:	4628      	mov	r0, r5
    e518:	f012 feba 	bl	21290 <smp_create_pdu.isra.6>
	if (!req_buf) {
    e51c:	4680      	mov	r8, r0
    e51e:	2800      	cmp	r0, #0
    e520:	d0d8      	beq.n	e4d4 <bt_smp_start_security+0xe4>
	req = net_buf_add(req_buf, sizeof(*req));
    e522:	2101      	movs	r1, #1
    e524:	3008      	adds	r0, #8
    e526:	f014 f885 	bl	22634 <net_buf_simple_add>
    e52a:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    e52c:	2009      	movs	r0, #9
    e52e:	f7fe fc55 	bl	cddc <get_auth.isra.0>
    e532:	463b      	mov	r3, r7
    e534:	f889 0000 	strb.w	r0, [r9]
    e538:	4642      	mov	r2, r8
    e53a:	9700      	str	r7, [sp, #0]
    e53c:	2106      	movs	r1, #6
    e53e:	4620      	mov	r0, r4
    e540:	f011 fdfb 	bl	2013a <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e544:	4630      	mov	r0, r6
    e546:	210e      	movs	r1, #14
    e548:	f012 fdd3 	bl	210f2 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    e54c:	2101      	movs	r1, #1
    e54e:	f105 0090 	add.w	r0, r5, #144	; 0x90
    e552:	f012 fdce 	bl	210f2 <atomic_set_bit>
	return 0;
    e556:	e753      	b.n	e400 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    e558:	f06f 0738 	mvn.w	r7, #56	; 0x38
    e55c:	e750      	b.n	e400 <bt_smp_start_security+0x10>
		return -EIO;
    e55e:	f06f 0704 	mvn.w	r7, #4
    e562:	e74d      	b.n	e400 <bt_smp_start_security+0x10>
    e564:	200002c8 	.word	0x200002c8
    e568:	2000a541 	.word	0x2000a541
    e56c:	2000a542 	.word	0x2000a542

0000e570 <bt_smp_update_keys>:
{
    e570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e572:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    e574:	f7fe fc50 	bl	ce18 <smp_chan_get>
	if (!smp) {
    e578:	4605      	mov	r5, r0
    e57a:	2800      	cmp	r0, #0
    e57c:	f000 8086 	beq.w	e68c <bt_smp_update_keys+0x11c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e580:	f100 0694 	add.w	r6, r0, #148	; 0x94
    e584:	2103      	movs	r1, #3
    e586:	4630      	mov	r0, r6
    e588:	f012 fdc2 	bl	21110 <atomic_test_bit>
    e58c:	2800      	cmp	r0, #0
    e58e:	d07d      	beq.n	e68c <bt_smp_update_keys+0x11c>
	if (conn->le.keys) {
    e590:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e594:	b108      	cbz	r0, e59a <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    e596:	f000 f96d 	bl	e874 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e59a:	f104 0770 	add.w	r7, r4, #112	; 0x70
    e59e:	4639      	mov	r1, r7
    e5a0:	7a20      	ldrb	r0, [r4, #8]
    e5a2:	f000 f891 	bl	e6c8 <bt_keys_get_addr>
    e5a6:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
	if (!conn->le.keys) {
    e5aa:	b9d0      	cbnz	r0, e5e2 <bt_smp_update_keys+0x72>
		BT_ERR("Unable to get keys for %s",
    e5ac:	2301      	movs	r3, #1
    e5ae:	f04f 0400 	mov.w	r4, #0
    e5b2:	4a37      	ldr	r2, [pc, #220]	; (e690 <bt_smp_update_keys+0x120>)
    e5b4:	f363 0407 	bfi	r4, r3, #0, #8
    e5b8:	4b36      	ldr	r3, [pc, #216]	; (e694 <bt_smp_update_keys+0x124>)
    e5ba:	1a9b      	subs	r3, r3, r2
    e5bc:	08db      	lsrs	r3, r3, #3
    e5be:	4638      	mov	r0, r7
    e5c0:	f363 148f 	bfi	r4, r3, #6, #10
    e5c4:	f7f7 fc54 	bl	5e70 <bt_addr_le_str_real>
    e5c8:	f7f4 fd64 	bl	3094 <log_strdup>
    e5cc:	4622      	mov	r2, r4
    e5ce:	4601      	mov	r1, r0
    e5d0:	4831      	ldr	r0, [pc, #196]	; (e698 <bt_smp_update_keys+0x128>)
    e5d2:	f010 fa4c 	bl	1ea6e <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e5d6:	4628      	mov	r0, r5
    e5d8:	2108      	movs	r1, #8
}
    e5da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e5de:	f012 bf19 	b.w	21414 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    e5e2:	210d      	movs	r1, #13
    e5e4:	4630      	mov	r0, r6
    e5e6:	f012 fd93 	bl	21110 <atomic_test_bit>
    e5ea:	b128      	cbz	r0, e5f8 <bt_smp_update_keys+0x88>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    e5ec:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    e5f0:	7a53      	ldrb	r3, [r2, #9]
    e5f2:	f043 0302 	orr.w	r3, r3, #2
    e5f6:	7253      	strb	r3, [r2, #9]
	switch (smp->method) {
    e5f8:	f895 0098 	ldrb.w	r0, [r5, #152]	; 0x98
    e5fc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    e600:	2805      	cmp	r0, #5
    e602:	7a53      	ldrb	r3, [r2, #9]
    e604:	d83c      	bhi.n	e680 <bt_smp_update_keys+0x110>
    e606:	2101      	movs	r1, #1
    e608:	4081      	lsls	r1, r0
    e60a:	f011 0f2e 	tst.w	r1, #46	; 0x2e
    e60e:	d037      	beq.n	e680 <bt_smp_update_keys+0x110>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    e610:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    e614:	7253      	strb	r3, [r2, #9]
	return MIN(req->max_key_size, rsp->max_key_size);
    e616:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    e61a:	f895 109d 	ldrb.w	r1, [r5, #157]	; 0x9d
    e61e:	428b      	cmp	r3, r1
    e620:	bf28      	it	cs
    e622:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    e624:	7213      	strb	r3, [r2, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e626:	2105      	movs	r1, #5
    e628:	4630      	mov	r0, r6
    e62a:	f012 fd71 	bl	21110 <atomic_test_bit>
    e62e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
		conn->le.keys->flags |= BT_KEYS_SC;
    e632:	7a5a      	ldrb	r2, [r3, #9]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e634:	b338      	cbz	r0, e686 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_SC;
    e636:	f042 0210 	orr.w	r2, r2, #16
    e63a:	725a      	strb	r2, [r3, #9]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e63c:	210c      	movs	r1, #12
    e63e:	4630      	mov	r0, r6
    e640:	f012 fd66 	bl	21110 <atomic_test_bit>
    e644:	b310      	cbz	r0, e68c <bt_smp_update_keys+0x11c>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    e646:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e64a:	2120      	movs	r1, #32
    e64c:	f013 f8da 	bl	21804 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    e650:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e654:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
    e658:	2210      	movs	r2, #16
    e65a:	3016      	adds	r0, #22
    e65c:	f010 ffcc 	bl	1f5f8 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    e660:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e664:	2208      	movs	r2, #8
    e666:	2100      	movs	r1, #0
    e668:	300c      	adds	r0, #12
    e66a:	f010 ffef 	bl	1f64c <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    e66e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e672:	2202      	movs	r2, #2
    e674:	2100      	movs	r1, #0
    e676:	3014      	adds	r0, #20
}
    e678:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    e67c:	f010 bfe6 	b.w	1f64c <memset>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    e680:	f023 0301 	bic.w	r3, r3, #1
    e684:	e7c6      	b.n	e614 <bt_smp_update_keys+0xa4>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    e686:	f022 0210 	bic.w	r2, r2, #16
    e68a:	725a      	strb	r2, [r3, #9]
}
    e68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e68e:	bf00      	nop
    e690:	00025a6c 	.word	0x00025a6c
    e694:	00025b64 	.word	0x00025b64
    e698:	00028cb3 	.word	0x00028cb3

0000e69c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    e69c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    e69e:	4b07      	ldr	r3, [pc, #28]	; (e6bc <bt_smp_init+0x20>)
		return -ENOENT;
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    e6a0:	4807      	ldr	r0, [pc, #28]	; (e6c0 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    e6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    e6a6:	f003 0306 	and.w	r3, r3, #6
    e6aa:	1f9a      	subs	r2, r3, #6
    e6ac:	4253      	negs	r3, r2
    e6ae:	4153      	adcs	r3, r2
    e6b0:	4a04      	ldr	r2, [pc, #16]	; (e6c4 <bt_smp_init+0x28>)
    e6b2:	7013      	strb	r3, [r2, #0]
	bt_pub_key_gen(&pub_key_cb);
    e6b4:	f7fa fa22 	bl	8afc <bt_pub_key_gen>

	return smp_self_test();
}
    e6b8:	2000      	movs	r0, #0
    e6ba:	bd08      	pop	{r3, pc}
    e6bc:	2000dd18 	.word	0x2000dd18
    e6c0:	2000dfec 	.word	0x2000dfec
    e6c4:	2000a542 	.word	0x2000a542

0000e6c8 <bt_keys_get_addr>:
static u32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(u8_t id, const bt_addr_le_t *addr)
{
    e6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e6ca:	4c1d      	ldr	r4, [pc, #116]	; (e740 <bt_keys_get_addr+0x78>)
    e6cc:	7823      	ldrb	r3, [r4, #0]
    e6ce:	4283      	cmp	r3, r0
{
    e6d0:	b085      	sub	sp, #20
    e6d2:	4606      	mov	r6, r0
    e6d4:	460f      	mov	r7, r1
    e6d6:	4625      	mov	r5, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e6d8:	d029      	beq.n	e72e <bt_keys_get_addr+0x66>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY) ||
    e6da:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    e6dc:	2207      	movs	r2, #7
    e6de:	4669      	mov	r1, sp
    e6e0:	4818      	ldr	r0, [pc, #96]	; (e744 <bt_keys_get_addr+0x7c>)
    e6e2:	9400      	str	r4, [sp, #0]
    e6e4:	f8cd 4003 	str.w	r4, [sp, #3]
    e6e8:	f010 ff76 	bl	1f5d8 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    e6ec:	b170      	cbz	r0, e70c <bt_keys_get_addr+0x44>
		    (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY) ||
    e6ee:	7a2b      	ldrb	r3, [r5, #8]
    e6f0:	b163      	cbz	r3, e70c <bt_keys_get_addr+0x44>
			if (current->aging_counter < oldest->aging_counter) {
				oldest = current;
			}
		}

		bt_unpair(oldest->id, &oldest->addr);
    e6f2:	4914      	ldr	r1, [pc, #80]	; (e744 <bt_keys_get_addr+0x7c>)
    e6f4:	7828      	ldrb	r0, [r5, #0]
    e6f6:	f7f9 f87b 	bl	77f0 <bt_unpair>
    e6fa:	2207      	movs	r2, #7
    e6fc:	a902      	add	r1, sp, #8
    e6fe:	4811      	ldr	r0, [pc, #68]	; (e744 <bt_keys_get_addr+0x7c>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
    e700:	9402      	str	r4, [sp, #8]
    e702:	f8cd 400b 	str.w	r4, [sp, #11]
    e706:	f010 ff67 	bl	1f5d8 <memcmp>
    e70a:	b9b0      	cbnz	r0, e73a <bt_keys_get_addr+0x72>
	memcpy(dst, src, sizeof(*dst));
    e70c:	2207      	movs	r2, #7
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
    e70e:	702e      	strb	r6, [r5, #0]
    e710:	4639      	mov	r1, r7
    e712:	480c      	ldr	r0, [pc, #48]	; (e744 <bt_keys_get_addr+0x7c>)
    e714:	f010 ff70 	bl	1f5f8 <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
    e718:	4a0b      	ldr	r2, [pc, #44]	; (e748 <bt_keys_get_addr+0x80>)
		last_keys_updated = keys;
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
    e71a:	4809      	ldr	r0, [pc, #36]	; (e740 <bt_keys_get_addr+0x78>)
		keys->aging_counter = ++aging_counter_val;
    e71c:	6813      	ldr	r3, [r2, #0]
    e71e:	3301      	adds	r3, #1
    e720:	6013      	str	r3, [r2, #0]
    e722:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		last_keys_updated = keys;
    e726:	4b09      	ldr	r3, [pc, #36]	; (e74c <bt_keys_get_addr+0x84>)
    e728:	601d      	str	r5, [r3, #0]
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
    e72a:	b005      	add	sp, #20
    e72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
    e72e:	2207      	movs	r2, #7
    e730:	1c60      	adds	r0, r4, #1
    e732:	f010 ff51 	bl	1f5d8 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e736:	2800      	cmp	r0, #0
    e738:	d1cf      	bne.n	e6da <bt_keys_get_addr+0x12>
	return NULL;
    e73a:	4620      	mov	r0, r4
    e73c:	e7f5      	b.n	e72a <bt_keys_get_addr+0x62>
    e73e:	bf00      	nop
    e740:	200006a4 	.word	0x200006a4
    e744:	200006a5 	.word	0x200006a5
    e748:	200006a0 	.word	0x200006a0
    e74c:	20000728 	.word	0x20000728

0000e750 <bt_foreach_bond>:

void bt_foreach_bond(u8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
    e750:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e752:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
    e754:	4908      	ldr	r1, [pc, #32]	; (e778 <bt_foreach_bond+0x28>)
    e756:	894b      	ldrh	r3, [r1, #10]
{
    e758:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
    e75a:	b153      	cbz	r3, e772 <bt_foreach_bond+0x22>
    e75c:	780b      	ldrb	r3, [r1, #0]
    e75e:	4283      	cmp	r3, r0
    e760:	d107      	bne.n	e772 <bt_foreach_bond+0x22>
	memcpy(dst, src, sizeof(*dst));
    e762:	3101      	adds	r1, #1
    e764:	2207      	movs	r2, #7
    e766:	4668      	mov	r0, sp
    e768:	f010 ff46 	bl	1f5f8 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
    e76c:	4629      	mov	r1, r5
    e76e:	4668      	mov	r0, sp
    e770:	47a0      	blx	r4
		}
	}
}
    e772:	b003      	add	sp, #12
    e774:	bd30      	pop	{r4, r5, pc}
    e776:	bf00      	nop
    e778:	200006a4 	.word	0x200006a4

0000e77c <bt_keys_foreach>:
		     void *data)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    e77c:	4b06      	ldr	r3, [pc, #24]	; (e798 <bt_keys_foreach+0x1c>)
{
    e77e:	b410      	push	{r4}
    e780:	460c      	mov	r4, r1
		if ((key_pool[i].keys & type)) {
    e782:	8959      	ldrh	r1, [r3, #10]
    e784:	4201      	tst	r1, r0
    e786:	d004      	beq.n	e792 <bt_keys_foreach+0x16>
			func(&key_pool[i], data);
    e788:	4618      	mov	r0, r3
    e78a:	4611      	mov	r1, r2
    e78c:	4623      	mov	r3, r4
		}
	}
}
    e78e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    e790:	4718      	bx	r3
}
    e792:	bc10      	pop	{r4}
    e794:	4770      	bx	lr
    e796:	bf00      	nop
    e798:	200006a4 	.word	0x200006a4

0000e79c <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    e79c:	b508      	push	{r3, lr}

	/* We do this in commit() rather than add() since add() may get
	 * called multiple times for the same address, especially if
	 * the keys were already removed.
	 */
	bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    e79e:	2200      	movs	r2, #0
    e7a0:	4902      	ldr	r1, [pc, #8]	; (e7ac <keys_commit+0x10>)
    e7a2:	2002      	movs	r0, #2
    e7a4:	f7ff ffea 	bl	e77c <bt_keys_foreach>

	return 0;
}
    e7a8:	2000      	movs	r0, #0
    e7aa:	bd08      	pop	{r3, pc}
    e7ac:	000217e1 	.word	0x000217e1

0000e7b0 <bt_keys_find>:
{
    e7b0:	b538      	push	{r3, r4, r5, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    e7b2:	4c0a      	ldr	r4, [pc, #40]	; (e7dc <bt_keys_find+0x2c>)
    e7b4:	8963      	ldrh	r3, [r4, #10]
    e7b6:	4018      	ands	r0, r3
{
    e7b8:	460d      	mov	r5, r1
    e7ba:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    e7bc:	d00a      	beq.n	e7d4 <bt_keys_find+0x24>
    e7be:	7823      	ldrb	r3, [r4, #0]
    e7c0:	42ab      	cmp	r3, r5
    e7c2:	d108      	bne.n	e7d6 <bt_keys_find+0x26>
	return memcmp(a, b, sizeof(*a));
    e7c4:	2207      	movs	r2, #7
    e7c6:	1c60      	adds	r0, r4, #1
    e7c8:	f010 ff06 	bl	1f5d8 <memcmp>
    e7cc:	2800      	cmp	r0, #0
			return &key_pool[i];
    e7ce:	bf0c      	ite	eq
    e7d0:	4620      	moveq	r0, r4
    e7d2:	2000      	movne	r0, #0
}
    e7d4:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    e7d6:	2000      	movs	r0, #0
    e7d8:	e7fc      	b.n	e7d4 <bt_keys_find+0x24>
    e7da:	bf00      	nop
    e7dc:	200006a4 	.word	0x200006a4

0000e7e0 <bt_keys_find_irk>:
{
    e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e7e2:	780b      	ldrb	r3, [r1, #0]
    e7e4:	2b01      	cmp	r3, #1
    e7e6:	4606      	mov	r6, r0
    e7e8:	460d      	mov	r5, r1
    e7ea:	d001      	beq.n	e7f0 <bt_keys_find_irk+0x10>
		return NULL;
    e7ec:	2000      	movs	r0, #0
}
    e7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    e7f0:	798b      	ldrb	r3, [r1, #6]
    e7f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e7f6:	2b40      	cmp	r3, #64	; 0x40
    e7f8:	d1f8      	bne.n	e7ec <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e7fa:	4c13      	ldr	r4, [pc, #76]	; (e848 <bt_keys_find_irk+0x68>)
    e7fc:	8963      	ldrh	r3, [r4, #10]
    e7fe:	f013 0f02 	tst.w	r3, #2
    e802:	4627      	mov	r7, r4
    e804:	d00b      	beq.n	e81e <bt_keys_find_irk+0x3e>
		if (key_pool[i].id == id &&
    e806:	7823      	ldrb	r3, [r4, #0]
    e808:	4283      	cmp	r3, r0
    e80a:	d108      	bne.n	e81e <bt_keys_find_irk+0x3e>
	return memcmp(a, b, sizeof(*a));
    e80c:	2206      	movs	r2, #6
    e80e:	f104 0136 	add.w	r1, r4, #54	; 0x36
    e812:	1c68      	adds	r0, r5, #1
    e814:	f010 fee0 	bl	1f5d8 <memcmp>
    e818:	b908      	cbnz	r0, e81e <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    e81a:	4620      	mov	r0, r4
    e81c:	e7e7      	b.n	e7ee <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e81e:	897b      	ldrh	r3, [r7, #10]
    e820:	079b      	lsls	r3, r3, #30
    e822:	d5e3      	bpl.n	e7ec <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    e824:	783b      	ldrb	r3, [r7, #0]
    e826:	42b3      	cmp	r3, r6
    e828:	d1e0      	bne.n	e7ec <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    e82a:	3501      	adds	r5, #1
    e82c:	4629      	mov	r1, r5
    e82e:	4807      	ldr	r0, [pc, #28]	; (e84c <bt_keys_find_irk+0x6c>)
    e830:	f011 f942 	bl	1fab8 <bt_rpa_irk_matches>
    e834:	2800      	cmp	r0, #0
    e836:	d0d9      	beq.n	e7ec <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    e838:	2206      	movs	r2, #6
    e83a:	4629      	mov	r1, r5
    e83c:	4804      	ldr	r0, [pc, #16]	; (e850 <bt_keys_find_irk+0x70>)
    e83e:	f010 fedb 	bl	1f5f8 <memcpy>
			return &key_pool[i];
    e842:	4801      	ldr	r0, [pc, #4]	; (e848 <bt_keys_find_irk+0x68>)
    e844:	e7d3      	b.n	e7ee <bt_keys_find_irk+0xe>
    e846:	bf00      	nop
    e848:	200006a4 	.word	0x200006a4
    e84c:	200006ca 	.word	0x200006ca
    e850:	200006da 	.word	0x200006da

0000e854 <bt_keys_find_addr>:
{
    e854:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    e856:	4c06      	ldr	r4, [pc, #24]	; (e870 <bt_keys_find_addr+0x1c>)
    e858:	7823      	ldrb	r3, [r4, #0]
    e85a:	4283      	cmp	r3, r0
    e85c:	d104      	bne.n	e868 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    e85e:	2207      	movs	r2, #7
    e860:	1c60      	adds	r0, r4, #1
    e862:	f010 feb9 	bl	1f5d8 <memcmp>
    e866:	b108      	cbz	r0, e86c <bt_keys_find_addr+0x18>
	return NULL;
    e868:	2000      	movs	r0, #0
}
    e86a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    e86c:	4620      	mov	r0, r4
    e86e:	e7fc      	b.n	e86a <bt_keys_find_addr+0x16>
    e870:	200006a4 	.word	0x200006a4

0000e874 <bt_keys_clear>:
{
    e874:	b570      	push	{r4, r5, r6, lr}
	if (keys->keys & BT_KEYS_IRK) {
    e876:	8943      	ldrh	r3, [r0, #10]
    e878:	079b      	lsls	r3, r3, #30
{
    e87a:	b08c      	sub	sp, #48	; 0x30
    e87c:	4605      	mov	r5, r0
	if (keys->keys & BT_KEYS_IRK) {
    e87e:	d501      	bpl.n	e884 <bt_keys_clear+0x10>
		bt_id_del(keys);
    e880:	f7f9 f8ba 	bl	79f8 <bt_id_del>
		if (keys->id) {
    e884:	462c      	mov	r4, r5
    e886:	f814 2b01 	ldrb.w	r2, [r4], #1
    e88a:	b1aa      	cbz	r2, e8b8 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    e88c:	ae02      	add	r6, sp, #8
    e88e:	2104      	movs	r1, #4
    e890:	4630      	mov	r0, r6
    e892:	f00e fbd1 	bl	1d038 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    e896:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    e898:	4623      	mov	r3, r4
    e89a:	4a08      	ldr	r2, [pc, #32]	; (e8bc <bt_keys_clear+0x48>)
    e89c:	2124      	movs	r1, #36	; 0x24
    e89e:	a803      	add	r0, sp, #12
    e8a0:	f7f7 fdc8 	bl	6434 <bt_settings_encode_key>
		settings_delete(key);
    e8a4:	a803      	add	r0, sp, #12
    e8a6:	f010 fb03 	bl	1eeb0 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    e8aa:	2284      	movs	r2, #132	; 0x84
    e8ac:	2100      	movs	r1, #0
    e8ae:	4628      	mov	r0, r5
    e8b0:	f010 fecc 	bl	1f64c <memset>
}
    e8b4:	b00c      	add	sp, #48	; 0x30
    e8b6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    e8b8:	9200      	str	r2, [sp, #0]
    e8ba:	e7ed      	b.n	e898 <bt_keys_clear+0x24>
    e8bc:	00028e0c 	.word	0x00028e0c

0000e8c0 <keys_set>:
{
    e8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8c2:	4614      	mov	r4, r2
    e8c4:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
    e8c6:	4606      	mov	r6, r0
    e8c8:	b990      	cbnz	r0, e8f0 <keys_set+0x30>
		BT_ERR("Insufficient number of arguments");
    e8ca:	2301      	movs	r3, #1
    e8cc:	f04f 0100 	mov.w	r1, #0
    e8d0:	f363 0107 	bfi	r1, r3, #0, #8
    e8d4:	4a56      	ldr	r2, [pc, #344]	; (ea30 <keys_set+0x170>)
    e8d6:	4b57      	ldr	r3, [pc, #348]	; (ea34 <keys_set+0x174>)
    e8d8:	4857      	ldr	r0, [pc, #348]	; (ea38 <keys_set+0x178>)
    e8da:	1a9b      	subs	r3, r3, r2
    e8dc:	08db      	lsrs	r3, r3, #3
    e8de:	f363 118f 	bfi	r1, r3, #6, #10
    e8e2:	f010 f8b7 	bl	1ea54 <log_0>
		return -EINVAL;
    e8e6:	f06f 0415 	mvn.w	r4, #21
}
    e8ea:	4620      	mov	r0, r4
    e8ec:	b023      	add	sp, #140	; 0x8c
    e8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
    e8f0:	227c      	movs	r2, #124	; 0x7c
    e8f2:	a903      	add	r1, sp, #12
    e8f4:	4618      	mov	r0, r3
    e8f6:	47a0      	blx	r4
	err = bt_settings_decode_key(name, &addr);
    e8f8:	a901      	add	r1, sp, #4
	len = read_cb(cb_arg, val, sizeof(val));
    e8fa:	4605      	mov	r5, r0
	err = bt_settings_decode_key(name, &addr);
    e8fc:	4630      	mov	r0, r6
    e8fe:	f011 f939 	bl	1fb74 <bt_settings_decode_key>
	if (err) {
    e902:	4604      	mov	r4, r0
    e904:	b178      	cbz	r0, e926 <keys_set+0x66>
		BT_ERR("Unable to decode address %s", name);
    e906:	2301      	movs	r3, #1
    e908:	f04f 0200 	mov.w	r2, #0
    e90c:	f363 0207 	bfi	r2, r3, #0, #8
    e910:	4947      	ldr	r1, [pc, #284]	; (ea30 <keys_set+0x170>)
    e912:	4b48      	ldr	r3, [pc, #288]	; (ea34 <keys_set+0x174>)
    e914:	4849      	ldr	r0, [pc, #292]	; (ea3c <keys_set+0x17c>)
    e916:	1a5b      	subs	r3, r3, r1
    e918:	08db      	lsrs	r3, r3, #3
    e91a:	f363 128f 	bfi	r2, r3, #6, #10
    e91e:	4631      	mov	r1, r6
    e920:	f010 f8a5 	bl	1ea6e <log_1>
    e924:	e7df      	b.n	e8e6 <keys_set+0x26>
	settings_name_next(name, &next);
    e926:	4669      	mov	r1, sp
    e928:	4630      	mov	r0, r6
    e92a:	f010 fae5 	bl	1eef8 <settings_name_next>
	if (!next) {
    e92e:	9800      	ldr	r0, [sp, #0]
    e930:	b180      	cbz	r0, e954 <keys_set+0x94>
		id = strtol(next, NULL, 10);
    e932:	220a      	movs	r2, #10
    e934:	4621      	mov	r1, r4
    e936:	f010 fd8c 	bl	1f452 <strtol>
    e93a:	b2c0      	uxtb	r0, r0
	if (!len) {
    e93c:	bb15      	cbnz	r5, e984 <keys_set+0xc4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
    e93e:	4601      	mov	r1, r0
    e940:	aa01      	add	r2, sp, #4
    e942:	203f      	movs	r0, #63	; 0x3f
    e944:	f7ff ff34 	bl	e7b0 <bt_keys_find>
		if (keys) {
    e948:	b130      	cbz	r0, e958 <keys_set+0x98>
			(void)memset(keys, 0, sizeof(*keys));
    e94a:	2284      	movs	r2, #132	; 0x84
    e94c:	4629      	mov	r1, r5
    e94e:	f010 fe7d 	bl	1f64c <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
    e952:	e7ca      	b.n	e8ea <keys_set+0x2a>
		id = BT_ID_DEFAULT;
    e954:	4620      	mov	r0, r4
    e956:	e7f1      	b.n	e93c <keys_set+0x7c>
			BT_WARN("Unable to find deleted keys for %s",
    e958:	2302      	movs	r3, #2
    e95a:	f04f 0500 	mov.w	r5, #0
    e95e:	4a34      	ldr	r2, [pc, #208]	; (ea30 <keys_set+0x170>)
    e960:	f363 0507 	bfi	r5, r3, #0, #8
    e964:	4b33      	ldr	r3, [pc, #204]	; (ea34 <keys_set+0x174>)
    e966:	1a9b      	subs	r3, r3, r2
    e968:	08db      	lsrs	r3, r3, #3
    e96a:	a801      	add	r0, sp, #4
    e96c:	f363 158f 	bfi	r5, r3, #6, #10
    e970:	f7f7 fa7e 	bl	5e70 <bt_addr_le_str_real>
    e974:	f7f4 fb8e 	bl	3094 <log_strdup>
    e978:	462a      	mov	r2, r5
    e97a:	4601      	mov	r1, r0
    e97c:	4830      	ldr	r0, [pc, #192]	; (ea40 <keys_set+0x180>)
    e97e:	f010 f876 	bl	1ea6e <log_1>
    e982:	e7b2      	b.n	e8ea <keys_set+0x2a>
	keys = bt_keys_get_addr(id, &addr);
    e984:	a901      	add	r1, sp, #4
    e986:	f7ff fe9f 	bl	e6c8 <bt_keys_get_addr>
	if (!keys) {
    e98a:	4606      	mov	r6, r0
    e98c:	b9b8      	cbnz	r0, e9be <keys_set+0xfe>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
    e98e:	2301      	movs	r3, #1
    e990:	f04f 0400 	mov.w	r4, #0
    e994:	4a26      	ldr	r2, [pc, #152]	; (ea30 <keys_set+0x170>)
    e996:	f363 0407 	bfi	r4, r3, #0, #8
    e99a:	4b26      	ldr	r3, [pc, #152]	; (ea34 <keys_set+0x174>)
    e99c:	1a9b      	subs	r3, r3, r2
    e99e:	08db      	lsrs	r3, r3, #3
    e9a0:	a801      	add	r0, sp, #4
    e9a2:	f363 148f 	bfi	r4, r3, #6, #10
    e9a6:	f7f7 fa63 	bl	5e70 <bt_addr_le_str_real>
    e9aa:	f7f4 fb73 	bl	3094 <log_strdup>
    e9ae:	4622      	mov	r2, r4
    e9b0:	4601      	mov	r1, r0
    e9b2:	4824      	ldr	r0, [pc, #144]	; (ea44 <keys_set+0x184>)
    e9b4:	f010 f85b 	bl	1ea6e <log_1>
		return -ENOMEM;
    e9b8:	f06f 040b 	mvn.w	r4, #11
    e9bc:	e795      	b.n	e8ea <keys_set+0x2a>
	if (len != BT_KEYS_STORAGE_LEN) {
    e9be:	2d7c      	cmp	r5, #124	; 0x7c
    e9c0:	d018      	beq.n	e9f4 <keys_set+0x134>
			if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
    e9c2:	491c      	ldr	r1, [pc, #112]	; (ea34 <keys_set+0x174>)
    e9c4:	4b1a      	ldr	r3, [pc, #104]	; (ea30 <keys_set+0x170>)
    e9c6:	2d78      	cmp	r5, #120	; 0x78
    e9c8:	eba1 0103 	sub.w	r1, r1, r3
    e9cc:	f3c1 01c9 	ubfx	r1, r1, #3, #10
    e9d0:	d11e      	bne.n	ea10 <keys_set+0x150>
				BT_WARN("Keys for %s have no aging counter",
    e9d2:	2302      	movs	r3, #2
    e9d4:	f04f 0700 	mov.w	r7, #0
    e9d8:	f363 0707 	bfi	r7, r3, #0, #8
    e9dc:	a801      	add	r0, sp, #4
    e9de:	f361 178f 	bfi	r7, r1, #6, #10
    e9e2:	f7f7 fa45 	bl	5e70 <bt_addr_le_str_real>
    e9e6:	f7f4 fb55 	bl	3094 <log_strdup>
    e9ea:	463a      	mov	r2, r7
    e9ec:	4601      	mov	r1, r0
    e9ee:	4816      	ldr	r0, [pc, #88]	; (ea48 <keys_set+0x188>)
    e9f0:	f010 f83d 	bl	1ea6e <log_1>
		memcpy(keys->storage_start, val, len);
    e9f4:	462a      	mov	r2, r5
    e9f6:	a903      	add	r1, sp, #12
    e9f8:	f106 0008 	add.w	r0, r6, #8
    e9fc:	f010 fdfc 	bl	1f5f8 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
    ea00:	4b12      	ldr	r3, [pc, #72]	; (ea4c <keys_set+0x18c>)
    ea02:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
    ea06:	6819      	ldr	r1, [r3, #0]
    ea08:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
    ea0a:	bf88      	it	hi
    ea0c:	601a      	strhi	r2, [r3, #0]
    ea0e:	e76c      	b.n	e8ea <keys_set+0x2a>
			BT_ERR("Invalid key length %zu != %zu", len,
    ea10:	2201      	movs	r2, #1
    ea12:	f04f 0300 	mov.w	r3, #0
    ea16:	f362 0307 	bfi	r3, r2, #0, #8
    ea1a:	f361 138f 	bfi	r3, r1, #6, #10
    ea1e:	227c      	movs	r2, #124	; 0x7c
    ea20:	4629      	mov	r1, r5
    ea22:	480b      	ldr	r0, [pc, #44]	; (ea50 <keys_set+0x190>)
    ea24:	f010 f837 	bl	1ea96 <log_2>
			bt_keys_clear(keys);
    ea28:	4630      	mov	r0, r6
    ea2a:	f7ff ff23 	bl	e874 <bt_keys_clear>
			return -EINVAL;
    ea2e:	e75a      	b.n	e8e6 <keys_set+0x26>
    ea30:	00025a6c 	.word	0x00025a6c
    ea34:	00025b44 	.word	0x00025b44
    ea38:	00027772 	.word	0x00027772
    ea3c:	00028936 	.word	0x00028936
    ea40:	00028d87 	.word	0x00028d87
    ea44:	00028daa 	.word	0x00028daa
    ea48:	00028dc9 	.word	0x00028dc9
    ea4c:	200006a0 	.word	0x200006a0
    ea50:	00028deb 	.word	0x00028deb

0000ea54 <bt_keys_store>:
{
    ea54:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    ea56:	4604      	mov	r4, r0
{
    ea58:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    ea5a:	f814 2b01 	ldrb.w	r2, [r4], #1
{
    ea5e:	4605      	mov	r5, r0
	if (keys->id) {
    ea60:	b32a      	cbz	r2, eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
		u8_to_dec(id, sizeof(id), keys->id);
    ea62:	ae02      	add	r6, sp, #8
    ea64:	2104      	movs	r1, #4
    ea66:	4630      	mov	r0, r6
    ea68:	f00e fae6 	bl	1d038 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    ea6c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    ea6e:	4623      	mov	r3, r4
    ea70:	4a10      	ldr	r2, [pc, #64]	; (eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    ea72:	2124      	movs	r1, #36	; 0x24
    ea74:	a803      	add	r0, sp, #12
    ea76:	f7f7 fcdd 	bl	6434 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    ea7a:	227c      	movs	r2, #124	; 0x7c
    ea7c:	f105 0108 	add.w	r1, r5, #8
    ea80:	a803      	add	r0, sp, #12
    ea82:	f7f5 f9d3 	bl	3e2c <settings_save_one>
	if (err) {
    ea86:	4604      	mov	r4, r0
    ea88:	b170      	cbz	r0, eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>
		BT_ERR("Failed to save keys (err %d)", err);
    ea8a:	2301      	movs	r3, #1
    ea8c:	f04f 0200 	mov.w	r2, #0
    ea90:	f363 0207 	bfi	r2, r3, #0, #8
    ea94:	4908      	ldr	r1, [pc, #32]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    ea96:	4b09      	ldr	r3, [pc, #36]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea98:	1a5b      	subs	r3, r3, r1
    ea9a:	08db      	lsrs	r3, r3, #3
    ea9c:	4601      	mov	r1, r0
    ea9e:	f363 128f 	bfi	r2, r3, #6, #10
    eaa2:	4807      	ldr	r0, [pc, #28]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    eaa4:	f00f ffe3 	bl	1ea6e <log_1>
}
    eaa8:	4620      	mov	r0, r4
    eaaa:	b00c      	add	sp, #48	; 0x30
    eaac:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    eaae:	9200      	str	r2, [sp, #0]
    eab0:	e7dd      	b.n	ea6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe>
    eab2:	bf00      	nop
    eab4:	00028e0c 	.word	0x00028e0c
    eab8:	00025a6c 	.word	0x00025a6c
    eabc:	00025b44 	.word	0x00025b44
    eac0:	00028d6a 	.word	0x00028d6a

0000eac4 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(u8_t id, const bt_addr_le_t *addr)
{
    eac4:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
    eac6:	f7ff fec5 	bl	e854 <bt_keys_find_addr>

	if (!keys) {
    eaca:	b150      	cbz	r0, eae2 <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
    eacc:	4a05      	ldr	r2, [pc, #20]	; (eae4 <bt_keys_update_usage+0x20>)
    eace:	6813      	ldr	r3, [r2, #0]
    ead0:	4283      	cmp	r3, r0
    ead2:	d006      	beq.n	eae2 <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
    ead4:	4904      	ldr	r1, [pc, #16]	; (eae8 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
    ead6:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
    ead8:	680b      	ldr	r3, [r1, #0]
    eada:	3301      	adds	r3, #1
    eadc:	600b      	str	r3, [r1, #0]
    eade:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
    eae2:	bd08      	pop	{r3, pc}
    eae4:	20000728 	.word	0x20000728
    eae8:	200006a0 	.word	0x200006a0

0000eaec <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    eaec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    eaf0:	4f11      	ldr	r7, [pc, #68]	; (eb38 <mayfly_init+0x4c>)
    eaf2:	f8df 9048 	ldr.w	r9, [pc, #72]	; eb3c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    eaf6:	2604      	movs	r6, #4
	while (callee_id--) {
    eaf8:	3e01      	subs	r6, #1
    eafa:	b2f6      	uxtb	r6, r6
    eafc:	2eff      	cmp	r6, #255	; 0xff
    eafe:	d019      	beq.n	eb34 <mayfly_init+0x48>
    eb00:	b233      	sxth	r3, r6
    eb02:	ea4f 0883 	mov.w	r8, r3, lsl #2
    eb06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    eb0a:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
    eb0c:	2404      	movs	r4, #4
    eb0e:	f04f 0a0c 	mov.w	sl, #12
    eb12:	e00a      	b.n	eb2a <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
    eb14:	fb1a 5104 	smlabb	r1, sl, r4, r5
    eb18:	1d0a      	adds	r2, r1, #4
    eb1a:	eb04 0008 	add.w	r0, r4, r8
    eb1e:	443a      	add	r2, r7
    eb20:	4439      	add	r1, r7
    eb22:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    eb26:	f012 fee5 	bl	218f4 <memq_init>
		while (caller_id--) {
    eb2a:	3c01      	subs	r4, #1
    eb2c:	b2e4      	uxtb	r4, r4
    eb2e:	2cff      	cmp	r4, #255	; 0xff
    eb30:	d1f0      	bne.n	eb14 <mayfly_init+0x28>
    eb32:	e7e1      	b.n	eaf8 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    eb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eb38:	200007ac 	.word	0x200007ac
    eb3c:	2000072c 	.word	0x2000072c

0000eb40 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    eb40:	b4f0      	push	{r4, r5, r6, r7}
    eb42:	2430      	movs	r4, #48	; 0x30
    eb44:	4b10      	ldr	r3, [pc, #64]	; (eb88 <mayfly_enable+0x48>)
    eb46:	270c      	movs	r7, #12
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    eb48:	434c      	muls	r4, r1
    eb4a:	fb07 4400 	mla	r4, r7, r0, r4
{
    eb4e:	4605      	mov	r5, r0
    eb50:	460e      	mov	r6, r1
		if (mft[callee_id][caller_id].enable_req ==
    eb52:	4423      	add	r3, r4
	if (enable) {
    eb54:	b152      	cbz	r2, eb6c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    eb56:	7a59      	ldrb	r1, [r3, #9]
    eb58:	7a18      	ldrb	r0, [r3, #8]
    eb5a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    eb5c:	bf04      	itt	eq
    eb5e:	3101      	addeq	r1, #1
    eb60:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    eb62:	4628      	mov	r0, r5
    eb64:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    eb66:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    eb68:	f008 bba4 	b.w	172b4 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    eb6c:	7a9c      	ldrb	r4, [r3, #10]
    eb6e:	7ada      	ldrb	r2, [r3, #11]
    eb70:	42a2      	cmp	r2, r4
    eb72:	d107      	bne.n	eb84 <mayfly_enable+0x44>
			mft[callee_id][caller_id].disable_req++;
    eb74:	3201      	adds	r2, #1
    eb76:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    eb78:	4b04      	ldr	r3, [pc, #16]	; (eb8c <mayfly_enable+0x4c>)
    eb7a:	2201      	movs	r2, #1
    eb7c:	545a      	strb	r2, [r3, r1]
}
    eb7e:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    eb80:	f008 bbda 	b.w	17338 <mayfly_pend>
}
    eb84:	bcf0      	pop	{r4, r5, r6, r7}
    eb86:	4770      	bx	lr
    eb88:	200007ac 	.word	0x200007ac
    eb8c:	2000a543 	.word	0x2000a543

0000eb90 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    eb90:	b570      	push	{r4, r5, r6, lr}
    eb92:	4606      	mov	r6, r0
    eb94:	460d      	mov	r5, r1
    eb96:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    eb98:	b1a2      	cbz	r2, ebc4 <mayfly_enqueue+0x34>
    eb9a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    eb9c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    eb9e:	7820      	ldrb	r0, [r4, #0]
    eba0:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    eba2:	f010 0003 	ands.w	r0, r0, #3
    eba6:	d02c      	beq.n	ec02 <mayfly_enqueue+0x72>
		if (chain) {
    eba8:	b31b      	cbz	r3, ebf2 <mayfly_enqueue+0x62>
			if (state != 1U) {
    ebaa:	2801      	cmp	r0, #1
    ebac:	d028      	beq.n	ec00 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    ebae:	3201      	adds	r2, #1
    ebb0:	b2d2      	uxtb	r2, r2
    ebb2:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    ebb4:	4b1c      	ldr	r3, [pc, #112]	; (ec28 <mayfly_enqueue+0x98>)
    ebb6:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    ebb8:	4629      	mov	r1, r5
    ebba:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    ebbc:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    ebbe:	f008 fbbb 	bl	17338 <mayfly_pend>
    ebc2:	e01c      	b.n	ebfe <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ebc4:	f013 fce0 	bl	22588 <mayfly_prio_is_equal>
    ebc8:	2800      	cmp	r0, #0
    ebca:	d0e6      	beq.n	eb9a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    ebcc:	4629      	mov	r1, r5
    ebce:	4630      	mov	r0, r6
    ebd0:	f008 fb90 	bl	172f4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ebd4:	2800      	cmp	r0, #0
    ebd6:	d0e0      	beq.n	eb9a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    ebd8:	2330      	movs	r3, #48	; 0x30
    ebda:	220c      	movs	r2, #12
    ebdc:	436b      	muls	r3, r5
    ebde:	fb02 3306 	mla	r3, r2, r6, r3
    ebe2:	4a12      	ldr	r2, [pc, #72]	; (ec2c <mayfly_enqueue+0x9c>)
    ebe4:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    ebe6:	7a93      	ldrb	r3, [r2, #10]
    ebe8:	7ad2      	ldrb	r2, [r2, #11]
    ebea:	1a9b      	subs	r3, r3, r2
    ebec:	bf18      	it	ne
    ebee:	2301      	movne	r3, #1
    ebf0:	e7d4      	b.n	eb9c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    ebf2:	3202      	adds	r2, #2
    ebf4:	b2d2      	uxtb	r2, r2
    ebf6:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    ebf8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    ebfc:	4798      	blx	r3

	return 0;
    ebfe:	2000      	movs	r0, #0
}
    ec00:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    ec02:	2b00      	cmp	r3, #0
    ec04:	d0f8      	beq.n	ebf8 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    ec06:	3201      	adds	r2, #1
    ec08:	b2d2      	uxtb	r2, r2
    ec0a:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ec0c:	2304      	movs	r3, #4
    ec0e:	2230      	movs	r2, #48	; 0x30
    ec10:	fb12 3205 	smlabb	r2, r2, r5, r3
    ec14:	230c      	movs	r3, #12
    ec16:	fb13 2306 	smlabb	r3, r3, r6, r2
    ec1a:	4a04      	ldr	r2, [pc, #16]	; (ec2c <mayfly_enqueue+0x9c>)
    ec1c:	6860      	ldr	r0, [r4, #4]
    ec1e:	441a      	add	r2, r3
    ec20:	4621      	mov	r1, r4
    ec22:	f012 fe75 	bl	21910 <memq_enqueue>
    ec26:	e7c5      	b.n	ebb4 <mayfly_enqueue+0x24>
    ec28:	2000a543 	.word	0x2000a543
    ec2c:	200007ac 	.word	0x200007ac

0000ec30 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
    ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    ec34:	4b57      	ldr	r3, [pc, #348]	; (ed94 <mayfly_run+0x164>)
    ec36:	5c1a      	ldrb	r2, [r3, r0]
{
    ec38:	b089      	sub	sp, #36	; 0x24
    ec3a:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
    ec3c:	2a00      	cmp	r2, #0
    ec3e:	f000 80a2 	beq.w	ed86 <mayfly_run+0x156>
		return;
	}
	mfp[callee_id] = 0U;
    ec42:	2600      	movs	r6, #0
    ec44:	541e      	strb	r6, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    ec46:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ec4a:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ec4c:	f8df b148 	ldr.w	fp, [pc, #328]	; ed98 <mayfly_run+0x168>
    ec50:	9304      	str	r3, [sp, #16]
    ec52:	2404      	movs	r4, #4
    ec54:	233c      	movs	r3, #60	; 0x3c
    ec56:	fb13 4300 	smlabb	r3, r3, r0, r4
    ec5a:	445b      	add	r3, fp
    ec5c:	9303      	str	r3, [sp, #12]
	u8_t disable = 0U;
    ec5e:	9600      	str	r6, [sp, #0]
    ec60:	46d9      	mov	r9, fp
	while (caller_id--) {
    ec62:	3c01      	subs	r4, #1
    ec64:	b2e4      	uxtb	r4, r4
    ec66:	2cff      	cmp	r4, #255	; 0xff
    ec68:	d10c      	bne.n	ec84 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    ec6a:	9b00      	ldr	r3, [sp, #0]
    ec6c:	2b00      	cmp	r3, #0
    ec6e:	f000 808a 	beq.w	ed86 <mayfly_run+0x156>
    ec72:	2e00      	cmp	r6, #0
    ec74:	f040 8087 	bne.w	ed86 <mayfly_run+0x156>
		mayfly_enable_cb(callee_id, callee_id, 0);
    ec78:	4632      	mov	r2, r6
    ec7a:	4629      	mov	r1, r5
    ec7c:	4628      	mov	r0, r5
    ec7e:	f008 fb19 	bl	172b4 <mayfly_enable_cb>
    ec82:	e080      	b.n	ed86 <mayfly_run+0x156>
		struct mayfly *m = 0;
    ec84:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    ec86:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    ec88:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    ec8a:	4367      	muls	r7, r4
    ec8c:	2330      	movs	r3, #48	; 0x30
    ec8e:	fb03 7305 	mla	r3, r3, r5, r7
    ec92:	eb09 0103 	add.w	r1, r9, r3
    ec96:	aa07      	add	r2, sp, #28
    ec98:	f859 0003 	ldr.w	r0, [r9, r3]
    ec9c:	6849      	ldr	r1, [r1, #4]
    ec9e:	f012 fe3e 	bl	2191e <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    eca2:	9a04      	ldr	r2, [sp, #16]
    eca4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    eca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ecac:	444b      	add	r3, r9
    ecae:	e9cd 7301 	strd	r7, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
    ecb2:	4682      	mov	sl, r0
		while (link) {
    ecb4:	f1ba 0f00 	cmp.w	sl, #0
    ecb8:	d047      	beq.n	ed4a <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
    ecba:	9b07      	ldr	r3, [sp, #28]
    ecbc:	f893 8000 	ldrb.w	r8, [r3]
    ecc0:	785a      	ldrb	r2, [r3, #1]
    ecc2:	eba8 0802 	sub.w	r8, r8, r2
    ecc6:	f008 0803 	and.w	r8, r8, #3
			if (state == 1U) {
    ecca:	f1b8 0f01 	cmp.w	r8, #1
    ecce:	d104      	bne.n	ecda <mayfly_run+0xaa>
				m->_ack--;
    ecd0:	3a01      	subs	r2, #1
    ecd2:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    ecd4:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    ecd8:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    ecda:	9f07      	ldr	r7, [sp, #28]
	req = m->_req;
    ecdc:	783b      	ldrb	r3, [r7, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    ecde:	787a      	ldrb	r2, [r7, #1]
	req = m->_req;
    ece0:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1U) {
    ece2:	1a9a      	subs	r2, r3, r2
    ece4:	f002 0203 	and.w	r2, r2, #3
    ece8:	2a01      	cmp	r2, #1
    ecea:	9305      	str	r3, [sp, #20]
    ecec:	d01b      	beq.n	ed26 <mayfly_run+0xf6>
		memq_dequeue(mft[callee_id][caller_id].tail,
    ecee:	9b01      	ldr	r3, [sp, #4]
    ecf0:	9902      	ldr	r1, [sp, #8]
    ecf2:	2030      	movs	r0, #48	; 0x30
    ecf4:	fb00 3005 	mla	r0, r0, r5, r3
    ecf8:	4b27      	ldr	r3, [pc, #156]	; (ed98 <mayfly_run+0x168>)
    ecfa:	4418      	add	r0, r3
    ecfc:	2200      	movs	r2, #0
    ecfe:	6840      	ldr	r0, [r0, #4]
    ed00:	f012 fe15 	bl	2192e <memq_dequeue>
		m->_ack = req;
    ed04:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
    ed06:	787a      	ldrb	r2, [r7, #1]
		m->_ack = req;
    ed08:	707b      	strb	r3, [r7, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    ed0a:	783b      	ldrb	r3, [r7, #0]
		m->_link = link;
    ed0c:	f8c7 a004 	str.w	sl, [r7, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    ed10:	1a9b      	subs	r3, r3, r2
    ed12:	f003 0303 	and.w	r3, r3, #3
    ed16:	2b01      	cmp	r3, #1
    ed18:	d105      	bne.n	ed26 <mayfly_run+0xf6>
			m->_ack = ack;
    ed1a:	707a      	strb	r2, [r7, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ed1c:	4639      	mov	r1, r7
    ed1e:	9a03      	ldr	r2, [sp, #12]
    ed20:	4650      	mov	r0, sl
    ed22:	f012 fdf5 	bl	21910 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    ed26:	9a01      	ldr	r2, [sp, #4]
    ed28:	2330      	movs	r3, #48	; 0x30
    ed2a:	fb03 2305 	mla	r3, r3, r5, r2
    ed2e:	eb09 0103 	add.w	r1, r9, r3
    ed32:	aa07      	add	r2, sp, #28
    ed34:	6849      	ldr	r1, [r1, #4]
    ed36:	f859 0003 	ldr.w	r0, [r9, r3]
    ed3a:	f012 fdf0 	bl	2191e <memq_peek>
			if (state == 1U) {
    ed3e:	f1b8 0f01 	cmp.w	r8, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    ed42:	4682      	mov	sl, r0
			if (state == 1U) {
    ed44:	d1b6      	bne.n	ecb4 <mayfly_run+0x84>
				if (caller_id || link) {
    ed46:	b9bc      	cbnz	r4, ed78 <mayfly_run+0x148>
    ed48:	b9b0      	cbnz	r0, ed78 <mayfly_run+0x148>
		if (mft[callee_id][caller_id].disable_req !=
    ed4a:	2230      	movs	r2, #48	; 0x30
    ed4c:	4912      	ldr	r1, [pc, #72]	; (ed98 <mayfly_run+0x168>)
    ed4e:	230c      	movs	r3, #12
    ed50:	436a      	muls	r2, r5
    ed52:	fb03 2204 	mla	r2, r3, r4, r2
    ed56:	440a      	add	r2, r1
    ed58:	7a91      	ldrb	r1, [r2, #10]
    ed5a:	7ad0      	ldrb	r0, [r2, #11]
    ed5c:	4288      	cmp	r0, r1
    ed5e:	d115      	bne.n	ed8c <mayfly_run+0x15c>
		if (mft[callee_id][caller_id].enable_req !=
    ed60:	2230      	movs	r2, #48	; 0x30
    ed62:	436a      	muls	r2, r5
    ed64:	fb03 2304 	mla	r3, r3, r4, r2
    ed68:	445b      	add	r3, fp
    ed6a:	7a1a      	ldrb	r2, [r3, #8]
    ed6c:	7a59      	ldrb	r1, [r3, #9]
    ed6e:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    ed70:	bf1c      	itt	ne
    ed72:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    ed74:	2601      	movne	r6, #1
    ed76:	e774      	b.n	ec62 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
    ed78:	4b06      	ldr	r3, [pc, #24]	; (ed94 <mayfly_run+0x164>)
    ed7a:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
    ed7c:	4629      	mov	r1, r5
    ed7e:	4628      	mov	r0, r5
					mfp[callee_id] = 1U;
    ed80:	555a      	strb	r2, [r3, r5]
					mayfly_pend(callee_id, callee_id);
    ed82:	f008 fad9 	bl	17338 <mayfly_pend>
	}
}
    ed86:	b009      	add	sp, #36	; 0x24
    ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    ed8c:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
    ed8e:	2201      	movs	r2, #1
    ed90:	9200      	str	r2, [sp, #0]
    ed92:	e7e5      	b.n	ed60 <mayfly_run+0x130>
    ed94:	2000a543 	.word	0x2000a543
    ed98:	200007ac 	.word	0x200007ac

0000ed9c <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    ed9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    eda0:	7fc2      	ldrb	r2, [r0, #31]
{
    eda2:	b08f      	sub	sp, #60	; 0x3c
    eda4:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
    eda6:	2a00      	cmp	r2, #0
    eda8:	f040 830c 	bne.w	f3c4 <ticker_job+0x628>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    edac:	6943      	ldr	r3, [r0, #20]
    edae:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
    edb0:	2101      	movs	r1, #1

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    edb2:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    edb4:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    edb6:	7ac0      	ldrb	r0, [r0, #11]
    edb8:	4298      	cmp	r0, r3
    edba:	d077      	beq.n	eeac <ticker_job+0x110>
	u8_t idx = *ticks_elapsed_index + 1;
    edbc:	440b      	add	r3, r1
    edbe:	b2db      	uxtb	r3, r3
		idx = 0U;
    edc0:	2b02      	cmp	r3, #2
    edc2:	bf08      	it	eq
    edc4:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    edc6:	72a3      	strb	r3, [r4, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
    edc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
    edcc:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    edce:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    edd2:	9b04      	ldr	r3, [sp, #16]
    edd4:	4453      	add	r3, sl
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    edd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    edda:	6163      	str	r3, [r4, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    eddc:	7f63      	ldrb	r3, [r4, #29]
    edde:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
    ede0:	6823      	ldr	r3, [r4, #0]
    ede2:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
    ede4:	6863      	ldr	r3, [r4, #4]
    ede6:	930c      	str	r3, [sp, #48]	; 0x30
	count_user = instance->count_user;
    ede8:	7a63      	ldrb	r3, [r4, #9]
    edea:	9302      	str	r3, [sp, #8]
	pending = 0U;
    edec:	2300      	movs	r3, #0
    edee:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    edf0:	f04f 0bff 	mov.w	fp, #255	; 0xff
	while (count_user--) {
    edf4:	9b02      	ldr	r3, [sp, #8]
    edf6:	3b01      	subs	r3, #1
    edf8:	b2db      	uxtb	r3, r3
    edfa:	2bff      	cmp	r3, #255	; 0xff
    edfc:	9302      	str	r3, [sp, #8]
    edfe:	d158      	bne.n	eeb2 <ticker_job+0x116>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    ee00:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    ee02:	9a03      	ldr	r2, [sp, #12]
    ee04:	1a9b      	subs	r3, r3, r2
    ee06:	bf18      	it	ne
    ee08:	2301      	movne	r3, #1
    ee0a:	9302      	str	r3, [sp, #8]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    ee0c:	9b01      	ldr	r3, [sp, #4]
    ee0e:	b1cb      	cbz	r3, ee44 <ticker_job+0xa8>
    ee10:	f8d4 9000 	ldr.w	r9, [r4]
	ticks_expired = 0U;
    ee14:	f04f 0800 	mov.w	r8, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    ee18:	7f66      	ldrb	r6, [r4, #29]
    ee1a:	2eff      	cmp	r6, #255	; 0xff
    ee1c:	d00b      	beq.n	ee36 <ticker_job+0x9a>
		ticker = &node[id_expired];
    ee1e:	272c      	movs	r7, #44	; 0x2c
    ee20:	fb16 f707 	smulbb	r7, r6, r7
    ee24:	eb09 0507 	add.w	r5, r9, r7
		ticks_to_expire = ticker->ticks_to_expire;
    ee28:	68aa      	ldr	r2, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
    ee2a:	4552      	cmp	r2, sl
    ee2c:	f240 8105 	bls.w	f03a <ticker_job+0x29e>
			ticker->ticks_to_expire -= ticks_elapsed;
    ee30:	eba2 020a 	sub.w	r2, r2, sl
    ee34:	60aa      	str	r2, [r5, #8]
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1U;
    ee36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    ee3a:	9903      	ldr	r1, [sp, #12]
    ee3c:	42b1      	cmp	r1, r6
    ee3e:	bf18      	it	ne
    ee40:	4613      	movne	r3, r2
    ee42:	9302      	str	r3, [sp, #8]
	node = &instance->nodes[0];
    ee44:	6823      	ldr	r3, [r4, #0]
    ee46:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
    ee48:	6863      	ldr	r3, [r4, #4]
    ee4a:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
    ee4c:	7a63      	ldrb	r3, [r4, #9]
    ee4e:	9301      	str	r3, [sp, #4]
				ticker = &node[id_insert];
    ee50:	f04f 092c 	mov.w	r9, #44	; 0x2c
	while (count_user--) {
    ee54:	9b01      	ldr	r3, [sp, #4]
    ee56:	3b01      	subs	r3, #1
    ee58:	b2db      	uxtb	r3, r3
    ee5a:	2bff      	cmp	r3, #255	; 0xff
    ee5c:	9301      	str	r3, [sp, #4]
    ee5e:	f040 8137 	bne.w	f0d0 <ticker_job+0x334>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1U;
    ee62:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
	if (instance->ticker_id_head != ticker_id_old_head) {
    ee66:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    ee68:	428b      	cmp	r3, r1
    ee6a:	bf18      	it	ne
    ee6c:	2201      	movne	r2, #1
	}

	/* Process any list inquiries */
	if (!pending) {
    ee6e:	9b08      	ldr	r3, [sp, #32]
		flag_compare_update = 1U;
    ee70:	9202      	str	r2, [sp, #8]
	if (!pending) {
    ee72:	2b00      	cmp	r3, #0
    ee74:	f000 81d7 	beq.w	f226 <ticker_job+0x48a>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0U;
    ee78:	2300      	movs	r3, #0
    ee7a:	77a3      	strb	r3, [r4, #30]

	/* update compare if head changed */
	if (flag_compare_update) {
    ee7c:	9b02      	ldr	r3, [sp, #8]
    ee7e:	b13b      	cbz	r3, ee90 <ticker_job+0xf4>
	if (instance->ticker_id_head == TICKER_NULL) {
    ee80:	7f63      	ldrb	r3, [r4, #29]
    ee82:	2bff      	cmp	r3, #255	; 0xff
    ee84:	f040 823c 	bne.w	f300 <ticker_job+0x564>
		if (cntr_stop() == 0) {
    ee88:	f007 fdd4 	bl	16a34 <cntr_stop>
    ee8c:	b900      	cbnz	r0, ee90 <ticker_job+0xf4>
			instance->ticks_slot_previous = 0U;
    ee8e:	61a0      	str	r0, [r4, #24]
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    ee90:	7fe3      	ldrb	r3, [r4, #31]
    ee92:	2b00      	cmp	r3, #0
    ee94:	f000 8296 	beq.w	f3c4 <ticker_job+0x628>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ee98:	6a65      	ldr	r5, [r4, #36]	; 0x24
    ee9a:	4623      	mov	r3, r4
    ee9c:	2201      	movs	r2, #1
    ee9e:	2103      	movs	r1, #3
    eea0:	2004      	movs	r0, #4
    eea2:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
    eea4:	b00f      	add	sp, #60	; 0x3c
    eea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    eeaa:	4760      	bx	ip
		flag_elapsed = 0U;
    eeac:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
    eeae:	4692      	mov	sl, r2
    eeb0:	e794      	b.n	eddc <ticker_job+0x40>
		user = &users[count_user];
    eeb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eeb4:	9a02      	ldr	r2, [sp, #8]
    eeb6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    eeba:	687b      	ldr	r3, [r7, #4]
    eebc:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    eebe:	78f9      	ldrb	r1, [r7, #3]
    eec0:	f897 8002 	ldrb.w	r8, [r7, #2]
    eec4:	4588      	cmp	r8, r1
    eec6:	d095      	beq.n	edf4 <ticker_job+0x58>
			user_op = &user_ops[user->middle];
    eec8:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    eeca:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    eecc:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    eed0:	0112      	lsls	r2, r2, #4
    eed2:	189e      	adds	r6, r3, r2
			middle = user->middle + 1;
    eed4:	f108 0301 	add.w	r3, r8, #1
    eed8:	b2db      	uxtb	r3, r3
				middle = 0U;
    eeda:	4298      	cmp	r0, r3
    eedc:	bf08      	it	eq
    eede:	2300      	moveq	r3, #0
			user->middle = middle;
    eee0:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    eee2:	9b06      	ldr	r3, [sp, #24]
    eee4:	5c9a      	ldrb	r2, [r3, r2]
    eee6:	2a04      	cmp	r2, #4
    eee8:	d9ea      	bls.n	eec0 <ticker_job+0x124>
			ticker = &node[user_op->id];
    eeea:	7873      	ldrb	r3, [r6, #1]
    eeec:	212c      	movs	r1, #44	; 0x2c
    eeee:	fb13 f101 	smulbb	r1, r3, r1
    eef2:	910b      	str	r1, [sp, #44]	; 0x2c
    eef4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eef6:	9905      	ldr	r1, [sp, #20]
    eef8:	180d      	adds	r5, r1, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    eefa:	2a06      	cmp	r2, #6
			state = (ticker->req - ticker->ack) & 0xff;
    eefc:	78a9      	ldrb	r1, [r5, #2]
    eefe:	f895 c001 	ldrb.w	ip, [r5, #1]
    ef02:	9107      	str	r1, [sp, #28]
    ef04:	ebac 0c01 	sub.w	ip, ip, r1
    ef08:	fa5f f18c 	uxtb.w	r1, ip
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    ef0c:	d80e      	bhi.n	ef2c <ticker_job+0x190>
    ef0e:	b169      	cbz	r1, ef2c <ticker_job+0x190>
			    (state == 0U) ||
    ef10:	2a05      	cmp	r2, #5
    ef12:	d110      	bne.n	ef36 <ticker_job+0x19a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    ef14:	6870      	ldr	r0, [r6, #4]
    ef16:	b970      	cbnz	r0, ef36 <ticker_job+0x19a>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    ef18:	68b0      	ldr	r0, [r6, #8]
    ef1a:	b960      	cbnz	r0, ef36 <ticker_job+0x19a>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    ef1c:	68f0      	ldr	r0, [r6, #12]
    ef1e:	b950      	cbnz	r0, ef36 <ticker_job+0x19a>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    ef20:	6930      	ldr	r0, [r6, #16]
    ef22:	b940      	cbnz	r0, ef36 <ticker_job+0x19a>
			     (user_op->params.update.lazy == 0U) &&
    ef24:	6970      	ldr	r0, [r6, #20]
    ef26:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    ef2a:	d104      	bne.n	ef36 <ticker_job+0x19a>
				ticker_job_op_cb(user_op,
    ef2c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    ef2e:	4630      	mov	r0, r6
    ef30:	f012 fd3d 	bl	219ae <ticker_job_op_cb>
    ef34:	e7c3      	b.n	eebe <ticker_job+0x122>
			if (state == 1U) {
    ef36:	2901      	cmp	r1, #1
    ef38:	d174      	bne.n	f024 <ticker_job+0x288>
	previous = instance->ticker_id_head;
    ef3a:	f894 c01d 	ldrb.w	ip, [r4, #29]
	node = &instance->nodes[0];
    ef3e:	6821      	ldr	r1, [r4, #0]
	previous = instance->ticker_id_head;
    ef40:	46e6      	mov	lr, ip
	total = 0U;
    ef42:	f04f 0800 	mov.w	r8, #0
	while (current != TICKER_NULL) {
    ef46:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    ef4a:	d146      	bne.n	efda <ticker_job+0x23e>
		return 0;
    ef4c:	f04f 0800 	mov.w	r8, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    ef50:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ef52:	f8c5 8008 	str.w	r8, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    ef56:	d151      	bne.n	effc <ticker_job+0x260>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    ef58:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
    ef5c:	f007 fd90 	bl	16a80 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ef60:	eba0 0109 	sub.w	r1, r0, r9
    ef64:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ef68:	4451      	add	r1, sl
	if (ticks_to_expire > ticks_elapsed) {
    ef6a:	4588      	cmp	r8, r1
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ef6c:	bf98      	it	ls
    ef6e:	696b      	ldrls	r3, [r5, #20]
	ticks_now = cntr_cnt_get();
    ef70:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ef72:	bf98      	it	ls
    ef74:	eba3 0808 	subls.w	r8, r3, r8
	if ((ticker->ticks_periodic != 0U) &&
    ef78:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ef7a:	bf97      	itett	ls
    ef7c:	4441      	addls	r1, r8
		ticks_to_expire -= ticks_elapsed;
    ef7e:	eba8 0801 	subhi.w	r8, r8, r1
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ef82:	6169      	strls	r1, [r5, #20]
		ticks_to_expire = 0U;
    ef84:	f04f 0800 	movls.w	r8, #0
	if ((ticker->ticks_periodic != 0U) &&
    ef88:	b128      	cbz	r0, ef96 <ticker_job+0x1fa>
	    (user_op->params.update.lazy != 0U)) {
    ef8a:	8ab3      	ldrh	r3, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
    ef8c:	b11b      	cbz	r3, ef96 <ticker_job+0x1fa>
		user_op->params.update.lazy--;
    ef8e:	3b01      	subs	r3, #1
    ef90:	b29b      	uxth	r3, r3
    ef92:	82b3      	strh	r3, [r6, #20]
		ticker->lazy_periodic = user_op->params.update.lazy;
    ef94:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    ef96:	6871      	ldr	r1, [r6, #4]
	ticker->ticks_to_expire_minus +=
    ef98:	696b      	ldr	r3, [r5, #20]
	ticker->ticks_to_expire = ticks_to_expire +
    ef9a:	4441      	add	r1, r8
    ef9c:	60a9      	str	r1, [r5, #8]
	ticker->ticks_to_expire_minus +=
    ef9e:	68b1      	ldr	r1, [r6, #8]
    efa0:	440b      	add	r3, r1
    efa2:	616b      	str	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    efa4:	4649      	mov	r1, r9
    efa6:	4628      	mov	r0, r5
    efa8:	f012 fce3 	bl	21972 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    efac:	68f2      	ldr	r2, [r6, #12]
    efae:	69ab      	ldr	r3, [r5, #24]
    efb0:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    efb2:	6932      	ldr	r2, [r6, #16]
    efb4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    efb6:	bf8c      	ite	hi
    efb8:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    efba:	2300      	movls	r3, #0
    efbc:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    efbe:	7db3      	ldrb	r3, [r6, #22]
    efc0:	b103      	cbz	r3, efc4 <ticker_job+0x228>
		ticker->force = user_op->params.update.force;
    efc2:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
    efc4:	9b05      	ldr	r3, [sp, #20]
    efc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    efc8:	f803 b002 	strb.w	fp, [r3, r2]
		ticker->req++;
    efcc:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    efce:	f896 b001 	ldrb.w	fp, [r6, #1]
		ticker->req++;
    efd2:	3301      	adds	r3, #1
    efd4:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    efd6:	2100      	movs	r1, #0
    efd8:	e7a9      	b.n	ef2e <ticker_job+0x192>
		ticker_current = &node[current];
    efda:	202c      	movs	r0, #44	; 0x2c
    efdc:	fb1c f900 	smulbb	r9, ip, r0
    efe0:	eb01 0009 	add.w	r0, r1, r9
    efe4:	9009      	str	r0, [sp, #36]	; 0x24
		if (current == id) {
    efe6:	6880      	ldr	r0, [r0, #8]
    efe8:	900a      	str	r0, [sp, #40]	; 0x28
    efea:	4563      	cmp	r3, ip
    efec:	4480      	add	r8, r0
    efee:	f811 9009 	ldrb.w	r9, [r1, r9]
    eff2:	f000 81cd 	beq.w	f390 <ticker_job+0x5f4>
    eff6:	46e6      	mov	lr, ip
    eff8:	46cc      	mov	ip, r9
    effa:	e7a4      	b.n	ef46 <ticker_job+0x1aa>
		ticker->req = ticker->ack;
    effc:	9a07      	ldr	r2, [sp, #28]
    effe:	706a      	strb	r2, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    f000:	7f22      	ldrb	r2, [r4, #28]
    f002:	429a      	cmp	r2, r3
    f004:	d1e7      	bne.n	efd6 <ticker_job+0x23a>
			u32_t ticks_now = cntr_cnt_get();
    f006:	f007 fd3b 	bl	16a80 <cntr_cnt_get>
			instance->ticker_id_slot_previous = TICKER_NULL;
    f00a:	23ff      	movs	r3, #255	; 0xff
    f00c:	7723      	strb	r3, [r4, #28]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f00e:	6963      	ldr	r3, [r4, #20]
    f010:	1ac0      	subs	r0, r0, r3
    f012:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_used = ticks_elapsed +
    f016:	4450      	add	r0, sl
			instance->ticks_slot_previous =	MIN(ticker->ticks_slot,
    f018:	69ab      	ldr	r3, [r5, #24]
    f01a:	4298      	cmp	r0, r3
    f01c:	bf94      	ite	ls
    f01e:	61a0      	strls	r0, [r4, #24]
    f020:	61a3      	strhi	r3, [r4, #24]
    f022:	e7d8      	b.n	efd6 <ticker_job+0x23a>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    f024:	2104      	movs	r1, #4
    f026:	4623      	mov	r3, r4
    f028:	6a65      	ldr	r5, [r4, #36]	; 0x24
    f02a:	2201      	movs	r2, #1
    f02c:	4608      	mov	r0, r1
    f02e:	47a8      	blx	r5
				pending = 1U;
    f030:	2301      	movs	r3, #1
				user->middle = prev;
    f032:	f887 8002 	strb.w	r8, [r7, #2]
				pending = 1U;
    f036:	9308      	str	r3, [sp, #32]
    f038:	e6dc      	b.n	edf4 <ticker_job+0x58>
		if (ticker->lazy_current != 0U) {
    f03a:	8be8      	ldrh	r0, [r5, #30]
		ticks_elapsed -= ticks_to_expire;
    f03c:	ebaa 0a02 	sub.w	sl, sl, r2
		ticks_expired += ticks_to_expire;
    f040:	4490      	add	r8, r2
		if (ticker->lazy_current != 0U) {
    f042:	2800      	cmp	r0, #0
    f044:	d032      	beq.n	f0ac <ticker_job+0x310>
			instance->ticker_id_slot_previous = TICKER_NULL;
    f046:	22ff      	movs	r2, #255	; 0xff
    f048:	7722      	strb	r2, [r4, #28]
			instance->ticks_slot_previous = 0U;
    f04a:	2200      	movs	r2, #0
				instance->ticks_slot_previous =
    f04c:	61a2      	str	r2, [r4, #24]
		ticker->ticks_to_expire = 0U;
    f04e:	f04f 0c00 	mov.w	ip, #0
    f052:	f8c5 c008 	str.w	ip, [r5, #8]
		instance->ticker_id_head = ticker->next;
    f056:	f819 1007 	ldrb.w	r1, [r9, r7]
    f05a:	7761      	strb	r1, [r4, #29]
		if (ticker->ticks_periodic != 0U) {
    f05c:	686b      	ldr	r3, [r5, #4]
    f05e:	2b00      	cmp	r3, #0
    f060:	d032      	beq.n	f0c8 <ticker_job+0x32c>
	ticker->remainder_current += ticker->remainder_periodic;
    f062:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
    f066:	4401      	add	r1, r0
	if ((ticker->remainder_current < BIT(31)) &&
    f068:	48a3      	ldr	r0, [pc, #652]	; (f2f8 <ticker_job+0x55c>)
    f06a:	4aa4      	ldr	r2, [pc, #656]	; (f2fc <ticker_job+0x560>)
			ticker->ticks_to_expire  = ticker->ticks_periodic;
    f06c:	60ab      	str	r3, [r5, #8]
	if ((ticker->remainder_current < BIT(31)) &&
    f06e:	1808      	adds	r0, r1, r0
    f070:	4290      	cmp	r0, r2
		return 1;
    f072:	bf95      	itete	ls
    f074:	9a01      	ldrls	r2, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    f076:	6269      	strhi	r1, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f078:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
	return 0;
    f07c:	4662      	movhi	r2, ip
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f07e:	bf98      	it	ls
    f080:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker_remainder_inc(ticker);
    f084:	441a      	add	r2, r3
			ticks_to_expire_prep(ticker, instance->ticks_current,
    f086:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire += ticker_remainder_inc(ticker);
    f088:	60aa      	str	r2, [r5, #8]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f08a:	bf9c      	itt	ls
    f08c:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
    f090:	6269      	strls	r1, [r5, #36]	; 0x24
			ticks_to_expire_prep(ticker, instance->ticks_current,
    f092:	eb03 0208 	add.w	r2, r3, r8
    f096:	6961      	ldr	r1, [r4, #20]
    f098:	4628      	mov	r0, r5
    f09a:	f012 fc6a 	bl	21972 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    f09e:	f809 b007 	strb.w	fp, [r9, r7]
			ticker->req++;
    f0a2:	786a      	ldrb	r2, [r5, #1]
    f0a4:	3201      	adds	r2, #1
    f0a6:	706a      	strb	r2, [r5, #1]
			ticker->req = ticker->ack;
    f0a8:	46b3      	mov	fp, r6
    f0aa:	e6b5      	b.n	ee18 <ticker_job+0x7c>
			if (instance->ticks_slot_previous > ticks_to_expire) {
    f0ac:	69a1      	ldr	r1, [r4, #24]
    f0ae:	428a      	cmp	r2, r1
				instance->ticker_id_slot_previous = TICKER_NULL;
    f0b0:	bf2b      	itete	cs
    f0b2:	22ff      	movcs	r2, #255	; 0xff
				instance->ticks_slot_previous -=
    f0b4:	1a8a      	subcc	r2, r1, r2
				instance->ticker_id_slot_previous = TICKER_NULL;
    f0b6:	7722      	strbcs	r2, [r4, #28]
				instance->ticks_slot_previous -=
    f0b8:	61a2      	strcc	r2, [r4, #24]
			if (ticker->ticks_slot != 0U) {
    f0ba:	69aa      	ldr	r2, [r5, #24]
				instance->ticks_slot_previous = 0U;
    f0bc:	bf28      	it	cs
    f0be:	61a0      	strcs	r0, [r4, #24]
			if (ticker->ticks_slot != 0U) {
    f0c0:	2a00      	cmp	r2, #0
    f0c2:	d0c4      	beq.n	f04e <ticker_job+0x2b2>
				instance->ticker_id_slot_previous = id_expired;
    f0c4:	7726      	strb	r6, [r4, #28]
    f0c6:	e7c1      	b.n	f04c <ticker_job+0x2b0>
			ticker->req = ticker->ack;
    f0c8:	78aa      	ldrb	r2, [r5, #2]
    f0ca:	706a      	strb	r2, [r5, #1]
    f0cc:	465e      	mov	r6, fp
    f0ce:	e7eb      	b.n	f0a8 <ticker_job+0x30c>
		user = &users[count_user];
    f0d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0d2:	9a01      	ldr	r2, [sp, #4]
    f0d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    f0d8:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    f0da:	685b      	ldr	r3, [r3, #4]
    f0dc:	9307      	str	r3, [sp, #28]
		user_ops_first = user->first;
    f0de:	9b04      	ldr	r3, [sp, #16]
    f0e0:	785f      	ldrb	r7, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    f0e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    f0e6:	d05e      	beq.n	f1a6 <ticker_job+0x40a>
				ticker = &node[id_insert];
    f0e8:	fb1b f309 	smulbb	r3, fp, r9
    f0ec:	9a05      	ldr	r2, [sp, #20]
				insert_head = ticker->next;
    f0ee:	46da      	mov	sl, fp
    f0f0:	f812 b003 	ldrb.w	fp, [r2, r3]
				ticker = &node[id_insert];
    f0f4:	18d5      	adds	r5, r2, r3
				user_op = NULL;
    f0f6:	2600      	movs	r6, #0
	ticker->next = TICKER_NULL;
    f0f8:	22ff      	movs	r2, #255	; 0xff
    f0fa:	702a      	strb	r2, [r5, #0]
	node = &instance->nodes[0];
    f0fc:	6820      	ldr	r0, [r4, #0]
	previous = TICKER_NULL;
    f0fe:	9206      	str	r2, [sp, #24]
	ticker_new = &node[id];
    f100:	fb1a f309 	smulbb	r3, sl, r9
    f104:	eb00 0e03 	add.w	lr, r0, r3
    f108:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_to_expire = ticker_new->ticks_to_expire;
    f10a:	f8de 1008 	ldr.w	r1, [lr, #8]
	current = instance->ticker_id_head;
    f10e:	7f63      	ldrb	r3, [r4, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f110:	2bff      	cmp	r3, #255	; 0xff
    f112:	d008      	beq.n	f126 <ticker_job+0x38a>
		(ticker_current = &node[current])->ticks_to_expire))) {
    f114:	fb13 f209 	smulbb	r2, r3, r9
    f118:	920a      	str	r2, [sp, #40]	; 0x28
    f11a:	1882      	adds	r2, r0, r2
    f11c:	4690      	mov	r8, r2
		(ticks_to_expire_current =
    f11e:	f8d2 c008 	ldr.w	ip, [r2, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f122:	4561      	cmp	r1, ip
    f124:	d26b      	bcs.n	f1fe <ticker_job+0x462>
	ticker_new->next = current;
    f126:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ticker_new->ticks_to_expire = ticks_to_expire;
    f128:	f8ce 1008 	str.w	r1, [lr, #8]
	ticker_new->next = current;
    f12c:	5483      	strb	r3, [r0, r2]
	if (previous == TICKER_NULL) {
    f12e:	9a06      	ldr	r2, [sp, #24]
    f130:	2aff      	cmp	r2, #255	; 0xff
		node[previous].next = id;
    f132:	bf17      	itett	ne
    f134:	9a06      	ldrne	r2, [sp, #24]
		instance->ticker_id_head = id;
    f136:	f884 a01d 	strbeq.w	sl, [r4, #29]
		node[previous].next = id;
    f13a:	fb12 f209 	smulbbne	r2, r2, r9
    f13e:	f800 a002 	strbne.w	sl, [r0, r2]
	if (current != TICKER_NULL) {
    f142:	2bff      	cmp	r3, #255	; 0xff
		node[current].ticks_to_expire -= ticks_to_expire;
    f144:	bf1f      	itttt	ne
    f146:	fb03 0309 	mlane	r3, r3, r9, r0
    f14a:	689a      	ldrne	r2, [r3, #8]
    f14c:	1a51      	subne	r1, r2, r1
    f14e:	6099      	strne	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    f150:	78ab      	ldrb	r3, [r5, #2]
    f152:	3301      	adds	r3, #1
    f154:	706b      	strb	r3, [r5, #1]
			if (user_op) {
    f156:	2e00      	cmp	r6, #0
    f158:	d0c3      	beq.n	f0e2 <ticker_job+0x346>
				ticker_job_op_cb(user_op, status);
    f15a:	2100      	movs	r1, #0
    f15c:	4630      	mov	r0, r6
    f15e:	f012 fc26 	bl	219ae <ticker_job_op_cb>
    f162:	e7be      	b.n	f0e2 <ticker_job+0x346>
				user_op = &user_ops[user_ops_first];
    f164:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    f168:	9a07      	ldr	r2, [sp, #28]
    f16a:	011b      	lsls	r3, r3, #4
    f16c:	18d6      	adds	r6, r2, r3
				if (first == user->count_user_op) {
    f16e:	9a04      	ldr	r2, [sp, #16]
				first = user_ops_first + 1;
    f170:	3701      	adds	r7, #1
				if (first == user->count_user_op) {
    f172:	7812      	ldrb	r2, [r2, #0]
				first = user_ops_first + 1;
    f174:	b2ff      	uxtb	r7, r7
					first = 0U;
    f176:	42ba      	cmp	r2, r7
    f178:	bf08      	it	eq
    f17a:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f17c:	9a07      	ldr	r2, [sp, #28]
    f17e:	5cd3      	ldrb	r3, [r2, r3]
    f180:	2b04      	cmp	r3, #4
    f182:	d110      	bne.n	f1a6 <ticker_job+0x40a>
				ticker = &node[id_insert];
    f184:	9b05      	ldr	r3, [sp, #20]
				id_insert = user_op->id;
    f186:	f896 a001 	ldrb.w	sl, [r6, #1]
				ticker = &node[id_insert];
    f18a:	fb0a 3509 	mla	r5, sl, r9, r3
				if (((ticker->req -
    f18e:	f895 8001 	ldrb.w	r8, [r5, #1]
				      ticker->ack) & 0xff) != 0U) {
    f192:	78ab      	ldrb	r3, [r5, #2]
				if (((ticker->req -
    f194:	eba8 0803 	sub.w	r8, r8, r3
    f198:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    f19c:	d008      	beq.n	f1b0 <ticker_job+0x414>
					ticker_job_op_cb(user_op,
    f19e:	2101      	movs	r1, #1
    f1a0:	4630      	mov	r0, r6
    f1a2:	f012 fc04 	bl	219ae <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    f1a6:	9b04      	ldr	r3, [sp, #16]
    f1a8:	789b      	ldrb	r3, [r3, #2]
    f1aa:	42bb      	cmp	r3, r7
    f1ac:	d1da      	bne.n	f164 <ticker_job+0x3c8>
    f1ae:	e651      	b.n	ee54 <ticker_job+0xb8>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    f1b0:	8ab3      	ldrh	r3, [r6, #20]
				ticker_job_op_start(ticker, user_op,
    f1b2:	6961      	ldr	r1, [r4, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    f1b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f1b8:	4293      	cmp	r3, r2
    f1ba:	bf0c      	ite	eq
    f1bc:	2201      	moveq	r2, #1
    f1be:	2200      	movne	r2, #0
    f1c0:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    f1c4:	68f2      	ldr	r2, [r6, #12]
    f1c6:	606a      	str	r2, [r5, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f1c8:	bf08      	it	eq
    f1ca:	2300      	moveq	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
    f1cc:	6932      	ldr	r2, [r6, #16]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f1ce:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_slot = start->ticks_slot;
    f1d0:	69b3      	ldr	r3, [r6, #24]
    f1d2:	61ab      	str	r3, [r5, #24]
	ticker->timeout_func = start->fp_timeout_func;
    f1d4:	69f3      	ldr	r3, [r6, #28]
    f1d6:	60eb      	str	r3, [r5, #12]
	ticker->context = start->context;
    f1d8:	6a33      	ldr	r3, [r6, #32]
    f1da:	612b      	str	r3, [r5, #16]
	ticker->ticks_to_expire = start->ticks_first;
    f1dc:	68b3      	ldr	r3, [r6, #8]
	ticker->remainder_periodic = start->remainder_periodic;
    f1de:	622a      	str	r2, [r5, #32]
	ticker->ticks_to_expire = start->ticks_first;
    f1e0:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0U;
    f1e2:	f8c5 8014 	str.w	r8, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    f1e6:	6872      	ldr	r2, [r6, #4]
    f1e8:	4628      	mov	r0, r5
    f1ea:	f012 fbc2 	bl	21972 <ticks_to_expire_prep>
	ticker->force = 1U;
    f1ee:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    f1f2:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
	ticker->lazy_current = 0U;
    f1f6:	f8a5 801e 	strh.w	r8, [r5, #30]
	ticker->force = 1U;
    f1fa:	70eb      	strb	r3, [r5, #3]
    f1fc:	e77c      	b.n	f0f8 <ticker_job+0x35c>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    f1fe:	ebb1 010c 	subs.w	r1, r1, ip
    f202:	d10a      	bne.n	f21a <ticker_job+0x47e>
    f204:	f8be 201e 	ldrh.w	r2, [lr, #30]
    f208:	920c      	str	r2, [sp, #48]	; 0x30
    f20a:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    f20e:	920d      	str	r2, [sp, #52]	; 0x34
    f210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f212:	4690      	mov	r8, r2
    f214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f216:	4590      	cmp	r8, r2
    f218:	d803      	bhi.n	f222 <ticker_job+0x486>
		current = ticker_current->next;
    f21a:	9306      	str	r3, [sp, #24]
    f21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f21e:	5cc3      	ldrb	r3, [r0, r3]
    f220:	e776      	b.n	f110 <ticker_job+0x374>
		(ticks_to_expire_current =
    f222:	4661      	mov	r1, ip
    f224:	e77f      	b.n	f126 <ticker_job+0x38a>
	users = &instance->users[0];
    f226:	6863      	ldr	r3, [r4, #4]
	count_user = instance->count_user;
    f228:	7a65      	ldrb	r5, [r4, #9]
	users = &instance->users[0];
    f22a:	9301      	str	r3, [sp, #4]
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    f22c:	272c      	movs	r7, #44	; 0x2c
	while (count_user--) {
    f22e:	3d01      	subs	r5, #1
    f230:	b2ed      	uxtb	r5, r5
    f232:	2dff      	cmp	r5, #255	; 0xff
    f234:	f43f ae20 	beq.w	ee78 <ticker_job+0xdc>
		user = &users[count_user];
    f238:	9b01      	ldr	r3, [sp, #4]
    f23a:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
    f23e:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
    f242:	7873      	ldrb	r3, [r6, #1]
    f244:	78f2      	ldrb	r2, [r6, #3]
    f246:	429a      	cmp	r2, r3
    f248:	d0f1      	beq.n	f22e <ticker_job+0x492>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    f24a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f24e:	011a      	lsls	r2, r3, #4
    f250:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
    f254:	f818 2002 	ldrb.w	r2, [r8, r2]
    f258:	2a02      	cmp	r2, #2
    f25a:	d013      	beq.n	f284 <ticker_job+0x4e8>
    f25c:	2a03      	cmp	r2, #3
    f25e:	d03e      	beq.n	f2de <ticker_job+0x542>
    f260:	2a01      	cmp	r2, #1
    f262:	d106      	bne.n	f272 <ticker_job+0x4d6>
			uop->status = TICKER_STATUS_SUCCESS;
    f264:	2200      	movs	r2, #0
			uop->status = TICKER_STATUS_FAILURE;
    f266:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
    f268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
    f26a:	b112      	cbz	r2, f272 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
    f26c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    f26e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    f270:	4790      	blx	r2
			first = user->first + 1;
    f272:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
    f274:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
    f276:	3301      	adds	r3, #1
    f278:	b2db      	uxtb	r3, r3
				first = 0U;
    f27a:	429a      	cmp	r2, r3
    f27c:	bf08      	it	eq
    f27e:	2300      	moveq	r3, #0
			user->first = first;
    f280:	7073      	strb	r3, [r6, #1]
    f282:	e7de      	b.n	f242 <ticker_job+0x4a6>
		ticker_by_next_slot_get(instance,
    f284:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    f288:	f899 a000 	ldrb.w	sl, [r9]
		ticker_by_next_slot_get(instance,
    f28c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
    f290:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
    f294:	6961      	ldr	r1, [r4, #20]
    f296:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    f29a:	d002      	beq.n	f2a2 <ticker_job+0x506>
    f29c:	6802      	ldr	r2, [r0, #0]
    f29e:	428a      	cmp	r2, r1
    f2a0:	d013      	beq.n	f2ca <ticker_job+0x52e>
		_ticker_id_head = instance->ticker_id_head;
    f2a2:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
    f2a4:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
    f2a6:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    f2a8:	2aff      	cmp	r2, #255	; 0xff
    f2aa:	d009      	beq.n	f2c0 <ticker_job+0x524>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    f2ac:	fb12 fb07 	smulbb	fp, r2, r7
    f2b0:	eb0c 0a0b 	add.w	sl, ip, fp
    f2b4:	f8da 0008 	ldr.w	r0, [sl, #8]
    f2b8:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
    f2ba:	f8da 0018 	ldr.w	r0, [sl, #24]
    f2be:	b158      	cbz	r0, f2d8 <ticker_job+0x53c>
	*ticker_id_head = _ticker_id_head;
    f2c0:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    f2c4:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
    f2c8:	e7cc      	b.n	f264 <ticker_job+0x4c8>
		ticker = &node[_ticker_id_head];
    f2ca:	fb1a f207 	smulbb	r2, sl, r7
	_ticks_to_expire = *ticks_to_expire;
    f2ce:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    f2d2:	f81c 2002 	ldrb.w	r2, [ip, r2]
    f2d6:	e7e7      	b.n	f2a8 <ticker_job+0x50c>
		_ticker_id_head = ticker->next;
    f2d8:	f81c 200b 	ldrb.w	r2, [ip, fp]
    f2dc:	e7e4      	b.n	f2a8 <ticker_job+0x50c>
		if (uop->id < instance->count_node) {
    f2de:	7859      	ldrb	r1, [r3, #1]
    f2e0:	7a22      	ldrb	r2, [r4, #8]
    f2e2:	428a      	cmp	r2, r1
    f2e4:	d906      	bls.n	f2f4 <ticker_job+0x558>
			node[uop->id].priority =
    f2e6:	6822      	ldr	r2, [r4, #0]
    f2e8:	fb01 2207 	mla	r2, r1, r7, r2
    f2ec:	7919      	ldrb	r1, [r3, #4]
    f2ee:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    f2f2:	e7b7      	b.n	f264 <ticker_job+0x4c8>
			uop->status = TICKER_STATUS_FAILURE;
    f2f4:	2201      	movs	r2, #1
    f2f6:	e7b6      	b.n	f266 <ticker_job+0x4ca>
    f2f8:	ff172b5a 	.word	0xff172b5a
    f2fc:	7f172b59 	.word	0x7f172b59
	if (ticker_id_old_head == TICKER_NULL) {
    f300:	9b03      	ldr	r3, [sp, #12]
    f302:	2bff      	cmp	r3, #255	; 0xff
    f304:	d106      	bne.n	f314 <ticker_job+0x578>
		ticks_current = cntr_cnt_get();
    f306:	f007 fbbb 	bl	16a80 <cntr_cnt_get>
    f30a:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
    f30c:	f007 fb84 	bl	16a18 <cntr_start>
    f310:	b900      	cbnz	r0, f314 <ticker_job+0x578>
			instance->ticks_current = ticks_current;
    f312:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
    f314:	7f61      	ldrb	r1, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    f316:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
    f318:	f8df 80b0 	ldr.w	r8, [pc, #176]	; f3cc <ticker_job+0x630>
    f31c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; f3d0 <ticker_job+0x634>
    f320:	f8df a0b0 	ldr.w	sl, [pc, #176]	; f3d4 <ticker_job+0x638>
	ticks_to_expire = ticker->ticks_to_expire;
    f324:	232c      	movs	r3, #44	; 0x2c
    f326:	fb01 2303 	mla	r3, r1, r3, r2
	i = 10U;
    f32a:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
    f32c:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    f32e:	f007 fba7 	bl	16a80 <cntr_cnt_get>
		cc = instance->ticks_current;
    f332:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f334:	1b43      	subs	r3, r0, r5
    f336:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    f33a:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    f33c:	42bb      	cmp	r3, r7
    f33e:	bf2c      	ite	cs
    f340:	18ed      	addcs	r5, r5, r3
    f342:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
    f344:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    f348:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    f34a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f34c:	4628      	mov	r0, r5
    f34e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    f350:	f007 fb96 	bl	16a80 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f354:	eba0 000b 	sub.w	r0, r0, fp
    f358:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f35c:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    f360:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f362:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    f366:	42a8      	cmp	r0, r5
		i--;
    f368:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    f36c:	f67f ad90 	bls.w	ee90 <ticker_job+0xf4>
		LL_ASSERT(i);
    f370:	2e00      	cmp	r6, #0
    f372:	d1dc      	bne.n	f32e <ticker_job+0x592>
    f374:	f240 63f4 	movw	r3, #1780	; 0x6f4
    f378:	4642      	mov	r2, r8
    f37a:	4649      	mov	r1, r9
    f37c:	4650      	mov	r0, sl
    f37e:	f00e fa1a 	bl	1d7b6 <printk>
    f382:	4040      	eors	r0, r0
    f384:	f380 8811 	msr	BASEPRI, r0
    f388:	f04f 0003 	mov.w	r0, #3
    f38c:	df02      	svc	2
    f38e:	e7ce      	b.n	f32e <ticker_job+0x592>
	if (previous == current) {
    f390:	4573      	cmp	r3, lr
    f392:	d101      	bne.n	f398 <ticker_job+0x5fc>
		instance->ticker_id_head = ticker_current->next;
    f394:	f884 901d 	strb.w	r9, [r4, #29]
	node[previous].next = ticker_current->next;
    f398:	202c      	movs	r0, #44	; 0x2c
    f39a:	fb1e fe00 	smulbb	lr, lr, r0
	if (ticker_current->next != TICKER_NULL) {
    f39e:	9809      	ldr	r0, [sp, #36]	; 0x24
	node[previous].next = ticker_current->next;
    f3a0:	f801 900e 	strb.w	r9, [r1, lr]
	if (ticker_current->next != TICKER_NULL) {
    f3a4:	f890 c000 	ldrb.w	ip, [r0]
    f3a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f3ac:	f43f add0 	beq.w	ef50 <ticker_job+0x1b4>
		node[ticker_current->next].ticks_to_expire += timeout;
    f3b0:	202c      	movs	r0, #44	; 0x2c
    f3b2:	fb0c 1c00 	mla	ip, ip, r0, r1
    f3b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    f3b8:	f8dc 1008 	ldr.w	r1, [ip, #8]
    f3bc:	4401      	add	r1, r0
    f3be:	f8cc 1008 	str.w	r1, [ip, #8]
	return (total + timeout);
    f3c2:	e5c5      	b.n	ef50 <ticker_job+0x1b4>
}
    f3c4:	b00f      	add	sp, #60	; 0x3c
    f3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3ca:	bf00      	nop
    f3cc:	00028e28 	.word	0x00028e28
    f3d0:	0002901a 	.word	0x0002901a
    f3d4:	00027ff4 	.word	0x00027ff4

0000f3d8 <ticker_init>:
{
    f3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3da:	9e05      	ldr	r6, [sp, #20]
    f3dc:	f89d 5018 	ldrb.w	r5, [sp, #24]
    f3e0:	9f07      	ldr	r7, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    f3e2:	b108      	cbz	r0, f3e8 <ticker_init+0x10>
		return TICKER_STATUS_FAILURE;
    f3e4:	2001      	movs	r0, #1
}
    f3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
    f3e8:	4c18      	ldr	r4, [pc, #96]	; (f44c <ticker_init+0x74>)
		instance->nodes[count_node].priority = 0;
    f3ea:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
	instance->count_node = count_node;
    f3ee:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
    f3f0:	6022      	str	r2, [r4, #0]
	while (count_node--) {
    f3f2:	3901      	subs	r1, #1
    f3f4:	b2c9      	uxtb	r1, r1
    f3f6:	29ff      	cmp	r1, #255	; 0xff
    f3f8:	d115      	bne.n	f426 <ticker_init+0x4e>
	instance->count_user = count_user;
    f3fa:	7263      	strb	r3, [r4, #9]
	instance->users = user;
    f3fc:	6066      	str	r6, [r4, #4]
	while (count_user--) {
    f3fe:	3b01      	subs	r3, #1
    f400:	b2db      	uxtb	r3, r3
    f402:	2bff      	cmp	r3, #255	; 0xff
    f404:	d114      	bne.n	f430 <ticker_init+0x58>
	if (count_op) {
    f406:	2d00      	cmp	r5, #0
    f408:	d1ec      	bne.n	f3e4 <ticker_init+0xc>
	instance->caller_id_get_cb = caller_id_get_cb;
    f40a:	9b08      	ldr	r3, [sp, #32]
    f40c:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
    f40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f410:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    f412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f414:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    f416:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
    f41a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    f41e:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
    f420:	8165      	strh	r5, [r4, #10]
	return TICKER_STATUS_SUCCESS;
    f422:	4628      	mov	r0, r5
    f424:	e7df      	b.n	f3e6 <ticker_init+0xe>
		instance->nodes[count_node].priority = 0;
    f426:	fb01 2e0c 	mla	lr, r1, ip, r2
    f42a:	f88e 0029 	strb.w	r0, [lr, #41]	; 0x29
    f42e:	e7e0      	b.n	f3f2 <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
    f430:	b21a      	sxth	r2, r3
    f432:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    f436:	604f      	str	r7, [r1, #4]
		user_op_ += users[count_user].count_user_op;
    f438:	f816 0032 	ldrb.w	r0, [r6, r2, lsl #3]
    f43c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
    f440:	1a28      	subs	r0, r5, r0
		user_op_ += users[count_user].count_user_op;
    f442:	eb07 1702 	add.w	r7, r7, r2, lsl #4
		count_op -= users[count_user].count_user_op;
    f446:	b2c5      	uxtb	r5, r0
    f448:	e7d9      	b.n	f3fe <ticker_init+0x26>
    f44a:	bf00      	nop
    f44c:	2000086c 	.word	0x2000086c

0000f450 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
    f450:	4a04      	ldr	r2, [pc, #16]	; (f464 <ticker_is_initialized+0x14>)
    f452:	232c      	movs	r3, #44	; 0x2c
    f454:	fb03 2000 	mla	r0, r3, r0, r2
    f458:	7a00      	ldrb	r0, [r0, #8]
}
    f45a:	3000      	adds	r0, #0
    f45c:	bf18      	it	ne
    f45e:	2001      	movne	r0, #1
    f460:	4770      	bx	lr
    f462:	bf00      	nop
    f464:	2000086c 	.word	0x2000086c

0000f468 <ticker_trigger>:
	if (instance->sched_cb) {
    f468:	4a07      	ldr	r2, [pc, #28]	; (f488 <ticker_trigger+0x20>)
    f46a:	232c      	movs	r3, #44	; 0x2c
    f46c:	fb03 2100 	mla	r1, r3, r0, r2
{
    f470:	b410      	push	{r4}
	if (instance->sched_cb) {
    f472:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    f474:	b134      	cbz	r4, f484 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    f476:	460b      	mov	r3, r1
    f478:	46a4      	mov	ip, r4
    f47a:	2201      	movs	r2, #1
    f47c:	2103      	movs	r1, #3
    f47e:	2002      	movs	r0, #2
}
    f480:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    f482:	4760      	bx	ip
}
    f484:	bc10      	pop	{r4}
    f486:	4770      	bx	lr
    f488:	2000086c 	.word	0x2000086c

0000f48c <ticker_start>:
{
    f48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f490:	4c22      	ldr	r4, [pc, #136]	; (f51c <ticker_start+0x90>)
    f492:	272c      	movs	r7, #44	; 0x2c
    f494:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->users[user_id];
    f498:	b20d      	sxth	r5, r1
    f49a:	f8d9 0004 	ldr.w	r0, [r9, #4]
    f49e:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    f4a2:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    f4a6:	f89c 4003 	ldrb.w	r4, [ip, #3]
    f4aa:	1c66      	adds	r6, r4, #1
    f4ac:	b2f6      	uxtb	r6, r6
		last = 0U;
    f4ae:	42b0      	cmp	r0, r6
    f4b0:	bf98      	it	ls
    f4b2:	2600      	movls	r6, #0
	if (last == user->first) {
    f4b4:	f89c 0001 	ldrb.w	r0, [ip, #1]
    f4b8:	42b0      	cmp	r0, r6
    f4ba:	d02d      	beq.n	f518 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
    f4bc:	f8dc 0004 	ldr.w	r0, [ip, #4]
    f4c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f4c4:	0125      	lsls	r5, r4, #4
    f4c6:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
    f4c8:	f04f 0804 	mov.w	r8, #4
    f4cc:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
    f4d0:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    f4d2:	9b08      	ldr	r3, [sp, #32]
    f4d4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    f4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4d8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    f4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f4dc:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    f4de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f4e0:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    f4e2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    f4e6:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    f4e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f4ea:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    f4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f4ee:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    f4f0:	2302      	movs	r3, #2
    f4f2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    f4f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f4f6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    f4f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    f4fa:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    f4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    f4fe:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f502:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    f506:	4608      	mov	r0, r1
    f508:	4798      	blx	r3
    f50a:	464b      	mov	r3, r9
    f50c:	2200      	movs	r2, #0
    f50e:	4641      	mov	r1, r8
    f510:	47a8      	blx	r5
	return user_op->status;
    f512:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    f514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    f518:	2001      	movs	r0, #1
    f51a:	e7fb      	b.n	f514 <ticker_start+0x88>
    f51c:	2000086c 	.word	0x2000086c

0000f520 <ticker_update>:
{
    f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f524:	4c21      	ldr	r4, [pc, #132]	; (f5ac <ticker_update+0x8c>)
    f526:	272c      	movs	r7, #44	; 0x2c
    f528:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->users[user_id];
    f52c:	b20d      	sxth	r5, r1
    f52e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    f532:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    f536:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    f53a:	f89c 4003 	ldrb.w	r4, [ip, #3]
    f53e:	1c66      	adds	r6, r4, #1
    f540:	b2f6      	uxtb	r6, r6
		last = 0U;
    f542:	42b0      	cmp	r0, r6
    f544:	bf98      	it	ls
    f546:	2600      	movls	r6, #0
	if (last == user->first) {
    f548:	f89c 0001 	ldrb.w	r0, [ip, #1]
    f54c:	42b0      	cmp	r0, r6
    f54e:	d02a      	beq.n	f5a6 <ticker_update+0x86>
	user_op = &user->user_op[user->last];
    f550:	f8dc 0004 	ldr.w	r0, [ip, #4]
    f554:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f558:	0125      	lsls	r5, r4, #4
    f55a:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    f55c:	f04f 0e05 	mov.w	lr, #5
    f560:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    f564:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    f566:	9b06      	ldr	r3, [sp, #24]
    f568:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    f56a:	9b07      	ldr	r3, [sp, #28]
    f56c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    f56e:	9b08      	ldr	r3, [sp, #32]
    f570:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    f572:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    f576:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    f578:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f57c:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
    f57e:	2302      	movs	r3, #2
    f580:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    f582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f584:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    f586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
    f588:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    f58a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    f58c:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f590:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    f594:	4608      	mov	r0, r1
    f596:	4798      	blx	r3
    f598:	4643      	mov	r3, r8
    f59a:	2200      	movs	r2, #0
    f59c:	2104      	movs	r1, #4
    f59e:	47a8      	blx	r5
	return user_op->status;
    f5a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    f5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    f5a6:	2001      	movs	r0, #1
    f5a8:	e7fb      	b.n	f5a2 <ticker_update+0x82>
    f5aa:	bf00      	nop
    f5ac:	2000086c 	.word	0x2000086c

0000f5b0 <ticker_stop>:
{
    f5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f5b4:	4c1a      	ldr	r4, [pc, #104]	; (f620 <ticker_stop+0x70>)
    f5b6:	262c      	movs	r6, #44	; 0x2c
    f5b8:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
    f5bc:	b20f      	sxth	r7, r1
    f5be:	f8d8 0004 	ldr.w	r0, [r8, #4]
    f5c2:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    f5c6:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    f5ca:	f89c 4003 	ldrb.w	r4, [ip, #3]
    f5ce:	1c65      	adds	r5, r4, #1
    f5d0:	b2ed      	uxtb	r5, r5
		last = 0U;
    f5d2:	42a8      	cmp	r0, r5
    f5d4:	bf98      	it	ls
    f5d6:	2500      	movls	r5, #0
	if (last == user->first) {
    f5d8:	f89c 0001 	ldrb.w	r0, [ip, #1]
    f5dc:	42a8      	cmp	r0, r5
    f5de:	d01c      	beq.n	f61a <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
    f5e0:	f8dc 0004 	ldr.w	r0, [ip, #4]
    f5e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f5e8:	0124      	lsls	r4, r4, #4
    f5ea:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    f5ec:	f04f 0e06 	mov.w	lr, #6
    f5f0:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
    f5f4:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    f5f6:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    f5f8:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    f5fc:	9b06      	ldr	r3, [sp, #24]
    f5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    f600:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f604:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    f608:	4608      	mov	r0, r1
    f60a:	4798      	blx	r3
    f60c:	4643      	mov	r3, r8
    f60e:	2200      	movs	r2, #0
    f610:	2104      	movs	r1, #4
    f612:	47a0      	blx	r4
	return user_op->status;
    f614:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    f616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    f61a:	2001      	movs	r0, #1
    f61c:	e7fb      	b.n	f616 <ticker_stop+0x66>
    f61e:	bf00      	nop
    f620:	2000086c 	.word	0x2000086c

0000f624 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    f624:	b508      	push	{r3, lr}
    f626:	4603      	mov	r3, r0
	if (addr_type > 1) {
    f628:	2b01      	cmp	r3, #1
{
    f62a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    f62c:	d80e      	bhi.n	f64c <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    f62e:	b133      	cbz	r3, f63e <ll_addr_get+0x1a>
		if (bdaddr) {
    f630:	b119      	cbz	r1, f63a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    f632:	2206      	movs	r2, #6
    f634:	4906      	ldr	r1, [pc, #24]	; (f650 <ll_addr_get+0x2c>)
    f636:	f00f ffdf 	bl	1f5f8 <memcpy>
		}

		return rnd_addr;
    f63a:	4805      	ldr	r0, [pc, #20]	; (f650 <ll_addr_get+0x2c>)
    f63c:	e007      	b.n	f64e <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    f63e:	b119      	cbz	r1, f648 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    f640:	2206      	movs	r2, #6
    f642:	4904      	ldr	r1, [pc, #16]	; (f654 <ll_addr_get+0x30>)
    f644:	f00f ffd8 	bl	1f5f8 <memcpy>
	}

	return pub_addr;
    f648:	4802      	ldr	r0, [pc, #8]	; (f654 <ll_addr_get+0x30>)
    f64a:	e000      	b.n	f64e <ll_addr_get+0x2a>
		return NULL;
    f64c:	2000      	movs	r0, #0
}
    f64e:	bd08      	pop	{r3, pc}
    f650:	2000a54d 	.word	0x2000a54d
    f654:	2000a547 	.word	0x2000a547

0000f658 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    f658:	b570      	push	{r4, r5, r6, lr}
    f65a:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
    f65c:	2000      	movs	r0, #0
{
    f65e:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
    f660:	f012 fbc9 	bl	21df6 <ull_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    f664:	4604      	mov	r4, r0
    f666:	b948      	cbnz	r0, f67c <ll_addr_set+0x24>
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    f668:	2206      	movs	r2, #6
    f66a:	4629      	mov	r1, r5
	if (addr_type) {
    f66c:	b126      	cbz	r6, f678 <ll_addr_set+0x20>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    f66e:	4804      	ldr	r0, [pc, #16]	; (f680 <ll_addr_set+0x28>)
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    f670:	f00f ffc2 	bl	1f5f8 <memcpy>
	}

	return 0;
}
    f674:	4620      	mov	r0, r4
    f676:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    f678:	4802      	ldr	r0, [pc, #8]	; (f684 <ll_addr_set+0x2c>)
    f67a:	e7f9      	b.n	f670 <ll_addr_set+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f67c:	240c      	movs	r4, #12
    f67e:	e7f9      	b.n	f674 <ll_addr_set+0x1c>
    f680:	2000a54d 	.word	0x2000a54d
    f684:	2000a547 	.word	0x2000a547

0000f688 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
    f688:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    f68a:	4802      	ldr	r0, [pc, #8]	; (f694 <hci_driver_init+0xc>)
    f68c:	f7f8 fbb4 	bl	7df8 <bt_hci_driver_register>

	return 0;
}
    f690:	2000      	movs	r0, #0
    f692:	bd08      	pop	{r3, pc}
    f694:	000264a8 	.word	0x000264a8

0000f698 <hci_driver_send>:
	if (!buf->len) {
    f698:	8983      	ldrh	r3, [r0, #12]
{
    f69a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f69c:	4605      	mov	r5, r0
	if (!buf->len) {
    f69e:	b993      	cbnz	r3, f6c6 <hci_driver_send+0x2e>
		BT_ERR("Empty HCI packet");
    f6a0:	2301      	movs	r3, #1
    f6a2:	f04f 0100 	mov.w	r1, #0
    f6a6:	f363 0107 	bfi	r1, r3, #0, #8
    f6aa:	4a22      	ldr	r2, [pc, #136]	; (f734 <hci_driver_send+0x9c>)
    f6ac:	4b22      	ldr	r3, [pc, #136]	; (f738 <hci_driver_send+0xa0>)
    f6ae:	4823      	ldr	r0, [pc, #140]	; (f73c <hci_driver_send+0xa4>)
    f6b0:	1a9b      	subs	r3, r3, r2
    f6b2:	08db      	lsrs	r3, r3, #3
    f6b4:	f363 118f 	bfi	r1, r3, #6, #10
    f6b8:	f00f f9cc 	bl	1ea54 <log_0>
		return -EINVAL;
    f6bc:	f06f 0415 	mvn.w	r4, #21
}
    f6c0:	4620      	mov	r0, r4
    f6c2:	b003      	add	sp, #12
    f6c4:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    f6c6:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
    f6c8:	b181      	cbz	r1, f6ec <hci_driver_send+0x54>
    f6ca:	2902      	cmp	r1, #2
    f6cc:	d122      	bne.n	f714 <hci_driver_send+0x7c>
	err = hci_acl_handle(buf, &evt);
    f6ce:	a901      	add	r1, sp, #4
    f6d0:	f000 fec4 	bl	1045c <hci_acl_handle>
    f6d4:	4604      	mov	r4, r0
	if (evt) {
    f6d6:	9801      	ldr	r0, [sp, #4]
    f6d8:	b108      	cbz	r0, f6de <hci_driver_send+0x46>
		bt_recv_prio(evt);
    f6da:	f7f8 fb37 	bl	7d4c <bt_recv_prio>
	if (!err) {
    f6de:	2c00      	cmp	r4, #0
    f6e0:	d1ee      	bne.n	f6c0 <hci_driver_send+0x28>
		net_buf_unref(buf);
    f6e2:	4628      	mov	r0, r5
    f6e4:	f007 ff76 	bl	175d4 <net_buf_unref>
    f6e8:	2400      	movs	r4, #0
    f6ea:	e7e9      	b.n	f6c0 <hci_driver_send+0x28>
	struct node_rx_pdu *node_rx = NULL;
    f6ec:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    f6ee:	a901      	add	r1, sp, #4
    f6f0:	f000 fab0 	bl	fc54 <hci_cmd_handle>
	if (evt) {
    f6f4:	2800      	cmp	r0, #0
    f6f6:	d0f4      	beq.n	f6e2 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    f6f8:	f7f8 fb28 	bl	7d4c <bt_recv_prio>
		if (node_rx) {
    f6fc:	9c01      	ldr	r4, [sp, #4]
    f6fe:	2c00      	cmp	r4, #0
    f700:	d0ef      	beq.n	f6e2 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f702:	4620      	mov	r0, r4
    f704:	f012 faa8 	bl	21c58 <hci_get_class>
    f708:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
    f70a:	9901      	ldr	r1, [sp, #4]
    f70c:	480c      	ldr	r0, [pc, #48]	; (f740 <hci_driver_send+0xa8>)
    f70e:	f015 fcac 	bl	2506a <k_queue_append>
	if (!err) {
    f712:	e7e6      	b.n	f6e2 <hci_driver_send+0x4a>
		BT_ERR("Unknown HCI type %u", type);
    f714:	2301      	movs	r3, #1
    f716:	f04f 0200 	mov.w	r2, #0
    f71a:	f363 0207 	bfi	r2, r3, #0, #8
    f71e:	4805      	ldr	r0, [pc, #20]	; (f734 <hci_driver_send+0x9c>)
    f720:	4b05      	ldr	r3, [pc, #20]	; (f738 <hci_driver_send+0xa0>)
    f722:	1a1b      	subs	r3, r3, r0
    f724:	08db      	lsrs	r3, r3, #3
    f726:	f363 128f 	bfi	r2, r3, #6, #10
    f72a:	4806      	ldr	r0, [pc, #24]	; (f744 <hci_driver_send+0xac>)
    f72c:	f00f f99f 	bl	1ea6e <log_1>
    f730:	e7c4      	b.n	f6bc <hci_driver_send+0x24>
    f732:	bf00      	nop
    f734:	00025a6c 	.word	0x00025a6c
    f738:	00025abc 	.word	0x00025abc
    f73c:	00028e8d 	.word	0x00028e8d
    f740:	2000e6b8 	.word	0x2000e6b8
    f744:	00028e9e 	.word	0x00028e9e

0000f748 <recv_thread>:
{
    f748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    f74a:	4d27      	ldr	r5, [pc, #156]	; (f7e8 <recv_thread+0xa0>)
		LL_ASSERT(0);
    f74c:	4e27      	ldr	r6, [pc, #156]	; (f7ec <recv_thread+0xa4>)
    f74e:	4f28      	ldr	r7, [pc, #160]	; (f7f0 <recv_thread+0xa8>)
    f750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f754:	4628      	mov	r0, r5
    f756:	f015 fcb1 	bl	250bc <z_impl_k_queue_get>
		if (node_rx && !buf) {
    f75a:	b368      	cbz	r0, f7b8 <recv_thread+0x70>
	u8_t class = node_rx->hdr.user_meta;
    f75c:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    f75e:	9001      	str	r0, [sp, #4]
	switch (class) {
    f760:	b11b      	cbz	r3, f76a <recv_thread+0x22>
    f762:	2b04      	cmp	r3, #4
    f764:	d90f      	bls.n	f786 <recv_thread+0x3e>
    f766:	2b05      	cmp	r3, #5
    f768:	d02f      	beq.n	f7ca <recv_thread+0x82>
		LL_ASSERT(0);
    f76a:	23c4      	movs	r3, #196	; 0xc4
    f76c:	4632      	mov	r2, r6
    f76e:	4639      	mov	r1, r7
    f770:	4820      	ldr	r0, [pc, #128]	; (f7f4 <recv_thread+0xac>)
    f772:	f00e f820 	bl	1d7b6 <printk>
    f776:	4040      	eors	r0, r0
    f778:	f380 8811 	msr	BASEPRI, r0
    f77c:	f04f 0003 	mov.w	r0, #3
    f780:	df02      	svc	2
	struct net_buf *buf = NULL;
    f782:	2400      	movs	r4, #0
    f784:	e00c      	b.n	f7a0 <recv_thread+0x58>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    f786:	2b02      	cmp	r3, #2
    f788:	d119      	bne.n	f7be <recv_thread+0x76>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    f78a:	2200      	movs	r2, #0
    f78c:	2101      	movs	r1, #1
    f78e:	4610      	mov	r0, r2
    f790:	f7f9 f98c 	bl	8aac <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f794:	4604      	mov	r4, r0
		if (buf) {
    f796:	b118      	cbz	r0, f7a0 <recv_thread+0x58>
			hci_evt_encode(node_rx, buf);
    f798:	4601      	mov	r1, r0
    f79a:	9801      	ldr	r0, [sp, #4]
    f79c:	f000 ff3a 	bl	10614 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    f7a0:	9b01      	ldr	r3, [sp, #4]
    f7a2:	2200      	movs	r2, #0
    f7a4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    f7a6:	a801      	add	r0, sp, #4
    f7a8:	f001 fd72 	bl	11290 <ll_rx_mem_release>
		if (buf) {
    f7ac:	b124      	cbz	r4, f7b8 <recv_thread+0x70>
			if (buf->len) {
    f7ae:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    f7b0:	4620      	mov	r0, r4
			if (buf->len) {
    f7b2:	b1ab      	cbz	r3, f7e0 <recv_thread+0x98>
				bt_recv(buf);
    f7b4:	f7f8 fa14 	bl	7be0 <bt_recv>
	z_impl_k_yield();
    f7b8:	f00d f804 	bl	1c7c4 <z_impl_k_yield>
    f7bc:	e7c8      	b.n	f750 <recv_thread+0x8>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f7be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f7c2:	2001      	movs	r0, #1
    f7c4:	f7f9 f93c 	bl	8a40 <bt_buf_get_rx>
    f7c8:	e7e4      	b.n	f794 <recv_thread+0x4c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    f7ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f7ce:	2003      	movs	r0, #3
    f7d0:	f7f9 f936 	bl	8a40 <bt_buf_get_rx>
    f7d4:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    f7d6:	4601      	mov	r1, r0
    f7d8:	9801      	ldr	r0, [sp, #4]
    f7da:	f000 fedd 	bl	10598 <hci_acl_encode>
		break;
    f7de:	e7df      	b.n	f7a0 <recv_thread+0x58>
				net_buf_unref(buf);
    f7e0:	f007 fef8 	bl	175d4 <net_buf_unref>
    f7e4:	e7e8      	b.n	f7b8 <recv_thread+0x70>
    f7e6:	bf00      	nop
    f7e8:	2000e6b8 	.word	0x2000e6b8
    f7ec:	00028eb2 	.word	0x00028eb2
    f7f0:	0002a0ca 	.word	0x0002a0ca
    f7f4:	00027ff4 	.word	0x00027ff4

0000f7f8 <prio_recv_thread>:
{
    f7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_sem_take(sem, timeout);
    f7fa:	4d17      	ldr	r5, [pc, #92]	; (f858 <prio_recv_thread+0x60>)
				k_fifo_put(&recv_fifo, node_rx);
    f7fc:	4e17      	ldr	r6, [pc, #92]	; (f85c <prio_recv_thread+0x64>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    f7fe:	f10d 0102 	add.w	r1, sp, #2
    f802:	a801      	add	r0, sp, #4
    f804:	f001 fc2e 	bl	11064 <ll_rx_get>
    f808:	4604      	mov	r4, r0
    f80a:	b968      	cbnz	r0, f828 <prio_recv_thread+0x30>
		if (node_rx) {
    f80c:	9b01      	ldr	r3, [sp, #4]
    f80e:	b1eb      	cbz	r3, f84c <prio_recv_thread+0x54>
			ll_rx_dequeue();
    f810:	f001 fc80 	bl	11114 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f814:	9c01      	ldr	r4, [sp, #4]
    f816:	4620      	mov	r0, r4
    f818:	f012 fa1e 	bl	21c58 <hci_get_class>
				k_fifo_put(&recv_fifo, node_rx);
    f81c:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f81e:	7160      	strb	r0, [r4, #5]
				k_fifo_put(&recv_fifo, node_rx);
    f820:	4630      	mov	r0, r6
    f822:	f015 fc22 	bl	2506a <k_queue_append>
			continue;
    f826:	e7ea      	b.n	f7fe <prio_recv_thread+0x6>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f82c:	2100      	movs	r1, #0
    f82e:	2013      	movs	r0, #19
    f830:	f7f9 f93c 	bl	8aac <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f834:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f836:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f838:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    f83c:	f012 f9f8 	bl	21c30 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    f840:	4638      	mov	r0, r7
    f842:	f7f8 fa83 	bl	7d4c <bt_recv_prio>
	z_impl_k_yield();
    f846:	f00c ffbd 	bl	1c7c4 <z_impl_k_yield>
    f84a:	e7d8      	b.n	f7fe <prio_recv_thread+0x6>
	return z_impl_k_sem_take(sem, timeout);
    f84c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f850:	4628      	mov	r0, r5
    f852:	f00d f85d 	bl	1c910 <z_impl_k_sem_take>
		BT_DBG("sem taken");
    f856:	e7d2      	b.n	f7fe <prio_recv_thread+0x6>
    f858:	2000e668 	.word	0x2000e668
    f85c:	2000e6b8 	.word	0x2000e6b8

0000f860 <hci_driver_open>:
{
    f860:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    f862:	4820      	ldr	r0, [pc, #128]	; (f8e4 <hci_driver_open+0x84>)
{
    f864:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    f866:	f001 fb1f 	bl	10ea8 <ll_init>
	if (err) {
    f86a:	4604      	mov	r4, r0
    f86c:	b188      	cbz	r0, f892 <hci_driver_open+0x32>
		BT_ERR("LL initialization failed: %u", err);
    f86e:	2301      	movs	r3, #1
    f870:	f04f 0200 	mov.w	r2, #0
    f874:	f363 0207 	bfi	r2, r3, #0, #8
    f878:	491b      	ldr	r1, [pc, #108]	; (f8e8 <hci_driver_open+0x88>)
    f87a:	4b1c      	ldr	r3, [pc, #112]	; (f8ec <hci_driver_open+0x8c>)
    f87c:	1a5b      	subs	r3, r3, r1
    f87e:	08db      	lsrs	r3, r3, #3
    f880:	4601      	mov	r1, r0
    f882:	f363 128f 	bfi	r2, r3, #6, #10
    f886:	481a      	ldr	r0, [pc, #104]	; (f8f0 <hci_driver_open+0x90>)
    f888:	f00f f8f1 	bl	1ea6e <log_1>
}
    f88c:	4620      	mov	r0, r4
    f88e:	b006      	add	sp, #24
    f890:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    f892:	f001 f927 	bl	10ae4 <hci_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f896:	f06f 0309 	mvn.w	r3, #9
    f89a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f89e:	e9cd 4404 	strd	r4, r4, [sp, #16]
    f8a2:	e9cd 4400 	strd	r4, r4, [sp]
    f8a6:	4b13      	ldr	r3, [pc, #76]	; (f8f4 <hci_driver_open+0x94>)
    f8a8:	4913      	ldr	r1, [pc, #76]	; (f8f8 <hci_driver_open+0x98>)
    f8aa:	4814      	ldr	r0, [pc, #80]	; (f8fc <hci_driver_open+0x9c>)
    f8ac:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    f8b0:	f00d f8a6 	bl	1ca00 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f8b4:	4912      	ldr	r1, [pc, #72]	; (f900 <hci_driver_open+0xa0>)
    f8b6:	4811      	ldr	r0, [pc, #68]	; (f8fc <hci_driver_open+0x9c>)
    f8b8:	f015 fd64 	bl	25384 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f8bc:	f06f 0307 	mvn.w	r3, #7
    f8c0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f8c4:	e9cd 4404 	strd	r4, r4, [sp, #16]
    f8c8:	e9cd 4400 	strd	r4, r4, [sp]
    f8cc:	4b0d      	ldr	r3, [pc, #52]	; (f904 <hci_driver_open+0xa4>)
    f8ce:	490e      	ldr	r1, [pc, #56]	; (f908 <hci_driver_open+0xa8>)
    f8d0:	480e      	ldr	r0, [pc, #56]	; (f90c <hci_driver_open+0xac>)
    f8d2:	f640 0298 	movw	r2, #2200	; 0x898
    f8d6:	f00d f893 	bl	1ca00 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f8da:	490d      	ldr	r1, [pc, #52]	; (f910 <hci_driver_open+0xb0>)
    f8dc:	480b      	ldr	r0, [pc, #44]	; (f90c <hci_driver_open+0xac>)
    f8de:	f015 fd51 	bl	25384 <z_impl_k_thread_name_set>
	return 0;
    f8e2:	e7d3      	b.n	f88c <hci_driver_open+0x2c>
    f8e4:	2000e668 	.word	0x2000e668
    f8e8:	00025a6c 	.word	0x00025a6c
    f8ec:	00025abc 	.word	0x00025abc
    f8f0:	00028e60 	.word	0x00028e60
    f8f4:	0000f7f9 	.word	0x0000f7f9
    f8f8:	2000b1f8 	.word	0x2000b1f8
    f8fc:	20000898 	.word	0x20000898
    f900:	00028e7d 	.word	0x00028e7d
    f904:	0000f749 	.word	0x0000f749
    f908:	2000b3b8 	.word	0x2000b3b8
    f90c:	20000904 	.word	0x20000904
    f910:	00028e87 	.word	0x00028e87

0000f914 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    f914:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    f916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    f91a:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    f91c:	2100      	movs	r1, #0
    f91e:	200f      	movs	r0, #15
    f920:	f7f9 f8c4 	bl	8aac <bt_buf_get_evt>
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    f924:	2204      	movs	r2, #4
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    f926:	4604      	mov	r4, r0
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    f928:	210f      	movs	r1, #15
    f92a:	f012 f962 	bl	21bf2 <hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    f92e:	2104      	movs	r1, #4
    f930:	f104 0008 	add.w	r0, r4, #8
    f934:	f012 fe7e 	bl	22634 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
    f938:	2301      	movs	r3, #1
    f93a:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    f93c:	4b02      	ldr	r3, [pc, #8]	; (f948 <cmd_status+0x34>)
	cs->status = status;
    f93e:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    f940:	881b      	ldrh	r3, [r3, #0]
    f942:	8043      	strh	r3, [r0, #2]

	return buf;
}
    f944:	4620      	mov	r0, r4
    f946:	bd38      	pop	{r3, r4, r5, pc}
    f948:	20006052 	.word	0x20006052

0000f94c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    f94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f94e:	4605      	mov	r5, r0
    f950:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f952:	4b13      	ldr	r3, [pc, #76]	; (f9a0 <le_remote_feat_complete+0x54>)
{
    f954:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f956:	6859      	ldr	r1, [r3, #4]
    f958:	2400      	movs	r4, #0
{
    f95a:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f95c:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    f960:	4622      	mov	r2, r4
    f962:	4313      	orrs	r3, r2
    f964:	d01a      	beq.n	f99c <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    f966:	4b0f      	ldr	r3, [pc, #60]	; (f9a4 <le_remote_feat_complete+0x58>)
    f968:	6819      	ldr	r1, [r3, #0]
    f96a:	4623      	mov	r3, r4
    f96c:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f970:	4313      	orrs	r3, r2
    f972:	d013      	beq.n	f99c <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    f974:	220b      	movs	r2, #11
    f976:	2104      	movs	r1, #4
    f978:	f012 f945 	bl	21c06 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    f97c:	2208      	movs	r2, #8
	sep->status = status;
    f97e:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    f980:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
    f984:	3003      	adds	r0, #3
    f986:	b925      	cbnz	r5, f992 <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
    f988:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    f98a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    f98e:	f00f be33 	b.w	1f5f8 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    f992:	4621      	mov	r1, r4
}
    f994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    f998:	f00f be58 	b.w	1f64c <memset>
}
    f99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f99e:	bf00      	nop
    f9a0:	2000de68 	.word	0x2000de68
    f9a4:	2000de70 	.word	0x2000de70

0000f9a8 <encrypt_change>:
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    f9a8:	4b0e      	ldr	r3, [pc, #56]	; (f9e4 <encrypt_change+0x3c>)
{
    f9aa:	b570      	push	{r4, r5, r6, lr}
    f9ac:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    f9ae:	6819      	ldr	r1, [r3, #0]
{
    f9b0:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    f9b2:	2300      	movs	r3, #0
    f9b4:	f001 0280 	and.w	r2, r1, #128	; 0x80
    f9b8:	4313      	orrs	r3, r2
{
    f9ba:	4604      	mov	r4, r0
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    f9bc:	d010      	beq.n	f9e0 <encrypt_change+0x38>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    f9be:	2204      	movs	r2, #4
    f9c0:	2108      	movs	r1, #8
    f9c2:	4628      	mov	r0, r5
    f9c4:	f012 f915 	bl	21bf2 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    f9c8:	2104      	movs	r1, #4
    f9ca:	f105 0008 	add.w	r0, r5, #8
    f9ce:	f012 fe31 	bl	22634 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    f9d2:	fab4 f384 	clz	r3, r4
    f9d6:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    f9d8:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    f9da:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    f9de:	70c3      	strb	r3, [r0, #3]
}
    f9e0:	bd70      	pop	{r4, r5, r6, pc}
    f9e2:	bf00      	nop
    f9e4:	2000de68 	.word	0x2000de68

0000f9e8 <hci_cmd_complete>:
{
    f9e8:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    f9ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    f9ee:	4604      	mov	r4, r0
    f9f0:	460d      	mov	r5, r1
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    f9f2:	200e      	movs	r0, #14
    f9f4:	2100      	movs	r1, #0
    f9f6:	f7f9 f859 	bl	8aac <bt_buf_get_evt>
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    f9fa:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    f9fc:	6020      	str	r0, [r4, #0]
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    f9fe:	b2d2      	uxtb	r2, r2
    fa00:	210e      	movs	r1, #14
    fa02:	f012 f8f6 	bl	21bf2 <hci_evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    fa06:	6820      	ldr	r0, [r4, #0]
    fa08:	2103      	movs	r1, #3
    fa0a:	3008      	adds	r0, #8
    fa0c:	f012 fe12 	bl	22634 <net_buf_simple_add>
	cc->ncmd = 1U;
    fa10:	2301      	movs	r3, #1
    fa12:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    fa14:	4b05      	ldr	r3, [pc, #20]	; (fa2c <hci_cmd_complete+0x44>)
    fa16:	881b      	ldrh	r3, [r3, #0]
    fa18:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    fa1c:	6820      	ldr	r0, [r4, #0]
    fa1e:	4629      	mov	r1, r5
    fa20:	3008      	adds	r0, #8
}
    fa22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    fa26:	f012 be05 	b.w	22634 <net_buf_simple_add>
    fa2a:	bf00      	nop
    fa2c:	20006052 	.word	0x20006052

0000fa30 <hci_vendor_cmd_handle_common>:
{
    fa30:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    fa32:	3801      	subs	r0, #1
{
    fa34:	b087      	sub	sp, #28
    fa36:	4615      	mov	r5, r2
	switch (ocf) {
    fa38:	2809      	cmp	r0, #9
    fa3a:	f200 8105 	bhi.w	fc48 <hci_vendor_cmd_handle_common+0x218>
    fa3e:	e8df f010 	tbh	[pc, r0, lsl #1]
    fa42:	000a      	.short	0x000a
    fa44:	00380021 	.word	0x00380021
    fa48:	01030103 	.word	0x01030103
    fa4c:	0103005f 	.word	0x0103005f
    fa50:	006a0044 	.word	0x006a0044
    fa54:	00c5      	.short	0x00c5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa56:	4610      	mov	r0, r2
    fa58:	210d      	movs	r1, #13
    fa5a:	f7ff ffc5 	bl	f9e8 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    fa5e:	2202      	movs	r2, #2
    fa60:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    fa62:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    fa64:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    fa66:	2201      	movs	r2, #1
	rp->status = 0x00;
    fa68:	2300      	movs	r3, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    fa6a:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    fa6c:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    fa6e:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    fa70:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    fa72:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0U;
    fa74:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    fa76:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    fa78:	7242      	strb	r2, [r0, #9]
    fa7a:	7283      	strb	r3, [r0, #10]
    fa7c:	72c3      	strb	r3, [r0, #11]
    fa7e:	7303      	strb	r3, [r0, #12]
	return 0;
    fa80:	2400      	movs	r4, #0
    fa82:	e013      	b.n	faac <hci_vendor_cmd_handle_common+0x7c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa84:	2141      	movs	r1, #65	; 0x41
    fa86:	4610      	mov	r0, r2
    fa88:	f7ff ffae 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    fa8c:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa8e:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fa90:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    fa92:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fa96:	4621      	mov	r1, r4
    fa98:	f00f fdd8 	bl	1f64c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    fa9c:	786b      	ldrb	r3, [r5, #1]
    fa9e:	f063 0358 	orn	r3, r3, #88	; 0x58
    faa2:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    faa4:	78ab      	ldrb	r3, [r5, #2]
    faa6:	f043 0303 	orr.w	r3, r3, #3
    faaa:	70ab      	strb	r3, [r5, #2]
}
    faac:	4620      	mov	r0, r4
    faae:	b007      	add	sp, #28
    fab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fab2:	2109      	movs	r1, #9
    fab4:	4610      	mov	r0, r2
    fab6:	f7ff ff97 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    faba:	2400      	movs	r4, #0
    fabc:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    fac0:	2208      	movs	r2, #8
    fac2:	4621      	mov	r1, r4
    fac4:	f00f fdc2 	bl	1f64c <memset>
    fac8:	e7f0      	b.n	faac <hci_vendor_cmd_handle_common+0x7c>
	const char build_info[] = HCI_VS_BUILD_INFO;
    faca:	4b61      	ldr	r3, [pc, #388]	; (fc50 <hci_vendor_cmd_handle_common+0x220>)
    facc:	aa01      	add	r2, sp, #4
    face:	f103 0710 	add.w	r7, r3, #16
    fad2:	4616      	mov	r6, r2
    fad4:	6818      	ldr	r0, [r3, #0]
    fad6:	6859      	ldr	r1, [r3, #4]
    fad8:	4614      	mov	r4, r2
    fada:	c403      	stmia	r4!, {r0, r1}
    fadc:	3308      	adds	r3, #8
    fade:	42bb      	cmp	r3, r7
    fae0:	4622      	mov	r2, r4
    fae2:	d1f7      	bne.n	fad4 <hci_vendor_cmd_handle_common+0xa4>
    fae4:	881b      	ldrh	r3, [r3, #0]
    fae6:	8023      	strh	r3, [r4, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    fae8:	2113      	movs	r1, #19
    faea:	4628      	mov	r0, r5
    faec:	f7ff ff7c 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    faf0:	2400      	movs	r4, #0
    faf2:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    faf6:	2212      	movs	r2, #18
    faf8:	4631      	mov	r1, r6
    fafa:	f00f fd7d 	bl	1f5f8 <memcpy>
    fafe:	e7d5      	b.n	faac <hci_vendor_cmd_handle_common+0x7c>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    fb00:	6889      	ldr	r1, [r1, #8]
    fb02:	2000      	movs	r0, #0
    fb04:	f7ff fda8 	bl	f658 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    fb08:	2101      	movs	r1, #1
    fb0a:	4628      	mov	r0, r5
    fb0c:	f7ff ff6c 	bl	f9e8 <hci_cmd_complete>
	ccst->status = 0x00;
    fb10:	2300      	movs	r3, #0
    fb12:	7003      	strb	r3, [r0, #0]
    fb14:	e7b4      	b.n	fa80 <hci_vendor_cmd_handle_common+0x50>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    fb16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fb1a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    fb1e:	3201      	adds	r2, #1
    fb20:	d106      	bne.n	fb30 <hci_vendor_cmd_handle_common+0x100>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    fb22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    fb26:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    fb2a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    fb2c:	4293      	cmp	r3, r2
    fb2e:	d045      	beq.n	fbbc <hci_vendor_cmd_handle_common+0x18c>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    fb30:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    fb34:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    fb38:	07db      	lsls	r3, r3, #31
    fb3a:	d53f      	bpl.n	fbbc <hci_vendor_cmd_handle_common+0x18c>
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    fb3c:	2118      	movs	r1, #24
    fb3e:	4628      	mov	r0, r5
    fb40:	f7ff ff52 	bl	f9e8 <hci_cmd_complete>
		rp->num_addrs = 1U;
    fb44:	2301      	movs	r3, #1
		rp->status = 0x00;
    fb46:	2200      	movs	r2, #0
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    fb48:	4605      	mov	r5, r0
		rp->num_addrs = 1U;
    fb4a:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    fb4c:	7002      	strb	r2, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    fb4e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    fb52:	1ca9      	adds	r1, r5, #2
    fb54:	f012 f840 	bl	21bd8 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    fb58:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
	dst[0] = val;
    fb5c:	71ab      	strb	r3, [r5, #6]
	dst[1] = val >> 8;
    fb5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    fb62:	f063 033f 	orn	r3, r3, #63	; 0x3f
    fb66:	71eb      	strb	r3, [r5, #7]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    fb68:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    fb6c:	3301      	adds	r3, #1
    fb6e:	f105 0308 	add.w	r3, r5, #8
    fb72:	d063      	beq.n	fc3c <hci_vendor_cmd_handle_common+0x20c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
    fb74:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    fb78:	3101      	adds	r1, #1
    fb7a:	d05f      	beq.n	fc3c <hci_vendor_cmd_handle_common+0x20c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
    fb7c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
    fb80:	3101      	adds	r1, #1
    fb82:	d05b      	beq.n	fc3c <hci_vendor_cmd_handle_common+0x20c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
    fb84:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
    fb88:	3101      	adds	r1, #1
    fb8a:	d057      	beq.n	fc3c <hci_vendor_cmd_handle_common+0x20c>
			sys_put_le32(NRF_FICR->IR[0], &addr->ir[0]);
    fb8c:	4619      	mov	r1, r3
    fb8e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    fb92:	f012 f821 	bl	21bd8 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addr->ir[4]);
    fb96:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    fb9a:	f105 010c 	add.w	r1, r5, #12
    fb9e:	f012 f81b 	bl	21bd8 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addr->ir[8]);
    fba2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    fba6:	f105 0110 	add.w	r1, r5, #16
    fbaa:	f012 f815 	bl	21bd8 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addr->ir[12]);
    fbae:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    fbb2:	f105 0114 	add.w	r1, r5, #20
    fbb6:	f012 f80f 	bl	21bd8 <sys_put_le32>
    fbba:	e761      	b.n	fa80 <hci_vendor_cmd_handle_common+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fbbc:	2102      	movs	r1, #2
    fbbe:	4628      	mov	r0, r5
    fbc0:	f7ff ff12 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    fbc4:	2300      	movs	r3, #0
    fbc6:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0U;
    fbc8:	7043      	strb	r3, [r0, #1]
    fbca:	e759      	b.n	fa80 <hci_vendor_cmd_handle_common+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fbcc:	2121      	movs	r1, #33	; 0x21
    fbce:	4610      	mov	r0, r2
    fbd0:	f7ff ff0a 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    fbd4:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fbd6:	4605      	mov	r5, r0
	(void)memset(rp->ir, 0x00, sizeof(rp->ir));
    fbd8:	2210      	movs	r2, #16
	rp->status = 0x00;
    fbda:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(rp->ir, 0x00, sizeof(rp->ir));
    fbde:	4621      	mov	r1, r4
    fbe0:	f00f fd34 	bl	1f64c <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    fbe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fbe8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    fbec:	3301      	adds	r3, #1
    fbee:	f105 0311 	add.w	r3, r5, #17
    fbf2:	d023      	beq.n	fc3c <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    fbf4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    fbf8:	3101      	adds	r1, #1
    fbfa:	d01f      	beq.n	fc3c <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    fbfc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    fc00:	3101      	adds	r1, #1
    fc02:	d01b      	beq.n	fc3c <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    fc04:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    fc08:	3101      	adds	r1, #1
    fc0a:	d017      	beq.n	fc3c <hci_vendor_cmd_handle_common+0x20c>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    fc0c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    fc10:	4619      	mov	r1, r3
    fc12:	f011 ffe1 	bl	21bd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    fc16:	f105 0115 	add.w	r1, r5, #21
    fc1a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    fc1e:	f011 ffdb 	bl	21bd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    fc22:	f105 0119 	add.w	r1, r5, #25
    fc26:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    fc2a:	f011 ffd5 	bl	21bd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    fc2e:	f105 011d 	add.w	r1, r5, #29
    fc32:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    fc36:	f011 ffcf 	bl	21bd8 <sys_put_le32>
    fc3a:	e737      	b.n	faac <hci_vendor_cmd_handle_common+0x7c>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
    fc3c:	2210      	movs	r2, #16
    fc3e:	2100      	movs	r1, #0
    fc40:	4618      	mov	r0, r3
    fc42:	f00f fd03 	bl	1f64c <memset>
    fc46:	e71b      	b.n	fa80 <hci_vendor_cmd_handle_common+0x50>
		return -EINVAL;
    fc48:	f06f 0415 	mvn.w	r4, #21
    fc4c:	e72e      	b.n	faac <hci_vendor_cmd_handle_common+0x7c>
    fc4e:	bf00      	nop
    fc50:	00028ffe 	.word	0x00028ffe

0000fc54 <hci_cmd_handle>:
{
    fc54:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    fc56:	8983      	ldrh	r3, [r0, #12]
{
    fc58:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    fc5a:	2600      	movs	r6, #0
	if (cmd->len < sizeof(*chdr)) {
    fc5c:	2b02      	cmp	r3, #2
{
    fc5e:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    fc60:	9607      	str	r6, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    fc62:	d810      	bhi.n	fc86 <hci_cmd_handle+0x32>
		BT_ERR("No HCI Command header");
    fc64:	2301      	movs	r3, #1
    fc66:	f04f 0100 	mov.w	r1, #0
    fc6a:	f363 0107 	bfi	r1, r3, #0, #8
    fc6e:	4ab3      	ldr	r2, [pc, #716]	; (ff3c <hci_cmd_handle+0x2e8>)
    fc70:	4bb3      	ldr	r3, [pc, #716]	; (ff40 <hci_cmd_handle+0x2ec>)
    fc72:	48b4      	ldr	r0, [pc, #720]	; (ff44 <hci_cmd_handle+0x2f0>)
    fc74:	1a9b      	subs	r3, r3, r2
    fc76:	08db      	lsrs	r3, r3, #3
    fc78:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI CMD packet length");
    fc7c:	f00e feea 	bl	1ea54 <log_0>
		return NULL;
    fc80:	4630      	mov	r0, r6
}
    fc82:	b00d      	add	sp, #52	; 0x34
    fc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
    fc86:	2103      	movs	r1, #3
    fc88:	3008      	adds	r0, #8
    fc8a:	f012 fd04 	bl	22696 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    fc8e:	89a2      	ldrh	r2, [r4, #12]
    fc90:	7883      	ldrb	r3, [r0, #2]
    fc92:	429a      	cmp	r2, r3
    fc94:	d20c      	bcs.n	fcb0 <hci_cmd_handle+0x5c>
		BT_ERR("Invalid HCI CMD packet length");
    fc96:	2301      	movs	r3, #1
    fc98:	f04f 0100 	mov.w	r1, #0
    fc9c:	f363 0107 	bfi	r1, r3, #0, #8
    fca0:	4aa6      	ldr	r2, [pc, #664]	; (ff3c <hci_cmd_handle+0x2e8>)
    fca2:	4ba7      	ldr	r3, [pc, #668]	; (ff40 <hci_cmd_handle+0x2ec>)
    fca4:	48a8      	ldr	r0, [pc, #672]	; (ff48 <hci_cmd_handle+0x2f4>)
    fca6:	1a9b      	subs	r3, r3, r2
    fca8:	08db      	lsrs	r3, r3, #3
    fcaa:	f363 118f 	bfi	r1, r3, #6, #10
    fcae:	e7e5      	b.n	fc7c <hci_cmd_handle+0x28>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    fcb0:	8802      	ldrh	r2, [r0, #0]
    fcb2:	49a6      	ldr	r1, [pc, #664]	; (ff4c <hci_cmd_handle+0x2f8>)
    fcb4:	b293      	uxth	r3, r2
	ocf = BT_OCF(_opcode);
    fcb6:	f3c3 0509 	ubfx	r5, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    fcba:	0a9b      	lsrs	r3, r3, #10
    fcbc:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
    fcbe:	800a      	strh	r2, [r1, #0]
	switch (BT_OGF(_opcode)) {
    fcc0:	f000 809a 	beq.w	fdf8 <hci_cmd_handle+0x1a4>
    fcc4:	d809      	bhi.n	fcda <hci_cmd_handle+0x86>
    fcc6:	2b01      	cmp	r3, #1
    fcc8:	d014      	beq.n	fcf4 <hci_cmd_handle+0xa0>
    fcca:	2b03      	cmp	r3, #3
    fccc:	d024      	beq.n	fd18 <hci_cmd_handle+0xc4>
		ccst = hci_cmd_complete(&evt, sizeof(*ccst));
    fcce:	2101      	movs	r1, #1
    fcd0:	a807      	add	r0, sp, #28
    fcd2:	f7ff fe89 	bl	f9e8 <hci_cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    fcd6:	2301      	movs	r3, #1
    fcd8:	e03d      	b.n	fd56 <hci_cmd_handle+0x102>
	switch (BT_OGF(_opcode)) {
    fcda:	2b08      	cmp	r3, #8
    fcdc:	f000 813e 	beq.w	ff5c <hci_cmd_handle+0x308>
    fce0:	2b3f      	cmp	r3, #63	; 0x3f
    fce2:	d1f4      	bne.n	fcce <hci_cmd_handle+0x7a>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    fce4:	aa07      	add	r2, sp, #28
    fce6:	4621      	mov	r1, r4
    fce8:	4628      	mov	r0, r5
    fcea:	f7ff fea1 	bl	fa30 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    fcee:	3016      	adds	r0, #22
    fcf0:	d0ed      	beq.n	fcce <hci_cmd_handle+0x7a>
    fcf2:	e04a      	b.n	fd8a <hci_cmd_handle+0x136>
	switch (ocf) {
    fcf4:	2d06      	cmp	r5, #6
    fcf6:	d006      	beq.n	fd06 <hci_cmd_handle+0xb2>
    fcf8:	2d1d      	cmp	r5, #29
    fcfa:	d1e8      	bne.n	fcce <hci_cmd_handle+0x7a>
	handle = sys_le16_to_cpu(cmd->handle);
    fcfc:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    fcfe:	8818      	ldrh	r0, [r3, #0]
    fd00:	f012 fa3c 	bl	2217c <ll_version_ind_send>
	*evt = cmd_status(status);
    fd04:	e004      	b.n	fd10 <hci_cmd_handle+0xbc>
		disconnect(cmd, evt);
    fd06:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    fd08:	7899      	ldrb	r1, [r3, #2]
    fd0a:	8818      	ldrh	r0, [r3, #0]
    fd0c:	f012 fa15 	bl	2213a <ll_terminate_ind_send>
	*evt = cmd_status(status);
    fd10:	f7ff fe00 	bl	f914 <cmd_status>
    fd14:	9007      	str	r0, [sp, #28]
	if (err == -EINVAL) {
    fd16:	e038      	b.n	fd8a <hci_cmd_handle+0x136>
	switch (ocf) {
    fd18:	2d2d      	cmp	r5, #45	; 0x2d
    fd1a:	d038      	beq.n	fd8e <hci_cmd_handle+0x13a>
    fd1c:	d81d      	bhi.n	fd5a <hci_cmd_handle+0x106>
    fd1e:	2d01      	cmp	r5, #1
    fd20:	d028      	beq.n	fd74 <hci_cmd_handle+0x120>
    fd22:	2d03      	cmp	r5, #3
    fd24:	d1d3      	bne.n	fcce <hci_cmd_handle+0x7a>
	event_mask = DEFAULT_EVENT_MASK;
    fd26:	4b8a      	ldr	r3, [pc, #552]	; (ff50 <hci_cmd_handle+0x2fc>)
    fd28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fd2c:	f641 71ff 	movw	r1, #8191	; 0x1fff
    fd30:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    fd34:	4b87      	ldr	r3, [pc, #540]	; (ff54 <hci_cmd_handle+0x300>)
    fd36:	2000      	movs	r0, #0
    fd38:	2100      	movs	r1, #0
    fd3a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    fd3e:	4b86      	ldr	r3, [pc, #536]	; (ff58 <hci_cmd_handle+0x304>)
    fd40:	201f      	movs	r0, #31
    fd42:	2100      	movs	r1, #0
    fd44:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    fd48:	f001 f916 	bl	10f78 <ll_reset>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    fd4c:	2101      	movs	r1, #1
    fd4e:	a807      	add	r0, sp, #28
    fd50:	f7ff fe4a 	bl	f9e8 <hci_cmd_complete>
	ccst->status = 0x00;
    fd54:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    fd56:	7003      	strb	r3, [r0, #0]
    fd58:	e017      	b.n	fd8a <hci_cmd_handle+0x136>
	switch (ocf) {
    fd5a:	2d7b      	cmp	r5, #123	; 0x7b
    fd5c:	d02a      	beq.n	fdb4 <hci_cmd_handle+0x160>
    fd5e:	2d7c      	cmp	r5, #124	; 0x7c
    fd60:	d03b      	beq.n	fdda <hci_cmd_handle+0x186>
    fd62:	2d63      	cmp	r5, #99	; 0x63
    fd64:	d1b3      	bne.n	fcce <hci_cmd_handle+0x7a>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    fd66:	68a0      	ldr	r0, [r4, #8]
    fd68:	f011 ff3f 	bl	21bea <sys_get_le64>
    fd6c:	4b79      	ldr	r3, [pc, #484]	; (ff54 <hci_cmd_handle+0x300>)
	le_event_mask = sys_get_le64(cmd->events);
    fd6e:	e9c3 0100 	strd	r0, r1, [r3]
    fd72:	e7eb      	b.n	fd4c <hci_cmd_handle+0xf8>
	event_mask = sys_get_le64(cmd->events);
    fd74:	68a0      	ldr	r0, [r4, #8]
    fd76:	f011 ff38 	bl	21bea <sys_get_le64>
    fd7a:	4b75      	ldr	r3, [pc, #468]	; (ff50 <hci_cmd_handle+0x2fc>)
    fd7c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    fd80:	4629      	mov	r1, r5
    fd82:	a807      	add	r0, sp, #28
    fd84:	f7ff fe30 	bl	f9e8 <hci_cmd_complete>
	ccst->status = 0x00;
    fd88:	7006      	strb	r6, [r0, #0]
	return evt;
    fd8a:	9807      	ldr	r0, [sp, #28]
    fd8c:	e779      	b.n	fc82 <hci_cmd_handle+0x2e>
		read_tx_power_level(cmd, evt);
    fd8e:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fd90:	2104      	movs	r1, #4
    fd92:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    fd94:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    fd96:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fd98:	f7ff fe26 	bl	f9e8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    fd9c:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fd9e:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    fda0:	1cc3      	adds	r3, r0, #3
    fda2:	463a      	mov	r2, r7
    fda4:	4631      	mov	r1, r6
    fda6:	2002      	movs	r0, #2
    fda8:	f011 ff03 	bl	21bb2 <ll_tx_pwr_lvl_get>
	rp->status = status;
    fdac:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    fdae:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    fdb2:	e7ea      	b.n	fd8a <hci_cmd_handle+0x136>
	handle = sys_le16_to_cpu(cmd->handle);
    fdb4:	68a3      	ldr	r3, [r4, #8]
    fdb6:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    fdb8:	a908      	add	r1, sp, #32
    fdba:	4620      	mov	r0, r4
    fdbc:	f012 fa72 	bl	222a4 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fdc0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    fdc2:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fdc4:	a807      	add	r0, sp, #28
    fdc6:	f7ff fe0f 	bl	f9e8 <hci_cmd_complete>
	rp->status = status;
    fdca:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    fdcc:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    fdd0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    fdd4:	f8a0 3003 	strh.w	r3, [r0, #3]
    fdd8:	e7d7      	b.n	fd8a <hci_cmd_handle+0x136>
		write_auth_payload_timeout(cmd, evt);
    fdda:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    fddc:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    fdde:	8859      	ldrh	r1, [r3, #2]
    fde0:	4620      	mov	r0, r4
    fde2:	f012 fa73 	bl	222cc <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    fde6:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fde8:	2103      	movs	r1, #3
    fdea:	a807      	add	r0, sp, #28
    fdec:	f7ff fdfc 	bl	f9e8 <hci_cmd_complete>
	rp->status = status;
    fdf0:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    fdf2:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
    fdf6:	e7c8      	b.n	fd8a <hci_cmd_handle+0x136>
	switch (ocf) {
    fdf8:	3d01      	subs	r5, #1
    fdfa:	2d08      	cmp	r5, #8
    fdfc:	f63f af67 	bhi.w	fcce <hci_cmd_handle+0x7a>
    fe00:	a301      	add	r3, pc, #4	; (adr r3, fe08 <hci_cmd_handle+0x1b4>)
    fe02:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    fe06:	bf00      	nop
    fe08:	0000fe2d 	.word	0x0000fe2d
    fe0c:	0000fe57 	.word	0x0000fe57
    fe10:	0000ff07 	.word	0x0000ff07
    fe14:	0000fccf 	.word	0x0000fccf
    fe18:	0000fccf 	.word	0x0000fccf
    fe1c:	0000fccf 	.word	0x0000fccf
    fe20:	0000fccf 	.word	0x0000fccf
    fe24:	0000fccf 	.word	0x0000fccf
    fe28:	0000ff23 	.word	0x0000ff23
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fe2c:	2109      	movs	r1, #9
    fe2e:	a807      	add	r0, sp, #28
    fe30:	f7ff fdda 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    fe34:	2300      	movs	r3, #0
    fe36:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    fe38:	7083      	strb	r3, [r0, #2]
    fe3a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    fe3c:	f06f 030e 	mvn.w	r3, #14
    fe40:	7143      	strb	r3, [r0, #5]
    fe42:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
    fe44:	220a      	movs	r2, #10
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    fe46:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    fe48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = LL_VERSION_NUMBER;
    fe4c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    fe4e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    fe50:	71c3      	strb	r3, [r0, #7]
    fe52:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    fe54:	e799      	b.n	fd8a <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fe56:	2141      	movs	r1, #65	; 0x41
    fe58:	a807      	add	r0, sp, #28
    fe5a:	f7ff fdc5 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    fe5e:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fe60:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fe62:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    fe64:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fe68:	f00f fbf0 	bl	1f64c <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
    fe6c:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[28] |= BIT(3);
    fe6e:	7f62      	ldrb	r2, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
    fe70:	7ee1      	ldrb	r1, [r4, #27]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    fe72:	7ea0      	ldrb	r0, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    fe74:	f063 033f 	orn	r3, r3, #63	; 0x3f
    fe78:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    fe7a:	7ae3      	ldrb	r3, [r4, #11]
    fe7c:	f043 0304 	orr.w	r3, r3, #4
    fe80:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    fe82:	7be3      	ldrb	r3, [r4, #15]
    fe84:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    fe88:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    fe8a:	7c23      	ldrb	r3, [r4, #16]
    fe8c:	f043 0302 	orr.w	r3, r3, #2
    fe90:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    fe92:	7de3      	ldrb	r3, [r4, #23]
    fe94:	f043 0304 	orr.w	r3, r3, #4
    fe98:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
    fe9a:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    fe9c:	f063 0308 	orn	r3, r3, #8
    fea0:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    fea2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[28] |= BIT(1) | BIT(2);
    fea6:	f042 020e 	orr.w	r2, r2, #14
	rp->commands[33] |= BIT(6) | BIT(7);
    feaa:	f063 030f 	orn	r3, r3, #15
	rp->commands[28] |= BIT(1) | BIT(2);
    feae:	7762      	strb	r2, [r4, #29]
	rp->commands[33] |= BIT(6) | BIT(7);
    feb0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    feb4:	7862      	ldrb	r2, [r4, #1]
	rp->commands[35] |= BIT(3);
    feb6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[0] |= BIT(5);
    feba:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    febe:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[0] |= BIT(5);
    fec2:	7062      	strb	r2, [r4, #1]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    fec4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    fec8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    fecc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    fed0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    fed4:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    fed8:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    fedc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    fee0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    fee4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    fee8:	f060 0008 	orn	r0, r0, #8
	rp->commands[26] |= BIT(0) | BIT(1);
    feec:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    fef0:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    fef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    fef8:	76a0      	strb	r0, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    fefa:	76e1      	strb	r1, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    fefc:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    ff00:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
    ff04:	e741      	b.n	fd8a <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ff06:	2109      	movs	r1, #9
    ff08:	a807      	add	r0, sp, #28
    ff0a:	f7ff fd6d 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    ff0e:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ff10:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    ff12:	2208      	movs	r2, #8
	rp->status = 0x00;
    ff14:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    ff18:	f00f fb98 	bl	1f64c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    ff1c:	2360      	movs	r3, #96	; 0x60
    ff1e:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    ff20:	e733      	b.n	fd8a <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ff22:	2107      	movs	r1, #7
    ff24:	a807      	add	r0, sp, #28
    ff26:	f7ff fd5f 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
    ff2a:	4601      	mov	r1, r0
    ff2c:	2300      	movs	r3, #0
    ff2e:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    ff32:	4618      	mov	r0, r3
    ff34:	f7ff fb76 	bl	f624 <ll_addr_get>
	if (err == -EINVAL) {
    ff38:	e727      	b.n	fd8a <hci_cmd_handle+0x136>
    ff3a:	bf00      	nop
    ff3c:	00025a6c 	.word	0x00025a6c
    ff40:	00025ab4 	.word	0x00025ab4
    ff44:	00028f91 	.word	0x00028f91
    ff48:	00028fa7 	.word	0x00028fa7
    ff4c:	20006052 	.word	0x20006052
    ff50:	2000de68 	.word	0x2000de68
    ff54:	20000000 	.word	0x20000000
    ff58:	2000de70 	.word	0x2000de70
	switch (ocf) {
    ff5c:	3d01      	subs	r5, #1
    ff5e:	2d4d      	cmp	r5, #77	; 0x4d
    ff60:	f63f aeb5 	bhi.w	fcce <hci_cmd_handle+0x7a>
    ff64:	a301      	add	r3, pc, #4	; (adr r3, ff6c <hci_cmd_handle+0x318>)
    ff66:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    ff6a:	bf00      	nop
    ff6c:	000100a5 	.word	0x000100a5
    ff70:	000100af 	.word	0x000100af
    ff74:	000100c7 	.word	0x000100c7
    ff78:	0000fccf 	.word	0x0000fccf
    ff7c:	000100eb 	.word	0x000100eb
    ff80:	00010199 	.word	0x00010199
    ff84:	000101b5 	.word	0x000101b5
    ff88:	000101c5 	.word	0x000101c5
    ff8c:	000101d1 	.word	0x000101d1
    ff90:	000101dd 	.word	0x000101dd
    ff94:	0000fccf 	.word	0x0000fccf
    ff98:	0000fccf 	.word	0x0000fccf
    ff9c:	0000fccf 	.word	0x0000fccf
    ffa0:	0000fccf 	.word	0x0000fccf
    ffa4:	00010101 	.word	0x00010101
    ffa8:	00010117 	.word	0x00010117
    ffac:	00010129 	.word	0x00010129
    ffb0:	00010131 	.word	0x00010131
    ffb4:	00010225 	.word	0x00010225
    ffb8:	0000fccf 	.word	0x0000fccf
    ffbc:	00010201 	.word	0x00010201
    ffc0:	0001021b 	.word	0x0001021b
    ffc4:	00010139 	.word	0x00010139
    ffc8:	0001015f 	.word	0x0001015f
    ffcc:	0000fccf 	.word	0x0000fccf
    ffd0:	000101e7 	.word	0x000101e7
    ffd4:	000101f7 	.word	0x000101f7
    ffd8:	00010175 	.word	0x00010175
    ffdc:	0000fccf 	.word	0x0000fccf
    ffe0:	0000fccf 	.word	0x0000fccf
    ffe4:	0000fccf 	.word	0x0000fccf
    ffe8:	00010241 	.word	0x00010241
    ffec:	0001025f 	.word	0x0001025f
    fff0:	0001026f 	.word	0x0001026f
    fff4:	0001027f 	.word	0x0001027f
    fff8:	000102a9 	.word	0x000102a9
    fffc:	0000fccf 	.word	0x0000fccf
   10000:	0000fccf 	.word	0x0000fccf
   10004:	0001039f 	.word	0x0001039f
   10008:	000103b5 	.word	0x000103b5
   1000c:	000103bd 	.word	0x000103bd
   10010:	000103cd 	.word	0x000103cd
   10014:	000103df 	.word	0x000103df
   10018:	000103fd 	.word	0x000103fd
   1001c:	0001041b 	.word	0x0001041b
   10020:	00010431 	.word	0x00010431
   10024:	000102b5 	.word	0x000102b5
   10028:	000102dd 	.word	0x000102dd
   1002c:	0001032b 	.word	0x0001032b
   10030:	00010349 	.word	0x00010349
   10034:	0000fccf 	.word	0x0000fccf
   10038:	0000fccf 	.word	0x0000fccf
   1003c:	0000fccf 	.word	0x0000fccf
   10040:	0000fccf 	.word	0x0000fccf
   10044:	0000fccf 	.word	0x0000fccf
   10048:	0000fccf 	.word	0x0000fccf
   1004c:	0000fccf 	.word	0x0000fccf
   10050:	0000fccf 	.word	0x0000fccf
   10054:	0000fccf 	.word	0x0000fccf
   10058:	0000fccf 	.word	0x0000fccf
   1005c:	0000fccf 	.word	0x0000fccf
   10060:	0000fccf 	.word	0x0000fccf
   10064:	0000fccf 	.word	0x0000fccf
   10068:	0000fccf 	.word	0x0000fccf
   1006c:	0000fccf 	.word	0x0000fccf
   10070:	0000fccf 	.word	0x0000fccf
   10074:	0000fccf 	.word	0x0000fccf
   10078:	0000fccf 	.word	0x0000fccf
   1007c:	0000fccf 	.word	0x0000fccf
   10080:	0000fccf 	.word	0x0000fccf
   10084:	0000fccf 	.word	0x0000fccf
   10088:	0000fccf 	.word	0x0000fccf
   1008c:	0000fccf 	.word	0x0000fccf
   10090:	0000fccf 	.word	0x0000fccf
   10094:	00010445 	.word	0x00010445
   10098:	0000fccf 	.word	0x0000fccf
   1009c:	0000fccf 	.word	0x0000fccf
   100a0:	0001043b 	.word	0x0001043b
	le_event_mask = sys_get_le64(cmd->events);
   100a4:	68a0      	ldr	r0, [r4, #8]
   100a6:	f011 fda0 	bl	21bea <sys_get_le64>
   100aa:	4bc0      	ldr	r3, [pc, #768]	; (103ac <__kernel_ram_size+0x3ac>)
   100ac:	e65f      	b.n	fd6e <hci_cmd_handle+0x11a>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   100ae:	2104      	movs	r1, #4
   100b0:	a807      	add	r0, sp, #28
   100b2:	f7ff fc99 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
   100b6:	2300      	movs	r3, #0
   100b8:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   100ba:	221b      	movs	r2, #27
   100bc:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   100be:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   100c0:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   100c2:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   100c4:	e661      	b.n	fd8a <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   100c6:	2109      	movs	r1, #9
   100c8:	a807      	add	r0, sp, #28
   100ca:	f7ff fc8d 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
   100ce:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   100d0:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   100d2:	2208      	movs	r2, #8
	rp->status = 0x00;
   100d4:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   100d8:	f00f fab8 	bl	1f64c <memset>
	dst[0] = val;
   100dc:	237f      	movs	r3, #127	; 0x7f
   100de:	7063      	strb	r3, [r4, #1]
	dst[1] = val >> 8;
   100e0:	2341      	movs	r3, #65	; 0x41
   100e2:	70a3      	strb	r3, [r4, #2]
	dst[2] = val >> 16;
   100e4:	2301      	movs	r3, #1
   100e6:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   100e8:	e64f      	b.n	fd8a <hci_cmd_handle+0x136>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   100ea:	68a1      	ldr	r1, [r4, #8]
   100ec:	2001      	movs	r0, #1
   100ee:	f7ff fab3 	bl	f658 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
   100f2:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   100f4:	2101      	movs	r1, #1
   100f6:	a807      	add	r0, sp, #28
   100f8:	f7ff fc76 	bl	f9e8 <hci_cmd_complete>
	ccst->status = status;
   100fc:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   100fe:	e644      	b.n	fd8a <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10100:	2102      	movs	r1, #2
   10102:	a807      	add	r0, sp, #28
   10104:	f7ff fc70 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
   10108:	2300      	movs	r3, #0
   1010a:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1010c:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   1010e:	f012 fa0d 	bl	2252c <ll_wl_size_get>
   10112:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   10114:	e639      	b.n	fd8a <hci_cmd_handle+0x136>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10116:	2101      	movs	r1, #1
   10118:	a807      	add	r0, sp, #28
   1011a:	f7ff fc65 	bl	f9e8 <hci_cmd_complete>
   1011e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   10120:	f005 fe5a 	bl	15dd8 <ll_wl_clear>
	ccst->status = ll_rl_clear();
   10124:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   10126:	e630      	b.n	fd8a <hci_cmd_handle+0x136>
	status = ll_wl_add(&cmd->addr);
   10128:	68a0      	ldr	r0, [r4, #8]
   1012a:	f006 f81b 	bl	16164 <ll_wl_add>
   1012e:	e7e0      	b.n	100f2 <__kernel_ram_size+0xf2>
	status = ll_wl_remove(&cmd->addr);
   10130:	68a0      	ldr	r0, [r4, #8]
   10132:	f005 fe89 	bl	15e48 <ll_wl_remove>
   10136:	e7dc      	b.n	100f2 <__kernel_ram_size+0xf2>
		le_encrypt(cmd, evt);
   10138:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1013a:	aa08      	add	r2, sp, #32
   1013c:	2300      	movs	r3, #0
   1013e:	f100 0110 	add.w	r1, r0, #16
   10142:	f012 f9f7 	bl	22534 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10146:	2111      	movs	r1, #17
   10148:	a807      	add	r0, sp, #28
   1014a:	f7ff fc4d 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
   1014e:	2300      	movs	r3, #0
   10150:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   10154:	2210      	movs	r2, #16
   10156:	a908      	add	r1, sp, #32
   10158:	f00f fa4e 	bl	1f5f8 <memcpy>
	if (err == -EINVAL) {
   1015c:	e615      	b.n	fd8a <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1015e:	2109      	movs	r1, #9
   10160:	a807      	add	r0, sp, #28
   10162:	f7ff fc41 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
   10166:	2300      	movs	r3, #0
   10168:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
   1016c:	2108      	movs	r1, #8
   1016e:	f000 fcd1 	bl	10b14 <bt_rand>
	if (err == -EINVAL) {
   10172:	e60a      	b.n	fd8a <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10174:	2109      	movs	r1, #9
   10176:	a807      	add	r0, sp, #28
   10178:	f7ff fc36 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
   1017c:	4601      	mov	r1, r0
   1017e:	2300      	movs	r3, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10180:	4602      	mov	r2, r0
	rp->status = 0x00;
   10182:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
   10186:	488a      	ldr	r0, [pc, #552]	; (103b0 <__kernel_ram_size+0x3b0>)
   10188:	f011 fd26 	bl	21bd8 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
   1018c:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
   10190:	1d51      	adds	r1, r2, #5
   10192:	f011 fd21 	bl	21bd8 <sys_put_le32>
	if (err == -EINVAL) {
   10196:	e5f8      	b.n	fd8a <hci_cmd_handle+0x136>
		le_set_adv_param(cmd, evt);
   10198:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   1019a:	7ba5      	ldrb	r5, [r4, #14]
   1019c:	79a3      	ldrb	r3, [r4, #6]
   1019e:	7962      	ldrb	r2, [r4, #5]
   101a0:	7921      	ldrb	r1, [r4, #4]
   101a2:	8820      	ldrh	r0, [r4, #0]
   101a4:	9502      	str	r5, [sp, #8]
   101a6:	7b65      	ldrb	r5, [r4, #13]
   101a8:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   101aa:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   101ac:	9400      	str	r4, [sp, #0]
   101ae:	f002 f8e1 	bl	12374 <ll_adv_params_set>
   101b2:	e79e      	b.n	100f2 <__kernel_ram_size+0xf2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   101b4:	2102      	movs	r1, #2
   101b6:	a807      	add	r0, sp, #28
   101b8:	f7ff fc16 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
   101bc:	2300      	movs	r3, #0
   101be:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   101c0:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   101c2:	e5e2      	b.n	fd8a <hci_cmd_handle+0x136>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   101c4:	68a1      	ldr	r1, [r4, #8]
   101c6:	f811 0b01 	ldrb.w	r0, [r1], #1
   101ca:	f002 f963 	bl	12494 <ll_adv_data_set>
   101ce:	e790      	b.n	100f2 <__kernel_ram_size+0xf2>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   101d0:	68a1      	ldr	r1, [r4, #8]
   101d2:	f811 0b01 	ldrb.w	r0, [r1], #1
   101d6:	f002 f9b5 	bl	12544 <ll_adv_scan_rsp_set>
   101da:	e78a      	b.n	100f2 <__kernel_ram_size+0xf2>
	status = ll_adv_enable(cmd->enable);
   101dc:	68a3      	ldr	r3, [r4, #8]
   101de:	7818      	ldrb	r0, [r3, #0]
   101e0:	f7f0 fbc6 	bl	970 <ll_adv_enable>
   101e4:	e785      	b.n	100f2 <__kernel_ram_size+0xf2>
	handle = sys_le16_to_cpu(cmd->handle);
   101e6:	68a2      	ldr	r2, [r4, #8]
   101e8:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   101ec:	2100      	movs	r1, #0
   101ee:	4620      	mov	r0, r4
   101f0:	f012 f954 	bl	2249c <ll_start_enc_req_send>
   101f4:	e5f7      	b.n	fde6 <hci_cmd_handle+0x192>
	handle = sys_le16_to_cpu(cmd->handle);
   101f6:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   101f8:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
   101fa:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   101fc:	2106      	movs	r1, #6
   101fe:	e7f6      	b.n	101ee <__kernel_ram_size+0x1ee>
	handle = sys_le16_to_cpu(cmd->handle);
   10200:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10202:	2108      	movs	r1, #8
   10204:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   10206:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10208:	f7ff fbee 	bl	f9e8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1020c:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1020e:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   10210:	1cc1      	adds	r1, r0, #3
   10212:	4630      	mov	r0, r6
   10214:	f011 ff7a 	bl	2210c <ll_chm_get>
   10218:	e5c8      	b.n	fdac <hci_cmd_handle+0x158>
	handle = sys_le16_to_cpu(cmd->handle);
   1021a:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   1021c:	8818      	ldrh	r0, [r3, #0]
   1021e:	f011 ff9c 	bl	2215a <ll_feature_req_send>
   10222:	e575      	b.n	fd10 <hci_cmd_handle+0xbc>
		le_conn_update(cmd, evt);
   10224:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   10226:	8911      	ldrh	r1, [r2, #8]
   10228:	8853      	ldrh	r3, [r2, #2]
   1022a:	8810      	ldrh	r0, [r2, #0]
   1022c:	9102      	str	r1, [sp, #8]
   1022e:	88d1      	ldrh	r1, [r2, #6]
   10230:	9101      	str	r1, [sp, #4]
   10232:	8892      	ldrh	r2, [r2, #4]
   10234:	9200      	str	r2, [sp, #0]
   10236:	2200      	movs	r2, #0
   10238:	4611      	mov	r1, r2
   1023a:	f011 feef 	bl	2201c <ll_conn_update>
	*evt = cmd_status(status);
   1023e:	e567      	b.n	fd10 <hci_cmd_handle+0xbc>
		le_conn_param_req_reply(cmd, evt);
   10240:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10242:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10244:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10246:	8853      	ldrh	r3, [r2, #2]
   10248:	9102      	str	r1, [sp, #8]
   1024a:	88d1      	ldrh	r1, [r2, #6]
   1024c:	9101      	str	r1, [sp, #4]
   1024e:	8892      	ldrh	r2, [r2, #4]
   10250:	9200      	str	r2, [sp, #0]
   10252:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   10254:	2102      	movs	r1, #2
   10256:	4620      	mov	r0, r4
   10258:	f011 fee0 	bl	2201c <ll_conn_update>
   1025c:	e5c3      	b.n	fde6 <hci_cmd_handle+0x192>
		le_conn_param_req_neg_reply(cmd, evt);
   1025e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10260:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   10262:	789a      	ldrb	r2, [r3, #2]
   10264:	2300      	movs	r3, #0
   10266:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1026a:	9300      	str	r3, [sp, #0]
   1026c:	e7f2      	b.n	10254 <__kernel_ram_size+0x254>
		le_set_data_len(cmd, evt);
   1026e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10270:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   10272:	889a      	ldrh	r2, [r3, #4]
   10274:	8859      	ldrh	r1, [r3, #2]
   10276:	4620      	mov	r0, r4
   10278:	f011 ff91 	bl	2219e <ll_length_req_send>
   1027c:	e5b3      	b.n	fde6 <hci_cmd_handle+0x192>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1027e:	2105      	movs	r1, #5
   10280:	a807      	add	r0, sp, #28
   10282:	f7ff fbb1 	bl	f9e8 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   10286:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10288:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   1028a:	f10d 001a 	add.w	r0, sp, #26
   1028e:	f003 f90d 	bl	134ac <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   10292:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   10296:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1029a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1029e:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->status = 0x00;
   102a2:	2300      	movs	r3, #0
   102a4:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   102a6:	e570      	b.n	fd8a <hci_cmd_handle+0x136>
		le_write_default_data_len(cmd, evt);
   102a8:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   102aa:	8859      	ldrh	r1, [r3, #2]
   102ac:	8818      	ldrh	r0, [r3, #0]
   102ae:	f003 f909 	bl	134c4 <ll_length_default_set>
   102b2:	e71e      	b.n	100f2 <__kernel_ram_size+0xf2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   102b4:	2109      	movs	r1, #9
   102b6:	a807      	add	r0, sp, #28
   102b8:	f7ff fb96 	bl	f9e8 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   102bc:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   102be:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   102c0:	f10d 021a 	add.w	r2, sp, #26
   102c4:	a906      	add	r1, sp, #24
   102c6:	f10d 0016 	add.w	r0, sp, #22
   102ca:	f011 ff9b 	bl	22204 <ll_length_max_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   102ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   102d2:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   102d6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   102da:	e7e0      	b.n	1029e <__kernel_ram_size+0x29e>
	handle = sys_le16_to_cpu(cmd->handle);
   102dc:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   102de:	2105      	movs	r1, #5
   102e0:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   102e2:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   102e4:	f7ff fb80 	bl	f9e8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   102e8:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   102ea:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   102ec:	1d02      	adds	r2, r0, #4
   102ee:	1cc1      	adds	r1, r0, #3
   102f0:	4630      	mov	r0, r6
   102f2:	f011 ff90 	bl	22216 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   102f6:	78e2      	ldrb	r2, [r4, #3]
	rp->status = status;
   102f8:	7020      	strb	r0, [r4, #0]
   102fa:	2a00      	cmp	r2, #0
   102fc:	fa92 f3a2 	rbit	r3, r2
   10300:	fab3 f383 	clz	r3, r3
   10304:	7922      	ldrb	r2, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   10306:	f8a4 5001 	strh.w	r5, [r4, #1]
   1030a:	bf08      	it	eq
   1030c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   10310:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   10312:	70e3      	strb	r3, [r4, #3]
   10314:	2a00      	cmp	r2, #0
   10316:	fa92 f3a2 	rbit	r3, r2
   1031a:	fab3 f383 	clz	r3, r3
   1031e:	bf08      	it	eq
   10320:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   10324:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   10326:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   10328:	e52f      	b.n	fd8a <hci_cmd_handle+0x136>
		le_set_default_phy(cmd, evt);
   1032a:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1032c:	781a      	ldrb	r2, [r3, #0]
   1032e:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   10330:	bf44      	itt	mi
   10332:	2107      	movmi	r1, #7
   10334:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   10336:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   10338:	bf44      	itt	mi
   1033a:	2207      	movmi	r2, #7
   1033c:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1033e:	7899      	ldrb	r1, [r3, #2]
   10340:	7858      	ldrb	r0, [r3, #1]
   10342:	f003 f8c9 	bl	134d8 <ll_phy_default_set>
   10346:	e6d4      	b.n	100f2 <__kernel_ram_size+0xf2>
		le_set_phy(cmd, evt);
   10348:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1034a:	7899      	ldrb	r1, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
   1034c:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1034e:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   10352:	07cf      	lsls	r7, r1, #31
		cmd->tx_phys |= mask_phys;
   10354:	bf42      	ittt	mi
   10356:	78da      	ldrbmi	r2, [r3, #3]
   10358:	f042 0203 	orrmi.w	r2, r2, #3
   1035c:	70da      	strbmi	r2, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1035e:	078e      	lsls	r6, r1, #30
		cmd->rx_phys |= mask_phys;
   10360:	bf48      	it	mi
   10362:	791a      	ldrbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   10364:	78d9      	ldrb	r1, [r3, #3]
		cmd->rx_phys |= mask_phys;
   10366:	bf44      	itt	mi
   10368:	f042 0203 	orrmi.w	r2, r2, #3
   1036c:	711a      	strbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1036e:	791b      	ldrb	r3, [r3, #4]
   10370:	ea41 0203 	orr.w	r2, r1, r3
   10374:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   10378:	d001      	beq.n	1037e <__kernel_ram_size+0x37e>
		*evt = cmd_status(BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL);
   1037a:	2011      	movs	r0, #17
   1037c:	e4c8      	b.n	fd10 <hci_cmd_handle+0xbc>
	if (!(cmd->tx_phys & 0x07) ||
   1037e:	074d      	lsls	r5, r1, #29
   10380:	d001      	beq.n	10386 <__kernel_ram_size+0x386>
   10382:	075a      	lsls	r2, r3, #29
   10384:	d101      	bne.n	1038a <__kernel_ram_size+0x38a>
		*evt = cmd_status(BT_HCI_ERR_INVALID_PARAM);
   10386:	2012      	movs	r0, #18
   10388:	e4c2      	b.n	fd10 <hci_cmd_handle+0xbc>
	if (phy_opts & 0x03) {
   1038a:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   1038e:	bf1c      	itt	ne
   10390:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   10394:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   10398:	f011 ff51 	bl	2223e <ll_phy_req_send>
	*evt = cmd_status(status);
   1039c:	e4b8      	b.n	fd10 <hci_cmd_handle+0xbc>
		le_add_dev_to_rl(cmd, evt);
   1039e:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   103a0:	f100 0217 	add.w	r2, r0, #23
   103a4:	1dc1      	adds	r1, r0, #7
   103a6:	f005 ff33 	bl	16210 <ll_rl_add>
   103aa:	e6a2      	b.n	100f2 <__kernel_ram_size+0xf2>
   103ac:	2000de70 	.word	0x2000de70
   103b0:	ec30cc8f 	.word	0xec30cc8f
	status = ll_rl_remove(&cmd->peer_id_addr);
   103b4:	68a0      	ldr	r0, [r4, #8]
   103b6:	f005 ffcd 	bl	16354 <ll_rl_remove>
   103ba:	e69a      	b.n	100f2 <__kernel_ram_size+0xf2>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   103bc:	2101      	movs	r1, #1
   103be:	a807      	add	r0, sp, #28
   103c0:	f7ff fb12 	bl	f9e8 <hci_cmd_complete>
   103c4:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
   103c6:	f005 fdb3 	bl	15f30 <ll_rl_clear>
   103ca:	e6ab      	b.n	10124 <__kernel_ram_size+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   103cc:	2102      	movs	r1, #2
   103ce:	a807      	add	r0, sp, #28
   103d0:	f7ff fb0a 	bl	f9e8 <hci_cmd_complete>
   103d4:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   103d6:	f012 f8ab 	bl	22530 <ll_rl_size_get>
   103da:	7060      	strb	r0, [r4, #1]
   103dc:	e761      	b.n	102a2 <__kernel_ram_size+0x2a2>
	memcpy(dst, src, sizeof(*dst));
   103de:	2207      	movs	r2, #7
   103e0:	68a1      	ldr	r1, [r4, #8]
   103e2:	a808      	add	r0, sp, #32
   103e4:	f00f f908 	bl	1f5f8 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   103e8:	2107      	movs	r1, #7
   103ea:	a807      	add	r0, sp, #28
   103ec:	f7ff fafc 	bl	f9e8 <hci_cmd_complete>
   103f0:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   103f2:	1c41      	adds	r1, r0, #1
   103f4:	a808      	add	r0, sp, #32
   103f6:	f006 f83d 	bl	16474 <ll_rl_crpa_get>
   103fa:	e693      	b.n	10124 <__kernel_ram_size+0x124>
   103fc:	2207      	movs	r2, #7
   103fe:	68a1      	ldr	r1, [r4, #8]
   10400:	a808      	add	r0, sp, #32
   10402:	f00f f8f9 	bl	1f5f8 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10406:	2107      	movs	r1, #7
   10408:	a807      	add	r0, sp, #28
   1040a:	f7ff faed 	bl	f9e8 <hci_cmd_complete>
   1040e:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   10410:	1c41      	adds	r1, r0, #1
   10412:	a808      	add	r0, sp, #32
   10414:	f006 f850 	bl	164b8 <ll_rl_lrpa_get>
   10418:	e684      	b.n	10124 <__kernel_ram_size+0x124>
	u8_t enable = cmd->enable;
   1041a:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1041c:	2101      	movs	r1, #1
   1041e:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
   10420:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10422:	f7ff fae1 	bl	f9e8 <hci_cmd_complete>
   10426:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
   10428:	4628      	mov	r0, r5
   1042a:	f005 fdbf 	bl	15fac <ll_rl_enable>
   1042e:	e679      	b.n	10124 <__kernel_ram_size+0x124>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   10430:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   10432:	8818      	ldrh	r0, [r3, #0]
   10434:	f005 fdd2 	bl	15fdc <ll_rl_timeout_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10438:	e488      	b.n	fd4c <hci_cmd_handle+0xf8>
		le_set_privacy_mode(cmd, evt);
   1043a:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1043c:	79c1      	ldrb	r1, [r0, #7]
   1043e:	f006 f855 	bl	164ec <ll_priv_mode_set>
   10442:	e656      	b.n	100f2 <__kernel_ram_size+0xf2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10444:	2103      	movs	r1, #3
   10446:	a807      	add	r0, sp, #28
   10448:	f7ff face 	bl	f9e8 <hci_cmd_complete>
	rp->status = 0x00;
   1044c:	4601      	mov	r1, r0
   1044e:	2300      	movs	r3, #0
   10450:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   10454:	3001      	adds	r0, #1
   10456:	f011 fbbb 	bl	21bd0 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   1045a:	e496      	b.n	fd8a <hci_cmd_handle+0x136>

0001045c <hci_acl_handle>:
{
   1045c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   10460:	2300      	movs	r3, #0
   10462:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   10464:	8983      	ldrh	r3, [r0, #12]
   10466:	2b03      	cmp	r3, #3
{
   10468:	4605      	mov	r5, r0
   1046a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
   1046c:	d810      	bhi.n	10490 <hci_acl_handle+0x34>
		BT_ERR("No HCI ACL header");
   1046e:	2301      	movs	r3, #1
   10470:	f04f 0100 	mov.w	r1, #0
   10474:	f363 0107 	bfi	r1, r3, #0, #8
   10478:	4a40      	ldr	r2, [pc, #256]	; (1057c <hci_acl_handle+0x120>)
   1047a:	4b41      	ldr	r3, [pc, #260]	; (10580 <hci_acl_handle+0x124>)
   1047c:	4841      	ldr	r0, [pc, #260]	; (10584 <hci_acl_handle+0x128>)
   1047e:	1a9b      	subs	r3, r3, r2
   10480:	08db      	lsrs	r3, r3, #3
   10482:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI ACL packet length");
   10486:	f00e fae5 	bl	1ea54 <log_0>
		return -EINVAL;
   1048a:	f06f 0015 	mvn.w	r0, #21
   1048e:	e046      	b.n	1051e <hci_acl_handle+0xc2>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   10490:	2104      	movs	r1, #4
   10492:	3008      	adds	r0, #8
   10494:	f012 f8ff 	bl	22696 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   10498:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   1049a:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1049c:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   104a0:	42bb      	cmp	r3, r7
   104a2:	d20c      	bcs.n	104be <hci_acl_handle+0x62>
		BT_ERR("Invalid HCI ACL packet length");
   104a4:	2301      	movs	r3, #1
   104a6:	f04f 0100 	mov.w	r1, #0
   104aa:	f363 0107 	bfi	r1, r3, #0, #8
   104ae:	4a33      	ldr	r2, [pc, #204]	; (1057c <hci_acl_handle+0x120>)
   104b0:	4b33      	ldr	r3, [pc, #204]	; (10580 <hci_acl_handle+0x124>)
   104b2:	4835      	ldr	r0, [pc, #212]	; (10588 <hci_acl_handle+0x12c>)
   104b4:	1a9b      	subs	r3, r3, r2
   104b6:	08db      	lsrs	r3, r3, #3
   104b8:	f363 118f 	bfi	r1, r3, #6, #10
   104bc:	e7e3      	b.n	10486 <hci_acl_handle+0x2a>
	node_tx = ll_tx_mem_acquire();
   104be:	f002 ff85 	bl	133cc <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   104c2:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   104c6:	4604      	mov	r4, r0
   104c8:	bb58      	cbnz	r0, 10522 <hci_acl_handle+0xc6>
		BT_ERR("Tx Buffer Overflow");
   104ca:	2301      	movs	r3, #1
   104cc:	f04f 0100 	mov.w	r1, #0
   104d0:	4a2a      	ldr	r2, [pc, #168]	; (1057c <hci_acl_handle+0x120>)
   104d2:	482e      	ldr	r0, [pc, #184]	; (1058c <hci_acl_handle+0x130>)
   104d4:	f363 0107 	bfi	r1, r3, #0, #8
   104d8:	4b29      	ldr	r3, [pc, #164]	; (10580 <hci_acl_handle+0x124>)
   104da:	1a9b      	subs	r3, r3, r2
   104dc:	08db      	lsrs	r3, r3, #3
   104de:	f363 118f 	bfi	r1, r3, #6, #10
   104e2:	f00e fab7 	bl	1ea54 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   104e6:	4b2a      	ldr	r3, [pc, #168]	; (10590 <hci_acl_handle+0x134>)
   104e8:	6819      	ldr	r1, [r3, #0]
   104ea:	4623      	mov	r3, r4
   104ec:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   104f0:	4313      	orrs	r3, r2
   104f2:	d012      	beq.n	1051a <hci_acl_handle+0xbe>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   104f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   104f8:	2001      	movs	r0, #1
   104fa:	f7f8 faa1 	bl	8a40 <bt_buf_get_rx>
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   104fe:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10500:	f8c8 0000 	str.w	r0, [r8]
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   10504:	211a      	movs	r1, #26
   10506:	f011 fb74 	bl	21bf2 <hci_evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
   1050a:	f8d8 0000 	ldr.w	r0, [r8]
   1050e:	2101      	movs	r1, #1
   10510:	3008      	adds	r0, #8
   10512:	f012 f88f 	bl	22634 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   10516:	2301      	movs	r3, #1
   10518:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   1051a:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1051e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   10522:	08b3      	lsrs	r3, r6, #2
   10524:	d1b1      	bne.n	1048a <hci_acl_handle+0x2e>
	switch (bt_acl_flags_pb(flags)) {
   10526:	b12e      	cbz	r6, 10534 <hci_acl_handle+0xd8>
   10528:	2e01      	cmp	r6, #1
   1052a:	d1ae      	bne.n	1048a <hci_acl_handle+0x2e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1052c:	7903      	ldrb	r3, [r0, #4]
   1052e:	f366 0301 	bfi	r3, r6, #0, #2
   10532:	e003      	b.n	1053c <hci_acl_handle+0xe0>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   10534:	7903      	ldrb	r3, [r0, #4]
   10536:	2202      	movs	r2, #2
   10538:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
   1053c:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1053e:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10540:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   10542:	463a      	mov	r2, r7
   10544:	1de0      	adds	r0, r4, #7
   10546:	f00f f857 	bl	1f5f8 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   1054a:	4621      	mov	r1, r4
   1054c:	f3c9 000b 	ubfx	r0, r9, #0, #12
   10550:	f002 ff48 	bl	133e4 <ll_tx_mem_enqueue>
   10554:	2800      	cmp	r0, #0
   10556:	d0e2      	beq.n	1051e <hci_acl_handle+0xc2>
		BT_ERR("Invalid Tx Enqueue");
   10558:	2301      	movs	r3, #1
   1055a:	f04f 0100 	mov.w	r1, #0
   1055e:	4a07      	ldr	r2, [pc, #28]	; (1057c <hci_acl_handle+0x120>)
   10560:	480c      	ldr	r0, [pc, #48]	; (10594 <hci_acl_handle+0x138>)
   10562:	f363 0107 	bfi	r1, r3, #0, #8
   10566:	4b06      	ldr	r3, [pc, #24]	; (10580 <hci_acl_handle+0x124>)
   10568:	1a9b      	subs	r3, r3, r2
   1056a:	08db      	lsrs	r3, r3, #3
   1056c:	f363 118f 	bfi	r1, r3, #6, #10
   10570:	f00e fa70 	bl	1ea54 <log_0>
		ll_tx_mem_release(node_tx);
   10574:	4620      	mov	r0, r4
   10576:	f002 ff2f 	bl	133d8 <ll_tx_mem_release>
		return -EINVAL;
   1057a:	e786      	b.n	1048a <hci_acl_handle+0x2e>
   1057c:	00025a6c 	.word	0x00025a6c
   10580:	00025ab4 	.word	0x00025ab4
   10584:	00028f3b 	.word	0x00028f3b
   10588:	00028f4d 	.word	0x00028f4d
   1058c:	00028f6b 	.word	0x00028f6b
   10590:	2000de68 	.word	0x2000de68
   10594:	00028f7e 	.word	0x00028f7e

00010598 <hci_acl_encode>:
	u16_t handle;
	u8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   10598:	f890 3020 	ldrb.w	r3, [r0, #32]
   1059c:	f003 0303 	and.w	r3, r3, #3
   105a0:	3b01      	subs	r3, #1
   105a2:	2b01      	cmp	r3, #1
{
   105a4:	b570      	push	{r4, r5, r6, lr}
   105a6:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
   105a8:	d81f      	bhi.n	105ea <hci_acl_encode+0x52>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   105aa:	f101 0608 	add.w	r6, r1, #8
	handle = node_rx->hdr.handle;
   105ae:	88c5      	ldrh	r5, [r0, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   105b0:	2104      	movs	r1, #4
   105b2:	4630      	mov	r0, r6
   105b4:	f012 f83e 	bl	22634 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   105b8:	f894 3020 	ldrb.w	r3, [r4, #32]
   105bc:	f003 0303 	and.w	r3, r3, #3
   105c0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   105c2:	bf0c      	ite	eq
   105c4:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   105c8:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   105cc:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   105ce:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   105d2:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   105d4:	4630      	mov	r0, r6
   105d6:	f012 f82d 	bl	22634 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   105da:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   105de:	f104 0123 	add.w	r1, r4, #35	; 0x23

	default:
		LL_ASSERT(0);
		break;
	}
}
   105e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   105e6:	f00f b807 	b.w	1f5f8 <memcpy>
		LL_ASSERT(0);
   105ea:	f640 539e 	movw	r3, #3486	; 0xd9e
   105ee:	4a06      	ldr	r2, [pc, #24]	; (10608 <hci_acl_encode+0x70>)
   105f0:	4906      	ldr	r1, [pc, #24]	; (1060c <hci_acl_encode+0x74>)
   105f2:	4807      	ldr	r0, [pc, #28]	; (10610 <hci_acl_encode+0x78>)
   105f4:	f00d f8df 	bl	1d7b6 <printk>
   105f8:	4040      	eors	r0, r0
   105fa:	f380 8811 	msr	BASEPRI, r0
   105fe:	f04f 0003 	mov.w	r0, #3
   10602:	df02      	svc	2
}
   10604:	bd70      	pop	{r4, r5, r6, pc}
   10606:	bf00      	nop
   10608:	00028f09 	.word	0x00028f09
   1060c:	0002a0ca 	.word	0x0002a0ca
   10610:	00027ff4 	.word	0x00027ff4

00010614 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   10614:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10616:	7903      	ldrb	r3, [r0, #4]
   10618:	88c6      	ldrh	r6, [r0, #6]
   1061a:	2b02      	cmp	r3, #2
{
   1061c:	b089      	sub	sp, #36	; 0x24
   1061e:	4604      	mov	r4, r0
   10620:	460d      	mov	r5, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10622:	f000 81a7 	beq.w	10974 <hci_evt_encode+0x360>
	switch (node_rx->hdr.type) {
   10626:	3b08      	subs	r3, #8
   10628:	2b06      	cmp	r3, #6
   1062a:	f200 8180 	bhi.w	1092e <hci_evt_encode+0x31a>
   1062e:	e8df f013 	tbh	[pc, r3, lsl #1]
   10632:	0007      	.short	0x0007
   10634:	00b7009a 	.word	0x00b7009a
   10638:	00f000da 	.word	0x00f000da
   1063c:	011f0104 	.word	0x011f0104
	u8_t status = node_rx->status;
   10640:	f890 7020 	ldrb.w	r7, [r0, #32]
	if (!status) {
   10644:	b947      	cbnz	r7, 10658 <hci_evt_encode+0x44>
		ll_rl_crpa_set(node_rx->peer_addr_type,
   10646:	f100 0329 	add.w	r3, r0, #41	; 0x29
   1064a:	f100 0123 	add.w	r1, r0, #35	; 0x23
   1064e:	22ff      	movs	r2, #255	; 0xff
   10650:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   10654:	f005 feec 	bl	16430 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10658:	4bbc      	ldr	r3, [pc, #752]	; (1094c <hci_evt_encode+0x338>)
   1065a:	6859      	ldr	r1, [r3, #4]
   1065c:	f04f 0c00 	mov.w	ip, #0
   10660:	4662      	mov	r2, ip
   10662:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   10666:	4313      	orrs	r3, r2
   10668:	d052      	beq.n	10710 <hci_evt_encode+0xfc>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1066a:	4bb9      	ldr	r3, [pc, #740]	; (10950 <hci_evt_encode+0x33c>)
   1066c:	f8d3 e000 	ldr.w	lr, [r3]
   10670:	f240 2001 	movw	r0, #513	; 0x201
   10674:	ea0e 0000 	and.w	r0, lr, r0
   10678:	4661      	mov	r1, ip
   1067a:	4301      	orrs	r1, r0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1067c:	f40e 7200 	and.w	r2, lr, #512	; 0x200
   10680:	4663      	mov	r3, ip
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   10682:	d045      	beq.n	10710 <hci_evt_encode+0xfc>
	if (!status) {
   10684:	b91f      	cbnz	r7, 1068e <hci_evt_encode+0x7a>
		conn_count++;
   10686:	48b3      	ldr	r0, [pc, #716]	; (10954 <hci_evt_encode+0x340>)
   10688:	6801      	ldr	r1, [r0, #0]
   1068a:	3101      	adds	r1, #1
   1068c:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1068e:	4313      	orrs	r3, r2
   10690:	d044      	beq.n	1071c <hci_evt_encode+0x108>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   10692:	4628      	mov	r0, r5
   10694:	221e      	movs	r2, #30
   10696:	210a      	movs	r1, #10
   10698:	f011 fab5 	bl	21c06 <meta_evt>
   1069c:	4605      	mov	r5, r0
		if (status) {
   1069e:	b12f      	cbz	r7, 106ac <hci_evt_encode+0x98>
			(void)memset(leecc, 0x00, sizeof(*leecc));
   106a0:	221e      	movs	r2, #30
		(void)memset(lecc, 0x00, sizeof(*lecc));
   106a2:	2100      	movs	r1, #0
   106a4:	f00e ffd2 	bl	1f64c <memset>
		lecc->status = status;
   106a8:	702f      	strb	r7, [r5, #0]
		return;
   106aa:	e031      	b.n	10710 <hci_evt_encode+0xfc>
		leecc->status = 0x00;
   106ac:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   106ae:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = node_rx->role;
   106b2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   106b6:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
   106b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   106bc:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
   106be:	2206      	movs	r2, #6
   106c0:	f104 0123 	add.w	r1, r4, #35	; 0x23
   106c4:	3005      	adds	r0, #5
   106c6:	f00e ff97 	bl	1f5f8 <memcpy>
		if ((node_rx->own_addr_type) &&
   106ca:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   106ce:	f105 000b 	add.w	r0, r5, #11
			memcpy(&leecc->local_rpa.val[0], &node_rx->own_addr[0],
   106d2:	2206      	movs	r2, #6
		if ((node_rx->own_addr_type) &&
   106d4:	b1f3      	cbz	r3, 10714 <hci_evt_encode+0x100>
   106d6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   106da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   106de:	2b40      	cmp	r3, #64	; 0x40
   106e0:	d118      	bne.n	10714 <hci_evt_encode+0x100>
			memcpy(&leecc->local_rpa.val[0], &node_rx->own_addr[0],
   106e2:	f104 0130 	add.w	r1, r4, #48	; 0x30
   106e6:	f00e ff87 	bl	1f5f8 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
   106ea:	2206      	movs	r2, #6
   106ec:	f104 0129 	add.w	r1, r4, #41	; 0x29
   106f0:	f105 0011 	add.w	r0, r5, #17
   106f4:	f00e ff80 	bl	1f5f8 <memcpy>
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   106f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   106fa:	f8a5 3017 	strh.w	r3, [r5, #23]
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
   106fe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   10700:	f8a5 3019 	strh.w	r3, [r5, #25]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   10704:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   10706:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = node_rx->sca;
   1070a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1070e:	776b      	strb	r3, [r5, #29]
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   10710:	b009      	add	sp, #36	; 0x24
   10712:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(void)memset(&leecc->local_rpa.val[0], 0x0,
   10714:	2100      	movs	r1, #0
   10716:	f00e ff99 	bl	1f64c <memset>
   1071a:	e7e6      	b.n	106ea <hci_evt_encode+0xd6>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1071c:	4628      	mov	r0, r5
   1071e:	2212      	movs	r2, #18
   10720:	2101      	movs	r1, #1
   10722:	f011 fa70 	bl	21c06 <meta_evt>
   10726:	4605      	mov	r5, r0
	if (status) {
   10728:	b10f      	cbz	r7, 1072e <hci_evt_encode+0x11a>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1072a:	2212      	movs	r2, #18
   1072c:	e7b9      	b.n	106a2 <hci_evt_encode+0x8e>
	lecc->status = 0x00;
   1072e:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   10730:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = node_rx->role;
   10734:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   10738:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
   1073a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1073e:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   10740:	2206      	movs	r2, #6
   10742:	f104 0123 	add.w	r1, r4, #35	; 0x23
   10746:	3005      	adds	r0, #5
   10748:	f00e ff56 	bl	1f5f8 <memcpy>
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   1074c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1074e:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   10752:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   10754:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   10758:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   1075a:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = node_rx->sca;
   1075e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   10762:	746b      	strb	r3, [r5, #17]
   10764:	e7d4      	b.n	10710 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   10766:	4b79      	ldr	r3, [pc, #484]	; (1094c <hci_evt_encode+0x338>)
   10768:	6819      	ldr	r1, [r3, #0]
   1076a:	2700      	movs	r7, #0
   1076c:	f001 0210 	and.w	r2, r1, #16
   10770:	463b      	mov	r3, r7
   10772:	4313      	orrs	r3, r2
   10774:	d0cc      	beq.n	10710 <hci_evt_encode+0xfc>
	hci_evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
   10776:	2204      	movs	r2, #4
   10778:	2105      	movs	r1, #5
   1077a:	4628      	mov	r0, r5
   1077c:	f011 fa39 	bl	21bf2 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   10780:	2104      	movs	r1, #4
   10782:	f105 0008 	add.w	r0, r5, #8
   10786:	f011 ff55 	bl	22634 <net_buf_simple_add>
	conn_count--;
   1078a:	4a72      	ldr	r2, [pc, #456]	; (10954 <hci_evt_encode+0x340>)
	ep->status = 0x00;
   1078c:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1078e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   10792:	f894 3020 	ldrb.w	r3, [r4, #32]
   10796:	70c3      	strb	r3, [r0, #3]
	conn_count--;
   10798:	6813      	ldr	r3, [r2, #0]
   1079a:	3b01      	subs	r3, #1
   1079c:	6013      	str	r3, [r2, #0]
   1079e:	e7b7      	b.n	10710 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   107a0:	4b6a      	ldr	r3, [pc, #424]	; (1094c <hci_evt_encode+0x338>)
   107a2:	6858      	ldr	r0, [r3, #4]
   107a4:	2100      	movs	r1, #0
   107a6:	460a      	mov	r2, r1
   107a8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   107ac:	4313      	orrs	r3, r2
   107ae:	d0af      	beq.n	10710 <hci_evt_encode+0xfc>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   107b0:	4b67      	ldr	r3, [pc, #412]	; (10950 <hci_evt_encode+0x33c>)
   107b2:	6818      	ldr	r0, [r3, #0]
   107b4:	460b      	mov	r3, r1
   107b6:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   107ba:	4313      	orrs	r3, r2
   107bc:	d0a8      	beq.n	10710 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   107be:	2209      	movs	r2, #9
   107c0:	2103      	movs	r1, #3
   107c2:	4628      	mov	r0, r5
   107c4:	f011 fa1f 	bl	21c06 <meta_evt>
	sep->status = cu->status;
   107c8:	f894 3020 	ldrb.w	r3, [r4, #32]
   107cc:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   107ce:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   107d0:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   107d4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   107d6:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   107da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	sep->handle = sys_cpu_to_le16(handle);
   107dc:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   107e0:	f8a0 3007 	strh.w	r3, [r0, #7]
   107e4:	e794      	b.n	10710 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   107e6:	4b59      	ldr	r3, [pc, #356]	; (1094c <hci_evt_encode+0x338>)
   107e8:	6859      	ldr	r1, [r3, #4]
   107ea:	2400      	movs	r4, #0
   107ec:	4622      	mov	r2, r4
   107ee:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   107f2:	4313      	orrs	r3, r2
   107f4:	d08c      	beq.n	10710 <hci_evt_encode+0xfc>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE,
   107f6:	2203      	movs	r2, #3
   107f8:	2130      	movs	r1, #48	; 0x30
   107fa:	4628      	mov	r0, r5
   107fc:	f011 f9f9 	bl	21bf2 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   10800:	2103      	movs	r1, #3
   10802:	f105 0008 	add.w	r0, r5, #8
   10806:	f011 ff15 	bl	22634 <net_buf_simple_add>
	ep->status = 0x00;
   1080a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1080c:	f8a0 6001 	strh.w	r6, [r0, #1]
   10810:	e77e      	b.n	10710 <hci_evt_encode+0xfc>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   10812:	4b51      	ldr	r3, [pc, #324]	; (10958 <hci_evt_encode+0x344>)
   10814:	6819      	ldr	r1, [r3, #0]
   10816:	2300      	movs	r3, #0
   10818:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   1081c:	4313      	orrs	r3, r2
   1081e:	f43f af77 	beq.w	10710 <hci_evt_encode+0xfc>
	hci_evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
   10822:	2202      	movs	r2, #2
   10824:	2157      	movs	r1, #87	; 0x57
   10826:	4628      	mov	r0, r5
   10828:	f011 f9e3 	bl	21bf2 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1082c:	2102      	movs	r1, #2
   1082e:	f105 0008 	add.w	r0, r5, #8
   10832:	f011 feff 	bl	22634 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   10836:	8006      	strh	r6, [r0, #0]
   10838:	e76a      	b.n	10710 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1083a:	4b44      	ldr	r3, [pc, #272]	; (1094c <hci_evt_encode+0x338>)
   1083c:	6858      	ldr	r0, [r3, #4]
   1083e:	2100      	movs	r1, #0
   10840:	460a      	mov	r2, r1
   10842:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   10846:	4313      	orrs	r3, r2
   10848:	f43f af62 	beq.w	10710 <hci_evt_encode+0xfc>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   1084c:	4b40      	ldr	r3, [pc, #256]	; (10950 <hci_evt_encode+0x33c>)
   1084e:	6818      	ldr	r0, [r3, #0]
   10850:	460b      	mov	r3, r1
   10852:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10856:	4313      	orrs	r3, r2
   10858:	f43f af5a 	beq.w	10710 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   1085c:	2203      	movs	r2, #3
   1085e:	2114      	movs	r1, #20
   10860:	4628      	mov	r0, r5
   10862:	f011 f9d0 	bl	21c06 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   10866:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   10868:	f894 3020 	ldrb.w	r3, [r4, #32]
   1086c:	7083      	strb	r3, [r0, #2]
   1086e:	e74f      	b.n	10710 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10870:	4b36      	ldr	r3, [pc, #216]	; (1094c <hci_evt_encode+0x338>)
   10872:	6858      	ldr	r0, [r3, #4]
   10874:	2100      	movs	r1, #0
   10876:	460a      	mov	r2, r1
   10878:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1087c:	4313      	orrs	r3, r2
   1087e:	d006      	beq.n	1088e <hci_evt_encode+0x27a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   10880:	4b33      	ldr	r3, [pc, #204]	; (10950 <hci_evt_encode+0x33c>)
   10882:	6818      	ldr	r0, [r3, #0]
   10884:	460b      	mov	r3, r1
   10886:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1088a:	4313      	orrs	r3, r2
   1088c:	d12c      	bne.n	108e8 <hci_evt_encode+0x2d4>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1088e:	2202      	movs	r2, #2
   10890:	f04f 0300 	mov.w	r3, #0
   10894:	f362 0307 	bfi	r3, r2, #0, #8
   10898:	4930      	ldr	r1, [pc, #192]	; (1095c <hci_evt_encode+0x348>)
   1089a:	4a31      	ldr	r2, [pc, #196]	; (10960 <hci_evt_encode+0x34c>)
   1089c:	4831      	ldr	r0, [pc, #196]	; (10964 <hci_evt_encode+0x350>)
   1089e:	9604      	str	r6, [sp, #16]
   108a0:	1a52      	subs	r2, r2, r1
   108a2:	08d2      	lsrs	r2, r2, #3
   108a4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   108a8:	f362 138f 	bfi	r3, r2, #6, #10
   108ac:	f894 2020 	ldrb.w	r2, [r4, #32]
   108b0:	9205      	str	r2, [sp, #20]
   108b2:	2900      	cmp	r1, #0
   108b4:	fa91 f2a1 	rbit	r2, r1
   108b8:	fab2 f282 	clz	r2, r2
   108bc:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   108c0:	bf08      	it	eq
   108c2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   108c6:	3201      	adds	r2, #1
   108c8:	2900      	cmp	r1, #0
   108ca:	9206      	str	r2, [sp, #24]
   108cc:	fa91 f2a1 	rbit	r2, r1
   108d0:	fab2 f282 	clz	r2, r2
   108d4:	bf08      	it	eq
   108d6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   108da:	3201      	adds	r2, #1
   108dc:	9207      	str	r2, [sp, #28]
   108de:	a904      	add	r1, sp, #16
   108e0:	2204      	movs	r2, #4
   108e2:	f00e f90b 	bl	1eafc <log_n>
		return;
   108e6:	e713      	b.n	10710 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   108e8:	2205      	movs	r2, #5
   108ea:	210c      	movs	r1, #12
   108ec:	4628      	mov	r0, r5
   108ee:	f011 f98a 	bl	21c06 <meta_evt>
	sep->status = pu->status;
   108f2:	f894 3020 	ldrb.w	r3, [r4, #32]
   108f6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   108f8:	f8a0 6001 	strh.w	r6, [r0, #1]
   108fc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   10900:	2a00      	cmp	r2, #0
   10902:	fa92 f3a2 	rbit	r3, r2
   10906:	fab3 f383 	clz	r3, r3
   1090a:	bf08      	it	eq
   1090c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   10910:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   10912:	70c3      	strb	r3, [r0, #3]
   10914:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   10918:	fa92 f3a2 	rbit	r3, r2
   1091c:	2a00      	cmp	r2, #0
   1091e:	fab3 f383 	clz	r3, r3
   10922:	bf08      	it	eq
   10924:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   10928:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   1092a:	7103      	strb	r3, [r0, #4]
   1092c:	e6f0      	b.n	10710 <hci_evt_encode+0xfc>
		LL_ASSERT(0);
   1092e:	f640 43a9 	movw	r3, #3241	; 0xca9
		LL_ASSERT(0);
   10932:	4a0d      	ldr	r2, [pc, #52]	; (10968 <hci_evt_encode+0x354>)
   10934:	490d      	ldr	r1, [pc, #52]	; (1096c <hci_evt_encode+0x358>)
   10936:	480e      	ldr	r0, [pc, #56]	; (10970 <hci_evt_encode+0x35c>)
   10938:	f00c ff3d 	bl	1d7b6 <printk>
   1093c:	4040      	eors	r0, r0
   1093e:	f380 8811 	msr	BASEPRI, r0
   10942:	f04f 0003 	mov.w	r0, #3
   10946:	df02      	svc	2
}
   10948:	e6e2      	b.n	10710 <hci_evt_encode+0xfc>
   1094a:	bf00      	nop
   1094c:	2000de68 	.word	0x2000de68
   10950:	2000de70 	.word	0x2000de70
   10954:	20000970 	.word	0x20000970
   10958:	20000000 	.word	0x20000000
   1095c:	00025a6c 	.word	0x00025a6c
   10960:	00025ab4 	.word	0x00025ab4
   10964:	00028fc5 	.word	0x00028fc5
   10968:	00028f09 	.word	0x00028f09
   1096c:	0002a0ca 	.word	0x0002a0ca
   10970:	00027ff4 	.word	0x00027ff4
	switch (pdu_data->llctrl.opcode) {
   10974:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   10978:	3b03      	subs	r3, #3
   1097a:	2b12      	cmp	r3, #18
   1097c:	f200 80a4 	bhi.w	10ac8 <hci_evt_encode+0x4b4>
   10980:	e8df f003 	tbb	[pc, r3]
   10984:	30a2a20a 	.word	0x30a2a20a
   10988:	a236a28a 	.word	0xa236a28a
   1098c:	a23ea2a2 	.word	0xa23ea2a2
   10990:	a2a2a243 	.word	0xa2a2a243
   10994:	6ba2      	.short	0x6ba2
   10996:	6b          	.byte	0x6b
   10997:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10998:	4b4d      	ldr	r3, [pc, #308]	; (10ad0 <hci_evt_encode+0x4bc>)
   1099a:	6858      	ldr	r0, [r3, #4]
   1099c:	2100      	movs	r1, #0
   1099e:	460a      	mov	r2, r1
   109a0:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   109a4:	4313      	orrs	r3, r2
   109a6:	f43f aeb3 	beq.w	10710 <hci_evt_encode+0xfc>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   109aa:	4b4a      	ldr	r3, [pc, #296]	; (10ad4 <hci_evt_encode+0x4c0>)
   109ac:	6818      	ldr	r0, [r3, #0]
   109ae:	460b      	mov	r3, r1
   109b0:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   109b4:	4313      	orrs	r3, r2
   109b6:	f43f aeab 	beq.w	10710 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   109ba:	220c      	movs	r2, #12
   109bc:	2105      	movs	r1, #5
   109be:	4628      	mov	r0, r5
   109c0:	f011 f921 	bl	21c06 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   109c4:	f104 0124 	add.w	r1, r4, #36	; 0x24
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   109c8:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   109ca:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   109cc:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   109d0:	f00e fe12 	bl	1f5f8 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
   109d4:	2202      	movs	r2, #2
   109d6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   109da:	f105 000a 	add.w	r0, r5, #10
   109de:	f00e fe0b 	bl	1f5f8 <memcpy>
   109e2:	e695      	b.n	10710 <hci_evt_encode+0xfc>
		encrypt_change(0x00, handle, buf);
   109e4:	460a      	mov	r2, r1
   109e6:	2000      	movs	r0, #0
   109e8:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   109ea:	f7fe ffdd 	bl	f9a8 <encrypt_change>
		break;
   109ee:	e68f      	b.n	10710 <hci_evt_encode+0xfc>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   109f0:	460b      	mov	r3, r1
   109f2:	4632      	mov	r2, r6
   109f4:	f100 0120 	add.w	r1, r0, #32
   109f8:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   109fa:	f7fe ffa7 	bl	f94c <le_remote_feat_complete>
		break;
   109fe:	e687      	b.n	10710 <hci_evt_encode+0xfc>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   10a00:	460a      	mov	r2, r1
   10a02:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   10a06:	4631      	mov	r1, r6
   10a08:	e7ef      	b.n	109ea <hci_evt_encode+0x3d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10a0a:	4b31      	ldr	r3, [pc, #196]	; (10ad0 <hci_evt_encode+0x4bc>)
   10a0c:	6858      	ldr	r0, [r3, #4]
   10a0e:	2100      	movs	r1, #0
   10a10:	460a      	mov	r2, r1
   10a12:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   10a16:	4313      	orrs	r3, r2
   10a18:	d006      	beq.n	10a28 <hci_evt_encode+0x414>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   10a1a:	4b2e      	ldr	r3, [pc, #184]	; (10ad4 <hci_evt_encode+0x4c0>)
   10a1c:	6818      	ldr	r0, [r3, #0]
   10a1e:	460b      	mov	r3, r1
   10a20:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10a24:	4313      	orrs	r3, r2
   10a26:	d109      	bne.n	10a3c <hci_evt_encode+0x428>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   10a28:	2300      	movs	r3, #0
   10a2a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10a2e:	9300      	str	r3, [sp, #0]
   10a30:	221a      	movs	r2, #26
   10a32:	2102      	movs	r1, #2
   10a34:	4630      	mov	r0, r6
   10a36:	f011 faf1 	bl	2201c <ll_conn_update>
		return;
   10a3a:	e669      	b.n	10710 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   10a3c:	220a      	movs	r2, #10
   10a3e:	2106      	movs	r1, #6
   10a40:	4628      	mov	r0, r5
   10a42:	f011 f8e0 	bl	21c06 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   10a46:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   10a48:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   10a4a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   10a4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10a4e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   10a50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   10a52:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   10a54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   10a56:	8103      	strh	r3, [r0, #8]
   10a58:	e65a      	b.n	10710 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10a5a:	4b1d      	ldr	r3, [pc, #116]	; (10ad0 <hci_evt_encode+0x4bc>)
   10a5c:	6858      	ldr	r0, [r3, #4]
   10a5e:	2100      	movs	r1, #0
   10a60:	460a      	mov	r2, r1
   10a62:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   10a66:	4313      	orrs	r3, r2
   10a68:	f43f ae52 	beq.w	10710 <hci_evt_encode+0xfc>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   10a6c:	4b19      	ldr	r3, [pc, #100]	; (10ad4 <hci_evt_encode+0x4c0>)
   10a6e:	6818      	ldr	r0, [r3, #0]
   10a70:	460b      	mov	r3, r1
   10a72:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10a76:	4313      	orrs	r3, r2
   10a78:	f43f ae4a 	beq.w	10710 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   10a7c:	220a      	movs	r2, #10
   10a7e:	2107      	movs	r1, #7
   10a80:	4628      	mov	r0, r5
   10a82:	f011 f8c0 	bl	21c06 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   10a86:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   10a88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   10a8a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   10a8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   10a8e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   10a90:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   10a92:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   10a94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10a96:	e7de      	b.n	10a56 <hci_evt_encode+0x442>
		le_unknown_rsp(pdu_data, handle, buf);
   10a98:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
	switch (pdu_data->llctrl.unknown_rsp.type) {
   10a9c:	290e      	cmp	r1, #14
   10a9e:	d104      	bne.n	10aaa <hci_evt_encode+0x496>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   10aa0:	462b      	mov	r3, r5
   10aa2:	4632      	mov	r2, r6
   10aa4:	2100      	movs	r1, #0
   10aa6:	201a      	movs	r0, #26
   10aa8:	e7a7      	b.n	109fa <hci_evt_encode+0x3e6>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   10aaa:	2302      	movs	r3, #2
   10aac:	f04f 0200 	mov.w	r2, #0
   10ab0:	f363 0207 	bfi	r2, r3, #0, #8
   10ab4:	4808      	ldr	r0, [pc, #32]	; (10ad8 <hci_evt_encode+0x4c4>)
   10ab6:	4b09      	ldr	r3, [pc, #36]	; (10adc <hci_evt_encode+0x4c8>)
   10ab8:	1a1b      	subs	r3, r3, r0
   10aba:	08db      	lsrs	r3, r3, #3
   10abc:	f363 128f 	bfi	r2, r3, #6, #10
   10ac0:	4807      	ldr	r0, [pc, #28]	; (10ae0 <hci_evt_encode+0x4cc>)
   10ac2:	f00d ffd4 	bl	1ea6e <log_1>
   10ac6:	e623      	b.n	10710 <hci_evt_encode+0xfc>
		LL_ASSERT(0);
   10ac8:	f640 5372 	movw	r3, #3442	; 0xd72
   10acc:	e731      	b.n	10932 <hci_evt_encode+0x31e>
   10ace:	bf00      	nop
   10ad0:	2000de68 	.word	0x2000de68
   10ad4:	2000de70 	.word	0x2000de70
   10ad8:	00025a6c 	.word	0x00025a6c
   10adc:	00025ab4 	.word	0x00025ab4
   10ae0:	00028ff1 	.word	0x00028ff1

00010ae4 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   10ae4:	4b08      	ldr	r3, [pc, #32]	; (10b08 <hci_init+0x24>)
   10ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10aea:	f641 71ff 	movw	r1, #8191	; 0x1fff
   10aee:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   10af2:	4b06      	ldr	r3, [pc, #24]	; (10b0c <hci_init+0x28>)
   10af4:	2000      	movs	r0, #0
   10af6:	2100      	movs	r1, #0
   10af8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10afc:	4b04      	ldr	r3, [pc, #16]	; (10b10 <hci_init+0x2c>)
   10afe:	201f      	movs	r0, #31
   10b00:	2100      	movs	r1, #0
   10b02:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   10b06:	4770      	bx	lr
   10b08:	2000de68 	.word	0x2000de68
   10b0c:	20000000 	.word	0x20000000
   10b10:	2000de70 	.word	0x2000de70

00010b14 <bt_rand>:
#include "hal/ecb.h"

static struct device *entropy_driver;

int bt_rand(void *buf, size_t len)
{
   10b14:	b570      	push	{r4, r5, r6, lr}
	struct device *dev = entropy_driver;
   10b16:	4c08      	ldr	r4, [pc, #32]	; (10b38 <bt_rand+0x24>)
{
   10b18:	4605      	mov	r5, r0
	struct device *dev = entropy_driver;
   10b1a:	6820      	ldr	r0, [r4, #0]
{
   10b1c:	460e      	mov	r6, r1

	if (unlikely(!dev)) {
   10b1e:	b918      	cbnz	r0, 10b28 <bt_rand+0x14>
   10b20:	4806      	ldr	r0, [pc, #24]	; (10b3c <bt_rand+0x28>)
   10b22:	f00b f819 	bl	1bb58 <z_impl_device_get_binding>
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   10b26:	6020      	str	r0, [r4, #0]
	return api->get_entropy(dev, buffer, length);
   10b28:	6843      	ldr	r3, [r0, #4]
   10b2a:	b2b2      	uxth	r2, r6
   10b2c:	4629      	mov	r1, r5
   10b2e:	681b      	ldr	r3, [r3, #0]
	}

	return entropy_get_entropy(dev, (u8_t *)buf, len);
}
   10b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10b34:	4718      	bx	r3
   10b36:	bf00      	nop
   10b38:	20000974 	.word	0x20000974
   10b3c:	0002901c 	.word	0x0002901c

00010b40 <ll_rx_link_inc_quota>:
	rx_alloc(UINT8_MAX);
}

static inline void ll_rx_link_inc_quota(int8_t delta)
{
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   10b40:	2801      	cmp	r0, #1
{
   10b42:	b538      	push	{r3, r4, r5, lr}
   10b44:	4604      	mov	r4, r0
   10b46:	4d0b      	ldr	r5, [pc, #44]	; (10b74 <ll_rx_link_inc_quota+0x34>)
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   10b48:	d10f      	bne.n	10b6a <ll_rx_link_inc_quota+0x2a>
   10b4a:	782b      	ldrb	r3, [r5, #0]
   10b4c:	2b06      	cmp	r3, #6
   10b4e:	d90c      	bls.n	10b6a <ll_rx_link_inc_quota+0x2a>
   10b50:	f240 3369 	movw	r3, #873	; 0x369
   10b54:	4a08      	ldr	r2, [pc, #32]	; (10b78 <ll_rx_link_inc_quota+0x38>)
   10b56:	4909      	ldr	r1, [pc, #36]	; (10b7c <ll_rx_link_inc_quota+0x3c>)
   10b58:	4809      	ldr	r0, [pc, #36]	; (10b80 <ll_rx_link_inc_quota+0x40>)
   10b5a:	f00c fe2c 	bl	1d7b6 <printk>
   10b5e:	4040      	eors	r0, r0
   10b60:	f380 8811 	msr	BASEPRI, r0
   10b64:	f04f 0003 	mov.w	r0, #3
   10b68:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   10b6a:	782b      	ldrb	r3, [r5, #0]
   10b6c:	441c      	add	r4, r3
   10b6e:	702c      	strb	r4, [r5, #0]
}
   10b70:	bd38      	pop	{r3, r4, r5, pc}
   10b72:	bf00      	nop
   10b74:	20000a70 	.word	0x20000a70
   10b78:	00029081 	.word	0x00029081
   10b7c:	000290b5 	.word	0x000290b5
   10b80:	00027ff4 	.word	0x00027ff4

00010b84 <rx_alloc>:

	return done;
}

static inline void rx_alloc(u8_t max)
{
   10b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8_t idx;

#if defined(CONFIG_BT_CONN)
	while (mem_link_rx.quota_pdu &&
   10b88:	4e31      	ldr	r6, [pc, #196]	; (10c50 <rx_alloc+0xcc>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10b8a:	4f32      	ldr	r7, [pc, #200]	; (10c54 <rx_alloc+0xd0>)
{
   10b8c:	4680      	mov	r8, r0
   10b8e:	46b1      	mov	r9, r6
	while (mem_link_rx.quota_pdu &&
   10b90:	7833      	ldrb	r3, [r6, #0]
   10b92:	b1b3      	cbz	r3, 10bc2 <rx_alloc+0x3e>
 */
static inline bool mfifo_enqueue_idx_get(u8_t count, u8_t first, u8_t last,
					 u8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   10b94:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
   10b96:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10b98:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   10b9a:	3401      	adds	r4, #1
   10b9c:	b2e4      	uxtb	r4, r4
		last = 0U;
   10b9e:	42a2      	cmp	r2, r4
   10ba0:	bf08      	it	eq
   10ba2:	2400      	moveq	r4, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   10ba4:	42a3      	cmp	r3, r4
   10ba6:	d00c      	beq.n	10bc2 <rx_alloc+0x3e>
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   10ba8:	482b      	ldr	r0, [pc, #172]	; (10c58 <rx_alloc+0xd4>)
   10baa:	f010 fe53 	bl	21854 <mem_acquire>
		if (!link) {
   10bae:	4605      	mov	r5, r0
   10bb0:	b138      	cbz	r0, 10bc2 <rx_alloc+0x3e>
			break;
		}

		rx = mem_acquire(&mem_pdu_rx.free);
   10bb2:	482a      	ldr	r0, [pc, #168]	; (10c5c <rx_alloc+0xd8>)
   10bb4:	f010 fe4e 	bl	21854 <mem_acquire>
		if (!rx) {
   10bb8:	bb00      	cbnz	r0, 10bfc <rx_alloc+0x78>
			mem_release(link, &mem_link_rx.free);
   10bba:	4927      	ldr	r1, [pc, #156]	; (10c58 <rx_alloc+0xd4>)
   10bbc:	4628      	mov	r0, r5
   10bbe:	f010 fe62 	bl	21886 <mem_release>

		ll_rx_link_inc_quota(-1);
	}
#endif /* CONFIG_BT_CONN */

	if (max > mem_link_rx.quota_pdu) {
   10bc2:	f899 6000 	ldrb.w	r6, [r9]

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   10bc6:	4f24      	ldr	r7, [pc, #144]	; (10c58 <rx_alloc+0xd4>)
   10bc8:	4546      	cmp	r6, r8
   10bca:	bf28      	it	cs
   10bcc:	4646      	movcs	r6, r8
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10bce:	f8df 8090 	ldr.w	r8, [pc, #144]	; 10c60 <rx_alloc+0xdc>
   10bd2:	b18e      	cbz	r6, 10bf8 <rx_alloc+0x74>
	last = last + 1;
   10bd4:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   10bd8:	f898 2001 	ldrb.w	r2, [r8, #1]
   10bdc:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   10be0:	3401      	adds	r4, #1
   10be2:	b2e4      	uxtb	r4, r4
		last = 0U;
   10be4:	42a2      	cmp	r2, r4
   10be6:	bf08      	it	eq
   10be8:	2400      	moveq	r4, #0
	if (last == first) {
   10bea:	42a3      	cmp	r3, r4
   10bec:	d004      	beq.n	10bf8 <rx_alloc+0x74>
		link = mem_acquire(&mem_link_rx.free);
   10bee:	4638      	mov	r0, r7
   10bf0:	f010 fe30 	bl	21854 <mem_acquire>
		if (!link) {
   10bf4:	4605      	mov	r5, r0
   10bf6:	b978      	cbnz	r0, 10c18 <rx_alloc+0x94>

		MFIFO_BY_IDX_ENQUEUE(pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
	}
}
   10bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link->mem = NULL;
   10bfc:	2300      	movs	r3, #0
   10bfe:	606b      	str	r3, [r5, #4]
		rx->link = link;
   10c00:	6005      	str	r5, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(u8_t *fifo, u8_t size, u8_t idx,
					void *mem, u8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10c02:	78fa      	ldrb	r2, [r7, #3]
   10c04:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10c06:	fb02 7303 	mla	r3, r2, r3, r7
   10c0a:	6058      	str	r0, [r3, #4]

	*last = idx; /* Commit: Update write index */
   10c0c:	70fc      	strb	r4, [r7, #3]
		ll_rx_link_inc_quota(-1);
   10c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10c12:	f7ff ff95 	bl	10b40 <ll_rx_link_inc_quota>
   10c16:	e7bb      	b.n	10b90 <rx_alloc+0xc>
		rx = mem_acquire(&mem_pdu_rx.free);
   10c18:	4810      	ldr	r0, [pc, #64]	; (10c5c <rx_alloc+0xd8>)
   10c1a:	f010 fe1b 	bl	21854 <mem_acquire>
		if (!rx) {
   10c1e:	b928      	cbnz	r0, 10c2c <rx_alloc+0xa8>
			mem_release(link, &mem_link_rx.free);
   10c20:	4628      	mov	r0, r5
   10c22:	490d      	ldr	r1, [pc, #52]	; (10c58 <rx_alloc+0xd4>)
}
   10c24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   10c28:	f010 be2d 	b.w	21886 <mem_release>
		rx->link = link;
   10c2c:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10c2e:	f898 2003 	ldrb.w	r2, [r8, #3]
   10c32:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10c36:	fb02 8303 	mla	r3, r2, r3, r8
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10c3a:	3e01      	subs	r6, #1
   10c3c:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   10c3e:	f888 4003 	strb.w	r4, [r8, #3]
		ll_rx_link_inc_quota(-1);
   10c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10c46:	b2f6      	uxtb	r6, r6
		ll_rx_link_inc_quota(-1);
   10c48:	f7ff ff7a 	bl	10b40 <ll_rx_link_inc_quota>
   10c4c:	e7c1      	b.n	10bd2 <rx_alloc+0x4e>
   10c4e:	bf00      	nop
   10c50:	20000a70 	.word	0x20000a70
   10c54:	2000e008 	.word	0x2000e008
   10c58:	20000a74 	.word	0x20000a74
   10c5c:	20000ac8 	.word	0x20000ac8
   10c60:	2000e01c 	.word	0x2000e01c

00010c64 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   10c64:	4b3a      	ldr	r3, [pc, #232]	; (10d50 <init_reset+0xec>)
{
   10c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   10c6a:	1d18      	adds	r0, r3, #4
   10c6c:	2203      	movs	r2, #3
   10c6e:	2138      	movs	r1, #56	; 0x38
   10c70:	f010 fdcc 	bl	2180c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   10c74:	4b37      	ldr	r3, [pc, #220]	; (10d54 <init_reset+0xf0>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10c76:	4d38      	ldr	r5, [pc, #224]	; (10d58 <init_reset+0xf4>)
		link = mem_acquire(&mem_link_done.free);
   10c78:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 10d54 <init_reset+0xf0>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   10c7c:	2203      	movs	r2, #3
   10c7e:	2108      	movs	r1, #8
   10c80:	1d18      	adds	r0, r3, #4
   10c82:	f010 fdc3 	bl	2180c <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10c86:	462e      	mov	r6, r5
	last = last + 1;
   10c88:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   10c8a:	786a      	ldrb	r2, [r5, #1]
   10c8c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   10c8e:	3401      	adds	r4, #1
   10c90:	b2e4      	uxtb	r4, r4
		last = 0U;
   10c92:	42a2      	cmp	r2, r4
   10c94:	bf08      	it	eq
   10c96:	2400      	moveq	r4, #0
	if (last == first) {
   10c98:	429c      	cmp	r4, r3
   10c9a:	d00d      	beq.n	10cb8 <init_reset+0x54>
		link = mem_acquire(&mem_link_done.free);
   10c9c:	4640      	mov	r0, r8
   10c9e:	f010 fdd9 	bl	21854 <mem_acquire>
		if (!link) {
   10ca2:	4607      	mov	r7, r0
   10ca4:	b140      	cbz	r0, 10cb8 <init_reset+0x54>
		rx = mem_acquire(&mem_done.free);
   10ca6:	482a      	ldr	r0, [pc, #168]	; (10d50 <init_reset+0xec>)
   10ca8:	f010 fdd4 	bl	21854 <mem_acquire>
		if (!rx) {
   10cac:	2800      	cmp	r0, #0
   10cae:	d146      	bne.n	10d3e <init_reset+0xda>
			mem_release(link, &mem_link_done.free);
   10cb0:	4928      	ldr	r1, [pc, #160]	; (10d54 <init_reset+0xf0>)
   10cb2:	4638      	mov	r0, r7
   10cb4:	f010 fde7 	bl	21886 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   10cb8:	4b28      	ldr	r3, [pc, #160]	; (10d5c <init_reset+0xf8>)
   10cba:	2208      	movs	r2, #8
   10cbc:	1d18      	adds	r0, r3, #4
   10cbe:	214c      	movs	r1, #76	; 0x4c
   10cc0:	f010 fda4 	bl	2180c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   10cc4:	4b26      	ldr	r3, [pc, #152]	; (10d60 <init_reset+0xfc>)
   10cc6:	220a      	movs	r2, #10
   10cc8:	1d18      	adds	r0, r3, #4
   10cca:	2108      	movs	r1, #8
   10ccc:	f010 fd9e 	bl	2180c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   10cd0:	4823      	ldr	r0, [pc, #140]	; (10d60 <init_reset+0xfc>)
   10cd2:	f010 fdbf 	bl	21854 <mem_acquire>
	LL_ASSERT(link);
   10cd6:	4604      	mov	r4, r0
   10cd8:	b960      	cbnz	r0, 10cf4 <init_reset+0x90>
   10cda:	f240 43bb 	movw	r3, #1211	; 0x4bb
   10cde:	4a21      	ldr	r2, [pc, #132]	; (10d64 <init_reset+0x100>)
   10ce0:	4921      	ldr	r1, [pc, #132]	; (10d68 <init_reset+0x104>)
   10ce2:	4822      	ldr	r0, [pc, #136]	; (10d6c <init_reset+0x108>)
   10ce4:	f00c fd67 	bl	1d7b6 <printk>
   10ce8:	4040      	eors	r0, r0
   10cea:	f380 8811 	msr	BASEPRI, r0
   10cee:	f04f 0003 	mov.w	r0, #3
   10cf2:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   10cf4:	4a1e      	ldr	r2, [pc, #120]	; (10d70 <init_reset+0x10c>)
   10cf6:	4620      	mov	r0, r4
   10cf8:	1f11      	subs	r1, r2, #4
   10cfa:	f010 fdfb 	bl	218f4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   10cfe:	4818      	ldr	r0, [pc, #96]	; (10d60 <init_reset+0xfc>)
   10d00:	f010 fda8 	bl	21854 <mem_acquire>
	LL_ASSERT(link);
   10d04:	4604      	mov	r4, r0
   10d06:	b960      	cbnz	r0, 10d22 <init_reset+0xbe>
   10d08:	f240 43c2 	movw	r3, #1218	; 0x4c2
   10d0c:	4a15      	ldr	r2, [pc, #84]	; (10d64 <init_reset+0x100>)
   10d0e:	4916      	ldr	r1, [pc, #88]	; (10d68 <init_reset+0x104>)
   10d10:	4816      	ldr	r0, [pc, #88]	; (10d6c <init_reset+0x108>)
   10d12:	f00c fd50 	bl	1d7b6 <printk>
   10d16:	4040      	eors	r0, r0
   10d18:	f380 8811 	msr	BASEPRI, r0
   10d1c:	f04f 0003 	mov.w	r0, #3
   10d20:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   10d22:	4a14      	ldr	r2, [pc, #80]	; (10d74 <init_reset+0x110>)
   10d24:	4620      	mov	r0, r4
   10d26:	1f11      	subs	r1, r2, #4
   10d28:	f010 fde4 	bl	218f4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   10d2c:	4b12      	ldr	r3, [pc, #72]	; (10d78 <init_reset+0x114>)
   10d2e:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
   10d30:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   10d32:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   10d34:	f7ff ff26 	bl	10b84 <rx_alloc>
}
   10d38:	2000      	movs	r0, #0
   10d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
   10d3e:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10d40:	78f2      	ldrb	r2, [r6, #3]
   10d42:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10d44:	fb02 6303 	mla	r3, r2, r3, r6
   10d48:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   10d4a:	70f4      	strb	r4, [r6, #3]
   10d4c:	e79c      	b.n	10c88 <init_reset+0x24>
   10d4e:	bf00      	nop
   10d50:	200009a8 	.word	0x200009a8
   10d54:	20000a54 	.word	0x20000a54
   10d58:	2000dff4 	.word	0x2000dff4
   10d5c:	20000ac8 	.word	0x20000ac8
   10d60:	20000a74 	.word	0x20000a74
   10d64:	00029081 	.word	0x00029081
   10d68:	0002952b 	.word	0x0002952b
   10d6c:	00027ff4 	.word	0x00027ff4
   10d70:	20000d38 	.word	0x20000d38
   10d74:	20000d30 	.word	0x20000d30
   10d78:	20000a70 	.word	0x20000a70

00010d7c <perform_lll_reset>:
{
   10d7c:	b510      	push	{r4, lr}
   10d7e:	4604      	mov	r4, r0
	err = lll_reset();
   10d80:	f011 f806 	bl	21d90 <lll_reset>
	LL_ASSERT(!err);
   10d84:	b160      	cbz	r0, 10da0 <perform_lll_reset+0x24>
   10d86:	f240 43d4 	movw	r3, #1236	; 0x4d4
   10d8a:	4a18      	ldr	r2, [pc, #96]	; (10dec <perform_lll_reset+0x70>)
   10d8c:	4918      	ldr	r1, [pc, #96]	; (10df0 <perform_lll_reset+0x74>)
   10d8e:	4819      	ldr	r0, [pc, #100]	; (10df4 <perform_lll_reset+0x78>)
   10d90:	f00c fd11 	bl	1d7b6 <printk>
   10d94:	4040      	eors	r0, r0
   10d96:	f380 8811 	msr	BASEPRI, r0
   10d9a:	f04f 0003 	mov.w	r0, #3
   10d9e:	df02      	svc	2
	err = lll_adv_reset();
   10da0:	f011 f8b2 	bl	21f08 <lll_adv_reset>
	LL_ASSERT(!err);
   10da4:	b160      	cbz	r0, 10dc0 <perform_lll_reset+0x44>
   10da6:	f240 43d9 	movw	r3, #1241	; 0x4d9
   10daa:	4a10      	ldr	r2, [pc, #64]	; (10dec <perform_lll_reset+0x70>)
   10dac:	4910      	ldr	r1, [pc, #64]	; (10df0 <perform_lll_reset+0x74>)
   10dae:	4811      	ldr	r0, [pc, #68]	; (10df4 <perform_lll_reset+0x78>)
   10db0:	f00c fd01 	bl	1d7b6 <printk>
   10db4:	4040      	eors	r0, r0
   10db6:	f380 8811 	msr	BASEPRI, r0
   10dba:	f04f 0003 	mov.w	r0, #3
   10dbe:	df02      	svc	2
	err = lll_conn_reset();
   10dc0:	f011 fad7 	bl	22372 <lll_conn_reset>
	LL_ASSERT(!err);
   10dc4:	b160      	cbz	r0, 10de0 <perform_lll_reset+0x64>
   10dc6:	f240 43e5 	movw	r3, #1253	; 0x4e5
   10dca:	4a08      	ldr	r2, [pc, #32]	; (10dec <perform_lll_reset+0x70>)
   10dcc:	4908      	ldr	r1, [pc, #32]	; (10df0 <perform_lll_reset+0x74>)
   10dce:	4809      	ldr	r0, [pc, #36]	; (10df4 <perform_lll_reset+0x78>)
   10dd0:	f00c fcf1 	bl	1d7b6 <printk>
   10dd4:	4040      	eors	r0, r0
   10dd6:	f380 8811 	msr	BASEPRI, r0
   10dda:	f04f 0003 	mov.w	r0, #3
   10dde:	df02      	svc	2
	z_impl_k_sem_give(sem);
   10de0:	4620      	mov	r0, r4
}
   10de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10de6:	f00b bd67 	b.w	1c8b8 <z_impl_k_sem_give>
   10dea:	bf00      	nop
   10dec:	00029081 	.word	0x00029081
   10df0:	0002912b 	.word	0x0002912b
   10df4:	00027ff4 	.word	0x00027ff4

00010df8 <tx_cmplt_get>:

#if defined(CONFIG_BT_CONN)
static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   10df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10dfc:	460d      	mov	r5, r1
	struct lll_tx *tx;
	u8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10dfe:	4e28      	ldr	r6, [pc, #160]	; (10ea0 <tx_cmplt_get+0xa8>)
					   u8_t first, u8_t last, u8_t *idx)
{
	void *p;
	u8_t i;

	if (*idx >= count) {
   10e00:	782b      	ldrb	r3, [r5, #0]
   10e02:	7871      	ldrb	r1, [r6, #1]
   10e04:	428b      	cmp	r3, r1
   10e06:	bf28      	it	cs
   10e08:	78b3      	ldrbcs	r3, [r6, #2]
{
   10e0a:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10e0c:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
   10e0e:	bf28      	it	cs
   10e10:	702b      	strbcs	r3, [r5, #0]
	}

	if (*idx == last) {
   10e12:	782b      	ldrb	r3, [r5, #0]
   10e14:	429a      	cmp	r2, r3
{
   10e16:	4691      	mov	r9, r2
   10e18:	d103      	bne.n	10e22 <tx_cmplt_get+0x2a>
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
		return 0;
   10e1a:	2700      	movs	r7, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);

	return cmplt;
}
   10e1c:	4638      	mov	r0, r7
   10e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   10e22:	1c5a      	adds	r2, r3, #1
   10e24:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   10e26:	4c1f      	ldr	r4, [pc, #124]	; (10ea4 <tx_cmplt_get+0xac>)
		i = 0U;
   10e28:	4291      	cmp	r1, r2
   10e2a:	bf08      	it	eq
   10e2c:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   10e2e:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   10e32:	702a      	strb	r2, [r5, #0]
	if (!tx) {
   10e34:	18e2      	adds	r2, r4, r3
   10e36:	d0f0      	beq.n	10e1a <tx_cmplt_get+0x22>
	*handle = tx->handle;
   10e38:	5ae3      	ldrh	r3, [r4, r3]
   10e3a:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   10e3e:	2700      	movs	r7, #0
		node_tx = tx->node;
   10e40:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   10e42:	2801      	cmp	r0, #1
   10e44:	f020 0103 	bic.w	r1, r0, #3
   10e48:	d906      	bls.n	10e58 <tx_cmplt_get+0x60>
   10e4a:	b331      	cbz	r1, 10e9a <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   10e4c:	7903      	ldrb	r3, [r0, #4]
   10e4e:	f003 0303 	and.w	r3, r3, #3
		    (((u32_t)node_tx & ~3) &&
   10e52:	3b01      	subs	r3, #1
   10e54:	2b01      	cmp	r3, #1
   10e56:	d820      	bhi.n	10e9a <tx_cmplt_get+0xa2>
			cmplt++;
   10e58:	3701      	adds	r7, #1
   10e5a:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
   10e5c:	2301      	movs	r3, #1
   10e5e:	6053      	str	r3, [r2, #4]
		if (((u32_t)node_tx & ~3)) {
   10e60:	b109      	cbz	r1, 10e66 <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   10e62:	f002 fab9 	bl	133d8 <ll_tx_mem_release>
	if (*idx >= count) {
   10e66:	782b      	ldrb	r3, [r5, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10e68:	7872      	ldrb	r2, [r6, #1]
   10e6a:	7830      	ldrb	r0, [r6, #0]
   10e6c:	4293      	cmp	r3, r2
   10e6e:	bf24      	itt	cs
   10e70:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
   10e72:	702b      	strbcs	r3, [r5, #0]
	if (*idx == last) {
   10e74:	782b      	ldrb	r3, [r5, #0]
   10e76:	4599      	cmp	r9, r3
   10e78:	d0d0      	beq.n	10e1c <tx_cmplt_get+0x24>
	i = *idx + 1;
   10e7a:	1c59      	adds	r1, r3, #1
   10e7c:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   10e7e:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   10e82:	428a      	cmp	r2, r1
   10e84:	bf08      	it	eq
   10e86:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   10e88:	18e2      	adds	r2, r4, r3
	*idx = i;
   10e8a:	7029      	strb	r1, [r5, #0]
   10e8c:	d0c6      	beq.n	10e1c <tx_cmplt_get+0x24>
   10e8e:	5ae3      	ldrh	r3, [r4, r3]
   10e90:	f8b8 1000 	ldrh.w	r1, [r8]
   10e94:	4299      	cmp	r1, r3
   10e96:	d0d3      	beq.n	10e40 <tx_cmplt_get+0x48>
   10e98:	e7c0      	b.n	10e1c <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   10e9a:	2302      	movs	r3, #2
   10e9c:	e7df      	b.n	10e5e <tx_cmplt_get+0x66>
   10e9e:	bf00      	nop
   10ea0:	2000e158 	.word	0x2000e158
   10ea4:	2000e15c 	.word	0x2000e15c

00010ea8 <ll_init>:
{
   10ea8:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   10eaa:	4b28      	ldr	r3, [pc, #160]	; (10f4c <ll_init+0xa4>)
{
   10eac:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   10eae:	6018      	str	r0, [r3, #0]
	cntr_init();
   10eb0:	f005 fda4 	bl	169fc <cntr_init>
	mayfly_init();
   10eb4:	f7fd fe1a 	bl	eaec <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   10eb8:	4a25      	ldr	r2, [pc, #148]	; (10f50 <ll_init+0xa8>)
   10eba:	2103      	movs	r1, #3
   10ebc:	7011      	strb	r1, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10ebe:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   10ec0:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   10ec2:	4924      	ldr	r1, [pc, #144]	; (10f54 <ll_init+0xac>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   10ec4:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   10ec6:	2304      	movs	r3, #4
   10ec8:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   10eca:	9105      	str	r1, [sp, #20]
   10ecc:	4922      	ldr	r1, [pc, #136]	; (10f58 <ll_init+0xb0>)
   10ece:	9104      	str	r1, [sp, #16]
   10ed0:	4922      	ldr	r1, [pc, #136]	; (10f5c <ll_init+0xb4>)
   10ed2:	9103      	str	r1, [sp, #12]
   10ed4:	4922      	ldr	r1, [pc, #136]	; (10f60 <ll_init+0xb8>)
   10ed6:	9102      	str	r1, [sp, #8]
   10ed8:	210c      	movs	r1, #12
   10eda:	e9cd 2100 	strd	r2, r1, [sp]
   10ede:	2000      	movs	r0, #0
   10ee0:	4a20      	ldr	r2, [pc, #128]	; (10f64 <ll_init+0xbc>)
   10ee2:	2105      	movs	r1, #5
   10ee4:	f7fe fa78 	bl	f3d8 <ticker_init>
	LL_ASSERT(!err);
   10ee8:	b160      	cbz	r0, 10f04 <ll_init+0x5c>
   10eea:	f240 130f 	movw	r3, #271	; 0x10f
   10eee:	4a1e      	ldr	r2, [pc, #120]	; (10f68 <ll_init+0xc0>)
   10ef0:	491e      	ldr	r1, [pc, #120]	; (10f6c <ll_init+0xc4>)
   10ef2:	481f      	ldr	r0, [pc, #124]	; (10f70 <ll_init+0xc8>)
   10ef4:	f00c fc5f 	bl	1d7b6 <printk>
   10ef8:	4040      	eors	r0, r0
   10efa:	f380 8811 	msr	BASEPRI, r0
   10efe:	f04f 0003 	mov.w	r0, #3
   10f02:	df02      	svc	2
	z_impl_k_sem_init(sem, initial_count, limit);
   10f04:	2201      	movs	r2, #1
   10f06:	2100      	movs	r1, #0
   10f08:	481a      	ldr	r0, [pc, #104]	; (10f74 <ll_init+0xcc>)
   10f0a:	f014 fa30 	bl	2536e <z_impl_k_sem_init>
	err = lll_init();
   10f0e:	f000 ff3b 	bl	11d88 <lll_init>
	if (err) {
   10f12:	4604      	mov	r4, r0
   10f14:	b9b0      	cbnz	r0, 10f44 <ll_init+0x9c>
	err = init_reset();
   10f16:	f7ff fea5 	bl	10c64 <init_reset>
	if (err) {
   10f1a:	4604      	mov	r4, r0
   10f1c:	b990      	cbnz	r0, 10f44 <ll_init+0x9c>
	err = lll_adv_init();
   10f1e:	f010 fff1 	bl	21f04 <lll_adv_init>
	if (err) {
   10f22:	4604      	mov	r4, r0
   10f24:	b970      	cbnz	r0, 10f44 <ll_init+0x9c>
	err = ull_adv_init();
   10f26:	f010 ff5f 	bl	21de8 <ull_adv_init>
	if (err) {
   10f2a:	4604      	mov	r4, r0
   10f2c:	b950      	cbnz	r0, 10f44 <ll_init+0x9c>
	err = lll_conn_init();
   10f2e:	f011 fa1e 	bl	2236e <lll_conn_init>
	if (err) {
   10f32:	4604      	mov	r4, r0
   10f34:	b930      	cbnz	r0, 10f44 <ll_init+0x9c>
	err = ull_conn_init();
   10f36:	f002 fad9 	bl	134ec <ull_conn_init>
	if (err) {
   10f3a:	4604      	mov	r4, r0
   10f3c:	b910      	cbnz	r0, 10f44 <ll_init+0x9c>
		ull_filter_reset(true);
   10f3e:	2001      	movs	r0, #1
   10f40:	f005 fc08 	bl	16754 <ull_filter_reset>
}
   10f44:	4620      	mov	r0, r4
   10f46:	b006      	add	sp, #24
   10f48:	bd10      	pop	{r4, pc}
   10f4a:	bf00      	nop
   10f4c:	20000d3c 	.word	0x20000d3c
   10f50:	20001074 	.word	0x20001074
   10f54:	000225bb 	.word	0x000225bb
   10f58:	000173dd 	.word	0x000173dd
   10f5c:	00017385 	.word	0x00017385
   10f60:	20000e34 	.word	0x20000e34
   10f64:	20000d58 	.word	0x20000d58
   10f68:	00029081 	.word	0x00029081
   10f6c:	0002912b 	.word	0x0002912b
   10f70:	00027ff4 	.word	0x00027ff4
   10f74:	20000d40 	.word	0x20000d40

00010f78 <ll_reset>:
{
   10f78:	b510      	push	{r4, lr}
   10f7a:	b086      	sub	sp, #24
	err = ull_adv_reset();
   10f7c:	f010 ff36 	bl	21dec <ull_adv_reset>
	LL_ASSERT(!err);
   10f80:	b160      	cbz	r0, 10f9c <ll_reset+0x24>
   10f82:	f240 135d 	movw	r3, #349	; 0x15d
   10f86:	4a2d      	ldr	r2, [pc, #180]	; (1103c <ll_reset+0xc4>)
   10f88:	492d      	ldr	r1, [pc, #180]	; (11040 <ll_reset+0xc8>)
   10f8a:	482e      	ldr	r0, [pc, #184]	; (11044 <ll_reset+0xcc>)
   10f8c:	f00c fc13 	bl	1d7b6 <printk>
   10f90:	4040      	eors	r0, r0
   10f92:	f380 8811 	msr	BASEPRI, r0
   10f96:	f04f 0003 	mov.w	r0, #3
   10f9a:	df02      	svc	2
	err = ull_conn_reset();
   10f9c:	f002 fab8 	bl	13510 <ull_conn_reset>
	LL_ASSERT(!err);
   10fa0:	b160      	cbz	r0, 10fbc <ll_reset+0x44>
   10fa2:	f240 137d 	movw	r3, #381	; 0x17d
   10fa6:	4a25      	ldr	r2, [pc, #148]	; (1103c <ll_reset+0xc4>)
   10fa8:	4925      	ldr	r1, [pc, #148]	; (11040 <ll_reset+0xc8>)
   10faa:	4826      	ldr	r0, [pc, #152]	; (11044 <ll_reset+0xcc>)
   10fac:	f00c fc03 	bl	1d7b6 <printk>
   10fb0:	4040      	eors	r0, r0
   10fb2:	f380 8811 	msr	BASEPRI, r0
   10fb6:	f04f 0003 	mov.w	r0, #3
   10fba:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   10fbc:	4b22      	ldr	r3, [pc, #136]	; (11048 <ll_reset+0xd0>)
   10fbe:	2400      	movs	r4, #0
   10fc0:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   10fc2:	4620      	mov	r0, r4
   10fc4:	f005 fbc6 	bl	16754 <ull_filter_reset>
	MFIFO_INIT(prep);
   10fc8:	4b20      	ldr	r3, [pc, #128]	; (1104c <ll_reset+0xd4>)
   10fca:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   10fcc:	4b20      	ldr	r3, [pc, #128]	; (11050 <ll_reset+0xd8>)
   10fce:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   10fd0:	4b20      	ldr	r3, [pc, #128]	; (11054 <ll_reset+0xdc>)
   10fd2:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   10fd4:	4b20      	ldr	r3, [pc, #128]	; (11058 <ll_reset+0xe0>)
   10fd6:	805c      	strh	r4, [r3, #2]
   10fd8:	2201      	movs	r2, #1
   10fda:	4621      	mov	r1, r4
   10fdc:	4668      	mov	r0, sp
   10fde:	f014 f9c6 	bl	2536e <z_impl_k_sem_init>
		mfy.param = &sem;
   10fe2:	4b1e      	ldr	r3, [pc, #120]	; (1105c <ll_reset+0xe4>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   10fe4:	4622      	mov	r2, r4
   10fe6:	4621      	mov	r1, r4
   10fe8:	2003      	movs	r0, #3
		mfy.param = &sem;
   10fea:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   10fee:	f7fd fdcf 	bl	eb90 <mayfly_enqueue>
		LL_ASSERT(!retval);
   10ff2:	b160      	cbz	r0, 1100e <ll_reset+0x96>
   10ff4:	f240 13af 	movw	r3, #431	; 0x1af
   10ff8:	4a10      	ldr	r2, [pc, #64]	; (1103c <ll_reset+0xc4>)
   10ffa:	4919      	ldr	r1, [pc, #100]	; (11060 <ll_reset+0xe8>)
   10ffc:	4811      	ldr	r0, [pc, #68]	; (11044 <ll_reset+0xcc>)
   10ffe:	f00c fbda 	bl	1d7b6 <printk>
   11002:	4040      	eors	r0, r0
   11004:	f380 8811 	msr	BASEPRI, r0
   11008:	f04f 0003 	mov.w	r0, #3
   1100c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1100e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11012:	4668      	mov	r0, sp
   11014:	f00b fc7c 	bl	1c910 <z_impl_k_sem_take>
	err = init_reset();
   11018:	f7ff fe24 	bl	10c64 <init_reset>
	LL_ASSERT(!err);
   1101c:	b160      	cbz	r0, 11038 <ll_reset+0xc0>
   1101e:	f240 13bb 	movw	r3, #443	; 0x1bb
   11022:	4a06      	ldr	r2, [pc, #24]	; (1103c <ll_reset+0xc4>)
   11024:	4906      	ldr	r1, [pc, #24]	; (11040 <ll_reset+0xc8>)
   11026:	4807      	ldr	r0, [pc, #28]	; (11044 <ll_reset+0xcc>)
   11028:	f00c fbc5 	bl	1d7b6 <printk>
   1102c:	4040      	eors	r0, r0
   1102e:	f380 8811 	msr	BASEPRI, r0
   11032:	f04f 0003 	mov.w	r0, #3
   11036:	df02      	svc	2
}
   11038:	b006      	add	sp, #24
   1103a:	bd10      	pop	{r4, pc}
   1103c:	00029081 	.word	0x00029081
   11040:	0002912b 	.word	0x0002912b
   11044:	00027ff4 	.word	0x00027ff4
   11048:	2000e158 	.word	0x2000e158
   1104c:	2000e034 	.word	0x2000e034
   11050:	2000dff4 	.word	0x2000dff4
   11054:	2000e01c 	.word	0x2000e01c
   11058:	2000e008 	.word	0x2000e008
   1105c:	2000e17c 	.word	0x2000e17c
   11060:	0002903a 	.word	0x0002903a

00011064 <ll_rx_get>:
{
   11064:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   11068:	4d25      	ldr	r5, [pc, #148]	; (11100 <ll_rx_get+0x9c>)
   1106a:	4e26      	ldr	r6, [pc, #152]	; (11104 <ll_rx_get+0xa0>)
{
   1106c:	4680      	mov	r8, r0
   1106e:	460f      	mov	r7, r1
   11070:	46aa      	mov	sl, r5
	*node_rx = NULL;
   11072:	2300      	movs	r3, #0
   11074:	f8c8 3000 	str.w	r3, [r8]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   11078:	aa01      	add	r2, sp, #4
   1107a:	e9d5 0100 	ldrd	r0, r1, [r5]
   1107e:	f010 fc4e 	bl	2191e <memq_peek>
	if (link) {
   11082:	4681      	mov	r9, r0
   11084:	b3a0      	cbz	r0, 110f0 <ll_rx_get+0x8c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   11086:	9b01      	ldr	r3, [sp, #4]
   11088:	491f      	ldr	r1, [pc, #124]	; (11108 <ll_rx_get+0xa4>)
   1108a:	781a      	ldrb	r2, [r3, #0]
   1108c:	4638      	mov	r0, r7
   1108e:	f7ff feb3 	bl	10df8 <tx_cmplt_get>
		if (!cmplt) {
   11092:	4604      	mov	r4, r0
   11094:	bb40      	cbnz	r0, 110e8 <ll_rx_get+0x84>
			f = mfifo_tx_ack.f;
   11096:	78b3      	ldrb	r3, [r6, #2]
   11098:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   1109c:	78f2      	ldrb	r2, [r6, #3]
   1109e:	f10d 0101 	add.w	r1, sp, #1
   110a2:	f10d 0002 	add.w	r0, sp, #2
   110a6:	f7ff fea7 	bl	10df8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   110aa:	b9cc      	cbnz	r4, 110e0 <ll_rx_get+0x7c>
			} while ((cmplt_prev != 0U) ||
   110ac:	b9c0      	cbnz	r0, 110e0 <ll_rx_get+0x7c>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   110ae:	9b01      	ldr	r3, [sp, #4]
   110b0:	791a      	ldrb	r2, [r3, #4]
   110b2:	2a03      	cmp	r2, #3
   110b4:	d116      	bne.n	110e4 <ll_rx_get+0x80>
				(void)memq_dequeue(memq_ll_rx.tail,
   110b6:	4622      	mov	r2, r4
   110b8:	4629      	mov	r1, r5
   110ba:	f8da 0004 	ldr.w	r0, [sl, #4]
   110be:	f010 fc36 	bl	2192e <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   110c2:	4912      	ldr	r1, [pc, #72]	; (1110c <ll_rx_get+0xa8>)
   110c4:	4648      	mov	r0, r9
   110c6:	f010 fbde 	bl	21886 <mem_release>
				ll_rx_link_inc_quota(1);
   110ca:	2001      	movs	r0, #1
   110cc:	f7ff fd38 	bl	10b40 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   110d0:	9801      	ldr	r0, [sp, #4]
   110d2:	490f      	ldr	r1, [pc, #60]	; (11110 <ll_rx_get+0xac>)
   110d4:	f010 fbd7 	bl	21886 <mem_release>
				rx_alloc(1);
   110d8:	2001      	movs	r0, #1
   110da:	f7ff fd53 	bl	10b84 <rx_alloc>
				goto ll_rx_get_again;
   110de:	e7c8      	b.n	11072 <ll_rx_get+0xe>
{
   110e0:	4604      	mov	r4, r0
   110e2:	e7db      	b.n	1109c <ll_rx_get+0x38>
			*node_rx = rx;
   110e4:	f8c8 3000 	str.w	r3, [r8]
}
   110e8:	4620      	mov	r0, r4
   110ea:	b002      	add	sp, #8
   110ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   110f0:	78f2      	ldrb	r2, [r6, #3]
   110f2:	4905      	ldr	r1, [pc, #20]	; (11108 <ll_rx_get+0xa4>)
   110f4:	4638      	mov	r0, r7
   110f6:	f7ff fe7f 	bl	10df8 <tx_cmplt_get>
   110fa:	4604      	mov	r4, r0
   110fc:	e7f4      	b.n	110e8 <ll_rx_get+0x84>
   110fe:	bf00      	nop
   11100:	20000d2c 	.word	0x20000d2c
   11104:	2000e158 	.word	0x2000e158
   11108:	2000e15a 	.word	0x2000e15a
   1110c:	20000a74 	.word	0x20000a74
   11110:	20000ac8 	.word	0x20000ac8

00011114 <ll_rx_dequeue>:
{
   11114:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11116:	4954      	ldr	r1, [pc, #336]	; (11268 <ll_rx_dequeue+0x154>)
	struct node_rx_hdr *rx = NULL;
   11118:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1111a:	aa01      	add	r2, sp, #4
   1111c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1111e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11120:	f010 fc05 	bl	2192e <memq_dequeue>
	LL_ASSERT(link);
   11124:	4604      	mov	r4, r0
   11126:	b960      	cbnz	r0, 11142 <ll_rx_dequeue+0x2e>
   11128:	f240 230d 	movw	r3, #525	; 0x20d
   1112c:	4a4f      	ldr	r2, [pc, #316]	; (1126c <ll_rx_dequeue+0x158>)
   1112e:	4950      	ldr	r1, [pc, #320]	; (11270 <ll_rx_dequeue+0x15c>)
   11130:	4850      	ldr	r0, [pc, #320]	; (11274 <ll_rx_dequeue+0x160>)
   11132:	f00c fb40 	bl	1d7b6 <printk>
   11136:	4040      	eors	r0, r0
   11138:	f380 8811 	msr	BASEPRI, r0
   1113c:	f04f 0003 	mov.w	r0, #3
   11140:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   11142:	494d      	ldr	r1, [pc, #308]	; (11278 <ll_rx_dequeue+0x164>)
   11144:	4620      	mov	r0, r4
   11146:	f010 fb9e 	bl	21886 <mem_release>
	switch (rx->type) {
   1114a:	9b01      	ldr	r3, [sp, #4]
   1114c:	7919      	ldrb	r1, [r3, #4]
   1114e:	290e      	cmp	r1, #14
   11150:	f200 8084 	bhi.w	1125c <ll_rx_dequeue+0x148>
   11154:	2201      	movs	r2, #1
   11156:	408a      	lsls	r2, r1
   11158:	f647 6005 	movw	r0, #32261	; 0x7e05
   1115c:	4202      	tst	r2, r0
   1115e:	d16d      	bne.n	1123c <ll_rx_dequeue+0x128>
   11160:	05d2      	lsls	r2, r2, #23
   11162:	d57b      	bpl.n	1125c <ll_rx_dequeue+0x148>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   11164:	f893 2020 	ldrb.w	r2, [r3, #32]
   11168:	2a3c      	cmp	r2, #60	; 0x3c
   1116a:	d003      	beq.n	11174 <ll_rx_dequeue+0x60>
   1116c:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   11170:	2900      	cmp	r1, #0
   11172:	d055      	beq.n	11220 <ll_rx_dequeue+0x10c>
			struct lll_adv *lll = ftr->param;
   11174:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   11176:	2a3c      	cmp	r2, #60	; 0x3c
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   11178:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1117a:	d146      	bne.n	1120a <ll_rx_dequeue+0xf6>
				conn_lll = lll->conn;
   1117c:	68b4      	ldr	r4, [r6, #8]
				LL_ASSERT(conn_lll);
   1117e:	b964      	cbnz	r4, 1119a <ll_rx_dequeue+0x86>
   11180:	f240 2326 	movw	r3, #550	; 0x226
   11184:	4a39      	ldr	r2, [pc, #228]	; (1126c <ll_rx_dequeue+0x158>)
   11186:	493d      	ldr	r1, [pc, #244]	; (1127c <ll_rx_dequeue+0x168>)
   11188:	483a      	ldr	r0, [pc, #232]	; (11274 <ll_rx_dequeue+0x160>)
   1118a:	f00c fb14 	bl	1d7b6 <printk>
   1118e:	4040      	eors	r0, r0
   11190:	f380 8811 	msr	BASEPRI, r0
   11194:	f04f 0003 	mov.w	r0, #3
   11198:	df02      	svc	2
				lll->conn = NULL;
   1119a:	2300      	movs	r3, #0
   1119c:	60b3      	str	r3, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   1119e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   111a0:	b163      	cbz	r3, 111bc <ll_rx_dequeue+0xa8>
   111a2:	f240 2329 	movw	r3, #553	; 0x229
   111a6:	4a31      	ldr	r2, [pc, #196]	; (1126c <ll_rx_dequeue+0x158>)
   111a8:	4935      	ldr	r1, [pc, #212]	; (11280 <ll_rx_dequeue+0x16c>)
   111aa:	4832      	ldr	r0, [pc, #200]	; (11274 <ll_rx_dequeue+0x160>)
   111ac:	f00c fb03 	bl	1d7b6 <printk>
   111b0:	4040      	eors	r0, r0
   111b2:	f380 8811 	msr	BASEPRI, r0
   111b6:	f04f 0003 	mov.w	r0, #3
   111ba:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   111bc:	f104 0150 	add.w	r1, r4, #80	; 0x50
   111c0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   111c4:	f010 fb99 	bl	218fa <memq_deinit>
				LL_ASSERT(link);
   111c8:	4606      	mov	r6, r0
   111ca:	b960      	cbnz	r0, 111e6 <ll_rx_dequeue+0xd2>
   111cc:	f44f 730b 	mov.w	r3, #556	; 0x22c
   111d0:	4a26      	ldr	r2, [pc, #152]	; (1126c <ll_rx_dequeue+0x158>)
   111d2:	4927      	ldr	r1, [pc, #156]	; (11270 <ll_rx_dequeue+0x15c>)
   111d4:	4827      	ldr	r0, [pc, #156]	; (11274 <ll_rx_dequeue+0x160>)
   111d6:	f00c faee 	bl	1d7b6 <printk>
   111da:	4040      	eors	r0, r0
   111dc:	f380 8811 	msr	BASEPRI, r0
   111e0:	f04f 0003 	mov.w	r0, #3
   111e4:	df02      	svc	2
				conn_lll->link_tx_free = link;
   111e6:	65e6      	str	r6, [r4, #92]	; 0x5c
				ll_conn_release(conn);
   111e8:	6820      	ldr	r0, [r4, #0]
   111ea:	f002 f8d9 	bl	133a0 <ll_conn_release>
			adv->is_enabled = 0U;
   111ee:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   111f2:	f36f 0300 	bfc	r3, #0, #1
   111f6:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
			      ull_adv_is_enabled(0));
   111fa:	2000      	movs	r0, #0
   111fc:	f010 fdfb 	bl	21df6 <ull_adv_is_enabled>
			if (!bm) {
   11200:	b908      	cbnz	r0, 11206 <ll_rx_dequeue+0xf2>
				ull_filter_adv_scan_state_cb(0);
   11202:	f004 fef3 	bl	15fec <ull_filter_adv_scan_state_cb>
}
   11206:	b002      	add	sp, #8
   11208:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   1120a:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
   1120e:	2800      	cmp	r0, #0
   11210:	d0ed      	beq.n	111ee <ll_rx_dequeue+0xda>
					adv->node_rx_cc_free = NULL;
   11212:	2300      	movs	r3, #0
   11214:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
					mem_release(rx_free, &mem_pdu_rx.free);
   11218:	491a      	ldr	r1, [pc, #104]	; (11284 <ll_rx_dequeue+0x170>)
   1121a:	f010 fb34 	bl	21886 <mem_release>
   1121e:	e7e6      	b.n	111ee <ll_rx_dequeue+0xda>
			LL_ASSERT(0);
   11220:	f44f 7312 	mov.w	r3, #584	; 0x248
   11224:	4a11      	ldr	r2, [pc, #68]	; (1126c <ll_rx_dequeue+0x158>)
   11226:	4918      	ldr	r1, [pc, #96]	; (11288 <ll_rx_dequeue+0x174>)
   11228:	4812      	ldr	r0, [pc, #72]	; (11274 <ll_rx_dequeue+0x160>)
   1122a:	f00c fac4 	bl	1d7b6 <printk>
   1122e:	4040      	eors	r0, r0
   11230:	f380 8811 	msr	BASEPRI, r0
   11234:	f04f 0003 	mov.w	r0, #3
   11238:	df02      	svc	2
   1123a:	e7de      	b.n	111fa <ll_rx_dequeue+0xe6>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1123c:	2900      	cmp	r1, #0
   1123e:	d1e2      	bne.n	11206 <ll_rx_dequeue+0xf2>
   11240:	4a0a      	ldr	r2, [pc, #40]	; (1126c <ll_rx_dequeue+0x158>)
   11242:	4912      	ldr	r1, [pc, #72]	; (1128c <ll_rx_dequeue+0x178>)
   11244:	f240 2399 	movw	r3, #665	; 0x299
		LL_ASSERT(0);
   11248:	480a      	ldr	r0, [pc, #40]	; (11274 <ll_rx_dequeue+0x160>)
   1124a:	f00c fab4 	bl	1d7b6 <printk>
   1124e:	4040      	eors	r0, r0
   11250:	f380 8811 	msr	BASEPRI, r0
   11254:	f04f 0003 	mov.w	r0, #3
   11258:	df02      	svc	2
}
   1125a:	e7d4      	b.n	11206 <ll_rx_dequeue+0xf2>
		LL_ASSERT(0);
   1125c:	f240 239d 	movw	r3, #669	; 0x29d
   11260:	4a02      	ldr	r2, [pc, #8]	; (1126c <ll_rx_dequeue+0x158>)
   11262:	4909      	ldr	r1, [pc, #36]	; (11288 <ll_rx_dequeue+0x174>)
   11264:	e7f0      	b.n	11248 <ll_rx_dequeue+0x134>
   11266:	bf00      	nop
   11268:	20000d2c 	.word	0x20000d2c
   1126c:	00029081 	.word	0x00029081
   11270:	0002952b 	.word	0x0002952b
   11274:	00027ff4 	.word	0x00027ff4
   11278:	20000a74 	.word	0x20000a74
   1127c:	00029042 	.word	0x00029042
   11280:	0002904b 	.word	0x0002904b
   11284:	20000ac8 	.word	0x20000ac8
   11288:	0002a0ca 	.word	0x0002a0ca
   1128c:	00029063 	.word	0x00029063

00011290 <ll_rx_mem_release>:
{
   11290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   11294:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   11296:	4d44      	ldr	r5, [pc, #272]	; (113a8 <ll_rx_mem_release+0x118>)
   11298:	f8df 8128 	ldr.w	r8, [pc, #296]	; 113c4 <ll_rx_mem_release+0x134>
   1129c:	4e43      	ldr	r6, [pc, #268]	; (113ac <ll_rx_mem_release+0x11c>)
{
   1129e:	4607      	mov	r7, r0
	while (rx) {
   112a0:	b92c      	cbnz	r4, 112ae <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   112a2:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   112a4:	20ff      	movs	r0, #255	; 0xff
}
   112a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   112aa:	f7ff bc6b 	b.w	10b84 <rx_alloc>
		switch (rx_free->type) {
   112ae:	7922      	ldrb	r2, [r4, #4]
		rx = rx->next;
   112b0:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   112b4:	2a0e      	cmp	r2, #14
   112b6:	d868      	bhi.n	1138a <ll_rx_mem_release+0xfa>
   112b8:	2301      	movs	r3, #1
   112ba:	4093      	lsls	r3, r2
   112bc:	f647 4205 	movw	r2, #31749	; 0x7c05
   112c0:	4213      	tst	r3, r2
   112c2:	d11b      	bne.n	112fc <ll_rx_mem_release+0x6c>
   112c4:	059a      	lsls	r2, r3, #22
   112c6:	d42c      	bmi.n	11322 <ll_rx_mem_release+0x92>
   112c8:	05db      	lsls	r3, r3, #23
   112ca:	d55e      	bpl.n	1138a <ll_rx_mem_release+0xfa>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   112cc:	f894 3020 	ldrb.w	r3, [r4, #32]
   112d0:	2b3c      	cmp	r3, #60	; 0x3c
   112d2:	d105      	bne.n	112e0 <ll_rx_mem_release+0x50>
			mem_release(rx_free, &mem_pdu_rx.free);
   112d4:	4936      	ldr	r1, [pc, #216]	; (113b0 <ll_rx_mem_release+0x120>)
   112d6:	4620      	mov	r0, r4
   112d8:	f010 fad5 	bl	21886 <mem_release>
{
   112dc:	464c      	mov	r4, r9
   112de:	e7df      	b.n	112a0 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   112e0:	b163      	cbz	r3, 112fc <ll_rx_mem_release+0x6c>
   112e2:	f240 23f5 	movw	r3, #757	; 0x2f5
   112e6:	462a      	mov	r2, r5
   112e8:	4932      	ldr	r1, [pc, #200]	; (113b4 <ll_rx_mem_release+0x124>)
   112ea:	4630      	mov	r0, r6
   112ec:	f00c fa63 	bl	1d7b6 <printk>
   112f0:	4040      	eors	r0, r0
   112f2:	f380 8811 	msr	BASEPRI, r0
   112f6:	f04f 0003 	mov.w	r0, #3
   112fa:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   112fc:	7923      	ldrb	r3, [r4, #4]
   112fe:	b963      	cbnz	r3, 1131a <ll_rx_mem_release+0x8a>
   11300:	f240 3336 	movw	r3, #822	; 0x336
   11304:	462a      	mov	r2, r5
   11306:	492c      	ldr	r1, [pc, #176]	; (113b8 <ll_rx_mem_release+0x128>)
   11308:	4630      	mov	r0, r6
   1130a:	f00c fa54 	bl	1d7b6 <printk>
   1130e:	4040      	eors	r0, r0
   11310:	f380 8811 	msr	BASEPRI, r0
   11314:	f04f 0003 	mov.w	r0, #3
   11318:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   1131a:	2001      	movs	r0, #1
   1131c:	f7ff fc10 	bl	10b40 <ll_rx_link_inc_quota>
   11320:	e7d8      	b.n	112d4 <ll_rx_mem_release+0x44>
			conn = ll_conn_get(rx_free->handle);
   11322:	88e0      	ldrh	r0, [r4, #6]
   11324:	f002 f84a 	bl	133bc <ll_conn_get>
			lll->handle = 0xFFFF;
   11328:	f64f 73ff 	movw	r3, #65535	; 0xffff
			conn = ll_conn_get(rx_free->handle);
   1132c:	4604      	mov	r4, r0
			lll->handle = 0xFFFF;
   1132e:	8583      	strh	r3, [r0, #44]	; 0x2c
			ull_conn_tx_demux(UINT8_MAX);
   11330:	20ff      	movs	r0, #255	; 0xff
   11332:	f003 fd5b 	bl	14dec <ull_conn_tx_demux>
			LL_ASSERT(!lll->link_tx_free);
   11336:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   11338:	b163      	cbz	r3, 11354 <ll_rx_mem_release+0xc4>
   1133a:	f240 334f 	movw	r3, #847	; 0x34f
   1133e:	462a      	mov	r2, r5
   11340:	491e      	ldr	r1, [pc, #120]	; (113bc <ll_rx_mem_release+0x12c>)
   11342:	4630      	mov	r0, r6
   11344:	f00c fa37 	bl	1d7b6 <printk>
   11348:	4040      	eors	r0, r0
   1134a:	f380 8811 	msr	BASEPRI, r0
   1134e:	f04f 0003 	mov.w	r0, #3
   11352:	df02      	svc	2
			link = memq_deinit(&lll->memq_tx.head,
   11354:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   11358:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1135c:	f010 facd 	bl	218fa <memq_deinit>
			LL_ASSERT(link);
   11360:	4682      	mov	sl, r0
   11362:	b960      	cbnz	r0, 1137e <ll_rx_mem_release+0xee>
   11364:	f240 3352 	movw	r3, #850	; 0x352
   11368:	462a      	mov	r2, r5
   1136a:	4915      	ldr	r1, [pc, #84]	; (113c0 <ll_rx_mem_release+0x130>)
   1136c:	4630      	mov	r0, r6
   1136e:	f00c fa22 	bl	1d7b6 <printk>
   11372:	4040      	eors	r0, r0
   11374:	f380 8811 	msr	BASEPRI, r0
   11378:	f04f 0003 	mov.w	r0, #3
   1137c:	df02      	svc	2
			lll->link_tx_free = link;
   1137e:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
			ll_conn_release(conn);
   11382:	4620      	mov	r0, r4
   11384:	f002 f80c 	bl	133a0 <ll_conn_release>
		break;
   11388:	e7a8      	b.n	112dc <ll_rx_mem_release+0x4c>
			LL_ASSERT(0);
   1138a:	f240 335d 	movw	r3, #861	; 0x35d
   1138e:	462a      	mov	r2, r5
   11390:	4641      	mov	r1, r8
   11392:	4630      	mov	r0, r6
   11394:	f00c fa0f 	bl	1d7b6 <printk>
   11398:	4040      	eors	r0, r0
   1139a:	f380 8811 	msr	BASEPRI, r0
   1139e:	f04f 0003 	mov.w	r0, #3
   113a2:	df02      	svc	2
			break;
   113a4:	e79a      	b.n	112dc <ll_rx_mem_release+0x4c>
   113a6:	bf00      	nop
   113a8:	00029081 	.word	0x00029081
   113ac:	00027ff4 	.word	0x00027ff4
   113b0:	20000ac8 	.word	0x20000ac8
   113b4:	000290e9 	.word	0x000290e9
   113b8:	000290f5 	.word	0x000290f5
   113bc:	00029118 	.word	0x00029118
   113c0:	0002952b 	.word	0x0002952b
   113c4:	0002a0ca 	.word	0x0002a0ca

000113c8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   113c8:	4801      	ldr	r0, [pc, #4]	; (113d0 <ll_rx_link_alloc+0x8>)
   113ca:	f010 ba43 	b.w	21854 <mem_acquire>
   113ce:	bf00      	nop
   113d0:	20000a74 	.word	0x20000a74

000113d4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   113d4:	4901      	ldr	r1, [pc, #4]	; (113dc <ll_rx_link_release+0x8>)
   113d6:	f010 ba56 	b.w	21886 <mem_release>
   113da:	bf00      	nop
   113dc:	20000a74 	.word	0x20000a74

000113e0 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   113e0:	4801      	ldr	r0, [pc, #4]	; (113e8 <ll_rx_alloc+0x8>)
   113e2:	f010 ba37 	b.w	21854 <mem_acquire>
   113e6:	bf00      	nop
   113e8:	20000ac8 	.word	0x20000ac8

000113ec <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   113ec:	4901      	ldr	r1, [pc, #4]	; (113f4 <ll_rx_release+0x8>)
   113ee:	f010 ba4a 	b.w	21886 <mem_release>
   113f2:	bf00      	nop
   113f4:	20000ac8 	.word	0x20000ac8

000113f8 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   113f8:	4b02      	ldr	r3, [pc, #8]	; (11404 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   113fa:	4a03      	ldr	r2, [pc, #12]	; (11408 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   113fc:	78db      	ldrb	r3, [r3, #3]
   113fe:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11400:	f010 ba86 	b.w	21910 <memq_enqueue>
   11404:	2000e158 	.word	0x2000e158
   11408:	20000d30 	.word	0x20000d30

0001140c <ll_rx_sched>:
	k_sem_give(sem_recv);
   1140c:	4b01      	ldr	r3, [pc, #4]	; (11414 <ll_rx_sched+0x8>)
   1140e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   11410:	f00b ba52 	b.w	1c8b8 <z_impl_k_sem_give>
   11414:	20000d3c 	.word	0x20000d3c

00011418 <ll_pdu_rx_alloc_peek>:
{
   11418:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1141a:	4a0a      	ldr	r2, [pc, #40]	; (11444 <ll_pdu_rx_alloc_peek+0x2c>)
   1141c:	7891      	ldrb	r1, [r2, #2]
   1141e:	78d4      	ldrb	r4, [r2, #3]
   11420:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   11422:	42a1      	cmp	r1, r4
		return count - first + last;
   11424:	bf8a      	itet	hi
   11426:	1a5b      	subhi	r3, r3, r1
		return last - first;
   11428:	1a63      	subls	r3, r4, r1
		return count - first + last;
   1142a:	191b      	addhi	r3, r3, r4
   1142c:	b2db      	uxtb	r3, r3
   1142e:	4298      	cmp	r0, r3
   11430:	d806      	bhi.n	11440 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   11432:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   11434:	7813      	ldrb	r3, [r2, #0]
   11436:	d003      	beq.n	11440 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   11438:	fb01 2203 	mla	r2, r1, r3, r2
   1143c:	6850      	ldr	r0, [r2, #4]
}
   1143e:	bd10      	pop	{r4, pc}
		return NULL;
   11440:	2000      	movs	r0, #0
   11442:	e7fc      	b.n	1143e <ll_pdu_rx_alloc_peek+0x26>
   11444:	2000e008 	.word	0x2000e008

00011448 <ll_pdu_rx_alloc>:
{
   11448:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1144a:	4a09      	ldr	r2, [pc, #36]	; (11470 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(u8_t *fifo, u8_t size, u8_t count,
				  u8_t last, u8_t *first)
{
	u8_t _first = *first; /* Copy read-index */
   1144c:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   1144e:	78d0      	ldrb	r0, [r2, #3]
   11450:	7811      	ldrb	r1, [r2, #0]
   11452:	7854      	ldrb	r4, [r2, #1]
   11454:	4298      	cmp	r0, r3
   11456:	d009      	beq.n	1146c <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   11458:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   1145c:	3301      	adds	r3, #1
   1145e:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   11460:	429c      	cmp	r4, r3
   11462:	bf08      	it	eq
   11464:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   11466:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   11468:	7093      	strb	r3, [r2, #2]
}
   1146a:	bd10      	pop	{r4, pc}
		return NULL;
   1146c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1146e:	e7fc      	b.n	1146a <ll_pdu_rx_alloc+0x22>
   11470:	2000e008 	.word	0x2000e008

00011474 <ll_tx_ack_put>:
{
   11474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   11476:	4a12      	ldr	r2, [pc, #72]	; (114c0 <ll_tx_ack_put+0x4c>)
   11478:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1147a:	7857      	ldrb	r7, [r2, #1]
   1147c:	7895      	ldrb	r5, [r2, #2]
   1147e:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   11480:	1c63      	adds	r3, r4, #1
   11482:	b2db      	uxtb	r3, r3
		last = 0U;
   11484:	429f      	cmp	r7, r3
   11486:	bf08      	it	eq
   11488:	2300      	moveq	r3, #0
	if (last == first) {
   1148a:	429d      	cmp	r5, r3
   1148c:	d004      	beq.n	11498 <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1148e:	1d15      	adds	r5, r2, #4
   11490:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   11494:	192e      	adds	r6, r5, r4
   11496:	d10f      	bne.n	114b8 <ll_tx_ack_put+0x44>
   11498:	f240 33b3 	movw	r3, #947	; 0x3b3
   1149c:	4a09      	ldr	r2, [pc, #36]	; (114c4 <ll_tx_ack_put+0x50>)
   1149e:	490a      	ldr	r1, [pc, #40]	; (114c8 <ll_tx_ack_put+0x54>)
   114a0:	480a      	ldr	r0, [pc, #40]	; (114cc <ll_tx_ack_put+0x58>)
   114a2:	f00c f988 	bl	1d7b6 <printk>
   114a6:	4040      	eors	r0, r0
   114a8:	f380 8811 	msr	BASEPRI, r0
   114ac:	f04f 0003 	mov.w	r0, #3
   114b0:	df02      	svc	2
	tx->handle = handle;
   114b2:	2300      	movs	r3, #0
   114b4:	801b      	strh	r3, [r3, #0]
   114b6:	deff      	udf	#255	; 0xff
   114b8:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   114ba:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   114bc:	6071      	str	r1, [r6, #4]
}
   114be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   114c0:	2000e158 	.word	0x2000e158
   114c4:	00029081 	.word	0x00029081
   114c8:	000294a6 	.word	0x000294a6
   114cc:	00027ff4 	.word	0x00027ff4

000114d0 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   114d0:	2200      	movs	r2, #0
{
   114d2:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   114d4:	4611      	mov	r1, r2
   114d6:	4b09      	ldr	r3, [pc, #36]	; (114fc <ll_radio_state_abort+0x2c>)
   114d8:	2001      	movs	r0, #1
   114da:	f7fd fb59 	bl	eb90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   114de:	b160      	cbz	r0, 114fa <ll_radio_state_abort+0x2a>
   114e0:	f240 33cb 	movw	r3, #971	; 0x3cb
   114e4:	4a06      	ldr	r2, [pc, #24]	; (11500 <ll_radio_state_abort+0x30>)
   114e6:	4907      	ldr	r1, [pc, #28]	; (11504 <ll_radio_state_abort+0x34>)
   114e8:	4807      	ldr	r0, [pc, #28]	; (11508 <ll_radio_state_abort+0x38>)
   114ea:	f00c f964 	bl	1d7b6 <printk>
   114ee:	4040      	eors	r0, r0
   114f0:	f380 8811 	msr	BASEPRI, r0
   114f4:	f04f 0003 	mov.w	r0, #3
   114f8:	df02      	svc	2
}
   114fa:	bd08      	pop	{r3, pc}
   114fc:	2000e18c 	.word	0x2000e18c
   11500:	00029081 	.word	0x00029081
   11504:	00029035 	.word	0x00029035
   11508:	00027ff4 	.word	0x00027ff4

0001150c <ull_ticker_status_give>:
	*((u32_t volatile *)param) = status;
   1150c:	6008      	str	r0, [r1, #0]
   1150e:	4801      	ldr	r0, [pc, #4]	; (11514 <ull_ticker_status_give+0x8>)
   11510:	f00b b9d2 	b.w	1c8b8 <z_impl_k_sem_give>
   11514:	20000d40 	.word	0x20000d40

00011518 <ull_ticker_status_take>:
{
   11518:	b510      	push	{r4, lr}
   1151a:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   1151c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11520:	4802      	ldr	r0, [pc, #8]	; (1152c <ull_ticker_status_take+0x14>)
   11522:	f00b f9f5 	bl	1c910 <z_impl_k_sem_take>
	return *ret_cb;
   11526:	6820      	ldr	r0, [r4, #0]
}
   11528:	bd10      	pop	{r4, pc}
   1152a:	bf00      	nop
   1152c:	20000d40 	.word	0x20000d40

00011530 <ull_disable_mark>:
	if (!*m) {
   11530:	4b02      	ldr	r3, [pc, #8]	; (1153c <ull_disable_mark+0xc>)
   11532:	681a      	ldr	r2, [r3, #0]
   11534:	b902      	cbnz	r2, 11538 <ull_disable_mark+0x8>
		*m = param;
   11536:	6018      	str	r0, [r3, #0]
}
   11538:	6818      	ldr	r0, [r3, #0]
   1153a:	4770      	bx	lr
   1153c:	200009a0 	.word	0x200009a0

00011540 <ull_disable_unmark>:
	if (*m && *m == param) {
   11540:	4905      	ldr	r1, [pc, #20]	; (11558 <ull_disable_unmark+0x18>)
   11542:	680b      	ldr	r3, [r1, #0]
   11544:	b12b      	cbz	r3, 11552 <ull_disable_unmark+0x12>
   11546:	4298      	cmp	r0, r3
   11548:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   1154c:	bf0c      	ite	eq
   1154e:	600a      	streq	r2, [r1, #0]
	return NULL;
   11550:	4613      	movne	r3, r2
}
   11552:	4618      	mov	r0, r3
   11554:	4770      	bx	lr
   11556:	bf00      	nop
   11558:	200009a0 	.word	0x200009a0

0001155c <ull_disable_mark_get>:
}
   1155c:	4b01      	ldr	r3, [pc, #4]	; (11564 <ull_disable_mark_get+0x8>)
   1155e:	6818      	ldr	r0, [r3, #0]
   11560:	4770      	bx	lr
   11562:	bf00      	nop
   11564:	200009a0 	.word	0x200009a0

00011568 <ull_update_mark>:
	if (!*m) {
   11568:	4b02      	ldr	r3, [pc, #8]	; (11574 <ull_update_mark+0xc>)
   1156a:	681a      	ldr	r2, [r3, #0]
   1156c:	b902      	cbnz	r2, 11570 <ull_update_mark+0x8>
		*m = param;
   1156e:	6018      	str	r0, [r3, #0]
}
   11570:	6818      	ldr	r0, [r3, #0]
   11572:	4770      	bx	lr
   11574:	200009a4 	.word	0x200009a4

00011578 <ull_update_unmark>:
	if (*m && *m == param) {
   11578:	4905      	ldr	r1, [pc, #20]	; (11590 <ull_update_unmark+0x18>)
   1157a:	680b      	ldr	r3, [r1, #0]
   1157c:	b12b      	cbz	r3, 1158a <ull_update_unmark+0x12>
   1157e:	4298      	cmp	r0, r3
   11580:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   11584:	bf0c      	ite	eq
   11586:	600a      	streq	r2, [r1, #0]
	return NULL;
   11588:	4613      	movne	r3, r2
}
   1158a:	4618      	mov	r0, r3
   1158c:	4770      	bx	lr
   1158e:	bf00      	nop
   11590:	200009a4 	.word	0x200009a4

00011594 <ull_update_mark_get>:
}
   11594:	4b01      	ldr	r3, [pc, #4]	; (1159c <ull_update_mark_get+0x8>)
   11596:	6818      	ldr	r0, [r3, #0]
   11598:	4770      	bx	lr
   1159a:	bf00      	nop
   1159c:	200009a4 	.word	0x200009a4

000115a0 <ull_disable>:
{
   115a0:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   115a2:	6804      	ldr	r4, [r0, #0]
	if (!hdr) {
   115a4:	f114 0f10 	cmn.w	r4, #16
{
   115a8:	b087      	sub	sp, #28
   115aa:	4605      	mov	r5, r0
	if (!hdr) {
   115ac:	d102      	bne.n	115b4 <ull_disable+0x14>
		return ULL_STATUS_SUCCESS;
   115ae:	2000      	movs	r0, #0
}
   115b0:	b007      	add	sp, #28
   115b2:	bd30      	pop	{r4, r5, pc}
	z_impl_k_sem_init(sem, initial_count, limit);
   115b4:	2201      	movs	r2, #1
   115b6:	2100      	movs	r1, #0
   115b8:	4668      	mov	r0, sp
   115ba:	f013 fed8 	bl	2536e <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   115be:	4b11      	ldr	r3, [pc, #68]	; (11604 <ull_disable+0x64>)
   115c0:	6163      	str	r3, [r4, #20]
	if (!hdr->ref) {
   115c2:	7c23      	ldrb	r3, [r4, #16]
	hdr->disabled_param = &sem;
   115c4:	f8c4 d018 	str.w	sp, [r4, #24]
	if (!hdr->ref) {
   115c8:	2b00      	cmp	r3, #0
   115ca:	d0f0      	beq.n	115ae <ull_disable+0xe>
	mfy.param = lll;
   115cc:	4b0e      	ldr	r3, [pc, #56]	; (11608 <ull_disable+0x68>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   115ce:	2200      	movs	r2, #0
   115d0:	4611      	mov	r1, r2
   115d2:	2003      	movs	r0, #3
	mfy.param = lll;
   115d4:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   115d6:	f7fd fadb 	bl	eb90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   115da:	b160      	cbz	r0, 115f6 <ull_disable+0x56>
   115dc:	f240 431e 	movw	r3, #1054	; 0x41e
   115e0:	4a0a      	ldr	r2, [pc, #40]	; (1160c <ull_disable+0x6c>)
   115e2:	490b      	ldr	r1, [pc, #44]	; (11610 <ull_disable+0x70>)
   115e4:	480b      	ldr	r0, [pc, #44]	; (11614 <ull_disable+0x74>)
   115e6:	f00c f8e6 	bl	1d7b6 <printk>
   115ea:	4040      	eors	r0, r0
   115ec:	f380 8811 	msr	BASEPRI, r0
   115f0:	f04f 0003 	mov.w	r0, #3
   115f4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   115f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   115fa:	4668      	mov	r0, sp
   115fc:	f00b f988 	bl	1c910 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   11600:	e7d6      	b.n	115b0 <ull_disable+0x10>
   11602:	bf00      	nop
   11604:	00021c95 	.word	0x00021c95
   11608:	2000e19c 	.word	0x2000e19c
   1160c:	00029081 	.word	0x00029081
   11610:	00029035 	.word	0x00029035
   11614:	00027ff4 	.word	0x00027ff4

00011618 <ull_pdu_rx_alloc_peek>:
{
   11618:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1161a:	4a0a      	ldr	r2, [pc, #40]	; (11644 <ull_pdu_rx_alloc_peek+0x2c>)
   1161c:	7891      	ldrb	r1, [r2, #2]
   1161e:	78d4      	ldrb	r4, [r2, #3]
   11620:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   11622:	42a1      	cmp	r1, r4
		return count - first + last;
   11624:	bf8a      	itet	hi
   11626:	1a5b      	subhi	r3, r3, r1
		return last - first;
   11628:	1a63      	subls	r3, r4, r1
		return count - first + last;
   1162a:	191b      	addhi	r3, r3, r4
   1162c:	b2db      	uxtb	r3, r3
   1162e:	4298      	cmp	r0, r3
   11630:	d806      	bhi.n	11640 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   11632:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   11634:	7813      	ldrb	r3, [r2, #0]
   11636:	d003      	beq.n	11640 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   11638:	fb01 2203 	mla	r2, r1, r3, r2
   1163c:	6850      	ldr	r0, [r2, #4]
}
   1163e:	bd10      	pop	{r4, pc}
		return NULL;
   11640:	2000      	movs	r0, #0
   11642:	e7fc      	b.n	1163e <ull_pdu_rx_alloc_peek+0x26>
   11644:	2000e01c 	.word	0x2000e01c

00011648 <ull_pdu_rx_alloc>:
{
   11648:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   1164a:	4a09      	ldr	r2, [pc, #36]	; (11670 <ull_pdu_rx_alloc+0x28>)
	u8_t _first = *first; /* Copy read-index */
   1164c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1164e:	78d0      	ldrb	r0, [r2, #3]
   11650:	7811      	ldrb	r1, [r2, #0]
   11652:	7854      	ldrb	r4, [r2, #1]
   11654:	4298      	cmp	r0, r3
   11656:	d009      	beq.n	1166c <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   11658:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1165c:	3301      	adds	r3, #1
   1165e:	b2db      	uxtb	r3, r3
		_first = 0U;
   11660:	429c      	cmp	r4, r3
   11662:	bf08      	it	eq
   11664:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   11666:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   11668:	7093      	strb	r3, [r2, #2]
}
   1166a:	bd10      	pop	{r4, pc}
		return NULL;
   1166c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   1166e:	e7fc      	b.n	1166a <ull_pdu_rx_alloc+0x22>
   11670:	2000e01c 	.word	0x2000e01c

00011674 <ull_rx_put>:
{
   11674:	b538      	push	{r3, r4, r5, lr}
   11676:	460c      	mov	r4, r1
   11678:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1167a:	f003 fcbb 	bl	14ff4 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1167e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   11680:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   11682:	4a03      	ldr	r2, [pc, #12]	; (11690 <ull_rx_put+0x1c>)
   11684:	4628      	mov	r0, r5
}
   11686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1168a:	f010 b941 	b.w	21910 <memq_enqueue>
   1168e:	bf00      	nop
   11690:	20000d38 	.word	0x20000d38

00011694 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   11694:	2201      	movs	r2, #1
   11696:	4b02      	ldr	r3, [pc, #8]	; (116a0 <ull_rx_sched+0xc>)
   11698:	4611      	mov	r1, r2
   1169a:	2000      	movs	r0, #0
   1169c:	f7fd ba78 	b.w	eb90 <mayfly_enqueue>
   116a0:	2000e1ac 	.word	0x2000e1ac

000116a4 <ull_prepare_enqueue>:
{
   116a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   116a8:	4e16      	ldr	r6, [pc, #88]	; (11704 <ull_prepare_enqueue+0x60>)
{
   116aa:	460f      	mov	r7, r1
   116ac:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   116ae:	78f2      	ldrb	r2, [r6, #3]
   116b0:	7834      	ldrb	r4, [r6, #0]
{
   116b2:	4680      	mov	r8, r0
	last = last + 1;
   116b4:	1c55      	adds	r5, r2, #1
	if (last == count) {
   116b6:	7870      	ldrb	r0, [r6, #1]
   116b8:	4699      	mov	r9, r3
	last = last + 1;
   116ba:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   116bc:	78b3      	ldrb	r3, [r6, #2]
		last = 0U;
   116be:	42a8      	cmp	r0, r5
   116c0:	bf08      	it	eq
   116c2:	2500      	moveq	r5, #0
	if (last == first) {
   116c4:	42ab      	cmp	r3, r5
   116c6:	d01a      	beq.n	116fe <ull_prepare_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   116c8:	1d33      	adds	r3, r6, #4
   116ca:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   116ce:	b1b4      	cbz	r4, 116fe <ull_prepare_enqueue+0x5a>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   116d0:	2210      	movs	r2, #16
   116d2:	4620      	mov	r0, r4
   116d4:	f00d ff90 	bl	1f5f8 <memcpy>
	e->prio = prio;
   116d8:	9b08      	ldr	r3, [sp, #32]
   116da:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
   116dc:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   116e0:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
   116e4:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   116e6:	f362 0300 	bfi	r3, r2, #0, #1
	e->is_abort_cb = is_abort_cb;
   116ea:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_aborted = 0U;
   116ee:	f36f 0341 	bfc	r3, #1, #1
   116f2:	f884 3020 	strb.w	r3, [r4, #32]
	*last = idx; /* Commit: Update write index */
   116f6:	70f5      	strb	r5, [r6, #3]
	return 0;
   116f8:	2000      	movs	r0, #0
}
   116fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   116fe:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11702:	e7fa      	b.n	116fa <ull_prepare_enqueue+0x56>
   11704:	2000e034 	.word	0x2000e034

00011708 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   11708:	4b05      	ldr	r3, [pc, #20]	; (11720 <ull_prepare_dequeue_get+0x18>)
   1170a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   1170c:	78d9      	ldrb	r1, [r3, #3]
   1170e:	7818      	ldrb	r0, [r3, #0]
   11710:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   11712:	bf1a      	itte	ne
   11714:	3304      	addne	r3, #4
   11716:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   1171a:	2000      	moveq	r0, #0
}
   1171c:	4770      	bx	lr
   1171e:	bf00      	nop
   11720:	2000e034 	.word	0x2000e034

00011724 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
   11724:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   11728:	4e8b      	ldr	r6, [pc, #556]	; (11958 <rx_demux+0x234>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1172a:	4c8c      	ldr	r4, [pc, #560]	; (1195c <rx_demux+0x238>)
   1172c:	aa01      	add	r2, sp, #4
   1172e:	e9d4 0100 	ldrd	r0, r1, [r4]
   11732:	f010 f8f4 	bl	2191e <memq_peek>
		if (link) {
   11736:	4605      	mov	r5, r0
   11738:	2800      	cmp	r0, #0
   1173a:	f000 80ee 	beq.w	1191a <rx_demux+0x1f6>
			LL_ASSERT(rx);
   1173e:	9b01      	ldr	r3, [sp, #4]
   11740:	b963      	cbnz	r3, 1175c <rx_demux+0x38>
   11742:	f240 53d6 	movw	r3, #1494	; 0x5d6
   11746:	4a86      	ldr	r2, [pc, #536]	; (11960 <rx_demux+0x23c>)
   11748:	4986      	ldr	r1, [pc, #536]	; (11964 <rx_demux+0x240>)
   1174a:	4887      	ldr	r0, [pc, #540]	; (11968 <rx_demux+0x244>)
   1174c:	f00c f833 	bl	1d7b6 <printk>
   11750:	4040      	eors	r0, r0
   11752:	f380 8811 	msr	BASEPRI, r0
   11756:	f04f 0003 	mov.w	r0, #3
   1175a:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1175c:	9b01      	ldr	r3, [sp, #4]
   1175e:	aa02      	add	r2, sp, #8
   11760:	f10d 0102 	add.w	r1, sp, #2
   11764:	7818      	ldrb	r0, [r3, #0]
   11766:	f003 fc63 	bl	15030 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   1176a:	9f01      	ldr	r7, [sp, #4]
   1176c:	4602      	mov	r2, r0
   1176e:	b130      	cbz	r0, 1177e <rx_demux+0x5a>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   11770:	9b02      	ldr	r3, [sp, #8]
   11772:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   11776:	7838      	ldrb	r0, [r7, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   11778:	f010 fa8e 	bl	21c98 <rx_demux_conn_tx_ack>
   1177c:	e7d5      	b.n	1172a <rx_demux+0x6>
	switch (rx->type) {
   1177e:	793b      	ldrb	r3, [r7, #4]
   11780:	9703      	str	r7, [sp, #12]
   11782:	3b01      	subs	r3, #1
   11784:	2b08      	cmp	r3, #8
   11786:	f200 80ba 	bhi.w	118fe <rx_demux+0x1da>
   1178a:	e8df f003 	tbb	[pc, r3]
   1178e:	9c05      	.short	0x9c05
   11790:	b8b8b8b8 	.word	0xb8b8b8b8
   11794:	92b8      	.short	0x92b8
   11796:	b1          	.byte	0xb1
   11797:	00          	.byte	0x00
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11798:	6860      	ldr	r0, [r4, #4]
   1179a:	4970      	ldr	r1, [pc, #448]	; (1195c <rx_demux+0x238>)
   1179c:	2200      	movs	r2, #0
   1179e:	f010 f8c6 	bl	2192e <memq_dequeue>
		rx_demux_event_done(link, rx);
   117a2:	9f03      	ldr	r7, [sp, #12]
	switch (done->extra.type) {
   117a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
	ull_hdr = done->param;
   117a8:	6a3c      	ldr	r4, [r7, #32]
	switch (done->extra.type) {
   117aa:	b123      	cbz	r3, 117b6 <rx_demux+0x92>
   117ac:	2b01      	cmp	r3, #1
   117ae:	d169      	bne.n	11884 <rx_demux+0x160>
		ull_conn_done(done);
   117b0:	4638      	mov	r0, r7
   117b2:	f003 f9dd 	bl	14b70 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   117b6:	4a6d      	ldr	r2, [pc, #436]	; (1196c <rx_demux+0x248>)
   117b8:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   117ba:	f892 c001 	ldrb.w	ip, [r2, #1]
   117be:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
   117c0:	2300      	movs	r3, #0
   117c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	last = last + 1;
   117c6:	1c4b      	adds	r3, r1, #1
   117c8:	b2db      	uxtb	r3, r3
		last = 0U;
   117ca:	459c      	cmp	ip, r3
   117cc:	bf08      	it	eq
   117ce:	2300      	moveq	r3, #0
	if (last == first) {
   117d0:	4298      	cmp	r0, r3
   117d2:	f000 80b0 	beq.w	11936 <rx_demux+0x212>
	done->hdr.link = link;
   117d6:	603d      	str	r5, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   117d8:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   117da:	fb00 2101 	mla	r1, r0, r1, r2
   117de:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   117e0:	70d3      	strb	r3, [r2, #3]
	next = ull_prepare_dequeue_get();
   117e2:	f7ff ff91 	bl	11708 <ull_prepare_dequeue_get>
			mfy.param = next;
   117e6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 11970 <rx_demux+0x24c>
	while (next) {
   117ea:	b358      	cbz	r0, 11844 <rx_demux+0x120>
		u8_t is_aborted = next->is_aborted;
   117ec:	f890 5020 	ldrb.w	r5, [r0, #32]
   117f0:	f3c5 0740 	ubfx	r7, r5, #1, #1
		u8_t is_resume = next->is_resume;
   117f4:	f005 0501 	and.w	r5, r5, #1
		if (!is_aborted) {
   117f8:	b9af      	cbnz	r7, 11826 <rx_demux+0x102>
			mfy.param = next;
   117fa:	f8c8 0008 	str.w	r0, [r8, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   117fe:	4b5c      	ldr	r3, [pc, #368]	; (11970 <rx_demux+0x24c>)
   11800:	463a      	mov	r2, r7
   11802:	4639      	mov	r1, r7
   11804:	2001      	movs	r0, #1
   11806:	f7fd f9c3 	bl	eb90 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1180a:	b160      	cbz	r0, 11826 <rx_demux+0x102>
   1180c:	f240 63a7 	movw	r3, #1703	; 0x6a7
   11810:	4a53      	ldr	r2, [pc, #332]	; (11960 <rx_demux+0x23c>)
   11812:	4958      	ldr	r1, [pc, #352]	; (11974 <rx_demux+0x250>)
   11814:	4854      	ldr	r0, [pc, #336]	; (11968 <rx_demux+0x244>)
   11816:	f00b ffce 	bl	1d7b6 <printk>
   1181a:	4040      	eors	r0, r0
   1181c:	f380 8811 	msr	BASEPRI, r0
   11820:	f04f 0003 	mov.w	r0, #3
   11824:	df02      	svc	2
	u8_t _first = *first; /* Copy read-index */
   11826:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   11828:	78f1      	ldrb	r1, [r6, #3]
		MFIFO_DEQUEUE(prep);
   1182a:	7872      	ldrb	r2, [r6, #1]
   1182c:	4299      	cmp	r1, r3
   1182e:	d005      	beq.n	1183c <rx_demux+0x118>
	_first += 1U;
   11830:	3301      	adds	r3, #1
   11832:	b2db      	uxtb	r3, r3
		_first = 0U;
   11834:	429a      	cmp	r2, r3
   11836:	bf08      	it	eq
   11838:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1183a:	70b3      	strb	r3, [r6, #2]

		next = ull_prepare_dequeue_get();
   1183c:	f7ff ff64 	bl	11708 <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   11840:	2800      	cmp	r0, #0
   11842:	d12d      	bne.n	118a0 <rx_demux+0x17c>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   11844:	2c00      	cmp	r4, #0
   11846:	f43f af70 	beq.w	1172a <rx_demux+0x6>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
   1184a:	7823      	ldrb	r3, [r4, #0]
   1184c:	b963      	cbnz	r3, 11868 <rx_demux+0x144>
   1184e:	f240 63b9 	movw	r3, #1721	; 0x6b9
   11852:	4a43      	ldr	r2, [pc, #268]	; (11960 <rx_demux+0x23c>)
   11854:	4948      	ldr	r1, [pc, #288]	; (11978 <rx_demux+0x254>)
   11856:	4844      	ldr	r0, [pc, #272]	; (11968 <rx_demux+0x244>)
   11858:	f00b ffad 	bl	1d7b6 <printk>
   1185c:	4040      	eors	r0, r0
   1185e:	f380 8811 	msr	BASEPRI, r0
   11862:	f04f 0003 	mov.w	r0, #3
   11866:	df02      	svc	2
	return hdr->ref--;
   11868:	7823      	ldrb	r3, [r4, #0]
   1186a:	3b01      	subs	r3, #1
   1186c:	b2db      	uxtb	r3, r3
   1186e:	7023      	strb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   11870:	2b00      	cmp	r3, #0
   11872:	f47f af5a 	bne.w	1172a <rx_demux+0x6>
   11876:	6863      	ldr	r3, [r4, #4]
   11878:	2b00      	cmp	r3, #0
   1187a:	f43f af56 	beq.w	1172a <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1187e:	68a0      	ldr	r0, [r4, #8]
   11880:	4798      	blx	r3
			if (nack) {
   11882:	e752      	b.n	1172a <rx_demux+0x6>
		LL_ASSERT(0);
   11884:	f240 638f 	movw	r3, #1679	; 0x68f
   11888:	4a35      	ldr	r2, [pc, #212]	; (11960 <rx_demux+0x23c>)
   1188a:	493c      	ldr	r1, [pc, #240]	; (1197c <rx_demux+0x258>)
   1188c:	4836      	ldr	r0, [pc, #216]	; (11968 <rx_demux+0x244>)
   1188e:	f00b ff92 	bl	1d7b6 <printk>
   11892:	4040      	eors	r0, r0
   11894:	f380 8811 	msr	BASEPRI, r0
   11898:	f04f 0003 	mov.w	r0, #3
   1189c:	df02      	svc	2
		break;
   1189e:	e78a      	b.n	117b6 <rx_demux+0x92>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   118a0:	2f00      	cmp	r7, #0
   118a2:	d1a2      	bne.n	117ea <rx_demux+0xc6>
   118a4:	2d00      	cmp	r5, #0
   118a6:	d0cd      	beq.n	11844 <rx_demux+0x120>
   118a8:	f890 3020 	ldrb.w	r3, [r0, #32]
   118ac:	07db      	lsls	r3, r3, #31
   118ae:	d4c9      	bmi.n	11844 <rx_demux+0x120>
   118b0:	e79b      	b.n	117ea <rx_demux+0xc6>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   118b2:	2200      	movs	r2, #0
   118b4:	4929      	ldr	r1, [pc, #164]	; (1195c <rx_demux+0x238>)
   118b6:	6860      	ldr	r0, [r4, #4]
   118b8:	f010 f839 	bl	2192e <memq_dequeue>
		ull_conn_setup(link, rx);
   118bc:	9903      	ldr	r1, [sp, #12]
   118be:	4628      	mov	r0, r5
   118c0:	f001 feb4 	bl	1362c <ull_conn_setup>
			if (nack) {
   118c4:	e731      	b.n	1172a <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   118c6:	a903      	add	r1, sp, #12
   118c8:	4628      	mov	r0, r5
   118ca:	f001 fed1 	bl	13670 <ull_conn_rx>
		if (nack) {
   118ce:	4602      	mov	r2, r0
   118d0:	2800      	cmp	r0, #0
   118d2:	d13e      	bne.n	11952 <rx_demux+0x22e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   118d4:	4921      	ldr	r1, [pc, #132]	; (1195c <rx_demux+0x238>)
   118d6:	6860      	ldr	r0, [r4, #4]
   118d8:	f010 f829 	bl	2192e <memq_dequeue>
		if (rx) {
   118dc:	9903      	ldr	r1, [sp, #12]
   118de:	2900      	cmp	r1, #0
   118e0:	f43f af23 	beq.w	1172a <rx_demux+0x6>
		ll_rx_put(link, rx);
   118e4:	4628      	mov	r0, r5
   118e6:	f7ff fd87 	bl	113f8 <ll_rx_put>
		ll_rx_sched();
   118ea:	f7ff fd8f 	bl	1140c <ll_rx_sched>
			if (nack) {
   118ee:	e71c      	b.n	1172a <rx_demux+0x6>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   118f0:	491a      	ldr	r1, [pc, #104]	; (1195c <rx_demux+0x238>)
   118f2:	6860      	ldr	r0, [r4, #4]
   118f4:	2200      	movs	r2, #0
   118f6:	f010 f81a 	bl	2192e <memq_dequeue>
		ll_rx_put(link, rx);
   118fa:	9903      	ldr	r1, [sp, #12]
   118fc:	e7f2      	b.n	118e4 <rx_demux+0x1c0>
		LL_ASSERT(0);
   118fe:	f240 6367 	movw	r3, #1639	; 0x667
   11902:	4a17      	ldr	r2, [pc, #92]	; (11960 <rx_demux+0x23c>)
   11904:	491d      	ldr	r1, [pc, #116]	; (1197c <rx_demux+0x258>)
   11906:	4818      	ldr	r0, [pc, #96]	; (11968 <rx_demux+0x244>)
   11908:	f00b ff55 	bl	1d7b6 <printk>
   1190c:	4040      	eors	r0, r0
   1190e:	f380 8811 	msr	BASEPRI, r0
   11912:	f04f 0003 	mov.w	r0, #3
   11916:	df02      	svc	2
			if (nack) {
   11918:	e707      	b.n	1172a <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1191a:	aa03      	add	r2, sp, #12
   1191c:	a902      	add	r1, sp, #8
   1191e:	f10d 0002 	add.w	r0, sp, #2
   11922:	f003 fb6d 	bl	15000 <ull_conn_ack_peek>
			if (link) {
   11926:	4602      	mov	r2, r0
   11928:	b198      	cbz	r0, 11952 <rx_demux+0x22e>
				rx_demux_conn_tx_ack(ack_last, handle,
   1192a:	9b03      	ldr	r3, [sp, #12]
   1192c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   11930:	f89d 0002 	ldrb.w	r0, [sp, #2]
   11934:	e720      	b.n	11778 <rx_demux+0x54>
	LL_ASSERT(release == done);
   11936:	f240 6396 	movw	r3, #1686	; 0x696
   1193a:	4a09      	ldr	r2, [pc, #36]	; (11960 <rx_demux+0x23c>)
   1193c:	4910      	ldr	r1, [pc, #64]	; (11980 <rx_demux+0x25c>)
   1193e:	480a      	ldr	r0, [pc, #40]	; (11968 <rx_demux+0x244>)
   11940:	f00b ff39 	bl	1d7b6 <printk>
   11944:	4040      	eors	r0, r0
   11946:	f380 8811 	msr	BASEPRI, r0
   1194a:	f04f 0003 	mov.w	r0, #3
   1194e:	df02      	svc	2
   11950:	e747      	b.n	117e2 <rx_demux+0xbe>
}
   11952:	b004      	add	sp, #16
   11954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11958:	2000e034 	.word	0x2000e034
   1195c:	20000d34 	.word	0x20000d34
   11960:	00029081 	.word	0x00029081
   11964:	00029688 	.word	0x00029688
   11968:	00027ff4 	.word	0x00027ff4
   1196c:	2000dff4 	.word	0x2000dff4
   11970:	2000e1bc 	.word	0x2000e1bc
   11974:	00029035 	.word	0x00029035
   11978:	00029130 	.word	0x00029130
   1197c:	0002a0ca 	.word	0x0002a0ca
   11980:	0002913d 	.word	0x0002913d

00011984 <ull_prepare_dequeue_iter>:
{
   11984:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   11986:	4b0c      	ldr	r3, [pc, #48]	; (119b8 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   11988:	7801      	ldrb	r1, [r0, #0]
   1198a:	785c      	ldrb	r4, [r3, #1]
   1198c:	78dd      	ldrb	r5, [r3, #3]
   1198e:	781a      	ldrb	r2, [r3, #0]
   11990:	42a1      	cmp	r1, r4
   11992:	bf24      	itt	cs
   11994:	789b      	ldrbcs	r3, [r3, #2]
		*idx = first;
   11996:	7003      	strbcs	r3, [r0, #0]
	if (*idx == last) {
   11998:	7801      	ldrb	r1, [r0, #0]
   1199a:	428d      	cmp	r5, r1
   1199c:	d00a      	beq.n	119b4 <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   1199e:	1c4b      	adds	r3, r1, #1
   119a0:	b2db      	uxtb	r3, r3
		i = 0U;
   119a2:	429c      	cmp	r4, r3
   119a4:	bf08      	it	eq
   119a6:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   119a8:	4c04      	ldr	r4, [pc, #16]	; (119bc <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
   119aa:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   119ac:	fb01 4202 	mla	r2, r1, r2, r4
}
   119b0:	4610      	mov	r0, r2
   119b2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   119b4:	2200      	movs	r2, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   119b6:	e7fb      	b.n	119b0 <ull_prepare_dequeue_iter+0x2c>
   119b8:	2000e034 	.word	0x2000e034
   119bc:	2000e038 	.word	0x2000e038

000119c0 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   119c0:	4b06      	ldr	r3, [pc, #24]	; (119dc <ull_event_done_extra_get+0x1c>)
   119c2:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   119c4:	78d8      	ldrb	r0, [r3, #3]
   119c6:	781a      	ldrb	r2, [r3, #0]
   119c8:	4288      	cmp	r0, r1
   119ca:	d005      	beq.n	119d8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   119cc:	fb01 3302 	mla	r3, r1, r2, r3
   119d0:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   119d2:	b110      	cbz	r0, 119da <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   119d4:	3024      	adds	r0, #36	; 0x24
   119d6:	4770      	bx	lr
		return NULL;
   119d8:	2000      	movs	r0, #0
}
   119da:	4770      	bx	lr
   119dc:	2000dff4 	.word	0x2000dff4

000119e0 <ull_event_done>:
{
   119e0:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   119e2:	4a10      	ldr	r2, [pc, #64]	; (11a24 <ull_event_done+0x44>)
	u8_t _first = *first; /* Copy read-index */
   119e4:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   119e6:	78d4      	ldrb	r4, [r2, #3]
   119e8:	7811      	ldrb	r1, [r2, #0]
   119ea:	7855      	ldrb	r5, [r2, #1]
   119ec:	429c      	cmp	r4, r3
   119ee:	d017      	beq.n	11a20 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   119f0:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   119f4:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   119f6:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   119f8:	b2db      	uxtb	r3, r3
		_first = 0U;
   119fa:	429d      	cmp	r5, r3
   119fc:	bf08      	it	eq
   119fe:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   11a00:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   11a02:	b15c      	cbz	r4, 11a1c <ull_event_done+0x3c>
	link = evdone->hdr.link;
   11a04:	6823      	ldr	r3, [r4, #0]
	evdone->param = param;
   11a06:	6220      	str	r0, [r4, #32]
	evdone->hdr.link = NULL;
   11a08:	2200      	movs	r2, #0
   11a0a:	6022      	str	r2, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   11a0c:	2201      	movs	r2, #1
   11a0e:	7122      	strb	r2, [r4, #4]
	ull_rx_put(link, evdone);
   11a10:	4621      	mov	r1, r4
   11a12:	4618      	mov	r0, r3
   11a14:	f7ff fe2e 	bl	11674 <ull_rx_put>
	ull_rx_sched();
   11a18:	f7ff fe3c 	bl	11694 <ull_rx_sched>
}
   11a1c:	4620      	mov	r0, r4
   11a1e:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   11a20:	2400      	movs	r4, #0
   11a22:	e7fb      	b.n	11a1c <ull_event_done+0x3c>
   11a24:	2000dff4 	.word	0x2000dff4

00011a28 <lll_chan_sel_2>:
}

#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
u8_t lll_chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		    u8_t chan_count)
{
   11a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static u8_t chan_rev_8(u8_t b)
{
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   11a2c:	4f25      	ldr	r7, [pc, #148]	; (11ac4 <lll_chan_sel_2+0x9c>)
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11a2e:	4d26      	ldr	r5, [pc, #152]	; (11ac8 <lll_chan_sel_2+0xa0>)
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
   11a30:	4048      	eors	r0, r1
   11a32:	2403      	movs	r4, #3
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   11a34:	f640 0c02 	movw	ip, #2050	; 0x802
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11a38:	f248 0620 	movw	r6, #32800	; 0x8020
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   11a3c:	ea4f 2e10 	mov.w	lr, r0, lsr #8
   11a40:	fb0c f80e 	mul.w	r8, ip, lr
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11a44:	fb06 fe0e 	mul.w	lr, r6, lr
   11a48:	ea0e 0e05 	and.w	lr, lr, r5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   11a4c:	ea08 0807 	and.w	r8, r8, r7
   11a50:	ea48 080e 	orr.w	r8, r8, lr
   11a54:	b2c0      	uxtb	r0, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11a56:	eb08 2e08 	add.w	lr, r8, r8, lsl #8
   11a5a:	eb08 280e 	add.w	r8, r8, lr, lsl #8
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   11a5e:	fb0c fe00 	mul.w	lr, ip, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11a62:	4370      	muls	r0, r6
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   11a64:	ea0e 0e07 	and.w	lr, lr, r7
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11a68:	4028      	ands	r0, r5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   11a6a:	ea4e 0000 	orr.w	r0, lr, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11a6e:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
   11a72:	eb00 200e 	add.w	r0, r0, lr, lsl #8
   11a76:	ea4f 4818 	mov.w	r8, r8, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   11a7a:	f3c0 4007 	ubfx	r0, r0, #16, #8
   11a7e:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	return ((u32_t)a * 17U + b) & 0xFFFF;
   11a82:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   11a86:	3c01      	subs	r4, #1
   11a88:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   11a8a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((u32_t)a * 17U + b) & 0xFFFF;
   11a8e:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   11a90:	d1d4      	bne.n	11a3c <lll_chan_sel_2+0x14>
	chan_next = prn_e % 37;
   11a92:	2425      	movs	r4, #37	; 0x25
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   11a94:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   11a96:	fbb1 f0f4 	udiv	r0, r1, r4
   11a9a:	fb04 1010 	mls	r0, r4, r0, r1
   11a9e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   11aa0:	08c4      	lsrs	r4, r0, #3
   11aa2:	f000 0507 	and.w	r5, r0, #7
   11aa6:	5d14      	ldrb	r4, [r2, r4]
   11aa8:	412c      	asrs	r4, r5
   11aaa:	07e4      	lsls	r4, r4, #31
   11aac:	d407      	bmi.n	11abe <lll_chan_sel_2+0x96>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   11aae:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
   11ab0:	f3c1 4107 	ubfx	r1, r1, #16, #8
   11ab4:	4610      	mov	r0, r2
}
   11ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
   11aba:	f010 b919 	b.w	21cf0 <chan_sel_remap>
}
   11abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ac2:	bf00      	nop
   11ac4:	00022110 	.word	0x00022110
   11ac8:	00088440 	.word	0x00088440

00011acc <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   11acc:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   11ace:	4b08      	ldr	r3, [pc, #32]	; (11af0 <rtc0_nrf5_isr+0x24>)
   11ad0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   11ad4:	b122      	cbz	r2, 11ae0 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   11ad6:	2000      	movs	r0, #0
   11ad8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   11adc:	f7fd fcc4 	bl	f468 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   11ae0:	2001      	movs	r0, #1
   11ae2:	f7fd f8a5 	bl	ec30 <mayfly_run>

#if !defined(CONFIG_BT_CTLR_LOW_LAT) && \
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   11ae6:	2002      	movs	r0, #2
#endif

	DEBUG_TICKER_ISR(0);
}
   11ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   11aec:	f7fd b8a0 	b.w	ec30 <mayfly_run>
   11af0:	4000b000 	.word	0x4000b000

00011af4 <prepare>:
}

static int prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		   lll_prepare_cb_t prepare_cb, int prio,
		   struct lll_prepare_param *prepare_param, u8_t is_resume)
{
   11af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11af8:	b08d      	sub	sp, #52	; 0x34
   11afa:	4699      	mov	r9, r3
   11afc:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11afe:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
	u8_t idx = UINT8_MAX;
   11b02:	23ff      	movs	r3, #255	; 0xff
{
   11b04:	4680      	mov	r8, r0
   11b06:	460f      	mov	r7, r1
   11b08:	4616      	mov	r6, r2
	u8_t idx = UINT8_MAX;
   11b0a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	int ret, err;

	/* Find the ready prepare in the pipeline */
	p = ull_prepare_dequeue_iter(&idx);
	while (p && (p->is_aborted || p->is_resume)) {
		p = ull_prepare_dequeue_iter(&idx);
   11b0e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   11b12:	f7ff ff37 	bl	11984 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   11b16:	b118      	cbz	r0, 11b20 <prepare+0x2c>
   11b18:	f890 3020 	ldrb.w	r3, [r0, #32]
   11b1c:	079b      	lsls	r3, r3, #30
   11b1e:	d1f6      	bne.n	11b0e <prepare+0x1a>
	}

	/* Current event active or another prepare is ready in the pipeline */
	if (event.curr.abort_cb || (p && is_resume)) {
   11b20:	4b36      	ldr	r3, [pc, #216]	; (11bfc <prepare+0x108>)
   11b22:	689a      	ldr	r2, [r3, #8]
   11b24:	b91a      	cbnz	r2, 11b2e <prepare+0x3a>
   11b26:	2800      	cmp	r0, #0
   11b28:	d04a      	beq.n	11bc0 <prepare+0xcc>
   11b2a:	2c00      	cmp	r4, #0
   11b2c:	d048      	beq.n	11bc0 <prepare+0xcc>
			/* early abort */
			event.curr.abort_cb(NULL, event.curr.param);
		}

		/* Store the next prepare for deferred call */
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   11b2e:	e9cd 9400 	strd	r9, r4, [sp]
   11b32:	4633      	mov	r3, r6
   11b34:	462a      	mov	r2, r5
   11b36:	4639      	mov	r1, r7
   11b38:	4640      	mov	r0, r8
   11b3a:	f7ff fdb3 	bl	116a4 <ull_prepare_enqueue>
					  prepare_cb, prio, is_resume);
		LL_ASSERT(!ret);
   11b3e:	b160      	cbz	r0, 11b5a <prepare+0x66>
   11b40:	f240 13e5 	movw	r3, #485	; 0x1e5
   11b44:	4a2e      	ldr	r2, [pc, #184]	; (11c00 <prepare+0x10c>)
   11b46:	492f      	ldr	r1, [pc, #188]	; (11c04 <prepare+0x110>)
   11b48:	482f      	ldr	r0, [pc, #188]	; (11c08 <prepare+0x114>)
   11b4a:	f00b fe34 	bl	1d7b6 <printk>
   11b4e:	4040      	eors	r0, r0
   11b50:	f380 8811 	msr	BASEPRI, r0
   11b54:	f04f 0003 	mov.w	r0, #3
   11b58:	df02      	svc	2

#if !defined(CONFIG_BT_CTLR_LOW_LAT)
		if (is_resume) {
   11b5a:	b12c      	cbz	r4, 11b68 <prepare+0x74>
				LL_ASSERT(ret == -ECANCELED);
			}
		}
#endif /* CONFIG_BT_CTLR_LOW_LAT */

		return -EINPROGRESS;
   11b5c:	f06f 0443 	mvn.w	r4, #67	; 0x43
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));

	return err;
}
   11b60:	4620      	mov	r0, r4
   11b62:	b00d      	add	sp, #52	; 0x34
   11b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		evt = HDR_LLL2EVT(prepare_param->param);
   11b68:	68eb      	ldr	r3, [r5, #12]
   11b6a:	681a      	ldr	r2, [r3, #0]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11b6c:	4b27      	ldr	r3, [pc, #156]	; (11c0c <prepare+0x118>)
   11b6e:	9408      	str	r4, [sp, #32]
   11b70:	e9cd 4306 	strd	r4, r3, [sp, #24]
   11b74:	4b26      	ldr	r3, [pc, #152]	; (11c10 <prepare+0x11c>)
   11b76:	9401      	str	r4, [sp, #4]
   11b78:	e9cd 4304 	strd	r4, r3, [sp, #16]
   11b7c:	e9cd 4402 	strd	r4, r4, [sp, #8]
		preempt_to = MAX(evt->ticks_active_to_start,
   11b80:	e9d2 0100 	ldrd	r0, r1, [r2]
   11b84:	6893      	ldr	r3, [r2, #8]
   11b86:	4288      	cmp	r0, r1
   11b88:	bf2c      	ite	cs
   11b8a:	ebc3 0300 	rsbcs	r3, r3, r0
   11b8e:	ebc3 0301 	rsbcc	r3, r3, r1
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11b92:	9300      	str	r3, [sp, #0]
   11b94:	682b      	ldr	r3, [r5, #0]
   11b96:	4622      	mov	r2, r4
   11b98:	4621      	mov	r1, r4
   11b9a:	4620      	mov	r0, r4
   11b9c:	f7fd fc76 	bl	f48c <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11ba0:	2802      	cmp	r0, #2
   11ba2:	d9db      	bls.n	11b5c <prepare+0x68>
   11ba4:	f240 2301 	movw	r3, #513	; 0x201
   11ba8:	4a15      	ldr	r2, [pc, #84]	; (11c00 <prepare+0x10c>)
   11baa:	491a      	ldr	r1, [pc, #104]	; (11c14 <prepare+0x120>)
   11bac:	4816      	ldr	r0, [pc, #88]	; (11c08 <prepare+0x114>)
   11bae:	f00b fe02 	bl	1d7b6 <printk>
   11bb2:	4040      	eors	r0, r0
   11bb4:	f380 8811 	msr	BASEPRI, r0
   11bb8:	f04f 0003 	mov.w	r0, #3
   11bbc:	df02      	svc	2
   11bbe:	e7cd      	b.n	11b5c <prepare+0x68>
	event.curr.param = prepare_param->param;
   11bc0:	68ea      	ldr	r2, [r5, #12]
	event.curr.abort_cb = abort_cb;
   11bc2:	609f      	str	r7, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
   11bc4:	e9c3 2800 	strd	r2, r8, [r3]
	err = prepare_cb(prepare_param);
   11bc8:	4628      	mov	r0, r5
   11bca:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   11bcc:	2300      	movs	r3, #0
	err = prepare_cb(prepare_param);
   11bce:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   11bd0:	9300      	str	r3, [sp, #0]
   11bd2:	461a      	mov	r2, r3
   11bd4:	4619      	mov	r1, r3
   11bd6:	4618      	mov	r0, r3
   11bd8:	f7fd fcea 	bl	f5b0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11bdc:	2802      	cmp	r0, #2
   11bde:	d9bf      	bls.n	11b60 <prepare+0x6c>
   11be0:	f240 2331 	movw	r3, #561	; 0x231
   11be4:	4a06      	ldr	r2, [pc, #24]	; (11c00 <prepare+0x10c>)
   11be6:	490b      	ldr	r1, [pc, #44]	; (11c14 <prepare+0x120>)
   11be8:	4807      	ldr	r0, [pc, #28]	; (11c08 <prepare+0x114>)
   11bea:	f00b fde4 	bl	1d7b6 <printk>
   11bee:	4040      	eors	r0, r0
   11bf0:	f380 8811 	msr	BASEPRI, r0
   11bf4:	f04f 0003 	mov.w	r0, #3
   11bf8:	df02      	svc	2
   11bfa:	e7b1      	b.n	11b60 <prepare+0x6c>
   11bfc:	20001098 	.word	0x20001098
   11c00:	000291b9 	.word	0x000291b9
   11c04:	00029035 	.word	0x00029035
   11c08:	00027ff4 	.word	0x00027ff4
   11c0c:	00011d1d 	.word	0x00011d1d
   11c10:	00011d4d 	.word	0x00011d4d
   11c14:	000291f8 	.word	0x000291f8

00011c18 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   11c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c1a:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
   11c1c:	f7ff fd74 	bl	11708 <ull_prepare_dequeue_get>
	lll_prepare_cb_t resume_cb;
	u8_t idx = UINT8_MAX;
   11c20:	23ff      	movs	r3, #255	; 0xff
	int resume_prio;
	int ret;

	next = ull_prepare_dequeue_iter(&idx);
   11c22:	f10d 000e 	add.w	r0, sp, #14
	u8_t idx = UINT8_MAX;
   11c26:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   11c2a:	f7ff feab 	bl	11984 <ull_prepare_dequeue_iter>
	if (!next || !event.curr.abort_cb || !event.curr.param) {
   11c2e:	4605      	mov	r5, r0
   11c30:	b120      	cbz	r0, 11c3c <preempt+0x24>
   11c32:	4c35      	ldr	r4, [pc, #212]	; (11d08 <preempt+0xf0>)
   11c34:	68a3      	ldr	r3, [r4, #8]
   11c36:	b10b      	cbz	r3, 11c3c <preempt+0x24>
   11c38:	6823      	ldr	r3, [r4, #0]
   11c3a:	b943      	cbnz	r3, 11c4e <preempt+0x36>
		ret = resume_enqueue(resume_cb, resume_prio);
		LL_ASSERT(!ret);
	} else {
		LL_ASSERT(ret == -ECANCELED);
	}
}
   11c3c:	b00b      	add	sp, #44	; 0x2c
   11c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   11c40:	f10d 000e 	add.w	r0, sp, #14
   11c44:	f7ff fe9e 	bl	11984 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   11c48:	4605      	mov	r5, r0
   11c4a:	2800      	cmp	r0, #0
   11c4c:	d0f6      	beq.n	11c3c <preempt+0x24>
   11c4e:	f895 0020 	ldrb.w	r0, [r5, #32]
   11c52:	f010 0603 	ands.w	r6, r0, #3
   11c56:	d1f3      	bne.n	11c40 <preempt+0x28>
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   11c58:	ab05      	add	r3, sp, #20
   11c5a:	9300      	str	r3, [sp, #0]
   11c5c:	6867      	ldr	r7, [r4, #4]
   11c5e:	6822      	ldr	r2, [r4, #0]
   11c60:	69e9      	ldr	r1, [r5, #28]
   11c62:	68e8      	ldr	r0, [r5, #12]
   11c64:	ab04      	add	r3, sp, #16
   11c66:	47b8      	blx	r7
	if (!ret) {
   11c68:	4607      	mov	r7, r0
   11c6a:	b950      	cbnz	r0, 11c82 <preempt+0x6a>
		next->is_aborted = 1;
   11c6c:	f895 3020 	ldrb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   11c70:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   11c72:	f043 0302 	orr.w	r3, r3, #2
   11c76:	f885 3020 	strb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   11c7a:	4628      	mov	r0, r5
   11c7c:	69ab      	ldr	r3, [r5, #24]
   11c7e:	4798      	blx	r3
		return;
   11c80:	e7dc      	b.n	11c3c <preempt+0x24>
	event.curr.abort_cb(NULL, event.curr.param);
   11c82:	68a3      	ldr	r3, [r4, #8]
   11c84:	6821      	ldr	r1, [r4, #0]
   11c86:	4630      	mov	r0, r6
   11c88:	4798      	blx	r3
	if (ret == -EAGAIN) {
   11c8a:	f117 0f0b 	cmn.w	r7, #11
   11c8e:	d133      	bne.n	11cf8 <preempt+0xe0>
		u8_t idx = UINT8_MAX;
   11c90:	23ff      	movs	r3, #255	; 0xff
   11c92:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&idx);
   11c96:	f10d 000f 	add.w	r0, sp, #15
   11c9a:	f7ff fe73 	bl	11984 <ull_prepare_dequeue_iter>
		while (iter) {
   11c9e:	b9e0      	cbnz	r0, 11cda <preempt+0xc2>
	prepare_param.param = event.curr.param;
   11ca0:	6823      	ldr	r3, [r4, #0]
   11ca2:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   11ca4:	2301      	movs	r3, #1
   11ca6:	9301      	str	r3, [sp, #4]
   11ca8:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
   11caa:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   11cac:	9300      	str	r3, [sp, #0]
   11cae:	aa06      	add	r2, sp, #24
   11cb0:	9b04      	ldr	r3, [sp, #16]
   11cb2:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   11cb6:	f7ff fcf5 	bl	116a4 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   11cba:	2800      	cmp	r0, #0
   11cbc:	d0be      	beq.n	11c3c <preempt+0x24>
   11cbe:	4a13      	ldr	r2, [pc, #76]	; (11d0c <preempt+0xf4>)
   11cc0:	4913      	ldr	r1, [pc, #76]	; (11d10 <preempt+0xf8>)
   11cc2:	f44f 7323 	mov.w	r3, #652	; 0x28c
		LL_ASSERT(ret == -ECANCELED);
   11cc6:	4813      	ldr	r0, [pc, #76]	; (11d14 <preempt+0xfc>)
   11cc8:	f00b fd75 	bl	1d7b6 <printk>
   11ccc:	4040      	eors	r0, r0
   11cce:	f380 8811 	msr	BASEPRI, r0
   11cd2:	f04f 0003 	mov.w	r0, #3
   11cd6:	df02      	svc	2
   11cd8:	e7b0      	b.n	11c3c <preempt+0x24>
			if (!iter->is_aborted &&
   11cda:	f890 3020 	ldrb.w	r3, [r0, #32]
   11cde:	079a      	lsls	r2, r3, #30
   11ce0:	d4d9      	bmi.n	11c96 <preempt+0x7e>
			    event.curr.param == iter->prepare_param.param) {
   11ce2:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   11ce4:	6821      	ldr	r1, [r4, #0]
   11ce6:	4291      	cmp	r1, r2
   11ce8:	d1d5      	bne.n	11c96 <preempt+0x7e>
				iter->is_aborted = 1;
   11cea:	f043 0302 	orr.w	r3, r3, #2
   11cee:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   11cf2:	6983      	ldr	r3, [r0, #24]
   11cf4:	4798      	blx	r3
   11cf6:	e7ce      	b.n	11c96 <preempt+0x7e>
		LL_ASSERT(ret == -ECANCELED);
   11cf8:	3748      	adds	r7, #72	; 0x48
   11cfa:	d09f      	beq.n	11c3c <preempt+0x24>
   11cfc:	f240 238e 	movw	r3, #654	; 0x28e
   11d00:	4a02      	ldr	r2, [pc, #8]	; (11d0c <preempt+0xf4>)
   11d02:	4905      	ldr	r1, [pc, #20]	; (11d18 <preempt+0x100>)
   11d04:	e7df      	b.n	11cc6 <preempt+0xae>
   11d06:	bf00      	nop
   11d08:	20001098 	.word	0x20001098
   11d0c:	000291b9 	.word	0x000291b9
   11d10:	00029035 	.word	0x00029035
   11d14:	00027ff4 	.word	0x00027ff4
   11d18:	000291ae 	.word	0x000291ae

00011d1c <ticker_start_op_cb>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11d1c:	2801      	cmp	r0, #1
{
   11d1e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11d20:	d90c      	bls.n	11d3c <ticker_start_op_cb+0x20>
   11d22:	f240 234a 	movw	r3, #586	; 0x24a
   11d26:	4a06      	ldr	r2, [pc, #24]	; (11d40 <ticker_start_op_cb+0x24>)
   11d28:	4906      	ldr	r1, [pc, #24]	; (11d44 <ticker_start_op_cb+0x28>)
   11d2a:	4807      	ldr	r0, [pc, #28]	; (11d48 <ticker_start_op_cb+0x2c>)
   11d2c:	f00b fd43 	bl	1d7b6 <printk>
   11d30:	4040      	eors	r0, r0
   11d32:	f380 8811 	msr	BASEPRI, r0
   11d36:	f04f 0003 	mov.w	r0, #3
   11d3a:	df02      	svc	2
}
   11d3c:	bd08      	pop	{r3, pc}
   11d3e:	bf00      	nop
   11d40:	000291b9 	.word	0x000291b9
   11d44:	0002922b 	.word	0x0002922b
   11d48:	00027ff4 	.word	0x00027ff4

00011d4c <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11d4c:	2200      	movs	r2, #0
{
   11d4e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11d50:	4611      	mov	r1, r2
   11d52:	4b09      	ldr	r3, [pc, #36]	; (11d78 <preempt_ticker_cb+0x2c>)
   11d54:	2001      	movs	r0, #1
   11d56:	f7fc ff1b 	bl	eb90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   11d5a:	b160      	cbz	r0, 11d76 <preempt_ticker_cb+0x2a>
   11d5c:	f240 2356 	movw	r3, #598	; 0x256
   11d60:	4a06      	ldr	r2, [pc, #24]	; (11d7c <preempt_ticker_cb+0x30>)
   11d62:	4907      	ldr	r1, [pc, #28]	; (11d80 <preempt_ticker_cb+0x34>)
   11d64:	4807      	ldr	r0, [pc, #28]	; (11d84 <preempt_ticker_cb+0x38>)
   11d66:	f00b fd26 	bl	1d7b6 <printk>
   11d6a:	4040      	eors	r0, r0
   11d6c:	f380 8811 	msr	BASEPRI, r0
   11d70:	f04f 0003 	mov.w	r0, #3
   11d74:	df02      	svc	2
}
   11d76:	bd08      	pop	{r3, pc}
   11d78:	2000e1cc 	.word	0x2000e1cc
   11d7c:	000291b9 	.word	0x000291b9
   11d80:	00029035 	.word	0x00029035
   11d84:	00027ff4 	.word	0x00027ff4

00011d88 <lll_init>:
{
   11d88:	b538      	push	{r3, r4, r5, lr}
   11d8a:	4818      	ldr	r0, [pc, #96]	; (11dec <lll_init+0x64>)
   11d8c:	f009 fee4 	bl	1bb58 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   11d90:	4b17      	ldr	r3, [pc, #92]	; (11df0 <lll_init+0x68>)
   11d92:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   11d94:	b910      	cbnz	r0, 11d9c <lll_init+0x14>
		return -ENODEV;
   11d96:	f06f 0012 	mvn.w	r0, #18
}
   11d9a:	bd38      	pop	{r3, r4, r5, pc}
	event.curr.abort_cb = NULL;
   11d9c:	4b15      	ldr	r3, [pc, #84]	; (11df4 <lll_init+0x6c>)
   11d9e:	2400      	movs	r4, #0
   11da0:	609c      	str	r4, [r3, #8]
   11da2:	4815      	ldr	r0, [pc, #84]	; (11df8 <lll_init+0x70>)
   11da4:	f009 fed8 	bl	1bb58 <z_impl_device_get_binding>
	if (!clk) {
   11da8:	4605      	mov	r5, r0
   11daa:	2800      	cmp	r0, #0
   11dac:	d0f3      	beq.n	11d96 <lll_init+0xe>
	clock_control_on(clk, CLOCK_CONTROL_NRF_SUBSYS_LF);
   11dae:	2101      	movs	r1, #1
   11db0:	f00f ffd9 	bl	21d66 <clock_control_on>
	lll.clk = clk;
   11db4:	4b11      	ldr	r3, [pc, #68]	; (11dfc <lll_init+0x74>)
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   11db6:	4622      	mov	r2, r4
   11db8:	4621      	mov	r1, r4
   11dba:	2001      	movs	r0, #1
	lll.clk = clk;
   11dbc:	601d      	str	r5, [r3, #0]
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   11dbe:	f7f2 fda1 	bl	4904 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   11dc2:	4622      	mov	r2, r4
   11dc4:	4621      	mov	r1, r4
   11dc6:	200b      	movs	r0, #11
   11dc8:	f7f2 fd9c 	bl	4904 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   11dcc:	4622      	mov	r2, r4
   11dce:	4621      	mov	r1, r4
   11dd0:	2018      	movs	r0, #24
   11dd2:	f7f2 fd97 	bl	4904 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   11dd6:	2001      	movs	r0, #1
   11dd8:	f7f2 fd62 	bl	48a0 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   11ddc:	200b      	movs	r0, #11
   11dde:	f7f2 fd5f 	bl	48a0 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   11de2:	2018      	movs	r0, #24
   11de4:	f7f2 fd5c 	bl	48a0 <arch_irq_enable>
	return 0;
   11de8:	4620      	mov	r0, r4
   11dea:	e7d6      	b.n	11d9a <lll_init+0x12>
   11dec:	0002901c 	.word	0x0002901c
   11df0:	20001094 	.word	0x20001094
   11df4:	20001098 	.word	0x20001098
   11df8:	00026ffd 	.word	0x00026ffd
   11dfc:	200010ac 	.word	0x200010ac

00011e00 <lll_entropy_get>:
{
   11e00:	b538      	push	{r3, r4, r5, lr}
	return entropy_get_entropy_isr(dev_entropy, rand, len, 0);
   11e02:	4b07      	ldr	r3, [pc, #28]	; (11e20 <lll_entropy_get+0x20>)
   11e04:	681d      	ldr	r5, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   11e06:	686b      	ldr	r3, [r5, #4]
   11e08:	685c      	ldr	r4, [r3, #4]
   11e0a:	4602      	mov	r2, r0
   11e0c:	b124      	cbz	r4, 11e18 <lll_entropy_get+0x18>
	return api->get_entropy_isr(dev, buffer, length, flags);
   11e0e:	2300      	movs	r3, #0
   11e10:	4628      	mov	r0, r5
   11e12:	47a0      	blx	r4
}
   11e14:	b2c0      	uxtb	r0, r0
   11e16:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   11e18:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11e1c:	e7fa      	b.n	11e14 <lll_entropy_get+0x14>
   11e1e:	bf00      	nop
   11e20:	20001094 	.word	0x20001094

00011e24 <lll_resume>:
{
   11e24:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
   11e26:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   11e2a:	f003 0301 	and.w	r3, r3, #1
   11e2e:	e9cd 0300 	strd	r0, r3, [sp]
   11e32:	69c3      	ldr	r3, [r0, #28]
   11e34:	6902      	ldr	r2, [r0, #16]
   11e36:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   11e3a:	f7ff fe5b 	bl	11af4 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   11e3e:	b168      	cbz	r0, 11e5c <lll_resume+0x38>
   11e40:	3044      	adds	r0, #68	; 0x44
   11e42:	d00b      	beq.n	11e5c <lll_resume+0x38>
   11e44:	23da      	movs	r3, #218	; 0xda
   11e46:	4a07      	ldr	r2, [pc, #28]	; (11e64 <lll_resume+0x40>)
   11e48:	4907      	ldr	r1, [pc, #28]	; (11e68 <lll_resume+0x44>)
   11e4a:	4808      	ldr	r0, [pc, #32]	; (11e6c <lll_resume+0x48>)
   11e4c:	f00b fcb3 	bl	1d7b6 <printk>
   11e50:	4040      	eors	r0, r0
   11e52:	f380 8811 	msr	BASEPRI, r0
   11e56:	f04f 0003 	mov.w	r0, #3
   11e5a:	df02      	svc	2
}
   11e5c:	b003      	add	sp, #12
   11e5e:	f85d fb04 	ldr.w	pc, [sp], #4
   11e62:	bf00      	nop
   11e64:	000291b9 	.word	0x000291b9
   11e68:	0002919b 	.word	0x0002919b
   11e6c:	00027ff4 	.word	0x00027ff4

00011e70 <lll_disable>:
{
   11e70:	b513      	push	{r0, r1, r4, lr}
   11e72:	4b1b      	ldr	r3, [pc, #108]	; (11ee0 <lll_disable+0x70>)
	if (!param || (param == event.curr.param)) {
   11e74:	4604      	mov	r4, r0
   11e76:	b110      	cbz	r0, 11e7e <lll_disable+0xe>
   11e78:	681a      	ldr	r2, [r3, #0]
   11e7a:	4282      	cmp	r2, r0
   11e7c:	d105      	bne.n	11e8a <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   11e7e:	689a      	ldr	r2, [r3, #8]
   11e80:	b16a      	cbz	r2, 11e9e <lll_disable+0x2e>
   11e82:	6819      	ldr	r1, [r3, #0]
   11e84:	b159      	cbz	r1, 11e9e <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   11e86:	2000      	movs	r0, #0
   11e88:	4790      	blx	r2
		u8_t idx = UINT8_MAX;
   11e8a:	23ff      	movs	r3, #255	; 0xff
   11e8c:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   11e90:	f10d 0007 	add.w	r0, sp, #7
   11e94:	f7ff fd76 	bl	11984 <ull_prepare_dequeue_iter>
		while (next) {
   11e98:	b980      	cbnz	r0, 11ebc <lll_disable+0x4c>
}
   11e9a:	b002      	add	sp, #8
   11e9c:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
   11e9e:	2c00      	cmp	r4, #0
   11ea0:	d0f3      	beq.n	11e8a <lll_disable+0x1a>
   11ea2:	23e4      	movs	r3, #228	; 0xe4
   11ea4:	4a0f      	ldr	r2, [pc, #60]	; (11ee4 <lll_disable+0x74>)
   11ea6:	4910      	ldr	r1, [pc, #64]	; (11ee8 <lll_disable+0x78>)
   11ea8:	4810      	ldr	r0, [pc, #64]	; (11eec <lll_disable+0x7c>)
   11eaa:	f00b fc84 	bl	1d7b6 <printk>
   11eae:	4040      	eors	r0, r0
   11eb0:	f380 8811 	msr	BASEPRI, r0
   11eb4:	f04f 0003 	mov.w	r0, #3
   11eb8:	df02      	svc	2
   11eba:	e7e6      	b.n	11e8a <lll_disable+0x1a>
			if (!next->is_aborted &&
   11ebc:	f890 3020 	ldrb.w	r3, [r0, #32]
   11ec0:	079b      	lsls	r3, r3, #30
   11ec2:	d4e5      	bmi.n	11e90 <lll_disable+0x20>
   11ec4:	68c1      	ldr	r1, [r0, #12]
   11ec6:	b10c      	cbz	r4, 11ecc <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   11ec8:	428c      	cmp	r4, r1
   11eca:	d1e1      	bne.n	11e90 <lll_disable+0x20>
				next->is_aborted = 1;
   11ecc:	f890 3020 	ldrb.w	r3, [r0, #32]
   11ed0:	f043 0302 	orr.w	r3, r3, #2
   11ed4:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   11ed8:	6983      	ldr	r3, [r0, #24]
   11eda:	4798      	blx	r3
   11edc:	e7d8      	b.n	11e90 <lll_disable+0x20>
   11ede:	bf00      	nop
   11ee0:	20001098 	.word	0x20001098
   11ee4:	000291b9 	.word	0x000291b9
   11ee8:	0002916a 	.word	0x0002916a
   11eec:	00027ff4 	.word	0x00027ff4

00011ef0 <lll_done>:
{
   11ef0:	b510      	push	{r4, lr}
   11ef2:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
   11ef4:	f7ff fc08 	bl	11708 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   11ef8:	b17c      	cbz	r4, 11f1a <lll_done+0x2a>
   11efa:	b960      	cbnz	r0, 11f16 <lll_done+0x26>
   11efc:	f240 1313 	movw	r3, #275	; 0x113
   11f00:	4a1a      	ldr	r2, [pc, #104]	; (11f6c <lll_done+0x7c>)
   11f02:	491b      	ldr	r1, [pc, #108]	; (11f70 <lll_done+0x80>)
   11f04:	481b      	ldr	r0, [pc, #108]	; (11f74 <lll_done+0x84>)
   11f06:	f00b fc56 	bl	1d7b6 <printk>
   11f0a:	4040      	eors	r0, r0
   11f0c:	f380 8811 	msr	BASEPRI, r0
   11f10:	f04f 0003 	mov.w	r0, #3
   11f14:	df02      	svc	2
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   11f16:	6820      	ldr	r0, [r4, #0]
   11f18:	e015      	b.n	11f46 <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
   11f1a:	4c17      	ldr	r4, [pc, #92]	; (11f78 <lll_done+0x88>)
   11f1c:	68a3      	ldr	r3, [r4, #8]
   11f1e:	b963      	cbnz	r3, 11f3a <lll_done+0x4a>
   11f20:	f44f 738c 	mov.w	r3, #280	; 0x118
   11f24:	4a11      	ldr	r2, [pc, #68]	; (11f6c <lll_done+0x7c>)
   11f26:	4915      	ldr	r1, [pc, #84]	; (11f7c <lll_done+0x8c>)
   11f28:	4812      	ldr	r0, [pc, #72]	; (11f74 <lll_done+0x84>)
   11f2a:	f00b fc44 	bl	1d7b6 <printk>
   11f2e:	4040      	eors	r0, r0
   11f30:	f380 8811 	msr	BASEPRI, r0
   11f34:	f04f 0003 	mov.w	r0, #3
   11f38:	df02      	svc	2
		param = event.curr.param;
   11f3a:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   11f3c:	2300      	movs	r3, #0
   11f3e:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   11f40:	6023      	str	r3, [r4, #0]
		if (param) {
   11f42:	b108      	cbz	r0, 11f48 <lll_done+0x58>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   11f44:	6800      	ldr	r0, [r0, #0]
   11f46:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   11f48:	f7ff fd4a 	bl	119e0 <ull_event_done>
	LL_ASSERT(evdone);
   11f4c:	b960      	cbnz	r0, 11f68 <lll_done+0x78>
   11f4e:	f44f 7398 	mov.w	r3, #304	; 0x130
   11f52:	4a06      	ldr	r2, [pc, #24]	; (11f6c <lll_done+0x7c>)
   11f54:	490a      	ldr	r1, [pc, #40]	; (11f80 <lll_done+0x90>)
   11f56:	4807      	ldr	r0, [pc, #28]	; (11f74 <lll_done+0x84>)
   11f58:	f00b fc2d 	bl	1d7b6 <printk>
   11f5c:	4040      	eors	r0, r0
   11f5e:	f380 8811 	msr	BASEPRI, r0
   11f62:	f04f 0003 	mov.w	r0, #3
   11f66:	df02      	svc	2
}
   11f68:	2000      	movs	r0, #0
   11f6a:	bd10      	pop	{r4, pc}
   11f6c:	000291b9 	.word	0x000291b9
   11f70:	00029171 	.word	0x00029171
   11f74:	00027ff4 	.word	0x00027ff4
   11f78:	20001098 	.word	0x20001098
   11f7c:	00029180 	.word	0x00029180
   11f80:	00029194 	.word	0x00029194

00011f84 <lll_clk_on>:
	err = clock_control_on(lll.clk, CLOCK_CONTROL_NRF_SUBSYS_HF);
   11f84:	4b02      	ldr	r3, [pc, #8]	; (11f90 <lll_clk_on+0xc>)
   11f86:	2100      	movs	r1, #0
   11f88:	6818      	ldr	r0, [r3, #0]
   11f8a:	f00f beec 	b.w	21d66 <clock_control_on>
   11f8e:	bf00      	nop
   11f90:	200010ac 	.word	0x200010ac

00011f94 <lll_clk_off>:
	err = clock_control_off(lll.clk, CLOCK_CONTROL_NRF_SUBSYS_HF);
   11f94:	4b02      	ldr	r3, [pc, #8]	; (11fa0 <lll_clk_off+0xc>)
   11f96:	6818      	ldr	r0, [r3, #0]
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
   11f98:	6843      	ldr	r3, [r0, #4]
   11f9a:	2100      	movs	r1, #0
   11f9c:	685b      	ldr	r3, [r3, #4]
   11f9e:	4718      	bx	r3
   11fa0:	200010ac 	.word	0x200010ac

00011fa4 <lll_chan_set>:
	switch (chan) {
   11fa4:	2826      	cmp	r0, #38	; 0x26
{
   11fa6:	b510      	push	{r4, lr}
   11fa8:	4604      	mov	r4, r0
	switch (chan) {
   11faa:	d00b      	beq.n	11fc4 <lll_chan_set+0x20>
   11fac:	2827      	cmp	r0, #39	; 0x27
   11fae:	d00b      	beq.n	11fc8 <lll_chan_set+0x24>
   11fb0:	2825      	cmp	r0, #37	; 0x25
   11fb2:	d10b      	bne.n	11fcc <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   11fb4:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   11fb6:	f004 fe81 	bl	16cbc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   11fba:	4620      	mov	r0, r4
}
   11fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   11fc0:	f004 be82 	b.w	16cc8 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   11fc4:	201a      	movs	r0, #26
   11fc6:	e7f6      	b.n	11fb6 <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   11fc8:	2050      	movs	r0, #80	; 0x50
   11fca:	e7f4      	b.n	11fb6 <lll_chan_set+0x12>
		if (chan < 11) {
   11fcc:	280a      	cmp	r0, #10
   11fce:	d802      	bhi.n	11fd6 <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   11fd0:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   11fd2:	0040      	lsls	r0, r0, #1
   11fd4:	e7ef      	b.n	11fb6 <lll_chan_set+0x12>
		} else if (chan < 40) {
   11fd6:	2827      	cmp	r0, #39	; 0x27
   11fd8:	d801      	bhi.n	11fde <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   11fda:	3003      	adds	r0, #3
   11fdc:	e7f9      	b.n	11fd2 <lll_chan_set+0x2e>
			LL_ASSERT(0);
   11fde:	f240 13a1 	movw	r3, #417	; 0x1a1
   11fe2:	4a06      	ldr	r2, [pc, #24]	; (11ffc <lll_chan_set+0x58>)
   11fe4:	4906      	ldr	r1, [pc, #24]	; (12000 <lll_chan_set+0x5c>)
   11fe6:	4807      	ldr	r0, [pc, #28]	; (12004 <lll_chan_set+0x60>)
   11fe8:	f00b fbe5 	bl	1d7b6 <printk>
   11fec:	4040      	eors	r0, r0
   11fee:	f380 8811 	msr	BASEPRI, r0
   11ff2:	f04f 0003 	mov.w	r0, #3
   11ff6:	df02      	svc	2
   11ff8:	e7df      	b.n	11fba <lll_chan_set+0x16>
   11ffa:	bf00      	nop
   11ffc:	000291b9 	.word	0x000291b9
   12000:	0002a0ca 	.word	0x0002a0ca
   12004:	00027ff4 	.word	0x00027ff4

00012008 <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   12008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   1200a:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   1200c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
{
   12010:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   12012:	b963      	cbnz	r3, 1202e <disabled_cb+0x26>
   12014:	f240 4396 	movw	r3, #1174	; 0x496
   12018:	4a1d      	ldr	r2, [pc, #116]	; (12090 <disabled_cb+0x88>)
   1201a:	491e      	ldr	r1, [pc, #120]	; (12094 <disabled_cb+0x8c>)
   1201c:	481e      	ldr	r0, [pc, #120]	; (12098 <disabled_cb+0x90>)
   1201e:	f00b fbca 	bl	1d7b6 <printk>
   12022:	4040      	eors	r0, r0
   12024:	f380 8811 	msr	BASEPRI, r0
   12028:	f04f 0003 	mov.w	r0, #3
   1202c:	df02      	svc	2
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;
   1202e:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   12030:	f8d5 70d0 	ldr.w	r7, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
   12034:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0

	LL_ASSERT(adv->node_rx_cc_free);
   12038:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   1203c:	b963      	cbnz	r3, 12058 <disabled_cb+0x50>
   1203e:	f240 439a 	movw	r3, #1178	; 0x49a
   12042:	4a13      	ldr	r2, [pc, #76]	; (12090 <disabled_cb+0x88>)
   12044:	4915      	ldr	r1, [pc, #84]	; (1209c <disabled_cb+0x94>)
   12046:	4814      	ldr	r0, [pc, #80]	; (12098 <disabled_cb+0x90>)
   12048:	f00b fbb5 	bl	1d7b6 <printk>
   1204c:	4040      	eors	r0, r0
   1204e:	f380 8811 	msr	BASEPRI, r0
   12052:	f04f 0003 	mov.w	r0, #3
   12056:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   12058:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
	adv->node_rx_cc_free = NULL;
   1205c:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1205e:	2308      	movs	r3, #8
	adv->node_rx_cc_free = NULL;
   12060:	f8c5 10d4 	str.w	r1, [r5, #212]	; 0xd4
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12064:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   12066:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1206a:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   1206c:	221e      	movs	r2, #30
   1206e:	f104 0020 	add.w	r0, r4, #32
   12072:	f00d faeb 	bl	1f64c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   12076:	233c      	movs	r3, #60	; 0x3c
   12078:	f884 3020 	strb.w	r3, [r4, #32]

	ftr = &(rx->hdr.rx_ftr);
	ftr->param = param;
   1207c:	60a6      	str	r6, [r4, #8]

	ll_rx_put(link, rx);
   1207e:	4621      	mov	r1, r4
   12080:	4638      	mov	r0, r7
   12082:	f7ff f9b9 	bl	113f8 <ll_rx_put>
	ll_rx_sched();
}
   12086:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1208a:	f7ff b9bf 	b.w	1140c <ll_rx_sched>
   1208e:	bf00      	nop
   12090:	00029256 	.word	0x00029256
   12094:	0002928e 	.word	0x0002928e
   12098:	00027ff4 	.word	0x00027ff4
   1209c:	000292a0 	.word	0x000292a0

000120a0 <ticker_cb>:
{
   120a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   120a2:	461d      	mov	r5, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   120a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   120a8:	429a      	cmp	r2, r3
{
   120aa:	b08b      	sub	sp, #44	; 0x2c
   120ac:	4607      	mov	r7, r0
   120ae:	460e      	mov	r6, r1
   120b0:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   120b2:	d02d      	beq.n	12110 <ticker_cb+0x70>
	return ++hdr->ref;
   120b4:	7c2b      	ldrb	r3, [r5, #16]
   120b6:	3301      	adds	r3, #1
   120b8:	b2db      	uxtb	r3, r3
   120ba:	742b      	strb	r3, [r5, #16]
		LL_ASSERT(ref);
   120bc:	b963      	cbnz	r3, 120d8 <ticker_cb+0x38>
   120be:	f240 4312 	movw	r3, #1042	; 0x412
   120c2:	4a2f      	ldr	r2, [pc, #188]	; (12180 <ticker_cb+0xe0>)
   120c4:	492f      	ldr	r1, [pc, #188]	; (12184 <ticker_cb+0xe4>)
   120c6:	4830      	ldr	r0, [pc, #192]	; (12188 <ticker_cb+0xe8>)
   120c8:	f00b fb75 	bl	1d7b6 <printk>
   120cc:	4040      	eors	r0, r0
   120ce:	f380 8811 	msr	BASEPRI, r0
   120d2:	f04f 0003 	mov.w	r0, #3
   120d6:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
   120d8:	4a2c      	ldr	r2, [pc, #176]	; (1218c <ticker_cb+0xec>)
	lll = &adv->lll;
   120da:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
   120de:	60d3      	str	r3, [r2, #12]
		mfy.param = &p;
   120e0:	4b2b      	ldr	r3, [pc, #172]	; (12190 <ticker_cb+0xf0>)
		p.lazy = lazy;
   120e2:	8114      	strh	r4, [r2, #8]
		p.remainder = remainder;
   120e4:	e9c2 7600 	strd	r7, r6, [r2]
		mfy.param = &p;
   120e8:	609a      	str	r2, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   120ea:	2200      	movs	r2, #0
   120ec:	4611      	mov	r1, r2
   120ee:	2001      	movs	r0, #1
   120f0:	f7fc fd4e 	bl	eb90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   120f4:	b160      	cbz	r0, 12110 <ticker_cb+0x70>
   120f6:	f240 431e 	movw	r3, #1054	; 0x41e
   120fa:	4a21      	ldr	r2, [pc, #132]	; (12180 <ticker_cb+0xe0>)
   120fc:	4925      	ldr	r1, [pc, #148]	; (12194 <ticker_cb+0xf4>)
   120fe:	4822      	ldr	r0, [pc, #136]	; (12188 <ticker_cb+0xe8>)
   12100:	f00b fb59 	bl	1d7b6 <printk>
   12104:	4040      	eors	r0, r0
   12106:	f380 8811 	msr	BASEPRI, r0
   1210a:	f04f 0003 	mov.w	r0, #3
   1210e:	df02      	svc	2
	if (!lll->is_hdcd)
   12110:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
   12114:	f014 0401 	ands.w	r4, r4, #1
   12118:	d12f      	bne.n	1217a <ticker_cb+0xda>
		lll_entropy_get(sizeof(random_delay), &random_delay);
   1211a:	a909      	add	r1, sp, #36	; 0x24
   1211c:	2004      	movs	r0, #4
   1211e:	f7ff fe6f 	bl	11e00 <lll_entropy_get>
		random_delay %= HAL_TICKER_US_TO_TICKS(10000);
   12122:	9909      	ldr	r1, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12124:	9506      	str	r5, [sp, #24]
		random_delay %= HAL_TICKER_US_TO_TICKS(10000);
   12126:	f240 1247 	movw	r2, #327	; 0x147
   1212a:	fbb1 f3f2 	udiv	r3, r1, r2
   1212e:	fb02 1313 	mls	r3, r2, r3, r1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12132:	4a19      	ldr	r2, [pc, #100]	; (12198 <ticker_cb+0xf8>)
   12134:	21e4      	movs	r1, #228	; 0xe4
   12136:	1aaa      	subs	r2, r5, r2
   12138:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1213c:	4917      	ldr	r1, [pc, #92]	; (1219c <ticker_cb+0xfc>)
				    (TICKER_ID_ADV_BASE +
   1213e:	3202      	adds	r2, #2
		random_delay += 1;
   12140:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12142:	e9cd 4104 	strd	r4, r1, [sp, #16]
   12146:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1214a:	e9cd 4400 	strd	r4, r4, [sp]
   1214e:	b2d2      	uxtb	r2, r2
   12150:	2101      	movs	r1, #1
   12152:	4620      	mov	r0, r4
		random_delay += 1;
   12154:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12156:	f7fd f9e3 	bl	f520 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1215a:	f030 0302 	bics.w	r3, r0, #2
   1215e:	d00c      	beq.n	1217a <ticker_cb+0xda>
   12160:	f240 4335 	movw	r3, #1077	; 0x435
   12164:	4a06      	ldr	r2, [pc, #24]	; (12180 <ticker_cb+0xe0>)
   12166:	490e      	ldr	r1, [pc, #56]	; (121a0 <ticker_cb+0x100>)
   12168:	4807      	ldr	r0, [pc, #28]	; (12188 <ticker_cb+0xe8>)
   1216a:	f00b fb24 	bl	1d7b6 <printk>
   1216e:	4040      	eors	r0, r0
   12170:	f380 8811 	msr	BASEPRI, r0
   12174:	f04f 0003 	mov.w	r0, #3
   12178:	df02      	svc	2
}
   1217a:	b00b      	add	sp, #44	; 0x2c
   1217c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1217e:	bf00      	nop
   12180:	00029256 	.word	0x00029256
   12184:	00029139 	.word	0x00029139
   12188:	00027ff4 	.word	0x00027ff4
   1218c:	200011a4 	.word	0x200011a4
   12190:	2000e1dc 	.word	0x2000e1dc
   12194:	00029035 	.word	0x00029035
   12198:	200010c0 	.word	0x200010c0
   1219c:	000122c5 	.word	0x000122c5
   121a0:	000292c5 	.word	0x000292c5

000121a4 <conn_release>:

static inline void conn_release(struct ll_adv_set *adv)
{
   121a4:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   121a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   121a8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
{
   121aa:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   121ac:	b163      	cbz	r3, 121c8 <conn_release+0x24>
   121ae:	f240 43b1 	movw	r3, #1201	; 0x4b1
   121b2:	4a19      	ldr	r2, [pc, #100]	; (12218 <conn_release+0x74>)
   121b4:	4919      	ldr	r1, [pc, #100]	; (1221c <conn_release+0x78>)
   121b6:	481a      	ldr	r0, [pc, #104]	; (12220 <conn_release+0x7c>)
   121b8:	f00b fafd 	bl	1d7b6 <printk>
   121bc:	4040      	eors	r0, r0
   121be:	f380 8811 	msr	BASEPRI, r0
   121c2:	f04f 0003 	mov.w	r0, #3
   121c6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   121c8:	f105 0150 	add.w	r1, r5, #80	; 0x50
   121cc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   121d0:	f00f fb93 	bl	218fa <memq_deinit>
	LL_ASSERT(link);
   121d4:	4606      	mov	r6, r0
   121d6:	b960      	cbnz	r0, 121f2 <conn_release+0x4e>
   121d8:	f240 43b3 	movw	r3, #1203	; 0x4b3
   121dc:	4a0e      	ldr	r2, [pc, #56]	; (12218 <conn_release+0x74>)
   121de:	4911      	ldr	r1, [pc, #68]	; (12224 <conn_release+0x80>)
   121e0:	480f      	ldr	r0, [pc, #60]	; (12220 <conn_release+0x7c>)
   121e2:	f00b fae8 	bl	1d7b6 <printk>
   121e6:	4040      	eors	r0, r0
   121e8:	f380 8811 	msr	BASEPRI, r0
   121ec:	f04f 0003 	mov.w	r0, #3
   121f0:	df02      	svc	2
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   121f2:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   121f4:	65ee      	str	r6, [r5, #92]	; 0x5c
	adv->lll.conn = NULL;
   121f6:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   121f8:	f001 f8d2 	bl	133a0 <ll_conn_release>

	ll_rx_release(adv->node_rx_cc_free);
   121fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	adv->lll.conn = NULL;
   12200:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   12202:	f7ff f8f3 	bl	113ec <ll_rx_release>
	adv->node_rx_cc_free = NULL;
   12206:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	ll_rx_link_release(adv->link_cc_free);
   1220a:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   1220e:	f7ff f8e1 	bl	113d4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   12212:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
}
   12216:	bd70      	pop	{r4, r5, r6, pc}
   12218:	00029256 	.word	0x00029256
   1221c:	00029118 	.word	0x00029118
   12220:	00027ff4 	.word	0x00027ff4
   12224:	0002952b 	.word	0x0002952b

00012228 <ticker_op_stop_cb>:
{
   12228:	b570      	push	{r4, r5, r6, lr}
   1222a:	460c      	mov	r4, r1
	if (status != TICKER_STATUS_SUCCESS) {
   1222c:	2800      	cmp	r0, #0
   1222e:	d12f      	bne.n	12290 <ticker_op_stop_cb+0x68>
	mfy.param = &adv->lll;
   12230:	4b1d      	ldr	r3, [pc, #116]	; (122a8 <ticker_op_stop_cb+0x80>)
   12232:	4d1e      	ldr	r5, [pc, #120]	; (122ac <ticker_op_stop_cb+0x84>)
   12234:	f101 021c 	add.w	r2, r1, #28
   12238:	609a      	str	r2, [r3, #8]
	if (hdr->ref) {
   1223a:	7c0a      	ldrb	r2, [r1, #16]
   1223c:	461e      	mov	r6, r3
   1223e:	b342      	cbz	r2, 12292 <ticker_op_stop_cb+0x6a>
		LL_ASSERT(!hdr->disabled_cb);
   12240:	694b      	ldr	r3, [r1, #20]
   12242:	b163      	cbz	r3, 1225e <ticker_op_stop_cb+0x36>
   12244:	f240 437c 	movw	r3, #1148	; 0x47c
   12248:	4a19      	ldr	r2, [pc, #100]	; (122b0 <ticker_op_stop_cb+0x88>)
   1224a:	491a      	ldr	r1, [pc, #104]	; (122b4 <ticker_op_stop_cb+0x8c>)
   1224c:	481a      	ldr	r0, [pc, #104]	; (122b8 <ticker_op_stop_cb+0x90>)
   1224e:	f00b fab2 	bl	1d7b6 <printk>
   12252:	4040      	eors	r0, r0
   12254:	f380 8811 	msr	BASEPRI, r0
   12258:	f04f 0003 	mov.w	r0, #3
   1225c:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1225e:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12260:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   12262:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
   12266:	4b15      	ldr	r3, [pc, #84]	; (122bc <ticker_op_stop_cb+0x94>)
   12268:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1226a:	4611      	mov	r1, r2
   1226c:	4b0e      	ldr	r3, [pc, #56]	; (122a8 <ticker_op_stop_cb+0x80>)
   1226e:	2002      	movs	r0, #2
   12270:	f7fc fc8e 	bl	eb90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   12274:	b160      	cbz	r0, 12290 <ticker_op_stop_cb+0x68>
   12276:	f240 4383 	movw	r3, #1155	; 0x483
		LL_ASSERT(!ret);
   1227a:	4a0d      	ldr	r2, [pc, #52]	; (122b0 <ticker_op_stop_cb+0x88>)
   1227c:	4910      	ldr	r1, [pc, #64]	; (122c0 <ticker_op_stop_cb+0x98>)
   1227e:	480e      	ldr	r0, [pc, #56]	; (122b8 <ticker_op_stop_cb+0x90>)
   12280:	f00b fa99 	bl	1d7b6 <printk>
   12284:	4040      	eors	r0, r0
   12286:	f380 8811 	msr	BASEPRI, r0
   1228a:	f04f 0003 	mov.w	r0, #3
   1228e:	df02      	svc	2
}
   12290:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12292:	2101      	movs	r1, #1
   12294:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
   12296:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12298:	f7fc fc7a 	bl	eb90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1229c:	2800      	cmp	r0, #0
   1229e:	d0f7      	beq.n	12290 <ticker_op_stop_cb+0x68>
   122a0:	f44f 6391 	mov.w	r3, #1160	; 0x488
   122a4:	e7e9      	b.n	1227a <ticker_op_stop_cb+0x52>
   122a6:	bf00      	nop
   122a8:	2000e1ec 	.word	0x2000e1ec
   122ac:	00012009 	.word	0x00012009
   122b0:	00029256 	.word	0x00029256
   122b4:	000292de 	.word	0x000292de
   122b8:	00027ff4 	.word	0x00027ff4
   122bc:	00011e71 	.word	0x00011e71
   122c0:	00029035 	.word	0x00029035

000122c4 <ticker_op_update_cb>:
{
   122c4:	b510      	push	{r4, lr}
   122c6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   122c8:	b180      	cbz	r0, 122ec <ticker_op_update_cb+0x28>
   122ca:	f7ff f947 	bl	1155c <ull_disable_mark_get>
   122ce:	4284      	cmp	r4, r0
   122d0:	d00c      	beq.n	122ec <ticker_op_update_cb+0x28>
   122d2:	f240 433e 	movw	r3, #1086	; 0x43e
   122d6:	4a06      	ldr	r2, [pc, #24]	; (122f0 <ticker_op_update_cb+0x2c>)
   122d8:	4906      	ldr	r1, [pc, #24]	; (122f4 <ticker_op_update_cb+0x30>)
   122da:	4807      	ldr	r0, [pc, #28]	; (122f8 <ticker_op_update_cb+0x34>)
   122dc:	f00b fa6b 	bl	1d7b6 <printk>
   122e0:	4040      	eors	r0, r0
   122e2:	f380 8811 	msr	BASEPRI, r0
   122e6:	f04f 0003 	mov.w	r0, #3
   122ea:	df02      	svc	2
}
   122ec:	bd10      	pop	{r4, pc}
   122ee:	bf00      	nop
   122f0:	00029256 	.word	0x00029256
   122f4:	000292f0 	.word	0x000292f0
   122f8:	00027ff4 	.word	0x00027ff4

000122fc <ticker_stop_cb>:
{
   122fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   122fe:	4c17      	ldr	r4, [pc, #92]	; (1235c <ticker_stop_cb+0x60>)
{
   12300:	461d      	mov	r5, r3
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12302:	1b1c      	subs	r4, r3, r4
   12304:	22e4      	movs	r2, #228	; 0xe4
   12306:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
   1230a:	b2a3      	uxth	r3, r4
   1230c:	b163      	cbz	r3, 12328 <ticker_stop_cb+0x2c>
   1230e:	f240 4359 	movw	r3, #1113	; 0x459
   12312:	4a13      	ldr	r2, [pc, #76]	; (12360 <ticker_stop_cb+0x64>)
   12314:	4913      	ldr	r1, [pc, #76]	; (12364 <ticker_stop_cb+0x68>)
   12316:	4814      	ldr	r0, [pc, #80]	; (12368 <ticker_stop_cb+0x6c>)
   12318:	f00b fa4d 	bl	1d7b6 <printk>
   1231c:	4040      	eors	r0, r0
   1231e:	f380 8811 	msr	BASEPRI, r0
   12322:	f04f 0003 	mov.w	r0, #3
   12326:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   12328:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1232a:	4b10      	ldr	r3, [pc, #64]	; (1236c <ticker_stop_cb+0x70>)
   1232c:	9500      	str	r5, [sp, #0]
   1232e:	b2d2      	uxtb	r2, r2
   12330:	2101      	movs	r1, #1
   12332:	2000      	movs	r0, #0
   12334:	f7fd f93c 	bl	f5b0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12338:	f030 0302 	bics.w	r3, r0, #2
   1233c:	d00c      	beq.n	12358 <ticker_stop_cb+0x5c>
   1233e:	f240 435f 	movw	r3, #1119	; 0x45f
   12342:	4a07      	ldr	r2, [pc, #28]	; (12360 <ticker_stop_cb+0x64>)
   12344:	490a      	ldr	r1, [pc, #40]	; (12370 <ticker_stop_cb+0x74>)
   12346:	4808      	ldr	r0, [pc, #32]	; (12368 <ticker_stop_cb+0x6c>)
   12348:	f00b fa35 	bl	1d7b6 <printk>
   1234c:	4040      	eors	r0, r0
   1234e:	f380 8811 	msr	BASEPRI, r0
   12352:	f04f 0003 	mov.w	r0, #3
   12356:	df02      	svc	2
}
   12358:	b003      	add	sp, #12
   1235a:	bd30      	pop	{r4, r5, pc}
   1235c:	200010c0 	.word	0x200010c0
   12360:	00029256 	.word	0x00029256
   12364:	0002931f 	.word	0x0002931f
   12368:	00027ff4 	.word	0x00027ff4
   1236c:	00012229 	.word	0x00012229
   12370:	000292c5 	.word	0x000292c5

00012374 <ll_adv_params_set>:
{
   12374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
   12378:	4c44      	ldr	r4, [pc, #272]	; (1248c <ll_adv_params_set+0x118>)
{
   1237a:	4699      	mov	r9, r3
	if (!adv || adv->is_enabled) {
   1237c:	f894 60cc 	ldrb.w	r6, [r4, #204]	; 0xcc
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   12380:	4b43      	ldr	r3, [pc, #268]	; (12490 <ll_adv_params_set+0x11c>)
   12382:	9300      	str	r3, [sp, #0]
   12384:	2301      	movs	r3, #1
	if (!adv || adv->is_enabled) {
   12386:	401e      	ands	r6, r3
{
   12388:	4617      	mov	r7, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1238a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!adv || adv->is_enabled) {
   1238e:	d17a      	bne.n	12486 <ll_adv_params_set+0x112>
		adv->interval = 0;
   12390:	4299      	cmp	r1, r3
	adv->lll.chan_map = chan_map;
   12392:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   12396:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1239a:	f362 0343 	bfi	r3, r2, #1, #3
   1239e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	adv->lll.filter_policy = filter_policy;
   123a2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   123a6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   123aa:	f362 0301 	bfi	r3, r2, #0, #2
   123ae:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   123b2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   123b6:	f04f 0527 	mov.w	r5, #39	; 0x27
   123ba:	f04f 032d 	mov.w	r3, #45	; 0x2d
   123be:	fb15 3502 	smlabb	r5, r5, r2, r3
	pdu->type = pdu_adv_type[adv_type];
   123c2:	ab02      	add	r3, sp, #8
		adv->interval = 0;
   123c4:	bf08      	it	eq
   123c6:	2000      	moveq	r0, #0
	pdu->type = pdu_adv_type[adv_type];
   123c8:	4419      	add	r1, r3
   123ca:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
   123ce:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   123d2:	5d63      	ldrb	r3, [r4, r5]
   123d4:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   123d8:	f366 1304 	bfi	r3, r6, #4, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   123dc:	b2db      	uxtb	r3, r3
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   123de:	f013 0f0e 	tst.w	r3, #14
   123e2:	bf0c      	ite	eq
   123e4:	2201      	moveq	r2, #1
   123e6:	2200      	movne	r2, #0
   123e8:	f362 1345 	bfi	r3, r2, #5, #1
   123ec:	5563      	strb	r3, [r4, r5]
	adv->own_addr_type = own_addr_type;
   123ee:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
   123f2:	f367 0301 	bfi	r3, r7, #0, #2
   123f6:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   123fa:	b2db      	uxtb	r3, r3
   123fc:	079a      	lsls	r2, r3, #30
   123fe:	eb04 0805 	add.w	r8, r4, r5
   12402:	d509      	bpl.n	12418 <ll_adv_params_set+0xa4>
		adv->id_addr_type = direct_addr_type;
   12404:	f369 0382 	bfi	r3, r9, #2, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   12408:	2206      	movs	r2, #6
   1240a:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
   1240c:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   12410:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
   12414:	f00d f8f0 	bl	1f5f8 <memcpy>
	pdu->tx_addr = own_addr_type & 0x1;
   12418:	5d61      	ldrb	r1, [r4, r5]
   1241a:	f007 0701 	and.w	r7, r7, #1
   1241e:	f367 1186 	bfi	r1, r7, #6, #1
	pdu->rx_addr = 0;
   12422:	f36f 11c7 	bfc	r1, #7, #1
   12426:	5561      	strb	r1, [r4, r5]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12428:	b2c9      	uxtb	r1, r1
   1242a:	f001 030f 	and.w	r3, r1, #15
   1242e:	2b01      	cmp	r3, #1
   12430:	d123      	bne.n	1247a <ll_adv_params_set+0x106>
		pdu->rx_addr = direct_addr_type;
   12432:	f369 11c7 	bfi	r1, r9, #7, #1
   12436:	5561      	strb	r1, [r4, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   12438:	2206      	movs	r2, #6
   1243a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1243c:	f108 0008 	add.w	r0, r8, #8
   12440:	f00d f8da 	bl	1f5f8 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   12444:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
   12446:	f888 3001 	strb.w	r3, [r8, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1244a:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   1244e:	237d      	movs	r3, #125	; 0x7d
   12450:	2227      	movs	r2, #39	; 0x27
   12452:	fb12 3201 	smlabb	r2, r2, r1, r3
   12456:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = own_addr_type & 0x1;
   12458:	5ca3      	ldrb	r3, [r4, r2]
   1245a:	f367 1386 	bfi	r3, r7, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   12462:	f043 0304 	orr.w	r3, r3, #4
   12466:	54a3      	strb	r3, [r4, r2]
	if (pdu->len == 0) {
   12468:	784b      	ldrb	r3, [r1, #1]
   1246a:	b913      	cbnz	r3, 12472 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   1246c:	2206      	movs	r2, #6
   1246e:	704a      	strb	r2, [r1, #1]
	return 0;
   12470:	461e      	mov	r6, r3
}
   12472:	4630      	mov	r0, r6
   12474:	b003      	add	sp, #12
   12476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (pdu->len == 0) {
   1247a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1247e:	2b00      	cmp	r3, #0
   12480:	d1e3      	bne.n	1244a <ll_adv_params_set+0xd6>
		pdu->len = BDADDR_SIZE;
   12482:	2306      	movs	r3, #6
   12484:	e7df      	b.n	12446 <ll_adv_params_set+0xd2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12486:	260c      	movs	r6, #12
   12488:	e7f3      	b.n	12472 <ll_adv_params_set+0xfe>
   1248a:	bf00      	nop
   1248c:	200010c0 	.word	0x200010c0
   12490:	02060100 	.word	0x02060100

00012494 <ll_adv_data_set>:
{
   12494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   12498:	4a29      	ldr	r2, [pc, #164]	; (12540 <ll_adv_data_set+0xac>)
   1249a:	f892 402c 	ldrb.w	r4, [r2, #44]	; 0x2c
   1249e:	232d      	movs	r3, #45	; 0x2d
   124a0:	4607      	mov	r7, r0
   124a2:	2027      	movs	r0, #39	; 0x27
   124a4:	fb10 3004 	smlabb	r0, r0, r4, r3
   124a8:	4689      	mov	r9, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   124aa:	f812 c000 	ldrb.w	ip, [r2, r0]
   124ae:	f00c 030f 	and.w	r3, ip, #15
   124b2:	2b01      	cmp	r3, #1
   124b4:	eb02 0100 	add.w	r1, r2, r0
   124b8:	4615      	mov	r5, r2
   124ba:	d03e      	beq.n	1253a <ll_adv_data_set+0xa6>
	if (pdu->first == pdu->last) {
   124bc:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
   124c0:	42a3      	cmp	r3, r4
   124c2:	d104      	bne.n	124ce <ll_adv_data_set+0x3a>
		last = pdu->last + 1;
   124c4:	3401      	adds	r4, #1
   124c6:	b2e4      	uxtb	r4, r4
			last = 0U;
   124c8:	2c02      	cmp	r4, #2
   124ca:	bf08      	it	eq
   124cc:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
   124ce:	2627      	movs	r6, #39	; 0x27
   124d0:	232d      	movs	r3, #45	; 0x2d
   124d2:	fb16 3304 	smlabb	r3, r6, r4, r3
   124d6:	eb05 0803 	add.w	r8, r5, r3
	pdu->type = prev->type;
   124da:	5cee      	ldrb	r6, [r5, r3]
   124dc:	f36c 0603 	bfi	r6, ip, #0, #4
	pdu->rfu = 0U;
   124e0:	f36f 1604 	bfc	r6, #4, #1
   124e4:	54ee      	strb	r6, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   124e6:	5c16      	ldrb	r6, [r2, r0]
   124e8:	f815 c003 	ldrb.w	ip, [r5, r3]
   124ec:	f3c6 1640 	ubfx	r6, r6, #5, #1
   124f0:	f366 1c45 	bfi	ip, r6, #5, #1
   124f4:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
   124f8:	5c16      	ldrb	r6, [r2, r0]
   124fa:	fa5f fc8c 	uxtb.w	ip, ip
   124fe:	f3c6 1680 	ubfx	r6, r6, #6, #1
   12502:	f366 1c86 	bfi	ip, r6, #6, #1
   12506:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->rx_addr = prev->rx_addr;
   1250a:	5c12      	ldrb	r2, [r2, r0]
   1250c:	fa5f f08c 	uxtb.w	r0, ip
   12510:	09d2      	lsrs	r2, r2, #7
   12512:	f362 10c7 	bfi	r0, r2, #7, #1
   12516:	54e8      	strb	r0, [r5, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   12518:	2206      	movs	r2, #6
   1251a:	3102      	adds	r1, #2
   1251c:	f108 0002 	add.w	r0, r8, #2
   12520:	f00d f86a 	bl	1f5f8 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   12524:	463a      	mov	r2, r7
   12526:	4649      	mov	r1, r9
   12528:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   1252c:	3706      	adds	r7, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1252e:	f00d f863 	bl	1f5f8 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   12532:	f888 7001 	strb.w	r7, [r8, #1]
	pdu->last = idx;
   12536:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
   1253a:	2000      	movs	r0, #0
   1253c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12540:	200010c0 	.word	0x200010c0

00012544 <ll_adv_scan_rsp_set>:
{
   12544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12548:	4a1e      	ldr	r2, [pc, #120]	; (125c4 <ll_adv_scan_rsp_set+0x80>)
   1254a:	f892 407c 	ldrb.w	r4, [r2, #124]	; 0x7c
   1254e:	237d      	movs	r3, #125	; 0x7d
   12550:	f04f 0c27 	mov.w	ip, #39	; 0x27
   12554:	fb1c 3c04 	smlabb	ip, ip, r4, r3
	if (pdu->first == pdu->last) {
   12558:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
   1255c:	42a3      	cmp	r3, r4
   1255e:	4688      	mov	r8, r1
   12560:	4607      	mov	r7, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12562:	eb02 010c 	add.w	r1, r2, ip
	if (pdu->first == pdu->last) {
   12566:	4615      	mov	r5, r2
   12568:	d104      	bne.n	12574 <ll_adv_scan_rsp_set+0x30>
		last = pdu->last + 1;
   1256a:	3401      	adds	r4, #1
   1256c:	b2e4      	uxtb	r4, r4
			last = 0U;
   1256e:	2c02      	cmp	r4, #2
   12570:	bf08      	it	eq
   12572:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
   12574:	2027      	movs	r0, #39	; 0x27
   12576:	237d      	movs	r3, #125	; 0x7d
   12578:	fb10 3304 	smlabb	r3, r0, r4, r3
   1257c:	18ee      	adds	r6, r5, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1257e:	5ce8      	ldrb	r0, [r5, r3]
   12580:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   12584:	f040 0004 	orr.w	r0, r0, #4
   12588:	54e8      	strb	r0, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
   1258a:	f812 000c 	ldrb.w	r0, [r2, ip]
   1258e:	5cea      	ldrb	r2, [r5, r3]
   12590:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12594:	f360 1286 	bfi	r2, r0, #6, #1
	pdu->rx_addr = 0;
   12598:	f36f 12c7 	bfc	r2, #7, #1
   1259c:	54ea      	strb	r2, [r5, r3]
	pdu->len = BDADDR_SIZE + len;
   1259e:	1dbb      	adds	r3, r7, #6
   125a0:	7073      	strb	r3, [r6, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   125a2:	2206      	movs	r2, #6
   125a4:	3102      	adds	r1, #2
   125a6:	1cb0      	adds	r0, r6, #2
   125a8:	f00d f826 	bl	1f5f8 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   125ac:	463a      	mov	r2, r7
   125ae:	4641      	mov	r1, r8
   125b0:	f106 0008 	add.w	r0, r6, #8
   125b4:	f00d f820 	bl	1f5f8 <memcpy>
	pdu->last = idx;
   125b8:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
}
   125bc:	2000      	movs	r0, #0
   125be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   125c2:	bf00      	nop
   125c4:	200010c0 	.word	0x200010c0

000125c8 <ull_adv_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   125c8:	4b03      	ldr	r3, [pc, #12]	; (125d8 <ull_adv_handle_get+0x10>)
   125ca:	1ac0      	subs	r0, r0, r3
   125cc:	23e4      	movs	r3, #228	; 0xe4
   125ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
   125d2:	b280      	uxth	r0, r0
   125d4:	4770      	bx	lr
   125d6:	bf00      	nop
   125d8:	200010c0 	.word	0x200010c0

000125dc <ull_adv_lll_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   125dc:	6800      	ldr	r0, [r0, #0]
   125de:	4b03      	ldr	r3, [pc, #12]	; (125ec <ull_adv_lll_handle_get+0x10>)
   125e0:	1ac0      	subs	r0, r0, r3
   125e2:	23e4      	movs	r3, #228	; 0xe4
   125e4:	fbb0 f0f3 	udiv	r0, r0, r3
}
   125e8:	b280      	uxth	r0, r0
   125ea:	4770      	bx	lr
   125ec:	200010c0 	.word	0x200010c0

000125f0 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
   125f0:	b938      	cbnz	r0, 12602 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   125f2:	4805      	ldr	r0, [pc, #20]	; (12608 <ull_adv_is_enabled_get+0x18>)
   125f4:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
	return &ll_adv[handle];
   125f8:	f013 0f01 	tst.w	r3, #1
   125fc:	bf08      	it	eq
   125fe:	2000      	moveq	r0, #0
   12600:	4770      	bx	lr
		return NULL;
   12602:	2000      	movs	r0, #0
}
   12604:	4770      	bx	lr
   12606:	bf00      	nop
   12608:	200010c0 	.word	0x200010c0

0001260c <disable.constprop.5>:
#endif /* CONFIG_BT_PERIPHERAL */

static inline u8_t disable(u16_t handle)
   1260c:	b530      	push	{r4, r5, lr}
   1260e:	b085      	sub	sp, #20
{
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   12610:	2302      	movs	r3, #2
	struct ll_adv_set *adv;
	void *mark;
	u32_t ret;

	adv = ull_adv_is_enabled_get(handle);
   12612:	2000      	movs	r0, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   12614:	9303      	str	r3, [sp, #12]
	adv = ull_adv_is_enabled_get(handle);
   12616:	f7ff ffeb 	bl	125f0 <ull_adv_is_enabled_get>
	if (!adv) {
   1261a:	4604      	mov	r4, r0
   1261c:	b910      	cbnz	r0, 12624 <disable.constprop.5+0x18>
		ret = ull_ticker_status_take(ret, &ret_cb);
		if (ret) {
			mark = ull_disable_mark(adv);
			LL_ASSERT(mark == adv);

			return BT_HCI_ERR_CMD_DISALLOWED;
   1261e:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
   12620:	b005      	add	sp, #20
   12622:	bd30      	pop	{r4, r5, pc}
	mark = ull_disable_mark(adv);
   12624:	f7fe ff84 	bl	11530 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   12628:	4284      	cmp	r4, r0
   1262a:	d00c      	beq.n	12646 <disable.constprop.5+0x3a>
   1262c:	f240 43cd 	movw	r3, #1229	; 0x4cd
   12630:	4a3a      	ldr	r2, [pc, #232]	; (1271c <disable.constprop.5+0x110>)
   12632:	493b      	ldr	r1, [pc, #236]	; (12720 <disable.constprop.5+0x114>)
   12634:	483b      	ldr	r0, [pc, #236]	; (12724 <disable.constprop.5+0x118>)
   12636:	f00b f8be 	bl	1d7b6 <printk>
   1263a:	4040      	eors	r0, r0
   1263c:	f380 8811 	msr	BASEPRI, r0
   12640:	f04f 0003 	mov.w	r0, #3
   12644:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   12646:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1264a:	f013 0f01 	tst.w	r3, #1
   1264e:	ad03      	add	r5, sp, #12
   12650:	d01f      	beq.n	12692 <disable.constprop.5+0x86>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   12652:	2103      	movs	r1, #3
   12654:	9500      	str	r5, [sp, #0]
   12656:	4b34      	ldr	r3, [pc, #208]	; (12728 <disable.constprop.5+0x11c>)
   12658:	2201      	movs	r2, #1
   1265a:	2000      	movs	r0, #0
   1265c:	f7fc ffa8 	bl	f5b0 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   12660:	4629      	mov	r1, r5
   12662:	f7fe ff59 	bl	11518 <ull_ticker_status_take>
		if (ret) {
   12666:	b190      	cbz	r0, 1268e <disable.constprop.5+0x82>
			mark = ull_disable_mark(adv);
   12668:	4620      	mov	r0, r4
   1266a:	f7fe ff61 	bl	11530 <ull_disable_mark>
			LL_ASSERT(mark == adv);
   1266e:	4284      	cmp	r4, r0
   12670:	d0d5      	beq.n	1261e <disable.constprop.5+0x12>
   12672:	f240 43d7 	movw	r3, #1239	; 0x4d7
   12676:	4a29      	ldr	r2, [pc, #164]	; (1271c <disable.constprop.5+0x110>)
   12678:	4929      	ldr	r1, [pc, #164]	; (12720 <disable.constprop.5+0x114>)
   1267a:	482a      	ldr	r0, [pc, #168]	; (12724 <disable.constprop.5+0x118>)
   1267c:	f00b f89b 	bl	1d7b6 <printk>
   12680:	4040      	eors	r0, r0
   12682:	f380 8811 	msr	BASEPRI, r0
   12686:	f04f 0003 	mov.w	r0, #3
   1268a:	df02      	svc	2
   1268c:	e7c7      	b.n	1261e <disable.constprop.5+0x12>
		ret_cb = TICKER_STATUS_BUSY;
   1268e:	2302      	movs	r3, #2
   12690:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   12692:	2103      	movs	r1, #3
   12694:	9500      	str	r5, [sp, #0]
   12696:	4b24      	ldr	r3, [pc, #144]	; (12728 <disable.constprop.5+0x11c>)
   12698:	2202      	movs	r2, #2
   1269a:	2000      	movs	r0, #0
   1269c:	f7fc ff88 	bl	f5b0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   126a0:	4629      	mov	r1, r5
   126a2:	f7fe ff39 	bl	11518 <ull_ticker_status_take>
	if (ret) {
   126a6:	b138      	cbz	r0, 126b8 <disable.constprop.5+0xac>
		mark = ull_disable_mark(adv);
   126a8:	4620      	mov	r0, r4
   126aa:	f7fe ff41 	bl	11530 <ull_disable_mark>
		LL_ASSERT(mark == adv);
   126ae:	4284      	cmp	r4, r0
   126b0:	d0b5      	beq.n	1261e <disable.constprop.5+0x12>
   126b2:	f240 43e6 	movw	r3, #1254	; 0x4e6
   126b6:	e7de      	b.n	12676 <disable.constprop.5+0x6a>
	ret = ull_disable(&adv->lll);
   126b8:	f104 001c 	add.w	r0, r4, #28
   126bc:	f7fe ff70 	bl	115a0 <ull_disable>
	LL_ASSERT(!ret);
   126c0:	b160      	cbz	r0, 126dc <disable.constprop.5+0xd0>
   126c2:	f240 43ec 	movw	r3, #1260	; 0x4ec
   126c6:	4a15      	ldr	r2, [pc, #84]	; (1271c <disable.constprop.5+0x110>)
   126c8:	4918      	ldr	r1, [pc, #96]	; (1272c <disable.constprop.5+0x120>)
   126ca:	4816      	ldr	r0, [pc, #88]	; (12724 <disable.constprop.5+0x118>)
   126cc:	f00b f873 	bl	1d7b6 <printk>
   126d0:	4040      	eors	r0, r0
   126d2:	f380 8811 	msr	BASEPRI, r0
   126d6:	f04f 0003 	mov.w	r0, #3
   126da:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   126dc:	4620      	mov	r0, r4
   126de:	f7fe ff2f 	bl	11540 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   126e2:	4284      	cmp	r4, r0
   126e4:	d00c      	beq.n	12700 <disable.constprop.5+0xf4>
   126e6:	f240 43ef 	movw	r3, #1263	; 0x4ef
   126ea:	4a0c      	ldr	r2, [pc, #48]	; (1271c <disable.constprop.5+0x110>)
   126ec:	490c      	ldr	r1, [pc, #48]	; (12720 <disable.constprop.5+0x114>)
   126ee:	480d      	ldr	r0, [pc, #52]	; (12724 <disable.constprop.5+0x118>)
   126f0:	f00b f861 	bl	1d7b6 <printk>
   126f4:	4040      	eors	r0, r0
   126f6:	f380 8811 	msr	BASEPRI, r0
   126fa:	f04f 0003 	mov.w	r0, #3
   126fe:	df02      	svc	2
	if (adv->lll.conn) {
   12700:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12702:	b113      	cbz	r3, 1270a <disable.constprop.5+0xfe>
		conn_release(adv);
   12704:	4620      	mov	r0, r4
   12706:	f7ff fd4d 	bl	121a4 <conn_release>
	adv->is_enabled = 0U;
   1270a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   1270e:	f36f 0300 	bfc	r3, #0, #1
   12712:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	return 0;
   12716:	2000      	movs	r0, #0
   12718:	e782      	b.n	12620 <disable.constprop.5+0x14>
   1271a:	bf00      	nop
   1271c:	00029256 	.word	0x00029256
   12720:	0002924a 	.word	0x0002924a
   12724:	00027ff4 	.word	0x00027ff4
   12728:	0001150d 	.word	0x0001150d
   1272c:	00029035 	.word	0x00029035

00012730 <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
   12730:	b508      	push	{r3, lr}
	int err;

	radio_isr_set(isr_race, param);
   12732:	4601      	mov	r1, r0
   12734:	480d      	ldr	r0, [pc, #52]	; (1276c <isr_cleanup+0x3c>)
   12736:	f004 fa67 	bl	16c08 <radio_isr_set>
	radio_tmr_stop();
   1273a:	f004 fc8f 	bl	1705c <radio_tmr_stop>

	err = lll_clk_off();
   1273e:	f7ff fc29 	bl	11f94 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   12742:	b170      	cbz	r0, 12762 <isr_cleanup+0x32>
   12744:	3010      	adds	r0, #16
   12746:	d00c      	beq.n	12762 <isr_cleanup+0x32>
   12748:	f44f 7311 	mov.w	r3, #580	; 0x244
   1274c:	4a08      	ldr	r2, [pc, #32]	; (12770 <isr_cleanup+0x40>)
   1274e:	4909      	ldr	r1, [pc, #36]	; (12774 <isr_cleanup+0x44>)
   12750:	4809      	ldr	r0, [pc, #36]	; (12778 <isr_cleanup+0x48>)
   12752:	f00b f830 	bl	1d7b6 <printk>
   12756:	4040      	eors	r0, r0
   12758:	f380 8811 	msr	BASEPRI, r0
   1275c:	f04f 0003 	mov.w	r0, #3
   12760:	df02      	svc	2

	lll_done(NULL);
   12762:	2000      	movs	r0, #0
}
   12764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   12768:	f7ff bbc2 	b.w	11ef0 <lll_done>
   1276c:	00021e17 	.word	0x00021e17
   12770:	0002933d 	.word	0x0002933d
   12774:	00029380 	.word	0x00029380
   12778:	00027ff4 	.word	0x00027ff4

0001277c <isr_tx>:
{
   1277c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1277e:	4604      	mov	r4, r0
	radio_status_reset();
   12780:	f004 fb1c 	bl	16dbc <radio_status_reset>
	radio_tmr_status_reset();
   12784:	f004 fbd8 	bl	16f38 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   12788:	2096      	movs	r0, #150	; 0x96
   1278a:	f004 fbe5 	bl	16f58 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1278e:	2300      	movs	r3, #0
   12790:	461a      	mov	r2, r3
   12792:	4619      	mov	r1, r3
   12794:	4618      	mov	r0, r3
   12796:	f004 fb5b 	bl	16e50 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1279a:	f004 fb49 	bl	16e30 <radio_pkt_scratch_get>
   1279e:	f004 fae9 	bl	16d74 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   127a2:	f004 fb17 	bl	16dd4 <radio_is_ready>
   127a6:	b160      	cbz	r0, 127c2 <isr_tx+0x46>
   127a8:	f44f 73ab 	mov.w	r3, #342	; 0x156
   127ac:	4a17      	ldr	r2, [pc, #92]	; (1280c <isr_tx+0x90>)
   127ae:	4918      	ldr	r1, [pc, #96]	; (12810 <isr_tx+0x94>)
   127b0:	4818      	ldr	r0, [pc, #96]	; (12814 <isr_tx+0x98>)
   127b2:	f00b f800 	bl	1d7b6 <printk>
   127b6:	4040      	eors	r0, r0
   127b8:	f380 8811 	msr	BASEPRI, r0
   127bc:	f04f 0003 	mov.w	r0, #3
   127c0:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   127c2:	4621      	mov	r1, r4
   127c4:	4814      	ldr	r0, [pc, #80]	; (12818 <isr_tx+0x9c>)
   127c6:	f004 fa1f 	bl	16c08 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   127ca:	f004 f90f 	bl	169ec <ull_filter_lll_rl_enabled>
   127ce:	b140      	cbz	r0, 127e2 <isr_tx+0x66>
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
   127d0:	f10d 0007 	add.w	r0, sp, #7
   127d4:	f004 f846 	bl	16864 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks);
   127d8:	4601      	mov	r1, r0
   127da:	f89d 0007 	ldrb.w	r0, [sp, #7]
   127de:	f004 fd17 	bl	17210 <radio_ar_configure>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   127e2:	f004 fc8d 	bl	17100 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   127e6:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   127e8:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   127ea:	4608      	mov	r0, r1
   127ec:	f00f fec7 	bl	2257e <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   127f0:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   127f2:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   127f4:	4608      	mov	r0, r1
   127f6:	f00f febe 	bl	22576 <radio_tx_chain_delay_get>
   127fa:	442c      	add	r4, r5
   127fc:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   127fe:	1a20      	subs	r0, r4, r0
   12800:	f004 fc38 	bl	17074 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   12804:	f004 fc6e 	bl	170e4 <radio_tmr_end_capture>
}
   12808:	b003      	add	sp, #12
   1280a:	bd30      	pop	{r4, r5, pc}
   1280c:	0002933d 	.word	0x0002933d
   12810:	00029393 	.word	0x00029393
   12814:	00027ff4 	.word	0x00027ff4
   12818:	000128e1 	.word	0x000128e1

0001281c <is_abort_cb>:
	if (next != curr) {
   1281c:	4282      	cmp	r2, r0
{
   1281e:	b508      	push	{r3, lr}
	if (next != curr) {
   12820:	d01c      	beq.n	1285c <is_abort_cb+0x40>
		} else if (lll->is_hdcd) {
   12822:	7b12      	ldrb	r2, [r2, #12]
   12824:	07d2      	lsls	r2, r2, #31
   12826:	d526      	bpl.n	12876 <is_abort_cb+0x5a>
			*resume_cb = resume_prepare_cb;
   12828:	4a14      	ldr	r2, [pc, #80]	; (1287c <is_abort_cb+0x60>)
   1282a:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1282c:	9b02      	ldr	r3, [sp, #8]
   1282e:	2200      	movs	r2, #0
   12830:	601a      	str	r2, [r3, #0]
			err = lll_clk_on();
   12832:	f7ff fba7 	bl	11f84 <lll_clk_on>
			LL_ASSERT(!err || err == -EINPROGRESS);
   12836:	b170      	cbz	r0, 12856 <is_abort_cb+0x3a>
   12838:	3044      	adds	r0, #68	; 0x44
   1283a:	d00c      	beq.n	12856 <is_abort_cb+0x3a>
   1283c:	f44f 7389 	mov.w	r3, #274	; 0x112
   12840:	4a0f      	ldr	r2, [pc, #60]	; (12880 <is_abort_cb+0x64>)
   12842:	4910      	ldr	r1, [pc, #64]	; (12884 <is_abort_cb+0x68>)
   12844:	4810      	ldr	r0, [pc, #64]	; (12888 <is_abort_cb+0x6c>)
   12846:	f00a ffb6 	bl	1d7b6 <printk>
   1284a:	4040      	eors	r0, r0
   1284c:	f380 8811 	msr	BASEPRI, r0
   12850:	f04f 0003 	mov.w	r0, #3
   12854:	df02      	svc	2
   12856:	f06f 000a 	mvn.w	r0, #10
   1285a:	e00b      	b.n	12874 <is_abort_cb+0x58>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1285c:	7bd3      	ldrb	r3, [r2, #15]
   1285e:	2127      	movs	r1, #39	; 0x27
   12860:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12864:	7c53      	ldrb	r3, [r2, #17]
   12866:	f003 030f 	and.w	r3, r3, #15
   1286a:	2b01      	cmp	r3, #1
		return 0;
   1286c:	bf14      	ite	ne
   1286e:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   12872:	2000      	moveq	r0, #0
}
   12874:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   12876:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1287a:	e7fb      	b.n	12874 <is_abort_cb+0x58>
   1287c:	00021e89 	.word	0x00021e89
   12880:	0002933d 	.word	0x0002933d
   12884:	0002932a 	.word	0x0002932a
   12888:	00027ff4 	.word	0x00027ff4

0001288c <abort_cb>:
{
   1288c:	b510      	push	{r4, lr}
   1288e:	460c      	mov	r4, r1
	if (!prepare_param) {
   12890:	b930      	cbnz	r0, 128a0 <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
   12892:	480f      	ldr	r0, [pc, #60]	; (128d0 <abort_cb+0x44>)
   12894:	f004 f9b8 	bl	16c08 <radio_isr_set>
}
   12898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1289c:	f004 ba7c 	b.w	16d98 <radio_disable>
	err = lll_clk_off();
   128a0:	f7ff fb78 	bl	11f94 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   128a4:	b170      	cbz	r0, 128c4 <abort_cb+0x38>
   128a6:	3010      	adds	r0, #16
   128a8:	d00c      	beq.n	128c4 <abort_cb+0x38>
   128aa:	f44f 739c 	mov.w	r3, #312	; 0x138
   128ae:	4a09      	ldr	r2, [pc, #36]	; (128d4 <abort_cb+0x48>)
   128b0:	4909      	ldr	r1, [pc, #36]	; (128d8 <abort_cb+0x4c>)
   128b2:	480a      	ldr	r0, [pc, #40]	; (128dc <abort_cb+0x50>)
   128b4:	f00a ff7f 	bl	1d7b6 <printk>
   128b8:	4040      	eors	r0, r0
   128ba:	f380 8811 	msr	BASEPRI, r0
   128be:	f04f 0003 	mov.w	r0, #3
   128c2:	df02      	svc	2
	lll_done(param);
   128c4:	4620      	mov	r0, r4
}
   128c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   128ca:	f7ff bb11 	b.w	11ef0 <lll_done>
   128ce:	bf00      	nop
   128d0:	00021e1b 	.word	0x00021e1b
   128d4:	0002933d 	.word	0x0002933d
   128d8:	00029380 	.word	0x00029380
   128dc:	00027ff4 	.word	0x00027ff4

000128e0 <isr_rx>:
{
   128e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   128e4:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   128e6:	f004 fa7f 	bl	16de8 <radio_is_done>
   128ea:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   128ec:	2d00      	cmp	r5, #0
   128ee:	d04d      	beq.n	1298c <isr_rx+0xac>
		crc_ok = radio_crc_is_valid();
   128f0:	f004 fa90 	bl	16e14 <radio_crc_is_valid>
   128f4:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   128f8:	f004 fb02 	bl	16f00 <radio_filter_has_match>
   128fc:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
   12900:	f004 fb08 	bl	16f14 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   12904:	f004 fcc2 	bl	1728c <radio_ar_has_match>
   12908:	b2c6      	uxtb	r6, r0
		irkmatch_id = radio_ar_match_get();
   1290a:	f004 fcad 	bl	17268 <radio_ar_match_get>
   1290e:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   12910:	f004 fabe 	bl	16e90 <radio_rssi_is_ready>
	radio_status_reset();
   12914:	f004 fa52 	bl	16dbc <radio_status_reset>
	radio_tmr_status_reset();
   12918:	f004 fb0e 	bl	16f38 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1291c:	f004 fae8 	bl	16ef0 <radio_filter_status_reset>
	radio_ar_status_reset();
   12920:	f004 fca8 	bl	17274 <radio_ar_status_reset>
	radio_rssi_status_reset();
   12924:	f004 faac 	bl	16e80 <radio_rssi_status_reset>
	if (!trx_done) {
   12928:	2d00      	cmp	r5, #0
   1292a:	f000 8131 	beq.w	12b90 <isr_rx+0x2b0>
	if (crc_ok) {
   1292e:	f1b8 0f00 	cmp.w	r8, #0
   12932:	f000 812d 	beq.w	12b90 <isr_rx+0x2b0>
{
	struct pdu_adv *pdu_rx, *pdu_adv;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   12936:	b376      	cbz	r6, 12996 <isr_rx+0xb6>
   12938:	4638      	mov	r0, r7
   1293a:	f003 ff9d 	bl	16878 <ull_filter_lll_rl_irk_idx>
   1293e:	f88d 0007 	strb.w	r0, [sp, #7]
				    FILTER_IDX_NONE;
#else
	u8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   12942:	f004 fa75 	bl	16e30 <radio_pkt_scratch_get>
   12946:	7be2      	ldrb	r2, [r4, #15]
   12948:	4605      	mov	r5, r0
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1294a:	7800      	ldrb	r0, [r0, #0]
   1294c:	2311      	movs	r3, #17
   1294e:	2727      	movs	r7, #39	; 0x27
   12950:	fb17 3702 	smlabb	r7, r7, r2, r3
   12954:	f000 030f 	and.w	r3, r0, #15
   12958:	2b03      	cmp	r3, #3
   1295a:	eb04 0807 	add.w	r8, r4, r7
   1295e:	d157      	bne.n	12a10 <isr_rx+0x130>
   12960:	786b      	ldrb	r3, [r5, #1]
   12962:	2b0c      	cmp	r3, #12
   12964:	f040 8114 	bne.w	12b90 <isr_rx+0x2b0>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   12968:	5de3      	ldrb	r3, [r4, r7]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1296a:	f003 030f 	and.w	r3, r3, #15
   1296e:	2b01      	cmp	r3, #1
   12970:	f000 810e 	beq.w	12b90 <isr_rx+0x2b0>
static inline bool isr_rx_sr_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *sr, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x01) == 0) &&
   12974:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
						sr->scan_req.scan_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12976:	07da      	lsls	r2, r3, #31
   12978:	d50f      	bpl.n	1299a <isr_rx+0xba>
		(((lll->filter_policy & 0x01) != 0) &&
   1297a:	f1b9 0f00 	cmp.w	r9, #0
   1297e:	d114      	bne.n	129aa <isr_rx+0xca>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12980:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12984:	f003 ffc2 	bl	1690c <ull_filter_lll_irk_whitelisted>
   12988:	b978      	cbnz	r0, 129aa <isr_rx+0xca>
   1298a:	e041      	b.n	12a10 <isr_rx+0x130>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1298c:	462e      	mov	r6, r5
   1298e:	46a9      	mov	r9, r5
   12990:	46a8      	mov	r8, r5
		devmatch_id = irkmatch_id = 0xFF;
   12992:	27ff      	movs	r7, #255	; 0xff
   12994:	e7be      	b.n	12914 <isr_rx+0x34>
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   12996:	20ff      	movs	r0, #255	; 0xff
   12998:	e7d1      	b.n	1293e <isr_rx+0x5e>
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1299a:	f10d 0207 	add.w	r2, sp, #7
   1299e:	1ca9      	adds	r1, r5, #2
   129a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   129a4:	f003 ffe6 	bl	16974 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   129a8:	b378      	cbz	r0, 12a0a <isr_rx+0x12a>
}

static inline bool isr_rx_sr_adva_check(struct pdu_adv *adv,
					struct pdu_adv *sr)
{
	return (adv->tx_addr == sr->rx_addr) &&
   129aa:	5de3      	ldrb	r3, [r4, r7]
   129ac:	782a      	ldrb	r2, [r5, #0]
   129ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
   129b2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   129b6:	d12b      	bne.n	12a10 <isr_rx+0x130>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   129b8:	2206      	movs	r2, #6
   129ba:	f105 0108 	add.w	r1, r5, #8
   129be:	f108 0002 	add.w	r0, r8, #2
   129c2:	f00c fe09 	bl	1f5d8 <memcmp>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   129c6:	bb18      	cbnz	r0, 12a10 <isr_rx+0x130>
		radio_isr_set(isr_done, lll);
   129c8:	4621      	mov	r1, r4
   129ca:	4875      	ldr	r0, [pc, #468]	; (12ba0 <isr_rx+0x2c0>)
   129cc:	f004 f91c 	bl	16c08 <radio_isr_set>
		radio_switch_complete_and_disable();
   129d0:	f004 fa48 	bl	16e64 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   129d4:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   129d8:	2327      	movs	r3, #39	; 0x27
   129da:	fb03 4000 	mla	r0, r3, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   129de:	3061      	adds	r0, #97	; 0x61
   129e0:	f004 f9ce 	bl	16d80 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   129e4:	f004 f9f6 	bl	16dd4 <radio_is_ready>
   129e8:	b160      	cbz	r0, 12a04 <isr_rx+0x124>
   129ea:	f240 2396 	movw	r3, #662	; 0x296
   129ee:	4a6d      	ldr	r2, [pc, #436]	; (12ba4 <isr_rx+0x2c4>)
   129f0:	496d      	ldr	r1, [pc, #436]	; (12ba8 <isr_rx+0x2c8>)
   129f2:	486e      	ldr	r0, [pc, #440]	; (12bac <isr_rx+0x2cc>)
   129f4:	f00a fedf 	bl	1d7b6 <printk>
   129f8:	4040      	eors	r0, r0
   129fa:	f380 8811 	msr	BASEPRI, r0
   129fe:	f04f 0003 	mov.w	r0, #3
   12a02:	df02      	svc	2
}
   12a04:	b003      	add	sp, #12
   12a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		(((lll->filter_policy & 0x01) != 0) &&
   12a0a:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   12a0c:	07db      	lsls	r3, r3, #31
   12a0e:	d4b4      	bmi.n	1297a <isr_rx+0x9a>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   12a10:	7828      	ldrb	r0, [r5, #0]
   12a12:	f000 030f 	and.w	r3, r0, #15
   12a16:	2b05      	cmp	r3, #5
   12a18:	f040 80ba 	bne.w	12b90 <isr_rx+0x2b0>
   12a1c:	786b      	ldrb	r3, [r5, #1]
   12a1e:	2b22      	cmp	r3, #34	; 0x22
   12a20:	f040 80b6 	bne.w	12b90 <isr_rx+0x2b0>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   12a24:	5de3      	ldrb	r3, [r4, r7]
   12a26:	f003 030f 	and.w	r3, r3, #15
   12a2a:	2b01      	cmp	r3, #1
   12a2c:	f040 8091 	bne.w	12b52 <isr_rx+0x272>
#if defined(CONFIG_BT_CTLR_PRIVACY)
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						      ci->connect_ind.init_addr,
   12a30:	f105 0902 	add.w	r9, r5, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   12a34:	f10d 0207 	add.w	r2, sp, #7
   12a38:	4649      	mov	r1, r9
   12a3a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12a3e:	f003 ff99 	bl	16974 <ull_filter_lll_rl_addr_allowed>
						      rl_idx) &&
#else
		return (1) &&
#endif
		       isr_rx_ci_adva_check(adv, ci) &&
   12a42:	b908      	cbnz	r0, 12a48 <isr_rx+0x168>
	return ((((lll->filter_policy & 0x02) == 0) &&
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12a44:	2000      	movs	r0, #0
   12a46:	e00d      	b.n	12a64 <isr_rx+0x184>
		       isr_rx_ci_adva_check(adv, ci) &&
   12a48:	4629      	mov	r1, r5
   12a4a:	4640      	mov	r0, r8
   12a4c:	f00f f9f8 	bl	21e40 <isr_rx_ci_adva_check>
						      rl_idx) &&
   12a50:	2800      	cmp	r0, #0
   12a52:	d0f7      	beq.n	12a44 <isr_rx+0x164>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   12a54:	f89d 3007 	ldrb.w	r3, [sp, #7]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					struct pdu_adv *adv, struct pdu_adv *ci,
					u8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE) {
   12a58:	2bff      	cmp	r3, #255	; 0xff
   12a5a:	d069      	beq.n	12b30 <isr_rx+0x250>
		return rl_idx == lll->rl_idx;
   12a5c:	7ba0      	ldrb	r0, [r4, #14]
   12a5e:	1ac7      	subs	r7, r0, r3
   12a60:	4278      	negs	r0, r7
   12a62:	4178      	adcs	r0, r7
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12a64:	f000 0001 	and.w	r0, r0, #1
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   12a68:	2800      	cmp	r0, #0
   12a6a:	f000 8091 	beq.w	12b90 <isr_rx+0x2b0>
				   &rl_idx) &&
   12a6e:	68a3      	ldr	r3, [r4, #8]
   12a70:	2b00      	cmp	r3, #0
   12a72:	f000 808d 	beq.w	12b90 <isr_rx+0x2b0>
			rx = ull_pdu_rx_alloc_peek(4);
   12a76:	2004      	movs	r0, #4
   12a78:	f7fe fdce 	bl	11618 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   12a7c:	2800      	cmp	r0, #0
   12a7e:	f000 8087 	beq.w	12b90 <isr_rx+0x2b0>
		radio_isr_set(isr_abort, lll);
   12a82:	4621      	mov	r1, r4
   12a84:	484a      	ldr	r0, [pc, #296]	; (12bb0 <isr_rx+0x2d0>)
   12a86:	f004 f8bf 	bl	16c08 <radio_isr_set>
		radio_disable();
   12a8a:	f004 f985 	bl	16d98 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   12a8e:	f004 f9a1 	bl	16dd4 <radio_is_ready>
   12a92:	b160      	cbz	r0, 12aae <isr_rx+0x1ce>
   12a94:	f240 23d2 	movw	r3, #722	; 0x2d2
   12a98:	4a42      	ldr	r2, [pc, #264]	; (12ba4 <isr_rx+0x2c4>)
   12a9a:	4943      	ldr	r1, [pc, #268]	; (12ba8 <isr_rx+0x2c8>)
   12a9c:	4843      	ldr	r0, [pc, #268]	; (12bac <isr_rx+0x2cc>)
   12a9e:	f00a fe8a 	bl	1d7b6 <printk>
   12aa2:	4040      	eors	r0, r0
   12aa4:	f380 8811 	msr	BASEPRI, r0
   12aa8:	f04f 0003 	mov.w	r0, #3
   12aac:	df02      	svc	2
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   12aae:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   12ab0:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   12ab4:	07db      	lsls	r3, r3, #31
   12ab6:	7122      	strb	r2, [r4, #4]
   12ab8:	d50c      	bpl.n	12ad4 <isr_rx+0x1f4>
   12aba:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   12abe:	4a39      	ldr	r2, [pc, #228]	; (12ba4 <isr_rx+0x2c4>)
   12ac0:	493c      	ldr	r1, [pc, #240]	; (12bb4 <isr_rx+0x2d4>)
   12ac2:	483a      	ldr	r0, [pc, #232]	; (12bac <isr_rx+0x2cc>)
   12ac4:	f00a fe77 	bl	1d7b6 <printk>
   12ac8:	4040      	eors	r0, r0
   12aca:	f380 8811 	msr	BASEPRI, r0
   12ace:	f04f 0003 	mov.w	r0, #3
   12ad2:	df02      	svc	2
		rx = ull_pdu_rx_alloc();
   12ad4:	f7fe fdb8 	bl	11648 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12ad8:	2308      	movs	r3, #8
		rx = ull_pdu_rx_alloc();
   12ada:	4607      	mov	r7, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12adc:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   12ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12ae2:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   12ae4:	2224      	movs	r2, #36	; 0x24
   12ae6:	4629      	mov	r1, r5
   12ae8:	3020      	adds	r0, #32
   12aea:	f00c fd85 	bl	1f5f8 <memcpy>
		ftr->param = lll;
   12aee:	60bc      	str	r4, [r7, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   12af0:	f004 faae 	bl	17050 <radio_tmr_start_get>
   12af4:	6138      	str	r0, [r7, #16]
		ftr->us_radio_end = radio_tmr_end_get() -
   12af6:	f004 fafd 	bl	170f4 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   12afa:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
   12afc:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   12afe:	4608      	mov	r0, r1
   12b00:	f00f fd39 	bl	22576 <radio_tx_chain_delay_get>
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
   12b04:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
   12b06:	1a20      	subs	r0, r4, r0
   12b08:	6178      	str	r0, [r7, #20]
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
   12b0a:	4608      	mov	r0, r1
   12b0c:	f00f fd35 	bl	2257a <radio_rx_ready_delay_get>
   12b10:	61b8      	str	r0, [r7, #24]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   12b12:	2e00      	cmp	r6, #0
   12b14:	d03a      	beq.n	12b8c <isr_rx+0x2ac>
   12b16:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12b1a:	777b      	strb	r3, [r7, #29]
			ftr->extra = ull_pdu_rx_alloc();
   12b1c:	f7fe fd94 	bl	11648 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   12b20:	4639      	mov	r1, r7
			ftr->extra = ull_pdu_rx_alloc();
   12b22:	60f8      	str	r0, [r7, #12]
		ull_rx_put(rx->hdr.link, rx);
   12b24:	6838      	ldr	r0, [r7, #0]
   12b26:	f7fe fda5 	bl	11674 <ull_rx_put>
		ull_rx_sched();
   12b2a:	f7fe fdb3 	bl	11694 <ull_rx_sched>
		if (!err) {
   12b2e:	e769      	b.n	12a04 <isr_rx+0x124>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (adv->rx_addr == ci->tx_addr) &&
   12b30:	782b      	ldrb	r3, [r5, #0]
   12b32:	5de2      	ldrb	r2, [r4, r7]
   12b34:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12b38:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   12b3c:	d182      	bne.n	12a44 <isr_rx+0x164>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   12b3e:	2206      	movs	r2, #6
   12b40:	4649      	mov	r1, r9
   12b42:	f108 0008 	add.w	r0, r8, #8
   12b46:	f00c fd47 	bl	1f5d8 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   12b4a:	fab0 f080 	clz	r0, r0
   12b4e:	0940      	lsrs	r0, r0, #5
   12b50:	e788      	b.n	12a64 <isr_rx+0x184>
	return ((((lll->filter_policy & 0x02) == 0) &&
   12b52:	7b63      	ldrb	r3, [r4, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12b54:	0799      	lsls	r1, r3, #30
   12b56:	d508      	bpl.n	12b6a <isr_rx+0x28a>
		(((lll->filter_policy & 0x02) != 0) &&
   12b58:	f1b9 0f00 	cmp.w	r9, #0
   12b5c:	d10d      	bne.n	12b7a <isr_rx+0x29a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   12b5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12b62:	f003 fed3 	bl	1690c <ull_filter_lll_irk_whitelisted>
   12b66:	b940      	cbnz	r0, 12b7a <isr_rx+0x29a>
   12b68:	e76c      	b.n	12a44 <isr_rx+0x164>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   12b6a:	f10d 0207 	add.w	r2, sp, #7
   12b6e:	1ca9      	adds	r1, r5, #2
   12b70:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12b74:	f003 fefe 	bl	16974 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   12b78:	b120      	cbz	r0, 12b84 <isr_rx+0x2a4>
	       isr_rx_ci_adva_check(adv, ci);
   12b7a:	4629      	mov	r1, r5
   12b7c:	4640      	mov	r0, r8
   12b7e:	f00f f95f 	bl	21e40 <isr_rx_ci_adva_check>
   12b82:	e76f      	b.n	12a64 <isr_rx+0x184>
		(((lll->filter_policy & 0x02) != 0) &&
   12b84:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   12b86:	079a      	lsls	r2, r3, #30
   12b88:	d4e6      	bmi.n	12b58 <isr_rx+0x278>
   12b8a:	e75b      	b.n	12a44 <isr_rx+0x164>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   12b8c:	23ff      	movs	r3, #255	; 0xff
   12b8e:	e7c4      	b.n	12b1a <isr_rx+0x23a>
	radio_isr_set(isr_done, param);
   12b90:	4621      	mov	r1, r4
   12b92:	4803      	ldr	r0, [pc, #12]	; (12ba0 <isr_rx+0x2c0>)
   12b94:	f004 f838 	bl	16c08 <radio_isr_set>
	radio_disable();
   12b98:	f004 f8fe 	bl	16d98 <radio_disable>
   12b9c:	e732      	b.n	12a04 <isr_rx+0x124>
   12b9e:	bf00      	nop
   12ba0:	00021eb1 	.word	0x00021eb1
   12ba4:	0002933d 	.word	0x0002933d
   12ba8:	00029393 	.word	0x00029393
   12bac:	00027ff4 	.word	0x00027ff4
   12bb0:	00021e1b 	.word	0x00021e1b
   12bb4:	00029035 	.word	0x00029035

00012bb8 <chan_prepare>:
{
   12bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   12bba:	7bc3      	ldrb	r3, [r0, #15]
	if (first != pdu->last) {
   12bbc:	7c05      	ldrb	r5, [r0, #16]
   12bbe:	42ab      	cmp	r3, r5
   12bc0:	4604      	mov	r4, r0
   12bc2:	d060      	beq.n	12c86 <chan_prepare+0xce>
		first += 1U;
   12bc4:	1c5d      	adds	r5, r3, #1
   12bc6:	b2ed      	uxtb	r5, r5
			first = 0U;
   12bc8:	2d02      	cmp	r5, #2
   12bca:	bf08      	it	eq
   12bcc:	2500      	moveq	r5, #0
		pdu->first = first;
   12bce:	73c5      	strb	r5, [r0, #15]
		*is_modified = 1U;
   12bd0:	f04f 0e01 	mov.w	lr, #1
	first = pdu->first;
   12bd4:	4620      	mov	r0, r4
	if (first != pdu->last) {
   12bd6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	first = pdu->first;
   12bda:	f810 2f5f 	ldrb.w	r2, [r0, #95]!
	return (void *)pdu->pdu[first];
   12bde:	2127      	movs	r1, #39	; 0x27
   12be0:	f04f 0c02 	mov.w	ip, #2
   12be4:	f104 060f 	add.w	r6, r4, #15
   12be8:	fb11 c505 	smlabb	r5, r1, r5, ip
	if (first != pdu->last) {
   12bec:	4293      	cmp	r3, r2
	return (void *)pdu->pdu[first];
   12bee:	eb06 0705 	add.w	r7, r6, r5
	if (first != pdu->last) {
   12bf2:	d04b      	beq.n	12c8c <chan_prepare+0xd4>
		first += 1U;
   12bf4:	3201      	adds	r2, #1
   12bf6:	b2d3      	uxtb	r3, r2
			first = 0U;
   12bf8:	4563      	cmp	r3, ip
   12bfa:	bf08      	it	eq
   12bfc:	2300      	moveq	r3, #0
		pdu->first = first;
   12bfe:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
	return (void *)pdu->pdu[first];
   12c02:	fb11 c303 	smlabb	r3, r1, r3, ip
   12c06:	4418      	add	r0, r3
		memcpy(&scan_pdu->scan_rsp.addr[0],
   12c08:	2206      	movs	r2, #6
   12c0a:	1cb9      	adds	r1, r7, #2
   12c0c:	3002      	adds	r0, #2
   12c0e:	f00c fcf3 	bl	1f5f8 <memcpy>
	radio_pkt_tx_set(pdu);
   12c12:	4638      	mov	r0, r7
   12c14:	f004 f8b4 	bl	16d80 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12c18:	5d73      	ldrb	r3, [r6, r5]
   12c1a:	f003 030f 	and.w	r3, r3, #15
   12c1e:	2b02      	cmp	r3, #2
		radio_isr_set(isr_tx, lll);
   12c20:	4621      	mov	r1, r4
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12c22:	d03a      	beq.n	12c9a <chan_prepare+0xe2>
		radio_isr_set(isr_tx, lll);
   12c24:	4820      	ldr	r0, [pc, #128]	; (12ca8 <chan_prepare+0xf0>)
   12c26:	f003 ffef 	bl	16c08 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   12c2a:	2096      	movs	r0, #150	; 0x96
   12c2c:	f004 f994 	bl	16f58 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12c30:	2000      	movs	r0, #0
   12c32:	f004 f901 	bl	16e38 <radio_switch_complete_and_rx>
	chan = find_lsb_set(lll->chan_map_curr);
   12c36:	7b23      	ldrb	r3, [r4, #12]
   12c38:	f3c3 1302 	ubfx	r3, r3, #4, #3
   12c3c:	2b00      	cmp	r3, #0
   12c3e:	fa93 f0a3 	rbit	r0, r3
   12c42:	fab0 f080 	clz	r0, r0
   12c46:	bf08      	it	eq
   12c48:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   12c4c:	1c45      	adds	r5, r0, #1
   12c4e:	d10c      	bne.n	12c6a <chan_prepare+0xb2>
   12c50:	f44f 731d 	mov.w	r3, #628	; 0x274
   12c54:	4a15      	ldr	r2, [pc, #84]	; (12cac <chan_prepare+0xf4>)
   12c56:	4916      	ldr	r1, [pc, #88]	; (12cb0 <chan_prepare+0xf8>)
   12c58:	4816      	ldr	r0, [pc, #88]	; (12cb4 <chan_prepare+0xfc>)
   12c5a:	f00a fdac 	bl	1d7b6 <printk>
   12c5e:	4040      	eors	r0, r0
   12c60:	f380 8811 	msr	BASEPRI, r0
   12c64:	f04f 0003 	mov.w	r0, #3
   12c68:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   12c6a:	7b23      	ldrb	r3, [r4, #12]
   12c6c:	f3c3 1202 	ubfx	r2, r3, #4, #3
   12c70:	1e51      	subs	r1, r2, #1
   12c72:	400a      	ands	r2, r1
   12c74:	f362 1306 	bfi	r3, r2, #4, #3
   12c78:	7323      	strb	r3, [r4, #12]
	lll_chan_set(36 + chan);
   12c7a:	f105 0024 	add.w	r0, r5, #36	; 0x24
}
   12c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_chan_set(36 + chan);
   12c82:	f7ff b98f 	b.w	11fa4 <lll_chan_set>
	u8_t upd = 0U;
   12c86:	f04f 0e00 	mov.w	lr, #0
   12c8a:	e7a3      	b.n	12bd4 <chan_prepare+0x1c>
	if (upd) {
   12c8c:	f1be 0f00 	cmp.w	lr, #0
   12c90:	d0bf      	beq.n	12c12 <chan_prepare+0x5a>
   12c92:	fb11 c103 	smlabb	r1, r1, r3, ip
   12c96:	4408      	add	r0, r1
   12c98:	e7b6      	b.n	12c08 <chan_prepare+0x50>
		radio_isr_set(isr_done, lll);
   12c9a:	4807      	ldr	r0, [pc, #28]	; (12cb8 <chan_prepare+0x100>)
   12c9c:	f003 ffb4 	bl	16c08 <radio_isr_set>
		radio_switch_complete_and_disable();
   12ca0:	f004 f8e0 	bl	16e64 <radio_switch_complete_and_disable>
   12ca4:	e7c7      	b.n	12c36 <chan_prepare+0x7e>
   12ca6:	bf00      	nop
   12ca8:	0001277d 	.word	0x0001277d
   12cac:	0002933d 	.word	0x0002933d
   12cb0:	00029165 	.word	0x00029165
   12cb4:	00027ff4 	.word	0x00027ff4
   12cb8:	00021eb1 	.word	0x00021eb1

00012cbc <prepare_cb>:
{
   12cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
   12cbe:	68c4      	ldr	r4, [r0, #12]
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   12cc0:	4b40      	ldr	r3, [pc, #256]	; (12dc4 <prepare_cb+0x108>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   12cc2:	7925      	ldrb	r5, [r4, #4]
   12cc4:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
   12cc6:	f015 0501 	ands.w	r5, r5, #1
{
   12cca:	4606      	mov	r6, r0
	if (lll_is_stop(lll)) {
   12ccc:	d016      	beq.n	12cfc <prepare_cb+0x40>
		err = lll_clk_off();
   12cce:	f7ff f961 	bl	11f94 <lll_clk_off>
		LL_ASSERT(!err || err == -EBUSY);
   12cd2:	b168      	cbz	r0, 12cf0 <prepare_cb+0x34>
   12cd4:	3010      	adds	r0, #16
   12cd6:	d00b      	beq.n	12cf0 <prepare_cb+0x34>
   12cd8:	238a      	movs	r3, #138	; 0x8a
   12cda:	4a3b      	ldr	r2, [pc, #236]	; (12dc8 <prepare_cb+0x10c>)
   12cdc:	493b      	ldr	r1, [pc, #236]	; (12dcc <prepare_cb+0x110>)
   12cde:	483c      	ldr	r0, [pc, #240]	; (12dd0 <prepare_cb+0x114>)
   12ce0:	f00a fd69 	bl	1d7b6 <printk>
   12ce4:	4040      	eors	r0, r0
   12ce6:	f380 8811 	msr	BASEPRI, r0
   12cea:	f04f 0003 	mov.w	r0, #3
   12cee:	df02      	svc	2
		lll_done(NULL);
   12cf0:	2000      	movs	r0, #0
   12cf2:	f7ff f8fd 	bl	11ef0 <lll_done>
}
   12cf6:	2000      	movs	r0, #0
   12cf8:	b003      	add	sp, #12
   12cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   12cfc:	f003 ffa4 	bl	16c48 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   12d00:	4628      	mov	r0, r5
   12d02:	f003 ffd5 	bl	16cb0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   12d06:	4629      	mov	r1, r5
   12d08:	4628      	mov	r0, r5
   12d0a:	f003 ffc1 	bl	16c90 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   12d0e:	462a      	mov	r2, r5
   12d10:	2125      	movs	r1, #37	; 0x25
   12d12:	2008      	movs	r0, #8
   12d14:	f004 f802 	bl	16d1c <radio_pkt_configure>
	radio_aa_set((u8_t *)&aa);
   12d18:	a801      	add	r0, sp, #4
   12d1a:	f003 ffe7 	bl	16cec <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12d1e:	492d      	ldr	r1, [pc, #180]	; (12dd4 <prepare_cb+0x118>)
   12d20:	f240 605b 	movw	r0, #1627	; 0x65b
   12d24:	f004 f86a 	bl	16dfc <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   12d28:	7b23      	ldrb	r3, [r4, #12]
   12d2a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   12d2e:	f362 1306 	bfi	r3, r2, #4, #3
   12d32:	7323      	strb	r3, [r4, #12]
	chan_prepare(lll);
   12d34:	4620      	mov	r0, r4
   12d36:	f7ff ff3f 	bl	12bb8 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   12d3a:	f003 fe57 	bl	169ec <ull_filter_lll_rl_enabled>
   12d3e:	7b63      	ldrb	r3, [r4, #13]
   12d40:	b348      	cbz	r0, 12d96 <prepare_cb+0xda>
			ull_filter_lll_get(!!(lll->filter_policy));
   12d42:	f013 0003 	ands.w	r0, r3, #3
   12d46:	bf18      	it	ne
   12d48:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   12d4a:	f003 fe07 	bl	1695c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   12d4e:	1c82      	adds	r2, r0, #2
   12d50:	7841      	ldrb	r1, [r0, #1]
   12d52:	7800      	ldrb	r0, [r0, #0]
   12d54:	f004 f8a6 	bl	16ea4 <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   12d58:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   12d5a:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   12d5c:	4638      	mov	r0, r7
   12d5e:	f00f f824 	bl	21daa <lll_evt_offset_get>
   12d62:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   12d64:	6872      	ldr	r2, [r6, #4]
   12d66:	f105 0109 	add.w	r1, r5, #9
   12d6a:	2001      	movs	r0, #1
   12d6c:	f004 f900 	bl	16f70 <radio_tmr_start>
	radio_tmr_end_capture();
   12d70:	f004 f9b8 	bl	170e4 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   12d74:	4620      	mov	r0, r4
   12d76:	f7ff fc31 	bl	125dc <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   12d7a:	1c81      	adds	r1, r0, #2
   12d7c:	462a      	mov	r2, r5
   12d7e:	b2c9      	uxtb	r1, r1
   12d80:	4638      	mov	r0, r7
   12d82:	f00f f820 	bl	21dc6 <lll_preempt_calc>
   12d86:	b150      	cbz	r0, 12d9e <prepare_cb+0xe2>
		radio_isr_set(isr_abort, lll);
   12d88:	4621      	mov	r1, r4
   12d8a:	4813      	ldr	r0, [pc, #76]	; (12dd8 <prepare_cb+0x11c>)
   12d8c:	f003 ff3c 	bl	16c08 <radio_isr_set>
		radio_disable();
   12d90:	f004 f802 	bl	16d98 <radio_disable>
   12d94:	e7af      	b.n	12cf6 <prepare_cb+0x3a>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   12d96:	079b      	lsls	r3, r3, #30
   12d98:	d0de      	beq.n	12d58 <prepare_cb+0x9c>
		struct lll_filter *wl = ull_filter_lll_get(true);
   12d9a:	2001      	movs	r0, #1
   12d9c:	e7d5      	b.n	12d4a <prepare_cb+0x8e>
		ret = lll_prepare_done(lll);
   12d9e:	4620      	mov	r0, r4
   12da0:	f00f f801 	bl	21da6 <lll_prepare_done>
		LL_ASSERT(!ret);
   12da4:	2800      	cmp	r0, #0
   12da6:	d0a6      	beq.n	12cf6 <prepare_cb+0x3a>
   12da8:	23e8      	movs	r3, #232	; 0xe8
   12daa:	4a07      	ldr	r2, [pc, #28]	; (12dc8 <prepare_cb+0x10c>)
   12dac:	490b      	ldr	r1, [pc, #44]	; (12ddc <prepare_cb+0x120>)
   12dae:	4808      	ldr	r0, [pc, #32]	; (12dd0 <prepare_cb+0x114>)
   12db0:	f00a fd01 	bl	1d7b6 <printk>
   12db4:	4040      	eors	r0, r0
   12db6:	f380 8811 	msr	BASEPRI, r0
   12dba:	f04f 0003 	mov.w	r0, #3
   12dbe:	df02      	svc	2
   12dc0:	e799      	b.n	12cf6 <prepare_cb+0x3a>
   12dc2:	bf00      	nop
   12dc4:	8e89bed6 	.word	0x8e89bed6
   12dc8:	0002933d 	.word	0x0002933d
   12dcc:	00029380 	.word	0x00029380
   12dd0:	00027ff4 	.word	0x00027ff4
   12dd4:	00555555 	.word	0x00555555
   12dd8:	00021e1b 	.word	0x00021e1b
   12ddc:	00029035 	.word	0x00029035

00012de0 <lll_adv_prepare>:
{
   12de0:	b513      	push	{r0, r1, r4, lr}
   12de2:	4604      	mov	r4, r0
	err = lll_clk_on();
   12de4:	f7ff f8ce 	bl	11f84 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   12de8:	b168      	cbz	r0, 12e06 <lll_adv_prepare+0x26>
   12dea:	3044      	adds	r0, #68	; 0x44
   12dec:	d00b      	beq.n	12e06 <lll_adv_prepare+0x26>
   12dee:	236d      	movs	r3, #109	; 0x6d
   12df0:	4a11      	ldr	r2, [pc, #68]	; (12e38 <lll_adv_prepare+0x58>)
   12df2:	4912      	ldr	r1, [pc, #72]	; (12e3c <lll_adv_prepare+0x5c>)
   12df4:	4812      	ldr	r0, [pc, #72]	; (12e40 <lll_adv_prepare+0x60>)
   12df6:	f00a fcde 	bl	1d7b6 <printk>
   12dfa:	4040      	eors	r0, r0
   12dfc:	f380 8811 	msr	BASEPRI, r0
   12e00:	f04f 0003 	mov.w	r0, #3
   12e04:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   12e06:	9400      	str	r4, [sp, #0]
   12e08:	2300      	movs	r3, #0
   12e0a:	4a0e      	ldr	r2, [pc, #56]	; (12e44 <lll_adv_prepare+0x64>)
   12e0c:	490e      	ldr	r1, [pc, #56]	; (12e48 <lll_adv_prepare+0x68>)
   12e0e:	480f      	ldr	r0, [pc, #60]	; (12e4c <lll_adv_prepare+0x6c>)
   12e10:	f00e ffc0 	bl	21d94 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   12e14:	b168      	cbz	r0, 12e32 <lll_adv_prepare+0x52>
   12e16:	3044      	adds	r0, #68	; 0x44
   12e18:	d00b      	beq.n	12e32 <lll_adv_prepare+0x52>
   12e1a:	2370      	movs	r3, #112	; 0x70
   12e1c:	4a06      	ldr	r2, [pc, #24]	; (12e38 <lll_adv_prepare+0x58>)
   12e1e:	4907      	ldr	r1, [pc, #28]	; (12e3c <lll_adv_prepare+0x5c>)
   12e20:	4807      	ldr	r0, [pc, #28]	; (12e40 <lll_adv_prepare+0x60>)
   12e22:	f00a fcc8 	bl	1d7b6 <printk>
   12e26:	4040      	eors	r0, r0
   12e28:	f380 8811 	msr	BASEPRI, r0
   12e2c:	f04f 0003 	mov.w	r0, #3
   12e30:	df02      	svc	2
}
   12e32:	b002      	add	sp, #8
   12e34:	bd10      	pop	{r4, pc}
   12e36:	bf00      	nop
   12e38:	0002933d 	.word	0x0002933d
   12e3c:	0002932a 	.word	0x0002932a
   12e40:	00027ff4 	.word	0x00027ff4
   12e44:	00012cbd 	.word	0x00012cbd
   12e48:	0001288d 	.word	0x0001288d
   12e4c:	0001281d 	.word	0x0001281d

00012e50 <pdu_len_cmp>:
		break;
	}
}

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
   12e50:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
   12e52:	4b0d      	ldr	r3, [pc, #52]	; (12e88 <pdu_len_cmp+0x38>)
{
   12e54:	b089      	sub	sp, #36	; 0x24
   12e56:	4605      	mov	r5, r0
   12e58:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
   12e5a:	aa01      	add	r2, sp, #4
   12e5c:	f103 0718 	add.w	r7, r3, #24
   12e60:	6818      	ldr	r0, [r3, #0]
   12e62:	6859      	ldr	r1, [r3, #4]
   12e64:	4614      	mov	r4, r2
   12e66:	c403      	stmia	r4!, {r0, r1}
   12e68:	3308      	adds	r3, #8
   12e6a:	42bb      	cmp	r3, r7
   12e6c:	4622      	mov	r2, r4
   12e6e:	d1f7      	bne.n	12e60 <pdu_len_cmp+0x10>
   12e70:	881b      	ldrh	r3, [r3, #0]
   12e72:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   12e74:	ab08      	add	r3, sp, #32
   12e76:	441d      	add	r5, r3
   12e78:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   12e7c:	1b83      	subs	r3, r0, r6
   12e7e:	4258      	negs	r0, r3
   12e80:	4158      	adcs	r0, r3
   12e82:	b009      	add	sp, #36	; 0x24
   12e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e86:	bf00      	nop
   12e88:	00025c4a 	.word	0x00025c4a

00012e8c <ticker_update_latency_cancel_op_cb>:
{
   12e8c:	b510      	push	{r4, lr}
   12e8e:	460c      	mov	r4, r1
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   12e90:	b160      	cbz	r0, 12eac <ticker_update_latency_cancel_op_cb+0x20>
   12e92:	f240 633a 	movw	r3, #1594	; 0x63a
   12e96:	4a09      	ldr	r2, [pc, #36]	; (12ebc <ticker_update_latency_cancel_op_cb+0x30>)
   12e98:	4909      	ldr	r1, [pc, #36]	; (12ec0 <ticker_update_latency_cancel_op_cb+0x34>)
   12e9a:	480a      	ldr	r0, [pc, #40]	; (12ec4 <ticker_update_latency_cancel_op_cb+0x38>)
   12e9c:	f00a fc8b 	bl	1d7b6 <printk>
   12ea0:	4040      	eors	r0, r0
   12ea2:	f380 8811 	msr	BASEPRI, r0
   12ea6:	f04f 0003 	mov.w	r0, #3
   12eaa:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   12eac:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   12eb0:	f36f 0341 	bfc	r3, #1, #1
   12eb4:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   12eb8:	bd10      	pop	{r4, pc}
   12eba:	bf00      	nop
   12ebc:	00029456 	.word	0x00029456
   12ec0:	0002948f 	.word	0x0002948f
   12ec4:	00027ff4 	.word	0x00027ff4

00012ec8 <init_reset>:
{
   12ec8:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   12eca:	2201      	movs	r2, #1
   12ecc:	4b12      	ldr	r3, [pc, #72]	; (12f18 <init_reset+0x50>)
   12ece:	4813      	ldr	r0, [pc, #76]	; (12f1c <init_reset+0x54>)
   12ed0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   12ed4:	f00e fc9a 	bl	2180c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   12ed8:	4b11      	ldr	r3, [pc, #68]	; (12f20 <init_reset+0x58>)
   12eda:	2203      	movs	r2, #3
   12edc:	1d18      	adds	r0, r3, #4
   12ede:	2124      	movs	r1, #36	; 0x24
   12ee0:	f00e fc94 	bl	2180c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   12ee4:	4b0f      	ldr	r3, [pc, #60]	; (12f24 <init_reset+0x5c>)
   12ee6:	2204      	movs	r2, #4
   12ee8:	1898      	adds	r0, r3, r2
   12eea:	2120      	movs	r1, #32
   12eec:	f00e fc8e 	bl	2180c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   12ef0:	4b0d      	ldr	r3, [pc, #52]	; (12f28 <init_reset+0x60>)
   12ef2:	2207      	movs	r2, #7
   12ef4:	1d18      	adds	r0, r3, #4
   12ef6:	2108      	movs	r1, #8
   12ef8:	f00e fc88 	bl	2180c <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   12efc:	4b0b      	ldr	r3, [pc, #44]	; (12f2c <init_reset+0x64>)
   12efe:	221b      	movs	r2, #27
   12f00:	801a      	strh	r2, [r3, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
   12f02:	4b0b      	ldr	r3, [pc, #44]	; (12f30 <init_reset+0x68>)
   12f04:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12f08:	801a      	strh	r2, [r3, #0]
	default_phy_tx |= BIT(1);
   12f0a:	4a0a      	ldr	r2, [pc, #40]	; (12f34 <init_reset+0x6c>)
   12f0c:	2303      	movs	r3, #3
   12f0e:	7013      	strb	r3, [r2, #0]
	default_phy_rx |= BIT(1);
   12f10:	4a09      	ldr	r2, [pc, #36]	; (12f38 <init_reset+0x70>)
   12f12:	7013      	strb	r3, [r2, #0]
}
   12f14:	2000      	movs	r0, #0
   12f16:	bd08      	pop	{r3, pc}
   12f18:	200011b4 	.word	0x200011b4
   12f1c:	200011b8 	.word	0x200011b8
   12f20:	20001390 	.word	0x20001390
   12f24:	20001400 	.word	0x20001400
   12f28:	20001484 	.word	0x20001484
   12f2c:	20006054 	.word	0x20006054
   12f30:	20006056 	.word	0x20006056
   12f34:	2000a554 	.word	0x2000a554
   12f38:	2000a553 	.word	0x2000a553

00012f3c <ticker_start_conn_op_cb>:
{
   12f3c:	b510      	push	{r4, lr}
   12f3e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12f40:	b160      	cbz	r0, 12f5c <ticker_start_conn_op_cb+0x20>
   12f42:	f240 6356 	movw	r3, #1622	; 0x656
   12f46:	4a0f      	ldr	r2, [pc, #60]	; (12f84 <ticker_start_conn_op_cb+0x48>)
   12f48:	490f      	ldr	r1, [pc, #60]	; (12f88 <ticker_start_conn_op_cb+0x4c>)
   12f4a:	4810      	ldr	r0, [pc, #64]	; (12f8c <ticker_start_conn_op_cb+0x50>)
   12f4c:	f00a fc33 	bl	1d7b6 <printk>
   12f50:	4040      	eors	r0, r0
   12f52:	f380 8811 	msr	BASEPRI, r0
   12f56:	f04f 0003 	mov.w	r0, #3
   12f5a:	df02      	svc	2
	void *p = ull_update_unmark(param);
   12f5c:	4620      	mov	r0, r4
   12f5e:	f7fe fb0b 	bl	11578 <ull_update_unmark>
	LL_ASSERT(p == param);
   12f62:	4284      	cmp	r4, r0
   12f64:	d00c      	beq.n	12f80 <ticker_start_conn_op_cb+0x44>
   12f66:	f240 635a 	movw	r3, #1626	; 0x65a
   12f6a:	4a06      	ldr	r2, [pc, #24]	; (12f84 <ticker_start_conn_op_cb+0x48>)
   12f6c:	4908      	ldr	r1, [pc, #32]	; (12f90 <ticker_start_conn_op_cb+0x54>)
   12f6e:	4807      	ldr	r0, [pc, #28]	; (12f8c <ticker_start_conn_op_cb+0x50>)
   12f70:	f00a fc21 	bl	1d7b6 <printk>
   12f74:	4040      	eors	r0, r0
   12f76:	f380 8811 	msr	BASEPRI, r0
   12f7a:	f04f 0003 	mov.w	r0, #3
   12f7e:	df02      	svc	2
}
   12f80:	bd10      	pop	{r4, pc}
   12f82:	bf00      	nop
   12f84:	00029456 	.word	0x00029456
   12f88:	00029496 	.word	0x00029496
   12f8c:	00027ff4 	.word	0x00027ff4
   12f90:	000293fa 	.word	0x000293fa

00012f94 <ticker_stop_conn_op_cb>:
{
   12f94:	b510      	push	{r4, lr}
   12f96:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12f98:	b160      	cbz	r0, 12fb4 <ticker_stop_conn_op_cb+0x20>
   12f9a:	f240 634d 	movw	r3, #1613	; 0x64d
   12f9e:	4a0f      	ldr	r2, [pc, #60]	; (12fdc <ticker_stop_conn_op_cb+0x48>)
   12fa0:	490f      	ldr	r1, [pc, #60]	; (12fe0 <ticker_stop_conn_op_cb+0x4c>)
   12fa2:	4810      	ldr	r0, [pc, #64]	; (12fe4 <ticker_stop_conn_op_cb+0x50>)
   12fa4:	f00a fc07 	bl	1d7b6 <printk>
   12fa8:	4040      	eors	r0, r0
   12faa:	f380 8811 	msr	BASEPRI, r0
   12fae:	f04f 0003 	mov.w	r0, #3
   12fb2:	df02      	svc	2
	void *p = ull_update_mark(param);
   12fb4:	4620      	mov	r0, r4
   12fb6:	f7fe fad7 	bl	11568 <ull_update_mark>
	LL_ASSERT(p == param);
   12fba:	4284      	cmp	r4, r0
   12fbc:	d00c      	beq.n	12fd8 <ticker_stop_conn_op_cb+0x44>
   12fbe:	f240 6351 	movw	r3, #1617	; 0x651
   12fc2:	4a06      	ldr	r2, [pc, #24]	; (12fdc <ticker_stop_conn_op_cb+0x48>)
   12fc4:	4908      	ldr	r1, [pc, #32]	; (12fe8 <ticker_stop_conn_op_cb+0x54>)
   12fc6:	4807      	ldr	r0, [pc, #28]	; (12fe4 <ticker_stop_conn_op_cb+0x50>)
   12fc8:	f00a fbf5 	bl	1d7b6 <printk>
   12fcc:	4040      	eors	r0, r0
   12fce:	f380 8811 	msr	BASEPRI, r0
   12fd2:	f04f 0003 	mov.w	r0, #3
   12fd6:	df02      	svc	2
}
   12fd8:	bd10      	pop	{r4, pc}
   12fda:	bf00      	nop
   12fdc:	00029456 	.word	0x00029456
   12fe0:	00029496 	.word	0x00029496
   12fe4:	00027ff4 	.word	0x00027ff4
   12fe8:	000293fa 	.word	0x000293fa

00012fec <ticker_update_conn_op_cb>:
{
   12fec:	b510      	push	{r4, lr}
   12fee:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12ff0:	b1a0      	cbz	r0, 1301c <ticker_update_conn_op_cb+0x30>
   12ff2:	f7fe facf 	bl	11594 <ull_update_mark_get>
   12ff6:	4284      	cmp	r4, r0
   12ff8:	d010      	beq.n	1301c <ticker_update_conn_op_cb+0x30>
   12ffa:	f7fe faaf 	bl	1155c <ull_disable_mark_get>
   12ffe:	4284      	cmp	r4, r0
   13000:	d00c      	beq.n	1301c <ticker_update_conn_op_cb+0x30>
   13002:	f44f 63c9 	mov.w	r3, #1608	; 0x648
   13006:	4a06      	ldr	r2, [pc, #24]	; (13020 <ticker_update_conn_op_cb+0x34>)
   13008:	4906      	ldr	r1, [pc, #24]	; (13024 <ticker_update_conn_op_cb+0x38>)
   1300a:	4807      	ldr	r0, [pc, #28]	; (13028 <ticker_update_conn_op_cb+0x3c>)
   1300c:	f00a fbd3 	bl	1d7b6 <printk>
   13010:	4040      	eors	r0, r0
   13012:	f380 8811 	msr	BASEPRI, r0
   13016:	f04f 0003 	mov.w	r0, #3
   1301a:	df02      	svc	2
}
   1301c:	bd10      	pop	{r4, pc}
   1301e:	bf00      	nop
   13020:	00029456 	.word	0x00029456
   13024:	00029405 	.word	0x00029405
   13028:	00027ff4 	.word	0x00027ff4

0001302c <ticker_op_stop_cb>:
{
   1302c:	b510      	push	{r4, lr}
   1302e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13030:	b160      	cbz	r0, 1304c <ticker_op_stop_cb+0x20>
   13032:	f240 6363 	movw	r3, #1635	; 0x663
   13036:	4a10      	ldr	r2, [pc, #64]	; (13078 <ticker_op_stop_cb+0x4c>)
   13038:	4910      	ldr	r1, [pc, #64]	; (1307c <ticker_op_stop_cb+0x50>)
   1303a:	4811      	ldr	r0, [pc, #68]	; (13080 <ticker_op_stop_cb+0x54>)
   1303c:	f00a fbbb 	bl	1d7b6 <printk>
   13040:	4040      	eors	r0, r0
   13042:	f380 8811 	msr	BASEPRI, r0
   13046:	f04f 0003 	mov.w	r0, #3
   1304a:	df02      	svc	2
	mfy.param = param;
   1304c:	4b0d      	ldr	r3, [pc, #52]	; (13084 <ticker_op_stop_cb+0x58>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1304e:	2200      	movs	r2, #0
   13050:	4611      	mov	r1, r2
   13052:	2002      	movs	r0, #2
	mfy.param = param;
   13054:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   13056:	f7fb fd9b 	bl	eb90 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1305a:	b160      	cbz	r0, 13076 <ticker_op_stop_cb+0x4a>
   1305c:	f240 636a 	movw	r3, #1642	; 0x66a
   13060:	4a05      	ldr	r2, [pc, #20]	; (13078 <ticker_op_stop_cb+0x4c>)
   13062:	4909      	ldr	r1, [pc, #36]	; (13088 <ticker_op_stop_cb+0x5c>)
   13064:	4806      	ldr	r0, [pc, #24]	; (13080 <ticker_op_stop_cb+0x54>)
   13066:	f00a fba6 	bl	1d7b6 <printk>
   1306a:	4040      	eors	r0, r0
   1306c:	f380 8811 	msr	BASEPRI, r0
   13070:	f04f 0003 	mov.w	r0, #3
   13074:	df02      	svc	2
}
   13076:	bd10      	pop	{r4, pc}
   13078:	00029456 	.word	0x00029456
   1307c:	00029496 	.word	0x00029496
   13080:	00027ff4 	.word	0x00027ff4
   13084:	2000e264 	.word	0x2000e264
   13088:	0002903a 	.word	0x0002903a

0001308c <conn_cleanup>:
	rx->hdr.handle = conn->lll.handle;
   1308c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
{
   1308e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	rx->hdr.handle = conn->lll.handle;
   13092:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
	*((u8_t *)rx->pdu) = reason;
   13096:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1309a:	2309      	movs	r3, #9
	rx = conn->llcp_rx;
   1309c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   130a0:	f880 3130 	strb.w	r3, [r0, #304]	; 0x130
{
   130a4:	4604      	mov	r4, r0
	struct lll_conn *lll = &conn->lll;
   130a6:	f100 061c 	add.w	r6, r0, #28
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   130aa:	2503      	movs	r5, #3
	while (rx) {
   130ac:	bb19      	cbnz	r1, 130f6 <conn_cleanup+0x6a>
		link = mem_acquire(&mem_link_tx.free);
   130ae:	4f24      	ldr	r7, [pc, #144]	; (13140 <conn_cleanup+0xb4>)
		LL_ASSERT(link);
   130b0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13148 <conn_cleanup+0xbc>
   130b4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 13154 <conn_cleanup+0xc8>
	while (conn->tx_head) {
   130b8:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
   130bc:	bb10      	cbnz	r0, 13104 <conn_cleanup+0x78>
				    TICKER_ID_CONN_BASE + lll->handle,
   130be:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   130c2:	4b20      	ldr	r3, [pc, #128]	; (13144 <conn_cleanup+0xb8>)
   130c4:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   130c6:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   130c8:	b2d2      	uxtb	r2, r2
   130ca:	2101      	movs	r1, #1
   130cc:	f7fc fa70 	bl	f5b0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   130d0:	f030 0302 	bics.w	r3, r0, #2
   130d4:	d00c      	beq.n	130f0 <conn_cleanup+0x64>
   130d6:	f240 63b3 	movw	r3, #1715	; 0x6b3
   130da:	4a1b      	ldr	r2, [pc, #108]	; (13148 <conn_cleanup+0xbc>)
   130dc:	491b      	ldr	r1, [pc, #108]	; (1314c <conn_cleanup+0xc0>)
   130de:	481c      	ldr	r0, [pc, #112]	; (13150 <conn_cleanup+0xc4>)
   130e0:	f00a fb69 	bl	1d7b6 <printk>
   130e4:	4040      	eors	r0, r0
   130e6:	f380 8811 	msr	BASEPRI, r0
   130ea:	f04f 0003 	mov.w	r0, #3
   130ee:	df02      	svc	2
}
   130f0:	b002      	add	sp, #8
   130f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rx = hdr->link->mem;
   130f6:	6808      	ldr	r0, [r1, #0]
   130f8:	6847      	ldr	r7, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   130fa:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   130fc:	f7fe f97c 	bl	113f8 <ll_rx_put>
		rx = hdr->link->mem;
   13100:	4639      	mov	r1, r7
   13102:	e7d3      	b.n	130ac <conn_cleanup+0x20>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   13104:	4601      	mov	r1, r0
   13106:	4620      	mov	r0, r4
   13108:	f00e ff00 	bl	21f0c <tx_ull_dequeue>
   1310c:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   1310e:	4638      	mov	r0, r7
   13110:	f00e fba0 	bl	21854 <mem_acquire>
		LL_ASSERT(link);
   13114:	4605      	mov	r5, r0
   13116:	b960      	cbnz	r0, 13132 <conn_cleanup+0xa6>
   13118:	f240 63bf 	movw	r3, #1727	; 0x6bf
   1311c:	4642      	mov	r2, r8
   1311e:	4649      	mov	r1, r9
   13120:	480b      	ldr	r0, [pc, #44]	; (13150 <conn_cleanup+0xc4>)
   13122:	f00a fb48 	bl	1d7b6 <printk>
   13126:	4040      	eors	r0, r0
   13128:	f380 8811 	msr	BASEPRI, r0
   1312c:	f04f 0003 	mov.w	r0, #3
   13130:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13132:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   13136:	4651      	mov	r1, sl
   13138:	4628      	mov	r0, r5
   1313a:	f00e fbe9 	bl	21910 <memq_enqueue>
   1313e:	e7bb      	b.n	130b8 <conn_cleanup+0x2c>
   13140:	20001484 	.word	0x20001484
   13144:	0001302d 	.word	0x0001302d
   13148:	00029456 	.word	0x00029456
   1314c:	000293b5 	.word	0x000293b5
   13150:	00027ff4 	.word	0x00027ff4
   13154:	0002952b 	.word	0x0002952b

00013158 <tx_lll_flush>:
{
   13158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1315c:	4606      	mov	r6, r0
{
   1315e:	4607      	mov	r7, r0
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   13160:	f856 5b4c 	ldr.w	r5, [r6], #76
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   13164:	4c2e      	ldr	r4, [pc, #184]	; (13220 <tx_lll_flush+0xc8>)
	lll_conn_flush(lll);
   13166:	f00f f998 	bl	2249a <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1316a:	aa01      	add	r2, sp, #4
   1316c:	4631      	mov	r1, r6
   1316e:	6d38      	ldr	r0, [r7, #80]	; 0x50
   13170:	f00e fbdd 	bl	2192e <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13174:	f104 0804 	add.w	r8, r4, #4
	while (link) {
   13178:	b9f0      	cbnz	r0, 131b8 <tx_lll_flush+0x60>
	LL_ASSERT(rx->hdr.link);
   1317a:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
	rx = (void *)&conn->llcp_terminate.node_rx;
   1317e:	f505 7496 	add.w	r4, r5, #300	; 0x12c
	LL_ASSERT(rx->hdr.link);
   13182:	b963      	cbnz	r3, 1319e <tx_lll_flush+0x46>
   13184:	f240 63ea 	movw	r3, #1770	; 0x6ea
   13188:	4a26      	ldr	r2, [pc, #152]	; (13224 <tx_lll_flush+0xcc>)
   1318a:	4927      	ldr	r1, [pc, #156]	; (13228 <tx_lll_flush+0xd0>)
   1318c:	4827      	ldr	r0, [pc, #156]	; (1322c <tx_lll_flush+0xd4>)
   1318e:	f00a fb12 	bl	1d7b6 <printk>
   13192:	4040      	eors	r0, r0
   13194:	f380 8811 	msr	BASEPRI, r0
   13198:	f04f 0003 	mov.w	r0, #3
   1319c:	df02      	svc	2
	rx->hdr.link = NULL;
   1319e:	2300      	movs	r3, #0
	link = rx->hdr.link;
   131a0:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
	rx->hdr.link = NULL;
   131a4:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
	ull_rx_put(link, rx);
   131a8:	4621      	mov	r1, r4
   131aa:	f7fe fa63 	bl	11674 <ull_rx_put>
	ull_rx_sched();
   131ae:	f7fe fa71 	bl	11694 <ull_rx_sched>
}
   131b2:	b002      	add	sp, #8
   131b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   131b8:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   131ba:	f894 e001 	ldrb.w	lr, [r4, #1]
   131be:	f894 c002 	ldrb.w	ip, [r4, #2]
   131c2:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
   131c4:	1c53      	adds	r3, r2, #1
   131c6:	b2db      	uxtb	r3, r3
		last = 0U;
   131c8:	459e      	cmp	lr, r3
   131ca:	bf08      	it	eq
   131cc:	2300      	moveq	r3, #0
	if (last == first) {
   131ce:	459c      	cmp	ip, r3
   131d0:	d004      	beq.n	131dc <tx_lll_flush+0x84>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   131d2:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   131d6:	eb18 0c02 	adds.w	ip, r8, r2
   131da:	d10f      	bne.n	131fc <tx_lll_flush+0xa4>
   131dc:	f240 63d6 	movw	r3, #1750	; 0x6d6
   131e0:	4a10      	ldr	r2, [pc, #64]	; (13224 <tx_lll_flush+0xcc>)
   131e2:	4913      	ldr	r1, [pc, #76]	; (13230 <tx_lll_flush+0xd8>)
   131e4:	4811      	ldr	r0, [pc, #68]	; (1322c <tx_lll_flush+0xd4>)
   131e6:	f00a fae6 	bl	1d7b6 <printk>
   131ea:	4040      	eors	r0, r0
   131ec:	f380 8811 	msr	BASEPRI, r0
   131f0:	f04f 0003 	mov.w	r0, #3
   131f4:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   131f6:	2300      	movs	r3, #0
   131f8:	801b      	strh	r3, [r3, #0]
   131fa:	deff      	udf	#255	; 0xff
   131fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13200:	f828 1002 	strh.w	r1, [r8, r2]
		lll_tx->node = tx;
   13204:	9901      	ldr	r1, [sp, #4]
   13206:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1320a:	680a      	ldr	r2, [r1, #0]
   1320c:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1320e:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   13210:	aa01      	add	r2, sp, #4
	*last = idx; /* Commit: Update write index */
   13212:	70e3      	strb	r3, [r4, #3]
   13214:	4631      	mov	r1, r6
   13216:	6d38      	ldr	r0, [r7, #80]	; 0x50
   13218:	f00e fb89 	bl	2192e <memq_dequeue>
   1321c:	e7ac      	b.n	13178 <tx_lll_flush+0x20>
   1321e:	bf00      	nop
   13220:	2000e1fc 	.word	0x2000e1fc
   13224:	00029456 	.word	0x00029456
   13228:	00029523 	.word	0x00029523
   1322c:	00027ff4 	.word	0x00027ff4
   13230:	000294a2 	.word	0x000294a2

00013234 <ctrl_tx_pause_enqueue>:
{
   13234:	b538      	push	{r3, r4, r5, lr}
   13236:	460d      	mov	r5, r1
   13238:	e9d0 316c 	ldrd	r3, r1, [r0, #432]	; 0x1b0
   1323c:	4604      	mov	r4, r0
	if (
   1323e:	2b00      	cmp	r3, #0
   13240:	d030      	beq.n	132a4 <ctrl_tx_pause_enqueue+0x70>
	    !conn->llcp_enc.pause_tx &&
   13242:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
	    conn->tx_head &&
   13246:	0780      	lsls	r0, r0, #30
   13248:	d42c      	bmi.n	132a4 <ctrl_tx_pause_enqueue+0x70>
	    !conn->llcp_phy.pause_tx &&
   1324a:	f894 01ab 	ldrb.w	r0, [r4, #427]	; 0x1ab
   1324e:	07c0      	lsls	r0, r0, #31
   13250:	d428      	bmi.n	132a4 <ctrl_tx_pause_enqueue+0x70>
		if (conn->tx_head == conn->tx_data) {
   13252:	f8d4 01bc 	ldr.w	r0, [r4, #444]	; 0x1bc
   13256:	4283      	cmp	r3, r0
			conn->tx_data = conn->tx_data->next;
   13258:	bf04      	itt	eq
   1325a:	6818      	ldreq	r0, [r3, #0]
   1325c:	f8c4 01bc 	streq.w	r0, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   13260:	b961      	cbnz	r1, 1327c <ctrl_tx_pause_enqueue+0x48>
			tx->next = conn->tx_head->next;
   13262:	6819      	ldr	r1, [r3, #0]
   13264:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   13266:	601d      	str	r5, [r3, #0]
			if (!pause) {
   13268:	b91a      	cbnz	r2, 13272 <ctrl_tx_pause_enqueue+0x3e>
				conn->tx_ctrl = tx;
   1326a:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
	conn->tx_ctrl_last = tx;
   1326e:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
   13272:	682b      	ldr	r3, [r5, #0]
   13274:	b90b      	cbnz	r3, 1327a <ctrl_tx_pause_enqueue+0x46>
		conn->tx_data_last = tx;
   13276:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   1327a:	bd38      	pop	{r3, r4, r5, pc}
			LL_ASSERT(!pause);
   1327c:	b162      	cbz	r2, 13298 <ctrl_tx_pause_enqueue+0x64>
   1327e:	f240 7345 	movw	r3, #1861	; 0x745
			LL_ASSERT(!pause);
   13282:	4a0d      	ldr	r2, [pc, #52]	; (132b8 <ctrl_tx_pause_enqueue+0x84>)
   13284:	490d      	ldr	r1, [pc, #52]	; (132bc <ctrl_tx_pause_enqueue+0x88>)
   13286:	480e      	ldr	r0, [pc, #56]	; (132c0 <ctrl_tx_pause_enqueue+0x8c>)
   13288:	f00a fa95 	bl	1d7b6 <printk>
   1328c:	4040      	eors	r0, r0
   1328e:	f380 8811 	msr	BASEPRI, r0
   13292:	f04f 0003 	mov.w	r0, #3
   13296:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   13298:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   1329c:	681a      	ldr	r2, [r3, #0]
   1329e:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   132a0:	601d      	str	r5, [r3, #0]
   132a2:	e7e4      	b.n	1326e <ctrl_tx_pause_enqueue+0x3a>
		if (!conn->tx_ctrl) {
   132a4:	b919      	cbnz	r1, 132ae <ctrl_tx_pause_enqueue+0x7a>
			tx->next = conn->tx_head;
   132a6:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   132a8:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
   132ac:	e7dc      	b.n	13268 <ctrl_tx_pause_enqueue+0x34>
			LL_ASSERT(!pause);
   132ae:	2a00      	cmp	r2, #0
   132b0:	d0f2      	beq.n	13298 <ctrl_tx_pause_enqueue+0x64>
   132b2:	f240 7357 	movw	r3, #1879	; 0x757
   132b6:	e7e4      	b.n	13282 <ctrl_tx_pause_enqueue+0x4e>
   132b8:	00029456 	.word	0x00029456
   132bc:	000293e2 	.word	0x000293e2
   132c0:	00027ff4 	.word	0x00027ff4

000132c4 <feature_rsp_send.isra.15>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   132c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132c6:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   132c8:	4820      	ldr	r0, [pc, #128]	; (1334c <feature_rsp_send.isra.15+0x88>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   132ca:	460d      	mov	r5, r1
   132cc:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   132ce:	f00e fac1 	bl	21854 <mem_acquire>
	if (!tx) {
   132d2:	4604      	mov	r4, r0
   132d4:	b3b8      	cbz	r0, 13346 <feature_rsp_send.isra.15+0x82>
	       (features[1] << 8) | (features[2] << 16);
   132d6:	79bb      	ldrb	r3, [r7, #6]
   132d8:	797a      	ldrb	r2, [r7, #5]
   132da:	041b      	lsls	r3, r3, #16
   132dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   132e0:	793a      	ldrb	r2, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   132e2:	4313      	orrs	r3, r2
   132e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   132e8:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_feature.features &= feat_get(&req->features[0]);
   132ec:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   132f0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   132f4:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features &= feat_get(&req->features[0]);
   132f8:	4013      	ands	r3, r2
   132fa:	f3c3 0310 	ubfx	r3, r3, #0, #17
   132fe:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   13302:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
   13306:	f043 0301 	orr.w	r3, r3, #1
   1330a:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1330e:	7903      	ldrb	r3, [r0, #4]
   13310:	f043 0303 	orr.w	r3, r3, #3
   13314:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   13316:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   13318:	2309      	movs	r3, #9
   1331a:	7143      	strb	r3, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1331c:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1331e:	2100      	movs	r1, #0
   13320:	4410      	add	r0, r2
   13322:	f00c f993 	bl	1f64c <memset>
	sys_put_le24(conn->llcp_feature.features,
   13326:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
	dst[0] = val;
   1332a:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
   1332c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   13330:	0c1b      	lsrs	r3, r3, #16
   13332:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   13334:	4630      	mov	r0, r6
	dst[1] = val >> 8;
   13336:	7262      	strb	r2, [r4, #9]
   13338:	4621      	mov	r1, r4
   1333a:	f00e fe1a 	bl	21f72 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1333e:	2303      	movs	r3, #3
   13340:	702b      	strb	r3, [r5, #0]
	return 0;
   13342:	2000      	movs	r0, #0
}
   13344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   13346:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1334a:	e7fb      	b.n	13344 <feature_rsp_send.isra.15+0x80>
   1334c:	20001400 	.word	0x20001400

00013350 <reject_ext_ind_send.isra.9>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   13350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13354:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13356:	480e      	ldr	r0, [pc, #56]	; (13390 <reject_ext_ind_send.isra.9+0x40>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   13358:	460d      	mov	r5, r1
   1335a:	4690      	mov	r8, r2
   1335c:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1335e:	f00e fa79 	bl	21854 <mem_acquire>
	if (!tx) {
   13362:	4601      	mov	r1, r0
   13364:	b188      	cbz	r0, 1338a <reject_ext_ind_send.isra.9+0x3a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13366:	7900      	ldrb	r0, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   13368:	f881 8008 	strb.w	r8, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1336c:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   13370:	2403      	movs	r4, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   13372:	2311      	movs	r3, #17
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13374:	7108      	strb	r0, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   13376:	714c      	strb	r4, [r1, #5]
	ctrl_tx_enqueue(conn, tx);
   13378:	4630      	mov	r0, r6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1337a:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1337c:	724f      	strb	r7, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
   1337e:	f00e fe32 	bl	21fe6 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13382:	702c      	strb	r4, [r5, #0]
	return 0;
   13384:	2000      	movs	r0, #0
}
   13386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1338a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1338e:	e7fa      	b.n	13386 <reject_ext_ind_send.isra.9+0x36>
   13390:	20001400 	.word	0x20001400

00013394 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   13394:	4801      	ldr	r0, [pc, #4]	; (1339c <ll_conn_acquire+0x8>)
   13396:	f00e ba5d 	b.w	21854 <mem_acquire>
   1339a:	bf00      	nop
   1339c:	200011b4 	.word	0x200011b4

000133a0 <ll_conn_release>:
	mem_release(conn, &conn_free);
   133a0:	4901      	ldr	r1, [pc, #4]	; (133a8 <ll_conn_release+0x8>)
   133a2:	f00e ba70 	b.w	21886 <mem_release>
   133a6:	bf00      	nop
   133a8:	200011b4 	.word	0x200011b4

000133ac <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   133ac:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   133b0:	4901      	ldr	r1, [pc, #4]	; (133b8 <ll_conn_handle_get+0xc>)
   133b2:	f00e ba80 	b.w	218b6 <mem_index_get>
   133b6:	bf00      	nop
   133b8:	200011b8 	.word	0x200011b8

000133bc <ll_conn_get>:
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   133bc:	4602      	mov	r2, r0
   133be:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   133c2:	4801      	ldr	r0, [pc, #4]	; (133c8 <ll_conn_get+0xc>)
   133c4:	f00e ba74 	b.w	218b0 <mem_get>
   133c8:	200011b8 	.word	0x200011b8

000133cc <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   133cc:	4801      	ldr	r0, [pc, #4]	; (133d4 <ll_tx_mem_acquire+0x8>)
   133ce:	f00e ba41 	b.w	21854 <mem_acquire>
   133d2:	bf00      	nop
   133d4:	20001390 	.word	0x20001390

000133d8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   133d8:	4901      	ldr	r1, [pc, #4]	; (133e0 <ll_tx_mem_release+0x8>)
   133da:	f00e ba54 	b.w	21886 <mem_release>
   133de:	bf00      	nop
   133e0:	20001390 	.word	0x20001390

000133e4 <ll_tx_mem_enqueue>:
{
   133e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133e8:	b088      	sub	sp, #32
   133ea:	4606      	mov	r6, r0
   133ec:	4688      	mov	r8, r1
	conn = ll_connected_get(handle);
   133ee:	f00e fe0d 	bl	2200c <ll_connected_get>
	if (!conn) {
   133f2:	2800      	cmp	r0, #0
   133f4:	d049      	beq.n	1348a <ll_tx_mem_enqueue+0xa6>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   133f6:	4c28      	ldr	r4, [pc, #160]	; (13498 <ll_tx_mem_enqueue+0xb4>)
   133f8:	78e5      	ldrb	r5, [r4, #3]
	if (last == count) {
   133fa:	7867      	ldrb	r7, [r4, #1]
   133fc:	78a2      	ldrb	r2, [r4, #2]
   133fe:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
   13400:	1c6b      	adds	r3, r5, #1
   13402:	b2db      	uxtb	r3, r3
		last = 0U;
   13404:	429f      	cmp	r7, r3
   13406:	bf08      	it	eq
   13408:	2300      	moveq	r3, #0
	if (last == first) {
   1340a:	429a      	cmp	r2, r3
   1340c:	d040      	beq.n	13490 <ll_tx_mem_enqueue+0xac>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1340e:	1d22      	adds	r2, r4, #4
   13410:	fb15 f501 	smulbb	r5, r5, r1
	if (!lll_tx) {
   13414:	1957      	adds	r7, r2, r5
   13416:	d03b      	beq.n	13490 <ll_tx_mem_enqueue+0xac>
	lll_tx->handle = handle;
   13418:	5356      	strh	r6, [r2, r5]
	*last = idx; /* Commit: Update write index */
   1341a:	70e3      	strb	r3, [r4, #3]
	if (conn->lll.role && conn->lll.latency_event &&
   1341c:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	lll_tx->node = tx;
   13420:	f8c7 8004 	str.w	r8, [r7, #4]
	if (conn->lll.role && conn->lll.latency_event &&
   13424:	2b00      	cmp	r3, #0
   13426:	db03      	blt.n	13430 <ll_tx_mem_enqueue+0x4c>
	return 0;
   13428:	2000      	movs	r0, #0
}
   1342a:	b008      	add	sp, #32
   1342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->lll.role && conn->lll.latency_event &&
   13430:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   13432:	2b00      	cmp	r3, #0
   13434:	d0f8      	beq.n	13428 <ll_tx_mem_enqueue+0x44>
	    !conn->slave.latency_cancel) {
   13436:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->lll.role && conn->lll.latency_event &&
   1343a:	f013 0402 	ands.w	r4, r3, #2
   1343e:	d1f3      	bne.n	13428 <ll_tx_mem_enqueue+0x44>
		conn->slave.latency_cancel = 1U;
   13440:	f043 0302 	orr.w	r3, r3, #2
   13444:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   13448:	4b14      	ldr	r3, [pc, #80]	; (1349c <ll_tx_mem_enqueue+0xb8>)
   1344a:	9006      	str	r0, [sp, #24]
   1344c:	e9cd 4304 	strd	r4, r3, [sp, #16]
				      (TICKER_ID_CONN_BASE + handle),
   13450:	1cf2      	adds	r2, r6, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   13452:	2301      	movs	r3, #1
   13454:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13458:	e9cd 4400 	strd	r4, r4, [sp]
   1345c:	4623      	mov	r3, r4
   1345e:	b2d2      	uxtb	r2, r2
   13460:	2103      	movs	r1, #3
   13462:	4620      	mov	r0, r4
   13464:	f7fc f85c 	bl	f520 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13468:	f030 0302 	bics.w	r3, r0, #2
   1346c:	d0dc      	beq.n	13428 <ll_tx_mem_enqueue+0x44>
   1346e:	f240 1301 	movw	r3, #257	; 0x101
   13472:	4a0b      	ldr	r2, [pc, #44]	; (134a0 <ll_tx_mem_enqueue+0xbc>)
   13474:	490b      	ldr	r1, [pc, #44]	; (134a4 <ll_tx_mem_enqueue+0xc0>)
   13476:	480c      	ldr	r0, [pc, #48]	; (134a8 <ll_tx_mem_enqueue+0xc4>)
   13478:	f00a f99d 	bl	1d7b6 <printk>
   1347c:	4040      	eors	r0, r0
   1347e:	f380 8811 	msr	BASEPRI, r0
   13482:	f04f 0003 	mov.w	r0, #3
   13486:	df02      	svc	2
   13488:	e7ce      	b.n	13428 <ll_tx_mem_enqueue+0x44>
		return -EINVAL;
   1348a:	f06f 0015 	mvn.w	r0, #21
   1348e:	e7cc      	b.n	1342a <ll_tx_mem_enqueue+0x46>
		return -ENOBUFS;
   13490:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13494:	e7c9      	b.n	1342a <ll_tx_mem_enqueue+0x46>
   13496:	bf00      	nop
   13498:	2000e240 	.word	0x2000e240
   1349c:	00012e8d 	.word	0x00012e8d
   134a0:	00029456 	.word	0x00029456
   134a4:	000293b5 	.word	0x000293b5
   134a8:	00027ff4 	.word	0x00027ff4

000134ac <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   134ac:	4b03      	ldr	r3, [pc, #12]	; (134bc <ll_length_default_get+0x10>)
   134ae:	881b      	ldrh	r3, [r3, #0]
   134b0:	8003      	strh	r3, [r0, #0]
	*max_tx_time = default_tx_time;
   134b2:	4b03      	ldr	r3, [pc, #12]	; (134c0 <ll_length_default_get+0x14>)
   134b4:	881b      	ldrh	r3, [r3, #0]
   134b6:	800b      	strh	r3, [r1, #0]
}
   134b8:	4770      	bx	lr
   134ba:	bf00      	nop
   134bc:	20006054 	.word	0x20006054
   134c0:	20006056 	.word	0x20006056

000134c4 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   134c4:	4b02      	ldr	r3, [pc, #8]	; (134d0 <ll_length_default_set+0xc>)
   134c6:	8018      	strh	r0, [r3, #0]
	default_tx_time = max_tx_time;
   134c8:	4b02      	ldr	r3, [pc, #8]	; (134d4 <ll_length_default_set+0x10>)
}
   134ca:	2000      	movs	r0, #0
	default_tx_time = max_tx_time;
   134cc:	8019      	strh	r1, [r3, #0]
}
   134ce:	4770      	bx	lr
   134d0:	20006054 	.word	0x20006054
   134d4:	20006056 	.word	0x20006056

000134d8 <ll_phy_default_set>:
	default_phy_tx = tx;
   134d8:	4b02      	ldr	r3, [pc, #8]	; (134e4 <ll_phy_default_set+0xc>)
   134da:	7018      	strb	r0, [r3, #0]
	default_phy_rx = rx;
   134dc:	4b02      	ldr	r3, [pc, #8]	; (134e8 <ll_phy_default_set+0x10>)
}
   134de:	2000      	movs	r0, #0
	default_phy_rx = rx;
   134e0:	7019      	strb	r1, [r3, #0]
}
   134e2:	4770      	bx	lr
   134e4:	2000a554 	.word	0x2000a554
   134e8:	2000a553 	.word	0x2000a553

000134ec <ull_conn_init>:
{
   134ec:	b508      	push	{r3, lr}
   134ee:	4806      	ldr	r0, [pc, #24]	; (13508 <ull_conn_init+0x1c>)
   134f0:	f008 fb32 	bl	1bb58 <z_impl_device_get_binding>
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   134f4:	4b05      	ldr	r3, [pc, #20]	; (1350c <ull_conn_init+0x20>)
   134f6:	6018      	str	r0, [r3, #0]
	if (!entropy) {
   134f8:	b118      	cbz	r0, 13502 <ull_conn_init+0x16>
}
   134fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = init_reset();
   134fe:	f7ff bce3 	b.w	12ec8 <init_reset>
}
   13502:	f06f 0012 	mvn.w	r0, #18
   13506:	bd08      	pop	{r3, pc}
   13508:	0002901c 	.word	0x0002901c
   1350c:	20001384 	.word	0x20001384

00013510 <ull_conn_reset>:
{
   13510:	b530      	push	{r4, r5, lr}
   13512:	b085      	sub	sp, #20
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   13514:	2302      	movs	r3, #2
	conn = ll_conn_get(handle);
   13516:	2000      	movs	r0, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   13518:	9303      	str	r3, [sp, #12]
	conn = ll_conn_get(handle);
   1351a:	f7ff ff4f 	bl	133bc <ll_conn_get>
   1351e:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   13520:	f7fe f806 	bl	11530 <ull_disable_mark>
	LL_ASSERT(mark == conn);
   13524:	4284      	cmp	r4, r0
   13526:	d00c      	beq.n	13542 <ull_conn_reset+0x32>
   13528:	f240 6377 	movw	r3, #1655	; 0x677
   1352c:	4a29      	ldr	r2, [pc, #164]	; (135d4 <ull_conn_reset+0xc4>)
   1352e:	492a      	ldr	r1, [pc, #168]	; (135d8 <ull_conn_reset+0xc8>)
   13530:	482a      	ldr	r0, [pc, #168]	; (135dc <ull_conn_reset+0xcc>)
   13532:	f00a f940 	bl	1d7b6 <printk>
   13536:	4040      	eors	r0, r0
   13538:	f380 8811 	msr	BASEPRI, r0
   1353c:	f04f 0003 	mov.w	r0, #3
   13540:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13542:	ad03      	add	r5, sp, #12
   13544:	2203      	movs	r2, #3
   13546:	4611      	mov	r1, r2
   13548:	9500      	str	r5, [sp, #0]
   1354a:	4b25      	ldr	r3, [pc, #148]	; (135e0 <ull_conn_reset+0xd0>)
   1354c:	2000      	movs	r0, #0
   1354e:	f7fc f82f 	bl	f5b0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   13552:	4629      	mov	r1, r5
   13554:	f7fd ffe0 	bl	11518 <ull_ticker_status_take>
	if (!ret) {
   13558:	b988      	cbnz	r0, 1357e <ull_conn_reset+0x6e>
		ret = ull_disable(&conn->lll);
   1355a:	f104 001c 	add.w	r0, r4, #28
   1355e:	f7fe f81f 	bl	115a0 <ull_disable>
		LL_ASSERT(!ret);
   13562:	b160      	cbz	r0, 1357e <ull_conn_reset+0x6e>
   13564:	f44f 63d0 	mov.w	r3, #1664	; 0x680
   13568:	4a1a      	ldr	r2, [pc, #104]	; (135d4 <ull_conn_reset+0xc4>)
   1356a:	491e      	ldr	r1, [pc, #120]	; (135e4 <ull_conn_reset+0xd4>)
   1356c:	481b      	ldr	r0, [pc, #108]	; (135dc <ull_conn_reset+0xcc>)
   1356e:	f00a f922 	bl	1d7b6 <printk>
   13572:	4040      	eors	r0, r0
   13574:	f380 8811 	msr	BASEPRI, r0
   13578:	f04f 0003 	mov.w	r0, #3
   1357c:	df02      	svc	2
	conn->lll.link_tx_free = NULL;
   1357e:	2300      	movs	r3, #0
   13580:	67a3      	str	r3, [r4, #120]	; 0x78
	mark = ull_disable_unmark(conn);
   13582:	4620      	mov	r0, r4
   13584:	f7fd ffdc 	bl	11540 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   13588:	4284      	cmp	r4, r0
   1358a:	d00c      	beq.n	135a6 <ull_conn_reset+0x96>
   1358c:	f240 6386 	movw	r3, #1670	; 0x686
   13590:	4a10      	ldr	r2, [pc, #64]	; (135d4 <ull_conn_reset+0xc4>)
   13592:	4911      	ldr	r1, [pc, #68]	; (135d8 <ull_conn_reset+0xc8>)
   13594:	4811      	ldr	r0, [pc, #68]	; (135dc <ull_conn_reset+0xcc>)
   13596:	f00a f90e 	bl	1d7b6 <printk>
   1359a:	4040      	eors	r0, r0
   1359c:	f380 8811 	msr	BASEPRI, r0
   135a0:	f04f 0003 	mov.w	r0, #3
   135a4:	df02      	svc	2
	data_chan_map[0] = 0xFF;
   135a6:	4b10      	ldr	r3, [pc, #64]	; (135e8 <ull_conn_reset+0xd8>)
   135a8:	22ff      	movs	r2, #255	; 0xff
   135aa:	701a      	strb	r2, [r3, #0]
	data_chan_map[1] = 0xFF;
   135ac:	705a      	strb	r2, [r3, #1]
	data_chan_map[2] = 0xFF;
   135ae:	709a      	strb	r2, [r3, #2]
	data_chan_map[3] = 0xFF;
   135b0:	70da      	strb	r2, [r3, #3]
	data_chan_map[4] = 0x1F;
   135b2:	221f      	movs	r2, #31
   135b4:	711a      	strb	r2, [r3, #4]
	data_chan_count = 37U;
   135b6:	4b0d      	ldr	r3, [pc, #52]	; (135ec <ull_conn_reset+0xdc>)
   135b8:	2225      	movs	r2, #37	; 0x25
   135ba:	701a      	strb	r2, [r3, #0]
	MFIFO_INIT(conn_tx);
   135bc:	4a0c      	ldr	r2, [pc, #48]	; (135f0 <ull_conn_reset+0xe0>)
   135be:	2300      	movs	r3, #0
   135c0:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   135c2:	4a0c      	ldr	r2, [pc, #48]	; (135f4 <ull_conn_reset+0xe4>)
   135c4:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   135c6:	4a0c      	ldr	r2, [pc, #48]	; (135f8 <ull_conn_reset+0xe8>)
   135c8:	6013      	str	r3, [r2, #0]
	err = init_reset();
   135ca:	f7ff fc7d 	bl	12ec8 <init_reset>
}
   135ce:	b005      	add	sp, #20
   135d0:	bd30      	pop	{r4, r5, pc}
   135d2:	bf00      	nop
   135d4:	00029456 	.word	0x00029456
   135d8:	00029530 	.word	0x00029530
   135dc:	00027ff4 	.word	0x00027ff4
   135e0:	0001150d 	.word	0x0001150d
   135e4:	00029035 	.word	0x00029035
   135e8:	2000e4ec 	.word	0x2000e4ec
   135ec:	2000e4eb 	.word	0x2000e4eb
   135f0:	2000e240 	.word	0x2000e240
   135f4:	2000e1fc 	.word	0x2000e1fc
   135f8:	20001380 	.word	0x20001380

000135fc <ull_conn_default_tx_octets_get>:
}
   135fc:	4b01      	ldr	r3, [pc, #4]	; (13604 <ull_conn_default_tx_octets_get+0x8>)
   135fe:	8818      	ldrh	r0, [r3, #0]
   13600:	4770      	bx	lr
   13602:	bf00      	nop
   13604:	20006054 	.word	0x20006054

00013608 <ull_conn_default_tx_time_get>:
}
   13608:	4b01      	ldr	r3, [pc, #4]	; (13610 <ull_conn_default_tx_time_get+0x8>)
   1360a:	8818      	ldrh	r0, [r3, #0]
   1360c:	4770      	bx	lr
   1360e:	bf00      	nop
   13610:	20006056 	.word	0x20006056

00013614 <ull_conn_default_phy_tx_get>:
}
   13614:	4b01      	ldr	r3, [pc, #4]	; (1361c <ull_conn_default_phy_tx_get+0x8>)
   13616:	7818      	ldrb	r0, [r3, #0]
   13618:	4770      	bx	lr
   1361a:	bf00      	nop
   1361c:	2000a554 	.word	0x2000a554

00013620 <ull_conn_default_phy_rx_get>:
}
   13620:	4b01      	ldr	r3, [pc, #4]	; (13628 <ull_conn_default_phy_rx_get+0x8>)
   13622:	7818      	ldrb	r0, [r3, #0]
   13624:	4770      	bx	lr
   13626:	bf00      	nop
   13628:	2000a553 	.word	0x2000a553

0001362c <ull_conn_setup>:
	lll = *((struct lll_conn **)((u8_t *)ftr->param +
   1362c:	688b      	ldr	r3, [r1, #8]
   1362e:	689b      	ldr	r3, [r3, #8]
{
   13630:	b510      	push	{r4, lr}
	switch (lll->role) {
   13632:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   13636:	09e4      	lsrs	r4, r4, #7
{
   13638:	460a      	mov	r2, r1
	switch (lll->role) {
   1363a:	d004      	beq.n	13646 <ull_conn_setup+0x1a>
		ull_slave_setup(link, rx, ftr, lll);
   1363c:	3208      	adds	r2, #8
}
   1363e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   13642:	f7ee bccd 	b.w	1fe0 <ull_slave_setup>
		LL_ASSERT(0);
   13646:	f240 23c2 	movw	r3, #706	; 0x2c2
   1364a:	4a06      	ldr	r2, [pc, #24]	; (13664 <ull_conn_setup+0x38>)
   1364c:	4906      	ldr	r1, [pc, #24]	; (13668 <ull_conn_setup+0x3c>)
   1364e:	4807      	ldr	r0, [pc, #28]	; (1366c <ull_conn_setup+0x40>)
   13650:	f00a f8b1 	bl	1d7b6 <printk>
   13654:	4040      	eors	r0, r0
   13656:	f380 8811 	msr	BASEPRI, r0
   1365a:	f04f 0003 	mov.w	r0, #3
   1365e:	df02      	svc	2
}
   13660:	bd10      	pop	{r4, pc}
   13662:	bf00      	nop
   13664:	00029456 	.word	0x00029456
   13668:	0002a0ca 	.word	0x0002a0ca
   1366c:	00027ff4 	.word	0x00027ff4

00013670 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   13670:	680b      	ldr	r3, [r1, #0]
{
   13672:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13676:	4680      	mov	r8, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   13678:	88d8      	ldrh	r0, [r3, #6]
{
   1367a:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   1367c:	f00e fcc6 	bl	2200c <ll_connected_get>
	if (!conn) {
   13680:	6835      	ldr	r5, [r6, #0]
   13682:	4604      	mov	r4, r0
   13684:	b910      	cbnz	r0, 1368c <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13686:	2303      	movs	r3, #3
   13688:	712b      	strb	r3, [r5, #4]
	return 0;
   1368a:	e1a5      	b.n	139d8 <ull_conn_rx+0x368>
	switch (pdu_rx->ll_id) {
   1368c:	f895 3020 	ldrb.w	r3, [r5, #32]
   13690:	f890 7152 	ldrb.w	r7, [r0, #338]	; 0x152
   13694:	f3c3 0301 	ubfx	r3, r3, #0, #2
   13698:	b2d9      	uxtb	r1, r3
   1369a:	b25b      	sxtb	r3, r3
   1369c:	f007 0201 	and.w	r2, r7, #1
   136a0:	2b00      	cmp	r3, #0
   136a2:	f001 820e 	beq.w	14ac2 <ull_conn_rx+0x1452>
   136a6:	2902      	cmp	r1, #2
   136a8:	f241 8206 	bls.w	14ab8 <ull_conn_rx+0x1448>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	u8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   136ac:	f895 9023 	ldrb.w	r9, [r5, #35]	; 0x23

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   136b0:	b14a      	cbz	r2, 136c6 <ull_conn_rx+0x56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   136b2:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
   136b6:	2a00      	cmp	r2, #0
   136b8:	f007 0304 	and.w	r3, r7, #4
   136bc:	db3d      	blt.n	1373a <ull_conn_rx+0xca>
	return (!conn->lll.role &&
   136be:	bb23      	cbnz	r3, 1370a <ull_conn_rx+0x9a>
		((!conn->llcp_enc.refresh &&
   136c0:	f1b9 0f02 	cmp.w	r9, #2
   136c4:	d132      	bne.n	1372c <ull_conn_rx+0xbc>
	pdu_rx = (void *)(*rx)->pdu;
   136c6:	f105 0a20 	add.w	sl, r5, #32

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   136ca:	f1b9 0f19 	cmp.w	r9, #25
   136ce:	f201 81e0 	bhi.w	14a92 <ull_conn_rx+0x1422>
   136d2:	e8df f019 	tbh	[pc, r9, lsl #1]
   136d6:	008e      	.short	0x008e
   136d8:	003a0108 	.word	0x003a0108
   136dc:	0183013c 	.word	0x0183013c
   136e0:	01cd01a8 	.word	0x01cd01a8
   136e4:	0206060f 	.word	0x0206060f
   136e8:	02500224 	.word	0x02500224
   136ec:	02a50281 	.word	0x02a50281
   136f0:	021b02fb 	.word	0x021b02fb
   136f4:	049f030e 	.word	0x049f030e
   136f8:	05d8005d 	.word	0x05d8005d
   136fc:	06d705f4 	.word	0x06d705f4
   13700:	07c906d7 	.word	0x07c906d7
   13704:	08e6089d 	.word	0x08e6089d
   13708:	09a8      	.short	0x09a8
		 (conn->llcp_enc.refresh &&
   1370a:	f1a9 0302 	sub.w	r3, r9, #2
   1370e:	b2db      	uxtb	r3, r3
   13710:	2b09      	cmp	r3, #9
   13712:	d80b      	bhi.n	1372c <ull_conn_rx+0xbc>
   13714:	f240 2205 	movw	r2, #517	; 0x205
   13718:	fa22 f303 	lsr.w	r3, r2, r3
   1371c:	07da      	lsls	r2, r3, #31
   1371e:	d4d2      	bmi.n	136c6 <ull_conn_rx+0x56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13720:	4bd1      	ldr	r3, [pc, #836]	; (13a68 <ull_conn_rx+0x3f8>)
   13722:	fa23 f309 	lsr.w	r3, r3, r9
   13726:	07db      	lsls	r3, r3, #31
   13728:	d4cd      	bmi.n	136c6 <ull_conn_rx+0x56>
   1372a:	e002      	b.n	13732 <ull_conn_rx+0xc2>
   1372c:	f1b9 0f11 	cmp.w	r9, #17
   13730:	d9f6      	bls.n	13720 <ull_conn_rx+0xb0>
			conn->llcp_terminate.reason_peer =
   13732:	233d      	movs	r3, #61	; 0x3d
   13734:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
   13738:	e171      	b.n	13a1e <ull_conn_rx+0x3ae>
	       (conn->lll.role &&
   1373a:	b99b      	cbnz	r3, 13764 <ull_conn_rx+0xf4>
		((!conn->llcp_enc.refresh &&
   1373c:	f1b9 0f07 	cmp.w	r9, #7
   13740:	f000 85d8 	beq.w	142f4 <ull_conn_rx+0xc84>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   13744:	f1b9 0f02 	cmp.w	r9, #2
   13748:	d117      	bne.n	1377a <ull_conn_rx+0x10a>
		}
	}
	break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   1374a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1374e:	2002      	movs	r0, #2
   13750:	f7ff fb7e 	bl	12e50 <pdu_len_cmp>
   13754:	2800      	cmp	r0, #0
   13756:	f001 819c 	beq.w	14a92 <ull_conn_rx+0x1422>
				 pdu_rx->len)) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		terminate_ind_recv(conn, *rx, pdu_rx);
   1375a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1375e:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13762:	e790      	b.n	13686 <ull_conn_rx+0x16>
		 (conn->llcp_enc.refresh &&
   13764:	f1b9 0f02 	cmp.w	r9, #2
   13768:	d0ef      	beq.n	1374a <ull_conn_rx+0xda>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1376a:	f1b9 0f0b 	cmp.w	r9, #11
   1376e:	f000 8233 	beq.w	13bd8 <ull_conn_rx+0x568>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   13772:	f1b9 0f03 	cmp.w	r9, #3
   13776:	f000 80ea 	beq.w	1394e <ull_conn_rx+0x2de>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1377a:	f1b9 0f06 	cmp.w	r9, #6
   1377e:	f000 8177 	beq.w	13a70 <ull_conn_rx+0x400>
   13782:	f1b9 0f0d 	cmp.w	r9, #13
   13786:	f000 82a1 	beq.w	13ccc <ull_conn_rx+0x65c>
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1378a:	f1b9 0f11 	cmp.w	r9, #17
   1378e:	d1d0      	bne.n	13732 <ull_conn_rx+0xc2>

		break;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	case PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   13790:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13794:	2011      	movs	r0, #17
   13796:	f7ff fb5b 	bl	12e50 <pdu_len_cmp>
   1379a:	2800      	cmp	r0, #0
   1379c:	f001 8179 	beq.w	14a92 <ull_conn_rx+0x1422>
	switch (rej_ext_ind->reject_opcode) {
   137a0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   137a4:	2b0f      	cmp	r3, #15
   137a6:	f000 8501 	beq.w	141ac <ull_conn_rx+0xb3c>
   137aa:	f200 84c5 	bhi.w	14138 <ull_conn_rx+0xac8>
   137ae:	2b03      	cmp	r3, #3
   137b0:	f47f af69 	bne.w	13686 <ull_conn_rx+0x16>
		if ((conn->llcp_ack != conn->llcp_req) &&
   137b4:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   137b8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   137bc:	4293      	cmp	r3, r2
   137be:	f43f af62 	beq.w	13686 <ull_conn_rx+0x16>
   137c2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   137c6:	2b03      	cmp	r3, #3
   137c8:	f47f af5d 	bne.w	13686 <ull_conn_rx+0x16>
	conn->llcp_enc.pause_rx = 0U;
   137cc:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   137d0:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   137d4:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
   137d8:	2000      	movs	r0, #0
	conn->llcp_enc.pause_rx = 0U;
   137da:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   137de:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   137e2:	230d      	movs	r3, #13
   137e4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   137e8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   137ec:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	if (err) {
   137f0:	e1d5      	b.n	13b9e <ull_conn_rx+0x52e>
		if (!conn->lll.role ||
   137f2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   137f6:	2b00      	cmp	r3, #0
   137f8:	f281 814b 	bge.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   137fc:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13800:	2000      	movs	r0, #0
   13802:	f7ff fb25 	bl	12e50 <pdu_len_cmp>
		if (!conn->lll.role ||
   13806:	2800      	cmp	r0, #0
   13808:	f001 8143 	beq.w	14a92 <ull_conn_rx+0x1422>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1380c:	f8b5 202d 	ldrh.w	r2, [r5, #45]	; 0x2d
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   13810:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   13812:	1ad3      	subs	r3, r2, r3
   13814:	041f      	lsls	r7, r3, #16
   13816:	d505      	bpl.n	13824 <ull_conn_rx+0x1b4>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13818:	2303      	movs	r3, #3
   1381a:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   1381c:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   1381e:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
   13822:	e0d9      	b.n	139d8 <ull_conn_rx+0x368>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13824:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13828:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1382c:	1a5b      	subs	r3, r3, r1
   1382e:	f003 0303 	and.w	r3, r3, #3
   13832:	2b02      	cmp	r3, #2
   13834:	d103      	bne.n	1383e <ull_conn_rx+0x1ce>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13836:	2303      	movs	r3, #3
   13838:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1383a:	232a      	movs	r3, #42	; 0x2a
   1383c:	e7ef      	b.n	1381e <ull_conn_rx+0x1ae>
	if (!conn_upd_curr) {
   1383e:	4b8b      	ldr	r3, [pc, #556]	; (13a6c <ull_conn_rx+0x3fc>)
   13840:	6819      	ldr	r1, [r3, #0]
   13842:	b901      	cbnz	r1, 13846 <ull_conn_rx+0x1d6>
		conn_upd_curr = conn;
   13844:	601c      	str	r4, [r3, #0]
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   13846:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1384a:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   1384e:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
   13852:	f240 43e2 	movw	r3, #1250	; 0x4e2
   13856:	434b      	muls	r3, r1
	conn->llcp_cu.win_offset_us =
   13858:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1385c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   13860:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   13864:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   13868:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1386c:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   13870:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   13874:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   13878:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1387c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   13880:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
	conn->llcp.conn_upd.instant = instant;
   13884:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   13888:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.timeout =
   1388c:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   13890:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
   13894:	f023 0307 	bic.w	r3, r3, #7
   13898:	f043 0304 	orr.w	r3, r3, #4
   1389c:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp_cu.ack--;
   138a0:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   138a4:	3b01      	subs	r3, #1
   138a6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	link->mem = conn->llcp_rx;
   138aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   138ae:	f8c8 3004 	str.w	r3, [r8, #4]
	(*rx)->hdr.link = link;
   138b2:	6833      	ldr	r3, [r6, #0]
   138b4:	f8c3 8000 	str.w	r8, [r3]
	conn->llcp_rx = *rx;
   138b8:	6833      	ldr	r3, [r6, #0]
   138ba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   138be:	2300      	movs	r3, #0
   138c0:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   138c2:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   138c6:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   138ca:	4293      	cmp	r3, r2
   138cc:	d007      	beq.n	138de <ull_conn_rx+0x26e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   138ce:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   138d2:	f003 0307 	and.w	r3, r3, #7
   138d6:	2b04      	cmp	r3, #4
   138d8:	d101      	bne.n	138de <ull_conn_rx+0x26e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   138da:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
   138de:	2000      	movs	r0, #0
   138e0:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		break;
   138e4:	e15b      	b.n	13b9e <ull_conn_rx+0x52e>
		if (!conn->lll.role ||
   138e6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   138ea:	2b00      	cmp	r3, #0
   138ec:	f281 80d1 	bge.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   138f0:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   138f4:	2001      	movs	r0, #1
   138f6:	f7ff faab 	bl	12e50 <pdu_len_cmp>
		if (!conn->lll.role ||
   138fa:	2800      	cmp	r0, #0
   138fc:	f001 80c9 	beq.w	14a92 <ull_conn_rx+0x1422>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   13900:	f8b5 6029 	ldrh.w	r6, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   13904:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   13906:	1af3      	subs	r3, r6, r3
   13908:	0418      	lsls	r0, r3, #16
   1390a:	d485      	bmi.n	13818 <ull_conn_rx+0x1a8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1390c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13910:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   13914:	1a9b      	subs	r3, r3, r2
   13916:	f003 0303 	and.w	r3, r3, #3
   1391a:	2b02      	cmp	r3, #2
   1391c:	d08b      	beq.n	13836 <ull_conn_rx+0x1c6>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   1391e:	2205      	movs	r2, #5
   13920:	f105 0124 	add.w	r1, r5, #36	; 0x24
   13924:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   13928:	f00b fe66 	bl	1f5f8 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   1392c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp.chan_map.instant = instant;
   13930:	f8a4 60f2 	strh.w	r6, [r4, #242]	; 0xf2
	conn->llcp.chan_map.initiate = 0U;
   13934:	f36f 0300 	bfc	r3, #0, #1
   13938:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
   1393c:	2302      	movs	r3, #2
   1393e:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   13942:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   13946:	3b02      	subs	r3, #2
   13948:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1394c:	e69b      	b.n	13686 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   1394e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13952:	2b00      	cmp	r3, #0
   13954:	f281 809d 	bge.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ, pdu_rx->len)) {
   13958:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1395c:	2003      	movs	r0, #3
   1395e:	f7ff fa77 	bl	12e50 <pdu_len_cmp>
		if (!conn->lll.role ||
   13962:	2800      	cmp	r0, #0
   13964:	f001 8095 	beq.w	14a92 <ull_conn_rx+0x1422>
		memcpy(&conn->llcp_enc.rand[0],
   13968:	2208      	movs	r2, #8
   1396a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1396e:	f204 1055 	addw	r0, r4, #341	; 0x155
   13972:	f00b fe41 	bl	1f5f8 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   13976:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1397a:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1397e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   13982:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   13986:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1398a:	2201      	movs	r2, #1
   1398c:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13990:	6832      	ldr	r2, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   13992:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13996:	2303      	movs	r3, #3
   13998:	7113      	strb	r3, [r2, #4]
		conn->llcp_type = LLCP_ENCRYPTION;
   1399a:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
   1399e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   139a2:	3b02      	subs	r3, #2
   139a4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   139a8:	2208      	movs	r2, #8
   139aa:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   139ae:	f104 00ee 	add.w	r0, r4, #238	; 0xee
   139b2:	f00b fe21 	bl	1f5f8 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   139b6:	2204      	movs	r2, #4
   139b8:	f105 0136 	add.w	r1, r5, #54	; 0x36
   139bc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   139c0:	f00b fe1a 	bl	1f5f8 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   139c4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   139c8:	f043 0301 	orr.w	r3, r3, #1
   139cc:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   139d0:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   139d4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
   139d8:	2000      	movs	r0, #0
		break;
   139da:	e0e0      	b.n	13b9e <ull_conn_rx+0x52e>
		if (conn->lll.role ||
   139dc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   139e0:	2b00      	cmp	r3, #0
   139e2:	f2c1 8056 	blt.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP, pdu_rx->len)) {
   139e6:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   139ea:	2004      	movs	r0, #4
   139ec:	f7ff fa30 	bl	12e50 <pdu_len_cmp>
		if (conn->lll.role ||
   139f0:	2800      	cmp	r0, #0
   139f2:	f001 804e 	beq.w	14a92 <ull_conn_rx+0x1422>
		memcpy(&conn->llcp.encryption.skd[8],
   139f6:	2208      	movs	r2, #8
   139f8:	f105 0124 	add.w	r1, r5, #36	; 0x24
   139fc:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   13a00:	f00b fdfa 	bl	1f5f8 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   13a04:	2204      	movs	r2, #4
   13a06:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   13a0a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   13a0e:	f00b fdf3 	bl	1f5f8 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   13a12:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   13a16:	f043 0301 	orr.w	r3, r3, #1
   13a1a:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13a1e:	6833      	ldr	r3, [r6, #0]
   13a20:	2203      	movs	r2, #3
   13a22:	711a      	strb	r2, [r3, #4]
   13a24:	e7d8      	b.n	139d8 <ull_conn_rx+0x368>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   13a26:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13a2a:	2b00      	cmp	r3, #0
   13a2c:	f2c1 8031 	blt.w	14a92 <ull_conn_rx+0x1422>
   13a30:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   13a34:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   13a38:	429a      	cmp	r2, r3
   13a3a:	f001 802a 	beq.w	14a92 <ull_conn_rx+0x1422>
   13a3e:	f894 60ea 	ldrb.w	r6, [r4, #234]	; 0xea
   13a42:	2e03      	cmp	r6, #3
   13a44:	f041 8025 	bne.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   13a48:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13a4c:	2005      	movs	r0, #5
   13a4e:	f7ff f9ff 	bl	12e50 <pdu_len_cmp>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   13a52:	2800      	cmp	r0, #0
   13a54:	f001 801d 	beq.w	14a92 <ull_conn_rx+0x1422>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13a58:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   13a5c:	f36f 0301 	bfc	r3, #0, #2
   13a60:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13a64:	712e      	strb	r6, [r5, #4]
	return 0;
   13a66:	e7b7      	b.n	139d8 <ull_conn_rx+0x368>
   13a68:	00022060 	.word	0x00022060
   13a6c:	20001380 	.word	0x20001380
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   13a70:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13a74:	2006      	movs	r0, #6
   13a76:	f7ff f9eb 	bl	12e50 <pdu_len_cmp>
   13a7a:	2800      	cmp	r0, #0
   13a7c:	f001 8009 	beq.w	14a92 <ull_conn_rx+0x1422>
		if (conn->lll.role) {
   13a80:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13a84:	2b00      	cmp	r3, #0
   13a86:	da25      	bge.n	13ad4 <ull_conn_rx+0x464>
			if ((conn->llcp_req != conn->llcp_ack) &&
   13a88:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13a8c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   13a90:	4293      	cmp	r3, r2
   13a92:	d004      	beq.n	13a9e <ull_conn_rx+0x42e>
   13a94:	f894 10ea 	ldrb.w	r1, [r4, #234]	; 0xea
   13a98:	2903      	cmp	r1, #3
   13a9a:	f040 87fa 	bne.w	14a92 <ull_conn_rx+0x1422>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13a9e:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   13aa2:	4293      	cmp	r3, r2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13aa4:	f36f 0101 	bfc	r1, #0, #2
   13aa8:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   13aac:	d105      	bne.n	13aba <ull_conn_rx+0x44a>
				conn->llcp_type = LLCP_ENCRYPTION;
   13aae:	2203      	movs	r2, #3
				conn->llcp_ack -= 2U;
   13ab0:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   13ab2:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   13ab6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		if (conn->llcp_enc.refresh) {
   13aba:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   13abe:	0759      	lsls	r1, r3, #29
   13ac0:	f57f af0d 	bpl.w	138de <ull_conn_rx+0x26e>
			conn->llcp_enc.refresh = 0U;
   13ac4:	f36f 0382 	bfc	r3, #2, #1
   13ac8:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   13acc:	6833      	ldr	r3, [r6, #0]
   13ace:	220b      	movs	r2, #11
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13ad0:	711a      	strb	r2, [r3, #4]
   13ad2:	e704      	b.n	138de <ull_conn_rx+0x26e>
			conn->llcp_enc.pause_rx = 0U;
   13ad4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   13ad8:	f023 0303 	bic.w	r3, r3, #3
   13adc:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
   13ae0:	e7eb      	b.n	13aba <ull_conn_rx+0x44a>
		if (!conn->lll.role ||
   13ae2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13ae6:	2b00      	cmp	r3, #0
   13ae8:	f280 87d3 	bge.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   13aec:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13af0:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   13af2:	f7ff f9ad 	bl	12e50 <pdu_len_cmp>
		if (conn->lll.role ||
   13af6:	2800      	cmp	r0, #0
   13af8:	f000 87cb 	beq.w	14a92 <ull_conn_rx+0x1422>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   13afc:	4652      	mov	r2, sl
   13afe:	1d29      	adds	r1, r5, #4
   13b00:	4620      	mov	r0, r4
}
   13b02:	b003      	add	sp, #12
   13b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   13b08:	f7ff bbdc 	b.w	132c4 <feature_rsp_send.isra.15>
		if (conn->lll.role ||
   13b0c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13b10:	2b00      	cmp	r3, #0
   13b12:	f2c0 87be 	blt.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   13b16:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13b1a:	200e      	movs	r0, #14
   13b1c:	e7e9      	b.n	13af2 <ull_conn_rx+0x482>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   13b1e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13b22:	2009      	movs	r0, #9
   13b24:	f7ff f994 	bl	12e50 <pdu_len_cmp>
   13b28:	2800      	cmp	r0, #0
   13b2a:	f000 87b2 	beq.w	14a92 <ull_conn_rx+0x1422>
	       (features[1] << 8) | (features[2] << 16);
   13b2e:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   13b32:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   13b36:	041b      	lsls	r3, r3, #16
   13b38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   13b3c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	       (features[1] << 8) | (features[2] << 16);
   13b40:	4313      	orrs	r3, r2
   13b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   13b46:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
   13b4a:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   13b4e:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13b52:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
   13b56:	4013      	ands	r3, r2
   13b58:	f3c3 0310 	ubfx	r3, r3, #0, #17
   13b5c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   13b60:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   13b64:	f043 0301 	orr.w	r3, r3, #1
   13b68:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   13b6c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   13b70:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	conn->procedure_expire = 0U;
   13b74:	e6b3      	b.n	138de <ull_conn_rx+0x26e>
		if (!conn->lll.role ||
   13b76:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13b7a:	2b00      	cmp	r3, #0
   13b7c:	f280 8789 	bge.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   13b80:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13b84:	200a      	movs	r0, #10
   13b86:	f7ff f963 	bl	12e50 <pdu_len_cmp>
		if (!conn->lll.role ||
   13b8a:	2800      	cmp	r0, #0
   13b8c:	f000 8781 	beq.w	14a92 <ull_conn_rx+0x1422>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13b90:	48c3      	ldr	r0, [pc, #780]	; (13ea0 <ull_conn_rx+0x830>)
   13b92:	f00d fe5f 	bl	21854 <mem_acquire>
		if (!tx) {
   13b96:	4601      	mov	r1, r0
   13b98:	b920      	cbnz	r0, 13ba4 <ull_conn_rx+0x534>
			return -ENOBUFS;
   13b9a:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13b9e:	b003      	add	sp, #12
   13ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	conn->llcp_enc.pause_rx = 1U;
   13ba4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   13ba8:	f023 0305 	bic.w	r3, r3, #5
   13bac:	f043 0305 	orr.w	r3, r3, #5
   13bb0:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   13bb4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   13bb8:	f36f 03c3 	bfc	r3, #3, #1
   13bbc:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13bc0:	790b      	ldrb	r3, [r1, #4]
   13bc2:	f043 0303 	orr.w	r3, r3, #3
   13bc6:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13bc8:	2301      	movs	r3, #1
   13bca:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   13bcc:	230b      	movs	r3, #11
   13bce:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, tx);
   13bd0:	4620      	mov	r0, r4
   13bd2:	f00e fa08 	bl	21fe6 <ctrl_tx_enqueue>
   13bd6:	e556      	b.n	13686 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   13bd8:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13bdc:	200b      	movs	r0, #11
   13bde:	f7ff f937 	bl	12e50 <pdu_len_cmp>
   13be2:	2800      	cmp	r0, #0
   13be4:	f000 8755 	beq.w	14a92 <ull_conn_rx+0x1422>
	} else if (!conn->lll.role) {
   13be8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   13bec:	2b00      	cmp	r3, #0
   13bee:	db10      	blt.n	13c12 <ull_conn_rx+0x5a2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13bf0:	48ab      	ldr	r0, [pc, #684]	; (13ea0 <ull_conn_rx+0x830>)
   13bf2:	f00d fe2f 	bl	21854 <mem_acquire>
		if (!tx) {
   13bf6:	4601      	mov	r1, r0
   13bf8:	2800      	cmp	r0, #0
   13bfa:	d0ce      	beq.n	13b9a <ull_conn_rx+0x52a>
	conn->llcp_enc.pause_rx = 1U;
   13bfc:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   13c00:	f043 0301 	orr.w	r3, r3, #1
   13c04:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   13c08:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   13c0c:	f023 0318 	bic.w	r3, r3, #24
   13c10:	e7d4      	b.n	13bbc <ull_conn_rx+0x54c>
		conn->lll.enc_tx = 0;
   13c12:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   13c16:	f36f 1304 	bfc	r3, #4, #1
   13c1a:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13c1e:	e532      	b.n	13686 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   13c20:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13c24:	200c      	movs	r0, #12
   13c26:	f7ff f913 	bl	12e50 <pdu_len_cmp>
   13c2a:	2800      	cmp	r0, #0
   13c2c:	f000 8731 	beq.w	14a92 <ull_conn_rx+0x1422>
	if (!conn->llcp_version.tx) {
   13c30:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
   13c34:	07da      	lsls	r2, r3, #31
   13c36:	d43e      	bmi.n	13cb6 <ull_conn_rx+0x646>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13c38:	4899      	ldr	r0, [pc, #612]	; (13ea0 <ull_conn_rx+0x830>)
   13c3a:	f00d fe0b 	bl	21854 <mem_acquire>
		if (!tx) {
   13c3e:	4601      	mov	r1, r0
   13c40:	2800      	cmp	r0, #0
   13c42:	d0aa      	beq.n	13b9a <ull_conn_rx+0x52a>
		conn->llcp_version.tx = 1U;
   13c44:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
   13c48:	f043 0301 	orr.w	r3, r3, #1
   13c4c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13c50:	7903      	ldrb	r3, [r0, #4]
   13c52:	f043 0303 	orr.w	r3, r3, #3
   13c56:	7103      	strb	r3, [r0, #4]
		pdu_tx->len =
   13c58:	2306      	movs	r3, #6
   13c5a:	7143      	strb	r3, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   13c5c:	230c      	movs	r3, #12
   13c5e:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   13c60:	230a      	movs	r3, #10
   13c62:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   13c64:	f06f 030e 	mvn.w	r3, #14
   13c68:	7243      	strb	r3, [r0, #9]
   13c6a:	2305      	movs	r3, #5
   13c6c:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
   13c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c72:	72c3      	strb	r3, [r0, #11]
   13c74:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   13c76:	4620      	mov	r0, r4
   13c78:	f00e f97b 	bl	21f72 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13c7c:	2303      	movs	r3, #3
   13c7e:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   13c80:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   13c84:	f884 3123 	strb.w	r3, [r4, #291]	; 0x123
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   13c88:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   13c8c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   13c90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13c94:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
		sys_le16_to_cpu(v->sub_version_number);
   13c98:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   13c9c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   13ca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   13ca4:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	conn->llcp_version.rx = 1U;
   13ca8:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
   13cac:	f043 0302 	orr.w	r3, r3, #2
   13cb0:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
	return 0;
   13cb4:	e690      	b.n	139d8 <ull_conn_rx+0x368>
	} else if (!conn->llcp_version.rx) {
   13cb6:	f013 0302 	ands.w	r3, r3, #2
   13cba:	f47f ace4 	bne.w	13686 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   13cbe:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
   13cc2:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		conn->procedure_expire = 0U;
   13cc6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   13cca:	e7d9      	b.n	13c80 <ull_conn_rx+0x610>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   13ccc:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13cd0:	200d      	movs	r0, #13
   13cd2:	f7ff f8bd 	bl	12e50 <pdu_len_cmp>
   13cd6:	2800      	cmp	r0, #0
   13cd8:	f000 86db 	beq.w	14a92 <ull_conn_rx+0x1422>
		conn->llcp_enc.pause_rx = 0U;
   13cdc:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   13ce0:	f023 0303 	bic.w	r3, r3, #3
   13ce4:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->llcp_ack = conn->llcp_req;
   13ce8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13cec:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0U;
   13cf0:	e5f5      	b.n	138de <ull_conn_rx+0x26e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   13cf2:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   13cf6:	200f      	movs	r0, #15
   13cf8:	f7ff f8aa 	bl	12e50 <pdu_len_cmp>
   13cfc:	2800      	cmp	r0, #0
   13cfe:	f000 86c8 	beq.w	14a92 <ull_conn_rx+0x1422>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   13d02:	4b68      	ldr	r3, [pc, #416]	; (13ea4 <ull_conn_rx+0x834>)
   13d04:	6818      	ldr	r0, [r3, #0]
   13d06:	b150      	cbz	r0, 13d1e <ull_conn_rx+0x6ae>
   13d08:	4284      	cmp	r4, r0
   13d0a:	d008      	beq.n	13d1e <ull_conn_rx+0x6ae>
			nack = reject_ext_ind_send(conn, *rx,
   13d0c:	2320      	movs	r3, #32
				nack = reject_ext_ind_send(conn, *rx,
   13d0e:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   13d10:	1d29      	adds	r1, r5, #4
   13d12:	4620      	mov	r0, r4
}
   13d14:	b003      	add	sp, #12
   13d16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   13d1a:	f7ff bb19 	b.w	13350 <reject_ext_ind_send.isra.9>
		if (!conn->lll.role) {
   13d1e:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   13d22:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   13d26:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   13d2a:	2900      	cmp	r1, #0
   13d2c:	f2c0 80bc 	blt.w	13ea8 <ull_conn_rx+0x838>
			if ((conn->llcp_conn_param.req !=
   13d30:	4293      	cmp	r3, r2
   13d32:	d009      	beq.n	13d48 <ull_conn_rx+0x6d8>
			    ((conn->llcp_conn_param.state ==
   13d34:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
   13d38:	f013 0307 	ands.w	r3, r3, #7
   13d3c:	d002      	beq.n	13d44 <ull_conn_rx+0x6d4>
			      LLCP_CPR_STATE_REQ) ||
   13d3e:	3b04      	subs	r3, #4
   13d40:	2b01      	cmp	r3, #1
   13d42:	d801      	bhi.n	13d48 <ull_conn_rx+0x6d8>
				nack = reject_ext_ind_send(conn, *rx,
   13d44:	2323      	movs	r3, #35	; 0x23
   13d46:	e7e2      	b.n	13d0e <ull_conn_rx+0x69e>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   13d48:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13d4c:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   13d50:	1a5b      	subs	r3, r3, r1
   13d52:	f003 0303 	and.w	r3, r3, #3
   13d56:	2b02      	cmp	r3, #2
   13d58:	d103      	bne.n	13d62 <ull_conn_rx+0x6f2>
				      0x03) == 0x02) &&
   13d5a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   13d5e:	2b03      	cmp	r3, #3
   13d60:	d105      	bne.n	13d6e <ull_conn_rx+0x6fe>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   13d62:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   13d66:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   13d6a:	4299      	cmp	r1, r3
   13d6c:	d001      	beq.n	13d72 <ull_conn_rx+0x702>
				nack = reject_ext_ind_send(conn, *rx,
   13d6e:	232a      	movs	r3, #42	; 0x2a
   13d70:	e7cd      	b.n	13d0e <ull_conn_rx+0x69e>
				u16_t interval_min =
   13d72:	f8b5 a024 	ldrh.w	sl, [r5, #36]	; 0x24
   13d76:	fa1f f38a 	uxth.w	r3, sl
				if ((interval_min < 6) ||
   13d7a:	2b05      	cmp	r3, #5
   13d7c:	d925      	bls.n	13dca <ull_conn_rx+0x75a>
				u16_t interval_max =
   13d7e:	f8b5 9026 	ldrh.w	r9, [r5, #38]	; 0x26
   13d82:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < 6) ||
   13d86:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   13d8a:	d81e      	bhi.n	13dca <ull_conn_rx+0x75a>
				    (interval_max > 3200) ||
   13d8c:	428b      	cmp	r3, r1
   13d8e:	d81c      	bhi.n	13dca <ull_conn_rx+0x75a>
				u16_t latency =
   13d90:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   13d92:	f8ad 3000 	strh.w	r3, [sp]
   13d96:	fa1f fc83 	uxth.w	ip, r3
				    (interval_min > interval_max) ||
   13d9a:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   13d9e:	d214      	bcs.n	13dca <ull_conn_rx+0x75a>
				u16_t timeout =
   13da0:	f8b5 b02a 	ldrh.w	fp, [r5, #42]	; 0x2a
   13da4:	fa1f f38b 	uxth.w	r3, fp
				    (latency > 499) ||
   13da8:	f1a3 0e0a 	sub.w	lr, r3, #10
   13dac:	fa1f fe8e 	uxth.w	lr, lr
   13db0:	f640 4876 	movw	r8, #3190	; 0xc76
   13db4:	45c6      	cmp	lr, r8
   13db6:	d808      	bhi.n	13dca <ull_conn_rx+0x75a>
				     ((latency + 1) * interval_max)) ||
   13db8:	fb0c 1e01 	mla	lr, ip, r1, r1
				    (timeout > 3200) ||
   13dbc:	ebbe 0f83 	cmp.w	lr, r3, lsl #2
   13dc0:	d203      	bcs.n	13dca <ull_conn_rx+0x75a>
					cpr->preferred_periodicity;
   13dc2:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
				     ((latency + 1) * interval_max)) ||
   13dc6:	4571      	cmp	r1, lr
   13dc8:	d201      	bcs.n	13dce <ull_conn_rx+0x75e>
				nack = reject_ext_ind_send(conn, *rx,
   13dca:	231e      	movs	r3, #30
   13dcc:	e79f      	b.n	13d0e <ull_conn_rx+0x69e>
				conn->llcp_conn_param.latency =	latency;
   13dce:	f8bd 8000 	ldrh.w	r8, [sp]
				conn->llcp_conn_param.interval_min =
   13dd2:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
   13dd6:	f8a4 9176 	strh.w	r9, [r4, #374]	; 0x176
				conn->llcp_conn_param.latency =	latency;
   13dda:	f8a4 8178 	strh.w	r8, [r4, #376]	; 0x178
				conn->llcp_conn_param.timeout =	timeout;
   13dde:	f8a4 b17a 	strh.w	fp, [r4, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
   13de2:	f884 e17c 	strb.w	lr, [r4, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   13de6:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   13dea:	f895 e02d 	ldrb.w	lr, [r5, #45]	; 0x2d
   13dee:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   13df2:	f8a4 e17e 	strh.w	lr, [r4, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
   13df6:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   13dfa:	f895 e02f 	ldrb.w	lr, [r5, #47]	; 0x2f
   13dfe:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   13e02:	f8a4 e180 	strh.w	lr, [r4, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
   13e06:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   13e0a:	f895 e031 	ldrb.w	lr, [r5, #49]	; 0x31
   13e0e:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   13e12:	f8a4 e182 	strh.w	lr, [r4, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
   13e16:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   13e1a:	f895 e033 	ldrb.w	lr, [r5, #51]	; 0x33
   13e1e:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   13e22:	f8a4 e184 	strh.w	lr, [r4, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
   13e26:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   13e2a:	f895 e035 	ldrb.w	lr, [r5, #53]	; 0x35
   13e2e:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   13e32:	f8a4 e186 	strh.w	lr, [r4, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
   13e36:	f895 e037 	ldrb.w	lr, [r5, #55]	; 0x37
   13e3a:	f895 8038 	ldrb.w	r8, [r5, #56]	; 0x38
   13e3e:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   13e42:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
   13e46:	f895 e039 	ldrb.w	lr, [r5, #57]	; 0x39
   13e4a:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
   13e4e:	ea4e 2505 	orr.w	r5, lr, r5, lsl #8
				conn->llcp_conn_param.offset5 =
   13e52:	f8a4 518a 	strh.w	r5, [r4, #394]	; 0x18a
				     lll->interval) ||
   13e56:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   13e58:	42a9      	cmp	r1, r5
   13e5a:	d112      	bne.n	13e82 <ull_conn_rx+0x812>
				     lll->interval) ||
   13e5c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   13e5e:	4561      	cmp	r1, ip
   13e60:	d10f      	bne.n	13e82 <ull_conn_rx+0x812>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13e62:	f240 41e2 	movw	r1, #1250	; 0x4e2
   13e66:	4369      	muls	r1, r5
   13e68:	f242 7510 	movw	r5, #10000	; 0x2710
   13e6c:	fb05 1303 	mla	r3, r5, r3, r1
   13e70:	3b01      	subs	r3, #1
   13e72:	fbb3 f3f1 	udiv	r3, r3, r1
				     lll->latency) ||
   13e76:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   13e7a:	b29b      	uxth	r3, r3
   13e7c:	4299      	cmp	r1, r3
   13e7e:	f000 80b2 	beq.w	13fe6 <ull_conn_rx+0x976>
					if (conn->llcp_enc.pause_tx) {
   13e82:	f017 0f02 	tst.w	r7, #2
   13e86:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   13e8a:	f000 809e 	beq.w	13fca <ull_conn_rx+0x95a>
						conn->llcp_conn_param.state =
   13e8e:	2102      	movs	r1, #2
   13e90:	f361 0302 	bfi	r3, r1, #0, #3
   13e94:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13e98:	6833      	ldr	r3, [r6, #0]
   13e9a:	2103      	movs	r1, #3
   13e9c:	7119      	strb	r1, [r3, #4]
   13e9e:	e099      	b.n	13fd4 <ull_conn_rx+0x964>
   13ea0:	20001400 	.word	0x20001400
   13ea4:	20001380 	.word	0x20001380
		} else if ((conn->llcp_conn_param.req ==
   13ea8:	4293      	cmp	r3, r2
   13eaa:	d004      	beq.n	13eb6 <ull_conn_rx+0x846>
			    conn->llcp_conn_param.ack) ||
   13eac:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   13eb0:	079f      	lsls	r7, r3, #30
   13eb2:	f040 80a1 	bne.w	13ff8 <ull_conn_rx+0x988>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   13eb6:	f8b5 a024 	ldrh.w	sl, [r5, #36]	; 0x24
   13eba:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < 6) ||
   13ebe:	2b05      	cmp	r3, #5
   13ec0:	d983      	bls.n	13dca <ull_conn_rx+0x75a>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   13ec2:	f8b5 9026 	ldrh.w	r9, [r5, #38]	; 0x26
   13ec6:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < 6) ||
   13eca:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   13ece:	f63f af7c 	bhi.w	13dca <ull_conn_rx+0x75a>
			    (interval_max > 3200) ||
   13ed2:	428b      	cmp	r3, r1
   13ed4:	f63f af79 	bhi.w	13dca <ull_conn_rx+0x75a>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   13ed8:	f8b5 8028 	ldrh.w	r8, [r5, #40]	; 0x28
   13edc:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
   13ee0:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   13ee4:	f4bf af71 	bcs.w	13dca <ull_conn_rx+0x75a>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   13ee8:	f8b5 e02a 	ldrh.w	lr, [r5, #42]	; 0x2a
   13eec:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   13ef0:	f1a3 0c0a 	sub.w	ip, r3, #10
   13ef4:	fa1f fc8c 	uxth.w	ip, ip
   13ef8:	f640 4b76 	movw	fp, #3190	; 0xc76
   13efc:	45dc      	cmp	ip, fp
   13efe:	f63f af64 	bhi.w	13dca <ull_conn_rx+0x75a>
			     ((latency + 1) * interval_max)) ||
   13f02:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   13f06:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   13f0a:	f4bf af5e 	bcs.w	13dca <ull_conn_rx+0x75a>
				cpr->preferred_periodicity;
   13f0e:	f895 c02c 	ldrb.w	ip, [r5, #44]	; 0x2c
			     ((latency + 1) * interval_max)) ||
   13f12:	4561      	cmp	r1, ip
   13f14:	f4ff af59 	bcc.w	13dca <ull_conn_rx+0x75a>
			conn->llcp_conn_param.interval_min = interval_min;
   13f18:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   13f1c:	f8a4 9176 	strh.w	r9, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   13f20:	f8a4 8178 	strh.w	r8, [r4, #376]	; 0x178
			conn->llcp_conn_param.timeout =	timeout;
   13f24:	f8a4 e17a 	strh.w	lr, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   13f28:	f884 c17c 	strb.w	ip, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   13f2c:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   13f30:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   13f34:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   13f38:	f8a4 c17e 	strh.w	ip, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   13f3c:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   13f40:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   13f44:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   13f48:	f8a4 c180 	strh.w	ip, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   13f4c:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   13f50:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   13f54:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   13f58:	f8a4 c182 	strh.w	ip, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   13f5c:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   13f60:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   13f64:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   13f68:	f8a4 c184 	strh.w	ip, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   13f6c:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   13f70:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   13f74:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   13f78:	f8a4 c186 	strh.w	ip, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   13f7c:	f895 c037 	ldrb.w	ip, [r5, #55]	; 0x37
   13f80:	f895 e038 	ldrb.w	lr, [r5, #56]	; 0x38
   13f84:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   13f88:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   13f8c:	f895 c039 	ldrb.w	ip, [r5, #57]	; 0x39
   13f90:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
   13f94:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
			conn->llcp_conn_param.offset5 =
   13f98:	f8a4 518a 	strh.w	r5, [r4, #394]	; 0x18a
			     lll->interval) ||
   13f9c:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   13f9e:	42a9      	cmp	r1, r5
   13fa0:	d111      	bne.n	13fc6 <ull_conn_rx+0x956>
			     lll->interval) ||
   13fa2:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   13fa4:	42bd      	cmp	r5, r7
   13fa6:	d10e      	bne.n	13fc6 <ull_conn_rx+0x956>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13fa8:	f240 45e2 	movw	r5, #1250	; 0x4e2
   13fac:	4369      	muls	r1, r5
   13fae:	f242 7510 	movw	r5, #10000	; 0x2710
   13fb2:	fb05 1303 	mla	r3, r5, r3, r1
   13fb6:	3b01      	subs	r3, #1
   13fb8:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   13fbc:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   13fc0:	b29b      	uxth	r3, r3
   13fc2:	4299      	cmp	r1, r3
   13fc4:	d00f      	beq.n	13fe6 <ull_conn_rx+0x976>
				conn->llcp_conn_param.state =
   13fc6:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   13fca:	2103      	movs	r1, #3
   13fcc:	f361 0302 	bfi	r3, r1, #0, #3
   13fd0:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack--;
   13fd4:	3a01      	subs	r2, #1
   13fd6:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
			if (!conn_upd_curr) {
   13fda:	2800      	cmp	r0, #0
   13fdc:	f47f acfc 	bne.w	139d8 <ull_conn_rx+0x368>
				conn_upd_curr = conn;
   13fe0:	4bbe      	ldr	r3, [pc, #760]	; (142dc <ull_conn_rx+0xc6c>)
   13fe2:	601c      	str	r4, [r3, #0]
   13fe4:	e5db      	b.n	13b9e <ull_conn_rx+0x52e>
				conn->llcp_conn_param.state =
   13fe6:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   13fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   13fee:	f043 0301 	orr.w	r3, r3, #1
   13ff2:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
   13ff6:	e74f      	b.n	13e98 <ull_conn_rx+0x828>
			LL_ASSERT(0);
   13ff8:	f241 6311 	movw	r3, #5649	; 0x1611
   13ffc:	4ab8      	ldr	r2, [pc, #736]	; (142e0 <ull_conn_rx+0xc70>)
   13ffe:	49b9      	ldr	r1, [pc, #740]	; (142e4 <ull_conn_rx+0xc74>)
   14000:	48b9      	ldr	r0, [pc, #740]	; (142e8 <ull_conn_rx+0xc78>)
   14002:	f009 fbd8 	bl	1d7b6 <printk>
   14006:	4040      	eors	r0, r0
   14008:	f380 8811 	msr	BASEPRI, r0
   1400c:	f04f 0003 	mov.w	r0, #3
   14010:	df02      	svc	2
   14012:	e4e1      	b.n	139d8 <ull_conn_rx+0x368>
		if (conn->lll.role ||
   14014:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   14018:	2b00      	cmp	r3, #0
   1401a:	f2c0 853a 	blt.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   1401e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   14022:	2010      	movs	r0, #16
   14024:	f7fe ff14 	bl	12e50 <pdu_len_cmp>
		if (conn->lll.role ||
   14028:	2800      	cmp	r0, #0
   1402a:	f000 8532 	beq.w	14a92 <ull_conn_rx+0x1422>
		if (!conn->lll.role &&
   1402e:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   14032:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   14036:	429a      	cmp	r2, r3
   14038:	f43f acf1 	beq.w	13a1e <ull_conn_rx+0x3ae>
		    (conn->llcp_conn_param.state ==
   1403c:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
   14040:	f003 0307 	and.w	r3, r3, #7
   14044:	2b04      	cmp	r3, #4
   14046:	f47f acea 	bne.w	13a1e <ull_conn_rx+0x3ae>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1404a:	f8b5 e024 	ldrh.w	lr, [r5, #36]	; 0x24
   1404e:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < 6) ||
   14052:	2a05      	cmp	r2, #5
   14054:	d920      	bls.n	14098 <ull_conn_rx+0xa28>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   14056:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
   1405a:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < 6) ||
   1405e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   14062:	d819      	bhi.n	14098 <ull_conn_rx+0xa28>
			    (interval_max > 3200) ||
   14064:	429a      	cmp	r2, r3
   14066:	d817      	bhi.n	14098 <ull_conn_rx+0xa28>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   14068:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
   1406a:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
   1406c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   14070:	d212      	bcs.n	14098 <ull_conn_rx+0xa28>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   14072:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
   14074:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   14078:	f1a8 010a 	sub.w	r1, r8, #10
   1407c:	b289      	uxth	r1, r1
   1407e:	f640 4976 	movw	r9, #3190	; 0xc76
   14082:	4549      	cmp	r1, r9
   14084:	d808      	bhi.n	14098 <ull_conn_rx+0xa28>
			     ((latency + 1) * interval_max)) ||
   14086:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   1408a:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
   1408e:	d203      	bcs.n	14098 <ull_conn_rx+0xa28>
				cpr->preferred_periodicity;
   14090:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
			     ((latency + 1) * interval_max)) ||
   14094:	4293      	cmp	r3, r2
   14096:	d202      	bcs.n	1409e <ull_conn_rx+0xa2e>
				nack = reject_ext_ind_send(conn, *rx,
   14098:	231e      	movs	r3, #30
   1409a:	2210      	movs	r2, #16
   1409c:	e638      	b.n	13d10 <ull_conn_rx+0x6a0>
			conn->procedure_expire = 0U;
   1409e:	2300      	movs	r3, #0
   140a0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
			conn->llcp_conn_param.interval_min = interval_min;
   140a4:	f8a4 e174 	strh.w	lr, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   140a8:	f8a4 c176 	strh.w	ip, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   140ac:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
			conn->llcp_conn_param.timeout =	timeout;
   140b0:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   140b4:	f884 217c 	strb.w	r2, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   140b8:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
   140bc:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   140c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   140c4:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   140c8:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   140cc:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   140d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset0 =
   140d4:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   140d8:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   140dc:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   140e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset1 =
   140e4:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   140e8:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
   140ec:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   140f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset2 =
   140f4:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   140f8:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
   140fc:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   14100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset3 =
   14104:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   14108:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   1410c:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   14110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset4 =
   14114:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   14118:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   1411c:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   14120:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset5 =
   14124:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   14128:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   1412c:	2201      	movs	r2, #1
   1412e:	f362 0302 	bfi	r3, r2, #0, #3
   14132:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14136:	e472      	b.n	13a1e <ull_conn_rx+0x3ae>
	switch (rej_ext_ind->reject_opcode) {
   14138:	2b14      	cmp	r3, #20
   1413a:	f000 8085 	beq.w	14248 <ull_conn_rx+0xbd8>
   1413e:	2b16      	cmp	r3, #22
   14140:	f47f aaa1 	bne.w	13686 <ull_conn_rx+0x16>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   14144:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   14148:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   1414c:	429a      	cmp	r2, r3
   1414e:	f43f aa9a 	beq.w	13686 <ull_conn_rx+0x16>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   14152:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   14156:	2a23      	cmp	r2, #35	; 0x23
   14158:	d012      	beq.n	14180 <ull_conn_rx+0xb10>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1415a:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1415e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   14162:	f3c3 0102 	ubfx	r1, r3, #0, #3
   14166:	f361 1306 	bfi	r3, r1, #4, #3
   1416a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1416e:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   14172:	f36f 0300 	bfc	r3, #0, #1
   14176:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   1417a:	2300      	movs	r3, #0
   1417c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   14180:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   14184:	0759      	lsls	r1, r3, #29
   14186:	f57f aa7e 	bpl.w	13686 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1418a:	230e      	movs	r3, #14
   1418c:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1418e:	f885 2020 	strb.w	r2, [r5, #32]
	p->tx = conn->lll.phy_tx;
   14192:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   14196:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1419a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	p->rx = conn->lll.phy_rx;
   1419e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   141a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   141a6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	if (err) {
   141aa:	e415      	b.n	139d8 <ull_conn_rx+0x368>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   141ac:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   141b0:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   141b4:	429a      	cmp	r2, r3
   141b6:	f43f aa66 	beq.w	13686 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   141ba:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   141be:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   141c2:	2a00      	cmp	r2, #0
   141c4:	f2c0 848c 	blt.w	14ae0 <ull_conn_rx+0x1470>
   141c8:	2b1a      	cmp	r3, #26
   141ca:	f040 848f 	bne.w	14aec <ull_conn_rx+0x147c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   141ce:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   141d2:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   141d6:	429a      	cmp	r2, r3
   141d8:	d00c      	beq.n	141f4 <ull_conn_rx+0xb84>
   141da:	f241 0346 	movw	r3, #4166	; 0x1046
   141de:	4a40      	ldr	r2, [pc, #256]	; (142e0 <ull_conn_rx+0xc70>)
   141e0:	4942      	ldr	r1, [pc, #264]	; (142ec <ull_conn_rx+0xc7c>)
   141e2:	4841      	ldr	r0, [pc, #260]	; (142e8 <ull_conn_rx+0xc78>)
   141e4:	f009 fae7 	bl	1d7b6 <printk>
   141e8:	4040      	eors	r0, r0
   141ea:	f380 8811 	msr	BASEPRI, r0
   141ee:	f04f 0003 	mov.w	r0, #3
   141f2:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   141f4:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   141f8:	2305      	movs	r3, #5
   141fa:	f363 0202 	bfi	r2, r3, #0, #3
		conn->llcp_cu.win_offset_us = 0U;
   141fe:	2300      	movs	r3, #0
   14200:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   14204:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   14208:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1420c:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   14210:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   14214:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   14218:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1421c:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14220:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
   14224:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14226:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1422a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1422e:	f362 0382 	bfi	r3, r2, #2, #1
   14232:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
   14236:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
		conn->llcp_cu.win_size = 1U;
   1423a:	f884 1114 	strb.w	r1, [r4, #276]	; 0x114
		conn->llcp_cu.ack--;
   1423e:	3b01      	subs	r3, #1
   14240:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	if (err) {
   14244:	f7ff ba1f 	b.w	13686 <ull_conn_rx+0x16>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   14248:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   1424c:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
   14250:	429a      	cmp	r2, r3
   14252:	f43f aa18 	beq.w	13686 <ull_conn_rx+0x16>
	conn->llcp_length.ack = conn->llcp_length.req;
   14256:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
	conn->procedure_expire = 0U;
   1425a:	2000      	movs	r0, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1425c:	2309      	movs	r3, #9
	conn->procedure_expire = 0U;
   1425e:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14262:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14266:	2315      	movs	r3, #21
   14268:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1426c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   14270:	84ab      	strh	r3, [r5, #36]	; 0x24
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   14272:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   14276:	852b      	strh	r3, [r5, #40]	; 0x28
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   14278:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
   1427c:	84eb      	strh	r3, [r5, #38]	; 0x26
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1427e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
   14282:	856b      	strh	r3, [r5, #42]	; 0x2a
	if (err) {
   14284:	e48b      	b.n	13b9e <ull_conn_rx+0x52e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   14286:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1428a:	2012      	movs	r0, #18
   1428c:	f7fe fde0 	bl	12e50 <pdu_len_cmp>
   14290:	2800      	cmp	r0, #0
   14292:	f000 83fe 	beq.w	14a92 <ull_conn_rx+0x1422>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14296:	4816      	ldr	r0, [pc, #88]	; (142f0 <ull_conn_rx+0xc80>)
   14298:	f00d fadc 	bl	21854 <mem_acquire>
	if (!tx) {
   1429c:	4601      	mov	r1, r0
   1429e:	2800      	cmp	r0, #0
   142a0:	f43f ac7b 	beq.w	13b9a <ull_conn_rx+0x52a>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   142a4:	7903      	ldrb	r3, [r0, #4]
   142a6:	f043 0303 	orr.w	r3, r3, #3
   142aa:	7103      	strb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   142ac:	2301      	movs	r3, #1
   142ae:	7143      	strb	r3, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   142b0:	2313      	movs	r3, #19
   142b2:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   142b4:	4620      	mov	r0, r4
   142b6:	f00d fe5c 	bl	21f72 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   142ba:	f7ff b9e4 	b.w	13686 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   142be:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   142c2:	2013      	movs	r0, #19
   142c4:	f7fe fdc4 	bl	12e50 <pdu_len_cmp>
   142c8:	2800      	cmp	r0, #0
   142ca:	f000 83e2 	beq.w	14a92 <ull_conn_rx+0x1422>
		conn->procedure_expire = 0U;
   142ce:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   142d0:	2303      	movs	r3, #3
		conn->procedure_expire = 0U;
   142d2:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   142d6:	712b      	strb	r3, [r5, #4]
		break;
   142d8:	e461      	b.n	13b9e <ull_conn_rx+0x52e>
   142da:	bf00      	nop
   142dc:	20001380 	.word	0x20001380
   142e0:	00029456 	.word	0x00029456
   142e4:	0002a0ca 	.word	0x0002a0ca
   142e8:	00027ff4 	.word	0x00027ff4
   142ec:	0002953d 	.word	0x0002953d
   142f0:	20001400 	.word	0x20001400
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   142f4:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   142f8:	2007      	movs	r0, #7
   142fa:	f7fe fda9 	bl	12e50 <pdu_len_cmp>
   142fe:	2800      	cmp	r0, #0
   14300:	f000 83c7 	beq.w	14a92 <ull_conn_rx+0x1422>
		} else if (conn->llcp_conn_param.ack !=
   14304:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   14308:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1430c:	429a      	cmp	r2, r3
   1430e:	d07b      	beq.n	14408 <ull_conn_rx+0xd98>
			conn->llcp_conn_param.disabled = 1U;
   14310:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   14314:	f043 0310 	orr.w	r3, r3, #16
   14318:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   1431c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   14320:	2b00      	cmp	r3, #0
   14322:	db3f      	blt.n	143a4 <ull_conn_rx+0xd34>
				LL_ASSERT(conn->llcp_cu.req ==
   14324:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   14328:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   1432c:	429a      	cmp	r2, r3
   1432e:	d00c      	beq.n	1434a <ull_conn_rx+0xcda>
   14330:	f241 6392 	movw	r3, #5778	; 0x1692
   14334:	4ac5      	ldr	r2, [pc, #788]	; (1464c <ull_conn_rx+0xfdc>)
   14336:	49c6      	ldr	r1, [pc, #792]	; (14650 <ull_conn_rx+0xfe0>)
   14338:	48c6      	ldr	r0, [pc, #792]	; (14654 <ull_conn_rx+0xfe4>)
   1433a:	f009 fa3c 	bl	1d7b6 <printk>
   1433e:	4040      	eors	r0, r0
   14340:	f380 8811 	msr	BASEPRI, r0
   14344:	f04f 0003 	mov.w	r0, #3
   14348:	df02      	svc	2
				conn->llcp_conn_param.state =
   1434a:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   1434e:	2305      	movs	r3, #5
   14350:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_cu.interval =
   14354:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   14358:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
				conn->llcp_cu.latency =
   1435c:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   14360:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
				conn->llcp_cu.timeout =
   14364:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   14368:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1436c:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
				conn->llcp_conn_param.state =
   14370:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
				conn->llcp_cu.win_size = 1U;
   14374:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14376:	f361 0301 	bfi	r3, r1, #0, #2
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1437a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1437e:	f362 0382 	bfi	r3, r2, #2, #1
   14382:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
				conn->llcp_cu.ack--;
   14386:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.win_size = 1U;
   1438a:	f884 1114 	strb.w	r1, [r4, #276]	; 0x114
				conn->llcp_cu.ack--;
   1438e:	3b01      	subs	r3, #1
   14390:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.win_offset_us = 0U;
   14394:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14396:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   14398:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1439c:	2203      	movs	r2, #3
   1439e:	711a      	strb	r2, [r3, #4]
				break;
   143a0:	f7ff bbfd 	b.w	13b9e <ull_conn_rx+0x52e>
			LL_ASSERT(conn_upd_curr == conn);
   143a4:	4fac      	ldr	r7, [pc, #688]	; (14658 <ull_conn_rx+0xfe8>)
   143a6:	683a      	ldr	r2, [r7, #0]
   143a8:	4294      	cmp	r4, r2
   143aa:	d00c      	beq.n	143c6 <ull_conn_rx+0xd56>
   143ac:	f241 63a9 	movw	r3, #5801	; 0x16a9
   143b0:	4aa6      	ldr	r2, [pc, #664]	; (1464c <ull_conn_rx+0xfdc>)
   143b2:	49aa      	ldr	r1, [pc, #680]	; (1465c <ull_conn_rx+0xfec>)
   143b4:	48a7      	ldr	r0, [pc, #668]	; (14654 <ull_conn_rx+0xfe4>)
   143b6:	f009 f9fe 	bl	1d7b6 <printk>
   143ba:	4040      	eors	r0, r0
   143bc:	f380 8811 	msr	BASEPRI, r0
   143c0:	f04f 0003 	mov.w	r0, #3
   143c4:	df02      	svc	2
			conn_upd_curr = NULL;
   143c6:	2300      	movs	r3, #0
			if (!conn->llcp_conn_param.cmd) {
   143c8:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
			conn_upd_curr = NULL;
   143cc:	603b      	str	r3, [r7, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   143ce:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   143d2:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
			if (!conn->llcp_conn_param.cmd) {
   143d6:	f010 0008 	ands.w	r0, r0, #8
   143da:	6833      	ldr	r3, [r6, #0]
   143dc:	d0de      	beq.n	1439c <ull_conn_rx+0xd2c>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   143de:	220a      	movs	r2, #10
   143e0:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   143e2:	231a      	movs	r3, #26
   143e4:	f885 3020 	strb.w	r3, [r5, #32]
			cu->latency = lll->latency;
   143e8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   143ea:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->latency = lll->latency;
   143ec:	84aa      	strh	r2, [r5, #36]	; 0x24
			cu->timeout = conn->supervision_reload *
   143ee:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
			cu->interval = lll->interval;
   143f2:	846b      	strh	r3, [r5, #34]	; 0x22
			cu->timeout = conn->supervision_reload *
   143f4:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
   143f6:	237d      	movs	r3, #125	; 0x7d
   143f8:	4353      	muls	r3, r2
   143fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   143fe:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   14402:	84eb      	strh	r3, [r5, #38]	; 0x26
   14404:	f7ff ba6b 	b.w	138de <ull_conn_rx+0x26e>
		} else if (conn->llcp_length.req != conn->llcp_length.ack) {
   14408:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   1440c:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
   14410:	429a      	cmp	r2, r3
   14412:	d003      	beq.n	1441c <ull_conn_rx+0xdac>
			conn->llcp_length.ack = conn->llcp_length.req;
   14414:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
   14418:	f7ff ba61 	b.w	138de <ull_conn_rx+0x26e>
		} else if (conn->llcp_phy.req !=
   1441c:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   14420:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   14424:	429a      	cmp	r2, r3
   14426:	d025      	beq.n	14474 <ull_conn_rx+0xe04>
			conn->llcp_phy.ack = conn->llcp_phy.req;
   14428:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
			lll->phy_tx_time = lll->phy_tx;
   1442c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
			conn->llcp_phy.pause_tx = 0U;
   14430:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   14434:	f3c3 0102 	ubfx	r1, r3, #0, #3
			conn->llcp_phy.pause_tx = 0U;
   14438:	f36f 0200 	bfc	r2, #0, #1
			lll->phy_tx_time = lll->phy_tx;
   1443c:	f361 1306 	bfi	r3, r1, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   14440:	f884 21ab 	strb.w	r2, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   14444:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
			if (conn->llcp_phy.cmd) {
   14448:	f012 0f04 	tst.w	r2, #4
   1444c:	6833      	ldr	r3, [r6, #0]
   1444e:	d00e      	beq.n	1446e <ull_conn_rx+0xdfe>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14450:	220e      	movs	r2, #14
   14452:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   14454:	2300      	movs	r3, #0
   14456:	f885 3020 	strb.w	r3, [r5, #32]
				p->tx = lll->phy_tx;
   1445a:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
				p->rx = lll->phy_rx;
   1445e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   14462:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14466:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1446a:	f7ff ba38 	b.w	138de <ull_conn_rx+0x26e>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1446e:	2203      	movs	r2, #3
   14470:	f7ff bb2e 	b.w	13ad0 <ull_conn_rx+0x460>
			switch (llctrl->unknown_rsp.type) {
   14474:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   14478:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1447a:	bf04      	itt	eq
   1447c:	2303      	moveq	r3, #3
   1447e:	712b      	strbeq	r3, [r5, #4]
				break;
   14480:	f7ff ba2d 	b.w	138de <ull_conn_rx+0x26e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   14484:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   14488:	2014      	movs	r0, #20
   1448a:	f7fe fce1 	bl	12e50 <pdu_len_cmp>
   1448e:	2800      	cmp	r0, #0
   14490:	f000 82ff 	beq.w	14a92 <ull_conn_rx+0x1422>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   14494:	f1b9 0f14 	cmp.w	r9, #20
   14498:	d176      	bne.n	14588 <ull_conn_rx+0xf18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1449a:	4871      	ldr	r0, [pc, #452]	; (14660 <ull_conn_rx+0xff0>)
   1449c:	f00d f9da 	bl	21854 <mem_acquire>
		if (!tx) {
   144a0:	4607      	mov	r7, r0
   144a2:	2800      	cmp	r0, #0
   144a4:	f43f ab79 	beq.w	13b9a <ull_conn_rx+0x52a>
	eff_rx_octets = conn->lll.max_rx_octets;
   144a8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   144ac:	9300      	str	r3, [sp, #0]
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   144ae:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   144b2:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   144b4:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
   144b8:	9901      	ldr	r1, [sp, #4]
	eff_tx_octets = conn->lll.max_tx_octets;
   144ba:	f8b4 905c 	ldrh.w	r9, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   144be:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   144c2:	f8b4 b060 	ldrh.w	fp, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   144c6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   144ca:	428a      	cmp	r2, r1
   144cc:	d15e      	bne.n	1458c <ull_conn_rx+0xf1c>
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   144ce:	2b14      	cmp	r3, #20
   144d0:	f040 80b4 	bne.w	1463c <ull_conn_rx+0xfcc>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   144d4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   144d6:	2b1a      	cmp	r3, #26
   144d8:	d974      	bls.n	145c4 <ull_conn_rx+0xf54>
			eff_tx_octets = MIN(max_rx_octets,
   144da:	f8b4 20d6 	ldrh.w	r2, [r4, #214]	; 0xd6
   144de:	429a      	cmp	r2, r3
   144e0:	bf28      	it	cs
   144e2:	461a      	movcs	r2, r3
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   144e4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
			eff_rx_octets = MIN(max_tx_octets,
   144e6:	2b1b      	cmp	r3, #27
   144e8:	9b00      	ldr	r3, [sp, #0]
   144ea:	bf38      	it	cc
   144ec:	469c      	movcc	ip, r3
		max_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   144ee:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   144f0:	bf28      	it	cs
   144f2:	f04f 0c1b 	movcs.w	ip, #27
		if (max_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
   144f6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   144fa:	d365      	bcc.n	145c8 <ull_conn_rx+0xf58>
			eff_tx_time = MIN(max_rx_time,
   144fc:	f8b4 10d8 	ldrh.w	r1, [r4, #216]	; 0xd8
   14500:	428b      	cmp	r3, r1
   14502:	bf28      	it	cs
   14504:	460b      	movcs	r3, r1
		if (max_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
   14506:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   14508:	9800      	ldr	r0, [sp, #0]
			eff_rx_time = MIN(max_tx_time,
   1450a:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1450e:	bf34      	ite	cc
   14510:	4651      	movcc	r1, sl
   14512:	f44f 71a4 	movcs.w	r1, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   14516:	4560      	cmp	r0, ip
   14518:	d05e      	beq.n	145d8 <ull_conn_rx+0xf68>
			conn->llcp_length.ack = (conn->llcp_length.req -
   1451a:	9801      	ldr	r0, [sp, #4]
			conn->llcp_length.rx_octets = eff_rx_octets;
   1451c:	f8a4 c19c 	strh.w	ip, [r4, #412]	; 0x19c
			conn->llcp_length.ack = (conn->llcp_length.req -
   14520:	3801      	subs	r0, #1
   14522:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
   14526:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
			conn->llcp_length.rx_time = eff_rx_time;
   1452a:	f8a4 11a0 	strh.w	r1, [r4, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
   1452e:	f8a4 31a2 	strh.w	r3, [r4, #418]	; 0x1a2
			if (tx) {
   14532:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
   14536:	2f00      	cmp	r7, #0
   14538:	d048      	beq.n	145cc <ull_conn_rx+0xf5c>
				conn->llcp_length.state =
   1453a:	2505      	movs	r5, #5
				conn->llcp_length.state =
   1453c:	f365 0002 	bfi	r0, r5, #0, #3
   14540:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
			link->mem = conn->llcp_rx;
   14544:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   14548:	f8c8 0004 	str.w	r0, [r8, #4]
			(*rx)->hdr.link = link;
   1454c:	6830      	ldr	r0, [r6, #0]
   1454e:	f8c0 8000 	str.w	r8, [r0]
			conn->llcp_rx = *rx;
   14552:	6830      	ldr	r0, [r6, #0]
   14554:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
			*rx = NULL;
   14558:	2000      	movs	r0, #0
   1455a:	6030      	str	r0, [r6, #0]
	if (tx) {
   1455c:	2f00      	cmp	r7, #0
   1455e:	f43f aa3b 	beq.w	139d8 <ull_conn_rx+0x368>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14562:	7938      	ldrb	r0, [r7, #4]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   14564:	8179      	strh	r1, [r7, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14566:	f040 0003 	orr.w	r0, r0, #3
   1456a:	7138      	strb	r0, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1456c:	2009      	movs	r0, #9
   1456e:	7178      	strb	r0, [r7, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14570:	2015      	movs	r0, #21
   14572:	71f8      	strb	r0, [r7, #7]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   14574:	f8a7 c008 	strh.w	ip, [r7, #8]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   14578:	81ba      	strh	r2, [r7, #12]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1457a:	81fb      	strh	r3, [r7, #14]
	ctrl_tx_sec_enqueue(conn, tx);
   1457c:	4639      	mov	r1, r7
   1457e:	4620      	mov	r0, r4
   14580:	f00d fcf7 	bl	21f72 <ctrl_tx_sec_enqueue>
   14584:	f7ff ba28 	b.w	139d8 <ull_conn_rx+0x368>
	struct node_tx *tx = NULL;
   14588:	2700      	movs	r7, #0
   1458a:	e78d      	b.n	144a8 <ull_conn_rx+0xe38>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1458c:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   14590:	f012 0f06 	tst.w	r2, #6
   14594:	d101      	bne.n	1459a <ull_conn_rx+0xf2a>
		(conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT)) &&
   14596:	2b14      	cmp	r3, #20
   14598:	d09c      	beq.n	144d4 <ull_conn_rx+0xe64>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   1459a:	f002 0207 	and.w	r2, r2, #7
   1459e:	2a02      	cmp	r2, #2
   145a0:	d14c      	bne.n	1463c <ull_conn_rx+0xfcc>
	      ((conn->llcp_length.state == LLCP_LENGTH_STATE_RSP_WAIT) &&
   145a2:	3b14      	subs	r3, #20
   145a4:	2b01      	cmp	r3, #1
   145a6:	d995      	bls.n	144d4 <ull_conn_rx+0xe64>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
   145a8:	f241 2316 	movw	r3, #4630	; 0x1216
   145ac:	4a27      	ldr	r2, [pc, #156]	; (1464c <ull_conn_rx+0xfdc>)
   145ae:	492d      	ldr	r1, [pc, #180]	; (14664 <ull_conn_rx+0xff4>)
   145b0:	4828      	ldr	r0, [pc, #160]	; (14654 <ull_conn_rx+0xfe4>)
   145b2:	f009 f900 	bl	1d7b6 <printk>
   145b6:	4040      	eors	r0, r0
   145b8:	f380 8811 	msr	BASEPRI, r0
   145bc:	f04f 0003 	mov.w	r0, #3
   145c0:	df02      	svc	2
   145c2:	e03d      	b.n	14640 <ull_conn_rx+0xfd0>
	eff_tx_octets = conn->lll.max_tx_octets;
   145c4:	464a      	mov	r2, r9
   145c6:	e78d      	b.n	144e4 <ull_conn_rx+0xe74>
	eff_tx_time = conn->lll.max_tx_time;
   145c8:	465b      	mov	r3, fp
   145ca:	e79c      	b.n	14506 <ull_conn_rx+0xe96>
				conn->lll.max_tx_octets = eff_tx_octets;
   145cc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   145d0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
				conn->llcp_length.state =
   145d4:	2504      	movs	r5, #4
   145d6:	e7b1      	b.n	1453c <ull_conn_rx+0xecc>
			conn->llcp_length.ack = conn->llcp_length.req;
   145d8:	9801      	ldr	r0, [sp, #4]
   145da:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
			conn->procedure_expire = 0U;
   145de:	f04f 0e00 	mov.w	lr, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   145e2:	4591      	cmp	r9, r2
			conn->procedure_expire = 0U;
   145e4:	f8a4 e0cc 	strh.w	lr, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   145e8:	d107      	bne.n	145fa <ull_conn_rx+0xf8a>
   145ea:	459b      	cmp	fp, r3
   145ec:	d105      	bne.n	145fa <ull_conn_rx+0xf8a>
			    eff_rx_time == conn->lll.max_rx_time &&
   145ee:	458a      	cmp	sl, r1
   145f0:	d103      	bne.n	145fa <ull_conn_rx+0xf8a>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   145f2:	6830      	ldr	r0, [r6, #0]
   145f4:	2503      	movs	r5, #3
   145f6:	7105      	strb	r5, [r0, #4]
				goto send_length_resp;
   145f8:	e7b0      	b.n	1455c <ull_conn_rx+0xeec>
			conn->lll.max_rx_time = eff_rx_time;
   145fa:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
			if (tx) {
   145fe:	b1c7      	cbz	r7, 14632 <ull_conn_rx+0xfc2>
					(conn->llcp_length.req - 1);
   14600:	9801      	ldr	r0, [sp, #4]
				conn->llcp_length.rx_octets = eff_rx_octets;
   14602:	f8a4 c19c 	strh.w	ip, [r4, #412]	; 0x19c
					(conn->llcp_length.req - 1);
   14606:	3801      	subs	r0, #1
				conn->llcp_length.ack =
   14608:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
				conn->llcp_length.state =
   1460c:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_octets = eff_tx_octets;
   14610:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.state =
   14614:	2603      	movs	r6, #3
   14616:	f366 0002 	bfi	r0, r6, #0, #3
				conn->llcp_length.rx_time = eff_rx_time;
   1461a:	f8a4 11a0 	strh.w	r1, [r4, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
   1461e:	f8a4 31a2 	strh.w	r3, [r4, #418]	; 0x1a2
				conn->llcp_length.state =
   14622:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   14626:	f8a5 c024 	strh.w	ip, [r5, #36]	; 0x24
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   1462a:	852a      	strh	r2, [r5, #40]	; 0x28
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1462c:	84e9      	strh	r1, [r5, #38]	; 0x26
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1462e:	856b      	strh	r3, [r5, #42]	; 0x2a
   14630:	e794      	b.n	1455c <ull_conn_rx+0xeec>
				conn->lll.max_tx_octets = eff_tx_octets;
   14632:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   14636:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
   1463a:	e7f4      	b.n	14626 <ull_conn_rx+0xfb6>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
   1463c:	2b15      	cmp	r3, #21
   1463e:	d1b3      	bne.n	145a8 <ull_conn_rx+0xf38>
	eff_tx_time = conn->lll.max_tx_time;
   14640:	465b      	mov	r3, fp
	eff_rx_time = conn->lll.max_rx_time;
   14642:	4651      	mov	r1, sl
	eff_tx_octets = conn->lll.max_tx_octets;
   14644:	464a      	mov	r2, r9
	eff_rx_octets = conn->lll.max_rx_octets;
   14646:	f8dd c000 	ldr.w	ip, [sp]
   1464a:	e787      	b.n	1455c <ull_conn_rx+0xeec>
   1464c:	00029456 	.word	0x00029456
   14650:	0002953d 	.word	0x0002953d
   14654:	00027ff4 	.word	0x00027ff4
   14658:	20001380 	.word	0x20001380
   1465c:	00029564 	.word	0x00029564
   14660:	20001400 	.word	0x20001400
   14664:	0002957a 	.word	0x0002957a
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   14668:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1466c:	2016      	movs	r0, #22
   1466e:	f7fe fbef 	bl	12e50 <pdu_len_cmp>
   14672:	2800      	cmp	r0, #0
   14674:	f000 820d 	beq.w	14a92 <ull_conn_rx+0x1422>
		if (!conn->lll.role) {
   14678:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1467c:	2b00      	cmp	r3, #0
   1467e:	db6d      	blt.n	1475c <ull_conn_rx+0x10ec>
			if ((conn->llcp_phy.ack !=
   14680:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
   14684:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
   14688:	428b      	cmp	r3, r1
   1468a:	d00a      	beq.n	146a2 <ull_conn_rx+0x1032>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1468c:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
   14690:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   14694:	3a01      	subs	r2, #1
   14696:	2a02      	cmp	r2, #2
   14698:	d803      	bhi.n	146a2 <ull_conn_rx+0x1032>
				nack = reject_ext_ind_send(conn, *rx,
   1469a:	2323      	movs	r3, #35	; 0x23
				nack = reject_ext_ind_send(conn, *rx,
   1469c:	2216      	movs	r2, #22
   1469e:	f7ff bb37 	b.w	13d10 <ull_conn_rx+0x6a0>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   146a2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   146a6:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   146aa:	1a12      	subs	r2, r2, r0
   146ac:	f002 0203 	and.w	r2, r2, #3
   146b0:	2a02      	cmp	r2, #2
   146b2:	d103      	bne.n	146bc <ull_conn_rx+0x104c>
				      0x03) == 0x02) &&
   146b4:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   146b8:	2a03      	cmp	r2, #3
   146ba:	d105      	bne.n	146c8 <ull_conn_rx+0x1058>
				     LLCP_ENCRYPTION)) ||
   146bc:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
   146c0:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   146c4:	4290      	cmp	r0, r2
   146c6:	d001      	beq.n	146cc <ull_conn_rx+0x105c>
				nack = reject_ext_ind_send(conn, *rx,
   146c8:	232a      	movs	r3, #42	; 0x2a
   146ca:	e7e7      	b.n	1469c <ull_conn_rx+0x102c>
				conn->llcp_phy.state =
   146cc:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   146d0:	428b      	cmp	r3, r1
				conn->llcp_phy.state =
   146d2:	f042 0203 	orr.w	r2, r2, #3
   146d6:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   146da:	d116      	bne.n	1470a <ull_conn_rx+0x109a>
					conn->llcp_phy.ack--;
   146dc:	3b01      	subs	r3, #1
   146de:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
					conn->llcp_phy.cmd = 0U;
   146e2:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
						conn->phy_pref_tx;
   146e6:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
					conn->llcp_phy.cmd = 0U;
   146ea:	f36f 0382 	bfc	r3, #2, #1
   146ee:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
					conn->llcp_phy.tx =
   146f2:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
						conn->phy_pref_tx;
   146f6:	f3c2 0102 	ubfx	r1, r2, #0, #3
					conn->llcp_phy.tx =
   146fa:	f361 0384 	bfi	r3, r1, #2, #3
						conn->phy_pref_rx;
   146fe:	f3c2 1202 	ubfx	r2, r2, #4, #3
					conn->llcp_phy.rx =
   14702:	f362 1347 	bfi	r3, r2, #5, #3
   14706:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
   1470a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   1470e:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   14712:	f3c3 0182 	ubfx	r1, r3, #2, #3
   14716:	400a      	ands	r2, r1
   14718:	f362 0384 	bfi	r3, r2, #2, #3
   1471c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				conn->llcp_phy.rx &= p->tx_phys;
   14720:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   14724:	b2db      	uxtb	r3, r3
   14726:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1472a:	f362 1347 	bfi	r3, r2, #5, #3
   1472e:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   14732:	b2db      	uxtb	r3, r3
   14734:	f013 0f1c 	tst.w	r3, #28
   14738:	d002      	beq.n	14740 <ull_conn_rx+0x10d0>
   1473a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1473e:	d105      	bne.n	1474c <ull_conn_rx+0x10dc>
					conn->llcp_phy.tx = 0;
   14740:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   14744:	f003 0303 	and.w	r3, r3, #3
   14748:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				conn->llcp_phy.pause_tx = 1U;
   1474c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   14750:	f043 0301 	orr.w	r3, r3, #1
   14754:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14758:	f7ff b961 	b.w	13a1e <ull_conn_rx+0x3ae>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1475c:	48db      	ldr	r0, [pc, #876]	; (14acc <ull_conn_rx+0x145c>)
   1475e:	f00d f879 	bl	21854 <mem_acquire>
	if (!tx) {
   14762:	4601      	mov	r1, r0
   14764:	2800      	cmp	r0, #0
   14766:	f43f aa18 	beq.w	13b9a <ull_conn_rx+0x52a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1476a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   1476e:	f894 c1a9 	ldrb.w	ip, [r4, #425]	; 0x1a9
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14772:	2202      	movs	r2, #2
   14774:	f362 0301 	bfi	r3, r2, #0, #2
   14778:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   1477c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   14780:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   14784:	f3c2 0002 	ubfx	r0, r2, #0, #3
   14788:	4563      	cmp	r3, ip
   1478a:	f3c2 1202 	ubfx	r2, r2, #4, #3
   1478e:	b2c7      	uxtb	r7, r0
   14790:	b2d6      	uxtb	r6, r2
   14792:	d114      	bne.n	147be <ull_conn_rx+0x114e>
		conn->llcp_phy.ack--;
   14794:	3b01      	subs	r3, #1
   14796:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		conn->llcp_phy.cmd = 0U;
   1479a:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   1479e:	f36f 0382 	bfc	r3, #2, #1
   147a2:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.tx =
   147a6:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   147aa:	f367 0384 	bfi	r3, r7, #2, #3
		conn->llcp_phy.rx =
   147ae:	f366 1347 	bfi	r3, r6, #5, #3
   147b2:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->procedure_expire =
   147b6:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   147ba:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	conn->llcp_phy.tx &= p->rx_phys;
   147be:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   147c2:	f895 6025 	ldrb.w	r6, [r5, #37]	; 0x25
   147c6:	f3c3 0782 	ubfx	r7, r3, #2, #3
   147ca:	403e      	ands	r6, r7
   147cc:	f366 0384 	bfi	r3, r6, #2, #3
   147d0:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	conn->llcp_phy.rx &= p->tx_phys;
   147d4:	f895 6024 	ldrb.w	r6, [r5, #36]	; 0x24
   147d8:	b2db      	uxtb	r3, r3
   147da:	ea06 1653 	and.w	r6, r6, r3, lsr #5
   147de:	f366 1347 	bfi	r3, r6, #5, #3
   147e2:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	conn->llcp_phy.pause_tx = 1U;
   147e6:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   147ea:	f043 0301 	orr.w	r3, r3, #1
   147ee:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   147f2:	790b      	ldrb	r3, [r1, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   147f4:	7208      	strb	r0, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   147f6:	f043 0303 	orr.w	r3, r3, #3
   147fa:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   147fc:	2603      	movs	r6, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   147fe:	2317      	movs	r3, #23
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   14800:	714e      	strb	r6, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   14802:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   14804:	724a      	strb	r2, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
   14806:	4620      	mov	r0, r4
   14808:	f00d fbed 	bl	21fe6 <ctrl_tx_enqueue>
   1480c:	f7ff b92a 	b.w	13a64 <ull_conn_rx+0x3f4>
		if (conn->lll.role ||
   14810:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   14814:	2b00      	cmp	r3, #0
   14816:	f2c0 813c 	blt.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP, pdu_rx->len)) {
   1481a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   1481e:	2017      	movs	r0, #23
   14820:	f7fe fb16 	bl	12e50 <pdu_len_cmp>
		if (conn->lll.role ||
   14824:	2800      	cmp	r0, #0
   14826:	f000 8134 	beq.w	14a92 <ull_conn_rx+0x1422>
		if (!conn->lll.role &&
   1482a:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   1482e:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   14832:	429a      	cmp	r2, r3
   14834:	f43e af27 	beq.w	13686 <ull_conn_rx+0x16>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   14838:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1483c:	f003 0203 	and.w	r2, r3, #3
   14840:	2a02      	cmp	r2, #2
   14842:	f47e af20 	bne.w	13686 <ull_conn_rx+0x16>
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   14846:	f043 0303 	orr.w	r3, r3, #3
   1484a:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.tx &= p->rx_phys;
   1484e:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   14852:	f3c3 0182 	ubfx	r1, r3, #2, #3
   14856:	400a      	ands	r2, r1
   14858:	f362 0384 	bfi	r3, r2, #2, #3
   1485c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.rx &= p->tx_phys;
   14860:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   14864:	b2db      	uxtb	r3, r3
   14866:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1486a:	f362 1347 	bfi	r3, r2, #5, #3
   1486e:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   14872:	b2db      	uxtb	r3, r3
   14874:	f013 0f1c 	tst.w	r3, #28
   14878:	d002      	beq.n	14880 <ull_conn_rx+0x1210>
   1487a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1487e:	d105      	bne.n	1488c <ull_conn_rx+0x121c>
				conn->llcp_phy.tx = 0;
   14880:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   14884:	f003 0303 	and.w	r3, r3, #3
   14888:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
   1488c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   14890:	f043 0301 	orr.w	r3, r3, #1
   14894:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   14898:	2300      	movs	r3, #0
   1489a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1489e:	f7fe bef2 	b.w	13686 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   148a2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   148a6:	2b00      	cmp	r3, #0
   148a8:	f280 80f3 	bge.w	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   148ac:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   148b0:	2018      	movs	r0, #24
   148b2:	f7fe facd 	bl	12e50 <pdu_len_cmp>
		if (!conn->lll.role ||
   148b6:	2800      	cmp	r0, #0
   148b8:	f000 80eb 	beq.w	14a92 <ull_conn_rx+0x1422>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   148bc:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   148c0:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   148c4:	ea41 0007 	orr.w	r0, r1, r7
   148c8:	f010 0007 	ands.w	r0, r0, #7
   148cc:	d135      	bne.n	1493a <ull_conn_rx+0x12ca>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   148ce:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
   148d2:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   148d6:	4293      	cmp	r3, r2
   148d8:	f43e aed5 	beq.w	13686 <ull_conn_rx+0x16>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   148dc:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   148e0:	f003 0303 	and.w	r3, r3, #3
   148e4:	2b02      	cmp	r3, #2
   148e6:	f47e aece 	bne.w	13686 <ull_conn_rx+0x16>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   148ea:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   148ee:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   148f2:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   148f6:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   148fa:	f3c2 0102 	ubfx	r1, r2, #0, #3
		conn->llcp_phy.pause_tx = 0U;
   148fe:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14902:	f361 1206 	bfi	r2, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   14906:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1490a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		if (!conn->llcp_phy.cmd) {
   1490e:	f013 0304 	ands.w	r3, r3, #4
   14912:	6832      	ldr	r2, [r6, #0]
   14914:	d103      	bne.n	1491e <ull_conn_rx+0x12ae>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14916:	2103      	movs	r1, #3
   14918:	7111      	strb	r1, [r2, #4]
		if (err) {
   1491a:	f7ff b85d 	b.w	139d8 <ull_conn_rx+0x368>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1491e:	230e      	movs	r3, #14
   14920:	7113      	strb	r3, [r2, #4]
		p->status = 0U;
   14922:	f885 0020 	strb.w	r0, [r5, #32]
		p->tx = conn->lll.phy_tx;
   14926:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
		p->rx = conn->lll.phy_rx;
   1492a:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1492e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14932:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
		if (err) {
   14936:	f7ff b932 	b.w	13b9e <ull_conn_rx+0x52e>
	instant = sys_le16_to_cpu(ind->instant);
   1493a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1493c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1493e:	1ad3      	subs	r3, r2, r3
   14940:	041b      	lsls	r3, r3, #16
   14942:	f53e af69 	bmi.w	13818 <ull_conn_rx+0x1a8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   14946:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1494a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   1494e:	1a1b      	subs	r3, r3, r0
   14950:	f003 0303 	and.w	r3, r3, #3
   14954:	2b02      	cmp	r3, #2
   14956:	f43e af6e 	beq.w	13836 <ull_conn_rx+0x1c6>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1495a:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   1495e:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   14962:	4283      	cmp	r3, r0
   14964:	d018      	beq.n	14998 <ull_conn_rx+0x1328>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   14966:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1496a:	f003 0303 	and.w	r3, r3, #3
   1496e:	2b02      	cmp	r3, #2
   14970:	d112      	bne.n	14998 <ull_conn_rx+0x1328>
		conn->llcp_phy.pause_tx = 0U;
   14972:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14976:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->procedure_expire = 0U;
   1497a:	2000      	movs	r0, #0
		conn->llcp_phy.pause_tx = 0U;
   1497c:	f36f 0300 	bfc	r3, #0, #1
		conn->procedure_expire = 0U;
   14980:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14984:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
		conn->llcp_phy.pause_tx = 0U;
   14988:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1498c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   14990:	f363 0041 	bfi	r0, r3, #1, #1
   14994:	f884 00ec 	strb.w	r0, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   14998:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   1499c:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   149a0:	f367 0384 	bfi	r3, r7, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   149a4:	f361 1347 	bfi	r3, r1, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0U;
   149a8:	f36f 0300 	bfc	r3, #0, #1
   149ac:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
   149b0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   149b4:	f8c8 3004 	str.w	r3, [r8, #4]
	(*rx)->hdr.link = link;
   149b8:	6833      	ldr	r3, [r6, #0]
   149ba:	f8c3 8000 	str.w	r8, [r3]
	conn->llcp_rx = *rx;
   149be:	6833      	ldr	r3, [r6, #0]
   149c0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   149c4:	2300      	movs	r3, #0
   149c6:	6033      	str	r3, [r6, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   149c8:	f7fc fd3e 	bl	11448 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   149cc:	4605      	mov	r5, r0
   149ce:	b960      	cbnz	r0, 149ea <ull_conn_rx+0x137a>
   149d0:	f241 23d9 	movw	r3, #4825	; 0x12d9
   149d4:	4a3e      	ldr	r2, [pc, #248]	; (14ad0 <ull_conn_rx+0x1460>)
   149d6:	493f      	ldr	r1, [pc, #252]	; (14ad4 <ull_conn_rx+0x1464>)
   149d8:	483f      	ldr	r0, [pc, #252]	; (14ad8 <ull_conn_rx+0x1468>)
   149da:	f008 feec 	bl	1d7b6 <printk>
   149de:	4040      	eors	r0, r0
   149e0:	f380 8811 	msr	BASEPRI, r0
   149e4:	f04f 0003 	mov.w	r0, #3
   149e8:	df02      	svc	2
	rx_dle->hdr.link->mem = conn->llcp_rx;
   149ea:	682b      	ldr	r3, [r5, #0]
   149ec:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   149f0:	605a      	str	r2, [r3, #4]
	conn->llcp_type = LLCP_PHY_UPD;
   149f2:	2306      	movs	r3, #6
   149f4:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   149f8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp_rx = rx_dle;
   149fc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
	conn->llcp_ack -= 2U;
   14a00:	3b02      	subs	r3, #2
   14a02:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   14a06:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   14a0a:	f013 0f1c 	tst.w	r3, #28
   14a0e:	f43e afe3 	beq.w	139d8 <ull_conn_rx+0x368>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   14a12:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   14a16:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14a1a:	f363 1206 	bfi	r2, r3, #4, #3
   14a1e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		if (err) {
   14a22:	f7fe bfd9 	b.w	139d8 <ull_conn_rx+0x368>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   14a26:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   14a2a:	2b00      	cmp	r3, #0
   14a2c:	db31      	blt.n	14a92 <ull_conn_rx+0x1422>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   14a2e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   14a32:	2019      	movs	r0, #25
   14a34:	f7fe fa0c 	bl	12e50 <pdu_len_cmp>
		if (conn->lll.role ||
   14a38:	b358      	cbz	r0, 14a92 <ull_conn_rx+0x1422>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   14a3a:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
					 conn->lll.phy_rx))) {
   14a3e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   14a42:	4313      	orrs	r3, r2
   14a44:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   14a48:	f003 0307 	and.w	r3, r3, #7
   14a4c:	4213      	tst	r3, r2
   14a4e:	f43e afc3 	beq.w	139d8 <ull_conn_rx+0x368>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   14a52:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   14a56:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   14a5a:	1a9b      	subs	r3, r3, r2
   14a5c:	f003 0303 	and.w	r3, r3, #3
   14a60:	2b02      	cmp	r3, #2
   14a62:	f43e afb9 	beq.w	139d8 <ull_conn_rx+0x368>
			    0x02) {
				break;
			}

			memcpy(&conn->llcp.chan_map.chm[0], data_chan_map,
   14a66:	2205      	movs	r2, #5
   14a68:	491c      	ldr	r1, [pc, #112]	; (14adc <ull_conn_rx+0x146c>)
   14a6a:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   14a6e:	f00a fdc3 	bl	1f5f8 <memcpy>
			       sizeof(conn->llcp.chan_map.chm));
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;
   14a72:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   14a76:	f043 0301 	orr.w	r3, r3, #1
   14a7a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec

			conn->llcp_type = LLCP_CHAN_MAP;
   14a7e:	2302      	movs	r3, #2
   14a80:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   14a84:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   14a88:	3b02      	subs	r3, #2
   14a8a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14a8e:	f7fe bfc6 	b.w	13a1e <ull_conn_rx+0x3ae>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14a92:	480e      	ldr	r0, [pc, #56]	; (14acc <ull_conn_rx+0x145c>)
   14a94:	f00c fede 	bl	21854 <mem_acquire>
	if (!tx) {
   14a98:	4601      	mov	r1, r0
   14a9a:	2800      	cmp	r0, #0
   14a9c:	f43f a87d 	beq.w	13b9a <ull_conn_rx+0x52a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14aa0:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   14aa2:	f880 9008 	strb.w	r9, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14aa6:	f043 0303 	orr.w	r3, r3, #3
   14aaa:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   14aac:	2302      	movs	r3, #2
   14aae:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   14ab0:	2307      	movs	r3, #7
   14ab2:	71c3      	strb	r3, [r0, #7]
	pdu->llctrl.unknown_rsp.type = type;
   14ab4:	f7ff b88c 	b.w	13bd0 <ull_conn_rx+0x560>
		if (conn->llcp_enc.pause_rx) {
   14ab8:	2a00      	cmp	r2, #0
   14aba:	f43e af8d 	beq.w	139d8 <ull_conn_rx+0x368>
   14abe:	f7fe be38 	b.w	13732 <ull_conn_rx+0xc2>
		if (conn->llcp_enc.pause_rx) {
   14ac2:	2a00      	cmp	r2, #0
   14ac4:	f43e afab 	beq.w	13a1e <ull_conn_rx+0x3ae>
   14ac8:	f7fe be33 	b.w	13732 <ull_conn_rx+0xc2>
   14acc:	20001400 	.word	0x20001400
   14ad0:	00029456 	.word	0x00029456
   14ad4:	000295b3 	.word	0x000295b3
   14ad8:	00027ff4 	.word	0x00027ff4
   14adc:	2000e4ec 	.word	0x2000e4ec
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   14ae0:	2b23      	cmp	r3, #35	; 0x23
   14ae2:	d003      	beq.n	14aec <ull_conn_rx+0x147c>
			conn->slave.ticks_to_offset =
   14ae4:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   14ae8:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   14aec:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   14af0:	f003 0307 	and.w	r3, r3, #7
   14af4:	2b04      	cmp	r3, #4
   14af6:	d118      	bne.n	14b2a <ull_conn_rx+0x14ba>
		LL_ASSERT(conn_upd_curr == conn);
   14af8:	4e19      	ldr	r6, [pc, #100]	; (14b60 <ull_conn_rx+0x14f0>)
   14afa:	6832      	ldr	r2, [r6, #0]
   14afc:	4294      	cmp	r4, r2
   14afe:	d00c      	beq.n	14b1a <ull_conn_rx+0x14aa>
   14b00:	f241 0361 	movw	r3, #4193	; 0x1061
   14b04:	4a17      	ldr	r2, [pc, #92]	; (14b64 <ull_conn_rx+0x14f4>)
   14b06:	4918      	ldr	r1, [pc, #96]	; (14b68 <ull_conn_rx+0x14f8>)
   14b08:	4818      	ldr	r0, [pc, #96]	; (14b6c <ull_conn_rx+0x14fc>)
   14b0a:	f008 fe54 	bl	1d7b6 <printk>
   14b0e:	4040      	eors	r0, r0
   14b10:	f380 8811 	msr	BASEPRI, r0
   14b14:	f04f 0003 	mov.w	r0, #3
   14b18:	df02      	svc	2
		conn_upd_curr = NULL;
   14b1a:	2300      	movs	r3, #0
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14b1c:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
		conn_upd_curr = NULL;
   14b20:	6033      	str	r3, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14b22:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
   14b26:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (!conn->llcp_conn_param.cmd) {
   14b2a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   14b2e:	071a      	lsls	r2, r3, #28
   14b30:	f57e ada9 	bpl.w	13686 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14b34:	230a      	movs	r3, #10
   14b36:	712b      	strb	r3, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   14b38:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   14b3c:	f885 3020 	strb.w	r3, [r5, #32]
	cu->latency = lll->latency;
   14b40:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   14b42:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->latency = lll->latency;
   14b44:	84aa      	strh	r2, [r5, #36]	; 0x24
	cu->timeout = conn->supervision_reload *
   14b46:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	cu->interval = lll->interval;
   14b4a:	846b      	strh	r3, [r5, #34]	; 0x22
	cu->timeout = conn->supervision_reload *
   14b4c:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
   14b4e:	237d      	movs	r3, #125	; 0x7d
   14b50:	4353      	muls	r3, r2
   14b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14b56:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   14b5a:	84eb      	strh	r3, [r5, #38]	; 0x26
	if (err) {
   14b5c:	f7fe bf3c 	b.w	139d8 <ull_conn_rx+0x368>
   14b60:	20001380 	.word	0x20001380
   14b64:	00029456 	.word	0x00029456
   14b68:	00029564 	.word	0x00029564
   14b6c:	00027ff4 	.word	0x00027ff4

00014b70 <ull_conn_done>:
{
   14b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   14b74:	6a05      	ldr	r5, [r0, #32]
	if (lll->handle == 0xFFFF) {
   14b76:	8baa      	ldrh	r2, [r5, #28]
   14b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b7c:	429a      	cmp	r2, r3
{
   14b7e:	b08b      	sub	sp, #44	; 0x2c
   14b80:	4680      	mov	r8, r0
	if (lll->handle == 0xFFFF) {
   14b82:	d00f      	beq.n	14ba4 <ull_conn_done+0x34>
	switch (done->extra.mic_state) {
   14b84:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   14b88:	68ec      	ldr	r4, [r5, #12]
	switch (done->extra.mic_state) {
   14b8a:	2b01      	cmp	r3, #1
   14b8c:	d032      	beq.n	14bf4 <ull_conn_done+0x84>
   14b8e:	b163      	cbz	r3, 14baa <ull_conn_done+0x3a>
   14b90:	2b02      	cmp	r3, #2
   14b92:	d035      	beq.n	14c00 <ull_conn_done+0x90>
	reason_peer = conn->llcp_terminate.reason_peer;
   14b94:	f894 612b 	ldrb.w	r6, [r4, #299]	; 0x12b
	if (reason_peer && (
   14b98:	2e00      	cmp	r6, #0
   14b9a:	d035      	beq.n	14c08 <ull_conn_done+0x98>
		conn_cleanup(conn, reason_peer);
   14b9c:	4631      	mov	r1, r6
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   14b9e:	4620      	mov	r0, r4
   14ba0:	f7fe fa74 	bl	1308c <conn_cleanup>
}
   14ba4:	b00b      	add	sp, #44	; 0x2c
   14ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   14baa:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   14bae:	0719      	lsls	r1, r3, #28
   14bb0:	d403      	bmi.n	14bba <ull_conn_done+0x4a>
   14bb2:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   14bb6:	07da      	lsls	r2, r3, #31
   14bb8:	d5ec      	bpl.n	14b94 <ull_conn_done+0x24>
					    (lll->latency + 6)) ?
   14bba:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   14bbc:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   14bc0:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   14bc2:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   14bc4:	bfc4      	itt	gt
   14bc6:	1ad3      	subgt	r3, r2, r3
   14bc8:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   14bca:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   14bce:	bfcc      	ite	gt
   14bd0:	b29b      	uxthgt	r3, r3
   14bd2:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   14bd4:	4299      	cmp	r1, r3
   14bd6:	d008      	beq.n	14bea <ull_conn_done+0x7a>
				conn->appto_reload = appto_reload_new;
   14bd8:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   14bdc:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   14be0:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   14be4:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   14be8:	e7d4      	b.n	14b94 <ull_conn_done+0x24>
			if (conn->apto_expire == 0U) {
   14bea:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   14bee:	2b00      	cmp	r3, #0
   14bf0:	d1d0      	bne.n	14b94 <ull_conn_done+0x24>
   14bf2:	e7f3      	b.n	14bdc <ull_conn_done+0x6c>
		conn->appto_expire = conn->apto_expire = 0U;
   14bf4:	2300      	movs	r3, #0
   14bf6:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   14bfa:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   14bfe:	e7c9      	b.n	14b94 <ull_conn_done+0x24>
		conn->llcp_terminate.reason_peer =
   14c00:	233d      	movs	r3, #61	; 0x3d
   14c02:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
		break;
   14c06:	e7c5      	b.n	14b94 <ull_conn_done+0x24>
	latency_event = lll->latency_event;
   14c08:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   14c0c:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
	elapsed_event = latency_event + 1;
   14c10:	f109 0701 	add.w	r7, r9, #1
   14c14:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
   14c16:	e9cd 6608 	strd	r6, r6, [sp, #32]
	if (done->extra.trx_cnt) {
   14c1a:	b183      	cbz	r3, 14c3e <ull_conn_done+0xce>
		} else if (lll->role) {
   14c1c:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   14c20:	2b00      	cmp	r3, #0
   14c22:	da09      	bge.n	14c38 <ull_conn_done+0xc8>
			ull_slave_done(done, &ticks_drift_plus,
   14c24:	aa08      	add	r2, sp, #32
   14c26:	a909      	add	r1, sp, #36	; 0x24
   14c28:	4640      	mov	r0, r8
   14c2a:	f7ed fbbd 	bl	23a8 <ull_slave_done>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   14c2e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   14c32:	b15b      	cbz	r3, 14c4c <ull_conn_done+0xdc>
				lll->latency_event = 0;
   14c34:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   14c36:	84ab      	strh	r3, [r5, #36]	; 0x24
		conn->connect_expire = 0U;
   14c38:	2300      	movs	r3, #0
   14c3a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   14c3e:	f898 302a 	ldrb.w	r3, [r8, #42]	; 0x2a
   14c42:	b183      	cbz	r3, 14c66 <ull_conn_done+0xf6>
		conn->supervision_expire = 0U;
   14c44:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   14c46:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   14c4a:	e014      	b.n	14c76 <ull_conn_done+0x106>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   14c4c:	4632      	mov	r2, r6
   14c4e:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   14c52:	f00c fe64 	bl	2191e <memq_peek>
   14c56:	2800      	cmp	r0, #0
   14c58:	d1ec      	bne.n	14c34 <ull_conn_done+0xc4>
			} else if (lll->slave.latency_enabled) {
   14c5a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   14c5e:	07db      	lsls	r3, r3, #31
   14c60:	d5ea      	bpl.n	14c38 <ull_conn_done+0xc8>
				lll->latency_event = lll->latency;
   14c62:	8c2b      	ldrh	r3, [r5, #32]
   14c64:	e7e7      	b.n	14c36 <ull_conn_done+0xc6>
	else if (conn->connect_expire) {
   14c66:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   14c6a:	b3c3      	cbz	r3, 14cde <ull_conn_done+0x16e>
		if (conn->connect_expire > elapsed_event) {
   14c6c:	42bb      	cmp	r3, r7
   14c6e:	d934      	bls.n	14cda <ull_conn_done+0x16a>
			conn->connect_expire -= elapsed_event;
   14c70:	1bdb      	subs	r3, r3, r7
   14c72:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   14c76:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   14c7a:	b1eb      	cbz	r3, 14cb8 <ull_conn_done+0x148>
		if (conn->supervision_expire > elapsed_event) {
   14c7c:	42bb      	cmp	r3, r7
   14c7e:	d935      	bls.n	14cec <ull_conn_done+0x17c>
			conn->supervision_expire -= elapsed_event;
   14c80:	1bdb      	subs	r3, r3, r7
   14c82:	b29b      	uxth	r3, r3
			lll->latency_event = 0;
   14c84:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   14c86:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   14c88:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0;
   14c8c:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   14c8e:	d92f      	bls.n	14cf0 <ull_conn_done+0x180>
			else if (lll->role) {
   14c90:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   14c94:	4293      	cmp	r3, r2
   14c96:	da0f      	bge.n	14cb8 <ull_conn_done+0x148>
				if (latency_event) {
   14c98:	f1b9 0f00 	cmp.w	r9, #0
   14c9c:	d128      	bne.n	14cf0 <ull_conn_done+0x180>
					force = conn->slave.force & 0x01;
   14c9e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1;
   14ca2:	085a      	lsrs	r2, r3, #1
					if (force) {
   14ca4:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   14ca8:	bf17      	itett	ne
   14caa:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1;
   14cae:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   14cb2:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   14cb6:	461e      	movne	r6, r3
	if (conn->procedure_expire != 0U) {
   14cb8:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   14cbc:	b123      	cbz	r3, 14cc8 <ull_conn_done+0x158>
		if (conn->procedure_expire > elapsed_event) {
   14cbe:	42bb      	cmp	r3, r7
   14cc0:	d918      	bls.n	14cf4 <ull_conn_done+0x184>
			conn->procedure_expire -= elapsed_event;
   14cc2:	1bdb      	subs	r3, r3, r7
   14cc4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   14cc8:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   14ccc:	b323      	cbz	r3, 14d18 <ull_conn_done+0x1a8>
		if (conn->apto_expire > elapsed_event) {
   14cce:	42bb      	cmp	r3, r7
   14cd0:	d912      	bls.n	14cf8 <ull_conn_done+0x188>
			conn->apto_expire -= elapsed_event;
   14cd2:	1bdb      	subs	r3, r3, r7
				conn->apto_expire = 1U;
   14cd4:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   14cd8:	e01e      	b.n	14d18 <ull_conn_done+0x1a8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   14cda:	213e      	movs	r1, #62	; 0x3e
   14cdc:	e75f      	b.n	14b9e <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   14cde:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   14ce2:	2b00      	cmp	r3, #0
   14ce4:	d1c7      	bne.n	14c76 <ull_conn_done+0x106>
			conn->supervision_expire = conn->supervision_reload;
   14ce6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   14cea:	e7ac      	b.n	14c46 <ull_conn_done+0xd6>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   14cec:	2108      	movs	r1, #8
   14cee:	e756      	b.n	14b9e <ull_conn_done+0x2e>
				force = 1U;
   14cf0:	2601      	movs	r6, #1
   14cf2:	e7e1      	b.n	14cb8 <ull_conn_done+0x148>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   14cf4:	2122      	movs	r1, #34	; 0x22
   14cf6:	e752      	b.n	14b9e <ull_conn_done+0x2e>
			rx = ll_pdu_rx_alloc();
   14cf8:	f7fc fba6 	bl	11448 <ll_pdu_rx_alloc>
			if (rx) {
   14cfc:	4601      	mov	r1, r0
   14cfe:	b320      	cbz	r0, 14d4a <ull_conn_done+0x1da>
				conn->apto_expire = 0U;
   14d00:	2300      	movs	r3, #0
   14d02:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->handle = lll->handle;
   14d06:	8bab      	ldrh	r3, [r5, #28]
   14d08:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   14d0a:	230c      	movs	r3, #12
   14d0c:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   14d0e:	6800      	ldr	r0, [r0, #0]
   14d10:	f7fc fb72 	bl	113f8 <ll_rx_put>
				ll_rx_sched();
   14d14:	f7fc fb7a 	bl	1140c <ll_rx_sched>
	if (conn->appto_expire != 0U) {
   14d18:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   14d1c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   14d20:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   14d24:	b122      	cbz	r2, 14d30 <ull_conn_done+0x1c0>
		if (conn->appto_expire > elapsed_event) {
   14d26:	42ba      	cmp	r2, r7
   14d28:	d911      	bls.n	14d4e <ull_conn_done+0x1de>
			conn->appto_expire -= elapsed_event;
   14d2a:	1bd7      	subs	r7, r2, r7
   14d2c:	f8a4 70d0 	strh.w	r7, [r4, #208]	; 0xd0
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   14d30:	1a5b      	subs	r3, r3, r1
   14d32:	f003 0303 	and.w	r3, r3, #3
   14d36:	2b02      	cmp	r3, #2
   14d38:	d118      	bne.n	14d6c <ull_conn_done+0x1fc>
	    ((conn->llcp_type == LLCP_CONN_UPD) ||
   14d3a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   14d3e:	3b01      	subs	r3, #1
   14d40:	2b01      	cmp	r3, #1
		lll->latency_event = 0;
   14d42:	bf9c      	itt	ls
   14d44:	2300      	movls	r3, #0
   14d46:	84ab      	strhls	r3, [r5, #36]	; 0x24
   14d48:	e010      	b.n	14d6c <ull_conn_done+0x1fc>
				conn->apto_expire = 1U;
   14d4a:	2301      	movs	r3, #1
   14d4c:	e7c2      	b.n	14cd4 <ull_conn_done+0x164>
			conn->appto_expire = 0U;
   14d4e:	2200      	movs	r2, #0
   14d50:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   14d54:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   14d58:	2a00      	cmp	r2, #0
   14d5a:	d1e9      	bne.n	14d30 <ull_conn_done+0x1c0>
   14d5c:	428b      	cmp	r3, r1
   14d5e:	d1e7      	bne.n	14d30 <ull_conn_done+0x1c0>
				conn->llcp_type = LLCP_PING;
   14d60:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   14d62:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   14d64:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   14d68:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((force) || (latency_event != lll->latency_event)) {
   14d6c:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   14d6e:	b90e      	cbnz	r6, 14d74 <ull_conn_done+0x204>
   14d70:	4589      	cmp	r9, r1
   14d72:	d031      	beq.n	14dd8 <ull_conn_done+0x268>
		lazy = lll->latency_event + 1;
   14d74:	3101      	adds	r1, #1
   14d76:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   14d78:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   14d7c:	ea53 0207 	orrs.w	r2, r3, r7
   14d80:	d103      	bne.n	14d8a <ull_conn_done+0x21a>
   14d82:	b911      	cbnz	r1, 14d8a <ull_conn_done+0x21a>
	    (lazy != 0U) || (force != 0U)) {
   14d84:	2e00      	cmp	r6, #0
   14d86:	f43f af0d 	beq.w	14ba4 <ull_conn_done+0x34>
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   14d8a:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14d8c:	4813      	ldr	r0, [pc, #76]	; (14ddc <ull_conn_done+0x26c>)
		struct ll_conn *conn = lll->hdr.parent;
   14d8e:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14d90:	9406      	str	r4, [sp, #24]
   14d92:	e9cd 6004 	strd	r6, r0, [sp, #16]
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   14d96:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14d98:	2000      	movs	r0, #0
   14d9a:	9103      	str	r1, [sp, #12]
   14d9c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   14da0:	9700      	str	r7, [sp, #0]
   14da2:	b2d2      	uxtb	r2, r2
   14da4:	2101      	movs	r1, #1
   14da6:	f7fa fbbb 	bl	f520 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14daa:	f030 0302 	bics.w	r3, r0, #2
   14dae:	f43f aef9 	beq.w	14ba4 <ull_conn_done+0x34>
   14db2:	f7fc fbd3 	bl	1155c <ull_disable_mark_get>
   14db6:	4284      	cmp	r4, r0
   14db8:	f43f aef4 	beq.w	14ba4 <ull_conn_done+0x34>
   14dbc:	f240 43cb 	movw	r3, #1227	; 0x4cb
   14dc0:	4a07      	ldr	r2, [pc, #28]	; (14de0 <ull_conn_done+0x270>)
   14dc2:	4908      	ldr	r1, [pc, #32]	; (14de4 <ull_conn_done+0x274>)
   14dc4:	4808      	ldr	r0, [pc, #32]	; (14de8 <ull_conn_done+0x278>)
   14dc6:	f008 fcf6 	bl	1d7b6 <printk>
   14dca:	4040      	eors	r0, r0
   14dcc:	f380 8811 	msr	BASEPRI, r0
   14dd0:	f04f 0003 	mov.w	r0, #3
   14dd4:	df02      	svc	2
   14dd6:	e6e5      	b.n	14ba4 <ull_conn_done+0x34>
	lazy = 0U;
   14dd8:	4631      	mov	r1, r6
   14dda:	e7cd      	b.n	14d78 <ull_conn_done+0x208>
   14ddc:	00012fed 	.word	0x00012fed
   14de0:	00029456 	.word	0x00029456
   14de4:	000294a9 	.word	0x000294a9
   14de8:	00027ff4 	.word	0x00027ff4

00014dec <ull_conn_tx_demux>:
{
   14dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   14df0:	4e20      	ldr	r6, [pc, #128]	; (14e74 <ull_conn_tx_demux+0x88>)
{
   14df2:	4604      	mov	r4, r0
   14df4:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
   14df6:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   14df8:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
   14dfa:	78f1      	ldrb	r1, [r6, #3]
   14dfc:	7832      	ldrb	r2, [r6, #0]
   14dfe:	4299      	cmp	r1, r3
   14e00:	d02d      	beq.n	14e5e <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
   14e02:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   14e06:	eb15 0803 	adds.w	r8, r5, r3
   14e0a:	d028      	beq.n	14e5e <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
   14e0c:	5ae8      	ldrh	r0, [r5, r3]
   14e0e:	f00d f8fd 	bl	2200c <ll_connected_get>
		if (conn) {
   14e12:	f8d8 1004 	ldr.w	r1, [r8, #4]
   14e16:	b320      	cbz	r0, 14e62 <ull_conn_tx_demux+0x76>
			tx->next = NULL;
   14e18:	2300      	movs	r3, #0
   14e1a:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   14e1c:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   14e20:	b943      	cbnz	r3, 14e34 <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
   14e22:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
   14e26:	f8c0 11bc 	str.w	r1, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
   14e2a:	b91b      	cbnz	r3, 14e34 <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
   14e2c:	f8c0 11b0 	str.w	r1, [r0, #432]	; 0x1b0
					conn->tx_data_last = NULL;
   14e30:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
			if (conn->tx_data_last) {
   14e34:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   14e38:	b103      	cbz	r3, 14e3c <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
   14e3a:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   14e3c:	f8c0 11c0 	str.w	r1, [r0, #448]	; 0x1c0
	u8_t _first = *first; /* Copy read-index */
   14e40:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   14e42:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
   14e44:	787a      	ldrb	r2, [r7, #1]
   14e46:	4299      	cmp	r1, r3
   14e48:	d005      	beq.n	14e56 <ull_conn_tx_demux+0x6a>
	_first += 1U;
   14e4a:	3301      	adds	r3, #1
   14e4c:	b2db      	uxtb	r3, r3
		_first = 0U;
   14e4e:	429a      	cmp	r2, r3
   14e50:	bf08      	it	eq
   14e52:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   14e54:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   14e56:	3c01      	subs	r4, #1
   14e58:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   14e5c:	d1cc      	bne.n	14df8 <ull_conn_tx_demux+0xc>
}
   14e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   14e62:	790b      	ldrb	r3, [r1, #4]
   14e64:	f360 0301 	bfi	r3, r0, #0, #2
   14e68:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   14e6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   14e6e:	f7fc fb01 	bl	11474 <ll_tx_ack_put>
   14e72:	e7e5      	b.n	14e40 <ull_conn_tx_demux+0x54>
   14e74:	2000e240 	.word	0x2000e240

00014e78 <ull_conn_tx_lll_enqueue>:
{
   14e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   14e7c:	4e56      	ldr	r6, [pc, #344]	; (14fd8 <ull_conn_tx_lll_enqueue+0x160>)
		LL_ASSERT(link);
   14e7e:	4f57      	ldr	r7, [pc, #348]	; (14fdc <ull_conn_tx_lll_enqueue+0x164>)
   14e80:	f8df 8160 	ldr.w	r8, [pc, #352]	; 14fe4 <ull_conn_tx_lll_enqueue+0x16c>
{
   14e84:	4604      	mov	r4, r0
   14e86:	460d      	mov	r5, r1
	while (conn->tx_head &&
   14e88:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   14e8c:	b1f3      	cbz	r3, 14ecc <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_phy.pause_tx &&
   14e8e:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   14e92:	07d1      	lsls	r1, r2, #31
   14e94:	f100 809a 	bmi.w	14fcc <ull_conn_tx_lll_enqueue+0x154>
		 !conn->llcp_enc.pause_tx &&
   14e98:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
   14e9c:	0792      	lsls	r2, r2, #30
   14e9e:	f100 8095 	bmi.w	14fcc <ull_conn_tx_lll_enqueue+0x154>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14ea2:	791a      	ldrb	r2, [r3, #4]
   14ea4:	f002 0203 	and.w	r2, r2, #3
   14ea8:	2a03      	cmp	r2, #3
   14eaa:	d10e      	bne.n	14eca <ull_conn_tx_lll_enqueue+0x52>
	    ((pdu_data_tx->llctrl.opcode ==
   14eac:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14eae:	2a03      	cmp	r2, #3
   14eb0:	d001      	beq.n	14eb6 <ull_conn_tx_lll_enqueue+0x3e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   14eb2:	2a0a      	cmp	r2, #10
   14eb4:	d109      	bne.n	14eca <ull_conn_tx_lll_enqueue+0x52>
		if (((conn->llcp_req != conn->llcp_ack) &&
   14eb6:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   14eba:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   14ebe:	428a      	cmp	r2, r1
   14ec0:	d041      	beq.n	14f46 <ull_conn_tx_lll_enqueue+0xce>
   14ec2:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   14ec6:	2a03      	cmp	r2, #3
   14ec8:	d15b      	bne.n	14f82 <ull_conn_tx_lll_enqueue+0x10a>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   14eca:	b90d      	cbnz	r5, 14ed0 <ull_conn_tx_lll_enqueue+0x58>
}
   14ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx = tx_ull_dequeue(conn, conn->tx_head);
   14ed0:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   14ed4:	4620      	mov	r0, r4
   14ed6:	f00d f819 	bl	21f0c <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14eda:	7903      	ldrb	r3, [r0, #4]
   14edc:	f003 0303 	and.w	r3, r3, #3
   14ee0:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   14ee2:	4681      	mov	r9, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14ee4:	d114      	bne.n	14f10 <ull_conn_tx_lll_enqueue+0x98>
	switch (pdu_tx->llctrl.opcode) {
   14ee6:	79c3      	ldrb	r3, [r0, #7]
   14ee8:	3b03      	subs	r3, #3
   14eea:	2b08      	cmp	r3, #8
   14eec:	d810      	bhi.n	14f10 <ull_conn_tx_lll_enqueue+0x98>
   14eee:	e8df f003 	tbb	[pc, r3]
   14ef2:	0909      	.short	0x0909
   14ef4:	0f0f0f0f 	.word	0x0f0f0f0f
   14ef8:	090f      	.short	0x090f
   14efa:	05          	.byte	0x05
   14efb:	00          	.byte	0x00
		if (!conn->lll.role) {
   14efc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   14f00:	2b00      	cmp	r3, #0
   14f02:	da05      	bge.n	14f10 <ull_conn_tx_lll_enqueue+0x98>
		conn->llcp_enc.pause_tx = 1U;
   14f04:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   14f08:	f043 0302 	orr.w	r3, r3, #2
   14f0c:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   14f10:	4630      	mov	r0, r6
   14f12:	f00c fc9f 	bl	21854 <mem_acquire>
		LL_ASSERT(link);
   14f16:	4682      	mov	sl, r0
   14f18:	b960      	cbnz	r0, 14f34 <ull_conn_tx_lll_enqueue+0xbc>
   14f1a:	f240 5345 	movw	r3, #1349	; 0x545
   14f1e:	463a      	mov	r2, r7
   14f20:	4641      	mov	r1, r8
   14f22:	482f      	ldr	r0, [pc, #188]	; (14fe0 <ull_conn_tx_lll_enqueue+0x168>)
   14f24:	f008 fc47 	bl	1d7b6 <printk>
   14f28:	4040      	eors	r0, r0
   14f2a:	f380 8811 	msr	BASEPRI, r0
   14f2e:	f04f 0003 	mov.w	r0, #3
   14f32:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   14f34:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   14f38:	4649      	mov	r1, r9
   14f3a:	4650      	mov	r0, sl
   14f3c:	3d01      	subs	r5, #1
   14f3e:	f00c fce7 	bl	21910 <memq_enqueue>
   14f42:	b2ed      	uxtb	r5, r5
   14f44:	e7a0      	b.n	14e88 <ull_conn_tx_lll_enqueue+0x10>
		    ((conn->llcp_req == conn->llcp_ack) &&
   14f46:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   14f4a:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   14f4e:	4288      	cmp	r0, r1
   14f50:	d117      	bne.n	14f82 <ull_conn_tx_lll_enqueue+0x10a>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   14f52:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   14f56:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   14f5a:	4288      	cmp	r0, r1
   14f5c:	d111      	bne.n	14f82 <ull_conn_tx_lll_enqueue+0x10a>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   14f5e:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   14f62:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   14f66:	4288      	cmp	r0, r1
   14f68:	d10b      	bne.n	14f82 <ull_conn_tx_lll_enqueue+0x10a>
		       conn->llcp_conn_param.req) ||
   14f6a:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   14f6e:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   14f72:	4288      	cmp	r0, r1
   14f74:	d105      	bne.n	14f82 <ull_conn_tx_lll_enqueue+0x10a>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   14f76:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   14f7a:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   14f7e:	4288      	cmp	r0, r1
   14f80:	d016      	beq.n	14fb0 <ull_conn_tx_lll_enqueue+0x138>
			if ((tx->next != NULL) &&
   14f82:	681a      	ldr	r2, [r3, #0]
   14f84:	2a00      	cmp	r2, #0
   14f86:	d0a1      	beq.n	14ecc <ull_conn_tx_lll_enqueue+0x54>
   14f88:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   14f8c:	428a      	cmp	r2, r1
   14f8e:	d19d      	bne.n	14ecc <ull_conn_tx_lll_enqueue+0x54>
				conn->tx_head = tx->next;
   14f90:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   14f94:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   14f98:	6811      	ldr	r1, [r2, #0]
   14f9a:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   14f9c:	6013      	str	r3, [r2, #0]
				if (!conn->tx_data_last) {
   14f9e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
				conn->tx_data = tx;
   14fa2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   14fa6:	2a00      	cmp	r2, #0
   14fa8:	d18f      	bne.n	14eca <ull_conn_tx_lll_enqueue+0x52>
					conn->tx_data_last = tx;
   14faa:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   14fae:	e78c      	b.n	14eca <ull_conn_tx_lll_enqueue+0x52>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14fb0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   14fb4:	2101      	movs	r1, #1
   14fb6:	f361 0301 	bfi	r3, r1, #0, #2
   14fba:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_ack -= 2U;
   14fbe:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   14fc0:	2303      	movs	r3, #3
   14fc2:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   14fc6:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
   14fca:	e77e      	b.n	14eca <ull_conn_tx_lll_enqueue+0x52>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   14fcc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   14fd0:	4293      	cmp	r3, r2
   14fd2:	f43f af7a 	beq.w	14eca <ull_conn_tx_lll_enqueue+0x52>
   14fd6:	e779      	b.n	14ecc <ull_conn_tx_lll_enqueue+0x54>
   14fd8:	20001484 	.word	0x20001484
   14fdc:	00029456 	.word	0x00029456
   14fe0:	00027ff4 	.word	0x00027ff4
   14fe4:	0002952b 	.word	0x0002952b

00014fe8 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   14fe8:	4901      	ldr	r1, [pc, #4]	; (14ff0 <ull_conn_link_tx_release+0x8>)
   14fea:	f00c bc4c 	b.w	21886 <mem_release>
   14fee:	bf00      	nop
   14ff0:	20001484 	.word	0x20001484

00014ff4 <ull_conn_ack_last_idx_get>:
}
   14ff4:	4b01      	ldr	r3, [pc, #4]	; (14ffc <ull_conn_ack_last_idx_get+0x8>)
   14ff6:	78d8      	ldrb	r0, [r3, #3]
   14ff8:	4770      	bx	lr
   14ffa:	bf00      	nop
   14ffc:	2000e1fc 	.word	0x2000e1fc

00015000 <ull_conn_ack_peek>:
{
   15000:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   15002:	4b0a      	ldr	r3, [pc, #40]	; (1502c <ull_conn_ack_peek+0x2c>)
   15004:	789c      	ldrb	r4, [r3, #2]
   15006:	78dd      	ldrb	r5, [r3, #3]
	if (first == last) {
   15008:	42ac      	cmp	r4, r5
{
   1500a:	4606      	mov	r6, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1500c:	7818      	ldrb	r0, [r3, #0]
   1500e:	d00b      	beq.n	15028 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   15010:	3304      	adds	r3, #4
   15012:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   15016:	1918      	adds	r0, r3, r4
   15018:	d005      	beq.n	15026 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1501a:	7035      	strb	r5, [r6, #0]
	*handle = lll_tx->handle;
   1501c:	5b1b      	ldrh	r3, [r3, r4]
   1501e:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   15020:	6843      	ldr	r3, [r0, #4]
   15022:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   15024:	6818      	ldr	r0, [r3, #0]
}
   15026:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   15028:	2000      	movs	r0, #0
   1502a:	e7fc      	b.n	15026 <ull_conn_ack_peek+0x26>
   1502c:	2000e1fc 	.word	0x2000e1fc

00015030 <ull_conn_ack_by_last_peek>:
{
   15030:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   15032:	4b09      	ldr	r3, [pc, #36]	; (15058 <ull_conn_ack_by_last_peek+0x28>)
   15034:	789c      	ldrb	r4, [r3, #2]
   15036:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   15038:	4284      	cmp	r4, r0
   1503a:	d00a      	beq.n	15052 <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   1503c:	3304      	adds	r3, #4
   1503e:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   15042:	1918      	adds	r0, r3, r4
   15044:	d004      	beq.n	15050 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   15046:	5b1b      	ldrh	r3, [r3, r4]
   15048:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1504a:	6843      	ldr	r3, [r0, #4]
   1504c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1504e:	6818      	ldr	r0, [r3, #0]
}
   15050:	bd30      	pop	{r4, r5, pc}
		return NULL;
   15052:	2000      	movs	r0, #0
   15054:	e7fc      	b.n	15050 <ull_conn_ack_by_last_peek+0x20>
   15056:	bf00      	nop
   15058:	2000e1fc 	.word	0x2000e1fc

0001505c <ull_conn_ack_dequeue>:
{
   1505c:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   1505e:	4a09      	ldr	r2, [pc, #36]	; (15084 <ull_conn_ack_dequeue+0x28>)
	u8_t _first = *first; /* Copy read-index */
   15060:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   15062:	78d0      	ldrb	r0, [r2, #3]
   15064:	7811      	ldrb	r1, [r2, #0]
   15066:	7854      	ldrb	r4, [r2, #1]
   15068:	4298      	cmp	r0, r3
   1506a:	d009      	beq.n	15080 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   1506c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   15070:	3301      	adds	r3, #1
   15072:	b2db      	uxtb	r3, r3
		_first = 0U;
   15074:	429c      	cmp	r4, r3
   15076:	bf08      	it	eq
   15078:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1507a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1507c:	7093      	strb	r3, [r2, #2]
}
   1507e:	bd10      	pop	{r4, pc}
		return NULL;
   15080:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   15082:	e7fc      	b.n	1507e <ull_conn_ack_dequeue+0x22>
   15084:	2000e1fc 	.word	0x2000e1fc

00015088 <ull_conn_lll_ack_enqueue>:
{
   15088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1508a:	4a12      	ldr	r2, [pc, #72]	; (150d4 <ull_conn_lll_ack_enqueue+0x4c>)
   1508c:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1508e:	7857      	ldrb	r7, [r2, #1]
   15090:	7895      	ldrb	r5, [r2, #2]
   15092:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   15094:	1c63      	adds	r3, r4, #1
   15096:	b2db      	uxtb	r3, r3
		last = 0U;
   15098:	429f      	cmp	r7, r3
   1509a:	bf08      	it	eq
   1509c:	2300      	moveq	r3, #0
	if (last == first) {
   1509e:	429d      	cmp	r5, r3
   150a0:	d004      	beq.n	150ac <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   150a2:	1d15      	adds	r5, r2, #4
   150a4:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   150a8:	192e      	adds	r6, r5, r4
   150aa:	d10f      	bne.n	150cc <ull_conn_lll_ack_enqueue+0x44>
   150ac:	f240 5383 	movw	r3, #1411	; 0x583
   150b0:	4a09      	ldr	r2, [pc, #36]	; (150d8 <ull_conn_lll_ack_enqueue+0x50>)
   150b2:	490a      	ldr	r1, [pc, #40]	; (150dc <ull_conn_lll_ack_enqueue+0x54>)
   150b4:	480a      	ldr	r0, [pc, #40]	; (150e0 <ull_conn_lll_ack_enqueue+0x58>)
   150b6:	f008 fb7e 	bl	1d7b6 <printk>
   150ba:	4040      	eors	r0, r0
   150bc:	f380 8811 	msr	BASEPRI, r0
   150c0:	f04f 0003 	mov.w	r0, #3
   150c4:	df02      	svc	2
	lll_tx->handle = handle;
   150c6:	2300      	movs	r3, #0
   150c8:	801b      	strh	r3, [r3, #0]
   150ca:	deff      	udf	#255	; 0xff
   150cc:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   150ce:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   150d0:	6071      	str	r1, [r6, #4]
}
   150d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   150d4:	2000e1fc 	.word	0x2000e1fc
   150d8:	00029456 	.word	0x00029456
   150dc:	000294a2 	.word	0x000294a2
   150e0:	00027ff4 	.word	0x00027ff4

000150e4 <ull_conn_tx_ack>:
{
   150e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	LL_ASSERT(pdu_tx->len);
   150e8:	7953      	ldrb	r3, [r2, #5]
{
   150ea:	4606      	mov	r6, r0
   150ec:	460f      	mov	r7, r1
   150ee:	4615      	mov	r5, r2
	LL_ASSERT(pdu_tx->len);
   150f0:	b963      	cbnz	r3, 1510c <ull_conn_tx_ack+0x28>
   150f2:	f240 5392 	movw	r3, #1426	; 0x592
   150f6:	4aa2      	ldr	r2, [pc, #648]	; (15380 <ull_conn_tx_ack+0x29c>)
   150f8:	49a2      	ldr	r1, [pc, #648]	; (15384 <ull_conn_tx_ack+0x2a0>)
   150fa:	48a3      	ldr	r0, [pc, #652]	; (15388 <ull_conn_tx_ack+0x2a4>)
   150fc:	f008 fb5b 	bl	1d7b6 <printk>
   15100:	4040      	eors	r0, r0
   15102:	f380 8811 	msr	BASEPRI, r0
   15106:	f04f 0003 	mov.w	r0, #3
   1510a:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1510c:	792b      	ldrb	r3, [r5, #4]
   1510e:	f003 0203 	and.w	r2, r3, #3
   15112:	2a03      	cmp	r2, #3
   15114:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15118:	f040 8126 	bne.w	15368 <ull_conn_tx_ack+0x284>
		if (handle != 0xFFFF) {
   1511c:	4296      	cmp	r6, r2
   1511e:	f000 810b 	beq.w	15338 <ull_conn_tx_ack+0x254>
			conn = ll_conn_get(handle);
   15122:	4630      	mov	r0, r6
   15124:	f7fe f94a 	bl	133bc <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   15128:	79eb      	ldrb	r3, [r5, #7]
   1512a:	3b02      	subs	r3, #2
			conn = ll_conn_get(handle);
   1512c:	4604      	mov	r4, r0
	switch (pdu_tx->llctrl.opcode) {
   1512e:	2b16      	cmp	r3, #22
   15130:	d81e      	bhi.n	15170 <ull_conn_tx_ack+0x8c>
   15132:	e8df f013 	tbh	[pc, r3, lsl #1]
   15136:	0017      	.short	0x0017
   15138:	00850037 	.word	0x00850037
   1513c:	001d001d 	.word	0x001d001d
   15140:	001d001d 	.word	0x001d001d
   15144:	0053001d 	.word	0x0053001d
   15148:	001d005a 	.word	0x001d005a
   1514c:	001d008f 	.word	0x001d008f
   15150:	001d001d 	.word	0x001d001d
   15154:	001d008c 	.word	0x001d008c
   15158:	0099001d 	.word	0x0099001d
   1515c:	00d300a1 	.word	0x00d300a1
   15160:	00fa00da 	.word	0x00fa00da
		u8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   15164:	7a29      	ldrb	r1, [r5, #8]
   15166:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   15168:	bf08      	it	eq
   1516a:	2116      	moveq	r1, #22
   1516c:	f7fd ff8e 	bl	1308c <conn_cleanup>
		if (link->next == (void *)tx) {
   15170:	683b      	ldr	r3, [r7, #0]
   15172:	42ab      	cmp	r3, r5
   15174:	f040 80e2 	bne.w	1533c <ull_conn_tx_ack+0x258>
			LL_ASSERT(link->next);
   15178:	b965      	cbnz	r5, 15194 <ull_conn_tx_ack+0xb0>
   1517a:	f240 539e 	movw	r3, #1438	; 0x59e
   1517e:	4a80      	ldr	r2, [pc, #512]	; (15380 <ull_conn_tx_ack+0x29c>)
   15180:	4982      	ldr	r1, [pc, #520]	; (1538c <ull_conn_tx_ack+0x2a8>)
   15182:	4881      	ldr	r0, [pc, #516]	; (15388 <ull_conn_tx_ack+0x2a4>)
   15184:	f008 fb17 	bl	1d7b6 <printk>
   15188:	4040      	eors	r0, r0
   1518a:	f380 8811 	msr	BASEPRI, r0
   1518e:	f04f 0003 	mov.w	r0, #3
   15192:	df02      	svc	2
			mem_release(tx, &mem_conn_tx_ctrl.free);
   15194:	497e      	ldr	r1, [pc, #504]	; (15390 <ull_conn_tx_ack+0x2ac>)
   15196:	4628      	mov	r0, r5
   15198:	f00c fb75 	bl	21886 <mem_release>
}
   1519c:	4620      	mov	r0, r4
   1519e:	b002      	add	sp, #8
   151a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&conn->llcp.encryption.skd[0],
   151a4:	2208      	movs	r2, #8
   151a6:	f105 0112 	add.w	r1, r5, #18
   151aa:	30ee      	adds	r0, #238	; 0xee
   151ac:	f00a fa24 	bl	1f5f8 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   151b0:	2204      	movs	r2, #4
   151b2:	f105 011a 	add.w	r1, r5, #26
   151b6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   151ba:	f00a fa1d 	bl	1f5f8 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   151be:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   151c2:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
   151c6:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   151ca:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   151ce:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_enc.ack = conn->llcp_enc.req;
   151d2:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   151d6:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
		break;
   151da:	e7c9      	b.n	15170 <ull_conn_tx_ack+0x8c>
		conn->llcp_enc.pause_tx = 1U;
   151dc:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   151e0:	f023 0306 	bic.w	r3, r3, #6
   151e4:	f043 0306 	orr.w	r3, r3, #6
   151e8:	e7ed      	b.n	151c6 <ull_conn_tx_ack+0xe2>
		if (!conn->lll.role) {
   151ea:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   151ee:	2b00      	cmp	r3, #0
   151f0:	db26      	blt.n	15240 <ull_conn_tx_ack+0x15c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   151f2:	792b      	ldrb	r3, [r5, #4]
   151f4:	f043 0303 	orr.w	r3, r3, #3
   151f8:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   151fa:	2317      	movs	r3, #23
   151fc:	716b      	strb	r3, [r5, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   151fe:	2208      	movs	r2, #8
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15200:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   15202:	f200 1155 	addw	r1, r0, #341	; 0x155
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15206:	71eb      	strb	r3, [r5, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   15208:	18a8      	adds	r0, r5, r2
   1520a:	f00a f9f5 	bl	1f5f8 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1520e:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
   15212:	742b      	strb	r3, [r5, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   15214:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   15218:	746b      	strb	r3, [r5, #17]
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   1521a:	4b5e      	ldr	r3, [pc, #376]	; (15394 <ull_conn_tx_ack+0x2b0>)
   1521c:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   1521e:	6843      	ldr	r3, [r0, #4]
   15220:	f8d3 8004 	ldr.w	r8, [r3, #4]
   15224:	f105 0112 	add.w	r1, r5, #18
   15228:	f1b8 0f00 	cmp.w	r8, #0
   1522c:	d002      	beq.n	15234 <ull_conn_tx_ack+0x150>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1522e:	2300      	movs	r3, #0
   15230:	220c      	movs	r2, #12
   15232:	47c0      	blx	r8
	ctrl_tx_enqueue(conn, *tx);
   15234:	4629      	mov	r1, r5
   15236:	4620      	mov	r0, r4
   15238:	f00c fed5 	bl	21fe6 <ctrl_tx_enqueue>
	*tx = NULL;
   1523c:	2500      	movs	r5, #0
   1523e:	e797      	b.n	15170 <ull_conn_tx_ack+0x8c>
			conn->llcp_enc.pause_tx = 1U;
   15240:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   15244:	f043 0302 	orr.w	r3, r3, #2
   15248:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
   1524c:	e790      	b.n	15170 <ull_conn_tx_ack+0x8c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1524e:	7a2b      	ldrb	r3, [r5, #8]
   15250:	2b03      	cmp	r3, #3
   15252:	d18d      	bne.n	15170 <ull_conn_tx_ack+0x8c>
		conn->llcp_enc.pause_rx = 0U;
   15254:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   15258:	f023 0303 	bic.w	r3, r3, #3
   1525c:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = 0U;
   15260:	2300      	movs	r3, #0
   15262:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   15266:	e783      	b.n	15170 <ull_conn_tx_ack+0x8c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   15268:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   1526c:	2202      	movs	r2, #2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1526e:	f362 0302 	bfi	r3, r2, #0, #3
   15272:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				break;
   15276:	e77b      	b.n	15170 <ull_conn_tx_ack+0x8c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   15278:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   1527c:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   15280:	428b      	cmp	r3, r1
   15282:	f43f af75 	beq.w	15170 <ull_conn_tx_ack+0x8c>
			switch (conn->llcp_length.state) {
   15286:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   1528a:	f003 0007 	and.w	r0, r3, #7
   1528e:	2807      	cmp	r0, #7
   15290:	f43f af6e 	beq.w	15170 <ull_conn_tx_ack+0x8c>
   15294:	2201      	movs	r2, #1
   15296:	4082      	lsls	r2, r0
   15298:	f012 0f68 	tst.w	r2, #104	; 0x68
   1529c:	f43f af68 	beq.w	15170 <ull_conn_tx_ack+0x8c>
				conn->lll.max_tx_octets =
   152a0:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   152a4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				if (conn->llcp_length.state ==
   152a8:	2805      	cmp	r0, #5
				conn->lll.max_tx_time =
   152aa:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
   152ae:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				if (conn->llcp_length.state ==
   152b2:	d101      	bne.n	152b8 <ull_conn_tx_ack+0x1d4>
					conn->llcp_length.state =
   152b4:	2204      	movs	r2, #4
   152b6:	e7da      	b.n	1526e <ull_conn_tx_ack+0x18a>
				if (!conn->llcp_length.cache.tx_octets) {
   152b8:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   152bc:	b922      	cbnz	r2, 152c8 <ull_conn_tx_ack+0x1e4>
					conn->llcp_length.ack =
   152be:	f884 1199 	strb.w	r1, [r4, #409]	; 0x199
					conn->procedure_expire = 0U;
   152c2:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
					break;
   152c6:	e753      	b.n	15170 <ull_conn_tx_ack+0x8c>
				conn->llcp_length.tx_octets =
   152c8:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
   152cc:	f8b4 11a6 	ldrh.w	r1, [r4, #422]	; 0x1a6
   152d0:	f8a4 11a2 	strh.w	r1, [r4, #418]	; 0x1a2
				conn->llcp_length.cache.tx_octets = 0;
   152d4:	2200      	movs	r2, #0
   152d6:	f8a4 21a4 	strh.w	r2, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   152da:	e7c8      	b.n	1526e <ull_conn_tx_ack+0x18a>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   152dc:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   152e0:	2202      	movs	r2, #2
   152e2:	f362 0301 	bfi	r3, r2, #0, #2
   152e6:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   152ea:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   152ee:	2b00      	cmp	r3, #0
   152f0:	da14      	bge.n	1531c <ull_conn_tx_ack+0x238>
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   152f2:	4a29      	ldr	r2, [pc, #164]	; (15398 <ull_conn_tx_ack+0x2b4>)
   152f4:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
   152f8:	e9cd 2300 	strd	r2, r3, [sp]
			phys = conn->llcp_phy.tx | lll->phy_tx;
   152fc:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   15300:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   15304:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   15308:	f003 0307 	and.w	r3, r3, #7
   1530c:	a902      	add	r1, sp, #8
   1530e:	440b      	add	r3, r1
   15310:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   15314:	f363 1206 	bfi	r2, r3, #4, #3
   15318:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1531c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   15320:	f36f 0300 	bfc	r3, #0, #1
   15324:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   15328:	e722      	b.n	15170 <ull_conn_tx_ack+0x8c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1532a:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   1532e:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
   15332:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15336:	e7ed      	b.n	15314 <ull_conn_tx_ack+0x230>
	struct ll_conn *conn = NULL;
   15338:	2400      	movs	r4, #0
   1533a:	e719      	b.n	15170 <ull_conn_tx_ack+0x8c>
		} else if (!tx) {
   1533c:	2d00      	cmp	r5, #0
   1533e:	f43f af2d 	beq.w	1519c <ull_conn_tx_ack+0xb8>
			LL_ASSERT(!link->next);
   15342:	b163      	cbz	r3, 1535e <ull_conn_tx_ack+0x27a>
   15344:	f240 53a5 	movw	r3, #1445	; 0x5a5
   15348:	4a0d      	ldr	r2, [pc, #52]	; (15380 <ull_conn_tx_ack+0x29c>)
   1534a:	4914      	ldr	r1, [pc, #80]	; (1539c <ull_conn_tx_ack+0x2b8>)
   1534c:	480e      	ldr	r0, [pc, #56]	; (15388 <ull_conn_tx_ack+0x2a4>)
   1534e:	f008 fa32 	bl	1d7b6 <printk>
   15352:	4040      	eors	r0, r0
   15354:	f380 8811 	msr	BASEPRI, r0
   15358:	f04f 0003 	mov.w	r0, #3
   1535c:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1535e:	4629      	mov	r1, r5
   15360:	4630      	mov	r0, r6
   15362:	f7fc f887 	bl	11474 <ll_tx_ack_put>
	return conn;
   15366:	e719      	b.n	1519c <ull_conn_tx_ack+0xb8>
	} else if (handle != 0xFFFF) {
   15368:	4296      	cmp	r6, r2
   1536a:	d004      	beq.n	15376 <ull_conn_tx_ack+0x292>
		conn = ll_conn_get(handle);
   1536c:	4630      	mov	r0, r6
   1536e:	f7fe f825 	bl	133bc <ll_conn_get>
   15372:	4604      	mov	r4, r0
   15374:	e7f3      	b.n	1535e <ull_conn_tx_ack+0x27a>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   15376:	f36f 0301 	bfc	r3, #0, #2
   1537a:	712b      	strb	r3, [r5, #4]
	struct ll_conn *conn = NULL;
   1537c:	2400      	movs	r4, #0
   1537e:	e7ee      	b.n	1535e <ull_conn_tx_ack+0x27a>
   15380:	00029456 	.word	0x00029456
   15384:	000295ba 	.word	0x000295ba
   15388:	00027ff4 	.word	0x00027ff4
   1538c:	000295c7 	.word	0x000295c7
   15390:	20001400 	.word	0x20001400
   15394:	20001384 	.word	0x20001384
   15398:	01020101 	.word	0x01020101
   1539c:	000295c6 	.word	0x000295c6

000153a0 <lll_clock_wait>:

void lll_clock_wait(void)
{
	static bool done;

	if (done) {
   153a0:	4b13      	ldr	r3, [pc, #76]	; (153f0 <lll_clock_wait+0x50>)
   153a2:	781a      	ldrb	r2, [r3, #0]
{
   153a4:	b510      	push	{r4, lr}
	if (done) {
   153a6:	b9fa      	cbnz	r2, 153e8 <lll_clock_wait+0x48>
		return;
	}
	done = true;
   153a8:	2201      	movs	r2, #1
   153aa:	701a      	strb	r2, [r3, #0]
   153ac:	4811      	ldr	r0, [pc, #68]	; (153f4 <lll_clock_wait+0x54>)
   153ae:	f006 fbd3 	bl	1bb58 <z_impl_device_get_binding>

	struct device *clock =
			device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);

	LL_ASSERT(clock);
   153b2:	4604      	mov	r4, r0
   153b4:	b958      	cbnz	r0, 153ce <lll_clock_wait+0x2e>
   153b6:	231e      	movs	r3, #30
   153b8:	4a0f      	ldr	r2, [pc, #60]	; (153f8 <lll_clock_wait+0x58>)
   153ba:	4910      	ldr	r1, [pc, #64]	; (153fc <lll_clock_wait+0x5c>)
   153bc:	4810      	ldr	r0, [pc, #64]	; (15400 <lll_clock_wait+0x60>)
   153be:	f008 f9fa 	bl	1d7b6 <printk>
   153c2:	4040      	eors	r0, r0
   153c4:	f380 8811 	msr	BASEPRI, r0
   153c8:	f04f 0003 	mov.w	r0, #3
   153cc:	df02      	svc	2
	return api->on(dev, sys);
   153ce:	6863      	ldr	r3, [r4, #4]
   153d0:	2101      	movs	r1, #1
   153d2:	681b      	ldr	r3, [r3, #0]
   153d4:	4620      	mov	r0, r4
   153d6:	4798      	blx	r3
						clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	if (!api->get_status) {
   153d8:	6863      	ldr	r3, [r4, #4]
   153da:	691b      	ldr	r3, [r3, #16]
   153dc:	b12b      	cbz	r3, 153ea <lll_clock_wait+0x4a>
		return CLOCK_CONTROL_STATUS_UNKNOWN;
	}

	return api->get_status(dev, sys);
   153de:	2101      	movs	r1, #1
   153e0:	4620      	mov	r0, r4
   153e2:	4798      	blx	r3

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);
	while (clock_control_get_status(clock, CLOCK_CONTROL_NRF_SUBSYS_LF) !=
   153e4:	2802      	cmp	r0, #2
   153e6:	d100      	bne.n	153ea <lll_clock_wait+0x4a>
			CLOCK_CONTROL_STATUS_ON) {
		DEBUG_CPU_SLEEP(1);
		k_cpu_idle();
		DEBUG_CPU_SLEEP(0);
	}
}
   153e8:	bd10      	pop	{r4, pc}
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   153ea:	f7ef faf7 	bl	49dc <arch_cpu_idle>
   153ee:	e7f3      	b.n	153d8 <lll_clock_wait+0x38>
   153f0:	2000a555 	.word	0x2000a555
   153f4:	00026ffd 	.word	0x00026ffd
   153f8:	000295d2 	.word	0x000295d2
   153fc:	00029623 	.word	0x00029623
   15400:	00027ff4 	.word	0x00027ff4

00015404 <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
   15404:	b508      	push	{r3, lr}
	int err;

	radio_isr_set(isr_race, param);
   15406:	4601      	mov	r1, r0
   15408:	480d      	ldr	r0, [pc, #52]	; (15440 <isr_cleanup+0x3c>)
   1540a:	f001 fbfd 	bl	16c08 <radio_isr_set>
	radio_tmr_stop();
   1540e:	f001 fe25 	bl	1705c <radio_tmr_stop>

	err = lll_clk_off();
   15412:	f7fc fdbf 	bl	11f94 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   15416:	b170      	cbz	r0, 15436 <isr_cleanup+0x32>
   15418:	3010      	adds	r0, #16
   1541a:	d00c      	beq.n	15436 <isr_cleanup+0x32>
   1541c:	f240 237e 	movw	r3, #638	; 0x27e
   15420:	4a08      	ldr	r2, [pc, #32]	; (15444 <isr_cleanup+0x40>)
   15422:	4909      	ldr	r1, [pc, #36]	; (15448 <isr_cleanup+0x44>)
   15424:	4809      	ldr	r0, [pc, #36]	; (1544c <isr_cleanup+0x48>)
   15426:	f008 f9c6 	bl	1d7b6 <printk>
   1542a:	4040      	eors	r0, r0
   1542c:	f380 8811 	msr	BASEPRI, r0
   15430:	f04f 0003 	mov.w	r0, #3
   15434:	df02      	svc	2

	lll_done(NULL);
   15436:	2000      	movs	r0, #0
}
   15438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1543c:	f7fc bd58 	b.w	11ef0 <lll_done>
   15440:	0002232d 	.word	0x0002232d
   15444:	00029629 	.word	0x00029629
   15448:	00029380 	.word	0x00029380
   1544c:	00027ff4 	.word	0x00027ff4

00015450 <isr_done>:
{
   15450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15452:	4605      	mov	r5, r0
	radio_status_reset();
   15454:	f001 fcb2 	bl	16dbc <radio_status_reset>
	radio_tmr_status_reset();
   15458:	f001 fd6e 	bl	16f38 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1545c:	f001 fd48 	bl	16ef0 <radio_filter_status_reset>
	radio_ar_status_reset();
   15460:	f001 ff08 	bl	17274 <radio_ar_status_reset>
	radio_rssi_status_reset();
   15464:	f001 fd0c 	bl	16e80 <radio_rssi_status_reset>
	e = ull_event_done_extra_get();
   15468:	f7fc faaa 	bl	119c0 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1546c:	4604      	mov	r4, r0
   1546e:	b960      	cbnz	r0, 1548a <isr_done+0x3a>
   15470:	f240 234d 	movw	r3, #589	; 0x24d
   15474:	4a1c      	ldr	r2, [pc, #112]	; (154e8 <isr_done+0x98>)
   15476:	491d      	ldr	r1, [pc, #116]	; (154ec <isr_done+0x9c>)
   15478:	481d      	ldr	r0, [pc, #116]	; (154f0 <isr_done+0xa0>)
   1547a:	f008 f99c 	bl	1d7b6 <printk>
   1547e:	4040      	eors	r0, r0
   15480:	f380 8811 	msr	BASEPRI, r0
   15484:	f04f 0003 	mov.w	r0, #3
   15488:	df02      	svc	2
	e->crc_valid = crc_valid;
   1548a:	4a1a      	ldr	r2, [pc, #104]	; (154f4 <isr_done+0xa4>)
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1548c:	2301      	movs	r3, #1
	e->crc_valid = crc_valid;
   1548e:	7812      	ldrb	r2, [r2, #0]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   15490:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   15492:	4b19      	ldr	r3, [pc, #100]	; (154f8 <isr_done+0xa8>)
	e->crc_valid = crc_valid;
   15494:	71a2      	strb	r2, [r4, #6]
	e->mic_state = mic_state;
   15496:	4a19      	ldr	r2, [pc, #100]	; (154fc <isr_done+0xac>)
	e->trx_cnt = trx_cnt;
   15498:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   1549a:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   1549c:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1549e:	71e2      	strb	r2, [r4, #7]
	if (trx_cnt) {
   154a0:	b1db      	cbz	r3, 154da <isr_done+0x8a>
		if (lll->role) {
   154a2:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   154a6:	2b00      	cmp	r3, #0
   154a8:	da17      	bge.n	154da <isr_done+0x8a>
				addr_us_get(lll->phy_rx);
   154aa:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   154ae:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   154b2:	2b02      	cmp	r3, #2
   154b4:	d016      	beq.n	154e4 <isr_done+0x94>
	default:
	case BIT(0):
		return 40;
   154b6:	2b04      	cmp	r3, #4
   154b8:	bf0c      	ite	eq
   154ba:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   154be:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   154c0:	f001 fe04 	bl	170cc <radio_tmr_aa_restore>
   154c4:	4606      	mov	r6, r0
   154c6:	f001 fe07 	bl	170d8 <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   154ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   154cc:	1a30      	subs	r0, r6, r0
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   154ce:	e9c4 3703 	strd	r3, r7, [r4, #12]
			lll->slave.window_widening_event_us = 0;
   154d2:	2300      	movs	r3, #0
			e->slave.start_to_address_actual_us =
   154d4:	60a0      	str	r0, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   154d6:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   154d8:	63eb      	str	r3, [r5, #60]	; 0x3c
	isr_cleanup(param);
   154da:	4628      	mov	r0, r5
}
   154dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	isr_cleanup(param);
   154e0:	f7ff bf90 	b.w	15404 <isr_cleanup>
	case BIT(1):
		return 24;
   154e4:	2718      	movs	r7, #24
   154e6:	e7eb      	b.n	154c0 <isr_done+0x70>
   154e8:	00029629 	.word	0x00029629
   154ec:	00027a13 	.word	0x00027a13
   154f0:	00027ff4 	.word	0x00027ff4
   154f4:	2000a557 	.word	0x2000a557
   154f8:	20006058 	.word	0x20006058
   154fc:	2000a558 	.word	0x2000a558

00015500 <lll_conn_ppm_get>:
}
   15500:	4b01      	ldr	r3, [pc, #4]	; (15508 <lll_conn_ppm_get+0x8>)
   15502:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   15506:	4770      	bx	lr
   15508:	00026a80 	.word	0x00026a80

0001550c <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   1550c:	4a04      	ldr	r2, [pc, #16]	; (15520 <lll_conn_prepare_reset+0x14>)
   1550e:	2300      	movs	r3, #0
   15510:	8013      	strh	r3, [r2, #0]
	crc_expire = 0U;
   15512:	4a04      	ldr	r2, [pc, #16]	; (15524 <lll_conn_prepare_reset+0x18>)
   15514:	7013      	strb	r3, [r2, #0]
	crc_valid = 0U;
   15516:	4a04      	ldr	r2, [pc, #16]	; (15528 <lll_conn_prepare_reset+0x1c>)
   15518:	7013      	strb	r3, [r2, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1551a:	4a04      	ldr	r2, [pc, #16]	; (1552c <lll_conn_prepare_reset+0x20>)
   1551c:	7013      	strb	r3, [r2, #0]
}
   1551e:	4770      	bx	lr
   15520:	20006058 	.word	0x20006058
   15524:	2000a556 	.word	0x2000a556
   15528:	2000a557 	.word	0x2000a557
   1552c:	2000a558 	.word	0x2000a558

00015530 <lll_conn_abort_cb>:
{
   15530:	b510      	push	{r4, lr}
   15532:	460c      	mov	r4, r1
	if (!prepare_param) {
   15534:	b930      	cbnz	r0, 15544 <lll_conn_abort_cb+0x14>
		radio_isr_set(isr_done, param);
   15536:	480e      	ldr	r0, [pc, #56]	; (15570 <lll_conn_abort_cb+0x40>)
   15538:	f001 fb66 	bl	16c08 <radio_isr_set>
}
   1553c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   15540:	f001 bc2a 	b.w	16d98 <radio_disable>
	err = lll_clk_off();
   15544:	f7fc fd26 	bl	11f94 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   15548:	b168      	cbz	r0, 15566 <lll_conn_abort_cb+0x36>
   1554a:	3010      	adds	r0, #16
   1554c:	d00b      	beq.n	15566 <lll_conn_abort_cb+0x36>
   1554e:	2381      	movs	r3, #129	; 0x81
   15550:	4a08      	ldr	r2, [pc, #32]	; (15574 <lll_conn_abort_cb+0x44>)
   15552:	4909      	ldr	r1, [pc, #36]	; (15578 <lll_conn_abort_cb+0x48>)
   15554:	4809      	ldr	r0, [pc, #36]	; (1557c <lll_conn_abort_cb+0x4c>)
   15556:	f008 f92e 	bl	1d7b6 <printk>
   1555a:	4040      	eors	r0, r0
   1555c:	f380 8811 	msr	BASEPRI, r0
   15560:	f04f 0003 	mov.w	r0, #3
   15564:	df02      	svc	2
	lll_done(param);
   15566:	4620      	mov	r0, r4
}
   15568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1556c:	f7fc bcc0 	b.w	11ef0 <lll_done>
   15570:	00015451 	.word	0x00015451
   15574:	00029629 	.word	0x00029629
   15578:	00029380 	.word	0x00029380
   1557c:	00027ff4 	.word	0x00027ff4

00015580 <lll_conn_rx_pkt_set>:
{
   15580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15582:	4607      	mov	r7, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   15584:	2001      	movs	r0, #1
   15586:	f7fc f847 	bl	11618 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1558a:	4604      	mov	r4, r0
   1558c:	b960      	cbnz	r0, 155a8 <lll_conn_rx_pkt_set+0x28>
   1558e:	f44f 73df 	mov.w	r3, #446	; 0x1be
   15592:	4a19      	ldr	r2, [pc, #100]	; (155f8 <lll_conn_rx_pkt_set+0x78>)
   15594:	4919      	ldr	r1, [pc, #100]	; (155fc <lll_conn_rx_pkt_set+0x7c>)
   15596:	481a      	ldr	r0, [pc, #104]	; (15600 <lll_conn_rx_pkt_set+0x80>)
   15598:	f008 f90d 	bl	1d7b6 <printk>
   1559c:	4040      	eors	r0, r0
   1559e:	f380 8811 	msr	BASEPRI, r0
   155a2:	f04f 0003 	mov.w	r0, #3
   155a6:	df02      	svc	2
	phy = lll->phy_rx;
   155a8:	f897 5049 	ldrb.w	r5, [r7, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   155ac:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	phy = lll->phy_rx;
   155b0:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   155b4:	2100      	movs	r1, #0
   155b6:	4628      	mov	r0, r5
   155b8:	f001 fb6a 	bl	16c90 <radio_phy_set>
	} else if (lll->enc_rx) {
   155bc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
   155c0:	006a      	lsls	r2, r5, #1
   155c2:	071b      	lsls	r3, r3, #28
   155c4:	f042 0201 	orr.w	r2, r2, #1
   155c8:	f104 0420 	add.w	r4, r4, #32
   155cc:	d50e      	bpl.n	155ec <lll_conn_rx_pkt_set+0x6c>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   155ce:	1d31      	adds	r1, r6, #4
   155d0:	b2c9      	uxtb	r1, r1
   155d2:	2008      	movs	r0, #8
   155d4:	f001 fba2 	bl	16d1c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   155d8:	4622      	mov	r2, r4
   155da:	4629      	mov	r1, r5
   155dc:	f107 0063 	add.w	r0, r7, #99	; 0x63
   155e0:	f001 fd94 	bl	1710c <radio_ccm_rx_pkt_set>
}
   155e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   155e8:	f001 bbc4 	b.w	16d74 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   155ec:	2008      	movs	r0, #8
   155ee:	b2f1      	uxtb	r1, r6
   155f0:	f001 fb94 	bl	16d1c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   155f4:	4620      	mov	r0, r4
   155f6:	e7f5      	b.n	155e4 <lll_conn_rx_pkt_set+0x64>
   155f8:	00029629 	.word	0x00029629
   155fc:	00029683 	.word	0x00029683
   15600:	00027ff4 	.word	0x00027ff4

00015604 <lll_conn_isr_tx>:
{
   15604:	b538      	push	{r3, r4, r5, lr}
   15606:	4604      	mov	r4, r0
	radio_status_reset();
   15608:	f001 fbd8 	bl	16dbc <radio_status_reset>
	radio_tmr_status_reset();
   1560c:	f001 fc94 	bl	16f38 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   15610:	2096      	movs	r0, #150	; 0x96
   15612:	f001 fca1 	bl	16f58 <radio_tmr_tifs_set>
				     lll->phy_flags);
   15616:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1561a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1561e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   15622:	2100      	movs	r1, #0
   15624:	f002 0207 	and.w	r2, r2, #7
   15628:	f000 0007 	and.w	r0, r0, #7
   1562c:	f001 fc10 	bl	16e50 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   15630:	4620      	mov	r0, r4
   15632:	f7ff ffa5 	bl	15580 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   15636:	f001 fbcd 	bl	16dd4 <radio_is_ready>
   1563a:	b160      	cbz	r0, 15656 <lll_conn_isr_tx+0x52>
   1563c:	f240 1379 	movw	r3, #377	; 0x179
   15640:	4a1b      	ldr	r2, [pc, #108]	; (156b0 <lll_conn_isr_tx+0xac>)
   15642:	491c      	ldr	r1, [pc, #112]	; (156b4 <lll_conn_isr_tx+0xb0>)
   15644:	481c      	ldr	r0, [pc, #112]	; (156b8 <lll_conn_isr_tx+0xb4>)
   15646:	f008 f8b6 	bl	1d7b6 <printk>
   1564a:	4040      	eors	r0, r0
   1564c:	f380 8811 	msr	BASEPRI, r0
   15650:	f04f 0003 	mov.w	r0, #3
   15654:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   15656:	f001 fd53 	bl	17100 <radio_tmr_tifs_base_get>
   1565a:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1565c:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   15660:	2101      	movs	r1, #1
   15662:	f000 0007 	and.w	r0, r0, #7
   15666:	f00c ff8a 	bl	2257e <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1566a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1566e:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15672:	4405      	add	r5, r0
	switch (phy) {
   15674:	2b02      	cmp	r3, #2
   15676:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1567a:	d016      	beq.n	156aa <lll_conn_isr_tx+0xa6>
		return 40;
   1567c:	2b04      	cmp	r3, #4
   1567e:	bf0c      	ite	eq
   15680:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   15684:	2028      	movne	r0, #40	; 0x28
	hcto += addr_us_get(lll->phy_rx);
   15686:	4405      	add	r5, r0
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   15688:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1568c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   15690:	f000 0007 	and.w	r0, r0, #7
   15694:	f00c ff6f 	bl	22576 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   15698:	1a28      	subs	r0, r5, r0
   1569a:	f001 fceb 	bl	17074 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1569e:	4621      	mov	r1, r4
   156a0:	4806      	ldr	r0, [pc, #24]	; (156bc <lll_conn_isr_tx+0xb8>)
}
   156a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   156a6:	f001 baaf 	b.w	16c08 <radio_isr_set>
		return 24;
   156aa:	2018      	movs	r0, #24
   156ac:	e7eb      	b.n	15686 <lll_conn_isr_tx+0x82>
   156ae:	bf00      	nop
   156b0:	00029629 	.word	0x00029629
   156b4:	00029393 	.word	0x00029393
   156b8:	00027ff4 	.word	0x00027ff4
   156bc:	000156c1 	.word	0x000156c1

000156c0 <lll_conn_isr_rx>:
{
   156c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   156c4:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   156c6:	f001 fb8f 	bl	16de8 <radio_is_done>
   156ca:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   156cc:	b1a5      	cbz	r5, 156f8 <lll_conn_isr_rx+0x38>
		crc_ok = radio_crc_is_valid();
   156ce:	f001 fba1 	bl	16e14 <radio_crc_is_valid>
   156d2:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   156d4:	f001 fbdc 	bl	16e90 <radio_rssi_is_ready>
	radio_status_reset();
   156d8:	f001 fb70 	bl	16dbc <radio_status_reset>
	radio_tmr_status_reset();
   156dc:	f001 fc2c 	bl	16f38 <radio_tmr_status_reset>
	radio_rssi_status_reset();
   156e0:	f001 fbce 	bl	16e80 <radio_rssi_status_reset>
	if (!trx_done) {
   156e4:	b955      	cbnz	r5, 156fc <lll_conn_isr_rx+0x3c>
		radio_isr_set(isr_done, param);
   156e6:	4621      	mov	r1, r4
   156e8:	48bd      	ldr	r0, [pc, #756]	; (159e0 <lll_conn_isr_rx+0x320>)
   156ea:	f001 fa8d 	bl	16c08 <radio_isr_set>
		radio_disable();
   156ee:	f001 fb53 	bl	16d98 <radio_disable>
}
   156f2:	b003      	add	sp, #12
   156f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = rssi_ready = 0U;
   156f8:	462f      	mov	r7, r5
   156fa:	e7ed      	b.n	156d8 <lll_conn_isr_rx+0x18>
	trx_cnt++;
   156fc:	4ab9      	ldr	r2, [pc, #740]	; (159e4 <lll_conn_isr_rx+0x324>)
   156fe:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   15700:	2001      	movs	r0, #1
	trx_cnt++;
   15702:	3301      	adds	r3, #1
   15704:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   15706:	f7fb ff87 	bl	11618 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1570a:	4606      	mov	r6, r0
   1570c:	b958      	cbnz	r0, 15726 <lll_conn_isr_rx+0x66>
   1570e:	23b7      	movs	r3, #183	; 0xb7
   15710:	4ab5      	ldr	r2, [pc, #724]	; (159e8 <lll_conn_isr_rx+0x328>)
   15712:	49b6      	ldr	r1, [pc, #728]	; (159ec <lll_conn_isr_rx+0x32c>)
   15714:	48b6      	ldr	r0, [pc, #728]	; (159f0 <lll_conn_isr_rx+0x330>)
   15716:	f008 f84e 	bl	1d7b6 <printk>
   1571a:	4040      	eors	r0, r0
   1571c:	f380 8811 	msr	BASEPRI, r0
   15720:	f04f 0003 	mov.w	r0, #3
   15724:	df02      	svc	2
	if (crc_ok) {
   15726:	2f00      	cmp	r7, #0
   15728:	f000 814a 	beq.w	159c0 <lll_conn_isr_rx+0x300>

static int isr_rx_pdu(struct lll_conn *lll, struct pdu_data *pdu_data_rx,
		      struct node_tx **tx_release, u8_t *is_rx_enqueue)
{
	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   1572c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   15730:	f896 1020 	ldrb.w	r1, [r6, #32]
   15734:	f003 0201 	and.w	r2, r3, #1
   15738:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1573c:	4291      	cmp	r1, r2
   1573e:	f000 80dd 	beq.w	158fc <lll_conn_isr_rx+0x23c>
		/* Increment serial number */
		lll->sn++;
   15742:	f082 0201 	eor.w	r2, r2, #1
   15746:	f362 0300 	bfi	r3, r2, #0, #1
   1574a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (lll->role) {
   1574e:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   15752:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   15754:	bfbe      	ittt	lt
   15756:	f894 3024 	ldrblt.w	r3, [r4, #36]	; 0x24
   1575a:	f043 0301 	orrlt.w	r3, r3, #1
   1575e:	f884 3024 	strblt.w	r3, [r4, #36]	; 0x24
		}
#endif /* CONFIG_BT_PERIPHERAL */

		if (!lll->empty) {
   15762:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   15766:	0758      	lsls	r0, r3, #29
   15768:	f100 80c4 	bmi.w	158f4 <lll_conn_isr_rx+0x234>
			struct pdu_data *pdu_data_tx;
			u8_t pdu_data_tx_len;
			struct node_tx *tx;
			memq_link_t *link;

			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1576c:	aa01      	add	r2, sp, #4
   1576e:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   15772:	f00c f8d4 	bl	2191e <memq_peek>
					 (void **)&tx);
			LL_ASSERT(link);
   15776:	4605      	mov	r5, r0
   15778:	b960      	cbnz	r0, 15794 <lll_conn_isr_rx+0xd4>
   1577a:	f240 23a9 	movw	r3, #681	; 0x2a9
   1577e:	4a9a      	ldr	r2, [pc, #616]	; (159e8 <lll_conn_isr_rx+0x328>)
   15780:	499c      	ldr	r1, [pc, #624]	; (159f4 <lll_conn_isr_rx+0x334>)
   15782:	489b      	ldr	r0, [pc, #620]	; (159f0 <lll_conn_isr_rx+0x330>)
   15784:	f008 f817 	bl	1d7b6 <printk>
   15788:	4040      	eors	r0, r0
   1578a:	f380 8811 	msr	BASEPRI, r0
   1578e:	f04f 0003 	mov.w	r0, #3
   15792:	df02      	svc	2

			pdu_data_tx = (void *)(tx->pdu +
					       lll->packet_tx_head_offset);
   15794:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61

			pdu_data_tx_len = pdu_data_tx->len;
   15798:	9a01      	ldr	r2, [sp, #4]
   1579a:	441a      	add	r2, r3
   1579c:	7950      	ldrb	r0, [r2, #5]
#if defined(CONFIG_BT_CTLR_LE_ENC)
			if (pdu_data_tx_len != 0U) {
   1579e:	b150      	cbz	r0, 157b6 <lll_conn_isr_rx+0xf6>
				/* if encrypted increment tx counter */
				if (lll->enc_tx) {
   157a0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   157a4:	06d1      	lsls	r1, r2, #27
   157a6:	d506      	bpl.n	157b6 <lll_conn_isr_rx+0xf6>
					lll->ccm_tx.counter++;
   157a8:	e9d4 2125 	ldrd	r2, r1, [r4, #148]	; 0x94
   157ac:	3201      	adds	r2, #1
   157ae:	f141 0100 	adc.w	r1, r1, #0
   157b2:	e9c4 2125 	strd	r2, r1, [r4, #148]	; 0x94
				}
			}
#endif /* CONFIG_BT_CTLR_LE_ENC */

			lll->packet_tx_head_offset += pdu_data_tx_len;
			if (lll->packet_tx_head_offset ==
   157b6:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			lll->packet_tx_head_offset += pdu_data_tx_len;
   157ba:	4403      	add	r3, r0
   157bc:	b2db      	uxtb	r3, r3
			if (lll->packet_tx_head_offset ==
   157be:	429a      	cmp	r2, r3
			lll->packet_tx_head_offset += pdu_data_tx_len;
   157c0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			if (lll->packet_tx_head_offset ==
   157c4:	f04f 0200 	mov.w	r2, #0
   157c8:	f040 8098 	bne.w	158fc <lll_conn_isr_rx+0x23c>
			    lll->packet_tx_head_len) {
				lll->packet_tx_head_len = 0;
   157cc:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				lll->packet_tx_head_offset = 0;

				memq_dequeue(lll->memq_tx.tail,
   157d0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   157d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   157d6:	f00c f8aa 	bl	2192e <memq_dequeue>
					     &lll->memq_tx.head, NULL);

				/* TX node UPSTREAM, i.e. Tx node ack path */
				link->next = tx->next; /* Indicates ctrl or data
   157da:	f8dd 8004 	ldr.w	r8, [sp, #4]
   157de:	f8d8 3000 	ldr.w	r3, [r8]
   157e2:	602b      	str	r3, [r5, #0]
							* pool.
							*/
				tx->next = link;
   157e4:	f8c8 5000 	str.w	r5, [r8]
			lll->empty = 0;
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   157e8:	f896 2020 	ldrb.w	r2, [r6, #32]
   157ec:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   157f0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   157f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   157f8:	429a      	cmp	r2, r3
   157fa:	f000 8082 	beq.w	15902 <lll_conn_isr_rx+0x242>
	u8_t is_rx_enqueue = 0U;
   157fe:	f04f 0900 	mov.w	r9, #0
		crc_expire = 0U;
   15802:	4b7d      	ldr	r3, [pc, #500]	; (159f8 <lll_conn_isr_rx+0x338>)
   15804:	2500      	movs	r5, #0
   15806:	701d      	strb	r5, [r3, #0]
		crc_valid = 1U;
   15808:	4b7c      	ldr	r3, [pc, #496]	; (159fc <lll_conn_isr_rx+0x33c>)
   1580a:	2201      	movs	r2, #1
   1580c:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1580e:	a901      	add	r1, sp, #4
   15810:	4620      	mov	r0, r4
   15812:	f00c fdf0 	bl	223f6 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   15816:	2d00      	cmp	r5, #0
   15818:	f040 80fc 	bne.w	15a14 <lll_conn_isr_rx+0x354>
   1581c:	b147      	cbz	r7, 15830 <lll_conn_isr_rx+0x170>
   1581e:	f896 3020 	ldrb.w	r3, [r6, #32]
   15822:	06db      	lsls	r3, r3, #27
   15824:	d404      	bmi.n	15830 <lll_conn_isr_rx+0x170>
				     (pdu_data_tx->len == 0));
   15826:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   15828:	785b      	ldrb	r3, [r3, #1]
   1582a:	2b00      	cmp	r3, #0
   1582c:	f000 80f2 	beq.w	15a14 <lll_conn_isr_rx+0x354>
		radio_tmr_tifs_set(EVENT_IFS_US);
   15830:	2096      	movs	r0, #150	; 0x96
   15832:	f001 fb91 	bl	16f58 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   15836:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1583a:	f000 0007 	and.w	r0, r0, #7
   1583e:	f001 fafb 	bl	16e38 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   15842:	4621      	mov	r1, r4
   15844:	486e      	ldr	r0, [pc, #440]	; (15a00 <lll_conn_isr_rx+0x340>)
   15846:	f001 f9df 	bl	16c08 <radio_isr_set>
		radio_tmr_end_capture();
   1584a:	f001 fc4b 	bl	170e4 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1584e:	9901      	ldr	r1, [sp, #4]
   15850:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   15854:	780b      	ldrb	r3, [r1, #0]
   15856:	f3c2 0200 	ubfx	r2, r2, #0, #1
   1585a:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   1585e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   15862:	f3c2 0240 	ubfx	r2, r2, #1, #1
   15866:	f362 0382 	bfi	r3, r2, #2, #1
   1586a:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1586c:	4620      	mov	r0, r4
   1586e:	f00c fd99 	bl	223a4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   15872:	f001 faaf 	bl	16dd4 <radio_is_ready>
   15876:	b160      	cbz	r0, 15892 <lll_conn_isr_rx+0x1d2>
   15878:	f240 1321 	movw	r3, #289	; 0x121
   1587c:	4a5a      	ldr	r2, [pc, #360]	; (159e8 <lll_conn_isr_rx+0x328>)
   1587e:	4961      	ldr	r1, [pc, #388]	; (15a04 <lll_conn_isr_rx+0x344>)
   15880:	485b      	ldr	r0, [pc, #364]	; (159f0 <lll_conn_isr_rx+0x330>)
   15882:	f007 ff98 	bl	1d7b6 <printk>
   15886:	4040      	eors	r0, r0
   15888:	f380 8811 	msr	BASEPRI, r0
   1588c:	f04f 0003 	mov.w	r0, #3
   15890:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   15892:	f001 fc1b 	bl	170cc <radio_tmr_aa_restore>
   15896:	b918      	cbnz	r0, 158a0 <lll_conn_isr_rx+0x1e0>
		radio_tmr_aa_save(radio_tmr_aa_get());
   15898:	f001 fc0c 	bl	170b4 <radio_tmr_aa_get>
   1589c:	f001 fc10 	bl	170c0 <radio_tmr_aa_save>
	if (tx_release) {
   158a0:	f1b8 0f00 	cmp.w	r8, #0
   158a4:	f000 80bd 	beq.w	15a22 <lll_conn_isr_rx+0x362>
		LL_ASSERT(lll->handle != 0xFFFF);
   158a8:	8a22      	ldrh	r2, [r4, #16]
   158aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   158ae:	429a      	cmp	r2, r3
   158b0:	d10c      	bne.n	158cc <lll_conn_isr_rx+0x20c>
   158b2:	f44f 7397 	mov.w	r3, #302	; 0x12e
   158b6:	4a4c      	ldr	r2, [pc, #304]	; (159e8 <lll_conn_isr_rx+0x328>)
   158b8:	4953      	ldr	r1, [pc, #332]	; (15a08 <lll_conn_isr_rx+0x348>)
   158ba:	484d      	ldr	r0, [pc, #308]	; (159f0 <lll_conn_isr_rx+0x330>)
   158bc:	f007 ff7b 	bl	1d7b6 <printk>
   158c0:	4040      	eors	r0, r0
   158c2:	f380 8811 	msr	BASEPRI, r0
   158c6:	f04f 0003 	mov.w	r0, #3
   158ca:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   158cc:	4641      	mov	r1, r8
   158ce:	8a20      	ldrh	r0, [r4, #16]
   158d0:	f7ff fbda 	bl	15088 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   158d4:	f1b9 0f00 	cmp.w	r9, #0
   158d8:	d009      	beq.n	158ee <lll_conn_isr_rx+0x22e>
		ull_pdu_rx_alloc();
   158da:	f7fb feb5 	bl	11648 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   158de:	2302      	movs	r3, #2
   158e0:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   158e2:	8a23      	ldrh	r3, [r4, #16]
   158e4:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   158e6:	4631      	mov	r1, r6
   158e8:	6830      	ldr	r0, [r6, #0]
   158ea:	f7fb fec3 	bl	11674 <ull_rx_put>
		ull_rx_sched();
   158ee:	f7fb fed1 	bl	11694 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   158f2:	e6fe      	b.n	156f2 <lll_conn_isr_rx+0x32>
			lll->empty = 0;
   158f4:	f36f 0382 	bfc	r3, #2, #1
   158f8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   158fc:	f04f 0800 	mov.w	r8, #0
   15900:	e772      	b.n	157e8 <lll_conn_isr_rx+0x128>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   15902:	2003      	movs	r0, #3
   15904:	f7fb fe88 	bl	11618 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   15908:	2800      	cmp	r0, #0
   1590a:	f43f af78 	beq.w	157fe <lll_conn_isr_rx+0x13e>
		/* Increment next expected serial number */
		lll->nesn++;
   1590e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   15912:	f083 0302 	eor.w	r3, r3, #2
   15916:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

		if (pdu_data_rx->len != 0) {
   1591a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   1591e:	2b00      	cmp	r3, #0
   15920:	f43f af6d 	beq.w	157fe <lll_conn_isr_rx+0x13e>
#if defined(CONFIG_BT_CTLR_LE_ENC)
			/* If required, wait for CCM to finish
			 */
			if (lll->enc_rx) {
   15924:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   15928:	071a      	lsls	r2, r3, #28
   1592a:	d546      	bpl.n	159ba <lll_conn_isr_rx+0x2fa>
				u32_t done;

				done = radio_ccm_is_done();
   1592c:	f001 fc48 	bl	171c0 <radio_ccm_is_done>
				LL_ASSERT(done);
   15930:	b960      	cbnz	r0, 1594c <lll_conn_isr_rx+0x28c>
   15932:	f240 23df 	movw	r3, #735	; 0x2df
   15936:	4a2c      	ldr	r2, [pc, #176]	; (159e8 <lll_conn_isr_rx+0x328>)
   15938:	4934      	ldr	r1, [pc, #208]	; (15a0c <lll_conn_isr_rx+0x34c>)
   1593a:	482d      	ldr	r0, [pc, #180]	; (159f0 <lll_conn_isr_rx+0x330>)
   1593c:	f007 ff3b 	bl	1d7b6 <printk>
   15940:	4040      	eors	r0, r0
   15942:	f380 8811 	msr	BASEPRI, r0
   15946:	f04f 0003 	mov.w	r0, #3
   1594a:	df02      	svc	2

				bool mic_failure = !radio_ccm_mic_is_valid();
   1594c:	f001 fc56 	bl	171fc <radio_ccm_mic_is_valid>

				if (mic_failure &&
   15950:	4d2f      	ldr	r5, [pc, #188]	; (15a10 <lll_conn_isr_rx+0x350>)
   15952:	bb10      	cbnz	r0, 1599a <lll_conn_isr_rx+0x2da>
				    lll->ccm_rx.counter == 0 &&
   15954:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   15958:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1595c:	4313      	orrs	r3, r2
   1595e:	d165      	bne.n	15a2c <lll_conn_isr_rx+0x36c>
				    (pdu_data_rx->ll_id ==
   15960:	f896 3020 	ldrb.w	r3, [r6, #32]
				    lll->ccm_rx.counter == 0 &&
   15964:	f003 0303 	and.w	r3, r3, #3
   15968:	2b03      	cmp	r3, #3
   1596a:	d15f      	bne.n	15a2c <lll_conn_isr_rx+0x36c>
					 * middle of the LL encryption procedure
					 * with MIC failure.
					 * This could be an unencrypted packet
					 */
					struct pdu_data *scratch_pkt =
						radio_pkt_scratch_get();
   1596c:	f001 fa60 	bl	16e30 <radio_pkt_scratch_get>

					if (ctrl_pdu_len_check(
   15970:	7842      	ldrb	r2, [r0, #1]
   15972:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   15974:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   15976:	d859      	bhi.n	15a2c <lll_conn_isr_rx+0x36c>
						scratch_pkt->len)) {
						memcpy(pdu_data_rx,
   15978:	3203      	adds	r2, #3
   1597a:	f106 0020 	add.w	r0, r6, #32
   1597e:	f009 fe3b 	bl	1f5f8 <memcpy>
						       scratch_pkt,
						       scratch_pkt->len +
						       offsetof(struct pdu_data,
							llctrl));
						mic_failure = false;
						lll->ccm_rx.counter--;
   15982:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   15986:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1598a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1598e:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   15992:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   15996:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77

					return -EINVAL;
				}

				/* Increment counter */
				lll->ccm_rx.counter++;
   1599a:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1599e:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   159a2:	3301      	adds	r3, #1
   159a4:	f142 0200 	adc.w	r2, r2, #0

				/* Record MIC valid */
				mic_state = LLL_CONN_MIC_PASS;
   159a8:	f04f 0901 	mov.w	r9, #1
				lll->ccm_rx.counter++;
   159ac:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   159b0:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   159b4:	f885 9000 	strb.w	r9, [r5]
		if (err) {
   159b8:	e723      	b.n	15802 <lll_conn_isr_rx+0x142>
			}
#endif /* CONFIG_BT_CTLR_LE_ENC */

			/* Enqueue non-empty PDU */
			*is_rx_enqueue = 1U;
   159ba:	f04f 0901 	mov.w	r9, #1
   159be:	e720      	b.n	15802 <lll_conn_isr_rx+0x142>
		if (crc_expire == 0U) {
   159c0:	4b0d      	ldr	r3, [pc, #52]	; (159f8 <lll_conn_isr_rx+0x338>)
   159c2:	781a      	ldrb	r2, [r3, #0]
   159c4:	b90a      	cbnz	r2, 159ca <lll_conn_isr_rx+0x30a>
			crc_expire = 2U;
   159c6:	2202      	movs	r2, #2
   159c8:	701a      	strb	r2, [r3, #0]
		crc_expire--;
   159ca:	781d      	ldrb	r5, [r3, #0]
   159cc:	3d01      	subs	r5, #1
   159ce:	b2ed      	uxtb	r5, r5
   159d0:	701d      	strb	r5, [r3, #0]
	u8_t is_rx_enqueue = 0U;
   159d2:	f04f 0900 	mov.w	r9, #0
		is_crc_backoff = (crc_expire == 0U);
   159d6:	fab5 f585 	clz	r5, r5
   159da:	096d      	lsrs	r5, r5, #5
	struct node_tx *tx_release = NULL;
   159dc:	46c8      	mov	r8, r9
   159de:	e716      	b.n	1580e <lll_conn_isr_rx+0x14e>
   159e0:	00015451 	.word	0x00015451
   159e4:	20006058 	.word	0x20006058
   159e8:	00029629 	.word	0x00029629
   159ec:	00029683 	.word	0x00029683
   159f0:	00027ff4 	.word	0x00027ff4
   159f4:	0002952b 	.word	0x0002952b
   159f8:	2000a556 	.word	0x2000a556
   159fc:	2000a557 	.word	0x2000a557
   15a00:	00015605 	.word	0x00015605
   15a04:	00029393 	.word	0x00029393
   15a08:	0002966d 	.word	0x0002966d
   15a0c:	00029148 	.word	0x00029148
   15a10:	2000a558 	.word	0x2000a558
		radio_isr_set(isr_done, param);
   15a14:	4621      	mov	r1, r4
   15a16:	4808      	ldr	r0, [pc, #32]	; (15a38 <lll_conn_isr_rx+0x378>)
   15a18:	f001 f8f6 	bl	16c08 <radio_isr_set>
			radio_switch_complete_and_disable();
   15a1c:	f001 fa22 	bl	16e64 <radio_switch_complete_and_disable>
   15a20:	e715      	b.n	1584e <lll_conn_isr_rx+0x18e>
	if (is_rx_enqueue) {
   15a22:	f1b9 0f00 	cmp.w	r9, #0
   15a26:	f43f ae64 	beq.w	156f2 <lll_conn_isr_rx+0x32>
   15a2a:	e756      	b.n	158da <lll_conn_isr_rx+0x21a>
					mic_state = LLL_CONN_MIC_FAIL;
   15a2c:	2302      	movs	r3, #2
   15a2e:	702b      	strb	r3, [r5, #0]
	u8_t is_rx_enqueue = 0U;
   15a30:	f04f 0900 	mov.w	r9, #0
   15a34:	e72d      	b.n	15892 <lll_conn_isr_rx+0x1d2>
   15a36:	bf00      	nop
   15a38:	00015451 	.word	0x00015451

00015a3c <ticker_op_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
		  param == ull_disable_mark_get());
}

static void ticker_op_cb(u32_t status, void *param)
{
   15a3c:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15a3e:	b160      	cbz	r0, 15a5a <ticker_op_cb+0x1e>
   15a40:	f240 13b9 	movw	r3, #441	; 0x1b9
   15a44:	4a05      	ldr	r2, [pc, #20]	; (15a5c <ticker_op_cb+0x20>)
   15a46:	4906      	ldr	r1, [pc, #24]	; (15a60 <ticker_op_cb+0x24>)
   15a48:	4806      	ldr	r0, [pc, #24]	; (15a64 <ticker_op_cb+0x28>)
   15a4a:	f007 feb4 	bl	1d7b6 <printk>
   15a4e:	4040      	eors	r0, r0
   15a50:	f380 8811 	msr	BASEPRI, r0
   15a54:	f04f 0003 	mov.w	r0, #3
   15a58:	df02      	svc	2
}
   15a5a:	bd08      	pop	{r3, pc}
   15a5c:	000296ae 	.word	0x000296ae
   15a60:	00029496 	.word	0x00029496
   15a64:	00027ff4 	.word	0x00027ff4

00015a68 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   15a68:	2801      	cmp	r0, #1
{
   15a6a:	b510      	push	{r4, lr}
   15a6c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   15a6e:	d110      	bne.n	15a92 <ticker_op_stop_adv_cb+0x2a>
   15a70:	f7fb fd74 	bl	1155c <ull_disable_mark_get>
   15a74:	4284      	cmp	r4, r0
   15a76:	d00c      	beq.n	15a92 <ticker_op_stop_adv_cb+0x2a>
   15a78:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   15a7c:	4a05      	ldr	r2, [pc, #20]	; (15a94 <ticker_op_stop_adv_cb+0x2c>)
   15a7e:	4906      	ldr	r1, [pc, #24]	; (15a98 <ticker_op_stop_adv_cb+0x30>)
   15a80:	4806      	ldr	r0, [pc, #24]	; (15a9c <ticker_op_stop_adv_cb+0x34>)
   15a82:	f007 fe98 	bl	1d7b6 <printk>
   15a86:	4040      	eors	r0, r0
   15a88:	f380 8811 	msr	BASEPRI, r0
   15a8c:	f04f 0003 	mov.w	r0, #3
   15a90:	df02      	svc	2
}
   15a92:	bd10      	pop	{r4, pc}
   15a94:	000296ae 	.word	0x000296ae
   15a98:	000296e8 	.word	0x000296e8
   15a9c:	00027ff4 	.word	0x00027ff4

00015aa0 <ull_slave_ticker_cb>:
{
   15aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15aa2:	4605      	mov	r5, r0
   15aa4:	460f      	mov	r7, r1
	ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   15aa6:	4601      	mov	r1, r0
   15aa8:	4618      	mov	r0, r3
{
   15aaa:	4616      	mov	r6, r2
   15aac:	461c      	mov	r4, r3
	ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   15aae:	f7eb f98b 	bl	dc8 <ull_conn_llcp>
	if (ret) {
   15ab2:	2800      	cmp	r0, #0
   15ab4:	d136      	bne.n	15b24 <ull_slave_ticker_cb+0x84>
   15ab6:	7c23      	ldrb	r3, [r4, #16]
   15ab8:	3301      	adds	r3, #1
   15aba:	b2db      	uxtb	r3, r3
   15abc:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   15abe:	b963      	cbnz	r3, 15ada <ull_slave_ticker_cb+0x3a>
   15ac0:	f240 1369 	movw	r3, #361	; 0x169
   15ac4:	4a18      	ldr	r2, [pc, #96]	; (15b28 <ull_slave_ticker_cb+0x88>)
   15ac6:	4919      	ldr	r1, [pc, #100]	; (15b2c <ull_slave_ticker_cb+0x8c>)
   15ac8:	4819      	ldr	r0, [pc, #100]	; (15b30 <ull_slave_ticker_cb+0x90>)
   15aca:	f007 fe74 	bl	1d7b6 <printk>
   15ace:	4040      	eors	r0, r0
   15ad0:	f380 8811 	msr	BASEPRI, r0
   15ad4:	f04f 0003 	mov.w	r0, #3
   15ad8:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   15ada:	4a16      	ldr	r2, [pc, #88]	; (15b34 <ull_slave_ticker_cb+0x94>)
	p.param = &conn->lll;
   15adc:	f104 031c 	add.w	r3, r4, #28
   15ae0:	60d3      	str	r3, [r2, #12]
	mfy.param = &p;
   15ae2:	4b15      	ldr	r3, [pc, #84]	; (15b38 <ull_slave_ticker_cb+0x98>)
	p.lazy = lazy;
   15ae4:	8116      	strh	r6, [r2, #8]
	p.remainder = remainder;
   15ae6:	e9c2 5700 	strd	r5, r7, [r2]
	mfy.param = &p;
   15aea:	609a      	str	r2, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15aec:	2200      	movs	r2, #0
   15aee:	4611      	mov	r1, r2
   15af0:	2001      	movs	r0, #1
   15af2:	f7f9 f84d 	bl	eb90 <mayfly_enqueue>
	LL_ASSERT(!err);
   15af6:	b160      	cbz	r0, 15b12 <ull_slave_ticker_cb+0x72>
   15af8:	f240 1375 	movw	r3, #373	; 0x175
   15afc:	4a0a      	ldr	r2, [pc, #40]	; (15b28 <ull_slave_ticker_cb+0x88>)
   15afe:	490f      	ldr	r1, [pc, #60]	; (15b3c <ull_slave_ticker_cb+0x9c>)
   15b00:	480b      	ldr	r0, [pc, #44]	; (15b30 <ull_slave_ticker_cb+0x90>)
   15b02:	f007 fe58 	bl	1d7b6 <printk>
   15b06:	4040      	eors	r0, r0
   15b08:	f380 8811 	msr	BASEPRI, r0
   15b0c:	f04f 0003 	mov.w	r0, #3
   15b10:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   15b12:	20ff      	movs	r0, #255	; 0xff
   15b14:	f7ff f96a 	bl	14dec <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   15b18:	4620      	mov	r0, r4
   15b1a:	21ff      	movs	r1, #255	; 0xff
}
   15b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   15b20:	f7ff b9aa 	b.w	14e78 <ull_conn_tx_lll_enqueue>
}
   15b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b26:	bf00      	nop
   15b28:	000296ae 	.word	0x000296ae
   15b2c:	00029139 	.word	0x00029139
   15b30:	00027ff4 	.word	0x00027ff4
   15b34:	200014c8 	.word	0x200014c8
   15b38:	2000e274 	.word	0x2000e274
   15b3c:	0002912b 	.word	0x0002912b

00015b40 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   15b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = prepare_param->param;
   15b44:	68c4      	ldr	r4, [r0, #12]

	DEBUG_RADIO_START_S(1);

	/* TODO: Do the below in ULL ?  */

	lazy = prepare_param->lazy;
   15b46:	8903      	ldrh	r3, [r0, #8]

	/* Calc window widening */
	if (lll->role) {
   15b48:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
   15b4c:	2a00      	cmp	r2, #0
{
   15b4e:	4605      	mov	r5, r0
	if (lll->role) {
   15b50:	da09      	bge.n	15b66 <prepare_cb+0x26>
		lll->slave.window_widening_prepare_us +=
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   15b52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		lll->slave.window_widening_prepare_us +=
   15b54:	6b21      	ldr	r1, [r4, #48]	; 0x30
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   15b56:	fb03 2202 	mla	r2, r3, r2, r2
		lll->slave.window_widening_prepare_us +=
   15b5a:	440a      	add	r2, r1
		if (lll->slave.window_widening_prepare_us >
		    lll->slave.window_widening_max_us) {
   15b5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			lll->slave.window_widening_prepare_us =
   15b5e:	4291      	cmp	r1, r2
   15b60:	bf94      	ite	ls
   15b62:	6321      	strls	r1, [r4, #48]	; 0x30
   15b64:	6322      	strhi	r2, [r4, #48]	; 0x30
				lll->slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	lll->latency_prepare += lazy;
   15b66:	8ae2      	ldrh	r2, [r4, #22]
   15b68:	4413      	add	r3, r2

	/* calc current event counter value */
	event_counter = lll->event_counter + lll->latency_prepare;
   15b6a:	8b62      	ldrh	r2, [r4, #26]
	lll->latency_prepare += lazy;
   15b6c:	b29b      	uxth	r3, r3
   15b6e:	82e3      	strh	r3, [r4, #22]
	event_counter = lll->event_counter + lll->latency_prepare;
   15b70:	4413      	add	r3, r2

	/* store the next event counter value */
	lll->event_counter = event_counter + 1;
   15b72:	3301      	adds	r3, #1
   15b74:	8363      	strh	r3, [r4, #26]

	/* TODO: Do the above in ULL ?  */

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   15b76:	f7ff fcc9 	bl	1550c <lll_conn_prepare_reset>

	/* TODO: can we do something in ULL? */
	lll->latency_event = lll->latency_prepare;
	lll->latency_prepare = 0;
   15b7a:	2300      	movs	r3, #0
	lll->latency_event = lll->latency_prepare;
   15b7c:	8ae2      	ldrh	r2, [r4, #22]
	lll->latency_prepare = 0;
   15b7e:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   15b80:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare;
   15b84:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   15b86:	0659      	lsls	r1, r3, #25
   15b88:	f104 061c 	add.w	r6, r4, #28
   15b8c:	f140 808e 	bpl.w	15cac <prepare_cb+0x16c>
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(lll->event_counter - 1,
   15b90:	8b60      	ldrh	r0, [r4, #26]
   15b92:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   15b94:	3801      	subs	r0, #1
   15b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b9a:	4632      	mov	r2, r6
   15b9c:	b280      	uxth	r0, r0
   15b9e:	f7fb ff43 	bl	11a28 <lll_chan_sel_2>
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   15ba2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   15ba6:	4413      	add	r3, r2
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   15ba8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   15baa:	429a      	cmp	r2, r3
   15bac:	bf94      	ite	ls
   15bae:	6362      	strls	r2, [r4, #52]	; 0x34
   15bb0:	6363      	strhi	r3, [r4, #52]	; 0x34
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   15bb2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   15bb6:	f04f 0800 	mov.w	r8, #0
	lll->slave.window_size_event_us +=
   15bba:	4413      	add	r3, r2
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   15bbc:	e9c4 830e 	strd	r8, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   15bc0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   15bc4:	4606      	mov	r6, r0

	/* Start setting up Radio h/w */
	radio_reset();
   15bc6:	f001 f83f 	bl	16c48 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   15bca:	4640      	mov	r0, r8
   15bcc:	f001 f870 	bl	16cb0 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   15bd0:	4620      	mov	r0, r4
   15bd2:	f7ff fcd5 	bl	15580 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   15bd6:	f104 0008 	add.w	r0, r4, #8
   15bda:	f001 f887 	bl	16cec <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((u32_t)lll->crc_init[2] << 16) |
			     ((u32_t)lll->crc_init[1] << 8) |
   15bde:	7b63      	ldrb	r3, [r4, #13]
			    (((u32_t)lll->crc_init[2] << 16) |
   15be0:	7ba1      	ldrb	r1, [r4, #14]
			     ((u32_t)lll->crc_init[1] << 8) |
   15be2:	021b      	lsls	r3, r3, #8
			    (((u32_t)lll->crc_init[2] << 16) |
   15be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)lll->crc_init[0])));
   15be8:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   15bea:	f240 605b 	movw	r0, #1627	; 0x65b
   15bee:	4319      	orrs	r1, r3
   15bf0:	f001 f904 	bl	16dfc <radio_crc_configure>

	lll_chan_set(data_chan_use);
   15bf4:	4630      	mov	r0, r6
   15bf6:	f7fc f9d5 	bl	11fa4 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   15bfa:	4621      	mov	r1, r4
   15bfc:	483b      	ldr	r0, [pc, #236]	; (15cec <prepare_cb+0x1ac>)
   15bfe:	f001 f803 	bl	16c08 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   15c02:	2096      	movs	r0, #150	; 0x96
   15c04:	f001 f9a8 	bl	16f58 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   15c08:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   15c0c:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   15c10:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   15c14:	4641      	mov	r1, r8
   15c16:	f002 0207 	and.w	r2, r2, #7
   15c1a:	f000 0007 	and.w	r0, r0, #7
   15c1e:	f001 f917 	bl	16e50 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   15c22:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   15c24:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   15c26:	4638      	mov	r0, r7
   15c28:	f00c f8bf 	bl	21daa <lll_evt_offset_get>
   15c2c:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   15c2e:	686a      	ldr	r2, [r5, #4]
   15c30:	f106 0109 	add.w	r1, r6, #9
   15c34:	4640      	mov	r0, r8
   15c36:	f001 f99b 	bl	16f70 <radio_tmr_start>
   15c3a:	4681      	mov	r9, r0

	radio_tmr_aa_capture();
   15c3c:	f001 fa26 	bl	1708c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   15c40:	4640      	mov	r0, r8
   15c42:	f001 fa3d 	bl	170c0 <radio_tmr_aa_save>

	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   15c46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	       (lll->slave.window_widening_event_us << 1) +
   15c48:	6b60      	ldr	r0, [r4, #52]	; 0x34
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   15c4a:	f103 0550 	add.w	r5, r3, #80	; 0x50
   15c4e:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   15c52:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   15c56:	2101      	movs	r1, #1
   15c58:	f000 0007 	and.w	r0, r0, #7
   15c5c:	f00c fc8d 	bl	2257a <radio_rx_ready_delay_get>
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   15c60:	444d      	add	r5, r9
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   15c62:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   15c64:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   15c68:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   15c6c:	2802      	cmp	r0, #2
   15c6e:	d028      	beq.n	15cc2 <prepare_cb+0x182>
		return 40;
   15c70:	2804      	cmp	r0, #4
   15c72:	bf0c      	ite	eq
   15c74:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   15c78:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15c7a:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   15c7c:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15c7e:	f00c fc7e 	bl	2257e <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   15c82:	4428      	add	r0, r5
   15c84:	f001 f9f6 	bl	17074 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   15c88:	7c21      	ldrb	r1, [r4, #16]
   15c8a:	3103      	adds	r1, #3
   15c8c:	4632      	mov	r2, r6
   15c8e:	b2c9      	uxtb	r1, r1
   15c90:	4638      	mov	r0, r7
   15c92:	f00c f898 	bl	21dc6 <lll_preempt_calc>
   15c96:	b1b0      	cbz	r0, 15cc6 <prepare_cb+0x186>
			     ticks_at_event)) {
		radio_isr_set(lll_conn_isr_abort, lll);
   15c98:	4621      	mov	r1, r4
   15c9a:	4815      	ldr	r0, [pc, #84]	; (15cf0 <prepare_cb+0x1b0>)
   15c9c:	f000 ffb4 	bl	16c08 <radio_isr_set>
		radio_disable();
   15ca0:	f001 f87a 	bl	16d98 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   15ca4:	2000      	movs	r0, #0
   15ca6:	b003      	add	sp, #12
   15ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   15cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15cb0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   15cb4:	9300      	str	r3, [sp, #0]
   15cb6:	f104 0023 	add.w	r0, r4, #35	; 0x23
   15cba:	4633      	mov	r3, r6
   15cbc:	f00c f831 	bl	21d22 <lll_chan_sel_1>
   15cc0:	e76f      	b.n	15ba2 <prepare_cb+0x62>
		return 24;
   15cc2:	2318      	movs	r3, #24
   15cc4:	e7d9      	b.n	15c7a <prepare_cb+0x13a>
		ret = lll_prepare_done(lll);
   15cc6:	4620      	mov	r0, r4
   15cc8:	f00c f86d 	bl	21da6 <lll_prepare_done>
		LL_ASSERT(!ret);
   15ccc:	2800      	cmp	r0, #0
   15cce:	d0e9      	beq.n	15ca4 <prepare_cb+0x164>
   15cd0:	23ff      	movs	r3, #255	; 0xff
   15cd2:	4a08      	ldr	r2, [pc, #32]	; (15cf4 <prepare_cb+0x1b4>)
   15cd4:	4908      	ldr	r1, [pc, #32]	; (15cf8 <prepare_cb+0x1b8>)
   15cd6:	4809      	ldr	r0, [pc, #36]	; (15cfc <prepare_cb+0x1bc>)
   15cd8:	f007 fd6d 	bl	1d7b6 <printk>
   15cdc:	4040      	eors	r0, r0
   15cde:	f380 8811 	msr	BASEPRI, r0
   15ce2:	f04f 0003 	mov.w	r0, #3
   15ce6:	df02      	svc	2
   15ce8:	e7dc      	b.n	15ca4 <prepare_cb+0x164>
   15cea:	bf00      	nop
   15cec:	000156c1 	.word	0x000156c1
   15cf0:	00022383 	.word	0x00022383
   15cf4:	00029717 	.word	0x00029717
   15cf8:	00029035 	.word	0x00029035
   15cfc:	00027ff4 	.word	0x00027ff4

00015d00 <lll_slave_prepare>:
{
   15d00:	b513      	push	{r0, r1, r4, lr}
   15d02:	4604      	mov	r4, r0
	err = lll_clk_on();
   15d04:	f7fc f93e 	bl	11f84 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   15d08:	b168      	cbz	r0, 15d26 <lll_slave_prepare+0x26>
   15d0a:	3044      	adds	r0, #68	; 0x44
   15d0c:	d00b      	beq.n	15d26 <lll_slave_prepare+0x26>
   15d0e:	2345      	movs	r3, #69	; 0x45
   15d10:	4a11      	ldr	r2, [pc, #68]	; (15d58 <lll_slave_prepare+0x58>)
   15d12:	4912      	ldr	r1, [pc, #72]	; (15d5c <lll_slave_prepare+0x5c>)
   15d14:	4812      	ldr	r0, [pc, #72]	; (15d60 <lll_slave_prepare+0x60>)
   15d16:	f007 fd4e 	bl	1d7b6 <printk>
   15d1a:	4040      	eors	r0, r0
   15d1c:	f380 8811 	msr	BASEPRI, r0
   15d20:	f04f 0003 	mov.w	r0, #3
   15d24:	df02      	svc	2
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   15d26:	9400      	str	r4, [sp, #0]
   15d28:	2300      	movs	r3, #0
   15d2a:	4a0e      	ldr	r2, [pc, #56]	; (15d64 <lll_slave_prepare+0x64>)
   15d2c:	490e      	ldr	r1, [pc, #56]	; (15d68 <lll_slave_prepare+0x68>)
   15d2e:	480f      	ldr	r0, [pc, #60]	; (15d6c <lll_slave_prepare+0x6c>)
   15d30:	f00c f830 	bl	21d94 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   15d34:	b168      	cbz	r0, 15d52 <lll_slave_prepare+0x52>
   15d36:	3044      	adds	r0, #68	; 0x44
   15d38:	d00b      	beq.n	15d52 <lll_slave_prepare+0x52>
   15d3a:	2349      	movs	r3, #73	; 0x49
   15d3c:	4a06      	ldr	r2, [pc, #24]	; (15d58 <lll_slave_prepare+0x58>)
   15d3e:	4907      	ldr	r1, [pc, #28]	; (15d5c <lll_slave_prepare+0x5c>)
   15d40:	4807      	ldr	r0, [pc, #28]	; (15d60 <lll_slave_prepare+0x60>)
   15d42:	f007 fd38 	bl	1d7b6 <printk>
   15d46:	4040      	eors	r0, r0
   15d48:	f380 8811 	msr	BASEPRI, r0
   15d4c:	f04f 0003 	mov.w	r0, #3
   15d50:	df02      	svc	2
}
   15d52:	b002      	add	sp, #8
   15d54:	bd10      	pop	{r4, pc}
   15d56:	bf00      	nop
   15d58:	00029717 	.word	0x00029717
   15d5c:	0002932a 	.word	0x0002932a
   15d60:	00027ff4 	.word	0x00027ff4
   15d64:	00015b41 	.word	0x00015b41
   15d68:	00015531 	.word	0x00015531
   15d6c:	0002237d 	.word	0x0002237d

00015d70 <wl_find>:
		wl[i].taken = 0U;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   15d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d74:	4688      	mov	r8, r1
	int i;

	if (free) {
   15d76:	4615      	mov	r5, r2
   15d78:	b10a      	cbz	r2, 15d7e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   15d7a:	23ff      	movs	r3, #255	; 0xff
   15d7c:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   15d7e:	4f14      	ldr	r7, [pc, #80]	; (15dd0 <wl_find+0x60>)
{
   15d80:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   15d82:	f000 0601 	and.w	r6, r0, #1
   15d86:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   15d8a:	07da      	lsls	r2, r3, #31
   15d8c:	d51c      	bpl.n	15dc8 <wl_find+0x58>
   15d8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15d92:	42b3      	cmp	r3, r6
   15d94:	d113      	bne.n	15dbe <wl_find+0x4e>
   15d96:	480f      	ldr	r0, [pc, #60]	; (15dd4 <wl_find+0x64>)
   15d98:	2206      	movs	r2, #6
   15d9a:	4641      	mov	r1, r8
   15d9c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   15da0:	f009 fc1a 	bl	1f5d8 <memcmp>
   15da4:	b910      	cbnz	r0, 15dac <wl_find+0x3c>
			return i;
   15da6:	b2e0      	uxtb	r0, r4
			*free = i;
		}
	}

	return FILTER_IDX_NONE;
}
   15da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   15dac:	b13d      	cbz	r5, 15dbe <wl_find+0x4e>
   15dae:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   15db2:	07db      	lsls	r3, r3, #31
   15db4:	d403      	bmi.n	15dbe <wl_find+0x4e>
   15db6:	782b      	ldrb	r3, [r5, #0]
   15db8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   15dba:	bf08      	it	eq
   15dbc:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   15dbe:	3401      	adds	r4, #1
   15dc0:	2c08      	cmp	r4, #8
   15dc2:	d1e0      	bne.n	15d86 <wl_find+0x16>
	return FILTER_IDX_NONE;
   15dc4:	20ff      	movs	r0, #255	; 0xff
   15dc6:	e7ef      	b.n	15da8 <wl_find+0x38>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   15dc8:	2d00      	cmp	r5, #0
   15dca:	d1f4      	bne.n	15db6 <wl_find+0x46>
   15dcc:	e7f7      	b.n	15dbe <wl_find+0x4e>
   15dce:	bf00      	nop
   15dd0:	2000a645 	.word	0x2000a645
   15dd4:	2000a647 	.word	0x2000a647

00015dd8 <ll_wl_clear>:
{
   15dd8:	b508      	push	{r3, lr}
	if (ull_adv_filter_pol_get(0)) {
   15dda:	2000      	movs	r0, #0
   15ddc:	f00c f812 	bl	21e04 <ull_adv_filter_pol_get>
   15de0:	bb58      	cbnz	r0, 15e3a <ll_wl_clear+0x62>
		wl[i].taken = 0U;
   15de2:	4b17      	ldr	r3, [pc, #92]	; (15e40 <ll_wl_clear+0x68>)
   15de4:	781a      	ldrb	r2, [r3, #0]
   15de6:	f360 0200 	bfi	r2, r0, #0, #1
   15dea:	701a      	strb	r2, [r3, #0]
   15dec:	7a1a      	ldrb	r2, [r3, #8]
   15dee:	f360 0200 	bfi	r2, r0, #0, #1
   15df2:	721a      	strb	r2, [r3, #8]
   15df4:	7c1a      	ldrb	r2, [r3, #16]
   15df6:	f360 0200 	bfi	r2, r0, #0, #1
   15dfa:	741a      	strb	r2, [r3, #16]
   15dfc:	7e1a      	ldrb	r2, [r3, #24]
   15dfe:	f360 0200 	bfi	r2, r0, #0, #1
   15e02:	761a      	strb	r2, [r3, #24]
   15e04:	f893 2020 	ldrb.w	r2, [r3, #32]
   15e08:	f360 0200 	bfi	r2, r0, #0, #1
   15e0c:	f883 2020 	strb.w	r2, [r3, #32]
   15e10:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   15e14:	f360 0200 	bfi	r2, r0, #0, #1
   15e18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   15e1c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   15e20:	f360 0200 	bfi	r2, r0, #0, #1
   15e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   15e28:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   15e2c:	f360 0200 	bfi	r2, r0, #0, #1
   15e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	wl_anon = 0U;
   15e34:	4b03      	ldr	r3, [pc, #12]	; (15e44 <ll_wl_clear+0x6c>)
   15e36:	7018      	strb	r0, [r3, #0]
}
   15e38:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15e3a:	200c      	movs	r0, #12
   15e3c:	e7fc      	b.n	15e38 <ll_wl_clear+0x60>
   15e3e:	bf00      	nop
   15e40:	2000a645 	.word	0x2000a645
   15e44:	2000a685 	.word	0x2000a685

00015e48 <ll_wl_remove>:
{
   15e48:	b538      	push	{r3, r4, r5, lr}
   15e4a:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   15e4c:	2000      	movs	r0, #0
   15e4e:	f00b ffd9 	bl	21e04 <ull_adv_filter_pol_get>
   15e52:	4604      	mov	r4, r0
   15e54:	bb18      	cbnz	r0, 15e9e <ll_wl_remove+0x56>
	if (addr->type == ADDR_TYPE_ANON) {
   15e56:	7828      	ldrb	r0, [r5, #0]
   15e58:	28ff      	cmp	r0, #255	; 0xff
   15e5a:	d103      	bne.n	15e64 <ll_wl_remove+0x1c>
		wl_anon = 0U;
   15e5c:	4b11      	ldr	r3, [pc, #68]	; (15ea4 <ll_wl_remove+0x5c>)
		return 0;
   15e5e:	4620      	mov	r0, r4
		wl_anon = 0U;
   15e60:	701c      	strb	r4, [r3, #0]
}
   15e62:	bd38      	pop	{r3, r4, r5, pc}
}

static u32_t wl_remove(bt_addr_le_t *id_addr)
{
	/* find the device and mark it as empty */
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   15e64:	4622      	mov	r2, r4
   15e66:	1c69      	adds	r1, r5, #1
   15e68:	f7ff ff82 	bl	15d70 <wl_find>

	if (i < ARRAY_SIZE(wl)) {
   15e6c:	2807      	cmp	r0, #7
   15e6e:	d814      	bhi.n	15e9a <ll_wl_remove+0x52>
		u8_t j = wl[i].rl_idx;
   15e70:	4b0d      	ldr	r3, [pc, #52]	; (15ea8 <ll_wl_remove+0x60>)
   15e72:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   15e76:	7855      	ldrb	r5, [r2, #1]

		if (j < ARRAY_SIZE(rl)) {
   15e78:	2d07      	cmp	r5, #7
   15e7a:	d806      	bhi.n	15e8a <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   15e7c:	2228      	movs	r2, #40	; 0x28
   15e7e:	490b      	ldr	r1, [pc, #44]	; (15eac <ll_wl_remove+0x64>)
   15e80:	436a      	muls	r2, r5
   15e82:	5c8d      	ldrb	r5, [r1, r2]
   15e84:	f364 1545 	bfi	r5, r4, #5, #1
   15e88:	548d      	strb	r5, [r1, r2]
		}
		wl[i].taken = 0U;
   15e8a:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   15e8e:	f36f 0200 	bfc	r2, #0, #1
   15e92:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return wl_remove(addr);
   15e96:	b2e0      	uxtb	r0, r4
   15e98:	e7e3      	b.n	15e62 <ll_wl_remove+0x1a>
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e9a:	2402      	movs	r4, #2
   15e9c:	e7fb      	b.n	15e96 <ll_wl_remove+0x4e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15e9e:	200c      	movs	r0, #12
   15ea0:	e7df      	b.n	15e62 <ll_wl_remove+0x1a>
   15ea2:	bf00      	nop
   15ea4:	2000a685 	.word	0x2000a685
   15ea8:	2000a645 	.word	0x2000a645
   15eac:	200014d8 	.word	0x200014d8

00015eb0 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15eb0:	2807      	cmp	r0, #7
{
   15eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15eb4:	4604      	mov	r4, r0
   15eb6:	460f      	mov	r7, r1
   15eb8:	4616      	mov	r6, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15eba:	d90b      	bls.n	15ed4 <ll_rl_id_addr_get+0x24>
   15ebc:	23ff      	movs	r3, #255	; 0xff
   15ebe:	4a17      	ldr	r2, [pc, #92]	; (15f1c <ll_rl_id_addr_get+0x6c>)
   15ec0:	4917      	ldr	r1, [pc, #92]	; (15f20 <ll_rl_id_addr_get+0x70>)
   15ec2:	4818      	ldr	r0, [pc, #96]	; (15f24 <ll_rl_id_addr_get+0x74>)
   15ec4:	f007 fc77 	bl	1d7b6 <printk>
   15ec8:	4040      	eors	r0, r0
   15eca:	f380 8811 	msr	BASEPRI, r0
   15ece:	f04f 0003 	mov.w	r0, #3
   15ed2:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   15ed4:	2328      	movs	r3, #40	; 0x28
   15ed6:	4d14      	ldr	r5, [pc, #80]	; (15f28 <ll_rl_id_addr_get+0x78>)
   15ed8:	4363      	muls	r3, r4
   15eda:	5ceb      	ldrb	r3, [r5, r3]
   15edc:	07db      	lsls	r3, r3, #31
   15ede:	d40c      	bmi.n	15efa <ll_rl_id_addr_get+0x4a>
   15ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
   15ee4:	4a0d      	ldr	r2, [pc, #52]	; (15f1c <ll_rl_id_addr_get+0x6c>)
   15ee6:	4911      	ldr	r1, [pc, #68]	; (15f2c <ll_rl_id_addr_get+0x7c>)
   15ee8:	480e      	ldr	r0, [pc, #56]	; (15f24 <ll_rl_id_addr_get+0x74>)
   15eea:	f007 fc64 	bl	1d7b6 <printk>
   15eee:	4040      	eors	r0, r0
   15ef0:	f380 8811 	msr	BASEPRI, r0
   15ef4:	f04f 0003 	mov.w	r0, #3
   15ef8:	df02      	svc	2
	*id_addr_type = rl[rl_idx].id_addr_type;
   15efa:	2128      	movs	r1, #40	; 0x28
   15efc:	fb01 f304 	mul.w	r3, r1, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15f00:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   15f04:	5ceb      	ldrb	r3, [r5, r3]
   15f06:	f3c3 1380 	ubfx	r3, r3, #6, #1
   15f0a:	703b      	strb	r3, [r7, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15f0c:	4630      	mov	r0, r6
   15f0e:	2206      	movs	r2, #6
   15f10:	3101      	adds	r1, #1
}
   15f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15f16:	f009 bb6f 	b.w	1f5f8 <memcpy>
   15f1a:	bf00      	nop
   15f1c:	0002976e 	.word	0x0002976e
   15f20:	000297a9 	.word	0x000297a9
   15f24:	00027ff4 	.word	0x00027ff4
   15f28:	200014d8 	.word	0x200014d8
   15f2c:	000297b4 	.word	0x000297b4

00015f30 <ll_rl_clear>:
{
   15f30:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15f32:	2000      	movs	r0, #0
   15f34:	f00b ff5f 	bl	21df6 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   15f38:	bb88      	cbnz	r0, 15f9e <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   15f3a:	4b1a      	ldr	r3, [pc, #104]	; (15fa4 <ll_rl_clear+0x74>)
   15f3c:	781a      	ldrb	r2, [r3, #0]
   15f3e:	f360 0200 	bfi	r2, r0, #0, #1
   15f42:	701a      	strb	r2, [r3, #0]
   15f44:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   15f48:	f360 0200 	bfi	r2, r0, #0, #1
   15f4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   15f50:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   15f54:	f360 0200 	bfi	r2, r0, #0, #1
   15f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   15f5c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   15f60:	f360 0200 	bfi	r2, r0, #0, #1
   15f64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   15f68:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
   15f6c:	f360 0200 	bfi	r2, r0, #0, #1
   15f70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
   15f74:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   15f78:	f360 0200 	bfi	r2, r0, #0, #1
   15f7c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   15f80:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
   15f84:	f360 0200 	bfi	r2, r0, #0, #1
   15f88:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
   15f8c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   15f90:	f360 0200 	bfi	r2, r0, #0, #1
   15f94:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	peer_irk_count = 0U;
   15f98:	4b03      	ldr	r3, [pc, #12]	; (15fa8 <ll_rl_clear+0x78>)
   15f9a:	7018      	strb	r0, [r3, #0]
}
   15f9c:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15f9e:	200c      	movs	r0, #12
   15fa0:	e7fc      	b.n	15f9c <ll_rl_clear+0x6c>
   15fa2:	bf00      	nop
   15fa4:	200014d8 	.word	0x200014d8
   15fa8:	2000a589 	.word	0x2000a589

00015fac <ll_rl_enable>:
{
   15fac:	b510      	push	{r4, lr}
   15fae:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15fb0:	2000      	movs	r0, #0
   15fb2:	f00b ff20 	bl	21df6 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   15fb6:	b960      	cbnz	r0, 15fd2 <ll_rl_enable+0x26>
	switch (enable) {
   15fb8:	b124      	cbz	r4, 15fc4 <ll_rl_enable+0x18>
   15fba:	2c01      	cmp	r4, #1
   15fbc:	d005      	beq.n	15fca <ll_rl_enable+0x1e>
		return BT_HCI_ERR_INVALID_PARAM;
   15fbe:	2412      	movs	r4, #18
}
   15fc0:	4620      	mov	r0, r4
   15fc2:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   15fc4:	4b04      	ldr	r3, [pc, #16]	; (15fd8 <ll_rl_enable+0x2c>)
   15fc6:	701c      	strb	r4, [r3, #0]
		break;
   15fc8:	e7fa      	b.n	15fc0 <ll_rl_enable+0x14>
		rl_enable = 1U;
   15fca:	4b03      	ldr	r3, [pc, #12]	; (15fd8 <ll_rl_enable+0x2c>)
   15fcc:	701c      	strb	r4, [r3, #0]
	return 0;
   15fce:	4604      	mov	r4, r0
		break;
   15fd0:	e7f6      	b.n	15fc0 <ll_rl_enable+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15fd2:	240c      	movs	r4, #12
   15fd4:	e7f4      	b.n	15fc0 <ll_rl_enable+0x14>
   15fd6:	bf00      	nop
   15fd8:	2000a612 	.word	0x2000a612

00015fdc <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   15fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15fe0:	4358      	muls	r0, r3
   15fe2:	4b01      	ldr	r3, [pc, #4]	; (15fe8 <ll_rl_timeout_set+0xc>)
   15fe4:	6018      	str	r0, [r3, #0]
}
   15fe6:	4770      	bx	lr
   15fe8:	20001618 	.word	0x20001618

00015fec <ull_filter_adv_scan_state_cb>:
	if (bm) {
   15fec:	b128      	cbz	r0, 15ffa <ull_filter_adv_scan_state_cb+0xe>
}

static void rpa_refresh_start(void)
{
	BT_DBG("");
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   15fee:	4b04      	ldr	r3, [pc, #16]	; (16000 <ull_filter_adv_scan_state_cb+0x14>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15ff0:	4904      	ldr	r1, [pc, #16]	; (16004 <ull_filter_adv_scan_state_cb+0x18>)
   15ff2:	681a      	ldr	r2, [r3, #0]
   15ff4:	4804      	ldr	r0, [pc, #16]	; (16008 <ull_filter_adv_scan_state_cb+0x1c>)
   15ff6:	f006 bdd1 	b.w	1cb9c <k_delayed_work_submit_to_queue>
}

static void rpa_refresh_stop(void)
{
	k_delayed_work_cancel(&rpa_work);
   15ffa:	4802      	ldr	r0, [pc, #8]	; (16004 <ull_filter_adv_scan_state_cb+0x18>)
   15ffc:	f00f ba3d 	b.w	2547a <k_delayed_work_cancel>
   16000:	20001618 	.word	0x20001618
   16004:	2000161c 	.word	0x2000161c
   16008:	20005fa0 	.word	0x20005fa0

0001600c <ull_filter_adv_update>:
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1600c:	4a03      	ldr	r2, [pc, #12]	; (1601c <ull_filter_adv_update+0x10>)
   1600e:	2300      	movs	r3, #0
   16010:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   16012:	7053      	strb	r3, [r2, #1]
	filter->enable_bitmask = 0;
   16014:	4a02      	ldr	r2, [pc, #8]	; (16020 <ull_filter_adv_update+0x14>)
   16016:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   16018:	7053      	strb	r3, [r2, #1]
}
   1601a:	4770      	bx	lr
   1601c:	2000a686 	.word	0x2000a686
   16020:	2000a613 	.word	0x2000a613

00016024 <ull_filter_adv_pdu_update>:
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16024:	2907      	cmp	r1, #7
{
   16026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1602a:	4607      	mov	r7, r0
   1602c:	460d      	mov	r5, r1
   1602e:	4614      	mov	r4, r2
   16030:	f102 0802 	add.w	r8, r2, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16034:	d83b      	bhi.n	160ae <ull_filter_adv_pdu_update+0x8a>
   16036:	2328      	movs	r3, #40	; 0x28
   16038:	4e2b      	ldr	r6, [pc, #172]	; (160e8 <ull_filter_adv_pdu_update+0xc4>)
   1603a:	434b      	muls	r3, r1
   1603c:	5cf3      	ldrb	r3, [r6, r3]
   1603e:	071a      	lsls	r2, r3, #28
   16040:	d535      	bpl.n	160ae <ull_filter_adv_pdu_update+0x8a>
		LL_ASSERT(rl[idx].rpas_ready);
   16042:	079b      	lsls	r3, r3, #30
   16044:	d40c      	bmi.n	16060 <ull_filter_adv_pdu_update+0x3c>
   16046:	f44f 7318 	mov.w	r3, #608	; 0x260
   1604a:	4a28      	ldr	r2, [pc, #160]	; (160ec <ull_filter_adv_pdu_update+0xc8>)
   1604c:	4928      	ldr	r1, [pc, #160]	; (160f0 <ull_filter_adv_pdu_update+0xcc>)
   1604e:	4829      	ldr	r0, [pc, #164]	; (160f4 <ull_filter_adv_pdu_update+0xd0>)
   16050:	f007 fbb1 	bl	1d7b6 <printk>
   16054:	4040      	eors	r0, r0
   16056:	f380 8811 	msr	BASEPRI, r0
   1605a:	f04f 0003 	mov.w	r0, #3
   1605e:	df02      	svc	2
		pdu->tx_addr = 1;
   16060:	7823      	ldrb	r3, [r4, #0]
   16062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16066:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16068:	2328      	movs	r3, #40	; 0x28
   1606a:	fb03 6605 	mla	r6, r3, r5, r6
   1606e:	2206      	movs	r2, #6
   16070:	6a71      	ldr	r1, [r6, #36]	; 0x24
   16072:	4640      	mov	r0, r8
   16074:	f009 fac0 	bl	1f5f8 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16078:	7823      	ldrb	r3, [r4, #0]
   1607a:	f003 020f 	and.w	r2, r3, #15
   1607e:	2a01      	cmp	r2, #1
   16080:	d12f      	bne.n	160e2 <ull_filter_adv_pdu_update+0xbe>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   16082:	2d07      	cmp	r5, #7
   16084:	f104 0008 	add.w	r0, r4, #8
   16088:	d81f      	bhi.n	160ca <ull_filter_adv_pdu_update+0xa6>
   1608a:	2228      	movs	r2, #40	; 0x28
   1608c:	4916      	ldr	r1, [pc, #88]	; (160e8 <ull_filter_adv_pdu_update+0xc4>)
   1608e:	fb02 f605 	mul.w	r6, r2, r5
   16092:	5d8e      	ldrb	r6, [r1, r6]
   16094:	0776      	lsls	r6, r6, #29
   16096:	d518      	bpl.n	160ca <ull_filter_adv_pdu_update+0xa6>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   16098:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   1609c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   160a0:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   160a2:	2206      	movs	r2, #6
   160a4:	311e      	adds	r1, #30
}
   160a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   160aa:	f009 baa5 	b.w	1f5f8 <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   160ae:	f897 00da 	ldrb.w	r0, [r7, #218]	; 0xda
   160b2:	7823      	ldrb	r3, [r4, #0]
   160b4:	f000 0003 	and.w	r0, r0, #3
   160b8:	f360 1386 	bfi	r3, r0, #6, #1
   160bc:	7023      	strb	r3, [r4, #0]
		ll_addr_get(adv->own_addr_type & 0x1, adva);
   160be:	4641      	mov	r1, r8
   160c0:	f000 0001 	and.w	r0, r0, #1
   160c4:	f7f9 faae 	bl	f624 <ll_addr_get>
   160c8:	e7d6      	b.n	16078 <ull_filter_adv_pdu_update+0x54>
			pdu->rx_addr = adv->id_addr_type;
   160ca:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
   160ce:	7822      	ldrb	r2, [r4, #0]
   160d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
   160d4:	f363 12c7 	bfi	r2, r3, #7, #1
   160d8:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   160da:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
   160de:	2206      	movs	r2, #6
   160e0:	e7e1      	b.n	160a6 <ull_filter_adv_pdu_update+0x82>
}
   160e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160e6:	bf00      	nop
   160e8:	200014d8 	.word	0x200014d8
   160ec:	0002976e 	.word	0x0002976e
   160f0:	000297d8 	.word	0x000297d8
   160f4:	00027ff4 	.word	0x00027ff4

000160f8 <ull_filter_rl_find>:
{
   160f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   160fc:	468a      	mov	sl, r1
	if (free) {
   160fe:	4614      	mov	r4, r2
   16100:	b10a      	cbz	r2, 16106 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   16102:	23ff      	movs	r3, #255	; 0xff
   16104:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16106:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16160 <ull_filter_rl_find+0x68>
{
   1610a:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1610c:	f000 0801 	and.w	r8, r0, #1
   16110:	2628      	movs	r6, #40	; 0x28
   16112:	436e      	muls	r6, r5
   16114:	b2ef      	uxtb	r7, r5
   16116:	f819 3006 	ldrb.w	r3, [r9, r6]
   1611a:	07da      	lsls	r2, r3, #31
   1611c:	d51a      	bpl.n	16154 <ull_filter_rl_find+0x5c>
   1611e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16122:	4543      	cmp	r3, r8
   16124:	d10f      	bne.n	16146 <ull_filter_rl_find+0x4e>
   16126:	480d      	ldr	r0, [pc, #52]	; (1615c <ull_filter_rl_find+0x64>)
   16128:	2206      	movs	r2, #6
   1612a:	4651      	mov	r1, sl
   1612c:	4430      	add	r0, r6
   1612e:	f009 fa53 	bl	1f5d8 <memcmp>
   16132:	b160      	cbz	r0, 1614e <ull_filter_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16134:	b13c      	cbz	r4, 16146 <ull_filter_rl_find+0x4e>
   16136:	f819 3006 	ldrb.w	r3, [r9, r6]
   1613a:	07db      	lsls	r3, r3, #31
   1613c:	d403      	bmi.n	16146 <ull_filter_rl_find+0x4e>
   1613e:	7823      	ldrb	r3, [r4, #0]
   16140:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   16142:	bf08      	it	eq
   16144:	7027      	strbeq	r7, [r4, #0]
   16146:	3501      	adds	r5, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16148:	2d08      	cmp	r5, #8
   1614a:	d1e1      	bne.n	16110 <ull_filter_rl_find+0x18>
	return FILTER_IDX_NONE;
   1614c:	27ff      	movs	r7, #255	; 0xff
}
   1614e:	4638      	mov	r0, r7
   16150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16154:	2c00      	cmp	r4, #0
   16156:	d1f2      	bne.n	1613e <ull_filter_rl_find+0x46>
   16158:	e7f5      	b.n	16146 <ull_filter_rl_find+0x4e>
   1615a:	bf00      	nop
   1615c:	200014d9 	.word	0x200014d9
   16160:	200014d8 	.word	0x200014d8

00016164 <ll_wl_add>:
{
   16164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16168:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   1616a:	2000      	movs	r0, #0
   1616c:	f00b fe4a 	bl	21e04 <ull_adv_filter_pol_get>
   16170:	4604      	mov	r4, r0
   16172:	2800      	cmp	r0, #0
   16174:	d143      	bne.n	161fe <ll_wl_add+0x9a>
	if (addr->type == ADDR_TYPE_ANON) {
   16176:	7838      	ldrb	r0, [r7, #0]
   16178:	28ff      	cmp	r0, #255	; 0xff
   1617a:	d106      	bne.n	1618a <ll_wl_add+0x26>
		wl_anon = 1U;
   1617c:	4b21      	ldr	r3, [pc, #132]	; (16204 <ll_wl_add+0xa0>)
   1617e:	2201      	movs	r2, #1
   16180:	701a      	strb	r2, [r3, #0]
		return 0;
   16182:	4620      	mov	r0, r4
}
   16184:	b002      	add	sp, #8
   16186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1618a:	f107 0801 	add.w	r8, r7, #1
   1618e:	f10d 0207 	add.w	r2, sp, #7
   16192:	4641      	mov	r1, r8
   16194:	f7ff fdec 	bl	15d70 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   16198:	2807      	cmp	r0, #7
   1619a:	d929      	bls.n	161f0 <ll_wl_add+0x8c>
	} else if (j >= ARRAY_SIZE(wl)) {
   1619c:	f89d 6007 	ldrb.w	r6, [sp, #7]
   161a0:	2e07      	cmp	r6, #7
   161a2:	d82a      	bhi.n	161fa <ll_wl_add+0x96>
	wl[i].id_addr_type = id_addr->type & 0x1;
   161a4:	4d18      	ldr	r5, [pc, #96]	; (16208 <ll_wl_add+0xa4>)
   161a6:	783a      	ldrb	r2, [r7, #0]
   161a8:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   161ac:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   161b0:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   161b4:	4641      	mov	r1, r8
   161b6:	2206      	movs	r2, #6
   161b8:	3002      	adds	r0, #2
   161ba:	f805 3036 	strb.w	r3, [r5, r6, lsl #3]
   161be:	f009 fa1b 	bl	1f5f8 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   161c2:	4622      	mov	r2, r4
   161c4:	4641      	mov	r1, r8
   161c6:	7838      	ldrb	r0, [r7, #0]
   161c8:	f7ff ff96 	bl	160f8 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   161cc:	00f3      	lsls	r3, r6, #3
   161ce:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   161d0:	442b      	add	r3, r5
	if (j < ARRAY_SIZE(rl)) {
   161d2:	d80f      	bhi.n	161f4 <ll_wl_add+0x90>
		wl[i].rl_idx = j;
   161d4:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1U;
   161d6:	2328      	movs	r3, #40	; 0x28
   161d8:	4a0c      	ldr	r2, [pc, #48]	; (1620c <ll_wl_add+0xa8>)
   161da:	4358      	muls	r0, r3
   161dc:	5c13      	ldrb	r3, [r2, r0]
   161de:	f043 0320 	orr.w	r3, r3, #32
   161e2:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1U;
   161e4:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   161e8:	f043 0301 	orr.w	r3, r3, #1
   161ec:	f805 3036 	strb.w	r3, [r5, r6, lsl #3]
	return wl_add(addr);
   161f0:	b2e0      	uxtb	r0, r4
   161f2:	e7c7      	b.n	16184 <ll_wl_add+0x20>
		wl[i].rl_idx = FILTER_IDX_NONE;
   161f4:	22ff      	movs	r2, #255	; 0xff
   161f6:	705a      	strb	r2, [r3, #1]
   161f8:	e7f4      	b.n	161e4 <ll_wl_add+0x80>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   161fa:	2407      	movs	r4, #7
   161fc:	e7f8      	b.n	161f0 <ll_wl_add+0x8c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   161fe:	200c      	movs	r0, #12
   16200:	e7c0      	b.n	16184 <ll_wl_add+0x20>
   16202:	bf00      	nop
   16204:	2000a685 	.word	0x2000a685
   16208:	2000a645 	.word	0x2000a645
   1620c:	200014d8 	.word	0x200014d8

00016210 <ll_rl_add>:
{
   16210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16214:	4680      	mov	r8, r0
   16216:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16218:	2000      	movs	r0, #0
{
   1621a:	4689      	mov	r9, r1
   1621c:	4692      	mov	sl, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1621e:	f00b fdea 	bl	21df6 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16222:	2800      	cmp	r0, #0
   16224:	f040 8086 	bne.w	16334 <ll_rl_add+0x124>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   16228:	4647      	mov	r7, r8
   1622a:	f10d 020f 	add.w	r2, sp, #15
   1622e:	f817 0b01 	ldrb.w	r0, [r7], #1
   16232:	4639      	mov	r1, r7
   16234:	f7ff ff60 	bl	160f8 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16238:	2807      	cmp	r0, #7
   1623a:	d97d      	bls.n	16338 <ll_rl_add+0x128>
	} else if (j >= ARRAY_SIZE(rl)) {
   1623c:	f89d 500f 	ldrb.w	r5, [sp, #15]
   16240:	2d07      	cmp	r5, #7
   16242:	d87b      	bhi.n	1633c <ll_rl_add+0x12c>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16244:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
   16248:	4c3d      	ldr	r4, [pc, #244]	; (16340 <ll_rl_add+0x130>)
   1624a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   1624e:	2628      	movs	r6, #40	; 0x28
   16250:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16252:	f10b 0001 	add.w	r0, fp, #1
   16256:	2206      	movs	r2, #6
   16258:	4639      	mov	r1, r7
   1625a:	4420      	add	r0, r4
   1625c:	f009 f9cc 	bl	1f5f8 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   16260:	f898 1000 	ldrb.w	r1, [r8]
   16264:	5da3      	ldrb	r3, [r4, r6]
   16266:	19a2      	adds	r2, r4, r6
   16268:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   1626c:	4648      	mov	r0, r9
   1626e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   16270:	9201      	str	r2, [sp, #4]
   16272:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   16274:	f00b fb33 	bl	218de <mem_nz>
   16278:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   1627a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   1627c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   16280:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   16282:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   16284:	f00b fb2b 	bl	218de <mem_nz>
   16288:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   1628a:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   1628c:	f000 0001 	and.w	r0, r0, #1
   16290:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   16294:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   16298:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   1629a:	d137      	bne.n	1630c <ll_rl_add+0xfc>
	if (rl[i].lirk) {
   1629c:	b158      	cbz	r0, 162b6 <ll_rl_add+0xa6>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1629e:	f10b 0007 	add.w	r0, fp, #7
   162a2:	2210      	movs	r2, #16
   162a4:	4651      	mov	r1, sl
   162a6:	4420      	add	r0, r4
   162a8:	f009 f9a6 	bl	1f5f8 <memcpy>
		rl[i].local_rpa = NULL;
   162ac:	2328      	movs	r3, #40	; 0x28
   162ae:	fb03 4305 	mla	r3, r3, r5, r4
   162b2:	2200      	movs	r2, #0
   162b4:	625a      	str	r2, [r3, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   162b6:	2628      	movs	r6, #40	; 0x28
   162b8:	436e      	muls	r6, r5
   162ba:	f10b 0018 	add.w	r0, fp, #24
   162be:	2206      	movs	r2, #6
   162c0:	2100      	movs	r1, #0
   162c2:	4420      	add	r0, r4
   162c4:	f009 f9c2 	bl	1f64c <memset>
	rl[i].rpas_ready = 0U;
   162c8:	5da3      	ldrb	r3, [r4, r6]
   162ca:	f023 0312 	bic.w	r3, r3, #18
   162ce:	55a3      	strb	r3, [r4, r6]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   162d0:	2200      	movs	r2, #0
   162d2:	4639      	mov	r1, r7
   162d4:	f898 0000 	ldrb.w	r0, [r8]
   162d8:	f7ff fd4a 	bl	15d70 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   162dc:	2807      	cmp	r0, #7
   162de:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   162e0:	bf9d      	ittte	ls
   162e2:	4a18      	ldrls	r2, [pc, #96]	; (16344 <ll_rl_add+0x134>)
		rl[i].wl = 1U;
   162e4:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   162e8:	eb02 02c0 	addls.w	r2, r2, r0, lsl #3
		rl[i].wl = 0U;
   162ec:	f36f 1345 	bfchi	r3, #5, #1
   162f0:	55a3      	strb	r3, [r4, r6]
	rl[i].taken = 1U;
   162f2:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   162f6:	bf98      	it	ls
   162f8:	7055      	strbls	r5, [r2, #1]
	rl[i].taken = 1U;
   162fa:	435d      	muls	r5, r3
	return 0;
   162fc:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   162fe:	5d63      	ldrb	r3, [r4, r5]
   16300:	f043 0301 	orr.w	r3, r3, #1
   16304:	5563      	strb	r3, [r4, r5]
}
   16306:	b005      	add	sp, #20
   16308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1630c:	4b0e      	ldr	r3, [pc, #56]	; (16348 <ll_rl_add+0x138>)
   1630e:	7819      	ldrb	r1, [r3, #0]
   16310:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   16312:	4a0e      	ldr	r2, [pc, #56]	; (1634c <ll_rl_add+0x13c>)
   16314:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   16316:	1c4a      	adds	r2, r1, #1
   16318:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
   1631a:	4b0d      	ldr	r3, [pc, #52]	; (16350 <ll_rl_add+0x140>)
   1631c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   16320:	f109 0210 	add.w	r2, r9, #16
   16324:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   16326:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   1632a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1632e:	454a      	cmp	r2, r9
   16330:	d1f9      	bne.n	16326 <ll_rl_add+0x116>
   16332:	e7b3      	b.n	1629c <ll_rl_add+0x8c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16334:	200c      	movs	r0, #12
   16336:	e7e6      	b.n	16306 <ll_rl_add+0xf6>
		return BT_HCI_ERR_INVALID_PARAM;
   16338:	2012      	movs	r0, #18
   1633a:	e7e4      	b.n	16306 <ll_rl_add+0xf6>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1633c:	2007      	movs	r0, #7
   1633e:	e7e2      	b.n	16306 <ll_rl_add+0xf6>
   16340:	200014d8 	.word	0x200014d8
   16344:	2000a645 	.word	0x2000a645
   16348:	2000a589 	.word	0x2000a589
   1634c:	2000a58a 	.word	0x2000a58a
   16350:	2000a592 	.word	0x2000a592

00016354 <ll_rl_remove>:
{
   16354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16358:	4683      	mov	fp, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1635a:	2000      	movs	r0, #0
   1635c:	f00b fd4b 	bl	21df6 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16360:	4606      	mov	r6, r0
   16362:	2800      	cmp	r0, #0
   16364:	d156      	bne.n	16414 <ll_rl_remove+0xc0>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16366:	46d8      	mov	r8, fp
   16368:	4632      	mov	r2, r6
   1636a:	f818 0b01 	ldrb.w	r0, [r8], #1
   1636e:	4641      	mov	r1, r8
   16370:	f7ff fec2 	bl	160f8 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16374:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16376:	4682      	mov	sl, r0
	if (i < ARRAY_SIZE(rl)) {
   16378:	d84e      	bhi.n	16418 <ll_rl_remove+0xc4>
		if (rl[i].pirk) {
   1637a:	2328      	movs	r3, #40	; 0x28
   1637c:	fb03 f200 	mul.w	r2, r3, r0
   16380:	4c26      	ldr	r4, [pc, #152]	; (1641c <ll_rl_remove+0xc8>)
   16382:	18a1      	adds	r1, r4, r2
   16384:	5ca2      	ldrb	r2, [r4, r2]
   16386:	0753      	lsls	r3, r2, #29
   16388:	d527      	bpl.n	163da <ll_rl_remove+0x86>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1638a:	4f25      	ldr	r7, [pc, #148]	; (16420 <ll_rl_remove+0xcc>)
   1638c:	783d      	ldrb	r5, [r7, #0]
   1638e:	3d01      	subs	r5, #1
			if (pj && pi != pj) {
   16390:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   16394:	d01e      	beq.n	163d4 <ll_rl_remove+0x80>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   16396:	f891 9017 	ldrb.w	r9, [r1, #23]
			if (pj && pi != pj) {
   1639a:	45a9      	cmp	r9, r5
   1639c:	d01a      	beq.n	163d4 <ll_rl_remove+0x80>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   1639e:	4821      	ldr	r0, [pc, #132]	; (16424 <ll_rl_remove+0xd0>)
   163a0:	2210      	movs	r2, #16
   163a2:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   163a6:	eb00 1009 	add.w	r0, r0, r9, lsl #4
   163aa:	f009 f925 	bl	1f5f8 <memcpy>
					if (rl[k].taken && rl[k].pirk &&
   163ae:	2328      	movs	r3, #40	; 0x28
   163b0:	fb03 f106 	mul.w	r1, r3, r6
   163b4:	1862      	adds	r2, r4, r1
   163b6:	5c61      	ldrb	r1, [r4, r1]
   163b8:	f011 0f01 	tst.w	r1, #1
   163bc:	b2f0      	uxtb	r0, r6
   163be:	d025      	beq.n	1640c <ll_rl_remove+0xb8>
   163c0:	0749      	lsls	r1, r1, #29
   163c2:	d523      	bpl.n	1640c <ll_rl_remove+0xb8>
   163c4:	7dd1      	ldrb	r1, [r2, #23]
   163c6:	42a9      	cmp	r1, r5
   163c8:	d120      	bne.n	1640c <ll_rl_remove+0xb8>
						peer_irk_rl_ids[pi] = k;
   163ca:	4b17      	ldr	r3, [pc, #92]	; (16428 <ll_rl_remove+0xd4>)
						rl[k].pirk_idx = pi;
   163cc:	f882 9017 	strb.w	r9, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   163d0:	f803 0009 	strb.w	r0, [r3, r9]
			peer_irk_count--;
   163d4:	783b      	ldrb	r3, [r7, #0]
   163d6:	3b01      	subs	r3, #1
   163d8:	703b      	strb	r3, [r7, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   163da:	2200      	movs	r2, #0
   163dc:	4641      	mov	r1, r8
   163de:	f89b 0000 	ldrb.w	r0, [fp]
   163e2:	f7ff fcc5 	bl	15d70 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   163e6:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   163e8:	bf9c      	itt	ls
   163ea:	4b10      	ldrls	r3, [pc, #64]	; (1642c <ll_rl_remove+0xd8>)
   163ec:	eb03 03c0 	addls.w	r3, r3, r0, lsl #3
		rl[i].taken = 0U;
   163f0:	f04f 0028 	mov.w	r0, #40	; 0x28
   163f4:	fb00 f00a 	mul.w	r0, r0, sl
			wl[j].rl_idx = FILTER_IDX_NONE;
   163f8:	bf9c      	itt	ls
   163fa:	22ff      	movls	r2, #255	; 0xff
   163fc:	705a      	strbls	r2, [r3, #1]
		rl[i].taken = 0U;
   163fe:	5c23      	ldrb	r3, [r4, r0]
   16400:	f36f 0300 	bfc	r3, #0, #1
   16404:	5423      	strb	r3, [r4, r0]
		return 0;
   16406:	2000      	movs	r0, #0
}
   16408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1640c:	3601      	adds	r6, #1
				for (k = 0U;
   1640e:	2e08      	cmp	r6, #8
   16410:	d1ce      	bne.n	163b0 <ll_rl_remove+0x5c>
   16412:	e7df      	b.n	163d4 <ll_rl_remove+0x80>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16414:	200c      	movs	r0, #12
   16416:	e7f7      	b.n	16408 <ll_rl_remove+0xb4>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16418:	2002      	movs	r0, #2
   1641a:	e7f5      	b.n	16408 <ll_rl_remove+0xb4>
   1641c:	200014d8 	.word	0x200014d8
   16420:	2000a589 	.word	0x2000a589
   16424:	2000a592 	.word	0x2000a592
   16428:	2000a58a 	.word	0x2000a58a
   1642c:	2000a645 	.word	0x2000a645

00016430 <ll_rl_crpa_set>:
{
   16430:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   16432:	795c      	ldrb	r4, [r3, #5]
   16434:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   16438:	2c40      	cmp	r4, #64	; 0x40
{
   1643a:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1643c:	d117      	bne.n	1646e <ll_rl_crpa_set+0x3e>
		if (id_addr) {
   1643e:	b119      	cbz	r1, 16448 <ll_rl_crpa_set+0x18>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   16440:	2200      	movs	r2, #0
   16442:	f7ff fe59 	bl	160f8 <ull_filter_rl_find>
   16446:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   16448:	2a07      	cmp	r2, #7
   1644a:	d810      	bhi.n	1646e <ll_rl_crpa_set+0x3e>
   1644c:	2128      	movs	r1, #40	; 0x28
   1644e:	4c08      	ldr	r4, [pc, #32]	; (16470 <ll_rl_crpa_set+0x40>)
   16450:	fb01 f302 	mul.w	r3, r1, r2
   16454:	5ce3      	ldrb	r3, [r4, r3]
   16456:	07db      	lsls	r3, r3, #31
   16458:	d509      	bpl.n	1646e <ll_rl_crpa_set+0x3e>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1645a:	2018      	movs	r0, #24
   1645c:	fb11 0002 	smlabb	r0, r1, r2, r0
   16460:	4420      	add	r0, r4
   16462:	4629      	mov	r1, r5
   16464:	2206      	movs	r2, #6
}
   16466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1646a:	f009 b8c5 	b.w	1f5f8 <memcpy>
}
   1646e:	bd70      	pop	{r4, r5, r6, pc}
   16470:	200014d8 	.word	0x200014d8

00016474 <ll_rl_crpa_get>:
{
   16474:	b538      	push	{r3, r4, r5, lr}
   16476:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16478:	4601      	mov	r1, r0
   1647a:	2200      	movs	r2, #0
   1647c:	f811 0b01 	ldrb.w	r0, [r1], #1
   16480:	f7ff fe3a 	bl	160f8 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   16484:	2807      	cmp	r0, #7
   16486:	d901      	bls.n	1648c <ll_rl_crpa_get+0x18>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16488:	2002      	movs	r0, #2
}
   1648a:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1648c:	2428      	movs	r4, #40	; 0x28
   1648e:	2318      	movs	r3, #24
   16490:	fb14 3000 	smlabb	r0, r4, r0, r3
   16494:	4c07      	ldr	r4, [pc, #28]	; (164b4 <ll_rl_crpa_get+0x40>)
   16496:	4404      	add	r4, r0
   16498:	2106      	movs	r1, #6
   1649a:	4620      	mov	r0, r4
   1649c:	f00b fa1f 	bl	218de <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   164a0:	2800      	cmp	r0, #0
   164a2:	d0f1      	beq.n	16488 <ll_rl_crpa_get+0x14>
   164a4:	2206      	movs	r2, #6
   164a6:	4621      	mov	r1, r4
   164a8:	4628      	mov	r0, r5
   164aa:	f009 f8a5 	bl	1f5f8 <memcpy>
		return 0;
   164ae:	2000      	movs	r0, #0
   164b0:	e7eb      	b.n	1648a <ll_rl_crpa_get+0x16>
   164b2:	bf00      	nop
   164b4:	200014d8 	.word	0x200014d8

000164b8 <ll_rl_lrpa_get>:
{
   164b8:	b510      	push	{r4, lr}
   164ba:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   164bc:	4601      	mov	r1, r0
   164be:	2200      	movs	r2, #0
   164c0:	f811 0b01 	ldrb.w	r0, [r1], #1
   164c4:	f7ff fe18 	bl	160f8 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   164c8:	2807      	cmp	r0, #7
   164ca:	d80a      	bhi.n	164e2 <ll_rl_lrpa_get+0x2a>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   164cc:	4b06      	ldr	r3, [pc, #24]	; (164e8 <ll_rl_lrpa_get+0x30>)
   164ce:	2228      	movs	r2, #40	; 0x28
   164d0:	fb02 3000 	mla	r0, r2, r0, r3
   164d4:	2206      	movs	r2, #6
   164d6:	6a41      	ldr	r1, [r0, #36]	; 0x24
   164d8:	4620      	mov	r0, r4
   164da:	f009 f88d 	bl	1f5f8 <memcpy>
		return 0;
   164de:	2000      	movs	r0, #0
}
   164e0:	bd10      	pop	{r4, pc}
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   164e2:	2002      	movs	r0, #2
   164e4:	e7fc      	b.n	164e0 <ll_rl_lrpa_get+0x28>
   164e6:	bf00      	nop
   164e8:	200014d8 	.word	0x200014d8

000164ec <ll_priv_mode_set>:
{
   164ec:	b570      	push	{r4, r5, r6, lr}
   164ee:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   164f0:	2000      	movs	r0, #0
{
   164f2:	460c      	mov	r4, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   164f4:	f00b fc7f 	bl	21df6 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   164f8:	4606      	mov	r6, r0
   164fa:	b9f0      	cbnz	r0, 1653a <ll_priv_mode_set+0x4e>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   164fc:	4629      	mov	r1, r5
   164fe:	4632      	mov	r2, r6
   16500:	f811 0b01 	ldrb.w	r0, [r1], #1
   16504:	f7ff fdf8 	bl	160f8 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16508:	2807      	cmp	r0, #7
   1650a:	d818      	bhi.n	1653e <ll_priv_mode_set+0x52>
		switch (mode) {
   1650c:	b124      	cbz	r4, 16518 <ll_priv_mode_set+0x2c>
   1650e:	2c01      	cmp	r4, #1
   16510:	d00a      	beq.n	16528 <ll_priv_mode_set+0x3c>
			return BT_HCI_ERR_INVALID_PARAM;
   16512:	2412      	movs	r4, #18
}
   16514:	4620      	mov	r0, r4
   16516:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   16518:	2328      	movs	r3, #40	; 0x28
   1651a:	4a0a      	ldr	r2, [pc, #40]	; (16544 <ll_priv_mode_set+0x58>)
   1651c:	4358      	muls	r0, r3
   1651e:	5c13      	ldrb	r3, [r2, r0]
   16520:	f364 1304 	bfi	r3, r4, #4, #1
   16524:	5413      	strb	r3, [r2, r0]
			break;
   16526:	e7f5      	b.n	16514 <ll_priv_mode_set+0x28>
			rl[i].dev = 1U;
   16528:	2328      	movs	r3, #40	; 0x28
   1652a:	4a06      	ldr	r2, [pc, #24]	; (16544 <ll_priv_mode_set+0x58>)
   1652c:	4358      	muls	r0, r3
	return 0;
   1652e:	4634      	mov	r4, r6
			rl[i].dev = 1U;
   16530:	5c13      	ldrb	r3, [r2, r0]
   16532:	f043 0310 	orr.w	r3, r3, #16
   16536:	5413      	strb	r3, [r2, r0]
			break;
   16538:	e7ec      	b.n	16514 <ll_priv_mode_set+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1653a:	240c      	movs	r4, #12
   1653c:	e7ea      	b.n	16514 <ll_priv_mode_set+0x28>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1653e:	2402      	movs	r4, #2
   16540:	e7e8      	b.n	16514 <ll_priv_mode_set+0x28>
   16542:	bf00      	nop
   16544:	200014d8 	.word	0x200014d8

00016548 <ull_filter_rpa_update>:
{
   16548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1654c:	b087      	sub	sp, #28
   1654e:	9000      	str	r0, [sp, #0]
	return z_impl_k_uptime_get();
   16550:	f00e ffec 	bl	2552c <z_impl_k_uptime_get>
	bool all = timeout || (rpa_last_ms == -1) ||
   16554:	9b00      	ldr	r3, [sp, #0]
   16556:	4680      	mov	r8, r0
   16558:	468a      	mov	sl, r1
   1655a:	2b00      	cmp	r3, #0
   1655c:	f040 80d5 	bne.w	1670a <ull_filter_rpa_update+0x1c2>
   16560:	4b6b      	ldr	r3, [pc, #428]	; (16710 <ull_filter_rpa_update+0x1c8>)
   16562:	e9d3 2300 	ldrd	r2, r3, [r3]
   16566:	1c59      	adds	r1, r3, #1
   16568:	bf08      	it	eq
   1656a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1656e:	f000 80cc 	beq.w	1670a <ull_filter_rpa_update+0x1c2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   16572:	ebb8 0402 	subs.w	r4, r8, r2
   16576:	eb6a 0503 	sbc.w	r5, sl, r3
   1657a:	4b66      	ldr	r3, [pc, #408]	; (16714 <ull_filter_rpa_update+0x1cc>)
   1657c:	681a      	ldr	r2, [r3, #0]
   1657e:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   16580:	4294      	cmp	r4, r2
   16582:	eb75 0303 	sbcs.w	r3, r5, r3
   16586:	bfac      	ite	ge
   16588:	2701      	movge	r7, #1
   1658a:	2700      	movlt	r7, #0
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1658c:	4d62      	ldr	r5, [pc, #392]	; (16718 <ull_filter_rpa_update+0x1d0>)
				LL_ASSERT(!err);
   1658e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 16728 <ull_filter_rpa_update+0x1e0>
   16592:	f8df b198 	ldr.w	fp, [pc, #408]	; 1672c <ull_filter_rpa_update+0x1e4>
	bool all = timeout || (rpa_last_ms == -1) ||
   16596:	2400      	movs	r4, #0
   16598:	462e      	mov	r6, r5
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1659a:	2328      	movs	r3, #40	; 0x28
   1659c:	4363      	muls	r3, r4
   1659e:	5cf3      	ldrb	r3, [r6, r3]
   165a0:	07da      	lsls	r2, r3, #31
   165a2:	d551      	bpl.n	16648 <ull_filter_rpa_update+0x100>
   165a4:	b90f      	cbnz	r7, 165aa <ull_filter_rpa_update+0x62>
   165a6:	0798      	lsls	r0, r3, #30
   165a8:	d44e      	bmi.n	16648 <ull_filter_rpa_update+0x100>
			if (rl[i].pirk) {
   165aa:	2328      	movs	r3, #40	; 0x28
   165ac:	4363      	muls	r3, r4
   165ae:	5cf3      	ldrb	r3, [r6, r3]
   165b0:	0759      	lsls	r1, r3, #29
   165b2:	d51f      	bpl.n	165f4 <ull_filter_rpa_update+0xac>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   165b4:	7dea      	ldrb	r2, [r5, #23]
   165b6:	4b59      	ldr	r3, [pc, #356]	; (1671c <ull_filter_rpa_update+0x1d4>)
   165b8:	a902      	add	r1, sp, #8
   165ba:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   165be:	f103 0210 	add.w	r2, r3, #16
   165c2:	4608      	mov	r0, r1
		*pdst++ = *psrc--;
   165c4:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   165c8:	f801 cb01 	strb.w	ip, [r1], #1
	for (; length > 0; length--) {
   165cc:	429a      	cmp	r2, r3
   165ce:	d1f9      	bne.n	165c4 <ull_filter_rpa_update+0x7c>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   165d0:	f105 011e 	add.w	r1, r5, #30
   165d4:	f009 fa83 	bl	1fade <bt_rpa_create>
				LL_ASSERT(!err);
   165d8:	b160      	cbz	r0, 165f4 <ull_filter_rpa_update+0xac>
   165da:	f240 232a 	movw	r3, #554	; 0x22a
   165de:	464a      	mov	r2, r9
   165e0:	4659      	mov	r1, fp
   165e2:	484f      	ldr	r0, [pc, #316]	; (16720 <ull_filter_rpa_update+0x1d8>)
   165e4:	f007 f8e7 	bl	1d7b6 <printk>
   165e8:	4040      	eors	r0, r0
   165ea:	f380 8811 	msr	BASEPRI, r0
   165ee:	f04f 0003 	mov.w	r0, #3
   165f2:	df02      	svc	2
			if (rl[i].lirk) {
   165f4:	2328      	movs	r3, #40	; 0x28
   165f6:	4363      	muls	r3, r4
   165f8:	5cf3      	ldrb	r3, [r6, r3]
   165fa:	071a      	lsls	r2, r3, #28
   165fc:	d51e      	bpl.n	1663c <ull_filter_rpa_update+0xf4>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   165fe:	a902      	add	r1, sp, #8
   16600:	1de8      	adds	r0, r5, #7
   16602:	f009 fa6c 	bl	1fade <bt_rpa_create>
				LL_ASSERT(!err);
   16606:	b160      	cbz	r0, 16622 <ull_filter_rpa_update+0xda>
   16608:	f240 2337 	movw	r3, #567	; 0x237
   1660c:	464a      	mov	r2, r9
   1660e:	4659      	mov	r1, fp
   16610:	4843      	ldr	r0, [pc, #268]	; (16720 <ull_filter_rpa_update+0x1d8>)
   16612:	f007 f8d0 	bl	1d7b6 <printk>
   16616:	4040      	eors	r0, r0
   16618:	f380 8811 	msr	BASEPRI, r0
   1661c:	f04f 0003 	mov.w	r0, #3
   16620:	df02      	svc	2
				rl[i].local_rpa = &rpa;
   16622:	ab02      	add	r3, sp, #8
   16624:	626b      	str	r3, [r5, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   16626:	4b3f      	ldr	r3, [pc, #252]	; (16724 <ull_filter_rpa_update+0x1dc>)
   16628:	2206      	movs	r2, #6
   1662a:	fb02 3304 	mla	r3, r2, r4, r3
   1662e:	4618      	mov	r0, r3
   16630:	a902      	add	r1, sp, #8
   16632:	9301      	str	r3, [sp, #4]
   16634:	f008 ffe0 	bl	1f5f8 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   16638:	9b01      	ldr	r3, [sp, #4]
   1663a:	626b      	str	r3, [r5, #36]	; 0x24
			rl[i].rpas_ready = 1U;
   1663c:	2328      	movs	r3, #40	; 0x28
   1663e:	4363      	muls	r3, r4
   16640:	5cf2      	ldrb	r2, [r6, r3]
   16642:	f042 0202 	orr.w	r2, r2, #2
   16646:	54f2      	strb	r2, [r6, r3]
   16648:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1664a:	2c08      	cmp	r4, #8
   1664c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   16650:	d1a3      	bne.n	1659a <ull_filter_rpa_update+0x52>
	if (all) {
   16652:	b117      	cbz	r7, 1665a <ull_filter_rpa_update+0x112>
		rpa_last_ms = now;
   16654:	4b2e      	ldr	r3, [pc, #184]	; (16710 <ull_filter_rpa_update+0x1c8>)
   16656:	e9c3 8a00 	strd	r8, sl, [r3]
	if (timeout) {
   1665a:	9b00      	ldr	r3, [sp, #0]
   1665c:	2b00      	cmp	r3, #0
   1665e:	d051      	beq.n	16704 <ull_filter_rpa_update+0x1bc>
		adv = ull_adv_is_enabled_get(0);
   16660:	2000      	movs	r0, #0
   16662:	f7fb ffc5 	bl	125f0 <ull_adv_is_enabled_get>
		if (adv) {
   16666:	4605      	mov	r5, r0
   16668:	2800      	cmp	r0, #0
   1666a:	d04b      	beq.n	16704 <ull_filter_rpa_update+0x1bc>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1666c:	f890 00da 	ldrb.w	r0, [r0, #218]	; 0xda
   16670:	0783      	lsls	r3, r0, #30
   16672:	d547      	bpl.n	16704 <ull_filter_rpa_update+0x1bc>
	rl_idx = ull_filter_rl_find(adv->id_addr_type, adv->id_addr, NULL);
   16674:	f105 01dc 	add.w	r1, r5, #220	; 0xdc
   16678:	2200      	movs	r2, #0
   1667a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1667e:	f7ff fd3b 	bl	160f8 <ull_filter_rl_find>
	if (rl_idx >= ARRAY_SIZE(rl)) {
   16682:	2807      	cmp	r0, #7
	rl_idx = ull_filter_rl_find(adv->id_addr_type, adv->id_addr, NULL);
   16684:	4601      	mov	r1, r0
	if (rl_idx >= ARRAY_SIZE(rl)) {
   16686:	d83d      	bhi.n	16704 <ull_filter_rpa_update+0x1bc>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16688:	f895 402c 	ldrb.w	r4, [r5, #44]	; 0x2c
   1668c:	2311      	movs	r3, #17
   1668e:	2627      	movs	r6, #39	; 0x27
   16690:	fb16 3604 	smlabb	r6, r6, r4, r3
	if (pdu->first == pdu->last) {
   16694:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16698:	f105 0c1c 	add.w	ip, r5, #28
	if (pdu->first == pdu->last) {
   1669c:	42a3      	cmp	r3, r4
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1669e:	eb0c 0906 	add.w	r9, ip, r6
	if (pdu->first == pdu->last) {
   166a2:	d104      	bne.n	166ae <ull_filter_rpa_update+0x166>
		last = pdu->last + 1;
   166a4:	3401      	adds	r4, #1
   166a6:	b2e4      	uxtb	r4, r4
			last = 0U;
   166a8:	2c02      	cmp	r4, #2
   166aa:	bf08      	it	eq
   166ac:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
   166ae:	2027      	movs	r0, #39	; 0x27
   166b0:	2302      	movs	r3, #2
   166b2:	fb10 3304 	smlabb	r3, r0, r4, r3
   166b6:	f105 022b 	add.w	r2, r5, #43	; 0x2b
	pdu->type = prev->type;
   166ba:	f81c 0006 	ldrb.w	r0, [ip, r6]
   166be:	5cd7      	ldrb	r7, [r2, r3]
   166c0:	f360 0703 	bfi	r7, r0, #0, #4
	pdu->rfu = 0;
   166c4:	f36f 1704 	bfc	r7, #4, #1
   166c8:	54d7      	strb	r7, [r2, r3]
		pdu->chan_sel = prev->chan_sel;
   166ca:	f81c 6006 	ldrb.w	r6, [ip, r6]
   166ce:	b2f8      	uxtb	r0, r7
   166d0:	f3c6 1640 	ubfx	r6, r6, #5, #1
   166d4:	eb02 0803 	add.w	r8, r2, r3
   166d8:	f366 1045 	bfi	r0, r6, #5, #1
   166dc:	54d0      	strb	r0, [r2, r3]
	ull_filter_adv_pdu_update(adv, rl_idx, pdu);
   166de:	4642      	mov	r2, r8
   166e0:	4628      	mov	r0, r5
   166e2:	f7ff fc9f 	bl	16024 <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
   166e6:	f899 2001 	ldrb.w	r2, [r9, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   166ea:	f109 0108 	add.w	r1, r9, #8
   166ee:	3a06      	subs	r2, #6
   166f0:	f108 0008 	add.w	r0, r8, #8
   166f4:	f008 ff80 	bl	1f5f8 <memcpy>
	pdu->len = prev->len;
   166f8:	f899 3001 	ldrb.w	r3, [r9, #1]
   166fc:	f888 3001 	strb.w	r3, [r8, #1]
	pdu->last = idx;
   16700:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
   16704:	b007      	add	sp, #28
   16706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool all = timeout || (rpa_last_ms == -1) ||
   1670a:	2701      	movs	r7, #1
   1670c:	e73e      	b.n	1658c <ull_filter_rpa_update+0x44>
   1670e:	bf00      	nop
   16710:	20000008 	.word	0x20000008
   16714:	20001618 	.word	0x20001618
   16718:	200014d8 	.word	0x200014d8
   1671c:	2000a592 	.word	0x2000a592
   16720:	00027ff4 	.word	0x00027ff4
   16724:	2000a559 	.word	0x2000a559
   16728:	0002976e 	.word	0x0002976e
   1672c:	0002912b 	.word	0x0002912b

00016730 <rpa_timeout>:
{
   16730:	b508      	push	{r3, lr}
	ull_filter_rpa_update(true);
   16732:	2001      	movs	r0, #1
   16734:	f7ff ff08 	bl	16548 <ull_filter_rpa_update>
   16738:	4b03      	ldr	r3, [pc, #12]	; (16748 <rpa_timeout+0x18>)
   1673a:	4904      	ldr	r1, [pc, #16]	; (1674c <rpa_timeout+0x1c>)
   1673c:	681a      	ldr	r2, [r3, #0]
   1673e:	4804      	ldr	r0, [pc, #16]	; (16750 <rpa_timeout+0x20>)
}
   16740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16744:	f006 ba2a 	b.w	1cb9c <k_delayed_work_submit_to_queue>
   16748:	20001618 	.word	0x20001618
   1674c:	2000161c 	.word	0x2000161c
   16750:	20005fa0 	.word	0x20005fa0

00016754 <ull_filter_reset>:
	wl_anon = 0U;
   16754:	4a39      	ldr	r2, [pc, #228]	; (1683c <ull_filter_reset+0xe8>)
   16756:	2300      	movs	r3, #0
{
   16758:	b430      	push	{r4, r5}
	wl_anon = 0U;
   1675a:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0U;
   1675c:	4a38      	ldr	r2, [pc, #224]	; (16840 <ull_filter_reset+0xec>)
   1675e:	7811      	ldrb	r1, [r2, #0]
   16760:	f363 0100 	bfi	r1, r3, #0, #1
   16764:	7011      	strb	r1, [r2, #0]
   16766:	7a11      	ldrb	r1, [r2, #8]
   16768:	f363 0100 	bfi	r1, r3, #0, #1
   1676c:	7211      	strb	r1, [r2, #8]
   1676e:	7c11      	ldrb	r1, [r2, #16]
   16770:	f363 0100 	bfi	r1, r3, #0, #1
   16774:	7411      	strb	r1, [r2, #16]
   16776:	7e11      	ldrb	r1, [r2, #24]
   16778:	f363 0100 	bfi	r1, r3, #0, #1
   1677c:	7611      	strb	r1, [r2, #24]
   1677e:	f892 1020 	ldrb.w	r1, [r2, #32]
   16782:	f363 0100 	bfi	r1, r3, #0, #1
   16786:	f882 1020 	strb.w	r1, [r2, #32]
   1678a:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   1678e:	f363 0100 	bfi	r1, r3, #0, #1
   16792:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   16796:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   1679a:	f363 0100 	bfi	r1, r3, #0, #1
   1679e:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
   167a2:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   167a6:	f363 0100 	bfi	r1, r3, #0, #1
   167aa:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
	rl_enable = 0U;
   167ae:	4a25      	ldr	r2, [pc, #148]	; (16844 <ull_filter_reset+0xf0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   167b0:	4925      	ldr	r1, [pc, #148]	; (16848 <ull_filter_reset+0xf4>)
	rl_enable = 0U;
   167b2:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   167b4:	4a25      	ldr	r2, [pc, #148]	; (1684c <ull_filter_reset+0xf8>)
   167b6:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   167b8:	4a25      	ldr	r2, [pc, #148]	; (16850 <ull_filter_reset+0xfc>)
   167ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   167be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   167c2:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0U;
   167c6:	4a23      	ldr	r2, [pc, #140]	; (16854 <ull_filter_reset+0x100>)
   167c8:	7811      	ldrb	r1, [r2, #0]
   167ca:	f363 0100 	bfi	r1, r3, #0, #1
   167ce:	7011      	strb	r1, [r2, #0]
   167d0:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   167d4:	f363 0100 	bfi	r1, r3, #0, #1
   167d8:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   167dc:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   167e0:	f363 0100 	bfi	r1, r3, #0, #1
   167e4:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
   167e8:	f892 1078 	ldrb.w	r1, [r2, #120]	; 0x78
   167ec:	f363 0100 	bfi	r1, r3, #0, #1
   167f0:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
   167f4:	f892 10a0 	ldrb.w	r1, [r2, #160]	; 0xa0
   167f8:	f363 0100 	bfi	r1, r3, #0, #1
   167fc:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
   16800:	f892 10c8 	ldrb.w	r1, [r2, #200]	; 0xc8
   16804:	f363 0100 	bfi	r1, r3, #0, #1
   16808:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
   1680c:	f892 10f0 	ldrb.w	r1, [r2, #240]	; 0xf0
   16810:	f363 0100 	bfi	r1, r3, #0, #1
   16814:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
   16818:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
   1681c:	f363 0100 	bfi	r1, r3, #0, #1
   16820:	f882 1118 	strb.w	r1, [r2, #280]	; 0x118
	peer_irk_count = 0U;
   16824:	4a0c      	ldr	r2, [pc, #48]	; (16858 <ull_filter_reset+0x104>)
   16826:	7013      	strb	r3, [r2, #0]
	if (init) {
   16828:	b120      	cbz	r0, 16834 <ull_filter_reset+0xe0>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1682a:	490c      	ldr	r1, [pc, #48]	; (1685c <ull_filter_reset+0x108>)
   1682c:	480c      	ldr	r0, [pc, #48]	; (16860 <ull_filter_reset+0x10c>)
}
   1682e:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   16830:	f00e be1b 	b.w	2546a <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   16834:	480a      	ldr	r0, [pc, #40]	; (16860 <ull_filter_reset+0x10c>)
}
   16836:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   16838:	f00e be1f 	b.w	2547a <k_delayed_work_cancel>
   1683c:	2000a685 	.word	0x2000a685
   16840:	2000a645 	.word	0x2000a645
   16844:	2000a612 	.word	0x2000a612
   16848:	000dbba0 	.word	0x000dbba0
   1684c:	20001618 	.word	0x20001618
   16850:	20000008 	.word	0x20000008
   16854:	200014d8 	.word	0x200014d8
   16858:	2000a589 	.word	0x2000a589
   1685c:	00016731 	.word	0x00016731
   16860:	2000161c 	.word	0x2000161c

00016864 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   16864:	4b02      	ldr	r3, [pc, #8]	; (16870 <ull_filter_lll_irks_get+0xc>)
   16866:	781b      	ldrb	r3, [r3, #0]
   16868:	7003      	strb	r3, [r0, #0]
}
   1686a:	4802      	ldr	r0, [pc, #8]	; (16874 <ull_filter_lll_irks_get+0x10>)
   1686c:	4770      	bx	lr
   1686e:	bf00      	nop
   16870:	2000a589 	.word	0x2000a589
   16874:	2000a592 	.word	0x2000a592

00016878 <ull_filter_lll_rl_irk_idx>:
{
   16878:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1687a:	4b1c      	ldr	r3, [pc, #112]	; (168ec <ull_filter_lll_rl_irk_idx+0x74>)
   1687c:	781b      	ldrb	r3, [r3, #0]
   1687e:	4283      	cmp	r3, r0
{
   16880:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   16882:	d80c      	bhi.n	1689e <ull_filter_lll_rl_irk_idx+0x26>
   16884:	f240 23cd 	movw	r3, #717	; 0x2cd
   16888:	4a19      	ldr	r2, [pc, #100]	; (168f0 <ull_filter_lll_rl_irk_idx+0x78>)
   1688a:	491a      	ldr	r1, [pc, #104]	; (168f4 <ull_filter_lll_rl_irk_idx+0x7c>)
   1688c:	481a      	ldr	r0, [pc, #104]	; (168f8 <ull_filter_lll_rl_irk_idx+0x80>)
   1688e:	f006 ff92 	bl	1d7b6 <printk>
   16892:	4040      	eors	r0, r0
   16894:	f380 8811 	msr	BASEPRI, r0
   16898:	f04f 0003 	mov.w	r0, #3
   1689c:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1689e:	4b17      	ldr	r3, [pc, #92]	; (168fc <ull_filter_lll_rl_irk_idx+0x84>)
   168a0:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   168a2:	2c07      	cmp	r4, #7
   168a4:	d90c      	bls.n	168c0 <ull_filter_lll_rl_irk_idx+0x48>
   168a6:	f240 23cf 	movw	r3, #719	; 0x2cf
   168aa:	4a11      	ldr	r2, [pc, #68]	; (168f0 <ull_filter_lll_rl_irk_idx+0x78>)
   168ac:	4914      	ldr	r1, [pc, #80]	; (16900 <ull_filter_lll_rl_irk_idx+0x88>)
   168ae:	4812      	ldr	r0, [pc, #72]	; (168f8 <ull_filter_lll_rl_irk_idx+0x80>)
   168b0:	f006 ff81 	bl	1d7b6 <printk>
   168b4:	4040      	eors	r0, r0
   168b6:	f380 8811 	msr	BASEPRI, r0
   168ba:	f04f 0003 	mov.w	r0, #3
   168be:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   168c0:	2328      	movs	r3, #40	; 0x28
   168c2:	4363      	muls	r3, r4
   168c4:	4a0f      	ldr	r2, [pc, #60]	; (16904 <ull_filter_lll_rl_irk_idx+0x8c>)
   168c6:	5cd3      	ldrb	r3, [r2, r3]
   168c8:	07db      	lsls	r3, r3, #31
   168ca:	d40c      	bmi.n	168e6 <ull_filter_lll_rl_irk_idx+0x6e>
   168cc:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   168d0:	4a07      	ldr	r2, [pc, #28]	; (168f0 <ull_filter_lll_rl_irk_idx+0x78>)
   168d2:	490d      	ldr	r1, [pc, #52]	; (16908 <ull_filter_lll_rl_irk_idx+0x90>)
   168d4:	4808      	ldr	r0, [pc, #32]	; (168f8 <ull_filter_lll_rl_irk_idx+0x80>)
   168d6:	f006 ff6e 	bl	1d7b6 <printk>
   168da:	4040      	eors	r0, r0
   168dc:	f380 8811 	msr	BASEPRI, r0
   168e0:	f04f 0003 	mov.w	r0, #3
   168e4:	df02      	svc	2
}
   168e6:	4620      	mov	r0, r4
   168e8:	bd10      	pop	{r4, pc}
   168ea:	bf00      	nop
   168ec:	2000a589 	.word	0x2000a589
   168f0:	0002976e 	.word	0x0002976e
   168f4:	00029953 	.word	0x00029953
   168f8:	00027ff4 	.word	0x00027ff4
   168fc:	2000a58a 	.word	0x2000a58a
   16900:	00029970 	.word	0x00029970
   16904:	200014d8 	.word	0x200014d8
   16908:	00029947 	.word	0x00029947

0001690c <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1690c:	2807      	cmp	r0, #7
{
   1690e:	b538      	push	{r3, r4, r5, lr}
   16910:	4605      	mov	r5, r0
	if (rl_idx >= ARRAY_SIZE(rl)) {
   16912:	d818      	bhi.n	16946 <ull_filter_lll_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   16914:	2228      	movs	r2, #40	; 0x28
   16916:	4c0d      	ldr	r4, [pc, #52]	; (1694c <ull_filter_lll_irk_whitelisted+0x40>)
   16918:	4342      	muls	r2, r0
   1691a:	5ca2      	ldrb	r2, [r4, r2]
   1691c:	07d3      	lsls	r3, r2, #31
   1691e:	d40c      	bmi.n	1693a <ull_filter_lll_irk_whitelisted+0x2e>
   16920:	f240 23db 	movw	r3, #731	; 0x2db
   16924:	4a0a      	ldr	r2, [pc, #40]	; (16950 <ull_filter_lll_irk_whitelisted+0x44>)
   16926:	490b      	ldr	r1, [pc, #44]	; (16954 <ull_filter_lll_irk_whitelisted+0x48>)
   16928:	480b      	ldr	r0, [pc, #44]	; (16958 <ull_filter_lll_irk_whitelisted+0x4c>)
   1692a:	f006 ff44 	bl	1d7b6 <printk>
   1692e:	4040      	eors	r0, r0
   16930:	f380 8811 	msr	BASEPRI, r0
   16934:	f04f 0003 	mov.w	r0, #3
   16938:	df02      	svc	2
	return rl[rl_idx].wl;
   1693a:	2028      	movs	r0, #40	; 0x28
   1693c:	4368      	muls	r0, r5
   1693e:	5c20      	ldrb	r0, [r4, r0]
   16940:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   16944:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   16946:	2000      	movs	r0, #0
   16948:	e7fc      	b.n	16944 <ull_filter_lll_irk_whitelisted+0x38>
   1694a:	bf00      	nop
   1694c:	200014d8 	.word	0x200014d8
   16950:	0002976e 	.word	0x0002976e
   16954:	000297b4 	.word	0x000297b4
   16958:	00027ff4 	.word	0x00027ff4

0001695c <ull_filter_lll_get>:
}
   1695c:	4a03      	ldr	r2, [pc, #12]	; (1696c <ull_filter_lll_get+0x10>)
   1695e:	4b04      	ldr	r3, [pc, #16]	; (16970 <ull_filter_lll_get+0x14>)
   16960:	2800      	cmp	r0, #0
   16962:	bf0c      	ite	eq
   16964:	4610      	moveq	r0, r2
   16966:	4618      	movne	r0, r3
   16968:	4770      	bx	lr
   1696a:	bf00      	nop
   1696c:	2000a613 	.word	0x2000a613
   16970:	2000a686 	.word	0x2000a686

00016974 <ull_filter_lll_rl_addr_allowed>:
{
   16974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   16978:	4b1a      	ldr	r3, [pc, #104]	; (169e4 <ull_filter_lll_rl_addr_allowed+0x70>)
   1697a:	781b      	ldrb	r3, [r3, #0]
   1697c:	b383      	cbz	r3, 169e0 <ull_filter_lll_rl_addr_allowed+0x6c>
   1697e:	7813      	ldrb	r3, [r2, #0]
   16980:	2bff      	cmp	r3, #255	; 0xff
   16982:	d12d      	bne.n	169e0 <ull_filter_lll_rl_addr_allowed+0x6c>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   16984:	4e18      	ldr	r6, [pc, #96]	; (169e8 <ull_filter_lll_rl_addr_allowed+0x74>)
   16986:	2300      	movs	r3, #0
   16988:	f04f 0828 	mov.w	r8, #40	; 0x28
   1698c:	46b4      	mov	ip, r6
   1698e:	f106 0906 	add.w	r9, r6, #6
   16992:	fb08 f403 	mul.w	r4, r8, r3
   16996:	fa5f fe83 	uxtb.w	lr, r3
   1699a:	5d37      	ldrb	r7, [r6, r4]
   1699c:	f017 0f01 	tst.w	r7, #1
   169a0:	eb06 0504 	add.w	r5, r6, r4
   169a4:	d019      	beq.n	169da <ull_filter_lll_rl_addr_allowed+0x66>
   169a6:	f3c7 1780 	ubfx	r7, r7, #6, #1
   169aa:	4287      	cmp	r7, r0
   169ac:	d115      	bne.n	169da <ull_filter_lll_rl_addr_allowed+0x66>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   169ae:	1e4f      	subs	r7, r1, #1
   169b0:	444c      	add	r4, r9
				if (addr[j] != id_addr[j]) {
   169b2:	f815 bf01 	ldrb.w	fp, [r5, #1]!
   169b6:	f817 af01 	ldrb.w	sl, [r7, #1]!
   169ba:	45d3      	cmp	fp, sl
   169bc:	d10d      	bne.n	169da <ull_filter_lll_rl_addr_allowed+0x66>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   169be:	42a5      	cmp	r5, r4
   169c0:	d1f7      	bne.n	169b2 <ull_filter_lll_rl_addr_allowed+0x3e>
				*rl_idx = i;
   169c2:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   169c6:	2228      	movs	r2, #40	; 0x28
   169c8:	4353      	muls	r3, r2
   169ca:	f81c 0003 	ldrb.w	r0, [ip, r3]
   169ce:	0743      	lsls	r3, r0, #29
   169d0:	d506      	bpl.n	169e0 <ull_filter_lll_rl_addr_allowed+0x6c>
   169d2:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   169d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169da:	3301      	adds	r3, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   169dc:	2b08      	cmp	r3, #8
   169de:	d1d8      	bne.n	16992 <ull_filter_lll_rl_addr_allowed+0x1e>
				return !rl[i].pirk || rl[i].dev;
   169e0:	2001      	movs	r0, #1
   169e2:	e7f8      	b.n	169d6 <ull_filter_lll_rl_addr_allowed+0x62>
   169e4:	2000a612 	.word	0x2000a612
   169e8:	200014d8 	.word	0x200014d8

000169ec <ull_filter_lll_rl_enabled>:
	return rl_enable;
   169ec:	4b02      	ldr	r3, [pc, #8]	; (169f8 <ull_filter_lll_rl_enabled+0xc>)
   169ee:	7818      	ldrb	r0, [r3, #0]
}
   169f0:	3000      	adds	r0, #0
   169f2:	bf18      	it	ne
   169f4:	2001      	movne	r0, #1
   169f6:	4770      	bx	lr
   169f8:	2000a612 	.word	0x2000a612

000169fc <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   169fc:	4b05      	ldr	r3, [pc, #20]	; (16a14 <cntr_init+0x18>)
   169fe:	2200      	movs	r2, #0
   16a00:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   16a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16a08:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   16a0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   16a10:	4770      	bx	lr
   16a12:	bf00      	nop
   16a14:	4000b000 	.word	0x4000b000

00016a18 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   16a18:	4a04      	ldr	r2, [pc, #16]	; (16a2c <cntr_start+0x14>)
   16a1a:	7813      	ldrb	r3, [r2, #0]
   16a1c:	1c59      	adds	r1, r3, #1
   16a1e:	7011      	strb	r1, [r2, #0]
   16a20:	2001      	movs	r0, #1
   16a22:	b913      	cbnz	r3, 16a2a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   16a24:	4a02      	ldr	r2, [pc, #8]	; (16a30 <cntr_start+0x18>)
   16a26:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   16a28:	4618      	mov	r0, r3
}
   16a2a:	4770      	bx	lr
   16a2c:	2000a6b8 	.word	0x2000a6b8
   16a30:	4000b000 	.word	0x4000b000

00016a34 <cntr_stop>:

u32_t cntr_stop(void)
{
   16a34:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   16a36:	4c0d      	ldr	r4, [pc, #52]	; (16a6c <cntr_stop+0x38>)
   16a38:	7823      	ldrb	r3, [r4, #0]
   16a3a:	b95b      	cbnz	r3, 16a54 <cntr_stop+0x20>
   16a3c:	232e      	movs	r3, #46	; 0x2e
   16a3e:	4a0c      	ldr	r2, [pc, #48]	; (16a70 <cntr_stop+0x3c>)
   16a40:	490c      	ldr	r1, [pc, #48]	; (16a74 <cntr_stop+0x40>)
   16a42:	480d      	ldr	r0, [pc, #52]	; (16a78 <cntr_stop+0x44>)
   16a44:	f006 feb7 	bl	1d7b6 <printk>
   16a48:	4040      	eors	r0, r0
   16a4a:	f380 8811 	msr	BASEPRI, r0
   16a4e:	f04f 0003 	mov.w	r0, #3
   16a52:	df02      	svc	2

	if (--_refcount) {
   16a54:	7820      	ldrb	r0, [r4, #0]
   16a56:	3801      	subs	r0, #1
   16a58:	b2c0      	uxtb	r0, r0
   16a5a:	7020      	strb	r0, [r4, #0]
   16a5c:	2301      	movs	r3, #1
   16a5e:	b910      	cbnz	r0, 16a66 <cntr_stop+0x32>
   16a60:	4a06      	ldr	r2, [pc, #24]	; (16a7c <cntr_stop+0x48>)
   16a62:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   16a64:	bd10      	pop	{r4, pc}
		return 1;
   16a66:	4618      	mov	r0, r3
   16a68:	e7fc      	b.n	16a64 <cntr_stop+0x30>
   16a6a:	bf00      	nop
   16a6c:	2000a6b8 	.word	0x2000a6b8
   16a70:	00029976 	.word	0x00029976
   16a74:	000299bb 	.word	0x000299bb
   16a78:	00027ff4 	.word	0x00027ff4
   16a7c:	4000b004 	.word	0x4000b004

00016a80 <cntr_cnt_get>:
     return p_reg->COUNTER;
   16a80:	4b01      	ldr	r3, [pc, #4]	; (16a88 <cntr_cnt_get+0x8>)
   16a82:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   16a86:	4770      	bx	lr
   16a88:	4000b000 	.word	0x4000b000

00016a8c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   16a8c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   16a90:	4b01      	ldr	r3, [pc, #4]	; (16a98 <cntr_cmp_set+0xc>)
   16a92:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   16a96:	4770      	bx	lr
   16a98:	4000b000 	.word	0x4000b000

00016a9c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   16a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   16a9e:	4b13      	ldr	r3, [pc, #76]	; (16aec <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16aa0:	4c13      	ldr	r4, [pc, #76]	; (16af0 <do_ecb+0x54>)
   16aa2:	2501      	movs	r5, #1
{
   16aa4:	4684      	mov	ip, r0
   16aa6:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   16aa8:	2700      	movs	r7, #0
   16aaa:	46a6      	mov	lr, r4
   16aac:	461a      	mov	r2, r3
   16aae:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   16ab0:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   16ab4:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   16ab8:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   16abc:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   16abe:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   16ac2:	b931      	cbnz	r1, 16ad2 <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   16ac4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   16ac8:	b919      	cbnz	r1, 16ad2 <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   16aca:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   16ace:	2900      	cmp	r1, #0
   16ad0:	d1f5      	bne.n	16abe <do_ecb+0x22>
   16ad2:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   16ad6:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   16ada:	2900      	cmp	r1, #0
   16adc:	d1e7      	bne.n	16aae <do_ecb+0x12>
   16ade:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   16ae2:	2800      	cmp	r0, #0
   16ae4:	d0e3      	beq.n	16aae <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   16ae6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   16aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16aec:	4000e000 	.word	0x4000e000
   16af0:	4000e004 	.word	0x4000e004

00016af4 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   16af4:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   16af6:	4b08      	ldr	r3, [pc, #32]	; (16b18 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   16af8:	bf14      	ite	ne
   16afa:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   16afe:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   16b02:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   16b06:	bf14      	ite	ne
   16b08:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   16b0c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   16b10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   16b14:	4770      	bx	lr
   16b16:	bf00      	nop
   16b18:	4001f000 	.word	0x4001f000

00016b1c <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   16b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   16b1e:	4e2d      	ldr	r6, [pc, #180]	; (16bd4 <sw_switch.isra.10+0xb8>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16b20:	4f2d      	ldr	r7, [pc, #180]	; (16bd8 <sw_switch.isra.10+0xbc>)
   16b22:	7835      	ldrb	r5, [r6, #0]
   16b24:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 16be4 <sw_switch.isra.10+0xc8>
   16b28:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   16b2c:	b22b      	sxth	r3, r5
   16b2e:	00dc      	lsls	r4, r3, #3
   16b30:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   16b34:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16b38:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
   16b3c:	f105 040b 	add.w	r4, r5, #11
   16b40:	b2e4      	uxtb	r4, r4
   16b42:	00e4      	lsls	r4, r4, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   16b44:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   16b48:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   16b4c:	3fc0      	subs	r7, #192	; 0xc0
   16b4e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   16b52:	eb07 0783 	add.w	r7, r7, r3, lsl #2

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16b56:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   16b5a:	2800      	cmp	r0, #0
   16b5c:	d034      	beq.n	16bc8 <sw_switch.isra.10+0xac>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   16b5e:	f649 4740 	movw	r7, #40000	; 0x9c40
   16b62:	f24a 005a 	movw	r0, #41050	; 0xa05a
   16b66:	2a02      	cmp	r2, #2
   16b68:	bf08      	it	eq
   16b6a:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   16b6c:	f242 42b8 	movw	r2, #9400	; 0x24b8
   16b70:	f241 574a 	movw	r7, #5450	; 0x154a
   16b74:	2902      	cmp	r1, #2
   16b76:	bf14      	ite	ne
   16b78:	4611      	movne	r1, r2
   16b7a:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   16b7c:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   16b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16b84:	4401      	add	r1, r0
   16b86:	fbb1 f1f2 	udiv	r1, r1, r2

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16b8a:	4a14      	ldr	r2, [pc, #80]	; (16bdc <sw_switch.isra.10+0xc0>)
   16b8c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   16b90:	009b      	lsls	r3, r3, #2
   16b92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16b96:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   16b9a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   16b9e:	428a      	cmp	r2, r1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
   16ba0:	bf8b      	itete	hi
   16ba2:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   16ba6:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   16ba8:	1a51      	subhi	r1, r2, r1
   16baa:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   16bae:	bf88      	it	hi
   16bb0:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   16bb4:	4b08      	ldr	r3, [pc, #32]	; (16bd8 <sw_switch.isra.10+0xbc>)
   16bb6:	f44f 6290 	mov.w	r2, #1152	; 0x480
   16bba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   16bbe:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   16bc0:	f003 0301 	and.w	r3, r3, #1
   16bc4:	7033      	strb	r3, [r6, #0]
}
   16bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16bc8:	4a05      	ldr	r2, [pc, #20]	; (16be0 <sw_switch.isra.10+0xc4>)
   16bca:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   16bce:	2129      	movs	r1, #41	; 0x29
   16bd0:	e7de      	b.n	16b90 <sw_switch.isra.10+0x74>
   16bd2:	bf00      	nop
   16bd4:	2000a6b9 	.word	0x2000a6b9
   16bd8:	4001f000 	.word	0x4001f000
   16bdc:	40001000 	.word	0x40001000
   16be0:	40001004 	.word	0x40001004
   16be4:	4000110c 	.word	0x4000110c

00016be8 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   16be8:	4b04      	ldr	r3, [pc, #16]	; (16bfc <isr_radio+0x14>)
   16bea:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   16bee:	b123      	cbz	r3, 16bfa <isr_radio+0x12>
		isr_cb(isr_cb_param);
   16bf0:	4b03      	ldr	r3, [pc, #12]	; (16c00 <isr_radio+0x18>)
   16bf2:	4a04      	ldr	r2, [pc, #16]	; (16c04 <isr_radio+0x1c>)
   16bf4:	681b      	ldr	r3, [r3, #0]
   16bf6:	6810      	ldr	r0, [r2, #0]
   16bf8:	4718      	bx	r3
}
   16bfa:	4770      	bx	lr
   16bfc:	40001000 	.word	0x40001000
   16c00:	20001854 	.word	0x20001854
   16c04:	20001858 	.word	0x20001858

00016c08 <radio_isr_set>:
{
   16c08:	b538      	push	{r3, r4, r5, lr}
   16c0a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   16c0c:	2001      	movs	r0, #1
{
   16c0e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   16c10:	f7ed fe56 	bl	48c0 <arch_irq_disable>
	isr_cb_param = param;
   16c14:	4b08      	ldr	r3, [pc, #32]	; (16c38 <radio_isr_set+0x30>)
   16c16:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   16c18:	4b08      	ldr	r3, [pc, #32]	; (16c3c <radio_isr_set+0x34>)
   16c1a:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16c1c:	4b08      	ldr	r3, [pc, #32]	; (16c40 <radio_isr_set+0x38>)
   16c1e:	2210      	movs	r2, #16
   16c20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16c24:	4b07      	ldr	r3, [pc, #28]	; (16c44 <radio_isr_set+0x3c>)
   16c26:	2202      	movs	r2, #2
   16c28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   16c2c:	2001      	movs	r0, #1
}
   16c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   16c32:	f7ed be35 	b.w	48a0 <arch_irq_enable>
   16c36:	bf00      	nop
   16c38:	20001858 	.word	0x20001858
   16c3c:	20001854 	.word	0x20001854
   16c40:	40001000 	.word	0x40001000
   16c44:	e000e100 	.word	0xe000e100

00016c48 <radio_reset>:
{
   16c48:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   16c4a:	2001      	movs	r0, #1
   16c4c:	f7ed fe38 	bl	48c0 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   16c50:	4b0c      	ldr	r3, [pc, #48]	; (16c84 <radio_reset+0x3c>)
   16c52:	2200      	movs	r2, #0
   16c54:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   16c58:	2201      	movs	r2, #1
   16c5a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   16c5e:	4a0a      	ldr	r2, [pc, #40]	; (16c88 <radio_reset+0x40>)
   16c60:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   16c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16c66:	f023 0301 	bic.w	r3, r3, #1
   16c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   16c6e:	6013      	str	r3, [r2, #0]
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   16c70:	4b06      	ldr	r3, [pc, #24]	; (16c8c <radio_reset+0x44>)
   16c72:	f44f 6210 	mov.w	r2, #2304	; 0x900
   16c76:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   16c7a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   16c7e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   16c82:	bd08      	pop	{r3, pc}
   16c84:	40001000 	.word	0x40001000
   16c88:	40001774 	.word	0x40001774
   16c8c:	4001f000 	.word	0x4001f000

00016c90 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   16c90:	4b06      	ldr	r3, [pc, #24]	; (16cac <radio_phy_set+0x1c>)
	switch (phy) {
   16c92:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   16c94:	bf14      	ite	ne
   16c96:	2203      	movne	r2, #3
   16c98:	2204      	moveq	r2, #4
   16c9a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   16c9e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   16ca2:	f042 0201 	orr.w	r2, r2, #1
   16ca6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   16caa:	4770      	bx	lr
   16cac:	40001000 	.word	0x40001000

00016cb0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (u32_t)power;
   16cb0:	4b01      	ldr	r3, [pc, #4]	; (16cb8 <radio_tx_power_set+0x8>)
   16cb2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   16cb6:	4770      	bx	lr
   16cb8:	40001000 	.word	0x40001000

00016cbc <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   16cbc:	4b01      	ldr	r3, [pc, #4]	; (16cc4 <radio_freq_chan_set+0x8>)
   16cbe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   16cc2:	4770      	bx	lr
   16cc4:	40001000 	.word	0x40001000

00016cc8 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   16cc8:	4b07      	ldr	r3, [pc, #28]	; (16ce8 <radio_whiten_iv_set+0x20>)
   16cca:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   16cce:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   16cd2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   16cd6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   16cda:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   16cde:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   16ce2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   16ce6:	4770      	bx	lr
   16ce8:	40001000 	.word	0x40001000

00016cec <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   16cec:	4a0a      	ldr	r2, [pc, #40]	; (16d18 <radio_aa_set+0x2c>)
   16cee:	2300      	movs	r3, #0
   16cf0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   16cf4:	2301      	movs	r3, #1
   16cf6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   16cfa:	78c3      	ldrb	r3, [r0, #3]
   16cfc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   16d00:	7843      	ldrb	r3, [r0, #1]
   16d02:	7881      	ldrb	r1, [r0, #2]
   16d04:	041b      	lsls	r3, r3, #16
   16d06:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   16d0a:	7801      	ldrb	r1, [r0, #0]
   16d0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16d10:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   16d14:	4770      	bx	lr
   16d16:	bf00      	nop
   16d18:	40001000 	.word	0x40001000

00016d1c <radio_pkt_configure>:
	switch (phy) {
   16d1c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   16d20:	2b02      	cmp	r3, #2
{
   16d22:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   16d24:	bf14      	ite	ne
   16d26:	2400      	movne	r4, #0
   16d28:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   16d2c:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   16d2e:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   16d32:	bf48      	it	mi
   16d34:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   16d38:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   16d3a:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   16d3e:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   16d40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   16d44:	4a09      	ldr	r2, [pc, #36]	; (16d6c <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   16d46:	4303      	orrs	r3, r0
   16d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   16d4c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   16d50:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   16d54:	4b06      	ldr	r3, [pc, #24]	; (16d70 <radio_pkt_configure+0x54>)
   16d56:	4003      	ands	r3, r0
   16d58:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   16d5c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   16d60:	4319      	orrs	r1, r3
   16d62:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   16d66:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   16d6a:	bd10      	pop	{r4, pc}
   16d6c:	40001000 	.word	0x40001000
   16d70:	fef80000 	.word	0xfef80000

00016d74 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   16d74:	4b01      	ldr	r3, [pc, #4]	; (16d7c <radio_pkt_rx_set+0x8>)
   16d76:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   16d7a:	4770      	bx	lr
   16d7c:	40001000 	.word	0x40001000

00016d80 <radio_pkt_tx_set>:
   16d80:	4b01      	ldr	r3, [pc, #4]	; (16d88 <radio_pkt_tx_set+0x8>)
   16d82:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   16d86:	4770      	bx	lr
   16d88:	40001000 	.word	0x40001000

00016d8c <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16d8c:	4b01      	ldr	r3, [pc, #4]	; (16d94 <radio_tx_enable+0x8>)
   16d8e:	2201      	movs	r2, #1
   16d90:	601a      	str	r2, [r3, #0]
}
   16d92:	4770      	bx	lr
   16d94:	40001000 	.word	0x40001000

00016d98 <radio_disable>:
    p_reg->CHENCLR = mask;
   16d98:	4a07      	ldr	r2, [pc, #28]	; (16db8 <radio_disable+0x20>)
   16d9a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   16d9e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   16da2:	2301      	movs	r3, #1
   16da4:	6053      	str	r3, [r2, #4]
   16da6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   16da8:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   16dac:	2100      	movs	r1, #0
   16dae:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   16db2:	6113      	str	r3, [r2, #16]
}
   16db4:	4770      	bx	lr
   16db6:	bf00      	nop
   16db8:	4001f000 	.word	0x4001f000

00016dbc <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   16dbc:	4b04      	ldr	r3, [pc, #16]	; (16dd0 <radio_status_reset+0x14>)
   16dbe:	2200      	movs	r2, #0
   16dc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   16dc4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   16dc8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   16dcc:	4770      	bx	lr
   16dce:	bf00      	nop
   16dd0:	40001000 	.word	0x40001000

00016dd4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   16dd4:	4b03      	ldr	r3, [pc, #12]	; (16de4 <radio_is_ready+0x10>)
   16dd6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   16dda:	3000      	adds	r0, #0
   16ddc:	bf18      	it	ne
   16dde:	2001      	movne	r0, #1
   16de0:	4770      	bx	lr
   16de2:	bf00      	nop
   16de4:	40001000 	.word	0x40001000

00016de8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   16de8:	4b03      	ldr	r3, [pc, #12]	; (16df8 <radio_is_done+0x10>)
   16dea:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   16dee:	3000      	adds	r0, #0
   16df0:	bf18      	it	ne
   16df2:	2001      	movne	r0, #1
   16df4:	4770      	bx	lr
   16df6:	bf00      	nop
   16df8:	40001000 	.word	0x40001000

00016dfc <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   16dfc:	4b04      	ldr	r3, [pc, #16]	; (16e10 <radio_crc_configure+0x14>)
   16dfe:	f240 1203 	movw	r2, #259	; 0x103
   16e02:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   16e06:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   16e0a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   16e0e:	4770      	bx	lr
   16e10:	40001000 	.word	0x40001000

00016e14 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   16e14:	4b03      	ldr	r3, [pc, #12]	; (16e24 <radio_crc_is_valid+0x10>)
   16e16:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   16e1a:	3000      	adds	r0, #0
   16e1c:	bf18      	it	ne
   16e1e:	2001      	movne	r0, #1
   16e20:	4770      	bx	lr
   16e22:	bf00      	nop
   16e24:	40001000 	.word	0x40001000

00016e28 <radio_pkt_empty_get>:
}
   16e28:	4800      	ldr	r0, [pc, #0]	; (16e2c <radio_pkt_empty_get+0x4>)
   16e2a:	4770      	bx	lr
   16e2c:	2000174c 	.word	0x2000174c

00016e30 <radio_pkt_scratch_get>:
}
   16e30:	4800      	ldr	r0, [pc, #0]	; (16e34 <radio_pkt_scratch_get+0x4>)
   16e32:	4770      	bx	lr
   16e34:	20001750 	.word	0x20001750

00016e38 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16e38:	4b04      	ldr	r3, [pc, #16]	; (16e4c <radio_switch_complete_and_rx+0x14>)
   16e3a:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   16e3c:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16e3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   16e42:	4602      	mov	r2, r0
   16e44:	4608      	mov	r0, r1
   16e46:	f7ff be69 	b.w	16b1c <sw_switch.isra.10>
   16e4a:	bf00      	nop
   16e4c:	40001000 	.word	0x40001000

00016e50 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16e50:	4b03      	ldr	r3, [pc, #12]	; (16e60 <radio_switch_complete_and_tx+0x10>)
   16e52:	2103      	movs	r1, #3
   16e54:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   16e58:	4601      	mov	r1, r0
   16e5a:	2001      	movs	r0, #1
   16e5c:	f7ff be5e 	b.w	16b1c <sw_switch.isra.10>
   16e60:	40001000 	.word	0x40001000

00016e64 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   16e64:	4b05      	ldr	r3, [pc, #20]	; (16e7c <radio_switch_complete_and_disable+0x18>)
   16e66:	2203      	movs	r2, #3
   16e68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   16e6c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   16e70:	f44f 6290 	mov.w	r2, #1152	; 0x480
   16e74:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   16e78:	4770      	bx	lr
   16e7a:	bf00      	nop
   16e7c:	40001000 	.word	0x40001000

00016e80 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   16e80:	4b02      	ldr	r3, [pc, #8]	; (16e8c <radio_rssi_status_reset+0xc>)
   16e82:	2200      	movs	r2, #0
   16e84:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   16e88:	4770      	bx	lr
   16e8a:	bf00      	nop
   16e8c:	40001000 	.word	0x40001000

00016e90 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   16e90:	4b03      	ldr	r3, [pc, #12]	; (16ea0 <radio_rssi_is_ready+0x10>)
   16e92:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   16e96:	3000      	adds	r0, #0
   16e98:	bf18      	it	ne
   16e9a:	2001      	movne	r0, #1
   16e9c:	4770      	bx	lr
   16e9e:	bf00      	nop
   16ea0:	40001000 	.word	0x40001000

00016ea4 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   16ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ea6:	2400      	movs	r4, #0
   16ea8:	2706      	movs	r7, #6
   16eaa:	00a3      	lsls	r3, r4, #2
   16eac:	fb07 2504 	mla	r5, r7, r4, r2
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   16eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   16eb8:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   16eba:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   16ebe:	3401      	adds	r4, #1
   16ec0:	88ad      	ldrh	r5, [r5, #4]
   16ec2:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   16ec6:	2c08      	cmp	r4, #8
   16ec8:	d1ef      	bne.n	16eaa <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   16eca:	4b03      	ldr	r3, [pc, #12]	; (16ed8 <radio_filter_configure+0x34>)
   16ecc:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   16ed0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   16ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ed6:	bf00      	nop
   16ed8:	40001000 	.word	0x40001000

00016edc <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   16edc:	4a03      	ldr	r2, [pc, #12]	; (16eec <radio_filter_disable+0x10>)
   16ede:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   16ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16ee6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   16eea:	4770      	bx	lr
   16eec:	40001000 	.word	0x40001000

00016ef0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   16ef0:	4b02      	ldr	r3, [pc, #8]	; (16efc <radio_filter_status_reset+0xc>)
   16ef2:	2200      	movs	r2, #0
   16ef4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   16ef8:	4770      	bx	lr
   16efa:	bf00      	nop
   16efc:	40001000 	.word	0x40001000

00016f00 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   16f00:	4b03      	ldr	r3, [pc, #12]	; (16f10 <radio_filter_has_match+0x10>)
   16f02:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   16f06:	3000      	adds	r0, #0
   16f08:	bf18      	it	ne
   16f0a:	2001      	movne	r0, #1
   16f0c:	4770      	bx	lr
   16f0e:	bf00      	nop
   16f10:	40001000 	.word	0x40001000

00016f14 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   16f14:	4b01      	ldr	r3, [pc, #4]	; (16f1c <radio_filter_match_get+0x8>)
   16f16:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   16f1a:	4770      	bx	lr
   16f1c:	40001000 	.word	0x40001000

00016f20 <radio_bc_configure>:
    p_reg->BCC = radio_bcc;
   16f20:	4b04      	ldr	r3, [pc, #16]	; (16f34 <radio_bc_configure+0x14>)
   16f22:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560

void radio_bc_configure(u32_t n)
{
	nrf_radio_bcc_set(NRF_RADIO, n);
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   16f26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   16f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16f2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   16f32:	4770      	bx	lr
   16f34:	40001000 	.word	0x40001000

00016f38 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   16f38:	4b05      	ldr	r3, [pc, #20]	; (16f50 <radio_tmr_status_reset+0x18>)
   16f3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   16f3e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   16f42:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   16f46:	4a03      	ldr	r2, [pc, #12]	; (16f54 <radio_tmr_status_reset+0x1c>)
   16f48:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   16f4c:	4770      	bx	lr
   16f4e:	bf00      	nop
   16f50:	4000b000 	.word	0x4000b000
   16f54:	0e700060 	.word	0x0e700060

00016f58 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   16f58:	4b03      	ldr	r3, [pc, #12]	; (16f68 <radio_tmr_tifs_set+0x10>)
   16f5a:	4a04      	ldr	r2, [pc, #16]	; (16f6c <radio_tmr_tifs_set+0x14>)
   16f5c:	781b      	ldrb	r3, [r3, #0]
   16f5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   16f62:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   16f66:	4770      	bx	lr
   16f68:	2000a6b9 	.word	0x2000a6b9
   16f6c:	40009000 	.word	0x40009000

00016f70 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   16f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   16f72:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   16f76:	4c2f      	ldr	r4, [pc, #188]	; (17034 <radio_tmr_start+0xc4>)
   16f78:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   16f7c:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   16f7e:	bf88      	it	hi
   16f80:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f84:	4b2c      	ldr	r3, [pc, #176]	; (17038 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   16f86:	4c2d      	ldr	r4, [pc, #180]	; (1703c <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   16f88:	bf84      	itt	hi
   16f8a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   16f8e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   16f92:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   16f96:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   16f9a:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   16f9e:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   16fa2:	f04f 0202 	mov.w	r2, #2
   16fa6:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   16fa8:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   16fac:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   16fb0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   16fb4:	4a22      	ldr	r2, [pc, #136]	; (17040 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   16fb6:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   16fba:	bf88      	it	hi
   16fbc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   16fc0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   16fc4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   16fc8:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16fcc:	491d      	ldr	r1, [pc, #116]	; (17044 <radio_tmr_start+0xd4>)
   16fce:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   16fd2:	3b0c      	subs	r3, #12
   16fd4:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16fd8:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   16fdc:	2320      	movs	r3, #32
   16fde:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   16fe2:	f7ff fd87 	bl	16af4 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   16fe6:	4b18      	ldr	r3, [pc, #96]	; (17048 <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16fe8:	4a18      	ldr	r2, [pc, #96]	; (1704c <radio_tmr_start+0xdc>)
   16fea:	6015      	str	r5, [r2, #0]
   16fec:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   16ff0:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   16ff4:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   16ff8:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16ffa:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   16ffe:	3b74      	subs	r3, #116	; 0x74
   17000:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   17004:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   17008:	3334      	adds	r3, #52	; 0x34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1700a:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1700e:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17012:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   17016:	33c4      	adds	r3, #196	; 0xc4
   17018:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1701c:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   17020:	3bc0      	subs	r3, #192	; 0xc0
   17022:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17026:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1702a:	33c8      	adds	r3, #200	; 0xc8
   1702c:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   17030:	4620      	mov	r0, r4
   17032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17034:	7ff0bdbf 	.word	0x7ff0bdbf
   17038:	4000800c 	.word	0x4000800c
   1703c:	000f4240 	.word	0x000f4240
   17040:	4000b000 	.word	0x4000b000
   17044:	4001f000 	.word	0x4001f000
   17048:	40009000 	.word	0x40009000
   1704c:	4000900c 	.word	0x4000900c

00017050 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   17050:	4b01      	ldr	r3, [pc, #4]	; (17058 <radio_tmr_start_get+0x8>)
   17052:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   17056:	4770      	bx	lr
   17058:	4000b000 	.word	0x4000b000

0001705c <radio_tmr_stop>:
   1705c:	4a04      	ldr	r2, [pc, #16]	; (17070 <radio_tmr_stop+0x14>)
   1705e:	2301      	movs	r3, #1
   17060:	6013      	str	r3, [r2, #0]
   17062:	60d3      	str	r3, [r2, #12]
   17064:	320c      	adds	r2, #12
   17066:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1706a:	6013      	str	r3, [r2, #0]
   1706c:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1706e:	4770      	bx	lr
   17070:	40008004 	.word	0x40008004

00017074 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   17074:	4b04      	ldr	r3, [pc, #16]	; (17088 <radio_tmr_hcto_configure+0x14>)
   17076:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1707a:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1707e:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   17082:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   17086:	4770      	bx	lr
   17088:	40008000 	.word	0x40008000

0001708c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1708c:	4b06      	ldr	r3, [pc, #24]	; (170a8 <radio_tmr_aa_capture+0x1c>)
   1708e:	4a07      	ldr	r2, [pc, #28]	; (170ac <radio_tmr_aa_capture+0x20>)
   17090:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17094:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   17098:	3240      	adds	r2, #64	; 0x40
   1709a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1709e:	4a04      	ldr	r2, [pc, #16]	; (170b0 <radio_tmr_aa_capture+0x24>)
   170a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   170a4:	4770      	bx	lr
   170a6:	bf00      	nop
   170a8:	4001f000 	.word	0x4001f000
   170ac:	40001100 	.word	0x40001100
   170b0:	04000040 	.word	0x04000040

000170b4 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   170b4:	4b01      	ldr	r3, [pc, #4]	; (170bc <radio_tmr_aa_get+0x8>)
   170b6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   170ba:	4770      	bx	lr
   170bc:	40008000 	.word	0x40008000

000170c0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   170c0:	4b01      	ldr	r3, [pc, #4]	; (170c8 <radio_tmr_aa_save+0x8>)
   170c2:	6018      	str	r0, [r3, #0]
}
   170c4:	4770      	bx	lr
   170c6:	bf00      	nop
   170c8:	2000185c 	.word	0x2000185c

000170cc <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   170cc:	4b01      	ldr	r3, [pc, #4]	; (170d4 <radio_tmr_aa_restore+0x8>)
   170ce:	6818      	ldr	r0, [r3, #0]
   170d0:	4770      	bx	lr
   170d2:	bf00      	nop
   170d4:	2000185c 	.word	0x2000185c

000170d8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   170d8:	4b01      	ldr	r3, [pc, #4]	; (170e0 <radio_tmr_ready_get+0x8>)
   170da:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   170de:	4770      	bx	lr
   170e0:	40008000 	.word	0x40008000

000170e4 <radio_tmr_end_capture>:
   170e4:	4b02      	ldr	r3, [pc, #8]	; (170f0 <radio_tmr_end_capture+0xc>)
   170e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   170ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   170ee:	4770      	bx	lr
   170f0:	4001f000 	.word	0x4001f000

000170f4 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   170f4:	4b01      	ldr	r3, [pc, #4]	; (170fc <radio_tmr_end_get+0x8>)
   170f6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   170fa:	4770      	bx	lr
   170fc:	40008000 	.word	0x40008000

00017100 <radio_tmr_tifs_base_get>:
   17100:	4b01      	ldr	r3, [pc, #4]	; (17108 <radio_tmr_tifs_base_get+0x8>)
   17102:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   17106:	4770      	bx	lr
   17108:	40008000 	.word	0x40008000

0001710c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1710c:	4b13      	ldr	r3, [pc, #76]	; (1715c <radio_ccm_rx_pkt_set+0x50>)
{
   1710e:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17110:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17112:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17114:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   17118:	4e11      	ldr	r6, [pc, #68]	; (17160 <radio_ccm_rx_pkt_set+0x54>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1711a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1711e:	4d11      	ldr	r5, [pc, #68]	; (17164 <radio_ccm_rx_pkt_set+0x58>)
   17120:	2902      	cmp	r1, #2
   17122:	bf14      	ite	ne
   17124:	4629      	movne	r1, r5
   17126:	4631      	moveq	r1, r6
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   17128:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1712c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   17130:	480d      	ldr	r0, [pc, #52]	; (17168 <radio_ccm_rx_pkt_set+0x5c>)
   17132:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   17136:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1713a:	4a0c      	ldr	r2, [pc, #48]	; (1716c <radio_ccm_rx_pkt_set+0x60>)
   1713c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   17140:	4a0b      	ldr	r2, [pc, #44]	; (17170 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->SHORTS = 0;
   17142:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   17146:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1714a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1714e:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   17152:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17156:	2201      	movs	r2, #1
   17158:	601a      	str	r2, [r3, #0]
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1715a:	bd70      	pop	{r4, r5, r6, pc}
   1715c:	4000f000 	.word	0x4000f000
   17160:	01010001 	.word	0x01010001
   17164:	01000001 	.word	0x01000001
   17168:	20001750 	.word	0x20001750
   1716c:	20001640 	.word	0x20001640
   17170:	4001f000 	.word	0x4001f000

00017174 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   17174:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17176:	4b0e      	ldr	r3, [pc, #56]	; (171b0 <radio_ccm_tx_pkt_set+0x3c>)
   17178:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1717a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1717c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17180:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   17184:	4c0b      	ldr	r4, [pc, #44]	; (171b4 <radio_ccm_tx_pkt_set+0x40>)
   17186:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1718a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1718e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   17192:	4809      	ldr	r0, [pc, #36]	; (171b8 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   17194:	4909      	ldr	r1, [pc, #36]	; (171bc <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   17196:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1719a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1719e:	2101      	movs	r1, #1
   171a0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   171a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   171a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   171ac:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   171ae:	bd10      	pop	{r4, pc}
   171b0:	4000f000 	.word	0x4000f000
   171b4:	01010000 	.word	0x01010000
   171b8:	20001750 	.word	0x20001750
   171bc:	20001640 	.word	0x20001640

000171c0 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   171c0:	4b0c      	ldr	r3, [pc, #48]	; (171f4 <radio_ccm_is_done+0x34>)
   171c2:	2202      	movs	r2, #2
   171c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   171c8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   171cc:	b16a      	cbz	r2, 171ea <radio_ccm_is_done+0x2a>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   171ce:	2202      	movs	r2, #2
   171d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   171d4:	4a08      	ldr	r2, [pc, #32]	; (171f8 <radio_ccm_is_done+0x38>)
   171d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   171da:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   171de:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   171e2:	fab0 f080 	clz	r0, r0
   171e6:	0940      	lsrs	r0, r0, #5
   171e8:	4770      	bx	lr
		__WFE();
   171ea:	bf20      	wfe
		__SEV();
   171ec:	bf40      	sev
		__WFE();
   171ee:	bf20      	wfe
   171f0:	e7ea      	b.n	171c8 <radio_ccm_is_done+0x8>
   171f2:	bf00      	nop
   171f4:	4000f000 	.word	0x4000f000
   171f8:	e000e100 	.word	0xe000e100

000171fc <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   171fc:	4b03      	ldr	r3, [pc, #12]	; (1720c <radio_ccm_mic_is_valid+0x10>)
   171fe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17202:	3000      	adds	r0, #0
   17204:	bf18      	it	ne
   17206:	2001      	movne	r0, #1
   17208:	4770      	bx	lr
   1720a:	bf00      	nop
   1720c:	4000f000 	.word	0x4000f000

00017210 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17210:	4b11      	ldr	r3, [pc, #68]	; (17258 <radio_ar_configure+0x48>)
{
   17212:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17214:	2203      	movs	r2, #3
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   17216:	4c11      	ldr	r4, [pc, #68]	; (1725c <radio_ar_configure+0x4c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17218:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1721c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   17220:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   17224:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
   17228:	3a01      	subs	r2, #1
   1722a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   1722e:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   17230:	4a0b      	ldr	r2, [pc, #44]	; (17260 <radio_ar_configure+0x50>)
   17232:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   17236:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   17238:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1723c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   17240:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	radio_bc_configure(64);
   17244:	f7ff fe6c 	bl	16f20 <radio_bc_configure>
   17248:	4b06      	ldr	r3, [pc, #24]	; (17264 <radio_ar_configure+0x54>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1724a:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   1724e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17252:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   17256:	bd10      	pop	{r4, pc}
   17258:	4000f000 	.word	0x4000f000
   1725c:	40001000 	.word	0x40001000
   17260:	2000163c 	.word	0x2000163c
   17264:	4001f000 	.word	0x4001f000

00017268 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   17268:	4b01      	ldr	r3, [pc, #4]	; (17270 <radio_ar_match_get+0x8>)
   1726a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1726e:	4770      	bx	lr
   17270:	4000f000 	.word	0x4000f000

00017274 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   17274:	4a04      	ldr	r2, [pc, #16]	; (17288 <radio_ar_status_reset+0x14>)
   17276:	2300      	movs	r3, #0
   17278:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1727c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   17280:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   17284:	4770      	bx	lr
   17286:	bf00      	nop
   17288:	40001000 	.word	0x40001000

0001728c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1728c:	4b08      	ldr	r3, [pc, #32]	; (172b0 <radio_ar_has_match+0x24>)
   1728e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   17292:	b160      	cbz	r0, 172ae <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   17294:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   17298:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1729c:	b138      	cbz	r0, 172ae <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1729e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   172a2:	b120      	cbz	r0, 172ae <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   172a4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   172a8:	fab0 f080 	clz	r0, r0
   172ac:	0940      	lsrs	r0, r0, #5
}
   172ae:	4770      	bx	lr
   172b0:	40001000 	.word	0x40001000

000172b4 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   172b4:	2902      	cmp	r1, #2
{
   172b6:	b510      	push	{r4, lr}
   172b8:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   172ba:	d00b      	beq.n	172d4 <mayfly_enable_cb+0x20>
   172bc:	2325      	movs	r3, #37	; 0x25
   172be:	4a0a      	ldr	r2, [pc, #40]	; (172e8 <mayfly_enable_cb+0x34>)
   172c0:	490a      	ldr	r1, [pc, #40]	; (172ec <mayfly_enable_cb+0x38>)
   172c2:	480b      	ldr	r0, [pc, #44]	; (172f0 <mayfly_enable_cb+0x3c>)
   172c4:	f006 fa77 	bl	1d7b6 <printk>
   172c8:	4040      	eors	r0, r0
   172ca:	f380 8811 	msr	BASEPRI, r0
   172ce:	f04f 0003 	mov.w	r0, #3
   172d2:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   172d4:	200b      	movs	r0, #11
	if (enable) {
   172d6:	b11c      	cbz	r4, 172e0 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   172d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   172dc:	f7ed bae0 	b.w	48a0 <arch_irq_enable>
}
   172e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   172e4:	f7ed baec 	b.w	48c0 <arch_irq_disable>
   172e8:	000299e6 	.word	0x000299e6
   172ec:	00029a2d 	.word	0x00029a2d
   172f0:	00027ff4 	.word	0x00027ff4

000172f4 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   172f4:	2901      	cmp	r1, #1
{
   172f6:	b508      	push	{r3, lr}
	switch (callee_id) {
   172f8:	d015      	beq.n	17326 <mayfly_is_enabled+0x32>
   172fa:	b179      	cbz	r1, 1731c <mayfly_is_enabled+0x28>
   172fc:	2902      	cmp	r1, #2
   172fe:	d012      	beq.n	17326 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   17300:	233f      	movs	r3, #63	; 0x3f
   17302:	4a0a      	ldr	r2, [pc, #40]	; (1732c <mayfly_is_enabled+0x38>)
   17304:	490a      	ldr	r1, [pc, #40]	; (17330 <mayfly_is_enabled+0x3c>)
   17306:	480b      	ldr	r0, [pc, #44]	; (17334 <mayfly_is_enabled+0x40>)
   17308:	f006 fa55 	bl	1d7b6 <printk>
   1730c:	4040      	eors	r0, r0
   1730e:	f380 8811 	msr	BASEPRI, r0
   17312:	f04f 0003 	mov.w	r0, #3
   17316:	df02      	svc	2
		break;
	}

	return 0;
}
   17318:	2000      	movs	r0, #0
   1731a:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1731c:	2018      	movs	r0, #24
}
   1731e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   17322:	f7ed bae1 	b.w	48e8 <arch_irq_is_enabled>
   17326:	200b      	movs	r0, #11
   17328:	e7f9      	b.n	1731e <mayfly_is_enabled+0x2a>
   1732a:	bf00      	nop
   1732c:	000299e6 	.word	0x000299e6
   17330:	0002a0ca 	.word	0x0002a0ca
   17334:	00027ff4 	.word	0x00027ff4

00017338 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   17338:	2901      	cmp	r1, #1
{
   1733a:	b508      	push	{r3, lr}
	switch (callee_id) {
   1733c:	d015      	beq.n	1736a <mayfly_pend+0x32>
   1733e:	b171      	cbz	r1, 1735e <mayfly_pend+0x26>
   17340:	2902      	cmp	r1, #2
   17342:	d012      	beq.n	1736a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   17344:	237b      	movs	r3, #123	; 0x7b
   17346:	4a0b      	ldr	r2, [pc, #44]	; (17374 <mayfly_pend+0x3c>)
   17348:	490b      	ldr	r1, [pc, #44]	; (17378 <mayfly_pend+0x40>)
   1734a:	480c      	ldr	r0, [pc, #48]	; (1737c <mayfly_pend+0x44>)
   1734c:	f006 fa33 	bl	1d7b6 <printk>
   17350:	4040      	eors	r0, r0
   17352:	f380 8811 	msr	BASEPRI, r0
   17356:	f04f 0003 	mov.w	r0, #3
   1735a:	df02      	svc	2
		break;
	}
}
   1735c:	e004      	b.n	17368 <mayfly_pend+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1735e:	4b08      	ldr	r3, [pc, #32]	; (17380 <mayfly_pend+0x48>)
   17360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17364:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17368:	bd08      	pop	{r3, pc}
   1736a:	4b05      	ldr	r3, [pc, #20]	; (17380 <mayfly_pend+0x48>)
   1736c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17370:	e7f8      	b.n	17364 <mayfly_pend+0x2c>
   17372:	bf00      	nop
   17374:	000299e6 	.word	0x000299e6
   17378:	0002a0ca 	.word	0x0002a0ca
   1737c:	00027ff4 	.word	0x00027ff4
   17380:	e000e100 	.word	0xe000e100

00017384 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   17384:	2803      	cmp	r0, #3
{
   17386:	b510      	push	{r4, lr}
   17388:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1738a:	d90b      	bls.n	173a4 <hal_ticker_instance0_caller_id_get+0x20>
   1738c:	2338      	movs	r3, #56	; 0x38
   1738e:	4a0e      	ldr	r2, [pc, #56]	; (173c8 <hal_ticker_instance0_caller_id_get+0x44>)
   17390:	490e      	ldr	r1, [pc, #56]	; (173cc <hal_ticker_instance0_caller_id_get+0x48>)
   17392:	480f      	ldr	r0, [pc, #60]	; (173d0 <hal_ticker_instance0_caller_id_get+0x4c>)
   17394:	f006 fa0f 	bl	1d7b6 <printk>
   17398:	4040      	eors	r0, r0
   1739a:	f380 8811 	msr	BASEPRI, r0
   1739e:	f04f 0003 	mov.w	r0, #3
   173a2:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   173a4:	4b0b      	ldr	r3, [pc, #44]	; (173d4 <hal_ticker_instance0_caller_id_get+0x50>)
   173a6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   173a8:	b95c      	cbnz	r4, 173c2 <hal_ticker_instance0_caller_id_get+0x3e>
   173aa:	233b      	movs	r3, #59	; 0x3b
   173ac:	4a06      	ldr	r2, [pc, #24]	; (173c8 <hal_ticker_instance0_caller_id_get+0x44>)
   173ae:	490a      	ldr	r1, [pc, #40]	; (173d8 <hal_ticker_instance0_caller_id_get+0x54>)
   173b0:	4807      	ldr	r0, [pc, #28]	; (173d0 <hal_ticker_instance0_caller_id_get+0x4c>)
   173b2:	f006 fa00 	bl	1d7b6 <printk>
   173b6:	4040      	eors	r0, r0
   173b8:	f380 8811 	msr	BASEPRI, r0
   173bc:	f04f 0003 	mov.w	r0, #3
   173c0:	df02      	svc	2

	return caller_id;
}
   173c2:	4620      	mov	r0, r4
   173c4:	bd10      	pop	{r4, pc}
   173c6:	bf00      	nop
   173c8:	00029a53 	.word	0x00029a53
   173cc:	00029a9a 	.word	0x00029a9a
   173d0:	00027ff4 	.word	0x00027ff4
   173d4:	00029a4f 	.word	0x00029a4f
   173d8:	00029aba 	.word	0x00029aba

000173dc <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   173dc:	3801      	subs	r0, #1
{
   173de:	b510      	push	{r4, lr}
   173e0:	461c      	mov	r4, r3
	switch (caller_id) {
   173e2:	2804      	cmp	r0, #4
   173e4:	d845      	bhi.n	17472 <hal_ticker_instance0_sched+0x96>
   173e6:	e8df f000 	tbb	[pc, r0]
   173ea:	1a03      	.short	0x1a03
   173ec:	2c23      	.short	0x2c23
   173ee:	3b          	.byte	0x3b
   173ef:	00          	.byte	0x00
#if defined(CONFIG_BT_LL_SW_SPLIT)
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   173f0:	2904      	cmp	r1, #4
   173f2:	d107      	bne.n	17404 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   173f4:	4b20      	ldr	r3, [pc, #128]	; (17478 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   173f6:	2102      	movs	r1, #2
			m.param = instance;
   173f8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   173fa:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   173fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   17400:	f7f7 bbc6 	b.w	eb90 <mayfly_enqueue>
			LL_ASSERT(0);
   17404:	235c      	movs	r3, #92	; 0x5c
		LL_ASSERT(0);
   17406:	4a1d      	ldr	r2, [pc, #116]	; (1747c <hal_ticker_instance0_sched+0xa0>)
   17408:	491d      	ldr	r1, [pc, #116]	; (17480 <hal_ticker_instance0_sched+0xa4>)
   1740a:	481e      	ldr	r0, [pc, #120]	; (17484 <hal_ticker_instance0_sched+0xa8>)
   1740c:	f006 f9d3 	bl	1d7b6 <printk>
   17410:	4040      	eors	r0, r0
   17412:	f380 8811 	msr	BASEPRI, r0
   17416:	f04f 0003 	mov.w	r0, #3
   1741a:	df02      	svc	2
}
   1741c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1741e:	2903      	cmp	r1, #3
   17420:	d104      	bne.n	1742c <hal_ticker_instance0_sched+0x50>
			m.param = instance;
   17422:	4b19      	ldr	r3, [pc, #100]	; (17488 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   17424:	2101      	movs	r1, #1
			m.param = instance;
   17426:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   17428:	4608      	mov	r0, r1
   1742a:	e7e7      	b.n	173fc <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1742c:	2374      	movs	r3, #116	; 0x74
   1742e:	e7ea      	b.n	17406 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   17430:	2904      	cmp	r1, #4
   17432:	d104      	bne.n	1743e <hal_ticker_instance0_sched+0x62>
			m.param = instance;
   17434:	4b15      	ldr	r3, [pc, #84]	; (1748c <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   17436:	2102      	movs	r1, #2
			m.param = instance;
   17438:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1743a:	2001      	movs	r0, #1
   1743c:	e7de      	b.n	173fc <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1743e:	238b      	movs	r3, #139	; 0x8b
   17440:	e7e1      	b.n	17406 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   17442:	2903      	cmp	r1, #3
   17444:	d003      	beq.n	1744e <hal_ticker_instance0_sched+0x72>
   17446:	2904      	cmp	r1, #4
   17448:	d006      	beq.n	17458 <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
   1744a:	23b1      	movs	r3, #177	; 0xb1
   1744c:	e7db      	b.n	17406 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   1744e:	4b10      	ldr	r3, [pc, #64]	; (17490 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   17450:	2101      	movs	r1, #1
			m.param = instance;
   17452:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   17454:	2002      	movs	r0, #2
   17456:	e7d1      	b.n	173fc <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   17458:	4b0e      	ldr	r3, [pc, #56]	; (17494 <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1745a:	2102      	movs	r1, #2
			m.param = instance;
   1745c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1745e:	e7e3      	b.n	17428 <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
   17460:	2904      	cmp	r1, #4
   17462:	d104      	bne.n	1746e <hal_ticker_instance0_sched+0x92>
			m.param = instance;
   17464:	4b0c      	ldr	r3, [pc, #48]	; (17498 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   17466:	2102      	movs	r1, #2
			m.param = instance;
   17468:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1746a:	2003      	movs	r0, #3
   1746c:	e7c6      	b.n	173fc <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1746e:	23c9      	movs	r3, #201	; 0xc9
   17470:	e7c9      	b.n	17406 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   17472:	23cf      	movs	r3, #207	; 0xcf
   17474:	e7c7      	b.n	17406 <hal_ticker_instance0_sched+0x2a>
   17476:	bf00      	nop
   17478:	2000e284 	.word	0x2000e284
   1747c:	00029a53 	.word	0x00029a53
   17480:	0002a0ca 	.word	0x0002a0ca
   17484:	00027ff4 	.word	0x00027ff4
   17488:	2000e294 	.word	0x2000e294
   1748c:	2000e2a4 	.word	0x2000e2a4
   17490:	2000e2b4 	.word	0x2000e2b4
   17494:	2000e2c4 	.word	0x2000e2c4
   17498:	2000e2d4 	.word	0x2000e2d4

0001749c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1749c:	4b01      	ldr	r3, [pc, #4]	; (174a4 <net_buf_pool_get+0x8>)
   1749e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   174a2:	4770      	bx	lr
   174a4:	2000e6c8 	.word	0x2000e6c8

000174a8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   174a8:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   174aa:	4b04      	ldr	r3, [pc, #16]	; (174bc <net_buf_id+0x14>)
   174ac:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   174b0:	69db      	ldr	r3, [r3, #28]
   174b2:	1ac0      	subs	r0, r0, r3
}
   174b4:	4b02      	ldr	r3, [pc, #8]	; (174c0 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   174b6:	10c0      	asrs	r0, r0, #3
}
   174b8:	4358      	muls	r0, r3
   174ba:	4770      	bx	lr
   174bc:	2000e6c8 	.word	0x2000e6c8
   174c0:	aaaaaaab 	.word	0xaaaaaaab

000174c4 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   174c4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   174c6:	4b09      	ldr	r3, [pc, #36]	; (174ec <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   174c8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   174ca:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
   174ce:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   174d0:	699b      	ldr	r3, [r3, #24]
   174d2:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   174d4:	6823      	ldr	r3, [r4, #0]
   174d6:	429a      	cmp	r2, r3
   174d8:	bf94      	ite	ls
   174da:	600a      	strls	r2, [r1, #0]
   174dc:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   174de:	f7ff ffe3 	bl	174a8 <net_buf_id>
   174e2:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   174e6:	fb02 3000 	mla	r0, r2, r0, r3
   174ea:	bd10      	pop	{r4, pc}
   174ec:	2000e6c8 	.word	0x2000e6c8

000174f0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   174f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   174f4:	4605      	mov	r5, r0
   174f6:	9101      	str	r1, [sp, #4]
   174f8:	4616      	mov	r6, r2
	u32_t alloc_start = k_uptime_get_32();
   174fa:	f00b f863 	bl	225c4 <k_uptime_get_32>
   174fe:	4607      	mov	r7, r0
	__asm__ volatile(
   17500:	f04f 0320 	mov.w	r3, #32
   17504:	f3ef 8811 	mrs	r8, BASEPRI
   17508:	f383 8811 	msr	BASEPRI, r3
   1750c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   17510:	8a6b      	ldrh	r3, [r5, #18]
   17512:	2b00      	cmp	r3, #0
   17514:	d041      	beq.n	1759a <net_buf_alloc_len+0xaa>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   17516:	8a2a      	ldrh	r2, [r5, #16]
   17518:	429a      	cmp	r2, r3
   1751a:	d92c      	bls.n	17576 <net_buf_alloc_len+0x86>
	return z_impl_k_queue_get(queue, timeout);
   1751c:	2100      	movs	r1, #0
   1751e:	4628      	mov	r0, r5
   17520:	f00d fdcc 	bl	250bc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   17524:	4604      	mov	r4, r0
   17526:	b330      	cbz	r0, 17576 <net_buf_alloc_len+0x86>
	__asm__ volatile(
   17528:	f388 8811 	msr	BASEPRI, r8
   1752c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   17530:	9b01      	ldr	r3, [sp, #4]
   17532:	2b00      	cmp	r3, #0
   17534:	d040      	beq.n	175b8 <net_buf_alloc_len+0xc8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   17536:	1c73      	adds	r3, r6, #1
   17538:	2b01      	cmp	r3, #1
   1753a:	d906      	bls.n	1754a <net_buf_alloc_len+0x5a>
			u32_t diff = k_uptime_get_32() - alloc_start;
   1753c:	f00b f842 	bl	225c4 <k_uptime_get_32>
   17540:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
   17542:	42b0      	cmp	r0, r6
   17544:	bf94      	ite	ls
   17546:	1a36      	subls	r6, r6, r0
   17548:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1754a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1754c:	4f20      	ldr	r7, [pc, #128]	; (175d0 <net_buf_alloc_len+0xe0>)
   1754e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   17552:	4632      	mov	r2, r6
   17554:	699b      	ldr	r3, [r3, #24]
   17556:	681b      	ldr	r3, [r3, #0]
   17558:	a901      	add	r1, sp, #4
   1755a:	681b      	ldr	r3, [r3, #0]
   1755c:	4620      	mov	r0, r4
   1755e:	4798      	blx	r3
   17560:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   17562:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   17564:	bb48      	cbnz	r0, 175ba <net_buf_alloc_len+0xca>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   17566:	79a0      	ldrb	r0, [r4, #6]
   17568:	4621      	mov	r1, r4
   1756a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1756e:	f00d fd81 	bl	25074 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   17572:	462c      	mov	r4, r5
   17574:	e01c      	b.n	175b0 <net_buf_alloc_len+0xc0>
		uninit_count = pool->uninit_count--;
   17576:	8a6b      	ldrh	r3, [r5, #18]
   17578:	1e5a      	subs	r2, r3, #1
   1757a:	826a      	strh	r2, [r5, #18]
   1757c:	f388 8811 	msr	BASEPRI, r8
   17580:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   17584:	8a2c      	ldrh	r4, [r5, #16]
   17586:	1ae4      	subs	r4, r4, r3
   17588:	69eb      	ldr	r3, [r5, #28]
   1758a:	2218      	movs	r2, #24
   1758c:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   17590:	4b0f      	ldr	r3, [pc, #60]	; (175d0 <net_buf_alloc_len+0xe0>)
   17592:	1aed      	subs	r5, r5, r3
   17594:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   17596:	71a5      	strb	r5, [r4, #6]
		goto success;
   17598:	e7ca      	b.n	17530 <net_buf_alloc_len+0x40>
   1759a:	f388 8811 	msr	BASEPRI, r8
   1759e:	f3bf 8f6f 	isb	sy
   175a2:	4631      	mov	r1, r6
   175a4:	4628      	mov	r0, r5
   175a6:	f00d fd89 	bl	250bc <z_impl_k_queue_get>
	if (!buf) {
   175aa:	4604      	mov	r4, r0
   175ac:	2800      	cmp	r0, #0
   175ae:	d1bf      	bne.n	17530 <net_buf_alloc_len+0x40>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   175b0:	4620      	mov	r0, r4
   175b2:	b002      	add	sp, #8
   175b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   175b8:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   175ba:	2300      	movs	r3, #0
	buf->ref   = 1U;
   175bc:	2201      	movs	r2, #1
	buf->frags = NULL;
   175be:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   175c0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   175c2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   175c4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   175c6:	6923      	ldr	r3, [r4, #16]
   175c8:	81e2      	strh	r2, [r4, #14]
   175ca:	60a3      	str	r3, [r4, #8]
	return buf;
   175cc:	e7f0      	b.n	175b0 <net_buf_alloc_len+0xc0>
   175ce:	bf00      	nop
   175d0:	2000e6c8 	.word	0x2000e6c8

000175d4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   175d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175d6:	4d15      	ldr	r5, [pc, #84]	; (1762c <net_buf_unref+0x58>)
   175d8:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   175da:	2600      	movs	r6, #0
	while (buf) {
   175dc:	b904      	cbnz	r4, 175e0 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   175de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   175e0:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   175e2:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   175e4:	3b01      	subs	r3, #1
   175e6:	b2db      	uxtb	r3, r3
   175e8:	7123      	strb	r3, [r4, #4]
   175ea:	2b00      	cmp	r3, #0
   175ec:	d1f7      	bne.n	175de <net_buf_unref+0xa>
		if (buf->__buf) {
   175ee:	6921      	ldr	r1, [r4, #16]
   175f0:	b159      	cbz	r1, 1760a <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   175f2:	7963      	ldrb	r3, [r4, #5]
   175f4:	079b      	lsls	r3, r3, #30
   175f6:	d407      	bmi.n	17608 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   175f8:	79a3      	ldrb	r3, [r4, #6]
   175fa:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   175fe:	4620      	mov	r0, r4
   17600:	699b      	ldr	r3, [r3, #24]
   17602:	681b      	ldr	r3, [r3, #0]
   17604:	689b      	ldr	r3, [r3, #8]
   17606:	4798      	blx	r3
			buf->__buf = NULL;
   17608:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1760a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1760c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1760e:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   17612:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   17614:	695b      	ldr	r3, [r3, #20]
   17616:	b11b      	cbz	r3, 17620 <net_buf_unref+0x4c>
			pool->destroy(buf);
   17618:	4620      	mov	r0, r4
   1761a:	4798      	blx	r3
{
   1761c:	463c      	mov	r4, r7
   1761e:	e7dd      	b.n	175dc <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   17620:	4621      	mov	r1, r4
   17622:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   17626:	f00d fd25 	bl	25074 <k_queue_prepend>
   1762a:	e7f7      	b.n	1761c <net_buf_unref+0x48>
   1762c:	2000e6c8 	.word	0x2000e6c8

00017630 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   17630:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   17632:	4b09      	ldr	r3, [pc, #36]	; (17658 <gpio_nrfx_init+0x28>)
   17634:	781a      	ldrb	r2, [r3, #0]
   17636:	b96a      	cbnz	r2, 17654 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   17638:	2101      	movs	r1, #1
   1763a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   1763c:	2006      	movs	r0, #6
   1763e:	2105      	movs	r1, #5
   17640:	f7ed f960 	bl	4904 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   17644:	2006      	movs	r0, #6
   17646:	f7ed f92b 	bl	48a0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1764a:	4b04      	ldr	r3, [pc, #16]	; (1765c <gpio_nrfx_init+0x2c>)
   1764c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17650:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   17654:	2000      	movs	r0, #0
   17656:	bd08      	pop	{r3, pc}
   17658:	2000a6ba 	.word	0x2000a6ba
   1765c:	40006000 	.word	0x40006000

00017660 <gpiote_pin_int_cfg>:
{
   17660:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
   17662:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   17664:	4d55      	ldr	r5, [pc, #340]	; (177bc <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17666:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   17668:	6882      	ldr	r2, [r0, #8]
   1766a:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1766e:	7918      	ldrb	r0, [r3, #4]
   17670:	f001 031f 	and.w	r3, r1, #31
   17674:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   17678:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1767a:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1767c:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   17680:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
   17684:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   17688:	42b3      	cmp	r3, r6
   1768a:	d175      	bne.n	17778 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
   1768c:	fa24 f600 	lsr.w	r6, r4, r0
   17690:	07f6      	lsls	r6, r6, #31
   17692:	d571      	bpl.n	17778 <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   17694:	0084      	lsls	r4, r0, #2
   17696:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1769a:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
   1769e:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
   176a2:	f026 0601 	bic.w	r6, r6, #1
   176a6:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   176aa:	2401      	movs	r4, #1
   176ac:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
   176b0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   176b4:	009c      	lsls	r4, r3, #2
   176b6:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
   176ba:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
   176be:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   176c2:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   176c6:	6890      	ldr	r0, [r2, #8]
   176c8:	40c8      	lsrs	r0, r1
   176ca:	f010 0001 	ands.w	r0, r0, #1
   176ce:	d051      	beq.n	17774 <gpiote_pin_int_cfg+0x114>
   176d0:	68d0      	ldr	r0, [r2, #12]
   176d2:	40c8      	lsrs	r0, r1
   176d4:	f010 0001 	ands.w	r0, r0, #1
   176d8:	d04c      	beq.n	17774 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
   176da:	6950      	ldr	r0, [r2, #20]
   176dc:	40c8      	lsrs	r0, r1
   176de:	f010 0001 	ands.w	r0, r0, #1
   176e2:	d056      	beq.n	17792 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
   176e4:	6990      	ldr	r0, [r2, #24]
   176e6:	40c8      	lsrs	r0, r1
   176e8:	07c0      	lsls	r0, r0, #31
   176ea:	d44a      	bmi.n	17782 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
   176ec:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   176ee:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   176f0:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   176f2:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   176f6:	f000 0001 	and.w	r0, r0, #1
   176fa:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   176fe:	4288      	cmp	r0, r1
   17700:	bf14      	ite	ne
   17702:	2101      	movne	r1, #1
   17704:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   17706:	4d2d      	ldr	r5, [pc, #180]	; (177bc <gpiote_pin_int_cfg+0x15c>)
   17708:	2400      	movs	r4, #0
   1770a:	f504 72a2 	add.w	r2, r4, #324	; 0x144
   1770e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   17712:	f010 0003 	ands.w	r0, r0, #3
   17716:	d136      	bne.n	17786 <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17718:	00a2      	lsls	r2, r4, #2
   1771a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1771e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17722:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17724:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17728:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   1772c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17730:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
   17734:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17738:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   1773c:	009b      	lsls	r3, r3, #2
   1773e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   17742:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17744:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   17748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1774c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17750:	4331      	orrs	r1, r6
   17752:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17756:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   17758:	681b      	ldr	r3, [r3, #0]
   1775a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1775c:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1775e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   17762:	f043 0301 	orr.w	r3, r3, #1
   17766:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1776a:	2301      	movs	r3, #1
   1776c:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
   17770:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
   17774:	b002      	add	sp, #8
   17776:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17778:	3001      	adds	r0, #1
   1777a:	2808      	cmp	r0, #8
   1777c:	f47f af7e 	bne.w	1767c <gpiote_pin_int_cfg+0x1c>
   17780:	e798      	b.n	176b4 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   17782:	2103      	movs	r1, #3
   17784:	e7bf      	b.n	17706 <gpiote_pin_int_cfg+0xa6>
   17786:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   17788:	2c08      	cmp	r4, #8
   1778a:	d1be      	bne.n	1770a <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
   1778c:	f06f 0012 	mvn.w	r0, #18
   17790:	e7f0      	b.n	17774 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   17792:	6913      	ldr	r3, [r2, #16]
   17794:	69d2      	ldr	r2, [r2, #28]
   17796:	4053      	eors	r3, r2
   17798:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1779c:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
   177a0:	f011 0f01 	tst.w	r1, #1
   177a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   177a8:	bf14      	ite	ne
   177aa:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   177ae:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
   177b2:	4313      	orrs	r3, r2
   177b4:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
   177b8:	e7dc      	b.n	17774 <gpiote_pin_int_cfg+0x114>
   177ba:	bf00      	nop
   177bc:	40006000 	.word	0x40006000

000177c0 <gpiote_event_handler>:
{
   177c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   177c4:	4953      	ldr	r1, [pc, #332]	; (17914 <gpiote_event_handler+0x154>)
   177c6:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   177c8:	2d00      	cmp	r5, #0
   177ca:	d067      	beq.n	1789c <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
   177cc:	4b52      	ldr	r3, [pc, #328]	; (17918 <gpiote_event_handler+0x158>)
   177ce:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   177d0:	681b      	ldr	r3, [r3, #0]
   177d2:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   177d4:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   177d8:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   177da:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   177de:	4320      	orrs	r0, r4
   177e0:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   177e4:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   177e6:	69d4      	ldr	r4, [r2, #28]
   177e8:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   177ea:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   177ee:	4054      	eors	r4, r2
   177f0:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
   177f2:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
   177f6:	2001      	movs	r0, #1
	u32_t pin = 0U;
   177f8:	2700      	movs	r7, #0
	while (level_pins) {
   177fa:	2b00      	cmp	r3, #0
   177fc:	d138      	bne.n	17870 <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   177fe:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   17800:	680b      	ldr	r3, [r1, #0]
   17802:	9300      	str	r3, [sp, #0]
    (void)dummy;
   17804:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   17806:	4845      	ldr	r0, [pc, #276]	; (1791c <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
   17808:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1780a:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1780c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1780e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   17812:	fa06 f103 	lsl.w	r1, r6, r3
   17816:	4211      	tst	r1, r2
   17818:	d013      	beq.n	17842 <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1781a:	009a      	lsls	r2, r3, #2
   1781c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17820:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   17824:	6811      	ldr	r1, [r2, #0]
   17826:	b161      	cbz	r1, 17842 <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17828:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1782c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17830:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   17832:	6812      	ldr	r2, [r2, #0]
   17834:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17836:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1783a:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
   1783e:	9a01      	ldr	r2, [sp, #4]
   17840:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17842:	3301      	adds	r3, #1
   17844:	2b08      	cmp	r3, #8
   17846:	d1e2      	bne.n	1780e <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
   17848:	bb54      	cbnz	r4, 178a0 <gpiote_event_handler+0xe0>
	if (port_event) {
   1784a:	b175      	cbz	r5, 1786a <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
   1784c:	4b32      	ldr	r3, [pc, #200]	; (17918 <gpiote_event_handler+0x158>)
   1784e:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
   17850:	681b      	ldr	r3, [r3, #0]
   17852:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   17854:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   17858:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1785a:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
   1785e:	4302      	orrs	r2, r0
   17860:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
   17864:	2401      	movs	r4, #1
	u32_t pin = 0U;
   17866:	2500      	movs	r5, #0
	while (level_pins) {
   17868:	bb8b      	cbnz	r3, 178ce <gpiote_event_handler+0x10e>
}
   1786a:	b002      	add	sp, #8
   1786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   17870:	4203      	tst	r3, r0
   17872:	d010      	beq.n	17896 <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17874:	f896 c004 	ldrb.w	ip, [r6, #4]
   17878:	f007 021f 	and.w	r2, r7, #31
   1787c:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   17880:	0092      	lsls	r2, r2, #2
   17882:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
   17886:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1788a:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
   1788e:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   17892:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
   17896:	3701      	adds	r7, #1
		bit <<= 1;
   17898:	0040      	lsls	r0, r0, #1
   1789a:	e7ae      	b.n	177fa <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1789c:	462c      	mov	r4, r5
   1789e:	e7b2      	b.n	17806 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   178a0:	4f1d      	ldr	r7, [pc, #116]	; (17918 <gpiote_event_handler+0x158>)
   178a2:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   178a6:	f8d8 1000 	ldr.w	r1, [r8]
   178aa:	2900      	cmp	r1, #0
   178ac:	d0cd      	beq.n	1784a <gpiote_event_handler+0x8a>
   178ae:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   178b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   178b4:	688a      	ldr	r2, [r1, #8]
   178b6:	4023      	ands	r3, r4
   178b8:	4213      	tst	r3, r2
   178ba:	d003      	beq.n	178c4 <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
   178bc:	684b      	ldr	r3, [r1, #4]
   178be:	4622      	mov	r2, r4
   178c0:	4638      	mov	r0, r7
   178c2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   178c4:	2e00      	cmp	r6, #0
   178c6:	d0c0      	beq.n	1784a <gpiote_event_handler+0x8a>
   178c8:	4631      	mov	r1, r6
   178ca:	6836      	ldr	r6, [r6, #0]
   178cc:	e7f0      	b.n	178b0 <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
   178ce:	421c      	tst	r4, r3
   178d0:	d01c      	beq.n	1790c <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   178d2:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   178d4:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   178d6:	f005 021f 	and.w	r2, r5, #31
   178da:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   178de:	6908      	ldr	r0, [r1, #16]
   178e0:	0092      	lsls	r2, r2, #2
   178e2:	4078      	eors	r0, r7
   178e4:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
   178e8:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   178ea:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   178ee:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   178f2:	bf18      	it	ne
   178f4:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   178f8:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   178fc:	bf08      	it	eq
   178fe:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
   17902:	4338      	orrs	r0, r7
   17904:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
   17908:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   1790c:	3501      	adds	r5, #1
		bit <<= 1;
   1790e:	0064      	lsls	r4, r4, #1
   17910:	e7aa      	b.n	17868 <gpiote_event_handler+0xa8>
   17912:	bf00      	nop
   17914:	4000617c 	.word	0x4000617c
   17918:	2000e554 	.word	0x2000e554
   1791c:	40006000 	.word	0x40006000

00017920 <twi_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
   17920:	b510      	push	{r4, lr}
   17922:	4604      	mov	r4, r0
   17924:	2200      	movs	r2, #0
   17926:	2101      	movs	r1, #1
   17928:	2004      	movs	r0, #4
   1792a:	f7ec ffeb 	bl	4904 <z_arm_irq_priority_set>
	return dev->config->config_info;
   1792e:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   17930:	4a0f      	ldr	r2, [pc, #60]	; (17970 <twi_1_init+0x50>)
	return dev->config->config_info;
   17932:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   17934:	4623      	mov	r3, r4
   17936:	f100 0108 	add.w	r1, r0, #8
   1793a:	f001 f977 	bl	18c2c <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1793e:	4b0d      	ldr	r3, [pc, #52]	; (17974 <twi_1_init+0x54>)
   17940:	4298      	cmp	r0, r3
   17942:	d012      	beq.n	1796a <twi_1_init+0x4a>
		LOG_ERR("Failed to initialize device: %s",
   17944:	2301      	movs	r3, #1
   17946:	f04f 0200 	mov.w	r2, #0
   1794a:	f363 0207 	bfi	r2, r3, #0, #8
   1794e:	490a      	ldr	r1, [pc, #40]	; (17978 <twi_1_init+0x58>)
   17950:	4b0a      	ldr	r3, [pc, #40]	; (1797c <twi_1_init+0x5c>)
   17952:	480b      	ldr	r0, [pc, #44]	; (17980 <twi_1_init+0x60>)
   17954:	1a5b      	subs	r3, r3, r1
   17956:	08db      	lsrs	r3, r3, #3
   17958:	f363 128f 	bfi	r2, r3, #6, #10
   1795c:	6823      	ldr	r3, [r4, #0]
   1795e:	6819      	ldr	r1, [r3, #0]
   17960:	f007 f885 	bl	1ea6e <log_1>
		return -EBUSY;
   17964:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(1);
   17968:	bd10      	pop	{r4, pc}
	return 0;
   1796a:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(1);
   1796c:	e7fc      	b.n	17968 <twi_1_init+0x48>
   1796e:	bf00      	nop
   17970:	00017ae9 	.word	0x00017ae9
   17974:	0bad0000 	.word	0x0bad0000
   17978:	00025a6c 	.word	0x00025a6c
   1797c:	00025b8c 	.word	0x00025b8c
   17980:	00029b2a 	.word	0x00029b2a

00017984 <i2c_nrfx_twi_configure>:
{
   17984:	b508      	push	{r3, lr}
	return dev->config->config_info;
   17986:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
   17988:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
   1798a:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
   1798c:	d413      	bmi.n	179b6 <i2c_nrfx_twi_configure+0x32>
	switch (I2C_SPEED_GET(dev_config)) {
   1798e:	f3c1 0242 	ubfx	r2, r1, #1, #3
   17992:	2a01      	cmp	r2, #1
   17994:	d012      	beq.n	179bc <i2c_nrfx_twi_configure+0x38>
   17996:	2a02      	cmp	r2, #2
   17998:	d019      	beq.n	179ce <i2c_nrfx_twi_configure+0x4a>
		LOG_ERR("unsupported speed");
   1799a:	2301      	movs	r3, #1
   1799c:	f04f 0100 	mov.w	r1, #0
   179a0:	f363 0107 	bfi	r1, r3, #0, #8
   179a4:	4a0c      	ldr	r2, [pc, #48]	; (179d8 <i2c_nrfx_twi_configure+0x54>)
   179a6:	4b0d      	ldr	r3, [pc, #52]	; (179dc <i2c_nrfx_twi_configure+0x58>)
   179a8:	480d      	ldr	r0, [pc, #52]	; (179e0 <i2c_nrfx_twi_configure+0x5c>)
   179aa:	1a9b      	subs	r3, r3, r2
   179ac:	08db      	lsrs	r3, r3, #3
   179ae:	f363 118f 	bfi	r1, r3, #6, #10
   179b2:	f007 f84f 	bl	1ea54 <log_0>
		return -EINVAL;
   179b6:	f06f 0015 	mvn.w	r0, #21
   179ba:	e007      	b.n	179cc <i2c_nrfx_twi_configure+0x48>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   179bc:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   179be:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   179c2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   179c6:	6883      	ldr	r3, [r0, #8]
	return 0;
   179c8:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   179ca:	6359      	str	r1, [r3, #52]	; 0x34
}
   179cc:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   179ce:	681b      	ldr	r3, [r3, #0]
   179d0:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   179d4:	e7f5      	b.n	179c2 <i2c_nrfx_twi_configure+0x3e>
   179d6:	bf00      	nop
   179d8:	00025a6c 	.word	0x00025a6c
   179dc:	00025b8c 	.word	0x00025b8c
   179e0:	00029ae4 	.word	0x00029ae4

000179e4 <i2c_nrfx_twi_transfer>:
{
   179e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179e8:	4605      	mov	r5, r0
   179ea:	b087      	sub	sp, #28
   179ec:	460c      	mov	r4, r1
   179ee:	4617      	mov	r7, r2
   179f0:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   179f2:	6880      	ldr	r0, [r0, #8]
	return z_impl_k_sem_take(sem, timeout);
   179f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   179f8:	f004 ff8a 	bl	1c910 <z_impl_k_sem_take>
	return dev->config->config_info;
   179fc:	682b      	ldr	r3, [r5, #0]
		if (res != NRFX_SUCCESS) {
   179fe:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 17ae4 <i2c_nrfx_twi_transfer+0x100>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   17a02:	6898      	ldr	r0, [r3, #8]
   17a04:	f001 f956 	bl	18cb4 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   17a08:	2600      	movs	r6, #0
   17a0a:	42be      	cmp	r6, r7
   17a0c:	d301      	bcc.n	17a12 <i2c_nrfx_twi_transfer+0x2e>
	int ret = 0;
   17a0e:	2400      	movs	r4, #0
   17a10:	e02e      	b.n	17a70 <i2c_nrfx_twi_transfer+0x8c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   17a12:	f894 b008 	ldrb.w	fp, [r4, #8]
   17a16:	f01b 0a08 	ands.w	sl, fp, #8
   17a1a:	d158      	bne.n	17ace <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
   17a1c:	2212      	movs	r2, #18
   17a1e:	4651      	mov	r1, sl
   17a20:	f10d 0006 	add.w	r0, sp, #6
   17a24:	f007 fe12 	bl	1f64c <memset>
   17a28:	6862      	ldr	r2, [r4, #4]
   17a2a:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   17a2c:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   17a30:	6822      	ldr	r2, [r4, #0]
   17a32:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   17a36:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   17a3a:	f88d 9005 	strb.w	r9, [sp, #5]
   17a3e:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   17a40:	d121      	bne.n	17a86 <i2c_nrfx_twi_transfer+0xa2>
			if ((i < (num_msgs - 1)) &&
   17a42:	1e7a      	subs	r2, r7, #1
   17a44:	42b2      	cmp	r2, r6
   17a46:	d902      	bls.n	17a4e <i2c_nrfx_twi_transfer+0x6a>
   17a48:	7d22      	ldrb	r2, [r4, #20]
   17a4a:	0752      	lsls	r2, r2, #29
   17a4c:	d51d      	bpl.n	17a8a <i2c_nrfx_twi_transfer+0xa6>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   17a4e:	2b00      	cmp	r3, #0
   17a50:	d13d      	bne.n	17ace <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   17a52:	2220      	movs	r2, #32
	return dev->config->config_info;
   17a54:	682b      	ldr	r3, [r5, #0]
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   17a56:	a901      	add	r1, sp, #4
   17a58:	6898      	ldr	r0, [r3, #8]
   17a5a:	f001 f955 	bl	18d08 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   17a5e:	4540      	cmp	r0, r8
   17a60:	d015      	beq.n	17a8e <i2c_nrfx_twi_transfer+0xaa>
			if (res == NRFX_ERROR_BUSY) {
   17a62:	4b1c      	ldr	r3, [pc, #112]	; (17ad4 <i2c_nrfx_twi_transfer+0xf0>)
				ret = -EIO;
   17a64:	4298      	cmp	r0, r3
   17a66:	bf0c      	ite	eq
   17a68:	f06f 040f 	mvneq.w	r4, #15
   17a6c:	f06f 0404 	mvnne.w	r4, #4
	return dev->config->config_info;
   17a70:	682b      	ldr	r3, [r5, #0]
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   17a72:	6898      	ldr	r0, [r3, #8]
   17a74:	f001 f92e 	bl	18cd4 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   17a78:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   17a7a:	f004 ff1d 	bl	1c8b8 <z_impl_k_sem_give>
}
   17a7e:	4620      	mov	r0, r4
   17a80:	b007      	add	sp, #28
   17a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t xfer_flags = 0;
   17a86:	4652      	mov	r2, sl
   17a88:	e7e4      	b.n	17a54 <i2c_nrfx_twi_transfer+0x70>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   17a8a:	2240      	movs	r2, #64	; 0x40
   17a8c:	e7e2      	b.n	17a54 <i2c_nrfx_twi_transfer+0x70>
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
   17a8e:	68a8      	ldr	r0, [r5, #8]
   17a90:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   17a92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17a96:	f004 ff3b 	bl	1c910 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
   17a9a:	68ab      	ldr	r3, [r5, #8]
   17a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   17a9e:	4541      	cmp	r1, r8
   17aa0:	f104 040c 	add.w	r4, r4, #12
   17aa4:	d011      	beq.n	17aca <i2c_nrfx_twi_transfer+0xe6>
			LOG_ERR("Error %d occurred for message %d", res, i);
   17aa6:	2201      	movs	r2, #1
   17aa8:	f04f 0300 	mov.w	r3, #0
   17aac:	f362 0307 	bfi	r3, r2, #0, #8
   17ab0:	4809      	ldr	r0, [pc, #36]	; (17ad8 <i2c_nrfx_twi_transfer+0xf4>)
   17ab2:	4a0a      	ldr	r2, [pc, #40]	; (17adc <i2c_nrfx_twi_transfer+0xf8>)
   17ab4:	1a12      	subs	r2, r2, r0
   17ab6:	08d2      	lsrs	r2, r2, #3
   17ab8:	f362 138f 	bfi	r3, r2, #6, #10
   17abc:	4808      	ldr	r0, [pc, #32]	; (17ae0 <i2c_nrfx_twi_transfer+0xfc>)
   17abe:	4632      	mov	r2, r6
   17ac0:	f006 ffe9 	bl	1ea96 <log_2>
			ret = -EIO;
   17ac4:	f06f 0404 	mvn.w	r4, #4
			break;
   17ac8:	e7d2      	b.n	17a70 <i2c_nrfx_twi_transfer+0x8c>
	for (size_t i = 0; i < num_msgs; i++) {
   17aca:	3601      	adds	r6, #1
   17acc:	e79d      	b.n	17a0a <i2c_nrfx_twi_transfer+0x26>
			ret = -ENOTSUP;
   17ace:	f06f 0422 	mvn.w	r4, #34	; 0x22
   17ad2:	e7cd      	b.n	17a70 <i2c_nrfx_twi_transfer+0x8c>
   17ad4:	0bad000b 	.word	0x0bad000b
   17ad8:	00025a6c 	.word	0x00025a6c
   17adc:	00025b8c 	.word	0x00025b8c
   17ae0:	00029af6 	.word	0x00029af6
   17ae4:	0bad0000 	.word	0x0bad0000

00017ae8 <event_handler>:
	switch (p_event->type) {
   17ae8:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
   17aea:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
   17aec:	2a01      	cmp	r2, #1
   17aee:	d00a      	beq.n	17b06 <event_handler+0x1e>
   17af0:	b11a      	cbz	r2, 17afa <event_handler+0x12>
   17af2:	2a02      	cmp	r2, #2
   17af4:	d009      	beq.n	17b0a <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
   17af6:	4a06      	ldr	r2, [pc, #24]	; (17b10 <event_handler+0x28>)
   17af8:	e000      	b.n	17afc <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
   17afa:	4a06      	ldr	r2, [pc, #24]	; (17b14 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   17afc:	631a      	str	r2, [r3, #48]	; 0x30
	z_impl_k_sem_give(sem);
   17afe:	f103 0018 	add.w	r0, r3, #24
   17b02:	f004 bed9 	b.w	1c8b8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   17b06:	4a04      	ldr	r2, [pc, #16]	; (17b18 <event_handler+0x30>)
   17b08:	e7f8      	b.n	17afc <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   17b0a:	4a04      	ldr	r2, [pc, #16]	; (17b1c <event_handler+0x34>)
   17b0c:	e7f6      	b.n	17afc <event_handler+0x14>
   17b0e:	bf00      	nop
   17b10:	0bad0001 	.word	0x0bad0001
   17b14:	0bad0000 	.word	0x0bad0000
   17b18:	0bae0001 	.word	0x0bae0001
   17b1c:	0bae0002 	.word	0x0bae0002

00017b20 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
   17b20:	b510      	push	{r4, lr}
   17b22:	4604      	mov	r4, r0
   17b24:	2200      	movs	r2, #0
   17b26:	2101      	movs	r1, #1
   17b28:	2003      	movs	r0, #3
   17b2a:	f7ec feeb 	bl	4904 <z_arm_irq_priority_set>
	return dev->config->config_info;
   17b2e:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
   17b30:	4a10      	ldr	r2, [pc, #64]	; (17b74 <spi_0_init+0x54>)
	return dev->config->config_info;
   17b32:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
   17b34:	4623      	mov	r3, r4
   17b36:	f100 0108 	add.w	r1, r0, #8
   17b3a:	f000 fe37 	bl	187ac <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   17b3e:	4b0e      	ldr	r3, [pc, #56]	; (17b78 <spi_0_init+0x58>)
   17b40:	4298      	cmp	r0, r3
   17b42:	d012      	beq.n	17b6a <spi_0_init+0x4a>
		LOG_ERR("Failed to initialize device: %s",
   17b44:	2301      	movs	r3, #1
   17b46:	f04f 0200 	mov.w	r2, #0
   17b4a:	f363 0207 	bfi	r2, r3, #0, #8
   17b4e:	490b      	ldr	r1, [pc, #44]	; (17b7c <spi_0_init+0x5c>)
   17b50:	4b0b      	ldr	r3, [pc, #44]	; (17b80 <spi_0_init+0x60>)
   17b52:	480c      	ldr	r0, [pc, #48]	; (17b84 <spi_0_init+0x64>)
   17b54:	1a5b      	subs	r3, r3, r1
   17b56:	08db      	lsrs	r3, r3, #3
   17b58:	f363 128f 	bfi	r2, r3, #6, #10
   17b5c:	6823      	ldr	r3, [r4, #0]
   17b5e:	6819      	ldr	r1, [r3, #0]
   17b60:	f006 ff85 	bl	1ea6e <log_1>
		return -EBUSY;
   17b64:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPI_DEVICE(0);
   17b68:	bd10      	pop	{r4, pc}
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
   17b6a:	68a0      	ldr	r0, [r4, #8]
   17b6c:	f00a ff16 	bl	2299c <spi_context_unlock_unconditionally>
	return 0;
   17b70:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(0);
   17b72:	e7f9      	b.n	17b68 <spi_0_init+0x48>
   17b74:	00017c09 	.word	0x00017c09
   17b78:	0bad0000 	.word	0x0bad0000
   17b7c:	00025a6c 	.word	0x00025a6c
   17b80:	00025bd4 	.word	0x00025bd4
   17b84:	00029b2a 	.word	0x00029b2a

00017b88 <transfer_next_chunk>:
{
   17b88:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   17b8a:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   17b8c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   17b8e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
{
   17b90:	b085      	sub	sp, #20
   17b92:	b982      	cbnz	r2, 17bb6 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   17b94:	bb7b      	cbnz	r3, 17bf6 <transfer_next_chunk+0x6e>
	int error = 0;
   17b96:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   17b98:	2200      	movs	r2, #0
   17b9a:	4611      	mov	r1, r2
   17b9c:	4628      	mov	r0, r5
   17b9e:	f00a fed3 	bl	22948 <_spi_context_cs_control.isra.7>
	ctx->sync_status = status;
   17ba2:	636c      	str	r4, [r5, #52]	; 0x34
   17ba4:	f105 001c 	add.w	r0, r5, #28
   17ba8:	f004 fe86 	bl	1c8b8 <z_impl_k_sem_give>
	dev_data->busy = false;
   17bac:	2300      	movs	r3, #0
   17bae:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
   17bb2:	b005      	add	sp, #20
   17bb4:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   17bb6:	4611      	mov	r1, r2
   17bb8:	b113      	cbz	r3, 17bc0 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	} else if (ctx->tx_len < ctx->rx_len) {
   17bba:	429a      	cmp	r2, r3
   17bbc:	bf28      	it	cs
   17bbe:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   17bc0:	6cac      	ldr	r4, [r5, #72]	; 0x48
		dev_data->chunk_len = chunk_len;
   17bc2:	65a9      	str	r1, [r5, #88]	; 0x58
		xfer.p_tx_buffer = ctx->tx_buf;
   17bc4:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   17bc6:	b1c4      	cbz	r4, 17bfa <transfer_next_chunk+0x72>
   17bc8:	2a00      	cmp	r2, #0
   17bca:	bf18      	it	ne
   17bcc:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   17bce:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   17bd0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   17bd2:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   17bd4:	b19a      	cbz	r2, 17bfe <transfer_next_chunk+0x76>
   17bd6:	2b00      	cmp	r3, #0
   17bd8:	bf18      	it	ne
   17bda:	460b      	movne	r3, r1
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   17bdc:	9303      	str	r3, [sp, #12]
	return dev->config->config_info;
   17bde:	6803      	ldr	r3, [r0, #0]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   17be0:	2200      	movs	r2, #0
   17be2:	6898      	ldr	r0, [r3, #8]
   17be4:	4669      	mov	r1, sp
   17be6:	f000 fe87 	bl	188f8 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   17bea:	4b06      	ldr	r3, [pc, #24]	; (17c04 <transfer_next_chunk+0x7c>)
   17bec:	4298      	cmp	r0, r3
   17bee:	d0e0      	beq.n	17bb2 <transfer_next_chunk+0x2a>
		error = -EIO;
   17bf0:	f06f 0404 	mvn.w	r4, #4
   17bf4:	e7d0      	b.n	17b98 <transfer_next_chunk+0x10>
   17bf6:	4619      	mov	r1, r3
   17bf8:	e7e2      	b.n	17bc0 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   17bfa:	4622      	mov	r2, r4
   17bfc:	e7e7      	b.n	17bce <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   17bfe:	4613      	mov	r3, r2
   17c00:	e7ec      	b.n	17bdc <transfer_next_chunk+0x54>
   17c02:	bf00      	nop
   17c04:	0bad0000 	.word	0x0bad0000

00017c08 <event_handler>:
{
   17c08:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   17c0a:	7803      	ldrb	r3, [r0, #0]
{
   17c0c:	460d      	mov	r5, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   17c0e:	2b00      	cmp	r3, #0
   17c10:	d157      	bne.n	17cc2 <event_handler+0xba>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   17c12:	688c      	ldr	r4, [r1, #8]
	if (!ctx->tx_len) {
   17c14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   17c16:	b183      	cbz	r3, 17c3a <event_handler+0x32>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   17c18:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->tx_len) {
   17c1a:	429a      	cmp	r2, r3
   17c1c:	d925      	bls.n	17c6a <event_handler+0x62>
		LOG_ERR("Update exceeds current buffer");
   17c1e:	2301      	movs	r3, #1
   17c20:	f04f 0100 	mov.w	r1, #0
   17c24:	f363 0107 	bfi	r1, r3, #0, #8
   17c28:	4a26      	ldr	r2, [pc, #152]	; (17cc4 <event_handler+0xbc>)
   17c2a:	4b27      	ldr	r3, [pc, #156]	; (17cc8 <event_handler+0xc0>)
   17c2c:	4827      	ldr	r0, [pc, #156]	; (17ccc <event_handler+0xc4>)
   17c2e:	1a9b      	subs	r3, r3, r2
   17c30:	08db      	lsrs	r3, r3, #3
   17c32:	f363 118f 	bfi	r1, r3, #6, #10
   17c36:	f006 ff0d 	bl	1ea54 <log_0>
	if (!ctx->rx_len) {
   17c3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17c3c:	b183      	cbz	r3, 17c60 <event_handler+0x58>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   17c3e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
   17c40:	429a      	cmp	r2, r3
   17c42:	d928      	bls.n	17c96 <event_handler+0x8e>
		LOG_ERR("Update exceeds current buffer");
   17c44:	2301      	movs	r3, #1
   17c46:	f04f 0100 	mov.w	r1, #0
   17c4a:	f363 0107 	bfi	r1, r3, #0, #8
   17c4e:	4a1d      	ldr	r2, [pc, #116]	; (17cc4 <event_handler+0xbc>)
   17c50:	4b1d      	ldr	r3, [pc, #116]	; (17cc8 <event_handler+0xc0>)
   17c52:	481e      	ldr	r0, [pc, #120]	; (17ccc <event_handler+0xc4>)
   17c54:	1a9b      	subs	r3, r3, r2
   17c56:	08db      	lsrs	r3, r3, #3
   17c58:	f363 118f 	bfi	r1, r3, #6, #10
   17c5c:	f006 fefa 	bl	1ea54 <log_0>
		transfer_next_chunk(dev);
   17c60:	4628      	mov	r0, r5
}
   17c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev);
   17c66:	f7ff bf8f 	b.w	17b88 <transfer_next_chunk>
	ctx->tx_len -= len;
   17c6a:	1a9b      	subs	r3, r3, r2
   17c6c:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (!ctx->tx_len) {
   17c6e:	b963      	cbnz	r3, 17c8a <event_handler+0x82>
		ctx->tx_count--;
   17c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17c72:	3b01      	subs	r3, #1
   17c74:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (ctx->tx_count) {
   17c76:	b163      	cbz	r3, 17c92 <event_handler+0x8a>
			ctx->current_tx++;
   17c78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17c7a:	f103 0208 	add.w	r2, r3, #8
   17c7e:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   17c80:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   17c82:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   17c84:	64a2      	str	r2, [r4, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
   17c86:	64e3      	str	r3, [r4, #76]	; 0x4c
   17c88:	e7d7      	b.n	17c3a <event_handler+0x32>
	} else if (ctx->tx_buf) {
   17c8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17c8c:	2b00      	cmp	r3, #0
   17c8e:	d0d4      	beq.n	17c3a <event_handler+0x32>
		ctx->tx_buf += dfs * len;
   17c90:	4413      	add	r3, r2
   17c92:	64a3      	str	r3, [r4, #72]	; 0x48
   17c94:	e7d1      	b.n	17c3a <event_handler+0x32>
	ctx->rx_len -= len;
   17c96:	1a9b      	subs	r3, r3, r2
   17c98:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   17c9a:	b963      	cbnz	r3, 17cb6 <event_handler+0xae>
		ctx->rx_count--;
   17c9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17c9e:	3b01      	subs	r3, #1
   17ca0:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->rx_count) {
   17ca2:	b163      	cbz	r3, 17cbe <event_handler+0xb6>
			ctx->current_rx++;
   17ca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   17ca6:	f103 0208 	add.w	r2, r3, #8
   17caa:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   17cac:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   17cae:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   17cb0:	6522      	str	r2, [r4, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
   17cb2:	6563      	str	r3, [r4, #84]	; 0x54
   17cb4:	e7d4      	b.n	17c60 <event_handler+0x58>
	} else if (ctx->rx_buf) {
   17cb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   17cb8:	2b00      	cmp	r3, #0
   17cba:	d0d1      	beq.n	17c60 <event_handler+0x58>
		ctx->rx_buf += dfs * len;
   17cbc:	4413      	add	r3, r2
   17cbe:	6523      	str	r3, [r4, #80]	; 0x50
   17cc0:	e7ce      	b.n	17c60 <event_handler+0x58>
}
   17cc2:	bd38      	pop	{r3, r4, r5, pc}
   17cc4:	00025a6c 	.word	0x00025a6c
   17cc8:	00025bd4 	.word	0x00025bd4
   17ccc:	00029b4a 	.word	0x00029b4a

00017cd0 <spi_nrfx_transceive>:
{
   17cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17cd4:	4607      	mov	r7, r0
	k_sem_take(&ctx->lock, K_FOREVER);
   17cd6:	6880      	ldr	r0, [r0, #8]
   17cd8:	4688      	mov	r8, r1
   17cda:	4616      	mov	r6, r2
   17cdc:	461d      	mov	r5, r3
   17cde:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
   17ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17ce4:	f004 fe14 	bl	1c910 <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   17ce8:	68bc      	ldr	r4, [r7, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
   17cea:	6823      	ldr	r3, [r4, #0]
   17cec:	4598      	cmp	r8, r3
   17cee:	f000 80b0 	beq.w	17e52 <spi_nrfx_transceive+0x182>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   17cf2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   17cf6:	6838      	ldr	r0, [r7, #0]
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   17cf8:	07d9      	lsls	r1, r3, #31
   17cfa:	d516      	bpl.n	17d2a <spi_nrfx_transceive+0x5a>
		LOG_ERR("Slave mode is not supported on %s",
   17cfc:	2301      	movs	r3, #1
   17cfe:	f04f 0200 	mov.w	r2, #0
   17d02:	f363 0207 	bfi	r2, r3, #0, #8
   17d06:	4980      	ldr	r1, [pc, #512]	; (17f08 <spi_nrfx_transceive+0x238>)
   17d08:	4b80      	ldr	r3, [pc, #512]	; (17f0c <spi_nrfx_transceive+0x23c>)
   17d0a:	1a5b      	subs	r3, r3, r1
   17d0c:	08db      	lsrs	r3, r3, #3
   17d0e:	6801      	ldr	r1, [r0, #0]
   17d10:	487f      	ldr	r0, [pc, #508]	; (17f10 <spi_nrfx_transceive+0x240>)
   17d12:	f363 128f 	bfi	r2, r3, #6, #10
   17d16:	f006 feaa 	bl	1ea6e <log_1>
		return -EINVAL;
   17d1a:	f06f 0515 	mvn.w	r5, #21
	z_impl_k_sem_give(sem);
   17d1e:	1d20      	adds	r0, r4, #4
   17d20:	f004 fdca 	bl	1c8b8 <z_impl_k_sem_give>
}
   17d24:	4628      	mov	r0, r5
   17d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   17d2a:	071a      	lsls	r2, r3, #28
   17d2c:	d50e      	bpl.n	17d4c <spi_nrfx_transceive+0x7c>
		LOG_ERR("Loopback mode is not supported");
   17d2e:	2301      	movs	r3, #1
   17d30:	f04f 0100 	mov.w	r1, #0
   17d34:	f363 0107 	bfi	r1, r3, #0, #8
   17d38:	4a73      	ldr	r2, [pc, #460]	; (17f08 <spi_nrfx_transceive+0x238>)
   17d3a:	4b74      	ldr	r3, [pc, #464]	; (17f0c <spi_nrfx_transceive+0x23c>)
   17d3c:	4875      	ldr	r0, [pc, #468]	; (17f14 <spi_nrfx_transceive+0x244>)
   17d3e:	1a9b      	subs	r3, r3, r2
   17d40:	08db      	lsrs	r3, r3, #3
   17d42:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Word sizes other than 8 bits"
   17d46:	f006 fe85 	bl	1ea54 <log_0>
   17d4a:	e7e6      	b.n	17d1a <spi_nrfx_transceive+0x4a>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   17d4c:	f413 51c0 	ands.w	r1, r3, #6144	; 0x1800
   17d50:	d00c      	beq.n	17d6c <spi_nrfx_transceive+0x9c>
		LOG_ERR("Only single line mode is supported");
   17d52:	2301      	movs	r3, #1
   17d54:	f04f 0100 	mov.w	r1, #0
   17d58:	f363 0107 	bfi	r1, r3, #0, #8
   17d5c:	4a6a      	ldr	r2, [pc, #424]	; (17f08 <spi_nrfx_transceive+0x238>)
   17d5e:	4b6b      	ldr	r3, [pc, #428]	; (17f0c <spi_nrfx_transceive+0x23c>)
   17d60:	486d      	ldr	r0, [pc, #436]	; (17f18 <spi_nrfx_transceive+0x248>)
   17d62:	1a9b      	subs	r3, r3, r2
   17d64:	08db      	lsrs	r3, r3, #3
   17d66:	f363 118f 	bfi	r1, r3, #6, #10
   17d6a:	e7ec      	b.n	17d46 <spi_nrfx_transceive+0x76>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   17d6c:	f3c3 1345 	ubfx	r3, r3, #5, #6
   17d70:	2b08      	cmp	r3, #8
   17d72:	d00c      	beq.n	17d8e <spi_nrfx_transceive+0xbe>
		LOG_ERR("Word sizes other than 8 bits"
   17d74:	2301      	movs	r3, #1
   17d76:	f04f 0100 	mov.w	r1, #0
   17d7a:	f363 0107 	bfi	r1, r3, #0, #8
   17d7e:	4a62      	ldr	r2, [pc, #392]	; (17f08 <spi_nrfx_transceive+0x238>)
   17d80:	4b62      	ldr	r3, [pc, #392]	; (17f0c <spi_nrfx_transceive+0x23c>)
   17d82:	4866      	ldr	r0, [pc, #408]	; (17f1c <spi_nrfx_transceive+0x24c>)
   17d84:	1a9b      	subs	r3, r3, r2
   17d86:	08db      	lsrs	r3, r3, #3
   17d88:	f363 118f 	bfi	r1, r3, #6, #10
   17d8c:	e7db      	b.n	17d46 <spi_nrfx_transceive+0x76>
	if (spi_cfg->frequency < 125000) {
   17d8e:	f8d8 2000 	ldr.w	r2, [r8]
   17d92:	4b63      	ldr	r3, [pc, #396]	; (17f20 <spi_nrfx_transceive+0x250>)
   17d94:	429a      	cmp	r2, r3
   17d96:	d80c      	bhi.n	17db2 <spi_nrfx_transceive+0xe2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   17d98:	2301      	movs	r3, #1
   17d9a:	f04f 0100 	mov.w	r1, #0
   17d9e:	f363 0107 	bfi	r1, r3, #0, #8
   17da2:	4a59      	ldr	r2, [pc, #356]	; (17f08 <spi_nrfx_transceive+0x238>)
   17da4:	4b59      	ldr	r3, [pc, #356]	; (17f0c <spi_nrfx_transceive+0x23c>)
   17da6:	485f      	ldr	r0, [pc, #380]	; (17f24 <spi_nrfx_transceive+0x254>)
   17da8:	1a9b      	subs	r3, r3, r2
   17daa:	08db      	lsrs	r3, r3, #3
   17dac:	f363 118f 	bfi	r1, r3, #6, #10
   17db0:	e7c9      	b.n	17d46 <spi_nrfx_transceive+0x76>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   17db2:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return dev->config->config_info;
   17db6:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ctx->config = spi_cfg;
   17dba:	f8c4 8000 	str.w	r8, [r4]
   17dbe:	2b00      	cmp	r3, #0
   17dc0:	d06f      	beq.n	17ea2 <spi_nrfx_transceive+0x1d2>
   17dc2:	6818      	ldr	r0, [r3, #0]
   17dc4:	2800      	cmp	r0, #0
   17dc6:	d06c      	beq.n	17ea2 <spi_nrfx_transceive+0x1d2>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   17dc8:	685a      	ldr	r2, [r3, #4]
   17dca:	6843      	ldr	r3, [r0, #4]
   17dcc:	f8d3 a000 	ldr.w	sl, [r3]
   17dd0:	2301      	movs	r3, #1
   17dd2:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
   17dd4:	6822      	ldr	r2, [r4, #0]
   17dd6:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   17dd8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
   17ddc:	43d2      	mvns	r2, r2
   17dde:	0fd2      	lsrs	r2, r2, #31
   17de0:	e9d3 0100 	ldrd	r0, r1, [r3]
   17de4:	f00a fda7 	bl	22936 <gpio_pin_write>
	nrf_spi_configure(spi->p_reg,
   17de8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   17dec:	f8d9 1000 	ldr.w	r1, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   17df0:	0798      	lsls	r0, r3, #30
   17df2:	f003 0204 	and.w	r2, r3, #4
   17df6:	d563      	bpl.n	17ec0 <spi_nrfx_transceive+0x1f0>
			return NRF_SPI_MODE_2;
   17df8:	2a00      	cmp	r2, #0
   17dfa:	bf14      	ite	ne
   17dfc:	2203      	movne	r2, #3
   17dfe:	2202      	moveq	r2, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   17e00:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
   17e02:	f3c3 1300 	ubfx	r3, r3, #4, #1
   17e06:	d05f      	beq.n	17ec8 <spi_nrfx_transceive+0x1f8>
   17e08:	2a03      	cmp	r2, #3
   17e0a:	d060      	beq.n	17ece <spi_nrfx_transceive+0x1fe>
   17e0c:	2a01      	cmp	r2, #1
   17e0e:	d101      	bne.n	17e14 <spi_nrfx_transceive+0x144>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   17e10:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   17e14:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
   17e18:	4a43      	ldr	r2, [pc, #268]	; (17f28 <spi_nrfx_transceive+0x258>)
	nrf_spi_frequency_set(spi->p_reg,
   17e1a:	f8d8 3000 	ldr.w	r3, [r8]
	if (frequency < 250000) {
   17e1e:	4293      	cmp	r3, r2
   17e20:	d958      	bls.n	17ed4 <spi_nrfx_transceive+0x204>
	} else if (frequency < 500000) {
   17e22:	4a42      	ldr	r2, [pc, #264]	; (17f2c <spi_nrfx_transceive+0x25c>)
   17e24:	4293      	cmp	r3, r2
   17e26:	d958      	bls.n	17eda <spi_nrfx_transceive+0x20a>
	} else if (frequency < 1000000) {
   17e28:	4a41      	ldr	r2, [pc, #260]	; (17f30 <spi_nrfx_transceive+0x260>)
   17e2a:	4293      	cmp	r3, r2
   17e2c:	d958      	bls.n	17ee0 <spi_nrfx_transceive+0x210>
	} else if (frequency < 2000000) {
   17e2e:	4a41      	ldr	r2, [pc, #260]	; (17f34 <spi_nrfx_transceive+0x264>)
   17e30:	4293      	cmp	r3, r2
   17e32:	d958      	bls.n	17ee6 <spi_nrfx_transceive+0x216>
	} else if (frequency < 4000000) {
   17e34:	4a40      	ldr	r2, [pc, #256]	; (17f38 <spi_nrfx_transceive+0x268>)
   17e36:	4293      	cmp	r3, r2
   17e38:	d958      	bls.n	17eec <spi_nrfx_transceive+0x21c>
		return NRF_SPI_FREQ_8M;
   17e3a:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
   17e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
   17e42:	4293      	cmp	r3, r2
   17e44:	bf94      	ite	ls
   17e46:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
   17e4a:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   17e4e:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
   17e52:	2301      	movs	r3, #1
   17e54:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	if (tx_bufs) {
   17e58:	2e00      	cmp	r6, #0
   17e5a:	d04a      	beq.n	17ef2 <spi_nrfx_transceive+0x222>
		ctx->current_tx = tx_bufs->buffers;
   17e5c:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
   17e5e:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
   17e60:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
   17e62:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   17e64:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   17e66:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   17e68:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
   17e6a:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (rx_bufs) {
   17e6c:	2d00      	cmp	r5, #0
   17e6e:	d045      	beq.n	17efc <spi_nrfx_transceive+0x22c>
		ctx->current_rx = rx_bufs->buffers;
   17e70:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
   17e72:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
   17e74:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
   17e76:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   17e78:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   17e7a:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   17e7c:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
   17e7e:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->sync_status = 0;
   17e80:	2200      	movs	r2, #0
   17e82:	6362      	str	r2, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
   17e84:	2101      	movs	r1, #1
   17e86:	4620      	mov	r0, r4
   17e88:	f00a fd5e 	bl	22948 <_spi_context_cs_control.isra.7>
		transfer_next_chunk(dev);
   17e8c:	4638      	mov	r0, r7
   17e8e:	f7ff fe7b 	bl	17b88 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   17e92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17e96:	f104 001c 	add.w	r0, r4, #28
   17e9a:	f004 fd39 	bl	1c910 <z_impl_k_sem_take>
	status = ctx->sync_status;
   17e9e:	6b65      	ldr	r5, [r4, #52]	; 0x34
	return status;
   17ea0:	e73d      	b.n	17d1e <spi_nrfx_transceive+0x4e>
		LOG_INF("CS control inhibited (no GPIO device)");
   17ea2:	2303      	movs	r3, #3
   17ea4:	f04f 0100 	mov.w	r1, #0
   17ea8:	f363 0107 	bfi	r1, r3, #0, #8
   17eac:	4a16      	ldr	r2, [pc, #88]	; (17f08 <spi_nrfx_transceive+0x238>)
   17eae:	4b17      	ldr	r3, [pc, #92]	; (17f0c <spi_nrfx_transceive+0x23c>)
   17eb0:	4822      	ldr	r0, [pc, #136]	; (17f3c <spi_nrfx_transceive+0x26c>)
   17eb2:	1a9b      	subs	r3, r3, r2
   17eb4:	08db      	lsrs	r3, r3, #3
   17eb6:	f363 118f 	bfi	r1, r3, #6, #10
   17eba:	f006 fdcb 	bl	1ea54 <log_0>
   17ebe:	e793      	b.n	17de8 <spi_nrfx_transceive+0x118>
			return NRF_SPI_MODE_0;
   17ec0:	3200      	adds	r2, #0
   17ec2:	bf18      	it	ne
   17ec4:	2201      	movne	r2, #1
   17ec6:	e79b      	b.n	17e00 <spi_nrfx_transceive+0x130>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   17ec8:	f043 0304 	orr.w	r3, r3, #4
        break;
   17ecc:	e7a2      	b.n	17e14 <spi_nrfx_transceive+0x144>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   17ece:	f043 0306 	orr.w	r3, r3, #6
        break;
   17ed2:	e79f      	b.n	17e14 <spi_nrfx_transceive+0x144>
		return NRF_SPI_FREQ_125K;
   17ed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   17ed8:	e7b9      	b.n	17e4e <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_250K;
   17eda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17ede:	e7b6      	b.n	17e4e <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_500K;
   17ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   17ee4:	e7b3      	b.n	17e4e <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_1M;
   17ee6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17eea:	e7b0      	b.n	17e4e <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_2M;
   17eec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   17ef0:	e7ad      	b.n	17e4e <spi_nrfx_transceive+0x17e>
		ctx->tx_count = 0;
   17ef2:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
		ctx->tx_len = 0;
   17ef6:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
   17efa:	e7b7      	b.n	17e6c <spi_nrfx_transceive+0x19c>
		ctx->rx_count = 0;
   17efc:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
		ctx->rx_len = 0;
   17f00:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
   17f04:	e7bc      	b.n	17e80 <spi_nrfx_transceive+0x1b0>
   17f06:	bf00      	nop
   17f08:	00025a6c 	.word	0x00025a6c
   17f0c:	00025bd4 	.word	0x00025bd4
   17f10:	00029b68 	.word	0x00029b68
   17f14:	00029b8a 	.word	0x00029b8a
   17f18:	00029ba9 	.word	0x00029ba9
   17f1c:	00029bcc 	.word	0x00029bcc
   17f20:	0001e847 	.word	0x0001e847
   17f24:	00029bfb 	.word	0x00029bfb
   17f28:	0003d08f 	.word	0x0003d08f
   17f2c:	0007a11f 	.word	0x0007a11f
   17f30:	000f423f 	.word	0x000f423f
   17f34:	001e847f 	.word	0x001e847f
   17f38:	003d08ff 	.word	0x003d08ff
   17f3c:	00029c2c 	.word	0x00029c2c

00017f40 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   17f40:	4a02      	ldr	r2, [pc, #8]	; (17f4c <nvmc_wait_ready+0xc>)
   17f42:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   17f46:	07db      	lsls	r3, r3, #31
   17f48:	d5fb      	bpl.n	17f42 <nvmc_wait_ready+0x2>
}
   17f4a:	4770      	bx	lr
   17f4c:	4001e000 	.word	0x4001e000

00017f50 <flash_nrf_pages_layout>:
	*layout = &dev_layout;
   17f50:	4b02      	ldr	r3, [pc, #8]	; (17f5c <flash_nrf_pages_layout+0xc>)
   17f52:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   17f54:	2301      	movs	r3, #1
   17f56:	6013      	str	r3, [r2, #0]
}
   17f58:	4770      	bx	lr
   17f5a:	bf00      	nop
   17f5c:	200018b0 	.word	0x200018b0

00017f60 <time_slot_callback_helper>:
{
   17f60:	b570      	push	{r4, r5, r6, lr}
   17f62:	b08c      	sub	sp, #48	; 0x30
   17f64:	461d      	mov	r5, r3
   17f66:	4606      	mov	r6, r0
	ll_radio_state_abort();
   17f68:	f7f9 fab2 	bl	114d0 <ll_radio_state_abort>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   17f6c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   17f70:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   17f74:	f009 feb7 	bl	21ce6 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   17f78:	4b13      	ldr	r3, [pc, #76]	; (17fc8 <time_slot_callback_helper+0x68>)
   17f7a:	9506      	str	r5, [sp, #24]
   17f7c:	2400      	movs	r4, #0
   17f7e:	e9cd 4304 	strd	r4, r3, [sp, #16]
   17f82:	2310      	movs	r3, #16
   17f84:	9300      	str	r3, [sp, #0]
   17f86:	e9cd 4407 	strd	r4, r4, [sp, #28]
   17f8a:	4633      	mov	r3, r6
   17f8c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   17f90:	9401      	str	r4, [sp, #4]
   17f92:	4622      	mov	r2, r4
   17f94:	4621      	mov	r1, r4
   17f96:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   17f9a:	f7f7 fa77 	bl	f48c <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   17f9e:	f030 0302 	bics.w	r3, r0, #2
   17fa2:	d00e      	beq.n	17fc2 <time_slot_callback_helper+0x62>
		((struct flash_op_desc *)context)->result = -ECANCELED;
   17fa4:	f06f 0347 	mvn.w	r3, #71	; 0x47
   17fa8:	60ab      	str	r3, [r5, #8]
		err = ticker_stop(instance_index, 0, ticker_id, NULL, NULL);
   17faa:	9400      	str	r4, [sp, #0]
   17fac:	4623      	mov	r3, r4
   17fae:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   17fb2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   17fb6:	4621      	mov	r1, r4
   17fb8:	f7f7 fafa 	bl	f5b0 <ticker_stop>
	z_impl_k_sem_give(sem);
   17fbc:	4803      	ldr	r0, [pc, #12]	; (17fcc <time_slot_callback_helper+0x6c>)
   17fbe:	f004 fc7b 	bl	1c8b8 <z_impl_k_sem_give>
}
   17fc2:	b00c      	add	sp, #48	; 0x30
   17fc4:	bd70      	pop	{r4, r5, r6, pc}
   17fc6:	bf00      	nop
   17fc8:	00018005 	.word	0x00018005
   17fcc:	200018d0 	.word	0x200018d0

00017fd0 <nrf_flash_init>:
{
   17fd0:	b510      	push	{r4, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   17fd2:	2201      	movs	r2, #1
   17fd4:	4611      	mov	r1, r2
   17fd6:	4808      	ldr	r0, [pc, #32]	; (17ff8 <nrf_flash_init+0x28>)
   17fd8:	f00d f9c9 	bl	2536e <z_impl_k_sem_init>
   17fdc:	2201      	movs	r2, #1
   17fde:	2100      	movs	r1, #0
   17fe0:	4806      	ldr	r0, [pc, #24]	; (17ffc <nrf_flash_init+0x2c>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   17fe2:	4c07      	ldr	r4, [pc, #28]	; (18000 <nrf_flash_init+0x30>)
   17fe4:	f00d f9c3 	bl	2536e <z_impl_k_sem_init>
   17fe8:	f00a fdb2 	bl	22b50 <nrfx_nvmc_flash_page_count_get>
   17fec:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   17fee:	f00a fdab 	bl	22b48 <nrfx_nvmc_flash_page_size_get>
   17ff2:	6060      	str	r0, [r4, #4]
}
   17ff4:	2000      	movs	r0, #0
   17ff6:	bd10      	pop	{r4, pc}
   17ff8:	200018b8 	.word	0x200018b8
   17ffc:	200018d0 	.word	0x200018d0
   18000:	200018b0 	.word	0x200018b0

00018004 <time_slot_callback_work>:
{
   18004:	b530      	push	{r4, r5, lr}
   18006:	461d      	mov	r5, r3
   18008:	b085      	sub	sp, #20
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1800a:	e9d3 3000 	ldrd	r3, r0, [r3]
   1800e:	4798      	blx	r3
   18010:	4604      	mov	r4, r0
   18012:	b990      	cbnz	r0, 1803a <time_slot_callback_work+0x36>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   18014:	f10d 010f 	add.w	r1, sp, #15
   18018:	f10d 000e 	add.w	r0, sp, #14
   1801c:	f009 fe63 	bl	21ce6 <ll_timeslice_ticker_id_get>
		result = ticker_stop(instance_index,
   18020:	9400      	str	r4, [sp, #0]
   18022:	4623      	mov	r3, r4
   18024:	f89d 200f 	ldrb.w	r2, [sp, #15]
   18028:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1802c:	4621      	mov	r1, r4
   1802e:	f7f7 fabf 	bl	f5b0 <ticker_stop>
		((struct flash_op_desc *)context)->result = 0;
   18032:	60ac      	str	r4, [r5, #8]
	z_impl_k_sem_give(sem);
   18034:	4802      	ldr	r0, [pc, #8]	; (18040 <time_slot_callback_work+0x3c>)
   18036:	f004 fc3f 	bl	1c8b8 <z_impl_k_sem_give>
}
   1803a:	b005      	add	sp, #20
   1803c:	bd30      	pop	{r4, r5, pc}
   1803e:	bf00      	nop
   18040:	200018d0 	.word	0x200018d0

00018044 <flash_nrf_erase>:
{
   18044:	b5f0      	push	{r4, r5, r6, r7, lr}
   18046:	b08b      	sub	sp, #44	; 0x2c
   18048:	460e      	mov	r6, r1
   1804a:	4615      	mov	r5, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1804c:	f00a fd7c 	bl	22b48 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   18050:	4629      	mov	r1, r5
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   18052:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   18054:	4630      	mov	r0, r6
   18056:	f00a fcc3 	bl	229e0 <is_regular_addr_valid>
   1805a:	2800      	cmp	r0, #0
   1805c:	d03a      	beq.n	180d4 <flash_nrf_erase+0x90>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1805e:	fbb6 f3f7 	udiv	r3, r6, r7
   18062:	fb07 6313 	mls	r3, r7, r3, r6
   18066:	bbab      	cbnz	r3, 180d4 <flash_nrf_erase+0x90>
   18068:	fbb5 f4f7 	udiv	r4, r5, r7
   1806c:	fb07 5414 	mls	r4, r7, r4, r5
   18070:	bb84      	cbnz	r4, 180d4 <flash_nrf_erase+0x90>
		if (!n_pages) {
   18072:	42af      	cmp	r7, r5
   18074:	d822      	bhi.n	180bc <flash_nrf_erase+0x78>
	return z_impl_k_sem_take(sem, timeout);
   18076:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1807a:	4818      	ldr	r0, [pc, #96]	; (180dc <flash_nrf_erase+0x98>)
   1807c:	f004 fc48 	bl	1c910 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   18080:	4620      	mov	r0, r4
   18082:	f7f7 f9e5 	bl	f450 <ticker_is_initialized>
   18086:	ab04      	add	r3, sp, #16
   18088:	4601      	mov	r1, r0
   1808a:	b1d0      	cbz	r0, 180c2 <flash_nrf_erase+0x7e>
	struct flash_context context = {
   1808c:	2210      	movs	r2, #16
   1808e:	4621      	mov	r1, r4
   18090:	4618      	mov	r0, r3
   18092:	f007 fadb 	bl	1f64c <memset>
   18096:	2201      	movs	r2, #1
   18098:	f88d 201c 	strb.w	r2, [sp, #28]
   1809c:	4a10      	ldr	r2, [pc, #64]	; (180e0 <flash_nrf_erase+0x9c>)
	struct flash_op_desc flash_op_desc = {
   1809e:	9403      	str	r4, [sp, #12]
	struct flash_context context = {
   180a0:	e9cd 2208 	strd	r2, r2, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   180a4:	4a0f      	ldr	r2, [pc, #60]	; (180e4 <flash_nrf_erase+0xa0>)
   180a6:	e9cd 2001 	strd	r2, r0, [sp, #4]
	return work_in_time_slice(&flash_op_desc);
   180aa:	a801      	add	r0, sp, #4
	struct flash_context context = {
   180ac:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return work_in_time_slice(&flash_op_desc);
   180b0:	f7ea f9fa 	bl	24a8 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
   180b4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   180b6:	4809      	ldr	r0, [pc, #36]	; (180dc <flash_nrf_erase+0x98>)
   180b8:	f004 fbfe 	bl	1c8b8 <z_impl_k_sem_give>
}
   180bc:	4620      	mov	r0, r4
   180be:	b00b      	add	sp, #44	; 0x2c
   180c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   180c2:	2218      	movs	r2, #24
   180c4:	4618      	mov	r0, r3
   180c6:	f007 fac1 	bl	1f64c <memset>
   180ca:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return	erase_op(&context);
   180ce:	f7ea f9a3 	bl	2418 <erase_op>
   180d2:	e7ef      	b.n	180b4 <flash_nrf_erase+0x70>
		return -EINVAL;
   180d4:	f06f 0415 	mvn.w	r4, #21
   180d8:	e7f0      	b.n	180bc <flash_nrf_erase+0x78>
   180da:	bf00      	nop
   180dc:	200018b8 	.word	0x200018b8
   180e0:	00015e64 	.word	0x00015e64
   180e4:	00002419 	.word	0x00002419

000180e8 <flash_nrf_write>:
{
   180e8:	b570      	push	{r4, r5, r6, lr}
   180ea:	460d      	mov	r5, r1
   180ec:	b08a      	sub	sp, #40	; 0x28
	if (is_regular_addr_valid(addr, len)) {
   180ee:	4619      	mov	r1, r3
   180f0:	4628      	mov	r0, r5
{
   180f2:	4616      	mov	r6, r2
   180f4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   180f6:	f00a fc73 	bl	229e0 <is_regular_addr_valid>
   180fa:	b368      	cbz	r0, 18158 <flash_nrf_write+0x70>
	if (!len) {
   180fc:	b304      	cbz	r4, 18140 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   180fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18102:	4817      	ldr	r0, [pc, #92]	; (18160 <flash_nrf_write+0x78>)
   18104:	f004 fc04 	bl	1c910 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   18108:	2000      	movs	r0, #0
   1810a:	f7f7 f9a1 	bl	f450 <ticker_is_initialized>
   1810e:	4603      	mov	r3, r0
   18110:	a804      	add	r0, sp, #16
   18112:	b1c3      	cbz	r3, 18146 <flash_nrf_write+0x5e>
	struct flash_context context = {
   18114:	2301      	movs	r3, #1
   18116:	f88d 301c 	strb.w	r3, [sp, #28]
   1811a:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1811e:	e9cd 3308 	strd	r3, r3, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   18122:	2300      	movs	r3, #0
   18124:	9303      	str	r3, [sp, #12]
   18126:	4b0f      	ldr	r3, [pc, #60]	; (18164 <flash_nrf_write+0x7c>)
	struct flash_context context = {
   18128:	9406      	str	r4, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   1812a:	e9cd 3001 	strd	r3, r0, [sp, #4]
	return  work_in_time_slice(&flash_op_desc);
   1812e:	a801      	add	r0, sp, #4
	struct flash_context context = {
   18130:	e9cd 6504 	strd	r6, r5, [sp, #16]
	return  work_in_time_slice(&flash_op_desc);
   18134:	f7ea f9b8 	bl	24a8 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
   18138:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1813a:	4809      	ldr	r0, [pc, #36]	; (18160 <flash_nrf_write+0x78>)
   1813c:	f004 fbbc 	bl	1c8b8 <z_impl_k_sem_give>
}
   18140:	4620      	mov	r0, r4
   18142:	b00a      	add	sp, #40	; 0x28
   18144:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   18146:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1814a:	9309      	str	r3, [sp, #36]	; 0x24
   1814c:	e9cd 6504 	strd	r6, r5, [sp, #16]
   18150:	9406      	str	r4, [sp, #24]
	return write_op(&context);
   18152:	f7ea fa1d 	bl	2590 <write_op>
   18156:	e7ef      	b.n	18138 <flash_nrf_write+0x50>
		return -EINVAL;
   18158:	f06f 0415 	mvn.w	r4, #21
   1815c:	e7f0      	b.n	18140 <flash_nrf_write+0x58>
   1815e:	bf00      	nop
   18160:	200018b8 	.word	0x200018b8
   18164:	00002591 	.word	0x00002591

00018168 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   18168:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   1816a:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   1816c:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1816e:	f04f 0420 	mov.w	r4, #32
   18172:	f3ef 8e11 	mrs	lr, BASEPRI
   18176:	f384 8811 	msr	BASEPRI, r4
   1817a:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1817e:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18180:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   18184:	1b9b      	subs	r3, r3, r6
   18186:	403b      	ands	r3, r7
	if (available < len) {
   18188:	429a      	cmp	r2, r3
		len = available;
   1818a:	bf88      	it	hi
   1818c:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1818e:	18b4      	adds	r4, r6, r2
   18190:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   18192:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   18194:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   18196:	f38e 8811 	msr	BASEPRI, lr
   1819a:	f3bf 8f6f 	isb	sy
   1819e:	440a      	add	r2, r1
	u8_t *dst   = buf;
   181a0:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   181a2:	42a2      	cmp	r2, r4
   181a4:	d11a      	bne.n	181dc <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   181a6:	4566      	cmp	r6, ip
   181a8:	d10d      	bne.n	181c6 <rng_pool_get+0x5e>
	__asm__ volatile(
   181aa:	f04f 0520 	mov.w	r5, #32
   181ae:	f3ef 8211 	mrs	r2, BASEPRI
   181b2:	f385 8811 	msr	BASEPRI, r5
   181b6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   181ba:	7805      	ldrb	r5, [r0, #0]
   181bc:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   181be:	f382 8811 	msr	BASEPRI, r2
   181c2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   181c6:	1a64      	subs	r4, r4, r1
   181c8:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   181ca:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   181cc:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   181ce:	42a1      	cmp	r1, r4
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   181d0:	bf22      	ittt	cs
   181d2:	4b07      	ldrcs	r3, [pc, #28]	; (181f0 <rng_pool_get+0x88>)
   181d4:	2101      	movcs	r1, #1
   181d6:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   181d8:	4610      	mov	r0, r2
   181da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   181dc:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   181e0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   181e2:	f89e e005 	ldrb.w	lr, [lr, #5]
   181e6:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   181ea:	403d      	ands	r5, r7
   181ec:	e7d9      	b.n	181a2 <rng_pool_get+0x3a>
   181ee:	bf00      	nop
   181f0:	4000d000 	.word	0x4000d000

000181f4 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   181f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   181f8:	4d11      	ldr	r5, [pc, #68]	; (18240 <entropy_nrf5_get_entropy+0x4c>)
   181fa:	460e      	mov	r6, r1
   181fc:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   181fe:	f105 0845 	add.w	r8, r5, #69	; 0x45
   18202:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   18206:	b914      	cbnz	r4, 1820e <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   18208:	4620      	mov	r0, r4
   1820a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1820e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18212:	4628      	mov	r0, r5
   18214:	f004 fb7c 	bl	1c910 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18218:	4622      	mov	r2, r4
   1821a:	4631      	mov	r1, r6
   1821c:	4640      	mov	r0, r8
   1821e:	f7ff ffa3 	bl	18168 <rng_pool_get>
   18222:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   18224:	4628      	mov	r0, r5
   18226:	f004 fb47 	bl	1c8b8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1822a:	b92f      	cbnz	r7, 18238 <entropy_nrf5_get_entropy+0x44>
	return z_impl_k_sem_take(sem, timeout);
   1822c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18230:	4648      	mov	r0, r9
   18232:	f004 fb6d 	bl	1c910 <z_impl_k_sem_take>
   18236:	e7e6      	b.n	18206 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   18238:	1be4      	subs	r4, r4, r7
   1823a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1823c:	443e      	add	r6, r7
   1823e:	e7e2      	b.n	18206 <entropy_nrf5_get_entropy+0x12>
   18240:	200018e8 	.word	0x200018e8

00018244 <random_byte_get>:
{
   18244:	b082      	sub	sp, #8
	__asm__ volatile(
   18246:	f04f 0320 	mov.w	r3, #32
   1824a:	f3ef 8211 	mrs	r2, BASEPRI
   1824e:	f383 8811 	msr	BASEPRI, r3
   18252:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18256:	4b0a      	ldr	r3, [pc, #40]	; (18280 <random_byte_get+0x3c>)
   18258:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1825a:	b171      	cbz	r1, 1827a <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1825c:	4909      	ldr	r1, [pc, #36]	; (18284 <random_byte_get+0x40>)
   1825e:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18262:	2100      	movs	r1, #0
   18264:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18266:	681b      	ldr	r3, [r3, #0]
   18268:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1826a:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1826c:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1826e:	f382 8811 	msr	BASEPRI, r2
   18272:	f3bf 8f6f 	isb	sy
}
   18276:	b002      	add	sp, #8
   18278:	4770      	bx	lr
	int retval = -EAGAIN;
   1827a:	f06f 000a 	mvn.w	r0, #10
   1827e:	e7f6      	b.n	1826e <random_byte_get+0x2a>
   18280:	4000d100 	.word	0x4000d100
   18284:	4000d000 	.word	0x4000d000

00018288 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18288:	07db      	lsls	r3, r3, #31
{
   1828a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1828e:	4688      	mov	r8, r1
   18290:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18292:	d405      	bmi.n	182a0 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18294:	4820      	ldr	r0, [pc, #128]	; (18318 <entropy_nrf5_get_entropy_isr+0x90>)
   18296:	f7ff ff67 	bl	18168 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   1829a:	b002      	add	sp, #8
   1829c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   182a0:	2a00      	cmp	r2, #0
   182a2:	d032      	beq.n	1830a <entropy_nrf5_get_entropy_isr+0x82>
	__asm__ volatile(
   182a4:	f04f 0320 	mov.w	r3, #32
   182a8:	f3ef 8511 	mrs	r5, BASEPRI
   182ac:	f383 8811 	msr	BASEPRI, r3
   182b0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(RNG_IRQn);
   182b4:	200d      	movs	r0, #13
   182b6:	f7ec fb17 	bl	48e8 <arch_irq_is_enabled>
   182ba:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   182bc:	200d      	movs	r0, #13
   182be:	f7ec faff 	bl	48c0 <arch_irq_disable>
	__asm__ volatile(
   182c2:	f385 8811 	msr	BASEPRI, r5
   182c6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   182ca:	4e14      	ldr	r6, [pc, #80]	; (1831c <entropy_nrf5_get_entropy_isr+0x94>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   182cc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 18324 <entropy_nrf5_get_entropy_isr+0x9c>
   182d0:	2200      	movs	r2, #0
   182d2:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   182d4:	6832      	ldr	r2, [r6, #0]
   182d6:	9201      	str	r2, [sp, #4]
    (void)dummy;
   182d8:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   182da:	4a11      	ldr	r2, [pc, #68]	; (18320 <entropy_nrf5_get_entropy_isr+0x98>)
   182dc:	2101      	movs	r1, #1
   182de:	6011      	str	r1, [r2, #0]
   182e0:	4625      	mov	r5, r4
   182e2:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   182e6:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   182e8:	b18b      	cbz	r3, 1830e <entropy_nrf5_get_entropy_isr+0x86>
			byte = random_byte_get();
   182ea:	f7ff ffab 	bl	18244 <random_byte_get>
			if (byte < 0) {
   182ee:	2800      	cmp	r0, #0
   182f0:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   182f4:	dbf7      	blt.n	182e6 <entropy_nrf5_get_entropy_isr+0x5e>
   182f6:	3d01      	subs	r5, #1
   182f8:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   182fa:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   182fe:	2d00      	cmp	r5, #0
   18300:	d1f1      	bne.n	182e6 <entropy_nrf5_get_entropy_isr+0x5e>
		if (irq_enabled) {
   18302:	b117      	cbz	r7, 1830a <entropy_nrf5_get_entropy_isr+0x82>
			irq_enable(RNG_IRQn);
   18304:	200d      	movs	r0, #13
   18306:	f7ec facb 	bl	48a0 <arch_irq_enable>
	return cnt;
   1830a:	4620      	mov	r0, r4
   1830c:	e7c5      	b.n	1829a <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   1830e:	bf20      	wfe
				__SEV();
   18310:	bf40      	sev
				__WFE();
   18312:	bf20      	wfe
   18314:	e7e7      	b.n	182e6 <entropy_nrf5_get_entropy_isr+0x5e>
   18316:	bf00      	nop
   18318:	20001918 	.word	0x20001918
   1831c:	4000d100 	.word	0x4000d100
   18320:	4000d000 	.word	0x4000d000
   18324:	e000e100 	.word	0xe000e100

00018328 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   18328:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   1832a:	4c1b      	ldr	r4, [pc, #108]	; (18398 <entropy_nrf5_init+0x70>)
   1832c:	2201      	movs	r2, #1
   1832e:	4611      	mov	r1, r2
   18330:	4620      	mov	r0, r4
   18332:	f00d f81c 	bl	2536e <z_impl_k_sem_init>
   18336:	2201      	movs	r2, #1
   18338:	f104 0018 	add.w	r0, r4, #24
   1833c:	2100      	movs	r1, #0
   1833e:	f00d f816 	bl	2536e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   18342:	f240 4307 	movw	r3, #1031	; 0x407
   18346:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1834a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1834e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   18350:	230c      	movs	r3, #12
   18352:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   18356:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   18358:	4b10      	ldr	r3, [pc, #64]	; (1839c <entropy_nrf5_init+0x74>)
   1835a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1835e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   18362:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   18366:	f042 0201 	orr.w	r2, r2, #1
   1836a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1836e:	4a0c      	ldr	r2, [pc, #48]	; (183a0 <entropy_nrf5_init+0x78>)
   18370:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18372:	6812      	ldr	r2, [r2, #0]
   18374:	9201      	str	r2, [sp, #4]
    (void)dummy;
   18376:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   18378:	2201      	movs	r2, #1
   1837a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   1837e:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18380:	601a      	str	r2, [r3, #0]
   18382:	200d      	movs	r0, #13
   18384:	462a      	mov	r2, r5
   18386:	f7ec fabd 	bl	4904 <z_arm_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   1838a:	200d      	movs	r0, #13
   1838c:	f7ec fa88 	bl	48a0 <arch_irq_enable>

	return 0;
}
   18390:	4628      	mov	r0, r5
   18392:	b003      	add	sp, #12
   18394:	bd30      	pop	{r4, r5, pc}
   18396:	bf00      	nop
   18398:	200018e8 	.word	0x200018e8
   1839c:	4000d000 	.word	0x4000d000
   183a0:	4000d100 	.word	0x4000d100

000183a4 <isr>:
{
   183a4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   183a6:	f7ff ff4d 	bl	18244 <random_byte_get>
	if (byte < 0) {
   183aa:	2800      	cmp	r0, #0
   183ac:	db20      	blt.n	183f0 <isr+0x4c>
	u8_t last  = rngp->last;
   183ae:	4b17      	ldr	r3, [pc, #92]	; (1840c <isr+0x68>)
   183b0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   183b4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   183b8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   183bc:	1a51      	subs	r1, r2, r1
   183be:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   183c2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   183c4:	d10d      	bne.n	183e2 <isr+0x3e>
	u8_t last  = rngp->last;
   183c6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   183ca:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   183ce:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   183d2:	1a51      	subs	r1, r2, r1
   183d4:	ea34 0101 	bics.w	r1, r4, r1
   183d8:	d10b      	bne.n	183f2 <isr+0x4e>
   183da:	4b0d      	ldr	r3, [pc, #52]	; (18410 <isr+0x6c>)
   183dc:	2201      	movs	r2, #1
   183de:	601a      	str	r2, [r3, #0]
   183e0:	e00e      	b.n	18400 <isr+0x5c>
	rngp->buffer[last] = byte;
   183e2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   183e4:	3201      	adds	r2, #1
   183e6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   183e8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   183ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   183f0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   183f2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   183f4:	3201      	adds	r2, #1
   183f6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   183f8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   183fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   18400:	4804      	ldr	r0, [pc, #16]	; (18414 <isr+0x70>)
}
   18402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18406:	f004 ba57 	b.w	1c8b8 <z_impl_k_sem_give>
   1840a:	bf00      	nop
   1840c:	200018e8 	.word	0x200018e8
   18410:	4000d004 	.word	0x4000d004
   18414:	20001900 	.word	0x20001900

00018418 <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18418:	4b04      	ldr	r3, [pc, #16]	; (1842c <errata_108+0x14>)
   1841a:	6818      	ldr	r0, [r3, #0]
   1841c:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1841e:	bf04      	itt	eq
   18420:	4b03      	ldreq	r3, [pc, #12]	; (18430 <errata_108+0x18>)
   18422:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
   18424:	1f83      	subs	r3, r0, #6
   18426:	4258      	negs	r0, r3
   18428:	4158      	adcs	r0, r3
   1842a:	4770      	bx	lr
   1842c:	10000130 	.word	0x10000130
   18430:	f0000fe0 	.word	0xf0000fe0

00018434 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18434:	4b07      	ldr	r3, [pc, #28]	; (18454 <errata_16+0x20>)
   18436:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
   18438:	2b06      	cmp	r3, #6
   1843a:	d109      	bne.n	18450 <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1843c:	4b06      	ldr	r3, [pc, #24]	; (18458 <errata_16+0x24>)
   1843e:	681b      	ldr	r3, [r3, #0]
   18440:	f3c3 1303 	ubfx	r3, r3, #4, #4
   18444:	3b03      	subs	r3, #3
   18446:	2b03      	cmp	r3, #3
   18448:	d802      	bhi.n	18450 <errata_16+0x1c>
   1844a:	4a04      	ldr	r2, [pc, #16]	; (1845c <errata_16+0x28>)
   1844c:	5cd0      	ldrb	r0, [r2, r3]
   1844e:	4770      	bx	lr
            }
        break;

    }

    return false;
   18450:	2000      	movs	r0, #0
}
   18452:	4770      	bx	lr
   18454:	f0000fe0 	.word	0xf0000fe0
   18458:	f0000fe8 	.word	0xf0000fe8
   1845c:	00029c5f 	.word	0x00029c5f

00018460 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   18460:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
   18462:	f7ff ffd9 	bl	18418 <errata_108>
   18466:	b128      	cbz	r0, 18474 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   18468:	4b7c      	ldr	r3, [pc, #496]	; (1865c <SystemInit+0x1fc>)
   1846a:	4a7d      	ldr	r2, [pc, #500]	; (18660 <SystemInit+0x200>)
   1846c:	681b      	ldr	r3, [r3, #0]
   1846e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   18472:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
   18474:	f7ff ffde 	bl	18434 <errata_16>
   18478:	b110      	cbz	r0, 18480 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1847a:	4b7a      	ldr	r3, [pc, #488]	; (18664 <SystemInit+0x204>)
   1847c:	4a7a      	ldr	r2, [pc, #488]	; (18668 <SystemInit+0x208>)
   1847e:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
   18480:	f7ff ffca 	bl	18418 <errata_108>
   18484:	b128      	cbz	r0, 18492 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   18486:	4b79      	ldr	r3, [pc, #484]	; (1866c <SystemInit+0x20c>)
   18488:	4a79      	ldr	r2, [pc, #484]	; (18670 <SystemInit+0x210>)
   1848a:	681b      	ldr	r3, [r3, #0]
   1848c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   18490:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
   18492:	f7ff ffcf 	bl	18434 <errata_16>
   18496:	b120      	cbz	r0, 184a2 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   18498:	4a76      	ldr	r2, [pc, #472]	; (18674 <SystemInit+0x214>)
   1849a:	68d3      	ldr	r3, [r2, #12]
   1849c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   184a0:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
   184a2:	f7ff ffb9 	bl	18418 <errata_108>
   184a6:	b140      	cbz	r0, 184ba <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
   184a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   184ac:	2200      	movs	r2, #0
   184ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   184b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   184b6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
   184ba:	f7ff ffbb 	bl	18434 <errata_16>
   184be:	b110      	cbz	r0, 184c6 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
   184c0:	4b6d      	ldr	r3, [pc, #436]	; (18678 <SystemInit+0x218>)
   184c2:	2203      	movs	r2, #3
   184c4:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
   184c6:	f7ff ffb5 	bl	18434 <errata_16>
   184ca:	b140      	cbz	r0, 184de <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
   184cc:	4b6b      	ldr	r3, [pc, #428]	; (1867c <SystemInit+0x21c>)
   184ce:	2205      	movs	r2, #5
   184d0:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
   184d2:	2201      	movs	r2, #1
   184d4:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
   184d6:	2200      	movs	r2, #0
   184d8:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
   184da:	223f      	movs	r2, #63	; 0x3f
   184dc:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   184de:	4b68      	ldr	r3, [pc, #416]	; (18680 <SystemInit+0x220>)
   184e0:	681a      	ldr	r2, [r3, #0]
   184e2:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   184e4:	bf0b      	itete	eq
   184e6:	4b67      	ldreq	r3, [pc, #412]	; (18684 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
   184e8:	4b67      	ldrne	r3, [pc, #412]	; (18688 <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   184ea:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
   184ec:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   184ee:	bf02      	ittt	eq
   184f0:	3308      	addeq	r3, #8
   184f2:	681b      	ldreq	r3, [r3, #0]
   184f4:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
   184f8:	2a06      	cmp	r2, #6
   184fa:	d14d      	bne.n	18598 <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
   184fc:	3b03      	subs	r3, #3
   184fe:	2b03      	cmp	r3, #3
   18500:	d803      	bhi.n	1850a <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
   18502:	4a62      	ldr	r2, [pc, #392]	; (1868c <SystemInit+0x22c>)
   18504:	5cd3      	ldrb	r3, [r2, r3]
   18506:	2b00      	cmp	r3, #0
   18508:	d046      	beq.n	18598 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1850a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1850e:	4b60      	ldr	r3, [pc, #384]	; (18690 <SystemInit+0x230>)
   18510:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   18514:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   18518:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1851c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   18520:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   18524:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   18528:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1852c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   18530:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   18534:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   18538:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1853c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   18540:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   18544:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   18548:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1854c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   18550:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   18554:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   18558:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1855c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   18560:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   18564:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   18568:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1856c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   18570:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   18574:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   18578:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1857c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   18580:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   18584:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   18588:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1858c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   18590:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   18594:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
   18598:	f7ff ff3e 	bl	18418 <errata_108>
   1859c:	b128      	cbz	r0, 185aa <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1859e:	4b3d      	ldr	r3, [pc, #244]	; (18694 <SystemInit+0x234>)
   185a0:	4a3d      	ldr	r2, [pc, #244]	; (18698 <SystemInit+0x238>)
   185a2:	681b      	ldr	r3, [r3, #0]
   185a4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   185a8:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
   185aa:	f7ff ff35 	bl	18418 <errata_108>
   185ae:	b148      	cbz	r0, 185c4 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   185b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   185b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   185b8:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   185ba:	bf44      	itt	mi
   185bc:	f06f 0201 	mvnmi.w	r2, #1
   185c0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
   185c4:	4b2e      	ldr	r3, [pc, #184]	; (18680 <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
   185c6:	681b      	ldr	r3, [r3, #0]
   185c8:	2b06      	cmp	r3, #6
   185ca:	d109      	bne.n	185e0 <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
   185cc:	4b2e      	ldr	r3, [pc, #184]	; (18688 <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
   185ce:	681b      	ldr	r3, [r3, #0]
   185d0:	3b03      	subs	r3, #3
   185d2:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   185d4:	bf81      	itttt	hi
   185d6:	4a31      	ldrhi	r2, [pc, #196]	; (1869c <SystemInit+0x23c>)
   185d8:	6813      	ldrhi	r3, [r2, #0]
   185da:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
   185de:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   185e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   185e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   185e8:	2a00      	cmp	r2, #0
   185ea:	db03      	blt.n	185f4 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   185ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   185f0:	2b00      	cmp	r3, #0
   185f2:	da2f      	bge.n	18654 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   185f4:	4b2a      	ldr	r3, [pc, #168]	; (186a0 <SystemInit+0x240>)
   185f6:	2201      	movs	r2, #1
   185f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   185fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18600:	2a00      	cmp	r2, #0
   18602:	d0fb      	beq.n	185fc <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
   18604:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   18608:	2115      	movs	r1, #21
   1860a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1860e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18612:	2a00      	cmp	r2, #0
   18614:	d0fb      	beq.n	1860e <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
   18616:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1861a:	2215      	movs	r2, #21
   1861c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   18620:	4b1f      	ldr	r3, [pc, #124]	; (186a0 <SystemInit+0x240>)
   18622:	461a      	mov	r2, r3
   18624:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   18628:	2900      	cmp	r1, #0
   1862a:	d0fb      	beq.n	18624 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1862c:	2100      	movs	r1, #0
   1862e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   18632:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   18636:	2b00      	cmp	r3, #0
   18638:	d0fb      	beq.n	18632 <SystemInit+0x1d2>
  __ASM volatile ("dsb 0xF":::"memory");
   1863a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1863e:	4919      	ldr	r1, [pc, #100]	; (186a4 <SystemInit+0x244>)
   18640:	4b19      	ldr	r3, [pc, #100]	; (186a8 <SystemInit+0x248>)
   18642:	68ca      	ldr	r2, [r1, #12]
   18644:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   18648:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1864a:	60cb      	str	r3, [r1, #12]
   1864c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   18650:	bf00      	nop
   18652:	e7fd      	b.n	18650 <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   18654:	4b15      	ldr	r3, [pc, #84]	; (186ac <SystemInit+0x24c>)
   18656:	4a16      	ldr	r2, [pc, #88]	; (186b0 <SystemInit+0x250>)
   18658:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1865a:	bd08      	pop	{r3, pc}
   1865c:	10000324 	.word	0x10000324
   18660:	40013540 	.word	0x40013540
   18664:	4007c074 	.word	0x4007c074
   18668:	baadf00d 	.word	0xbaadf00d
   1866c:	10000244 	.word	0x10000244
   18670:	4000053c 	.word	0x4000053c
   18674:	e000edf0 	.word	0xe000edf0
   18678:	400005a0 	.word	0x400005a0
   1867c:	40005610 	.word	0x40005610
   18680:	10000130 	.word	0x10000130
   18684:	f0000fe0 	.word	0xf0000fe0
   18688:	10000134 	.word	0x10000134
   1868c:	00029c63 	.word	0x00029c63
   18690:	4000c000 	.word	0x4000c000
   18694:	10000258 	.word	0x10000258
   18698:	40000ee4 	.word	0x40000ee4
   1869c:	4000173c 	.word	0x4000173c
   186a0:	4001e000 	.word	0x4001e000
   186a4:	e000ed00 	.word	0xe000ed00
   186a8:	05fa0004 	.word	0x05fa0004
   186ac:	2000e37c 	.word	0x2000e37c
   186b0:	03d09000 	.word	0x03d09000

000186b4 <nvmc_word_write>:
   186b4:	4a04      	ldr	r2, [pc, #16]	; (186c8 <nvmc_word_write+0x14>)
   186b6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   186ba:	07db      	lsls	r3, r3, #31
   186bc:	d5fb      	bpl.n	186b6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   186be:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   186c0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   186c4:	4770      	bx	lr
   186c6:	bf00      	nop
   186c8:	4001e000 	.word	0x4001e000

000186cc <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   186cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   186d0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   186d2:	fbb0 f3f2 	udiv	r3, r0, r2
   186d6:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(addr < flash_total_size_get());

    if (!is_page_aligned_check(addr))
   186da:	b973      	cbnz	r3, 186fa <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   186dc:	4b08      	ldr	r3, [pc, #32]	; (18700 <nrfx_nvmc_page_erase+0x34>)
   186de:	2202      	movs	r2, #2
   186e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   186e4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   186e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   186ec:	07d2      	lsls	r2, r2, #31
   186ee:	d5fb      	bpl.n	186e8 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   186f0:	2200      	movs	r2, #0
   186f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   186f6:	4803      	ldr	r0, [pc, #12]	; (18704 <nrfx_nvmc_page_erase+0x38>)
   186f8:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   186fa:	4803      	ldr	r0, [pc, #12]	; (18708 <nrfx_nvmc_page_erase+0x3c>)
}
   186fc:	4770      	bx	lr
   186fe:	bf00      	nop
   18700:	4001e000 	.word	0x4001e000
   18704:	0bad0000 	.word	0x0bad0000
   18708:	0bad000a 	.word	0x0bad000a

0001870c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1870c:	b510      	push	{r4, lr}
   1870e:	4c05      	ldr	r4, [pc, #20]	; (18724 <nrfx_nvmc_word_write+0x18>)
   18710:	2301      	movs	r3, #1
   18712:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(addr < flash_total_size_get());
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   18716:	f7ff ffcd 	bl	186b4 <nvmc_word_write>
   1871a:	2300      	movs	r3, #0
   1871c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   18720:	bd10      	pop	{r4, pc}
   18722:	bf00      	nop
   18724:	4001e000 	.word	0x4001e000

00018728 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
   18728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1872c:	4b1e      	ldr	r3, [pc, #120]	; (187a8 <nrfx_nvmc_bytes_write+0x80>)
   1872e:	4615      	mov	r5, r2
   18730:	2201      	movs	r2, #1
   18732:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
   18736:	f010 0303 	ands.w	r3, r0, #3
{
   1873a:	4604      	mov	r4, r0
   1873c:	460e      	mov	r6, r1
    if (unaligned_bytes != 0)
   1873e:	d010      	beq.n	18762 <nrfx_nvmc_bytes_write+0x3a>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
   18740:	f1c3 0704 	rsb	r7, r3, #4
        if (leading_bytes > num_bytes)
   18744:	42af      	cmp	r7, r5
   18746:	bf28      	it	cs
   18748:	462f      	movcs	r7, r5
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
   1874a:	463a      	mov	r2, r7
   1874c:	eba0 0803 	sub.w	r8, r0, r3
   18750:	f00a f9e1 	bl	22b16 <partial_word_create>
   18754:	4601      	mov	r1, r0
   18756:	4640      	mov	r0, r8
   18758:	f7ff ffac 	bl	186b4 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
   1875c:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
   1875e:	443c      	add	r4, r7
        bytes_src += leading_bytes;
   18760:	443e      	add	r6, r7
    for (uint32_t i = 0; i < num_words; i++)
   18762:	f025 0803 	bic.w	r8, r5, #3
   18766:	44b0      	add	r8, r6
        }
    }
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;
   18768:	4637      	mov	r7, r6
   1876a:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
   1876e:	45b8      	cmp	r8, r7
   18770:	d113      	bne.n	1879a <nrfx_nvmc_bytes_write+0x72>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
   18772:	f015 0203 	ands.w	r2, r5, #3
   18776:	d00a      	beq.n	1878e <nrfx_nvmc_bytes_write+0x66>
        addr += word_count * NVMC_BYTES_IN_WORD;
   18778:	f025 0103 	bic.w	r1, r5, #3
   1877c:	440c      	add	r4, r1
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
   1877e:	4620      	mov	r0, r4
   18780:	4431      	add	r1, r6
   18782:	f00a f9c8 	bl	22b16 <partial_word_create>
   18786:	4601      	mov	r1, r0
   18788:	4620      	mov	r0, r4
   1878a:	f7ff ff93 	bl	186b4 <nvmc_word_write>
   1878e:	4b06      	ldr	r3, [pc, #24]	; (187a8 <nrfx_nvmc_bytes_write+0x80>)
   18790:	2200      	movs	r2, #0
   18792:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    }

    nvmc_readonly_mode_set();
}
   18796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
   1879a:	eb09 0007 	add.w	r0, r9, r7
   1879e:	f857 1b04 	ldr.w	r1, [r7], #4
   187a2:	f7ff ff87 	bl	186b4 <nvmc_word_write>
   187a6:	e7e2      	b.n	1876e <nrfx_nvmc_bytes_write+0x46>
   187a8:	4001e000 	.word	0x4001e000

000187ac <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   187ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   187b0:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   187b2:	4d4e      	ldr	r5, [pc, #312]	; (188ec <nrfx_spi_init+0x140>)
   187b4:	262c      	movs	r6, #44	; 0x2c
   187b6:	4366      	muls	r6, r4
   187b8:	19af      	adds	r7, r5, r6
   187ba:	f897 c01c 	ldrb.w	ip, [r7, #28]
   187be:	f1bc 0f00 	cmp.w	ip, #0
   187c2:	f040 8091 	bne.w	188e8 <nrfx_spi_init+0x13c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   187c6:	51aa      	str	r2, [r5, r6]
    p_cb->p_context = p_context;
   187c8:	607b      	str	r3, [r7, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   187ca:	f891 e000 	ldrb.w	lr, [r1]
   187ce:	7b0f      	ldrb	r7, [r1, #12]
   187d0:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   187d4:	2301      	movs	r3, #1
   187d6:	fa03 f30e 	lsl.w	r3, r3, lr
   187da:	2f01      	cmp	r7, #1
   187dc:	bf94      	ite	ls
   187de:	f8c6 350c 	strls.w	r3, [r6, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   187e2:	f8c6 3508 	strhi.w	r3, [r6, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   187e6:	f50e 73e0 	add.w	r3, lr, #448	; 0x1c0
   187ea:	f04f 0c01 	mov.w	ip, #1
   187ee:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   187f2:	784b      	ldrb	r3, [r1, #1]
   187f4:	2bff      	cmp	r3, #255	; 0xff
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   187f6:	bf1f      	itttt	ne
   187f8:	fa0c fc03 	lslne.w	ip, ip, r3
    p_reg->OUTCLR = clr_mask;
   187fc:	f8c6 c50c 	strne.w	ip, [r6, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18800:	f503 7ce0 	addne.w	ip, r3, #448	; 0x1c0
   18804:	f04f 0803 	movne.w	r8, #3
   18808:	bf18      	it	ne
   1880a:	f846 802c 	strne.w	r8, [r6, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1880e:	788e      	ldrb	r6, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   18810:	bf08      	it	eq
   18812:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   18816:	2eff      	cmp	r6, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   18818:	bf1f      	itttt	ne
   1881a:	f891 900e 	ldrbne.w	r9, [r1, #14]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1881e:	f506 7ce0 	addne.w	ip, r6, #448	; 0x1c0
   18822:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   18826:	ea4f 0989 	movne.w	r9, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1882a:	bf18      	it	ne
   1882c:	f84a 902c 	strne.w	r9, [sl, ip, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    m_cb[p_instance->drv_inst_idx].miso_pin = p_config->miso_pin;
   18830:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   18834:	fb0c 5c04 	mla	ip, ip, r4, r5
        miso_pin = p_config->miso_pin;
   18838:	bf18      	it	ne
   1883a:	46b0      	movne	r8, r6
    m_cb[p_instance->drv_inst_idx].miso_pin = p_config->miso_pin;
   1883c:	f88c 601f 	strb.w	r6, [ip, #31]
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   18840:	78ce      	ldrb	r6, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   18842:	bf08      	it	eq
   18844:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   18848:	2eff      	cmp	r6, #255	; 0xff
   1884a:	d00d      	beq.n	18868 <nrfx_spi_init+0xbc>
    p_reg->OUTSET = set_mask;
   1884c:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18850:	f04f 0c01 	mov.w	ip, #1
   18854:	fa0c fc06 	lsl.w	ip, ip, r6
    p_reg->OUTSET = set_mask;
   18858:	f8c9 c508 	str.w	ip, [r9, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1885c:	f506 7ce0 	add.w	ip, r6, #448	; 0x1c0
   18860:	f04f 0a03 	mov.w	sl, #3
   18864:	f849 a02c 	str.w	sl, [r9, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   18868:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   1886c:	fb0c 5c04 	mla	ip, ip, r4, r5
   18870:	f88c 601e 	strb.w	r6, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   18874:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
   18876:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
   1887a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = (uint32_t)frequency;
   1887e:	688b      	ldr	r3, [r1, #8]
    p_reg->PSELMISO = miso_pin;
   18880:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   18884:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   18888:	7b4b      	ldrb	r3, [r1, #13]
   1888a:	3300      	adds	r3, #0
   1888c:	bf18      	it	ne
   1888e:	2301      	movne	r3, #1
    switch (spi_mode)
   18890:	2f02      	cmp	r7, #2
   18892:	d023      	beq.n	188dc <nrfx_spi_init+0x130>
   18894:	2f03      	cmp	r7, #3
   18896:	d024      	beq.n	188e2 <nrfx_spi_init+0x136>
   18898:	2f01      	cmp	r7, #1
   1889a:	d101      	bne.n	188a0 <nrfx_spi_init+0xf4>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1889c:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   188a0:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   188a4:	232c      	movs	r3, #44	; 0x2c
   188a6:	fb03 5304 	mla	r3, r3, r4, r5
   188aa:	7949      	ldrb	r1, [r1, #5]
   188ac:	f883 1020 	strb.w	r1, [r3, #32]

    if (p_cb->handler)
   188b0:	b112      	cbz	r2, 188b8 <nrfx_spi_init+0x10c>
    p_reg->INTENSET = mask;
   188b2:	2304      	movs	r3, #4
   188b4:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   188b8:	2301      	movs	r3, #1
   188ba:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        nrf_spi_int_enable(p_spi, NRF_SPI_INT_READY_MASK);
    }

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   188be:	b11a      	cbz	r2, 188c8 <nrfx_spi_init+0x11c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   188c0:	f340 3007 	sbfx	r0, r0, #12, #8
   188c4:	f7eb ffec 	bl	48a0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   188c8:	232c      	movs	r3, #44	; 0x2c
   188ca:	fb03 5404 	mla	r4, r3, r4, r5
   188ce:	2300      	movs	r3, #0
   188d0:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   188d2:	4807      	ldr	r0, [pc, #28]	; (188f0 <nrfx_spi_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   188d4:	2301      	movs	r3, #1
   188d6:	7723      	strb	r3, [r4, #28]
}
   188d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   188dc:	f043 0304 	orr.w	r3, r3, #4
        break;
   188e0:	e7de      	b.n	188a0 <nrfx_spi_init+0xf4>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   188e2:	f043 0306 	orr.w	r3, r3, #6
        break;
   188e6:	e7db      	b.n	188a0 <nrfx_spi_init+0xf4>
        return err_code;
   188e8:	4802      	ldr	r0, [pc, #8]	; (188f4 <nrfx_spi_init+0x148>)
   188ea:	e7f5      	b.n	188d8 <nrfx_spi_init+0x12c>
   188ec:	2000193c 	.word	0x2000193c
   188f0:	0bad0000 	.word	0x0bad0000
   188f4:	0bad0005 	.word	0x0bad0005

000188f8 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   188f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   188fc:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   188fe:	4d42      	ldr	r5, [pc, #264]	; (18a08 <nrfx_spi_xfer+0x110>)
   18900:	232c      	movs	r3, #44	; 0x2c
   18902:	4373      	muls	r3, r6
{
   18904:	4696      	mov	lr, r2
    if (p_cb->transfer_in_progress)
   18906:	18ea      	adds	r2, r5, r3
{
   18908:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   1890a:	7f51      	ldrb	r1, [r2, #29]
{
   1890c:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1890e:	2900      	cmp	r1, #0
   18910:	d178      	bne.n	18a04 <nrfx_spi_xfer+0x10c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   18912:	f855 c003 	ldr.w	ip, [r5, r3]
   18916:	f1bc 0f00 	cmp.w	ip, #0
   1891a:	d001      	beq.n	18920 <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
   1891c:	2301      	movs	r3, #1
   1891e:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   18920:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   18924:	242c      	movs	r4, #44	; 0x2c
   18926:	fb04 5406 	mla	r4, r4, r6, r5
   1892a:	f104 080c 	add.w	r8, r4, #12
   1892e:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   18932:	7fa2      	ldrb	r2, [r4, #30]
    p_cb->abort = false;
   18934:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   18936:	2aff      	cmp	r2, #255	; 0xff
    p_cb->abort = false;
   18938:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1893c:	bf1f      	itttt	ne
   1893e:	2301      	movne	r3, #1
   18940:	4093      	lslne	r3, r2
    p_reg->OUTCLR = clr_mask;
   18942:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   18946:	f8c2 350c 	strne.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
   1894a:	232c      	movs	r3, #44	; 0x2c
   1894c:	f1be 0f00 	cmp.w	lr, #0
   18950:	d007      	beq.n	18962 <nrfx_spi_xfer+0x6a>
    {
        p_cb->transfer_in_progress = false;
   18952:	fb03 5306 	mla	r3, r3, r6, r5
   18956:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   18958:	482c      	ldr	r0, [pc, #176]	; (18a0c <nrfx_spi_xfer+0x114>)
        p_cb->transfer_in_progress = false;
   1895a:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1895c:	b003      	add	sp, #12
   1895e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   18962:	f8d9 4000 	ldr.w	r4, [r9]
    p_reg->INTENCLR = mask;
   18966:	2204      	movs	r2, #4
   18968:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    p_cb->bytes_transferred = 0;
   1896c:	fb03 5306 	mla	r3, r3, r6, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18970:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   18974:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   18978:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
   1897c:	9200      	str	r2, [sp, #0]
    (void)dummy;
   1897e:	9a00      	ldr	r2, [sp, #0]
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   18980:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   18982:	b18a      	cbz	r2, 189a8 <nrfx_spi_xfer+0xb0>
   18984:	683b      	ldr	r3, [r7, #0]
   18986:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   18988:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1898c:	2a01      	cmp	r2, #1
   1898e:	d90e      	bls.n	189ae <nrfx_spi_xfer+0xb6>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   18990:	683b      	ldr	r3, [r7, #0]
   18992:	785b      	ldrb	r3, [r3, #1]
   18994:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
   18998:	f1bc 0f00 	cmp.w	ip, #0
   1899c:	d010      	beq.n	189c0 <nrfx_spi_xfer+0xc8>
    p_reg->INTENSET = mask;
   1899e:	2304      	movs	r3, #4
   189a0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   189a4:	481a      	ldr	r0, [pc, #104]	; (18a10 <nrfx_spi_xfer+0x118>)
   189a6:	e7d9      	b.n	1895c <nrfx_spi_xfer+0x64>
    nrf_spi_txd_set(p_spi,
   189a8:	f893 3020 	ldrb.w	r3, [r3, #32]
   189ac:	e7ec      	b.n	18988 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
   189ae:	68fb      	ldr	r3, [r7, #12]
   189b0:	2b01      	cmp	r3, #1
   189b2:	d9f1      	bls.n	18998 <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   189b4:	232c      	movs	r3, #44	; 0x2c
   189b6:	fb03 5306 	mla	r3, r3, r6, r5
    p_reg->TXD = data;
   189ba:	f893 3020 	ldrb.w	r3, [r3, #32]
   189be:	e7e9      	b.n	18994 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   189c0:	f04f 082c 	mov.w	r8, #44	; 0x2c
   189c4:	fb06 5808 	mla	r8, r6, r8, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   189c8:	4667      	mov	r7, ip
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   189ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   189ce:	2b00      	cmp	r3, #0
   189d0:	d0fb      	beq.n	189ca <nrfx_spi_xfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   189d2:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   189d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   189da:	9301      	str	r3, [sp, #4]
        } while (transfer_byte(p_spi, p_cb));
   189dc:	4641      	mov	r1, r8
   189de:	4620      	mov	r0, r4
    (void)dummy;
   189e0:	9b01      	ldr	r3, [sp, #4]
   189e2:	f00a f8b9 	bl	22b58 <transfer_byte>
   189e6:	2800      	cmp	r0, #0
   189e8:	d1ef      	bne.n	189ca <nrfx_spi_xfer+0xd2>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   189ea:	232c      	movs	r3, #44	; 0x2c
   189ec:	fb03 5506 	mla	r5, r3, r6, r5
   189f0:	7faa      	ldrb	r2, [r5, #30]
   189f2:	2aff      	cmp	r2, #255	; 0xff
   189f4:	d0d6      	beq.n	189a4 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   189f6:	2301      	movs	r3, #1
   189f8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   189fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   189fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   18a02:	e7cf      	b.n	189a4 <nrfx_spi_xfer+0xac>
        return err_code;
   18a04:	4803      	ldr	r0, [pc, #12]	; (18a14 <nrfx_spi_xfer+0x11c>)
   18a06:	e7a9      	b.n	1895c <nrfx_spi_xfer+0x64>
   18a08:	2000193c 	.word	0x2000193c
   18a0c:	0bad0003 	.word	0x0bad0003
   18a10:	0bad0000 	.word	0x0bad0000
   18a14:	0bad000b 	.word	0x0bad000b

00018a18 <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
   18a18:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18a1a:	4b10      	ldr	r3, [pc, #64]	; (18a5c <nrfx_spi_0_irq_handler+0x44>)
    if (!transfer_byte(p_spi, p_cb))
   18a1c:	4c10      	ldr	r4, [pc, #64]	; (18a60 <nrfx_spi_0_irq_handler+0x48>)
   18a1e:	4811      	ldr	r0, [pc, #68]	; (18a64 <nrfx_spi_0_irq_handler+0x4c>)
   18a20:	2200      	movs	r2, #0
   18a22:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   18a24:	681b      	ldr	r3, [r3, #0]
   18a26:	9301      	str	r3, [sp, #4]
   18a28:	4621      	mov	r1, r4
    (void)dummy;
   18a2a:	9b01      	ldr	r3, [sp, #4]
   18a2c:	f00a f894 	bl	22b58 <transfer_byte>
   18a30:	b990      	cbnz	r0, 18a58 <nrfx_spi_0_irq_handler+0x40>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   18a32:	7fa2      	ldrb	r2, [r4, #30]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   18a34:	480c      	ldr	r0, [pc, #48]	; (18a68 <nrfx_spi_0_irq_handler+0x50>)
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   18a36:	2aff      	cmp	r2, #255	; 0xff
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18a38:	bf1f      	itttt	ne
   18a3a:	2301      	movne	r3, #1
   18a3c:	4093      	lslne	r3, r2
    p_reg->OUTSET = set_mask;
   18a3e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   18a42:	f8c2 3508 	strne.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
   18a46:	2300      	movs	r3, #0
   18a48:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   18a4a:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   18a4c:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
}
   18a50:	b002      	add	sp, #8
   18a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   18a56:	4718      	bx	r3
}
   18a58:	b002      	add	sp, #8
   18a5a:	bd10      	pop	{r4, pc}
   18a5c:	40003108 	.word	0x40003108
   18a60:	2000193c 	.word	0x2000193c
   18a64:	40003000 	.word	0x40003000
   18a68:	20001944 	.word	0x20001944

00018a6c <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   18a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   18a6e:	4b34      	ldr	r3, [pc, #208]	; (18b40 <twi_rx_start_transfer+0xd4>)
   18a70:	9301      	str	r3, [sp, #4]
{
   18a72:	460d      	mov	r5, r1

    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   18a74:	f44f 7182 	mov.w	r1, #260	; 0x104
{
   18a78:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   18a7a:	f00a f8a1 	bl	22bc0 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   18a7e:	f44f 7192 	mov.w	r1, #292	; 0x124
   18a82:	f00a f89d 	bl	22bc0 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
   18a86:	f44f 718e 	mov.w	r1, #284	; 0x11c
   18a8a:	f00a f899 	bl	22bc0 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
   18a8e:	f44f 7184 	mov.w	r1, #264	; 0x108
   18a92:	f00a f895 	bl	22bc0 <nrf_twi_event_clear>

    p_cb->bytes_transferred = 0;
   18a96:	2300      	movs	r3, #0
   18a98:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
   18a9a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   18a9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18aa0:	2b01      	cmp	r3, #1
   18aa2:	d118      	bne.n	18ad6 <twi_rx_start_transfer+0x6a>
   18aa4:	6a2b      	ldr	r3, [r5, #32]
   18aa6:	065b      	lsls	r3, r3, #25
   18aa8:	d415      	bmi.n	18ad6 <twi_rx_start_transfer+0x6a>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   18aaa:	2302      	movs	r3, #2
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   18aac:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   18ab0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   18ab4:	2a02      	cmp	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18ab6:	f04f 0301 	mov.w	r3, #1
   18aba:	6223      	str	r3, [r4, #32]
   18abc:	bf18      	it	ne
   18abe:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   18ac0:	682b      	ldr	r3, [r5, #0]
   18ac2:	b193      	cbz	r3, 18aea <twi_rx_start_transfer+0x7e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   18ac4:	f240 2386 	movw	r3, #646	; 0x286
   18ac8:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   18aca:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   18acc:	481d      	ldr	r0, [pc, #116]	; (18b44 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   18ace:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   18ad2:	b003      	add	sp, #12
   18ad4:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   18ad6:	2301      	movs	r3, #1
   18ad8:	e7e8      	b.n	18aac <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   18ada:	4629      	mov	r1, r5
   18adc:	4620      	mov	r0, r4
   18ade:	f00a f897 	bl	22c10 <twi_transfer>
        while ((hw_timeout > 0) &&
   18ae2:	b128      	cbz	r0, 18af0 <twi_rx_start_transfer+0x84>
               hw_timeout--;
   18ae4:	9b01      	ldr	r3, [sp, #4]
   18ae6:	3b01      	subs	r3, #1
   18ae8:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   18aea:	9b01      	ldr	r3, [sp, #4]
   18aec:	2b00      	cmp	r3, #0
   18aee:	dcf4      	bgt.n	18ada <twi_rx_start_transfer+0x6e>
        if (p_cb->error)
   18af0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   18af4:	b95b      	cbnz	r3, 18b0e <twi_rx_start_transfer+0xa2>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   18af6:	4813      	ldr	r0, [pc, #76]	; (18b44 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   18af8:	9b01      	ldr	r3, [sp, #4]
   18afa:	2b00      	cmp	r3, #0
   18afc:	dce9      	bgt.n	18ad2 <twi_rx_start_transfer+0x66>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   18afe:	2300      	movs	r3, #0
   18b00:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   18b04:	2305      	movs	r3, #5
   18b06:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   18b0a:	480f      	ldr	r0, [pc, #60]	; (18b48 <twi_rx_start_transfer+0xdc>)
    return ret_code;
   18b0c:	e7e1      	b.n	18ad2 <twi_rx_start_transfer+0x66>
    uint32_t error_source = p_reg->ERRORSRC;
   18b0e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   18b12:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   18b16:	2b00      	cmp	r3, #0
   18b18:	d0ed      	beq.n	18af6 <twi_rx_start_transfer+0x8a>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   18b1a:	4a0c      	ldr	r2, [pc, #48]	; (18b4c <twi_rx_start_transfer+0xe0>)
   18b1c:	480a      	ldr	r0, [pc, #40]	; (18b48 <twi_rx_start_transfer+0xdc>)
   18b1e:	f013 0f01 	tst.w	r3, #1
   18b22:	bf18      	it	ne
   18b24:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   18b26:	f013 0f02 	tst.w	r3, #2
   18b2a:	f102 0201 	add.w	r2, r2, #1
   18b2e:	bf18      	it	ne
   18b30:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   18b32:	f013 0f04 	tst.w	r3, #4
   18b36:	4b06      	ldr	r3, [pc, #24]	; (18b50 <twi_rx_start_transfer+0xe4>)
   18b38:	bf18      	it	ne
   18b3a:	4618      	movne	r0, r3
   18b3c:	e7dc      	b.n	18af8 <twi_rx_start_transfer+0x8c>
   18b3e:	bf00      	nop
   18b40:	000186a0 	.word	0x000186a0
   18b44:	0bad0000 	.word	0x0bad0000
   18b48:	0bad0001 	.word	0x0bad0001
   18b4c:	0bae0000 	.word	0x0bae0000
   18b50:	0bae0002 	.word	0x0bae0002

00018b54 <twi_tx_start_transfer>:
{
   18b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   18b56:	4b30      	ldr	r3, [pc, #192]	; (18c18 <twi_tx_start_transfer+0xc4>)
   18b58:	9301      	str	r3, [sp, #4]
{
   18b5a:	460d      	mov	r5, r1
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   18b5c:	f44f 7182 	mov.w	r1, #260	; 0x104
{
   18b60:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   18b62:	f00a f82d 	bl	22bc0 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   18b66:	f44f 7192 	mov.w	r1, #292	; 0x124
   18b6a:	f00a f829 	bl	22bc0 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
   18b6e:	f44f 718e 	mov.w	r1, #284	; 0x11c
   18b72:	f00a f825 	bl	22bc0 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
   18b76:	f44f 7184 	mov.w	r1, #264	; 0x108
   18b7a:	f00a f821 	bl	22bc0 <nrf_twi_event_clear>
    p_reg->SHORTS = mask;
   18b7e:	2300      	movs	r3, #0
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   18b80:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   18b84:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   18b88:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
   18b8a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18b8e:	2301      	movs	r3, #1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   18b90:	429a      	cmp	r2, r3
   18b92:	6203      	str	r3, [r0, #32]
    (void)twi_send_byte(p_twi, p_cb);
   18b94:	4629      	mov	r1, r5
   18b96:	bf18      	it	ne
   18b98:	6083      	strne	r3, [r0, #8]
   18b9a:	f00a f819 	bl	22bd0 <twi_send_byte>
    if (p_cb->handler)
   18b9e:	682b      	ldr	r3, [r5, #0]
   18ba0:	b183      	cbz	r3, 18bc4 <twi_tx_start_transfer+0x70>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   18ba2:	f240 2386 	movw	r3, #646	; 0x286
   18ba6:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   18ba8:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   18baa:	481c      	ldr	r0, [pc, #112]	; (18c1c <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   18bac:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   18bb0:	b003      	add	sp, #12
   18bb2:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   18bb4:	4629      	mov	r1, r5
   18bb6:	4620      	mov	r0, r4
   18bb8:	f00a f82a 	bl	22c10 <twi_transfer>
        while ((hw_timeout > 0) &&
   18bbc:	b128      	cbz	r0, 18bca <twi_tx_start_transfer+0x76>
            hw_timeout--;
   18bbe:	9b01      	ldr	r3, [sp, #4]
   18bc0:	3b01      	subs	r3, #1
   18bc2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   18bc4:	9b01      	ldr	r3, [sp, #4]
   18bc6:	2b00      	cmp	r3, #0
   18bc8:	dcf4      	bgt.n	18bb4 <twi_tx_start_transfer+0x60>
        if (p_cb->error)
   18bca:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   18bce:	b95b      	cbnz	r3, 18be8 <twi_tx_start_transfer+0x94>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   18bd0:	4812      	ldr	r0, [pc, #72]	; (18c1c <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   18bd2:	9b01      	ldr	r3, [sp, #4]
   18bd4:	2b00      	cmp	r3, #0
   18bd6:	dceb      	bgt.n	18bb0 <twi_tx_start_transfer+0x5c>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   18bd8:	2300      	movs	r3, #0
   18bda:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   18bde:	2305      	movs	r3, #5
   18be0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   18be4:	480e      	ldr	r0, [pc, #56]	; (18c20 <twi_tx_start_transfer+0xcc>)
    return ret_code;
   18be6:	e7e3      	b.n	18bb0 <twi_tx_start_transfer+0x5c>
    uint32_t error_source = p_reg->ERRORSRC;
   18be8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   18bec:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   18bf0:	2b00      	cmp	r3, #0
   18bf2:	d0ed      	beq.n	18bd0 <twi_tx_start_transfer+0x7c>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   18bf4:	4a0b      	ldr	r2, [pc, #44]	; (18c24 <twi_tx_start_transfer+0xd0>)
   18bf6:	480a      	ldr	r0, [pc, #40]	; (18c20 <twi_tx_start_transfer+0xcc>)
   18bf8:	f013 0f01 	tst.w	r3, #1
   18bfc:	bf18      	it	ne
   18bfe:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   18c00:	f013 0f02 	tst.w	r3, #2
   18c04:	f102 0201 	add.w	r2, r2, #1
   18c08:	bf18      	it	ne
   18c0a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   18c0c:	f013 0f04 	tst.w	r3, #4
   18c10:	4b05      	ldr	r3, [pc, #20]	; (18c28 <twi_tx_start_transfer+0xd4>)
   18c12:	bf18      	it	ne
   18c14:	4618      	movne	r0, r3
   18c16:	e7dc      	b.n	18bd2 <twi_tx_start_transfer+0x7e>
   18c18:	000186a0 	.word	0x000186a0
   18c1c:	0bad0000 	.word	0x0bad0000
   18c20:	0bad0001 	.word	0x0bad0001
   18c24:	0bae0000 	.word	0x0bae0000
   18c28:	0bae0002 	.word	0x0bae0002

00018c2c <nrfx_twi_init>:
{
   18c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   18c2e:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   18c30:	4d1d      	ldr	r5, [pc, #116]	; (18ca8 <nrfx_twi_init+0x7c>)
   18c32:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   18c36:	fb0c fc07 	mul.w	ip, ip, r7
   18c3a:	eb05 040c 	add.w	r4, r5, ip
   18c3e:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   18c42:	bb7e      	cbnz	r6, 18ca4 <nrfx_twi_init+0x78>
    p_cb->p_context       = p_context;
   18c44:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   18c46:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
   18c48:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   18c4a:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
   18c4e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
   18c52:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   18c56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
   18c5a:	680c      	ldr	r4, [r1, #0]
    p_cb->handler         = event_handler;
   18c5c:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18c60:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   18c64:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
   18c68:	f240 6c0c 	movw	ip, #1548	; 0x60c
   18c6c:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   18c70:	684b      	ldr	r3, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   18c72:	6800      	ldr	r0, [r0, #0]
   18c74:	f503 7ee0 	add.w	lr, r3, #448	; 0x1c0
   18c78:	f846 c02e 	str.w	ip, [r6, lr, lsl #2]
    p_reg->PSELSCL = scl_pin;
   18c7c:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
   18c80:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   18c84:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   18c86:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   18c8a:	b11a      	cbz	r2, 18c94 <nrfx_twi_init+0x68>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   18c8c:	f340 3007 	sbfx	r0, r0, #12, #8
   18c90:	f7eb fe06 	bl	48a0 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   18c94:	233c      	movs	r3, #60	; 0x3c
   18c96:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   18c9a:	4804      	ldr	r0, [pc, #16]	; (18cac <nrfx_twi_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   18c9c:	2301      	movs	r3, #1
   18c9e:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   18ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   18ca4:	4802      	ldr	r0, [pc, #8]	; (18cb0 <nrfx_twi_init+0x84>)
   18ca6:	e7fc      	b.n	18ca2 <nrfx_twi_init+0x76>
   18ca8:	20001968 	.word	0x20001968
   18cac:	0bad0000 	.word	0x0bad0000
   18cb0:	0bad0005 	.word	0x0bad0005

00018cb4 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   18cb4:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18cb6:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   18cb8:	2105      	movs	r1, #5
   18cba:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   18cbe:	4a04      	ldr	r2, [pc, #16]	; (18cd0 <nrfx_twi_enable+0x1c>)
   18cc0:	213c      	movs	r1, #60	; 0x3c
   18cc2:	fb01 2303 	mla	r3, r1, r3, r2
   18cc6:	2202      	movs	r2, #2
   18cc8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   18ccc:	4770      	bx	lr
   18cce:	bf00      	nop
   18cd0:	20001968 	.word	0x20001968

00018cd4 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   18cd4:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   18cd6:	490a      	ldr	r1, [pc, #40]	; (18d00 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18cd8:	7902      	ldrb	r2, [r0, #4]
   18cda:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   18cde:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   18ce2:	f021 0103 	bic.w	r1, r1, #3
   18ce6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   18cea:	2100      	movs	r1, #0
   18cec:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   18cf0:	4b04      	ldr	r3, [pc, #16]	; (18d04 <nrfx_twi_disable+0x30>)
   18cf2:	213c      	movs	r1, #60	; 0x3c
   18cf4:	fb01 3202 	mla	r2, r1, r2, r3
   18cf8:	2301      	movs	r3, #1
   18cfa:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
   18cfe:	4770      	bx	lr
   18d00:	00044286 	.word	0x00044286
   18d04:	20001968 	.word	0x20001968

00018d08 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   18d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   18d0c:	4d32      	ldr	r5, [pc, #200]	; (18dd8 <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18d0e:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   18d12:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   18d16:	233c      	movs	r3, #60	; 0x3c
   18d18:	fb03 5308 	mla	r3, r3, r8, r5
{
   18d1c:	460e      	mov	r6, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   18d1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   18d22:	2b01      	cmp	r3, #1
{
   18d24:	4696      	mov	lr, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   18d26:	d104      	bne.n	18d32 <nrfx_twi_xfer+0x2a>
   18d28:	780b      	ldrb	r3, [r1, #0]
   18d2a:	2b01      	cmp	r3, #1
   18d2c:	d106      	bne.n	18d3c <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
   18d2e:	482b      	ldr	r0, [pc, #172]	; (18ddc <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   18d30:	e011      	b.n	18d56 <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   18d32:	2b02      	cmp	r3, #2
   18d34:	d102      	bne.n	18d3c <nrfx_twi_xfer+0x34>
   18d36:	780b      	ldrb	r3, [r1, #0]
   18d38:	2b01      	cmp	r3, #1
   18d3a:	d1f8      	bne.n	18d2e <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
   18d3c:	243c      	movs	r4, #60	; 0x3c
    p_reg->INTENCLR = mask;
   18d3e:	4b28      	ldr	r3, [pc, #160]	; (18de0 <nrfx_twi_xfer+0xd8>)
   18d40:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   18d44:	fb04 5408 	mla	r4, r4, r8, r5
   18d48:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   18d4c:	b12b      	cbz	r3, 18d5a <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   18d4e:	68a3      	ldr	r3, [r4, #8]
        return err_code;
   18d50:	4824      	ldr	r0, [pc, #144]	; (18de4 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
   18d52:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   18d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   18d5a:	f08e 0304 	eor.w	r3, lr, #4
   18d5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   18d62:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    p_cb->flags       = flags;
   18d66:	f8c4 e020 	str.w	lr, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   18d6a:	46b4      	mov	ip, r6
   18d6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   18d70:	f104 070c 	add.w	r7, r4, #12
   18d74:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   18d76:	f8dc 3000 	ldr.w	r3, [ip]
   18d7a:	603b      	str	r3, [r7, #0]
    p_cb->curr_length = p_xfer_desc->primary_length;
   18d7c:	6873      	ldr	r3, [r6, #4]
   18d7e:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   18d80:	68f3      	ldr	r3, [r6, #12]
   18d82:	6263      	str	r3, [r4, #36]	; 0x24
    p_reg->ADDRESS = address;
   18d84:	7873      	ldrb	r3, [r6, #1]
   18d86:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   18d8a:	7833      	ldrb	r3, [r6, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18d8c:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   18d90:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18d92:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   18d96:	d01a      	beq.n	18dce <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   18d98:	b9b3      	cbnz	r3, 18dc8 <nrfx_twi_xfer+0xc0>
   18d9a:	f3ce 1e40 	ubfx	lr, lr, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   18d9e:	233c      	movs	r3, #60	; 0x3c
   18da0:	fb03 5308 	mla	r3, r3, r8, r5
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   18da4:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   18da6:	f883 e02c 	strb.w	lr, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   18daa:	4648      	mov	r0, r9
   18dac:	f7ff fed2 	bl	18b54 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   18db0:	233c      	movs	r3, #60	; 0x3c
   18db2:	fb03 f808 	mul.w	r8, r3, r8
   18db6:	eb05 0208 	add.w	r2, r5, r8
   18dba:	f855 3008 	ldr.w	r3, [r5, r8]
   18dbe:	2b00      	cmp	r3, #0
   18dc0:	d1c9      	bne.n	18d56 <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
   18dc2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   18dc6:	e7c6      	b.n	18d56 <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   18dc8:	f04f 0e01 	mov.w	lr, #1
   18dcc:	e7e7      	b.n	18d9e <nrfx_twi_xfer+0x96>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   18dce:	4651      	mov	r1, sl
   18dd0:	4648      	mov	r0, r9
   18dd2:	f7ff fe4b 	bl	18a6c <twi_rx_start_transfer>
   18dd6:	e7eb      	b.n	18db0 <nrfx_twi_xfer+0xa8>
   18dd8:	20001968 	.word	0x20001968
   18ddc:	0bad0005 	.word	0x0bad0005
   18de0:	00044286 	.word	0x00044286
   18de4:	0bad000b 	.word	0x0bad000b

00018de8 <nrfx_twi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
   18de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   18dea:	4c29      	ldr	r4, [pc, #164]	; (18e90 <nrfx_twi_1_irq_handler+0xa8>)
{
   18dec:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   18dee:	4621      	mov	r1, r4
   18df0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   18df4:	f009 ff0c 	bl	22c10 <twi_transfer>
   18df8:	46a4      	mov	ip, r4
   18dfa:	b9e0      	cbnz	r0, 18e36 <nrfx_twi_1_irq_handler+0x4e>
    if (!p_cb->error &&
   18dfc:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   18e00:	6a26      	ldr	r6, [r4, #32]
   18e02:	b9ef      	cbnz	r7, 18e40 <nrfx_twi_1_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   18e04:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   18e06:	1e9a      	subs	r2, r3, #2
   18e08:	2a01      	cmp	r2, #1
   18e0a:	d819      	bhi.n	18e40 <nrfx_twi_1_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   18e0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18e0e:	69a2      	ldr	r2, [r4, #24]
   18e10:	4291      	cmp	r1, r2
   18e12:	d115      	bne.n	18e40 <nrfx_twi_1_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   18e14:	69e2      	ldr	r2, [r4, #28]
   18e16:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   18e18:	f3c6 1640 	ubfx	r6, r6, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   18e1c:	6962      	ldr	r2, [r4, #20]
   18e1e:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   18e20:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   18e22:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   18e26:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   18e2a:	4621      	mov	r1, r4
   18e2c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   18e30:	d103      	bne.n	18e3a <nrfx_twi_1_irq_handler+0x52>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   18e32:	f7ff fe8f 	bl	18b54 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
}
   18e36:	b007      	add	sp, #28
   18e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   18e3a:	f7ff fe17 	bl	18a6c <twi_rx_start_transfer>
   18e3e:	e7fa      	b.n	18e36 <nrfx_twi_1_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
   18e40:	4d14      	ldr	r5, [pc, #80]	; (18e94 <nrfx_twi_1_irq_handler+0xac>)
   18e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18e44:	ac01      	add	r4, sp, #4
   18e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   18e48:	682b      	ldr	r3, [r5, #0]
   18e4a:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
   18e4c:	b1e7      	cbz	r7, 18e88 <nrfx_twi_1_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
   18e4e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   18e52:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   18e56:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   18e5a:	0798      	lsls	r0, r3, #30
   18e5c:	d50c      	bpl.n	18e78 <nrfx_twi_1_irq_handler+0x90>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   18e5e:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   18e60:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   18e64:	2300      	movs	r3, #0
   18e66:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)))
   18e6a:	0773      	lsls	r3, r6, #29
   18e6c:	d4e3      	bmi.n	18e36 <nrfx_twi_1_irq_handler+0x4e>
            p_cb->handler(&event, p_cb->p_context);
   18e6e:	e9dc 3100 	ldrd	r3, r1, [ip]
   18e72:	4668      	mov	r0, sp
   18e74:	4798      	blx	r3
}
   18e76:	e7de      	b.n	18e36 <nrfx_twi_1_irq_handler+0x4e>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   18e78:	0759      	lsls	r1, r3, #29
   18e7a:	d501      	bpl.n	18e80 <nrfx_twi_1_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   18e7c:	2302      	movs	r3, #2
   18e7e:	e7ef      	b.n	18e60 <nrfx_twi_1_irq_handler+0x78>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   18e80:	07da      	lsls	r2, r3, #31
   18e82:	d5ef      	bpl.n	18e64 <nrfx_twi_1_irq_handler+0x7c>
                event.type = NRFX_TWI_EVT_OVERRUN;
   18e84:	2303      	movs	r3, #3
   18e86:	e7eb      	b.n	18e60 <nrfx_twi_1_irq_handler+0x78>
            event.type = NRFX_TWI_EVT_DONE;
   18e88:	f88d 7000 	strb.w	r7, [sp]
   18e8c:	e7ea      	b.n	18e64 <nrfx_twi_1_irq_handler+0x7c>
   18e8e:	bf00      	nop
   18e90:	20001968 	.word	0x20001968
   18e94:	20001974 	.word	0x20001974

00018e98 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
   18e98:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
   18e9a:	4604      	mov	r4, r0
   18e9c:	b958      	cbnz	r0, 18eb6 <lv_disp_get_scr_act+0x1e>
   18e9e:	f001 fd4f 	bl	1a940 <lv_disp_get_default>
    if(!disp) {
   18ea2:	4604      	mov	r4, r0
   18ea4:	b938      	cbnz	r0, 18eb6 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
   18ea6:	4b05      	ldr	r3, [pc, #20]	; (18ebc <lv_disp_get_scr_act+0x24>)
   18ea8:	4905      	ldr	r1, [pc, #20]	; (18ec0 <lv_disp_get_scr_act+0x28>)
   18eaa:	222e      	movs	r2, #46	; 0x2e
   18eac:	2002      	movs	r0, #2
   18eae:	f002 f879 	bl	1afa4 <lv_log_add>
        return NULL;
    }

    return disp->act_scr;
}
   18eb2:	4620      	mov	r0, r4
   18eb4:	bd10      	pop	{r4, pc}
    return disp->act_scr;
   18eb6:	6b64      	ldr	r4, [r4, #52]	; 0x34
   18eb8:	e7fb      	b.n	18eb2 <lv_disp_get_scr_act+0x1a>
   18eba:	bf00      	nop
   18ebc:	00029cd9 	.word	0x00029cd9
   18ec0:	00029d10 	.word	0x00029d10

00018ec4 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
   18ec4:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
   18ec6:	4604      	mov	r4, r0
   18ec8:	b958      	cbnz	r0, 18ee2 <lv_disp_get_layer_top+0x1e>
   18eca:	f001 fd39 	bl	1a940 <lv_disp_get_default>
    if(!disp) {
   18ece:	4604      	mov	r4, r0
   18ed0:	b938      	cbnz	r0, 18ee2 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
   18ed2:	4b05      	ldr	r3, [pc, #20]	; (18ee8 <lv_disp_get_layer_top+0x24>)
   18ed4:	4905      	ldr	r1, [pc, #20]	; (18eec <lv_disp_get_layer_top+0x28>)
   18ed6:	224b      	movs	r2, #75	; 0x4b
   18ed8:	2002      	movs	r0, #2
   18eda:	f002 f863 	bl	1afa4 <lv_log_add>
        return NULL;
    }

    return disp->top_layer;
}
   18ede:	4620      	mov	r0, r4
   18ee0:	bd10      	pop	{r4, pc}
    return disp->top_layer;
   18ee2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   18ee4:	e7fb      	b.n	18ede <lv_disp_get_layer_top+0x1a>
   18ee6:	bf00      	nop
   18ee8:	00029ca0 	.word	0x00029ca0
   18eec:	00029d10 	.word	0x00029d10

00018ef0 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
   18ef0:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
   18ef2:	4604      	mov	r4, r0
   18ef4:	b958      	cbnz	r0, 18f0e <lv_disp_get_layer_sys+0x1e>
   18ef6:	f001 fd23 	bl	1a940 <lv_disp_get_default>
    if(!disp) {
   18efa:	4604      	mov	r4, r0
   18efc:	b938      	cbnz	r0, 18f0e <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
   18efe:	4b05      	ldr	r3, [pc, #20]	; (18f14 <lv_disp_get_layer_sys+0x24>)
   18f00:	4905      	ldr	r1, [pc, #20]	; (18f18 <lv_disp_get_layer_sys+0x28>)
   18f02:	225c      	movs	r2, #92	; 0x5c
   18f04:	2002      	movs	r0, #2
   18f06:	f002 f84d 	bl	1afa4 <lv_log_add>
        return NULL;
    }

    return disp->sys_layer;
}
   18f0a:	4620      	mov	r0, r4
   18f0c:	bd10      	pop	{r4, pc}
    return disp->sys_layer;
   18f0e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   18f10:	e7fb      	b.n	18f0a <lv_disp_get_layer_sys+0x1a>
   18f12:	bf00      	nop
   18f14:	00029c67 	.word	0x00029c67
   18f18:	00029d10 	.word	0x00029d10

00018f1c <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
   18f1c:	b510      	push	{r4, lr}
    /* Do nothing if already initialized */
    if(lv_initialized) {
   18f1e:	4c14      	ldr	r4, [pc, #80]	; (18f70 <lv_init+0x54>)
   18f20:	7823      	ldrb	r3, [r4, #0]
   18f22:	b13b      	cbz	r3, 18f34 <lv_init+0x18>
        LV_LOG_WARN("lv_init: already inited");
   18f24:	4b13      	ldr	r3, [pc, #76]	; (18f74 <lv_init+0x58>)
   18f26:	4914      	ldr	r1, [pc, #80]	; (18f78 <lv_init+0x5c>)
   18f28:	2253      	movs	r2, #83	; 0x53
   18f2a:	2002      	movs	r0, #2
    lv_img_decoder_init();
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);

    lv_initialized = true;
    LV_LOG_INFO("lv_init ready");
}
   18f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LV_LOG_INFO("lv_init ready");
   18f30:	f002 b838 	b.w	1afa4 <lv_log_add>
    lv_mem_init();
   18f34:	f00b fbeb 	bl	2470e <lv_mem_init>
    lv_task_core_init();
   18f38:	f001 fd32 	bl	1a9a0 <lv_task_core_init>
    lv_style_init();
   18f3c:	f000 fbe6 	bl	1970c <lv_style_init>
    lv_refr_init();
   18f40:	f00a fa95 	bl	2346e <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
   18f44:	f44f 71b4 	mov.w	r1, #360	; 0x168
   18f48:	480c      	ldr	r0, [pc, #48]	; (18f7c <lv_init+0x60>)
   18f4a:	f00b fc06 	bl	2475a <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
   18f4e:	2160      	movs	r1, #96	; 0x60
   18f50:	480b      	ldr	r0, [pc, #44]	; (18f80 <lv_init+0x64>)
   18f52:	f00b fc02 	bl	2475a <lv_ll_init>
    lv_indev_init();
   18f56:	f009 fee0 	bl	22d1a <lv_indev_init>
    lv_img_decoder_init();
   18f5a:	f001 fc0b 	bl	1a774 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
   18f5e:	2001      	movs	r0, #1
   18f60:	f001 fc5c 	bl	1a81c <lv_img_cache_set_size>
    lv_initialized = true;
   18f64:	2001      	movs	r0, #1
   18f66:	7020      	strb	r0, [r4, #0]
    LV_LOG_INFO("lv_init ready");
   18f68:	4b06      	ldr	r3, [pc, #24]	; (18f84 <lv_init+0x68>)
   18f6a:	4903      	ldr	r1, [pc, #12]	; (18f78 <lv_init+0x5c>)
   18f6c:	2279      	movs	r2, #121	; 0x79
   18f6e:	e7dd      	b.n	18f2c <lv_init+0x10>
   18f70:	2000a6bb 	.word	0x2000a6bb
   18f74:	00029d46 	.word	0x00029d46
   18f78:	00029d5e 	.word	0x00029d5e
   18f7c:	20001dd8 	.word	0x20001dd8
   18f80:	20001df8 	.word	0x20001df8
   18f84:	00029d93 	.word	0x00029d93

00018f88 <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
   18f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);

    const lv_obj_t * scr;

    if(obj->par == NULL)
   18f8a:	6803      	ldr	r3, [r0, #0]
{
   18f8c:	4605      	mov	r5, r0
    if(obj->par == NULL)
   18f8e:	b97b      	cbnz	r3, 18fb0 <lv_obj_get_disp+0x28>
        scr = obj; /*`obj` is a screen*/
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/

    lv_disp_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
   18f90:	4813      	ldr	r0, [pc, #76]	; (18fe0 <lv_obj_get_disp+0x58>)
   18f92:	4f13      	ldr	r7, [pc, #76]	; (18fe0 <lv_obj_get_disp+0x58>)
   18f94:	f00b fc27 	bl	247e6 <lv_ll_get_head>
   18f98:	4604      	mov	r4, r0
   18f9a:	b96c      	cbnz	r4, 18fb8 <lv_obj_get_disp+0x30>
        {
            if(s == scr) return d;
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
   18f9c:	4b11      	ldr	r3, [pc, #68]	; (18fe4 <lv_obj_get_disp+0x5c>)
   18f9e:	4912      	ldr	r1, [pc, #72]	; (18fe8 <lv_obj_get_disp+0x60>)
   18fa0:	f240 6267 	movw	r2, #1639	; 0x667
   18fa4:	2002      	movs	r0, #2
   18fa6:	f001 fffd 	bl	1afa4 <lv_log_add>
    return NULL;
}
   18faa:	4620      	mov	r0, r4
   18fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
   18fae:	461d      	mov	r5, r3
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);

    return obj->par;
   18fb0:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
   18fb2:	2b00      	cmp	r3, #0
   18fb4:	d1fb      	bne.n	18fae <lv_obj_get_disp+0x26>
   18fb6:	e7eb      	b.n	18f90 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
   18fb8:	f104 0628 	add.w	r6, r4, #40	; 0x28
   18fbc:	4630      	mov	r0, r6
   18fbe:	f00b fc12 	bl	247e6 <lv_ll_get_head>
   18fc2:	b928      	cbnz	r0, 18fd0 <lv_obj_get_disp+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
   18fc4:	4621      	mov	r1, r4
   18fc6:	4638      	mov	r0, r7
   18fc8:	f00b fc13 	bl	247f2 <lv_ll_get_next>
   18fcc:	4604      	mov	r4, r0
   18fce:	e7e4      	b.n	18f9a <lv_obj_get_disp+0x12>
            if(s == scr) return d;
   18fd0:	4285      	cmp	r5, r0
   18fd2:	d0ea      	beq.n	18faa <lv_obj_get_disp+0x22>
        LV_LL_READ(d->scr_ll, s)
   18fd4:	4601      	mov	r1, r0
   18fd6:	4630      	mov	r0, r6
   18fd8:	f00b fc0b 	bl	247f2 <lv_ll_get_next>
   18fdc:	e7f1      	b.n	18fc2 <lv_obj_get_disp+0x3a>
   18fde:	bf00      	nop
   18fe0:	20001dd8 	.word	0x20001dd8
   18fe4:	00029e19 	.word	0x00029e19
   18fe8:	00029d5e 	.word	0x00029d5e

00018fec <lv_obj_create>:
{
   18fec:	b570      	push	{r4, r5, r6, lr}
   18fee:	460d      	mov	r5, r1
    if(parent == NULL) {
   18ff0:	4606      	mov	r6, r0
   18ff2:	2800      	cmp	r0, #0
   18ff4:	f040 80d9 	bne.w	191aa <lv_obj_create+0x1be>
        lv_disp_t * disp = lv_disp_get_default();
   18ff8:	f001 fca2 	bl	1a940 <lv_disp_get_default>
        if(!disp) {
   18ffc:	4604      	mov	r4, r0
   18ffe:	b938      	cbnz	r0, 19010 <lv_obj_create+0x24>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
   19000:	4b89      	ldr	r3, [pc, #548]	; (19228 <lv_obj_create+0x23c>)
   19002:	498a      	ldr	r1, [pc, #552]	; (1922c <lv_obj_create+0x240>)
   19004:	2290      	movs	r2, #144	; 0x90
   19006:	2002      	movs	r0, #2
   19008:	f001 ffcc 	bl	1afa4 <lv_log_add>
}
   1900c:	4620      	mov	r0, r4
   1900e:	bd70      	pop	{r4, r5, r6, pc}
        new_obj = lv_ll_ins_head(&disp->scr_ll);
   19010:	3028      	adds	r0, #40	; 0x28
   19012:	f00b fbac 	bl	2476e <lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   19016:	4604      	mov	r4, r0
   19018:	b908      	cbnz	r0, 1901e <lv_obj_create+0x32>
   1901a:	2400      	movs	r4, #0
   1901c:	e7f6      	b.n	1900c <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   1901e:	2138      	movs	r1, #56	; 0x38
        new_obj->par = NULL; /*Screens has no a parent*/
   19020:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   19024:	f00b fb99 	bl	2475a <lv_ll_init>
        new_obj->signal_cb = lv_obj_signal;
   19028:	4b81      	ldr	r3, [pc, #516]	; (19230 <lv_obj_create+0x244>)
   1902a:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   1902c:	4b81      	ldr	r3, [pc, #516]	; (19234 <lv_obj_create+0x248>)
   1902e:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
   19030:	61a6      	str	r6, [r4, #24]
        new_obj->coords.x1    = 0;
   19032:	6126      	str	r6, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
   19034:	4630      	mov	r0, r6
   19036:	f001 fc89 	bl	1a94c <lv_disp_get_hor_res>
   1903a:	3801      	subs	r0, #1
   1903c:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
   1903e:	4630      	mov	r0, r6
   19040:	f001 fc94 	bl	1a96c <lv_disp_get_ver_res>
   19044:	3801      	subs	r0, #1
   19046:	82e0      	strh	r0, [r4, #22]
        new_obj->ext_draw_pad = 0;
   19048:	8626      	strh	r6, [r4, #48]	; 0x30
        lv_theme_t * th = lv_theme_get_current();
   1904a:	f002 fb05 	bl	1b658 <lv_theme_get_current>
        if(th) {
   1904e:	2800      	cmp	r0, #0
   19050:	f000 80a9 	beq.w	191a6 <lv_obj_create+0x1ba>
            new_obj->style_p = th->style.scr;
   19054:	6803      	ldr	r3, [r0, #0]
   19056:	62a3      	str	r3, [r4, #40]	; 0x28
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
   19058:	2204      	movs	r2, #4
   1905a:	2100      	movs	r1, #0
   1905c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19060:	f006 faf4 	bl	1f64c <memset>
        new_obj->click        = 0;
   19064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        LV_LOG_INFO("Screen create ready");
   19066:	4971      	ldr	r1, [pc, #452]	; (1922c <lv_obj_create+0x240>)
        new_obj->click        = 0;
   19068:	f403 4303 	and.w	r3, r3, #33536	; 0x8300
   1906c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   19070:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->ext_attr = NULL;
   19072:	2300      	movs	r3, #0
   19074:	6263      	str	r3, [r4, #36]	; 0x24
        LV_LOG_INFO("Screen create ready");
   19076:	22de      	movs	r2, #222	; 0xde
   19078:	4b6f      	ldr	r3, [pc, #444]	; (19238 <lv_obj_create+0x24c>)
   1907a:	2001      	movs	r0, #1
   1907c:	f001 ff92 	bl	1afa4 <lv_log_add>
    if(copy != NULL) {
   19080:	2d00      	cmp	r5, #0
   19082:	f000 8084 	beq.w	1918e <lv_obj_create+0x1a2>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
   19086:	2208      	movs	r2, #8
   19088:	f105 0110 	add.w	r1, r5, #16
   1908c:	f104 0010 	add.w	r0, r4, #16
   19090:	f006 fab2 	bl	1f5f8 <memcpy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
   19094:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
   19098:	8623      	strh	r3, [r4, #48]	; 0x30
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
   1909a:	2204      	movs	r2, #4
   1909c:	f105 0134 	add.w	r1, r5, #52	; 0x34
   190a0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   190a4:	f006 faa8 	bl	1f5f8 <memcpy>
        new_obj->event_cb = copy->event_cb;
   190a8:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
   190aa:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
        new_obj->event_cb = copy->event_cb;
   190ae:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
   190b0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   190b4:	f362 0300 	bfi	r3, r2, #0, #1
   190b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        new_obj->drag         = copy->drag;
   190bc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   190c0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   190c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   190c8:	f363 0241 	bfi	r2, r3, #1, #1
   190cc:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->drag_dir     = copy->drag_dir;
   190d0:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   190d4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   190d8:	f362 0301 	bfi	r3, r2, #0, #2
   190dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        new_obj->drag_throw   = copy->drag_throw;
   190e0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   190e4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   190e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
   190ec:	f363 0282 	bfi	r2, r3, #2, #1
   190f0:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->drag_parent  = copy->drag_parent;
   190f4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   190f8:	b2d2      	uxtb	r2, r2
   190fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   190fe:	f363 02c3 	bfi	r2, r3, #3, #1
   19102:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->hidden       = copy->hidden;
   19106:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1910a:	b2d2      	uxtb	r2, r2
   1910c:	f3c3 1300 	ubfx	r3, r3, #4, #1
   19110:	f363 1204 	bfi	r2, r3, #4, #1
   19114:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->top          = copy->top;
   19118:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1911c:	b2d2      	uxtb	r2, r2
   1911e:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19122:	f363 1245 	bfi	r2, r3, #5, #1
   19126:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->parent_event = copy->parent_event;
   1912a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1912e:	b2d2      	uxtb	r2, r2
   19130:	09db      	lsrs	r3, r3, #7
   19132:	f363 12c7 	bfi	r2, r3, #7, #1
   19136:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->opa_scale_en = copy->opa_scale_en;
   1913a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1913e:	b2d2      	uxtb	r2, r2
   19140:	f3c3 1380 	ubfx	r3, r3, #6, #1
   19144:	f363 1286 	bfi	r2, r3, #6, #1
   19148:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->protect      = copy->protect;
   1914c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   19150:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        new_obj->opa_scale    = copy->opa_scale;
   19154:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   19158:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        new_obj->style_p = copy->style_p;
   1915c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1915e:	62a3      	str	r3, [r4, #40]	; 0x28
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
   19160:	682b      	ldr	r3, [r5, #0]
   19162:	2b00      	cmp	r3, #0
   19164:	d05c      	beq.n	19220 <lv_obj_create+0x234>
   19166:	2e00      	cmp	r6, #0
   19168:	d05a      	beq.n	19220 <lv_obj_create+0x234>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
   1916a:	4628      	mov	r0, r5
   1916c:	f009 ff32 	bl	22fd4 <lv_obj_get_x>
   19170:	4601      	mov	r1, r0
   19172:	4628      	mov	r0, r5
   19174:	f009 ff36 	bl	22fe4 <lv_obj_get_y>
   19178:	4602      	mov	r2, r0
            lv_obj_set_pos(new_obj, 0, 0);
   1917a:	4620      	mov	r0, r4
   1917c:	f009 fe51 	bl	22e22 <lv_obj_set_pos>
        LV_LOG_INFO("Object create ready");
   19180:	4b2e      	ldr	r3, [pc, #184]	; (1923c <lv_obj_create+0x250>)
   19182:	492a      	ldr	r1, [pc, #168]	; (1922c <lv_obj_create+0x240>)
   19184:	f240 127d 	movw	r2, #381	; 0x17d
   19188:	2001      	movs	r0, #1
   1918a:	f001 ff0b 	bl	1afa4 <lv_log_add>
    if(parent != NULL) {
   1918e:	2e00      	cmp	r6, #0
   19190:	f43f af3c 	beq.w	1900c <lv_obj_create+0x20>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
   19194:	69f3      	ldr	r3, [r6, #28]
   19196:	4622      	mov	r2, r4
   19198:	2101      	movs	r1, #1
   1919a:	4630      	mov	r0, r6
   1919c:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
   1919e:	4620      	mov	r0, r4
   191a0:	f009 fdef 	bl	22d82 <lv_obj_invalidate>
   191a4:	e732      	b.n	1900c <lv_obj_create+0x20>
            new_obj->style_p = &lv_style_scr;
   191a6:	4b26      	ldr	r3, [pc, #152]	; (19240 <lv_obj_create+0x254>)
   191a8:	e755      	b.n	19056 <lv_obj_create+0x6a>
        new_obj = lv_ll_ins_head(&parent->child_ll);
   191aa:	3004      	adds	r0, #4
   191ac:	f00b fadf 	bl	2476e <lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   191b0:	4604      	mov	r4, r0
   191b2:	2800      	cmp	r0, #0
   191b4:	f43f af31 	beq.w	1901a <lv_obj_create+0x2e>
        new_obj->par = parent; /*Set the parent*/
   191b8:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   191bc:	2138      	movs	r1, #56	; 0x38
   191be:	f00b facc 	bl	2475a <lv_ll_init>
        new_obj->signal_cb = lv_obj_signal;
   191c2:	4b1b      	ldr	r3, [pc, #108]	; (19230 <lv_obj_create+0x244>)
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   191c4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
        new_obj->signal_cb = lv_obj_signal;
   191c8:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   191ca:	4b1a      	ldr	r3, [pc, #104]	; (19234 <lv_obj_create+0x248>)
   191cc:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
   191ce:	2300      	movs	r3, #0
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   191d0:	f363 0283 	bfi	r2, r3, #2, #2
   191d4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
        new_obj->coords.y1    = parent->coords.y1;
   191d8:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
   191dc:	8262      	strh	r2, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   191de:	8a72      	ldrh	r2, [r6, #18]
        new_obj->event_cb = NULL;
   191e0:	61a3      	str	r3, [r4, #24]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   191e2:	3242      	adds	r2, #66	; 0x42
   191e4:	82e2      	strh	r2, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
   191e6:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
   191ea:	8222      	strh	r2, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   191ec:	8a32      	ldrh	r2, [r6, #16]
        new_obj->ext_draw_pad = 0;
   191ee:	8623      	strh	r3, [r4, #48]	; 0x30
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   191f0:	3264      	adds	r2, #100	; 0x64
   191f2:	82a2      	strh	r2, [r4, #20]
        lv_theme_t * th = lv_theme_get_current();
   191f4:	f002 fa30 	bl	1b658 <lv_theme_get_current>
        if(th) {
   191f8:	b180      	cbz	r0, 1921c <lv_obj_create+0x230>
            new_obj->style_p = th->style.panel;
   191fa:	6883      	ldr	r3, [r0, #8]
   191fc:	62a3      	str	r3, [r4, #40]	; 0x28
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
   191fe:	2204      	movs	r2, #4
   19200:	2100      	movs	r1, #0
   19202:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19206:	f006 fa21 	bl	1f64c <memset>
        new_obj->click        = 1;
   1920a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1920c:	f403 420c 	and.w	r2, r3, #35840	; 0x8c00
   19210:	4b0c      	ldr	r3, [pc, #48]	; (19244 <lv_obj_create+0x258>)
   19212:	4313      	orrs	r3, r2
   19214:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->ext_attr = NULL;
   19216:	2300      	movs	r3, #0
   19218:	6263      	str	r3, [r4, #36]	; 0x24
   1921a:	e731      	b.n	19080 <lv_obj_create+0x94>
            new_obj->style_p = &lv_style_plain_color;
   1921c:	4b0a      	ldr	r3, [pc, #40]	; (19248 <lv_obj_create+0x25c>)
   1921e:	e7ed      	b.n	191fc <lv_obj_create+0x210>
            lv_obj_set_pos(new_obj, 0, 0);
   19220:	2200      	movs	r2, #0
   19222:	4611      	mov	r1, r2
   19224:	e7a9      	b.n	1917a <lv_obj_create+0x18e>
   19226:	bf00      	nop
   19228:	00029da1 	.word	0x00029da1
   1922c:	00029d5e 	.word	0x00029d5e
   19230:	0001926d 	.word	0x0001926d
   19234:	00023269 	.word	0x00023269
   19238:	00029df1 	.word	0x00029df1
   1923c:	00029e05 	.word	0x00029e05
   19240:	20001c7c 	.word	0x20001c7c
   19244:	ff000301 	.word	0xff000301
   19248:	20001b8c 	.word	0x20001b8c

0001924c <lv_obj_get_style>:
 */
const lv_style_t * lv_obj_get_style(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);

    const lv_style_t * style_act = obj->style_p;
   1924c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(style_act == NULL) {
   1924e:	b913      	cbnz	r3, 19256 <lv_obj_get_style+0xa>
        lv_obj_t * par = obj->par;
   19250:	6802      	ldr	r2, [r0, #0]

        while(par) {
   19252:	b912      	cbnz	r2, 1925a <lv_obj_get_style+0xe>
            style_act = lv_group_mod_style(obj->group_p, style_act);
        }
    }
#endif

    if(style_act == NULL) style_act = &lv_style_plain;
   19254:	4b04      	ldr	r3, [pc, #16]	; (19268 <lv_obj_get_style+0x1c>)

    return style_act;
}
   19256:	4618      	mov	r0, r3
   19258:	4770      	bx	lr
            if(par->style_p) {
   1925a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1925c:	b113      	cbz	r3, 19264 <lv_obj_get_style+0x18>
                if(par->style_p->glass == 0) {
   1925e:	7819      	ldrb	r1, [r3, #0]
   19260:	07c9      	lsls	r1, r1, #31
   19262:	d5f8      	bpl.n	19256 <lv_obj_get_style+0xa>
            par = par->par;
   19264:	6812      	ldr	r2, [r2, #0]
   19266:	e7f4      	b.n	19252 <lv_obj_get_style+0x6>
   19268:	20001b3c 	.word	0x20001b3c

0001926c <lv_obj_signal>:
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1926c:	2907      	cmp	r1, #7
{
   1926e:	b510      	push	{r4, lr}
   19270:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   19272:	d105      	bne.n	19280 <lv_obj_signal+0x14>
   19274:	490f      	ldr	r1, [pc, #60]	; (192b4 <lv_obj_signal+0x48>)
   19276:	4610      	mov	r0, r2
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
        lv_obj_refresh_ext_draw_pad(obj);
    }
    return res;
}
   19278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1927c:	f00a b84a 	b.w	23314 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
   19280:	2901      	cmp	r1, #1
   19282:	d105      	bne.n	19290 <lv_obj_signal+0x24>
    return (obj->protect & prot) == 0 ? false : true;
   19284:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   19288:	43c0      	mvns	r0, r0
   1928a:	f000 0001 	and.w	r0, r0, #1
}
   1928e:	bd10      	pop	{r4, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   19290:	2906      	cmp	r1, #6
   19292:	d10a      	bne.n	192aa <lv_obj_signal+0x3e>
        const lv_style_t * style = lv_obj_get_style(obj);
   19294:	f7ff ffda 	bl	1924c <lv_obj_get_style>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
   19298:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
   1929c:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   192a0:	429a      	cmp	r2, r3
   192a2:	da00      	bge.n	192a6 <lv_obj_signal+0x3a>
   192a4:	8623      	strh	r3, [r4, #48]	; 0x30
    lv_res_t res = LV_RES_OK;
   192a6:	2001      	movs	r0, #1
   192a8:	e7f1      	b.n	1928e <lv_obj_signal+0x22>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
   192aa:	2904      	cmp	r1, #4
   192ac:	d1fb      	bne.n	192a6 <lv_obj_signal+0x3a>
        lv_obj_refresh_ext_draw_pad(obj);
   192ae:	f009 fdfe 	bl	22eae <lv_obj_refresh_ext_draw_pad>
   192b2:	e7f8      	b.n	192a6 <lv_obj_signal+0x3a>
   192b4:	00029e3b 	.word	0x00029e3b

000192b8 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
   192b8:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   192ba:	4d10      	ldr	r5, [pc, #64]	; (192fc <lv_refr_vdb_flush+0x44>)
   192bc:	6828      	ldr	r0, [r5, #0]
   192be:	f00b f926 	bl	2450e <lv_disp_get_buf>
   192c2:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
   192c4:	6828      	ldr	r0, [r5, #0]
   192c6:	f00b f924 	bl	24512 <lv_disp_is_double_buf>
   192ca:	b110      	cbz	r0, 192d2 <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
   192cc:	69a3      	ldr	r3, [r4, #24]
   192ce:	07db      	lsls	r3, r3, #31
   192d0:	d4fc      	bmi.n	192cc <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
   192d2:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
   192d4:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
   192d6:	f043 0301 	orr.w	r3, r3, #1
   192da:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
   192dc:	68c3      	ldr	r3, [r0, #12]
   192de:	b11b      	cbz	r3, 192e8 <lv_refr_vdb_flush+0x30>
   192e0:	68a2      	ldr	r2, [r4, #8]
   192e2:	f104 0110 	add.w	r1, r4, #16
   192e6:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
   192e8:	6823      	ldr	r3, [r4, #0]
   192ea:	b133      	cbz	r3, 192fa <lv_refr_vdb_flush+0x42>
   192ec:	6862      	ldr	r2, [r4, #4]
   192ee:	b122      	cbz	r2, 192fa <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
   192f0:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
   192f2:	428b      	cmp	r3, r1
   192f4:	bf08      	it	eq
   192f6:	4613      	moveq	r3, r2
   192f8:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
   192fa:	bd38      	pop	{r3, r4, r5, pc}
   192fc:	200019a4 	.word	0x200019a4

00019300 <lv_refr_obj_and_children>:
{
   19300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19302:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
   19304:	4605      	mov	r5, r0
   19306:	b920      	cbnz	r0, 19312 <lv_refr_obj_and_children+0x12>
   19308:	4b12      	ldr	r3, [pc, #72]	; (19354 <lv_refr_obj_and_children+0x54>)
   1930a:	6818      	ldr	r0, [r3, #0]
   1930c:	f7ff fdc4 	bl	18e98 <lv_disp_get_scr_act>
   19310:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
   19312:	4628      	mov	r0, r5
   19314:	4631      	mov	r1, r6
   19316:	f00a f83d 	bl	23394 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
   1931a:	4628      	mov	r0, r5
   1931c:	f009 fe25 	bl	22f6a <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
   19320:	4604      	mov	r4, r0
    while(par != NULL) {
   19322:	b900      	cbnz	r0, 19326 <lv_refr_obj_and_children+0x26>
}
   19324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
   19326:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
   19328:	4629      	mov	r1, r5
   1932a:	4638      	mov	r0, r7
   1932c:	f00b fa71 	bl	24812 <lv_ll_get_prev>
   19330:	4605      	mov	r5, r0
        while(i != NULL) {
   19332:	b948      	cbnz	r0, 19348 <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
   19334:	6a23      	ldr	r3, [r4, #32]
   19336:	2201      	movs	r2, #1
   19338:	4631      	mov	r1, r6
   1933a:	4620      	mov	r0, r4
   1933c:	4798      	blx	r3
        par = lv_obj_get_parent(par);
   1933e:	4620      	mov	r0, r4
   19340:	f009 fe13 	bl	22f6a <lv_obj_get_parent>
   19344:	4625      	mov	r5, r4
   19346:	e7eb      	b.n	19320 <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
   19348:	4631      	mov	r1, r6
   1934a:	4628      	mov	r0, r5
   1934c:	f00a f822 	bl	23394 <lv_refr_obj>
   19350:	e7ea      	b.n	19328 <lv_refr_obj_and_children+0x28>
   19352:	bf00      	nop
   19354:	200019a4 	.word	0x200019a4

00019358 <lv_refr_area_part>:
{
   19358:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1935a:	4c18      	ldr	r4, [pc, #96]	; (193bc <lv_refr_area_part+0x64>)
{
   1935c:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1935e:	6820      	ldr	r0, [r4, #0]
   19360:	f00b f8d5 	bl	2450e <lv_disp_get_buf>
   19364:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
   19366:	6820      	ldr	r0, [r4, #0]
   19368:	f00b f8d3 	bl	24512 <lv_disp_is_double_buf>
   1936c:	b910      	cbnz	r0, 19374 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
   1936e:	69ab      	ldr	r3, [r5, #24]
   19370:	07db      	lsls	r3, r3, #31
   19372:	d4fc      	bmi.n	1936e <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
   19374:	f105 0210 	add.w	r2, r5, #16
   19378:	4631      	mov	r1, r6
   1937a:	4668      	mov	r0, sp
   1937c:	f00b f924 	bl	245c8 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
   19380:	6820      	ldr	r0, [r4, #0]
   19382:	f7ff fd89 	bl	18e98 <lv_disp_get_scr_act>
   19386:	4601      	mov	r1, r0
   19388:	4668      	mov	r0, sp
   1938a:	f009 ffd1 	bl	23330 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
   1938e:	4669      	mov	r1, sp
   19390:	f7ff ffb6 	bl	19300 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
   19394:	6820      	ldr	r0, [r4, #0]
   19396:	f7ff fd95 	bl	18ec4 <lv_disp_get_layer_top>
   1939a:	4669      	mov	r1, sp
   1939c:	f7ff ffb0 	bl	19300 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
   193a0:	6820      	ldr	r0, [r4, #0]
   193a2:	f7ff fda5 	bl	18ef0 <lv_disp_get_layer_sys>
   193a6:	4669      	mov	r1, sp
   193a8:	f7ff ffaa 	bl	19300 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
   193ac:	6820      	ldr	r0, [r4, #0]
   193ae:	f00b f8b8 	bl	24522 <lv_disp_is_true_double_buf>
   193b2:	b908      	cbnz	r0, 193b8 <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
   193b4:	f7ff ff80 	bl	192b8 <lv_refr_vdb_flush>
}
   193b8:	b002      	add	sp, #8
   193ba:	bd70      	pop	{r4, r5, r6, pc}
   193bc:	200019a4 	.word	0x200019a4

000193c0 <lv_refr_get_disp_refreshing>:
}
   193c0:	4b01      	ldr	r3, [pc, #4]	; (193c8 <lv_refr_get_disp_refreshing+0x8>)
   193c2:	6818      	ldr	r0, [r3, #0]
   193c4:	4770      	bx	lr
   193c6:	bf00      	nop
   193c8:	200019a4 	.word	0x200019a4

000193cc <lv_disp_refr_task>:
{
   193cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d0:	b089      	sub	sp, #36	; 0x24
   193d2:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
   193d4:	f00b f8b4 	bl	24540 <lv_tick_get>
    disp_refr = task->user_data;
   193d8:	4cae      	ldr	r4, [pc, #696]	; (19694 <lv_disp_refr_task+0x2c8>)
   193da:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
   193dc:	9003      	str	r0, [sp, #12]
    disp_refr = task->user_data;
   193de:	6023      	str	r3, [r4, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   193e0:	2600      	movs	r6, #0
   193e2:	6823      	ldr	r3, [r4, #0]
   193e4:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
   193e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
   193ec:	4296      	cmp	r6, r2
   193ee:	d330      	bcc.n	19452 <lv_disp_refr_task+0x86>
    px_num = 0;
   193f0:	4ba9      	ldr	r3, [pc, #676]	; (19698 <lv_disp_refr_task+0x2cc>)
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
   193f2:	9302      	str	r3, [sp, #8]
    px_num = 0;
   193f4:	2200      	movs	r2, #0
   193f6:	601a      	str	r2, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
   193f8:	4690      	mov	r8, r2
   193fa:	6827      	ldr	r7, [r4, #0]
   193fc:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
   19400:	f3c3 0209 	ubfx	r2, r3, #0, #10
   19404:	4590      	cmp	r8, r2
   19406:	d368      	bcc.n	194da <lv_disp_refr_task+0x10e>
    if(disp_refr->inv_p != 0) {
   19408:	b1f2      	cbz	r2, 19448 <lv_disp_refr_task+0x7c>
        if(lv_disp_is_true_double_buf(disp_refr)) {
   1940a:	4638      	mov	r0, r7
   1940c:	f00b f889 	bl	24522 <lv_disp_is_true_double_buf>
   19410:	2800      	cmp	r0, #0
   19412:	f040 811a 	bne.w	1964a <lv_disp_refr_task+0x27e>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
   19416:	6820      	ldr	r0, [r4, #0]
   19418:	f44f 7280 	mov.w	r2, #256	; 0x100
   1941c:	2100      	movs	r1, #0
   1941e:	3040      	adds	r0, #64	; 0x40
   19420:	f006 f914 	bl	1f64c <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
   19424:	6820      	ldr	r0, [r4, #0]
   19426:	2220      	movs	r2, #32
   19428:	2100      	movs	r1, #0
   1942a:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   1942e:	f006 f90d 	bl	1f64c <memset>
        disp_refr->inv_p = 0;
   19432:	6824      	ldr	r4, [r4, #0]
   19434:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
   19438:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
   1943a:	f36f 0309 	bfc	r3, #0, #10
   1943e:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
   19442:	2d00      	cmp	r5, #0
   19444:	f040 8156 	bne.w	196f4 <lv_disp_refr_task+0x328>
    lv_draw_free_buf();
   19448:	f000 fcfa 	bl	19e40 <lv_draw_free_buf>
}
   1944c:	b009      	add	sp, #36	; 0x24
   1944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
   19452:	4433      	add	r3, r6
   19454:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
   19458:	b10d      	cbz	r5, 1945e <lv_disp_refr_task+0x92>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   1945a:	3601      	adds	r6, #1
   1945c:	e7c1      	b.n	193e2 <lv_disp_refr_task+0x16>
   1945e:	00f7      	lsls	r7, r6, #3
   19460:	3740      	adds	r7, #64	; 0x40
                disp_refr->inv_area_joined[join_from] = 1;
   19462:	f04f 0901 	mov.w	r9, #1
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   19466:	6820      	ldr	r0, [r4, #0]
   19468:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
   1946c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   19470:	429d      	cmp	r5, r3
   19472:	d2f2      	bcs.n	1945a <lv_disp_refr_task+0x8e>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
   19474:	1943      	adds	r3, r0, r5
   19476:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
   1947a:	bb63      	cbnz	r3, 194d6 <lv_disp_refr_task+0x10a>
   1947c:	42ae      	cmp	r6, r5
   1947e:	d02a      	beq.n	194d6 <lv_disp_refr_task+0x10a>
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
   19480:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   19484:	f108 0840 	add.w	r8, r8, #64	; 0x40
   19488:	eb00 0108 	add.w	r1, r0, r8
   1948c:	4438      	add	r0, r7
   1948e:	f00b f8e7 	bl	24660 <lv_area_is_on>
   19492:	b300      	cbz	r0, 194d6 <lv_disp_refr_task+0x10a>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
   19494:	6821      	ldr	r1, [r4, #0]
   19496:	a806      	add	r0, sp, #24
   19498:	eb01 0208 	add.w	r2, r1, r8
   1949c:	4439      	add	r1, r7
   1949e:	f00b f8bd 	bl	2461c <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   194a2:	a806      	add	r0, sp, #24
   194a4:	f00b f882 	bl	245ac <lv_area_get_size>
   194a8:	4683      	mov	fp, r0
   194aa:	6820      	ldr	r0, [r4, #0]
   194ac:	4438      	add	r0, r7
   194ae:	f00b f87d 	bl	245ac <lv_area_get_size>
   194b2:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
   194b4:	6820      	ldr	r0, [r4, #0]
   194b6:	4440      	add	r0, r8
   194b8:	f00b f878 	bl	245ac <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   194bc:	4450      	add	r0, sl
   194be:	4583      	cmp	fp, r0
   194c0:	d209      	bcs.n	194d6 <lv_disp_refr_task+0x10a>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
   194c2:	6820      	ldr	r0, [r4, #0]
   194c4:	2208      	movs	r2, #8
   194c6:	a906      	add	r1, sp, #24
   194c8:	4438      	add	r0, r7
   194ca:	f006 f895 	bl	1f5f8 <memcpy>
                disp_refr->inv_area_joined[join_from] = 1;
   194ce:	6823      	ldr	r3, [r4, #0]
   194d0:	442b      	add	r3, r5
   194d2:	f883 9140 	strb.w	r9, [r3, #320]	; 0x140
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   194d6:	3501      	adds	r5, #1
   194d8:	e7c5      	b.n	19466 <lv_disp_refr_task+0x9a>
        if(disp_refr->inv_area_joined[i] == 0) {
   194da:	eb07 0308 	add.w	r3, r7, r8
   194de:	f893 6140 	ldrb.w	r6, [r3, #320]	; 0x140
   194e2:	2e00      	cmp	r6, #0
   194e4:	d17a      	bne.n	195dc <lv_disp_refr_task+0x210>
            lv_refr_area(&disp_refr->inv_areas[i]);
   194e6:	ea4f 05c8 	mov.w	r5, r8, lsl #3
   194ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
    if(lv_disp_is_true_double_buf(disp_refr)) {
   194ee:	4638      	mov	r0, r7
   194f0:	9301      	str	r3, [sp, #4]
            lv_refr_area(&disp_refr->inv_areas[i]);
   194f2:	eb07 0b03 	add.w	fp, r7, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
   194f6:	f00b f814 	bl	24522 <lv_disp_is_true_double_buf>
   194fa:	b198      	cbz	r0, 19524 <lv_disp_refr_task+0x158>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   194fc:	6820      	ldr	r0, [r4, #0]
   194fe:	f00b f806 	bl	2450e <lv_disp_get_buf>
   19502:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
   19504:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
   19506:	6820      	ldr	r0, [r4, #0]
   19508:	f001 fa20 	bl	1a94c <lv_disp_get_hor_res>
   1950c:	3801      	subs	r0, #1
   1950e:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
   19510:	826e      	strh	r6, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   19512:	6820      	ldr	r0, [r4, #0]
   19514:	f001 fa2a 	bl	1a96c <lv_disp_get_ver_res>
   19518:	3801      	subs	r0, #1
   1951a:	82e8      	strh	r0, [r5, #22]
            lv_refr_area_part(area_p);
   1951c:	4658      	mov	r0, fp
   1951e:	f7ff ff1b 	bl	19358 <lv_refr_area_part>
   19522:	e04f      	b.n	195c4 <lv_disp_refr_task+0x1f8>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   19524:	443d      	add	r5, r7
   19526:	6820      	ldr	r0, [r4, #0]
   19528:	f00a fff1 	bl	2450e <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1952c:	f8b5 a044 	ldrh.w	sl, [r5, #68]	; 0x44
   19530:	f8b5 7040 	ldrh.w	r7, [r5, #64]	; 0x40
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   19534:	f9b5 9046 	ldrsh.w	r9, [r5, #70]	; 0x46
   19538:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1953c:	f10a 0a01 	add.w	sl, sl, #1
   19540:	ebaa 0a07 	sub.w	sl, sl, r7
   19544:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   19546:	f109 0701 	add.w	r7, r9, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   1954a:	6820      	ldr	r0, [r4, #0]
   1954c:	1aff      	subs	r7, r7, r3
   1954e:	f001 fa0d 	bl	1a96c <lv_disp_get_ver_res>
        lv_coord_t y2 =
   19552:	4581      	cmp	r9, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19554:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   19558:	b23f      	sxth	r7, r7
   1955a:	db42      	blt.n	195e2 <lv_disp_refr_task+0x216>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   1955c:	6820      	ldr	r0, [r4, #0]
   1955e:	f001 fa05 	bl	1a96c <lv_disp_get_ver_res>
   19562:	3801      	subs	r0, #1
   19564:	fa0f f980 	sxth.w	r9, r0
        int32_t max_row = (uint32_t)vdb->size / w;
   19568:	68f3      	ldr	r3, [r6, #12]
   1956a:	fbb3 f3fa 	udiv	r3, r3, sl
        if(max_row > h) max_row = h;
   1956e:	429f      	cmp	r7, r3
   19570:	bfa8      	it	ge
   19572:	461f      	movge	r7, r3
        if(disp_refr->driver.rounder_cb) {
   19574:	6823      	ldr	r3, [r4, #0]
   19576:	691b      	ldr	r3, [r3, #16]
   19578:	2b00      	cmp	r3, #0
   1957a:	d038      	beq.n	195ee <lv_disp_refr_task+0x222>
            tmp.x1 = 0;
   1957c:	2300      	movs	r3, #0
   1957e:	9306      	str	r3, [sp, #24]
            tmp.x2 = 0;
   19580:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_coord_t h_tmp = max_row;
   19584:	b23b      	sxth	r3, r7
                tmp.y2 = h_tmp - 1;
   19586:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   1958a:	6820      	ldr	r0, [r4, #0]
                tmp.y2 = h_tmp - 1;
   1958c:	9304      	str	r3, [sp, #16]
   1958e:	fa0f fa8a 	sxth.w	sl, sl
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   19592:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
   19594:	f8ad a01e 	strh.w	sl, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   19598:	a906      	add	r1, sp, #24
   1959a:	4790      	blx	r2
   1959c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
   195a0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
   195a4:	9b04      	ldr	r3, [sp, #16]
   195a6:	3101      	adds	r1, #1
   195a8:	1a8a      	subs	r2, r1, r2
   195aa:	b212      	sxth	r2, r2
   195ac:	4297      	cmp	r7, r2
   195ae:	da1b      	bge.n	195e8 <lv_disp_refr_task+0x21c>
            } while(h_tmp > 0);
   195b0:	f1ba 0300 	subs.w	r3, sl, #0
   195b4:	dce7      	bgt.n	19586 <lv_disp_refr_task+0x1ba>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
   195b6:	4b39      	ldr	r3, [pc, #228]	; (1969c <lv_disp_refr_task+0x2d0>)
   195b8:	4939      	ldr	r1, [pc, #228]	; (196a0 <lv_disp_refr_task+0x2d4>)
   195ba:	f240 124f 	movw	r2, #335	; 0x14f
   195be:	2002      	movs	r0, #2
   195c0:	f001 fcf0 	bl	1afa4 <lv_log_add>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
   195c4:	6820      	ldr	r0, [r4, #0]
   195c6:	6983      	ldr	r3, [r0, #24]
   195c8:	b143      	cbz	r3, 195dc <lv_disp_refr_task+0x210>
   195ca:	9b01      	ldr	r3, [sp, #4]
   195cc:	4418      	add	r0, r3
   195ce:	f00a ffed 	bl	245ac <lv_area_get_size>
   195d2:	9b02      	ldr	r3, [sp, #8]
   195d4:	681b      	ldr	r3, [r3, #0]
   195d6:	4418      	add	r0, r3
   195d8:	9b02      	ldr	r3, [sp, #8]
   195da:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
   195dc:	f108 0801 	add.w	r8, r8, #1
   195e0:	e70b      	b.n	193fa <lv_disp_refr_task+0x2e>
        lv_coord_t y2 =
   195e2:	f9b5 9046 	ldrsh.w	r9, [r5, #70]	; 0x46
   195e6:	e7bf      	b.n	19568 <lv_disp_refr_task+0x19c>
            if(h_tmp <= 0) {
   195e8:	2b00      	cmp	r3, #0
   195ea:	dde4      	ble.n	195b6 <lv_disp_refr_task+0x1ea>
                max_row = tmp.y2 + 1;
   195ec:	460f      	mov	r7, r1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   195ee:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	; 0x42
        lv_coord_t row_last = 0;
   195f2:	f04f 0a00 	mov.w	sl, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   195f6:	1e7a      	subs	r2, r7, #1
   195f8:	18d1      	adds	r1, r2, r3
   195fa:	4549      	cmp	r1, r9
   195fc:	dd0b      	ble.n	19616 <lv_disp_refr_task+0x24a>
        if(y2 != row_last) {
   195fe:	45d1      	cmp	r9, sl
   19600:	d0e0      	beq.n	195c4 <lv_disp_refr_task+0x1f8>
            vdb->area.x1 = area_p->x1;
   19602:	f9b5 2040 	ldrsh.w	r2, [r5, #64]	; 0x40
   19606:	8232      	strh	r2, [r6, #16]
            vdb->area.x2 = area_p->x2;
   19608:	f9b5 2044 	ldrsh.w	r2, [r5, #68]	; 0x44
   1960c:	82b2      	strh	r2, [r6, #20]
            vdb->area.y1 = row;
   1960e:	8273      	strh	r3, [r6, #18]
            vdb->area.y2 = y2;
   19610:	f8a6 9016 	strh.w	r9, [r6, #22]
   19614:	e782      	b.n	1951c <lv_disp_refr_task+0x150>
            vdb->area.x1 = area_p->x1;
   19616:	f9b5 1040 	ldrsh.w	r1, [r5, #64]	; 0x40
   1961a:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
   1961c:	f9b5 1044 	ldrsh.w	r1, [r5, #68]	; 0x44
            vdb->area.y1 = row;
   19620:	8273      	strh	r3, [r6, #18]
            vdb->area.y2 = row + max_row - 1;
   19622:	443b      	add	r3, r7
   19624:	b21b      	sxth	r3, r3
   19626:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   1962a:	fa0f fa8a 	sxth.w	sl, sl
   1962e:	45ca      	cmp	sl, r9
   19630:	bfa8      	it	ge
   19632:	46ca      	movge	sl, r9
            vdb->area.x2 = area_p->x2;
   19634:	82b1      	strh	r1, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
   19636:	f8a6 a016 	strh.w	sl, [r6, #22]
            lv_refr_area_part(area_p);
   1963a:	4658      	mov	r0, fp
   1963c:	9205      	str	r2, [sp, #20]
   1963e:	9304      	str	r3, [sp, #16]
   19640:	f7ff fe8a 	bl	19358 <lv_refr_area_part>
   19644:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   19648:	e7d6      	b.n	195f8 <lv_disp_refr_task+0x22c>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1964a:	6820      	ldr	r0, [r4, #0]
   1964c:	f00a ff5f 	bl	2450e <lv_disp_get_buf>
   19650:	4605      	mov	r5, r0
            lv_refr_vdb_flush();
   19652:	f7ff fe31 	bl	192b8 <lv_refr_vdb_flush>
            while(vdb->flushing)
   19656:	69ab      	ldr	r3, [r5, #24]
   19658:	07db      	lsls	r3, r3, #31
   1965a:	d4fc      	bmi.n	19656 <lv_disp_refr_task+0x28a>
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1965c:	f8d5 9000 	ldr.w	r9, [r5]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   19660:	f8d5 b008 	ldr.w	fp, [r5, #8]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   19664:	6820      	ldr	r0, [r4, #0]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   19666:	45d9      	cmp	r9, fp
   19668:	bf08      	it	eq
   1966a:	f8d5 9004 	ldreq.w	r9, [r5, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   1966e:	f001 f96d 	bl	1a94c <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
   19672:	2600      	movs	r6, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   19674:	4603      	mov	r3, r0
            for(a = 0; a < disp_refr->inv_p; a++) {
   19676:	6822      	ldr	r2, [r4, #0]
   19678:	f8b2 1160 	ldrh.w	r1, [r2, #352]	; 0x160
   1967c:	b2b0      	uxth	r0, r6
   1967e:	f3c1 0109 	ubfx	r1, r1, #0, #10
   19682:	4281      	cmp	r1, r0
   19684:	f67f aec7 	bls.w	19416 <lv_disp_refr_task+0x4a>
                if(disp_refr->inv_area_joined[a] == 0) {
   19688:	1991      	adds	r1, r2, r6
   1968a:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
   1968e:	b149      	cbz	r1, 196a4 <lv_disp_refr_task+0x2d8>
   19690:	3601      	adds	r6, #1
   19692:	e7f0      	b.n	19676 <lv_disp_refr_task+0x2aa>
   19694:	200019a4 	.word	0x200019a4
   19698:	200019a8 	.word	0x200019a8
   1969c:	00029e42 	.word	0x00029e42
   196a0:	00029e92 	.word	0x00029e92
                    uint32_t start_offs =
   196a4:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   196a8:	f106 0a08 	add.w	sl, r6, #8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   196ac:	f8b2 5044 	ldrh.w	r5, [r2, #68]	; 0x44
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
   196b0:	f9b2 1040 	ldrsh.w	r1, [r2, #64]	; 0x40
   196b4:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
   196b8:	3501      	adds	r5, #1
   196ba:	1a6d      	subs	r5, r5, r1
   196bc:	fb03 1807 	mla	r8, r3, r7, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   196c0:	b22d      	sxth	r5, r5
                    uint32_t start_offs =
   196c2:	ea4f 0888 	mov.w	r8, r8, lsl #2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   196c6:	00ad      	lsls	r5, r5, #2
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   196c8:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   196cc:	6822      	ldr	r2, [r4, #0]
   196ce:	4452      	add	r2, sl
   196d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
   196d4:	42ba      	cmp	r2, r7
   196d6:	dbdb      	blt.n	19690 <lv_disp_refr_task+0x2c4>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
   196d8:	eb09 0108 	add.w	r1, r9, r8
   196dc:	eb0b 0008 	add.w	r0, fp, r8
   196e0:	462a      	mov	r2, r5
   196e2:	9301      	str	r3, [sp, #4]
   196e4:	f005 ff88 	bl	1f5f8 <memcpy>
                        start_offs += hres * sizeof(lv_color_t);
   196e8:	9b01      	ldr	r3, [sp, #4]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   196ea:	3701      	adds	r7, #1
                        start_offs += hres * sizeof(lv_color_t);
   196ec:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   196f0:	b23f      	sxth	r7, r7
   196f2:	e7eb      	b.n	196cc <lv_disp_refr_task+0x300>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
   196f4:	9803      	ldr	r0, [sp, #12]
   196f6:	f00a ff27 	bl	24548 <lv_tick_elaps>
   196fa:	4b03      	ldr	r3, [pc, #12]	; (19708 <lv_disp_refr_task+0x33c>)
   196fc:	4601      	mov	r1, r0
   196fe:	681a      	ldr	r2, [r3, #0]
   19700:	4620      	mov	r0, r4
   19702:	47a8      	blx	r5
   19704:	e6a0      	b.n	19448 <lv_disp_refr_task+0x7c>
   19706:	bf00      	nop
   19708:	200019a8 	.word	0x200019a8

0001970c <lv_style_init>:
{
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
   1970c:	4977      	ldr	r1, [pc, #476]	; (198ec <lv_style_init+0x1e0>)
{
   1970e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
   19712:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
    lv_style_scr.body.shadow.width = 0;

    lv_style_scr.text.opa          = LV_OPA_COVER;
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
   19714:	4c76      	ldr	r4, [pc, #472]	; (198f0 <lv_style_init+0x1e4>)
    lv_style_scr.debug_sentinel = LV_STYLE_DEGUG_SENTINEL_VALUE;
#endif
#endif

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
   19716:	4e77      	ldr	r6, [pc, #476]	; (198f4 <lv_style_init+0x1e8>)
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
   19718:	4f77      	ldr	r7, [pc, #476]	; (198f8 <lv_style_init+0x1ec>)
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
   1971a:	f8df 925c 	ldr.w	r9, [pc, #604]	; 19978 <lv_style_init+0x26c>
    lv_style_plain.body.padding.right  = LV_DPI / 20;
    lv_style_plain.body.padding.top    = LV_DPI / 20;
    lv_style_plain.body.padding.bottom = LV_DPI / 20;

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
   1971e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 1997c <lv_style_init+0x270>
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
   19722:	640f      	str	r7, [r1, #64]	; 0x40
    lv_style_scr.glass               = 0;
   19724:	f36f 0300 	bfc	r3, #0, #1
   19728:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
   1972a:	2305      	movs	r3, #5
   1972c:	850b      	strh	r3, [r1, #40]	; 0x28
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
   1972e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   19732:	610b      	str	r3, [r1, #16]
    lv_style_scr.body.border.width = 0;
   19734:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
   19738:	614b      	str	r3, [r1, #20]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
   1973a:	2301      	movs	r3, #1
   1973c:	778b      	strb	r3, [r1, #30]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
   1973e:	4b6f      	ldr	r3, [pc, #444]	; (198fc <lv_style_init+0x1f0>)
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
   19740:	648f      	str	r7, [r1, #72]	; 0x48
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
   19742:	e9c1 340b 	strd	r3, r4, [r1, #44]	; 0x2c
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
   19746:	4b6e      	ldr	r3, [pc, #440]	; (19900 <lv_style_init+0x1f4>)
   19748:	634b      	str	r3, [r1, #52]	; 0x34
    lv_style_scr.text.letter_space = 0;
   1974a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1974e:	638b      	str	r3, [r1, #56]	; 0x38
    lv_style_scr.text.opa          = LV_OPA_COVER;
   19750:	23ff      	movs	r3, #255	; 0xff
   19752:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    lv_style_scr.image.intense = LV_OPA_TRANSP;
   19756:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   1975a:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
    lv_style_scr.line.width   = 2;
   1975e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
   19760:	f8c1 9018 	str.w	r9, [r1, #24]
    lv_style_scr.line.width   = 2;
   19764:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
   19768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    lv_style_scr.body.radius         = 0;
   1976c:	2500      	movs	r5, #0
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
   1976e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    lv_style_scr.line.width   = 2;
   19772:	f043 0302 	orr.w	r3, r3, #2
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
   19776:	e9c1 8801 	strd	r8, r8, [r1, #4]
    lv_style_scr.body.padding.left   = 0;
   1977a:	e9c1 5508 	strd	r5, r5, [r1, #32]
    lv_style_scr.line.width   = 2;
   1977e:	64cb      	str	r3, [r1, #76]	; 0x4c
    lv_style_copy(&lv_style_plain, &lv_style_scr);
   19780:	4630      	mov	r0, r6
    lv_style_scr.body.radius         = 0;
   19782:	818d      	strh	r5, [r1, #12]
    lv_style_scr.body.opa            = LV_OPA_COVER;
   19784:	f881 800e 	strb.w	r8, [r1, #14]
    lv_style_scr.body.shadow.width = 0;
   19788:	838d      	strh	r5, [r1, #28]
    lv_style_copy(&lv_style_plain, &lv_style_scr);
   1978a:	f009 fec9 	bl	23520 <lv_style_copy>
    lv_style_plain.body.padding.top    = LV_DPI / 20;
   1978e:	f04f 1305 	mov.w	r3, #327685	; 0x50005
    lv_style_plain.body.padding.left   = LV_DPI / 20;
   19792:	e9c6 3308 	strd	r3, r3, [r6, #32]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
   19796:	4631      	mov	r1, r6
   19798:	4650      	mov	r0, sl
   1979a:	f009 fec1 	bl	23520 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
   1979e:	e9ca 4401 	strd	r4, r4, [sl, #4]

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
   197a2:	4c58      	ldr	r4, [pc, #352]	; (19904 <lv_style_init+0x1f8>)
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
   197a4:	4b58      	ldr	r3, [pc, #352]	; (19908 <lv_style_init+0x1fc>)
   197a6:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
   197aa:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
   197ae:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
   197b2:	4631      	mov	r1, r6
   197b4:	4620      	mov	r0, r4
   197b6:	f009 feb3 	bl	23520 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
   197ba:	62e7      	str	r7, [r4, #44]	; 0x2c
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
   197bc:	6427      	str	r7, [r4, #64]	; 0x40
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
   197be:	64a7      	str	r7, [r4, #72]	; 0x48
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
    lv_style_pretty.body.border.opa   = LV_OPA_30;

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
   197c0:	4f52      	ldr	r7, [pc, #328]	; (1990c <lv_style_init+0x200>)
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
   197c2:	4b53      	ldr	r3, [pc, #332]	; (19910 <lv_style_init+0x204>)
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
   197c4:	4a53      	ldr	r2, [pc, #332]	; (19914 <lv_style_init+0x208>)
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
   197c6:	f8c4 8004 	str.w	r8, [r4, #4]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
   197ca:	60a3      	str	r3, [r4, #8]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
   197cc:	6122      	str	r2, [r4, #16]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
   197ce:	4621      	mov	r1, r4
    lv_style_pretty.body.border.opa   = LV_OPA_30;
   197d0:	224c      	movs	r2, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
   197d2:	4638      	mov	r0, r7
    lv_style_pretty.body.radius       = LV_DPI / 15;
   197d4:	f04f 0b06 	mov.w	fp, #6
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
   197d8:	f04f 0a02 	mov.w	sl, #2
    lv_style_pretty.body.border.opa   = LV_OPA_30;
   197dc:	75e2      	strb	r2, [r4, #23]
    lv_style_pretty.body.radius       = LV_DPI / 15;
   197de:	f8a4 b00c 	strh.w	fp, [r4, #12]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
   197e2:	f8a4 a014 	strh.w	sl, [r4, #20]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
   197e6:	f009 fe9b 	bl	23520 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
   197ea:	4b49      	ldr	r3, [pc, #292]	; (19910 <lv_style_init+0x204>)
   197ec:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
   197ee:	494a      	ldr	r1, [pc, #296]	; (19918 <lv_style_init+0x20c>)
   197f0:	4b4a      	ldr	r3, [pc, #296]	; (1991c <lv_style_init+0x210>)
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
   197f2:	4c4b      	ldr	r4, [pc, #300]	; (19920 <lv_style_init+0x214>)
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
   197f4:	4a4b      	ldr	r2, [pc, #300]	; (19924 <lv_style_init+0x218>)
   197f6:	62fa      	str	r2, [r7, #44]	; 0x2c
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
   197f8:	e9c7 1301 	strd	r1, r3, [r7, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
   197fc:	f5a3 13b1 	sub.w	r3, r3, #1449984	; 0x162000
   19800:	f6a3 5349 	subw	r3, r3, #3401	; 0xd49
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
   19804:	643a      	str	r2, [r7, #64]	; 0x40
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
   19806:	613b      	str	r3, [r7, #16]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
   19808:	4631      	mov	r1, r6
   1980a:	4620      	mov	r0, r4
   1980c:	f009 fe88 	bl	23520 <lv_style_copy>
    lv_style_transp.glass             = 1;
   19810:	7823      	ldrb	r3, [r4, #0]
    lv_style_transp.body.border.width = 0;
    lv_style_transp.body.opa          = LV_OPA_TRANSP;

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
   19812:	4f45      	ldr	r7, [pc, #276]	; (19928 <lv_style_init+0x21c>)
    lv_style_transp.body.border.width = 0;
   19814:	82a5      	strh	r5, [r4, #20]
    lv_style_transp.glass             = 1;
   19816:	f043 0301 	orr.w	r3, r3, #1
   1981a:	7023      	strb	r3, [r4, #0]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
   1981c:	73a5      	strb	r5, [r4, #14]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
   1981e:	4621      	mov	r1, r4
    lv_style_transp_fit.body.padding.right  = 0;
    lv_style_transp_fit.body.padding.top    = 0;
    lv_style_transp_fit.body.padding.bottom = 0;

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
   19820:	4c42      	ldr	r4, [pc, #264]	; (1992c <lv_style_init+0x220>)
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
   19822:	4638      	mov	r0, r7
   19824:	f009 fe7c 	bl	23520 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
   19828:	e9c7 5508 	strd	r5, r5, [r7, #32]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
   1982c:	4639      	mov	r1, r7
   1982e:	4620      	mov	r0, r4
   19830:	f009 fe76 	bl	23520 <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
   19834:	8525      	strh	r5, [r4, #40]	; 0x28

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
   19836:	4c3e      	ldr	r4, [pc, #248]	; (19930 <lv_style_init+0x224>)
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
   19838:	4f3e      	ldr	r7, [pc, #248]	; (19934 <lv_style_init+0x228>)
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
   1983a:	4631      	mov	r1, r6
   1983c:	4620      	mov	r0, r4
   1983e:	f009 fe6f 	bl	23520 <lv_style_copy>
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
   19842:	483d      	ldr	r0, [pc, #244]	; (19938 <lv_style_init+0x22c>)
   19844:	4b3d      	ldr	r3, [pc, #244]	; (1993c <lv_style_init+0x230>)
    lv_style_btn_rel.body.shadow.width   = 0;
   19846:	83a5      	strh	r5, [r4, #28]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
   19848:	e9c4 0301 	strd	r0, r3, [r4, #4]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
   1984c:	f04f 1610 	mov.w	r6, #1048592	; 0x100010
   19850:	f04f 1319 	mov.w	r3, #1638425	; 0x190019
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
   19854:	4d3a      	ldr	r5, [pc, #232]	; (19940 <lv_style_init+0x234>)
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
   19856:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
   1985a:	e9c4 6308 	strd	r6, r3, [r4, #32]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
   1985e:	230a      	movs	r3, #10
   19860:	8523      	strh	r3, [r4, #40]	; 0x28
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
   19862:	4b38      	ldr	r3, [pc, #224]	; (19944 <lv_style_init+0x238>)
   19864:	6123      	str	r3, [r4, #16]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
   19866:	4628      	mov	r0, r5
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
   19868:	23b2      	movs	r3, #178	; 0xb2
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
   1986a:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
   1986e:	4621      	mov	r1, r4
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
   19870:	f8c4 9018 	str.w	r9, [r4, #24]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
   19874:	75e3      	strb	r3, [r4, #23]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
   19876:	f8a4 b00c 	strh.w	fp, [r4, #12]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
   1987a:	f8a4 a014 	strh.w	sl, [r4, #20]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
   1987e:	f009 fe4f 	bl	23520 <lv_style_copy>
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
   19882:	4b31      	ldr	r3, [pc, #196]	; (19948 <lv_style_init+0x23c>)
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
   19884:	4e31      	ldr	r6, [pc, #196]	; (1994c <lv_style_init+0x240>)
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
   19886:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 19980 <lv_style_init+0x274>
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
   1988a:	e9c5 7301 	strd	r7, r3, [r5, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
   1988e:	4f30      	ldr	r7, [pc, #192]	; (19950 <lv_style_init+0x244>)
   19890:	62ef      	str	r7, [r5, #44]	; 0x2c
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
   19892:	642f      	str	r7, [r5, #64]	; 0x40
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
   19894:	64af      	str	r7, [r5, #72]	; 0x48
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
   19896:	4d2f      	ldr	r5, [pc, #188]	; (19954 <lv_style_init+0x248>)
   19898:	4621      	mov	r1, r4
   1989a:	4628      	mov	r0, r5
   1989c:	f009 fe40 	bl	23520 <lv_style_copy>
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
   198a0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 19984 <lv_style_init+0x278>
   198a4:	4b2c      	ldr	r3, [pc, #176]	; (19958 <lv_style_init+0x24c>)
   198a6:	e9c5 c301 	strd	ip, r3, [r5, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
   198aa:	4b2c      	ldr	r3, [pc, #176]	; (1995c <lv_style_init+0x250>)
   198ac:	612b      	str	r3, [r5, #16]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
   198ae:	4b2c      	ldr	r3, [pc, #176]	; (19960 <lv_style_init+0x254>)
   198b0:	62eb      	str	r3, [r5, #44]	; 0x2c
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
   198b2:	642b      	str	r3, [r5, #64]	; 0x40
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
   198b4:	64ab      	str	r3, [r5, #72]	; 0x48
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
   198b6:	4629      	mov	r1, r5
   198b8:	4630      	mov	r0, r6
   198ba:	f009 fe31 	bl	23520 <lv_style_copy>
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
   198be:	4d29      	ldr	r5, [pc, #164]	; (19964 <lv_style_init+0x258>)
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
   198c0:	4b29      	ldr	r3, [pc, #164]	; (19968 <lv_style_init+0x25c>)
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
   198c2:	62f7      	str	r7, [r6, #44]	; 0x2c
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
   198c4:	e9c6 8301 	strd	r8, r3, [r6, #4]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
   198c8:	6437      	str	r7, [r6, #64]	; 0x40
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
   198ca:	64b7      	str	r7, [r6, #72]	; 0x48
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
   198cc:	4621      	mov	r1, r4
   198ce:	4628      	mov	r0, r5
   198d0:	f009 fe26 	bl	23520 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
   198d4:	4b25      	ldr	r3, [pc, #148]	; (1996c <lv_style_init+0x260>)
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
   198d6:	e9c5 3301 	strd	r3, r3, [r5, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
   198da:	4b25      	ldr	r3, [pc, #148]	; (19970 <lv_style_init+0x264>)
   198dc:	612b      	str	r3, [r5, #16]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
   198de:	4b25      	ldr	r3, [pc, #148]	; (19974 <lv_style_init+0x268>)
   198e0:	62eb      	str	r3, [r5, #44]	; 0x2c
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
   198e2:	642b      	str	r3, [r5, #64]	; 0x40
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
   198e4:	64ab      	str	r3, [r5, #72]	; 0x48
}
   198e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198ea:	bf00      	nop
   198ec:	20001c7c 	.word	0x20001c7c
   198f0:	ff5596d8 	.word	0xff5596d8
   198f4:	20001b3c 	.word	0x20001b3c
   198f8:	ff202020 	.word	0xff202020
   198fc:	ff303030 	.word	0xff303030
   19900:	2000e3b4 	.word	0x2000e3b4
   19904:	20001bdc 	.word	0x20001bdc
   19908:	fff0f0f0 	.word	0xfff0f0f0
   1990c:	20001c2c 	.word	0x20001c2c
   19910:	ffc0c0c0 	.word	0xffc0c0c0
   19914:	ff404040 	.word	0xff404040
   19918:	ff6b9ac7 	.word	0xff6b9ac7
   1991c:	ff2b598b 	.word	0xff2b598b
   19920:	20001ccc 	.word	0x20001ccc
   19924:	ffe0e0e0 	.word	0xffe0e0e0
   19928:	20001d1c 	.word	0x20001d1c
   1992c:	20001d6c 	.word	0x20001d6c
   19930:	20001a4c 	.word	0x20001a4c
   19934:	ff336294 	.word	0xff336294
   19938:	ff76a2d0 	.word	0xff76a2d0
   1993c:	ff193a5d 	.word	0xff193a5d
   19940:	200019fc 	.word	0x200019fc
   19944:	ff0b1928 	.word	0xff0b1928
   19948:	ff10263c 	.word	0xff10263c
   1994c:	20001a9c 	.word	0x20001a9c
   19950:	ffa4b5c6 	.word	0xffa4b5c6
   19954:	20001aec 	.word	0x20001aec
   19958:	ff376290 	.word	0xff376290
   1995c:	ff01070d 	.word	0xff01070d
   19960:	ffc8ddf4 	.word	0xffc8ddf4
   19964:	200019ac 	.word	0x200019ac
   19968:	ff2b4c70 	.word	0xff2b4c70
   1996c:	ffd8d8d8 	.word	0xffd8d8d8
   19970:	ff909090 	.word	0xff909090
   19974:	ff707070 	.word	0xff707070
   19978:	ff808080 	.word	0xff808080
   1997c:	20001b8c 	.word	0x20001b8c
   19980:	ff021427 	.word	0xff021427
   19984:	ff0a1122 	.word	0xff0a1122

00019988 <lv_draw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa)
{
   19988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1998c:	b0a3      	sub	sp, #140	; 0x8c
   1998e:	469a      	mov	sl, r3
   19990:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
   19994:	9308      	str	r3, [sp, #32]
    /*clang-format off*/
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   19996:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   1999a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   1999e:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
   199a2:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
   199a6:	931b      	str	r3, [sp, #108]	; 0x6c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   199a8:	4bb4      	ldr	r3, [pc, #720]	; (19c7c <lv_draw_letter+0x2f4>)
{
   199aa:	4617      	mov	r7, r2
   199ac:	4604      	mov	r4, r0
   199ae:	460d      	mov	r5, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   199b0:	aa1e      	add	r2, sp, #120	; 0x78
   199b2:	f103 0c10 	add.w	ip, r3, #16
   199b6:	6818      	ldr	r0, [r3, #0]
   199b8:	6859      	ldr	r1, [r3, #4]
   199ba:	4616      	mov	r6, r2
   199bc:	c603      	stmia	r6!, {r0, r1}
   199be:	3308      	adds	r3, #8
   199c0:	4563      	cmp	r3, ip
   199c2:	4632      	mov	r2, r6
   199c4:	d1f7      	bne.n	199b6 <lv_draw_letter+0x2e>
                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};
    /*clang-format on*/

    if(opa < LV_OPA_MIN) return;
   199c6:	9b08      	ldr	r3, [sp, #32]
   199c8:	2b0f      	cmp	r3, #15
   199ca:	d90a      	bls.n	199e2 <lv_draw_letter+0x5a>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   199cc:	2bfc      	cmp	r3, #252	; 0xfc
   199ce:	bf28      	it	cs
   199d0:	23ff      	movcs	r3, #255	; 0xff
   199d2:	9308      	str	r3, [sp, #32]

    if(font_p == NULL) {
   199d4:	b947      	cbnz	r7, 199e8 <lv_draw_letter+0x60>
        LV_LOG_WARN("Font: character's bitmap not found");
   199d6:	4baa      	ldr	r3, [pc, #680]	; (19c80 <lv_draw_letter+0x2f8>)
   199d8:	49aa      	ldr	r1, [pc, #680]	; (19c84 <lv_draw_letter+0x2fc>)
   199da:	22f7      	movs	r2, #247	; 0xf7
   199dc:	2002      	movs	r0, #2
   199de:	f001 fae1 	bl	1afa4 <lv_log_add>

        /*Next row in VDB*/
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
    }
}
   199e2:	b023      	add	sp, #140	; 0x8c
   199e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
   199e8:	2300      	movs	r3, #0
   199ea:	4652      	mov	r2, sl
   199ec:	a91c      	add	r1, sp, #112	; 0x70
   199ee:	4638      	mov	r0, r7
   199f0:	f00b fa5f 	bl	24eb2 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
   199f4:	2800      	cmp	r0, #0
   199f6:	d0f4      	beq.n	199e2 <lv_draw_letter+0x5a>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   199f8:	f99d 1075 	ldrsb.w	r1, [sp, #117]	; 0x75
   199fc:	9106      	str	r1, [sp, #24]
    if(g.bpp == 3) g.bpp = 4;
   199fe:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   19a02:	f9b4 9000 	ldrsh.w	r9, [r4]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   19a06:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   19a0a:	f99d 2074 	ldrsb.w	r2, [sp, #116]	; 0x74
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   19a0e:	f897 8008 	ldrb.w	r8, [r7, #8]
   19a12:	7a7b      	ldrb	r3, [r7, #9]
   19a14:	f89d 4073 	ldrb.w	r4, [sp, #115]	; 0x73
    if(g.bpp == 3) g.bpp = 4;
   19a18:	2903      	cmp	r1, #3
   19a1a:	d106      	bne.n	19a2a <lv_draw_letter+0xa2>
   19a1c:	2104      	movs	r1, #4
   19a1e:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
            bitmask_init  = 0xF0;
   19a22:	21f0      	movs	r1, #240	; 0xf0
   19a24:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = bpp4_opa_table;
   19a26:	a91e      	add	r1, sp, #120	; 0x78
   19a28:	e019      	b.n	19a5e <lv_draw_letter+0xd6>
    switch(g.bpp) {
   19a2a:	3901      	subs	r1, #1
   19a2c:	2907      	cmp	r1, #7
   19a2e:	d8d8      	bhi.n	199e2 <lv_draw_letter+0x5a>
   19a30:	a001      	add	r0, pc, #4	; (adr r0, 19a38 <lv_draw_letter+0xb0>)
   19a32:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   19a36:	bf00      	nop
   19a38:	00019c2d 	.word	0x00019c2d
   19a3c:	00019a59 	.word	0x00019a59
   19a40:	000199e3 	.word	0x000199e3
   19a44:	00019a23 	.word	0x00019a23
   19a48:	000199e3 	.word	0x000199e3
   19a4c:	000199e3 	.word	0x000199e3
   19a50:	000199e3 	.word	0x000199e3
   19a54:	00019c25 	.word	0x00019c25
            bitmask_init  = 0xC0;
   19a58:	21c0      	movs	r1, #192	; 0xc0
   19a5a:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = bpp2_opa_table;
   19a5c:	a91b      	add	r1, sp, #108	; 0x6c
            bpp_opa_table = bpp1_opa_table;
   19a5e:	9105      	str	r1, [sp, #20]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
   19a60:	4638      	mov	r0, r7
   19a62:	4651      	mov	r1, sl
   19a64:	930a      	str	r3, [sp, #40]	; 0x28
   19a66:	9207      	str	r2, [sp, #28]
   19a68:	f00b fa21 	bl	24eae <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
   19a6c:	9004      	str	r0, [sp, #16]
   19a6e:	2800      	cmp	r0, #0
   19a70:	d0b7      	beq.n	199e2 <lv_draw_letter+0x5a>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   19a72:	9a07      	ldr	r2, [sp, #28]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   19a74:	f9b5 1000 	ldrsh.w	r1, [r5]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   19a78:	4491      	add	r9, r2
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   19a7a:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   19a7e:	fa0f f989 	sxth.w	r9, r9
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   19a82:	444a      	add	r2, r9
   19a84:	428a      	cmp	r2, r1
   19a86:	dbac      	blt.n	199e2 <lv_draw_letter+0x5a>
   19a88:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   19a8c:	454a      	cmp	r2, r9
   19a8e:	dba8      	blt.n	199e2 <lv_draw_letter+0x5a>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   19a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   19a92:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   19a96:	eba8 0803 	sub.w	r8, r8, r3
   19a9a:	9b06      	ldr	r3, [sp, #24]
   19a9c:	4446      	add	r6, r8
   19a9e:	b236      	sxth	r6, r6
   19aa0:	441c      	add	r4, r3
   19aa2:	1b33      	subs	r3, r6, r4
   19aa4:	fa0f f883 	sxth.w	r8, r3
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   19aa8:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
   19aac:	4443      	add	r3, r8
   19aae:	4293      	cmp	r3, r2
   19ab0:	db97      	blt.n	199e2 <lv_draw_letter+0x5a>
   19ab2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   19ab6:	4543      	cmp	r3, r8
   19ab8:	db93      	blt.n	199e2 <lv_draw_letter+0x5a>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
   19aba:	f7ff fc81 	bl	193c0 <lv_refr_get_disp_refreshing>
   19abe:	9011      	str	r0, [sp, #68]	; 0x44
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   19ac0:	f00a fd25 	bl	2450e <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19ac4:	8a83      	ldrh	r3, [r0, #20]
   19ac6:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   19aca:	9007      	str	r0, [sp, #28]
   19acc:	3301      	adds	r3, #1
   19ace:	1a5b      	subs	r3, r3, r1
   19ad0:	b21b      	sxth	r3, r3
   19ad2:	930b      	str	r3, [sp, #44]	; 0x2c
    bool subpx = font_p->subpx == LV_FONT_SUBPX_NONE ? false : true;
   19ad4:	7abb      	ldrb	r3, [r7, #10]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
   19ad6:	f8d0 c008 	ldr.w	ip, [r0, #8]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
   19ada:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
   19ade:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
   19ae2:	f9b5 a000 	ldrsh.w	sl, [r5]
    if(subpx == false) {
   19ae6:	f013 0303 	ands.w	r3, r3, #3
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
   19aea:	fb00 fe02 	mul.w	lr, r0, r2
    if(subpx == false) {
   19aee:	930c      	str	r3, [sp, #48]	; 0x30
   19af0:	f040 80a5 	bne.w	19c3e <lv_draw_letter+0x2b6>
        col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
   19af4:	45ca      	cmp	sl, r9
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
   19af6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
   19afa:	bfd4      	ite	le
   19afc:	f8dd a030 	ldrle.w	sl, [sp, #48]	; 0x30
   19b00:	ebaa 0a09 	subgt.w	sl, sl, r9
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
   19b04:	eb00 0709 	add.w	r7, r0, r9
        col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
   19b08:	bfc8      	it	gt
   19b0a:	fa0f fa8a 	sxthgt.w	sl, sl
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
   19b0e:	429f      	cmp	r7, r3
   19b10:	f300 8090 	bgt.w	19c34 <lv_draw_letter+0x2ac>
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   19b14:	b203      	sxth	r3, r0
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
   19b16:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
   19b1a:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   19b1e:	9306      	str	r3, [sp, #24]
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
   19b20:	4547      	cmp	r7, r8
   19b22:	bfc8      	it	gt
   19b24:	193f      	addgt	r7, r7, r4
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
   19b26:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
   19b2a:	bfc8      	it	gt
   19b2c:	1bbf      	subgt	r7, r7, r6
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
   19b2e:	eb00 0508 	add.w	r5, r0, r8
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
   19b32:	bfcc      	ite	gt
   19b34:	b23f      	sxthgt	r7, r7
   19b36:	2700      	movle	r7, #0
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
   19b38:	429d      	cmp	r5, r3
   19b3a:	bfc2      	ittt	gt
   19b3c:	3401      	addgt	r4, #1
   19b3e:	18e4      	addgt	r4, r4, r3
   19b40:	1ba0      	subgt	r0, r4, r6
   19b42:	b203      	sxth	r3, r0
   19b44:	930f      	str	r3, [sp, #60]	; 0x3c
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
   19b46:	9b07      	ldr	r3, [sp, #28]
   19b48:	f9b3 4012 	ldrsh.w	r4, [r3, #18]
   19b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19b4e:	eba9 0101 	sub.w	r1, r9, r1
   19b52:	eba8 0404 	sub.w	r4, r8, r4
   19b56:	fb03 1404 	mla	r4, r3, r4, r1
   19b5a:	fb03 f107 	mul.w	r1, r3, r7
    if(subpx) vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
   19b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
   19b60:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
    if(subpx) vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
   19b64:	2b00      	cmp	r3, #0
   19b66:	f000 8086 	beq.w	19c76 <lv_draw_letter+0x2ee>
   19b6a:	2303      	movs	r3, #3
   19b6c:	fb9a f3f3 	sdiv	r3, sl, r3
   19b70:	440b      	add	r3, r1
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
   19b72:	fb12 f50a 	smulbb	r5, r2, sl
    else vdb_buf_tmp += (row_start * vdb_width) + col_start;
   19b76:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    map_p += bit_ofs >> 3;
   19b7a:	9b04      	ldr	r3, [sp, #16]
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
   19b7c:	9a06      	ldr	r2, [sp, #24]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
   19b7e:	fb07 550e 	mla	r5, r7, lr, r5
    map_p += bit_ofs >> 3;
   19b82:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
   19b86:	930a      	str	r3, [sp, #40]	; 0x28
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
   19b88:	f005 0307 	and.w	r3, r5, #7
   19b8c:	9304      	str	r3, [sp, #16]
    uint8_t txt_rgb[3] = {LV_COLOR_GET_R(color), LV_COLOR_GET_G(color), LV_COLOR_GET_B(color)};
   19b8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19b90:	f3c3 4307 	ubfx	r3, r3, #16, #8
   19b94:	9312      	str	r3, [sp, #72]	; 0x48
   19b96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19b98:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19b9c:	9313      	str	r3, [sp, #76]	; 0x4c
   19b9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19ba0:	b2db      	uxtb	r3, r3
   19ba2:	9314      	str	r3, [sp, #80]	; 0x50
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
   19ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19ba6:	4453      	add	r3, sl
   19ba8:	1a9b      	subs	r3, r3, r2
   19baa:	009b      	lsls	r3, r3, #2
   19bac:	9316      	str	r3, [sp, #88]	; 0x58
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
   19bae:	eba2 030a 	sub.w	r3, r2, sl
   19bb2:	f06f 0202 	mvn.w	r2, #2
   19bb6:	fb93 f3f2 	sdiv	r3, r3, r2
   19bba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19bbc:	4413      	add	r3, r2
   19bbe:	009b      	lsls	r3, r3, #2
   19bc0:	9315      	str	r3, [sp, #84]	; 0x54
    for(row = row_start; row < row_end; row++) {
   19bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19bc4:	429f      	cmp	r7, r3
   19bc6:	f6bf af0c 	bge.w	199e2 <lv_draw_letter+0x5a>
        bitmask = bitmask_init >> col_bit;
   19bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19bcc:	9a04      	ldr	r2, [sp, #16]
   19bce:	4113      	asrs	r3, r2
   19bd0:	b2db      	uxtb	r3, r3
        for(col = col_start; col < col_end; col++) {
   19bd2:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   19bd6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   19bda:	9310      	str	r3, [sp, #64]	; 0x40
                                *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
   19bdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19bde:	f3c3 4307 	ubfx	r3, r3, #16, #8
        uint8_t sub_px_cnt = 0;
   19be2:	2600      	movs	r6, #0
                                *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
   19be4:	9317      	str	r3, [sp, #92]	; 0x5c
        for(col = col_start; col < col_end; col++) {
   19be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19be8:	9a06      	ldr	r2, [sp, #24]
   19bea:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
   19bee:	4293      	cmp	r3, r2
   19bf0:	db4a      	blt.n	19c88 <lv_draw_letter+0x300>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
   19bf2:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
   19bf6:	4453      	add	r3, sl
   19bf8:	1a9b      	subs	r3, r3, r2
   19bfa:	9a04      	ldr	r2, [sp, #16]
   19bfc:	fb13 f301 	smulbb	r3, r3, r1
   19c00:	441a      	add	r2, r3
        map_p += (col_bit >> 3);
   19c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
   19c04:	b295      	uxth	r5, r2
        map_p += (col_bit >> 3);
   19c06:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
   19c0a:	930a      	str	r3, [sp, #40]	; 0x28
        col_bit = col_bit & 0x7;
   19c0c:	f005 0307 	and.w	r3, r5, #7
   19c10:	9304      	str	r3, [sp, #16]
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
   19c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19c14:	2b00      	cmp	r3, #0
   19c16:	f000 80f9 	beq.w	19e0c <lv_draw_letter+0x484>
   19c1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    for(row = row_start; row < row_end; row++) {
   19c1c:	3701      	adds	r7, #1
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
   19c1e:	441c      	add	r4, r3
    for(row = row_start; row < row_end; row++) {
   19c20:	b23f      	sxth	r7, r7
   19c22:	e7ce      	b.n	19bc2 <lv_draw_letter+0x23a>
            bitmask_init  = 0xFF;
   19c24:	21ff      	movs	r1, #255	; 0xff
   19c26:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = NULL;
   19c28:	2100      	movs	r1, #0
   19c2a:	e718      	b.n	19a5e <lv_draw_letter+0xd6>
            bitmask_init  = 0x80;
   19c2c:	2180      	movs	r1, #128	; 0x80
   19c2e:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = bpp1_opa_table;
   19c30:	a919      	add	r1, sp, #100	; 0x64
   19c32:	e714      	b.n	19a5e <lv_draw_letter+0xd6>
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
   19c34:	3301      	adds	r3, #1
   19c36:	eba3 0309 	sub.w	r3, r3, r9
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   19c3a:	b21b      	sxth	r3, r3
   19c3c:	e76b      	b.n	19b16 <lv_draw_letter+0x18e>
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
   19c3e:	45ca      	cmp	sl, r9
   19c40:	bfc8      	it	gt
   19c42:	ebaa 0a09 	subgt.w	sl, sl, r9
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   19c46:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
   19c4a:	bfc8      	it	gt
   19c4c:	eb0a 0a4a 	addgt.w	sl, sl, sl, lsl #1
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   19c50:	f04f 0703 	mov.w	r7, #3
   19c54:	fbb0 f7f7 	udiv	r7, r0, r7
   19c58:	444f      	add	r7, r9
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
   19c5a:	bfcc      	ite	gt
   19c5c:	fa0f fa8a 	sxthgt.w	sl, sl
   19c60:	f04f 0a00 	movle.w	sl, #0
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   19c64:	429f      	cmp	r7, r3
   19c66:	f77f af55 	ble.w	19b14 <lv_draw_letter+0x18c>
   19c6a:	3301      	adds	r3, #1
   19c6c:	eba3 0309 	sub.w	r3, r3, r9
   19c70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19c74:	e7e1      	b.n	19c3a <lv_draw_letter+0x2b2>
    else vdb_buf_tmp += (row_start * vdb_width) + col_start;
   19c76:	eb01 030a 	add.w	r3, r1, sl
   19c7a:	e77a      	b.n	19b72 <lv_draw_letter+0x1ea>
   19c7c:	00025c64 	.word	0x00025c64
   19c80:	00029ec8 	.word	0x00029ec8
   19c84:	00029eeb 	.word	0x00029eeb
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
   19c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19c8a:	9804      	ldr	r0, [sp, #16]
   19c8c:	781a      	ldrb	r2, [r3, #0]
   19c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19c90:	401a      	ands	r2, r3
   19c92:	f1c1 0308 	rsb	r3, r1, #8
   19c96:	1a1b      	subs	r3, r3, r0
   19c98:	411a      	asrs	r2, r3
            if(subpx == false) {
   19c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
   19c9c:	b2d2      	uxtb	r2, r2
            if(subpx == false) {
   19c9e:	2b00      	cmp	r3, #0
   19ca0:	d15c      	bne.n	19d5c <lv_draw_letter+0x3d4>
                if(letter_px != 0) {
   19ca2:	b30a      	cbz	r2, 19ce8 <lv_draw_letter+0x360>
                    if(opa == LV_OPA_COVER) {
   19ca4:	9b08      	ldr	r3, [sp, #32]
   19ca6:	2bff      	cmp	r3, #255	; 0xff
   19ca8:	d134      	bne.n	19d14 <lv_draw_letter+0x38c>
                        px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
   19caa:	2908      	cmp	r1, #8
   19cac:	d001      	beq.n	19cb2 <lv_draw_letter+0x32a>
   19cae:	9b05      	ldr	r3, [sp, #20]
   19cb0:	5c9a      	ldrb	r2, [r3, r2]
                    if(disp->driver.set_px_cb) {
   19cb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19cb4:	695b      	ldr	r3, [r3, #20]
   19cb6:	461d      	mov	r5, r3
   19cb8:	2b00      	cmp	r3, #0
   19cba:	d035      	beq.n	19d28 <lv_draw_letter+0x3a0>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
   19cbc:	9b07      	ldr	r3, [sp, #28]
   19cbe:	990e      	ldr	r1, [sp, #56]	; 0x38
   19cc0:	8a1b      	ldrh	r3, [r3, #16]
   19cc2:	9202      	str	r2, [sp, #8]
   19cc4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   19cc6:	9201      	str	r2, [sp, #4]
   19cc8:	9a07      	ldr	r2, [sp, #28]
   19cca:	9811      	ldr	r0, [sp, #68]	; 0x44
   19ccc:	8a52      	ldrh	r2, [r2, #18]
   19cce:	eba8 0202 	sub.w	r2, r8, r2
   19cd2:	eba9 0303 	sub.w	r3, r9, r3
   19cd6:	443a      	add	r2, r7
   19cd8:	440b      	add	r3, r1
   19cda:	b212      	sxth	r2, r2
   19cdc:	9907      	ldr	r1, [sp, #28]
   19cde:	9200      	str	r2, [sp, #0]
   19ce0:	b21b      	sxth	r3, r3
   19ce2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19ce4:	6889      	ldr	r1, [r1, #8]
   19ce6:	47a8      	blx	r5
                vdb_buf_tmp++;
   19ce8:	3404      	adds	r4, #4
            if(col_bit < 8 - g.bpp) {
   19cea:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
   19cee:	9904      	ldr	r1, [sp, #16]
   19cf0:	f1c3 0208 	rsb	r2, r3, #8
   19cf4:	4291      	cmp	r1, r2
   19cf6:	f280 8081 	bge.w	19dfc <lv_draw_letter+0x474>
                col_bit += g.bpp;
   19cfa:	460a      	mov	r2, r1
   19cfc:	441a      	add	r2, r3
   19cfe:	b292      	uxth	r2, r2
   19d00:	9204      	str	r2, [sp, #16]
                bitmask = bitmask >> g.bpp;
   19d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19d04:	411a      	asrs	r2, r3
   19d06:	b2d3      	uxtb	r3, r2
   19d08:	930d      	str	r3, [sp, #52]	; 0x34
        for(col = col_start; col < col_end; col++) {
   19d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19d0c:	3301      	adds	r3, #1
   19d0e:	b21b      	sxth	r3, r3
   19d10:	930e      	str	r3, [sp, #56]	; 0x38
   19d12:	e768      	b.n	19be6 <lv_draw_letter+0x25e>
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
   19d14:	2908      	cmp	r1, #8
                                : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
   19d16:	bf1c      	itt	ne
   19d18:	9b05      	ldrne	r3, [sp, #20]
   19d1a:	5c9a      	ldrbne	r2, [r3, r2]
   19d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19d1e:	fb12 f203 	smulbb	r2, r2, r3
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
   19d22:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19d26:	e7c4      	b.n	19cb2 <lv_draw_letter+0x32a>
                    } else if(vdb_buf_tmp->full != color.full) {
   19d28:	6823      	ldr	r3, [r4, #0]
   19d2a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   19d2c:	428b      	cmp	r3, r1
   19d2e:	d0db      	beq.n	19ce8 <lv_draw_letter+0x360>
                        if(px_opa > LV_OPA_MAX) {
   19d30:	2afb      	cmp	r2, #251	; 0xfb
   19d32:	d901      	bls.n	19d38 <lv_draw_letter+0x3b0>
                            *vdb_buf_tmp = color;
   19d34:	6021      	str	r1, [r4, #0]
   19d36:	e7d7      	b.n	19ce8 <lv_draw_letter+0x360>
                        } else if(px_opa > LV_OPA_MIN) {
   19d38:	2a10      	cmp	r2, #16
   19d3a:	d9d5      	bls.n	19ce8 <lv_draw_letter+0x360>
                                *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
   19d3c:	7823      	ldrb	r3, [r4, #0]
   19d3e:	9202      	str	r2, [sp, #8]
   19d40:	78a2      	ldrb	r2, [r4, #2]
   19d42:	9201      	str	r2, [sp, #4]
   19d44:	992c      	ldr	r1, [sp, #176]	; 0xb0
   19d46:	982c      	ldr	r0, [sp, #176]	; 0xb0
   19d48:	7862      	ldrb	r2, [r4, #1]
   19d4a:	9200      	str	r2, [sp, #0]
   19d4c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   19d50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19d52:	b2c0      	uxtb	r0, r0
   19d54:	f009 fbe7 	bl	23526 <lv_color_mix.isra.0>
   19d58:	6020      	str	r0, [r4, #0]
   19d5a:	e7c5      	b.n	19ce8 <lv_draw_letter+0x360>
                if(letter_px != 0) {
   19d5c:	b132      	cbz	r2, 19d6c <lv_draw_letter+0x3e4>
                    if(opa == LV_OPA_COVER) {
   19d5e:	9b08      	ldr	r3, [sp, #32]
   19d60:	2bff      	cmp	r3, #255	; 0xff
   19d62:	d11b      	bne.n	19d9c <lv_draw_letter+0x414>
                        px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
   19d64:	2908      	cmp	r1, #8
   19d66:	d001      	beq.n	19d6c <lv_draw_letter+0x3e4>
   19d68:	9b05      	ldr	r3, [sp, #20]
   19d6a:	5c9a      	ldrb	r2, [r3, r2]
                    font_rgb[sub_px_cnt] = 0;
   19d6c:	ab22      	add	r3, sp, #136	; 0x88
   19d6e:	4433      	add	r3, r6
                sub_px_cnt ++;
   19d70:	3601      	adds	r6, #1
   19d72:	b2f6      	uxtb	r6, r6
                if(sub_px_cnt == 3) {
   19d74:	2e03      	cmp	r6, #3
                    font_rgb[sub_px_cnt] = 0;
   19d76:	f803 2c20 	strb.w	r2, [r3, #-32]
                if(sub_px_cnt == 3) {
   19d7a:	d1b6      	bne.n	19cea <lv_draw_letter+0x362>
                    if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) {
   19d7c:	f89d c068 	ldrb.w	ip, [sp, #104]	; 0x68
   19d80:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
   19d84:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
   19d88:	ea4c 0302 	orr.w	r3, ip, r2
   19d8c:	4303      	orrs	r3, r0
   19d8e:	d10f      	bne.n	19db0 <lv_draw_letter+0x428>
                        res_color = *vdb_buf_tmp;
   19d90:	f8d4 b000 	ldr.w	fp, [r4]
                        vdb_buf_tmp->full = res_color.full;
   19d94:	f844 bb04 	str.w	fp, [r4], #4
                    sub_px_cnt = 0;
   19d98:	2600      	movs	r6, #0
   19d9a:	e7a6      	b.n	19cea <lv_draw_letter+0x362>
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
   19d9c:	2908      	cmp	r1, #8
                                : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
   19d9e:	bf1c      	itt	ne
   19da0:	9b05      	ldrne	r3, [sp, #20]
   19da2:	5c9a      	ldrbne	r2, [r3, r2]
   19da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19da6:	fb12 f203 	smulbb	r2, r2, r3
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
   19daa:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    font_rgb[sub_px_cnt] = px_opa;
   19dae:	e7dd      	b.n	19d6c <lv_draw_letter+0x3e4>
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   19db0:	9d12      	ldr	r5, [sp, #72]	; 0x48
   19db2:	f894 e002 	ldrb.w	lr, [r4, #2]
                        uint8_t bg_rgb[3] = {LV_COLOR_GET_R(*vdb_buf_tmp), LV_COLOR_GET_G(*vdb_buf_tmp), LV_COLOR_GET_B(*vdb_buf_tmp)};
   19db6:	7821      	ldrb	r1, [r4, #0]
   19db8:	7863      	ldrb	r3, [r4, #1]
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   19dba:	f1cc 06ff 	rsb	r6, ip, #255	; 0xff
   19dbe:	fb15 fc0c 	smulbb	ip, r5, ip
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
   19dc2:	9d14      	ldr	r5, [sp, #80]	; 0x50
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   19dc4:	fb0e cc06 	mla	ip, lr, r6, ip
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
   19dc8:	f1c0 06ff 	rsb	r6, r0, #255	; 0xff
   19dcc:	fb15 f000 	smulbb	r0, r5, r0
   19dd0:	fb06 0101 	mla	r1, r6, r1, r0
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   19dd4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
                        LV_COLOR_SET_G(res_color, (uint16_t)((uint16_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8);
   19dd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
   19dda:	f3c1 2107 	ubfx	r1, r1, #8, #8
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   19dde:	f36c 4b17 	bfi	fp, ip, #16, #8
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
   19de2:	f361 0b07 	bfi	fp, r1, #0, #8
                        LV_COLOR_SET_G(res_color, (uint16_t)((uint16_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8);
   19de6:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
   19dea:	fb10 f202 	smulbb	r2, r0, r2
   19dee:	fb01 2303 	mla	r3, r1, r3, r2
   19df2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19df6:	f363 2b0f 	bfi	fp, r3, #8, #8
   19dfa:	e7cb      	b.n	19d94 <lv_draw_letter+0x40c>
                map_p++;
   19dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19dfe:	3301      	adds	r3, #1
   19e00:	930a      	str	r3, [sp, #40]	; 0x28
                bitmask = bitmask_init;
   19e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19e04:	930d      	str	r3, [sp, #52]	; 0x34
                col_bit = 0;
   19e06:	2300      	movs	r3, #0
   19e08:	9304      	str	r3, [sp, #16]
   19e0a:	e77e      	b.n	19d0a <lv_draw_letter+0x382>
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
   19e0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19e0e:	e705      	b.n	19c1c <lv_draw_letter+0x294>

00019e10 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
   19e10:	4a09      	ldr	r2, [pc, #36]	; (19e38 <lv_draw_get_buf+0x28>)
{
   19e12:	b538      	push	{r3, r4, r5, lr}
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
   19e14:	6815      	ldr	r5, [r2, #0]
   19e16:	4c09      	ldr	r4, [pc, #36]	; (19e3c <lv_draw_get_buf+0x2c>)
   19e18:	4285      	cmp	r5, r0
{
   19e1a:	4601      	mov	r1, r0
   19e1c:	6823      	ldr	r3, [r4, #0]
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
   19e1e:	d205      	bcs.n	19e2c <lv_draw_get_buf+0x1c>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
   19e20:	6010      	str	r0, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
   19e22:	b92b      	cbnz	r3, 19e30 <lv_draw_get_buf+0x20>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
   19e24:	f000 fefc 	bl	1ac20 <lv_mem_alloc>
        LV_ASSERT_MEM(LV_GC_ROOT(_lv_draw_buf));
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
   19e28:	4603      	mov	r3, r0
   19e2a:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_draw_buf));
    return LV_GC_ROOT(_lv_draw_buf);
}
   19e2c:	4618      	mov	r0, r3
   19e2e:	bd38      	pop	{r3, r4, r5, pc}
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
   19e30:	4618      	mov	r0, r3
   19e32:	f000 ff39 	bl	1aca8 <lv_mem_realloc>
   19e36:	e7f7      	b.n	19e28 <lv_draw_get_buf+0x18>
   19e38:	20001dbc 	.word	0x20001dbc
   19e3c:	20001de4 	.word	0x20001de4

00019e40 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
   19e40:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
   19e42:	4c05      	ldr	r4, [pc, #20]	; (19e58 <lv_draw_free_buf+0x18>)
   19e44:	6820      	ldr	r0, [r4, #0]
   19e46:	b128      	cbz	r0, 19e54 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
   19e48:	f000 ff10 	bl	1ac6c <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
   19e4c:	4a03      	ldr	r2, [pc, #12]	; (19e5c <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
   19e4e:	2300      	movs	r3, #0
   19e50:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
   19e52:	6013      	str	r3, [r2, #0]
    }
}
   19e54:	bd10      	pop	{r4, pc}
   19e56:	bf00      	nop
   19e58:	20001de4 	.word	0x20001de4
   19e5c:	20001dbc 	.word	0x20001dbc

00019e60 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
   19e60:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
   19e62:	3830      	subs	r0, #48	; 0x30
   19e64:	b2c0      	uxtb	r0, r0
   19e66:	2809      	cmp	r0, #9
   19e68:	d90b      	bls.n	19e82 <hex_char_to_num+0x22>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
   19e6a:	2b60      	cmp	r3, #96	; 0x60
   19e6c:	bf84      	itt	hi
   19e6e:	3b20      	subhi	r3, #32
   19e70:	b2db      	uxtbhi	r3, r3

        switch(hex) {
   19e72:	3b41      	subs	r3, #65	; 0x41
   19e74:	b2db      	uxtb	r3, r3
   19e76:	2b05      	cmp	r3, #5
   19e78:	d802      	bhi.n	19e80 <hex_char_to_num+0x20>
   19e7a:	4a02      	ldr	r2, [pc, #8]	; (19e84 <hex_char_to_num+0x24>)
   19e7c:	5cd0      	ldrb	r0, [r2, r3]
   19e7e:	4770      	bx	lr
{
   19e80:	2000      	movs	r0, #0
        default: result = 0; break;
        }
    }

    return result;
}
   19e82:	4770      	bx	lr
   19e84:	00029f27 	.word	0x00029f27

00019e88 <lv_draw_label>:
{
   19e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e8c:	b0ad      	sub	sp, #180	; 0xb4
   19e8e:	4606      	mov	r6, r0
   19e90:	9305      	str	r3, [sp, #20]
    if (txt[0] == '\0')  return;
   19e92:	9b36      	ldr	r3, [sp, #216]	; 0xd8
{
   19e94:	910b      	str	r1, [sp, #44]	; 0x2c
    if (txt[0] == '\0')  return;
   19e96:	781b      	ldrb	r3, [r3, #0]
{
   19e98:	f89d b0dc 	ldrb.w	fp, [sp, #220]	; 0xdc
   19e9c:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
   19e9e:	4615      	mov	r5, r2
    if (txt[0] == '\0')  return;
   19ea0:	2b00      	cmp	r3, #0
   19ea2:	f000 80a7 	beq.w	19ff4 <lv_draw_label+0x16c>
    const lv_font_t * font = style->text.font;
   19ea6:	6b53      	ldr	r3, [r2, #52]	; 0x34
   19ea8:	9304      	str	r3, [sp, #16]
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
   19eaa:	f01b 0f02 	tst.w	fp, #2
   19eae:	f040 80a4 	bne.w	19ffa <lv_draw_label+0x172>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19eb2:	8883      	ldrh	r3, [r0, #4]
   19eb4:	8802      	ldrh	r2, [r0, #0]
   19eb6:	3301      	adds	r3, #1
   19eb8:	1a9b      	subs	r3, r3, r2
   19eba:	b21b      	sxth	r3, r3
        w = p.x;
   19ebc:	9308      	str	r3, [sp, #32]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
   19ebe:	9b04      	ldr	r3, [sp, #16]
   19ec0:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
   19ec2:	7a1b      	ldrb	r3, [r3, #8]
   19ec4:	4413      	add	r3, r2
   19ec6:	b21b      	sxth	r3, r3
   19ec8:	9307      	str	r3, [sp, #28]
    pos.x = coords->x1;
   19eca:	8833      	ldrh	r3, [r6, #0]
   19ecc:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    if(offset != NULL) {
   19ed0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    pos.y = coords->y1;
   19ed2:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
   19ed6:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    if(offset != NULL) {
   19eda:	2b00      	cmp	r3, #0
   19edc:	f000 820e 	beq.w	1a2fc <lv_draw_label+0x474>
        x_ofs = offset->x;
   19ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
   19ee4:	930e      	str	r3, [sp, #56]	; 0x38
        y_ofs = offset->y;
   19ee6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   19ee8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
   19eec:	18d1      	adds	r1, r2, r3
   19eee:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
    if(hint && y_ofs == 0 && coords->y1 < 0) {
   19ef2:	2f00      	cmp	r7, #0
   19ef4:	f000 8206 	beq.w	1a304 <lv_draw_label+0x47c>
   19ef8:	2b00      	cmp	r3, #0
   19efa:	f040 8203 	bne.w	1a304 <lv_draw_label+0x47c>
   19efe:	2a00      	cmp	r2, #0
   19f00:	f280 8200 	bge.w	1a304 <lv_draw_label+0x47c>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
   19f04:	68bb      	ldr	r3, [r7, #8]
   19f06:	1a9b      	subs	r3, r3, r2
   19f08:	9a07      	ldr	r2, [sp, #28]
   19f0a:	2b00      	cmp	r3, #0
   19f0c:	bfb8      	it	lt
   19f0e:	425b      	neglt	r3, r3
   19f10:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
   19f14:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
   19f18:	bfc4      	itt	gt
   19f1a:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
   19f1e:	603b      	strgt	r3, [r7, #0]
        last_line_start = hint->line_start;
   19f20:	683c      	ldr	r4, [r7, #0]
    if(hint && last_line_start >= 0) {
   19f22:	2c00      	cmp	r4, #0
   19f24:	f2c0 81ee 	blt.w	1a304 <lv_draw_label+0x47c>
        pos.y += hint->y;
   19f28:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   19f2c:	687b      	ldr	r3, [r7, #4]
   19f2e:	4413      	add	r3, r2
   19f30:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   19f34:	9836      	ldr	r0, [sp, #216]	; 0xd8
   19f36:	f8cd b000 	str.w	fp, [sp]
   19f3a:	9b08      	ldr	r3, [sp, #32]
   19f3c:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
   19f40:	9904      	ldr	r1, [sp, #16]
   19f42:	4420      	add	r0, r4
   19f44:	f000 ff32 	bl	1adac <lv_txt_get_next_line>
   19f48:	eb00 0804 	add.w	r8, r0, r4
    while(pos.y + line_height < mask->y1) {
   19f4c:	9a07      	ldr	r2, [sp, #28]
   19f4e:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
   19f52:	4413      	add	r3, r2
   19f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19f56:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
   19f5a:	4293      	cmp	r3, r2
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   19f5c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    while(pos.y + line_height < mask->y1) {
   19f5e:	db61      	blt.n	1a024 <lv_draw_label+0x19c>
    if(flag & LV_TXT_FLAG_CENTER) {
   19f60:	1918      	adds	r0, r3, r4
   19f62:	f01b 0304 	ands.w	r3, fp, #4
   19f66:	9312      	str	r3, [sp, #72]	; 0x48
   19f68:	f000 8084 	beq.w	1a074 <lv_draw_label+0x1ec>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
   19f6c:	eba8 0104 	sub.w	r1, r8, r4
   19f70:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
   19f74:	9a04      	ldr	r2, [sp, #16]
   19f76:	f8cd b000 	str.w	fp, [sp]
   19f7a:	b289      	uxth	r1, r1
   19f7c:	f000 fec6 	bl	1ad0c <lv_txt_get_width>
   19f80:	88b3      	ldrh	r3, [r6, #4]
   19f82:	8832      	ldrh	r2, [r6, #0]
   19f84:	3301      	adds	r3, #1
   19f86:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
   19f88:	b21b      	sxth	r3, r3
   19f8a:	1a18      	subs	r0, r3, r0
   19f8c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   19f90:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   19f94:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
   19f98:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
   19f9c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   19fa0:	9309      	str	r3, [sp, #36]	; 0x24
   19fa2:	9b05      	ldr	r3, [sp, #20]
   19fa4:	2bff      	cmp	r3, #255	; 0xff
   19fa6:	d004      	beq.n	19fb2 <lv_draw_label+0x12a>
   19fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19faa:	9a05      	ldr	r2, [sp, #20]
   19fac:	4353      	muls	r3, r2
   19fae:	0a1b      	lsrs	r3, r3, #8
   19fb0:	9309      	str	r3, [sp, #36]	; 0x24
    if(sel) {
   19fb2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   19fb4:	2b00      	cmp	r3, #0
   19fb6:	d073      	beq.n	1a0a0 <lv_draw_label+0x218>
        sel_start = sel->start;
   19fb8:	881b      	ldrh	r3, [r3, #0]
   19fba:	9306      	str	r3, [sp, #24]
        sel_end = sel->end;
   19fbc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   19fbe:	885b      	ldrh	r3, [r3, #2]
   19fc0:	9305      	str	r3, [sp, #20]
        if(sel_start > sel_end) {
   19fc2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   19fc6:	4293      	cmp	r3, r2
   19fc8:	d901      	bls.n	19fce <lv_draw_label+0x146>
   19fca:	e9cd 3205 	strd	r3, r2, [sp, #20]
    lv_style_copy(&sel_style, &lv_style_plain_color);
   19fce:	4999      	ldr	r1, [pc, #612]	; (1a234 <lv_draw_label+0x3ac>)
   19fd0:	a818      	add	r0, sp, #96	; 0x60
   19fd2:	f009 faa5 	bl	23520 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
   19fd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   19fd8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    uint16_t par_start = 0;
   19fdc:	2300      	movs	r3, #0
   19fde:	930d      	str	r3, [sp, #52]	; 0x34
   19fe0:	f00b 0301 	and.w	r3, fp, #1
   19fe4:	9311      	str	r3, [sp, #68]	; 0x44
    while(txt[line_start] != '\0') {
   19fe6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   19fe8:	4423      	add	r3, r4
   19fea:	930c      	str	r3, [sp, #48]	; 0x30
   19fec:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   19fee:	5d1b      	ldrb	r3, [r3, r4]
   19ff0:	2b00      	cmp	r3, #0
   19ff2:	d15a      	bne.n	1a0aa <lv_draw_label+0x222>
}
   19ff4:	b02d      	add	sp, #180	; 0xb4
   19ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
   19ffa:	f647 4318 	movw	r3, #31768	; 0x7c18
   19ffe:	f8cd b008 	str.w	fp, [sp, #8]
   1a002:	9301      	str	r3, [sp, #4]
   1a004:	f9b2 303a 	ldrsh.w	r3, [r2, #58]	; 0x3a
   1a008:	9300      	str	r3, [sp, #0]
   1a00a:	f9b2 3038 	ldrsh.w	r3, [r2, #56]	; 0x38
   1a00e:	9936      	ldr	r1, [sp, #216]	; 0xd8
   1a010:	9a04      	ldr	r2, [sp, #16]
   1a012:	a818      	add	r0, sp, #96	; 0x60
   1a014:	f00a fcdc 	bl	249d0 <lv_txt_get_size>
        w = p.x;
   1a018:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
   1a01c:	e74e      	b.n	19ebc <lv_draw_label+0x34>
    lv_coord_t x_ofs = 0;
   1a01e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1a020:	930e      	str	r3, [sp, #56]	; 0x38
   1a022:	e76c      	b.n	19efe <lv_draw_label+0x76>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   1a024:	eb03 0908 	add.w	r9, r3, r8
   1a028:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
   1a02c:	9b08      	ldr	r3, [sp, #32]
   1a02e:	f8cd b000 	str.w	fp, [sp]
   1a032:	9904      	ldr	r1, [sp, #16]
   1a034:	4648      	mov	r0, r9
   1a036:	f000 feb9 	bl	1adac <lv_txt_get_next_line>
        pos.y += line_height;
   1a03a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   1a03e:	9a07      	ldr	r2, [sp, #28]
   1a040:	4413      	add	r3, r2
   1a042:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   1a044:	4440      	add	r0, r8
        pos.y += line_height;
   1a046:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
   1a04a:	b167      	cbz	r7, 1a066 <lv_draw_label+0x1de>
   1a04c:	f513 6f80 	cmn.w	r3, #1024	; 0x400
   1a050:	db09      	blt.n	1a066 <lv_draw_label+0x1de>
   1a052:	683a      	ldr	r2, [r7, #0]
   1a054:	2a00      	cmp	r2, #0
            hint->y          = pos.y - coords->y1;
   1a056:	bfbf      	itttt	lt
   1a058:	f9b6 2002 	ldrshlt.w	r2, [r6, #2]
            hint->line_start = line_start;
   1a05c:	f8c7 8000 	strlt.w	r8, [r7]
            hint->y          = pos.y - coords->y1;
   1a060:	1a9b      	sublt	r3, r3, r2
            hint->coord_y    = coords->y1;
   1a062:	e9c7 3201 	strdlt	r3, r2, [r7, #4]
        if(txt[line_start] == '\0') return;
   1a066:	f899 3000 	ldrb.w	r3, [r9]
   1a06a:	4644      	mov	r4, r8
   1a06c:	2b00      	cmp	r3, #0
   1a06e:	d0c1      	beq.n	19ff4 <lv_draw_label+0x16c>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   1a070:	4680      	mov	r8, r0
   1a072:	e76b      	b.n	19f4c <lv_draw_label+0xc4>
    else if(flag & LV_TXT_FLAG_RIGHT) {
   1a074:	f01b 0f08 	tst.w	fp, #8
   1a078:	d090      	beq.n	19f9c <lv_draw_label+0x114>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
   1a07a:	eba8 0104 	sub.w	r1, r8, r4
   1a07e:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
   1a082:	9a04      	ldr	r2, [sp, #16]
   1a084:	f8cd b000 	str.w	fp, [sp]
   1a088:	b289      	uxth	r1, r1
   1a08a:	f000 fe3f 	bl	1ad0c <lv_txt_get_width>
        pos.x += lv_area_get_width(coords) - line_width;
   1a08e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   1a092:	88b2      	ldrh	r2, [r6, #4]
   1a094:	3301      	adds	r3, #1
   1a096:	4413      	add	r3, r2
   1a098:	8832      	ldrh	r2, [r6, #0]
   1a09a:	1a9b      	subs	r3, r3, r2
   1a09c:	1a18      	subs	r0, r3, r0
   1a09e:	e77b      	b.n	19f98 <lv_draw_label+0x110>
    uint16_t sel_end = 0xFFFF;
   1a0a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    uint16_t sel_start = 0xFFFF;
   1a0a4:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1a0a8:	e791      	b.n	19fce <lv_draw_label+0x146>
        if(offset != NULL) {
   1a0aa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1a0ac:	b12b      	cbz	r3, 1a0ba <lv_draw_label+0x232>
            pos.x += x_ofs;
   1a0ae:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   1a0b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a0b4:	4413      	add	r3, r2
   1a0b6:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        i         = 0;
   1a0ba:	2700      	movs	r7, #0
   1a0bc:	9715      	str	r7, [sp, #84]	; 0x54
        while(i < line_end - line_start) {
   1a0be:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a0c0:	eba8 0304 	sub.w	r3, r8, r4
   1a0c4:	428b      	cmp	r3, r1
   1a0c6:	d83b      	bhi.n	1a140 <lv_draw_label+0x2b8>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   1a0c8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1a0ca:	9904      	ldr	r1, [sp, #16]
   1a0cc:	f8cd b000 	str.w	fp, [sp]
   1a0d0:	eb03 0408 	add.w	r4, r3, r8
   1a0d4:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
   1a0d8:	9b08      	ldr	r3, [sp, #32]
   1a0da:	4620      	mov	r0, r4
   1a0dc:	f000 fe66 	bl	1adac <lv_txt_get_next_line>
        pos.x = coords->x1;
   1a0e0:	8833      	ldrh	r3, [r6, #0]
   1a0e2:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        if(flag & LV_TXT_FLAG_CENTER) {
   1a0e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   1a0e8:	4601      	mov	r1, r0
   1a0ea:	eb00 0708 	add.w	r7, r0, r8
        if(flag & LV_TXT_FLAG_CENTER) {
   1a0ee:	2b00      	cmp	r3, #0
   1a0f0:	f000 80ef 	beq.w	1a2d2 <lv_draw_label+0x44a>
                    lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
   1a0f4:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
   1a0f8:	9a04      	ldr	r2, [sp, #16]
   1a0fa:	f8cd b000 	str.w	fp, [sp]
   1a0fe:	4620      	mov	r0, r4
   1a100:	f000 fe04 	bl	1ad0c <lv_txt_get_width>
   1a104:	88b3      	ldrh	r3, [r6, #4]
   1a106:	8832      	ldrh	r2, [r6, #0]
   1a108:	3301      	adds	r3, #1
   1a10a:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
   1a10c:	b21b      	sxth	r3, r3
   1a10e:	1a18      	subs	r0, r3, r0
   1a110:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   1a114:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1a118:	eb03 0060 	add.w	r0, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
   1a11c:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
        pos.y += line_height;
   1a120:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   1a124:	9a07      	ldr	r2, [sp, #28]
   1a126:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
   1a128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a12a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
   1a12e:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
   1a130:	429a      	cmp	r2, r3
        pos.y += line_height;
   1a132:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        line_start = line_end;
   1a136:	4644      	mov	r4, r8
        if(pos.y > mask->y2) return;
   1a138:	f6ff af5c 	blt.w	19ff4 <lv_draw_label+0x16c>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   1a13c:	46b8      	mov	r8, r7
   1a13e:	e752      	b.n	19fe6 <lv_draw_label+0x15e>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1a140:	9a06      	ldr	r2, [sp, #24]
   1a142:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a146:	429a      	cmp	r2, r3
   1a148:	d026      	beq.n	1a198 <lv_draw_label+0x310>
   1a14a:	9a05      	ldr	r2, [sp, #20]
   1a14c:	429a      	cmp	r2, r3
   1a14e:	d023      	beq.n	1a198 <lv_draw_label+0x310>
                logical_char_pos = lv_txt_encoded_get_char_id(txt, line_start + i);
   1a150:	4b39      	ldr	r3, [pc, #228]	; (1a238 <lv_draw_label+0x3b0>)
   1a152:	9836      	ldr	r0, [sp, #216]	; 0xd8
   1a154:	681b      	ldr	r3, [r3, #0]
   1a156:	4421      	add	r1, r4
   1a158:	4798      	blx	r3
   1a15a:	b283      	uxth	r3, r0
            letter      = lv_txt_encoded_next(bidi_txt, &i);
   1a15c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1a23c <lv_draw_label+0x3b4>
   1a160:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a162:	f8d9 2000 	ldr.w	r2, [r9]
   1a166:	9310      	str	r3, [sp, #64]	; 0x40
   1a168:	a915      	add	r1, sp, #84	; 0x54
   1a16a:	4790      	blx	r2
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   1a16c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            letter      = lv_txt_encoded_next(bidi_txt, &i);
   1a16e:	900a      	str	r0, [sp, #40]	; 0x28
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   1a170:	9815      	ldr	r0, [sp, #84]	; 0x54
   1a172:	f8d9 2000 	ldr.w	r2, [r9]
   1a176:	2100      	movs	r1, #0
   1a178:	4418      	add	r0, r3
   1a17a:	4790      	blx	r2
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1a17c:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   1a180:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1a182:	2900      	cmp	r1, #0
   1a184:	d051      	beq.n	1a22a <lv_draw_label+0x3a2>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   1a186:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a188:	2923      	cmp	r1, #35	; 0x23
   1a18a:	d10d      	bne.n	1a1a8 <lv_draw_label+0x320>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
   1a18c:	b937      	cbnz	r7, 1a19c <lv_draw_label+0x314>
                        par_start = i;
   1a18e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   1a192:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_PAR;
   1a194:	9f11      	ldr	r7, [sp, #68]	; 0x44
                        continue;
   1a196:	e792      	b.n	1a0be <lv_draw_label+0x236>
            uint16_t logical_char_pos = 0;
   1a198:	2300      	movs	r3, #0
   1a19a:	e7df      	b.n	1a15c <lv_draw_label+0x2d4>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
   1a19c:	2f01      	cmp	r7, #1
   1a19e:	d04f      	beq.n	1a240 <lv_draw_label+0x3b8>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
   1a1a0:	2f02      	cmp	r7, #2
   1a1a2:	d14e      	bne.n	1a242 <lv_draw_label+0x3ba>
                        cmd_state = CMD_STATE_WAIT;
   1a1a4:	2700      	movs	r7, #0
   1a1a6:	e78a      	b.n	1a0be <lv_draw_label+0x236>
                if(cmd_state == CMD_STATE_PAR) {
   1a1a8:	2f01      	cmp	r7, #1
   1a1aa:	d13e      	bne.n	1a22a <lv_draw_label+0x3a2>
                    if(letter == ' ') {
   1a1ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a1ae:	2b20      	cmp	r3, #32
   1a1b0:	d185      	bne.n	1a0be <lv_draw_label+0x236>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
   1a1b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a1b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a1b6:	1a9b      	subs	r3, r3, r2
   1a1b8:	2b07      	cmp	r3, #7
   1a1ba:	d133      	bne.n	1a224 <lv_draw_label+0x39c>
                            memcpy(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
   1a1bc:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
   1a1c0:	2206      	movs	r2, #6
   1a1c2:	1859      	adds	r1, r3, r1
   1a1c4:	a816      	add	r0, sp, #88	; 0x58
   1a1c6:	f005 fa17 	bl	1f5f8 <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
   1a1ca:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
   1a1ce:	f7ff fe47 	bl	19e60 <hex_char_to_num>
   1a1d2:	4601      	mov	r1, r0
   1a1d4:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
   1a1d8:	f7ff fe42 	bl	19e60 <hex_char_to_num>
   1a1dc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
   1a1e0:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   1a1e4:	f7ff fe3c 	bl	19e60 <hex_char_to_num>
   1a1e8:	4607      	mov	r7, r0
   1a1ea:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   1a1ee:	f7ff fe37 	bl	19e60 <hex_char_to_num>
   1a1f2:	eb00 1707 	add.w	r7, r0, r7, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
   1a1f6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
   1a1fa:	f7ff fe31 	bl	19e60 <hex_char_to_num>
   1a1fe:	4681      	mov	r9, r0
   1a200:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   1a204:	f7ff fe2c 	bl	19e60 <hex_char_to_num>
   1a208:	eb00 1009 	add.w	r0, r0, r9, lsl #4
   1a20c:	f360 0a07 	bfi	sl, r0, #0, #8
   1a210:	f367 2a0f 	bfi	sl, r7, #8, #8
   1a214:	f361 4a17 	bfi	sl, r1, #16, #8
   1a218:	f04a 4a7f 	orr.w	sl, sl, #4278190080	; 0xff000000
   1a21c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
   1a220:	2702      	movs	r7, #2
   1a222:	e74c      	b.n	1a0be <lv_draw_label+0x236>
                            recolor.full = style->text.color.full;
   1a224:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1a226:	930f      	str	r3, [sp, #60]	; 0x3c
   1a228:	e7fa      	b.n	1a220 <lv_draw_label+0x398>
            if(cmd_state == CMD_STATE_IN) color = recolor;
   1a22a:	2f02      	cmp	r7, #2
   1a22c:	d109      	bne.n	1a242 <lv_draw_label+0x3ba>
   1a22e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1a230:	e008      	b.n	1a244 <lv_draw_label+0x3bc>
   1a232:	bf00      	nop
   1a234:	20001b8c 	.word	0x20001b8c
   1a238:	2000e384 	.word	0x2000e384
   1a23c:	2000e388 	.word	0x2000e388
                        cmd_state = CMD_STATE_WAIT;
   1a240:	2700      	movs	r7, #0
            lv_color_t color = style->text.color;
   1a242:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
            if(cmd_state == CMD_STATE_IN) color = recolor;
   1a244:	9110      	str	r1, [sp, #64]	; 0x40
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1a246:	9804      	ldr	r0, [sp, #16]
   1a248:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a24a:	9313      	str	r3, [sp, #76]	; 0x4c
   1a24c:	f00a fe36 	bl	24ebc <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1a250:	9b06      	ldr	r3, [sp, #24]
   1a252:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a256:	4293      	cmp	r3, r2
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1a258:	fa0f f980 	sxth.w	r9, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1a25c:	d023      	beq.n	1a2a6 <lv_draw_label+0x41e>
   1a25e:	9b05      	ldr	r3, [sp, #20]
   1a260:	4293      	cmp	r3, r2
   1a262:	d020      	beq.n	1a2a6 <lv_draw_label+0x41e>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
   1a264:	9b06      	ldr	r3, [sp, #24]
   1a266:	461a      	mov	r2, r3
   1a268:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a26a:	429a      	cmp	r2, r3
   1a26c:	d81b      	bhi.n	1a2a6 <lv_draw_label+0x41e>
   1a26e:	9a05      	ldr	r2, [sp, #20]
   1a270:	429a      	cmp	r2, r3
   1a272:	d918      	bls.n	1a2a6 <lv_draw_label+0x41e>
                    sel_coords.x1 = pos.x;
   1a274:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
   1a278:	8f29      	ldrh	r1, [r5, #56]	; 0x38
                    sel_coords.x1 = pos.x;
   1a27a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
   1a27e:	3b01      	subs	r3, #1
   1a280:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
   1a282:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
   1a286:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
   1a28a:	444b      	add	r3, r9
   1a28c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    sel_coords.y2 = pos.y + line_height - 1;
   1a290:	9b07      	ldr	r3, [sp, #28]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
   1a292:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    sel_coords.y2 = pos.y + line_height - 1;
   1a294:	3a01      	subs	r2, #1
   1a296:	441a      	add	r2, r3
   1a298:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
   1a29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a29e:	aa18      	add	r2, sp, #96	; 0x60
   1a2a0:	a816      	add	r0, sp, #88	; 0x58
   1a2a2:	f009 fa71 	bl	23788 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
   1a2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a2a8:	9301      	str	r3, [sp, #4]
   1a2aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a2ac:	9300      	str	r3, [sp, #0]
   1a2ae:	9a04      	ldr	r2, [sp, #16]
   1a2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a2b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a2b4:	a814      	add	r0, sp, #80	; 0x50
   1a2b6:	f7ff fb67 	bl	19988 <lv_draw_letter>
            if(letter_w > 0) {
   1a2ba:	f1b9 0f00 	cmp.w	r9, #0
   1a2be:	f77f aefe 	ble.w	1a0be <lv_draw_label+0x236>
                pos.x += letter_w + style->text.letter_space;
   1a2c2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   1a2c6:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
   1a2c8:	4413      	add	r3, r2
   1a2ca:	4499      	add	r9, r3
   1a2cc:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
   1a2d0:	e6f5      	b.n	1a0be <lv_draw_label+0x236>
        else if(flag & LV_TXT_FLAG_RIGHT) {
   1a2d2:	f01b 0f08 	tst.w	fp, #8
   1a2d6:	f43f af23 	beq.w	1a120 <lv_draw_label+0x298>
                    lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
   1a2da:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
   1a2de:	9a04      	ldr	r2, [sp, #16]
   1a2e0:	f8cd b000 	str.w	fp, [sp]
   1a2e4:	4620      	mov	r0, r4
   1a2e6:	f000 fd11 	bl	1ad0c <lv_txt_get_width>
            pos.x += lv_area_get_width(coords) - line_width;
   1a2ea:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   1a2ee:	88b2      	ldrh	r2, [r6, #4]
   1a2f0:	3301      	adds	r3, #1
   1a2f2:	4413      	add	r3, r2
   1a2f4:	8832      	ldrh	r2, [r6, #0]
   1a2f6:	1a9b      	subs	r3, r3, r2
   1a2f8:	1a18      	subs	r0, r3, r0
   1a2fa:	e70f      	b.n	1a11c <lv_draw_label+0x294>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
   1a2fc:	2f00      	cmp	r7, #0
   1a2fe:	f47f ae8e 	bne.w	1a01e <lv_draw_label+0x196>
    lv_coord_t x_ofs = 0;
   1a302:	970e      	str	r7, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
   1a304:	2400      	movs	r4, #0
   1a306:	e615      	b.n	19f34 <lv_draw_label+0xac>

0001a308 <lv_img_color_format_get_px_size>:
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
    uint8_t px_size = 0;

    switch(cf) {
   1a308:	3804      	subs	r0, #4
   1a30a:	b2c0      	uxtb	r0, r0
   1a30c:	280a      	cmp	r0, #10
   1a30e:	bf9a      	itte	ls
   1a310:	4b01      	ldrls	r3, [pc, #4]	; (1a318 <lv_img_color_format_get_px_size+0x10>)
   1a312:	5c18      	ldrbls	r0, [r3, r0]
{
   1a314:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
   1a316:	4770      	bx	lr
   1a318:	00029f2d 	.word	0x00029f2d

0001a31c <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
   1a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1a320:	7b0a      	ldrb	r2, [r1, #12]
   1a322:	2a01      	cmp	r2, #1
{
   1a324:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1a326:	d108      	bne.n	1a33a <lv_img_decoder_built_in_open+0x1e>
        }

        memcpy(user_data->f, &f, sizeof(f));

#else
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   1a328:	4b3b      	ldr	r3, [pc, #236]	; (1a418 <lv_img_decoder_built_in_open+0xfc>)
   1a32a:	f240 1261 	movw	r2, #353	; 0x161
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);

        LV_LOG_WARN("Image decoder open: unknown color format")
   1a32e:	2002      	movs	r0, #2
   1a330:	493a      	ldr	r1, [pc, #232]	; (1a41c <lv_img_decoder_built_in_open+0x100>)
   1a332:	f000 fe37 	bl	1afa4 <lv_log_add>
        return LV_RES_INV;
   1a336:	2000      	movs	r0, #0
   1a338:	e00b      	b.n	1a352 <lv_img_decoder_built_in_open+0x36>
    lv_img_cf_t cf = dsc->header.cf;
   1a33a:	7c0b      	ldrb	r3, [r1, #16]
   1a33c:	f003 031f 	and.w	r3, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   1a340:	1f1d      	subs	r5, r3, #4
   1a342:	2d02      	cmp	r5, #2
   1a344:	d807      	bhi.n	1a356 <lv_img_decoder_built_in_open+0x3a>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1a346:	2a00      	cmp	r2, #0
   1a348:	d144      	bne.n	1a3d4 <lv_img_decoder_built_in_open+0xb8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
   1a34a:	684b      	ldr	r3, [r1, #4]
   1a34c:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
   1a34e:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
   1a350:	2001      	movs	r0, #1
    }
}
   1a352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
   1a356:	1fda      	subs	r2, r3, #7
   1a358:	2a03      	cmp	r2, #3
   1a35a:	d853      	bhi.n	1a404 <lv_img_decoder_built_in_open+0xe8>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
   1a35c:	4618      	mov	r0, r3
   1a35e:	f7ff ffd3 	bl	1a308 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
   1a362:	6a23      	ldr	r3, [r4, #32]
        uint32_t palette_size = 1 << px_size;
   1a364:	2601      	movs	r6, #1
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
   1a366:	4607      	mov	r7, r0
        uint32_t palette_size = 1 << px_size;
   1a368:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
   1a36a:	b983      	cbnz	r3, 1a38e <lv_img_decoder_built_in_open+0x72>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
   1a36c:	2008      	movs	r0, #8
   1a36e:	f000 fc57 	bl	1ac20 <lv_mem_alloc>
   1a372:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
   1a374:	b930      	cbnz	r0, 1a384 <lv_img_decoder_built_in_open+0x68>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   1a376:	4b2a      	ldr	r3, [pc, #168]	; (1a420 <lv_img_decoder_built_in_open+0x104>)
   1a378:	4928      	ldr	r1, [pc, #160]	; (1a41c <lv_img_decoder_built_in_open+0x100>)
   1a37a:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1a37e:	2003      	movs	r0, #3
   1a380:	f000 fe10 	bl	1afa4 <lv_log_add>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
   1a384:	2208      	movs	r2, #8
   1a386:	2100      	movs	r1, #0
   1a388:	6a20      	ldr	r0, [r4, #32]
   1a38a:	f005 f95f 	bl	1f64c <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   1a38e:	2004      	movs	r0, #4
   1a390:	40b8      	lsls	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1a392:	6a25      	ldr	r5, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   1a394:	f000 fc44 	bl	1ac20 <lv_mem_alloc>
   1a398:	6028      	str	r0, [r5, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   1a39a:	4630      	mov	r0, r6
   1a39c:	f000 fc40 	bl	1ac20 <lv_mem_alloc>
        if(user_data->palette == NULL || user_data->opa == NULL) {
   1a3a0:	682b      	ldr	r3, [r5, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   1a3a2:	6068      	str	r0, [r5, #4]
        if(user_data->palette == NULL || user_data->opa == NULL) {
   1a3a4:	b103      	cbz	r3, 1a3a8 <lv_img_decoder_built_in_open+0x8c>
   1a3a6:	b930      	cbnz	r0, 1a3b6 <lv_img_decoder_built_in_open+0x9a>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   1a3a8:	4b1d      	ldr	r3, [pc, #116]	; (1a420 <lv_img_decoder_built_in_open+0x104>)
   1a3aa:	491c      	ldr	r1, [pc, #112]	; (1a41c <lv_img_decoder_built_in_open+0x100>)
   1a3ac:	f44f 72c5 	mov.w	r2, #394	; 0x18a
   1a3b0:	2003      	movs	r0, #3
   1a3b2:	f000 fdf7 	bl	1afa4 <lv_log_add>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   1a3b6:	7b23      	ldrb	r3, [r4, #12]
   1a3b8:	2b01      	cmp	r3, #1
   1a3ba:	d103      	bne.n	1a3c4 <lv_img_decoder_built_in_open+0xa8>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
   1a3bc:	4b19      	ldr	r3, [pc, #100]	; (1a424 <lv_img_decoder_built_in_open+0x108>)
   1a3be:	f44f 72ce 	mov.w	r2, #412	; 0x19c
   1a3c2:	e7b4      	b.n	1a32e <lv_img_decoder_built_in_open+0x12>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
   1a3c4:	6863      	ldr	r3, [r4, #4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   1a3c6:	27ff      	movs	r7, #255	; 0xff
   1a3c8:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
   1a3ca:	2300      	movs	r3, #0
   1a3cc:	42b3      	cmp	r3, r6
   1a3ce:	f102 0204 	add.w	r2, r2, #4
   1a3d2:	d101      	bne.n	1a3d8 <lv_img_decoder_built_in_open+0xbc>
            dsc->img_data = NULL;
   1a3d4:	2300      	movs	r3, #0
   1a3d6:	e7ba      	b.n	1a34e <lv_img_decoder_built_in_open+0x32>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   1a3d8:	6828      	ldr	r0, [r5, #0]
   1a3da:	f812 8c04 	ldrb.w	r8, [r2, #-4]
   1a3de:	f812 cc02 	ldrb.w	ip, [r2, #-2]
   1a3e2:	f812 ec03 	ldrb.w	lr, [r2, #-3]
   1a3e6:	f800 8023 	strb.w	r8, [r0, r3, lsl #2]
   1a3ea:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   1a3ee:	f881 e001 	strb.w	lr, [r1, #1]
   1a3f2:	f881 c002 	strb.w	ip, [r1, #2]
   1a3f6:	70cf      	strb	r7, [r1, #3]
                user_data->opa[i]     = palette_p[i].ch.alpha;
   1a3f8:	6869      	ldr	r1, [r5, #4]
   1a3fa:	f812 0c01 	ldrb.w	r0, [r2, #-1]
   1a3fe:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
   1a400:	3301      	adds	r3, #1
   1a402:	e7e3      	b.n	1a3cc <lv_img_decoder_built_in_open+0xb0>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
   1a404:	3b0b      	subs	r3, #11
   1a406:	2b03      	cmp	r3, #3
   1a408:	d9e4      	bls.n	1a3d4 <lv_img_decoder_built_in_open+0xb8>
        lv_img_decoder_built_in_close(decoder, dsc);
   1a40a:	f00a f835 	bl	24478 <lv_img_decoder_built_in_close>
        LV_LOG_WARN("Image decoder open: unknown color format")
   1a40e:	4b06      	ldr	r3, [pc, #24]	; (1a428 <lv_img_decoder_built_in_open+0x10c>)
   1a410:	f240 12c1 	movw	r2, #449	; 0x1c1
   1a414:	e78b      	b.n	1a32e <lv_img_decoder_built_in_open+0x12>
   1a416:	bf00      	nop
   1a418:	00029f5e 	.word	0x00029f5e
   1a41c:	00029fa4 	.word	0x00029fa4
   1a420:	00029fe1 	.word	0x00029fe1
   1a424:	0002a00a 	.word	0x0002a00a
   1a428:	0002a054 	.word	0x0002a054

0001a42c <lv_img_decoder_built_in_info>:
{
   1a42c:	b538      	push	{r3, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
   1a42e:	4608      	mov	r0, r1
{
   1a430:	460d      	mov	r5, r1
   1a432:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
   1a434:	f00a f810 	bl	24458 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
   1a438:	b9c0      	cbnz	r0, 1a46c <lv_img_decoder_built_in_info+0x40>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   1a43a:	782b      	ldrb	r3, [r5, #0]
   1a43c:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
   1a440:	3b04      	subs	r3, #4
   1a442:	b2db      	uxtb	r3, r3
   1a444:	2b0a      	cmp	r3, #10
   1a446:	d810      	bhi.n	1a46a <lv_img_decoder_built_in_info+0x3e>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   1a448:	886b      	ldrh	r3, [r5, #2]
   1a44a:	8862      	ldrh	r2, [r4, #2]
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   1a44c:	6829      	ldr	r1, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   1a44e:	095b      	lsrs	r3, r3, #5
   1a450:	f363 124f 	bfi	r2, r3, #5, #11
   1a454:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
   1a456:	6823      	ldr	r3, [r4, #0]
   1a458:	4a0c      	ldr	r2, [pc, #48]	; (1a48c <lv_img_decoder_built_in_info+0x60>)
   1a45a:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
   1a45e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
   1a462:	400a      	ands	r2, r1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   1a464:	4313      	orrs	r3, r2
   1a466:	6023      	str	r3, [r4, #0]
    return LV_RES_OK;
   1a468:	2001      	movs	r0, #1
}
   1a46a:	bd38      	pop	{r3, r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
   1a46c:	2802      	cmp	r0, #2
   1a46e:	d104      	bne.n	1a47a <lv_img_decoder_built_in_info+0x4e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   1a470:	6823      	ldr	r3, [r4, #0]
   1a472:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
   1a476:	4b06      	ldr	r3, [pc, #24]	; (1a490 <lv_img_decoder_built_in_info+0x64>)
   1a478:	e7f4      	b.n	1a464 <lv_img_decoder_built_in_info+0x38>
        LV_LOG_WARN("Image get info found unknown src type");
   1a47a:	2002      	movs	r0, #2
   1a47c:	4b05      	ldr	r3, [pc, #20]	; (1a494 <lv_img_decoder_built_in_info+0x68>)
   1a47e:	4906      	ldr	r1, [pc, #24]	; (1a498 <lv_img_decoder_built_in_info+0x6c>)
   1a480:	f240 1231 	movw	r2, #305	; 0x131
   1a484:	f000 fd8e 	bl	1afa4 <lv_log_add>
   1a488:	2000      	movs	r0, #0
   1a48a:	e7ee      	b.n	1a46a <lv_img_decoder_built_in_info+0x3e>
   1a48c:	001ffc1f 	.word	0x001ffc1f
   1a490:	0020040b 	.word	0x0020040b
   1a494:	00029f38 	.word	0x00029f38
   1a498:	00029fa4 	.word	0x00029fa4

0001a49c <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
   1a49c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1a4a0:	7c08      	ldrb	r0, [r1, #16]
{
   1a4a2:	b087      	sub	sp, #28
   1a4a4:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1a4a6:	f000 031e 	and.w	r3, r0, #30
   1a4aa:	2b04      	cmp	r3, #4
{
   1a4ac:	460d      	mov	r5, r1
   1a4ae:	4614      	mov	r4, r2
   1a4b0:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
   1a4b4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1a4b8:	d003      	beq.n	1a4c2 <lv_img_decoder_built_in_read_line+0x26>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   1a4ba:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1a4be:	2b06      	cmp	r3, #6
   1a4c0:	d10b      	bne.n	1a4da <lv_img_decoder_built_in_read_line+0x3e>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   1a4c2:	7b2b      	ldrb	r3, [r5, #12]
   1a4c4:	2b01      	cmp	r3, #1
   1a4c6:	d106      	bne.n	1a4d6 <lv_img_decoder_built_in_read_line+0x3a>
        return LV_RES_INV;
    }

    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   1a4c8:	4b9d      	ldr	r3, [pc, #628]	; (1a740 <lv_img_decoder_built_in_read_line+0x2a4>)
   1a4ca:	f240 2225 	movw	r2, #549	; 0x225
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   1a4ce:	499d      	ldr	r1, [pc, #628]	; (1a744 <lv_img_decoder_built_in_read_line+0x2a8>)
   1a4d0:	2002      	movs	r0, #2
   1a4d2:	f000 fd67 	bl	1afa4 <lv_log_add>
    lv_res_t res = LV_RES_INV;
   1a4d6:	2000      	movs	r0, #0
   1a4d8:	e05c      	b.n	1a594 <lv_img_decoder_built_in_read_line+0xf8>
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
   1a4da:	f1a3 020b 	sub.w	r2, r3, #11
   1a4de:	2a03      	cmp	r2, #3
   1a4e0:	f200 80a7 	bhi.w	1a632 <lv_img_decoder_built_in_read_line+0x196>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   1a4e4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   1a4e8:	f8ad 3000 	strh.w	r3, [sp]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   1a4ec:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
   1a4f0:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
   1a4f4:	9301      	str	r3, [sp, #4]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   1a4f6:	4b94      	ldr	r3, [pc, #592]	; (1a748 <lv_img_decoder_built_in_read_line+0x2ac>)
   1a4f8:	aa02      	add	r2, sp, #8
   1a4fa:	f103 0e10 	add.w	lr, r3, #16
   1a4fe:	4691      	mov	r9, r2
   1a500:	6818      	ldr	r0, [r3, #0]
   1a502:	6859      	ldr	r1, [r3, #4]
   1a504:	4694      	mov	ip, r2
   1a506:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1a50a:	3308      	adds	r3, #8
   1a50c:	4573      	cmp	r3, lr
   1a50e:	4662      	mov	r2, ip
   1a510:	d1f6      	bne.n	1a500 <lv_img_decoder_built_in_read_line+0x64>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
   1a512:	68ab      	ldr	r3, [r5, #8]
   1a514:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1a516:	2300      	movs	r3, #0
    lv_coord_t i;
    for(i = 0; i < len; i++) {
   1a518:	b21a      	sxth	r2, r3
   1a51a:	4297      	cmp	r7, r2
   1a51c:	dc16      	bgt.n	1a54c <lv_img_decoder_built_in_read_line+0xb0>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
   1a51e:	7c28      	ldrb	r0, [r5, #16]
   1a520:	f000 001f 	and.w	r0, r0, #31
   1a524:	f7ff fef0 	bl	1a308 <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
   1a528:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1a52a:	f04f 0c01 	mov.w	ip, #1
   1a52e:	fa0c fc00 	lsl.w	ip, ip, r0
    switch(dsc->header.cf) {
   1a532:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1a536:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    switch(dsc->header.cf) {
   1a53a:	3b0b      	subs	r3, #11
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1a53c:	fa1f fc8c 	uxth.w	ip, ip
    switch(dsc->header.cf) {
   1a540:	2b03      	cmp	r3, #3
   1a542:	d856      	bhi.n	1a5f2 <lv_img_decoder_built_in_read_line+0x156>
   1a544:	e8df f003 	tbb	[pc, r3]
   1a548:	4d3b2906 	.word	0x4d3b2906
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
   1a54c:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   1a550:	3301      	adds	r3, #1
   1a552:	e7e1      	b.n	1a518 <lv_img_decoder_built_in_read_line+0x7c>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   1a554:	6929      	ldr	r1, [r5, #16]
   1a556:	f3c1 218a 	ubfx	r1, r1, #10, #11
   1a55a:	08cb      	lsrs	r3, r1, #3
            if(dsc->header.w & 0x7) w++;
   1a55c:	0749      	lsls	r1, r1, #29
            ofs += w * y + (x >> 3); /*First pixel*/
   1a55e:	ea4f 02e4 	mov.w	r2, r4, asr #3
            if(dsc->header.w & 0x7) w++;
   1a562:	bf18      	it	ne
   1a564:	3301      	addne	r3, #1
            pos       = 7 - (x & 0x7);
   1a566:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
   1a568:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
   1a56c:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
   1a570:	466e      	mov	r6, sp
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1a572:	7b29      	ldrb	r1, [r5, #12]
   1a574:	2900      	cmp	r1, #0
   1a576:	d13f      	bne.n	1a5f8 <lv_img_decoder_built_in_read_line+0x15c>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
   1a578:	686a      	ldr	r2, [r5, #4]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
   1a57a:	b240      	sxtb	r0, r0
        data_tmp = img_dsc->data + ofs;
   1a57c:	6892      	ldr	r2, [r2, #8]
        if(pos < 0) {
            pos = 8 - px_size;
   1a57e:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp = img_dsc->data + ofs;
   1a582:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1a584:	f108 0803 	add.w	r8, r8, #3
            pos = 8 - px_size;
   1a588:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   1a58c:	b20a      	sxth	r2, r1
   1a58e:	4297      	cmp	r7, r2
   1a590:	dc36      	bgt.n	1a600 <lv_img_decoder_built_in_read_line+0x164>
            pos = 8 - px_size;
            data_tmp++;
        }
    }

    return LV_RES_OK;
   1a592:	2001      	movs	r0, #1
}
   1a594:	b007      	add	sp, #28
   1a596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   1a59a:	6929      	ldr	r1, [r5, #16]
   1a59c:	f3c1 218a 	ubfx	r1, r1, #10, #11
   1a5a0:	088b      	lsrs	r3, r1, #2
            if(dsc->header.w & 0x3) w++;
   1a5a2:	078a      	lsls	r2, r1, #30
            ofs += w * y + (x >> 2); /*First pixel*/
   1a5a4:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
   1a5a8:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x3) w++;
   1a5ac:	bf18      	it	ne
   1a5ae:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
   1a5b0:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
   1a5b4:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
   1a5b8:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
   1a5ba:	ae01      	add	r6, sp, #4
   1a5bc:	e7d9      	b.n	1a572 <lv_img_decoder_built_in_read_line+0xd6>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   1a5be:	692b      	ldr	r3, [r5, #16]
   1a5c0:	f3c3 218a 	ubfx	r1, r3, #10, #11
   1a5c4:	084b      	lsrs	r3, r1, #1
            if(dsc->header.w & 0x1) w++;
   1a5c6:	07c9      	lsls	r1, r1, #31
            ofs += w * y + (x >> 1); /*First pixel*/
   1a5c8:	ea4f 0264 	mov.w	r2, r4, asr #1
            if(dsc->header.w & 0x1) w++;
   1a5cc:	bf48      	it	mi
   1a5ce:	3301      	addmi	r3, #1
            pos       = 4 - ((x & 0x1) * 4);
   1a5d0:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1a5d4:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
   1a5d8:	bf0c      	ite	eq
   1a5da:	2404      	moveq	r4, #4
   1a5dc:	2400      	movne	r4, #0
   1a5de:	464e      	mov	r6, r9
   1a5e0:	e7c7      	b.n	1a572 <lv_img_decoder_built_in_read_line+0xd6>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   1a5e2:	692b      	ldr	r3, [r5, #16]
   1a5e4:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   1a5e8:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
   1a5ec:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
   1a5ee:	4626      	mov	r6, r4
   1a5f0:	e7bf      	b.n	1a572 <lv_img_decoder_built_in_read_line+0xd6>
    int8_t pos   = 0;
   1a5f2:	2400      	movs	r4, #0
    uint32_t ofs = 0;
   1a5f4:	4623      	mov	r3, r4
   1a5f6:	e7fa      	b.n	1a5ee <lv_img_decoder_built_in_read_line+0x152>
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
   1a5f8:	4b54      	ldr	r3, [pc, #336]	; (1a74c <lv_img_decoder_built_in_read_line+0x2b0>)
   1a5fa:	f240 2279 	movw	r2, #633	; 0x279
   1a5fe:	e766      	b.n	1a4ce <lv_img_decoder_built_in_read_line+0x32>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
   1a600:	781a      	ldrb	r2, [r3, #0]
   1a602:	fa0c f904 	lsl.w	r9, ip, r4
   1a606:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
   1a60a:	f895 9010 	ldrb.w	r9, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
   1a60e:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1a610:	b2d2      	uxtb	r2, r2
   1a612:	f009 091f 	and.w	r9, r9, #31
        pos -= px_size;
   1a616:	1a24      	subs	r4, r4, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1a618:	f1b9 0f0e 	cmp.w	r9, #14
        pos -= px_size;
   1a61c:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1a61e:	bf18      	it	ne
   1a620:	5cb2      	ldrbne	r2, [r6, r2]
   1a622:	f808 2021 	strb.w	r2, [r8, r1, lsl #2]
        if(pos < 0) {
   1a626:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
   1a628:	bfbc      	itt	lt
   1a62a:	4674      	movlt	r4, lr
            data_tmp++;
   1a62c:	3301      	addlt	r3, #1
   1a62e:	3101      	adds	r1, #1
   1a630:	e7ac      	b.n	1a58c <lv_img_decoder_built_in_read_line+0xf0>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
   1a632:	3b07      	subs	r3, #7
   1a634:	2b03      	cmp	r3, #3
   1a636:	d87f      	bhi.n	1a738 <lv_img_decoder_built_in_read_line+0x29c>
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
   1a638:	f000 001f 	and.w	r0, r0, #31
   1a63c:	f7ff fe64 	bl	1a308 <lv_img_color_format_get_px_size>
    switch(dsc->header.cf) {
   1a640:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1a642:	f04f 0c01 	mov.w	ip, #1
   1a646:	fa0c fc00 	lsl.w	ip, ip, r0
    switch(dsc->header.cf) {
   1a64a:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1a64e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    switch(dsc->header.cf) {
   1a652:	3b07      	subs	r3, #7
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1a654:	fa1f fc8c 	uxth.w	ip, ip
    switch(dsc->header.cf) {
   1a658:	2b03      	cmp	r3, #3
   1a65a:	d866      	bhi.n	1a72a <lv_img_decoder_built_in_read_line+0x28e>
   1a65c:	e8df f003 	tbb	[pc, r3]
   1a660:	5c4a3a02 	.word	0x5c4a3a02
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   1a664:	692a      	ldr	r2, [r5, #16]
   1a666:	f3c2 228a 	ubfx	r2, r2, #10, #11
   1a66a:	08d3      	lsrs	r3, r2, #3
            if(dsc->header.w & 0x7) w++;
   1a66c:	0752      	lsls	r2, r2, #29
   1a66e:	bf18      	it	ne
   1a670:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   1a672:	10e2      	asrs	r2, r4, #3
   1a674:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
   1a678:	43e2      	mvns	r2, r4
            ofs += 8;                /*Skip the palette*/
   1a67a:	3308      	adds	r3, #8
            pos = 7 - (x & 0x7);
   1a67c:	f002 0207 	and.w	r2, r2, #7
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1a680:	7b29      	ldrb	r1, [r5, #12]
   1a682:	2900      	cmp	r1, #0
   1a684:	d154      	bne.n	1a730 <lv_img_decoder_built_in_read_line+0x294>
        data_tmp                     = img_dsc->data + ofs;
   1a686:	686c      	ldr	r4, [r5, #4]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1a688:	6a2e      	ldr	r6, [r5, #32]
        data_tmp                     = img_dsc->data + ofs;
   1a68a:	68a4      	ldr	r4, [r4, #8]
        pos -= px_size;
   1a68c:	b240      	sxtb	r0, r0
            pos = 8 - px_size;
   1a68e:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp                     = img_dsc->data + ofs;
   1a692:	4423      	add	r3, r4
    for(i = 0; i < len; i++) {
   1a694:	f1a8 0804 	sub.w	r8, r8, #4
        data_tmp                     = img_dsc->data + ofs;
   1a698:	460d      	mov	r5, r1
            pos = 8 - px_size;
   1a69a:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   1a69e:	b229      	sxth	r1, r5
   1a6a0:	428f      	cmp	r7, r1
   1a6a2:	f77f af76 	ble.w	1a592 <lv_img_decoder_built_in_read_line+0xf6>
        val_act = (*data_tmp & (mask << pos)) >> pos;
   1a6a6:	7819      	ldrb	r1, [r3, #0]
   1a6a8:	fa0c f402 	lsl.w	r4, ip, r2
   1a6ac:	4021      	ands	r1, r4
   1a6ae:	4111      	asrs	r1, r2
        lv_color_t color = user_data->palette[val_act];
   1a6b0:	6834      	ldr	r4, [r6, #0]
   1a6b2:	b2c9      	uxtb	r1, r1
        pos -= px_size;
   1a6b4:	1a12      	subs	r2, r2, r0
        lv_color_t color = user_data->palette[val_act];
   1a6b6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
   1a6ba:	f848 4f04 	str.w	r4, [r8, #4]!
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   1a6be:	6874      	ldr	r4, [r6, #4]
        pos -= px_size;
   1a6c0:	b252      	sxtb	r2, r2
        if(pos < 0) {
   1a6c2:	2a00      	cmp	r2, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   1a6c4:	5c61      	ldrb	r1, [r4, r1]
   1a6c6:	f888 1003 	strb.w	r1, [r8, #3]
            pos = 8 - px_size;
   1a6ca:	bfbc      	itt	lt
   1a6cc:	4672      	movlt	r2, lr
            data_tmp++;
   1a6ce:	3301      	addlt	r3, #1
   1a6d0:	3501      	adds	r5, #1
   1a6d2:	e7e4      	b.n	1a69e <lv_img_decoder_built_in_read_line+0x202>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   1a6d4:	692a      	ldr	r2, [r5, #16]
   1a6d6:	f3c2 228a 	ubfx	r2, r2, #10, #11
   1a6da:	0893      	lsrs	r3, r2, #2
            if(dsc->header.w & 0x3) w++;
   1a6dc:	0791      	lsls	r1, r2, #30
   1a6de:	bf18      	it	ne
   1a6e0:	3301      	addne	r3, #1
            ofs += w * y + (x >> 2); /*First pixel*/
   1a6e2:	10a2      	asrs	r2, r4, #2
   1a6e4:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
   1a6e8:	43e2      	mvns	r2, r4
   1a6ea:	f002 0203 	and.w	r2, r2, #3
            ofs += 16;               /*Skip the palette*/
   1a6ee:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
   1a6f0:	0052      	lsls	r2, r2, #1
            break;
   1a6f2:	e7c5      	b.n	1a680 <lv_img_decoder_built_in_read_line+0x1e4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   1a6f4:	692a      	ldr	r2, [r5, #16]
   1a6f6:	f3c2 228a 	ubfx	r2, r2, #10, #11
   1a6fa:	0853      	lsrs	r3, r2, #1
            if(dsc->header.w & 0x1) w++;
   1a6fc:	07d2      	lsls	r2, r2, #31
   1a6fe:	bf48      	it	mi
   1a700:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1a702:	1062      	asrs	r2, r4, #1
   1a704:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 4 - ((x & 0x1) * 4);
   1a708:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
   1a70c:	f103 0340 	add.w	r3, r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
   1a710:	bf0c      	ite	eq
   1a712:	2204      	moveq	r2, #4
   1a714:	2200      	movne	r2, #0
   1a716:	e7b3      	b.n	1a680 <lv_img_decoder_built_in_read_line+0x1e4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   1a718:	692b      	ldr	r3, [r5, #16]
   1a71a:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   1a71e:	fb16 4303 	smlabb	r3, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
   1a722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            pos = 0;
   1a726:	2200      	movs	r2, #0
   1a728:	e7aa      	b.n	1a680 <lv_img_decoder_built_in_read_line+0x1e4>
    uint32_t ofs = 0;
   1a72a:	2300      	movs	r3, #0
    int8_t pos   = 0;
   1a72c:	461a      	mov	r2, r3
   1a72e:	e7a7      	b.n	1a680 <lv_img_decoder_built_in_read_line+0x1e4>
        LV_LOG_WARN("Image built-in indexed line reader can't read file because LV_USE_FILESYSTEM = 0");
   1a730:	4b07      	ldr	r3, [pc, #28]	; (1a750 <lv_img_decoder_built_in_read_line+0x2b4>)
   1a732:	f240 22ce 	movw	r2, #718	; 0x2ce
   1a736:	e6ca      	b.n	1a4ce <lv_img_decoder_built_in_read_line+0x32>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   1a738:	4b06      	ldr	r3, [pc, #24]	; (1a754 <lv_img_decoder_built_in_read_line+0x2b8>)
   1a73a:	f240 12e7 	movw	r2, #487	; 0x1e7
   1a73e:	e6c6      	b.n	1a4ce <lv_img_decoder_built_in_read_line+0x32>
   1a740:	00029f5e 	.word	0x00029f5e
   1a744:	00029fa4 	.word	0x00029fa4
   1a748:	00025c74 	.word	0x00025c74
   1a74c:	0002a07d 	.word	0x0002a07d
   1a750:	0002a0cc 	.word	0x0002a0cc
   1a754:	0002a11d 	.word	0x0002a11d

0001a758 <lv_img_decoder_create>:
{
   1a758:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
   1a75a:	4805      	ldr	r0, [pc, #20]	; (1a770 <lv_img_decoder_create+0x18>)
   1a75c:	f00a f807 	bl	2476e <lv_ll_ins_head>
    if(decoder == NULL) return NULL;
   1a760:	4604      	mov	r4, r0
   1a762:	b118      	cbz	r0, 1a76c <lv_img_decoder_create+0x14>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
   1a764:	2214      	movs	r2, #20
   1a766:	2100      	movs	r1, #0
   1a768:	f004 ff70 	bl	1f64c <memset>
}
   1a76c:	4620      	mov	r0, r4
   1a76e:	bd10      	pop	{r4, pc}
   1a770:	20001dec 	.word	0x20001dec

0001a774 <lv_img_decoder_init>:
{
   1a774:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
   1a776:	2114      	movs	r1, #20
   1a778:	480b      	ldr	r0, [pc, #44]	; (1a7a8 <lv_img_decoder_init+0x34>)
   1a77a:	f009 ffee 	bl	2475a <lv_ll_init>
    decoder = lv_img_decoder_create();
   1a77e:	f7ff ffeb 	bl	1a758 <lv_img_decoder_create>
    if(decoder == NULL) {
   1a782:	b938      	cbnz	r0, 1a794 <lv_img_decoder_init+0x20>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
   1a784:	4b09      	ldr	r3, [pc, #36]	; (1a7ac <lv_img_decoder_init+0x38>)
   1a786:	490a      	ldr	r1, [pc, #40]	; (1a7b0 <lv_img_decoder_init+0x3c>)
   1a788:	2248      	movs	r2, #72	; 0x48
   1a78a:	2002      	movs	r0, #2
}
   1a78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
   1a790:	f000 bc08 	b.w	1afa4 <lv_log_add>
    decoder->info_cb = info_cb;
   1a794:	4b07      	ldr	r3, [pc, #28]	; (1a7b4 <lv_img_decoder_init+0x40>)
   1a796:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
   1a798:	4b07      	ldr	r3, [pc, #28]	; (1a7b8 <lv_img_decoder_init+0x44>)
   1a79a:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
   1a79c:	4b07      	ldr	r3, [pc, #28]	; (1a7bc <lv_img_decoder_init+0x48>)
   1a79e:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
   1a7a0:	4b07      	ldr	r3, [pc, #28]	; (1a7c0 <lv_img_decoder_init+0x4c>)
   1a7a2:	60c3      	str	r3, [r0, #12]
}
   1a7a4:	bd10      	pop	{r4, pc}
   1a7a6:	bf00      	nop
   1a7a8:	20001dec 	.word	0x20001dec
   1a7ac:	0002a157 	.word	0x0002a157
   1a7b0:	00029fa4 	.word	0x00029fa4
   1a7b4:	0001a42d 	.word	0x0001a42d
   1a7b8:	0001a31d 	.word	0x0001a31d
   1a7bc:	0001a49d 	.word	0x0001a49d
   1a7c0:	00024479 	.word	0x00024479

0001a7c4 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
   1a7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1a7c8:	4b12      	ldr	r3, [pc, #72]	; (1a814 <lv_img_cache_invalidate_src+0x50>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
   1a7ca:	4f13      	ldr	r7, [pc, #76]	; (1a818 <lv_img_cache_invalidate_src+0x54>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1a7cc:	f8d3 8000 	ldr.w	r8, [r3]
{
   1a7d0:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
   1a7d2:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
   1a7d4:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
   1a7d8:	883a      	ldrh	r2, [r7, #0]
   1a7da:	b2ab      	uxth	r3, r5
   1a7dc:	429a      	cmp	r2, r3
   1a7de:	d801      	bhi.n	1a7e4 <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
   1a7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
   1a7e4:	b2ac      	uxth	r4, r5
   1a7e6:	fb09 8404 	mla	r4, r9, r4, r8
   1a7ea:	6863      	ldr	r3, [r4, #4]
   1a7ec:	42b3      	cmp	r3, r6
   1a7ee:	d000      	beq.n	1a7f2 <lv_img_cache_invalidate_src+0x2e>
   1a7f0:	b96e      	cbnz	r6, 1a80e <lv_img_cache_invalidate_src+0x4a>
            if(cache[i].dec_dsc.src != NULL) {
   1a7f2:	b113      	cbz	r3, 1a7fa <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
   1a7f4:	4620      	mov	r0, r4
   1a7f6:	f009 fe4d 	bl	24494 <lv_img_decoder_close>
            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
   1a7fa:	2224      	movs	r2, #36	; 0x24
   1a7fc:	2100      	movs	r1, #0
   1a7fe:	4620      	mov	r0, r4
   1a800:	f004 ff24 	bl	1f64c <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
   1a804:	2228      	movs	r2, #40	; 0x28
   1a806:	2100      	movs	r1, #0
   1a808:	4620      	mov	r0, r4
   1a80a:	f004 ff1f 	bl	1f64c <memset>
   1a80e:	3501      	adds	r5, #1
   1a810:	e7e2      	b.n	1a7d8 <lv_img_cache_invalidate_src+0x14>
   1a812:	bf00      	nop
   1a814:	20001de8 	.word	0x20001de8
   1a818:	2000605a 	.word	0x2000605a

0001a81c <lv_img_cache_set_size>:
{
   1a81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   1a820:	4c17      	ldr	r4, [pc, #92]	; (1a880 <lv_img_cache_set_size+0x64>)
   1a822:	6823      	ldr	r3, [r4, #0]
{
   1a824:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   1a826:	b12b      	cbz	r3, 1a834 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
   1a828:	2000      	movs	r0, #0
   1a82a:	f7ff ffcb 	bl	1a7c4 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
   1a82e:	6820      	ldr	r0, [r4, #0]
   1a830:	f000 fa1c 	bl	1ac6c <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
   1a834:	2728      	movs	r7, #40	; 0x28
   1a836:	fb07 f005 	mul.w	r0, r7, r5
   1a83a:	f000 f9f1 	bl	1ac20 <lv_mem_alloc>
   1a83e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1a884 <lv_img_cache_set_size+0x68>
   1a842:	6020      	str	r0, [r4, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
   1a844:	b918      	cbnz	r0, 1a84e <lv_img_cache_set_size+0x32>
        entry_cnt = 0;
   1a846:	f8a8 0000 	strh.w	r0, [r8]
}
   1a84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
   1a84e:	f8a8 5000 	strh.w	r5, [r8]
    for(i = 0; i < entry_cnt; i++) {
   1a852:	2500      	movs	r5, #0
   1a854:	f8b8 2000 	ldrh.w	r2, [r8]
   1a858:	b2ab      	uxth	r3, r5
   1a85a:	429a      	cmp	r2, r3
   1a85c:	d9f5      	bls.n	1a84a <lv_img_cache_set_size+0x2e>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
   1a85e:	b2ae      	uxth	r6, r5
   1a860:	6820      	ldr	r0, [r4, #0]
   1a862:	437e      	muls	r6, r7
   1a864:	2224      	movs	r2, #36	; 0x24
   1a866:	2100      	movs	r1, #0
   1a868:	4430      	add	r0, r6
   1a86a:	f004 feef 	bl	1f64c <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
   1a86e:	6820      	ldr	r0, [r4, #0]
   1a870:	2228      	movs	r2, #40	; 0x28
   1a872:	2100      	movs	r1, #0
   1a874:	4430      	add	r0, r6
   1a876:	f004 fee9 	bl	1f64c <memset>
   1a87a:	3501      	adds	r5, #1
   1a87c:	e7ea      	b.n	1a854 <lv_img_cache_set_size+0x38>
   1a87e:	bf00      	nop
   1a880:	20001de8 	.word	0x20001de8
   1a884:	2000605a 	.word	0x2000605a

0001a888 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
   1a888:	b570      	push	{r4, r5, r6, lr}
   1a88a:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   1a88c:	4828      	ldr	r0, [pc, #160]	; (1a930 <lv_disp_drv_register+0xa8>)
   1a88e:	f009 ff6e 	bl	2476e <lv_ll_ins_head>
    if(!disp) {
   1a892:	4604      	mov	r4, r0
   1a894:	b910      	cbnz	r0, 1a89c <lv_disp_drv_register+0x14>
        LV_ASSERT_MEM(disp);
        return NULL;
   1a896:	2400      	movs	r4, #0
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/

    return disp;
}
   1a898:	4620      	mov	r0, r4
   1a89a:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
   1a89c:	4629      	mov	r1, r5
   1a89e:	2224      	movs	r2, #36	; 0x24
   1a8a0:	f004 feaa 	bl	1f5f8 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
   1a8a4:	2220      	movs	r2, #32
   1a8a6:	2100      	movs	r1, #0
   1a8a8:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   1a8ac:	f004 fece 	bl	1f64c <memset>
    if(disp_def == NULL) disp_def = disp;
   1a8b0:	4d20      	ldr	r5, [pc, #128]	; (1a934 <lv_disp_drv_register+0xac>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
   1a8b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a8b6:	2100      	movs	r1, #0
   1a8b8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1a8bc:	f004 fec6 	bl	1f64c <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   1a8c0:	2138      	movs	r1, #56	; 0x38
   1a8c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a8c6:	f009 ff48 	bl	2475a <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
   1a8ca:	682b      	ldr	r3, [r5, #0]
   1a8cc:	b903      	cbnz	r3, 1a8d0 <lv_disp_drv_register+0x48>
   1a8ce:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
   1a8d0:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    lv_disp_t * disp_def_tmp = disp_def;
   1a8d4:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   1a8d6:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
   1a8d8:	f36f 0309 	bfc	r3, #0, #10
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1a8dc:	2100      	movs	r1, #0
    disp->inv_p = 0;
   1a8de:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1a8e2:	4608      	mov	r0, r1
   1a8e4:	f7fe fb82 	bl	18fec <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1a8e8:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1a8ea:	6360      	str	r0, [r4, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1a8ec:	4608      	mov	r0, r1
   1a8ee:	f7fe fb7d 	bl	18fec <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1a8f2:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1a8f4:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1a8f6:	4608      	mov	r0, r1
   1a8f8:	f7fe fb78 	bl	18fec <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
   1a8fc:	490e      	ldr	r1, [pc, #56]	; (1a938 <lv_disp_drv_register+0xb0>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1a8fe:	63e0      	str	r0, [r4, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
   1a900:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a902:	f008 fb56 	bl	22fb2 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
   1a906:	490c      	ldr	r1, [pc, #48]	; (1a938 <lv_disp_drv_register+0xb0>)
   1a908:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1a90a:	f008 fb52 	bl	22fb2 <lv_obj_set_style>
    lv_obj_invalidate(disp->act_scr);
   1a90e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1a910:	f008 fa37 	bl	22d82 <lv_obj_invalidate>
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
   1a914:	4623      	mov	r3, r4
   1a916:	2203      	movs	r2, #3
   1a918:	2132      	movs	r1, #50	; 0x32
   1a91a:	4808      	ldr	r0, [pc, #32]	; (1a93c <lv_disp_drv_register+0xb4>)
    disp_def = disp_def_tmp; /*Revert the default display*/
   1a91c:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
   1a91e:	f009 fed9 	bl	246d4 <lv_task_create>
   1a922:	6260      	str	r0, [r4, #36]	; 0x24
    if(disp->refr_task == NULL) return NULL;
   1a924:	2800      	cmp	r0, #0
   1a926:	d0b6      	beq.n	1a896 <lv_disp_drv_register+0xe>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   1a928:	f009 fee8 	bl	246fc <lv_task_ready>
    return disp;
   1a92c:	e7b4      	b.n	1a898 <lv_disp_drv_register+0x10>
   1a92e:	bf00      	nop
   1a930:	20001dd8 	.word	0x20001dd8
   1a934:	20001dc0 	.word	0x20001dc0
   1a938:	20001ccc 	.word	0x20001ccc
   1a93c:	000193cd 	.word	0x000193cd

0001a940 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   1a940:	4b01      	ldr	r3, [pc, #4]	; (1a948 <lv_disp_get_default+0x8>)
   1a942:	6818      	ldr	r0, [r3, #0]
   1a944:	4770      	bx	lr
   1a946:	bf00      	nop
   1a948:	20001dc0 	.word	0x20001dc0

0001a94c <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1a94c:	b910      	cbnz	r0, 1a954 <lv_disp_get_hor_res+0x8>
    return disp_def;
   1a94e:	4b06      	ldr	r3, [pc, #24]	; (1a968 <lv_disp_get_hor_res+0x1c>)
   1a950:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   1a952:	b138      	cbz	r0, 1a964 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   1a954:	7a03      	ldrb	r3, [r0, #8]
   1a956:	07db      	lsls	r3, r3, #31
   1a958:	bf54      	ite	pl
   1a95a:	f9b0 0000 	ldrshpl.w	r0, [r0]
   1a95e:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
   1a962:	4770      	bx	lr
        return LV_HOR_RES_MAX;
   1a964:	20f0      	movs	r0, #240	; 0xf0
}
   1a966:	4770      	bx	lr
   1a968:	20001dc0 	.word	0x20001dc0

0001a96c <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1a96c:	b910      	cbnz	r0, 1a974 <lv_disp_get_ver_res+0x8>
    return disp_def;
   1a96e:	4b06      	ldr	r3, [pc, #24]	; (1a988 <lv_disp_get_ver_res+0x1c>)
   1a970:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   1a972:	b138      	cbz	r0, 1a984 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   1a974:	7a03      	ldrb	r3, [r0, #8]
   1a976:	07db      	lsls	r3, r3, #31
   1a978:	bf54      	ite	pl
   1a97a:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
   1a97e:	f9b0 0000 	ldrshmi.w	r0, [r0]
   1a982:	4770      	bx	lr
        return LV_VER_RES_MAX;
   1a984:	20f0      	movs	r0, #240	; 0xf0
}
   1a986:	4770      	bx	lr
   1a988:	20001dc0 	.word	0x20001dc0

0001a98c <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
   1a98c:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   1a98e:	4803      	ldr	r0, [pc, #12]	; (1a99c <lv_indev_get_next+0x10>)
    if(indev == NULL)
   1a990:	b909      	cbnz	r1, 1a996 <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   1a992:	f009 bf28 	b.w	247e6 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   1a996:	f009 bf2c 	b.w	247f2 <lv_ll_get_next>
   1a99a:	bf00      	nop
   1a99c:	20001df8 	.word	0x20001df8

0001a9a0 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
   1a9a0:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   1a9a2:	2114      	movs	r1, #20
   1a9a4:	4803      	ldr	r0, [pc, #12]	; (1a9b4 <lv_task_core_init+0x14>)
   1a9a6:	f009 fed8 	bl	2475a <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   1a9aa:	4b03      	ldr	r3, [pc, #12]	; (1a9b8 <lv_task_core_init+0x18>)
   1a9ac:	2201      	movs	r2, #1
   1a9ae:	701a      	strb	r2, [r3, #0]
}
   1a9b0:	bd08      	pop	{r3, pc}
   1a9b2:	bf00      	nop
   1a9b4:	20001e08 	.word	0x20001e08
   1a9b8:	2000a6be 	.word	0x2000a6be

0001a9bc <lv_task_create_basic>:
{
   1a9bc:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1a9be:	481a      	ldr	r0, [pc, #104]	; (1aa28 <lv_task_create_basic+0x6c>)
   1a9c0:	f009 ff11 	bl	247e6 <lv_ll_get_head>
    if(NULL == tmp) {
   1a9c4:	4601      	mov	r1, r0
   1a9c6:	b148      	cbz	r0, 1a9dc <lv_task_create_basic+0x20>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   1a9c8:	4c17      	ldr	r4, [pc, #92]	; (1aa28 <lv_task_create_basic+0x6c>)
            if(tmp->prio <= DEF_PRIO) {
   1a9ca:	7c0b      	ldrb	r3, [r1, #16]
   1a9cc:	f003 0307 	and.w	r3, r3, #7
   1a9d0:	2b03      	cmp	r3, #3
   1a9d2:	d80b      	bhi.n	1a9ec <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   1a9d4:	4814      	ldr	r0, [pc, #80]	; (1aa28 <lv_task_create_basic+0x6c>)
   1a9d6:	f009 ff2b 	bl	24830 <lv_ll_ins_prev>
   1a9da:	e002      	b.n	1a9e2 <lv_task_create_basic+0x26>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   1a9dc:	4812      	ldr	r0, [pc, #72]	; (1aa28 <lv_task_create_basic+0x6c>)
   1a9de:	f009 fec6 	bl	2476e <lv_ll_ins_head>
        if(new_task == NULL) return NULL;
   1a9e2:	4604      	mov	r4, r0
   1a9e4:	b960      	cbnz	r0, 1aa00 <lv_task_create_basic+0x44>
   1a9e6:	2400      	movs	r4, #0
}
   1a9e8:	4620      	mov	r0, r4
   1a9ea:	bd38      	pop	{r3, r4, r5, pc}
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   1a9ec:	4620      	mov	r0, r4
   1a9ee:	f009 ff00 	bl	247f2 <lv_ll_get_next>
        } while(tmp != NULL);
   1a9f2:	4601      	mov	r1, r0
   1a9f4:	2800      	cmp	r0, #0
   1a9f6:	d1e8      	bne.n	1a9ca <lv_task_create_basic+0xe>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   1a9f8:	480b      	ldr	r0, [pc, #44]	; (1aa28 <lv_task_create_basic+0x6c>)
   1a9fa:	f009 fed6 	bl	247aa <lv_ll_ins_tail>
   1a9fe:	e7f0      	b.n	1a9e2 <lv_task_create_basic+0x26>
    new_task->period  = DEF_PERIOD;
   1aa00:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1aa04:	6003      	str	r3, [r0, #0]
    new_task->prio    = DEF_PRIO;
   1aa06:	7c03      	ldrb	r3, [r0, #16]
   1aa08:	f023 030f 	bic.w	r3, r3, #15
   1aa0c:	f043 0303 	orr.w	r3, r3, #3
    new_task->task_cb = NULL;
   1aa10:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
   1aa12:	7403      	strb	r3, [r0, #16]
    new_task->task_cb = NULL;
   1aa14:	6085      	str	r5, [r0, #8]
    new_task->last_run = lv_tick_get();
   1aa16:	f009 fd93 	bl	24540 <lv_tick_get>
    task_created = true;
   1aa1a:	4b04      	ldr	r3, [pc, #16]	; (1aa2c <lv_task_create_basic+0x70>)
    new_task->last_run = lv_tick_get();
   1aa1c:	6060      	str	r0, [r4, #4]
    task_created = true;
   1aa1e:	2201      	movs	r2, #1
    new_task->user_data = NULL;
   1aa20:	60e5      	str	r5, [r4, #12]
    task_created = true;
   1aa22:	701a      	strb	r2, [r3, #0]
    return new_task;
   1aa24:	e7e0      	b.n	1a9e8 <lv_task_create_basic+0x2c>
   1aa26:	bf00      	nop
   1aa28:	20001e08 	.word	0x20001e08
   1aa2c:	2000a6bf 	.word	0x2000a6bf

0001aa30 <lv_task_del>:
{
   1aa30:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
   1aa32:	4601      	mov	r1, r0
{
   1aa34:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
   1aa36:	4807      	ldr	r0, [pc, #28]	; (1aa54 <lv_task_del+0x24>)
   1aa38:	f009 ff2b 	bl	24892 <lv_ll_rem>
    lv_mem_free(task);
   1aa3c:	4620      	mov	r0, r4
   1aa3e:	f000 f915 	bl	1ac6c <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   1aa42:	4b05      	ldr	r3, [pc, #20]	; (1aa58 <lv_task_del+0x28>)
   1aa44:	681b      	ldr	r3, [r3, #0]
   1aa46:	42a3      	cmp	r3, r4
   1aa48:	bf02      	ittt	eq
   1aa4a:	4b04      	ldreq	r3, [pc, #16]	; (1aa5c <lv_task_del+0x2c>)
   1aa4c:	2201      	moveq	r2, #1
   1aa4e:	701a      	strbeq	r2, [r3, #0]
}
   1aa50:	bd10      	pop	{r4, pc}
   1aa52:	bf00      	nop
   1aa54:	20001e08 	.word	0x20001e08
   1aa58:	20001e04 	.word	0x20001e04
   1aa5c:	2000a6c0 	.word	0x2000a6c0

0001aa60 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   1aa60:	b538      	push	{r3, r4, r5, lr}
   1aa62:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   1aa64:	6840      	ldr	r0, [r0, #4]
   1aa66:	f009 fd6f 	bl	24548 <lv_tick_elaps>
    if(elp >= task->period) {
   1aa6a:	6823      	ldr	r3, [r4, #0]
   1aa6c:	4283      	cmp	r3, r0
   1aa6e:	d817      	bhi.n	1aaa0 <lv_task_exec+0x40>
        task->last_run = lv_tick_get();
   1aa70:	f009 fd66 	bl	24540 <lv_tick_get>
        task_deleted   = false;
   1aa74:	4d0b      	ldr	r5, [pc, #44]	; (1aaa4 <lv_task_exec+0x44>)
        task_created   = false;
   1aa76:	4a0c      	ldr	r2, [pc, #48]	; (1aaa8 <lv_task_exec+0x48>)
        task->last_run = lv_tick_get();
   1aa78:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   1aa7a:	2300      	movs	r3, #0
   1aa7c:	702b      	strb	r3, [r5, #0]
        task_created   = false;
   1aa7e:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
   1aa80:	68a3      	ldr	r3, [r4, #8]
   1aa82:	b933      	cbnz	r3, 1aa92 <lv_task_exec+0x32>

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
            if(task->once != 0) {
   1aa84:	7c23      	ldrb	r3, [r4, #16]
   1aa86:	071b      	lsls	r3, r3, #28
   1aa88:	d508      	bpl.n	1aa9c <lv_task_exec+0x3c>
                lv_task_del(task);
   1aa8a:	4620      	mov	r0, r4
   1aa8c:	f7ff ffd0 	bl	1aa30 <lv_task_del>
   1aa90:	e004      	b.n	1aa9c <lv_task_exec+0x3c>
        if(task->task_cb) task->task_cb(task);
   1aa92:	4620      	mov	r0, r4
   1aa94:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   1aa96:	782b      	ldrb	r3, [r5, #0]
   1aa98:	2b00      	cmp	r3, #0
   1aa9a:	d0f3      	beq.n	1aa84 <lv_task_exec+0x24>
                lv_task_del(task);
   1aa9c:	2001      	movs	r0, #1
        }
        exec = true;
    }

    return exec;
}
   1aa9e:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
   1aaa0:	2000      	movs	r0, #0
   1aaa2:	e7fc      	b.n	1aa9e <lv_task_exec+0x3e>
   1aaa4:	2000a6c0 	.word	0x2000a6c0
   1aaa8:	2000a6bf 	.word	0x2000a6bf

0001aaac <lv_task_handler>:
{
   1aaac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return;
   1aab0:	4d3e      	ldr	r5, [pc, #248]	; (1abac <lv_task_handler+0x100>)
   1aab2:	782c      	ldrb	r4, [r5, #0]
   1aab4:	b934      	cbnz	r4, 1aac4 <lv_task_handler+0x18>
    already_running = true;
   1aab6:	2301      	movs	r3, #1
   1aab8:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
   1aaba:	4b3d      	ldr	r3, [pc, #244]	; (1abb0 <lv_task_handler+0x104>)
   1aabc:	781b      	ldrb	r3, [r3, #0]
   1aabe:	b923      	cbnz	r3, 1aaca <lv_task_handler+0x1e>
        already_running = false; /*Release mutex*/
   1aac0:	2300      	movs	r3, #0
   1aac2:	702b      	strb	r3, [r5, #0]
}
   1aac4:	b003      	add	sp, #12
   1aac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
   1aaca:	f009 fd39 	bl	24540 <lv_tick_get>
   1aace:	4b39      	ldr	r3, [pc, #228]	; (1abb4 <lv_task_handler+0x108>)
        task_deleted             = false;
   1aad0:	4e39      	ldr	r6, [pc, #228]	; (1abb8 <lv_task_handler+0x10c>)
    handler_start = lv_tick_get();
   1aad2:	6018      	str	r0, [r3, #0]
    lv_task_t * task_interrupter = NULL;
   1aad4:	9301      	str	r3, [sp, #4]
        task_deleted             = false;
   1aad6:	46a3      	mov	fp, r4
        task_created             = false;
   1aad8:	4f38      	ldr	r7, [pc, #224]	; (1abbc <lv_task_handler+0x110>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1aada:	4839      	ldr	r0, [pc, #228]	; (1abc0 <lv_task_handler+0x114>)
        task_deleted             = false;
   1aadc:	f886 b000 	strb.w	fp, [r6]
        task_created             = false;
   1aae0:	f887 b000 	strb.w	fp, [r7]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1aae4:	f009 fe7f 	bl	247e6 <lv_ll_get_head>
   1aae8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1abd0 <lv_task_handler+0x124>
   1aaec:	f8c8 0000 	str.w	r0, [r8]
        while(LV_GC_ROOT(_lv_task_act)) {
   1aaf0:	46c1      	mov	r9, r8
   1aaf2:	f8d9 1000 	ldr.w	r1, [r9]
   1aaf6:	b1b9      	cbz	r1, 1ab28 <lv_task_handler+0x7c>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   1aaf8:	4831      	ldr	r0, [pc, #196]	; (1abc0 <lv_task_handler+0x114>)
   1aafa:	f009 fe7a 	bl	247f2 <lv_ll_get_next>
   1aafe:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   1ab00:	f8d9 0000 	ldr.w	r0, [r9]
   1ab04:	7c03      	ldrb	r3, [r0, #16]
   1ab06:	f013 0207 	ands.w	r2, r3, #7
   1ab0a:	d00d      	beq.n	1ab28 <lv_task_handler+0x7c>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   1ab0c:	42a0      	cmp	r0, r4
   1ab0e:	d103      	bne.n	1ab18 <lv_task_handler+0x6c>
                LV_GC_ROOT(_lv_task_act) = next;
   1ab10:	f8c9 a000 	str.w	sl, [r9]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   1ab14:	2400      	movs	r4, #0
                continue; /*Load the next task*/
   1ab16:	e7ec      	b.n	1aaf2 <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   1ab18:	2a05      	cmp	r2, #5
   1ab1a:	d12b      	bne.n	1ab74 <lv_task_handler+0xc8>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   1ab1c:	f7ff ffa0 	bl	1aa60 <lv_task_exec>
            if(task_created || task_deleted) {
   1ab20:	4b26      	ldr	r3, [pc, #152]	; (1abbc <lv_task_handler+0x110>)
   1ab22:	781b      	ldrb	r3, [r3, #0]
   1ab24:	2b00      	cmp	r3, #0
   1ab26:	d03a      	beq.n	1ab9e <lv_task_handler+0xf2>
    busy_time += lv_tick_elaps(handler_start);
   1ab28:	9b01      	ldr	r3, [sp, #4]
   1ab2a:	4c26      	ldr	r4, [pc, #152]	; (1abc4 <lv_task_handler+0x118>)
   1ab2c:	6818      	ldr	r0, [r3, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   1ab2e:	4e26      	ldr	r6, [pc, #152]	; (1abc8 <lv_task_handler+0x11c>)
    busy_time += lv_tick_elaps(handler_start);
   1ab30:	f009 fd0a 	bl	24548 <lv_tick_elaps>
   1ab34:	6823      	ldr	r3, [r4, #0]
   1ab36:	4418      	add	r0, r3
   1ab38:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   1ab3a:	6830      	ldr	r0, [r6, #0]
   1ab3c:	f009 fd04 	bl	24548 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   1ab40:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1ab44:	d3bc      	bcc.n	1aac0 <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   1ab46:	6822      	ldr	r2, [r4, #0]
   1ab48:	2364      	movs	r3, #100	; 0x64
   1ab4a:	4353      	muls	r3, r2
   1ab4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1ab50:	fbb3 f3f2 	udiv	r3, r3, r2
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   1ab54:	b2da      	uxtb	r2, r3
   1ab56:	2a64      	cmp	r2, #100	; 0x64
   1ab58:	bf98      	it	ls
   1ab5a:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   1ab5e:	4a1b      	ldr	r2, [pc, #108]	; (1abcc <lv_task_handler+0x120>)
   1ab60:	bf94      	ite	ls
   1ab62:	b2db      	uxtbls	r3, r3
   1ab64:	2300      	movhi	r3, #0
   1ab66:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
   1ab68:	2300      	movs	r3, #0
   1ab6a:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
   1ab6c:	f009 fce8 	bl	24540 <lv_tick_get>
   1ab70:	6030      	str	r0, [r6, #0]
   1ab72:	e7a5      	b.n	1aac0 <lv_task_handler+0x14>
            else if(task_interrupter) {
   1ab74:	b134      	cbz	r4, 1ab84 <lv_task_handler+0xd8>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   1ab76:	7c22      	ldrb	r2, [r4, #16]
   1ab78:	f003 0307 	and.w	r3, r3, #7
   1ab7c:	f002 0207 	and.w	r2, r2, #7
   1ab80:	4293      	cmp	r3, r2
   1ab82:	d9cd      	bls.n	1ab20 <lv_task_handler+0x74>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   1ab84:	f7ff ff6c 	bl	1aa60 <lv_task_exec>
   1ab88:	2800      	cmp	r0, #0
   1ab8a:	d0c9      	beq.n	1ab20 <lv_task_handler+0x74>
                    if(!task_created && !task_deleted) {
   1ab8c:	783b      	ldrb	r3, [r7, #0]
   1ab8e:	2b00      	cmp	r3, #0
   1ab90:	d1ca      	bne.n	1ab28 <lv_task_handler+0x7c>
   1ab92:	7833      	ldrb	r3, [r6, #0]
   1ab94:	2b00      	cmp	r3, #0
   1ab96:	d1c7      	bne.n	1ab28 <lv_task_handler+0x7c>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   1ab98:	f8d8 4000 	ldr.w	r4, [r8]
                        break;
   1ab9c:	e79c      	b.n	1aad8 <lv_task_handler+0x2c>
            if(task_created || task_deleted) {
   1ab9e:	7833      	ldrb	r3, [r6, #0]
   1aba0:	2b00      	cmp	r3, #0
   1aba2:	d1c1      	bne.n	1ab28 <lv_task_handler+0x7c>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   1aba4:	f8c9 a000 	str.w	sl, [r9]
   1aba8:	e7a3      	b.n	1aaf2 <lv_task_handler+0x46>
   1abaa:	bf00      	nop
   1abac:	2000a6bc 	.word	0x2000a6bc
   1abb0:	2000a6be 	.word	0x2000a6be
   1abb4:	20001dc8 	.word	0x20001dc8
   1abb8:	2000a6c0 	.word	0x2000a6c0
   1abbc:	2000a6bf 	.word	0x2000a6bf
   1abc0:	20001e08 	.word	0x20001e08
   1abc4:	20001dc4 	.word	0x20001dc4
   1abc8:	20001dcc 	.word	0x20001dcc
   1abcc:	2000a6bd 	.word	0x2000a6bd
   1abd0:	20001e04 	.word	0x20001e04

0001abd4 <lv_task_set_prio>:
    if(task->prio == prio) return;
   1abd4:	7c03      	ldrb	r3, [r0, #16]
   1abd6:	f003 0307 	and.w	r3, r3, #7
   1abda:	428b      	cmp	r3, r1
{
   1abdc:	b570      	push	{r4, r5, r6, lr}
   1abde:	4604      	mov	r4, r0
   1abe0:	460d      	mov	r5, r1
    if(task->prio == prio) return;
   1abe2:	d014      	beq.n	1ac0e <lv_task_set_prio+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
   1abe4:	480d      	ldr	r0, [pc, #52]	; (1ac1c <lv_task_set_prio+0x48>)
   1abe6:	4e0d      	ldr	r6, [pc, #52]	; (1ac1c <lv_task_set_prio+0x48>)
   1abe8:	f009 fdfd 	bl	247e6 <lv_ll_get_head>
   1abec:	4602      	mov	r2, r0
   1abee:	b132      	cbz	r2, 1abfe <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
   1abf0:	7c13      	ldrb	r3, [r2, #16]
   1abf2:	f003 0307 	and.w	r3, r3, #7
   1abf6:	429d      	cmp	r5, r3
   1abf8:	db0a      	blt.n	1ac10 <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   1abfa:	42a2      	cmp	r2, r4
   1abfc:	d003      	beq.n	1ac06 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   1abfe:	4621      	mov	r1, r4
   1ac00:	4806      	ldr	r0, [pc, #24]	; (1ac1c <lv_task_set_prio+0x48>)
   1ac02:	f009 fe80 	bl	24906 <lv_ll_move_before>
    task->prio = prio;
   1ac06:	7c23      	ldrb	r3, [r4, #16]
   1ac08:	f365 0302 	bfi	r3, r5, #0, #3
   1ac0c:	7423      	strb	r3, [r4, #16]
}
   1ac0e:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
   1ac10:	4611      	mov	r1, r2
   1ac12:	4630      	mov	r0, r6
   1ac14:	f009 fded 	bl	247f2 <lv_ll_get_next>
   1ac18:	4602      	mov	r2, r0
   1ac1a:	e7e8      	b.n	1abee <lv_task_set_prio+0x1a>
   1ac1c:	20001e08 	.word	0x20001e08

0001ac20 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
   1ac20:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
   1ac22:	4604      	mov	r4, r0
   1ac24:	b198      	cbz	r0, 1ac4e <lv_mem_alloc+0x2e>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
   1ac26:	0783      	lsls	r3, r0, #30
        size = size & (~0x3);
   1ac28:	bf1c      	itt	ne
   1ac2a:	f020 0403 	bicne.w	r4, r0, #3
        size += 4;
   1ac2e:	3404      	addne	r4, #4
/*Use custom, user defined malloc function*/
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
   1ac30:	1d20      	adds	r0, r4, #4
   1ac32:	f001 fa1d 	bl	1c070 <k_malloc>
    if(alloc != NULL) {
   1ac36:	4605      	mov	r5, r0
   1ac38:	b158      	cbz	r0, 1ac52 <lv_mem_alloc+0x32>
        ((lv_mem_ent_t *)alloc)->header.s.d_size = size;
   1ac3a:	6803      	ldr	r3, [r0, #0]
   1ac3c:	f364 035f 	bfi	r3, r4, #1, #31
   1ac40:	6003      	str	r3, [r0, #0]
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
   1ac42:	f043 0301 	orr.w	r3, r3, #1
   1ac46:	f805 3b04 	strb.w	r3, [r5], #4
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
}
   1ac4a:	4628      	mov	r0, r5
   1ac4c:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
   1ac4e:	4d04      	ldr	r5, [pc, #16]	; (1ac60 <lv_mem_alloc+0x40>)
   1ac50:	e7fb      	b.n	1ac4a <lv_mem_alloc+0x2a>
    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");
   1ac52:	4b04      	ldr	r3, [pc, #16]	; (1ac64 <lv_mem_alloc+0x44>)
   1ac54:	4904      	ldr	r1, [pc, #16]	; (1ac68 <lv_mem_alloc+0x48>)
   1ac56:	22a7      	movs	r2, #167	; 0xa7
   1ac58:	2002      	movs	r0, #2
   1ac5a:	f000 f9a3 	bl	1afa4 <lv_log_add>
   1ac5e:	e7f4      	b.n	1ac4a <lv_mem_alloc+0x2a>
   1ac60:	20001dd0 	.word	0x20001dd0
   1ac64:	0002a17a 	.word	0x0002a17a
   1ac68:	0002a193 	.word	0x0002a193

0001ac6c <lv_mem_free>:
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
    if(data == &zero_mem) return;
   1ac6c:	4b06      	ldr	r3, [pc, #24]	; (1ac88 <lv_mem_free+0x1c>)
   1ac6e:	4298      	cmp	r0, r3
   1ac70:	d008      	beq.n	1ac84 <lv_mem_free+0x18>
    if(data == NULL) return;
   1ac72:	b138      	cbz	r0, 1ac84 <lv_mem_free+0x18>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
    e->header.s.used = 0;
   1ac74:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1ac78:	f36f 0300 	bfc	r3, #0, #1
   1ac7c:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
    }
#endif
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
   1ac80:	f00a b983 	b.w	24f8a <k_free>
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
   1ac84:	4770      	bx	lr
   1ac86:	bf00      	nop
   1ac88:	20001dd0 	.word	0x20001dd0

0001ac8c <lv_mem_get_size>:

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
    if(data == NULL) return 0;
   1ac8c:	b140      	cbz	r0, 1aca0 <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
   1ac8e:	4b05      	ldr	r3, [pc, #20]	; (1aca4 <lv_mem_get_size+0x18>)
   1ac90:	4298      	cmp	r0, r3
   1ac92:	d004      	beq.n	1ac9e <lv_mem_get_size+0x12>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));

    return e->header.s.d_size;
   1ac94:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1ac98:	f3c0 005e 	ubfx	r0, r0, #1, #31
   1ac9c:	4770      	bx	lr
    if(data == NULL) return 0;
   1ac9e:	2000      	movs	r0, #0
}
   1aca0:	4770      	bx	lr
   1aca2:	bf00      	nop
   1aca4:	20001dd0 	.word	0x20001dd0

0001aca8 <lv_mem_realloc>:
{
   1aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1acaa:	460d      	mov	r5, r1
    if(data_p != NULL) {
   1acac:	4604      	mov	r4, r0
   1acae:	b130      	cbz	r0, 1acbe <lv_mem_realloc+0x16>
        if(e->header.s.used == 0) {
   1acb0:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
   1acb4:	f013 0f01 	tst.w	r3, #1
   1acb8:	bf14      	ite	ne
   1acba:	4604      	movne	r4, r0
   1acbc:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
   1acbe:	4620      	mov	r0, r4
   1acc0:	f7ff ffe4 	bl	1ac8c <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   1acc4:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
   1acc6:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   1acc8:	d012      	beq.n	1acf0 <lv_mem_realloc+0x48>
    new_p = lv_mem_alloc(new_size);
   1acca:	4628      	mov	r0, r5
   1accc:	f7ff ffa8 	bl	1ac20 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
   1acd0:	4607      	mov	r7, r0
   1acd2:	b178      	cbz	r0, 1acf4 <lv_mem_realloc+0x4c>
   1acd4:	b154      	cbz	r4, 1acec <lv_mem_realloc+0x44>
        if(old_size != 0) {
   1acd6:	b14e      	cbz	r6, 1acec <lv_mem_realloc+0x44>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
   1acd8:	42ae      	cmp	r6, r5
   1acda:	4632      	mov	r2, r6
   1acdc:	4621      	mov	r1, r4
   1acde:	bf28      	it	cs
   1ace0:	462a      	movcs	r2, r5
   1ace2:	f004 fc89 	bl	1f5f8 <memcpy>
            lv_mem_free(data_p);
   1ace6:	4620      	mov	r0, r4
   1ace8:	f7ff ffc0 	bl	1ac6c <lv_mem_free>
}
   1acec:	4638      	mov	r0, r7
   1acee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1acf0:	4627      	mov	r7, r4
   1acf2:	e7fb      	b.n	1acec <lv_mem_realloc+0x44>
    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");
   1acf4:	4b03      	ldr	r3, [pc, #12]	; (1ad04 <lv_mem_realloc+0x5c>)
   1acf6:	4904      	ldr	r1, [pc, #16]	; (1ad08 <lv_mem_realloc+0x60>)
   1acf8:	f44f 7281 	mov.w	r2, #258	; 0x102
   1acfc:	2002      	movs	r0, #2
   1acfe:	f000 f951 	bl	1afa4 <lv_log_add>
   1ad02:	e7f3      	b.n	1acec <lv_mem_realloc+0x44>
   1ad04:	0002a17a 	.word	0x0002a17a
   1ad08:	0002a193 	.word	0x0002a193

0001ad0c <lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t lv_txt_get_width(const char * txt, uint16_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_txt_flag_t flag)
{
   1ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad10:	4688      	mov	r8, r1
   1ad12:	b085      	sub	sp, #20
   1ad14:	4617      	mov	r7, r2
   1ad16:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
   1ad18:	4605      	mov	r5, r0
   1ad1a:	2400      	movs	r4, #0
   1ad1c:	2800      	cmp	r0, #0
   1ad1e:	d03f      	beq.n	1ada0 <lv_txt_get_width+0x94>
    if(font == NULL) return 0;
   1ad20:	2a00      	cmp	r2, #0
   1ad22:	d03f      	beq.n	1ada4 <lv_txt_get_width+0x98>

    uint32_t i                   = 0;
   1ad24:	9403      	str	r4, [sp, #12]
    lv_coord_t width             = 0;
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1ad26:	f88d 400b 	strb.w	r4, [sp, #11]
    uint32_t letter;
    uint32_t letter_next;

    if(length != 0) {
   1ad2a:	2900      	cmp	r1, #0
   1ad2c:	d036      	beq.n	1ad9c <lv_txt_get_width+0x90>
        while(i < length) {
            letter      = lv_txt_encoded_next(txt, &i);
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ad2e:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
   1ad32:	f8df a074 	ldr.w	sl, [pc, #116]	; 1ada8 <lv_txt_get_width+0x9c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ad36:	f009 0901 	and.w	r9, r9, #1
            letter      = lv_txt_encoded_next(txt, &i);
   1ad3a:	f8da 3000 	ldr.w	r3, [sl]
   1ad3e:	a903      	add	r1, sp, #12
   1ad40:	4628      	mov	r0, r5
   1ad42:	4798      	blx	r3
   1ad44:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
   1ad46:	9803      	ldr	r0, [sp, #12]
   1ad48:	f8da 3000 	ldr.w	r3, [sl]
   1ad4c:	2100      	movs	r1, #0
   1ad4e:	4428      	add	r0, r5
   1ad50:	4798      	blx	r3
   1ad52:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ad54:	f1b9 0f00 	cmp.w	r9, #0
   1ad58:	d111      	bne.n	1ad7e <lv_txt_get_width+0x72>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   1ad5a:	4659      	mov	r1, fp
   1ad5c:	4638      	mov	r0, r7
   1ad5e:	f00a f8ad 	bl	24ebc <lv_font_get_glyph_width>
   1ad62:	b200      	sxth	r0, r0
            if(char_width > 0) {
   1ad64:	2800      	cmp	r0, #0
   1ad66:	dc14      	bgt.n	1ad92 <lv_txt_get_width+0x86>
        while(i < length) {
   1ad68:	9b03      	ldr	r3, [sp, #12]
   1ad6a:	4598      	cmp	r8, r3
   1ad6c:	d8e5      	bhi.n	1ad3a <lv_txt_get_width+0x2e>
                width += char_width;
                width += letter_space;
            }
        }

        if(width > 0) {
   1ad6e:	2c00      	cmp	r4, #0
   1ad70:	dd01      	ble.n	1ad76 <lv_txt_get_width+0x6a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   1ad72:	1ba4      	subs	r4, r4, r6
   1ad74:	b224      	sxth	r4, r4
                                      aligned */
        }
    }

    return width;
}
   1ad76:	4620      	mov	r0, r4
   1ad78:	b005      	add	sp, #20
   1ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad7e:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
   1ad80:	4659      	mov	r1, fp
   1ad82:	f10d 000b 	add.w	r0, sp, #11
   1ad86:	f009 fe06 	bl	24996 <lv_txt_is_cmd>
   1ad8a:	9a01      	ldr	r2, [sp, #4]
   1ad8c:	2800      	cmp	r0, #0
   1ad8e:	d0e4      	beq.n	1ad5a <lv_txt_get_width+0x4e>
   1ad90:	e7ea      	b.n	1ad68 <lv_txt_get_width+0x5c>
                width += letter_space;
   1ad92:	19a3      	adds	r3, r4, r6
   1ad94:	fa00 f483 	sxtah	r4, r0, r3
   1ad98:	b224      	sxth	r4, r4
   1ad9a:	e7e5      	b.n	1ad68 <lv_txt_get_width+0x5c>
    lv_coord_t width             = 0;
   1ad9c:	460c      	mov	r4, r1
   1ad9e:	e7ea      	b.n	1ad76 <lv_txt_get_width+0x6a>
    if(txt == NULL) return 0;
   1ada0:	4604      	mov	r4, r0
   1ada2:	e7e8      	b.n	1ad76 <lv_txt_get_width+0x6a>
   1ada4:	4614      	mov	r4, r2
   1ada6:	e7e6      	b.n	1ad76 <lv_txt_get_width+0x6a>
   1ada8:	2000e388 	.word	0x2000e388

0001adac <lv_txt_get_next_line>:
{
   1adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adb0:	b091      	sub	sp, #68	; 0x44
   1adb2:	4699      	mov	r9, r3
   1adb4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1adb8:	9102      	str	r1, [sp, #8]
   1adba:	9207      	str	r2, [sp, #28]
   1adbc:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
   1adbe:	4607      	mov	r7, r0
   1adc0:	2800      	cmp	r0, #0
   1adc2:	d05a      	beq.n	1ae7a <lv_txt_get_next_line+0xce>
    if(font == NULL) return 0;
   1adc4:	2900      	cmp	r1, #0
   1adc6:	f000 80de 	beq.w	1af86 <lv_txt_get_next_line+0x1da>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1adca:	9b03      	ldr	r3, [sp, #12]
   1adcc:	f013 0302 	ands.w	r3, r3, #2
   1add0:	9304      	str	r3, [sp, #16]
   1add2:	f647 4318 	movw	r3, #31768	; 0x7c18
   1add6:	bf18      	it	ne
   1add8:	4699      	movne	r9, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1adda:	2300      	movs	r3, #0
   1addc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;                                        /* Iterating index into txt */
   1ade0:	930c      	str	r3, [sp, #48]	; 0x30
    while(txt[i] != '\0' && max_width > 0) {
   1ade2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ade4:	9300      	str	r3, [sp, #0]
   1ade6:	eb07 0b03 	add.w	fp, r7, r3
   1adea:	5cfb      	ldrb	r3, [r7, r3]
   1adec:	2b00      	cmp	r3, #0
   1adee:	d03b      	beq.n	1ae68 <lv_txt_get_next_line+0xbc>
   1adf0:	f1b9 0f00 	cmp.w	r9, #0
   1adf4:	dd38      	ble.n	1ae68 <lv_txt_get_next_line+0xbc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1adf6:	9a04      	ldr	r2, [sp, #16]
   1adf8:	f647 4318 	movw	r3, #31768	; 0x7c18
   1adfc:	2a00      	cmp	r2, #0
   1adfe:	bf08      	it	eq
   1ae00:	464b      	moveq	r3, r9
   1ae02:	9306      	str	r3, [sp, #24]
    letter = lv_txt_encoded_next(txt, &i_next);
   1ae04:	4b61      	ldr	r3, [pc, #388]	; (1af8c <lv_txt_get_next_line+0x1e0>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1ae06:	2500      	movs	r5, #0
    letter = lv_txt_encoded_next(txt, &i_next);
   1ae08:	681b      	ldr	r3, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1ae0a:	950f      	str	r5, [sp, #60]	; 0x3c
   1ae0c:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
    letter = lv_txt_encoded_next(txt, &i_next);
   1ae10:	a90e      	add	r1, sp, #56	; 0x38
   1ae12:	4658      	mov	r0, fp
   1ae14:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ae16:	9a03      	ldr	r2, [sp, #12]
    i_next_next = i_next;
   1ae18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ae1a:	930f      	str	r3, [sp, #60]	; 0x3c
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ae1c:	f002 0201 	and.w	r2, r2, #1
    letter = lv_txt_encoded_next(txt, &i_next);
   1ae20:	4680      	mov	r8, r0
    uint32_t break_letter_count = 0; /* Number of characters up to the long word break point */
   1ae22:	9501      	str	r5, [sp, #4]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   1ae24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   1ae28:	46aa      	mov	sl, r5
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   1ae2a:	462e      	mov	r6, r5
    uint32_t letter_next = 0; /* Letter at i_next */
   1ae2c:	462b      	mov	r3, r5
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ae2e:	9208      	str	r2, [sp, #32]
    while(txt[i] != '\0') {
   1ae30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ae32:	f81b 2002 	ldrb.w	r2, [fp, r2]
   1ae36:	bb1a      	cbnz	r2, 1ae80 <lv_txt_get_next_line+0xd4>
    if( break_index == NO_BREAK_FOUND ) {
   1ae38:	1c62      	adds	r2, r4, #1
   1ae3a:	d06f      	beq.n	1af1c <lv_txt_get_next_line+0x170>
    if(word_len < LV_TXT_LINE_BREAK_LONG_LEN) {
   1ae3c:	f1ba 0f0b 	cmp.w	sl, #11
   1ae40:	d879      	bhi.n	1af36 <lv_txt_get_next_line+0x18a>
        if( force ) return break_index;
   1ae42:	9b00      	ldr	r3, [sp, #0]
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	f040 8089 	bne.w	1af5c <lv_txt_get_next_line+0x1b0>
   1ae4a:	b2a4      	uxth	r4, r4
        max_width -= word_w;
   1ae4c:	eba9 0905 	sub.w	r9, r9, r5
   1ae50:	fa0f f989 	sxth.w	r9, r9
        if( advance == 0 ){
   1ae54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ae56:	2c00      	cmp	r4, #0
   1ae58:	f040 8083 	bne.w	1af62 <lv_txt_get_next_line+0x1b6>
            if(i == 0) lv_txt_encoded_next(txt, &i); // prevent inf loops
   1ae5c:	b95b      	cbnz	r3, 1ae76 <lv_txt_get_next_line+0xca>
   1ae5e:	4b4b      	ldr	r3, [pc, #300]	; (1af8c <lv_txt_get_next_line+0x1e0>)
   1ae60:	a90c      	add	r1, sp, #48	; 0x30
   1ae62:	681b      	ldr	r3, [r3, #0]
   1ae64:	4638      	mov	r0, r7
   1ae66:	4798      	blx	r3
    if(i == 0) {
   1ae68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ae6a:	b923      	cbnz	r3, 1ae76 <lv_txt_get_next_line+0xca>
        lv_txt_encoded_next(txt, &i);
   1ae6c:	4b47      	ldr	r3, [pc, #284]	; (1af8c <lv_txt_get_next_line+0x1e0>)
   1ae6e:	a90c      	add	r1, sp, #48	; 0x30
   1ae70:	681b      	ldr	r3, [r3, #0]
   1ae72:	4638      	mov	r0, r7
   1ae74:	4798      	blx	r3
    return i;
   1ae76:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
}
   1ae7a:	b011      	add	sp, #68	; 0x44
   1ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
   1ae80:	4b42      	ldr	r3, [pc, #264]	; (1af8c <lv_txt_get_next_line+0x1e0>)
   1ae82:	a90f      	add	r1, sp, #60	; 0x3c
   1ae84:	681b      	ldr	r3, [r3, #0]
   1ae86:	4658      	mov	r0, fp
   1ae88:	4798      	blx	r3
        word_len++;
   1ae8a:	f10a 0201 	add.w	r2, sl, #1
   1ae8e:	9205      	str	r2, [sp, #20]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ae90:	9a08      	ldr	r2, [sp, #32]
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
   1ae92:	4603      	mov	r3, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ae94:	b17a      	cbz	r2, 1aeb6 <lv_txt_get_next_line+0x10a>
   1ae96:	9009      	str	r0, [sp, #36]	; 0x24
            if(lv_txt_is_cmd(cmd_state, letter) != false) {
   1ae98:	4641      	mov	r1, r8
   1ae9a:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   1ae9e:	f009 fd7a 	bl	24996 <lv_txt_is_cmd>
   1aea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aea4:	b138      	cbz	r0, 1aeb6 <lv_txt_get_next_line+0x10a>
        i = i_next;
   1aea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1aea8:	920d      	str	r2, [sp, #52]	; 0x34
        i_next = i_next_next;
   1aeaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aeac:	920e      	str	r2, [sp, #56]	; 0x38
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
   1aeae:	f8dd a014 	ldr.w	sl, [sp, #20]
   1aeb2:	4698      	mov	r8, r3
   1aeb4:	e7bc      	b.n	1ae30 <lv_txt_get_next_line+0x84>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1aeb6:	461a      	mov	r2, r3
   1aeb8:	4641      	mov	r1, r8
   1aeba:	9802      	ldr	r0, [sp, #8]
   1aebc:	9309      	str	r3, [sp, #36]	; 0x24
   1aebe:	f009 fffd 	bl	24ebc <lv_font_get_glyph_width>
   1aec2:	b200      	sxth	r0, r0
        cur_w += letter_w;
   1aec4:	4406      	add	r6, r0
        if(break_index == NO_BREAK_FOUND && cur_w > max_width) {
   1aec6:	1c63      	adds	r3, r4, #1
        cur_w += letter_w;
   1aec8:	b236      	sxth	r6, r6
        if(break_index == NO_BREAK_FOUND && cur_w > max_width) {
   1aeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aecc:	d105      	bne.n	1aeda <lv_txt_get_next_line+0x12e>
   1aece:	9a06      	ldr	r2, [sp, #24]
   1aed0:	4296      	cmp	r6, r2
            break_index = i; 
   1aed2:	bfc4      	itt	gt
   1aed4:	9c0d      	ldrgt	r4, [sp, #52]	; 0x34
   1aed6:	f8cd a004 	strgt.w	sl, [sp, #4]
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   1aeda:	f1b8 0f0a 	cmp.w	r8, #10
   1aede:	d017      	beq.n	1af10 <lv_txt_get_next_line+0x164>
   1aee0:	f1b8 0f0d 	cmp.w	r8, #13
   1aee4:	d014      	beq.n	1af10 <lv_txt_get_next_line+0x164>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   1aee6:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 1af94 <lv_txt_get_next_line+0x1e8>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   1aeea:	2200      	movs	r2, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   1aeec:	b2d1      	uxtb	r1, r2
   1aeee:	f81c 1001 	ldrb.w	r1, [ip, r1]
   1aef2:	b949      	cbnz	r1, 1af08 <lv_txt_get_next_line+0x15c>
        if( word_w_ptr != NULL && break_index == NO_BREAK_FOUND ) *word_w_ptr = cur_w;
   1aef4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1aef8:	bf08      	it	eq
   1aefa:	4635      	moveq	r5, r6
        if(letter_w > 0) {
   1aefc:	2800      	cmp	r0, #0
   1aefe:	ddd2      	ble.n	1aea6 <lv_txt_get_next_line+0xfa>
            cur_w += letter_space;
   1af00:	9a07      	ldr	r2, [sp, #28]
   1af02:	4416      	add	r6, r2
   1af04:	b236      	sxth	r6, r6
   1af06:	e7ce      	b.n	1aea6 <lv_txt_get_next_line+0xfa>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   1af08:	4588      	cmp	r8, r1
   1af0a:	f102 0201 	add.w	r2, r2, #1
   1af0e:	d1ed      	bne.n	1aeec <lv_txt_get_next_line+0x140>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   1af10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1af12:	2a00      	cmp	r2, #0
   1af14:	d190      	bne.n	1ae38 <lv_txt_get_next_line+0x8c>
   1af16:	1c61      	adds	r1, r4, #1
   1af18:	d190      	bne.n	1ae3c <lv_txt_get_next_line+0x90>
   1af1a:	4635      	mov	r5, r6
        if( word_len == 0 || (letter == '\r' && letter_next == '\n') ) i = i_next;
   1af1c:	f1ba 0f00 	cmp.w	sl, #0
   1af20:	d004      	beq.n	1af2c <lv_txt_get_next_line+0x180>
   1af22:	f1b8 0f0d 	cmp.w	r8, #13
   1af26:	d103      	bne.n	1af30 <lv_txt_get_next_line+0x184>
   1af28:	2b0a      	cmp	r3, #10
   1af2a:	d101      	bne.n	1af30 <lv_txt_get_next_line+0x184>
   1af2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1af2e:	930d      	str	r3, [sp, #52]	; 0x34
    return i;
   1af30:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   1af34:	e78a      	b.n	1ae4c <lv_txt_get_next_line+0xa0>
    if(break_letter_count < LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN) {
   1af36:	9b01      	ldr	r3, [sp, #4]
   1af38:	2b02      	cmp	r3, #2
   1af3a:	d982      	bls.n	1ae42 <lv_txt_get_next_line+0x96>
        int32_t n_move = LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN - (word_len - break_letter_count);
   1af3c:	9b01      	ldr	r3, [sp, #4]
        i = break_index;
   1af3e:	940d      	str	r4, [sp, #52]	; 0x34
        int32_t n_move = LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN - (word_len - break_letter_count);
   1af40:	3303      	adds	r3, #3
   1af42:	eba3 0a0a 	sub.w	sl, r3, sl
        for(;n_move>0; n_move--){
   1af46:	f1ba 0f00 	cmp.w	sl, #0
   1af4a:	ddf1      	ble.n	1af30 <lv_txt_get_next_line+0x184>
            lv_txt_encoded_prev(txt, &i);
   1af4c:	4b10      	ldr	r3, [pc, #64]	; (1af90 <lv_txt_get_next_line+0x1e4>)
   1af4e:	a90d      	add	r1, sp, #52	; 0x34
   1af50:	681b      	ldr	r3, [r3, #0]
   1af52:	4658      	mov	r0, fp
   1af54:	4798      	blx	r3
        for(;n_move>0; n_move--){
   1af56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1af5a:	e7f4      	b.n	1af46 <lv_txt_get_next_line+0x19a>
        if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
   1af5c:	2500      	movs	r5, #0
        return 0;
   1af5e:	462c      	mov	r4, r5
   1af60:	e774      	b.n	1ae4c <lv_txt_get_next_line+0xa0>
        i += advance;
   1af62:	441c      	add	r4, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
   1af64:	783b      	ldrb	r3, [r7, #0]
        i += advance;
   1af66:	940c      	str	r4, [sp, #48]	; 0x30
        if(txt[0] == '\n' || txt[0] == '\r') break;
   1af68:	2b0a      	cmp	r3, #10
   1af6a:	f43f af7d 	beq.w	1ae68 <lv_txt_get_next_line+0xbc>
   1af6e:	2b0d      	cmp	r3, #13
   1af70:	f43f af7a 	beq.w	1ae68 <lv_txt_get_next_line+0xbc>
        if(txt[i] == '\n' || txt[i] == '\r'){
   1af74:	5d3b      	ldrb	r3, [r7, r4]
   1af76:	2b0a      	cmp	r3, #10
   1af78:	d002      	beq.n	1af80 <lv_txt_get_next_line+0x1d4>
   1af7a:	2b0d      	cmp	r3, #13
   1af7c:	f47f af31 	bne.w	1ade2 <lv_txt_get_next_line+0x36>
            i++;  /* Include the following newline in the current line */
   1af80:	3401      	adds	r4, #1
   1af82:	940c      	str	r4, [sp, #48]	; 0x30
            break;
   1af84:	e770      	b.n	1ae68 <lv_txt_get_next_line+0xbc>
    if(txt == NULL) return 0;
   1af86:	9802      	ldr	r0, [sp, #8]
   1af88:	e777      	b.n	1ae7a <lv_txt_get_next_line+0xce>
   1af8a:	bf00      	nop
   1af8c:	2000e388 	.word	0x2000e388
   1af90:	2000e38c 	.word	0x2000e38c
   1af94:	0002a1c8 	.word	0x0002a1c8

0001af98 <lv_log_register_print_cb>:
 * and send the formatted log message to a consol or serial port.
 * @param print_cb a function pointer to print a log
 */
void lv_log_register_print_cb(lv_log_print_g_cb_t print_cb)
{
    custom_print_cb = print_cb;
   1af98:	4b01      	ldr	r3, [pc, #4]	; (1afa0 <lv_log_register_print_cb+0x8>)
   1af9a:	6018      	str	r0, [r3, #0]
}
   1af9c:	4770      	bx	lr
   1af9e:	bf00      	nop
   1afa0:	20001dd4 	.word	0x20001dd4

0001afa4 <lv_log_add>:
 * @param file name of the file when the log added
 * @param line line number in the source code where the log added
 * @param dsc description of the log
 */
void lv_log_add(lv_log_level_t level, const char * file, int line, const char * dsc)
{
   1afa4:	b410      	push	{r4}
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
   1afa6:	1e44      	subs	r4, r0, #1
   1afa8:	b2e4      	uxtb	r4, r4
   1afaa:	2c03      	cmp	r4, #3
   1afac:	d805      	bhi.n	1afba <lv_log_add+0x16>

#if LV_LOG_PRINTF
        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error"};
        printf("%s: %s \t(%s #%d)\n", lvl_prefix[level], dsc, file, line);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, dsc);
   1afae:	4c04      	ldr	r4, [pc, #16]	; (1afc0 <lv_log_add+0x1c>)
   1afb0:	6824      	ldr	r4, [r4, #0]
   1afb2:	b114      	cbz	r4, 1afba <lv_log_add+0x16>
   1afb4:	46a4      	mov	ip, r4
#endif
    }
}
   1afb6:	bc10      	pop	{r4}
        if(custom_print_cb) custom_print_cb(level, file, line, dsc);
   1afb8:	4760      	bx	ip
}
   1afba:	bc10      	pop	{r4}
   1afbc:	4770      	bx	lr
   1afbe:	bf00      	nop
   1afc0:	20001dd4 	.word	0x20001dd4

0001afc4 <lv_label_revert_dots>:

    lv_obj_invalidate(label);
}

static void lv_label_revert_dots(lv_obj_t * label)
{
   1afc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afc8:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1afca:	f008 f9a1 	bl	23310 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   1afce:	7b83      	ldrb	r3, [r0, #14]
   1afd0:	f003 0307 	and.w	r3, r3, #7
   1afd4:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1afd6:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   1afd8:	d126      	bne.n	1b028 <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
   1afda:	8901      	ldrh	r1, [r0, #8]
   1afdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1afe0:	4299      	cmp	r1, r3
   1afe2:	d021      	beq.n	1b028 <lv_label_revert_dots+0x64>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
   1afe4:	4b12      	ldr	r3, [pc, #72]	; (1b030 <lv_label_revert_dots+0x6c>)
   1afe6:	6800      	ldr	r0, [r0, #0]
   1afe8:	681b      	ldr	r3, [r3, #0]
   1afea:	3903      	subs	r1, #3
   1afec:	4798      	blx	r3
   1afee:	4680      	mov	r8, r0
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1aff0:	4628      	mov	r0, r5
   1aff2:	f008 f98d 	bl	23310 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
   1aff6:	7bc3      	ldrb	r3, [r0, #15]
   1aff8:	079b      	lsls	r3, r3, #30
        return ext->dot.tmp_ptr;
   1affa:	bf4c      	ite	mi
   1affc:	6840      	ldrmi	r0, [r0, #4]
    } else {
        return ext->dot.tmp;
   1affe:	3004      	addpl	r0, #4
    while(ext->text[byte_i + i] != '\0') {
   1b000:	2100      	movs	r1, #0
   1b002:	b2ce      	uxtb	r6, r1
   1b004:	eb06 0308 	add.w	r3, r6, r8
   1b008:	6822      	ldr	r2, [r4, #0]
   1b00a:	5d86      	ldrb	r6, [r0, r6]
   1b00c:	f812 c003 	ldrb.w	ip, [r2, r3]
   1b010:	18d7      	adds	r7, r2, r3
   1b012:	3101      	adds	r1, #1
   1b014:	f1bc 0f00 	cmp.w	ip, #0
   1b018:	d108      	bne.n	1b02c <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
   1b01a:	703e      	strb	r6, [r7, #0]
    lv_label_dot_tmp_free(label);
   1b01c:	4628      	mov	r0, r5
   1b01e:	f009 fd4a 	bl	24ab6 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
   1b022:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b026:	8123      	strh	r3, [r4, #8]
}
   1b028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
   1b02c:	54d6      	strb	r6, [r2, r3]
        i++;
   1b02e:	e7e8      	b.n	1b002 <lv_label_revert_dots+0x3e>
   1b030:	2000e380 	.word	0x2000e380

0001b034 <lv_label_set_dot_tmp>:
{
   1b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b036:	4616      	mov	r6, r2
   1b038:	4604      	mov	r4, r0
   1b03a:	460f      	mov	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1b03c:	f008 f968 	bl	23310 <lv_obj_get_ext_attr>
   1b040:	4605      	mov	r5, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
   1b042:	4620      	mov	r0, r4
   1b044:	f009 fd37 	bl	24ab6 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
   1b048:	2e04      	cmp	r6, #4
   1b04a:	d91b      	bls.n	1b084 <lv_label_set_dot_tmp+0x50>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
   1b04c:	1c70      	adds	r0, r6, #1
   1b04e:	f7ff fde7 	bl	1ac20 <lv_mem_alloc>
   1b052:	4604      	mov	r4, r0
   1b054:	6068      	str	r0, [r5, #4]
        if(ext->dot.tmp_ptr == NULL) {
   1b056:	b940      	cbnz	r0, 1b06a <lv_label_set_dot_tmp+0x36>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
   1b058:	2003      	movs	r0, #3
   1b05a:	4b0f      	ldr	r3, [pc, #60]	; (1b098 <lv_label_set_dot_tmp+0x64>)
   1b05c:	490f      	ldr	r1, [pc, #60]	; (1b09c <lv_label_set_dot_tmp+0x68>)
   1b05e:	f240 526e 	movw	r2, #1390	; 0x56e
   1b062:	f7ff ff9f 	bl	1afa4 <lv_log_add>
   1b066:	4620      	mov	r0, r4
}
   1b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(ext->dot.tmp_ptr, data, len);
   1b06a:	4632      	mov	r2, r6
   1b06c:	4639      	mov	r1, r7
   1b06e:	f004 fac3 	bl	1f5f8 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
   1b072:	686b      	ldr	r3, [r5, #4]
   1b074:	2200      	movs	r2, #0
   1b076:	559a      	strb	r2, [r3, r6]
        ext->dot_tmp_alloc    = true;
   1b078:	7beb      	ldrb	r3, [r5, #15]
   1b07a:	f043 0302 	orr.w	r3, r3, #2
   1b07e:	73eb      	strb	r3, [r5, #15]
    return true;
   1b080:	2001      	movs	r0, #1
   1b082:	e7f1      	b.n	1b068 <lv_label_set_dot_tmp+0x34>
        ext->dot_tmp_alloc = false;
   1b084:	7beb      	ldrb	r3, [r5, #15]
   1b086:	f36f 0341 	bfc	r3, #1, #1
   1b08a:	73eb      	strb	r3, [r5, #15]
        memcpy(ext->dot.tmp, data, len);
   1b08c:	4632      	mov	r2, r6
   1b08e:	4639      	mov	r1, r7
   1b090:	1d28      	adds	r0, r5, #4
   1b092:	f004 fab1 	bl	1f5f8 <memcpy>
   1b096:	e7f3      	b.n	1b080 <lv_label_set_dot_tmp+0x4c>
   1b098:	0002a1e3 	.word	0x0002a1e3
   1b09c:	0002a20d 	.word	0x0002a20d

0001b0a0 <lv_label_get_letter_on>:
{
   1b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0a4:	b08b      	sub	sp, #44	; 0x2c
   1b0a6:	4680      	mov	r8, r0
   1b0a8:	9107      	str	r1, [sp, #28]
    const char * txt         = lv_label_get_text(label);
   1b0aa:	f009 fd3f 	bl	24b2c <lv_label_get_text>
   1b0ae:	9003      	str	r0, [sp, #12]
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
   1b0b0:	4640      	mov	r0, r8
   1b0b2:	f008 f92d 	bl	23310 <lv_obj_get_ext_attr>
   1b0b6:	4604      	mov	r4, r0
    lv_coord_t max_w         = lv_obj_get_width(label);
   1b0b8:	4640      	mov	r0, r8
   1b0ba:	f008 f8bb 	bl	23234 <lv_obj_get_width>
   1b0be:	9005      	str	r0, [sp, #20]
    const lv_style_t * style = lv_obj_get_style(label);
   1b0c0:	4640      	mov	r0, r8
   1b0c2:	f7fe f8c3 	bl	1924c <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
   1b0c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b0c8:	9304      	str	r3, [sp, #16]
    uint8_t letter_height    = lv_font_get_line_height(font);
   1b0ca:	7a1b      	ldrb	r3, [r3, #8]
   1b0cc:	9306      	str	r3, [sp, #24]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1b0ce:	7ba3      	ldrb	r3, [r4, #14]
    const lv_style_t * style = lv_obj_get_style(label);
   1b0d0:	4683      	mov	fp, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1b0d2:	f3c3 1680 	ubfx	r6, r3, #6, #1
    lv_label_align_t align = lv_label_get_align(label);
   1b0d6:	4640      	mov	r0, r8
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1b0d8:	061b      	lsls	r3, r3, #24
   1b0da:	bf48      	it	mi
   1b0dc:	f046 0602 	orrmi.w	r6, r6, #2
    lv_label_align_t align = lv_label_get_align(label);
   1b0e0:	f009 fd30 	bl	24b44 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1b0e4:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
   1b0e6:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1b0e8:	d113      	bne.n	1b112 <lv_label_get_letter_on+0x72>
   1b0ea:	f046 0604 	orr.w	r6, r6, #4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   1b0ee:	7ba3      	ldrb	r3, [r4, #14]
        max_w = LV_COORD_MAX;
   1b0f0:	9a05      	ldr	r2, [sp, #20]
   1b0f2:	f013 0f07 	tst.w	r3, #7
   1b0f6:	f647 4318 	movw	r3, #31768	; 0x7c18
   1b0fa:	bf08      	it	eq
   1b0fc:	461a      	moveq	r2, r3
   1b0fe:	f04f 0a00 	mov.w	sl, #0
   1b102:	9205      	str	r2, [sp, #20]
   1b104:	4655      	mov	r5, sl
    while(txt[line_start] != '\0') {
   1b106:	9b03      	ldr	r3, [sp, #12]
   1b108:	195f      	adds	r7, r3, r5
   1b10a:	5d5b      	ldrb	r3, [r3, r5]
   1b10c:	b933      	cbnz	r3, 1b11c <lv_label_get_letter_on+0x7c>
   1b10e:	462c      	mov	r4, r5
   1b110:	e021      	b.n	1b156 <lv_label_get_letter_on+0xb6>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   1b112:	2802      	cmp	r0, #2
   1b114:	bf08      	it	eq
   1b116:	f046 0608 	orreq.w	r6, r6, #8
   1b11a:	e7e8      	b.n	1b0ee <lv_label_get_letter_on+0x4e>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   1b11c:	f9bb 2038 	ldrsh.w	r2, [fp, #56]	; 0x38
   1b120:	9600      	str	r6, [sp, #0]
   1b122:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
   1b126:	4638      	mov	r0, r7
   1b128:	f7ff fe40 	bl	1adac <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) {
   1b12c:	9b07      	ldr	r3, [sp, #28]
   1b12e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1b132:	9b06      	ldr	r3, [sp, #24]
   1b134:	4453      	add	r3, sl
   1b136:	429a      	cmp	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   1b138:	eb00 0405 	add.w	r4, r0, r5
        if(pos->y <= y + letter_height) {
   1b13c:	dc3a      	bgt.n	1b1b4 <lv_label_get_letter_on+0x114>
            letter = lv_txt_encoded_prev(txt, &tmp);
   1b13e:	4b4c      	ldr	r3, [pc, #304]	; (1b270 <lv_label_get_letter_on+0x1d0>)
            uint32_t tmp = new_line_start;
   1b140:	9409      	str	r4, [sp, #36]	; 0x24
            letter = lv_txt_encoded_prev(txt, &tmp);
   1b142:	681b      	ldr	r3, [r3, #0]
   1b144:	9803      	ldr	r0, [sp, #12]
   1b146:	a909      	add	r1, sp, #36	; 0x24
   1b148:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0' ) new_line_start++;
   1b14a:	280a      	cmp	r0, #10
   1b14c:	d003      	beq.n	1b156 <lv_label_get_letter_on+0xb6>
   1b14e:	9b03      	ldr	r3, [sp, #12]
   1b150:	5d1b      	ldrb	r3, [r3, r4]
   1b152:	b903      	cbnz	r3, 1b156 <lv_label_get_letter_on+0xb6>
   1b154:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
   1b156:	f1b9 0f01 	cmp.w	r9, #1
   1b15a:	d134      	bne.n	1b1c6 <lv_label_get_letter_on+0x126>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, style->text.letter_space, flag);
   1b15c:	1b61      	subs	r1, r4, r5
   1b15e:	f9bb 3038 	ldrsh.w	r3, [fp, #56]	; 0x38
   1b162:	9a04      	ldr	r2, [sp, #16]
   1b164:	9600      	str	r6, [sp, #0]
   1b166:	b289      	uxth	r1, r1
   1b168:	4638      	mov	r0, r7
   1b16a:	f7ff fdcf 	bl	1ad0c <lv_txt_get_width>
   1b16e:	4681      	mov	r9, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
   1b170:	4640      	mov	r0, r8
   1b172:	f008 f85f 	bl	23234 <lv_obj_get_width>
   1b176:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
   1b17a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1b17e:	ea4f 0969 	mov.w	r9, r9, asr #1
   1b182:	ebc9 0960 	rsb	r9, r9, r0, asr #1
   1b186:	fa0f f889 	sxth.w	r8, r9
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1b18a:	2300      	movs	r3, #0
   1b18c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i = 0;
   1b190:	9309      	str	r3, [sp, #36]	; 0x24
    if(new_line_start > 0) {
   1b192:	2c00      	cmp	r4, #0
   1b194:	d165      	bne.n	1b262 <lv_label_get_letter_on+0x1c2>
    logical_pos = lv_txt_encoded_get_char_id(bidi_txt, i);
   1b196:	4e37      	ldr	r6, [pc, #220]	; (1b274 <lv_label_get_letter_on+0x1d4>)
   1b198:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b19a:	6833      	ldr	r3, [r6, #0]
   1b19c:	4638      	mov	r0, r7
   1b19e:	4798      	blx	r3
    return  logical_pos + lv_txt_encoded_get_char_id(txt, line_start);
   1b1a0:	6833      	ldr	r3, [r6, #0]
    logical_pos = lv_txt_encoded_get_char_id(bidi_txt, i);
   1b1a2:	4604      	mov	r4, r0
    return  logical_pos + lv_txt_encoded_get_char_id(txt, line_start);
   1b1a4:	4629      	mov	r1, r5
   1b1a6:	9803      	ldr	r0, [sp, #12]
   1b1a8:	4798      	blx	r3
   1b1aa:	4420      	add	r0, r4
}
   1b1ac:	b280      	uxth	r0, r0
   1b1ae:	b00b      	add	sp, #44	; 0x2c
   1b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + style->text.line_space;
   1b1b4:	f8bb 303a 	ldrh.w	r3, [fp, #58]	; 0x3a
   1b1b8:	9a06      	ldr	r2, [sp, #24]
   1b1ba:	4413      	add	r3, r2
   1b1bc:	449a      	add	sl, r3
   1b1be:	fa0f fa8a 	sxth.w	sl, sl
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   1b1c2:	4625      	mov	r5, r4
   1b1c4:	e79f      	b.n	1b106 <lv_label_get_letter_on+0x66>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
   1b1c6:	f1b9 0f02 	cmp.w	r9, #2
   1b1ca:	d111      	bne.n	1b1f0 <lv_label_get_letter_on+0x150>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, style->text.letter_space, flag);
   1b1cc:	1b61      	subs	r1, r4, r5
   1b1ce:	f9bb 3038 	ldrsh.w	r3, [fp, #56]	; 0x38
   1b1d2:	9a04      	ldr	r2, [sp, #16]
   1b1d4:	9600      	str	r6, [sp, #0]
   1b1d6:	b289      	uxth	r1, r1
   1b1d8:	4638      	mov	r0, r7
   1b1da:	f7ff fd97 	bl	1ad0c <lv_txt_get_width>
   1b1de:	4681      	mov	r9, r0
        x += lv_obj_get_width(label) - line_w;
   1b1e0:	4640      	mov	r0, r8
   1b1e2:	f008 f827 	bl	23234 <lv_obj_get_width>
   1b1e6:	eba0 0009 	sub.w	r0, r0, r9
   1b1ea:	fa0f f880 	sxth.w	r8, r0
   1b1ee:	e7cc      	b.n	1b18a <lv_label_get_letter_on+0xea>
    lv_coord_t x = 0;
   1b1f0:	f04f 0800 	mov.w	r8, #0
   1b1f4:	e7c9      	b.n	1b18a <lv_label_get_letter_on+0xea>
                if(lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
   1b1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b1f8:	9006      	str	r0, [sp, #24]
   1b1fa:	5cf9      	ldrb	r1, [r7, r3]
   1b1fc:	f10d 0023 	add.w	r0, sp, #35	; 0x23
   1b200:	f009 fbc9 	bl	24996 <lv_txt_is_cmd>
   1b204:	9a06      	ldr	r2, [sp, #24]
   1b206:	b190      	cbz	r0, 1b22e <lv_label_get_letter_on+0x18e>
        while(i + line_start < new_line_start) {
   1b208:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b20a:	442b      	add	r3, r5
   1b20c:	42a3      	cmp	r3, r4
   1b20e:	d2c2      	bcs.n	1b196 <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(bidi_txt, &i);
   1b210:	f8d9 3000 	ldr.w	r3, [r9]
   1b214:	a909      	add	r1, sp, #36	; 0x24
   1b216:	4638      	mov	r0, r7
   1b218:	4798      	blx	r3
   1b21a:	9005      	str	r0, [sp, #20]
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   1b21c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b21e:	f8d9 3000 	ldr.w	r3, [r9]
   1b222:	2100      	movs	r1, #0
   1b224:	4438      	add	r0, r7
   1b226:	4798      	blx	r3
   1b228:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1b22a:	2e00      	cmp	r6, #0
   1b22c:	d1e3      	bne.n	1b1f6 <lv_label_get_letter_on+0x156>
            x += lv_font_get_glyph_width(font, letter, letter_next);
   1b22e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b232:	f009 fe43 	bl	24ebc <lv_font_get_glyph_width>
            if(pos->x < x || i + line_start == new_line_start) {
   1b236:	9b07      	ldr	r3, [sp, #28]
            x += lv_font_get_glyph_width(font, letter, letter_next);
   1b238:	4480      	add	r8, r0
            if(pos->x < x || i + line_start == new_line_start) {
   1b23a:	f9b3 3000 	ldrsh.w	r3, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
   1b23e:	fa0f f888 	sxth.w	r8, r8
            if(pos->x < x || i + line_start == new_line_start) {
   1b242:	4543      	cmp	r3, r8
   1b244:	da02      	bge.n	1b24c <lv_label_get_letter_on+0x1ac>
                i = i_act;
   1b246:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
                break;
   1b24a:	e7a4      	b.n	1b196 <lv_label_get_letter_on+0xf6>
            if(pos->x < x || i + line_start == new_line_start) {
   1b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b24e:	195a      	adds	r2, r3, r5
   1b250:	42a2      	cmp	r2, r4
   1b252:	d0f8      	beq.n	1b246 <lv_label_get_letter_on+0x1a6>
            x += style->text.letter_space;
   1b254:	f8bb 0038 	ldrh.w	r0, [fp, #56]	; 0x38
   1b258:	4480      	add	r8, r0
   1b25a:	fa0f f888 	sxth.w	r8, r8
            i_act = i;
   1b25e:	469a      	mov	sl, r3
   1b260:	e7d2      	b.n	1b208 <lv_label_get_letter_on+0x168>
    uint32_t i_act = i;
   1b262:	469a      	mov	sl, r3
            letter = lv_txt_encoded_next(bidi_txt, &i);
   1b264:	f8df 9010 	ldr.w	r9, [pc, #16]	; 1b278 <lv_label_get_letter_on+0x1d8>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1b268:	f006 0601 	and.w	r6, r6, #1
   1b26c:	e7cc      	b.n	1b208 <lv_label_get_letter_on+0x168>
   1b26e:	bf00      	nop
   1b270:	2000e38c 	.word	0x2000e38c
   1b274:	2000e384 	.word	0x2000e384
   1b278:	2000e388 	.word	0x2000e388

0001b27c <lv_label_refr_text>:
{
   1b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b280:	b089      	sub	sp, #36	; 0x24
   1b282:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1b284:	f008 f844 	bl	23310 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
   1b288:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1b28a:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
   1b28c:	b373      	cbz	r3, 1b2ec <lv_label_refr_text+0x70>
    lv_coord_t max_w         = lv_obj_get_width(label);
   1b28e:	4628      	mov	r0, r5
   1b290:	f007 ffd0 	bl	23234 <lv_obj_get_width>
   1b294:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
   1b296:	4628      	mov	r0, r5
   1b298:	f7fd ffd8 	bl	1924c <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   1b29c:	7ba3      	ldrb	r3, [r4, #14]
    const lv_font_t * font   = style->text.font;
   1b29e:	6b42      	ldr	r2, [r0, #52]	; 0x34
        max_w = LV_COORD_MAX;
   1b2a0:	f013 0f07 	tst.w	r3, #7
   1b2a4:	f647 4118 	movw	r1, #31768	; 0x7c18
   1b2a8:	bf08      	it	eq
   1b2aa:	460f      	moveq	r7, r1
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1b2ac:	f3c3 1180 	ubfx	r1, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1b2b0:	061b      	lsls	r3, r3, #24
   1b2b2:	bf48      	it	mi
   1b2b4:	f041 0102 	orrmi.w	r1, r1, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
   1b2b8:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
   1b2bc:	e9cd 7101 	strd	r7, r1, [sp, #4]
   1b2c0:	f9b0 103a 	ldrsh.w	r1, [r0, #58]	; 0x3a
   1b2c4:	9100      	str	r1, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(label);
   1b2c6:	4606      	mov	r6, r0
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
   1b2c8:	6821      	ldr	r1, [r4, #0]
   1b2ca:	a805      	add	r0, sp, #20
   1b2cc:	f009 fb80 	bl	249d0 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   1b2d0:	7ba3      	ldrb	r3, [r4, #14]
   1b2d2:	f013 0307 	ands.w	r3, r3, #7
   1b2d6:	d10c      	bne.n	1b2f2 <lv_label_refr_text+0x76>
        lv_obj_set_size(label, size.x, size.y);
   1b2d8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   1b2dc:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
   1b2e0:	4628      	mov	r0, r5
   1b2e2:	f007 fdf0 	bl	22ec6 <lv_obj_set_size>
    lv_obj_invalidate(label);
   1b2e6:	4628      	mov	r0, r5
   1b2e8:	f007 fd4b 	bl	22d82 <lv_obj_invalidate>
}
   1b2ec:	b009      	add	sp, #36	; 0x24
   1b2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
   1b2f2:	1eda      	subs	r2, r3, #3
   1b2f4:	2a01      	cmp	r2, #1
   1b2f6:	d9f6      	bls.n	1b2e6 <lv_label_refr_text+0x6a>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
   1b2f8:	2b02      	cmp	r3, #2
   1b2fa:	d16e      	bne.n	1b3da <lv_label_refr_text+0x15e>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
   1b2fc:	4628      	mov	r0, r5
   1b2fe:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
   1b302:	f007 ff9d 	bl	23240 <lv_obj_get_height>
   1b306:	4287      	cmp	r7, r0
   1b308:	dc03      	bgt.n	1b312 <lv_label_refr_text+0x96>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   1b30a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b30e:	8123      	strh	r3, [r4, #8]
   1b310:	e7e9      	b.n	1b2e6 <lv_label_refr_text+0x6a>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
   1b312:	4b36      	ldr	r3, [pc, #216]	; (1b3ec <lv_label_refr_text+0x170>)
   1b314:	6820      	ldr	r0, [r4, #0]
   1b316:	681b      	ldr	r3, [r3, #0]
   1b318:	4798      	blx	r3
   1b31a:	2803      	cmp	r0, #3
   1b31c:	d9f5      	bls.n	1b30a <lv_label_refr_text+0x8e>
            p.x = lv_obj_get_width(label) -
   1b31e:	4628      	mov	r0, r5
   1b320:	f007 ff88 	bl	23234 <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   1b324:	222e      	movs	r2, #46	; 0x2e
   1b326:	4611      	mov	r1, r2
            p.x = lv_obj_get_width(label) -
   1b328:	4607      	mov	r7, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   1b32a:	6b70      	ldr	r0, [r6, #52]	; 0x34
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   1b32c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1b3f4 <lv_label_refr_text+0x178>
                lv_txt_encoded_next(ext->text, &byte_id);
   1b330:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 1b3f8 <lv_label_refr_text+0x17c>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   1b334:	f009 fdc2 	bl	24ebc <lv_font_get_glyph_width>
   1b338:	f9b6 3038 	ldrsh.w	r3, [r6, #56]	; 0x38
   1b33c:	4418      	add	r0, r3
            p.x = lv_obj_get_width(label) -
   1b33e:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   1b342:	4438      	add	r0, r7
   1b344:	f8ad 0018 	strh.w	r0, [sp, #24]
            p.y = lv_obj_get_height(label);
   1b348:	4628      	mov	r0, r5
   1b34a:	f007 ff79 	bl	23240 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
   1b34e:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1b350:	f9b6 103a 	ldrsh.w	r1, [r6, #58]	; 0x3a
   1b354:	7a1b      	ldrb	r3, [r3, #8]
   1b356:	440b      	add	r3, r1
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
   1b358:	1a42      	subs	r2, r0, r1
            p.y -= p.y %
   1b35a:	fb90 f1f3 	sdiv	r1, r0, r3
   1b35e:	fb03 0311 	mls	r3, r3, r1, r0
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
   1b362:	1ad2      	subs	r2, r2, r3
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1b364:	a906      	add	r1, sp, #24
   1b366:	4628      	mov	r0, r5
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
   1b368:	f8ad 201a 	strh.w	r2, [sp, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1b36c:	f7ff fe98 	bl	1b0a0 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
   1b370:	4b1f      	ldr	r3, [pc, #124]	; (1b3f0 <lv_label_refr_text+0x174>)
   1b372:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1b374:	4607      	mov	r7, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
   1b376:	681b      	ldr	r3, [r3, #0]
   1b378:	6820      	ldr	r0, [r4, #0]
   1b37a:	4798      	blx	r3
   1b37c:	f04f 0804 	mov.w	r8, #4
   1b380:	4606      	mov	r6, r0
   1b382:	9007      	str	r0, [sp, #28]
            uint8_t len          = 0;
   1b384:	f04f 0900 	mov.w	r9, #0
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   1b388:	9907      	ldr	r1, [sp, #28]
   1b38a:	6820      	ldr	r0, [r4, #0]
   1b38c:	f8da 3000 	ldr.w	r3, [sl]
   1b390:	4408      	add	r0, r1
   1b392:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
   1b394:	f8db 3000 	ldr.w	r3, [fp]
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   1b398:	4481      	add	r9, r0
                lv_txt_encoded_next(ext->text, &byte_id);
   1b39a:	a907      	add	r1, sp, #28
   1b39c:	6820      	ldr	r0, [r4, #0]
   1b39e:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1b3a0:	f1b8 0801 	subs.w	r8, r8, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   1b3a4:	fa5f f989 	uxtb.w	r9, r9
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1b3a8:	d1ee      	bne.n	1b388 <lv_label_refr_text+0x10c>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
   1b3aa:	6821      	ldr	r1, [r4, #0]
   1b3ac:	464a      	mov	r2, r9
   1b3ae:	4431      	add	r1, r6
   1b3b0:	4628      	mov	r0, r5
   1b3b2:	f7ff fe3f 	bl	1b034 <lv_label_set_dot_tmp>
   1b3b6:	2800      	cmp	r0, #0
   1b3b8:	d095      	beq.n	1b2e6 <lv_label_refr_text+0x6a>
                    ext->text[byte_id_ori + i] = '.';
   1b3ba:	6823      	ldr	r3, [r4, #0]
   1b3bc:	222e      	movs	r2, #46	; 0x2e
   1b3be:	559a      	strb	r2, [r3, r6]
   1b3c0:	6823      	ldr	r3, [r4, #0]
   1b3c2:	4433      	add	r3, r6
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   1b3c4:	3703      	adds	r7, #3
                    ext->text[byte_id_ori + i] = '.';
   1b3c6:	705a      	strb	r2, [r3, #1]
   1b3c8:	6823      	ldr	r3, [r4, #0]
   1b3ca:	4433      	add	r3, r6
   1b3cc:	709a      	strb	r2, [r3, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
   1b3ce:	6823      	ldr	r3, [r4, #0]
   1b3d0:	441e      	add	r6, r3
   1b3d2:	f886 8003 	strb.w	r8, [r6, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   1b3d6:	8127      	strh	r7, [r4, #8]
   1b3d8:	e785      	b.n	1b2e6 <lv_label_refr_text+0x6a>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
   1b3da:	2b01      	cmp	r3, #1
   1b3dc:	d183      	bne.n	1b2e6 <lv_label_refr_text+0x6a>
        lv_obj_set_height(label, size.y);
   1b3de:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
   1b3e2:	4628      	mov	r0, r5
   1b3e4:	f007 fdb9 	bl	22f5a <lv_obj_set_height>
   1b3e8:	e77d      	b.n	1b2e6 <lv_label_refr_text+0x6a>
   1b3ea:	bf00      	nop
   1b3ec:	2000e394 	.word	0x2000e394
   1b3f0:	2000e380 	.word	0x2000e380
   1b3f4:	2000e390 	.word	0x2000e390
   1b3f8:	2000e388 	.word	0x2000e388

0001b3fc <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
   1b3fc:	4b34      	ldr	r3, [pc, #208]	; (1b4d0 <lv_label_signal+0xd4>)
{
   1b3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
   1b402:	681b      	ldr	r3, [r3, #0]
{
   1b404:	4604      	mov	r4, r0
   1b406:	460d      	mov	r5, r1
   1b408:	4617      	mov	r7, r2
    res = ancestor_signal(label, sign, param);
   1b40a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   1b40c:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
   1b40e:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
   1b410:	d118      	bne.n	1b444 <lv_label_signal+0x48>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1b412:	2d07      	cmp	r5, #7
   1b414:	d105      	bne.n	1b422 <lv_label_signal+0x26>
   1b416:	4638      	mov	r0, r7
   1b418:	492e      	ldr	r1, [pc, #184]	; (1b4d4 <lv_label_signal+0xd8>)
}
   1b41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1b41e:	f007 bf79 	b.w	23314 <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1b422:	4620      	mov	r0, r4
   1b424:	f007 ff74 	bl	23310 <lv_obj_get_ext_attr>
   1b428:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   1b42a:	b975      	cbnz	r5, 1b44a <lv_label_signal+0x4e>
        if(ext->static_txt == 0) {
   1b42c:	7b83      	ldrb	r3, [r0, #14]
   1b42e:	f013 0508 	ands.w	r5, r3, #8
   1b432:	d104      	bne.n	1b43e <lv_label_signal+0x42>
            lv_mem_free(ext->text);
   1b434:	6800      	ldr	r0, [r0, #0]
   1b436:	f7ff fc19 	bl	1ac6c <lv_mem_free>
            ext->text = NULL;
   1b43a:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
   1b43e:	4620      	mov	r0, r4
   1b440:	f009 fb39 	bl	24ab6 <lv_label_dot_tmp_free>
}
   1b444:	4630      	mov	r0, r6
   1b446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
   1b44a:	2d04      	cmp	r5, #4
   1b44c:	d106      	bne.n	1b45c <lv_label_signal+0x60>
        lv_label_revert_dots(label);
   1b44e:	4620      	mov	r0, r4
   1b450:	f7ff fdb8 	bl	1afc4 <lv_label_revert_dots>
        lv_label_refr_text(label);
   1b454:	4620      	mov	r0, r4
   1b456:	f7ff ff11 	bl	1b27c <lv_label_refr_text>
   1b45a:	e7f3      	b.n	1b444 <lv_label_signal+0x48>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
   1b45c:	2d02      	cmp	r5, #2
   1b45e:	d114      	bne.n	1b48a <lv_label_signal+0x8e>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b460:	8a23      	ldrh	r3, [r4, #16]
   1b462:	8aa2      	ldrh	r2, [r4, #20]
   1b464:	8839      	ldrh	r1, [r7, #0]
   1b466:	1ad2      	subs	r2, r2, r3
   1b468:	88bb      	ldrh	r3, [r7, #4]
   1b46a:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   1b46c:	b212      	sxth	r2, r2
   1b46e:	b21b      	sxth	r3, r3
   1b470:	429a      	cmp	r2, r3
   1b472:	d1ec      	bne.n	1b44e <lv_label_signal+0x52>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b474:	8a63      	ldrh	r3, [r4, #18]
   1b476:	8ae2      	ldrh	r2, [r4, #22]
   1b478:	8879      	ldrh	r1, [r7, #2]
   1b47a:	1ad2      	subs	r2, r2, r3
   1b47c:	88fb      	ldrh	r3, [r7, #6]
   1b47e:	1a5b      	subs	r3, r3, r1
   1b480:	b212      	sxth	r2, r2
   1b482:	b21b      	sxth	r3, r3
   1b484:	429a      	cmp	r2, r3
   1b486:	d1e2      	bne.n	1b44e <lv_label_signal+0x52>
   1b488:	e7dc      	b.n	1b444 <lv_label_signal+0x48>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   1b48a:	2d06      	cmp	r5, #6
   1b48c:	d1da      	bne.n	1b444 <lv_label_signal+0x48>
        if(ext->body_draw) {
   1b48e:	7bc3      	ldrb	r3, [r0, #15]
   1b490:	f013 0501 	ands.w	r5, r3, #1
   1b494:	d0d6      	beq.n	1b444 <lv_label_signal+0x48>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
   1b496:	4620      	mov	r0, r4
   1b498:	f7fd fed8 	bl	1924c <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
   1b49c:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
   1b4a0:	f9b0 2026 	ldrsh.w	r2, [r0, #38]	; 0x26
   1b4a4:	4293      	cmp	r3, r2
   1b4a6:	bfb8      	it	lt
   1b4a8:	4613      	movlt	r3, r2
   1b4aa:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
   1b4ae:	4293      	cmp	r3, r2
   1b4b0:	bfb8      	it	lt
   1b4b2:	4613      	movlt	r3, r2
   1b4b4:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
   1b4b8:	4293      	cmp	r3, r2
   1b4ba:	bfb8      	it	lt
   1b4bc:	4613      	movlt	r3, r2
   1b4be:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
   1b4c2:	4293      	cmp	r3, r2
   1b4c4:	bfb8      	it	lt
   1b4c6:	4613      	movlt	r3, r2
   1b4c8:	8623      	strh	r3, [r4, #48]	; 0x30
   1b4ca:	462e      	mov	r6, r5
   1b4cc:	e7ba      	b.n	1b444 <lv_label_signal+0x48>
   1b4ce:	bf00      	nop
   1b4d0:	20001e14 	.word	0x20001e14
   1b4d4:	0002a244 	.word	0x0002a244

0001b4d8 <lv_label_create>:
{
   1b4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4dc:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
   1b4de:	f7fd fd85 	bl	18fec <lv_obj_create>
    if(new_label == NULL) return NULL;
   1b4e2:	4604      	mov	r4, r0
   1b4e4:	b918      	cbnz	r0, 1b4ee <lv_label_create+0x16>
   1b4e6:	2400      	movs	r4, #0
}
   1b4e8:	4620      	mov	r0, r4
   1b4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1b4ee:	4d53      	ldr	r5, [pc, #332]	; (1b63c <lv_label_create+0x164>)
   1b4f0:	682b      	ldr	r3, [r5, #0]
   1b4f2:	b913      	cbnz	r3, 1b4fa <lv_label_create+0x22>
   1b4f4:	f007 ff0a 	bl	2330c <lv_obj_get_signal_cb>
   1b4f8:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
   1b4fa:	2110      	movs	r1, #16
   1b4fc:	4620      	mov	r0, r4
   1b4fe:	f007 fc39 	bl	22d74 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
   1b502:	4620      	mov	r0, r4
   1b504:	f007 ff04 	bl	23310 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
   1b508:	4605      	mov	r5, r0
   1b50a:	2800      	cmp	r0, #0
   1b50c:	d0eb      	beq.n	1b4e6 <lv_label_create+0xe>
    ext->text       = NULL;
   1b50e:	2300      	movs	r3, #0
    ext->dot.tmp_ptr   = NULL;
   1b510:	e9c0 3300 	strd	r3, r3, [r0]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   1b514:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ext->offset.y = 0;
   1b518:	68c2      	ldr	r2, [r0, #12]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   1b51a:	6083      	str	r3, [r0, #8]
    ext->offset.y = 0;
   1b51c:	4b48      	ldr	r3, [pc, #288]	; (1b640 <lv_label_create+0x168>)
    lv_obj_set_design_cb(new_label, lv_label_design);
   1b51e:	4949      	ldr	r1, [pc, #292]	; (1b644 <lv_label_create+0x16c>)
    ext->offset.y = 0;
   1b520:	4013      	ands	r3, r2
   1b522:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1b526:	60c3      	str	r3, [r0, #12]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1b528:	4620      	mov	r0, r4
   1b52a:	f007 fc21 	bl	22d70 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
   1b52e:	4946      	ldr	r1, [pc, #280]	; (1b648 <lv_label_create+0x170>)
   1b530:	4620      	mov	r0, r4
   1b532:	f007 fc1b 	bl	22d6c <lv_obj_set_signal_cb>
    if(copy == NULL) {
   1b536:	b9b6      	cbnz	r6, 1b566 <lv_label_create+0x8e>
        lv_obj_set_click(new_label, false);
   1b538:	4631      	mov	r1, r6
   1b53a:	4620      	mov	r0, r4
   1b53c:	f007 fc0f 	bl	22d5e <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
   1b540:	4631      	mov	r1, r6
   1b542:	4620      	mov	r0, r4
   1b544:	f009 fc79 	bl	24e3a <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
   1b548:	4940      	ldr	r1, [pc, #256]	; (1b64c <lv_label_create+0x174>)
   1b54a:	4620      	mov	r0, r4
   1b54c:	f009 fc20 	bl	24d90 <lv_label_set_text>
    lv_obj_set_style(label, style);
   1b550:	4631      	mov	r1, r6
   1b552:	4620      	mov	r0, r4
   1b554:	f007 fd2d 	bl	22fb2 <lv_obj_set_style>
    LV_LOG_INFO("label created");
   1b558:	4b3d      	ldr	r3, [pc, #244]	; (1b650 <lv_label_create+0x178>)
   1b55a:	493e      	ldr	r1, [pc, #248]	; (1b654 <lv_label_create+0x17c>)
   1b55c:	22a1      	movs	r2, #161	; 0xa1
   1b55e:	2001      	movs	r0, #1
   1b560:	f7ff fd20 	bl	1afa4 <lv_log_add>
    return new_label;
   1b564:	e7c0      	b.n	1b4e8 <lv_label_create+0x10>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   1b566:	4630      	mov	r0, r6
   1b568:	f007 fed2 	bl	23310 <lv_obj_get_ext_attr>
   1b56c:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
   1b56e:	4630      	mov	r0, r6
   1b570:	f009 fae1 	bl	24b36 <lv_label_get_long_mode>
   1b574:	4601      	mov	r1, r0
   1b576:	4620      	mov	r0, r4
   1b578:	f009 fc5f 	bl	24e3a <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
   1b57c:	4630      	mov	r0, r6
   1b57e:	f009 fbf9 	bl	24d74 <lv_label_get_recolor>
   1b582:	4601      	mov	r1, r0
   1b584:	4620      	mov	r0, r4
   1b586:	f009 fc7f 	bl	24e88 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
   1b58a:	4630      	mov	r0, r6
   1b58c:	f009 fbf9 	bl	24d82 <lv_label_get_body_draw>
   1b590:	4601      	mov	r1, r0
   1b592:	4620      	mov	r0, r4
   1b594:	f009 fab4 	bl	24b00 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
   1b598:	4630      	mov	r0, r6
   1b59a:	f009 fad3 	bl	24b44 <lv_label_get_align>
   1b59e:	4601      	mov	r1, r0
   1b5a0:	4620      	mov	r0, r4
   1b5a2:	f009 fa9a 	bl	24ada <lv_label_set_align>
        if(copy_ext->static_txt == 0)
   1b5a6:	7bbb      	ldrb	r3, [r7, #14]
   1b5a8:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1b5aa:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
   1b5ac:	d439      	bmi.n	1b622 <lv_label_create+0x14a>
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1b5ae:	f009 fabd 	bl	24b2c <lv_label_get_text>
   1b5b2:	4601      	mov	r1, r0
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f009 fbeb 	bl	24d90 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
   1b5ba:	7bbb      	ldrb	r3, [r7, #14]
   1b5bc:	f003 0307 	and.w	r3, r3, #7
   1b5c0:	2b02      	cmp	r3, #2
   1b5c2:	d115      	bne.n	1b5f0 <lv_label_create+0x118>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
   1b5c4:	6838      	ldr	r0, [r7, #0]
   1b5c6:	682e      	ldr	r6, [r5, #0]
   1b5c8:	f7ff fb60 	bl	1ac8c <lv_mem_get_size>
   1b5cc:	4601      	mov	r1, r0
   1b5ce:	4630      	mov	r0, r6
   1b5d0:	f7ff fb6a 	bl	1aca8 <lv_mem_realloc>
   1b5d4:	4606      	mov	r6, r0
   1b5d6:	6028      	str	r0, [r5, #0]
            if(ext->text == NULL) return NULL;
   1b5d8:	2800      	cmp	r0, #0
   1b5da:	d084      	beq.n	1b4e6 <lv_label_create+0xe>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
   1b5dc:	f8d7 8000 	ldr.w	r8, [r7]
   1b5e0:	4640      	mov	r0, r8
   1b5e2:	f7ff fb53 	bl	1ac8c <lv_mem_get_size>
   1b5e6:	4641      	mov	r1, r8
   1b5e8:	4602      	mov	r2, r0
   1b5ea:	4630      	mov	r0, r6
   1b5ec:	f004 f804 	bl	1f5f8 <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
   1b5f0:	7bfb      	ldrb	r3, [r7, #15]
   1b5f2:	079b      	lsls	r3, r3, #30
   1b5f4:	d51c      	bpl.n	1b630 <lv_label_create+0x158>
   1b5f6:	6878      	ldr	r0, [r7, #4]
   1b5f8:	b1d0      	cbz	r0, 1b630 <lv_label_create+0x158>
            uint16_t len = (uint16_t    )strlen(copy_ext->dot.tmp_ptr);
   1b5fa:	f003 ffcb 	bl	1f594 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1b5fe:	6869      	ldr	r1, [r5, #4]
   1b600:	b282      	uxth	r2, r0
   1b602:	4620      	mov	r0, r4
   1b604:	f7ff fd16 	bl	1b034 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
   1b608:	7bfb      	ldrb	r3, [r7, #15]
   1b60a:	7bea      	ldrb	r2, [r5, #15]
   1b60c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1b610:	f363 0241 	bfi	r2, r3, #1, #1
   1b614:	73ea      	strb	r2, [r5, #15]
        ext->dot_end       = copy_ext->dot_end;
   1b616:	893b      	ldrh	r3, [r7, #8]
   1b618:	812b      	strh	r3, [r5, #8]
        lv_obj_refresh_style(new_label);
   1b61a:	4620      	mov	r0, r4
   1b61c:	f007 fc39 	bl	22e92 <lv_obj_refresh_style>
   1b620:	e79a      	b.n	1b558 <lv_label_create+0x80>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
   1b622:	f009 fa83 	bl	24b2c <lv_label_get_text>
   1b626:	4601      	mov	r1, r0
   1b628:	4620      	mov	r0, r4
   1b62a:	f009 fbec 	bl	24e06 <lv_label_set_static_text>
   1b62e:	e7c4      	b.n	1b5ba <lv_label_create+0xe2>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
   1b630:	2204      	movs	r2, #4
   1b632:	18b9      	adds	r1, r7, r2
   1b634:	18a8      	adds	r0, r5, r2
   1b636:	f003 ffdf 	bl	1f5f8 <memcpy>
   1b63a:	e7e5      	b.n	1b608 <lv_label_create+0x130>
   1b63c:	20001e14 	.word	0x20001e14
   1b640:	fc800000 	.word	0xfc800000
   1b644:	00024b59 	.word	0x00024b59
   1b648:	0001b3fd 	.word	0x0001b3fd
   1b64c:	0002a1d0 	.word	0x0002a1d0
   1b650:	0002a1d5 	.word	0x0002a1d5
   1b654:	0002a20d 	.word	0x0002a20d

0001b658 <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
   1b658:	4b01      	ldr	r3, [pc, #4]	; (1b660 <lv_theme_get_current+0x8>)
   1b65a:	6818      	ldr	r0, [r3, #0]
   1b65c:	4770      	bx	lr
   1b65e:	bf00      	nop
   1b660:	20001e18 	.word	0x20001e18

0001b664 <bits_write>:
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
    if(len == 3) {
   1b664:	2b03      	cmp	r3, #3
{
   1b666:	b530      	push	{r4, r5, lr}
    if(len == 3) {
   1b668:	d104      	bne.n	1b674 <bits_write+0x10>
        len = 4;
        switch(val) {
   1b66a:	2a07      	cmp	r2, #7
   1b66c:	bf9c      	itt	ls
   1b66e:	4b0a      	ldrls	r3, [pc, #40]	; (1b698 <bits_write+0x34>)
   1b670:	5c9a      	ldrbls	r2, [r3, r2]
        len = 4;
   1b672:	2304      	movs	r3, #4
        case 7: val = 15; break;
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
   1b674:	f001 0507 	and.w	r5, r1, #7
    bit_pos = 8 - bit_pos - len;

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1b678:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   1b67c:	f3c1 01cf 	ubfx	r1, r1, #3, #16
   1b680:	409c      	lsls	r4, r3
   1b682:	f1c5 0508 	rsb	r5, r5, #8
    bit_pos = 8 - bit_pos - len;
   1b686:	1aed      	subs	r5, r5, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   1b688:	b264      	sxtb	r4, r4
   1b68a:	5c43      	ldrb	r3, [r0, r1]
   1b68c:	40ac      	lsls	r4, r5
   1b68e:	401c      	ands	r4, r3
    out[byte_pos] |= (val << bit_pos);
   1b690:	40aa      	lsls	r2, r5
   1b692:	4314      	orrs	r4, r2
   1b694:	5444      	strb	r4, [r0, r1]
}
   1b696:	bd30      	pop	{r4, r5, pc}
   1b698:	0002a24d 	.word	0x0002a24d

0001b69c <rle_next>:
    rle_prev_v = 0;
    rle_cnt = 0;
}

static uint8_t rle_next(void)
{
   1b69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t v = 0;
    uint8_t ret = 0;

    if(rle_state == RLE_STATE_SINGLE) {
   1b6a0:	4e4a      	ldr	r6, [pc, #296]	; (1b7cc <rle_next+0x130>)
   1b6a2:	f896 9000 	ldrb.w	r9, [r6]
   1b6a6:	f1b9 0f00 	cmp.w	r9, #0
   1b6aa:	d11d      	bne.n	1b6e8 <rle_next+0x4c>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
   1b6ac:	4b48      	ldr	r3, [pc, #288]	; (1b7d0 <rle_next+0x134>)
   1b6ae:	4d49      	ldr	r5, [pc, #292]	; (1b7d4 <rle_next+0x138>)
   1b6b0:	781f      	ldrb	r7, [r3, #0]
   1b6b2:	f8d5 8000 	ldr.w	r8, [r5]
   1b6b6:	4b48      	ldr	r3, [pc, #288]	; (1b7d8 <rle_next+0x13c>)
   1b6b8:	463a      	mov	r2, r7
   1b6ba:	6818      	ldr	r0, [r3, #0]
   1b6bc:	4641      	mov	r1, r8
   1b6be:	f009 fc1b 	bl	24ef8 <get_bits>
   1b6c2:	4b46      	ldr	r3, [pc, #280]	; (1b7dc <rle_next+0x140>)
   1b6c4:	4604      	mov	r4, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
   1b6c6:	f1b8 0f00 	cmp.w	r8, #0
   1b6ca:	d007      	beq.n	1b6dc <rle_next+0x40>
   1b6cc:	781a      	ldrb	r2, [r3, #0]
   1b6ce:	4282      	cmp	r2, r0
            rle_cnt = 0;
   1b6d0:	bf01      	itttt	eq
   1b6d2:	4a43      	ldreq	r2, [pc, #268]	; (1b7e0 <rle_next+0x144>)
   1b6d4:	f882 9000 	strbeq.w	r9, [r2]
            rle_state = RLE_STATE_REPEATE;
   1b6d8:	2201      	moveq	r2, #1
   1b6da:	7032      	strbeq	r2, [r6, #0]
        }

        rle_prev_v = ret;
        rle_rdp += rle_bpp;
   1b6dc:	4447      	add	r7, r8
        rle_prev_v = ret;
   1b6de:	701c      	strb	r4, [r3, #0]
        rle_rdp += rle_bpp;
   1b6e0:	602f      	str	r7, [r5, #0]
            rle_state = RLE_STATE_SINGLE;
        }
    }

    return ret;
}
   1b6e2:	4620      	mov	r0, r4
   1b6e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(rle_state == RLE_STATE_REPEATE) {
   1b6e8:	f1b9 0f01 	cmp.w	r9, #1
   1b6ec:	d149      	bne.n	1b782 <rle_next+0xe6>
        v = get_bits(rle_in, rle_rdp, 1);
   1b6ee:	4b3a      	ldr	r3, [pc, #232]	; (1b7d8 <rle_next+0x13c>)
   1b6f0:	4f38      	ldr	r7, [pc, #224]	; (1b7d4 <rle_next+0x138>)
   1b6f2:	f8d3 8000 	ldr.w	r8, [r3]
   1b6f6:	683d      	ldr	r5, [r7, #0]
        rle_cnt++;
   1b6f8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1b7e0 <rle_next+0x144>
        v = get_bits(rle_in, rle_rdp, 1);
   1b6fc:	464a      	mov	r2, r9
   1b6fe:	4629      	mov	r1, r5
   1b700:	4640      	mov	r0, r8
   1b702:	f009 fbf9 	bl	24ef8 <get_bits>
        rle_cnt++;
   1b706:	f89a 3000 	ldrb.w	r3, [sl]
   1b70a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1b7dc <rle_next+0x140>
   1b70e:	3301      	adds	r3, #1
   1b710:	b2db      	uxtb	r3, r3
        rle_rdp += 1;
   1b712:	f105 0b01 	add.w	fp, r5, #1
        if(v == 1) {
   1b716:	2801      	cmp	r0, #1
        rle_cnt++;
   1b718:	f88a 3000 	strb.w	r3, [sl]
        rle_rdp += 1;
   1b71c:	f8c7 b000 	str.w	fp, [r7]
        if(v == 1) {
   1b720:	d121      	bne.n	1b766 <rle_next+0xca>
            if(rle_cnt == 11) {
   1b722:	2b0b      	cmp	r3, #11
            ret = rle_prev_v;
   1b724:	f899 4000 	ldrb.w	r4, [r9]
            if(rle_cnt == 11) {
   1b728:	d1db      	bne.n	1b6e2 <rle_next+0x46>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
   1b72a:	4659      	mov	r1, fp
   1b72c:	2206      	movs	r2, #6
   1b72e:	4640      	mov	r0, r8
   1b730:	f009 fbe2 	bl	24ef8 <get_bits>
                rle_rdp += 6;
   1b734:	3507      	adds	r5, #7
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
   1b736:	4683      	mov	fp, r0
   1b738:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
   1b73c:	603d      	str	r5, [r7, #0]
                if(rle_cnt != 0) {
   1b73e:	b110      	cbz	r0, 1b746 <rle_next+0xaa>
                    rle_state = RLE_STATE_COUNTER;
   1b740:	2302      	movs	r3, #2
            rle_state = RLE_STATE_SINGLE;
   1b742:	7033      	strb	r3, [r6, #0]
   1b744:	e7cd      	b.n	1b6e2 <rle_next+0x46>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
   1b746:	4b22      	ldr	r3, [pc, #136]	; (1b7d0 <rle_next+0x134>)
   1b748:	f893 a000 	ldrb.w	sl, [r3]
   1b74c:	4629      	mov	r1, r5
   1b74e:	4652      	mov	r2, sl
   1b750:	4640      	mov	r0, r8
   1b752:	f009 fbd1 	bl	24ef8 <get_bits>
                    rle_rdp += rle_bpp;
   1b756:	4455      	add	r5, sl
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
   1b758:	4604      	mov	r4, r0
                    rle_prev_v = ret;
   1b75a:	f889 0000 	strb.w	r0, [r9]
                    rle_rdp += rle_bpp;
   1b75e:	603d      	str	r5, [r7, #0]
                    rle_state = RLE_STATE_SINGLE;
   1b760:	f886 b000 	strb.w	fp, [r6]
   1b764:	e7bd      	b.n	1b6e2 <rle_next+0x46>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   1b766:	4b1a      	ldr	r3, [pc, #104]	; (1b7d0 <rle_next+0x134>)
   1b768:	781d      	ldrb	r5, [r3, #0]
   1b76a:	4659      	mov	r1, fp
   1b76c:	462a      	mov	r2, r5
   1b76e:	4640      	mov	r0, r8
   1b770:	f009 fbc2 	bl	24ef8 <get_bits>
            rle_rdp += rle_bpp;
   1b774:	445d      	add	r5, fp
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   1b776:	4604      	mov	r4, r0
            rle_prev_v = ret;
   1b778:	f889 0000 	strb.w	r0, [r9]
            rle_rdp += rle_bpp;
   1b77c:	603d      	str	r5, [r7, #0]
            rle_state = RLE_STATE_SINGLE;
   1b77e:	2300      	movs	r3, #0
   1b780:	e7df      	b.n	1b742 <rle_next+0xa6>
    else if(rle_state == RLE_STATE_COUNTER) {
   1b782:	f1b9 0f02 	cmp.w	r9, #2
   1b786:	d11e      	bne.n	1b7c6 <rle_next+0x12a>
        rle_cnt--;
   1b788:	4b15      	ldr	r3, [pc, #84]	; (1b7e0 <rle_next+0x144>)
        ret = rle_prev_v;
   1b78a:	f8df a050 	ldr.w	sl, [pc, #80]	; 1b7dc <rle_next+0x140>
        rle_cnt--;
   1b78e:	781d      	ldrb	r5, [r3, #0]
        ret = rle_prev_v;
   1b790:	f89a 4000 	ldrb.w	r4, [sl]
        rle_cnt--;
   1b794:	3d01      	subs	r5, #1
   1b796:	b2ed      	uxtb	r5, r5
   1b798:	701d      	strb	r5, [r3, #0]
        if(rle_cnt == 0) {
   1b79a:	2d00      	cmp	r5, #0
   1b79c:	d1a1      	bne.n	1b6e2 <rle_next+0x46>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   1b79e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1b7d4 <rle_next+0x138>
   1b7a2:	4b0b      	ldr	r3, [pc, #44]	; (1b7d0 <rle_next+0x134>)
   1b7a4:	f8d8 9000 	ldr.w	r9, [r8]
   1b7a8:	781f      	ldrb	r7, [r3, #0]
   1b7aa:	4b0b      	ldr	r3, [pc, #44]	; (1b7d8 <rle_next+0x13c>)
   1b7ac:	463a      	mov	r2, r7
   1b7ae:	4649      	mov	r1, r9
   1b7b0:	6818      	ldr	r0, [r3, #0]
   1b7b2:	f009 fba1 	bl	24ef8 <get_bits>
            rle_rdp += rle_bpp;
   1b7b6:	444f      	add	r7, r9
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   1b7b8:	4604      	mov	r4, r0
            rle_prev_v = ret;
   1b7ba:	f88a 0000 	strb.w	r0, [sl]
            rle_rdp += rle_bpp;
   1b7be:	f8c8 7000 	str.w	r7, [r8]
            rle_state = RLE_STATE_SINGLE;
   1b7c2:	7035      	strb	r5, [r6, #0]
   1b7c4:	e78d      	b.n	1b6e2 <rle_next+0x46>
    uint8_t ret = 0;
   1b7c6:	2400      	movs	r4, #0
   1b7c8:	e78b      	b.n	1b6e2 <rle_next+0x46>
   1b7ca:	bf00      	nop
   1b7cc:	2000a6c4 	.word	0x2000a6c4
   1b7d0:	2000a6c1 	.word	0x2000a6c1
   1b7d4:	20001e24 	.word	0x20001e24
   1b7d8:	20001e20 	.word	0x20001e20
   1b7dc:	2000a6c3 	.word	0x2000a6c3
   1b7e0:	2000a6c2 	.word	0x2000a6c2

0001b7e4 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   1b7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1b7e6:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1b7e8:	6963      	ldr	r3, [r4, #20]
   1b7ea:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   1b7ec:	b085      	sub	sp, #20
   1b7ee:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1b7f0:	d145      	bne.n	1b87e <get_glyph_dsc_id.isra.0.part.1+0x9a>
   1b7f2:	69a0      	ldr	r0, [r4, #24]
}
   1b7f4:	b005      	add	sp, #20
   1b7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   1b7f8:	68a2      	ldr	r2, [r4, #8]
   1b7fa:	fb07 f603 	mul.w	r6, r7, r3
   1b7fe:	1991      	adds	r1, r2, r6
   1b800:	5992      	ldr	r2, [r2, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   1b802:	8888      	ldrh	r0, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   1b804:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
   1b806:	4282      	cmp	r2, r0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   1b808:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   1b80a:	f103 0301 	add.w	r3, r3, #1
   1b80e:	d838      	bhi.n	1b882 <get_glyph_dsc_id.isra.0.part.1+0x9e>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
   1b810:	7c8b      	ldrb	r3, [r1, #18]
   1b812:	b923      	cbnz	r3, 1b81e <get_glyph_dsc_id.isra.0.part.1+0x3a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
   1b814:	88c8      	ldrh	r0, [r1, #6]
   1b816:	4410      	add	r0, r2
        fdsc->last_letter = letter;
   1b818:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
   1b81a:	61a0      	str	r0, [r4, #24]
    return 0;
   1b81c:	e7ea      	b.n	1b7f4 <get_glyph_dsc_id.isra.0.part.1+0x10>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
   1b81e:	2b01      	cmp	r3, #1
   1b820:	d104      	bne.n	1b82c <get_glyph_dsc_id.isra.0.part.1+0x48>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
   1b822:	68cb      	ldr	r3, [r1, #12]
   1b824:	5c98      	ldrb	r0, [r3, r2]
   1b826:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1b828:	4418      	add	r0, r3
   1b82a:	e7f5      	b.n	1b818 <get_glyph_dsc_id.isra.0.part.1+0x34>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
   1b82c:	2b02      	cmp	r3, #2
   1b82e:	d111      	bne.n	1b854 <get_glyph_dsc_id.isra.0.part.1+0x70>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
   1b830:	4818      	ldr	r0, [pc, #96]	; (1b894 <get_glyph_dsc_id.isra.0.part.1+0xb0>)
   1b832:	8a0a      	ldrh	r2, [r1, #16]
   1b834:	9000      	str	r0, [sp, #0]
   1b836:	6889      	ldr	r1, [r1, #8]
   1b838:	a803      	add	r0, sp, #12
   1b83a:	f009 f91e 	bl	24a7a <lv_utils_bsearch>
            if(p) {
   1b83e:	b908      	cbnz	r0, 1b844 <get_glyph_dsc_id.isra.0.part.1+0x60>
        uint32_t glyph_id = 0;
   1b840:	2000      	movs	r0, #0
   1b842:	e7e9      	b.n	1b818 <get_glyph_dsc_id.isra.0.part.1+0x34>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   1b844:	68a3      	ldr	r3, [r4, #8]
   1b846:	4433      	add	r3, r6
   1b848:	689a      	ldr	r2, [r3, #8]
   1b84a:	1a82      	subs	r2, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
   1b84c:	88d8      	ldrh	r0, [r3, #6]
   1b84e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   1b852:	e7e1      	b.n	1b818 <get_glyph_dsc_id.isra.0.part.1+0x34>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
   1b854:	2b03      	cmp	r3, #3
   1b856:	d1f3      	bne.n	1b840 <get_glyph_dsc_id.isra.0.part.1+0x5c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
   1b858:	4b0e      	ldr	r3, [pc, #56]	; (1b894 <get_glyph_dsc_id.isra.0.part.1+0xb0>)
   1b85a:	8a0a      	ldrh	r2, [r1, #16]
   1b85c:	9300      	str	r3, [sp, #0]
   1b85e:	6889      	ldr	r1, [r1, #8]
   1b860:	2302      	movs	r3, #2
   1b862:	a803      	add	r0, sp, #12
   1b864:	f009 f909 	bl	24a7a <lv_utils_bsearch>
            if(p) {
   1b868:	2800      	cmp	r0, #0
   1b86a:	d0e9      	beq.n	1b840 <get_glyph_dsc_id.isra.0.part.1+0x5c>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t*) fdsc->cmaps[i].unicode_list);
   1b86c:	68a3      	ldr	r3, [r4, #8]
   1b86e:	4433      	add	r3, r6
   1b870:	689a      	ldr	r2, [r3, #8]
   1b872:	1a80      	subs	r0, r0, r2
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
   1b874:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1b876:	68da      	ldr	r2, [r3, #12]
   1b878:	88db      	ldrh	r3, [r3, #6]
   1b87a:	5c10      	ldrb	r0, [r2, r0]
   1b87c:	e7d4      	b.n	1b828 <get_glyph_dsc_id.isra.0.part.1+0x44>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1b87e:	2300      	movs	r3, #0
   1b880:	2714      	movs	r7, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
   1b882:	8a62      	ldrh	r2, [r4, #18]
   1b884:	b299      	uxth	r1, r3
   1b886:	f3c2 0209 	ubfx	r2, r2, #0, #10
   1b88a:	428a      	cmp	r2, r1
   1b88c:	d8b4      	bhi.n	1b7f8 <get_glyph_dsc_id.isra.0.part.1+0x14>
    fdsc->last_letter = letter;
   1b88e:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
   1b890:	2000      	movs	r0, #0
   1b892:	e7c2      	b.n	1b81a <get_glyph_dsc_id.isra.0.part.1+0x36>
   1b894:	00024f21 	.word	0x00024f21

0001b898 <lv_font_get_bitmap_fmt_txt>:
{
   1b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b89c:	b087      	sub	sp, #28
    if(letter == '\0') return 0;
   1b89e:	b919      	cbnz	r1, 1b8a8 <lv_font_get_bitmap_fmt_txt+0x10>
    if(!gid) return NULL;
   1b8a0:	2000      	movs	r0, #0
}
   1b8a2:	b007      	add	sp, #28
   1b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1b8a8:	f850 6f0c 	ldr.w	r6, [r0, #12]!
   1b8ac:	f7ff ff9a 	bl	1b7e4 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return NULL;
   1b8b0:	4680      	mov	r8, r0
   1b8b2:	2800      	cmp	r0, #0
   1b8b4:	d0f4      	beq.n	1b8a0 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   1b8b6:	7cf3      	ldrb	r3, [r6, #19]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   1b8b8:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   1b8bc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   1b8c0:	eb09 07c0 	add.w	r7, r9, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   1b8c4:	d108      	bne.n	1b8d8 <lv_font_get_bitmap_fmt_txt+0x40>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
   1b8c6:	2f00      	cmp	r7, #0
   1b8c8:	d0ea      	beq.n	1b8a0 <lv_font_get_bitmap_fmt_txt+0x8>
   1b8ca:	f859 3030 	ldr.w	r3, [r9, r0, lsl #3]
   1b8ce:	6830      	ldr	r0, [r6, #0]
   1b8d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1b8d4:	4418      	add	r0, r3
   1b8d6:	e7e4      	b.n	1b8a2 <lv_font_get_bitmap_fmt_txt+0xa>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
   1b8d8:	793c      	ldrb	r4, [r7, #4]
   1b8da:	7979      	ldrb	r1, [r7, #5]
   1b8dc:	fb14 f401 	smulbb	r4, r4, r1
        if(gsize == 0) return NULL;
   1b8e0:	2c00      	cmp	r4, #0
   1b8e2:	d0dd      	beq.n	1b8a0 <lv_font_get_bitmap_fmt_txt+0x8>
        switch(fdsc->bpp) {
   1b8e4:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1b8e8:	3b01      	subs	r3, #1
   1b8ea:	2b03      	cmp	r3, #3
   1b8ec:	d804      	bhi.n	1b8f8 <lv_font_get_bitmap_fmt_txt+0x60>
   1b8ee:	e8df f003 	tbb	[pc, r3]
   1b8f2:	4502      	.short	0x4502
   1b8f4:	4747      	.short	0x4747
        case 1: buf_size = gsize >> 3;  break;
   1b8f6:	08e4      	lsrs	r4, r4, #3
        if(lv_mem_get_size(buf) < buf_size) {
   1b8f8:	4d41      	ldr	r5, [pc, #260]	; (1ba00 <lv_font_get_bitmap_fmt_txt+0x168>)
   1b8fa:	6828      	ldr	r0, [r5, #0]
   1b8fc:	f7ff f9c6 	bl	1ac8c <lv_mem_get_size>
   1b900:	42a0      	cmp	r0, r4
   1b902:	d33f      	bcc.n	1b984 <lv_font_get_bitmap_fmt_txt+0xec>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], buf, gdsc->box_w , gdsc->box_h, (uint8_t)fdsc->bpp);
   1b904:	f859 2038 	ldr.w	r2, [r9, r8, lsl #3]
   1b908:	6833      	ldr	r3, [r6, #0]
   1b90a:	f3c2 0213 	ubfx	r2, r2, #0, #20
   1b90e:	441a      	add	r2, r3
   1b910:	682b      	ldr	r3, [r5, #0]
   1b912:	9302      	str	r3, [sp, #8]
   1b914:	797b      	ldrb	r3, [r7, #5]
   1b916:	9304      	str	r3, [sp, #16]
   1b918:	7cf3      	ldrb	r3, [r6, #19]
   1b91a:	793d      	ldrb	r5, [r7, #4]
   1b91c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1b920:	b2df      	uxtb	r7, r3
    if(bpp == 3) wr_size = 4;
   1b922:	2f03      	cmp	r7, #3
   1b924:	bf14      	ite	ne
   1b926:	4639      	movne	r1, r7
   1b928:	2104      	moveq	r1, #4
   1b92a:	9100      	str	r1, [sp, #0]
    rle_in = in;
   1b92c:	4935      	ldr	r1, [pc, #212]	; (1ba04 <lv_font_get_bitmap_fmt_txt+0x16c>)
   1b92e:	600a      	str	r2, [r1, #0]
    rle_bpp = bpp;
   1b930:	4a35      	ldr	r2, [pc, #212]	; (1ba08 <lv_font_get_bitmap_fmt_txt+0x170>)
   1b932:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
   1b934:	4a35      	ldr	r2, [pc, #212]	; (1ba0c <lv_font_get_bitmap_fmt_txt+0x174>)
   1b936:	2300      	movs	r3, #0
   1b938:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
   1b93a:	4a35      	ldr	r2, [pc, #212]	; (1ba10 <lv_font_get_bitmap_fmt_txt+0x178>)
   1b93c:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
   1b93e:	4a35      	ldr	r2, [pc, #212]	; (1ba14 <lv_font_get_bitmap_fmt_txt+0x17c>)
   1b940:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
   1b942:	4a35      	ldr	r2, [pc, #212]	; (1ba18 <lv_font_get_bitmap_fmt_txt+0x180>)
    uint8_t * line_buf = lv_draw_get_buf(w * 2);
   1b944:	0068      	lsls	r0, r5, #1
    rle_cnt = 0;
   1b946:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf = lv_draw_get_buf(w * 2);
   1b948:	f7fe fa62 	bl	19e10 <lv_draw_get_buf>
   1b94c:	4680      	mov	r8, r0
    uint8_t * line_buf2 = line_buf + w;
   1b94e:	1946      	adds	r6, r0, r5
static void decompress_line(uint8_t * out, lv_coord_t w)
   1b950:	4681      	mov	r9, r0
    uint8_t * line_buf2 = line_buf + w;
   1b952:	4604      	mov	r4, r0
    for(i = 0; i < w; i++) {
   1b954:	42b4      	cmp	r4, r6
   1b956:	d11d      	bne.n	1b994 <lv_font_get_bitmap_fmt_txt+0xfc>
    uint32_t wrp = 0;
   1b958:	f04f 0a00 	mov.w	sl, #0
    for(x = 0; x < w; x++) {
   1b95c:	45a1      	cmp	r9, r4
   1b95e:	d11e      	bne.n	1b99e <lv_font_get_bitmap_fmt_txt+0x106>
   1b960:	9b00      	ldr	r3, [sp, #0]
   1b962:	fb15 f303 	smulbb	r3, r5, r3
   1b966:	9303      	str	r3, [sp, #12]
   1b968:	4699      	mov	r9, r3
   1b96a:	1973      	adds	r3, r6, r5
    for(y = 1; y < h; y++) {
   1b96c:	2401      	movs	r4, #1
   1b96e:	9305      	str	r3, [sp, #20]
   1b970:	9b04      	ldr	r3, [sp, #16]
   1b972:	42a3      	cmp	r3, r4
   1b974:	dd40      	ble.n	1b9f8 <lv_font_get_bitmap_fmt_txt+0x160>
   1b976:	9601      	str	r6, [sp, #4]
   1b978:	4635      	mov	r5, r6
   1b97a:	e01e      	b.n	1b9ba <lv_font_get_bitmap_fmt_txt+0x122>
        case 2: buf_size = gsize >> 2;  break;
   1b97c:	08a4      	lsrs	r4, r4, #2
   1b97e:	e7bb      	b.n	1b8f8 <lv_font_get_bitmap_fmt_txt+0x60>
        case 4: buf_size = gsize >> 1;  break;
   1b980:	0864      	lsrs	r4, r4, #1
   1b982:	e7b9      	b.n	1b8f8 <lv_font_get_bitmap_fmt_txt+0x60>
            buf = lv_mem_realloc(buf, buf_size);
   1b984:	4621      	mov	r1, r4
   1b986:	6828      	ldr	r0, [r5, #0]
   1b988:	f7ff f98e 	bl	1aca8 <lv_mem_realloc>
   1b98c:	6028      	str	r0, [r5, #0]
            if(buf == NULL) return NULL;
   1b98e:	2800      	cmp	r0, #0
   1b990:	d1b8      	bne.n	1b904 <lv_font_get_bitmap_fmt_txt+0x6c>
   1b992:	e785      	b.n	1b8a0 <lv_font_get_bitmap_fmt_txt+0x8>
        out[i] = rle_next();
   1b994:	f7ff fe82 	bl	1b69c <rle_next>
   1b998:	f804 0b01 	strb.w	r0, [r4], #1
   1b99c:	e7da      	b.n	1b954 <lv_font_get_bitmap_fmt_txt+0xbc>
        bits_write(out,wrp, line_buf1[x], bpp);
   1b99e:	463b      	mov	r3, r7
   1b9a0:	4651      	mov	r1, sl
   1b9a2:	f819 2b01 	ldrb.w	r2, [r9], #1
   1b9a6:	9802      	ldr	r0, [sp, #8]
   1b9a8:	f7ff fe5c 	bl	1b664 <bits_write>
        wrp += wr_size;
   1b9ac:	9b00      	ldr	r3, [sp, #0]
   1b9ae:	449a      	add	sl, r3
   1b9b0:	e7d4      	b.n	1b95c <lv_font_get_bitmap_fmt_txt+0xc4>
        out[i] = rle_next();
   1b9b2:	f7ff fe73 	bl	1b69c <rle_next>
   1b9b6:	f805 0b01 	strb.w	r0, [r5], #1
    for(i = 0; i < w; i++) {
   1b9ba:	9b05      	ldr	r3, [sp, #20]
   1b9bc:	429d      	cmp	r5, r3
   1b9be:	d1f8      	bne.n	1b9b2 <lv_font_get_bitmap_fmt_txt+0x11a>
   1b9c0:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
   1b9c4:	46ca      	mov	sl, r9
        for(x = 0; x < w; x++) {
   1b9c6:	9b01      	ldr	r3, [sp, #4]
   1b9c8:	42ab      	cmp	r3, r5
   1b9ca:	d104      	bne.n	1b9d6 <lv_font_get_bitmap_fmt_txt+0x13e>
   1b9cc:	9b03      	ldr	r3, [sp, #12]
    for(y = 1; y < h; y++) {
   1b9ce:	3401      	adds	r4, #1
   1b9d0:	4499      	add	r9, r3
   1b9d2:	b224      	sxth	r4, r4
   1b9d4:	e7cc      	b.n	1b970 <lv_font_get_bitmap_fmt_txt+0xd8>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
   1b9d6:	9b01      	ldr	r3, [sp, #4]
            bits_write(out,wrp, line_buf1[x], bpp);
   1b9d8:	9802      	ldr	r0, [sp, #8]
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
   1b9da:	f813 2b01 	ldrb.w	r2, [r3], #1
   1b9de:	9301      	str	r3, [sp, #4]
   1b9e0:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
   1b9e4:	405a      	eors	r2, r3
            bits_write(out,wrp, line_buf1[x], bpp);
   1b9e6:	4651      	mov	r1, sl
   1b9e8:	463b      	mov	r3, r7
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
   1b9ea:	f88b 2000 	strb.w	r2, [fp]
            bits_write(out,wrp, line_buf1[x], bpp);
   1b9ee:	f7ff fe39 	bl	1b664 <bits_write>
            wrp += wr_size;
   1b9f2:	9b00      	ldr	r3, [sp, #0]
   1b9f4:	449a      	add	sl, r3
   1b9f6:	e7e6      	b.n	1b9c6 <lv_font_get_bitmap_fmt_txt+0x12e>
        return buf;
   1b9f8:	4b01      	ldr	r3, [pc, #4]	; (1ba00 <lv_font_get_bitmap_fmt_txt+0x168>)
   1b9fa:	6818      	ldr	r0, [r3, #0]
   1b9fc:	e751      	b.n	1b8a2 <lv_font_get_bitmap_fmt_txt+0xa>
   1b9fe:	bf00      	nop
   1ba00:	20001e1c 	.word	0x20001e1c
   1ba04:	20001e20 	.word	0x20001e20
   1ba08:	2000a6c1 	.word	0x2000a6c1
   1ba0c:	2000a6c4 	.word	0x2000a6c4
   1ba10:	20001e24 	.word	0x20001e24
   1ba14:	2000a6c3 	.word	0x2000a6c3
   1ba18:	2000a6c2 	.word	0x2000a6c2

0001ba1c <lv_font_get_glyph_dsc_fmt_txt>:
{
   1ba1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ba20:	4680      	mov	r8, r0
   1ba22:	b085      	sub	sp, #20
   1ba24:	460c      	mov	r4, r1
   1ba26:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
   1ba28:	b91a      	cbnz	r2, 1ba32 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
   1ba2a:	2000      	movs	r0, #0
}
   1ba2c:	b005      	add	sp, #20
   1ba2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1ba32:	4607      	mov	r7, r0
   1ba34:	4611      	mov	r1, r2
   1ba36:	f857 5f0c 	ldr.w	r5, [r7, #12]!
   1ba3a:	4638      	mov	r0, r7
   1ba3c:	f7ff fed2 	bl	1b7e4 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
   1ba40:	4606      	mov	r6, r0
   1ba42:	2800      	cmp	r0, #0
   1ba44:	d0f1      	beq.n	1ba2a <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
   1ba46:	68eb      	ldr	r3, [r5, #12]
   1ba48:	b9d3      	cbnz	r3, 1ba80 <lv_font_get_glyph_dsc_fmt_txt+0x64>
    int8_t kvalue = 0;
   1ba4a:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   1ba4c:	686b      	ldr	r3, [r5, #4]
   1ba4e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   1ba52:	8a2b      	ldrh	r3, [r5, #16]
   1ba54:	4358      	muls	r0, r3
    uint32_t adv_w = gdsc->adv_w + kv;
   1ba56:	8873      	ldrh	r3, [r6, #2]
   1ba58:	091b      	lsrs	r3, r3, #4
   1ba5a:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
   1ba5e:	3008      	adds	r0, #8
   1ba60:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
   1ba62:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
   1ba64:	7973      	ldrb	r3, [r6, #5]
   1ba66:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
   1ba68:	7933      	ldrb	r3, [r6, #4]
   1ba6a:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
   1ba6c:	79b3      	ldrb	r3, [r6, #6]
   1ba6e:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
   1ba70:	79f3      	ldrb	r3, [r6, #7]
   1ba72:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
   1ba74:	7ceb      	ldrb	r3, [r5, #19]
   1ba76:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1ba7a:	71a3      	strb	r3, [r4, #6]
    return true;
   1ba7c:	2001      	movs	r0, #1
   1ba7e:	e7d5      	b.n	1ba2c <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
   1ba80:	f1b9 0f00 	cmp.w	r9, #0
   1ba84:	d0e1      	beq.n	1ba4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
   1ba86:	4649      	mov	r1, r9
   1ba88:	4638      	mov	r0, r7
   1ba8a:	f7ff feab 	bl	1b7e4 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
   1ba8e:	2800      	cmp	r0, #0
   1ba90:	d0db      	beq.n	1ba4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            kvalue = get_kern_value(font, gid, gid_next);
   1ba92:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
   1ba96:	68df      	ldr	r7, [r3, #12]
   1ba98:	7cdb      	ldrb	r3, [r3, #19]
   1ba9a:	069b      	lsls	r3, r3, #26
   1ba9c:	d432      	bmi.n	1bb04 <lv_font_get_glyph_dsc_fmt_txt+0xe8>
        if(kdsc->glyph_ids_size == 0) {
   1ba9e:	7afb      	ldrb	r3, [r7, #11]
   1baa0:	f013 0303 	ands.w	r3, r3, #3
   1baa4:	d117      	bne.n	1bad6 <lv_font_get_glyph_dsc_fmt_txt+0xba>
            const uint8_t * g_ids = kdsc->glyph_ids;
   1baa6:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   1baaa:	68ba      	ldr	r2, [r7, #8]
   1baac:	4b1d      	ldr	r3, [pc, #116]	; (1bb24 <lv_font_get_glyph_dsc_fmt_txt+0x108>)
   1baae:	9300      	str	r3, [sp, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
   1bab0:	eb06 2000 	add.w	r0, r6, r0, lsl #8
   1bab4:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   1bab8:	2302      	movs	r3, #2
   1baba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1babe:	4641      	mov	r1, r8
   1bac0:	a803      	add	r0, sp, #12
   1bac2:	f008 ffda 	bl	24a7a <lv_utils_bsearch>
            if(kid_p) {
   1bac6:	2800      	cmp	r0, #0
   1bac8:	d0c0      	beq.n	1ba4c <lv_font_get_glyph_dsc_fmt_txt+0x30>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
   1baca:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
   1bace:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
   1bad0:	687b      	ldr	r3, [r7, #4]
   1bad2:	5618      	ldrsb	r0, [r3, r0]
   1bad4:	e7ba      	b.n	1ba4c <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
   1bad6:	2b01      	cmp	r3, #1
   1bad8:	d1b7      	bne.n	1ba4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            const uint16_t * g_ids = kdsc->glyph_ids;
   1bada:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   1bade:	68ba      	ldr	r2, [r7, #8]
   1bae0:	4b11      	ldr	r3, [pc, #68]	; (1bb28 <lv_font_get_glyph_dsc_fmt_txt+0x10c>)
   1bae2:	9300      	str	r3, [sp, #0]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
   1bae4:	eb06 2000 	add.w	r0, r6, r0, lsl #8
   1bae8:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   1baea:	2304      	movs	r3, #4
   1baec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1baf0:	4641      	mov	r1, r8
   1baf2:	a803      	add	r0, sp, #12
   1baf4:	f008 ffc1 	bl	24a7a <lv_utils_bsearch>
            if(kid_p) {
   1baf8:	2800      	cmp	r0, #0
   1bafa:	d0a7      	beq.n	1ba4c <lv_font_get_glyph_dsc_fmt_txt+0x30>
                lv_uintptr_t ofs = (lv_uintptr_t) (kid_p - (const uint8_t *)g_ids);
   1bafc:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
   1bb00:	0900      	lsrs	r0, r0, #4
   1bb02:	e7e5      	b.n	1bad0 <lv_font_get_glyph_dsc_fmt_txt+0xb4>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
   1bb04:	687a      	ldr	r2, [r7, #4]
   1bb06:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
   1bb08:	2b00      	cmp	r3, #0
   1bb0a:	d09e      	beq.n	1ba4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
   1bb0c:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
   1bb0e:	2900      	cmp	r1, #0
   1bb10:	d09b      	beq.n	1ba4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
   1bb12:	683a      	ldr	r2, [r7, #0]
   1bb14:	7b78      	ldrb	r0, [r7, #13]
   1bb16:	3b01      	subs	r3, #1
   1bb18:	440a      	add	r2, r1
   1bb1a:	fb00 2303 	mla	r3, r0, r3, r2
   1bb1e:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
   1bb22:	e793      	b.n	1ba4c <lv_font_get_glyph_dsc_fmt_txt+0x30>
   1bb24:	00024ed5 	.word	0x00024ed5
   1bb28:	00024ee7 	.word	0x00024ee7

0001bb2c <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   1bb2c:	4b09      	ldr	r3, [pc, #36]	; (1bb54 <z_sys_device_do_config_level+0x28>)
{
   1bb2e:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   1bb30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1bb34:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1bb36:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1bb38:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1bb3c:	42a5      	cmp	r5, r4
   1bb3e:	d800      	bhi.n	1bb42 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1bb40:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1bb42:	6823      	ldr	r3, [r4, #0]
   1bb44:	4620      	mov	r0, r4
   1bb46:	685b      	ldr	r3, [r3, #4]
   1bb48:	4798      	blx	r3
		if (retval != 0) {
   1bb4a:	b100      	cbz	r0, 1bb4e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1bb4c:	6066      	str	r6, [r4, #4]
								info++) {
   1bb4e:	340c      	adds	r4, #12
   1bb50:	e7f4      	b.n	1bb3c <z_sys_device_do_config_level+0x10>
   1bb52:	bf00      	nop
   1bb54:	00026a54 	.word	0x00026a54

0001bb58 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1bb58:	4b10      	ldr	r3, [pc, #64]	; (1bb9c <z_impl_device_get_binding+0x44>)
{
   1bb5a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1bb5c:	4c10      	ldr	r4, [pc, #64]	; (1bba0 <z_impl_device_get_binding+0x48>)
{
   1bb5e:	4605      	mov	r5, r0
   1bb60:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1bb62:	429c      	cmp	r4, r3
   1bb64:	d104      	bne.n	1bb70 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1bb66:	4c0e      	ldr	r4, [pc, #56]	; (1bba0 <z_impl_device_get_binding+0x48>)
   1bb68:	42b4      	cmp	r4, r6
   1bb6a:	d109      	bne.n	1bb80 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1bb6c:	2400      	movs	r4, #0
   1bb6e:	e012      	b.n	1bb96 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1bb70:	6862      	ldr	r2, [r4, #4]
   1bb72:	b11a      	cbz	r2, 1bb7c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1bb74:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1bb76:	6812      	ldr	r2, [r2, #0]
   1bb78:	42aa      	cmp	r2, r5
   1bb7a:	d00c      	beq.n	1bb96 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1bb7c:	340c      	adds	r4, #12
   1bb7e:	e7f0      	b.n	1bb62 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1bb80:	6863      	ldr	r3, [r4, #4]
   1bb82:	b90b      	cbnz	r3, 1bb88 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1bb84:	340c      	adds	r4, #12
   1bb86:	e7ef      	b.n	1bb68 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1bb88:	6823      	ldr	r3, [r4, #0]
   1bb8a:	4628      	mov	r0, r5
   1bb8c:	6819      	ldr	r1, [r3, #0]
   1bb8e:	f003 fd08 	bl	1f5a2 <strcmp>
   1bb92:	2800      	cmp	r0, #0
   1bb94:	d1f6      	bne.n	1bb84 <z_impl_device_get_binding+0x2c>
}
   1bb96:	4620      	mov	r0, r4
   1bb98:	bd70      	pop	{r4, r5, r6, pc}
   1bb9a:	bf00      	nop
   1bb9c:	2000e5cc 	.word	0x2000e5cc
   1bba0:	2000e4f4 	.word	0x2000e4f4

0001bba4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1bba4:	4b01      	ldr	r3, [pc, #4]	; (1bbac <z_impl_z_errno+0x8>)
   1bba6:	6898      	ldr	r0, [r3, #8]
}
   1bba8:	3054      	adds	r0, #84	; 0x54
   1bbaa:	4770      	bx	lr
   1bbac:	20005f64 	.word	0x20005f64

0001bbb0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1bbb0:	b510      	push	{r4, lr}
   1bbb2:	4604      	mov	r4, r0
	z_impl_log_panic();
   1bbb4:	f7e7 fbda 	bl	336c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1bbb8:	2301      	movs	r3, #1
   1bbba:	f04f 0100 	mov.w	r1, #0
   1bbbe:	f363 0107 	bfi	r1, r3, #0, #8
   1bbc2:	4a06      	ldr	r2, [pc, #24]	; (1bbdc <k_sys_fatal_error_handler+0x2c>)
   1bbc4:	4b06      	ldr	r3, [pc, #24]	; (1bbe0 <k_sys_fatal_error_handler+0x30>)
   1bbc6:	4807      	ldr	r0, [pc, #28]	; (1bbe4 <k_sys_fatal_error_handler+0x34>)
   1bbc8:	1a9b      	subs	r3, r3, r2
   1bbca:	08db      	lsrs	r3, r3, #3
   1bbcc:	f363 118f 	bfi	r1, r3, #6, #10
   1bbd0:	f002 ff40 	bl	1ea54 <log_0>
	arch_system_halt(reason);
   1bbd4:	4620      	mov	r0, r4
   1bbd6:	f009 f9a7 	bl	24f28 <arch_system_halt>
   1bbda:	bf00      	nop
   1bbdc:	00025a6c 	.word	0x00025a6c
   1bbe0:	00025bb4 	.word	0x00025bb4
   1bbe4:	00031e11 	.word	0x00031e11

0001bbe8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bbe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bbec:	4605      	mov	r5, r0
   1bbee:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1bbf0:	f000 fe5c 	bl	1c8ac <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1bbf4:	2201      	movs	r2, #1
   1bbf6:	f04f 0300 	mov.w	r3, #0
   1bbfa:	f362 0307 	bfi	r3, r2, #0, #8
   1bbfe:	4c24      	ldr	r4, [pc, #144]	; (1bc90 <z_fatal_error+0xa8>)
   1bc00:	4a24      	ldr	r2, [pc, #144]	; (1bc94 <z_fatal_error+0xac>)
   1bc02:	2d04      	cmp	r5, #4
   1bc04:	eba4 0402 	sub.w	r4, r4, r2
   1bc08:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1bc0c:	bf96      	itet	ls
   1bc0e:	4a22      	ldrls	r2, [pc, #136]	; (1bc98 <z_fatal_error+0xb0>)
   1bc10:	4a22      	ldrhi	r2, [pc, #136]	; (1bc9c <z_fatal_error+0xb4>)
   1bc12:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1bc16:	f364 138f 	bfi	r3, r4, #6, #10
   1bc1a:	f8ad 3000 	strh.w	r3, [sp]
   1bc1e:	4606      	mov	r6, r0
   1bc20:	2300      	movs	r3, #0
   1bc22:	4629      	mov	r1, r5
   1bc24:	481e      	ldr	r0, [pc, #120]	; (1bca0 <z_fatal_error+0xb8>)
   1bc26:	f002 ff4e 	bl	1eac6 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1bc2a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1bc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1bc32:	b14b      	cbz	r3, 1bc48 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   1bc34:	f04f 0100 	mov.w	r1, #0
   1bc38:	2301      	movs	r3, #1
   1bc3a:	f363 0107 	bfi	r1, r3, #0, #8
   1bc3e:	f364 118f 	bfi	r1, r4, #6, #10
   1bc42:	4818      	ldr	r0, [pc, #96]	; (1bca4 <z_fatal_error+0xbc>)
   1bc44:	f002 ff06 	bl	1ea54 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1bc48:	f04f 0700 	mov.w	r7, #0
   1bc4c:	2301      	movs	r3, #1
   1bc4e:	f363 0707 	bfi	r7, r3, #0, #8
	const char *thread_name = k_thread_name_get(thread);
   1bc52:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   1bc54:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   1bc58:	f009 fb97 	bl	2538a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1bc5c:	b1b0      	cbz	r0, 1bc8c <z_fatal_error+0xa4>
   1bc5e:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1bc60:	4b11      	ldr	r3, [pc, #68]	; (1bca8 <z_fatal_error+0xc0>)
   1bc62:	2a00      	cmp	r2, #0
   1bc64:	bf08      	it	eq
   1bc66:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1bc68:	f7e7 fa14 	bl	3094 <log_strdup>
   1bc6c:	463b      	mov	r3, r7
   1bc6e:	4602      	mov	r2, r0
   1bc70:	4631      	mov	r1, r6
   1bc72:	480e      	ldr	r0, [pc, #56]	; (1bcac <z_fatal_error+0xc4>)
   1bc74:	f002 ff0f 	bl	1ea96 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1bc78:	4641      	mov	r1, r8
   1bc7a:	4628      	mov	r0, r5
   1bc7c:	f7ff ff98 	bl	1bbb0 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   1bc80:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1bc82:	b002      	add	sp, #8
   1bc84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bc88:	f7e9 b9f8 	b.w	507c <z_impl_k_thread_abort>
		thread_name = "unknown";
   1bc8c:	4806      	ldr	r0, [pc, #24]	; (1bca8 <z_fatal_error+0xc0>)
   1bc8e:	e7eb      	b.n	1bc68 <z_fatal_error+0x80>
   1bc90:	00025bb4 	.word	0x00025bb4
   1bc94:	00025a6c 	.word	0x00025a6c
   1bc98:	00026a6c 	.word	0x00026a6c
   1bc9c:	00031e6a 	.word	0x00031e6a
   1bca0:	00031e78 	.word	0x00031e78
   1bca4:	00031ea0 	.word	0x00031ea0
   1bca8:	0002820e 	.word	0x0002820e
   1bcac:	00031ec1 	.word	0x00031ec1

0001bcb0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1bcb0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1bcb2:	4d0b      	ldr	r5, [pc, #44]	; (1bce0 <idle+0x30>)
	__asm__ volatile(
   1bcb4:	f04f 0220 	mov.w	r2, #32
   1bcb8:	f3ef 8311 	mrs	r3, BASEPRI
   1bcbc:	f382 8811 	msr	BASEPRI, r2
   1bcc0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1bcc4:	f009 fc04 	bl	254d0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1bcc8:	2101      	movs	r1, #1
   1bcca:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   1bccc:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1bcce:	bfd8      	it	le
   1bcd0:	4608      	movle	r0, r1
   1bcd2:	f009 fc0d 	bl	254f0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1bcd6:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   1bcd8:	f7e8 fe80 	bl	49dc <arch_cpu_idle>
   1bcdc:	e7ea      	b.n	1bcb4 <idle+0x4>
   1bcde:	bf00      	nop
   1bce0:	20005f64 	.word	0x20005f64

0001bce4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1bce4:	4802      	ldr	r0, [pc, #8]	; (1bcf0 <z_bss_zero+0xc>)
   1bce6:	4a03      	ldr	r2, [pc, #12]	; (1bcf4 <z_bss_zero+0x10>)
   1bce8:	2100      	movs	r1, #0
   1bcea:	1a12      	subs	r2, r2, r0
   1bcec:	f003 bcae 	b.w	1f64c <memset>
   1bcf0:	20000000 	.word	0x20000000
   1bcf4:	2000a6c8 	.word	0x2000a6c8

0001bcf8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bcf8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1bcfa:	4806      	ldr	r0, [pc, #24]	; (1bd14 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1bcfc:	4a06      	ldr	r2, [pc, #24]	; (1bd18 <z_data_copy+0x20>)
   1bcfe:	4907      	ldr	r1, [pc, #28]	; (1bd1c <z_data_copy+0x24>)
   1bd00:	1a12      	subs	r2, r2, r0
   1bd02:	f003 fc79 	bl	1f5f8 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1bd06:	4a06      	ldr	r2, [pc, #24]	; (1bd20 <z_data_copy+0x28>)
   1bd08:	4906      	ldr	r1, [pc, #24]	; (1bd24 <z_data_copy+0x2c>)
   1bd0a:	4807      	ldr	r0, [pc, #28]	; (1bd28 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bd0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1bd10:	f003 bc72 	b.w	1f5f8 <memcpy>
   1bd14:	2000dd18 	.word	0x2000dd18
   1bd18:	2000e7c8 	.word	0x2000e7c8
   1bd1c:	00031eff 	.word	0x00031eff
   1bd20:	00000000 	.word	0x00000000
   1bd24:	00031efc 	.word	0x00031efc
   1bd28:	20000000 	.word	0x20000000

0001bd2c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1bd2c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1bd2e:	4b09      	ldr	r3, [pc, #36]	; (1bd54 <bg_thread_main+0x28>)
   1bd30:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1bd32:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1bd34:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1bd36:	f7ff fef9 	bl	1bb2c <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1bd3a:	2003      	movs	r0, #3
   1bd3c:	f7ff fef6 	bl	1bb2c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1bd40:	f000 feae 	bl	1caa0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1bd44:	f7e6 fdae 	bl	28a4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1bd48:	4a03      	ldr	r2, [pc, #12]	; (1bd58 <bg_thread_main+0x2c>)
   1bd4a:	7b13      	ldrb	r3, [r2, #12]
   1bd4c:	f023 0301 	bic.w	r3, r3, #1
   1bd50:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1bd52:	bd08      	pop	{r3, pc}
   1bd54:	2000a6c5 	.word	0x2000a6c5
   1bd58:	20001e94 	.word	0x20001e94

0001bd5c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1bd5c:	b580      	push	{r7, lr}
   1bd5e:	b0a2      	sub	sp, #136	; 0x88
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1bd60:	f7e7 f8fe 	bl	2f60 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1bd64:	4b35      	ldr	r3, [pc, #212]	; (1be3c <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1bd66:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1bd6a:	4c35      	ldr	r4, [pc, #212]	; (1be40 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1bd6c:	4e35      	ldr	r6, [pc, #212]	; (1be44 <z_cstart+0xe8>)
   1bd6e:	6963      	ldr	r3, [r4, #20]
   1bd70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1bd74:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bd76:	2500      	movs	r5, #0
   1bd78:	23e0      	movs	r3, #224	; 0xe0
   1bd7a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1bd7e:	77e5      	strb	r5, [r4, #31]
   1bd80:	7625      	strb	r5, [r4, #24]
   1bd82:	7665      	strb	r5, [r4, #25]
   1bd84:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1bd86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd88:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1bd8c:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1bd8e:	f7e9 f961 	bl	5054 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1bd92:	f7e8 fe1d 	bl	49d0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1bd96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd9a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1bd9c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1bd9e:	ab07      	add	r3, sp, #28
   1bda0:	226c      	movs	r2, #108	; 0x6c
   1bda2:	4629      	mov	r1, r5
   1bda4:	4618      	mov	r0, r3
   1bda6:	f003 fc51 	bl	1f64c <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1bdaa:	4c27      	ldr	r4, [pc, #156]	; (1be48 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
   1bdac:	2701      	movs	r7, #1
	_current = &dummy_thread;
   1bdae:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1bdb0:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
   1bdb2:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1bdb6:	f7ff feb9 	bl	1bb2c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1bdba:	4638      	mov	r0, r7
   1bdbc:	f7ff feb6 	bl	1bb2c <z_sys_device_do_config_level>
	z_sched_init();
   1bdc0:	f000 fcf4 	bl	1c7ac <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1bdc4:	4b21      	ldr	r3, [pc, #132]	; (1be4c <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1bdc6:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1bdc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1bdcc:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1bdd0:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1bdd4:	4b1e      	ldr	r3, [pc, #120]	; (1be50 <z_cstart+0xf4>)
   1bdd6:	491f      	ldr	r1, [pc, #124]	; (1be54 <z_cstart+0xf8>)
   1bdd8:	e9cd 5500 	strd	r5, r5, [sp]
   1bddc:	4630      	mov	r0, r6
   1bdde:	f000 fdf7 	bl	1c9d0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bde2:	7b73      	ldrb	r3, [r6, #13]
   1bde4:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bde8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bdec:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bdee:	d104      	bne.n	1bdfa <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1bdf0:	69b3      	ldr	r3, [r6, #24]
   1bdf2:	b913      	cbnz	r3, 1bdfa <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
   1bdf4:	4630      	mov	r0, r6
   1bdf6:	f000 faa3 	bl	1c340 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   1bdfa:	4b17      	ldr	r3, [pc, #92]	; (1be58 <z_cstart+0xfc>)
   1bdfc:	4d17      	ldr	r5, [pc, #92]	; (1be5c <z_cstart+0x100>)
   1bdfe:	9305      	str	r3, [sp, #20]
   1be00:	2201      	movs	r2, #1
   1be02:	230f      	movs	r3, #15
   1be04:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1be08:	2300      	movs	r3, #0
   1be0a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1be0e:	9300      	str	r3, [sp, #0]
   1be10:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1be14:	4b12      	ldr	r3, [pc, #72]	; (1be60 <z_cstart+0x104>)
   1be16:	4913      	ldr	r1, [pc, #76]	; (1be64 <z_cstart+0x108>)
   1be18:	4628      	mov	r0, r5
   1be1a:	f000 fdd9 	bl	1c9d0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1be1e:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1be20:	60e5      	str	r5, [r4, #12]
   1be22:	f023 0304 	bic.w	r3, r3, #4
   1be26:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1be28:	4b0f      	ldr	r3, [pc, #60]	; (1be68 <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1be2a:	490a      	ldr	r1, [pc, #40]	; (1be54 <z_cstart+0xf8>)
   1be2c:	4805      	ldr	r0, [pc, #20]	; (1be44 <z_cstart+0xe8>)
	list->tail = (sys_dnode_t *)list;
   1be2e:	e9c4 3306 	strd	r3, r3, [r4, #24]
   1be32:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1be36:	4b06      	ldr	r3, [pc, #24]	; (1be50 <z_cstart+0xf4>)
   1be38:	f7e8 fdac 	bl	4994 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1be3c:	2000c990 	.word	0x2000c990
   1be40:	e000ed00 	.word	0xe000ed00
   1be44:	20001e94 	.word	0x20001e94
   1be48:	20005f64 	.word	0x20005f64
   1be4c:	00031edc 	.word	0x00031edc
   1be50:	0001bd2d 	.word	0x0001bd2d
   1be54:	2000bc50 	.word	0x2000bc50
   1be58:	00031ee1 	.word	0x00031ee1
   1be5c:	20001e28 	.word	0x20001e28
   1be60:	0001bcb1 	.word	0x0001bcb1
   1be64:	2000c050 	.word	0x2000c050
   1be68:	20005f7c 	.word	0x20005f7c

0001be6c <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1be6c:	4b0b      	ldr	r3, [pc, #44]	; (1be9c <init_mem_slab_module+0x30>)
   1be6e:	480c      	ldr	r0, [pc, #48]	; (1bea0 <init_mem_slab_module+0x34>)
{
   1be70:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1be72:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1be74:	4283      	cmp	r3, r0
   1be76:	d301      	bcc.n	1be7c <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1be78:	2000      	movs	r0, #0
   1be7a:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   1be7c:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1be7e:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1be80:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1be82:	2100      	movs	r1, #0
   1be84:	42a9      	cmp	r1, r5
   1be86:	d101      	bne.n	1be8c <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1be88:	331c      	adds	r3, #28
   1be8a:	e7f3      	b.n	1be74 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1be8c:	695e      	ldr	r6, [r3, #20]
   1be8e:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1be90:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1be92:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1be94:	3101      	adds	r1, #1
		p += slab->block_size;
   1be96:	4432      	add	r2, r6
   1be98:	e7f4      	b.n	1be84 <init_mem_slab_module+0x18>
   1be9a:	bf00      	nop
   1be9c:	2000e5cc 	.word	0x2000e5cc
   1bea0:	2000e604 	.word	0x2000e604

0001bea4 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1bea4:	b510      	push	{r4, lr}
   1bea6:	4613      	mov	r3, r2
   1bea8:	460c      	mov	r4, r1
   1beaa:	f04f 0220 	mov.w	r2, #32
   1beae:	f3ef 8111 	mrs	r1, BASEPRI
   1beb2:	f382 8811 	msr	BASEPRI, r2
   1beb6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1beba:	6942      	ldr	r2, [r0, #20]
   1bebc:	b15a      	cbz	r2, 1bed6 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   1bebe:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1bec0:	6813      	ldr	r3, [r2, #0]
   1bec2:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1bec4:	6983      	ldr	r3, [r0, #24]
   1bec6:	3301      	adds	r3, #1
   1bec8:	6183      	str	r3, [r0, #24]
		result = 0;
   1beca:	2000      	movs	r0, #0
	__asm__ volatile(
   1becc:	f381 8811 	msr	BASEPRI, r1
   1bed0:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1bed4:	e00d      	b.n	1bef2 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1bed6:	b91b      	cbnz	r3, 1bee0 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1bed8:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1beda:	f06f 000b 	mvn.w	r0, #11
   1bede:	e7f5      	b.n	1becc <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1bee0:	4602      	mov	r2, r0
   1bee2:	4804      	ldr	r0, [pc, #16]	; (1bef4 <k_mem_slab_alloc+0x50>)
   1bee4:	f000 fbde 	bl	1c6a4 <z_pend_curr>
		if (result == 0) {
   1bee8:	b918      	cbnz	r0, 1bef2 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1beea:	4b03      	ldr	r3, [pc, #12]	; (1bef8 <k_mem_slab_alloc+0x54>)
   1beec:	689b      	ldr	r3, [r3, #8]
   1beee:	695b      	ldr	r3, [r3, #20]
   1bef0:	6023      	str	r3, [r4, #0]
}
   1bef2:	bd10      	pop	{r4, pc}
   1bef4:	2000a6c6 	.word	0x2000a6c6
   1bef8:	20005f64 	.word	0x20005f64

0001befc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1befc:	b570      	push	{r4, r5, r6, lr}
   1befe:	4604      	mov	r4, r0
   1bf00:	460d      	mov	r5, r1
	__asm__ volatile(
   1bf02:	f04f 0320 	mov.w	r3, #32
   1bf06:	f3ef 8611 	mrs	r6, BASEPRI
   1bf0a:	f383 8811 	msr	BASEPRI, r3
   1bf0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1bf12:	f009 f9e9 	bl	252e8 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1bf16:	b180      	cbz	r0, 1bf3a <k_mem_slab_free+0x3e>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1bf18:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1bf1a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bf1c:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1bf1e:	2100      	movs	r1, #0
   1bf20:	06d2      	lsls	r2, r2, #27
   1bf22:	6681      	str	r1, [r0, #104]	; 0x68
   1bf24:	d103      	bne.n	1bf2e <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1bf26:	6983      	ldr	r3, [r0, #24]
   1bf28:	b90b      	cbnz	r3, 1bf2e <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1bf2a:	f000 fa09 	bl	1c340 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1bf2e:	4631      	mov	r1, r6
   1bf30:	4808      	ldr	r0, [pc, #32]	; (1bf54 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1bf32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1bf36:	f009 b961 	b.w	251fc <z_reschedule>
		**(char ***)mem = slab->free_list;
   1bf3a:	682b      	ldr	r3, [r5, #0]
   1bf3c:	6962      	ldr	r2, [r4, #20]
   1bf3e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1bf40:	682b      	ldr	r3, [r5, #0]
   1bf42:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1bf44:	69a3      	ldr	r3, [r4, #24]
   1bf46:	3b01      	subs	r3, #1
   1bf48:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1bf4a:	f386 8811 	msr	BASEPRI, r6
   1bf4e:	f3bf 8f6f 	isb	sy
}
   1bf52:	bd70      	pop	{r4, r5, r6, pc}
   1bf54:	2000a6c6 	.word	0x2000a6c6

0001bf58 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1bf58:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1bf5a:	4c07      	ldr	r4, [pc, #28]	; (1bf78 <init_static_pools+0x20>)
   1bf5c:	4d07      	ldr	r5, [pc, #28]	; (1bf7c <init_static_pools+0x24>)
   1bf5e:	42ac      	cmp	r4, r5
   1bf60:	d301      	bcc.n	1bf66 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1bf62:	2000      	movs	r0, #0
   1bf64:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1bf66:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1bf6a:	4620      	mov	r0, r4
   1bf6c:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1bf70:	f001 f8fb 	bl	1d16a <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1bf74:	341c      	adds	r4, #28
   1bf76:	e7f2      	b.n	1bf5e <init_static_pools+0x6>
   1bf78:	2000e604 	.word	0x2000e604
   1bf7c:	2000e620 	.word	0x2000e620

0001bf80 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1bf84:	1e1c      	subs	r4, r3, #0
{
   1bf86:	b085      	sub	sp, #20
   1bf88:	4607      	mov	r7, r0
   1bf8a:	460d      	mov	r5, r1
   1bf8c:	4692      	mov	sl, r2
	if (timeout > 0) {
   1bf8e:	dd3b      	ble.n	1c008 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   1bf90:	f009 facc 	bl	2552c <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1bf94:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1bf98:	4b1d      	ldr	r3, [pc, #116]	; (1c010 <k_mem_pool_alloc+0x90>)
   1bf9a:	4e1e      	ldr	r6, [pc, #120]	; (1c014 <k_mem_pool_alloc+0x94>)
   1bf9c:	1afb      	subs	r3, r7, r3
   1bf9e:	109b      	asrs	r3, r3, #2
   1bfa0:	435e      	muls	r6, r3
		u32_t level_num, block_num;

		ret = z_sys_mem_pool_block_alloc(&p->base, size,
						 &level_num, &block_num,
						 &block->data);
		block->id.pool = pool_id(p);
   1bfa2:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1bfa4:	f107 0b14 	add.w	fp, r7, #20
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1bfa8:	ab03      	add	r3, sp, #12
   1bfaa:	aa02      	add	r2, sp, #8
   1bfac:	9500      	str	r5, [sp, #0]
   1bfae:	4651      	mov	r1, sl
   1bfb0:	4638      	mov	r0, r7
   1bfb2:	f001 f920 	bl	1d1f6 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1bfb6:	796b      	ldrb	r3, [r5, #5]
   1bfb8:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1bfba:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1bfbc:	f362 0303 	bfi	r3, r2, #0, #4
   1bfc0:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1bfc2:	686b      	ldr	r3, [r5, #4]
   1bfc4:	9a03      	ldr	r2, [sp, #12]
   1bfc6:	f362 331f 	bfi	r3, r2, #12, #20
   1bfca:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1bfcc:	b1c8      	cbz	r0, 1c002 <k_mem_pool_alloc+0x82>
   1bfce:	b1c4      	cbz	r4, 1c002 <k_mem_pool_alloc+0x82>
   1bfd0:	f110 0f0c 	cmn.w	r0, #12
   1bfd4:	d115      	bne.n	1c002 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   1bfd6:	f04f 0320 	mov.w	r3, #32
   1bfda:	f3ef 8011 	mrs	r0, BASEPRI
   1bfde:	f383 8811 	msr	BASEPRI, r3
   1bfe2:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1bfe6:	4622      	mov	r2, r4
   1bfe8:	4659      	mov	r1, fp
   1bfea:	f000 fb37 	bl	1c65c <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1bfee:	1c63      	adds	r3, r4, #1
   1bff0:	d0da      	beq.n	1bfa8 <k_mem_pool_alloc+0x28>
   1bff2:	f009 fa9b 	bl	2552c <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1bff6:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1bffa:	2c00      	cmp	r4, #0
   1bffc:	dcd4      	bgt.n	1bfa8 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1bffe:	f06f 000a 	mvn.w	r0, #10
}
   1c002:	b005      	add	sp, #20
   1c004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1c008:	f04f 0800 	mov.w	r8, #0
   1c00c:	e7c4      	b.n	1bf98 <k_mem_pool_alloc+0x18>
   1c00e:	bf00      	nop
   1c010:	2000e604 	.word	0x2000e604
   1c014:	b6db6db7 	.word	0xb6db6db7

0001c018 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1c018:	b570      	push	{r4, r5, r6, lr}
   1c01a:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1c01c:	6802      	ldr	r2, [r0, #0]
   1c01e:	7841      	ldrb	r1, [r0, #1]
   1c020:	4e11      	ldr	r6, [pc, #68]	; (1c068 <k_mem_pool_free_id+0x50>)
   1c022:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1c026:	00a4      	lsls	r4, r4, #2
   1c028:	0b12      	lsrs	r2, r2, #12
   1c02a:	f001 010f 	and.w	r1, r1, #15
   1c02e:	1930      	adds	r0, r6, r4
   1c030:	f001 f994 	bl	1d35c <z_sys_mem_pool_block_free>
   1c034:	f04f 0320 	mov.w	r3, #32
   1c038:	f3ef 8511 	mrs	r5, BASEPRI
   1c03c:	f383 8811 	msr	BASEPRI, r3
   1c040:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1c044:	f104 0014 	add.w	r0, r4, #20
   1c048:	4430      	add	r0, r6
   1c04a:	f009 f97a 	bl	25342 <z_unpend_all>

	if (need_sched != 0) {
   1c04e:	b128      	cbz	r0, 1c05c <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   1c050:	4629      	mov	r1, r5
   1c052:	4806      	ldr	r0, [pc, #24]	; (1c06c <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1c054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1c058:	f009 b8d0 	b.w	251fc <z_reschedule>
	__asm__ volatile(
   1c05c:	f385 8811 	msr	BASEPRI, r5
   1c060:	f3bf 8f6f 	isb	sy
}
   1c064:	bd70      	pop	{r4, r5, r6, pc}
   1c066:	bf00      	nop
   1c068:	2000e604 	.word	0x2000e604
   1c06c:	2000a6c6 	.word	0x2000a6c6

0001c070 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1c070:	4601      	mov	r1, r0
   1c072:	4801      	ldr	r0, [pc, #4]	; (1c078 <k_malloc+0x8>)
   1c074:	f008 bf75 	b.w	24f62 <k_mem_pool_malloc>
   1c078:	2000e604 	.word	0x2000e604

0001c07c <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1c07c:	4b03      	ldr	r3, [pc, #12]	; (1c08c <z_thread_malloc+0x10>)
   1c07e:	689b      	ldr	r3, [r3, #8]
{
   1c080:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1c082:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1c084:	b108      	cbz	r0, 1c08a <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1c086:	f008 bf6c 	b.w	24f62 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1c08a:	4770      	bx	lr
   1c08c:	20005f64 	.word	0x20005f64

0001c090 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c092:	4604      	mov	r4, r0
   1c094:	460f      	mov	r7, r1
	__asm__ volatile(
   1c096:	f04f 0320 	mov.w	r3, #32
   1c09a:	f3ef 8511 	mrs	r5, BASEPRI
   1c09e:	f383 8811 	msr	BASEPRI, r3
   1c0a2:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1c0a6:	68c2      	ldr	r2, [r0, #12]
   1c0a8:	4930      	ldr	r1, [pc, #192]	; (1c16c <z_impl_k_mutex_lock+0xdc>)
   1c0aa:	b15a      	cbz	r2, 1c0c4 <z_impl_k_mutex_lock+0x34>
   1c0ac:	6880      	ldr	r0, [r0, #8]
   1c0ae:	688e      	ldr	r6, [r1, #8]
   1c0b0:	42b0      	cmp	r0, r6
   1c0b2:	d015      	beq.n	1c0e0 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1c0b4:	b9b7      	cbnz	r7, 1c0e4 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1c0b6:	f385 8811 	msr	BASEPRI, r5
   1c0ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1c0be:	f06f 000f 	mvn.w	r0, #15
   1c0c2:	e00c      	b.n	1c0de <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1c0c4:	688b      	ldr	r3, [r1, #8]
   1c0c6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1c0ca:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
   1c0cc:	3201      	adds	r2, #1
		mutex->owner = _current;
   1c0ce:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1c0d0:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1c0d2:	60a3      	str	r3, [r4, #8]
   1c0d4:	f385 8811 	msr	BASEPRI, r5
   1c0d8:	f3bf 8f6f 	isb	sy
		return 0;
   1c0dc:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1c0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1c0e0:	6923      	ldr	r3, [r4, #16]
   1c0e2:	e7f2      	b.n	1c0ca <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1c0e4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c0e8:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1c0ec:	4299      	cmp	r1, r3
   1c0ee:	bfa8      	it	ge
   1c0f0:	4619      	movge	r1, r3
   1c0f2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1c0f6:	4299      	cmp	r1, r3
   1c0f8:	da2b      	bge.n	1c152 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1c0fa:	f000 fb15 	bl	1c728 <z_set_prio>
   1c0fe:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1c100:	463b      	mov	r3, r7
   1c102:	4622      	mov	r2, r4
   1c104:	4629      	mov	r1, r5
   1c106:	481a      	ldr	r0, [pc, #104]	; (1c170 <z_impl_k_mutex_lock+0xe0>)
   1c108:	f000 facc 	bl	1c6a4 <z_pend_curr>
	if (got_mutex == 0) {
   1c10c:	2800      	cmp	r0, #0
   1c10e:	d0e6      	beq.n	1c0de <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1c110:	f04f 0320 	mov.w	r3, #32
   1c114:	f3ef 8511 	mrs	r5, BASEPRI
   1c118:	f383 8811 	msr	BASEPRI, r3
   1c11c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1c120:	6823      	ldr	r3, [r4, #0]
   1c122:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c124:	429c      	cmp	r4, r3
   1c126:	d007      	beq.n	1c138 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1c128:	b133      	cbz	r3, 1c138 <z_impl_k_mutex_lock+0xa8>
   1c12a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1c12e:	4299      	cmp	r1, r3
   1c130:	bfa8      	it	ge
   1c132:	4619      	movge	r1, r3
   1c134:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c138:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c13a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c13e:	4299      	cmp	r1, r3
   1c140:	d109      	bne.n	1c156 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1c142:	b16e      	cbz	r6, 1c160 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1c144:	4629      	mov	r1, r5
   1c146:	480a      	ldr	r0, [pc, #40]	; (1c170 <z_impl_k_mutex_lock+0xe0>)
   1c148:	f009 f858 	bl	251fc <z_reschedule>
	return -EAGAIN;
   1c14c:	f06f 000a 	mvn.w	r0, #10
   1c150:	e7c5      	b.n	1c0de <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1c152:	2600      	movs	r6, #0
   1c154:	e7d4      	b.n	1c100 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1c156:	f000 fae7 	bl	1c728 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c15a:	2800      	cmp	r0, #0
   1c15c:	d1f2      	bne.n	1c144 <z_impl_k_mutex_lock+0xb4>
   1c15e:	e7f0      	b.n	1c142 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1c160:	f385 8811 	msr	BASEPRI, r5
   1c164:	f3bf 8f6f 	isb	sy
   1c168:	e7f0      	b.n	1c14c <z_impl_k_mutex_lock+0xbc>
   1c16a:	bf00      	nop
   1c16c:	20005f64 	.word	0x20005f64
   1c170:	2000a6c6 	.word	0x2000a6c6

0001c174 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1c174:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1c176:	4b1d      	ldr	r3, [pc, #116]	; (1c1ec <z_impl_k_mutex_unlock+0x78>)
   1c178:	689a      	ldr	r2, [r3, #8]
   1c17a:	7bd3      	ldrb	r3, [r2, #15]
   1c17c:	3b01      	subs	r3, #1
   1c17e:	4604      	mov	r4, r0
   1c180:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1c182:	68c3      	ldr	r3, [r0, #12]
   1c184:	2b01      	cmp	r3, #1
   1c186:	d005      	beq.n	1c194 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1c188:	3b01      	subs	r3, #1
   1c18a:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   1c18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
   1c190:	f000 b8ba 	b.w	1c308 <k_sched_unlock>
	__asm__ volatile(
   1c194:	f04f 0320 	mov.w	r3, #32
   1c198:	f3ef 8511 	mrs	r5, BASEPRI
   1c19c:	f383 8811 	msr	BASEPRI, r3
   1c1a0:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1c1a4:	6901      	ldr	r1, [r0, #16]
   1c1a6:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c1a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c1ac:	4299      	cmp	r1, r3
   1c1ae:	d001      	beq.n	1c1b4 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   1c1b0:	f000 faba 	bl	1c728 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1c1b4:	4620      	mov	r0, r4
   1c1b6:	f009 f897 	bl	252e8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1c1ba:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1c1bc:	b180      	cbz	r0, 1c1e0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1c1be:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1c1c2:	6122      	str	r2, [r4, #16]
   1c1c4:	2200      	movs	r2, #0
   1c1c6:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c1c8:	7b42      	ldrb	r2, [r0, #13]
   1c1ca:	06d2      	lsls	r2, r2, #27
   1c1cc:	d103      	bne.n	1c1d6 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
   1c1ce:	6983      	ldr	r3, [r0, #24]
   1c1d0:	b90b      	cbnz	r3, 1c1d6 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
   1c1d2:	f000 f8b5 	bl	1c340 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1c1d6:	4629      	mov	r1, r5
   1c1d8:	4805      	ldr	r0, [pc, #20]	; (1c1f0 <z_impl_k_mutex_unlock+0x7c>)
   1c1da:	f009 f80f 	bl	251fc <z_reschedule>
   1c1de:	e7d5      	b.n	1c18c <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   1c1e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1c1e2:	f385 8811 	msr	BASEPRI, r5
   1c1e6:	f3bf 8f6f 	isb	sy
   1c1ea:	e7cf      	b.n	1c18c <z_impl_k_mutex_unlock+0x18>
   1c1ec:	20005f64 	.word	0x20005f64
   1c1f0:	2000a6c6 	.word	0x2000a6c6

0001c1f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1c1f4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1c1f6:	4c08      	ldr	r4, [pc, #32]	; (1c218 <z_reset_time_slice+0x24>)
   1c1f8:	6823      	ldr	r3, [r4, #0]
   1c1fa:	b15b      	cbz	r3, 1c214 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1c1fc:	f7e8 faba 	bl	4774 <z_clock_elapsed>
   1c200:	6823      	ldr	r3, [r4, #0]
   1c202:	4a06      	ldr	r2, [pc, #24]	; (1c21c <z_reset_time_slice+0x28>)
   1c204:	4418      	add	r0, r3
   1c206:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1c208:	2100      	movs	r1, #0
   1c20a:	4618      	mov	r0, r3
	}
}
   1c20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1c210:	f009 b96e 	b.w	254f0 <z_set_timeout_expiry>
}
   1c214:	bd10      	pop	{r4, pc}
   1c216:	bf00      	nop
   1c218:	20005f9c 	.word	0x20005f9c
   1c21c:	20005f64 	.word	0x20005f64

0001c220 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c222:	460d      	mov	r5, r1
	__asm__ volatile(
   1c224:	f04f 0320 	mov.w	r3, #32
   1c228:	f3ef 8411 	mrs	r4, BASEPRI
   1c22c:	f383 8811 	msr	BASEPRI, r3
   1c230:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1c234:	4b0d      	ldr	r3, [pc, #52]	; (1c26c <k_sched_time_slice_set+0x4c>)
			return (u32_t)((t * to_hz + off) / from_hz);
   1c236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1c23a:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c23e:	2700      	movs	r7, #0
   1c240:	fbe1 6700 	umlal	r6, r7, r1, r0
   1c244:	2200      	movs	r2, #0
   1c246:	611a      	str	r2, [r3, #16]
   1c248:	4630      	mov	r0, r6
   1c24a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c24e:	2300      	movs	r3, #0
   1c250:	4639      	mov	r1, r7
   1c252:	f7e3 ff45 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1c256:	4b06      	ldr	r3, [pc, #24]	; (1c270 <k_sched_time_slice_set+0x50>)
   1c258:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1c25a:	4b06      	ldr	r3, [pc, #24]	; (1c274 <k_sched_time_slice_set+0x54>)
   1c25c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1c25e:	f7ff ffc9 	bl	1c1f4 <z_reset_time_slice>
	__asm__ volatile(
   1c262:	f384 8811 	msr	BASEPRI, r4
   1c266:	f3bf 8f6f 	isb	sy
	}
}
   1c26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c26c:	20005f64 	.word	0x20005f64
   1c270:	20005f9c 	.word	0x20005f9c
   1c274:	20005f98 	.word	0x20005f98

0001c278 <k_sched_lock>:
	__asm__ volatile(
   1c278:	f04f 0320 	mov.w	r3, #32
   1c27c:	f3ef 8111 	mrs	r1, BASEPRI
   1c280:	f383 8811 	msr	BASEPRI, r3
   1c284:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1c288:	4b04      	ldr	r3, [pc, #16]	; (1c29c <k_sched_lock+0x24>)
   1c28a:	689a      	ldr	r2, [r3, #8]
   1c28c:	7bd3      	ldrb	r3, [r2, #15]
   1c28e:	3b01      	subs	r3, #1
   1c290:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1c292:	f381 8811 	msr	BASEPRI, r1
   1c296:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1c29a:	4770      	bx	lr
   1c29c:	20005f64 	.word	0x20005f64

0001c2a0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1c2a0:	4b09      	ldr	r3, [pc, #36]	; (1c2c8 <z_priq_dumb_remove+0x28>)
   1c2a2:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1c2a6:	4282      	cmp	r2, r0
   1c2a8:	d105      	bne.n	1c2b6 <z_priq_dumb_remove+0x16>
   1c2aa:	689b      	ldr	r3, [r3, #8]
   1c2ac:	428b      	cmp	r3, r1
   1c2ae:	d102      	bne.n	1c2b6 <z_priq_dumb_remove+0x16>
   1c2b0:	7b4b      	ldrb	r3, [r1, #13]
   1c2b2:	06db      	lsls	r3, r3, #27
   1c2b4:	d106      	bne.n	1c2c4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1c2b6:	e9d1 3200 	ldrd	r3, r2, [r1]
   1c2ba:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c2bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c2be:	2300      	movs	r3, #0
	node->prev = NULL;
   1c2c0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1c2c4:	4770      	bx	lr
   1c2c6:	bf00      	nop
   1c2c8:	20005f64 	.word	0x20005f64

0001c2cc <update_cache>:
{
   1c2cc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1c2ce:	4c0d      	ldr	r4, [pc, #52]	; (1c304 <update_cache+0x38>)
{
   1c2d0:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1c2d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c2d6:	f008 ffd0 	bl	2527a <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   1c2da:	4605      	mov	r5, r0
   1c2dc:	b900      	cbnz	r0, 1c2e0 <update_cache+0x14>
   1c2de:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1c2e0:	68a3      	ldr	r3, [r4, #8]
   1c2e2:	b94a      	cbnz	r2, 1c2f8 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1c2e4:	7b5a      	ldrb	r2, [r3, #13]
   1c2e6:	06d2      	lsls	r2, r2, #27
   1c2e8:	d106      	bne.n	1c2f8 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1c2ea:	69aa      	ldr	r2, [r5, #24]
   1c2ec:	b922      	cbnz	r2, 1c2f8 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   1c2ee:	89da      	ldrh	r2, [r3, #14]
   1c2f0:	2a7f      	cmp	r2, #127	; 0x7f
   1c2f2:	d901      	bls.n	1c2f8 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1c2f4:	6263      	str	r3, [r4, #36]	; 0x24
}
   1c2f6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1c2f8:	429d      	cmp	r5, r3
   1c2fa:	d001      	beq.n	1c300 <update_cache+0x34>
			z_reset_time_slice();
   1c2fc:	f7ff ff7a 	bl	1c1f4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1c300:	6265      	str	r5, [r4, #36]	; 0x24
}
   1c302:	e7f8      	b.n	1c2f6 <update_cache+0x2a>
   1c304:	20005f64 	.word	0x20005f64

0001c308 <k_sched_unlock>:
{
   1c308:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c30a:	f04f 0320 	mov.w	r3, #32
   1c30e:	f3ef 8411 	mrs	r4, BASEPRI
   1c312:	f383 8811 	msr	BASEPRI, r3
   1c316:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1c31a:	4b08      	ldr	r3, [pc, #32]	; (1c33c <k_sched_unlock+0x34>)
   1c31c:	689a      	ldr	r2, [r3, #8]
   1c31e:	7bd3      	ldrb	r3, [r2, #15]
   1c320:	3301      	adds	r3, #1
   1c322:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1c324:	2000      	movs	r0, #0
   1c326:	f7ff ffd1 	bl	1c2cc <update_cache>
	__asm__ volatile(
   1c32a:	f384 8811 	msr	BASEPRI, r4
   1c32e:	f3bf 8f6f 	isb	sy
}
   1c332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1c336:	f008 bf78 	b.w	2522a <z_reschedule_unlocked>
   1c33a:	bf00      	nop
   1c33c:	20005f64 	.word	0x20005f64

0001c340 <z_add_thread_to_ready_q>:
{
   1c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1c342:	f04f 0320 	mov.w	r3, #32
   1c346:	f3ef 8411 	mrs	r4, BASEPRI
   1c34a:	f383 8811 	msr	BASEPRI, r3
   1c34e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1c352:	4a15      	ldr	r2, [pc, #84]	; (1c3a8 <z_add_thread_to_ready_q+0x68>)
   1c354:	4611      	mov	r1, r2
   1c356:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c35a:	428b      	cmp	r3, r1
   1c35c:	d01d      	beq.n	1c39a <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c35e:	b1e3      	cbz	r3, 1c39a <z_add_thread_to_ready_q+0x5a>
   1c360:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1c362:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1c366:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1c36a:	42af      	cmp	r7, r5
   1c36c:	dd10      	ble.n	1c390 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   1c36e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c370:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1c374:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1c376:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1c378:	7b43      	ldrb	r3, [r0, #13]
   1c37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c37e:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1c380:	2000      	movs	r0, #0
   1c382:	f7ff ffa3 	bl	1c2cc <update_cache>
	__asm__ volatile(
   1c386:	f384 8811 	msr	BASEPRI, r4
   1c38a:	f3bf 8f6f 	isb	sy
}
   1c38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1c390:	42b3      	cmp	r3, r6
   1c392:	d002      	beq.n	1c39a <z_add_thread_to_ready_q+0x5a>
   1c394:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c396:	2b00      	cmp	r3, #0
   1c398:	d1e5      	bne.n	1c366 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   1c39a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c39c:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1c39e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1c3a0:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
   1c3a2:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1c3a4:	62d0      	str	r0, [r2, #44]	; 0x2c
   1c3a6:	e7e7      	b.n	1c378 <z_add_thread_to_ready_q+0x38>
   1c3a8:	20005f64 	.word	0x20005f64

0001c3ac <z_move_thread_to_end_of_prio_q>:
{
   1c3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3ae:	4604      	mov	r4, r0
	__asm__ volatile(
   1c3b0:	f04f 0320 	mov.w	r3, #32
   1c3b4:	f3ef 8511 	mrs	r5, BASEPRI
   1c3b8:	f383 8811 	msr	BASEPRI, r3
   1c3bc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1c3c0:	7b43      	ldrb	r3, [r0, #13]
   1c3c2:	065a      	lsls	r2, r3, #25
   1c3c4:	d503      	bpl.n	1c3ce <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c3c6:	4601      	mov	r1, r0
   1c3c8:	4817      	ldr	r0, [pc, #92]	; (1c428 <z_move_thread_to_end_of_prio_q+0x7c>)
   1c3ca:	f7ff ff69 	bl	1c2a0 <z_priq_dumb_remove>
	return list->head == list;
   1c3ce:	4a17      	ldr	r2, [pc, #92]	; (1c42c <z_move_thread_to_end_of_prio_q+0x80>)
   1c3d0:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c3d4:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1c3d8:	428b      	cmp	r3, r1
   1c3da:	d01f      	beq.n	1c41c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c3dc:	b1f3      	cbz	r3, 1c41c <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c3de:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1c3e2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1c3e6:	42b7      	cmp	r7, r6
   1c3e8:	dd13      	ble.n	1c412 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1c3ea:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1c3ec:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1c3f0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1c3f2:	605c      	str	r4, [r3, #4]
   1c3f4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1c3f6:	6890      	ldr	r0, [r2, #8]
   1c3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c3fc:	7363      	strb	r3, [r4, #13]
   1c3fe:	1b03      	subs	r3, r0, r4
   1c400:	4258      	negs	r0, r3
   1c402:	4158      	adcs	r0, r3
   1c404:	f7ff ff62 	bl	1c2cc <update_cache>
	__asm__ volatile(
   1c408:	f385 8811 	msr	BASEPRI, r5
   1c40c:	f3bf 8f6f 	isb	sy
}
   1c410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1c412:	4283      	cmp	r3, r0
   1c414:	d002      	beq.n	1c41c <z_move_thread_to_end_of_prio_q+0x70>
   1c416:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c418:	2b00      	cmp	r3, #0
   1c41a:	d1e2      	bne.n	1c3e2 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1c41c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1c420:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c422:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c424:	62d4      	str	r4, [r2, #44]	; 0x2c
   1c426:	e7e5      	b.n	1c3f4 <z_move_thread_to_end_of_prio_q+0x48>
   1c428:	20005f8c 	.word	0x20005f8c
   1c42c:	20005f64 	.word	0x20005f64

0001c430 <z_time_slice>:
	if (pending_current == _current) {
   1c430:	4a15      	ldr	r2, [pc, #84]	; (1c488 <z_time_slice+0x58>)
   1c432:	4916      	ldr	r1, [pc, #88]	; (1c48c <z_time_slice+0x5c>)
{
   1c434:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1c436:	680c      	ldr	r4, [r1, #0]
   1c438:	6893      	ldr	r3, [r2, #8]
   1c43a:	42a3      	cmp	r3, r4
   1c43c:	4614      	mov	r4, r2
   1c43e:	d103      	bne.n	1c448 <z_time_slice+0x18>
}
   1c440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1c444:	f7ff bed6 	b.w	1c1f4 <z_reset_time_slice>
	pending_current = NULL;
   1c448:	2500      	movs	r5, #0
   1c44a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1c44c:	4910      	ldr	r1, [pc, #64]	; (1c490 <z_time_slice+0x60>)
   1c44e:	6809      	ldr	r1, [r1, #0]
   1c450:	b1b9      	cbz	r1, 1c482 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1c452:	89d9      	ldrh	r1, [r3, #14]
   1c454:	297f      	cmp	r1, #127	; 0x7f
   1c456:	d814      	bhi.n	1c482 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1c458:	490e      	ldr	r1, [pc, #56]	; (1c494 <z_time_slice+0x64>)
   1c45a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1c45e:	6809      	ldr	r1, [r1, #0]
   1c460:	428d      	cmp	r5, r1
   1c462:	db0e      	blt.n	1c482 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1c464:	490c      	ldr	r1, [pc, #48]	; (1c498 <z_time_slice+0x68>)
   1c466:	428b      	cmp	r3, r1
   1c468:	d00b      	beq.n	1c482 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1c46a:	6999      	ldr	r1, [r3, #24]
   1c46c:	b949      	cbnz	r1, 1c482 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1c46e:	6911      	ldr	r1, [r2, #16]
   1c470:	4281      	cmp	r1, r0
   1c472:	dc03      	bgt.n	1c47c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1c474:	4618      	mov	r0, r3
   1c476:	f7ff ff99 	bl	1c3ac <z_move_thread_to_end_of_prio_q>
   1c47a:	e7e1      	b.n	1c440 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1c47c:	1a09      	subs	r1, r1, r0
   1c47e:	6111      	str	r1, [r2, #16]
}
   1c480:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1c482:	2300      	movs	r3, #0
   1c484:	6123      	str	r3, [r4, #16]
   1c486:	e7fb      	b.n	1c480 <z_time_slice+0x50>
   1c488:	20005f64 	.word	0x20005f64
   1c48c:	20005f94 	.word	0x20005f94
   1c490:	20005f9c 	.word	0x20005f9c
   1c494:	20005f98 	.word	0x20005f98
   1c498:	20001e28 	.word	0x20001e28

0001c49c <z_thread_single_suspend>:
{
   1c49c:	b570      	push	{r4, r5, r6, lr}
   1c49e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1c4a0:	3018      	adds	r0, #24
   1c4a2:	f008 ffff 	bl	254a4 <z_abort_timeout>
	__asm__ volatile(
   1c4a6:	f04f 0320 	mov.w	r3, #32
   1c4aa:	f3ef 8611 	mrs	r6, BASEPRI
   1c4ae:	f383 8811 	msr	BASEPRI, r3
   1c4b2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1c4b6:	7b63      	ldrb	r3, [r4, #13]
   1c4b8:	065a      	lsls	r2, r3, #25
   1c4ba:	d507      	bpl.n	1c4cc <z_thread_single_suspend+0x30>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c4bc:	4621      	mov	r1, r4
   1c4be:	480f      	ldr	r0, [pc, #60]	; (1c4fc <z_thread_single_suspend+0x60>)
   1c4c0:	f7ff feee 	bl	1c2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c4c4:	7b63      	ldrb	r3, [r4, #13]
   1c4c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1c4ca:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1c4cc:	4d0c      	ldr	r5, [pc, #48]	; (1c500 <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c4ce:	7b63      	ldrb	r3, [r4, #13]
   1c4d0:	68a8      	ldr	r0, [r5, #8]
   1c4d2:	f043 0310 	orr.w	r3, r3, #16
   1c4d6:	7363      	strb	r3, [r4, #13]
   1c4d8:	1b03      	subs	r3, r0, r4
   1c4da:	4258      	negs	r0, r3
   1c4dc:	4158      	adcs	r0, r3
   1c4de:	f7ff fef5 	bl	1c2cc <update_cache>
	__asm__ volatile(
   1c4e2:	f386 8811 	msr	BASEPRI, r6
   1c4e6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1c4ea:	68ab      	ldr	r3, [r5, #8]
   1c4ec:	42a3      	cmp	r3, r4
   1c4ee:	d103      	bne.n	1c4f8 <z_thread_single_suspend+0x5c>
}
   1c4f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1c4f4:	f008 be99 	b.w	2522a <z_reschedule_unlocked>
}
   1c4f8:	bd70      	pop	{r4, r5, r6, pc}
   1c4fa:	bf00      	nop
   1c4fc:	20005f8c 	.word	0x20005f8c
   1c500:	20005f64 	.word	0x20005f64

0001c504 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1c504:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c506:	b570      	push	{r4, r5, r6, lr}
   1c508:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1c50a:	b103      	cbz	r3, 1c50e <z_thread_single_abort+0xa>
		thread->fn_abort();
   1c50c:	4798      	blx	r3
   1c50e:	f104 0018 	add.w	r0, r4, #24
   1c512:	f008 ffc7 	bl	254a4 <z_abort_timeout>
	__asm__ volatile(
   1c516:	f04f 0320 	mov.w	r3, #32
   1c51a:	f3ef 8511 	mrs	r5, BASEPRI
   1c51e:	f383 8811 	msr	BASEPRI, r3
   1c522:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
   1c526:	4620      	mov	r0, r4
   1c528:	f008 fe2d 	bl	25186 <z_is_thread_ready>
   1c52c:	7b63      	ldrb	r3, [r4, #13]
   1c52e:	4606      	mov	r6, r0
   1c530:	b1c8      	cbz	r0, 1c566 <z_thread_single_abort+0x62>
			if (z_is_thread_queued(thread)) {
   1c532:	0659      	lsls	r1, r3, #25
   1c534:	d507      	bpl.n	1c546 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1c536:	4621      	mov	r1, r4
   1c538:	4811      	ldr	r0, [pc, #68]	; (1c580 <z_thread_single_abort+0x7c>)
   1c53a:	f7ff feb1 	bl	1c2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c53e:	7b63      	ldrb	r3, [r4, #13]
   1c540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1c544:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1c546:	4b0f      	ldr	r3, [pc, #60]	; (1c584 <z_thread_single_abort+0x80>)
   1c548:	6898      	ldr	r0, [r3, #8]
   1c54a:	1b02      	subs	r2, r0, r4
   1c54c:	4250      	negs	r0, r2
   1c54e:	4150      	adcs	r0, r2
   1c550:	f7ff febc 	bl	1c2cc <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1c554:	7b63      	ldrb	r3, [r4, #13]
   1c556:	f043 0308 	orr.w	r3, r3, #8
   1c55a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1c55c:	f385 8811 	msr	BASEPRI, r5
   1c560:	f3bf 8f6f 	isb	sy
}
   1c564:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   1c566:	079b      	lsls	r3, r3, #30
   1c568:	d5f4      	bpl.n	1c554 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1c56a:	4621      	mov	r1, r4
   1c56c:	68a0      	ldr	r0, [r4, #8]
   1c56e:	f7ff fe97 	bl	1c2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c572:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1c574:	60a6      	str	r6, [r4, #8]
   1c576:	f023 0302 	bic.w	r3, r3, #2
   1c57a:	7363      	strb	r3, [r4, #13]
   1c57c:	e7ea      	b.n	1c554 <z_thread_single_abort+0x50>
   1c57e:	bf00      	nop
   1c580:	20005f8c 	.word	0x20005f8c
   1c584:	20005f64 	.word	0x20005f64

0001c588 <z_remove_thread_from_ready_q>:
{
   1c588:	b538      	push	{r3, r4, r5, lr}
   1c58a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c58c:	f04f 0320 	mov.w	r3, #32
   1c590:	f3ef 8511 	mrs	r5, BASEPRI
   1c594:	f383 8811 	msr	BASEPRI, r3
   1c598:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1c59c:	7b43      	ldrb	r3, [r0, #13]
   1c59e:	065a      	lsls	r2, r3, #25
   1c5a0:	d507      	bpl.n	1c5b2 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c5a2:	4601      	mov	r1, r0
   1c5a4:	4809      	ldr	r0, [pc, #36]	; (1c5cc <z_remove_thread_from_ready_q+0x44>)
   1c5a6:	f7ff fe7b 	bl	1c2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c5aa:	7b63      	ldrb	r3, [r4, #13]
   1c5ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1c5b0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1c5b2:	4b07      	ldr	r3, [pc, #28]	; (1c5d0 <z_remove_thread_from_ready_q+0x48>)
   1c5b4:	6898      	ldr	r0, [r3, #8]
   1c5b6:	1b03      	subs	r3, r0, r4
   1c5b8:	4258      	negs	r0, r3
   1c5ba:	4158      	adcs	r0, r3
   1c5bc:	f7ff fe86 	bl	1c2cc <update_cache>
	__asm__ volatile(
   1c5c0:	f385 8811 	msr	BASEPRI, r5
   1c5c4:	f3bf 8f6f 	isb	sy
}
   1c5c8:	bd38      	pop	{r3, r4, r5, pc}
   1c5ca:	bf00      	nop
   1c5cc:	20005f8c 	.word	0x20005f8c
   1c5d0:	20005f64 	.word	0x20005f64

0001c5d4 <pend>:
{
   1c5d4:	b570      	push	{r4, r5, r6, lr}
   1c5d6:	4604      	mov	r4, r0
   1c5d8:	460d      	mov	r5, r1
   1c5da:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1c5dc:	f7ff ffd4 	bl	1c588 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1c5e0:	7b63      	ldrb	r3, [r4, #13]
   1c5e2:	f043 0302 	orr.w	r3, r3, #2
   1c5e6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1c5e8:	b17d      	cbz	r5, 1c60a <pend+0x36>
	return list->head == list;
   1c5ea:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1c5ec:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c5ee:	429d      	cmp	r5, r3
   1c5f0:	d029      	beq.n	1c646 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c5f2:	b343      	cbz	r3, 1c646 <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c5f4:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1c5f8:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1c5fc:	4291      	cmp	r1, r2
   1c5fe:	dd1c      	ble.n	1c63a <pend+0x66>
	node->prev = successor->prev;
   1c600:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c602:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1c606:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c608:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1c60a:	1c73      	adds	r3, r6, #1
   1c60c:	d022      	beq.n	1c654 <pend+0x80>
   1c60e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1c612:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c616:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c61a:	2100      	movs	r1, #0
   1c61c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c620:	fbc5 0106 	smlal	r0, r1, r5, r6
   1c624:	2300      	movs	r3, #0
   1c626:	f7e3 fd5b 	bl	e0 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1c62a:	490b      	ldr	r1, [pc, #44]	; (1c658 <pend+0x84>)
   1c62c:	1c42      	adds	r2, r0, #1
   1c62e:	f104 0018 	add.w	r0, r4, #24
}
   1c632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c636:	f000 bb2f 	b.w	1cc98 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1c63a:	6869      	ldr	r1, [r5, #4]
   1c63c:	428b      	cmp	r3, r1
   1c63e:	d002      	beq.n	1c646 <pend+0x72>
   1c640:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c642:	2b00      	cmp	r3, #0
   1c644:	d1d8      	bne.n	1c5f8 <pend+0x24>
	node->prev = list->tail;
   1c646:	686b      	ldr	r3, [r5, #4]
   1c648:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1c64a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1c64c:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1c64e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c650:	606c      	str	r4, [r5, #4]
   1c652:	e7da      	b.n	1c60a <pend+0x36>
}
   1c654:	bd70      	pop	{r4, r5, r6, pc}
   1c656:	bf00      	nop
   1c658:	00025287 	.word	0x00025287

0001c65c <z_pend_curr_irqlock>:
{
   1c65c:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
   1c65e:	4d0f      	ldr	r5, [pc, #60]	; (1c69c <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1c660:	4c0f      	ldr	r4, [pc, #60]	; (1c6a0 <z_pend_curr_irqlock+0x44>)
{
   1c662:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1c664:	68a8      	ldr	r0, [r5, #8]
   1c666:	f7ff ffb5 	bl	1c5d4 <pend>
	pending_current = _current;
   1c66a:	68ab      	ldr	r3, [r5, #8]
   1c66c:	6023      	str	r3, [r4, #0]
   1c66e:	4630      	mov	r0, r6
   1c670:	f7e8 f8c2 	bl	47f8 <arch_swap>
	__asm__ volatile(
   1c674:	f04f 0220 	mov.w	r2, #32
   1c678:	f3ef 8311 	mrs	r3, BASEPRI
   1c67c:	f382 8811 	msr	BASEPRI, r2
   1c680:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1c684:	6822      	ldr	r2, [r4, #0]
   1c686:	68a9      	ldr	r1, [r5, #8]
   1c688:	4291      	cmp	r1, r2
			pending_current = NULL;
   1c68a:	bf04      	itt	eq
   1c68c:	2200      	moveq	r2, #0
   1c68e:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1c690:	f383 8811 	msr	BASEPRI, r3
   1c694:	f3bf 8f6f 	isb	sy
}
   1c698:	bd70      	pop	{r4, r5, r6, pc}
   1c69a:	bf00      	nop
   1c69c:	20005f64 	.word	0x20005f64
   1c6a0:	20005f94 	.word	0x20005f94

0001c6a4 <z_pend_curr>:
{
   1c6a4:	b510      	push	{r4, lr}
   1c6a6:	460c      	mov	r4, r1
   1c6a8:	4611      	mov	r1, r2
	pending_current = _current;
   1c6aa:	4a06      	ldr	r2, [pc, #24]	; (1c6c4 <z_pend_curr+0x20>)
   1c6ac:	6890      	ldr	r0, [r2, #8]
   1c6ae:	4a06      	ldr	r2, [pc, #24]	; (1c6c8 <z_pend_curr+0x24>)
   1c6b0:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1c6b2:	461a      	mov	r2, r3
   1c6b4:	f7ff ff8e 	bl	1c5d4 <pend>
   1c6b8:	4620      	mov	r0, r4
}
   1c6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c6be:	f7e8 b89b 	b.w	47f8 <arch_swap>
   1c6c2:	bf00      	nop
   1c6c4:	20005f64 	.word	0x20005f64
   1c6c8:	20005f94 	.word	0x20005f94

0001c6cc <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1c6ce:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1c6d0:	f008 ff28 	bl	25524 <z_tick_get_32>
   1c6d4:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1c6d6:	f04f 0320 	mov.w	r3, #32
   1c6da:	f3ef 8711 	mrs	r7, BASEPRI
   1c6de:	f383 8811 	msr	BASEPRI, r3
   1c6e2:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1c6e6:	4d0d      	ldr	r5, [pc, #52]	; (1c71c <z_tick_sleep.part.19+0x50>)
   1c6e8:	4b0d      	ldr	r3, [pc, #52]	; (1c720 <z_tick_sleep.part.19+0x54>)
   1c6ea:	68a8      	ldr	r0, [r5, #8]
   1c6ec:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1c6ee:	f7ff ff4b 	bl	1c588 <z_remove_thread_from_ready_q>
   1c6f2:	68a8      	ldr	r0, [r5, #8]
   1c6f4:	490b      	ldr	r1, [pc, #44]	; (1c724 <z_tick_sleep.part.19+0x58>)
   1c6f6:	4632      	mov	r2, r6
   1c6f8:	3018      	adds	r0, #24
   1c6fa:	f000 facd 	bl	1cc98 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1c6fe:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c700:	7b53      	ldrb	r3, [r2, #13]
   1c702:	f043 0310 	orr.w	r3, r3, #16
   1c706:	7353      	strb	r3, [r2, #13]
   1c708:	4638      	mov	r0, r7
   1c70a:	f7e8 f875 	bl	47f8 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1c70e:	f008 ff09 	bl	25524 <z_tick_get_32>
   1c712:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1c714:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1c718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c71a:	bf00      	nop
   1c71c:	20005f64 	.word	0x20005f64
   1c720:	20005f94 	.word	0x20005f94
   1c724:	00025287 	.word	0x00025287

0001c728 <z_set_prio>:
{
   1c728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c72c:	4604      	mov	r4, r0
   1c72e:	f04f 0320 	mov.w	r3, #32
   1c732:	f3ef 8911 	mrs	r9, BASEPRI
   1c736:	f383 8811 	msr	BASEPRI, r3
   1c73a:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   1c73e:	f008 fd22 	bl	25186 <z_is_thread_ready>
		if (need_sched) {
   1c742:	b24e      	sxtb	r6, r1
   1c744:	4680      	mov	r8, r0
   1c746:	b360      	cbz	r0, 1c7a2 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c748:	4d17      	ldr	r5, [pc, #92]	; (1c7a8 <z_set_prio+0x80>)
   1c74a:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1c74e:	4621      	mov	r1, r4
   1c750:	4638      	mov	r0, r7
   1c752:	f7ff fda5 	bl	1c2a0 <z_priq_dumb_remove>
	return list->head == list;
   1c756:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   1c758:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c75a:	42bb      	cmp	r3, r7
   1c75c:	462a      	mov	r2, r5
   1c75e:	d019      	beq.n	1c794 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c760:	b1c3      	cbz	r3, 1c794 <z_set_prio+0x6c>
   1c762:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1c764:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1c768:	42b0      	cmp	r0, r6
   1c76a:	dd0e      	ble.n	1c78a <z_set_prio+0x62>
	node->prev = successor->prev;
   1c76c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c76e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1c772:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c774:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1c776:	2001      	movs	r0, #1
   1c778:	f7ff fda8 	bl	1c2cc <update_cache>
	__asm__ volatile(
   1c77c:	f389 8811 	msr	BASEPRI, r9
   1c780:	f3bf 8f6f 	isb	sy
}
   1c784:	4640      	mov	r0, r8
   1c786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   1c78a:	4299      	cmp	r1, r3
   1c78c:	d002      	beq.n	1c794 <z_set_prio+0x6c>
   1c78e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c790:	2b00      	cmp	r3, #0
   1c792:	d1e7      	bne.n	1c764 <z_set_prio+0x3c>
	node->prev = list->tail;
   1c794:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c796:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1c798:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1c79a:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
   1c79c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c79e:	62d4      	str	r4, [r2, #44]	; 0x2c
   1c7a0:	e7e9      	b.n	1c776 <z_set_prio+0x4e>
			thread->base.prio = prio;
   1c7a2:	73a6      	strb	r6, [r4, #14]
   1c7a4:	e7ea      	b.n	1c77c <z_set_prio+0x54>
   1c7a6:	bf00      	nop
   1c7a8:	20005f64 	.word	0x20005f64

0001c7ac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1c7ac:	4b04      	ldr	r3, [pc, #16]	; (1c7c0 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1c7ae:	2100      	movs	r1, #0
   1c7b0:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1c7b4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1c7b8:	4608      	mov	r0, r1
   1c7ba:	f7ff bd31 	b.w	1c220 <k_sched_time_slice_set>
   1c7be:	bf00      	nop
   1c7c0:	20005f64 	.word	0x20005f64

0001c7c4 <z_impl_k_yield>:
{
   1c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1c7c6:	4c23      	ldr	r4, [pc, #140]	; (1c854 <z_impl_k_yield+0x90>)
   1c7c8:	4b23      	ldr	r3, [pc, #140]	; (1c858 <z_impl_k_yield+0x94>)
   1c7ca:	68a2      	ldr	r2, [r4, #8]
   1c7cc:	429a      	cmp	r2, r3
   1c7ce:	d029      	beq.n	1c824 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1c7d0:	f04f 0320 	mov.w	r3, #32
   1c7d4:	f3ef 8611 	mrs	r6, BASEPRI
   1c7d8:	f383 8811 	msr	BASEPRI, r3
   1c7dc:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1c7e0:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1c7e4:	68a1      	ldr	r1, [r4, #8]
   1c7e6:	4628      	mov	r0, r5
   1c7e8:	f7ff fd5a 	bl	1c2a0 <z_priq_dumb_remove>
	return list->head == list;
   1c7ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1c7ee:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c7f0:	42aa      	cmp	r2, r5
   1c7f2:	d028      	beq.n	1c846 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c7f4:	b33a      	cbz	r2, 1c846 <z_impl_k_yield+0x82>
   1c7f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1c7f8:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1c7fc:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1c800:	428f      	cmp	r7, r1
   1c802:	dd1b      	ble.n	1c83c <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1c804:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1c806:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1c80a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1c80c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1c80e:	7b5a      	ldrb	r2, [r3, #13]
   1c810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1c814:	735a      	strb	r2, [r3, #13]
			update_cache(1);
   1c816:	2001      	movs	r0, #1
   1c818:	f7ff fd58 	bl	1c2cc <update_cache>
	__asm__ volatile(
   1c81c:	f386 8811 	msr	BASEPRI, r6
   1c820:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c824:	f04f 0320 	mov.w	r3, #32
   1c828:	f3ef 8011 	mrs	r0, BASEPRI
   1c82c:	f383 8811 	msr	BASEPRI, r3
   1c830:	f3bf 8f6f 	isb	sy
}
   1c834:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c838:	f7e7 bfde 	b.w	47f8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1c83c:	4282      	cmp	r2, r0
   1c83e:	d002      	beq.n	1c846 <z_impl_k_yield+0x82>
   1c840:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c842:	2a00      	cmp	r2, #0
   1c844:	d1da      	bne.n	1c7fc <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1c846:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1c848:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c84a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1c84c:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
   1c84e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c850:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c852:	e7dc      	b.n	1c80e <z_impl_k_yield+0x4a>
   1c854:	20005f64 	.word	0x20005f64
   1c858:	20001e28 	.word	0x20001e28

0001c85c <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1c85c:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
   1c85e:	1c43      	adds	r3, r0, #1
{
   1c860:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1c862:	d105      	bne.n	1c870 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1c864:	4b10      	ldr	r3, [pc, #64]	; (1c8a8 <z_impl_k_sleep+0x4c>)
   1c866:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1c868:	f000 f8fa 	bl	1ca60 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1c86c:	4620      	mov	r0, r4
   1c86e:	bd38      	pop	{r3, r4, r5, pc}
   1c870:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c874:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c878:	2100      	movs	r1, #0
   1c87a:	fbe5 0104 	umlal	r0, r1, r5, r4
   1c87e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c882:	2300      	movs	r3, #0
   1c884:	f7e3 fc2c 	bl	e0 <__aeabi_uldivmod>
	if (ticks == 0) {
   1c888:	4604      	mov	r4, r0
   1c88a:	b948      	cbnz	r0, 1c8a0 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1c88c:	f7ff ff9a 	bl	1c7c4 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1c890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1c894:	fb84 0100 	smull	r0, r1, r4, r0
   1c898:	0bc4      	lsrs	r4, r0, #15
   1c89a:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1c89e:	e7e5      	b.n	1c86c <z_impl_k_sleep+0x10>
   1c8a0:	f7ff ff14 	bl	1c6cc <z_tick_sleep.part.19>
   1c8a4:	4604      	mov	r4, r0
   1c8a6:	e7f3      	b.n	1c890 <z_impl_k_sleep+0x34>
   1c8a8:	20005f64 	.word	0x20005f64

0001c8ac <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1c8ac:	4b01      	ldr	r3, [pc, #4]	; (1c8b4 <z_impl_k_current_get+0x8>)
   1c8ae:	6898      	ldr	r0, [r3, #8]
   1c8b0:	4770      	bx	lr
   1c8b2:	bf00      	nop
   1c8b4:	20005f64 	.word	0x20005f64

0001c8b8 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1c8b8:	b570      	push	{r4, r5, r6, lr}
   1c8ba:	4604      	mov	r4, r0
   1c8bc:	f04f 0320 	mov.w	r3, #32
   1c8c0:	f3ef 8611 	mrs	r6, BASEPRI
   1c8c4:	f383 8811 	msr	BASEPRI, r3
   1c8c8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1c8cc:	f008 fd0c 	bl	252e8 <z_unpend_first_thread>
	if (thread != NULL) {
   1c8d0:	4605      	mov	r5, r0
   1c8d2:	b170      	cbz	r0, 1c8f2 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c8d4:	7b43      	ldrb	r3, [r0, #13]
   1c8d6:	06db      	lsls	r3, r3, #27
   1c8d8:	d103      	bne.n	1c8e2 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1c8da:	6983      	ldr	r3, [r0, #24]
   1c8dc:	b90b      	cbnz	r3, 1c8e2 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1c8de:	f7ff fd2f 	bl	1c340 <z_add_thread_to_ready_q>
   1c8e2:	2300      	movs	r3, #0
   1c8e4:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1c8e6:	4631      	mov	r1, r6
   1c8e8:	4808      	ldr	r0, [pc, #32]	; (1c90c <z_impl_k_sem_give+0x54>)
}
   1c8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1c8ee:	f008 bc85 	b.w	251fc <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1c8f2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1c8f6:	429a      	cmp	r2, r3
   1c8f8:	bf18      	it	ne
   1c8fa:	3301      	addne	r3, #1
   1c8fc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1c8fe:	2102      	movs	r1, #2
   1c900:	f104 0010 	add.w	r0, r4, #16
   1c904:	f008 ff45 	bl	25792 <z_handle_obj_poll_events>
   1c908:	e7ed      	b.n	1c8e6 <z_impl_k_sem_give+0x2e>
   1c90a:	bf00      	nop
   1c90c:	2000a6c6 	.word	0x2000a6c6

0001c910 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1c910:	b410      	push	{r4}
   1c912:	4602      	mov	r2, r0
   1c914:	460b      	mov	r3, r1
   1c916:	f04f 0020 	mov.w	r0, #32
   1c91a:	f3ef 8111 	mrs	r1, BASEPRI
   1c91e:	f380 8811 	msr	BASEPRI, r0
   1c922:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1c926:	6894      	ldr	r4, [r2, #8]
   1c928:	b144      	cbz	r4, 1c93c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1c92a:	3c01      	subs	r4, #1
   1c92c:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1c92e:	f381 8811 	msr	BASEPRI, r1
   1c932:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1c936:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1c938:	bc10      	pop	{r4}
   1c93a:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1c93c:	b933      	cbnz	r3, 1c94c <z_impl_k_sem_take+0x3c>
   1c93e:	f381 8811 	msr	BASEPRI, r1
   1c942:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1c946:	f06f 000f 	mvn.w	r0, #15
   1c94a:	e7f5      	b.n	1c938 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c94c:	4801      	ldr	r0, [pc, #4]	; (1c954 <z_impl_k_sem_take+0x44>)
}
   1c94e:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c950:	f7ff bea8 	b.w	1c6a4 <z_pend_curr>
   1c954:	2000a6c6 	.word	0x2000a6c6

0001c958 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1c958:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1c95a:	4c08      	ldr	r4, [pc, #32]	; (1c97c <k_sys_work_q_init+0x24>)
   1c95c:	4908      	ldr	r1, [pc, #32]	; (1c980 <k_sys_work_q_init+0x28>)
   1c95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c962:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c966:	4620      	mov	r0, r4
   1c968:	f000 f8f4 	bl	1cb54 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1c96c:	4905      	ldr	r1, [pc, #20]	; (1c984 <k_sys_work_q_init+0x2c>)
   1c96e:	f104 0010 	add.w	r0, r4, #16
   1c972:	f008 fd07 	bl	25384 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1c976:	2000      	movs	r0, #0
   1c978:	bd10      	pop	{r4, pc}
   1c97a:	bf00      	nop
   1c97c:	20005fa0 	.word	0x20005fa0
   1c980:	2000c990 	.word	0x2000c990
   1c984:	00031ee6 	.word	0x00031ee6

0001c988 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1c988:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c98a:	f04f 0220 	mov.w	r2, #32
   1c98e:	f3ef 8411 	mrs	r4, BASEPRI
   1c992:	f382 8811 	msr	BASEPRI, r2
   1c996:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1c99a:	7b42      	ldrb	r2, [r0, #13]
   1c99c:	0751      	lsls	r1, r2, #29
   1c99e:	d404      	bmi.n	1c9aa <z_impl_k_thread_start+0x22>
	__asm__ volatile(
   1c9a0:	f384 8811 	msr	BASEPRI, r4
   1c9a4:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1c9a8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c9aa:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c9ae:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c9b2:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c9b4:	d103      	bne.n	1c9be <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
   1c9b6:	6983      	ldr	r3, [r0, #24]
   1c9b8:	b90b      	cbnz	r3, 1c9be <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1c9ba:	f7ff fcc1 	bl	1c340 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1c9be:	4621      	mov	r1, r4
   1c9c0:	4802      	ldr	r0, [pc, #8]	; (1c9cc <z_impl_k_thread_start+0x44>)
}
   1c9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1c9c6:	f008 bc19 	b.w	251fc <z_reschedule>
   1c9ca:	bf00      	nop
   1c9cc:	2000a6c6 	.word	0x2000a6c6

0001c9d0 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1c9d0:	b530      	push	{r4, r5, lr}
   1c9d2:	b087      	sub	sp, #28
   1c9d4:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c9d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c9d8:	9504      	str	r5, [sp, #16]
   1c9da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c9dc:	9503      	str	r5, [sp, #12]
   1c9de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1c9e0:	9502      	str	r5, [sp, #8]
   1c9e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1c9e4:	9501      	str	r5, [sp, #4]
   1c9e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1c9e8:	9500      	str	r5, [sp, #0]
   1c9ea:	f7e7 ffb1 	bl	4950 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1c9ee:	4b03      	ldr	r3, [pc, #12]	; (1c9fc <z_setup_new_thread+0x2c>)
   1c9f0:	689b      	ldr	r3, [r3, #8]
   1c9f2:	b103      	cbz	r3, 1c9f6 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1c9f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1c9f6:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1c9f8:	b007      	add	sp, #28
   1c9fa:	bd30      	pop	{r4, r5, pc}
   1c9fc:	20005f64 	.word	0x20005f64

0001ca00 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1ca00:	b570      	push	{r4, r5, r6, lr}
   1ca02:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ca04:	2600      	movs	r6, #0
   1ca06:	9605      	str	r6, [sp, #20]
   1ca08:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1ca0a:	9604      	str	r6, [sp, #16]
   1ca0c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1ca0e:	9603      	str	r6, [sp, #12]
   1ca10:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1ca12:	9602      	str	r6, [sp, #8]
   1ca14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1ca16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ca18:	9601      	str	r6, [sp, #4]
   1ca1a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1ca1c:	9600      	str	r6, [sp, #0]
{
   1ca1e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ca20:	f7ff ffd6 	bl	1c9d0 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1ca24:	1c6b      	adds	r3, r5, #1
   1ca26:	d003      	beq.n	1ca30 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1ca28:	b92d      	cbnz	r5, 1ca36 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1ca2a:	4620      	mov	r0, r4
   1ca2c:	f7ff ffac 	bl	1c988 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1ca30:	4620      	mov	r0, r4
   1ca32:	b006      	add	sp, #24
   1ca34:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1ca36:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ca3a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ca3e:	2100      	movs	r1, #0
   1ca40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ca44:	2300      	movs	r3, #0
   1ca46:	fbe6 0105 	umlal	r0, r1, r6, r5
   1ca4a:	f7e3 fb49 	bl	e0 <__aeabi_uldivmod>
   1ca4e:	4903      	ldr	r1, [pc, #12]	; (1ca5c <z_impl_k_thread_create+0x5c>)
   1ca50:	1c42      	adds	r2, r0, #1
   1ca52:	f104 0018 	add.w	r0, r4, #24
   1ca56:	f000 f91f 	bl	1cc98 <z_add_timeout>
   1ca5a:	e7e9      	b.n	1ca30 <z_impl_k_thread_create+0x30>
   1ca5c:	00025287 	.word	0x00025287

0001ca60 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1ca60:	b538      	push	{r3, r4, r5, lr}
   1ca62:	4605      	mov	r5, r0
	__asm__ volatile(
   1ca64:	f04f 0320 	mov.w	r3, #32
   1ca68:	f3ef 8411 	mrs	r4, BASEPRI
   1ca6c:	f383 8811 	msr	BASEPRI, r3
   1ca70:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1ca74:	f7ff fd12 	bl	1c49c <z_thread_single_suspend>

	if (thread == _current) {
   1ca78:	4b07      	ldr	r3, [pc, #28]	; (1ca98 <z_impl_k_thread_suspend+0x38>)
   1ca7a:	689b      	ldr	r3, [r3, #8]
   1ca7c:	42ab      	cmp	r3, r5
   1ca7e:	d105      	bne.n	1ca8c <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1ca80:	4621      	mov	r1, r4
   1ca82:	4806      	ldr	r0, [pc, #24]	; (1ca9c <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1ca84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1ca88:	f008 bbb8 	b.w	251fc <z_reschedule>
	__asm__ volatile(
   1ca8c:	f384 8811 	msr	BASEPRI, r4
   1ca90:	f3bf 8f6f 	isb	sy
}
   1ca94:	bd38      	pop	{r3, r4, r5, pc}
   1ca96:	bf00      	nop
   1ca98:	20005f64 	.word	0x20005f64
   1ca9c:	2000a6c6 	.word	0x2000a6c6

0001caa0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1caa4:	4e28      	ldr	r6, [pc, #160]	; (1cb48 <z_init_static_threads+0xa8>)
   1caa6:	4d29      	ldr	r5, [pc, #164]	; (1cb4c <z_init_static_threads+0xac>)
{
   1caa8:	b087      	sub	sp, #28
   1caaa:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1caac:	42b5      	cmp	r5, r6
   1caae:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1cab2:	d310      	bcc.n	1cad6 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1cab4:	f7ff fbe0 	bl	1c278 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cab8:	4c24      	ldr	r4, [pc, #144]	; (1cb4c <z_init_static_threads+0xac>)
   1caba:	f8df a094 	ldr.w	sl, [pc, #148]	; 1cb50 <z_init_static_threads+0xb0>
   1cabe:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1cac2:	f240 36e7 	movw	r6, #999	; 0x3e7
   1cac6:	2700      	movs	r7, #0
   1cac8:	4544      	cmp	r4, r8
   1caca:	d321      	bcc.n	1cb10 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1cacc:	b007      	add	sp, #28
   1cace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1cad2:	f7ff bc19 	b.w	1c308 <k_sched_unlock>
		z_setup_new_thread(
   1cad6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1cada:	9305      	str	r3, [sp, #20]
   1cadc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1cae0:	9304      	str	r3, [sp, #16]
   1cae2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1cae6:	9303      	str	r3, [sp, #12]
   1cae8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1caec:	9302      	str	r3, [sp, #8]
   1caee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1caf2:	9301      	str	r3, [sp, #4]
   1caf4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1caf8:	9300      	str	r3, [sp, #0]
   1cafa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1cafe:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1cb02:	f7ff ff65 	bl	1c9d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1cb06:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1cb0a:	64dd      	str	r5, [r3, #76]	; 0x4c
   1cb0c:	4625      	mov	r5, r4
   1cb0e:	e7cd      	b.n	1caac <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1cb10:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1cb12:	1c4b      	adds	r3, r1, #1
   1cb14:	d004      	beq.n	1cb20 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1cb16:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1cb18:	b921      	cbnz	r1, 1cb24 <z_init_static_threads+0x84>
   1cb1a:	4628      	mov	r0, r5
   1cb1c:	f7ff ff34 	bl	1c988 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cb20:	3430      	adds	r4, #48	; 0x30
   1cb22:	e7d1      	b.n	1cac8 <z_init_static_threads+0x28>
   1cb24:	46b3      	mov	fp, r6
   1cb26:	46bc      	mov	ip, r7
   1cb28:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1cb2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cb30:	2300      	movs	r3, #0
   1cb32:	4658      	mov	r0, fp
   1cb34:	4661      	mov	r1, ip
   1cb36:	f7e3 fad3 	bl	e0 <__aeabi_uldivmod>
   1cb3a:	4651      	mov	r1, sl
   1cb3c:	1c42      	adds	r2, r0, #1
   1cb3e:	f105 0018 	add.w	r0, r5, #24
   1cb42:	f000 f8a9 	bl	1cc98 <z_add_timeout>
   1cb46:	e7eb      	b.n	1cb20 <z_init_static_threads+0x80>
   1cb48:	2000e5cc 	.word	0x2000e5cc
   1cb4c:	2000e5cc 	.word	0x2000e5cc
   1cb50:	00025287 	.word	0x00025287

0001cb54 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1cb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb58:	4605      	mov	r5, r0
   1cb5a:	b086      	sub	sp, #24
   1cb5c:	460e      	mov	r6, r1
   1cb5e:	4617      	mov	r7, r2
   1cb60:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1cb62:	f008 fa7a 	bl	2505a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1cb66:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1cb6a:	2000      	movs	r0, #0
   1cb6c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1cb70:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1cb74:	e9cd 5000 	strd	r5, r0, [sp]
   1cb78:	4b06      	ldr	r3, [pc, #24]	; (1cb94 <k_work_q_start+0x40>)
   1cb7a:	463a      	mov	r2, r7
   1cb7c:	4631      	mov	r1, r6
   1cb7e:	4620      	mov	r0, r4
   1cb80:	f7ff ff3e 	bl	1ca00 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1cb84:	4904      	ldr	r1, [pc, #16]	; (1cb98 <k_work_q_start+0x44>)
   1cb86:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1cb88:	b006      	add	sp, #24
   1cb8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cb8e:	f008 bbf9 	b.w	25384 <z_impl_k_thread_name_set>
   1cb92:	bf00      	nop
   1cb94:	0001d7ff 	.word	0x0001d7ff
   1cb98:	00031eef 	.word	0x00031eef

0001cb9c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   1cb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cba0:	4606      	mov	r6, r0
   1cba2:	460d      	mov	r5, r1
   1cba4:	4617      	mov	r7, r2
	__asm__ volatile(
   1cba6:	f04f 0320 	mov.w	r3, #32
   1cbaa:	f3ef 8811 	mrs	r8, BASEPRI
   1cbae:	f383 8811 	msr	BASEPRI, r3
   1cbb2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1cbb6:	69cc      	ldr	r4, [r1, #28]
   1cbb8:	b15c      	cbz	r4, 1cbd2 <k_delayed_work_submit_to_queue+0x36>
   1cbba:	4284      	cmp	r4, r0
   1cbbc:	d12c      	bne.n	1cc18 <k_delayed_work_submit_to_queue+0x7c>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1cbbe:	4628      	mov	r0, r5
   1cbc0:	f008 fc11 	bl	253e6 <work_cancel>
		if (err < 0) {
   1cbc4:	1e04      	subs	r4, r0, #0
   1cbc6:	da06      	bge.n	1cbd6 <k_delayed_work_submit_to_queue+0x3a>
	__asm__ volatile(
   1cbc8:	f388 8811 	msr	BASEPRI, r8
   1cbcc:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   1cbd0:	e00c      	b.n	1cbec <k_delayed_work_submit_to_queue+0x50>
	if (work->work_q == work_q) {
   1cbd2:	2800      	cmp	r0, #0
   1cbd4:	d0f3      	beq.n	1cbbe <k_delayed_work_submit_to_queue+0x22>
	work->work_q = work_q;
   1cbd6:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   1cbd8:	b95f      	cbnz	r7, 1cbf2 <k_delayed_work_submit_to_queue+0x56>
   1cbda:	f388 8811 	msr	BASEPRI, r8
   1cbde:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1cbe2:	4629      	mov	r1, r5
   1cbe4:	4630      	mov	r0, r6
   1cbe6:	f008 fbe1 	bl	253ac <k_work_submit_to_queue>
		return 0;
   1cbea:	463c      	mov	r4, r7
}
   1cbec:	4620      	mov	r0, r4
   1cbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cbf2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1cbf6:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cbfa:	2100      	movs	r1, #0
   1cbfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cc00:	2300      	movs	r3, #0
   1cc02:	fbe6 0107 	umlal	r0, r1, r6, r7
   1cc06:	f7e3 fa6b 	bl	e0 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   1cc0a:	4905      	ldr	r1, [pc, #20]	; (1cc20 <k_delayed_work_submit_to_queue+0x84>)
   1cc0c:	1c42      	adds	r2, r0, #1
   1cc0e:	f105 000c 	add.w	r0, r5, #12
   1cc12:	f000 f841 	bl	1cc98 <z_add_timeout>
   1cc16:	e7d7      	b.n	1cbc8 <k_delayed_work_submit_to_queue+0x2c>
		err = -EADDRINUSE;
   1cc18:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1cc1c:	e7d4      	b.n	1cbc8 <k_delayed_work_submit_to_queue+0x2c>
   1cc1e:	bf00      	nop
   1cc20:	000253dd 	.word	0x000253dd

0001cc24 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1cc24:	4b03      	ldr	r3, [pc, #12]	; (1cc34 <elapsed+0x10>)
   1cc26:	681b      	ldr	r3, [r3, #0]
   1cc28:	b90b      	cbnz	r3, 1cc2e <elapsed+0xa>
   1cc2a:	f7e7 bda3 	b.w	4774 <z_clock_elapsed>
}
   1cc2e:	2000      	movs	r0, #0
   1cc30:	4770      	bx	lr
   1cc32:	bf00      	nop
   1cc34:	2000601c 	.word	0x2000601c

0001cc38 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cc38:	6803      	ldr	r3, [r0, #0]
   1cc3a:	b140      	cbz	r0, 1cc4e <remove_timeout+0x16>
   1cc3c:	4a07      	ldr	r2, [pc, #28]	; (1cc5c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1cc3e:	6852      	ldr	r2, [r2, #4]
   1cc40:	4290      	cmp	r0, r2
   1cc42:	d004      	beq.n	1cc4e <remove_timeout+0x16>
	if (next(t) != NULL) {
   1cc44:	b11b      	cbz	r3, 1cc4e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1cc46:	689a      	ldr	r2, [r3, #8]
   1cc48:	6881      	ldr	r1, [r0, #8]
   1cc4a:	440a      	add	r2, r1
   1cc4c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1cc4e:	6842      	ldr	r2, [r0, #4]
   1cc50:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1cc52:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1cc54:	2300      	movs	r3, #0
	node->prev = NULL;
   1cc56:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cc5a:	4770      	bx	lr
   1cc5c:	2000e3c8 	.word	0x2000e3c8

0001cc60 <next_timeout>:
	return list->head == list;
   1cc60:	4b0b      	ldr	r3, [pc, #44]	; (1cc90 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1cc62:	b510      	push	{r4, lr}
   1cc64:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cc66:	429c      	cmp	r4, r3
   1cc68:	bf08      	it	eq
   1cc6a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1cc6c:	f7ff ffda 	bl	1cc24 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1cc70:	b154      	cbz	r4, 1cc88 <next_timeout+0x28>
   1cc72:	68a3      	ldr	r3, [r4, #8]
   1cc74:	1a18      	subs	r0, r3, r0
   1cc76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1cc7a:	4b06      	ldr	r3, [pc, #24]	; (1cc94 <next_timeout+0x34>)
   1cc7c:	691b      	ldr	r3, [r3, #16]
   1cc7e:	b113      	cbz	r3, 1cc86 <next_timeout+0x26>
   1cc80:	4298      	cmp	r0, r3
   1cc82:	bfa8      	it	ge
   1cc84:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1cc86:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1cc88:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1cc8c:	e7f5      	b.n	1cc7a <next_timeout+0x1a>
   1cc8e:	bf00      	nop
   1cc90:	2000e3c8 	.word	0x2000e3c8
   1cc94:	20005f64 	.word	0x20005f64

0001cc98 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1cc98:	b570      	push	{r4, r5, r6, lr}
   1cc9a:	4604      	mov	r4, r0
   1cc9c:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1cc9e:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   1cca0:	f04f 0320 	mov.w	r3, #32
   1cca4:	f3ef 8511 	mrs	r5, BASEPRI
   1cca8:	f383 8811 	msr	BASEPRI, r3
   1ccac:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1ccb0:	f7ff ffb8 	bl	1cc24 <elapsed>
	return list->head == list;
   1ccb4:	4b18      	ldr	r3, [pc, #96]	; (1cd18 <z_add_timeout+0x80>)
   1ccb6:	681a      	ldr	r2, [r3, #0]
   1ccb8:	2e01      	cmp	r6, #1
   1ccba:	bfac      	ite	ge
   1ccbc:	1980      	addge	r0, r0, r6
   1ccbe:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ccc0:	429a      	cmp	r2, r3
   1ccc2:	60a0      	str	r0, [r4, #8]
   1ccc4:	d001      	beq.n	1ccca <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ccc6:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1ccc8:	b932      	cbnz	r2, 1ccd8 <z_add_timeout+0x40>
	node->prev = list->tail;
   1ccca:	685a      	ldr	r2, [r3, #4]
   1cccc:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1ccce:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1ccd0:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   1ccd2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1ccd4:	605c      	str	r4, [r3, #4]
   1ccd6:	e00a      	b.n	1ccee <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1ccd8:	6890      	ldr	r0, [r2, #8]
   1ccda:	68a1      	ldr	r1, [r4, #8]
   1ccdc:	4288      	cmp	r0, r1
   1ccde:	dd15      	ble.n	1cd0c <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1cce0:	1a41      	subs	r1, r0, r1
   1cce2:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1cce4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1cce6:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1ccea:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1ccec:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1ccee:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ccf0:	429a      	cmp	r2, r3
   1ccf2:	d006      	beq.n	1cd02 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1ccf4:	4294      	cmp	r4, r2
   1ccf6:	d104      	bne.n	1cd02 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1ccf8:	f7ff ffb2 	bl	1cc60 <next_timeout>
   1ccfc:	2100      	movs	r1, #0
   1ccfe:	f7e7 fce3 	bl	46c8 <z_clock_set_timeout>
	__asm__ volatile(
   1cd02:	f385 8811 	msr	BASEPRI, r5
   1cd06:	f3bf 8f6f 	isb	sy
		}
	}
}
   1cd0a:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1cd0c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1cd0e:	42b2      	cmp	r2, r6
   1cd10:	60a1      	str	r1, [r4, #8]
   1cd12:	d0da      	beq.n	1ccca <z_add_timeout+0x32>
   1cd14:	6812      	ldr	r2, [r2, #0]
   1cd16:	e7d7      	b.n	1ccc8 <z_add_timeout+0x30>
   1cd18:	2000e3c8 	.word	0x2000e3c8

0001cd1c <z_timeout_remaining>:

	return ret;
}

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   1cd1c:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1cd1e:	6804      	ldr	r4, [r0, #0]
   1cd20:	b314      	cbz	r4, 1cd68 <z_timeout_remaining+0x4c>
	__asm__ volatile(
   1cd22:	f04f 0320 	mov.w	r3, #32
   1cd26:	f3ef 8111 	mrs	r1, BASEPRI
   1cd2a:	f383 8811 	msr	BASEPRI, r3
   1cd2e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1cd32:	4a0e      	ldr	r2, [pc, #56]	; (1cd6c <z_timeout_remaining+0x50>)
   1cd34:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cd36:	4293      	cmp	r3, r2
   1cd38:	d014      	beq.n	1cd64 <z_timeout_remaining+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cd3a:	6852      	ldr	r2, [r2, #4]
   1cd3c:	2400      	movs	r4, #0
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1cd3e:	b93b      	cbnz	r3, 1cd50 <z_timeout_remaining+0x34>
	__asm__ volatile(
   1cd40:	f381 8811 	msr	BASEPRI, r1
   1cd44:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   1cd48:	f7ff ff6c 	bl	1cc24 <elapsed>
   1cd4c:	1a20      	subs	r0, r4, r0
}
   1cd4e:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
   1cd50:	689d      	ldr	r5, [r3, #8]
			if (timeout == t) {
   1cd52:	4283      	cmp	r3, r0
			ticks += t->dticks;
   1cd54:	442c      	add	r4, r5
			if (timeout == t) {
   1cd56:	d0f3      	beq.n	1cd40 <z_timeout_remaining+0x24>
   1cd58:	2b00      	cmp	r3, #0
   1cd5a:	d0f1      	beq.n	1cd40 <z_timeout_remaining+0x24>
	return (node == list->tail) ? NULL : node->next;
   1cd5c:	4293      	cmp	r3, r2
   1cd5e:	d0ef      	beq.n	1cd40 <z_timeout_remaining+0x24>
   1cd60:	681b      	ldr	r3, [r3, #0]
   1cd62:	e7ec      	b.n	1cd3e <z_timeout_remaining+0x22>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cd64:	2400      	movs	r4, #0
   1cd66:	e7eb      	b.n	1cd40 <z_timeout_remaining+0x24>
		return 0;
   1cd68:	4620      	mov	r0, r4
   1cd6a:	e7f0      	b.n	1cd4e <z_timeout_remaining+0x32>
   1cd6c:	2000e3c8 	.word	0x2000e3c8

0001cd70 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1cd70:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1cd74:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1cd76:	f7ff fb5b 	bl	1c430 <z_time_slice>
	__asm__ volatile(
   1cd7a:	f04f 0320 	mov.w	r3, #32
   1cd7e:	f3ef 8511 	mrs	r5, BASEPRI
   1cd82:	f383 8811 	msr	BASEPRI, r3
   1cd86:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1cd8a:	4e21      	ldr	r6, [pc, #132]	; (1ce10 <z_clock_announce+0xa0>)
   1cd8c:	4f21      	ldr	r7, [pc, #132]	; (1ce14 <z_clock_announce+0xa4>)
	return list->head == list;
   1cd8e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1ce18 <z_clock_announce+0xa8>
   1cd92:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1cd94:	46b8      	mov	r8, r7
   1cd96:	f8d9 4000 	ldr.w	r4, [r9]
   1cd9a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cd9c:	454c      	cmp	r4, r9
   1cd9e:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1cda2:	d005      	beq.n	1cdb0 <z_clock_announce+0x40>
   1cda4:	b124      	cbz	r4, 1cdb0 <z_clock_announce+0x40>
   1cda6:	68a3      	ldr	r3, [r4, #8]
   1cda8:	4293      	cmp	r3, r2
   1cdaa:	dd14      	ble.n	1cdd6 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1cdac:	1a9b      	subs	r3, r3, r2
   1cdae:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   1cdb0:	eb1b 0002 	adds.w	r0, fp, r2
   1cdb4:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
   1cdb8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1cdba:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1cdbe:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1cdc0:	f7ff ff4e 	bl	1cc60 <next_timeout>
   1cdc4:	4621      	mov	r1, r4
   1cdc6:	f7e7 fc7f 	bl	46c8 <z_clock_set_timeout>
	__asm__ volatile(
   1cdca:	f385 8811 	msr	BASEPRI, r5
   1cdce:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1cdd2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1cdd6:	eb1b 0003 	adds.w	r0, fp, r3
   1cdda:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1cdde:	1ad3      	subs	r3, r2, r3
   1cde0:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1cde2:	2300      	movs	r3, #0
		curr_tick += dt;
   1cde4:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1cde8:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1cdea:	4620      	mov	r0, r4
   1cdec:	f7ff ff24 	bl	1cc38 <remove_timeout>
   1cdf0:	f385 8811 	msr	BASEPRI, r5
   1cdf4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1cdf8:	68e3      	ldr	r3, [r4, #12]
   1cdfa:	4798      	blx	r3
	__asm__ volatile(
   1cdfc:	f04f 0320 	mov.w	r3, #32
   1ce00:	f3ef 8511 	mrs	r5, BASEPRI
   1ce04:	f383 8811 	msr	BASEPRI, r3
   1ce08:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1ce0c:	e7c3      	b.n	1cd96 <z_clock_announce+0x26>
   1ce0e:	bf00      	nop
   1ce10:	2000601c 	.word	0x2000601c
   1ce14:	20000010 	.word	0x20000010
   1ce18:	2000e3c8 	.word	0x2000e3c8

0001ce1c <z_tick_get>:

s64_t z_tick_get(void)
{
   1ce1c:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1ce20:	f04f 0320 	mov.w	r3, #32
   1ce24:	f3ef 8411 	mrs	r4, BASEPRI
   1ce28:	f383 8811 	msr	BASEPRI, r3
   1ce2c:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1ce30:	f7e7 fca0 	bl	4774 <z_clock_elapsed>
   1ce34:	4b07      	ldr	r3, [pc, #28]	; (1ce54 <z_tick_get+0x38>)
   1ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ce3a:	eb12 0b00 	adds.w	fp, r2, r0
   1ce3e:	f143 0c00 	adc.w	ip, r3, #0
   1ce42:	4658      	mov	r0, fp
   1ce44:	4661      	mov	r1, ip
	__asm__ volatile(
   1ce46:	f384 8811 	msr	BASEPRI, r4
   1ce4a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1ce4e:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1ce52:	bf00      	nop
   1ce54:	20000010 	.word	0x20000010

0001ce58 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1ce58:	6a02      	ldr	r2, [r0, #32]
   1ce5a:	2a00      	cmp	r2, #0
{
   1ce5c:	b538      	push	{r3, r4, r5, lr}
   1ce5e:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1ce60:	dd02      	ble.n	1ce68 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ce62:	490e      	ldr	r1, [pc, #56]	; (1ce9c <z_timer_expiration_handler+0x44>)
   1ce64:	f7ff ff18 	bl	1cc98 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1ce68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ce6a:	3301      	adds	r3, #1
   1ce6c:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1ce6e:	69a3      	ldr	r3, [r4, #24]
   1ce70:	b10b      	cbz	r3, 1ce76 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1ce72:	4620      	mov	r0, r4
   1ce74:	4798      	blx	r3
	return list->head == list;
   1ce76:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ce7a:	42a5      	cmp	r5, r4
   1ce7c:	d00d      	beq.n	1ce9a <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1ce7e:	b165      	cbz	r5, 1ce9a <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1ce80:	4628      	mov	r0, r5
   1ce82:	f008 f9a2 	bl	251ca <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ce86:	7b6b      	ldrb	r3, [r5, #13]
   1ce88:	06db      	lsls	r3, r3, #27
   1ce8a:	d104      	bne.n	1ce96 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1ce8c:	69ab      	ldr	r3, [r5, #24]
   1ce8e:	b913      	cbnz	r3, 1ce96 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1ce90:	4628      	mov	r0, r5
   1ce92:	f7ff fa55 	bl	1c340 <z_add_thread_to_ready_q>
   1ce96:	2300      	movs	r3, #0
   1ce98:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1ce9a:	bd38      	pop	{r3, r4, r5, pc}
   1ce9c:	0001ce59 	.word	0x0001ce59

0001cea0 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1cea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cea4:	f240 36e7 	movw	r6, #999	; 0x3e7
   1cea8:	2700      	movs	r7, #0
   1ceaa:	4604      	mov	r4, r0
   1ceac:	4688      	mov	r8, r1
   1ceae:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1ceb2:	4630      	mov	r0, r6
   1ceb4:	4639      	mov	r1, r7
   1ceb6:	fbe5 0102 	umlal	r0, r1, r5, r2
   1ceba:	2300      	movs	r3, #0
   1cebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cec0:	f7e3 f90e 	bl	e0 <__aeabi_uldivmod>
   1cec4:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1cec6:	9000      	str	r0, [sp, #0]
   1cec8:	4630      	mov	r0, r6
   1ceca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cece:	2300      	movs	r3, #0
   1ced0:	fbe5 0108 	umlal	r0, r1, r5, r8
   1ced4:	f7e3 f904 	bl	e0 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1ced8:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1ceda:	4620      	mov	r0, r4
   1cedc:	f008 fae2 	bl	254a4 <z_abort_timeout>
	timer->period = period_in_ticks;
   1cee0:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1cee2:	4905      	ldr	r1, [pc, #20]	; (1cef8 <z_impl_k_timer_start+0x58>)
   1cee4:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
   1cee6:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1cee8:	4620      	mov	r0, r4
	timer->status = 0U;
   1ceea:	2300      	movs	r3, #0
   1ceec:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1ceee:	b002      	add	sp, #8
   1cef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1cef4:	f7ff bed0 	b.w	1cc98 <z_add_timeout>
   1cef8:	0001ce59 	.word	0x0001ce59

0001cefc <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1cefc:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1cefe:	7b44      	ldrb	r4, [r0, #13]
   1cf00:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1cf04:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1cf06:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1cf08:	f362 0141 	bfi	r1, r2, #1, #1
   1cf0c:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
   1cf0e:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
   1cf10:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1cf12:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1cf14:	4a02      	ldr	r2, [pc, #8]	; (1cf20 <k_poll_event_init+0x24>)
   1cf16:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1cf18:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1cf1c:	bd10      	pop	{r4, pc}
   1cf1e:	bf00      	nop
   1cf20:	00020fff 	.word	0x00020fff

0001cf24 <z_impl_k_poll>:

	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   1cf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf28:	b086      	sub	sp, #24
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1cf2a:	2301      	movs	r3, #1
   1cf2c:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1cf30:	4b23      	ldr	r3, [pc, #140]	; (1cfc0 <z_impl_k_poll+0x9c>)
	struct _poller poller = { .is_polling = true,
   1cf32:	689b      	ldr	r3, [r3, #8]
   1cf34:	9304      	str	r3, [sp, #16]
   1cf36:	4b23      	ldr	r3, [pc, #140]	; (1cfc4 <z_impl_k_poll+0xa0>)
   1cf38:	9305      	str	r3, [sp, #20]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1cf3a:	fab2 f382 	clz	r3, r2
   1cf3e:	4690      	mov	r8, r2
   1cf40:	095b      	lsrs	r3, r3, #5
   1cf42:	aa03      	add	r2, sp, #12
{
   1cf44:	4606      	mov	r6, r0
	events_registered = register_events(events, num_events, &poller,
   1cf46:	f008 fbca 	bl	256de <register_events>
   1cf4a:	4607      	mov	r7, r0
	__asm__ volatile(
   1cf4c:	f04f 0320 	mov.w	r3, #32
   1cf50:	f3ef 8511 	mrs	r5, BASEPRI
   1cf54:	f383 8811 	msr	BASEPRI, r3
   1cf58:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1cf5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1cf60:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1cf64:	b94b      	cbnz	r3, 1cf7a <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1cf66:	462a      	mov	r2, r5
   1cf68:	4639      	mov	r1, r7
   1cf6a:	4630      	mov	r0, r6
   1cf6c:	f008 fb1f 	bl	255ae <clear_event_registrations>
	__asm__ volatile(
   1cf70:	f385 8811 	msr	BASEPRI, r5
   1cf74:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1cf78:	e00b      	b.n	1cf92 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1cf7a:	2300      	movs	r3, #0
   1cf7c:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1cf80:	f1b8 0f00 	cmp.w	r8, #0
   1cf84:	d109      	bne.n	1cf9a <z_impl_k_poll+0x76>
   1cf86:	f385 8811 	msr	BASEPRI, r5
   1cf8a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1cf8e:	f06f 040a 	mvn.w	r4, #10
}
   1cf92:	4620      	mov	r0, r4
   1cf94:	b006      	add	sp, #24
   1cf96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1cf9a:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1cf9c:	4643      	mov	r3, r8
   1cf9e:	4629      	mov	r1, r5
   1cfa0:	4809      	ldr	r0, [pc, #36]	; (1cfc8 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1cfa2:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1cfa6:	f7ff fb7d 	bl	1c6a4 <z_pend_curr>
   1cfaa:	4604      	mov	r4, r0
	__asm__ volatile(
   1cfac:	f04f 0320 	mov.w	r3, #32
   1cfb0:	f3ef 8511 	mrs	r5, BASEPRI
   1cfb4:	f383 8811 	msr	BASEPRI, r3
   1cfb8:	f3bf 8f6f 	isb	sy
   1cfbc:	e7d3      	b.n	1cf66 <z_impl_k_poll+0x42>
   1cfbe:	bf00      	nop
   1cfc0:	20005f64 	.word	0x20005f64
   1cfc4:	0002563f 	.word	0x0002563f
   1cfc8:	2000a6c6 	.word	0x2000a6c6

0001cfcc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1cfcc:	b538      	push	{r3, r4, r5, lr}
   1cfce:	f04f 0320 	mov.w	r3, #32
   1cfd2:	f3ef 8511 	mrs	r5, BASEPRI
   1cfd6:	f383 8811 	msr	BASEPRI, r3
   1cfda:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1cfde:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1cfe0:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1cfe2:	4298      	cmp	r0, r3
	signal->signaled = 1U;
   1cfe4:	f04f 0101 	mov.w	r1, #1
   1cfe8:	6081      	str	r1, [r0, #8]
   1cfea:	d106      	bne.n	1cffa <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1cfec:	f385 8811 	msr	BASEPRI, r5
   1cff0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1cff4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1cff6:	4620      	mov	r0, r4
   1cff8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1cffa:	e9d3 2000 	ldrd	r2, r0, [r3]
   1cffe:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1d000:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1d002:	2200      	movs	r2, #0
	node->prev = NULL;
   1d004:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d008:	4618      	mov	r0, r3
   1d00a:	f008 fafd 	bl	25608 <signal_poll_event>
	z_reschedule(&lock, key);
   1d00e:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d010:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1d012:	4802      	ldr	r0, [pc, #8]	; (1d01c <z_impl_k_poll_signal_raise+0x50>)
   1d014:	f008 f8f2 	bl	251fc <z_reschedule>
	return rc;
   1d018:	e7ed      	b.n	1cff6 <z_impl_k_poll_signal_raise+0x2a>
   1d01a:	bf00      	nop
   1d01c:	2000a6c6 	.word	0x2000a6c6

0001d020 <disconnected>:
}
   1d020:	4770      	bx	lr

0001d022 <connected>:
	if (err) {
   1d022:	b909      	cbnz	r1, 1d028 <connected+0x6>
    cts_sync_processor(conn, NULL);
   1d024:	f7e5 bb6c 	b.w	2700 <cts_sync_processor>
}
   1d028:	4770      	bx	lr

0001d02a <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
   1d02a:	b508      	push	{r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   1d02c:	f7fd fc88 	bl	1a940 <lv_disp_get_default>
}
   1d030:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   1d034:	f7fb bf30 	b.w	18e98 <lv_disp_get_scr_act>

0001d038 <u8_to_dec>:
 */

#include <sys/util.h>

u8_t u8_to_dec(char *buf, u8_t buflen, u8_t value)
{
   1d038:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t divisor = 100;
	u8_t num_digits = 0;
   1d03a:	2300      	movs	r3, #0
	u8_t digit;

	while (buflen > 0 && divisor > 0) {
   1d03c:	2504      	movs	r5, #4
	u8_t divisor = 100;
   1d03e:	2464      	movs	r4, #100	; 0x64
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1d040:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1d044:	b111      	cbz	r1, 1d04c <u8_to_dec+0x14>
   1d046:	3d01      	subs	r5, #1
   1d048:	d102      	bne.n	1d050 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1d04a:	7005      	strb	r5, [r0, #0]
	}

	return num_digits;
}
   1d04c:	4618      	mov	r0, r3
   1d04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1d050:	42a2      	cmp	r2, r4
		digit = value / divisor;
   1d052:	fbb2 f7f4 	udiv	r7, r2, r4
   1d056:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1d058:	d202      	bcs.n	1d060 <u8_to_dec+0x28>
   1d05a:	2c01      	cmp	r4, #1
   1d05c:	d000      	beq.n	1d060 <u8_to_dec+0x28>
   1d05e:	b133      	cbz	r3, 1d06e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1d060:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1d062:	3901      	subs	r1, #1
			num_digits++;
   1d064:	3301      	adds	r3, #1
			*buf = (char)digit + '0';
   1d066:	f800 6b01 	strb.w	r6, [r0], #1
			buflen--;
   1d06a:	b2c9      	uxtb	r1, r1
			num_digits++;
   1d06c:	b2db      	uxtb	r3, r3
		value -= digit * divisor;
   1d06e:	fb04 2217 	mls	r2, r4, r7, r2
   1d072:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1d074:	fbb4 f4fc 	udiv	r4, r4, ip
   1d078:	e7e4      	b.n	1d044 <u8_to_dec+0xc>

0001d07a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, u8_t *x)
{
	if (c >= '0' && c <= '9') {
   1d07a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1d07e:	b2db      	uxtb	r3, r3
   1d080:	2b09      	cmp	r3, #9
   1d082:	d802      	bhi.n	1d08a <char2hex+0x10>
		*x = c - '0';
   1d084:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1d086:	2000      	movs	r0, #0
   1d088:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1d08a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1d08e:	2b05      	cmp	r3, #5
   1d090:	d802      	bhi.n	1d098 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1d092:	3857      	subs	r0, #87	; 0x57
   1d094:	7008      	strb	r0, [r1, #0]
   1d096:	e7f6      	b.n	1d086 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1d098:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1d09c:	2b05      	cmp	r3, #5
   1d09e:	d801      	bhi.n	1d0a4 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1d0a0:	3837      	subs	r0, #55	; 0x37
   1d0a2:	e7f7      	b.n	1d094 <char2hex+0x1a>
		return -EINVAL;
   1d0a4:	f06f 0015 	mvn.w	r0, #21
}
   1d0a8:	4770      	bx	lr

0001d0aa <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, u8_t *buf, size_t buflen)
{
   1d0aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1d0ac:	084d      	lsrs	r5, r1, #1
   1d0ae:	f001 0101 	and.w	r1, r1, #1
   1d0b2:	186e      	adds	r6, r5, r1
   1d0b4:	429e      	cmp	r6, r3
{
   1d0b6:	4604      	mov	r4, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   1d0b8:	d903      	bls.n	1d0c2 <hex2bin+0x18>
		return 0;
   1d0ba:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1d0bc:	4630      	mov	r0, r6
   1d0be:	b002      	add	sp, #8
   1d0c0:	bd70      	pop	{r4, r5, r6, pc}
	if (hexlen % 2) {
   1d0c2:	b159      	cbz	r1, 1d0dc <hex2bin+0x32>
		if (char2hex(hex[0], &dec) < 0) {
   1d0c4:	f10d 0107 	add.w	r1, sp, #7
   1d0c8:	7800      	ldrb	r0, [r0, #0]
   1d0ca:	f7ff ffd6 	bl	1d07a <char2hex>
   1d0ce:	2800      	cmp	r0, #0
   1d0d0:	dbf3      	blt.n	1d0ba <hex2bin+0x10>
		buf[0] = dec;
   1d0d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d0d6:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   1d0da:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1d0dc:	3a01      	subs	r2, #1
   1d0de:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   1d0e2:	42ac      	cmp	r4, r5
   1d0e4:	d0ea      	beq.n	1d0bc <hex2bin+0x12>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1d0e6:	f10d 0107 	add.w	r1, sp, #7
   1d0ea:	7820      	ldrb	r0, [r4, #0]
   1d0ec:	f7ff ffc5 	bl	1d07a <char2hex>
   1d0f0:	2800      	cmp	r0, #0
   1d0f2:	dbe2      	blt.n	1d0ba <hex2bin+0x10>
		buf[i] = dec << 4;
   1d0f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d0f8:	011b      	lsls	r3, r3, #4
   1d0fa:	7053      	strb	r3, [r2, #1]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1d0fc:	7860      	ldrb	r0, [r4, #1]
   1d0fe:	f10d 0107 	add.w	r1, sp, #7
   1d102:	f7ff ffba 	bl	1d07a <char2hex>
   1d106:	2800      	cmp	r0, #0
   1d108:	f104 0402 	add.w	r4, r4, #2
   1d10c:	dbd5      	blt.n	1d0ba <hex2bin+0x10>
		buf[i] += dec;
   1d10e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1d112:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1d116:	440b      	add	r3, r1
   1d118:	7013      	strb	r3, [r2, #0]
   1d11a:	e7e2      	b.n	1d0e2 <hex2bin+0x38>

0001d11c <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1d11c:	b570      	push	{r4, r5, r6, lr}
   1d11e:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1d120:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1d124:	250c      	movs	r5, #12
   1d126:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1d128:	4288      	cmp	r0, r1
   1d12a:	eb06 0405 	add.w	r4, r6, r5
   1d12e:	bfb8      	it	lt
   1d130:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
   1d132:	2a00      	cmp	r2, #0
   1d134:	4610      	mov	r0, r2
   1d136:	bfb8      	it	lt
   1d138:	f102 001f 	addlt.w	r0, r2, #31
   1d13c:	1140      	asrs	r0, r0, #5
   1d13e:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1d142:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1d144:	f002 001f 	and.w	r0, r2, #31
   1d148:	bd70      	pop	{r4, r5, r6, pc}

0001d14a <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   1d14a:	f04f 0320 	mov.w	r3, #32
   1d14e:	f3ef 8011 	mrs	r0, BASEPRI
   1d152:	f383 8811 	msr	BASEPRI, r3
   1d156:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1d15a:	4770      	bx	lr

0001d15c <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1d15c:	07c3      	lsls	r3, r0, #31
   1d15e:	d503      	bpl.n	1d168 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1d160:	f381 8811 	msr	BASEPRI, r1
   1d164:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1d168:	4770      	bx	lr

0001d16a <z_sys_mem_pool_base_init>:
{
   1d16a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1d16e:	6846      	ldr	r6, [r0, #4]
   1d170:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1d172:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   1d174:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
   1d178:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1d17a:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
   1d17e:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1d180:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1d182:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1d184:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1d186:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
   1d18a:	4598      	cmp	r8, r3
   1d18c:	dc05      	bgt.n	1d19a <z_sys_mem_pool_base_init+0x30>
   1d18e:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1d190:	4619      	mov	r1, r3
   1d192:	428f      	cmp	r7, r1
   1d194:	dc20      	bgt.n	1d1d8 <z_sys_mem_pool_base_init+0x6e>
}
   1d196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
   1d19a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
   1d19e:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1d1a2:	fb09 fe03 	mul.w	lr, r9, r3
   1d1a6:	eb0a 040e 	add.w	r4, sl, lr
   1d1aa:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1d1ae:	2d20      	cmp	r5, #32
	list->tail = (sys_dnode_t *)list;
   1d1b0:	e9c4 bb01 	strd	fp, fp, [r4, #4]
   1d1b4:	d805      	bhi.n	1d1c2 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1d1b6:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1d1b8:	0892      	lsrs	r2, r2, #2
   1d1ba:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1d1be:	3301      	adds	r3, #1
   1d1c0:	e7e3      	b.n	1d18a <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1d1c2:	f115 041f 	adds.w	r4, r5, #31
   1d1c6:	bf48      	it	mi
   1d1c8:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1d1cc:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1d1ce:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1d1d2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1d1d6:	e7ef      	b.n	1d1b8 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1d1d8:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1d1da:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1d1dc:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1d1e0:	18ec      	adds	r4, r5, r3
	node->next = list;
   1d1e2:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1d1e6:	6895      	ldr	r5, [r2, #8]
   1d1e8:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1d1ea:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1d1ec:	3101      	adds	r1, #1
   1d1ee:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1d1f0:	4433      	add	r3, r6
   1d1f2:	6094      	str	r4, [r2, #8]
   1d1f4:	e7cd      	b.n	1d192 <z_sys_mem_pool_base_init+0x28>

0001d1f6 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1d1f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1fa:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1d1fc:	7a85      	ldrb	r5, [r0, #10]
{
   1d1fe:	af00      	add	r7, sp, #0
   1d200:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1d204:	00ab      	lsls	r3, r5, #2
   1d206:	3307      	adds	r3, #7
   1d208:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1d20c:	ebad 0d03 	sub.w	sp, sp, r3
   1d210:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1d212:	4653      	mov	r3, sl
   1d214:	6842      	ldr	r2, [r0, #4]
   1d216:	f843 2904 	str.w	r2, [r3], #-4
{
   1d21a:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
   1d21c:	2200      	movs	r2, #0
   1d21e:	4295      	cmp	r5, r2
   1d220:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1d224:	dd09      	ble.n	1d23a <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1d226:	b122      	cbz	r2, 1d232 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1d228:	6818      	ldr	r0, [r3, #0]
   1d22a:	0880      	lsrs	r0, r0, #2
   1d22c:	f020 0003 	bic.w	r0, r0, #3
   1d230:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1d232:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1d236:	4288      	cmp	r0, r1
   1d238:	d208      	bcs.n	1d24c <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1d23a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1d23e:	d107      	bne.n	1d250 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1d240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1d242:	2300      	movs	r3, #0
   1d244:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1d246:	f06f 000b 	mvn.w	r0, #11
   1d24a:	e044      	b.n	1d2d6 <z_sys_mem_pool_block_alloc+0xe0>
	for (i = 0; i < p->n_levels; i++) {
   1d24c:	3201      	adds	r2, #1
   1d24e:	e7e6      	b.n	1d21e <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1d250:	7c20      	ldrb	r0, [r4, #16]
   1d252:	f010 0001 	ands.w	r0, r0, #1
   1d256:	d001      	beq.n	1d25c <z_sys_mem_pool_block_alloc+0x66>
   1d258:	f7ff ff77 	bl	1d14a <pool_irq_lock.isra.2.part.3>
   1d25c:	68e2      	ldr	r2, [r4, #12]
   1d25e:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1d260:	4680      	mov	r8, r0
	for (i = alloc_l; i >= 0; i--) {
   1d262:	fb03 2309 	mla	r3, r3, r9, r2
	block = sys_dlist_get(&p->levels[l].free_list);
   1d266:	464e      	mov	r6, r9
	return list->head == list;
   1d268:	461a      	mov	r2, r3
   1d26a:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   1d26e:	4295      	cmp	r5, r2
   1d270:	d06d      	beq.n	1d34e <z_sys_mem_pool_block_alloc+0x158>
	node->prev->next = node->next;
   1d272:	e9d5 3200 	ldrd	r3, r2, [r5]
   1d276:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d278:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d27a:	2300      	movs	r3, #0
	node->prev = NULL;
   1d27c:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1d280:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   1d282:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1d286:	f107 0b14 	add.w	fp, r7, #20
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1d28a:	1aea      	subs	r2, r5, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1d28c:	4620      	mov	r0, r4
   1d28e:	fb92 f2f1 	sdiv	r2, r2, r1
   1d292:	465b      	mov	r3, fp
   1d294:	4631      	mov	r1, r6
   1d296:	f7ff ff41 	bl	1d11c <get_bit_ptr>
	*word |= (1<<bit);
   1d29a:	6979      	ldr	r1, [r7, #20]
   1d29c:	2201      	movs	r2, #1
   1d29e:	680b      	ldr	r3, [r1, #0]
   1d2a0:	603a      	str	r2, [r7, #0]
   1d2a2:	fa02 f000 	lsl.w	r0, r2, r0
   1d2a6:	4303      	orrs	r3, r0
   1d2a8:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1d2aa:	454e      	cmp	r6, r9
   1d2ac:	db17      	blt.n	1d2de <z_sys_mem_pool_block_alloc+0xe8>
	pool_irq_unlock(p, key);
   1d2ae:	4641      	mov	r1, r8
   1d2b0:	7c20      	ldrb	r0, [r4, #16]
   1d2b2:	f7ff ff53 	bl	1d15c <pool_irq_unlock.isra.4>
	*data_p = data;
   1d2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d2b8:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
   1d2ba:	2d00      	cmp	r5, #0
   1d2bc:	d0c3      	beq.n	1d246 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1d2be:	68bb      	ldr	r3, [r7, #8]
   1d2c0:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1d2c4:	6823      	ldr	r3, [r4, #0]
   1d2c6:	1aed      	subs	r5, r5, r3
   1d2c8:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1d2cc:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1d2d0:	687b      	ldr	r3, [r7, #4]

	return 0;
   1d2d2:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1d2d4:	601d      	str	r5, [r3, #0]
}
   1d2d6:	371c      	adds	r7, #28
   1d2d8:	46bd      	mov	sp, r7
   1d2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1d2de:	6822      	ldr	r2, [r4, #0]
   1d2e0:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
	set_alloc_bit(p, l + 1, 4*bn);
   1d2e4:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1d2e6:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1d2e8:	1aaa      	subs	r2, r5, r2
	int bit = get_bit_ptr(p, level, bn, &word);
   1d2ea:	4620      	mov	r0, r4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1d2ec:	fb92 f2f3 	sdiv	r2, r2, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1d2f0:	465b      	mov	r3, fp
   1d2f2:	0092      	lsls	r2, r2, #2
   1d2f4:	f7ff ff12 	bl	1d11c <get_bit_ptr>
	*word |= (1<<bit);
   1d2f8:	697a      	ldr	r2, [r7, #20]
   1d2fa:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1d2fc:	68e1      	ldr	r1, [r4, #12]
	*word |= (1<<bit);
   1d2fe:	fa03 f000 	lsl.w	r0, r3, r0
   1d302:	6813      	ldr	r3, [r2, #0]
   1d304:	4303      	orrs	r3, r0
   1d306:	6013      	str	r3, [r2, #0]
		int lsz = lsizes[l + 1];
   1d308:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1d30c:	230c      	movs	r3, #12
   1d30e:	fb03 1106 	mla	r1, r3, r6, r1
   1d312:	2203      	movs	r2, #3
   1d314:	f101 0e04 	add.w	lr, r1, #4
   1d318:	182b      	adds	r3, r5, r0
   1d31a:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1d31c:	688a      	ldr	r2, [r1, #8]
   1d31e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1d320:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1d322:	f8c3 e000 	str.w	lr, [r3]
	list->tail->next = node;
   1d326:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1d328:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1d32a:	608b      	str	r3, [r1, #8]
   1d32c:	3a01      	subs	r2, #1
   1d32e:	4403      	add	r3, r0
   1d330:	60fa      	str	r2, [r7, #12]
   1d332:	d1f3      	bne.n	1d31c <z_sys_mem_pool_block_alloc+0x126>
				pool_irq_unlock(p, key);
   1d334:	4641      	mov	r1, r8
   1d336:	7c20      	ldrb	r0, [r4, #16]
   1d338:	f7ff ff10 	bl	1d15c <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1d33c:	7c23      	ldrb	r3, [r4, #16]
   1d33e:	07d9      	lsls	r1, r3, #31
   1d340:	d503      	bpl.n	1d34a <z_sys_mem_pool_block_alloc+0x154>
   1d342:	f7ff ff02 	bl	1d14a <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1d346:	4680      	mov	r8, r0
   1d348:	e7af      	b.n	1d2aa <z_sys_mem_pool_block_alloc+0xb4>
		return 0;
   1d34a:	68f8      	ldr	r0, [r7, #12]
   1d34c:	e7fb      	b.n	1d346 <z_sys_mem_pool_block_alloc+0x150>
	for (i = alloc_l; i >= 0; i--) {
   1d34e:	3e01      	subs	r6, #1
   1d350:	1c72      	adds	r2, r6, #1
   1d352:	f1a3 030c 	sub.w	r3, r3, #12
   1d356:	d187      	bne.n	1d268 <z_sys_mem_pool_block_alloc+0x72>
   1d358:	2500      	movs	r5, #0
   1d35a:	e7a8      	b.n	1d2ae <z_sys_mem_pool_block_alloc+0xb8>

0001d35c <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1d35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d360:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1d362:	7a83      	ldrb	r3, [r0, #10]
   1d364:	009b      	lsls	r3, r3, #2
   1d366:	3307      	adds	r3, #7
   1d368:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   1d36c:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1d36e:	ebad 0d03 	sub.w	sp, sp, r3
   1d372:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1d374:	6843      	ldr	r3, [r0, #4]
   1d376:	f8cb 3000 	str.w	r3, [fp]
{
   1d37a:	4606      	mov	r6, r0
	for (i = 1; i <= level; i++) {
   1d37c:	465c      	mov	r4, fp
   1d37e:	2001      	movs	r0, #1
   1d380:	4281      	cmp	r1, r0
   1d382:	d215      	bcs.n	1d3b0 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1d384:	7c30      	ldrb	r0, [r6, #16]
   1d386:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1d38a:	4688      	mov	r8, r1
   1d38c:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1d38e:	d001      	beq.n	1d394 <z_sys_mem_pool_block_free+0x38>
   1d390:	f7ff fedb 	bl	1d14a <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1d394:	4604      	mov	r4, r0
	while (level >= 0) {
   1d396:	f1b8 0f00 	cmp.w	r8, #0
   1d39a:	da11      	bge.n	1d3c0 <z_sys_mem_pool_block_free+0x64>
	return -1;
   1d39c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1d3a0:	4621      	mov	r1, r4
   1d3a2:	7c30      	ldrb	r0, [r6, #16]
   1d3a4:	f7ff feda 	bl	1d15c <pool_irq_unlock.isra.4>
}
   1d3a8:	3714      	adds	r7, #20
   1d3aa:	46bd      	mov	sp, r7
   1d3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1d3b0:	6823      	ldr	r3, [r4, #0]
   1d3b2:	089b      	lsrs	r3, r3, #2
   1d3b4:	f023 0303 	bic.w	r3, r3, #3
   1d3b8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   1d3bc:	3001      	adds	r0, #1
   1d3be:	e7df      	b.n	1d380 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1d3c0:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   1d3c4:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1d3c6:	fb03 fa05 	mul.w	sl, r3, r5
   1d3ca:	6833      	ldr	r3, [r6, #0]
   1d3cc:	603b      	str	r3, [r7, #0]
   1d3ce:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
   1d3d2:	462a      	mov	r2, r5
   1d3d4:	f107 030c 	add.w	r3, r7, #12
   1d3d8:	4641      	mov	r1, r8
   1d3da:	4630      	mov	r0, r6
   1d3dc:	f7ff fe9e 	bl	1d11c <get_bit_ptr>
	*word &= ~(1<<bit);
   1d3e0:	68fa      	ldr	r2, [r7, #12]
	node->next = list;
   1d3e2:	6839      	ldr	r1, [r7, #0]
   1d3e4:	2301      	movs	r3, #1
   1d3e6:	fa03 f000 	lsl.w	r0, r3, r0
   1d3ea:	6813      	ldr	r3, [r2, #0]
   1d3ec:	ea23 0300 	bic.w	r3, r3, r0
   1d3f0:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1d3f2:	68f3      	ldr	r3, [r6, #12]
   1d3f4:	220c      	movs	r2, #12
   1d3f6:	fb02 3308 	mla	r3, r2, r8, r3
   1d3fa:	1d1a      	adds	r2, r3, #4
   1d3fc:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1d400:	689a      	ldr	r2, [r3, #8]
   1d402:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1d406:	689a      	ldr	r2, [r3, #8]
   1d408:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1d40c:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
   1d410:	7c30      	ldrb	r0, [r6, #16]
   1d412:	4621      	mov	r1, r4
   1d414:	f7ff fea2 	bl	1d15c <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1d418:	7c30      	ldrb	r0, [r6, #16]
   1d41a:	f010 0001 	ands.w	r0, r0, #1
   1d41e:	d001      	beq.n	1d424 <z_sys_mem_pool_block_free+0xc8>
   1d420:	f7ff fe93 	bl	1d14a <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1d424:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1d426:	f1b8 0f00 	cmp.w	r8, #0
   1d42a:	d0b9      	beq.n	1d3a0 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1d42c:	f107 030c 	add.w	r3, r7, #12
   1d430:	462a      	mov	r2, r5
   1d432:	4641      	mov	r1, r8
   1d434:	4630      	mov	r0, r6
   1d436:	f7ff fe71 	bl	1d11c <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1d43a:	68fb      	ldr	r3, [r7, #12]
   1d43c:	2800      	cmp	r0, #0
   1d43e:	bfb8      	it	lt
   1d440:	3003      	addlt	r0, #3
   1d442:	681b      	ldr	r3, [r3, #0]
   1d444:	f020 0003 	bic.w	r0, r0, #3
   1d448:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1d44c:	f010 000f 	ands.w	r0, r0, #15
   1d450:	d1a6      	bne.n	1d3a0 <z_sys_mem_pool_block_free+0x44>
			int b = (bn & ~3) + i;
   1d452:	f025 0a03 	bic.w	sl, r5, #3
	node->next = NULL;
   1d456:	4684      	mov	ip, r0
	return (u8_t *)p->buf + lsz * block;
   1d458:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1d45a:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1d45e:	4353      	muls	r3, r2
   1d460:	6832      	ldr	r2, [r6, #0]
   1d462:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1d464:	f852 e003 	ldr.w	lr, [r2, r3]
   1d468:	f8d1 9004 	ldr.w	r9, [r1, #4]
		for (i = 0; i < 4; i++) {
   1d46c:	3001      	adds	r0, #1
   1d46e:	2804      	cmp	r0, #4
   1d470:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1d474:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1d478:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1d47c:	f8c1 c004 	str.w	ip, [r1, #4]
   1d480:	d1ea      	bne.n	1d458 <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1d482:	2d00      	cmp	r5, #0
   1d484:	bfb8      	it	lt
   1d486:	3503      	addlt	r5, #3
		level = level - 1;
   1d488:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1d48c:	10ad      	asrs	r5, r5, #2
   1d48e:	e782      	b.n	1d396 <z_sys_mem_pool_block_free+0x3a>

0001d490 <arch_printk_char_out>:
}
   1d490:	2000      	movs	r0, #0
   1d492:	4770      	bx	lr

0001d494 <print_err>:
{
   1d494:	b570      	push	{r4, r5, r6, lr}
   1d496:	4604      	mov	r4, r0
   1d498:	460d      	mov	r5, r1
	out('E', ctx);
   1d49a:	2045      	movs	r0, #69	; 0x45
   1d49c:	47a0      	blx	r4
	out('R', ctx);
   1d49e:	4629      	mov	r1, r5
   1d4a0:	2052      	movs	r0, #82	; 0x52
   1d4a2:	47a0      	blx	r4
	out('R', ctx);
   1d4a4:	4629      	mov	r1, r5
   1d4a6:	4623      	mov	r3, r4
   1d4a8:	2052      	movs	r0, #82	; 0x52
}
   1d4aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1d4ae:	4718      	bx	r3

0001d4b0 <str_out>:
{
   1d4b0:	b530      	push	{r4, r5, lr}
   1d4b2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1d4b4:	680c      	ldr	r4, [r1, #0]
   1d4b6:	1c55      	adds	r5, r2, #1
   1d4b8:	b114      	cbz	r4, 1d4c0 <str_out+0x10>
   1d4ba:	684b      	ldr	r3, [r1, #4]
   1d4bc:	4293      	cmp	r3, r2
   1d4be:	dc01      	bgt.n	1d4c4 <str_out+0x14>
		ctx->count++;
   1d4c0:	608d      	str	r5, [r1, #8]
}
   1d4c2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1d4c4:	3b01      	subs	r3, #1
   1d4c6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1d4c8:	bf08      	it	eq
   1d4ca:	2200      	moveq	r2, #0
   1d4cc:	608d      	str	r5, [r1, #8]
   1d4ce:	bf0c      	ite	eq
   1d4d0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1d4d2:	54a0      	strbne	r0, [r4, r2]
   1d4d4:	e7f5      	b.n	1d4c2 <str_out+0x12>

0001d4d6 <z_vprintk>:
{
   1d4d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4da:	b08b      	sub	sp, #44	; 0x2c
   1d4dc:	461c      	mov	r4, r3
	char length_mod = 0;
   1d4de:	f04f 0800 	mov.w	r8, #0
   1d4e2:	1e53      	subs	r3, r2, #1
{
   1d4e4:	4606      	mov	r6, r0
   1d4e6:	460f      	mov	r7, r1
   1d4e8:	9302      	str	r3, [sp, #8]
	int min_width = -1;
   1d4ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1d4ee:	46c1      	mov	r9, r8
			might_format = 0;
   1d4f0:	2500      	movs	r5, #0
					break;
   1d4f2:	e005      	b.n	1d500 <z_vprintk+0x2a>
		if (!might_format) {
   1d4f4:	b96d      	cbnz	r5, 1d512 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1d4f6:	2825      	cmp	r0, #37	; 0x25
   1d4f8:	f000 814f 	beq.w	1d79a <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1d4fc:	4639      	mov	r1, r7
   1d4fe:	47b0      	blx	r6
	while (*fmt) {
   1d500:	9b02      	ldr	r3, [sp, #8]
   1d502:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1d506:	9302      	str	r3, [sp, #8]
   1d508:	2800      	cmp	r0, #0
   1d50a:	d1f3      	bne.n	1d4f4 <z_vprintk+0x1e>
}
   1d50c:	b00b      	add	sp, #44	; 0x2c
   1d50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1d512:	2864      	cmp	r0, #100	; 0x64
   1d514:	d06e      	beq.n	1d5f4 <z_vprintk+0x11e>
   1d516:	d81a      	bhi.n	1d54e <z_vprintk+0x78>
   1d518:	2839      	cmp	r0, #57	; 0x39
   1d51a:	d80a      	bhi.n	1d532 <z_vprintk+0x5c>
   1d51c:	2831      	cmp	r0, #49	; 0x31
   1d51e:	d260      	bcs.n	1d5e2 <z_vprintk+0x10c>
   1d520:	282d      	cmp	r0, #45	; 0x2d
   1d522:	f000 8140 	beq.w	1d7a6 <z_vprintk+0x2d0>
   1d526:	2830      	cmp	r0, #48	; 0x30
   1d528:	d04c      	beq.n	1d5c4 <z_vprintk+0xee>
   1d52a:	2825      	cmp	r0, #37	; 0x25
   1d52c:	d107      	bne.n	1d53e <z_vprintk+0x68>
				out((int)'%', ctx);
   1d52e:	4639      	mov	r1, r7
   1d530:	e00b      	b.n	1d54a <z_vprintk+0x74>
			switch (*fmt) {
   1d532:	2858      	cmp	r0, #88	; 0x58
   1d534:	f000 80bb 	beq.w	1d6ae <z_vprintk+0x1d8>
   1d538:	2863      	cmp	r0, #99	; 0x63
   1d53a:	f000 812a 	beq.w	1d792 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1d53e:	4639      	mov	r1, r7
   1d540:	2025      	movs	r0, #37	; 0x25
   1d542:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1d544:	9b02      	ldr	r3, [sp, #8]
   1d546:	7818      	ldrb	r0, [r3, #0]
   1d548:	4639      	mov	r1, r7
   1d54a:	47b0      	blx	r6
   1d54c:	e7d0      	b.n	1d4f0 <z_vprintk+0x1a>
			switch (*fmt) {
   1d54e:	2870      	cmp	r0, #112	; 0x70
   1d550:	f000 80a3 	beq.w	1d69a <z_vprintk+0x1c4>
   1d554:	d811      	bhi.n	1d57a <z_vprintk+0xa4>
   1d556:	2869      	cmp	r0, #105	; 0x69
   1d558:	d04c      	beq.n	1d5f4 <z_vprintk+0x11e>
   1d55a:	286c      	cmp	r0, #108	; 0x6c
   1d55c:	d105      	bne.n	1d56a <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1d55e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1d562:	d12a      	bne.n	1d5ba <z_vprintk+0xe4>
					length_mod = 'L';
   1d564:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1d568:	e7ca      	b.n	1d500 <z_vprintk+0x2a>
			switch (*fmt) {
   1d56a:	2868      	cmp	r0, #104	; 0x68
   1d56c:	d1e7      	bne.n	1d53e <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1d56e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1d572:	d122      	bne.n	1d5ba <z_vprintk+0xe4>
					length_mod = 'H';
   1d574:	f04f 0848 	mov.w	r8, #72	; 0x48
   1d578:	e7c2      	b.n	1d500 <z_vprintk+0x2a>
			switch (*fmt) {
   1d57a:	2875      	cmp	r0, #117	; 0x75
   1d57c:	d071      	beq.n	1d662 <z_vprintk+0x18c>
   1d57e:	d818      	bhi.n	1d5b2 <z_vprintk+0xdc>
   1d580:	2873      	cmp	r0, #115	; 0x73
   1d582:	d1dc      	bne.n	1d53e <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1d584:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1d588:	46ab      	mov	fp, r5
   1d58a:	465b      	mov	r3, fp
   1d58c:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1d590:	2800      	cmp	r0, #0
   1d592:	f040 80fb 	bne.w	1d78c <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1d596:	f1b9 0f03 	cmp.w	r9, #3
   1d59a:	f040 810a 	bne.w	1d7b2 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1d59e:	1b5d      	subs	r5, r3, r5
   1d5a0:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1d5a4:	2d00      	cmp	r5, #0
   1d5a6:	dda3      	ble.n	1d4f0 <z_vprintk+0x1a>
						out(' ', ctx);
   1d5a8:	4639      	mov	r1, r7
   1d5aa:	2020      	movs	r0, #32
   1d5ac:	47b0      	blx	r6
   1d5ae:	3d01      	subs	r5, #1
   1d5b0:	e7f8      	b.n	1d5a4 <z_vprintk+0xce>
			switch (*fmt) {
   1d5b2:	2878      	cmp	r0, #120	; 0x78
   1d5b4:	d07b      	beq.n	1d6ae <z_vprintk+0x1d8>
   1d5b6:	287a      	cmp	r0, #122	; 0x7a
   1d5b8:	d1c1      	bne.n	1d53e <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1d5ba:	f1b8 0f00 	cmp.w	r8, #0
   1d5be:	d1be      	bne.n	1d53e <z_vprintk+0x68>
   1d5c0:	4680      	mov	r8, r0
   1d5c2:	e79d      	b.n	1d500 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1d5c4:	f1ba 0f00 	cmp.w	sl, #0
   1d5c8:	da0e      	bge.n	1d5e8 <z_vprintk+0x112>
   1d5ca:	f1b9 0f00 	cmp.w	r9, #0
   1d5ce:	f000 80ed 	beq.w	1d7ac <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1d5d2:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1d5d6:	f1b9 0f00 	cmp.w	r9, #0
   1d5da:	bf08      	it	eq
   1d5dc:	f04f 0902 	moveq.w	r9, #2
   1d5e0:	e78e      	b.n	1d500 <z_vprintk+0x2a>
				if (min_width < 0) {
   1d5e2:	f1ba 0f00 	cmp.w	sl, #0
   1d5e6:	dbf4      	blt.n	1d5d2 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1d5e8:	230a      	movs	r3, #10
   1d5ea:	fb03 0a0a 	mla	sl, r3, sl, r0
   1d5ee:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1d5f2:	e7f0      	b.n	1d5d6 <z_vprintk+0x100>
				if (length_mod == 'z') {
   1d5f4:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1d5f8:	d102      	bne.n	1d600 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1d5fa:	f854 5b04 	ldr.w	r5, [r4], #4
   1d5fe:	e01f      	b.n	1d640 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1d600:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1d604:	d0f9      	beq.n	1d5fa <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1d606:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1d60a:	d1f6      	bne.n	1d5fa <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1d60c:	3407      	adds	r4, #7
   1d60e:	f024 0407 	bic.w	r4, r4, #7
   1d612:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1d616:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1d61a:	9106      	str	r1, [sp, #24]
   1d61c:	f143 0100 	adc.w	r1, r3, #0
   1d620:	9107      	str	r1, [sp, #28]
   1d622:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1d626:	2100      	movs	r1, #0
   1d628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d62c:	4561      	cmp	r1, ip
   1d62e:	bf08      	it	eq
   1d630:	4558      	cmpeq	r0, fp
   1d632:	d204      	bcs.n	1d63e <z_vprintk+0x168>
						print_err(out, ctx);
   1d634:	4639      	mov	r1, r7
   1d636:	4630      	mov	r0, r6
   1d638:	f7ff ff2c 	bl	1d494 <print_err>
						break;
   1d63c:	e758      	b.n	1d4f0 <z_vprintk+0x1a>
					d = lld;
   1d63e:	4615      	mov	r5, r2
				if (d < 0) {
   1d640:	2d00      	cmp	r5, #0
   1d642:	da05      	bge.n	1d650 <z_vprintk+0x17a>
					out((int)'-', ctx);
   1d644:	4639      	mov	r1, r7
   1d646:	202d      	movs	r0, #45	; 0x2d
   1d648:	47b0      	blx	r6
					d = -d;
   1d64a:	426d      	negs	r5, r5
					min_width--;
   1d64c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1d650:	f8cd a000 	str.w	sl, [sp]
   1d654:	464b      	mov	r3, r9
   1d656:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
   1d658:	4639      	mov	r1, r7
   1d65a:	4630      	mov	r0, r6
   1d65c:	f7e5 fa4c 	bl	2af8 <_printk_dec_ulong>
				break;
   1d660:	e746      	b.n	1d4f0 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1d662:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1d666:	d102      	bne.n	1d66e <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1d668:	f854 2b04 	ldr.w	r2, [r4], #4
   1d66c:	e011      	b.n	1d692 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1d66e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1d672:	d0f9      	beq.n	1d668 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1d674:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1d678:	d1f6      	bne.n	1d668 <z_vprintk+0x192>
					unsigned long long llu =
   1d67a:	3407      	adds	r4, #7
   1d67c:	f024 0407 	bic.w	r4, r4, #7
   1d680:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1d684:	2100      	movs	r1, #0
   1d686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d68a:	4299      	cmp	r1, r3
   1d68c:	bf08      	it	eq
   1d68e:	4290      	cmpeq	r0, r2
   1d690:	d3d0      	bcc.n	1d634 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1d692:	f8cd a000 	str.w	sl, [sp]
   1d696:	464b      	mov	r3, r9
   1d698:	e7de      	b.n	1d658 <z_vprintk+0x182>
				out('0', ctx);
   1d69a:	4639      	mov	r1, r7
   1d69c:	2030      	movs	r0, #48	; 0x30
   1d69e:	47b0      	blx	r6
				out('x', ctx);
   1d6a0:	4639      	mov	r1, r7
   1d6a2:	2078      	movs	r0, #120	; 0x78
   1d6a4:	47b0      	blx	r6
					min_width = 8;
   1d6a6:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1d6aa:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1d6ae:	9b02      	ldr	r3, [sp, #8]
   1d6b0:	781b      	ldrb	r3, [r3, #0]
   1d6b2:	2b70      	cmp	r3, #112	; 0x70
   1d6b4:	d104      	bne.n	1d6c0 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1d6b6:	f854 3b04 	ldr.w	r3, [r4], #4
   1d6ba:	9304      	str	r3, [sp, #16]
   1d6bc:	2300      	movs	r3, #0
   1d6be:	e00d      	b.n	1d6dc <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1d6c0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1d6c4:	d0f7      	beq.n	1d6b6 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1d6c6:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1d6ca:	d1f4      	bne.n	1d6b6 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1d6cc:	3407      	adds	r4, #7
   1d6ce:	f024 0307 	bic.w	r3, r4, #7
   1d6d2:	461c      	mov	r4, r3
   1d6d4:	685b      	ldr	r3, [r3, #4]
   1d6d6:	f854 2b08 	ldr.w	r2, [r4], #8
   1d6da:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1d6dc:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1d6de:	2210      	movs	r2, #16
	int digits = 0;
   1d6e0:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1d6e2:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
   1d6e4:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
   1d6e8:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1d6ec:	9804      	ldr	r0, [sp, #16]
   1d6ee:	f1cb 0c20 	rsb	ip, fp, #32
   1d6f2:	f1ab 0120 	sub.w	r1, fp, #32
   1d6f6:	fa20 f00b 	lsr.w	r0, r0, fp
   1d6fa:	fa03 fc0c 	lsl.w	ip, r3, ip
   1d6fe:	ea40 000c 	orr.w	r0, r0, ip
   1d702:	fa23 f101 	lsr.w	r1, r3, r1
   1d706:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1d708:	f010 000f 	ands.w	r0, r0, #15
   1d70c:	d108      	bne.n	1d720 <z_vprintk+0x24a>
   1d70e:	9905      	ldr	r1, [sp, #20]
   1d710:	b911      	cbnz	r1, 1d718 <z_vprintk+0x242>
   1d712:	f1bb 0f00 	cmp.w	fp, #0
   1d716:	d124      	bne.n	1d762 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
   1d718:	2130      	movs	r1, #48	; 0x30
   1d71a:	e005      	b.n	1d728 <z_vprintk+0x252>
			found_largest_digit = 1;
   1d71c:	9505      	str	r5, [sp, #20]
   1d71e:	e7e3      	b.n	1d6e8 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
   1d720:	2809      	cmp	r0, #9
   1d722:	bf8c      	ite	hi
   1d724:	2157      	movhi	r1, #87	; 0x57
   1d726:	2130      	movls	r1, #48	; 0x30
   1d728:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1d72a:	b240      	sxtb	r0, r0
   1d72c:	4639      	mov	r1, r7
   1d72e:	9308      	str	r3, [sp, #32]
   1d730:	9205      	str	r2, [sp, #20]
   1d732:	47b0      	blx	r6
			digits++;
   1d734:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1d736:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1d738:	3301      	adds	r3, #1
   1d73a:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1d73c:	9b08      	ldr	r3, [sp, #32]
   1d73e:	f1bb 0f00 	cmp.w	fp, #0
   1d742:	d1eb      	bne.n	1d71c <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
   1d744:	f1b9 0f03 	cmp.w	r9, #3
   1d748:	f47f aed2 	bne.w	1d4f0 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1d74c:	9b03      	ldr	r3, [sp, #12]
   1d74e:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1d752:	2d00      	cmp	r5, #0
   1d754:	f77f aecc 	ble.w	1d4f0 <z_vprintk+0x1a>
			out(' ', ctx);
   1d758:	4639      	mov	r1, r7
   1d75a:	2020      	movs	r0, #32
   1d75c:	47b0      	blx	r6
   1d75e:	3d01      	subs	r5, #1
   1d760:	e7f7      	b.n	1d752 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
   1d762:	1e51      	subs	r1, r2, #1
   1d764:	4592      	cmp	sl, r2
   1d766:	9108      	str	r1, [sp, #32]
   1d768:	db07      	blt.n	1d77a <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
   1d76a:	f1b9 0f01 	cmp.w	r9, #1
   1d76e:	d106      	bne.n	1d77e <z_vprintk+0x2a8>
   1d770:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
   1d772:	4639      	mov	r1, r7
   1d774:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   1d776:	47b0      	blx	r6
   1d778:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
   1d77a:	9a08      	ldr	r2, [sp, #32]
   1d77c:	e7b4      	b.n	1d6e8 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1d77e:	f1b9 0f02 	cmp.w	r9, #2
   1d782:	d1fa      	bne.n	1d77a <z_vprintk+0x2a4>
   1d784:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1d786:	4639      	mov	r1, r7
   1d788:	2020      	movs	r0, #32
   1d78a:	e7f4      	b.n	1d776 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
   1d78c:	4639      	mov	r1, r7
   1d78e:	47b0      	blx	r6
   1d790:	e6fb      	b.n	1d58a <z_vprintk+0xb4>
				out(c, ctx);
   1d792:	4639      	mov	r1, r7
   1d794:	f854 0b04 	ldr.w	r0, [r4], #4
   1d798:	e6d7      	b.n	1d54a <z_vprintk+0x74>
				length_mod = 0;
   1d79a:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1d79c:	46a9      	mov	r9, r5
				min_width = -1;
   1d79e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1d7a2:	2501      	movs	r5, #1
   1d7a4:	e6ac      	b.n	1d500 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1d7a6:	f04f 0903 	mov.w	r9, #3
   1d7aa:	e6a9      	b.n	1d500 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1d7ac:	f04f 0901 	mov.w	r9, #1
   1d7b0:	e6a6      	b.n	1d500 <z_vprintk+0x2a>
			might_format = 0;
   1d7b2:	4605      	mov	r5, r0
		++fmt;
   1d7b4:	e6a4      	b.n	1d500 <z_vprintk+0x2a>

0001d7b6 <printk>:
{
   1d7b6:	b40f      	push	{r0, r1, r2, r3}
   1d7b8:	b507      	push	{r0, r1, r2, lr}
   1d7ba:	a904      	add	r1, sp, #16
   1d7bc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1d7c0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1d7c2:	f7e5 f9e5 	bl	2b90 <vprintk>
}
   1d7c6:	b003      	add	sp, #12
   1d7c8:	f85d eb04 	ldr.w	lr, [sp], #4
   1d7cc:	b004      	add	sp, #16
   1d7ce:	4770      	bx	lr

0001d7d0 <snprintk>:
{
   1d7d0:	b40c      	push	{r2, r3}
   1d7d2:	b507      	push	{r0, r1, r2, lr}
   1d7d4:	ab04      	add	r3, sp, #16
   1d7d6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1d7da:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1d7dc:	f7e5 f9e6 	bl	2bac <vsnprintk>
}
   1d7e0:	b003      	add	sp, #12
   1d7e2:	f85d eb04 	ldr.w	lr, [sp], #4
   1d7e6:	b002      	add	sp, #8
   1d7e8:	4770      	bx	lr

0001d7ea <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1d7ea:	4604      	mov	r4, r0
   1d7ec:	b508      	push	{r3, lr}
   1d7ee:	4608      	mov	r0, r1
   1d7f0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1d7f2:	461a      	mov	r2, r3
   1d7f4:	47a0      	blx	r4
	return z_impl_k_current_get();
   1d7f6:	f7ff f859 	bl	1c8ac <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1d7fa:	f7e7 fc3f 	bl	507c <z_impl_k_thread_abort>

0001d7fe <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1d7fe:	b510      	push	{r4, lr}
   1d800:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1d802:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d806:	4620      	mov	r0, r4
   1d808:	f007 fc58 	bl	250bc <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1d80c:	4603      	mov	r3, r0
   1d80e:	2800      	cmp	r0, #0
   1d810:	d0f7      	beq.n	1d802 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d812:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1d814:	6842      	ldr	r2, [r0, #4]
   1d816:	f3bf 8f5b 	dmb	ish
   1d81a:	e853 1f00 	ldrex	r1, [r3]
   1d81e:	f021 0c01 	bic.w	ip, r1, #1
   1d822:	e843 ce00 	strex	lr, ip, [r3]
   1d826:	f1be 0f00 	cmp.w	lr, #0
   1d82a:	d1f6      	bne.n	1d81a <z_work_q_main+0x1c>
   1d82c:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1d830:	07cb      	lsls	r3, r1, #31
   1d832:	d500      	bpl.n	1d836 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1d834:	4790      	blx	r2
	z_impl_k_yield();
   1d836:	f7fe ffc5 	bl	1c7c4 <z_impl_k_yield>
   1d83a:	e7e2      	b.n	1d802 <z_work_q_main+0x4>

0001d83c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1d83c:	4770      	bx	lr

0001d83e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   1d83e:	428b      	cmp	r3, r1
{
   1d840:	b538      	push	{r3, r4, r5, lr}
   1d842:	4615      	mov	r5, r2
   1d844:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d846:	d805      	bhi.n	1d854 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1d848:	461a      	mov	r2, r3
   1d84a:	4629      	mov	r1, r5
   1d84c:	f001 fed4 	bl	1f5f8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d850:	4620      	mov	r0, r4
   1d852:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d854:	2400      	movs	r4, #0
   1d856:	e7fb      	b.n	1d850 <_copy+0x12>

0001d858 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1d858:	f001 bef8 	b.w	1f64c <memset>

0001d85c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d85c:	09c3      	lsrs	r3, r0, #7
   1d85e:	005a      	lsls	r2, r3, #1
   1d860:	4413      	add	r3, r2
   1d862:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d866:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d86a:	b2c0      	uxtb	r0, r0
   1d86c:	4770      	bx	lr

0001d86e <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1d86e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d872:	4607      	mov	r7, r0
   1d874:	b0a9      	sub	sp, #164	; 0xa4
   1d876:	4688      	mov	r8, r1
   1d878:	4614      	mov	r4, r2
   1d87a:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1d87c:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1d880:	f7e5 f9a8 	bl	2bd4 <uECC_get_rng>
		if (!rng_function ||
   1d884:	4603      	mov	r3, r0
   1d886:	2800      	cmp	r0, #0
   1d888:	d03e      	beq.n	1d908 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1d88a:	2140      	movs	r1, #64	; 0x40
   1d88c:	a808      	add	r0, sp, #32
   1d88e:	4798      	blx	r3
		if (!rng_function ||
   1d890:	b3d0      	cbz	r0, 1d908 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1d892:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1d896:	f112 031f 	adds.w	r3, r2, #31
   1d89a:	bf48      	it	mi
   1d89c:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1d8a0:	466d      	mov	r5, sp
   1d8a2:	464a      	mov	r2, r9
   1d8a4:	a908      	add	r1, sp, #32
   1d8a6:	4628      	mov	r0, r5
   1d8a8:	f343 1347 	sbfx	r3, r3, #5, #8
   1d8ac:	f000 fa00 	bl	1dcb0 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1d8b0:	4622      	mov	r2, r4
   1d8b2:	4629      	mov	r1, r5
   1d8b4:	a818      	add	r0, sp, #96	; 0x60
   1d8b6:	f000 fe16 	bl	1e4e6 <EccPoint_compute_public_key>
   1d8ba:	b318      	cbz	r0, 1d904 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1d8bc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1d8c0:	1dd9      	adds	r1, r3, #7
   1d8c2:	bf48      	it	mi
   1d8c4:	f103 010e 	addmi.w	r1, r3, #14
   1d8c8:	462a      	mov	r2, r5
   1d8ca:	4640      	mov	r0, r8
   1d8cc:	10c9      	asrs	r1, r1, #3
   1d8ce:	f000 fe32 	bl	1e536 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1d8d2:	aa18      	add	r2, sp, #96	; 0x60
   1d8d4:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1d8d8:	4638      	mov	r0, r7
   1d8da:	f000 fe2c 	bl	1e536 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1d8de:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1d8e2:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1d8e6:	ab18      	add	r3, sp, #96	; 0x60
   1d8e8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1d8ec:	1878      	adds	r0, r7, r1
   1d8ee:	f000 fe22 	bl	1e536 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1d8f2:	2220      	movs	r2, #32
   1d8f4:	2100      	movs	r1, #0
   1d8f6:	4628      	mov	r0, r5
   1d8f8:	f001 fea8 	bl	1f64c <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1d8fc:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1d8fe:	b029      	add	sp, #164	; 0xa4
   1d900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1d904:	3e01      	subs	r6, #1
   1d906:	d1bb      	bne.n	1d880 <uECC_make_key+0x12>
        		return 0;
   1d908:	2000      	movs	r0, #0
   1d90a:	e7f8      	b.n	1d8fe <uECC_make_key+0x90>

0001d90c <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1d90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d910:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1d912:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1d916:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1d91a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1d91e:	b0a4      	sub	sp, #144	; 0x90
   1d920:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1d922:	1dda      	adds	r2, r3, #7
   1d924:	bf48      	it	mi
   1d926:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1d92a:	ad04      	add	r5, sp, #16
{
   1d92c:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1d92e:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1d930:	4628      	mov	r0, r5
   1d932:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1d934:	9502      	str	r5, [sp, #8]
   1d936:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1d938:	f000 fe11 	bl	1e55e <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1d93c:	463a      	mov	r2, r7
   1d93e:	4649      	mov	r1, r9
   1d940:	a814      	add	r0, sp, #80	; 0x50
   1d942:	f000 fe0c 	bl	1e55e <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1d946:	ab14      	add	r3, sp, #80	; 0x50
   1d948:	eb09 0107 	add.w	r1, r9, r7
   1d94c:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1d950:	463a      	mov	r2, r7
   1d952:	f000 fe04 	bl	1e55e <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1d956:	4623      	mov	r3, r4
   1d958:	4632      	mov	r2, r6
   1d95a:	4629      	mov	r1, r5
   1d95c:	4628      	mov	r0, r5
   1d95e:	f000 fd95 	bl	1e48c <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1d962:	fab0 f080 	clz	r0, r0
   1d966:	9401      	str	r4, [sp, #4]
   1d968:	ab24      	add	r3, sp, #144	; 0x90
   1d96a:	0940      	lsrs	r0, r0, #5
   1d96c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1d970:	8863      	ldrh	r3, [r4, #2]
   1d972:	3301      	adds	r3, #1
   1d974:	b21b      	sxth	r3, r3
   1d976:	9300      	str	r3, [sp, #0]
   1d978:	a914      	add	r1, sp, #80	; 0x50
   1d97a:	2300      	movs	r3, #0
   1d97c:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1d980:	4608      	mov	r0, r1
   1d982:	f000 fcb4 	bl	1e2ee <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1d986:	aa14      	add	r2, sp, #80	; 0x50
   1d988:	4639      	mov	r1, r7
   1d98a:	4640      	mov	r0, r8
   1d98c:	f000 fdd3 	bl	1e536 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1d990:	4621      	mov	r1, r4
   1d992:	a814      	add	r0, sp, #80	; 0x50
   1d994:	f000 fc22 	bl	1e1dc <EccPoint_isZero>
   1d998:	ac02      	add	r4, sp, #8
   1d99a:	4607      	mov	r7, r0
   1d99c:	2208      	movs	r2, #8
   1d99e:	2100      	movs	r1, #0
   1d9a0:	4620      	mov	r0, r4
   1d9a2:	f001 fe53 	bl	1f64c <memset>
   1d9a6:	2220      	movs	r2, #32
   1d9a8:	2100      	movs	r1, #0
   1d9aa:	4630      	mov	r0, r6
   1d9ac:	f001 fe4e 	bl	1f64c <memset>
   1d9b0:	2220      	movs	r2, #32
   1d9b2:	2100      	movs	r1, #0
   1d9b4:	4628      	mov	r0, r5
   1d9b6:	f001 fe49 	bl	1f64c <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1d9ba:	fab7 f087 	clz	r0, r7
   1d9be:	0940      	lsrs	r0, r0, #5
   1d9c0:	b024      	add	sp, #144	; 0x90
   1d9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d9c6 <uECC_vli_add>:
{
   1d9c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1d9c8:	2400      	movs	r4, #0
{
   1d9ca:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   1d9cc:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1d9ce:	b265      	sxtb	r5, r4
   1d9d0:	42ab      	cmp	r3, r5
   1d9d2:	dc00      	bgt.n	1d9d6 <uECC_vli_add+0x10>
}
   1d9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1d9d6:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   1d9da:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1d9de:	4435      	add	r5, r6
   1d9e0:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1d9e2:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   1d9e4:	bf8c      	ite	hi
   1d9e6:	2601      	movhi	r6, #1
   1d9e8:	2600      	movls	r6, #0
		result[i] = sum;
   1d9ea:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1d9ee:	bf18      	it	ne
   1d9f0:	4630      	movne	r0, r6
		result[i] = sum;
   1d9f2:	3401      	adds	r4, #1
   1d9f4:	e7eb      	b.n	1d9ce <uECC_vli_add+0x8>

0001d9f6 <uECC_vli_rshift1>:
	vli += num_words;
   1d9f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1d9fa:	2300      	movs	r3, #0
	while (vli-- > end) {
   1d9fc:	4288      	cmp	r0, r1
   1d9fe:	d300      	bcc.n	1da02 <uECC_vli_rshift1+0xc>
}
   1da00:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1da02:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1da06:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1da0a:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1da0c:	07d3      	lsls	r3, r2, #31
   1da0e:	e7f5      	b.n	1d9fc <uECC_vli_rshift1+0x6>

0001da10 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1da10:	6803      	ldr	r3, [r0, #0]
{
   1da12:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1da14:	f013 0601 	ands.w	r6, r3, #1
{
   1da18:	4605      	mov	r5, r0
   1da1a:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1da1c:	d005      	beq.n	1da2a <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1da1e:	4613      	mov	r3, r2
   1da20:	460a      	mov	r2, r1
   1da22:	4601      	mov	r1, r0
   1da24:	f7ff ffcf 	bl	1d9c6 <uECC_vli_add>
   1da28:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1da2a:	4621      	mov	r1, r4
   1da2c:	4628      	mov	r0, r5
   1da2e:	f7ff ffe2 	bl	1d9f6 <uECC_vli_rshift1>
	if (carry) {
   1da32:	b146      	cbz	r6, 1da46 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1da34:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1da38:	3a01      	subs	r2, #1
   1da3a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1da3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1da42:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1da46:	bd70      	pop	{r4, r5, r6, pc}

0001da48 <uECC_vli_mult>:
{
   1da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1da4c:	2500      	movs	r5, #0
{
   1da4e:	b087      	sub	sp, #28
   1da50:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1da54:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1da56:	462a      	mov	r2, r5
   1da58:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   1da5c:	4543      	cmp	r3, r8
   1da5e:	dc16      	bgt.n	1da8e <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1da60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1da64:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1da68:	9502      	str	r5, [sp, #8]
   1da6a:	f04f 0a00 	mov.w	sl, #0
   1da6e:	fa5f f58a 	uxtb.w	r5, sl
   1da72:	eb05 0c03 	add.w	ip, r5, r3
   1da76:	9e02      	ldr	r6, [sp, #8]
   1da78:	fa4f fc8c 	sxtb.w	ip, ip
   1da7c:	45b4      	cmp	ip, r6
   1da7e:	db2d      	blt.n	1dadc <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1da80:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1da84:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1da88:	b007      	add	sp, #28
   1da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da8e:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1da90:	f04f 0c00 	mov.w	ip, #0
   1da94:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1da98:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1da9a:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1da9e:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1daa0:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1daa4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1daa8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1daac:	fba7 ab06 	umull	sl, fp, r7, r6
   1dab0:	eb1a 0601 	adds.w	r6, sl, r1
   1dab4:	f10c 0c01 	add.w	ip, ip, #1
   1dab8:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1dabc:	fa4f fa8c 	sxtb.w	sl, ip
   1dac0:	bf2c      	ite	cs
   1dac2:	2201      	movcs	r2, #1
   1dac4:	2200      	movcc	r2, #0
   1dac6:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1dac8:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1daca:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1dacc:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1dace:	dde4      	ble.n	1da9a <uECC_vli_mult+0x52>
		result[k] = r0;
   1dad0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1dad4:	463a      	mov	r2, r7
   1dad6:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1dad8:	4674      	mov	r4, lr
   1dada:	e7bd      	b.n	1da58 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1dadc:	3501      	adds	r5, #1
   1dade:	b26d      	sxtb	r5, r5
   1dae0:	9e01      	ldr	r6, [sp, #4]
   1dae2:	9900      	ldr	r1, [sp, #0]
   1dae4:	ebac 0e05 	sub.w	lr, ip, r5
   1dae8:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   1daec:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   1daf0:	4626      	mov	r6, r4
   1daf2:	2400      	movs	r4, #0
   1daf4:	429d      	cmp	r5, r3
   1daf6:	db05      	blt.n	1db04 <uECC_vli_mult+0xbc>
		result[k] = r0;
   1daf8:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   1dafc:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1db00:	4632      	mov	r2, r6
   1db02:	e7b4      	b.n	1da6e <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1db04:	e9cd 2604 	strd	r2, r6, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1db08:	f85e 7904 	ldr.w	r7, [lr], #-4
   1db0c:	f85b 8b04 	ldr.w	r8, [fp], #4
	r01 += p;
   1db10:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1db14:	fba8 8907 	umull	r8, r9, r8, r7
   1db18:	eb18 0601 	adds.w	r6, r8, r1
   1db1c:	eb59 0702 	adcs.w	r7, r9, r2
   1db20:	bf2c      	ite	cs
   1db22:	2201      	movcs	r2, #1
   1db24:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1db26:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1db28:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1db2a:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   1db2c:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   1db2e:	463e      	mov	r6, r7
   1db30:	e7e0      	b.n	1daf4 <uECC_vli_mult+0xac>

0001db32 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1db32:	2300      	movs	r3, #0
{
   1db34:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1db36:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1db38:	b25a      	sxtb	r2, r3
   1db3a:	4291      	cmp	r1, r2
   1db3c:	dc00      	bgt.n	1db40 <uECC_vli_clear+0xe>
}
   1db3e:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1db40:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   1db44:	3301      	adds	r3, #1
   1db46:	e7f7      	b.n	1db38 <uECC_vli_clear+0x6>

0001db48 <uECC_vli_isZero>:
{
   1db48:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1db4a:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1db4c:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1db4e:	b25c      	sxtb	r4, r3
   1db50:	42a1      	cmp	r1, r4
   1db52:	dc03      	bgt.n	1db5c <uECC_vli_isZero+0x14>
}
   1db54:	fab2 f082 	clz	r0, r2
   1db58:	0940      	lsrs	r0, r0, #5
   1db5a:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1db5c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1db60:	3301      	adds	r3, #1
   1db62:	4322      	orrs	r2, r4
   1db64:	e7f3      	b.n	1db4e <uECC_vli_isZero+0x6>

0001db66 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1db66:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1db68:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1db6a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1db6e:	f001 011f 	and.w	r1, r1, #31
   1db72:	fa03 f101 	lsl.w	r1, r3, r1
}
   1db76:	4008      	ands	r0, r1
   1db78:	4770      	bx	lr

0001db7a <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1db7a:	3901      	subs	r1, #1
   1db7c:	b249      	sxtb	r1, r1
   1db7e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   1db82:	2900      	cmp	r1, #0
   1db84:	da04      	bge.n	1db90 <uECC_vli_numBits+0x16>
	return (i + 1);
   1db86:	3101      	adds	r1, #1
   1db88:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   1db8a:	b941      	cbnz	r1, 1db9e <uECC_vli_numBits+0x24>
		return 0;
   1db8c:	4608      	mov	r0, r1
}
   1db8e:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1db90:	f853 2904 	ldr.w	r2, [r3], #-4
   1db94:	2a00      	cmp	r2, #0
   1db96:	d1f6      	bne.n	1db86 <uECC_vli_numBits+0xc>
   1db98:	3901      	subs	r1, #1
   1db9a:	b249      	sxtb	r1, r1
   1db9c:	e7f1      	b.n	1db82 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   1db9e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   1dba2:	3b01      	subs	r3, #1
   1dba4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1dba8:	2000      	movs	r0, #0
   1dbaa:	b923      	cbnz	r3, 1dbb6 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1dbac:	3901      	subs	r1, #1
   1dbae:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   1dbb2:	b208      	sxth	r0, r1
   1dbb4:	4770      	bx	lr
		digit >>= 1;
   1dbb6:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   1dbb8:	3001      	adds	r0, #1
   1dbba:	e7f6      	b.n	1dbaa <uECC_vli_numBits+0x30>

0001dbbc <uECC_vli_set>:
{
   1dbbc:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1dbbe:	2300      	movs	r3, #0
   1dbc0:	b25c      	sxtb	r4, r3
   1dbc2:	42a2      	cmp	r2, r4
   1dbc4:	dc00      	bgt.n	1dbc8 <uECC_vli_set+0xc>
}
   1dbc6:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1dbc8:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1dbcc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   1dbd0:	3301      	adds	r3, #1
   1dbd2:	e7f5      	b.n	1dbc0 <uECC_vli_set+0x4>

0001dbd4 <uECC_vli_cmp_unsafe>:
{
   1dbd4:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1dbd6:	3a01      	subs	r2, #1
   1dbd8:	b252      	sxtb	r2, r2
   1dbda:	0093      	lsls	r3, r2, #2
   1dbdc:	2a00      	cmp	r2, #0
   1dbde:	da01      	bge.n	1dbe4 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1dbe0:	2000      	movs	r0, #0
}
   1dbe2:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1dbe4:	58c5      	ldr	r5, [r0, r3]
   1dbe6:	58cc      	ldr	r4, [r1, r3]
   1dbe8:	42a5      	cmp	r5, r4
   1dbea:	d805      	bhi.n	1dbf8 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1dbec:	f1a3 0304 	sub.w	r3, r3, #4
   1dbf0:	d304      	bcc.n	1dbfc <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1dbf2:	3a01      	subs	r2, #1
   1dbf4:	b252      	sxtb	r2, r2
   1dbf6:	e7f1      	b.n	1dbdc <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1dbf8:	2001      	movs	r0, #1
   1dbfa:	e7f2      	b.n	1dbe2 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1dbfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc00:	e7ef      	b.n	1dbe2 <uECC_vli_cmp_unsafe+0xe>

0001dc02 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1dc02:	3a01      	subs	r2, #1
   1dc04:	b252      	sxtb	r2, r2
{
   1dc06:	b570      	push	{r4, r5, r6, lr}
   1dc08:	0093      	lsls	r3, r2, #2
	uECC_word_t diff = 0;
   1dc0a:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1dc0c:	2a00      	cmp	r2, #0
   1dc0e:	da03      	bge.n	1dc18 <uECC_vli_equal+0x16>
}
   1dc10:	1c20      	adds	r0, r4, #0
   1dc12:	bf18      	it	ne
   1dc14:	2001      	movne	r0, #1
   1dc16:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1dc18:	58c5      	ldr	r5, [r0, r3]
   1dc1a:	58ce      	ldr	r6, [r1, r3]
	for (i = num_words - 1; i >= 0; --i) {
   1dc1c:	3a01      	subs	r2, #1
		diff |= (left[i] ^ right[i]);
   1dc1e:	4075      	eors	r5, r6
   1dc20:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1dc22:	b252      	sxtb	r2, r2
   1dc24:	3b04      	subs	r3, #4
   1dc26:	e7f1      	b.n	1dc0c <uECC_vli_equal+0xa>

0001dc28 <uECC_vli_sub>:
{
   1dc28:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1dc2a:	2400      	movs	r4, #0
{
   1dc2c:	4607      	mov	r7, r0
   1dc2e:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1dc30:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1dc32:	b265      	sxtb	r5, r4
   1dc34:	45ac      	cmp	ip, r5
   1dc36:	dc00      	bgt.n	1dc3a <uECC_vli_sub+0x12>
}
   1dc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1dc3a:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   1dc3e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1dc42:	1a35      	subs	r5, r6, r0
   1dc44:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1dc46:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   1dc48:	bf34      	ite	cc
   1dc4a:	2601      	movcc	r6, #1
   1dc4c:	2600      	movcs	r6, #0
		result[i] = diff;
   1dc4e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1dc52:	bf18      	it	ne
   1dc54:	4630      	movne	r0, r6
		result[i] = diff;
   1dc56:	3401      	adds	r4, #1
   1dc58:	e7eb      	b.n	1dc32 <uECC_vli_sub+0xa>

0001dc5a <uECC_vli_modAdd>:
{
   1dc5a:	b570      	push	{r4, r5, r6, lr}
   1dc5c:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   1dc60:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1dc62:	4623      	mov	r3, r4
{
   1dc64:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1dc66:	f7ff feae 	bl	1d9c6 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1dc6a:	b930      	cbnz	r0, 1dc7a <uECC_vli_modAdd+0x20>
   1dc6c:	4622      	mov	r2, r4
   1dc6e:	4629      	mov	r1, r5
   1dc70:	4630      	mov	r0, r6
   1dc72:	f7ff ffaf 	bl	1dbd4 <uECC_vli_cmp_unsafe>
   1dc76:	2801      	cmp	r0, #1
   1dc78:	d007      	beq.n	1dc8a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1dc7a:	4623      	mov	r3, r4
   1dc7c:	4632      	mov	r2, r6
   1dc7e:	4629      	mov	r1, r5
   1dc80:	4628      	mov	r0, r5
}
   1dc82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1dc86:	f7ff bfcf 	b.w	1dc28 <uECC_vli_sub>
}
   1dc8a:	bd70      	pop	{r4, r5, r6, pc}

0001dc8c <uECC_vli_modSub>:
{
   1dc8c:	b570      	push	{r4, r5, r6, lr}
   1dc8e:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   1dc92:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1dc94:	4623      	mov	r3, r4
{
   1dc96:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1dc98:	f7ff ffc6 	bl	1dc28 <uECC_vli_sub>
	if (l_borrow) {
   1dc9c:	b138      	cbz	r0, 1dcae <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1dc9e:	4623      	mov	r3, r4
   1dca0:	4632      	mov	r2, r6
   1dca2:	4629      	mov	r1, r5
   1dca4:	4628      	mov	r0, r5
}
   1dca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1dcaa:	f7ff be8c 	b.w	1d9c6 <uECC_vli_add>
}
   1dcae:	bd70      	pop	{r4, r5, r6, pc}

0001dcb0 <uECC_vli_mmod>:
{
   1dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcb4:	b0a5      	sub	sp, #148	; 0x94
   1dcb6:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1dcb8:	ab14      	add	r3, sp, #80	; 0x50
   1dcba:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1dcbe:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   1dcc0:	4629      	mov	r1, r5
   1dcc2:	4610      	mov	r0, r2
{
   1dcc4:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   1dcc6:	f7ff ff58 	bl	1db7a <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1dcca:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   1dcce:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1dcd0:	2c00      	cmp	r4, #0
   1dcd2:	4626      	mov	r6, r4
   1dcd4:	bfb8      	it	lt
   1dcd6:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1dcda:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1dcdc:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1dce0:	f003 031f 	and.w	r3, r3, #31
   1dce4:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1dce8:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1dcea:	bf58      	it	pl
   1dcec:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   1dcf0:	4631      	mov	r1, r6
   1dcf2:	f7ff ff1e 	bl	1db32 <uECC_vli_clear>
	if (bit_shift > 0) {
   1dcf6:	f1b8 0f00 	cmp.w	r8, #0
   1dcfa:	b230      	sxth	r0, r6
   1dcfc:	dd2d      	ble.n	1dd5a <uECC_vli_mmod+0xaa>
   1dcfe:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1dd00:	2200      	movs	r2, #0
   1dd02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1dd06:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1dd0a:	4613      	mov	r3, r2
   1dd0c:	429d      	cmp	r5, r3
   1dd0e:	d819      	bhi.n	1dd44 <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   1dd10:	b22f      	sxth	r7, r5
   1dd12:	007b      	lsls	r3, r7, #1
   1dd14:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1dd16:	ab04      	add	r3, sp, #16
   1dd18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1dd1c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   1dd20:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1dd22:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1dd24:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1dd28:	2c00      	cmp	r4, #0
   1dd2a:	da54      	bge.n	1ddd6 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   1dd2c:	ab24      	add	r3, sp, #144	; 0x90
   1dd2e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1dd32:	462a      	mov	r2, r5
   1dd34:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1dd38:	4648      	mov	r0, r9
   1dd3a:	f7ff ff3f 	bl	1dbbc <uECC_vli_set>
}
   1dd3e:	b025      	add	sp, #148	; 0x94
   1dd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1dd44:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   1dd48:	fa06 f108 	lsl.w	r1, r6, r8
   1dd4c:	430a      	orrs	r2, r1
   1dd4e:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1dd52:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1dd54:	fa26 f20c 	lsr.w	r2, r6, ip
   1dd58:	e7d8      	b.n	1dd0c <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1dd5a:	ab04      	add	r3, sp, #16
   1dd5c:	462a      	mov	r2, r5
   1dd5e:	4639      	mov	r1, r7
   1dd60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1dd64:	f7ff ff2a 	bl	1dbbc <uECC_vli_set>
   1dd68:	e7d2      	b.n	1dd10 <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1dd6a:	fa0f fe82 	sxth.w	lr, r2
   1dd6e:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1dd72:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1dd76:	ab24      	add	r3, sp, #144	; 0x90
   1dd78:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1dd7c:	3001      	adds	r0, #1
   1dd7e:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1dd82:	440b      	add	r3, r1
   1dd84:	ebbb 0303 	subs.w	r3, fp, r3
   1dd88:	bf34      	ite	cc
   1dd8a:	2201      	movcc	r2, #1
   1dd8c:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1dd8e:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1dd90:	bf18      	it	ne
   1dd92:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1dd94:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1dd98:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1dd9c:	9b01      	ldr	r3, [sp, #4]
   1dd9e:	b242      	sxtb	r2, r0
   1dda0:	429a      	cmp	r2, r3
   1dda2:	dbe2      	blt.n	1dd6a <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   1dda4:	1a73      	subs	r3, r6, r1
   1dda6:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1dda8:	4629      	mov	r1, r5
   1ddaa:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1ddac:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1ddae:	f7ff fe22 	bl	1d9f6 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ddb2:	ab24      	add	r3, sp, #144	; 0x90
   1ddb4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ddb8:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ddba:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1ddbe:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ddc2:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ddc4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1ddc8:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ddca:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   1ddce:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ddd0:	f7ff fe11 	bl	1d9f6 <uECC_vli_rshift1>
   1ddd4:	e7a8      	b.n	1dd28 <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ddd6:	ab24      	add	r3, sp, #144	; 0x90
   1ddd8:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1ddda:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1ddde:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1dde0:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1dde4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1dde8:	e7d8      	b.n	1dd9c <uECC_vli_mmod+0xec>

0001ddea <uECC_vli_modMult_fast>:
{
   1ddea:	b530      	push	{r4, r5, lr}
   1ddec:	461c      	mov	r4, r3
   1ddee:	b091      	sub	sp, #68	; 0x44
   1ddf0:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1ddf2:	f993 3000 	ldrsb.w	r3, [r3]
   1ddf6:	4668      	mov	r0, sp
   1ddf8:	f7ff fe26 	bl	1da48 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1ddfc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1de00:	4669      	mov	r1, sp
   1de02:	4628      	mov	r0, r5
   1de04:	4798      	blx	r3
}
   1de06:	b011      	add	sp, #68	; 0x44
   1de08:	bd30      	pop	{r4, r5, pc}

0001de0a <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   1de0a:	4613      	mov	r3, r2
   1de0c:	460a      	mov	r2, r1
   1de0e:	f7ff bfec 	b.w	1ddea <uECC_vli_modMult_fast>

0001de12 <double_jacobian_default>:
{
   1de12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1de16:	f993 6000 	ldrsb.w	r6, [r3]
{
   1de1a:	b092      	sub	sp, #72	; 0x48
   1de1c:	4604      	mov	r4, r0
   1de1e:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1de20:	4610      	mov	r0, r2
   1de22:	4631      	mov	r1, r6
{
   1de24:	4615      	mov	r5, r2
   1de26:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1de28:	f7ff fe8e 	bl	1db48 <uECC_vli_isZero>
   1de2c:	2800      	cmp	r0, #0
   1de2e:	f040 8091 	bne.w	1df54 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1de32:	4642      	mov	r2, r8
   1de34:	4649      	mov	r1, r9
   1de36:	a802      	add	r0, sp, #8
   1de38:	f7ff ffe7 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1de3c:	4643      	mov	r3, r8
   1de3e:	aa02      	add	r2, sp, #8
   1de40:	4621      	mov	r1, r4
   1de42:	a80a      	add	r0, sp, #40	; 0x28
   1de44:	f7ff ffd1 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1de48:	a902      	add	r1, sp, #8
   1de4a:	4608      	mov	r0, r1
   1de4c:	4642      	mov	r2, r8
   1de4e:	f7ff ffdc 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1de52:	4643      	mov	r3, r8
   1de54:	462a      	mov	r2, r5
   1de56:	4649      	mov	r1, r9
   1de58:	4648      	mov	r0, r9
   1de5a:	f7ff ffc6 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1de5e:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1de62:	4642      	mov	r2, r8
   1de64:	4629      	mov	r1, r5
   1de66:	4628      	mov	r0, r5
   1de68:	f7ff ffcf 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1de6c:	463b      	mov	r3, r7
   1de6e:	462a      	mov	r2, r5
   1de70:	4621      	mov	r1, r4
   1de72:	4620      	mov	r0, r4
   1de74:	9600      	str	r6, [sp, #0]
   1de76:	f7ff fef0 	bl	1dc5a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1de7a:	463b      	mov	r3, r7
   1de7c:	462a      	mov	r2, r5
   1de7e:	4629      	mov	r1, r5
   1de80:	4628      	mov	r0, r5
   1de82:	9600      	str	r6, [sp, #0]
   1de84:	f7ff fee9 	bl	1dc5a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1de88:	463b      	mov	r3, r7
   1de8a:	462a      	mov	r2, r5
   1de8c:	4621      	mov	r1, r4
   1de8e:	4628      	mov	r0, r5
   1de90:	9600      	str	r6, [sp, #0]
   1de92:	f7ff fefb 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1de96:	4643      	mov	r3, r8
   1de98:	462a      	mov	r2, r5
   1de9a:	4621      	mov	r1, r4
   1de9c:	4620      	mov	r0, r4
   1de9e:	f7ff ffa4 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1dea2:	463b      	mov	r3, r7
   1dea4:	4622      	mov	r2, r4
   1dea6:	4621      	mov	r1, r4
   1dea8:	4628      	mov	r0, r5
   1deaa:	9600      	str	r6, [sp, #0]
   1deac:	f7ff fed5 	bl	1dc5a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1deb0:	463b      	mov	r3, r7
   1deb2:	9600      	str	r6, [sp, #0]
   1deb4:	462a      	mov	r2, r5
   1deb6:	4621      	mov	r1, r4
   1deb8:	4620      	mov	r0, r4
   1deba:	f7ff fece 	bl	1dc5a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1debe:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1dec0:	07db      	lsls	r3, r3, #31
   1dec2:	d54a      	bpl.n	1df5a <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1dec4:	4633      	mov	r3, r6
   1dec6:	463a      	mov	r2, r7
   1dec8:	4621      	mov	r1, r4
   1deca:	4620      	mov	r0, r4
   1decc:	f7ff fd7b 	bl	1d9c6 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1ded0:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1ded2:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1ded4:	4620      	mov	r0, r4
   1ded6:	f7ff fd8e 	bl	1d9f6 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1deda:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1dede:	3b01      	subs	r3, #1
   1dee0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1dee4:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   1dee8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1deec:	4642      	mov	r2, r8
   1deee:	4621      	mov	r1, r4
   1def0:	4628      	mov	r0, r5
   1def2:	f7ff ff8a 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1def6:	463b      	mov	r3, r7
   1def8:	aa0a      	add	r2, sp, #40	; 0x28
   1defa:	4629      	mov	r1, r5
   1defc:	4628      	mov	r0, r5
   1defe:	9600      	str	r6, [sp, #0]
   1df00:	f7ff fec4 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1df04:	463b      	mov	r3, r7
   1df06:	aa0a      	add	r2, sp, #40	; 0x28
   1df08:	4629      	mov	r1, r5
   1df0a:	4628      	mov	r0, r5
   1df0c:	9600      	str	r6, [sp, #0]
   1df0e:	f7ff febd 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1df12:	a90a      	add	r1, sp, #40	; 0x28
   1df14:	4608      	mov	r0, r1
   1df16:	463b      	mov	r3, r7
   1df18:	462a      	mov	r2, r5
   1df1a:	9600      	str	r6, [sp, #0]
   1df1c:	f7ff feb6 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1df20:	4643      	mov	r3, r8
   1df22:	aa0a      	add	r2, sp, #40	; 0x28
   1df24:	4621      	mov	r1, r4
   1df26:	4620      	mov	r0, r4
   1df28:	f7ff ff5f 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1df2c:	aa02      	add	r2, sp, #8
   1df2e:	463b      	mov	r3, r7
   1df30:	4610      	mov	r0, r2
   1df32:	4621      	mov	r1, r4
   1df34:	9600      	str	r6, [sp, #0]
   1df36:	f7ff fea9 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1df3a:	4632      	mov	r2, r6
   1df3c:	4629      	mov	r1, r5
   1df3e:	4620      	mov	r0, r4
   1df40:	f7ff fe3c 	bl	1dbbc <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1df44:	4649      	mov	r1, r9
   1df46:	4628      	mov	r0, r5
   1df48:	f7ff fe38 	bl	1dbbc <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1df4c:	a902      	add	r1, sp, #8
   1df4e:	4648      	mov	r0, r9
   1df50:	f7ff fe34 	bl	1dbbc <uECC_vli_set>
}
   1df54:	b012      	add	sp, #72	; 0x48
   1df56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1df5a:	4631      	mov	r1, r6
   1df5c:	4620      	mov	r0, r4
   1df5e:	f7ff fd4a 	bl	1d9f6 <uECC_vli_rshift1>
   1df62:	e7c3      	b.n	1deec <double_jacobian_default+0xda>

0001df64 <x_side_default>:
{
   1df64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df68:	4615      	mov	r5, r2
   1df6a:	b08a      	sub	sp, #40	; 0x28
   1df6c:	4604      	mov	r4, r0
   1df6e:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1df70:	221c      	movs	r2, #28
   1df72:	2100      	movs	r1, #0
   1df74:	a803      	add	r0, sp, #12
   1df76:	f001 fb69 	bl	1f64c <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1df7a:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   1df7c:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1df80:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1df82:	462a      	mov	r2, r5
   1df84:	4641      	mov	r1, r8
   1df86:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1df88:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1df8a:	f7ff ff3e 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1df8e:	4633      	mov	r3, r6
   1df90:	aa02      	add	r2, sp, #8
   1df92:	4621      	mov	r1, r4
   1df94:	4620      	mov	r0, r4
   1df96:	9700      	str	r7, [sp, #0]
   1df98:	f7ff fe78 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1df9c:	462b      	mov	r3, r5
   1df9e:	4642      	mov	r2, r8
   1dfa0:	4621      	mov	r1, r4
   1dfa2:	4620      	mov	r0, r4
   1dfa4:	f7ff ff21 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1dfa8:	9700      	str	r7, [sp, #0]
   1dfaa:	4633      	mov	r3, r6
   1dfac:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1dfb0:	4621      	mov	r1, r4
   1dfb2:	4620      	mov	r0, r4
   1dfb4:	f7ff fe51 	bl	1dc5a <uECC_vli_modAdd>
}
   1dfb8:	b00a      	add	sp, #40	; 0x28
   1dfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dfbe <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1dfbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dfc2:	b09b      	sub	sp, #108	; 0x6c
   1dfc4:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1dfc6:	9c22      	ldr	r4, [sp, #136]	; 0x88
   1dfc8:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1dfcc:	9500      	str	r5, [sp, #0]
{
   1dfce:	4698      	mov	r8, r3
   1dfd0:	4607      	mov	r7, r0
   1dfd2:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1dfd4:	4623      	mov	r3, r4
   1dfd6:	4602      	mov	r2, r0
   1dfd8:	4631      	mov	r1, r6
   1dfda:	a802      	add	r0, sp, #8
   1dfdc:	f7ff fe56 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1dfe0:	a902      	add	r1, sp, #8
   1dfe2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1dfe4:	4608      	mov	r0, r1
   1dfe6:	f7ff ff10 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1dfea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1dfec:	aa02      	add	r2, sp, #8
   1dfee:	4639      	mov	r1, r7
   1dff0:	4638      	mov	r0, r7
   1dff2:	f7ff fefa 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1dff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1dff8:	aa02      	add	r2, sp, #8
   1dffa:	4631      	mov	r1, r6
   1dffc:	4630      	mov	r0, r6
   1dffe:	f7ff fef4 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1e002:	4623      	mov	r3, r4
   1e004:	464a      	mov	r2, r9
   1e006:	4641      	mov	r1, r8
   1e008:	a802      	add	r0, sp, #8
   1e00a:	9500      	str	r5, [sp, #0]
   1e00c:	f7ff fe25 	bl	1dc5a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1e010:	4623      	mov	r3, r4
   1e012:	464a      	mov	r2, r9
   1e014:	4641      	mov	r1, r8
   1e016:	4640      	mov	r0, r8
   1e018:	9500      	str	r5, [sp, #0]
   1e01a:	f7ff fe37 	bl	1dc8c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1e01e:	4623      	mov	r3, r4
   1e020:	463a      	mov	r2, r7
   1e022:	4631      	mov	r1, r6
   1e024:	a80a      	add	r0, sp, #40	; 0x28
   1e026:	9500      	str	r5, [sp, #0]
   1e028:	f7ff fe30 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1e02c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1e02e:	aa0a      	add	r2, sp, #40	; 0x28
   1e030:	4649      	mov	r1, r9
   1e032:	4648      	mov	r0, r9
   1e034:	f7ff fed9 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1e038:	4623      	mov	r3, r4
   1e03a:	4632      	mov	r2, r6
   1e03c:	4639      	mov	r1, r7
   1e03e:	a80a      	add	r0, sp, #40	; 0x28
   1e040:	9500      	str	r5, [sp, #0]
   1e042:	f7ff fe0a 	bl	1dc5a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1e046:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1e048:	4641      	mov	r1, r8
   1e04a:	4630      	mov	r0, r6
   1e04c:	f7ff fedd 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1e050:	4623      	mov	r3, r4
   1e052:	aa0a      	add	r2, sp, #40	; 0x28
   1e054:	4631      	mov	r1, r6
   1e056:	4630      	mov	r0, r6
   1e058:	9500      	str	r5, [sp, #0]
   1e05a:	f7ff fe17 	bl	1dc8c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1e05e:	4623      	mov	r3, r4
   1e060:	4632      	mov	r2, r6
   1e062:	4639      	mov	r1, r7
   1e064:	a812      	add	r0, sp, #72	; 0x48
   1e066:	9500      	str	r5, [sp, #0]
   1e068:	f7ff fe10 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1e06c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1e06e:	aa12      	add	r2, sp, #72	; 0x48
   1e070:	4641      	mov	r1, r8
   1e072:	4640      	mov	r0, r8
   1e074:	f7ff feb9 	bl	1ddea <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1e078:	4623      	mov	r3, r4
   1e07a:	464a      	mov	r2, r9
   1e07c:	4641      	mov	r1, r8
   1e07e:	4640      	mov	r0, r8
   1e080:	9500      	str	r5, [sp, #0]
   1e082:	f7ff fe03 	bl	1dc8c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1e086:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1e088:	a902      	add	r1, sp, #8
   1e08a:	a812      	add	r0, sp, #72	; 0x48
   1e08c:	f7ff febd 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1e090:	a912      	add	r1, sp, #72	; 0x48
   1e092:	4623      	mov	r3, r4
   1e094:	aa0a      	add	r2, sp, #40	; 0x28
   1e096:	4608      	mov	r0, r1
   1e098:	9500      	str	r5, [sp, #0]
   1e09a:	f7ff fdf7 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1e09e:	4623      	mov	r3, r4
   1e0a0:	463a      	mov	r2, r7
   1e0a2:	a912      	add	r1, sp, #72	; 0x48
   1e0a4:	a80a      	add	r0, sp, #40	; 0x28
   1e0a6:	9500      	str	r5, [sp, #0]
   1e0a8:	f7ff fdf0 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1e0ac:	a90a      	add	r1, sp, #40	; 0x28
   1e0ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1e0b0:	aa02      	add	r2, sp, #8
   1e0b2:	4608      	mov	r0, r1
   1e0b4:	f7ff fe99 	bl	1ddea <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1e0b8:	4623      	mov	r3, r4
   1e0ba:	464a      	mov	r2, r9
   1e0bc:	a90a      	add	r1, sp, #40	; 0x28
   1e0be:	4648      	mov	r0, r9
   1e0c0:	9500      	str	r5, [sp, #0]
   1e0c2:	f7ff fde3 	bl	1dc8c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1e0c6:	462a      	mov	r2, r5
   1e0c8:	a912      	add	r1, sp, #72	; 0x48
   1e0ca:	4638      	mov	r0, r7
   1e0cc:	f7ff fd76 	bl	1dbbc <uECC_vli_set>
}
   1e0d0:	b01b      	add	sp, #108	; 0x6c
   1e0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e0d6 <uECC_vli_modInv>:
{
   1e0d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0d8:	460f      	mov	r7, r1
   1e0da:	b0a1      	sub	sp, #132	; 0x84
   1e0dc:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1e0de:	4619      	mov	r1, r3
   1e0e0:	4638      	mov	r0, r7
{
   1e0e2:	4615      	mov	r5, r2
   1e0e4:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1e0e6:	f7ff fd2f 	bl	1db48 <uECC_vli_isZero>
   1e0ea:	b120      	cbz	r0, 1e0f6 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1e0ec:	4630      	mov	r0, r6
   1e0ee:	f7ff fd20 	bl	1db32 <uECC_vli_clear>
}
   1e0f2:	b021      	add	sp, #132	; 0x84
   1e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1e0f6:	4622      	mov	r2, r4
   1e0f8:	4639      	mov	r1, r7
   1e0fa:	4668      	mov	r0, sp
   1e0fc:	f7ff fd5e 	bl	1dbbc <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1e100:	4629      	mov	r1, r5
   1e102:	a808      	add	r0, sp, #32
   1e104:	f7ff fd5a 	bl	1dbbc <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1e108:	a810      	add	r0, sp, #64	; 0x40
   1e10a:	4621      	mov	r1, r4
   1e10c:	f7ff fd11 	bl	1db32 <uECC_vli_clear>
	u[0] = 1;
   1e110:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1e112:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1e114:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1e116:	f7ff fd0c 	bl	1db32 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1e11a:	4622      	mov	r2, r4
   1e11c:	a908      	add	r1, sp, #32
   1e11e:	4668      	mov	r0, sp
   1e120:	f7ff fd58 	bl	1dbd4 <uECC_vli_cmp_unsafe>
   1e124:	b928      	cbnz	r0, 1e132 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1e126:	4622      	mov	r2, r4
   1e128:	a910      	add	r1, sp, #64	; 0x40
   1e12a:	4630      	mov	r0, r6
   1e12c:	f7ff fd46 	bl	1dbbc <uECC_vli_set>
   1e130:	e7df      	b.n	1e0f2 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1e132:	9b00      	ldr	r3, [sp, #0]
   1e134:	07da      	lsls	r2, r3, #31
   1e136:	d409      	bmi.n	1e14c <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1e138:	4621      	mov	r1, r4
   1e13a:	4668      	mov	r0, sp
   1e13c:	f7ff fc5b 	bl	1d9f6 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1e140:	4622      	mov	r2, r4
   1e142:	4629      	mov	r1, r5
   1e144:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1e146:	f7ff fc63 	bl	1da10 <vli_modInv_update>
   1e14a:	e7e6      	b.n	1e11a <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1e14c:	9b08      	ldr	r3, [sp, #32]
   1e14e:	07db      	lsls	r3, r3, #31
   1e150:	d407      	bmi.n	1e162 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1e152:	4621      	mov	r1, r4
   1e154:	a808      	add	r0, sp, #32
   1e156:	f7ff fc4e 	bl	1d9f6 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1e15a:	4622      	mov	r2, r4
   1e15c:	4629      	mov	r1, r5
   1e15e:	a818      	add	r0, sp, #96	; 0x60
   1e160:	e7f1      	b.n	1e146 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1e162:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1e164:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1e166:	dd1c      	ble.n	1e1a2 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1e168:	aa08      	add	r2, sp, #32
   1e16a:	4669      	mov	r1, sp
   1e16c:	4668      	mov	r0, sp
   1e16e:	f7ff fd5b 	bl	1dc28 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1e172:	4621      	mov	r1, r4
   1e174:	4668      	mov	r0, sp
   1e176:	f7ff fc3e 	bl	1d9f6 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1e17a:	4622      	mov	r2, r4
   1e17c:	a918      	add	r1, sp, #96	; 0x60
   1e17e:	a810      	add	r0, sp, #64	; 0x40
   1e180:	f7ff fd28 	bl	1dbd4 <uECC_vli_cmp_unsafe>
   1e184:	2800      	cmp	r0, #0
   1e186:	da05      	bge.n	1e194 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1e188:	a910      	add	r1, sp, #64	; 0x40
   1e18a:	4623      	mov	r3, r4
   1e18c:	462a      	mov	r2, r5
   1e18e:	4608      	mov	r0, r1
   1e190:	f7ff fc19 	bl	1d9c6 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1e194:	a910      	add	r1, sp, #64	; 0x40
   1e196:	4623      	mov	r3, r4
   1e198:	aa18      	add	r2, sp, #96	; 0x60
   1e19a:	4608      	mov	r0, r1
   1e19c:	f7ff fd44 	bl	1dc28 <uECC_vli_sub>
   1e1a0:	e7ce      	b.n	1e140 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1e1a2:	a908      	add	r1, sp, #32
   1e1a4:	466a      	mov	r2, sp
   1e1a6:	4608      	mov	r0, r1
   1e1a8:	f7ff fd3e 	bl	1dc28 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1e1ac:	4621      	mov	r1, r4
   1e1ae:	a808      	add	r0, sp, #32
   1e1b0:	f7ff fc21 	bl	1d9f6 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1e1b4:	4622      	mov	r2, r4
   1e1b6:	a910      	add	r1, sp, #64	; 0x40
   1e1b8:	a818      	add	r0, sp, #96	; 0x60
   1e1ba:	f7ff fd0b 	bl	1dbd4 <uECC_vli_cmp_unsafe>
   1e1be:	2800      	cmp	r0, #0
   1e1c0:	da05      	bge.n	1e1ce <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1e1c2:	a918      	add	r1, sp, #96	; 0x60
   1e1c4:	4623      	mov	r3, r4
   1e1c6:	462a      	mov	r2, r5
   1e1c8:	4608      	mov	r0, r1
   1e1ca:	f7ff fbfc 	bl	1d9c6 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1e1ce:	a918      	add	r1, sp, #96	; 0x60
   1e1d0:	4623      	mov	r3, r4
   1e1d2:	aa10      	add	r2, sp, #64	; 0x40
   1e1d4:	4608      	mov	r0, r1
   1e1d6:	f7ff fd27 	bl	1dc28 <uECC_vli_sub>
   1e1da:	e7be      	b.n	1e15a <uECC_vli_modInv+0x84>

0001e1dc <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1e1dc:	7809      	ldrb	r1, [r1, #0]
   1e1de:	0049      	lsls	r1, r1, #1
   1e1e0:	b249      	sxtb	r1, r1
   1e1e2:	f7ff bcb1 	b.w	1db48 <uECC_vli_isZero>

0001e1e6 <apply_z>:
{
   1e1e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e1e8:	4615      	mov	r5, r2
   1e1ea:	b089      	sub	sp, #36	; 0x24
   1e1ec:	461c      	mov	r4, r3
   1e1ee:	4607      	mov	r7, r0
   1e1f0:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1e1f2:	461a      	mov	r2, r3
   1e1f4:	4629      	mov	r1, r5
   1e1f6:	4668      	mov	r0, sp
   1e1f8:	f7ff fe07 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1e1fc:	4623      	mov	r3, r4
   1e1fe:	466a      	mov	r2, sp
   1e200:	4639      	mov	r1, r7
   1e202:	4638      	mov	r0, r7
   1e204:	f7ff fdf1 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1e208:	4623      	mov	r3, r4
   1e20a:	462a      	mov	r2, r5
   1e20c:	4669      	mov	r1, sp
   1e20e:	4668      	mov	r0, sp
   1e210:	f7ff fdeb 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1e214:	4623      	mov	r3, r4
   1e216:	466a      	mov	r2, sp
   1e218:	4631      	mov	r1, r6
   1e21a:	4630      	mov	r0, r6
   1e21c:	f7ff fde5 	bl	1ddea <uECC_vli_modMult_fast>
}
   1e220:	b009      	add	sp, #36	; 0x24
   1e222:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e224 <XYcZ_add>:
{
   1e224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e228:	b08b      	sub	sp, #44	; 0x2c
   1e22a:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   1e22c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1e22e:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1e232:	9600      	str	r6, [sp, #0]
{
   1e234:	461f      	mov	r7, r3
   1e236:	4680      	mov	r8, r0
   1e238:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1e23a:	462b      	mov	r3, r5
   1e23c:	4602      	mov	r2, r0
   1e23e:	4621      	mov	r1, r4
   1e240:	a802      	add	r0, sp, #8
   1e242:	f7ff fd23 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1e246:	a902      	add	r1, sp, #8
   1e248:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1e24a:	4608      	mov	r0, r1
   1e24c:	f7ff fddd 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1e250:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e252:	aa02      	add	r2, sp, #8
   1e254:	4641      	mov	r1, r8
   1e256:	4640      	mov	r0, r8
   1e258:	f7ff fdc7 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1e25c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e25e:	aa02      	add	r2, sp, #8
   1e260:	4621      	mov	r1, r4
   1e262:	4620      	mov	r0, r4
   1e264:	f7ff fdc1 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1e268:	462b      	mov	r3, r5
   1e26a:	464a      	mov	r2, r9
   1e26c:	4639      	mov	r1, r7
   1e26e:	4638      	mov	r0, r7
   1e270:	9600      	str	r6, [sp, #0]
   1e272:	f7ff fd0b 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1e276:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1e278:	4639      	mov	r1, r7
   1e27a:	a802      	add	r0, sp, #8
   1e27c:	f7ff fdc5 	bl	1de0a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1e280:	a902      	add	r1, sp, #8
   1e282:	462b      	mov	r3, r5
   1e284:	4642      	mov	r2, r8
   1e286:	4608      	mov	r0, r1
   1e288:	9600      	str	r6, [sp, #0]
   1e28a:	f7ff fcff 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1e28e:	a902      	add	r1, sp, #8
   1e290:	462b      	mov	r3, r5
   1e292:	4622      	mov	r2, r4
   1e294:	4608      	mov	r0, r1
   1e296:	9600      	str	r6, [sp, #0]
   1e298:	f7ff fcf8 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1e29c:	462b      	mov	r3, r5
   1e29e:	4642      	mov	r2, r8
   1e2a0:	4621      	mov	r1, r4
   1e2a2:	4620      	mov	r0, r4
   1e2a4:	9600      	str	r6, [sp, #0]
   1e2a6:	f7ff fcf1 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1e2aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e2ac:	4622      	mov	r2, r4
   1e2ae:	4649      	mov	r1, r9
   1e2b0:	4648      	mov	r0, r9
   1e2b2:	f7ff fd9a 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1e2b6:	462b      	mov	r3, r5
   1e2b8:	aa02      	add	r2, sp, #8
   1e2ba:	4641      	mov	r1, r8
   1e2bc:	4620      	mov	r0, r4
   1e2be:	9600      	str	r6, [sp, #0]
   1e2c0:	f7ff fce4 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1e2c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e2c6:	4622      	mov	r2, r4
   1e2c8:	4639      	mov	r1, r7
   1e2ca:	4638      	mov	r0, r7
   1e2cc:	f7ff fd8d 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1e2d0:	462b      	mov	r3, r5
   1e2d2:	464a      	mov	r2, r9
   1e2d4:	4639      	mov	r1, r7
   1e2d6:	4638      	mov	r0, r7
   1e2d8:	9600      	str	r6, [sp, #0]
   1e2da:	f7ff fcd7 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1e2de:	4632      	mov	r2, r6
   1e2e0:	a902      	add	r1, sp, #8
   1e2e2:	4620      	mov	r0, r4
   1e2e4:	f7ff fc6a 	bl	1dbbc <uECC_vli_set>
}
   1e2e8:	b00b      	add	sp, #44	; 0x2c
   1e2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e2ee <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1e2ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2f2:	b0b1      	sub	sp, #196	; 0xc4
   1e2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1e2f8:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   1e2fa:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1e2fc:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1e300:	a818      	add	r0, sp, #96	; 0x60
   1e302:	463a      	mov	r2, r7
{
   1e304:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1e306:	f7ff fc59 	bl	1dbbc <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1e30a:	00bb      	lsls	r3, r7, #2
   1e30c:	9307      	str	r3, [sp, #28]
   1e30e:	9b05      	ldr	r3, [sp, #20]
   1e310:	00ba      	lsls	r2, r7, #2
   1e312:	4413      	add	r3, r2
   1e314:	4619      	mov	r1, r3
   1e316:	463a      	mov	r2, r7
   1e318:	a828      	add	r0, sp, #160	; 0xa0
   1e31a:	9302      	str	r3, [sp, #8]
   1e31c:	f7ff fc4e 	bl	1dbbc <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1e320:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1e324:	2e00      	cmp	r6, #0
   1e326:	f000 8087 	beq.w	1e438 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1e32a:	462a      	mov	r2, r5
   1e32c:	4631      	mov	r1, r6
   1e32e:	a808      	add	r0, sp, #32
   1e330:	f7ff fc44 	bl	1dbbc <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1e334:	ae10      	add	r6, sp, #64	; 0x40
   1e336:	462a      	mov	r2, r5
   1e338:	a918      	add	r1, sp, #96	; 0x60
   1e33a:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   1e33c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1e340:	f7ff fc3c 	bl	1dbbc <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1e344:	a928      	add	r1, sp, #160	; 0xa0
   1e346:	4648      	mov	r0, r9
   1e348:	f7ff fc38 	bl	1dbbc <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1e34c:	4623      	mov	r3, r4
   1e34e:	aa08      	add	r2, sp, #32
   1e350:	a928      	add	r1, sp, #160	; 0xa0
   1e352:	a818      	add	r0, sp, #96	; 0x60
   1e354:	f7ff ff47 	bl	1e1e6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1e358:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1e35c:	4623      	mov	r3, r4
   1e35e:	aa08      	add	r2, sp, #32
   1e360:	a928      	add	r1, sp, #160	; 0xa0
   1e362:	a818      	add	r0, sp, #96	; 0x60
   1e364:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1e366:	4623      	mov	r3, r4
   1e368:	aa08      	add	r2, sp, #32
   1e36a:	4649      	mov	r1, r9
   1e36c:	4630      	mov	r0, r6
   1e36e:	f7ff ff3a 	bl	1e1e6 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1e372:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1e376:	3d02      	subs	r5, #2
   1e378:	b22d      	sxth	r5, r5
   1e37a:	2d00      	cmp	r5, #0
   1e37c:	dc63      	bgt.n	1e446 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1e37e:	9b06      	ldr	r3, [sp, #24]
   1e380:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1e382:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1e384:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1e388:	ab10      	add	r3, sp, #64	; 0x40
   1e38a:	0176      	lsls	r6, r6, #5
   1e38c:	43ed      	mvns	r5, r5
   1e38e:	eb03 0806 	add.w	r8, r3, r6
   1e392:	f005 0501 	and.w	r5, r5, #1
   1e396:	ab20      	add	r3, sp, #128	; 0x80
   1e398:	441e      	add	r6, r3
   1e39a:	016d      	lsls	r5, r5, #5
   1e39c:	ab10      	add	r3, sp, #64	; 0x40
   1e39e:	eb03 0905 	add.w	r9, r3, r5
   1e3a2:	ab20      	add	r3, sp, #128	; 0x80
   1e3a4:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1e3a6:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1e3aa:	462b      	mov	r3, r5
   1e3ac:	464a      	mov	r2, r9
   1e3ae:	4631      	mov	r1, r6
   1e3b0:	4640      	mov	r0, r8
   1e3b2:	f7ff fe04 	bl	1dfbe <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1e3b6:	4653      	mov	r3, sl
   1e3b8:	aa10      	add	r2, sp, #64	; 0x40
   1e3ba:	a918      	add	r1, sp, #96	; 0x60
   1e3bc:	a808      	add	r0, sp, #32
   1e3be:	9700      	str	r7, [sp, #0]
   1e3c0:	f7ff fc64 	bl	1dc8c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1e3c4:	a908      	add	r1, sp, #32
   1e3c6:	4623      	mov	r3, r4
   1e3c8:	4632      	mov	r2, r6
   1e3ca:	4608      	mov	r0, r1
   1e3cc:	f7ff fd0d 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1e3d0:	a908      	add	r1, sp, #32
   1e3d2:	4623      	mov	r3, r4
   1e3d4:	9a05      	ldr	r2, [sp, #20]
   1e3d6:	4608      	mov	r0, r1
   1e3d8:	f7ff fd07 	bl	1ddea <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1e3dc:	a908      	add	r1, sp, #32
   1e3de:	463b      	mov	r3, r7
   1e3e0:	4652      	mov	r2, sl
   1e3e2:	4608      	mov	r0, r1
   1e3e4:	f7ff fe77 	bl	1e0d6 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1e3e8:	a908      	add	r1, sp, #32
   1e3ea:	4623      	mov	r3, r4
   1e3ec:	9a02      	ldr	r2, [sp, #8]
   1e3ee:	4608      	mov	r0, r1
   1e3f0:	f7ff fcfb 	bl	1ddea <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1e3f4:	a908      	add	r1, sp, #32
   1e3f6:	4623      	mov	r3, r4
   1e3f8:	4642      	mov	r2, r8
   1e3fa:	4608      	mov	r0, r1
   1e3fc:	f7ff fcf5 	bl	1ddea <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1e400:	9400      	str	r4, [sp, #0]
   1e402:	4633      	mov	r3, r6
   1e404:	4642      	mov	r2, r8
   1e406:	4629      	mov	r1, r5
   1e408:	4648      	mov	r0, r9
   1e40a:	f7ff ff0b 	bl	1e224 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1e40e:	4623      	mov	r3, r4
   1e410:	aa08      	add	r2, sp, #32
   1e412:	a920      	add	r1, sp, #128	; 0x80
   1e414:	a810      	add	r0, sp, #64	; 0x40
   1e416:	f7ff fee6 	bl	1e1e6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1e41a:	463a      	mov	r2, r7
   1e41c:	a910      	add	r1, sp, #64	; 0x40
   1e41e:	9804      	ldr	r0, [sp, #16]
   1e420:	f7ff fbcc 	bl	1dbbc <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1e424:	9b04      	ldr	r3, [sp, #16]
   1e426:	9c07      	ldr	r4, [sp, #28]
   1e428:	4423      	add	r3, r4
   1e42a:	a920      	add	r1, sp, #128	; 0x80
   1e42c:	4618      	mov	r0, r3
   1e42e:	f7ff fbc5 	bl	1dbbc <uECC_vli_set>
}
   1e432:	b031      	add	sp, #196	; 0xc4
   1e434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1e438:	4629      	mov	r1, r5
   1e43a:	a808      	add	r0, sp, #32
   1e43c:	f7ff fb79 	bl	1db32 <uECC_vli_clear>
		z[0] = 1;
   1e440:	2301      	movs	r3, #1
   1e442:	9308      	str	r3, [sp, #32]
   1e444:	e776      	b.n	1e334 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   1e446:	4629      	mov	r1, r5
   1e448:	9806      	ldr	r0, [sp, #24]
   1e44a:	f7ff fb8c 	bl	1db66 <uECC_vli_testBit>
   1e44e:	fab0 f080 	clz	r0, r0
   1e452:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1e454:	f1c0 0801 	rsb	r8, r0, #1
   1e458:	ea4f 1848 	mov.w	r8, r8, lsl #5
   1e45c:	0140      	lsls	r0, r0, #5
   1e45e:	eb06 0b08 	add.w	fp, r6, r8
   1e462:	eb06 0a00 	add.w	sl, r6, r0
   1e466:	44c8      	add	r8, r9
   1e468:	eb09 0300 	add.w	r3, r9, r0
   1e46c:	4652      	mov	r2, sl
   1e46e:	4641      	mov	r1, r8
   1e470:	4658      	mov	r0, fp
   1e472:	9400      	str	r4, [sp, #0]
   1e474:	9303      	str	r3, [sp, #12]
   1e476:	f7ff fda2 	bl	1dfbe <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1e47a:	9400      	str	r4, [sp, #0]
   1e47c:	4643      	mov	r3, r8
   1e47e:	465a      	mov	r2, fp
   1e480:	9903      	ldr	r1, [sp, #12]
   1e482:	4650      	mov	r0, sl
   1e484:	f7ff fece 	bl	1e224 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1e488:	3d01      	subs	r5, #1
   1e48a:	e775      	b.n	1e378 <EccPoint_mult+0x8a>

0001e48c <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1e48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1e490:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   1e494:	f114 051f 	adds.w	r5, r4, #31
   1e498:	bf48      	it	mi
   1e49a:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   1e49e:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1e4a0:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1e4a4:	f345 1547 	sbfx	r5, r5, #5, #8
{
   1e4a8:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1e4aa:	4601      	mov	r1, r0
   1e4ac:	462b      	mov	r3, r5
   1e4ae:	4632      	mov	r2, r6
   1e4b0:	4638      	mov	r0, r7
   1e4b2:	f7ff fa88 	bl	1d9c6 <uECC_vli_add>
   1e4b6:	b990      	cbnz	r0, 1e4de <regularize_k+0x52>
   1e4b8:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   1e4bc:	da11      	bge.n	1e4e2 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1e4be:	4621      	mov	r1, r4
   1e4c0:	4638      	mov	r0, r7
   1e4c2:	f7ff fb50 	bl	1db66 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1e4c6:	1c04      	adds	r4, r0, #0
   1e4c8:	bf18      	it	ne
   1e4ca:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1e4cc:	462b      	mov	r3, r5
   1e4ce:	4632      	mov	r2, r6
   1e4d0:	4639      	mov	r1, r7
   1e4d2:	4640      	mov	r0, r8
   1e4d4:	f7ff fa77 	bl	1d9c6 <uECC_vli_add>

	return carry;
}
   1e4d8:	4620      	mov	r0, r4
   1e4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1e4de:	2401      	movs	r4, #1
   1e4e0:	e7f4      	b.n	1e4cc <regularize_k+0x40>
   1e4e2:	4604      	mov	r4, r0
   1e4e4:	e7f2      	b.n	1e4cc <regularize_k+0x40>

0001e4e6 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1e4e6:	b530      	push	{r4, r5, lr}
   1e4e8:	4614      	mov	r4, r2
   1e4ea:	b095      	sub	sp, #84	; 0x54
   1e4ec:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1e4ee:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1e4f0:	4623      	mov	r3, r4
{
   1e4f2:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1e4f4:	a904      	add	r1, sp, #16
   1e4f6:	9102      	str	r1, [sp, #8]
   1e4f8:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1e4fa:	f7ff ffc7 	bl	1e48c <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1e4fe:	fab0 f080 	clz	r0, r0
   1e502:	ab14      	add	r3, sp, #80	; 0x50
   1e504:	0940      	lsrs	r0, r0, #5
   1e506:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1e50a:	8863      	ldrh	r3, [r4, #2]
   1e50c:	9401      	str	r4, [sp, #4]
   1e50e:	3301      	adds	r3, #1
   1e510:	b21b      	sxth	r3, r3
   1e512:	9300      	str	r3, [sp, #0]
   1e514:	f850 2c48 	ldr.w	r2, [r0, #-72]
   1e518:	2300      	movs	r3, #0
   1e51a:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1e51e:	4628      	mov	r0, r5
   1e520:	f7ff fee5 	bl	1e2ee <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1e524:	4621      	mov	r1, r4
   1e526:	4628      	mov	r0, r5
   1e528:	f7ff fe58 	bl	1e1dc <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1e52c:	fab0 f080 	clz	r0, r0
   1e530:	0940      	lsrs	r0, r0, #5
   1e532:	b015      	add	sp, #84	; 0x54
   1e534:	bd30      	pop	{r4, r5, pc}

0001e536 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1e536:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1e538:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1e53a:	1e4f      	subs	r7, r1, #1
   1e53c:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1e53e:	428c      	cmp	r4, r1
   1e540:	f105 0501 	add.w	r5, r5, #1
   1e544:	db00      	blt.n	1e548 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1e546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1e548:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1e54a:	f023 0603 	bic.w	r6, r3, #3
   1e54e:	f003 0303 	and.w	r3, r3, #3
   1e552:	5996      	ldr	r6, [r2, r6]
   1e554:	00db      	lsls	r3, r3, #3
   1e556:	fa26 f303 	lsr.w	r3, r6, r3
   1e55a:	5503      	strb	r3, [r0, r4]
   1e55c:	e7ee      	b.n	1e53c <uECC_vli_nativeToBytes+0x6>

0001e55e <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1e55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e560:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1e562:	1cd1      	adds	r1, r2, #3
   1e564:	bf48      	it	mi
   1e566:	1d91      	addmi	r1, r2, #6
{
   1e568:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1e56a:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1e56e:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   1e570:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1e572:	f7ff fade 	bl	1db32 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1e576:	2100      	movs	r1, #0
   1e578:	b24a      	sxtb	r2, r1
   1e57a:	42a2      	cmp	r2, r4
   1e57c:	f101 0101 	add.w	r1, r1, #1
   1e580:	db00      	blt.n	1e584 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1e582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1e584:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1e586:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1e58a:	5cb2      	ldrb	r2, [r6, r2]
   1e58c:	f003 0303 	and.w	r3, r3, #3
   1e590:	00db      	lsls	r3, r3, #3
   1e592:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1e596:	582a      	ldr	r2, [r5, r0]
   1e598:	431a      	orrs	r2, r3
   1e59a:	502a      	str	r2, [r5, r0]
   1e59c:	e7ec      	b.n	1e578 <uECC_vli_bytesToNative+0x1a>

0001e59e <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1e59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5a2:	b090      	sub	sp, #64	; 0x40
   1e5a4:	4606      	mov	r6, r0
   1e5a6:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1e5a8:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1e5ac:	f7ff fe16 	bl	1e1dc <EccPoint_isZero>
   1e5b0:	bb40      	cbnz	r0, 1e604 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1e5b2:	f104 0804 	add.w	r8, r4, #4
   1e5b6:	462a      	mov	r2, r5
   1e5b8:	4631      	mov	r1, r6
   1e5ba:	4640      	mov	r0, r8
   1e5bc:	f7ff fb0a 	bl	1dbd4 <uECC_vli_cmp_unsafe>
   1e5c0:	2801      	cmp	r0, #1
   1e5c2:	d122      	bne.n	1e60a <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1e5c4:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   1e5c8:	462a      	mov	r2, r5
   1e5ca:	4639      	mov	r1, r7
   1e5cc:	4640      	mov	r0, r8
   1e5ce:	f7ff fb01 	bl	1dbd4 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1e5d2:	2801      	cmp	r0, #1
   1e5d4:	d119      	bne.n	1e60a <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1e5d6:	4622      	mov	r2, r4
   1e5d8:	4668      	mov	r0, sp
   1e5da:	f7ff fc16 	bl	1de0a <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1e5de:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1e5e2:	4622      	mov	r2, r4
   1e5e4:	4631      	mov	r1, r6
   1e5e6:	a808      	add	r0, sp, #32
   1e5e8:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1e5ea:	462a      	mov	r2, r5
   1e5ec:	a908      	add	r1, sp, #32
   1e5ee:	4668      	mov	r0, sp
   1e5f0:	f7ff fb07 	bl	1dc02 <uECC_vli_equal>
   1e5f4:	2800      	cmp	r0, #0
		return -3;
   1e5f6:	bf0c      	ite	eq
   1e5f8:	2000      	moveq	r0, #0
   1e5fa:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1e5fe:	b010      	add	sp, #64	; 0x40
   1e600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   1e604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e608:	e7f9      	b.n	1e5fe <uECC_valid_point+0x60>
		return -2;
   1e60a:	f06f 0001 	mvn.w	r0, #1
   1e60e:	e7f6      	b.n	1e5fe <uECC_valid_point+0x60>

0001e610 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1e610:	b570      	push	{r4, r5, r6, lr}
   1e612:	460c      	mov	r4, r1
   1e614:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1e616:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1e618:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1e61c:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1e61e:	4601      	mov	r1, r0
   1e620:	4668      	mov	r0, sp
   1e622:	f7ff ff9c 	bl	1e55e <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1e626:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1e62a:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   1e62e:	18b1      	adds	r1, r6, r2
   1e630:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1e634:	f7ff ff93 	bl	1e55e <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1e638:	2210      	movs	r2, #16
   1e63a:	4629      	mov	r1, r5
   1e63c:	4668      	mov	r0, sp
   1e63e:	f7ff fac9 	bl	1dbd4 <uECC_vli_cmp_unsafe>
   1e642:	b128      	cbz	r0, 1e650 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1e644:	4621      	mov	r1, r4
   1e646:	4668      	mov	r0, sp
   1e648:	f7ff ffa9 	bl	1e59e <uECC_valid_point>
}
   1e64c:	b010      	add	sp, #64	; 0x40
   1e64e:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1e650:	f06f 0003 	mvn.w	r0, #3
   1e654:	e7fa      	b.n	1e64c <uECC_valid_public_key+0x3c>

0001e656 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1e656:	78cb      	ldrb	r3, [r1, #3]
   1e658:	7802      	ldrb	r2, [r0, #0]
   1e65a:	4053      	eors	r3, r2
   1e65c:	7003      	strb	r3, [r0, #0]
   1e65e:	884b      	ldrh	r3, [r1, #2]
   1e660:	7842      	ldrb	r2, [r0, #1]
   1e662:	4053      	eors	r3, r2
   1e664:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1e666:	680a      	ldr	r2, [r1, #0]
   1e668:	7883      	ldrb	r3, [r0, #2]
   1e66a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e66e:	7083      	strb	r3, [r0, #2]
   1e670:	680a      	ldr	r2, [r1, #0]
   1e672:	78c3      	ldrb	r3, [r0, #3]
   1e674:	4053      	eors	r3, r2
   1e676:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1e678:	79cb      	ldrb	r3, [r1, #7]
   1e67a:	7902      	ldrb	r2, [r0, #4]
   1e67c:	4053      	eors	r3, r2
   1e67e:	7103      	strb	r3, [r0, #4]
   1e680:	88cb      	ldrh	r3, [r1, #6]
   1e682:	7942      	ldrb	r2, [r0, #5]
   1e684:	4053      	eors	r3, r2
   1e686:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1e688:	684a      	ldr	r2, [r1, #4]
   1e68a:	7983      	ldrb	r3, [r0, #6]
   1e68c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e690:	7183      	strb	r3, [r0, #6]
   1e692:	684a      	ldr	r2, [r1, #4]
   1e694:	79c3      	ldrb	r3, [r0, #7]
   1e696:	4053      	eors	r3, r2
   1e698:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1e69a:	7acb      	ldrb	r3, [r1, #11]
   1e69c:	7a02      	ldrb	r2, [r0, #8]
   1e69e:	4053      	eors	r3, r2
   1e6a0:	7203      	strb	r3, [r0, #8]
   1e6a2:	7a42      	ldrb	r2, [r0, #9]
   1e6a4:	894b      	ldrh	r3, [r1, #10]
   1e6a6:	4053      	eors	r3, r2
   1e6a8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1e6aa:	688a      	ldr	r2, [r1, #8]
   1e6ac:	7a83      	ldrb	r3, [r0, #10]
   1e6ae:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e6b2:	7283      	strb	r3, [r0, #10]
   1e6b4:	688a      	ldr	r2, [r1, #8]
   1e6b6:	7ac3      	ldrb	r3, [r0, #11]
   1e6b8:	4053      	eors	r3, r2
   1e6ba:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1e6bc:	7bcb      	ldrb	r3, [r1, #15]
   1e6be:	7b02      	ldrb	r2, [r0, #12]
   1e6c0:	4053      	eors	r3, r2
   1e6c2:	7303      	strb	r3, [r0, #12]
   1e6c4:	89cb      	ldrh	r3, [r1, #14]
   1e6c6:	7b42      	ldrb	r2, [r0, #13]
   1e6c8:	4053      	eors	r3, r2
   1e6ca:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1e6cc:	68ca      	ldr	r2, [r1, #12]
   1e6ce:	7b83      	ldrb	r3, [r0, #14]
   1e6d0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e6d4:	7383      	strb	r3, [r0, #14]
   1e6d6:	68ca      	ldr	r2, [r1, #12]
   1e6d8:	7bc3      	ldrb	r3, [r0, #15]
   1e6da:	4053      	eors	r3, r2
   1e6dc:	73c3      	strb	r3, [r0, #15]
}
   1e6de:	4770      	bx	lr

0001e6e0 <shift_rows>:
{
   1e6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1e6e2:	7802      	ldrb	r2, [r0, #0]
   1e6e4:	f88d 2000 	strb.w	r2, [sp]
   1e6e8:	7942      	ldrb	r2, [r0, #5]
   1e6ea:	f88d 2001 	strb.w	r2, [sp, #1]
   1e6ee:	7a82      	ldrb	r2, [r0, #10]
   1e6f0:	f88d 2002 	strb.w	r2, [sp, #2]
   1e6f4:	7bc2      	ldrb	r2, [r0, #15]
   1e6f6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1e6fa:	7902      	ldrb	r2, [r0, #4]
   1e6fc:	f88d 2004 	strb.w	r2, [sp, #4]
   1e700:	7a42      	ldrb	r2, [r0, #9]
   1e702:	f88d 2005 	strb.w	r2, [sp, #5]
   1e706:	7b82      	ldrb	r2, [r0, #14]
   1e708:	f88d 2006 	strb.w	r2, [sp, #6]
   1e70c:	78c2      	ldrb	r2, [r0, #3]
   1e70e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1e712:	7a02      	ldrb	r2, [r0, #8]
   1e714:	f88d 2008 	strb.w	r2, [sp, #8]
   1e718:	7b42      	ldrb	r2, [r0, #13]
   1e71a:	f88d 2009 	strb.w	r2, [sp, #9]
   1e71e:	7882      	ldrb	r2, [r0, #2]
   1e720:	f88d 200a 	strb.w	r2, [sp, #10]
   1e724:	79c2      	ldrb	r2, [r0, #7]
   1e726:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1e72a:	7b02      	ldrb	r2, [r0, #12]
   1e72c:	f88d 200c 	strb.w	r2, [sp, #12]
   1e730:	7842      	ldrb	r2, [r0, #1]
   1e732:	f88d 200d 	strb.w	r2, [sp, #13]
   1e736:	7ac3      	ldrb	r3, [r0, #11]
   1e738:	7982      	ldrb	r2, [r0, #6]
   1e73a:	f88d 200e 	strb.w	r2, [sp, #14]
   1e73e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1e742:	2310      	movs	r3, #16
   1e744:	466a      	mov	r2, sp
   1e746:	4619      	mov	r1, r3
   1e748:	f7ff f879 	bl	1d83e <_copy>
}
   1e74c:	b005      	add	sp, #20
   1e74e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e752 <mult_row_column>:
{
   1e752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e754:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1e756:	7808      	ldrb	r0, [r1, #0]
{
   1e758:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1e75a:	f7ff f87f 	bl	1d85c <_double_byte>
   1e75e:	4605      	mov	r5, r0
   1e760:	7860      	ldrb	r0, [r4, #1]
   1e762:	f7ff f87b 	bl	1d85c <_double_byte>
   1e766:	78a2      	ldrb	r2, [r4, #2]
   1e768:	7863      	ldrb	r3, [r4, #1]
   1e76a:	4053      	eors	r3, r2
   1e76c:	78e2      	ldrb	r2, [r4, #3]
   1e76e:	4053      	eors	r3, r2
   1e770:	405d      	eors	r5, r3
   1e772:	4045      	eors	r5, r0
   1e774:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1e776:	7860      	ldrb	r0, [r4, #1]
   1e778:	7827      	ldrb	r7, [r4, #0]
   1e77a:	f7ff f86f 	bl	1d85c <_double_byte>
   1e77e:	4605      	mov	r5, r0
   1e780:	78a0      	ldrb	r0, [r4, #2]
   1e782:	f7ff f86b 	bl	1d85c <_double_byte>
   1e786:	78a3      	ldrb	r3, [r4, #2]
   1e788:	405f      	eors	r7, r3
   1e78a:	78e3      	ldrb	r3, [r4, #3]
   1e78c:	405f      	eors	r7, r3
   1e78e:	407d      	eors	r5, r7
   1e790:	4045      	eors	r5, r0
   1e792:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1e794:	78a0      	ldrb	r0, [r4, #2]
   1e796:	7865      	ldrb	r5, [r4, #1]
   1e798:	7827      	ldrb	r7, [r4, #0]
   1e79a:	f7ff f85f 	bl	1d85c <_double_byte>
   1e79e:	406f      	eors	r7, r5
   1e7a0:	4605      	mov	r5, r0
   1e7a2:	78e0      	ldrb	r0, [r4, #3]
   1e7a4:	f7ff f85a 	bl	1d85c <_double_byte>
   1e7a8:	78e3      	ldrb	r3, [r4, #3]
   1e7aa:	405f      	eors	r7, r3
   1e7ac:	407d      	eors	r5, r7
   1e7ae:	4045      	eors	r5, r0
   1e7b0:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1e7b2:	7820      	ldrb	r0, [r4, #0]
   1e7b4:	f7ff f852 	bl	1d85c <_double_byte>
   1e7b8:	7863      	ldrb	r3, [r4, #1]
   1e7ba:	7825      	ldrb	r5, [r4, #0]
   1e7bc:	405d      	eors	r5, r3
   1e7be:	78a3      	ldrb	r3, [r4, #2]
   1e7c0:	405d      	eors	r5, r3
   1e7c2:	4045      	eors	r5, r0
   1e7c4:	78e0      	ldrb	r0, [r4, #3]
   1e7c6:	f7ff f849 	bl	1d85c <_double_byte>
   1e7ca:	b2ed      	uxtb	r5, r5
   1e7cc:	4068      	eors	r0, r5
   1e7ce:	70f0      	strb	r0, [r6, #3]
}
   1e7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e7d2 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1e7d2:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1e7d4:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1e7d6:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1e7d8:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1e7dc:	2b00      	cmp	r3, #0
   1e7de:	bfb4      	ite	lt
   1e7e0:	2387      	movlt	r3, #135	; 0x87
   1e7e2:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1e7e4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1e7e8:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1e7ec:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1e7ee:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1e7f2:	d002      	beq.n	1e7fa <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1e7f4:	7813      	ldrb	r3, [r2, #0]
   1e7f6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1e7f8:	e7f4      	b.n	1e7e4 <gf_double+0x12>
	}
}
   1e7fa:	bd10      	pop	{r4, pc}

0001e7fc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1e7fc:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1e7fe:	b120      	cbz	r0, 1e80a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1e800:	2258      	movs	r2, #88	; 0x58
   1e802:	2100      	movs	r1, #0
   1e804:	f7ff f828 	bl	1d858 <_set>
   1e808:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1e80a:	bd08      	pop	{r3, pc}

0001e80c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1e80c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1e80e:	4604      	mov	r4, r0
   1e810:	b188      	cbz	r0, 1e836 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1e812:	2210      	movs	r2, #16
   1e814:	2100      	movs	r1, #0
   1e816:	f7ff f81f 	bl	1d858 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1e81a:	2210      	movs	r2, #16
   1e81c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e820:	2100      	movs	r1, #0
   1e822:	f7ff f819 	bl	1d858 <_set>
	s->leftover_offset = 0;
   1e826:	2300      	movs	r3, #0
   1e828:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1e82a:	2200      	movs	r2, #0
   1e82c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e830:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1e834:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1e836:	bd10      	pop	{r4, pc}

0001e838 <tc_cmac_setup>:
{
   1e838:	b570      	push	{r4, r5, r6, lr}
   1e83a:	460d      	mov	r5, r1
   1e83c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1e83e:	4604      	mov	r4, r0
   1e840:	b310      	cbz	r0, 1e888 <tc_cmac_setup+0x50>
   1e842:	b311      	cbz	r1, 1e88a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1e844:	2258      	movs	r2, #88	; 0x58
   1e846:	2100      	movs	r1, #0
   1e848:	f7ff f806 	bl	1d858 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1e84c:	4629      	mov	r1, r5
	s->sched = sched;
   1e84e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1e850:	4630      	mov	r0, r6
   1e852:	f7e4 fa95 	bl	2d80 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1e856:	2210      	movs	r2, #16
   1e858:	2100      	movs	r1, #0
   1e85a:	4620      	mov	r0, r4
   1e85c:	f7fe fffc 	bl	1d858 <_set>
	gf_double (s->K1, s->iv);
   1e860:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e864:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e866:	4621      	mov	r1, r4
   1e868:	4620      	mov	r0, r4
   1e86a:	f7e4 fadf 	bl	2e2c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1e86e:	4621      	mov	r1, r4
   1e870:	4628      	mov	r0, r5
   1e872:	f7ff ffae 	bl	1e7d2 <gf_double>
	gf_double (s->K2, s->K1);
   1e876:	4629      	mov	r1, r5
   1e878:	f104 0020 	add.w	r0, r4, #32
   1e87c:	f7ff ffa9 	bl	1e7d2 <gf_double>
	tc_cmac_init(s);
   1e880:	4620      	mov	r0, r4
   1e882:	f7ff ffc3 	bl	1e80c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1e886:	2001      	movs	r0, #1
}
   1e888:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1e88a:	4608      	mov	r0, r1
   1e88c:	e7fc      	b.n	1e888 <tc_cmac_setup+0x50>

0001e88e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1e88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e892:	460d      	mov	r5, r1
   1e894:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1e896:	4604      	mov	r4, r0
   1e898:	2800      	cmp	r0, #0
   1e89a:	d061      	beq.n	1e960 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1e89c:	b912      	cbnz	r2, 1e8a4 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1e89e:	2001      	movs	r0, #1
}
   1e8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1e8a4:	2900      	cmp	r1, #0
   1e8a6:	d05b      	beq.n	1e960 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1e8a8:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1e8ac:	ea50 0301 	orrs.w	r3, r0, r1
   1e8b0:	d056      	beq.n	1e960 <tc_cmac_update+0xd2>
	s->countdown--;
   1e8b2:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1e8b6:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1e8ba:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1e8be:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1e8c2:	f1b8 0f00 	cmp.w	r8, #0
   1e8c6:	d02a      	beq.n	1e91e <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1e8c8:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1e8cc:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1e8d0:	42be      	cmp	r6, r7
   1e8d2:	4420      	add	r0, r4
   1e8d4:	d208      	bcs.n	1e8e8 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1e8d6:	4633      	mov	r3, r6
   1e8d8:	4631      	mov	r1, r6
   1e8da:	462a      	mov	r2, r5
   1e8dc:	f7fe ffaf 	bl	1d83e <_copy>
			s->leftover_offset += data_length;
   1e8e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e8e2:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   1e8e4:	6466      	str	r6, [r4, #68]	; 0x44
   1e8e6:	e7da      	b.n	1e89e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1e8e8:	463b      	mov	r3, r7
   1e8ea:	462a      	mov	r2, r5
   1e8ec:	4639      	mov	r1, r7
   1e8ee:	f7fe ffa6 	bl	1d83e <_copy>
		data_length -= remaining_space;
   1e8f2:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1e8f4:	2300      	movs	r3, #0
   1e8f6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1e8f8:	4446      	add	r6, r8
		data += remaining_space;
   1e8fa:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e8fc:	1e63      	subs	r3, r4, #1
   1e8fe:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1e902:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e906:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e90a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1e90c:	ea82 0200 	eor.w	r2, r2, r0
   1e910:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e912:	d1f6      	bne.n	1e902 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e914:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e916:	4621      	mov	r1, r4
   1e918:	4620      	mov	r0, r4
   1e91a:	f7e4 fa87 	bl	2e2c <tc_aes_encrypt>
   1e91e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1e922:	2e10      	cmp	r6, #16
   1e924:	d809      	bhi.n	1e93a <tc_cmac_update+0xac>
	if (data_length > 0) {
   1e926:	2e00      	cmp	r6, #0
   1e928:	d0b9      	beq.n	1e89e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1e92a:	4633      	mov	r3, r6
   1e92c:	462a      	mov	r2, r5
   1e92e:	4631      	mov	r1, r6
   1e930:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e934:	f7fe ff83 	bl	1d83e <_copy>
   1e938:	e7d4      	b.n	1e8e4 <tc_cmac_update+0x56>
   1e93a:	1e63      	subs	r3, r4, #1
   1e93c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1e93e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e942:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e946:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1e948:	ea82 0200 	eor.w	r2, r2, r0
   1e94c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e94e:	d1f6      	bne.n	1e93e <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e950:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e952:	4621      	mov	r1, r4
   1e954:	4620      	mov	r0, r4
   1e956:	f7e4 fa69 	bl	2e2c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1e95a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1e95c:	3e10      	subs	r6, #16
   1e95e:	e7e0      	b.n	1e922 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1e960:	2000      	movs	r0, #0
   1e962:	e79d      	b.n	1e8a0 <tc_cmac_update+0x12>

0001e964 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1e964:	b570      	push	{r4, r5, r6, lr}
   1e966:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1e968:	4605      	mov	r5, r0
   1e96a:	b1e8      	cbz	r0, 1e9a8 <tc_cmac_final+0x44>
   1e96c:	b369      	cbz	r1, 1e9ca <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1e96e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1e970:	2a10      	cmp	r2, #16
   1e972:	d11a      	bne.n	1e9aa <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1e974:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e976:	1e63      	subs	r3, r4, #1
   1e978:	3901      	subs	r1, #1
   1e97a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1e97e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e982:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1e986:	4072      	eors	r2, r6
   1e988:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e98c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1e98e:	ea82 0206 	eor.w	r2, r2, r6
   1e992:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e994:	d1f3      	bne.n	1e97e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1e996:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e998:	4621      	mov	r1, r4
   1e99a:	4628      	mov	r0, r5
   1e99c:	f7e4 fa46 	bl	2e2c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1e9a0:	4620      	mov	r0, r4
   1e9a2:	f7ff ff2b 	bl	1e7fc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1e9a6:	2001      	movs	r0, #1
}
   1e9a8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1e9aa:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1e9ae:	2100      	movs	r1, #0
   1e9b0:	f1c2 0210 	rsb	r2, r2, #16
   1e9b4:	4420      	add	r0, r4
   1e9b6:	f7fe ff4f 	bl	1d858 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1e9ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e9bc:	4423      	add	r3, r4
   1e9be:	2280      	movs	r2, #128	; 0x80
   1e9c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1e9c4:	f104 0120 	add.w	r1, r4, #32
   1e9c8:	e7d5      	b.n	1e976 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1e9ca:	4608      	mov	r0, r1
   1e9cc:	e7ec      	b.n	1e9a8 <tc_cmac_final+0x44>

0001e9ce <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1e9ce:	2300      	movs	r3, #0
	list->head = NULL;
   1e9d0:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e9d4:	4770      	bx	lr

0001e9d6 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1e9d6:	6803      	ldr	r3, [r0, #0]
   1e9d8:	b923      	cbnz	r3, 1e9e4 <log_list_add_tail+0xe>
		list->head = msg;
   1e9da:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1e9dc:	2300      	movs	r3, #0
	list->tail = msg;
   1e9de:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1e9e0:	600b      	str	r3, [r1, #0]
}
   1e9e2:	4770      	bx	lr
		list->tail->next = msg;
   1e9e4:	6843      	ldr	r3, [r0, #4]
   1e9e6:	6019      	str	r1, [r3, #0]
   1e9e8:	e7f8      	b.n	1e9dc <log_list_add_tail+0x6>

0001e9ea <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1e9ea:	6800      	ldr	r0, [r0, #0]
   1e9ec:	4770      	bx	lr

0001e9ee <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1e9ee:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1e9f0:	b10b      	cbz	r3, 1e9f6 <log_list_head_get+0x8>
		list->head = list->head->next;
   1e9f2:	681a      	ldr	r2, [r3, #0]
   1e9f4:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1e9f6:	4618      	mov	r0, r3
   1e9f8:	4770      	bx	lr

0001e9fa <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1e9fa:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1e9fc:	f7e4 fd16 	bl	342c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1ea00:	b118      	cbz	r0, 1ea0a <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1ea02:	2301      	movs	r3, #1
   1ea04:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1ea06:	2300      	movs	r3, #0
   1ea08:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1ea0a:	bd08      	pop	{r3, pc}

0001ea0c <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1ea0c:	f7e5 becc 	b.w	47a8 <z_timer_cycle_get_32>

0001ea10 <dummy_timestamp>:
   1ea10:	2000      	movs	r0, #0
   1ea12:	4770      	bx	lr

0001ea14 <z_log_get_s_mask>:
	u32_t mask = 0;
   1ea14:	2300      	movs	r3, #0
{
   1ea16:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t arg = 0;
   1ea18:	461a      	mov	r2, r3
	bool arm = false;
   1ea1a:	461c      	mov	r4, r3
				mask |= BIT(arg);
   1ea1c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1ea1e:	f810 5b01 	ldrb.w	r5, [r0], #1
   1ea22:	b10d      	cbz	r5, 1ea28 <z_log_get_s_mask+0x14>
   1ea24:	428a      	cmp	r2, r1
   1ea26:	d301      	bcc.n	1ea2c <z_log_get_s_mask+0x18>
}
   1ea28:	4618      	mov	r0, r3
   1ea2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1ea2c:	2d25      	cmp	r5, #37	; 0x25
   1ea2e:	d102      	bne.n	1ea36 <z_log_get_s_mask+0x22>
			arm = !arm;
   1ea30:	f084 0401 	eor.w	r4, r4, #1
   1ea34:	e7f3      	b.n	1ea1e <z_log_get_s_mask+0xa>
		} else if (arm && isalpha((int)curr)) {
   1ea36:	2c00      	cmp	r4, #0
   1ea38:	d0f1      	beq.n	1ea1e <z_log_get_s_mask+0xa>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1ea3a:	f045 0620 	orr.w	r6, r5, #32
   1ea3e:	3e61      	subs	r6, #97	; 0x61
   1ea40:	2e19      	cmp	r6, #25
   1ea42:	d8ec      	bhi.n	1ea1e <z_log_get_s_mask+0xa>
			if (curr == 's') {
   1ea44:	2d73      	cmp	r5, #115	; 0x73
				mask |= BIT(arg);
   1ea46:	bf04      	itt	eq
   1ea48:	fa07 f402 	lsleq.w	r4, r7, r2
   1ea4c:	4323      	orreq	r3, r4
			arg++;
   1ea4e:	3201      	adds	r2, #1
			arm = false;
   1ea50:	2400      	movs	r4, #0
   1ea52:	e7e4      	b.n	1ea1e <z_log_get_s_mask+0xa>

0001ea54 <log_0>:
{
   1ea54:	b538      	push	{r3, r4, r5, lr}
   1ea56:	4605      	mov	r5, r0
   1ea58:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1ea5a:	f7ff ffce 	bl	1e9fa <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ea5e:	b128      	cbz	r0, 1ea6c <log_0+0x18>
		msg->str = str;
   1ea60:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1ea62:	4621      	mov	r1, r4
}
   1ea64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1ea68:	f7e4 bc02 	b.w	3270 <msg_finalize>
}
   1ea6c:	bd38      	pop	{r3, r4, r5, pc}

0001ea6e <log_1>:
{
   1ea6e:	b570      	push	{r4, r5, r6, lr}
   1ea70:	4604      	mov	r4, r0
   1ea72:	460e      	mov	r6, r1
   1ea74:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1ea76:	f7ff ffc0 	bl	1e9fa <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ea7a:	b158      	cbz	r0, 1ea94 <log_1+0x26>
		msg->str = str;
   1ea7c:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1ea7e:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1ea80:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1ea82:	2201      	movs	r2, #1
   1ea84:	f362 1407 	bfi	r4, r2, #4, #4
   1ea88:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1ea8a:	4629      	mov	r1, r5
}
   1ea8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1ea90:	f7e4 bbee 	b.w	3270 <msg_finalize>
}
   1ea94:	bd70      	pop	{r4, r5, r6, pc}

0001ea96 <log_2>:
{
   1ea96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea9a:	4605      	mov	r5, r0
   1ea9c:	4688      	mov	r8, r1
   1ea9e:	4617      	mov	r7, r2
   1eaa0:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1eaa2:	f7ff ffaa 	bl	1e9fa <z_log_msg_std_alloc>

	if (msg != NULL) {
   1eaa6:	b160      	cbz	r0, 1eac2 <log_2+0x2c>
		msg->str = str;
   1eaa8:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1eaaa:	7a45      	ldrb	r5, [r0, #9]
   1eaac:	2302      	movs	r3, #2
   1eaae:	f363 1507 	bfi	r5, r3, #4, #4
   1eab2:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1eab4:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg_finalize(msg, src_level);
   1eab8:	4631      	mov	r1, r6
}
   1eaba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1eabe:	f7e4 bbd7 	b.w	3270 <msg_finalize>
}
   1eac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eac6 <log_3>:
{
   1eac6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eaca:	4605      	mov	r5, r0
   1eacc:	4689      	mov	r9, r1
   1eace:	4690      	mov	r8, r2
   1ead0:	461f      	mov	r7, r3
   1ead2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1ead6:	f7ff ff90 	bl	1e9fa <z_log_msg_std_alloc>

	if (msg != NULL) {
   1eada:	b168      	cbz	r0, 1eaf8 <log_3+0x32>
		msg->str = str;
   1eadc:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1eade:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
   1eae0:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
   1eae2:	2303      	movs	r3, #3
   1eae4:	f363 1507 	bfi	r5, r3, #4, #4
   1eae8:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
   1eaea:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg_finalize(msg, src_level);
   1eaee:	4631      	mov	r1, r6
}
   1eaf0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1eaf4:	f7e4 bbbc 	b.w	3270 <msg_finalize>
}
   1eaf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001eafc <log_n>:
{
   1eafc:	b510      	push	{r4, lr}
   1eafe:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1eb00:	f000 f83c 	bl	1eb7c <log_msg_create_n>
		if (msg == NULL) {
   1eb04:	b120      	cbz	r0, 1eb10 <log_n+0x14>
		msg_finalize(msg, src_level);
   1eb06:	4621      	mov	r1, r4
}
   1eb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1eb0c:	f7e4 bbb0 	b.w	3270 <msg_finalize>
}
   1eb10:	bd10      	pop	{r4, pc}

0001eb12 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1eb12:	7a40      	ldrb	r0, [r0, #9]
}
   1eb14:	0900      	lsrs	r0, r0, #4
   1eb16:	4770      	bx	lr

0001eb18 <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, u32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1eb18:	7a43      	ldrb	r3, [r0, #9]
   1eb1a:	091b      	lsrs	r3, r3, #4
   1eb1c:	428b      	cmp	r3, r1
   1eb1e:	d916      	bls.n	1eb4e <log_msg_arg_get+0x36>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1eb20:	2b03      	cmp	r3, #3
   1eb22:	d803      	bhi.n	1eb2c <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1eb24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1eb28:	6948      	ldr	r0, [r1, #20]
   1eb2a:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1eb2c:	2901      	cmp	r1, #1
   1eb2e:	d803      	bhi.n	1eb38 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1eb30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1eb34:	6988      	ldr	r0, [r1, #24]
   1eb36:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1eb38:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1eb3a:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1eb3c:	2906      	cmp	r1, #6
   1eb3e:	d803      	bhi.n	1eb48 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1eb40:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1eb44:	6848      	ldr	r0, [r1, #4]
   1eb46:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1eb48:	3907      	subs	r1, #7
		cont = cont->next;
   1eb4a:	681b      	ldr	r3, [r3, #0]
   1eb4c:	e7f6      	b.n	1eb3c <log_msg_arg_get+0x24>
		return 0;
   1eb4e:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
   1eb50:	4770      	bx	lr

0001eb52 <log_msg_put>:
{
   1eb52:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1eb54:	1d02      	adds	r2, r0, #4
   1eb56:	f3bf 8f5b 	dmb	ish
   1eb5a:	e852 1f00 	ldrex	r1, [r2]
   1eb5e:	3901      	subs	r1, #1
   1eb60:	e842 1c00 	strex	ip, r1, [r2]
   1eb64:	f1bc 0f00 	cmp.w	ip, #0
   1eb68:	d1f7      	bne.n	1eb5a <log_msg_put+0x8>
   1eb6a:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1eb6e:	685b      	ldr	r3, [r3, #4]
   1eb70:	b90b      	cbnz	r3, 1eb76 <log_msg_put+0x24>
		msg_free(msg);
   1eb72:	f7e4 bc6d 	b.w	3450 <msg_free>
}
   1eb76:	4770      	bx	lr

0001eb78 <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
   1eb78:	6900      	ldr	r0, [r0, #16]
   1eb7a:	4770      	bx	lr

0001eb7c <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, u32_t nargs)
{
   1eb7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb80:	4682      	mov	sl, r0
   1eb82:	4688      	mov	r8, r1
   1eb84:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1eb86:	f7e4 fc51 	bl	342c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1eb8a:	4604      	mov	r4, r0
   1eb8c:	b330      	cbz	r0, 1ebdc <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1eb8e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1eb90:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1eb92:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1eb94:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1eb96:	8106      	strh	r6, [r0, #8]
   1eb98:	d909      	bls.n	1ebae <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1eb9a:	2202      	movs	r2, #2
   1eb9c:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1eb9e:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   1eba2:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1eba6:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1eba8:	f1b9 0f00 	cmp.w	r9, #0
   1ebac:	dc0e      	bgt.n	1ebcc <log_msg_create_n+0x50>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1ebae:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1ebb0:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1ebb4:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ebb8:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1ebba:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ebbc:	d818      	bhi.n	1ebf0 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1ebbe:	00aa      	lsls	r2, r5, #2
   1ebc0:	4641      	mov	r1, r8
   1ebc2:	f104 0014 	add.w	r0, r4, #20
   1ebc6:	f000 fd17 	bl	1f5f8 <memcpy>
		nargs  = 0U;
   1ebca:	e007      	b.n	1ebdc <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1ebcc:	f7e4 fc2e 	bl	342c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1ebd0:	4607      	mov	r7, r0
   1ebd2:	b930      	cbnz	r0, 1ebe2 <log_msg_create_n+0x66>
			msg_free(msg);
   1ebd4:	4620      	mov	r0, r4
   1ebd6:	f7e4 fc3b 	bl	3450 <msg_free>
			return NULL;
   1ebda:	463c      	mov	r4, r7
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   1ebdc:	4620      	mov	r0, r4
   1ebde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1ebe2:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1ebe6:	f1a9 0907 	sub.w	r9, r9, #7
   1ebea:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1ebec:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1ebee:	e7db      	b.n	1eba8 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1ebf0:	4641      	mov	r1, r8
   1ebf2:	2208      	movs	r2, #8
   1ebf4:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1ebf8:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1ebfa:	f000 fcfd 	bl	1f5f8 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1ebfe:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1ec00:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1ec04:	2d07      	cmp	r5, #7
   1ec06:	462e      	mov	r6, r5
   1ec08:	bf28      	it	cs
   1ec0a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1ec0c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1ec10:	4641      	mov	r1, r8
   1ec12:	1d38      	adds	r0, r7, #4
   1ec14:	464a      	mov	r2, r9
   1ec16:	f000 fcef 	bl	1f5f8 <memcpy>
	while (nargs != 0U) {
   1ec1a:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1ec1c:	44c8      	add	r8, r9
		cont = cont->next;
   1ec1e:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1ec20:	d1f0      	bne.n	1ec04 <log_msg_create_n+0x88>
   1ec22:	e7db      	b.n	1ebdc <log_msg_create_n+0x60>

0001ec24 <read_str>:
{
   1ec24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ec28:	68cd      	ldr	r5, [r1, #12]
{
   1ec2a:	4606      	mov	r6, r0
				 strlen(attr->user_data));
   1ec2c:	4628      	mov	r0, r5
{
   1ec2e:	4698      	mov	r8, r3
   1ec30:	460c      	mov	r4, r1
   1ec32:	4617      	mov	r7, r2
				 strlen(attr->user_data));
   1ec34:	f000 fcae 	bl	1f594 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ec38:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ec3c:	9300      	str	r3, [sp, #0]
   1ec3e:	b280      	uxth	r0, r0
   1ec40:	e9cd 5001 	strd	r5, r0, [sp, #4]
   1ec44:	4643      	mov	r3, r8
   1ec46:	463a      	mov	r2, r7
   1ec48:	4621      	mov	r1, r4
   1ec4a:	4630      	mov	r0, r6
   1ec4c:	f002 f88b 	bl	20d66 <bt_gatt_attr_read>
}
   1ec50:	b004      	add	sp, #16
   1ec52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ec56 <bas_init>:
static int bas_init(struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1ec56:	2000      	movs	r0, #0
   1ec58:	4770      	bx	lr

0001ec5a <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   1ec5a:	6843      	ldr	r3, [r0, #4]
   1ec5c:	68db      	ldr	r3, [r3, #12]
   1ec5e:	4718      	bx	r3

0001ec60 <nvs_flash_rd>:
{
   1ec60:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1ec62:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ec64:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   1ec66:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ec68:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1ec6a:	fa16 f181 	uxtah	r1, r6, r1
   1ec6e:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   1ec72:	6844      	ldr	r4, [r0, #4]
   1ec74:	6824      	ldr	r4, [r4, #0]
   1ec76:	46a4      	mov	ip, r4
}
   1ec78:	bc70      	pop	{r4, r5, r6}
   1ec7a:	4760      	bx	ip

0001ec7c <nvs_flash_block_cmp>:
{
   1ec7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1ec80:	7c05      	ldrb	r5, [r0, #16]
   1ec82:	426d      	negs	r5, r5
{
   1ec84:	b089      	sub	sp, #36	; 0x24
   1ec86:	4681      	mov	r9, r0
   1ec88:	460f      	mov	r7, r1
   1ec8a:	4690      	mov	r8, r2
   1ec8c:	461c      	mov	r4, r3
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1ec8e:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1ec92:	b91c      	cbnz	r4, 1ec9c <nvs_flash_block_cmp+0x20>
	return 0;
   1ec94:	4620      	mov	r0, r4
}
   1ec96:	b009      	add	sp, #36	; 0x24
   1ec98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1ec9c:	42ac      	cmp	r4, r5
   1ec9e:	4626      	mov	r6, r4
   1eca0:	bf28      	it	cs
   1eca2:	462e      	movcs	r6, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1eca4:	4633      	mov	r3, r6
   1eca6:	466a      	mov	r2, sp
   1eca8:	4639      	mov	r1, r7
   1ecaa:	4648      	mov	r0, r9
   1ecac:	f7ff ffd8 	bl	1ec60 <nvs_flash_rd>
		if (rc) {
   1ecb0:	2800      	cmp	r0, #0
   1ecb2:	d1f0      	bne.n	1ec96 <nvs_flash_block_cmp+0x1a>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1ecb4:	4632      	mov	r2, r6
   1ecb6:	4669      	mov	r1, sp
   1ecb8:	4640      	mov	r0, r8
   1ecba:	f000 fc8d 	bl	1f5d8 <memcmp>
		if (rc) {
   1ecbe:	b918      	cbnz	r0, 1ecc8 <nvs_flash_block_cmp+0x4c>
		len -= bytes_to_cmp;
   1ecc0:	1ba4      	subs	r4, r4, r6
		addr += bytes_to_cmp;
   1ecc2:	4437      	add	r7, r6
		data8 += bytes_to_cmp;
   1ecc4:	44b0      	add	r8, r6
   1ecc6:	e7e4      	b.n	1ec92 <nvs_flash_block_cmp+0x16>
			return 1;
   1ecc8:	2001      	movs	r0, #1
   1ecca:	e7e4      	b.n	1ec96 <nvs_flash_block_cmp+0x1a>

0001eccc <nvs_ate_crc8_check>:
{
   1eccc:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ecce:	4601      	mov	r1, r0
{
   1ecd0:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ecd2:	2207      	movs	r2, #7
   1ecd4:	20ff      	movs	r0, #255	; 0xff
   1ecd6:	f7e3 fef1 	bl	2abc <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1ecda:	79e3      	ldrb	r3, [r4, #7]
}
   1ecdc:	1a18      	subs	r0, r3, r0
   1ecde:	bf18      	it	ne
   1ece0:	2001      	movne	r0, #1
   1ece2:	bd10      	pop	{r4, pc}

0001ece4 <nvs_ate_crc8_update>:
{
   1ece4:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ece6:	4601      	mov	r1, r0
{
   1ece8:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ecea:	2207      	movs	r2, #7
   1ecec:	20ff      	movs	r0, #255	; 0xff
   1ecee:	f7e3 fee5 	bl	2abc <crc8_ccitt>
	entry->crc8 = crc8;
   1ecf2:	71e0      	strb	r0, [r4, #7]
}
   1ecf4:	bd10      	pop	{r4, pc}

0001ecf6 <nvs_al_size.isra.1>:
	if (fs->write_block_size <= 1U) {
   1ecf6:	2801      	cmp	r0, #1
	return (len + (fs->write_block_size - 1U)) & ~(fs->write_block_size - 1U);
   1ecf8:	bf81      	itttt	hi
   1ecfa:	f100 33ff 	addhi.w	r3, r0, #4294967295	; 0xffffffff
   1ecfe:	18c9      	addhi	r1, r1, r3
   1ed00:	4240      	neghi	r0, r0
   1ed02:	4001      	andhi	r1, r0
}
   1ed04:	4608      	mov	r0, r1
   1ed06:	4770      	bx	lr

0001ed08 <nvs_sector_advance.isra.2>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1ed08:	680b      	ldr	r3, [r1, #0]
   1ed0a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1ed0e:	0c1a      	lsrs	r2, r3, #16
   1ed10:	4282      	cmp	r2, r0
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1ed12:	bf08      	it	eq
   1ed14:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1ed18:	600b      	str	r3, [r1, #0]
}
   1ed1a:	4770      	bx	lr

0001ed1c <nvs_flash_cmp_const.constprop.6>:
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   1ed1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1ed20:	7c04      	ldrb	r4, [r0, #16]
   1ed22:	4264      	negs	r4, r4
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   1ed24:	b088      	sub	sp, #32
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1ed26:	f004 0420 	and.w	r4, r4, #32
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   1ed2a:	4680      	mov	r8, r0
   1ed2c:	460e      	mov	r6, r1
   1ed2e:	4615      	mov	r5, r2
	(void)memset(cmp, value, block_size);
   1ed30:	21ff      	movs	r1, #255	; 0xff
   1ed32:	4622      	mov	r2, r4
   1ed34:	4668      	mov	r0, sp
   1ed36:	f000 fc89 	bl	1f64c <memset>
	while (len) {
   1ed3a:	b91d      	cbnz	r5, 1ed44 <nvs_flash_cmp_const.constprop.6+0x28>
	return 0;
   1ed3c:	4628      	mov	r0, r5
}
   1ed3e:	b008      	add	sp, #32
   1ed40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1ed44:	42ac      	cmp	r4, r5
   1ed46:	4627      	mov	r7, r4
   1ed48:	bf28      	it	cs
   1ed4a:	462f      	movcs	r7, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1ed4c:	463b      	mov	r3, r7
   1ed4e:	466a      	mov	r2, sp
   1ed50:	4631      	mov	r1, r6
   1ed52:	4640      	mov	r0, r8
   1ed54:	f7ff ff92 	bl	1ec7c <nvs_flash_block_cmp>
		if (rc) {
   1ed58:	2800      	cmp	r0, #0
   1ed5a:	d1f0      	bne.n	1ed3e <nvs_flash_cmp_const.constprop.6+0x22>
		len -= bytes_to_cmp;
   1ed5c:	1bed      	subs	r5, r5, r7
		addr += bytes_to_cmp;
   1ed5e:	443e      	add	r6, r7
   1ed60:	e7eb      	b.n	1ed3a <nvs_flash_cmp_const.constprop.6+0x1e>

0001ed62 <nvs_flash_erase_sector>:
{
   1ed62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	addr &= ADDR_SECT_MASK;
   1ed66:	0c0d      	lsrs	r5, r1, #16
   1ed68:	042d      	lsls	r5, r5, #16
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   1ed6a:	8982      	ldrh	r2, [r0, #12]
   1ed6c:	4629      	mov	r1, r5
{
   1ed6e:	4604      	mov	r4, r0
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   1ed70:	f7ff ffd4 	bl	1ed1c <nvs_flash_cmp_const.constprop.6>
	if (rc <= 0) {
   1ed74:	1e06      	subs	r6, r0, #0
   1ed76:	dd17      	ble.n	1eda8 <nvs_flash_erase_sector+0x46>
	rc = flash_write_protection_set(fs->flash_device, 0);
   1ed78:	2100      	movs	r1, #0
   1ed7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	offset = fs->offset;
   1ed7c:	6827      	ldr	r7, [r4, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ed7e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   1ed82:	f7ff ff6a 	bl	1ec5a <flash_write_protection_set>
	if (rc) {
   1ed86:	4606      	mov	r6, r0
   1ed88:	b970      	cbnz	r0, 1eda8 <nvs_flash_erase_sector+0x46>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1ed8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1ed8c:	89a2      	ldrh	r2, [r4, #12]
	return api->erase(dev, offset, size);
   1ed8e:	6843      	ldr	r3, [r0, #4]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ed90:	0c29      	lsrs	r1, r5, #16
   1ed92:	689b      	ldr	r3, [r3, #8]
   1ed94:	fb08 7101 	mla	r1, r8, r1, r7
   1ed98:	4798      	blx	r3
	if (rc) {
   1ed9a:	4606      	mov	r6, r0
   1ed9c:	b920      	cbnz	r0, 1eda8 <nvs_flash_erase_sector+0x46>
	(void) flash_write_protection_set(fs->flash_device, 1);
   1ed9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->write_protection(dev, enable);
   1eda0:	6843      	ldr	r3, [r0, #4]
   1eda2:	2101      	movs	r1, #1
   1eda4:	68db      	ldr	r3, [r3, #12]
   1eda6:	4798      	blx	r3
}
   1eda8:	4630      	mov	r0, r6
   1edaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001edae <nvs_flash_al_wrt.part.4>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   1edae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1edb2:	4604      	mov	r4, r0
   1edb4:	b088      	sub	sp, #32
   1edb6:	460e      	mov	r6, r1
	offset = fs->offset;
   1edb8:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1edbc:	8987      	ldrh	r7, [r0, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   1edbe:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1edc0:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   1edc2:	4690      	mov	r8, r2
   1edc4:	461d      	mov	r5, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
   1edc6:	f7ff ff48 	bl	1ec5a <flash_write_protection_set>
	if (rc) {
   1edca:	bb78      	cbnz	r0, 1ee2c <nvs_flash_al_wrt.part.4+0x7e>
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1edcc:	ea4f 4916 	mov.w	r9, r6, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   1edd0:	fa1a f686 	uxtah	r6, sl, r6
   1edd4:	fb07 6909 	mla	r9, r7, r9, r6
	blen = len & ~(fs->write_block_size - 1U);
   1edd8:	7c26      	ldrb	r6, [r4, #16]
   1edda:	4276      	negs	r6, r6
	if (blen > 0) {
   1eddc:	402e      	ands	r6, r5
   1edde:	d00b      	beq.n	1edf8 <nvs_flash_al_wrt.part.4+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1ede0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->write(dev, offset, data, len);
   1ede2:	6843      	ldr	r3, [r0, #4]
   1ede4:	4642      	mov	r2, r8
   1ede6:	685f      	ldr	r7, [r3, #4]
   1ede8:	4649      	mov	r1, r9
   1edea:	4633      	mov	r3, r6
   1edec:	47b8      	blx	r7
		if (rc) {
   1edee:	4607      	mov	r7, r0
   1edf0:	b9b8      	cbnz	r0, 1ee22 <nvs_flash_al_wrt.part.4+0x74>
		len -= blen;
   1edf2:	1bad      	subs	r5, r5, r6
		offset += blen;
   1edf4:	44b1      	add	r9, r6
		data8 += blen;
   1edf6:	44b0      	add	r8, r6
	if (len) {
   1edf8:	b1dd      	cbz	r5, 1ee32 <nvs_flash_al_wrt.part.4+0x84>
		memcpy(buf, data8, len);
   1edfa:	462a      	mov	r2, r5
   1edfc:	4641      	mov	r1, r8
   1edfe:	4668      	mov	r0, sp
   1ee00:	f000 fbfa 	bl	1f5f8 <memcpy>
		(void)memset(buf + len, 0xff, fs->write_block_size - len);
   1ee04:	7c22      	ldrb	r2, [r4, #16]
   1ee06:	21ff      	movs	r1, #255	; 0xff
   1ee08:	1b52      	subs	r2, r2, r5
   1ee0a:	eb0d 0005 	add.w	r0, sp, r5
   1ee0e:	f000 fc1d 	bl	1f64c <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1ee12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1ee14:	7c23      	ldrb	r3, [r4, #16]
   1ee16:	6842      	ldr	r2, [r0, #4]
   1ee18:	4649      	mov	r1, r9
   1ee1a:	6855      	ldr	r5, [r2, #4]
   1ee1c:	466a      	mov	r2, sp
   1ee1e:	47a8      	blx	r5
   1ee20:	4607      	mov	r7, r0
	(void) flash_write_protection_set(fs->flash_device, 1);
   1ee22:	2101      	movs	r1, #1
   1ee24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1ee26:	f7ff ff18 	bl	1ec5a <flash_write_protection_set>
	return rc;
   1ee2a:	4638      	mov	r0, r7
}
   1ee2c:	b008      	add	sp, #32
   1ee2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ee32:	462f      	mov	r7, r5
   1ee34:	e7f5      	b.n	1ee22 <nvs_flash_al_wrt.part.4+0x74>

0001ee36 <nvs_flash_ate_wrt>:
{
   1ee36:	b510      	push	{r4, lr}
   1ee38:	2308      	movs	r3, #8
   1ee3a:	460a      	mov	r2, r1
   1ee3c:	6841      	ldr	r1, [r0, #4]
   1ee3e:	4604      	mov	r4, r0
   1ee40:	f7ff ffb5 	bl	1edae <nvs_flash_al_wrt.part.4>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1ee44:	2108      	movs	r1, #8
   1ee46:	4602      	mov	r2, r0
   1ee48:	7c20      	ldrb	r0, [r4, #16]
   1ee4a:	f7ff ff54 	bl	1ecf6 <nvs_al_size.isra.1>
   1ee4e:	6863      	ldr	r3, [r4, #4]
   1ee50:	1a18      	subs	r0, r3, r0
   1ee52:	6060      	str	r0, [r4, #4]
}
   1ee54:	4610      	mov	r0, r2
   1ee56:	bd10      	pop	{r4, pc}

0001ee58 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1ee58:	2300      	movs	r3, #0
   1ee5a:	461a      	mov	r2, r3
   1ee5c:	f7e4 be46 	b.w	3aec <nvs_write>

0001ee60 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, u16_t id, void *data, size_t len)
{
   1ee60:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1ee62:	2400      	movs	r4, #0
   1ee64:	9400      	str	r4, [sp, #0]
   1ee66:	f7e4 ff27 	bl	3cb8 <nvs_read_hist>
	return rc;
}
   1ee6a:	b002      	add	sp, #8
   1ee6c:	bd10      	pop	{r4, pc}

0001ee6e <get_sectors_cb>:
{
   1ee6e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1ee70:	6802      	ldr	r2, [r0, #0]
   1ee72:	684c      	ldr	r4, [r1, #4]
   1ee74:	42a2      	cmp	r2, r4
   1ee76:	d316      	bcc.n	1eea6 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1ee78:	688b      	ldr	r3, [r1, #8]
   1ee7a:	4423      	add	r3, r4
   1ee7c:	429a      	cmp	r2, r3
   1ee7e:	d206      	bcs.n	1ee8e <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1ee80:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1ee84:	42ab      	cmp	r3, r5
   1ee86:	d304      	bcc.n	1ee92 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1ee88:	f06f 030b 	mvn.w	r3, #11
   1ee8c:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1ee8e:	2000      	movs	r0, #0
   1ee90:	e00a      	b.n	1eea8 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1ee92:	68cd      	ldr	r5, [r1, #12]
   1ee94:	1b12      	subs	r2, r2, r4
   1ee96:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   1ee9a:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1ee9e:	6842      	ldr	r2, [r0, #4]
   1eea0:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1eea2:	3301      	adds	r3, #1
   1eea4:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1eea6:	2001      	movs	r0, #1
}
   1eea8:	bd70      	pop	{r4, r5, r6, pc}

0001eeaa <settings_load>:
	return settings_load_subtree(NULL);
   1eeaa:	2000      	movs	r0, #0
   1eeac:	f7e5 b806 	b.w	3ebc <settings_load_subtree>

0001eeb0 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1eeb0:	2200      	movs	r2, #0
   1eeb2:	4611      	mov	r1, r2
   1eeb4:	f7e4 bfba 	b.w	3e2c <settings_save_one>

0001eeb8 <settings_name_steq>:
{
   1eeb8:	b530      	push	{r4, r5, lr}
	if (next) {
   1eeba:	b10a      	cbz	r2, 1eec0 <settings_name_steq+0x8>
		*next = NULL;
   1eebc:	2300      	movs	r3, #0
   1eebe:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   1eec0:	b190      	cbz	r0, 1eee8 <settings_name_steq+0x30>
   1eec2:	b151      	cbz	r1, 1eeda <settings_name_steq+0x22>
   1eec4:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   1eec6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   1eeca:	4603      	mov	r3, r0
   1eecc:	f810 1b01 	ldrb.w	r1, [r0], #1
   1eed0:	b15c      	cbz	r4, 1eeea <settings_name_steq+0x32>
   1eed2:	428c      	cmp	r4, r1
   1eed4:	d101      	bne.n	1eeda <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1eed6:	2c3d      	cmp	r4, #61	; 0x3d
   1eed8:	d1f5      	bne.n	1eec6 <settings_name_steq+0xe>
	return 0;
   1eeda:	2000      	movs	r0, #0
   1eedc:	e004      	b.n	1eee8 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1eede:	293d      	cmp	r1, #61	; 0x3d
   1eee0:	d008      	beq.n	1eef4 <settings_name_steq+0x3c>
   1eee2:	fab1 f081 	clz	r0, r1
   1eee6:	0940      	lsrs	r0, r0, #5
}
   1eee8:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1eeea:	292f      	cmp	r1, #47	; 0x2f
   1eeec:	d1f7      	bne.n	1eede <settings_name_steq+0x26>
		if (next) {
   1eeee:	b10a      	cbz	r2, 1eef4 <settings_name_steq+0x3c>
			*next = name + 1;
   1eef0:	3301      	adds	r3, #1
   1eef2:	6013      	str	r3, [r2, #0]
		return 1;
   1eef4:	2001      	movs	r0, #1
   1eef6:	e7f7      	b.n	1eee8 <settings_name_steq+0x30>

0001eef8 <settings_name_next>:
{
   1eef8:	b530      	push	{r4, r5, lr}
   1eefa:	4603      	mov	r3, r0
	if (next) {
   1eefc:	b109      	cbz	r1, 1ef02 <settings_name_next+0xa>
		*next = NULL;
   1eefe:	2200      	movs	r2, #0
   1ef00:	600a      	str	r2, [r1, #0]
	if (!name) {
   1ef02:	b16b      	cbz	r3, 1ef20 <settings_name_next+0x28>
   1ef04:	461a      	mov	r2, r3
   1ef06:	4614      	mov	r4, r2
   1ef08:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1ef0a:	f812 5b01 	ldrb.w	r5, [r2], #1
   1ef0e:	b135      	cbz	r5, 1ef1e <settings_name_next+0x26>
   1ef10:	2d3d      	cmp	r5, #61	; 0x3d
   1ef12:	d004      	beq.n	1ef1e <settings_name_next+0x26>
   1ef14:	2d2f      	cmp	r5, #47	; 0x2f
   1ef16:	d1f6      	bne.n	1ef06 <settings_name_next+0xe>
		if (next) {
   1ef18:	b109      	cbz	r1, 1ef1e <settings_name_next+0x26>
			*next = name + 1;
   1ef1a:	3401      	adds	r4, #1
   1ef1c:	600c      	str	r4, [r1, #0]
}
   1ef1e:	bd30      	pop	{r4, r5, pc}
		return 0;
   1ef20:	4618      	mov	r0, r3
   1ef22:	e7fc      	b.n	1ef1e <settings_name_next+0x26>

0001ef24 <settings_nvs_read_fn>:
{
   1ef24:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1ef26:	4613      	mov	r3, r2
{
   1ef28:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1ef2a:	460a      	mov	r2, r1
   1ef2c:	8881      	ldrh	r1, [r0, #4]
   1ef2e:	6800      	ldr	r0, [r0, #0]
   1ef30:	f7ff ff96 	bl	1ee60 <nvs_read>
}
   1ef34:	42a0      	cmp	r0, r4
   1ef36:	bfa8      	it	ge
   1ef38:	4620      	movge	r0, r4
   1ef3a:	bd10      	pop	{r4, pc}

0001ef3c <settings_nvs_save>:
{
   1ef3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef40:	b097      	sub	sp, #92	; 0x5c
   1ef42:	4604      	mov	r4, r0
   1ef44:	9201      	str	r2, [sp, #4]
   1ef46:	469b      	mov	fp, r3
	if (!name) {
   1ef48:	468a      	mov	sl, r1
   1ef4a:	2900      	cmp	r1, #0
   1ef4c:	d067      	beq.n	1f01e <settings_nvs_save+0xe2>
	delete = ((value == NULL) || (val_len == 0));
   1ef4e:	b1da      	cbz	r2, 1ef88 <settings_nvs_save+0x4c>
   1ef50:	fabb f78b 	clz	r7, fp
   1ef54:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   1ef56:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
   1ef58:	3501      	adds	r5, #1
   1ef5a:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1ef5c:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1ef5e:	f104 0908 	add.w	r9, r4, #8
		name_id--;
   1ef62:	1e6e      	subs	r6, r5, #1
   1ef64:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   1ef66:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ef6a:	d02e      	beq.n	1efca <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1ef6c:	234a      	movs	r3, #74	; 0x4a
   1ef6e:	aa03      	add	r2, sp, #12
   1ef70:	4631      	mov	r1, r6
   1ef72:	4648      	mov	r0, r9
   1ef74:	f7ff ff74 	bl	1ee60 <nvs_read>
		if (rc < 0) {
   1ef78:	2800      	cmp	r0, #0
   1ef7a:	da07      	bge.n	1ef8c <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1ef7c:	f110 0f02 	cmn.w	r0, #2
   1ef80:	bf08      	it	eq
   1ef82:	46b0      	moveq	r8, r6
   1ef84:	4635      	mov	r5, r6
   1ef86:	e7ec      	b.n	1ef62 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   1ef88:	2701      	movs	r7, #1
   1ef8a:	e7e4      	b.n	1ef56 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1ef8c:	ab16      	add	r3, sp, #88	; 0x58
   1ef8e:	4418      	add	r0, r3
   1ef90:	2300      	movs	r3, #0
   1ef92:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   1ef96:	a903      	add	r1, sp, #12
   1ef98:	4650      	mov	r0, sl
   1ef9a:	f000 fb02 	bl	1f5a2 <strcmp>
   1ef9e:	2800      	cmp	r0, #0
   1efa0:	d1f0      	bne.n	1ef84 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1efa2:	2f00      	cmp	r7, #0
   1efa4:	d039      	beq.n	1f01a <settings_nvs_save+0xde>
   1efa6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1efa8:	42b3      	cmp	r3, r6
   1efaa:	d140      	bne.n	1f02e <settings_nvs_save+0xf2>
			cf->last_name_id--;
   1efac:	4622      	mov	r2, r4
   1efae:	1e73      	subs	r3, r6, #1
   1efb0:	f822 3f34 	strh.w	r3, [r2, #52]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1efb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1efb8:	2302      	movs	r3, #2
   1efba:	4648      	mov	r0, r9
   1efbc:	f7e4 fd96 	bl	3aec <nvs_write>
			if (rc < 0) {
   1efc0:	2800      	cmp	r0, #0
   1efc2:	da34      	bge.n	1f02e <settings_nvs_save+0xf2>
}
   1efc4:	b017      	add	sp, #92	; 0x5c
   1efc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   1efca:	bb5f      	cbnz	r7, 1f024 <settings_nvs_save+0xe8>
	write_name = true;
   1efcc:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1efce:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1efd2:	d029      	beq.n	1f028 <settings_nvs_save+0xec>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1efd4:	f104 0508 	add.w	r5, r4, #8
   1efd8:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1efdc:	465b      	mov	r3, fp
   1efde:	9a01      	ldr	r2, [sp, #4]
   1efe0:	b289      	uxth	r1, r1
   1efe2:	4628      	mov	r0, r5
   1efe4:	f7e4 fd82 	bl	3aec <nvs_write>
	if (write_name) {
   1efe8:	b157      	cbz	r7, 1f000 <settings_nvs_save+0xc4>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1efea:	4650      	mov	r0, sl
   1efec:	f000 fad2 	bl	1f594 <strlen>
   1eff0:	4652      	mov	r2, sl
   1eff2:	4603      	mov	r3, r0
   1eff4:	4641      	mov	r1, r8
   1eff6:	4628      	mov	r0, r5
   1eff8:	f7e4 fd78 	bl	3aec <nvs_write>
		if (rc < 0) {
   1effc:	2800      	cmp	r0, #0
   1effe:	dbe1      	blt.n	1efc4 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   1f000:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1f002:	4543      	cmp	r3, r8
   1f004:	d220      	bcs.n	1f048 <settings_nvs_save+0x10c>
		cf->last_name_id = write_name_id;
   1f006:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1f008:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   1f00a:	f822 8f34 	strh.w	r8, [r2, #52]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1f00e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1f012:	4628      	mov	r0, r5
   1f014:	f7e4 fd6a 	bl	3aec <nvs_write>
   1f018:	e016      	b.n	1f048 <settings_nvs_save+0x10c>
   1f01a:	46b0      	mov	r8, r6
   1f01c:	e7d7      	b.n	1efce <settings_nvs_save+0x92>
		return -EINVAL;
   1f01e:	f06f 0015 	mvn.w	r0, #21
   1f022:	e7cf      	b.n	1efc4 <settings_nvs_save+0x88>
		return 0;
   1f024:	2000      	movs	r0, #0
   1f026:	e7cd      	b.n	1efc4 <settings_nvs_save+0x88>
		return -ENOMEM;
   1f028:	f06f 000b 	mvn.w	r0, #11
   1f02c:	e7ca      	b.n	1efc4 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   1f02e:	4631      	mov	r1, r6
   1f030:	4648      	mov	r0, r9
   1f032:	f7ff ff11 	bl	1ee58 <nvs_delete>
			if (rc >= 0) {
   1f036:	2800      	cmp	r0, #0
   1f038:	dbc4      	blt.n	1efc4 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1f03a:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1f03e:	313f      	adds	r1, #63	; 0x3f
   1f040:	b289      	uxth	r1, r1
   1f042:	4648      	mov	r0, r9
   1f044:	f7ff ff08 	bl	1ee58 <nvs_delete>
	if (rc < 0) {
   1f048:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1f04c:	e7ba      	b.n	1efc4 <settings_nvs_save+0x88>

0001f04e <settings_nvs_backend_init>:
{
   1f04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1f050:	f100 0608 	add.w	r6, r0, #8
   1f054:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
   1f056:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1f058:	4630      	mov	r0, r6
   1f05a:	f7e4 fbdb 	bl	3814 <nvs_init>
	if (rc) {
   1f05e:	4605      	mov	r5, r0
   1f060:	b970      	cbnz	r0, 1f080 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1f062:	2302      	movs	r3, #2
   1f064:	f10d 0206 	add.w	r2, sp, #6
   1f068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1f06c:	4630      	mov	r0, r6
   1f06e:	f7ff fef7 	bl	1ee60 <nvs_read>
	if (rc < 0) {
   1f072:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   1f074:	bfb4      	ite	lt
   1f076:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   1f07a:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   1f07e:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   1f080:	4628      	mov	r0, r5
   1f082:	b002      	add	sp, #8
   1f084:	bd70      	pop	{r4, r5, r6, pc}

0001f086 <get_status>:
	data = get_sub_data(dev, type);
   1f086:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   1f088:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1f08a:	220c      	movs	r2, #12
   1f08c:	fb02 3101 	mla	r1, r2, r1, r3
   1f090:	7a4b      	ldrb	r3, [r1, #9]
   1f092:	b923      	cbnz	r3, 1f09e <get_status+0x18>
	if (data->ref > 0) {
   1f094:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1f096:	fab0 f080 	clz	r0, r0
   1f09a:	0940      	lsrs	r0, r0, #5
   1f09c:	4770      	bx	lr
   1f09e:	2002      	movs	r0, #2
}
   1f0a0:	4770      	bx	lr

0001f0a2 <clkstarted_handle>:
{
   1f0a2:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1f0a4:	6883      	ldr	r3, [r0, #8]
	sub_data->started = true;
   1f0a6:	240c      	movs	r4, #12
   1f0a8:	fb04 3401 	mla	r4, r4, r1, r3
   1f0ac:	2301      	movs	r3, #1
{
   1f0ae:	4605      	mov	r5, r0
	sub_data->started = true;
   1f0b0:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1f0b2:	f04f 0320 	mov.w	r3, #32
   1f0b6:	f3ef 8111 	mrs	r1, BASEPRI
   1f0ba:	f383 8811 	msr	BASEPRI, r3
   1f0be:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1f0c2:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1f0c4:	b12b      	cbz	r3, 1f0d2 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f0c6:	6860      	ldr	r0, [r4, #4]
   1f0c8:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1f0ca:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f0cc:	4283      	cmp	r3, r0
	list->tail = node;
   1f0ce:	bf08      	it	eq
   1f0d0:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1f0d2:	f381 8811 	msr	BASEPRI, r1
   1f0d6:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1f0da:	b903      	cbnz	r3, 1f0de <clkstarted_handle+0x3c>
}
   1f0dc:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1f0de:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1f0e2:	4628      	mov	r0, r5
   1f0e4:	4790      	blx	r2
   1f0e6:	e7e4      	b.n	1f0b2 <clkstarted_handle+0x10>

0001f0e8 <clock_async_start>:
	const struct nrf_clock_control_config *config =
   1f0e8:	6803      	ldr	r3, [r0, #0]
	clk_data = get_sub_data(dev, type);
   1f0ea:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
   1f0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0f2:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
   1f0f4:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
   1f0f6:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
   1f0f8:	b14a      	cbz	r2, 1f10e <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
   1f0fa:	230c      	movs	r3, #12
   1f0fc:	4373      	muls	r3, r6
   1f0fe:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
   1f102:	429a      	cmp	r2, r3
   1f104:	d05b      	beq.n	1f1be <clock_async_start+0xd6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f106:	b113      	cbz	r3, 1f10e <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f108:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1f10a:	2b00      	cmp	r3, #0
   1f10c:	d1f9      	bne.n	1f102 <clock_async_start+0x1a>
	__asm__ volatile(
   1f10e:	f04f 0320 	mov.w	r3, #32
   1f112:	f3ef 8011 	mrs	r0, BASEPRI
   1f116:	f383 8811 	msr	BASEPRI, r3
   1f11a:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1f11e:	210c      	movs	r1, #12
   1f120:	4371      	muls	r1, r6
   1f122:	eb0c 0301 	add.w	r3, ip, r1
   1f126:	7a1c      	ldrb	r4, [r3, #8]
   1f128:	3401      	adds	r4, #1
   1f12a:	b2e4      	uxtb	r4, r4
   1f12c:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   1f12e:	f380 8811 	msr	BASEPRI, r0
   1f132:	f3bf 8f6f 	isb	sy
	if (data) {
   1f136:	b332      	cbz	r2, 1f186 <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
   1f138:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1f13c:	f04f 0e03 	mov.w	lr, #3
   1f140:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
   1f144:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
   1f146:	b9a0      	cbnz	r0, 1f172 <clock_async_start+0x8a>
	__asm__ volatile(
   1f148:	f04f 0e20 	mov.w	lr, #32
   1f14c:	f3ef 8811 	mrs	r8, BASEPRI
   1f150:	f38e 8811 	msr	BASEPRI, lr
   1f154:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1f158:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
   1f15a:	f8d3 e004 	ldr.w	lr, [r3, #4]
   1f15e:	f1be 0f00 	cmp.w	lr, #0
   1f162:	d11f      	bne.n	1f1a4 <clock_async_start+0xbc>
	list->tail = node;
   1f164:	605a      	str	r2, [r3, #4]
	list->head = node;
   1f166:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
   1f16a:	f388 8811 	msr	BASEPRI, r8
   1f16e:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   1f172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f176:	2103      	movs	r1, #3
   1f178:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
   1f17c:	b118      	cbz	r0, 1f186 <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
   1f17e:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
   1f182:	4628      	mov	r0, r5
   1f184:	4798      	blx	r3
	if (ref == 1) {
   1f186:	2c01      	cmp	r4, #1
   1f188:	d10a      	bne.n	1f1a0 <clock_async_start+0xb8>
		do_start =  (config->start_handler) ?
   1f18a:	ea4f 1806 	mov.w	r8, r6, lsl #4
   1f18e:	f857 3008 	ldr.w	r3, [r7, r8]
				config->start_handler(dev) : true;
   1f192:	b95b      	cbnz	r3, 1f1ac <clock_async_start+0xc4>
			nrf_clock_task_trigger(NRF_CLOCK,
   1f194:	4447      	add	r7, r8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f196:	2201      	movs	r2, #1
   1f198:	7abb      	ldrb	r3, [r7, #10]
   1f19a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f19e:	601a      	str	r2, [r3, #0]
	return 0;
   1f1a0:	2000      	movs	r0, #0
   1f1a2:	e00e      	b.n	1f1c2 <clock_async_start+0xda>
	parent->next = child;
   1f1a4:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
   1f1a8:	605a      	str	r2, [r3, #4]
   1f1aa:	e7de      	b.n	1f16a <clock_async_start+0x82>
				config->start_handler(dev) : true;
   1f1ac:	4628      	mov	r0, r5
   1f1ae:	4798      	blx	r3
   1f1b0:	2800      	cmp	r0, #0
   1f1b2:	d1ef      	bne.n	1f194 <clock_async_start+0xac>
			clkstarted_handle(dev, type);
   1f1b4:	4631      	mov	r1, r6
   1f1b6:	4628      	mov	r0, r5
   1f1b8:	f7ff ff73 	bl	1f0a2 <clkstarted_handle>
   1f1bc:	e7f0      	b.n	1f1a0 <clock_async_start+0xb8>
		return -EBUSY;
   1f1be:	f06f 000f 	mvn.w	r0, #15
}
   1f1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f1c6 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1f1c6:	2200      	movs	r2, #0
   1f1c8:	f7ff bf8e 	b.w	1f0e8 <clock_async_start>

0001f1cc <clk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1f1cc:	2200      	movs	r2, #0
{
   1f1ce:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1f1d0:	2101      	movs	r1, #1
{
   1f1d2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1f1d4:	4610      	mov	r0, r2
   1f1d6:	f7e5 fb95 	bl	4904 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   1f1da:	2000      	movs	r0, #0
   1f1dc:	f7e5 fb60 	bl	48a0 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f1e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f1e4:	2201      	movs	r2, #1
   1f1e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   1f1ea:	2203      	movs	r2, #3
   1f1ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1f1f0:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
   1f1f2:	2000      	movs	r0, #0
	list->tail = NULL;
   1f1f4:	e9c3 0000 	strd	r0, r0, [r3]
   1f1f8:	68a3      	ldr	r3, [r4, #8]
   1f1fa:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   1f1fe:	bd10      	pop	{r4, pc}

0001f200 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1f200:	6802      	ldr	r2, [r0, #0]
{
   1f202:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
   1f206:	f8d2 8008 	ldr.w	r8, [r2, #8]
	data = get_sub_data(dev, type);
   1f20a:	6887      	ldr	r7, [r0, #8]
   1f20c:	b2cc      	uxtb	r4, r1
	__asm__ volatile(
   1f20e:	f04f 0320 	mov.w	r3, #32
   1f212:	f3ef 8611 	mrs	r6, BASEPRI
   1f216:	f383 8811 	msr	BASEPRI, r3
   1f21a:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1f21e:	220c      	movs	r2, #12
   1f220:	4362      	muls	r2, r4
   1f222:	18b9      	adds	r1, r7, r2
   1f224:	7a0b      	ldrb	r3, [r1, #8]
   1f226:	b343      	cbz	r3, 1f27a <clock_stop+0x7a>
	data->ref--;
   1f228:	3b01      	subs	r3, #1
   1f22a:	b2db      	uxtb	r3, r3
   1f22c:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   1f22e:	bb3b      	cbnz	r3, 1f280 <clock_stop+0x80>
		do_stop =  (config->stop_handler) ?
   1f230:	0125      	lsls	r5, r4, #4
	list->head = NULL;
   1f232:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   1f234:	604b      	str	r3, [r1, #4]
   1f236:	eb08 0305 	add.w	r3, r8, r5
   1f23a:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   1f23c:	b9cb      	cbnz	r3, 1f272 <clock_stop+0x72>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1f23e:	4445      	add	r5, r8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f240:	2201      	movs	r2, #1
   1f242:	7aeb      	ldrb	r3, [r5, #11]
   1f244:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f248:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f24a:	892b      	ldrh	r3, [r5, #8]
   1f24c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f250:	2200      	movs	r2, #0
   1f252:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1f254:	681b      	ldr	r3, [r3, #0]
   1f256:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1f258:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
   1f25a:	210c      	movs	r1, #12
   1f25c:	fb01 7404 	mla	r4, r1, r4, r7
   1f260:	2000      	movs	r0, #0
   1f262:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1f264:	f386 8811 	msr	BASEPRI, r6
   1f268:	f3bf 8f6f 	isb	sy
}
   1f26c:	b002      	add	sp, #8
   1f26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
   1f272:	4798      	blx	r3
   1f274:	2800      	cmp	r0, #0
   1f276:	d1e2      	bne.n	1f23e <clock_stop+0x3e>
   1f278:	e7ef      	b.n	1f25a <clock_stop+0x5a>
		err = -EALREADY;
   1f27a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1f27e:	e7f1      	b.n	1f264 <clock_stop+0x64>
	int err = 0;
   1f280:	2000      	movs	r0, #0
   1f282:	e7ef      	b.n	1f264 <clock_stop+0x64>

0001f284 <st7789v_read>:
}
   1f284:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1f288:	4770      	bx	lr

0001f28a <st7789v_get_framebuffer>:
}
   1f28a:	2000      	movs	r0, #0
   1f28c:	4770      	bx	lr

0001f28e <st7789v_set_brightness>:
}
   1f28e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1f292:	4770      	bx	lr

0001f294 <k_sleep>:
	return z_impl_k_sleep(ms);
   1f294:	f7fd bae2 	b.w	1c85c <z_impl_k_sleep>

0001f298 <st7789v_get_capabilities>:
{
   1f298:	b538      	push	{r3, r4, r5, lr}
   1f29a:	460c      	mov	r4, r1
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
   1f29c:	6885      	ldr	r5, [r0, #8]
	memset(capabilities, 0, sizeof(struct display_capabilities));
   1f29e:	2210      	movs	r2, #16
   1f2a0:	2100      	movs	r1, #0
   1f2a2:	4620      	mov	r0, r4
   1f2a4:	f000 f9d2 	bl	1f64c <memset>
	capabilities->x_resolution = data->width;
   1f2a8:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
   1f2aa:	8023      	strh	r3, [r4, #0]
	capabilities->y_resolution = data->height;
   1f2ac:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   1f2ae:	8063      	strh	r3, [r4, #2]
	capabilities->supported_pixel_formats = PIXEL_FORMAT_RGB_565;
   1f2b0:	2310      	movs	r3, #16
   1f2b2:	6063      	str	r3, [r4, #4]
	capabilities->current_pixel_format = PIXEL_FORMAT_RGB_565;
   1f2b4:	81a3      	strh	r3, [r4, #12]
}
   1f2b6:	bd38      	pop	{r3, r4, r5, pc}

0001f2b8 <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
   1f2b8:	b410      	push	{r4}
   1f2ba:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
   1f2bc:	6842      	ldr	r2, [r0, #4]
   1f2be:	6854      	ldr	r4, [r2, #4]
   1f2c0:	460a      	mov	r2, r1
   1f2c2:	46a4      	mov	ip, r4
   1f2c4:	2100      	movs	r1, #0
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
   1f2c6:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   1f2c8:	4760      	bx	ip

0001f2ca <st7789v_set_contrast>:
   1f2ca:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1f2ce:	4770      	bx	lr

0001f2d0 <st7789v_transmit>:
{
   1f2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f2d4:	4605      	mov	r5, r0
   1f2d6:	b087      	sub	sp, #28
   1f2d8:	4698      	mov	r8, r3
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   1f2da:	462c      	mov	r4, r5
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   1f2dc:	f10d 0307 	add.w	r3, sp, #7
{
   1f2e0:	f88d 1007 	strb.w	r1, [sp, #7]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   1f2e4:	9302      	str	r3, [sp, #8]
   1f2e6:	2601      	movs	r6, #1
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   1f2e8:	ab02      	add	r3, sp, #8
{
   1f2ea:	4617      	mov	r7, r2
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
   1f2ec:	2112      	movs	r1, #18
   1f2ee:	2200      	movs	r2, #0
   1f2f0:	6a00      	ldr	r0, [r0, #32]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   1f2f2:	9603      	str	r6, [sp, #12]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   1f2f4:	e9cd 3604 	strd	r3, r6, [sp, #16]
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
   1f2f8:	f7ff ffde 	bl	1f2b8 <gpio_pin_write>
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   1f2fc:	f854 0b04 	ldr.w	r0, [r4], #4
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1f300:	6843      	ldr	r3, [r0, #4]
   1f302:	aa04      	add	r2, sp, #16
   1f304:	f8d3 9000 	ldr.w	r9, [r3]
   1f308:	4621      	mov	r1, r4
   1f30a:	2300      	movs	r3, #0
   1f30c:	47c8      	blx	r9
	if (tx_data != NULL) {
   1f30e:	b16f      	cbz	r7, 1f32c <st7789v_transmit+0x5c>
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
   1f310:	4632      	mov	r2, r6
   1f312:	2112      	movs	r1, #18
   1f314:	6a28      	ldr	r0, [r5, #32]
		tx_buf.len = tx_count;
   1f316:	e9cd 7802 	strd	r7, r8, [sp, #8]
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
   1f31a:	f7ff ffcd 	bl	1f2b8 <gpio_pin_write>
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   1f31e:	6828      	ldr	r0, [r5, #0]
   1f320:	6843      	ldr	r3, [r0, #4]
   1f322:	aa04      	add	r2, sp, #16
   1f324:	681d      	ldr	r5, [r3, #0]
   1f326:	4621      	mov	r1, r4
   1f328:	2300      	movs	r3, #0
   1f32a:	47a8      	blx	r5
}
   1f32c:	b007      	add	sp, #28
   1f32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001f332 <st7789v_blanking_on>:
{
   1f332:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_OFF, NULL, 0);
   1f334:	2300      	movs	r3, #0
   1f336:	461a      	mov	r2, r3
   1f338:	2128      	movs	r1, #40	; 0x28
   1f33a:	6880      	ldr	r0, [r0, #8]
   1f33c:	f7ff ffc8 	bl	1f2d0 <st7789v_transmit>
}
   1f340:	2000      	movs	r0, #0
   1f342:	bd08      	pop	{r3, pc}

0001f344 <st7789v_blanking_off>:
{
   1f344:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_ON, NULL, 0);
   1f346:	2300      	movs	r3, #0
   1f348:	461a      	mov	r2, r3
   1f34a:	2129      	movs	r1, #41	; 0x29
   1f34c:	6880      	ldr	r0, [r0, #8]
   1f34e:	f7ff ffbf 	bl	1f2d0 <st7789v_transmit>
}
   1f352:	2000      	movs	r0, #0
   1f354:	bd08      	pop	{r3, pc}

0001f356 <st7789v_write>:
{
   1f356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
   1f35a:	6885      	ldr	r5, [r0, #8]
	u16_t ram_x = x + data->x_offset;
   1f35c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
	u16_t ram_y = y + data->y_offset;
   1f35e:	f8b5 802a 	ldrh.w	r8, [r5, #42]	; 0x2a
{
   1f362:	461c      	mov	r4, r3
	st7789v_set_mem_area(data, x, y, desc->width, desc->height);
   1f364:	889b      	ldrh	r3, [r3, #4]
   1f366:	88e6      	ldrh	r6, [r4, #6]
	u16_t ram_x = x + data->x_offset;
   1f368:	4401      	add	r1, r0
   1f36a:	b289      	uxth	r1, r1
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   1f36c:	3b01      	subs	r3, #1
{
   1f36e:	b085      	sub	sp, #20
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   1f370:	440b      	add	r3, r1
	u16_t ram_y = y + data->y_offset;
   1f372:	4490      	add	r8, r2
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   1f374:	ba5b      	rev16	r3, r3
	spi_data[0] = sys_cpu_to_be16(ram_x);
   1f376:	ba4a      	rev16	r2, r1
	u16_t ram_y = y + data->y_offset;
   1f378:	fa1f f888 	uxth.w	r8, r8
	spi_data[0] = sys_cpu_to_be16(ram_x);
   1f37c:	f8ad 2008 	strh.w	r2, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   1f380:	f8ad 300a 	strh.w	r3, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
   1f384:	aa02      	add	r2, sp, #8
   1f386:	2304      	movs	r3, #4
   1f388:	212a      	movs	r1, #42	; 0x2a
   1f38a:	4628      	mov	r0, r5
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   1f38c:	3e01      	subs	r6, #1
{
   1f38e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   1f390:	4446      	add	r6, r8
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
   1f392:	f7ff ff9d 	bl	1f2d0 <st7789v_transmit>
	spi_data[0] = sys_cpu_to_be16(ram_y);
   1f396:	fa98 f398 	rev16.w	r3, r8
   1f39a:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   1f39e:	ba76      	rev16	r6, r6
	st7789v_transmit(data, ST7789V_CMD_RASET, (u8_t *)&spi_data[0], 4);
   1f3a0:	2304      	movs	r3, #4
   1f3a2:	aa02      	add	r2, sp, #8
   1f3a4:	212b      	movs	r1, #43	; 0x2b
   1f3a6:	4628      	mov	r0, r5
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   1f3a8:	f8ad 600a 	strh.w	r6, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_RASET, (u8_t *)&spi_data[0], 4);
   1f3ac:	f7ff ff90 	bl	1f2d0 <st7789v_transmit>
	if (desc->pitch > desc->width) {
   1f3b0:	88a3      	ldrh	r3, [r4, #4]
   1f3b2:	8922      	ldrh	r2, [r4, #8]
   1f3b4:	88e6      	ldrh	r6, [r4, #6]
		nbr_of_writes = desc->height;
   1f3b6:	429a      	cmp	r2, r3
   1f3b8:	bf84      	itt	hi
   1f3ba:	46b1      	movhi	r9, r6
   1f3bc:	2601      	movhi	r6, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
   1f3be:	fb06 f303 	mul.w	r3, r6, r3
   1f3c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1f3c6:	463a      	mov	r2, r7
   1f3c8:	f04f 012c 	mov.w	r1, #44	; 0x2c
   1f3cc:	4628      	mov	r0, r5
		nbr_of_writes = desc->height;
   1f3ce:	bf98      	it	ls
   1f3d0:	f04f 0901 	movls.w	r9, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
   1f3d4:	f7ff ff7c 	bl	1f2d0 <st7789v_transmit>
	tx_bufs.count = 1;
   1f3d8:	2301      	movs	r3, #1
   1f3da:	9303      	str	r3, [sp, #12]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   1f3dc:	8923      	ldrh	r3, [r4, #8]
	tx_bufs.buffers = &tx_buf;
   1f3de:	f8cd d008 	str.w	sp, [sp, #8]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   1f3e2:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   1f3e6:	f04f 0800 	mov.w	r8, #0
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   1f3ea:	f105 0a04 	add.w	sl, r5, #4
   1f3ee:	f108 0801 	add.w	r8, r8, #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   1f3f2:	fa1f f388 	uxth.w	r3, r8
   1f3f6:	4599      	cmp	r9, r3
   1f3f8:	d803      	bhi.n	1f402 <st7789v_write+0xac>
}
   1f3fa:	2000      	movs	r0, #0
   1f3fc:	b005      	add	sp, #20
   1f3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
   1f402:	88a3      	ldrh	r3, [r4, #4]
		tx_buf.buf = (void *)write_data_start;
   1f404:	9700      	str	r7, [sp, #0]
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
   1f406:	4373      	muls	r3, r6
   1f408:	005b      	lsls	r3, r3, #1
   1f40a:	9301      	str	r3, [sp, #4]
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   1f40c:	6828      	ldr	r0, [r5, #0]
   1f40e:	6843      	ldr	r3, [r0, #4]
   1f410:	aa02      	add	r2, sp, #8
   1f412:	f8d3 b000 	ldr.w	fp, [r3]
   1f416:	4651      	mov	r1, sl
   1f418:	2300      	movs	r3, #0
   1f41a:	47d8      	blx	fp
		write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   1f41c:	8923      	ldrh	r3, [r4, #8]
   1f41e:	eb07 0743 	add.w	r7, r7, r3, lsl #1
   1f422:	e7e4      	b.n	1f3ee <st7789v_write+0x98>

0001f424 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1f424:	4770      	bx	lr

0001f426 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1f426:	4770      	bx	lr

0001f428 <z_irq_spurious>:
	z_arm_reserved();
   1f428:	f7e5 bade 	b.w	49e8 <z_arm_bus_fault>

0001f42c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1f42c:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1f42e:	6800      	ldr	r0, [r0, #0]
   1f430:	f7e5 bae4 	b.w	49fc <z_arm_fatal_error>

0001f434 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1f434:	b508      	push	{r3, lr}
	handler();
   1f436:	f7e5 fb33 	bl	4aa0 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1f43a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1f43e:	f7e5 b9cd 	b.w	47dc <z_arm_exc_exit>

0001f442 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1f442:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1f444:	2100      	movs	r1, #0
   1f446:	a801      	add	r0, sp, #4
   1f448:	f7e5 ff0c 	bl	5264 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1f44c:	b003      	add	sp, #12
   1f44e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f452 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1f452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f456:	4684      	mov	ip, r0
   1f458:	460f      	mov	r7, r1
	register const char *s = nptr;
   1f45a:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1f45c:	462c      	mov	r4, r5
   1f45e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1f462:	2b20      	cmp	r3, #32
   1f464:	d036      	beq.n	1f4d4 <strtol+0x82>
   1f466:	f1a3 0109 	sub.w	r1, r3, #9
   1f46a:	2904      	cmp	r1, #4
   1f46c:	d932      	bls.n	1f4d4 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1f46e:	2b2d      	cmp	r3, #45	; 0x2d
   1f470:	d132      	bne.n	1f4d8 <strtol+0x86>
		neg = 1;
		c = *s++;
   1f472:	786b      	ldrb	r3, [r5, #1]
   1f474:	1cac      	adds	r4, r5, #2
		neg = 1;
   1f476:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1f478:	2a00      	cmp	r2, #0
   1f47a:	d05c      	beq.n	1f536 <strtol+0xe4>
   1f47c:	2a10      	cmp	r2, #16
   1f47e:	d109      	bne.n	1f494 <strtol+0x42>
   1f480:	2b30      	cmp	r3, #48	; 0x30
   1f482:	d107      	bne.n	1f494 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1f484:	7823      	ldrb	r3, [r4, #0]
   1f486:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f48a:	2b58      	cmp	r3, #88	; 0x58
   1f48c:	d14e      	bne.n	1f52c <strtol+0xda>
		c = s[1];
   1f48e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   1f490:	2210      	movs	r2, #16
		s += 2;
   1f492:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1f494:	2900      	cmp	r1, #0
   1f496:	bf14      	ite	ne
   1f498:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1f49c:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1f4a0:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1f4a2:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1f4a6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1f4a8:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1f4ac:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1f4b0:	2d09      	cmp	r5, #9
   1f4b2:	d817      	bhi.n	1f4e4 <strtol+0x92>
			c -= '0';
   1f4b4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1f4b6:	429a      	cmp	r2, r3
   1f4b8:	dd24      	ble.n	1f504 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1f4ba:	1c75      	adds	r5, r6, #1
   1f4bc:	d007      	beq.n	1f4ce <strtol+0x7c>
   1f4be:	4570      	cmp	r0, lr
   1f4c0:	d81d      	bhi.n	1f4fe <strtol+0xac>
   1f4c2:	d101      	bne.n	1f4c8 <strtol+0x76>
   1f4c4:	454b      	cmp	r3, r9
   1f4c6:	dc1a      	bgt.n	1f4fe <strtol+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   1f4c8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   1f4cc:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   1f4ce:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1f4d2:	e7eb      	b.n	1f4ac <strtol+0x5a>
{
   1f4d4:	4625      	mov	r5, r4
   1f4d6:	e7c1      	b.n	1f45c <strtol+0xa>
	} else if (c == '+') {
   1f4d8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1f4da:	bf04      	itt	eq
   1f4dc:	1cac      	addeq	r4, r5, #2
   1f4de:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1f4e0:	2100      	movs	r1, #0
   1f4e2:	e7c9      	b.n	1f478 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1f4e4:	f043 0520 	orr.w	r5, r3, #32
   1f4e8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1f4ea:	2d19      	cmp	r5, #25
   1f4ec:	d80a      	bhi.n	1f504 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1f4ee:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1f4f2:	2d1a      	cmp	r5, #26
   1f4f4:	bf34      	ite	cc
   1f4f6:	2537      	movcc	r5, #55	; 0x37
   1f4f8:	2557      	movcs	r5, #87	; 0x57
   1f4fa:	1b5b      	subs	r3, r3, r5
   1f4fc:	e7db      	b.n	1f4b6 <strtol+0x64>
			any = -1;
   1f4fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f502:	e7e4      	b.n	1f4ce <strtol+0x7c>
		}
	}

	if (any < 0) {
   1f504:	1c73      	adds	r3, r6, #1
   1f506:	d107      	bne.n	1f518 <strtol+0xc6>
   1f508:	f7fc fb4c 	bl	1bba4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1f50c:	2326      	movs	r3, #38	; 0x26
   1f50e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1f510:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1f512:	b937      	cbnz	r7, 1f522 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1f514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1f518:	b101      	cbz	r1, 1f51c <strtol+0xca>
		acc = -acc;
   1f51a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1f51c:	2f00      	cmp	r7, #0
   1f51e:	d0f9      	beq.n	1f514 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1f520:	b10e      	cbz	r6, 1f526 <strtol+0xd4>
   1f522:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1f526:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1f52a:	e7f3      	b.n	1f514 <strtol+0xc2>
	if (base == 0) {
   1f52c:	2330      	movs	r3, #48	; 0x30
   1f52e:	2a00      	cmp	r2, #0
   1f530:	d1b0      	bne.n	1f494 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1f532:	2208      	movs	r2, #8
   1f534:	e7ae      	b.n	1f494 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1f536:	2b30      	cmp	r3, #48	; 0x30
   1f538:	d0a4      	beq.n	1f484 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1f53a:	220a      	movs	r2, #10
   1f53c:	e7aa      	b.n	1f494 <strtol+0x42>

0001f53e <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1f53e:	3901      	subs	r1, #1
   1f540:	4603      	mov	r3, r0
   1f542:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f546:	b90a      	cbnz	r2, 1f54c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1f548:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1f54a:	4770      	bx	lr
		*d = *s;
   1f54c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1f550:	e7f7      	b.n	1f542 <strcpy+0x4>

0001f552 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1f552:	b570      	push	{r4, r5, r6, lr}
   1f554:	3901      	subs	r1, #1
   1f556:	4605      	mov	r5, r0
   1f558:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1f55a:	b142      	cbz	r2, 1f56e <strncpy+0x1c>
   1f55c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1f560:	1e56      	subs	r6, r2, #1
   1f562:	b92b      	cbnz	r3, 1f570 <strncpy+0x1e>
   1f564:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1f566:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1f56a:	42a2      	cmp	r2, r4
   1f56c:	d1fb      	bne.n	1f566 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1f56e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1f570:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1f574:	4632      	mov	r2, r6
   1f576:	e7ef      	b.n	1f558 <strncpy+0x6>

0001f578 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1f578:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1f57a:	7802      	ldrb	r2, [r0, #0]
   1f57c:	428a      	cmp	r2, r1
   1f57e:	4603      	mov	r3, r0
   1f580:	f100 0001 	add.w	r0, r0, #1
   1f584:	d004      	beq.n	1f590 <strchr+0x18>
   1f586:	2a00      	cmp	r2, #0
   1f588:	d1f7      	bne.n	1f57a <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1f58a:	2900      	cmp	r1, #0
   1f58c:	bf18      	it	ne
   1f58e:	2300      	movne	r3, #0
}
   1f590:	4618      	mov	r0, r3
   1f592:	4770      	bx	lr

0001f594 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1f594:	2300      	movs	r3, #0

	while (*s != '\0') {
   1f596:	5cc2      	ldrb	r2, [r0, r3]
   1f598:	b90a      	cbnz	r2, 1f59e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1f59a:	4618      	mov	r0, r3
   1f59c:	4770      	bx	lr
		n++;
   1f59e:	3301      	adds	r3, #1
   1f5a0:	e7f9      	b.n	1f596 <strlen+0x2>

0001f5a2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1f5a2:	3801      	subs	r0, #1
   1f5a4:	3901      	subs	r1, #1
   1f5a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1f5aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f5ae:	4293      	cmp	r3, r2
   1f5b0:	d101      	bne.n	1f5b6 <strcmp+0x14>
   1f5b2:	2b00      	cmp	r3, #0
   1f5b4:	d1f7      	bne.n	1f5a6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1f5b6:	1a98      	subs	r0, r3, r2
   1f5b8:	4770      	bx	lr

0001f5ba <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1f5ba:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1f5bc:	2400      	movs	r4, #0
   1f5be:	42a2      	cmp	r2, r4
   1f5c0:	d008      	beq.n	1f5d4 <strncmp+0x1a>
   1f5c2:	5d03      	ldrb	r3, [r0, r4]
   1f5c4:	5d0d      	ldrb	r5, [r1, r4]
   1f5c6:	42ab      	cmp	r3, r5
   1f5c8:	d102      	bne.n	1f5d0 <strncmp+0x16>
   1f5ca:	3401      	adds	r4, #1
   1f5cc:	2b00      	cmp	r3, #0
   1f5ce:	d1f6      	bne.n	1f5be <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1f5d0:	1b58      	subs	r0, r3, r5
   1f5d2:	e000      	b.n	1f5d6 <strncmp+0x1c>
   1f5d4:	2000      	movs	r0, #0
}
   1f5d6:	bd30      	pop	{r4, r5, pc}

0001f5d8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1f5d8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1f5da:	b15a      	cbz	r2, 1f5f4 <memcmp+0x1c>
   1f5dc:	3901      	subs	r1, #1
   1f5de:	1884      	adds	r4, r0, r2
   1f5e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f5e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1f5e8:	42a0      	cmp	r0, r4
   1f5ea:	d001      	beq.n	1f5f0 <memcmp+0x18>
   1f5ec:	429a      	cmp	r2, r3
   1f5ee:	d0f7      	beq.n	1f5e0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1f5f0:	1ad0      	subs	r0, r2, r3
}
   1f5f2:	bd10      	pop	{r4, pc}
		return 0;
   1f5f4:	4610      	mov	r0, r2
   1f5f6:	e7fc      	b.n	1f5f2 <memcmp+0x1a>

0001f5f8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1f5f8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1f5fa:	ea81 0400 	eor.w	r4, r1, r0
   1f5fe:	07a5      	lsls	r5, r4, #30
   1f600:	4603      	mov	r3, r0
   1f602:	d00b      	beq.n	1f61c <memcpy+0x24>
   1f604:	3b01      	subs	r3, #1
   1f606:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1f608:	4291      	cmp	r1, r2
   1f60a:	d11a      	bne.n	1f642 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1f60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1f60e:	2a00      	cmp	r2, #0
   1f610:	d0fc      	beq.n	1f60c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1f612:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f616:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1f61a:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1f61c:	079c      	lsls	r4, r3, #30
   1f61e:	d1f6      	bne.n	1f60e <memcpy+0x16>
   1f620:	0895      	lsrs	r5, r2, #2
   1f622:	00ac      	lsls	r4, r5, #2
   1f624:	1f1e      	subs	r6, r3, #4
   1f626:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1f628:	42b9      	cmp	r1, r7
   1f62a:	d105      	bne.n	1f638 <memcpy+0x40>
   1f62c:	f06f 0603 	mvn.w	r6, #3
   1f630:	fb06 2205 	mla	r2, r6, r5, r2
   1f634:	4423      	add	r3, r4
   1f636:	e7e5      	b.n	1f604 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1f638:	f851 cb04 	ldr.w	ip, [r1], #4
   1f63c:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1f640:	e7f2      	b.n	1f628 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1f642:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f646:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1f64a:	e7dd      	b.n	1f608 <memcpy+0x10>

0001f64c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1f64c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1f64e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1f650:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1f652:	079c      	lsls	r4, r3, #30
   1f654:	d110      	bne.n	1f678 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1f656:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1f65a:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1f65e:	0894      	lsrs	r4, r2, #2
   1f660:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1f664:	42b3      	cmp	r3, r6
   1f666:	d10d      	bne.n	1f684 <memset+0x38>
   1f668:	f06f 0503 	mvn.w	r5, #3
   1f66c:	fb05 2404 	mla	r4, r5, r4, r2
   1f670:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1f672:	42a3      	cmp	r3, r4
   1f674:	d109      	bne.n	1f68a <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1f676:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1f678:	2a00      	cmp	r2, #0
   1f67a:	d0fc      	beq.n	1f676 <memset+0x2a>
		*(d_byte++) = c_byte;
   1f67c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1f680:	3a01      	subs	r2, #1
   1f682:	e7e6      	b.n	1f652 <memset+0x6>
		*(d_word++) = c_word;
   1f684:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1f688:	e7ec      	b.n	1f664 <memset+0x18>
		*(d_byte++) = c_byte;
   1f68a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1f68e:	e7f0      	b.n	1f672 <memset+0x26>

0001f690 <_to_x>:
{
   1f690:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f692:	4603      	mov	r3, r0
		unsigned int d = n % base;
   1f694:	fbb1 f7f2 	udiv	r7, r1, r2
   1f698:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1f69c:	2d09      	cmp	r5, #9
   1f69e:	bf8c      	ite	hi
   1f6a0:	2627      	movhi	r6, #39	; 0x27
   1f6a2:	2600      	movls	r6, #0
   1f6a4:	461c      	mov	r4, r3
   1f6a6:	3530      	adds	r5, #48	; 0x30
   1f6a8:	4435      	add	r5, r6
	} while (n);
   1f6aa:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1f6ac:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1f6b0:	d206      	bcs.n	1f6c0 <_to_x+0x30>
	*buf = 0;
   1f6b2:	2200      	movs	r2, #0
   1f6b4:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1f6b6:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1f6b8:	4283      	cmp	r3, r0
   1f6ba:	d804      	bhi.n	1f6c6 <_to_x+0x36>
}
   1f6bc:	4620      	mov	r0, r4
   1f6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1f6c0:	4639      	mov	r1, r7
   1f6c2:	4623      	mov	r3, r4
   1f6c4:	e7e6      	b.n	1f694 <_to_x+0x4>
		char tmp = *buf;
   1f6c6:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1f6c8:	7801      	ldrb	r1, [r0, #0]
   1f6ca:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1f6ce:	f800 2b01 	strb.w	r2, [r0], #1
   1f6d2:	e7f1      	b.n	1f6b8 <_to_x+0x28>

0001f6d4 <_rlrshift>:
{
   1f6d4:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1f6d6:	e9d0 6500 	ldrd	r6, r5, [r0]
   1f6da:	0872      	lsrs	r2, r6, #1
   1f6dc:	f006 0301 	and.w	r3, r6, #1
   1f6e0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1f6e4:	189b      	adds	r3, r3, r2
   1f6e6:	f04f 0100 	mov.w	r1, #0
   1f6ea:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1f6ee:	eb44 0101 	adc.w	r1, r4, r1
   1f6f2:	e9c0 3100 	strd	r3, r1, [r0]
}
   1f6f6:	bd70      	pop	{r4, r5, r6, pc}

0001f6f8 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   1f6f8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   1f6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
   1f700:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1f702:	f04f 0705 	mov.w	r7, #5
   1f706:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
   1f70a:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
   1f70e:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
   1f712:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
   1f716:	fb07 f10e 	mul.w	r1, r7, lr
   1f71a:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1f71e:	08f2      	lsrs	r2, r6, #3
   1f720:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1f724:	fbb2 f1f7 	udiv	r1, r2, r7
   1f728:	00ca      	lsls	r2, r1, #3
		quot += q;
   1f72a:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1f72e:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1f732:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1f736:	fba2 2307 	umull	r2, r3, r2, r7
   1f73a:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1f73c:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1f740:	eb18 0403 	adds.w	r4, r8, r3
   1f744:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1f748:	e9c0 4500 	strd	r4, r5, [r0]
}
   1f74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001f750 <_get_digit>:
	if (*digit_count > 0) {
   1f750:	680b      	ldr	r3, [r1, #0]
   1f752:	2b00      	cmp	r3, #0
{
   1f754:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1f756:	dd10      	ble.n	1f77a <_get_digit+0x2a>
		*digit_count -= 1;
   1f758:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
   1f75a:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
   1f75c:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1f75e:	6844      	ldr	r4, [r0, #4]
   1f760:	210a      	movs	r1, #10
   1f762:	fba2 5601 	umull	r5, r6, r2, r1
   1f766:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1f76a:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1f76e:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1f772:	0f31      	lsrs	r1, r6, #28
   1f774:	3130      	adds	r1, #48	; 0x30
}
   1f776:	4608      	mov	r0, r1
   1f778:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1f77a:	2130      	movs	r1, #48	; 0x30
   1f77c:	e7fb      	b.n	1f776 <_get_digit+0x26>

0001f77e <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1f77e:	684b      	ldr	r3, [r1, #4]
   1f780:	2b01      	cmp	r3, #1
   1f782:	dd07      	ble.n	1f794 <sprintf_out+0x16>
		*(p->ptr) = c;
   1f784:	680b      	ldr	r3, [r1, #0]
   1f786:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1f788:	680b      	ldr	r3, [r1, #0]
   1f78a:	3301      	adds	r3, #1
   1f78c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1f78e:	684b      	ldr	r3, [r1, #4]
   1f790:	3b01      	subs	r3, #1
   1f792:	604b      	str	r3, [r1, #4]
}
   1f794:	2000      	movs	r0, #0
   1f796:	4770      	bx	lr

0001f798 <display_get_capabilities>:
   1f798:	6843      	ldr	r3, [r0, #4]
   1f79a:	69db      	ldr	r3, [r3, #28]
   1f79c:	4718      	bx	r3

0001f79e <lvgl_flush_cb_mono>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_mono(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1f79e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u16_t w = area->x2 - area->x1 + 1;
   1f7a2:	888c      	ldrh	r4, [r1, #4]
   1f7a4:	880b      	ldrh	r3, [r1, #0]
	u16_t h = area->y2 - area->y1 + 1;
   1f7a6:	88ce      	ldrh	r6, [r1, #6]
	struct device *display_dev = (struct device *)disp_drv->user_data;
   1f7a8:	f8d0 9020 	ldr.w	r9, [r0, #32]
	u16_t w = area->x2 - area->x1 + 1;
   1f7ac:	3401      	adds	r4, #1
   1f7ae:	1ae4      	subs	r4, r4, r3
	u16_t h = area->y2 - area->y1 + 1;
   1f7b0:	884b      	ldrh	r3, [r1, #2]
   1f7b2:	3601      	adds	r6, #1
{
   1f7b4:	b08b      	sub	sp, #44	; 0x2c
	u16_t h = area->y2 - area->y1 + 1;
   1f7b6:	1af6      	subs	r6, r6, r3
	u16_t w = area->x2 - area->x1 + 1;
   1f7b8:	b2a4      	uxth	r4, r4
{
   1f7ba:	460d      	mov	r5, r1
	u16_t h = area->y2 - area->y1 + 1;
   1f7bc:	b2b6      	uxth	r6, r6
	struct display_capabilities cap;
	struct display_buffer_descriptor desc;

	display_get_capabilities(display_dev, &cap);
   1f7be:	a906      	add	r1, sp, #24
{
   1f7c0:	4607      	mov	r7, r0
	display_get_capabilities(display_dev, &cap);
   1f7c2:	4648      	mov	r0, r9
{
   1f7c4:	4690      	mov	r8, r2
	display_get_capabilities(display_dev, &cap);
   1f7c6:	f7ff ffe7 	bl	1f798 <display_get_capabilities>

	desc.buf_size = (w * h)/8U;
   1f7ca:	fb06 f304 	mul.w	r3, r6, r4
   1f7ce:	08db      	lsrs	r3, r3, #3
   1f7d0:	9303      	str	r3, [sp, #12]
	return api->write(dev, x, y, desc, buf);
   1f7d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f7d6:	f8cd 8000 	str.w	r8, [sp]
	desc.width = w;
   1f7da:	f8ad 4010 	strh.w	r4, [sp, #16]
	desc.pitch = w;
   1f7de:	f8ad 4014 	strh.w	r4, [sp, #20]
	desc.height = h;
   1f7e2:	f8ad 6012 	strh.w	r6, [sp, #18]
   1f7e6:	689c      	ldr	r4, [r3, #8]
   1f7e8:	886a      	ldrh	r2, [r5, #2]
   1f7ea:	8829      	ldrh	r1, [r5, #0]
   1f7ec:	ab03      	add	r3, sp, #12
   1f7ee:	4648      	mov	r0, r9
   1f7f0:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);
	if (cap.screen_info & SCREEN_INFO_DOUBLE_BUFFER) {
   1f7f2:	9b08      	ldr	r3, [sp, #32]
   1f7f4:	071b      	lsls	r3, r3, #28
   1f7f6:	d509      	bpl.n	1f80c <lvgl_flush_cb_mono+0x6e>
   1f7f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f7fc:	f8cd 8000 	str.w	r8, [sp]
   1f800:	689c      	ldr	r4, [r3, #8]
   1f802:	886a      	ldrh	r2, [r5, #2]
   1f804:	8829      	ldrh	r1, [r5, #0]
   1f806:	ab03      	add	r3, sp, #12
   1f808:	4648      	mov	r0, r9
   1f80a:	47a0      	blx	r4
		display_write(display_dev, area->x1, area->y1, &desc,
				(void *) color_p);
	}

	lv_disp_flush_ready(disp_drv);
   1f80c:	4638      	mov	r0, r7
   1f80e:	f004 fe78 	bl	24502 <lv_disp_flush_ready>
}
   1f812:	b00b      	add	sp, #44	; 0x2c
   1f814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001f818 <lvgl_set_px_cb_mono>:


void lvgl_set_px_cb_mono(struct _disp_drv_t *disp_drv,
		u8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   1f818:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct device *display_dev = (struct device *)disp_drv->user_data;
	u8_t *buf_xy;
	u8_t bit;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   1f81c:	6a00      	ldr	r0, [r0, #32]
{
   1f81e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
   1f822:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f824:	460f      	mov	r7, r1
	display_get_capabilities(display_dev, &cap);
   1f826:	4669      	mov	r1, sp
{
   1f828:	4690      	mov	r8, r2
   1f82a:	461c      	mov	r4, r3
	display_get_capabilities(display_dev, &cap);
   1f82c:	f7ff ffb4 	bl	1f798 <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   1f830:	9802      	ldr	r0, [sp, #8]
   1f832:	f010 0f01 	tst.w	r0, #1
   1f836:	f000 0002 	and.w	r0, r0, #2
   1f83a:	d01f      	beq.n	1f87c <lvgl_set_px_cb_mono+0x64>
		buf_xy = buf + x + y/8 * buf_w;
   1f83c:	2e00      	cmp	r6, #0
   1f83e:	4631      	mov	r1, r6
   1f840:	bfb8      	it	lt
   1f842:	1df1      	addlt	r1, r6, #7
   1f844:	10c9      	asrs	r1, r1, #3
   1f846:	fb11 4108 	smlabb	r1, r1, r8, r4
   1f84a:	4439      	add	r1, r7

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   1f84c:	4273      	negs	r3, r6
   1f84e:	f006 0407 	and.w	r4, r6, #7
   1f852:	f003 0307 	and.w	r3, r3, #7
   1f856:	bf58      	it	pl
   1f858:	425c      	negpl	r4, r3
			bit = y%8;
		}
	} else {
		buf_xy = buf + x/8 + y * buf_w/8;

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   1f85a:	b108      	cbz	r0, 1f860 <lvgl_set_px_cb_mono+0x48>
			bit = 7 - x%8;
   1f85c:	f1c4 0407 	rsb	r4, r4, #7
		} else {
			bit = x%8;
   1f860:	2301      	movs	r3, #1
   1f862:	b2e4      	uxtb	r4, r4
		}
	}

	if (cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
   1f864:	fa03 f404 	lsl.w	r4, r3, r4
   1f868:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1f86c:	7808      	ldrb	r0, [r1, #0]
   1f86e:	2b04      	cmp	r3, #4
   1f870:	b2e4      	uxtb	r4, r4
   1f872:	d115      	bne.n	1f8a0 <lvgl_set_px_cb_mono+0x88>
		if (color.full == 0) {
   1f874:	b9b5      	cbnz	r5, 1f8a4 <lvgl_set_px_cb_mono+0x8c>
		}
	} else {
		if (color.full == 0) {
			*buf_xy |= BIT(bit);
		} else {
			*buf_xy &= ~BIT(bit);
   1f876:	ea20 0004 	bic.w	r0, r0, r4
   1f87a:	e014      	b.n	1f8a6 <lvgl_set_px_cb_mono+0x8e>
		buf_xy = buf + x/8 + y * buf_w/8;
   1f87c:	4643      	mov	r3, r8
   1f87e:	435e      	muls	r6, r3
   1f880:	bf48      	it	mi
   1f882:	3607      	addmi	r6, #7
   1f884:	2c00      	cmp	r4, #0
   1f886:	4622      	mov	r2, r4
   1f888:	ea4f 06e6 	mov.w	r6, r6, asr #3
   1f88c:	bfb8      	it	lt
   1f88e:	1de2      	addlt	r2, r4, #7
   1f890:	eb06 06e2 	add.w	r6, r6, r2, asr #3
   1f894:	4263      	negs	r3, r4
   1f896:	eb07 0106 	add.w	r1, r7, r6
		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   1f89a:	f004 0407 	and.w	r4, r4, #7
   1f89e:	e7d8      	b.n	1f852 <lvgl_set_px_cb_mono+0x3a>
		if (color.full == 0) {
   1f8a0:	2d00      	cmp	r5, #0
   1f8a2:	d1e8      	bne.n	1f876 <lvgl_set_px_cb_mono+0x5e>
			*buf_xy |= BIT(bit);
   1f8a4:	4320      	orrs	r0, r4
			*buf_xy &= ~BIT(bit);
   1f8a6:	7008      	strb	r0, [r1, #0]
		}
	}
}
   1f8a8:	b004      	add	sp, #16
   1f8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f8ae <lvgl_rounder_cb_mono>:

void lvgl_rounder_cb_mono(struct _disp_drv_t *disp_drv,
		lv_area_t *area)
{
   1f8ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f8b0:	460c      	mov	r4, r1
	struct device *display_dev = (struct device *)disp_drv->user_data;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   1f8b2:	6a00      	ldr	r0, [r0, #32]
   1f8b4:	4669      	mov	r1, sp
   1f8b6:	f7ff ff6f 	bl	1f798 <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   1f8ba:	9b02      	ldr	r3, [sp, #8]
   1f8bc:	07db      	lsls	r3, r3, #31
   1f8be:	d509      	bpl.n	1f8d4 <lvgl_rounder_cb_mono+0x26>
		area->y1 &= ~0x7;
   1f8c0:	8863      	ldrh	r3, [r4, #2]
   1f8c2:	f023 0307 	bic.w	r3, r3, #7
   1f8c6:	8063      	strh	r3, [r4, #2]
		area->y2 |= 0x7;
   1f8c8:	88e3      	ldrh	r3, [r4, #6]
   1f8ca:	f043 0307 	orr.w	r3, r3, #7
   1f8ce:	80e3      	strh	r3, [r4, #6]
	} else {
		area->x1 &= ~0x7;
		area->x2 |= 0x7;
	}
}
   1f8d0:	b004      	add	sp, #16
   1f8d2:	bd10      	pop	{r4, pc}
		area->x1 &= ~0x7;
   1f8d4:	8823      	ldrh	r3, [r4, #0]
   1f8d6:	f023 0307 	bic.w	r3, r3, #7
   1f8da:	8023      	strh	r3, [r4, #0]
		area->x2 |= 0x7;
   1f8dc:	88a3      	ldrh	r3, [r4, #4]
   1f8de:	f043 0307 	orr.w	r3, r3, #7
   1f8e2:	80a3      	strh	r3, [r4, #4]
}
   1f8e4:	e7f4      	b.n	1f8d0 <lvgl_rounder_cb_mono+0x22>

0001f8e6 <lvgl_flush_cb_16bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_16bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1f8e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *display_dev = (struct device *)disp_drv->user_data;
	u16_t w = area->x2 - area->x1 + 1;
   1f8e8:	888b      	ldrh	r3, [r1, #4]
	u16_t h = area->y2 - area->y1 + 1;
   1f8ea:	88cc      	ldrh	r4, [r1, #6]
	u16_t w = area->x2 - area->x1 + 1;
   1f8ec:	f9b1 6000 	ldrsh.w	r6, [r1]
	u16_t h = area->y2 - area->y1 + 1;
   1f8f0:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	u16_t w = area->x2 - area->x1 + 1;
   1f8f4:	3301      	adds	r3, #1
	u16_t h = area->y2 - area->y1 + 1;
   1f8f6:	3401      	adds	r4, #1
{
   1f8f8:	b087      	sub	sp, #28
   1f8fa:	4605      	mov	r5, r0
	u16_t w = area->x2 - area->x1 + 1;
   1f8fc:	1b9b      	subs	r3, r3, r6
	struct device *display_dev = (struct device *)disp_drv->user_data;
   1f8fe:	6a00      	ldr	r0, [r0, #32]
	u16_t h = area->y2 - area->y1 + 1;
   1f900:	1be4      	subs	r4, r4, r7
	u16_t w = area->x2 - area->x1 + 1;
   1f902:	b29b      	uxth	r3, r3
	u16_t h = area->y2 - area->y1 + 1;
   1f904:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 2U * h;
   1f906:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   1f90a:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   1f90e:	f8ad 3014 	strh.w	r3, [sp, #20]
   1f912:	6843      	ldr	r3, [r0, #4]
   1f914:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 2U * h;
   1f916:	0049      	lsls	r1, r1, #1
   1f918:	9103      	str	r1, [sp, #12]
	desc.height = h;
   1f91a:	f8ad 4012 	strh.w	r4, [sp, #18]
   1f91e:	b2ba      	uxth	r2, r7
   1f920:	689c      	ldr	r4, [r3, #8]
   1f922:	b2b1      	uxth	r1, r6
   1f924:	ab03      	add	r3, sp, #12
   1f926:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   1f928:	4628      	mov	r0, r5
   1f92a:	f004 fdea 	bl	24502 <lv_disp_flush_ready>
}
   1f92e:	b007      	add	sp, #28
   1f930:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f932 <lvgl_set_px_cb_16bit>:

#ifndef CONFIG_LVGL_COLOR_DEPTH_16
void lvgl_set_px_cb_16bit(struct _disp_drv_t *disp_drv,
		u8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   1f932:	b530      	push	{r4, r5, lr}
   1f934:	9804      	ldr	r0, [sp, #16]
    return ret.full;
#elif LV_COLOR_DEPTH == 16
    return color.full;
#elif LV_COLOR_DEPTH == 32
    lv_color16_t ret;
    LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3);   /* 8 - 5  = 3*/
   1f936:	f04f 0400 	mov.w	r4, #0
   1f93a:	f3c0 45c4 	ubfx	r5, r0, #19, #5
   1f93e:	f365 24cf 	bfi	r4, r5, #11, #5

#if LV_COLOR_16_SWAP == 0
    LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /* 8 - 6  = 2*/
   1f942:	f3c0 2585 	ubfx	r5, r0, #10, #6
   1f946:	f365 144a 	bfi	r4, r5, #5, #6
#else
    LV_COLOR_SET_G16_SWAP(ret, ret.ch.green_h = (LV_COLOR_GET_G(color) >> 2); /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
#endif
    LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3);  /* 8 - 5  = 3*/
   1f94a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
   1f94e:	f360 0404 	bfi	r4, r0, #0, #5
	u16_t *buf_xy = (u16_t *)(buf + x * 2U + y * 2U * buf_w);
   1f952:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
   1f956:	fb00 3302 	mla	r3, r0, r2, r3
	*buf_xy = lv_color_to16(color);
   1f95a:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
}
   1f95e:	bd30      	pop	{r4, r5, pc}

0001f960 <lvgl_flush_cb_24bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_24bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1f960:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *display_dev = (struct device *)disp_drv->user_data;
	u16_t w = area->x2 - area->x1 + 1;
   1f962:	888b      	ldrh	r3, [r1, #4]
	u16_t h = area->y2 - area->y1 + 1;
   1f964:	88cc      	ldrh	r4, [r1, #6]
   1f966:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
	u16_t w = area->x2 - area->x1 + 1;
   1f96a:	f9b1 7000 	ldrsh.w	r7, [r1]
   1f96e:	3301      	adds	r3, #1
	u16_t h = area->y2 - area->y1 + 1;
   1f970:	3401      	adds	r4, #1
{
   1f972:	b087      	sub	sp, #28
	u16_t h = area->y2 - area->y1 + 1;
   1f974:	eba4 040c 	sub.w	r4, r4, ip
{
   1f978:	4605      	mov	r5, r0
	u16_t w = area->x2 - area->x1 + 1;
   1f97a:	1bdb      	subs	r3, r3, r7
	struct device *display_dev = (struct device *)disp_drv->user_data;
   1f97c:	6a00      	ldr	r0, [r0, #32]
	u16_t w = area->x2 - area->x1 + 1;
   1f97e:	b29b      	uxth	r3, r3
	u16_t h = area->y2 - area->y1 + 1;
   1f980:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 3U * h;
   1f982:	fb04 f603 	mul.w	r6, r4, r3
	desc.width = w;
   1f986:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   1f98a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1f98e:	6843      	ldr	r3, [r0, #4]
   1f990:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 3U * h;
   1f992:	eb06 0646 	add.w	r6, r6, r6, lsl #1
	desc.height = h;
   1f996:	f8ad 4012 	strh.w	r4, [sp, #18]
   1f99a:	fa1f f28c 	uxth.w	r2, ip
   1f99e:	689c      	ldr	r4, [r3, #8]
	desc.buf_size = w * 3U * h;
   1f9a0:	9603      	str	r6, [sp, #12]
   1f9a2:	ab03      	add	r3, sp, #12
   1f9a4:	b2b9      	uxth	r1, r7
   1f9a6:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   1f9a8:	4628      	mov	r0, r5
   1f9aa:	f004 fdaa 	bl	24502 <lv_disp_flush_ready>
}
   1f9ae:	b007      	add	sp, #28
   1f9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f9b2 <lvgl_set_px_cb_24bit>:

void lvgl_set_px_cb_24bit(struct _disp_drv_t *disp_drv,
		u8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   1f9b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   1f9b4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
{
   1f9b8:	f89d 401c 	ldrb.w	r4, [sp, #28]
   1f9bc:	9806      	ldr	r0, [sp, #24]
	u8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   1f9be:	fb05 3302 	mla	r3, r5, r2, r3
   1f9c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	lv_color32_t converted_color;

#ifdef CONFIG_LVGL_COLOR_DEPTH_32
	if (opa != LV_OPA_COVER) {
   1f9c6:	2cff      	cmp	r4, #255	; 0xff
	u8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   1f9c8:	eb01 0603 	add.w	r6, r1, r3
	if (opa != LV_OPA_COVER) {
   1f9cc:	d027      	beq.n	1fa1e <lvgl_set_px_cb_24bit+0x6c>
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1f9ce:	5ccd      	ldrb	r5, [r1, r3]
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   1f9d0:	f896 c001 	ldrb.w	ip, [r6, #1]
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1f9d4:	b2a2      	uxth	r2, r4
   1f9d6:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
   1f9da:	fb15 f504 	smulbb	r5, r5, r4
   1f9de:	f3c0 4707 	ubfx	r7, r0, #16, #8
   1f9e2:	fb07 5702 	mla	r7, r7, r2, r5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   1f9e6:	fb1c fc04 	smulbb	ip, ip, r4
   1f9ea:	f3c0 2507 	ubfx	r5, r0, #8, #8
   1f9ee:	fb05 c502 	mla	r5, r5, r2, ip
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
   1f9f2:	f896 c002 	ldrb.w	ip, [r6, #2]
   1f9f6:	fa5f fe80 	uxtb.w	lr, r0
   1f9fa:	fb1c f404 	smulbb	r4, ip, r4
   1f9fe:	fb0e 4202 	mla	r2, lr, r2, r4
   1fa02:	f3c2 2207 	ubfx	r2, r2, #8, #8
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   1fa06:	f3c5 2507 	ubfx	r5, r5, #8, #8
   1fa0a:	f362 0007 	bfi	r0, r2, #0, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1fa0e:	f3c7 2707 	ubfx	r7, r7, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   1fa12:	f365 200f 	bfi	r0, r5, #8, #8
   1fa16:	f367 4017 	bfi	r0, r7, #16, #8
   1fa1a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
		color = lv_color_mix(color, mix_color, opa);
	}
#endif

	converted_color.full = lv_color_to32(color);
	*buf_xy = converted_color.ch.red;
   1fa1e:	f3c0 4207 	ubfx	r2, r0, #16, #8
   1fa22:	54ca      	strb	r2, [r1, r3]
	*(buf_xy + 1) = converted_color.ch.green;
   1fa24:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1fa28:	7073      	strb	r3, [r6, #1]
	*(buf_xy + 2) = converted_color.ch.blue;
   1fa2a:	70b0      	strb	r0, [r6, #2]
}
   1fa2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fa2e <lvgl_flush_cb_32bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_32bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1fa2e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *display_dev = (struct device *)disp_drv->user_data;
	u16_t w = area->x2 - area->x1 + 1;
   1fa30:	888b      	ldrh	r3, [r1, #4]
	u16_t h = area->y2 - area->y1 + 1;
   1fa32:	88cc      	ldrh	r4, [r1, #6]
	u16_t w = area->x2 - area->x1 + 1;
   1fa34:	f9b1 6000 	ldrsh.w	r6, [r1]
	u16_t h = area->y2 - area->y1 + 1;
   1fa38:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	u16_t w = area->x2 - area->x1 + 1;
   1fa3c:	3301      	adds	r3, #1
	u16_t h = area->y2 - area->y1 + 1;
   1fa3e:	3401      	adds	r4, #1
{
   1fa40:	b087      	sub	sp, #28
   1fa42:	4605      	mov	r5, r0
	u16_t w = area->x2 - area->x1 + 1;
   1fa44:	1b9b      	subs	r3, r3, r6
	struct device *display_dev = (struct device *)disp_drv->user_data;
   1fa46:	6a00      	ldr	r0, [r0, #32]
	u16_t h = area->y2 - area->y1 + 1;
   1fa48:	1be4      	subs	r4, r4, r7
	u16_t w = area->x2 - area->x1 + 1;
   1fa4a:	b29b      	uxth	r3, r3
	u16_t h = area->y2 - area->y1 + 1;
   1fa4c:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 4U * h;
   1fa4e:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   1fa52:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   1fa56:	f8ad 3014 	strh.w	r3, [sp, #20]
   1fa5a:	6843      	ldr	r3, [r0, #4]
   1fa5c:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 4U * h;
   1fa5e:	0089      	lsls	r1, r1, #2
   1fa60:	9103      	str	r1, [sp, #12]
	desc.height = h;
   1fa62:	f8ad 4012 	strh.w	r4, [sp, #18]
   1fa66:	b2ba      	uxth	r2, r7
   1fa68:	689c      	ldr	r4, [r3, #8]
   1fa6a:	b2b1      	uxth	r1, r6
   1fa6c:	ab03      	add	r3, sp, #12
   1fa6e:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   1fa70:	4628      	mov	r0, r5
   1fa72:	f004 fd46 	bl	24502 <lv_disp_flush_ready>
}
   1fa76:	b007      	add	sp, #28
   1fa78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fa7a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1fa7a:	f7f8 bcf1 	b.w	18460 <SystemInit>

0001fa7e <ah>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#define LOG_MODULE_NAME bt_rpa
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
   1fa7e:	b530      	push	{r4, r5, lr}
   1fa80:	b085      	sub	sp, #20
   1fa82:	4604      	mov	r4, r0
   1fa84:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1fa86:	4668      	mov	r0, sp
   1fa88:	2203      	movs	r2, #3
   1fa8a:	f7ff fdb5 	bl	1f5f8 <memcpy>
	(void)memset(res + 3, 0, 13);
   1fa8e:	220d      	movs	r2, #13
   1fa90:	2100      	movs	r1, #0
   1fa92:	f10d 0003 	add.w	r0, sp, #3
   1fa96:	f7ff fdd9 	bl	1f64c <memset>

	err = bt_encrypt_le(irk, res, res);
   1fa9a:	4620      	mov	r0, r4
   1fa9c:	466a      	mov	r2, sp
   1fa9e:	4669      	mov	r1, sp
   1faa0:	f002 f8f2 	bl	21c88 <bt_encrypt_le>
	if (err) {
   1faa4:	4604      	mov	r4, r0
   1faa6:	b920      	cbnz	r0, 1fab2 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1faa8:	2203      	movs	r2, #3
   1faaa:	4669      	mov	r1, sp
   1faac:	4628      	mov	r0, r5
   1faae:	f7ff fda3 	bl	1f5f8 <memcpy>

	return 0;
}
   1fab2:	4620      	mov	r0, r4
   1fab4:	b005      	add	sp, #20
   1fab6:	bd30      	pop	{r4, r5, pc}

0001fab8 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
   1fab8:	b513      	push	{r0, r1, r4, lr}
   1faba:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1fabc:	aa01      	add	r2, sp, #4
   1fabe:	3103      	adds	r1, #3
   1fac0:	f7ff ffdd 	bl	1fa7e <ah>
	if (err) {
   1fac4:	b948      	cbnz	r0, 1fada <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1fac6:	2203      	movs	r2, #3
   1fac8:	a901      	add	r1, sp, #4
   1faca:	4620      	mov	r0, r4
   1facc:	f7ff fd84 	bl	1f5d8 <memcmp>
   1fad0:	fab0 f080 	clz	r0, r0
   1fad4:	0940      	lsrs	r0, r0, #5
}
   1fad6:	b002      	add	sp, #8
   1fad8:	bd10      	pop	{r4, pc}
		return false;
   1fada:	2000      	movs	r0, #0
   1fadc:	e7fb      	b.n	1fad6 <bt_rpa_irk_matches+0x1e>

0001fade <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
   1fade:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
   1fae0:	1ccd      	adds	r5, r1, #3
{
   1fae2:	4606      	mov	r6, r0
   1fae4:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
   1fae6:	4628      	mov	r0, r5
   1fae8:	2103      	movs	r1, #3
   1faea:	f7f1 f813 	bl	10b14 <bt_rand>
	if (err) {
   1faee:	b960      	cbnz	r0, 1fb0a <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1faf0:	7963      	ldrb	r3, [r4, #5]
   1faf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1faf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fafa:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1fafc:	4622      	mov	r2, r4
   1fafe:	4629      	mov	r1, r5
   1fb00:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1fb02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1fb06:	f7ff bfba 	b.w	1fa7e <ah>
}
   1fb0a:	bd70      	pop	{r4, r5, r6, pc}

0001fb0c <send_cmd_status>:
{
   1fb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1fb10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1fb14:	4680      	mov	r8, r0
   1fb16:	460f      	mov	r7, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1fb18:	200f      	movs	r0, #15
   1fb1a:	2100      	movs	r1, #0
   1fb1c:	f7e8 ffc6 	bl	8aac <bt_buf_get_evt>
	*(u8_t *)net_buf_user_data(buf) = type;
   1fb20:	2501      	movs	r5, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1fb22:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1fb26:	4604      	mov	r4, r0
   1fb28:	7505      	strb	r5, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1fb2a:	2102      	movs	r1, #2
   1fb2c:	4630      	mov	r0, r6
   1fb2e:	f002 fd81 	bl	22634 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1fb32:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1fb34:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1fb36:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1fb38:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1fb3a:	4630      	mov	r0, r6
   1fb3c:	f002 fd7a 	bl	22634 <net_buf_simple_add>
	evt->ncmd = 1U;
   1fb40:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   1fb42:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1fb44:	f8a0 8002 	strh.w	r8, [r0, #2]
	bt_recv_prio(buf);
   1fb48:	4620      	mov	r0, r4
}
   1fb4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   1fb4e:	f7e8 b8fd 	b.w	7d4c <bt_recv_prio>

0001fb52 <sys_memcpy_swap.constprop.2>:
   1fb52:	f101 0320 	add.w	r3, r1, #32
   1fb56:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1fb58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fb5c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1fb60:	428b      	cmp	r3, r1
   1fb62:	d1f9      	bne.n	1fb58 <sys_memcpy_swap.constprop.2+0x6>
}
   1fb64:	4770      	bx	lr

0001fb66 <default_CSPRNG>:
{
   1fb66:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1fb68:	f7f0 ffd4 	bl	10b14 <bt_rand>
}
   1fb6c:	fab0 f080 	clz	r0, r0
   1fb70:	0940      	lsrs	r0, r0, #5
   1fb72:	bd08      	pop	{r3, pc}

0001fb74 <bt_settings_decode_key>:
{
   1fb74:	b570      	push	{r4, r5, r6, lr}
   1fb76:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1fb78:	2100      	movs	r1, #0
{
   1fb7a:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1fb7c:	f7ff f9bc 	bl	1eef8 <settings_name_next>
   1fb80:	280d      	cmp	r0, #13
   1fb82:	d118      	bne.n	1fbb6 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1fb84:	7b23      	ldrb	r3, [r4, #12]
   1fb86:	2b30      	cmp	r3, #48	; 0x30
   1fb88:	d111      	bne.n	1fbae <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1fb8a:	2300      	movs	r3, #0
   1fb8c:	702b      	strb	r3, [r5, #0]
   1fb8e:	f104 060c 	add.w	r6, r4, #12
   1fb92:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1fb94:	462a      	mov	r2, r5
   1fb96:	4620      	mov	r0, r4
   1fb98:	2301      	movs	r3, #1
   1fb9a:	2102      	movs	r1, #2
   1fb9c:	3402      	adds	r4, #2
   1fb9e:	f7fd fa84 	bl	1d0aa <hex2bin>
	for (u8_t i = 0; i < 6; i++) {
   1fba2:	42b4      	cmp	r4, r6
   1fba4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1fba8:	d1f4      	bne.n	1fb94 <bt_settings_decode_key+0x20>
	return 0;
   1fbaa:	2000      	movs	r0, #0
}
   1fbac:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1fbae:	2b31      	cmp	r3, #49	; 0x31
   1fbb0:	d101      	bne.n	1fbb6 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1fbb2:	2301      	movs	r3, #1
   1fbb4:	e7ea      	b.n	1fb8c <bt_settings_decode_key+0x18>
		return -EINVAL;
   1fbb6:	f06f 0015 	mvn.w	r0, #21
   1fbba:	e7f7      	b.n	1fbac <bt_settings_decode_key+0x38>

0001fbbc <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1fbbc:	b510      	push	{r4, lr}
   1fbbe:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1fbc0:	7801      	ldrb	r1, [r0, #0]
   1fbc2:	7822      	ldrb	r2, [r4, #0]
   1fbc4:	428a      	cmp	r2, r1
{
   1fbc6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1fbc8:	d00e      	beq.n	1fbe8 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1fbca:	4669      	mov	r1, sp
   1fbcc:	f7e6 fce2 	bl	6594 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1fbd0:	a905      	add	r1, sp, #20
   1fbd2:	4620      	mov	r0, r4
   1fbd4:	f7e6 fcde 	bl	6594 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1fbd8:	2210      	movs	r2, #16
   1fbda:	f10d 0115 	add.w	r1, sp, #21
   1fbde:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1fbe2:	f7ff fcf9 	bl	1f5d8 <memcmp>
   1fbe6:	e006      	b.n	1fbf6 <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   1fbe8:	2a01      	cmp	r2, #1
   1fbea:	d00a      	beq.n	1fc02 <bt_uuid_cmp+0x46>
   1fbec:	b12a      	cbz	r2, 1fbfa <bt_uuid_cmp+0x3e>
   1fbee:	2a02      	cmp	r2, #2
   1fbf0:	d00a      	beq.n	1fc08 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   1fbf2:	f06f 0015 	mvn.w	r0, #21
}
   1fbf6:	b00a      	add	sp, #40	; 0x28
   1fbf8:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1fbfa:	8840      	ldrh	r0, [r0, #2]
   1fbfc:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1fbfe:	1ac0      	subs	r0, r0, r3
   1fc00:	e7f9      	b.n	1fbf6 <bt_uuid_cmp+0x3a>
   1fc02:	6840      	ldr	r0, [r0, #4]
   1fc04:	6863      	ldr	r3, [r4, #4]
   1fc06:	e7fa      	b.n	1fbfe <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1fc08:	2210      	movs	r2, #16
   1fc0a:	1c61      	adds	r1, r4, #1
   1fc0c:	3001      	adds	r0, #1
   1fc0e:	e7e8      	b.n	1fbe2 <bt_uuid_cmp+0x26>

0001fc10 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const u8_t *data, u8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1fc10:	2a04      	cmp	r2, #4
{
   1fc12:	b538      	push	{r3, r4, r5, lr}
   1fc14:	460c      	mov	r4, r1
	switch (data_len) {
   1fc16:	d00d      	beq.n	1fc34 <bt_uuid_create+0x24>
   1fc18:	2a10      	cmp	r2, #16
   1fc1a:	d019      	beq.n	1fc50 <bt_uuid_create+0x40>
   1fc1c:	2a02      	cmp	r2, #2
   1fc1e:	f04f 0300 	mov.w	r3, #0
   1fc22:	d11b      	bne.n	1fc5c <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1fc24:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   1fc26:	784a      	ldrb	r2, [r1, #1]
   1fc28:	780b      	ldrb	r3, [r1, #0]
   1fc2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1fc2e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1fc30:	2001      	movs	r0, #1
}
   1fc32:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1fc34:	2301      	movs	r3, #1
   1fc36:	7003      	strb	r3, [r0, #0]
   1fc38:	78a2      	ldrb	r2, [r4, #2]
   1fc3a:	78c9      	ldrb	r1, [r1, #3]
   1fc3c:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1fc3e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   1fc42:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1fc44:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1fc48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1fc4c:	6042      	str	r2, [r0, #4]
		break;
   1fc4e:	e7ef      	b.n	1fc30 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1fc50:	2302      	movs	r3, #2
   1fc52:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1fc56:	f7ff fccf 	bl	1f5f8 <memcpy>
		break;
   1fc5a:	e7e9      	b.n	1fc30 <bt_uuid_create+0x20>
		return false;
   1fc5c:	4618      	mov	r0, r3
   1fc5e:	e7e8      	b.n	1fc32 <bt_uuid_create+0x22>

0001fc60 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fc60:	f3bf 8f5b 	dmb	ish
   1fc64:	e850 3f00 	ldrex	r3, [r0]
   1fc68:	ea03 0201 	and.w	r2, r3, r1
   1fc6c:	e840 2c00 	strex	ip, r2, [r0]
   1fc70:	f1bc 0f00 	cmp.w	ip, #0
   1fc74:	d1f6      	bne.n	1fc64 <atomic_and+0x4>
   1fc76:	f3bf 8f5b 	dmb	ish
}
   1fc7a:	4618      	mov	r0, r3
   1fc7c:	4770      	bx	lr

0001fc7e <bt_addr_copy>:
   1fc7e:	2206      	movs	r2, #6
   1fc80:	f7ff bcba 	b.w	1f5f8 <memcpy>

0001fc84 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1fc84:	2207      	movs	r2, #7
   1fc86:	f7ff bcb7 	b.w	1f5f8 <memcpy>

0001fc8a <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fc8a:	f3bf 8f5b 	dmb	ish
   1fc8e:	e850 3f00 	ldrex	r3, [r0]
   1fc92:	ea43 0201 	orr.w	r2, r3, r1
   1fc96:	e840 2c00 	strex	ip, r2, [r0]
   1fc9a:	f1bc 0f00 	cmp.w	ip, #0
   1fc9e:	d1f6      	bne.n	1fc8e <atomic_or+0x4>
   1fca0:	f3bf 8f5b 	dmb	ish
}
   1fca4:	4618      	mov	r0, r3
   1fca6:	4770      	bx	lr

0001fca8 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1fca8:	460b      	mov	r3, r1
   1fcaa:	b410      	push	{r4}
   1fcac:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fcae:	f001 041f 	and.w	r4, r1, #31
   1fcb2:	2101      	movs	r1, #1
   1fcb4:	40a1      	lsls	r1, r4

	if (val) {
   1fcb6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1fcba:	b112      	cbz	r2, 1fcc2 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1fcbc:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fcbe:	f7ff bfe4 	b.w	1fc8a <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fcc2:	43c9      	mvns	r1, r1
}
   1fcc4:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fcc6:	f7ff bfcb 	b.w	1fc60 <atomic_and>

0001fcca <unpair>:
{
   1fcca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fccc:	4606      	mov	r6, r0
   1fcce:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   1fcd0:	f7e9 fbae 	bl	9430 <bt_conn_lookup_addr_le>
	if (conn) {
   1fcd4:	4604      	mov	r4, r0
   1fcd6:	b970      	cbnz	r0, 1fcf6 <unpair+0x2c>
			keys = bt_keys_find_addr(id, addr);
   1fcd8:	4639      	mov	r1, r7
   1fcda:	4630      	mov	r0, r6
   1fcdc:	f7ee fdba 	bl	e854 <bt_keys_find_addr>
		if (keys) {
   1fce0:	4605      	mov	r5, r0
   1fce2:	b110      	cbz	r0, 1fcea <unpair+0x20>
			bt_keys_clear(keys);
   1fce4:	4628      	mov	r0, r5
   1fce6:	f7ee fdc5 	bl	e874 <bt_keys_clear>
		bt_gatt_clear(id, addr);
   1fcea:	4639      	mov	r1, r7
   1fcec:	4630      	mov	r0, r6
}
   1fcee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_gatt_clear(id, addr);
   1fcf2:	f7ec bf17 	b.w	cb24 <bt_gatt_clear>
		if (conn->type == BT_CONN_TYPE_LE) {
   1fcf6:	7883      	ldrb	r3, [r0, #2]
   1fcf8:	2b01      	cmp	r3, #1
   1fcfa:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   1fcfe:	bf04      	itt	eq
   1fd00:	f8d0 509c 	ldreq.w	r5, [r0, #156]	; 0x9c
			conn->le.keys = NULL;
   1fd04:	f8c0 309c 	streq.w	r3, [r0, #156]	; 0x9c
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   1fd08:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   1fd0c:	bf18      	it	ne
   1fd0e:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   1fd10:	f000 f94c 	bl	1ffac <bt_conn_disconnect>
		bt_conn_unref(conn);
   1fd14:	4620      	mov	r0, r4
   1fd16:	f000 f946 	bl	1ffa6 <bt_conn_unref>
		if (!keys) {
   1fd1a:	2d00      	cmp	r5, #0
   1fd1c:	d1e2      	bne.n	1fce4 <unpair+0x1a>
   1fd1e:	e7db      	b.n	1fcd8 <unpair+0xe>

0001fd20 <unpair_remote>:
	unpair(*id, &info->addr);
   1fd20:	780b      	ldrb	r3, [r1, #0]
   1fd22:	4601      	mov	r1, r0
   1fd24:	4618      	mov	r0, r3
   1fd26:	f7ff bfd0 	b.w	1fcca <unpair>

0001fd2a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fd2a:	f3bf 8f5b 	dmb	ish
   1fd2e:	6800      	ldr	r0, [r0, #0]
   1fd30:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fd34:	4108      	asrs	r0, r1
}
   1fd36:	f000 0001 	and.w	r0, r0, #1
   1fd3a:	4770      	bx	lr

0001fd3c <sys_put_le64>:
	dst[1] = val >> 8;
   1fd3c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1fd40:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1fd42:	0e00      	lsrs	r0, r0, #24
   1fd44:	7053      	strb	r3, [r2, #1]
   1fd46:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1fd48:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1fd4a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1fd4e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1fd50:	7093      	strb	r3, [r2, #2]
   1fd52:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1fd54:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1fd56:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1fd58:	71d1      	strb	r1, [r2, #7]
}
   1fd5a:	4770      	bx	lr

0001fd5c <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
   1fd5c:	f100 0126 	add.w	r1, r0, #38	; 0x26
   1fd60:	3001      	adds	r0, #1
   1fd62:	f7e7 bb35 	b.w	73d0 <hci_id_add>

0001fd66 <addr_res_enable>:
{
   1fd66:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1fd68:	2101      	movs	r1, #1
{
   1fd6a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1fd6c:	f242 002d 	movw	r0, #8237	; 0x202d
   1fd70:	f7e7 f8bc 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
   1fd74:	4604      	mov	r4, r0
   1fd76:	b158      	cbz	r0, 1fd90 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   1fd78:	4629      	mov	r1, r5
   1fd7a:	3008      	adds	r0, #8
   1fd7c:	f002 fc69 	bl	22652 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1fd80:	4621      	mov	r1, r4
   1fd82:	2200      	movs	r2, #0
   1fd84:	f242 002d 	movw	r0, #8237	; 0x202d
}
   1fd88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1fd8c:	f7e7 ba1c 	b.w	71c8 <bt_hci_cmd_send_sync>
}
   1fd90:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fd94:	bd38      	pop	{r3, r4, r5, pc}

0001fd96 <bt_lookup_id_addr>:
{
   1fd96:	b510      	push	{r4, lr}
   1fd98:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1fd9a:	f7ee fd21 	bl	e7e0 <bt_keys_find_irk>
		if (keys) {
   1fd9e:	b100      	cbz	r0, 1fda2 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1fda0:	1c44      	adds	r4, r0, #1
}
   1fda2:	4620      	mov	r0, r4
   1fda4:	bd10      	pop	{r4, pc}

0001fda6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1fda6:	8802      	ldrh	r2, [r0, #0]
   1fda8:	8843      	ldrh	r3, [r0, #2]
   1fdaa:	429a      	cmp	r2, r3
{
   1fdac:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1fdae:	d818      	bhi.n	1fde2 <bt_le_conn_params_valid+0x3c>
   1fdb0:	2a05      	cmp	r2, #5
   1fdb2:	d916      	bls.n	1fde2 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1fdb4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1fdb8:	d813      	bhi.n	1fde2 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1fdba:	8884      	ldrh	r4, [r0, #4]
   1fdbc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1fdc0:	d20f      	bcs.n	1fde2 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1fdc2:	88c1      	ldrh	r1, [r0, #6]
   1fdc4:	f1a1 020a 	sub.w	r2, r1, #10
   1fdc8:	b292      	uxth	r2, r2
   1fdca:	f640 4076 	movw	r0, #3190	; 0xc76
   1fdce:	4282      	cmp	r2, r0
   1fdd0:	d807      	bhi.n	1fde2 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   1fdd2:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1fdd6:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1fdda:	bf34      	ite	cc
   1fddc:	2001      	movcc	r0, #1
   1fdde:	2000      	movcs	r0, #0
}
   1fde0:	bd10      	pop	{r4, pc}
		return false;
   1fde2:	2000      	movs	r0, #0
   1fde4:	e7fc      	b.n	1fde0 <bt_le_conn_params_valid+0x3a>

0001fde6 <update_pending_id>:
	if (keys->flags & BT_KEYS_ID_PENDING_ADD) {
   1fde6:	7a43      	ldrb	r3, [r0, #9]
   1fde8:	0759      	lsls	r1, r3, #29
   1fdea:	d504      	bpl.n	1fdf6 <update_pending_id+0x10>
		keys->flags &= ~BT_KEYS_ID_PENDING_ADD;
   1fdec:	f023 0304 	bic.w	r3, r3, #4
   1fdf0:	7243      	strb	r3, [r0, #9]
		bt_id_add(keys);
   1fdf2:	f7e7 bd23 	b.w	783c <bt_id_add>
	if (keys->flags & BT_KEYS_ID_PENDING_DEL) {
   1fdf6:	0719      	lsls	r1, r3, #28
   1fdf8:	d504      	bpl.n	1fe04 <update_pending_id+0x1e>
		keys->flags &= ~BT_KEYS_ID_PENDING_DEL;
   1fdfa:	f023 0308 	bic.w	r3, r3, #8
   1fdfe:	7243      	strb	r3, [r0, #9]
		bt_id_del(keys);
   1fe00:	f7e7 bdfa 	b.w	79f8 <bt_id_del>
}
   1fe04:	4770      	bx	lr

0001fe06 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1fe06:	2301      	movs	r3, #1
{
   1fe08:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1fe0a:	2106      	movs	r1, #6
{
   1fe0c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1fe0e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1fe12:	f7f0 fe7f 	bl	10b14 <bt_rand>
	if (err) {
   1fe16:	b918      	cbnz	r0, 1fe20 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1fe18:	79a3      	ldrb	r3, [r4, #6]
   1fe1a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1fe1e:	71a3      	strb	r3, [r4, #6]
}
   1fe20:	bd10      	pop	{r4, pc}

0001fe22 <bt_send>:
		return bt_hci_ecc_send(buf);
   1fe22:	f7e6 b94f 	b.w	60c4 <bt_hci_ecc_send>

0001fe26 <bt_addr_le_is_bonded>:
{
   1fe26:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1fe28:	f7ee fd14 	bl	e854 <bt_keys_find_addr>
		return keys && keys->keys;
   1fe2c:	b118      	cbz	r0, 1fe36 <bt_addr_le_is_bonded+0x10>
   1fe2e:	8940      	ldrh	r0, [r0, #10]
   1fe30:	3000      	adds	r0, #0
   1fe32:	bf18      	it	ne
   1fe34:	2001      	movne	r0, #1
}
   1fe36:	bd08      	pop	{r3, pc}

0001fe38 <bt_le_adv_start>:
{
   1fe38:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1fe3a:	7844      	ldrb	r4, [r0, #1]
   1fe3c:	f014 0410 	ands.w	r4, r4, #16
   1fe40:	d106      	bne.n	1fe50 <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
   1fe42:	9401      	str	r4, [sp, #4]
   1fe44:	9c04      	ldr	r4, [sp, #16]
   1fe46:	9400      	str	r4, [sp, #0]
   1fe48:	f7e8 fac6 	bl	83d8 <bt_le_adv_start_internal>
}
   1fe4c:	b002      	add	sp, #8
   1fe4e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fe50:	f06f 0015 	mvn.w	r0, #21
   1fe54:	e7fa      	b.n	1fe4c <bt_le_adv_start+0x14>

0001fe56 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1fe56:	6880      	ldr	r0, [r0, #8]
   1fe58:	f7e8 bcd4 	b.w	8804 <enh_conn_complete>

0001fe5c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fe5c:	f3bf 8f5b 	dmb	ish
   1fe60:	6800      	ldr	r0, [r0, #0]
   1fe62:	f3bf 8f5b 	dmb	ish
}
   1fe66:	4770      	bx	lr

0001fe68 <atomic_test_bit>:
{
   1fe68:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1fe6a:	f7ff fff7 	bl	1fe5c <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fe6e:	4108      	asrs	r0, r1
}
   1fe70:	f000 0001 	and.w	r0, r0, #1
   1fe74:	bd08      	pop	{r3, pc}

0001fe76 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   1fe76:	89c3      	ldrh	r3, [r0, #14]
{
   1fe78:	b510      	push	{r4, lr}
   1fe7a:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   1fe7c:	b12b      	cbz	r3, 1fe8a <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   1fe7e:	6900      	ldr	r0, [r0, #16]
   1fe80:	f7f7 fba8 	bl	175d4 <net_buf_unref>
	conn->rx = NULL;
   1fe84:	2300      	movs	r3, #0
   1fe86:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   1fe88:	81e3      	strh	r3, [r4, #14]
}
   1fe8a:	bd10      	pop	{r4, pc}

0001fe8c <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1fe8c:	f3bf 8f5b 	dmb	ish
   1fe90:	e850 3f00 	ldrex	r3, [r0]
   1fe94:	1e5a      	subs	r2, r3, #1
   1fe96:	e840 2100 	strex	r1, r2, [r0]
   1fe9a:	2900      	cmp	r1, #0
   1fe9c:	d1f8      	bne.n	1fe90 <atomic_dec+0x4>
   1fe9e:	f3bf 8f5b 	dmb	ish
}
   1fea2:	4618      	mov	r0, r3
   1fea4:	4770      	bx	lr

0001fea6 <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1fea6:	f3bf 8f5b 	dmb	ish
   1feaa:	e850 3f00 	ldrex	r3, [r0]
   1feae:	1c5a      	adds	r2, r3, #1
   1feb0:	e840 2100 	strex	r1, r2, [r0]
   1feb4:	2900      	cmp	r1, #0
   1feb6:	d1f8      	bne.n	1feaa <atomic_inc+0x4>
   1feb8:	f3bf 8f5b 	dmb	ish
}
   1febc:	4618      	mov	r0, r3
   1febe:	4770      	bx	lr

0001fec0 <tx_notify>:
{
   1fec0:	b570      	push	{r4, r5, r6, lr}
   1fec2:	4604      	mov	r4, r0
	__asm__ volatile(
   1fec4:	f04f 0220 	mov.w	r2, #32
   1fec8:	f3ef 8311 	mrs	r3, BASEPRI
   1fecc:	f382 8811 	msr	BASEPRI, r2
   1fed0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1fed4:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1fed6:	b920      	cbnz	r0, 1fee2 <tx_notify+0x22>
	__asm__ volatile(
   1fed8:	f383 8811 	msr	BASEPRI, r3
   1fedc:	f3bf 8f6f 	isb	sy
}
   1fee0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1fee4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1fee6:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fee8:	4288      	cmp	r0, r1
	list->tail = node;
   1feea:	bf08      	it	eq
   1feec:	6262      	streq	r2, [r4, #36]	; 0x24
   1feee:	f383 8811 	msr	BASEPRI, r3
   1fef2:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1fef6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1fefa:	f7e8 fea1 	bl	8c40 <tx_free>
		cb(conn, user_data);
   1fefe:	4631      	mov	r1, r6
   1ff00:	4620      	mov	r0, r4
   1ff02:	47a8      	blx	r5
	while (1) {
   1ff04:	e7de      	b.n	1fec4 <tx_notify+0x4>

0001ff06 <tx_complete_work>:
	tx_notify(conn);
   1ff06:	3828      	subs	r0, #40	; 0x28
   1ff08:	f7ff bfda 	b.w	1fec0 <tx_notify>

0001ff0c <bt_conn_set_security>:
	if (conn->state != BT_CONN_CONNECTED) {
   1ff0c:	7b43      	ldrb	r3, [r0, #13]
   1ff0e:	2b06      	cmp	r3, #6
{
   1ff10:	b510      	push	{r4, lr}
   1ff12:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ff14:	d128      	bne.n	1ff68 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1ff16:	7a43      	ldrb	r3, [r0, #9]
   1ff18:	428b      	cmp	r3, r1
   1ff1a:	d228      	bcs.n	1ff6e <bt_conn_set_security+0x62>
   1ff1c:	7a83      	ldrb	r3, [r0, #10]
   1ff1e:	428b      	cmp	r3, r1
   1ff20:	d225      	bcs.n	1ff6e <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ff22:	f3bf 8f5b 	dmb	ish
	if (val) {
   1ff26:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1ff28:	f100 0304 	add.w	r3, r0, #4
   1ff2c:	d513      	bpl.n	1ff56 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ff2e:	e853 2f00 	ldrex	r2, [r3]
   1ff32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1ff36:	e843 2000 	strex	r0, r2, [r3]
   1ff3a:	2800      	cmp	r0, #0
   1ff3c:	d1f7      	bne.n	1ff2e <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ff3e:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1ff42:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1ff46:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   1ff48:	4620      	mov	r0, r4
   1ff4a:	f7ee fa51 	bl	e3f0 <bt_smp_start_security>
	if (err) {
   1ff4e:	b108      	cbz	r0, 1ff54 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   1ff50:	7a63      	ldrb	r3, [r4, #9]
   1ff52:	72a3      	strb	r3, [r4, #10]
}
   1ff54:	bd10      	pop	{r4, pc}
   1ff56:	e853 2f00 	ldrex	r2, [r3]
   1ff5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1ff5e:	e843 2000 	strex	r0, r2, [r3]
   1ff62:	2800      	cmp	r0, #0
   1ff64:	d0eb      	beq.n	1ff3e <bt_conn_set_security+0x32>
   1ff66:	e7f6      	b.n	1ff56 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   1ff68:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1ff6c:	e7f2      	b.n	1ff54 <bt_conn_set_security+0x48>
		return 0;
   1ff6e:	2000      	movs	r0, #0
   1ff70:	e7f0      	b.n	1ff54 <bt_conn_set_security+0x48>

0001ff72 <bt_conn_get_security>:
}
   1ff72:	7a40      	ldrb	r0, [r0, #9]
   1ff74:	4770      	bx	lr

0001ff76 <bt_conn_addr_le_cmp>:
{
   1ff76:	b538      	push	{r3, r4, r5, lr}
   1ff78:	460d      	mov	r5, r1
   1ff7a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1ff7c:	f100 0170 	add.w	r1, r0, #112	; 0x70
   1ff80:	2207      	movs	r2, #7
   1ff82:	4628      	mov	r0, r5
   1ff84:	f7ff fb28 	bl	1f5d8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1ff88:	b160      	cbz	r0, 1ffa4 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1ff8a:	78e3      	ldrb	r3, [r4, #3]
   1ff8c:	2207      	movs	r2, #7
   1ff8e:	b933      	cbnz	r3, 1ff9e <bt_conn_addr_le_cmp+0x28>
   1ff90:	f104 017e 	add.w	r1, r4, #126	; 0x7e
   1ff94:	4628      	mov	r0, r5
}
   1ff96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ff9a:	f7ff bb1d 	b.w	1f5d8 <memcmp>
   1ff9e:	f104 0177 	add.w	r1, r4, #119	; 0x77
   1ffa2:	e7f7      	b.n	1ff94 <bt_conn_addr_le_cmp+0x1e>
   1ffa4:	bd38      	pop	{r3, r4, r5, pc}

0001ffa6 <bt_conn_unref>:
	atomic_dec(&conn->ref);
   1ffa6:	304c      	adds	r0, #76	; 0x4c
   1ffa8:	f7ff bf70 	b.w	1fe8c <atomic_dec>

0001ffac <bt_conn_disconnect>:
	switch (conn->state) {
   1ffac:	7b43      	ldrb	r3, [r0, #13]
   1ffae:	3b01      	subs	r3, #1
{
   1ffb0:	b570      	push	{r4, r5, r6, lr}
   1ffb2:	4604      	mov	r4, r0
   1ffb4:	460e      	mov	r6, r1
	switch (conn->state) {
   1ffb6:	2b06      	cmp	r3, #6
   1ffb8:	d805      	bhi.n	1ffc6 <bt_conn_disconnect+0x1a>
   1ffba:	e8df f003 	tbb	[pc, r3]
   1ffbe:	0408      	.short	0x0408
   1ffc0:	160c0e04 	.word	0x160c0e04
   1ffc4:	0c          	.byte	0x0c
   1ffc5:	00          	.byte	0x00
		return -ENOTCONN;
   1ffc6:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1ffca:	4628      	mov	r0, r5
   1ffcc:	bd70      	pop	{r4, r5, r6, pc}
		conn->err = reason;
   1ffce:	7321      	strb	r1, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ffd0:	2100      	movs	r1, #0
   1ffd2:	f7e9 f949 	bl	9268 <bt_conn_set_state>
		return 0;
   1ffd6:	2500      	movs	r5, #0
   1ffd8:	e7f7      	b.n	1ffca <bt_conn_disconnect+0x1e>
		conn->err = reason;
   1ffda:	7321      	strb	r1, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ffdc:	2100      	movs	r1, #0
   1ffde:	f7e9 f943 	bl	9268 <bt_conn_set_state>
}
   1ffe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_le_adv_stop();
   1ffe6:	f7e8 bb53 	b.w	8690 <bt_le_adv_stop>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1ffea:	2103      	movs	r1, #3
   1ffec:	f240 4006 	movw	r0, #1030	; 0x406
   1fff0:	f7e6 ff7c 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
   1fff4:	4605      	mov	r5, r0
   1fff6:	b198      	cbz	r0, 20020 <bt_conn_disconnect+0x74>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1fff8:	2103      	movs	r1, #3
   1fffa:	3008      	adds	r0, #8
   1fffc:	f002 fb1a 	bl	22634 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
   20000:	8823      	ldrh	r3, [r4, #0]
   20002:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
   20004:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   20006:	4629      	mov	r1, r5
   20008:	f240 4006 	movw	r0, #1030	; 0x406
   2000c:	f7e6 ffa4 	bl	6f58 <bt_hci_cmd_send>
	if (err) {
   20010:	4605      	mov	r5, r0
   20012:	2800      	cmp	r0, #0
   20014:	d1d9      	bne.n	1ffca <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   20016:	2107      	movs	r1, #7
   20018:	4620      	mov	r0, r4
   2001a:	f7e9 f925 	bl	9268 <bt_conn_set_state>
	return 0;
   2001e:	e7d4      	b.n	1ffca <bt_conn_disconnect+0x1e>
		return -ENOBUFS;
   20020:	f06f 0536 	mvn.w	r5, #54	; 0x36
   20024:	e7d1      	b.n	1ffca <bt_conn_disconnect+0x1e>

00020026 <bt_conn_le_conn_update>:
{
   20026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20028:	4607      	mov	r7, r0
   2002a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2002c:	f242 0013 	movw	r0, #8211	; 0x2013
   20030:	210e      	movs	r1, #14
   20032:	f7e6 ff5b 	bl	6eec <bt_hci_cmd_create>
	if (!buf) {
   20036:	4606      	mov	r6, r0
   20038:	b1d0      	cbz	r0, 20070 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   2003a:	210e      	movs	r1, #14
   2003c:	3008      	adds	r0, #8
   2003e:	f002 faf9 	bl	22634 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20042:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   20044:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20046:	2100      	movs	r1, #0
   20048:	f7ff fb00 	bl	1f64c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2004c:	883b      	ldrh	r3, [r7, #0]
   2004e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   20050:	882b      	ldrh	r3, [r5, #0]
   20052:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   20054:	886b      	ldrh	r3, [r5, #2]
   20056:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   20058:	88ab      	ldrh	r3, [r5, #4]
   2005a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2005c:	88eb      	ldrh	r3, [r5, #6]
   2005e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20060:	4631      	mov	r1, r6
   20062:	2200      	movs	r2, #0
   20064:	f242 0013 	movw	r0, #8211	; 0x2013
}
   20068:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2006c:	f7e7 b8ac 	b.w	71c8 <bt_hci_cmd_send_sync>
}
   20070:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020076 <l2cap_connected>:
}
   20076:	4770      	bx	lr

00020078 <l2cap_disconnected>:
   20078:	4770      	bx	lr

0002007a <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2007a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   2007c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2007e:	b17b      	cbz	r3, 200a0 <bt_l2cap_chan_remove+0x26>
   20080:	3b08      	subs	r3, #8
   20082:	2200      	movs	r2, #0
   20084:	b163      	cbz	r3, 200a0 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   20086:	428b      	cmp	r3, r1
   20088:	f103 0408 	add.w	r4, r3, #8
   2008c:	d10f      	bne.n	200ae <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2008e:	688b      	ldr	r3, [r1, #8]
   20090:	b93a      	cbnz	r2, 200a2 <bt_l2cap_chan_remove+0x28>
   20092:	6c82      	ldr	r2, [r0, #72]	; 0x48
	list->head = node;
   20094:	6443      	str	r3, [r0, #68]	; 0x44
Z_GENLIST_REMOVE(slist, snode)
   20096:	4294      	cmp	r4, r2
   20098:	d100      	bne.n	2009c <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2009a:	6483      	str	r3, [r0, #72]	; 0x48
	parent->next = child;
   2009c:	2300      	movs	r3, #0
   2009e:	608b      	str	r3, [r1, #8]
}
   200a0:	bd10      	pop	{r4, pc}
   200a2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   200a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
   200a6:	429c      	cmp	r4, r3
	list->tail = node;
   200a8:	bf08      	it	eq
   200aa:	6482      	streq	r2, [r0, #72]	; 0x48
   200ac:	e7f6      	b.n	2009c <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   200ae:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   200b0:	2b00      	cmp	r3, #0
   200b2:	d0f5      	beq.n	200a0 <bt_l2cap_chan_remove+0x26>
   200b4:	3b08      	subs	r3, #8
   200b6:	4622      	mov	r2, r4
   200b8:	e7e4      	b.n	20084 <bt_l2cap_chan_remove+0xa>

000200ba <bt_l2cap_chan_del>:
	if (!chan->conn) {
   200ba:	6803      	ldr	r3, [r0, #0]
{
   200bc:	b510      	push	{r4, lr}
   200be:	4604      	mov	r4, r0
	if (!chan->conn) {
   200c0:	b12b      	cbz	r3, 200ce <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   200c2:	6843      	ldr	r3, [r0, #4]
   200c4:	685b      	ldr	r3, [r3, #4]
   200c6:	b103      	cbz	r3, 200ca <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   200c8:	4798      	blx	r3
	chan->conn = NULL;
   200ca:	2300      	movs	r3, #0
   200cc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   200ce:	68e3      	ldr	r3, [r4, #12]
   200d0:	b10b      	cbz	r3, 200d6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   200d2:	4620      	mov	r0, r4
   200d4:	4798      	blx	r3
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   200d6:	f3bf 8f5b 	dmb	ish
   200da:	3430      	adds	r4, #48	; 0x30
   200dc:	2300      	movs	r3, #0
   200de:	e854 2f00 	ldrex	r2, [r4]
   200e2:	e844 3100 	strex	r1, r3, [r4]
   200e6:	2900      	cmp	r1, #0
   200e8:	d1f9      	bne.n	200de <bt_l2cap_chan_del+0x24>
   200ea:	f3bf 8f5b 	dmb	ish
}
   200ee:	bd10      	pop	{r4, pc}

000200f0 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   200f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   200f2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   200f4:	b173      	cbz	r3, 20114 <bt_l2cap_disconnected+0x24>
   200f6:	f1b3 0008 	subs.w	r0, r3, #8
   200fa:	d00b      	beq.n	20114 <bt_l2cap_disconnected+0x24>
   200fc:	681c      	ldr	r4, [r3, #0]
   200fe:	b104      	cbz	r4, 20102 <bt_l2cap_disconnected+0x12>
   20100:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   20102:	f7ff ffda 	bl	200ba <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20106:	b12c      	cbz	r4, 20114 <bt_l2cap_disconnected+0x24>
   20108:	68a3      	ldr	r3, [r4, #8]
   2010a:	b103      	cbz	r3, 2010e <bt_l2cap_disconnected+0x1e>
   2010c:	3b08      	subs	r3, #8
{
   2010e:	4620      	mov	r0, r4
   20110:	461c      	mov	r4, r3
   20112:	e7f6      	b.n	20102 <bt_l2cap_disconnected+0x12>
}
   20114:	bd10      	pop	{r4, pc}

00020116 <bt_l2cap_encrypt_change>:
{
   20116:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20118:	6c44      	ldr	r4, [r0, #68]	; 0x44
{
   2011a:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2011c:	b10c      	cbz	r4, 20122 <bt_l2cap_encrypt_change+0xc>
   2011e:	3c08      	subs	r4, #8
   20120:	b904      	cbnz	r4, 20124 <bt_l2cap_encrypt_change+0xe>
}
   20122:	bd38      	pop	{r3, r4, r5, pc}
		if (chan->ops->encrypt_change) {
   20124:	6863      	ldr	r3, [r4, #4]
   20126:	689b      	ldr	r3, [r3, #8]
   20128:	b113      	cbz	r3, 20130 <bt_l2cap_encrypt_change+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   2012a:	4629      	mov	r1, r5
   2012c:	4620      	mov	r0, r4
   2012e:	4798      	blx	r3
   20130:	68a4      	ldr	r4, [r4, #8]
   20132:	e7f3      	b.n	2011c <bt_l2cap_encrypt_change+0x6>

00020134 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   20134:	3104      	adds	r1, #4
   20136:	f7e9 ba5d 	b.w	95f4 <bt_conn_create_pdu_timeout>

0002013a <bt_l2cap_send_cb>:
{
   2013a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2013e:	4614      	mov	r4, r2
   20140:	4605      	mov	r5, r0
   20142:	4688      	mov	r8, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   20144:	f102 0008 	add.w	r0, r2, #8
   20148:	2104      	movs	r1, #4
{
   2014a:	461e      	mov	r6, r3
   2014c:	9f06      	ldr	r7, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   2014e:	f002 fa92 	bl	22676 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20152:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   20154:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20158:	3904      	subs	r1, #4
   2015a:	8001      	strh	r1, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2015c:	463b      	mov	r3, r7
   2015e:	4632      	mov	r2, r6
   20160:	4621      	mov	r1, r4
   20162:	4628      	mov	r0, r5
}
   20164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20168:	f7e8 bf8c 	b.w	9084 <bt_conn_send_cb>

0002016c <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2016c:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2016e:	b108      	cbz	r0, 20174 <bt_l2cap_le_lookup_tx_cid+0x8>
   20170:	3808      	subs	r0, #8
   20172:	b900      	cbnz	r0, 20176 <bt_l2cap_le_lookup_tx_cid+0xa>
}
   20174:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   20176:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   2017a:	428b      	cmp	r3, r1
   2017c:	d0fa      	beq.n	20174 <bt_l2cap_le_lookup_tx_cid+0x8>
   2017e:	6880      	ldr	r0, [r0, #8]
   20180:	e7f5      	b.n	2016e <bt_l2cap_le_lookup_tx_cid+0x2>

00020182 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20182:	6c40      	ldr	r0, [r0, #68]	; 0x44
   20184:	b108      	cbz	r0, 2018a <bt_l2cap_le_lookup_rx_cid+0x8>
   20186:	3808      	subs	r0, #8
   20188:	b900      	cbnz	r0, 2018c <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2018a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2018c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   2018e:	428b      	cmp	r3, r1
   20190:	d0fb      	beq.n	2018a <bt_l2cap_le_lookup_rx_cid+0x8>
   20192:	6880      	ldr	r0, [r0, #8]
   20194:	e7f6      	b.n	20184 <bt_l2cap_le_lookup_rx_cid+0x2>

00020196 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   20196:	4770      	bx	lr

00020198 <att_op_get_type>:
	switch (op) {
   20198:	280e      	cmp	r0, #14
   2019a:	d00a      	beq.n	201b2 <att_op_get_type+0x1a>
   2019c:	d81e      	bhi.n	201dc <att_op_get_type+0x44>
   2019e:	2807      	cmp	r0, #7
   201a0:	d015      	beq.n	201ce <att_op_get_type+0x36>
   201a2:	d80d      	bhi.n	201c0 <att_op_get_type+0x28>
   201a4:	2803      	cmp	r0, #3
   201a6:	d012      	beq.n	201ce <att_op_get_type+0x36>
   201a8:	d805      	bhi.n	201b6 <att_op_get_type+0x1e>
   201aa:	2801      	cmp	r0, #1
   201ac:	d00f      	beq.n	201ce <att_op_get_type+0x36>
   201ae:	2802      	cmp	r0, #2
   201b0:	d12b      	bne.n	2020a <att_op_get_type+0x72>
		return ATT_REQUEST;
   201b2:	2001      	movs	r0, #1
   201b4:	4770      	bx	lr
	switch (op) {
   201b6:	2805      	cmp	r0, #5
		return ATT_REQUEST;
   201b8:	bf0c      	ite	eq
   201ba:	2002      	moveq	r0, #2
   201bc:	2001      	movne	r0, #1
   201be:	4770      	bx	lr
	switch (op) {
   201c0:	280a      	cmp	r0, #10
   201c2:	d0f6      	beq.n	201b2 <att_op_get_type+0x1a>
   201c4:	d805      	bhi.n	201d2 <att_op_get_type+0x3a>
   201c6:	2808      	cmp	r0, #8
   201c8:	d0f3      	beq.n	201b2 <att_op_get_type+0x1a>
   201ca:	2809      	cmp	r0, #9
   201cc:	d11d      	bne.n	2020a <att_op_get_type+0x72>
		return ATT_RESPONSE;
   201ce:	2002      	movs	r0, #2
   201d0:	4770      	bx	lr
	switch (op) {
   201d2:	280c      	cmp	r0, #12
		return ATT_RESPONSE;
   201d4:	bf0c      	ite	eq
   201d6:	2001      	moveq	r0, #1
   201d8:	2002      	movne	r0, #2
   201da:	4770      	bx	lr
	switch (op) {
   201dc:	2817      	cmp	r0, #23
   201de:	d0f6      	beq.n	201ce <att_op_get_type+0x36>
   201e0:	d80b      	bhi.n	201fa <att_op_get_type+0x62>
   201e2:	2811      	cmp	r0, #17
   201e4:	d0f3      	beq.n	201ce <att_op_get_type+0x36>
   201e6:	d803      	bhi.n	201f0 <att_op_get_type+0x58>
   201e8:	280f      	cmp	r0, #15
   201ea:	d0f0      	beq.n	201ce <att_op_get_type+0x36>
   201ec:	2810      	cmp	r0, #16
   201ee:	e7df      	b.n	201b0 <att_op_get_type+0x18>
   201f0:	2813      	cmp	r0, #19
   201f2:	d0ec      	beq.n	201ce <att_op_get_type+0x36>
   201f4:	d3dd      	bcc.n	201b2 <att_op_get_type+0x1a>
   201f6:	2816      	cmp	r0, #22
   201f8:	e7da      	b.n	201b0 <att_op_get_type+0x18>
   201fa:	281d      	cmp	r0, #29
   201fc:	d013      	beq.n	20226 <att_op_get_type+0x8e>
   201fe:	d80a      	bhi.n	20216 <att_op_get_type+0x7e>
   20200:	2819      	cmp	r0, #25
   20202:	d0e4      	beq.n	201ce <att_op_get_type+0x36>
   20204:	d3d5      	bcc.n	201b2 <att_op_get_type+0x1a>
   20206:	281b      	cmp	r0, #27
   20208:	d00f      	beq.n	2022a <att_op_get_type+0x92>
	if (op & ATT_CMD_MASK) {
   2020a:	f010 0f40 	tst.w	r0, #64	; 0x40
		return ATT_COMMAND;
   2020e:	bf0c      	ite	eq
   20210:	2006      	moveq	r0, #6
   20212:	2000      	movne	r0, #0
   20214:	4770      	bx	lr
	switch (op) {
   20216:	2852      	cmp	r0, #82	; 0x52
   20218:	d009      	beq.n	2022e <att_op_get_type+0x96>
   2021a:	28d2      	cmp	r0, #210	; 0xd2
   2021c:	d007      	beq.n	2022e <att_op_get_type+0x96>
   2021e:	281e      	cmp	r0, #30
   20220:	d1f3      	bne.n	2020a <att_op_get_type+0x72>
		return ATT_CONFIRMATION;
   20222:	2004      	movs	r0, #4
}
   20224:	4770      	bx	lr
		return ATT_INDICATION;
   20226:	2005      	movs	r0, #5
   20228:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2022a:	2003      	movs	r0, #3
   2022c:	4770      	bx	lr
		return ATT_COMMAND;
   2022e:	2000      	movs	r0, #0
   20230:	4770      	bx	lr

00020232 <att_notify>:
{
   20232:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
   20234:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   20236:	f101 0008 	add.w	r0, r1, #8
{
   2023a:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   2023c:	f002 fa33 	bl	226a6 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   20240:	89a3      	ldrh	r3, [r4, #12]
   20242:	68a2      	ldr	r2, [r4, #8]
   20244:	4601      	mov	r1, r0
   20246:	4628      	mov	r0, r5
   20248:	f000 fee9 	bl	2101e <bt_gatt_notification>
}
   2024c:	2000      	movs	r0, #0
   2024e:	bd38      	pop	{r3, r4, r5, pc}

00020250 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   20250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20252:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20256:	2300      	movs	r3, #0
   20258:	9300      	str	r3, [sp, #0]
   2025a:	461a      	mov	r2, r3
   2025c:	f7eb fb34 	bl	b8c8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   20260:	b005      	add	sp, #20
   20262:	f85d fb04 	ldr.w	pc, [sp], #4

00020266 <find_info_cb>:
	if (!data->rsp) {
   20266:	688b      	ldr	r3, [r1, #8]
{
   20268:	b570      	push	{r4, r5, r6, lr}
   2026a:	4605      	mov	r5, r0
   2026c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   2026e:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   20270:	b963      	cbnz	r3, 2028c <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20272:	6848      	ldr	r0, [r1, #4]
   20274:	2101      	movs	r1, #1
   20276:	3008      	adds	r0, #8
   20278:	f002 f9dc 	bl	22634 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2027c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2027e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20280:	781b      	ldrb	r3, [r3, #0]
   20282:	2b00      	cmp	r3, #0
   20284:	bf0c      	ite	eq
   20286:	2301      	moveq	r3, #1
   20288:	2302      	movne	r3, #2
   2028a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2028c:	68a3      	ldr	r3, [r4, #8]
   2028e:	781b      	ldrb	r3, [r3, #0]
   20290:	2b01      	cmp	r3, #1
   20292:	d003      	beq.n	2029c <find_info_cb+0x36>
   20294:	2b02      	cmp	r3, #2
   20296:	d01a      	beq.n	202ce <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   20298:	2000      	movs	r0, #0
   2029a:	e017      	b.n	202cc <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2029c:	682b      	ldr	r3, [r5, #0]
   2029e:	781b      	ldrb	r3, [r3, #0]
   202a0:	2b00      	cmp	r3, #0
   202a2:	d1f9      	bne.n	20298 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   202a4:	6860      	ldr	r0, [r4, #4]
   202a6:	2104      	movs	r1, #4
   202a8:	3008      	adds	r0, #8
   202aa:	f002 f9c3 	bl	22634 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   202ae:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   202b0:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   202b2:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   202b4:	682b      	ldr	r3, [r5, #0]
   202b6:	885b      	ldrh	r3, [r3, #2]
   202b8:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   202ba:	6863      	ldr	r3, [r4, #4]
   202bc:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   202c0:	899b      	ldrh	r3, [r3, #12]
   202c2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   202c4:	2804      	cmp	r0, #4
   202c6:	bf94      	ite	ls
   202c8:	2000      	movls	r0, #0
   202ca:	2001      	movhi	r0, #1
}
   202cc:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   202ce:	682b      	ldr	r3, [r5, #0]
   202d0:	781b      	ldrb	r3, [r3, #0]
   202d2:	2b02      	cmp	r3, #2
   202d4:	d1e0      	bne.n	20298 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   202d6:	6860      	ldr	r0, [r4, #4]
   202d8:	2112      	movs	r1, #18
   202da:	3008      	adds	r0, #8
   202dc:	f002 f9aa 	bl	22634 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   202e0:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   202e2:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   202e4:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   202e6:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   202e8:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   202ec:	3101      	adds	r1, #1
   202ee:	f7ff f983 	bl	1f5f8 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   202f2:	6863      	ldr	r3, [r4, #4]
   202f4:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   202f8:	899b      	ldrh	r3, [r3, #12]
   202fa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   202fc:	2812      	cmp	r0, #18
   202fe:	e7e2      	b.n	202c6 <find_info_cb+0x60>

00020300 <read_group_cb>:
{
   20300:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   20304:	680c      	ldr	r4, [r1, #0]
{
   20306:	4606      	mov	r6, r0
   20308:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2030a:	f04f 0800 	mov.w	r8, #0
   2030e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   20312:	a902      	add	r1, sp, #8
   20314:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   20316:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   20318:	f88d 8008 	strb.w	r8, [sp, #8]
   2031c:	f8ad 300a 	strh.w	r3, [sp, #10]
   20320:	f7ff fc4c 	bl	1fbbc <bt_uuid_cmp>
   20324:	b198      	cbz	r0, 2034e <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   20326:	f642 0301 	movw	r3, #10241	; 0x2801
   2032a:	a903      	add	r1, sp, #12
   2032c:	6830      	ldr	r0, [r6, #0]
   2032e:	f88d 800c 	strb.w	r8, [sp, #12]
   20332:	f8ad 300e 	strh.w	r3, [sp, #14]
   20336:	f7ff fc41 	bl	1fbbc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2033a:	b140      	cbz	r0, 2034e <read_group_cb+0x4e>
		if (data->group &&
   2033c:	692b      	ldr	r3, [r5, #16]
   2033e:	b123      	cbz	r3, 2034a <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   20340:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
   20342:	8859      	ldrh	r1, [r3, #2]
   20344:	4291      	cmp	r1, r2
   20346:	d200      	bcs.n	2034a <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   20348:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2034a:	2001      	movs	r0, #1
   2034c:	e012      	b.n	20374 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2034e:	6869      	ldr	r1, [r5, #4]
   20350:	6830      	ldr	r0, [r6, #0]
   20352:	f7ff fc33 	bl	1fbbc <bt_uuid_cmp>
   20356:	b110      	cbz	r0, 2035e <read_group_cb+0x5e>
		data->group = NULL;
   20358:	2300      	movs	r3, #0
   2035a:	612b      	str	r3, [r5, #16]
		return BT_GATT_ITER_CONTINUE;
   2035c:	e7f5      	b.n	2034a <read_group_cb+0x4a>
	if (data->rsp->len &&
   2035e:	68eb      	ldr	r3, [r5, #12]
   20360:	68a8      	ldr	r0, [r5, #8]
   20362:	781a      	ldrb	r2, [r3, #0]
   20364:	b14a      	cbz	r2, 2037a <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   20366:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   2036a:	8981      	ldrh	r1, [r0, #12]
   2036c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   2036e:	4293      	cmp	r3, r2
   20370:	da03      	bge.n	2037a <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   20372:	2000      	movs	r0, #0
}
   20374:	b004      	add	sp, #16
   20376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2037a:	2104      	movs	r1, #4
   2037c:	3008      	adds	r0, #8
   2037e:	f002 f959 	bl	22634 <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   20382:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   20384:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   20386:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   20388:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   2038a:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   2038c:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   2038e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   20392:	6889      	ldr	r1, [r1, #8]
   20394:	2400      	movs	r4, #0
   20396:	1a9b      	subs	r3, r3, r2
   20398:	9400      	str	r4, [sp, #0]
   2039a:	440a      	add	r2, r1
   2039c:	f8d6 8004 	ldr.w	r8, [r6, #4]
   203a0:	4631      	mov	r1, r6
   203a2:	b29b      	uxth	r3, r3
   203a4:	4638      	mov	r0, r7
   203a6:	47c0      	blx	r8
	if (read < 0) {
   203a8:	1e01      	subs	r1, r0, #0
   203aa:	dbe2      	blt.n	20372 <read_group_cb+0x72>
	if (!data->rsp->len) {
   203ac:	68ee      	ldr	r6, [r5, #12]
   203ae:	68ab      	ldr	r3, [r5, #8]
   203b0:	7830      	ldrb	r0, [r6, #0]
   203b2:	1d0a      	adds	r2, r1, #4
   203b4:	b928      	cbnz	r0, 203c2 <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
   203b6:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
   203b8:	f103 0008 	add.w	r0, r3, #8
   203bc:	f002 f93a 	bl	22634 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   203c0:	e7c3      	b.n	2034a <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   203c2:	4290      	cmp	r0, r2
   203c4:	d0f8      	beq.n	203b8 <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   203c6:	899a      	ldrh	r2, [r3, #12]
   203c8:	3a04      	subs	r2, #4
   203ca:	819a      	strh	r2, [r3, #12]
		return false;
   203cc:	e7d1      	b.n	20372 <read_group_cb+0x72>

000203ce <read_type_cb>:
{
   203ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   203d2:	680f      	ldr	r7, [r1, #0]
{
   203d4:	4605      	mov	r5, r0
   203d6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   203d8:	6800      	ldr	r0, [r0, #0]
   203da:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   203dc:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   203e0:	f7ff fbec 	bl	1fbbc <bt_uuid_cmp>
   203e4:	4680      	mov	r8, r0
   203e6:	2800      	cmp	r0, #0
   203e8:	d14c      	bne.n	20484 <read_type_cb+0xb6>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   203ea:	2215      	movs	r2, #21
   203ec:	4629      	mov	r1, r5
   203ee:	4648      	mov	r0, r9
   203f0:	f000 fd0f 	bl	20e12 <bt_gatt_check_perm>
   203f4:	4604      	mov	r4, r0
   203f6:	7530      	strb	r0, [r6, #20]
	if (data->err) {
   203f8:	b148      	cbz	r0, 2040e <read_type_cb+0x40>
		if (data->rsp->len) {
   203fa:	68f3      	ldr	r3, [r6, #12]
   203fc:	781c      	ldrb	r4, [r3, #0]
   203fe:	b114      	cbz	r4, 20406 <read_type_cb+0x38>
			data->err = 0x00;
   20400:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
   20404:	4644      	mov	r4, r8
}
   20406:	4620      	mov	r0, r4
   20408:	b003      	add	sp, #12
   2040a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   2040e:	68b0      	ldr	r0, [r6, #8]
   20410:	2102      	movs	r1, #2
   20412:	3008      	adds	r0, #8
   20414:	f002 f90e 	bl	22634 <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   20418:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   2041a:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   2041c:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   2041e:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   20420:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   20422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   20426:	6889      	ldr	r1, [r1, #8]
   20428:	9400      	str	r4, [sp, #0]
   2042a:	1a9b      	subs	r3, r3, r2
   2042c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   20430:	440a      	add	r2, r1
   20432:	b29b      	uxth	r3, r3
   20434:	4629      	mov	r1, r5
   20436:	4648      	mov	r0, r9
   20438:	47c0      	blx	r8
	if (read < 0) {
   2043a:	1e01      	subs	r1, r0, #0
   2043c:	da07      	bge.n	2044e <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
   2043e:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   20442:	bf26      	itte	cs
   20444:	4249      	negcs	r1, r1
   20446:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   20448:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   2044a:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
   2044c:	e7db      	b.n	20406 <read_type_cb+0x38>
	if (!data->rsp->len) {
   2044e:	68f5      	ldr	r5, [r6, #12]
   20450:	68b0      	ldr	r0, [r6, #8]
   20452:	782a      	ldrb	r2, [r5, #0]
   20454:	1c8b      	adds	r3, r1, #2
   20456:	b97a      	cbnz	r2, 20478 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
   20458:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   2045a:	3008      	adds	r0, #8
   2045c:	f002 f8ea 	bl	22634 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   20460:	68b3      	ldr	r3, [r6, #8]
   20462:	f8b7 4042 	ldrh.w	r4, [r7, #66]	; 0x42
   20466:	899b      	ldrh	r3, [r3, #12]
   20468:	1ae4      	subs	r4, r4, r3
   2046a:	68f3      	ldr	r3, [r6, #12]
   2046c:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2046e:	429c      	cmp	r4, r3
   20470:	bfd4      	ite	le
   20472:	2400      	movle	r4, #0
   20474:	2401      	movgt	r4, #1
   20476:	e7c6      	b.n	20406 <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   20478:	429a      	cmp	r2, r3
   2047a:	d0ee      	beq.n	2045a <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
   2047c:	8983      	ldrh	r3, [r0, #12]
   2047e:	3b02      	subs	r3, #2
   20480:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   20482:	e7c0      	b.n	20406 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   20484:	2401      	movs	r4, #1
   20486:	e7be      	b.n	20406 <read_type_cb+0x38>

00020488 <att_send_req>:
{
   20488:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2048a:	4605      	mov	r5, r0
   2048c:	460c      	mov	r4, r1
	att->req = req;
   2048e:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	return z_impl_k_sem_take(sem, timeout);
   20492:	2100      	movs	r1, #0
   20494:	30c0      	adds	r0, #192	; 0xc0
   20496:	f7fc fa3b 	bl	1c910 <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
   2049a:	2800      	cmp	r0, #0
   2049c:	da08      	bge.n	204b0 <att_send_req+0x28>
		k_fifo_put(&att->tx_queue, req->buf);
   2049e:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
   204a2:	6921      	ldr	r1, [r4, #16]
   204a4:	f004 fde1 	bl	2506a <k_queue_append>
		return 0;
   204a8:	2500      	movs	r5, #0
}
   204aa:	4628      	mov	r0, r5
   204ac:	b002      	add	sp, #8
   204ae:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
   204b0:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   204b2:	f106 0008 	add.w	r0, r6, #8
   204b6:	f002 f8fe 	bl	226b6 <net_buf_simple_headroom>
	state->len = buf->len;
   204ba:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   204bc:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   204be:	81e3      	strh	r3, [r4, #14]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
   204c0:	6920      	ldr	r0, [r4, #16]
   204c2:	682d      	ldr	r5, [r5, #0]
   204c4:	f002 f8b2 	bl	2262c <net_buf_ref>
   204c8:	6923      	ldr	r3, [r4, #16]
   204ca:	4602      	mov	r2, r0
   204cc:	6898      	ldr	r0, [r3, #8]
   204ce:	f7e9 fbcd 	bl	9c6c <att_cb.isra.6>
   204d2:	2600      	movs	r6, #0
   204d4:	4603      	mov	r3, r0
   204d6:	9600      	str	r6, [sp, #0]
   204d8:	4628      	mov	r0, r5
   204da:	2104      	movs	r1, #4
   204dc:	f7ff fe2d 	bl	2013a <bt_l2cap_send_cb>
	if (err) {
   204e0:	4605      	mov	r5, r0
   204e2:	2800      	cmp	r0, #0
   204e4:	d0e1      	beq.n	204aa <att_send_req+0x22>
		net_buf_unref(req->buf);
   204e6:	6920      	ldr	r0, [r4, #16]
   204e8:	f7f7 f874 	bl	175d4 <net_buf_unref>
		req->buf = NULL;
   204ec:	6126      	str	r6, [r4, #16]
		return err;
   204ee:	e7dc      	b.n	204aa <att_send_req+0x22>

000204f0 <att_pdu_sent>:
{
   204f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   204f4:	2104      	movs	r1, #4
{
   204f6:	4680      	mov	r8, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   204f8:	f7ff fe38 	bl	2016c <bt_l2cap_le_lookup_tx_cid>
   204fc:	4606      	mov	r6, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   204fe:	f100 07d8 	add.w	r7, r0, #216	; 0xd8
   20502:	2100      	movs	r1, #0
   20504:	4638      	mov	r0, r7
   20506:	f002 f867 	bl	225d8 <net_buf_get>
   2050a:	4604      	mov	r4, r0
   2050c:	b928      	cbnz	r0, 2051a <att_pdu_sent+0x2a>
	z_impl_k_sem_give(sem);
   2050e:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
}
   20512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20516:	f7fc b9cf 	b.w	1c8b8 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   2051a:	f8d6 5094 	ldr.w	r5, [r6, #148]	; 0x94
   2051e:	b14d      	cbz	r5, 20534 <att_pdu_sent+0x44>
   20520:	692b      	ldr	r3, [r5, #16]
   20522:	42a3      	cmp	r3, r4
   20524:	d106      	bne.n	20534 <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
   20526:	f104 0008 	add.w	r0, r4, #8
   2052a:	f002 f8c4 	bl	226b6 <net_buf_simple_headroom>
	state->len = buf->len;
   2052e:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   20530:	81a8      	strh	r0, [r5, #12]
	state->len = buf->len;
   20532:	81eb      	strh	r3, [r5, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   20534:	2300      	movs	r3, #0
   20536:	461a      	mov	r2, r3
   20538:	4621      	mov	r1, r4
   2053a:	4640      	mov	r0, r8
   2053c:	f7e9 fba8 	bl	9c90 <att_send>
   20540:	2800      	cmp	r0, #0
   20542:	d1de      	bne.n	20502 <att_pdu_sent+0x12>
}
   20544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020548 <att_cfm_sent>:
{
   20548:	b538      	push	{r3, r4, r5, lr}
   2054a:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   2054c:	2104      	movs	r1, #4
{
   2054e:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   20550:	f7ff fe0c 	bl	2016c <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20554:	f3bf 8f5b 	dmb	ish
   20558:	3090      	adds	r0, #144	; 0x90
   2055a:	e850 3f00 	ldrex	r3, [r0]
   2055e:	f023 0302 	bic.w	r3, r3, #2
   20562:	e840 3200 	strex	r2, r3, [r0]
   20566:	2a00      	cmp	r2, #0
   20568:	d1f7      	bne.n	2055a <att_cfm_sent+0x12>
   2056a:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   2056e:	4629      	mov	r1, r5
   20570:	4620      	mov	r0, r4
}
   20572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   20576:	f7ff bfbb 	b.w	204f0 <att_pdu_sent>

0002057a <att_rsp_sent>:
{
   2057a:	b538      	push	{r3, r4, r5, lr}
   2057c:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   2057e:	2104      	movs	r1, #4
{
   20580:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   20582:	f7ff fdf3 	bl	2016c <bt_l2cap_le_lookup_tx_cid>
   20586:	f3bf 8f5b 	dmb	ish
   2058a:	3090      	adds	r0, #144	; 0x90
   2058c:	e850 3f00 	ldrex	r3, [r0]
   20590:	f023 0301 	bic.w	r3, r3, #1
   20594:	e840 3200 	strex	r2, r3, [r0]
   20598:	2a00      	cmp	r2, #0
   2059a:	d1f7      	bne.n	2058c <att_rsp_sent+0x12>
   2059c:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   205a0:	4629      	mov	r1, r5
   205a2:	4620      	mov	r0, r4
}
   205a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   205a8:	f7ff bfa2 	b.w	204f0 <att_pdu_sent>

000205ac <write_cb>:
{
   205ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   205ae:	460c      	mov	r4, r1
   205b0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   205b2:	4601      	mov	r1, r0
   205b4:	222a      	movs	r2, #42	; 0x2a
   205b6:	6820      	ldr	r0, [r4, #0]
   205b8:	f000 fc2b 	bl	20e12 <bt_gatt_check_perm>
   205bc:	4605      	mov	r5, r0
   205be:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   205c0:	bb00      	cbnz	r0, 20604 <write_cb+0x58>
	if (!data->req) {
   205c2:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   205c4:	68b7      	ldr	r7, [r6, #8]
   205c6:	68e2      	ldr	r2, [r4, #12]
   205c8:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   205ca:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   205cc:	bf14      	ite	ne
   205ce:	2300      	movne	r3, #0
   205d0:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   205d2:	9301      	str	r3, [sp, #4]
   205d4:	8a63      	ldrh	r3, [r4, #18]
   205d6:	9300      	str	r3, [sp, #0]
   205d8:	4631      	mov	r1, r6
   205da:	8a23      	ldrh	r3, [r4, #16]
   205dc:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   205de:	2800      	cmp	r0, #0
   205e0:	db05      	blt.n	205ee <write_cb+0x42>
   205e2:	8a23      	ldrh	r3, [r4, #16]
   205e4:	4298      	cmp	r0, r3
   205e6:	d10b      	bne.n	20600 <write_cb+0x54>
	data->err = 0U;
   205e8:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   205ea:	2501      	movs	r5, #1
   205ec:	e005      	b.n	205fa <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   205ee:	f110 0fff 	cmn.w	r0, #255	; 0xff
   205f2:	d305      	bcc.n	20600 <write_cb+0x54>
		return -err;
   205f4:	4240      	negs	r0, r0
   205f6:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   205f8:	7520      	strb	r0, [r4, #20]
}
   205fa:	4628      	mov	r0, r5
   205fc:	b003      	add	sp, #12
   205fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   20600:	200e      	movs	r0, #14
   20602:	e7f9      	b.n	205f8 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   20604:	2500      	movs	r5, #0
   20606:	e7f8      	b.n	205fa <write_cb+0x4e>

00020608 <read_cb>:
{
   20608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2060c:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2060e:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   20610:	f8d1 9000 	ldr.w	r9, [r1]
{
   20614:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20616:	3008      	adds	r0, #8
   20618:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   2061a:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2061e:	f002 f809 	bl	22634 <net_buf_simple_add>
	data->err = 0x00;
   20622:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20624:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   20626:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   20628:	2215      	movs	r2, #21
   2062a:	4631      	mov	r1, r6
   2062c:	4640      	mov	r0, r8
   2062e:	f000 fbf0 	bl	20e12 <bt_gatt_check_perm>
   20632:	4605      	mov	r5, r0
   20634:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   20636:	bb00      	cbnz	r0, 2067a <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   20638:	68a1      	ldr	r1, [r4, #8]
   2063a:	f8b9 3042 	ldrh.w	r3, [r9, #66]	; 0x42
   2063e:	898a      	ldrh	r2, [r1, #12]
   20640:	6889      	ldr	r1, [r1, #8]
   20642:	88a0      	ldrh	r0, [r4, #4]
   20644:	9000      	str	r0, [sp, #0]
   20646:	1a9b      	subs	r3, r3, r2
   20648:	6877      	ldr	r7, [r6, #4]
   2064a:	440a      	add	r2, r1
   2064c:	b29b      	uxth	r3, r3
   2064e:	4631      	mov	r1, r6
   20650:	4640      	mov	r0, r8
   20652:	47b8      	blx	r7
	if (read < 0) {
   20654:	1e01      	subs	r1, r0, #0
   20656:	da0a      	bge.n	2066e <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
   20658:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   2065c:	bf26      	itte	cs
   2065e:	4249      	negcs	r1, r1
   20660:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   20662:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   20664:	7421      	strb	r1, [r4, #16]
}
   20666:	4628      	mov	r0, r5
   20668:	b003      	add	sp, #12
   2066a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   2066e:	68a0      	ldr	r0, [r4, #8]
   20670:	3008      	adds	r0, #8
   20672:	f001 ffdf 	bl	22634 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   20676:	2501      	movs	r5, #1
   20678:	e7f5      	b.n	20666 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
   2067a:	463d      	mov	r5, r7
   2067c:	e7f3      	b.n	20666 <read_cb+0x5e>

0002067e <att_write_cmd>:
{
   2067e:	b530      	push	{r4, r5, lr}
   20680:	460c      	mov	r4, r1
   20682:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   20684:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   20686:	f101 0008 	add.w	r0, r1, #8
   2068a:	f002 f80c 	bl	226a6 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   2068e:	89a3      	ldrh	r3, [r4, #12]
   20690:	9302      	str	r3, [sp, #8]
   20692:	2200      	movs	r2, #0
   20694:	68a3      	ldr	r3, [r4, #8]
   20696:	9301      	str	r3, [sp, #4]
   20698:	9200      	str	r2, [sp, #0]
   2069a:	4603      	mov	r3, r0
   2069c:	4611      	mov	r1, r2
   2069e:	4628      	mov	r0, r5
   206a0:	f7e9 fd9a 	bl	a1d8 <att_write_rsp>
}
   206a4:	b005      	add	sp, #20
   206a6:	bd30      	pop	{r4, r5, pc}

000206a8 <att_write_req>:
{
   206a8:	b530      	push	{r4, r5, lr}
   206aa:	460c      	mov	r4, r1
   206ac:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   206ae:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   206b0:	f101 0008 	add.w	r0, r1, #8
   206b4:	f001 fff7 	bl	226a6 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   206b8:	89a3      	ldrh	r3, [r4, #12]
   206ba:	9302      	str	r3, [sp, #8]
   206bc:	68a3      	ldr	r3, [r4, #8]
   206be:	9301      	str	r3, [sp, #4]
   206c0:	2300      	movs	r3, #0
   206c2:	9300      	str	r3, [sp, #0]
   206c4:	2213      	movs	r2, #19
   206c6:	4603      	mov	r3, r0
   206c8:	2112      	movs	r1, #18
   206ca:	4628      	mov	r0, r5
   206cc:	f7e9 fd84 	bl	a1d8 <att_write_rsp>
}
   206d0:	b005      	add	sp, #20
   206d2:	bd30      	pop	{r4, r5, pc}

000206d4 <att_read_blob_req>:
{
   206d4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   206d6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   206d8:	8813      	ldrh	r3, [r2, #0]
   206da:	8852      	ldrh	r2, [r2, #2]
   206dc:	9200      	str	r2, [sp, #0]
   206de:	210c      	movs	r1, #12
   206e0:	220d      	movs	r2, #13
   206e2:	f7e9 ffa3 	bl	a62c <att_read_rsp>
}
   206e6:	b003      	add	sp, #12
   206e8:	f85d fb04 	ldr.w	pc, [sp], #4

000206ec <att_read_req>:
{
   206ec:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   206ee:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   206f0:	2200      	movs	r2, #0
   206f2:	881b      	ldrh	r3, [r3, #0]
   206f4:	9200      	str	r2, [sp, #0]
   206f6:	210a      	movs	r1, #10
   206f8:	220b      	movs	r2, #11
   206fa:	f7e9 ff97 	bl	a62c <att_read_rsp>
}
   206fe:	b003      	add	sp, #12
   20700:	f85d fb04 	ldr.w	pc, [sp], #4

00020704 <bt_att_init>:
	bt_gatt_init();
   20704:	f7eb b87a 	b.w	b7fc <bt_gatt_init>

00020708 <bt_att_get_mtu>:
{
   20708:	b508      	push	{r3, lr}
	att = att_chan_get(conn);
   2070a:	f7e9 fb61 	bl	9dd0 <att_chan_get>
	if (!att) {
   2070e:	b108      	cbz	r0, 20714 <bt_att_get_mtu+0xc>
	return att->chan.tx.mtu;
   20710:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
}
   20714:	bd08      	pop	{r3, pc}

00020716 <att_req_destroy>:
{
   20716:	b510      	push	{r4, lr}
   20718:	4604      	mov	r4, r0
	if (req->buf) {
   2071a:	6900      	ldr	r0, [r0, #16]
   2071c:	b108      	cbz	r0, 20722 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   2071e:	f7f6 ff59 	bl	175d4 <net_buf_unref>
	if (req->destroy) {
   20722:	68a3      	ldr	r3, [r4, #8]
   20724:	b10b      	cbz	r3, 2072a <att_req_destroy+0x14>
		req->destroy(req);
   20726:	4620      	mov	r0, r4
   20728:	4798      	blx	r3
	bt_att_req_free(req);
   2072a:	4620      	mov	r0, r4
}
   2072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   20730:	f7ea b8f6 	b.w	a920 <bt_att_req_free>

00020734 <att_handle_find_info_rsp>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   20734:	898a      	ldrh	r2, [r1, #12]
   20736:	6889      	ldr	r1, [r1, #8]
   20738:	2300      	movs	r3, #0
   2073a:	f7ea b8fd 	b.w	a938 <att_handle_rsp>

0002073e <att_handle_find_type_rsp>:
   2073e:	f7ff bff9 	b.w	20734 <att_handle_find_info_rsp>

00020742 <att_handle_read_type_rsp>:
   20742:	f7ff bff7 	b.w	20734 <att_handle_find_info_rsp>

00020746 <att_handle_read_rsp>:
   20746:	f7ff bff5 	b.w	20734 <att_handle_find_info_rsp>

0002074a <att_handle_read_blob_rsp>:
   2074a:	f7ff bff3 	b.w	20734 <att_handle_find_info_rsp>

0002074e <att_handle_read_mult_rsp>:
   2074e:	f7ff bff1 	b.w	20734 <att_handle_find_info_rsp>

00020752 <att_handle_read_group_rsp>:
   20752:	f7ff bfef 	b.w	20734 <att_handle_find_info_rsp>

00020756 <att_handle_write_rsp>:
   20756:	f7ff bfed 	b.w	20734 <att_handle_find_info_rsp>

0002075a <att_handle_prepare_write_rsp>:
   2075a:	f7ff bfeb 	b.w	20734 <att_handle_find_info_rsp>

0002075e <att_handle_exec_write_rsp>:
   2075e:	f7ff bfe9 	b.w	20734 <att_handle_find_info_rsp>

00020762 <att_confirm>:
   20762:	f7ff bfe7 	b.w	20734 <att_handle_find_info_rsp>

00020766 <att_mtu_rsp>:
{
   20766:	b410      	push	{r4}
   20768:	460a      	mov	r2, r1
	if (!att) {
   2076a:	b190      	cbz	r0, 20792 <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
   2076c:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2076e:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   20770:	2b16      	cmp	r3, #22
   20772:	d805      	bhi.n	20780 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   20774:	2200      	movs	r2, #0
   20776:	2304      	movs	r3, #4
   20778:	4611      	mov	r1, r2
}
   2077a:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
   2077c:	f7ea b8dc 	b.w	a938 <att_handle_rsp>
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   20780:	2b41      	cmp	r3, #65	; 0x41
   20782:	bf28      	it	cs
   20784:	2341      	movcs	r3, #65	; 0x41
   20786:	86c3      	strh	r3, [r0, #54]	; 0x36
	att->chan.tx.mtu = att->chan.rx.mtu;
   20788:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	return att_handle_rsp(att, rsp, buf->len, 0);
   2078c:	8992      	ldrh	r2, [r2, #12]
   2078e:	2300      	movs	r3, #0
   20790:	e7f3      	b.n	2077a <att_mtu_rsp+0x14>
}
   20792:	bc10      	pop	{r4}
   20794:	4770      	bx	lr

00020796 <att_reset>:
{
   20796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20798:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
   2079a:	f100 05e8 	add.w	r5, r0, #232	; 0xe8
	return z_impl_k_queue_get(queue, timeout);
   2079e:	2100      	movs	r1, #0
   207a0:	4628      	mov	r0, r5
   207a2:	f004 fc8b 	bl	250bc <z_impl_k_queue_get>
   207a6:	bb50      	cbnz	r0, 207fe <att_reset+0x68>
	while ((buf = k_fifo_get(&att->tx_queue, K_NO_WAIT))) {
   207a8:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
   207ac:	2100      	movs	r1, #0
   207ae:	4628      	mov	r0, r5
   207b0:	f004 fc84 	bl	250bc <z_impl_k_queue_get>
   207b4:	bb30      	cbnz	r0, 20804 <att_reset+0x6e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   207b6:	f3bf 8f5b 	dmb	ish
   207ba:	f104 0390 	add.w	r3, r4, #144	; 0x90
   207be:	e853 2f00 	ldrex	r2, [r3]
   207c2:	f042 0204 	orr.w	r2, r2, #4
   207c6:	e843 2100 	strex	r1, r2, [r3]
   207ca:	2900      	cmp	r1, #0
   207cc:	d1f7      	bne.n	207be <att_reset+0x28>
   207ce:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
   207d2:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
	z_impl_k_sem_give(sem);
   207d6:	4628      	mov	r0, r5
   207d8:	f7fc f86e 	bl	1c8b8 <z_impl_k_sem_give>
   207dc:	4628      	mov	r0, r5
   207de:	f7fc f86b 	bl	1c8b8 <z_impl_k_sem_give>
   207e2:	4628      	mov	r0, r5
   207e4:	f7fc f868 	bl	1c8b8 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   207e8:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   207ec:	b96d      	cbnz	r5, 2080a <att_reset+0x74>
	if (!att->req) {
   207ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	list->head = NULL;
   207f2:	2200      	movs	r2, #0
	list->tail = NULL;
   207f4:	e9c4 2226 	strd	r2, r2, [r4, #152]	; 0x98
   207f8:	b9c3      	cbnz	r3, 2082c <att_reset+0x96>
}
   207fa:	b003      	add	sp, #12
   207fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   207fe:	f7f6 fee9 	bl	175d4 <net_buf_unref>
   20802:	e7cc      	b.n	2079e <att_reset+0x8>
		net_buf_unref(buf);
   20804:	f7f6 fee6 	bl	175d4 <net_buf_unref>
   20808:	e7d0      	b.n	207ac <att_reset+0x16>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2080a:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   2080c:	686f      	ldr	r7, [r5, #4]
   2080e:	b12f      	cbz	r7, 2081c <att_reset+0x86>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   20810:	2300      	movs	r3, #0
   20812:	9500      	str	r5, [sp, #0]
   20814:	461a      	mov	r2, r3
   20816:	210e      	movs	r1, #14
   20818:	4618      	mov	r0, r3
   2081a:	47b8      	blx	r7
		att_req_destroy(req);
   2081c:	4628      	mov	r0, r5
   2081e:	f7ff ff7a 	bl	20716 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   20822:	2e00      	cmp	r6, #0
   20824:	d0e3      	beq.n	207ee <att_reset+0x58>
   20826:	4635      	mov	r5, r6
   20828:	6836      	ldr	r6, [r6, #0]
   2082a:	e7ef      	b.n	2080c <att_reset+0x76>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2082c:	230e      	movs	r3, #14
   2082e:	4611      	mov	r1, r2
   20830:	4620      	mov	r0, r4
}
   20832:	b003      	add	sp, #12
   20834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   20838:	f7ea b87e 	b.w	a938 <att_handle_rsp>

0002083c <bt_att_send>:
{
   2083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20840:	4607      	mov	r7, r0
   20842:	460d      	mov	r5, r1
   20844:	4614      	mov	r4, r2
   20846:	4698      	mov	r8, r3
	att = att_chan_get(conn);
   20848:	f7e9 fac2 	bl	9dd0 <att_chan_get>
	if (!att) {
   2084c:	4606      	mov	r6, r0
   2084e:	b938      	cbnz	r0, 20860 <bt_att_send+0x24>
		net_buf_unref(buf);
   20850:	4628      	mov	r0, r5
   20852:	f7f6 febf 	bl	175d4 <net_buf_unref>
		return -ENOTCONN;
   20856:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   2085a:	4628      	mov	r0, r5
   2085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cb) {
   20860:	b964      	cbnz	r4, 2087c <bt_att_send+0x40>
	return z_impl_k_sem_take(sem, timeout);
   20862:	4621      	mov	r1, r4
   20864:	30c0      	adds	r0, #192	; 0xc0
   20866:	f7fc f853 	bl	1c910 <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
   2086a:	2800      	cmp	r0, #0
   2086c:	da06      	bge.n	2087c <bt_att_send+0x40>
			k_fifo_put(&att->tx_queue, buf);
   2086e:	4629      	mov	r1, r5
   20870:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
   20874:	f004 fbf9 	bl	2506a <k_queue_append>
			return 0;
   20878:	4625      	mov	r5, r4
   2087a:	e7ee      	b.n	2085a <bt_att_send+0x1e>
	err = att_send(conn, buf, cb, user_data);
   2087c:	4629      	mov	r1, r5
   2087e:	4643      	mov	r3, r8
   20880:	4622      	mov	r2, r4
   20882:	4638      	mov	r0, r7
   20884:	f7e9 fa04 	bl	9c90 <att_send>
	if (err) {
   20888:	4605      	mov	r5, r0
   2088a:	2800      	cmp	r0, #0
   2088c:	d0e5      	beq.n	2085a <bt_att_send+0x1e>
		if (!cb) {
   2088e:	2c00      	cmp	r4, #0
   20890:	d1e3      	bne.n	2085a <bt_att_send+0x1e>
	z_impl_k_sem_give(sem);
   20892:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   20896:	f7fc f80f 	bl	1c8b8 <z_impl_k_sem_give>
   2089a:	e7de      	b.n	2085a <bt_att_send+0x1e>

0002089c <bt_att_req_send>:
{
   2089c:	b538      	push	{r3, r4, r5, lr}
   2089e:	460c      	mov	r4, r1
	att = att_chan_get(conn);
   208a0:	f7e9 fa96 	bl	9dd0 <att_chan_get>
	if (!att) {
   208a4:	4605      	mov	r5, r0
   208a6:	b930      	cbnz	r0, 208b6 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   208a8:	6920      	ldr	r0, [r4, #16]
   208aa:	f7f6 fe93 	bl	175d4 <net_buf_unref>
		req->buf = NULL;
   208ae:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   208b0:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   208b4:	bd38      	pop	{r3, r4, r5, pc}
	if (att->req) {
   208b6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   208ba:	b163      	cbz	r3, 208d6 <bt_att_req_send+0x3a>
	parent->next = child;
   208bc:	2000      	movs	r0, #0
   208be:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   208c0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   208c4:	b91b      	cbnz	r3, 208ce <bt_att_req_send+0x32>
	list->head = node;
   208c6:	e9c5 4426 	strd	r4, r4, [r5, #152]	; 0x98
		return 0;
   208ca:	4618      	mov	r0, r3
   208cc:	e7f2      	b.n	208b4 <bt_att_req_send+0x18>
	parent->next = child;
   208ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   208d0:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
   208d4:	e7ee      	b.n	208b4 <bt_att_req_send+0x18>
	return att_send_req(att, req);
   208d6:	4621      	mov	r1, r4
}
   208d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return att_send_req(att, req);
   208dc:	f7ff bdd4 	b.w	20488 <att_send_req>

000208e0 <gatt_ccc_changed>:
{
   208e0:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   208e2:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   208e4:	895a      	ldrh	r2, [r3, #10]
   208e6:	428a      	cmp	r2, r1
   208e8:	d003      	beq.n	208f2 <gatt_ccc_changed+0x12>
		ccc->value = value;
   208ea:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   208ec:	68db      	ldr	r3, [r3, #12]
   208ee:	b103      	cbz	r3, 208f2 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   208f0:	4718      	bx	r3
}
   208f2:	4770      	bx	lr

000208f4 <gatt_indicate_rsp>:
{
   208f4:	b410      	push	{r4}
   208f6:	9b01      	ldr	r3, [sp, #4]
	params->func(conn, params->attr, err);
   208f8:	689c      	ldr	r4, [r3, #8]
   208fa:	460a      	mov	r2, r1
   208fc:	6859      	ldr	r1, [r3, #4]
   208fe:	4623      	mov	r3, r4
}
   20900:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   20902:	4718      	bx	r3

00020904 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   20904:	2207      	movs	r2, #7
   20906:	f7fe be77 	b.w	1f5f8 <memcpy>

0002090a <clear_ccc_cfg>:
{
   2090a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2090c:	2400      	movs	r4, #0
{
   2090e:	4605      	mov	r5, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   20910:	4669      	mov	r1, sp
   20912:	3001      	adds	r0, #1
   20914:	9400      	str	r4, [sp, #0]
   20916:	f8cd 4003 	str.w	r4, [sp, #3]
   2091a:	f7ff fff3 	bl	20904 <bt_addr_le_copy>
	cfg->id = 0U;
   2091e:	702c      	strb	r4, [r5, #0]
	cfg->value = 0U;
   20920:	812c      	strh	r4, [r5, #8]
}
   20922:	b003      	add	sp, #12
   20924:	bd30      	pop	{r4, r5, pc}

00020926 <write_name>:
{
   20926:	b570      	push	{r4, r5, r6, lr}
   20928:	b092      	sub	sp, #72	; 0x48
   2092a:	4615      	mov	r5, r2
   2092c:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   20930:	2241      	movs	r2, #65	; 0x41
   20932:	2100      	movs	r1, #0
   20934:	a801      	add	r0, sp, #4
{
   20936:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   20938:	f7fe fe88 	bl	1f64c <memset>
	if (offset) {
   2093c:	b966      	cbnz	r6, 20958 <write_name+0x32>
	if (len >= sizeof(value)) {
   2093e:	2c40      	cmp	r4, #64	; 0x40
   20940:	d80d      	bhi.n	2095e <write_name+0x38>
	memcpy(value, buf, len);
   20942:	4622      	mov	r2, r4
   20944:	4629      	mov	r1, r5
   20946:	a801      	add	r0, sp, #4
   20948:	f7fe fe56 	bl	1f5f8 <memcpy>
	bt_set_name(value);
   2094c:	a801      	add	r0, sp, #4
   2094e:	f7e7 fb77 	bl	8040 <bt_set_name>
	return len;
   20952:	4620      	mov	r0, r4
}
   20954:	b012      	add	sp, #72	; 0x48
   20956:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20958:	f06f 0006 	mvn.w	r0, #6
   2095c:	e7fa      	b.n	20954 <write_name+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2095e:	f06f 000c 	mvn.w	r0, #12
   20962:	e7f7      	b.n	20954 <write_name+0x2e>

00020964 <gen_hash_m>:
{
   20964:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   20966:	6807      	ldr	r7, [r0, #0]
   20968:	783d      	ldrb	r5, [r7, #0]
{
   2096a:	b089      	sub	sp, #36	; 0x24
   2096c:	4606      	mov	r6, r0
   2096e:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   20970:	b10d      	cbz	r5, 20976 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   20972:	2501      	movs	r5, #1
   20974:	e015      	b.n	209a2 <gen_hash_m+0x3e>
	switch (u16->val) {
   20976:	887b      	ldrh	r3, [r7, #2]
   20978:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2097c:	d004      	beq.n	20988 <gen_hash_m+0x24>
   2097e:	d813      	bhi.n	209a8 <gen_hash_m+0x44>
   20980:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   20984:	2b03      	cmp	r3, #3
   20986:	d8f4      	bhi.n	20972 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   20988:	8a33      	ldrh	r3, [r6, #16]
   2098a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2098e:	2202      	movs	r2, #2
   20990:	f10d 010e 	add.w	r1, sp, #14
   20994:	4620      	mov	r0, r4
   20996:	f7fd ff7a 	bl	1e88e <tc_cmac_update>
   2099a:	b9d8      	cbnz	r0, 209d4 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2099c:	f06f 0315 	mvn.w	r3, #21
   209a0:	65a3      	str	r3, [r4, #88]	; 0x58
}
   209a2:	4628      	mov	r0, r5
   209a4:	b009      	add	sp, #36	; 0x24
   209a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   209a8:	f642 1205 	movw	r2, #10501	; 0x2905
   209ac:	4293      	cmp	r3, r2
   209ae:	d8e0      	bhi.n	20972 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   209b0:	8a03      	ldrh	r3, [r0, #16]
   209b2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   209b6:	2202      	movs	r2, #2
   209b8:	f10d 010e 	add.w	r1, sp, #14
   209bc:	4620      	mov	r0, r4
   209be:	f7fd ff66 	bl	1e88e <tc_cmac_update>
   209c2:	2800      	cmp	r0, #0
   209c4:	d0ea      	beq.n	2099c <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   209c6:	887b      	ldrh	r3, [r7, #2]
   209c8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   209cc:	2202      	movs	r2, #2
   209ce:	f10d 010e 	add.w	r1, sp, #14
   209d2:	e017      	b.n	20a04 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   209d4:	887b      	ldrh	r3, [r7, #2]
   209d6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   209da:	2202      	movs	r2, #2
   209dc:	f10d 010e 	add.w	r1, sp, #14
   209e0:	4620      	mov	r0, r4
   209e2:	f7fd ff54 	bl	1e88e <tc_cmac_update>
   209e6:	2800      	cmp	r0, #0
   209e8:	d0d8      	beq.n	2099c <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   209ea:	2000      	movs	r0, #0
   209ec:	2310      	movs	r3, #16
   209ee:	eb0d 0203 	add.w	r2, sp, r3
   209f2:	9000      	str	r0, [sp, #0]
   209f4:	6877      	ldr	r7, [r6, #4]
   209f6:	4631      	mov	r1, r6
   209f8:	47b8      	blx	r7
		if (len < 0) {
   209fa:	1e02      	subs	r2, r0, #0
   209fc:	da01      	bge.n	20a02 <gen_hash_m+0x9e>
			state->err = len;
   209fe:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   20a00:	e7cf      	b.n	209a2 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   20a02:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20a04:	4620      	mov	r0, r4
   20a06:	f7fd ff42 	bl	1e88e <tc_cmac_update>
   20a0a:	2800      	cmp	r0, #0
   20a0c:	d1b1      	bne.n	20972 <gen_hash_m+0xe>
   20a0e:	e7c5      	b.n	2099c <gen_hash_m+0x38>

00020a10 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20a10:	f3bf 8f5b 	dmb	ish
   20a14:	6800      	ldr	r0, [r0, #0]
   20a16:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20a1a:	4108      	asrs	r0, r1
}
   20a1c:	f000 0001 	and.w	r0, r0, #1
   20a20:	4770      	bx	lr

00020a22 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20a22:	f3bf 8f5b 	dmb	ish
   20a26:	e850 3f00 	ldrex	r3, [r0]
   20a2a:	ea03 0201 	and.w	r2, r3, r1
   20a2e:	e840 2c00 	strex	ip, r2, [r0]
   20a32:	f1bc 0f00 	cmp.w	ip, #0
   20a36:	d1f6      	bne.n	20a26 <atomic_and+0x4>
   20a38:	f3bf 8f5b 	dmb	ish
}
   20a3c:	4618      	mov	r0, r3
   20a3e:	4770      	bx	lr

00020a40 <gatt_read_multiple_rsp>:
{
   20a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20a42:	9c08      	ldr	r4, [sp, #32]
   20a44:	4606      	mov	r6, r0
   20a46:	6827      	ldr	r7, [r4, #0]
	if (err || !length) {
   20a48:	460d      	mov	r5, r1
   20a4a:	b901      	cbnz	r1, 20a4e <gatt_read_multiple_rsp+0xe>
   20a4c:	b94b      	cbnz	r3, 20a62 <gatt_read_multiple_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   20a4e:	2300      	movs	r3, #0
   20a50:	9308      	str	r3, [sp, #32]
   20a52:	4622      	mov	r2, r4
   20a54:	4629      	mov	r1, r5
	params->func(conn, 0, params, NULL, 0);
   20a56:	4630      	mov	r0, r6
   20a58:	46bc      	mov	ip, r7
}
   20a5a:	b003      	add	sp, #12
   20a5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   20a60:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   20a62:	9300      	str	r3, [sp, #0]
   20a64:	4613      	mov	r3, r2
   20a66:	4622      	mov	r2, r4
   20a68:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   20a6a:	9508      	str	r5, [sp, #32]
   20a6c:	6827      	ldr	r7, [r4, #0]
   20a6e:	462b      	mov	r3, r5
   20a70:	4622      	mov	r2, r4
   20a72:	4629      	mov	r1, r5
   20a74:	e7ef      	b.n	20a56 <gatt_read_multiple_rsp+0x16>

00020a76 <gatt_sub_remove.part.9>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   20a76:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   20a78:	2300      	movs	r3, #0
   20a7a:	4669      	mov	r1, sp
   20a7c:	9300      	str	r3, [sp, #0]
   20a7e:	f8cd 3003 	str.w	r3, [sp, #3]
   20a82:	f7ff ff3f 	bl	20904 <bt_addr_le_copy>
}
   20a86:	b003      	add	sp, #12
   20a88:	f85d fb04 	ldr.w	pc, [sp], #4

00020a8c <clear_cf_cfg>:
{
   20a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20a8e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   20a90:	2500      	movs	r5, #0
   20a92:	4669      	mov	r1, sp
   20a94:	3001      	adds	r0, #1
   20a96:	9500      	str	r5, [sp, #0]
   20a98:	f8cd 5003 	str.w	r5, [sp, #3]
   20a9c:	f7ff ff32 	bl	20904 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   20aa0:	f104 0008 	add.w	r0, r4, #8
   20aa4:	2201      	movs	r2, #1
   20aa6:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20aa8:	340c      	adds	r4, #12
   20aaa:	f7fe fdcf 	bl	1f64c <memset>
   20aae:	f3bf 8f5b 	dmb	ish
   20ab2:	e854 3f00 	ldrex	r3, [r4]
   20ab6:	e844 5200 	strex	r2, r5, [r4]
   20aba:	2a00      	cmp	r2, #0
   20abc:	d1f9      	bne.n	20ab2 <clear_cf_cfg+0x26>
   20abe:	f3bf 8f5b 	dmb	ish
}
   20ac2:	b003      	add	sp, #12
   20ac4:	bd30      	pop	{r4, r5, pc}

00020ac6 <match_uuid>:
   20ac6:	6008      	str	r0, [r1, #0]
   20ac8:	2000      	movs	r0, #0
   20aca:	4770      	bx	lr

00020acc <ccc_find_cfg>:
{
   20acc:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   20ace:	7803      	ldrb	r3, [r0, #0]
   20ad0:	4293      	cmp	r3, r2
{
   20ad2:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   20ad4:	d001      	beq.n	20ada <ccc_find_cfg+0xe>
	return NULL;
   20ad6:	2000      	movs	r0, #0
}
   20ad8:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   20ada:	2207      	movs	r2, #7
   20adc:	3001      	adds	r0, #1
   20ade:	f7fe fd7b 	bl	1f5d8 <memcmp>
		if (id == ccc->cfg[i].id &&
   20ae2:	2800      	cmp	r0, #0
   20ae4:	d1f7      	bne.n	20ad6 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   20ae6:	4620      	mov	r0, r4
   20ae8:	e7f6      	b.n	20ad8 <ccc_find_cfg+0xc>

00020aea <find_ccc_cfg>:
{
   20aea:	b513      	push	{r0, r1, r4, lr}
   20aec:	460c      	mov	r4, r1
		if (conn) {
   20aee:	b168      	cbz	r0, 20b0c <find_ccc_cfg+0x22>
			if (conn->id == ccc->cfg[i].id &&
   20af0:	7a02      	ldrb	r2, [r0, #8]
   20af2:	780b      	ldrb	r3, [r1, #0]
   20af4:	429a      	cmp	r2, r3
   20af6:	d002      	beq.n	20afe <find_ccc_cfg+0x14>
	return NULL;
   20af8:	2000      	movs	r0, #0
}
   20afa:	b002      	add	sp, #8
   20afc:	bd10      	pop	{r4, pc}
			    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
   20afe:	3101      	adds	r1, #1
   20b00:	f7ff fa39 	bl	1ff76 <bt_conn_addr_le_cmp>
			if (conn->id == ccc->cfg[i].id &&
   20b04:	2800      	cmp	r0, #0
   20b06:	d1f7      	bne.n	20af8 <find_ccc_cfg+0xe>
				return &ccc->cfg[i];
   20b08:	4620      	mov	r0, r4
   20b0a:	e7f6      	b.n	20afa <find_ccc_cfg+0x10>
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   20b0c:	9000      	str	r0, [sp, #0]
   20b0e:	2207      	movs	r2, #7
   20b10:	f8cd 0003 	str.w	r0, [sp, #3]
   20b14:	4669      	mov	r1, sp
   20b16:	1c60      	adds	r0, r4, #1
   20b18:	f7fe fd5e 	bl	1f5d8 <memcmp>
   20b1c:	e7f2      	b.n	20b04 <find_ccc_cfg+0x1a>

00020b1e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20b1e:	2301      	movs	r3, #1
   20b20:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20b24:	f3bf 8f5b 	dmb	ish
   20b28:	e850 3f00 	ldrex	r3, [r0]
   20b2c:	430b      	orrs	r3, r1
   20b2e:	e840 3200 	strex	r2, r3, [r0]
   20b32:	2a00      	cmp	r2, #0
   20b34:	d1f8      	bne.n	20b28 <atomic_set_bit+0xa>
   20b36:	f3bf 8f5b 	dmb	ish
}
   20b3a:	4770      	bx	lr

00020b3c <sc_ccc_cfg_write>:
{
   20b3c:	b508      	push	{r3, lr}
   20b3e:	4601      	mov	r1, r0
	if (value == BT_GATT_CCC_INDICATE) {
   20b40:	2a02      	cmp	r2, #2
   20b42:	7a00      	ldrb	r0, [r0, #8]
   20b44:	f101 0170 	add.w	r1, r1, #112	; 0x70
   20b48:	d105      	bne.n	20b56 <sc_ccc_cfg_write+0x1a>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   20b4a:	2300      	movs	r3, #0
   20b4c:	461a      	mov	r2, r3
   20b4e:	f7ea fbd1 	bl	b2f4 <sc_save>
}
   20b52:	2002      	movs	r0, #2
   20b54:	bd08      	pop	{r3, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   20b56:	f7ea fbab 	bl	b2b0 <find_sc_cfg.part.11>
		if (cfg) {
   20b5a:	2800      	cmp	r0, #0
   20b5c:	d0f9      	beq.n	20b52 <sc_ccc_cfg_write+0x16>
			sc_clear(cfg);
   20b5e:	f7ea f8eb 	bl	ad38 <sc_clear>
   20b62:	e7f6      	b.n	20b52 <sc_ccc_cfg_write+0x16>

00020b64 <sc_restore_rsp>:
{
   20b64:	b508      	push	{r3, lr}
   20b66:	f7ea fd0f 	bl	b588 <find_cf_cfg.part.10>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   20b6a:	b140      	cbz	r0, 20b7e <sc_restore_rsp+0x1a>
   20b6c:	7a03      	ldrb	r3, [r0, #8]
   20b6e:	07db      	lsls	r3, r3, #31
   20b70:	d505      	bpl.n	20b7e <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   20b72:	2100      	movs	r1, #0
   20b74:	300c      	adds	r0, #12
}
   20b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   20b7a:	f7ff bfd0 	b.w	20b1e <atomic_set_bit>
}
   20b7e:	bd08      	pop	{r3, pc}

00020b80 <read_appearance>:
{
   20b80:	b513      	push	{r0, r1, r4, lr}
   20b82:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20b86:	4610      	mov	r0, r2
	if (offset > value_len) {
   20b88:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   20b8a:	f240 3241 	movw	r2, #833	; 0x341
   20b8e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   20b92:	d80d      	bhi.n	20bb0 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   20b94:	f1c1 0402 	rsb	r4, r1, #2
   20b98:	429c      	cmp	r4, r3
   20b9a:	bfa8      	it	ge
   20b9c:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   20b9e:	f10d 0306 	add.w	r3, sp, #6
   20ba2:	4622      	mov	r2, r4
   20ba4:	4419      	add	r1, r3
   20ba6:	f7fe fd27 	bl	1f5f8 <memcpy>
}
   20baa:	4620      	mov	r0, r4
   20bac:	b002      	add	sp, #8
   20bae:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20bb0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   20bb4:	e7f9      	b.n	20baa <read_appearance+0x2a>

00020bb6 <read_name>:
{
   20bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20bba:	4698      	mov	r8, r3
   20bbc:	4616      	mov	r6, r2
   20bbe:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   20bc2:	f7e7 fa8f 	bl	80e4 <bt_get_name>
   20bc6:	4607      	mov	r7, r0
				 strlen(name));
   20bc8:	f7fe fce4 	bl	1f594 <strlen>
	if (offset > value_len) {
   20bcc:	b283      	uxth	r3, r0
   20bce:	42ab      	cmp	r3, r5
   20bd0:	d30c      	bcc.n	20bec <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   20bd2:	1b5c      	subs	r4, r3, r5
   20bd4:	4544      	cmp	r4, r8
   20bd6:	bfa8      	it	ge
   20bd8:	4644      	movge	r4, r8
   20bda:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   20bdc:	4622      	mov	r2, r4
   20bde:	1979      	adds	r1, r7, r5
   20be0:	4630      	mov	r0, r6
   20be2:	f7fe fd09 	bl	1f5f8 <memcpy>
}
   20be6:	4620      	mov	r0, r4
   20be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20bec:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   20bf0:	e7f9      	b.n	20be6 <read_name+0x30>

00020bf2 <bt_gatt_attr_read_ccc>:
{
   20bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   20bf4:	68c9      	ldr	r1, [r1, #12]
{
   20bf6:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   20bfa:	4616      	mov	r6, r2
   20bfc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   20bfe:	f7ff ff74 	bl	20aea <find_ccc_cfg>
	if (cfg) {
   20c02:	b100      	cbz	r0, 20c06 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   20c04:	8900      	ldrh	r0, [r0, #8]
   20c06:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   20c0a:	2d02      	cmp	r5, #2
   20c0c:	d80e      	bhi.n	20c2c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   20c0e:	f1c5 0402 	rsb	r4, r5, #2
   20c12:	42bc      	cmp	r4, r7
   20c14:	bfa8      	it	ge
   20c16:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   20c18:	f10d 0306 	add.w	r3, sp, #6
   20c1c:	4622      	mov	r2, r4
   20c1e:	1959      	adds	r1, r3, r5
   20c20:	4630      	mov	r0, r6
   20c22:	f7fe fce9 	bl	1f5f8 <memcpy>
}
   20c26:	4620      	mov	r0, r4
   20c28:	b003      	add	sp, #12
   20c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20c2c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   20c30:	e7f9      	b.n	20c26 <bt_gatt_attr_read_ccc+0x34>

00020c32 <cf_read>:
{
   20c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20c34:	461f      	mov	r7, r3
	u8_t data[1] = {};
   20c36:	2300      	movs	r3, #0
{
   20c38:	4616      	mov	r6, r2
   20c3a:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	u8_t data[1] = {};
   20c3e:	f88d 3004 	strb.w	r3, [sp, #4]
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   20c42:	f7ea fca1 	bl	b588 <find_cf_cfg.part.10>
	if (cfg) {
   20c46:	b128      	cbz	r0, 20c54 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   20c48:	f100 0108 	add.w	r1, r0, #8
   20c4c:	2201      	movs	r2, #1
   20c4e:	a801      	add	r0, sp, #4
   20c50:	f7fe fcd2 	bl	1f5f8 <memcpy>
	if (offset > value_len) {
   20c54:	2d01      	cmp	r5, #1
   20c56:	d80d      	bhi.n	20c74 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   20c58:	f1c5 0401 	rsb	r4, r5, #1
   20c5c:	42bc      	cmp	r4, r7
   20c5e:	bfa8      	it	ge
   20c60:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   20c62:	ab01      	add	r3, sp, #4
   20c64:	4622      	mov	r2, r4
   20c66:	1959      	adds	r1, r3, r5
   20c68:	4630      	mov	r0, r6
   20c6a:	f7fe fcc5 	bl	1f5f8 <memcpy>
}
   20c6e:	4620      	mov	r0, r4
   20c70:	b003      	add	sp, #12
   20c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20c74:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   20c78:	e7f9      	b.n	20c6e <cf_read+0x3c>

00020c7a <bt_gatt_attr_read_service>:
{
   20c7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   20c7c:	68c9      	ldr	r1, [r1, #12]
{
   20c7e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   20c82:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   20c84:	780a      	ldrb	r2, [r1, #0]
   20c86:	b992      	cbnz	r2, 20cae <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   20c88:	884a      	ldrh	r2, [r1, #2]
   20c8a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   20c8e:	2d02      	cmp	r5, #2
   20c90:	d819      	bhi.n	20cc6 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   20c92:	f1c5 0402 	rsb	r4, r5, #2
   20c96:	429c      	cmp	r4, r3
   20c98:	bfa8      	it	ge
   20c9a:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   20c9c:	f10d 0306 	add.w	r3, sp, #6
   20ca0:	4622      	mov	r2, r4
   20ca2:	1959      	adds	r1, r3, r5
   20ca4:	f7fe fca8 	bl	1f5f8 <memcpy>
}
   20ca8:	4620      	mov	r0, r4
   20caa:	b003      	add	sp, #12
   20cac:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   20cae:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   20cb0:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   20cb4:	d807      	bhi.n	20cc6 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   20cb6:	f1c5 0410 	rsb	r4, r5, #16
   20cba:	429c      	cmp	r4, r3
   20cbc:	bfa8      	it	ge
   20cbe:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   20cc0:	4622      	mov	r2, r4
   20cc2:	4429      	add	r1, r5
   20cc4:	e7ee      	b.n	20ca4 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20cc6:	f06f 0406 	mvn.w	r4, #6
   20cca:	e7ed      	b.n	20ca8 <bt_gatt_attr_read_service+0x2e>

00020ccc <gatt_sub_remove>:
{
   20ccc:	b538      	push	{r3, r4, r5, lr}
   20cce:	460c      	mov	r4, r1
	if (params) {
   20cd0:	4619      	mov	r1, r3
   20cd2:	b16b      	cbz	r3, 20cf0 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   20cd4:	f103 0510 	add.w	r5, r3, #16
Z_GENLIST_REMOVE(slist, snode)
   20cd8:	691b      	ldr	r3, [r3, #16]
   20cda:	b982      	cbnz	r2, 20cfe <gatt_sub_remove+0x32>
   20cdc:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   20cde:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   20ce0:	4295      	cmp	r5, r2
   20ce2:	d100      	bne.n	20ce6 <gatt_sub_remove+0x1a>
	list->tail = node;
   20ce4:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   20ce6:	2300      	movs	r3, #0
   20ce8:	610b      	str	r3, [r1, #16]
		params->notify(conn, params, NULL, 0);
   20cea:	680d      	ldr	r5, [r1, #0]
   20cec:	461a      	mov	r2, r3
   20cee:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   20cf0:	68a3      	ldr	r3, [r4, #8]
   20cf2:	b953      	cbnz	r3, 20d0a <gatt_sub_remove+0x3e>
   20cf4:	4620      	mov	r0, r4
}
   20cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20cfa:	f7ff bebc 	b.w	20a76 <gatt_sub_remove.part.9>
   20cfe:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20d00:	68e3      	ldr	r3, [r4, #12]
   20d02:	429d      	cmp	r5, r3
	list->tail = node;
   20d04:	bf08      	it	eq
   20d06:	60e2      	streq	r2, [r4, #12]
   20d08:	e7ed      	b.n	20ce6 <gatt_sub_remove+0x1a>
   20d0a:	bd38      	pop	{r3, r4, r5, pc}

00020d0c <gatt_write_ccc_rsp>:
{
   20d0c:	b570      	push	{r4, r5, r6, lr}
   20d0e:	9c04      	ldr	r4, [sp, #16]
   20d10:	460e      	mov	r6, r1
   20d12:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20d14:	f06f 0104 	mvn.w	r1, #4
   20d18:	f104 000c 	add.w	r0, r4, #12
   20d1c:	f7ff fe81 	bl	20a22 <atomic_and>
	if (err) {
   20d20:	b1b6      	cbz	r6, 20d50 <gatt_write_ccc_rsp+0x44>
		sub = gatt_sub_find(conn);
   20d22:	2100      	movs	r1, #0
   20d24:	4628      	mov	r0, r5
   20d26:	f7ea fa8f 	bl	b248 <gatt_sub_find_free>
		if (!sub) {
   20d2a:	4601      	mov	r1, r0
   20d2c:	b1d0      	cbz	r0, 20d64 <gatt_write_ccc_rsp+0x58>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   20d2e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   20d30:	b1c3      	cbz	r3, 20d64 <gatt_write_ccc_rsp+0x58>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20d32:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   20d34:	f104 0010 	add.w	r0, r4, #16
   20d38:	4283      	cmp	r3, r0
   20d3a:	d105      	bne.n	20d48 <gatt_write_ccc_rsp+0x3c>
				gatt_sub_remove(conn, sub, tmp, params);
   20d3c:	4623      	mov	r3, r4
   20d3e:	4628      	mov	r0, r5
}
   20d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_sub_remove(conn, sub, tmp, params);
   20d44:	f7ff bfc2 	b.w	20ccc <gatt_sub_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20d48:	b162      	cbz	r2, 20d64 <gatt_write_ccc_rsp+0x58>
   20d4a:	4613      	mov	r3, r2
   20d4c:	6812      	ldr	r2, [r2, #0]
   20d4e:	e7f3      	b.n	20d38 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   20d50:	8923      	ldrh	r3, [r4, #8]
   20d52:	b93b      	cbnz	r3, 20d64 <gatt_write_ccc_rsp+0x58>
		params->notify(conn, params, NULL, 0);
   20d54:	6826      	ldr	r6, [r4, #0]
   20d56:	4621      	mov	r1, r4
   20d58:	4628      	mov	r0, r5
   20d5a:	46b4      	mov	ip, r6
   20d5c:	461a      	mov	r2, r3
}
   20d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
   20d62:	4760      	bx	ip
}
   20d64:	bd70      	pop	{r4, r5, r6, pc}

00020d66 <bt_gatt_attr_read>:
{
   20d66:	b510      	push	{r4, lr}
   20d68:	4610      	mov	r0, r2
   20d6a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   20d6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
   20d72:	4291      	cmp	r1, r2
   20d74:	d80b      	bhi.n	20d8e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   20d76:	1a54      	subs	r4, r2, r1
   20d78:	429c      	cmp	r4, r3
   20d7a:	bfa8      	it	ge
   20d7c:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   20d7e:	9b03      	ldr	r3, [sp, #12]
   20d80:	b2a4      	uxth	r4, r4
   20d82:	4622      	mov	r2, r4
   20d84:	4419      	add	r1, r3
   20d86:	f7fe fc37 	bl	1f5f8 <memcpy>
}
   20d8a:	4620      	mov	r0, r4
   20d8c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20d8e:	f06f 0406 	mvn.w	r4, #6
   20d92:	e7fa      	b.n	20d8a <bt_gatt_attr_read+0x24>

00020d94 <bt_gatt_attr_read_chrc>:
{
   20d94:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   20d96:	68ce      	ldr	r6, [r1, #12]
{
   20d98:	b087      	sub	sp, #28
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20d9a:	4608      	mov	r0, r1
{
   20d9c:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   20d9e:	79b3      	ldrb	r3, [r6, #6]
   20da0:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20da4:	4617      	mov	r7, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20da6:	f7ea fd77 	bl	b898 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20daa:	6831      	ldr	r1, [r6, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20dac:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20db0:	780b      	ldrb	r3, [r1, #0]
{
   20db2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20db6:	b99b      	cbnz	r3, 20de0 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   20db8:	884b      	ldrh	r3, [r1, #2]
   20dba:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   20dbe:	2305      	movs	r3, #5
	if (offset > value_len) {
   20dc0:	42ab      	cmp	r3, r5
   20dc2:	d315      	bcc.n	20df0 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   20dc4:	1b5b      	subs	r3, r3, r5
   20dc6:	42a3      	cmp	r3, r4
   20dc8:	bfa8      	it	ge
   20dca:	4623      	movge	r3, r4
   20dcc:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   20dce:	ab01      	add	r3, sp, #4
   20dd0:	4622      	mov	r2, r4
   20dd2:	1959      	adds	r1, r3, r5
   20dd4:	4638      	mov	r0, r7
   20dd6:	f7fe fc0f 	bl	1f5f8 <memcpy>
}
   20dda:	4620      	mov	r0, r4
   20ddc:	b007      	add	sp, #28
   20dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   20de0:	2210      	movs	r2, #16
   20de2:	3101      	adds	r1, #1
   20de4:	f10d 0007 	add.w	r0, sp, #7
   20de8:	f7fe fc06 	bl	1f5f8 <memcpy>
		value_len += 16U;
   20dec:	2313      	movs	r3, #19
   20dee:	e7e7      	b.n	20dc0 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20df0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   20df4:	e7f1      	b.n	20dda <bt_gatt_attr_read_chrc+0x46>

00020df6 <bt_gatt_foreach_attr>:
{
   20df6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20df8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20dfc:	2300      	movs	r3, #0
   20dfe:	9300      	str	r3, [sp, #0]
   20e00:	461a      	mov	r2, r3
   20e02:	f7ea fd61 	bl	b8c8 <bt_gatt_foreach_attr_type>
}
   20e06:	b005      	add	sp, #20
   20e08:	f85d fb04 	ldr.w	pc, [sp], #4

00020e0c <db_hash_process>:
	db_hash_gen(true);
   20e0c:	2001      	movs	r0, #1
   20e0e:	f7ea bdb9 	b.w	b984 <db_hash_gen>

00020e12 <bt_gatt_check_perm>:
{
   20e12:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   20e14:	07d4      	lsls	r4, r2, #31
{
   20e16:	4605      	mov	r5, r0
   20e18:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   20e1a:	d504      	bpl.n	20e26 <bt_gatt_check_perm+0x14>
   20e1c:	f010 0f15 	tst.w	r0, #21
   20e20:	d01e      	beq.n	20e60 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   20e22:	684b      	ldr	r3, [r1, #4]
   20e24:	b1e3      	cbz	r3, 20e60 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   20e26:	0793      	lsls	r3, r2, #30
   20e28:	d504      	bpl.n	20e34 <bt_gatt_check_perm+0x22>
   20e2a:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   20e2e:	d019      	beq.n	20e64 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   20e30:	688b      	ldr	r3, [r1, #8]
   20e32:	b1bb      	cbz	r3, 20e64 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   20e34:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   20e38:	f014 0f30 	tst.w	r4, #48	; 0x30
   20e3c:	d103      	bne.n	20e46 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   20e3e:	f014 000c 	ands.w	r0, r4, #12
   20e42:	d107      	bne.n	20e54 <bt_gatt_check_perm+0x42>
}
   20e44:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   20e46:	4628      	mov	r0, r5
   20e48:	f7ff f893 	bl	1ff72 <bt_conn_get_security>
   20e4c:	2802      	cmp	r0, #2
   20e4e:	d8f6      	bhi.n	20e3e <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   20e50:	2005      	movs	r0, #5
   20e52:	e7f7      	b.n	20e44 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   20e54:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   20e56:	2b00      	cmp	r3, #0
   20e58:	bf14      	ite	ne
   20e5a:	2000      	movne	r0, #0
   20e5c:	200f      	moveq	r0, #15
   20e5e:	e7f1      	b.n	20e44 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   20e60:	2002      	movs	r0, #2
   20e62:	e7ef      	b.n	20e44 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   20e64:	2003      	movs	r0, #3
   20e66:	e7ed      	b.n	20e44 <bt_gatt_check_perm+0x32>

00020e68 <gatt_discover_next>:
{
   20e68:	b570      	push	{r4, r5, r6, lr}
   20e6a:	4605      	mov	r5, r0
   20e6c:	4614      	mov	r4, r2
	if (!last_handle)
   20e6e:	b929      	cbnz	r1, 20e7c <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   20e70:	4621      	mov	r1, r4
   20e72:	4628      	mov	r0, r5
   20e74:	f7eb f812 	bl	be9c <bt_gatt_discover>
   20e78:	b928      	cbnz	r0, 20e86 <gatt_discover_next+0x1e>
}
   20e7a:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   20e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20e80:	4299      	cmp	r1, r3
   20e82:	d107      	bne.n	20e94 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   20e84:	8111      	strh	r1, [r2, #8]
	params->func(conn, NULL, params);
   20e86:	6863      	ldr	r3, [r4, #4]
   20e88:	4622      	mov	r2, r4
   20e8a:	4628      	mov	r0, r5
   20e8c:	2100      	movs	r1, #0
}
   20e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   20e92:	4718      	bx	r3
		params->start_handle++;
   20e94:	3101      	adds	r1, #1
	if (params->start_handle > params->end_handle) {
   20e96:	89d3      	ldrh	r3, [r2, #14]
		params->start_handle++;
   20e98:	b289      	uxth	r1, r1
	if (params->start_handle > params->end_handle) {
   20e9a:	428b      	cmp	r3, r1
		params->start_handle++;
   20e9c:	8111      	strh	r1, [r2, #8]
	if (params->start_handle > params->end_handle) {
   20e9e:	d2e7      	bcs.n	20e70 <gatt_discover_next+0x8>
   20ea0:	e7f1      	b.n	20e86 <gatt_discover_next+0x1e>

00020ea2 <gatt_find_type_rsp>:
{
   20ea2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ea6:	b088      	sub	sp, #32
   20ea8:	4607      	mov	r7, r0
   20eaa:	4690      	mov	r8, r2
   20eac:	461e      	mov	r6, r3
   20eae:	9d10      	ldr	r5, [sp, #64]	; 0x40
	if (err) {
   20eb0:	2900      	cmp	r1, #0
   20eb2:	d13a      	bne.n	20f2a <gatt_find_type_rsp+0x88>
   20eb4:	460c      	mov	r4, r1
	u16_t end_handle = 0U, start_handle;
   20eb6:	468a      	mov	sl, r1
		struct bt_gatt_attr attr = {};
   20eb8:	4689      	mov	r9, r1
	for (i = 0U; length >= sizeof(rsp->list[i]);
   20eba:	2e03      	cmp	r6, #3
   20ebc:	d809      	bhi.n	20ed2 <gatt_find_type_rsp+0x30>
	if (length > 0) {
   20ebe:	2e00      	cmp	r6, #0
   20ec0:	d133      	bne.n	20f2a <gatt_find_type_rsp+0x88>
	gatt_discover_next(conn, end_handle, params);
   20ec2:	462a      	mov	r2, r5
   20ec4:	4651      	mov	r1, sl
   20ec6:	4638      	mov	r0, r7
   20ec8:	f7ff ffce 	bl	20e68 <gatt_discover_next>
}
   20ecc:	b008      	add	sp, #32
   20ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_gatt_attr attr = {};
   20ed2:	2210      	movs	r2, #16
   20ed4:	2100      	movs	r1, #0
   20ed6:	eb0d 0002 	add.w	r0, sp, r2
   20eda:	f7fe fbb7 	bl	1f64c <memset>
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
   20ede:	b2e3      	uxtb	r3, r4
   20ee0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   20ee4:	f88d 9000 	strb.w	r9, [sp]
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
   20ee8:	881a      	ldrh	r2, [r3, #0]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
   20eea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   20eee:	7c2b      	ldrb	r3, [r5, #16]
		attr.handle = start_handle;
   20ef0:	f8ad 201c 	strh.w	r2, [sp, #28]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
   20ef4:	2b00      	cmp	r3, #0
   20ef6:	f642 0301 	movw	r3, #10241	; 0x2801
   20efa:	bf08      	it	eq
   20efc:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   20f00:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = params->uuid;
   20f04:	682b      	ldr	r3, [r5, #0]
   20f06:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
   20f08:	ab01      	add	r3, sp, #4
   20f0a:	9306      	str	r3, [sp, #24]
		value.end_handle = end_handle;
   20f0c:	f8ad a008 	strh.w	sl, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   20f10:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   20f14:	686b      	ldr	r3, [r5, #4]
   20f16:	462a      	mov	r2, r5
   20f18:	a903      	add	r1, sp, #12
   20f1a:	4638      	mov	r0, r7
   20f1c:	4798      	blx	r3
   20f1e:	3401      	adds	r4, #1
   20f20:	2800      	cmp	r0, #0
   20f22:	d0d3      	beq.n	20ecc <gatt_find_type_rsp+0x2a>
	     i++, length -=  sizeof(rsp->list[i])) {
   20f24:	3e04      	subs	r6, #4
   20f26:	b2b6      	uxth	r6, r6
   20f28:	e7c7      	b.n	20eba <gatt_find_type_rsp+0x18>
	params->func(conn, NULL, params);
   20f2a:	686b      	ldr	r3, [r5, #4]
   20f2c:	462a      	mov	r2, r5
   20f2e:	2100      	movs	r1, #0
   20f30:	4638      	mov	r0, r7
   20f32:	4798      	blx	r3
   20f34:	e7ca      	b.n	20ecc <gatt_find_type_rsp+0x2a>

00020f36 <bt_gatt_unsubscribe>:
	if (conn->state != BT_CONN_CONNECTED) {
   20f36:	7b43      	ldrb	r3, [r0, #13]
   20f38:	2b06      	cmp	r3, #6
{
   20f3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f3e:	4681      	mov	r9, r0
   20f40:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   20f42:	d169      	bne.n	21018 <bt_gatt_unsubscribe+0xe2>
	sub = gatt_sub_find(conn);
   20f44:	2100      	movs	r1, #0
   20f46:	f7ea f97f 	bl	b248 <gatt_sub_find_free>
	if (!sub) {
   20f4a:	4680      	mov	r8, r0
   20f4c:	b920      	cbnz	r0, 20f58 <bt_gatt_unsubscribe+0x22>
		return -EINVAL;
   20f4e:	f06f 0015 	mvn.w	r0, #21
}
   20f52:	b003      	add	sp, #12
   20f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20f58:	6885      	ldr	r5, [r0, #8]
   20f5a:	b1c5      	cbz	r5, 20f8e <bt_gatt_unsubscribe+0x58>
   20f5c:	f1b5 0410 	subs.w	r4, r5, #16
   20f60:	d017      	beq.n	20f92 <bt_gatt_unsubscribe+0x5c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20f62:	682d      	ldr	r5, [r5, #0]
   20f64:	b105      	cbz	r5, 20f68 <bt_gatt_unsubscribe+0x32>
   20f66:	3d10      	subs	r5, #16
   20f68:	2700      	movs	r7, #0
   20f6a:	463b      	mov	r3, r7
   20f6c:	46ba      	mov	sl, r7
			if (atomic_test_bit(params->flags,
   20f6e:	f106 0b0c 	add.w	fp, r6, #12
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20f72:	b984      	cbnz	r4, 20f96 <bt_gatt_unsubscribe+0x60>
	if (!found) {
   20f74:	2b00      	cmp	r3, #0
   20f76:	d0ea      	beq.n	20f4e <bt_gatt_unsubscribe+0x18>
	if (has_subscription) {
   20f78:	f1ba 0f00 	cmp.w	sl, #0
   20f7c:	d041      	beq.n	21002 <bt_gatt_unsubscribe+0xcc>
		params->notify(conn, params, NULL, 0);
   20f7e:	6835      	ldr	r5, [r6, #0]
   20f80:	4623      	mov	r3, r4
   20f82:	4622      	mov	r2, r4
   20f84:	4631      	mov	r1, r6
   20f86:	4648      	mov	r0, r9
   20f88:	47a8      	blx	r5
		return 0;
   20f8a:	4620      	mov	r0, r4
   20f8c:	e7e1      	b.n	20f52 <bt_gatt_unsubscribe+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20f8e:	462c      	mov	r4, r5
   20f90:	e7ea      	b.n	20f68 <bt_gatt_unsubscribe+0x32>
   20f92:	4625      	mov	r5, r4
   20f94:	e7e8      	b.n	20f68 <bt_gatt_unsubscribe+0x32>
		if (params == tmp) {
   20f96:	42b4      	cmp	r4, r6
   20f98:	f104 0110 	add.w	r1, r4, #16
   20f9c:	d125      	bne.n	20fea <bt_gatt_unsubscribe+0xb4>
Z_GENLIST_REMOVE(slist, snode)
   20f9e:	6920      	ldr	r0, [r4, #16]
   20fa0:	b9df      	cbnz	r7, 20fda <bt_gatt_unsubscribe+0xa4>
   20fa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
	list->head = node;
   20fa6:	f8c8 0008 	str.w	r0, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   20faa:	4299      	cmp	r1, r3
   20fac:	d101      	bne.n	20fb2 <bt_gatt_unsubscribe+0x7c>
	list->tail = node;
   20fae:	f8c8 000c 	str.w	r0, [r8, #12]
	parent->next = child;
   20fb2:	2300      	movs	r3, #0
   20fb4:	6123      	str	r3, [r4, #16]
			if (atomic_test_bit(params->flags,
   20fb6:	2102      	movs	r1, #2
   20fb8:	4658      	mov	r0, fp
   20fba:	f7ff fd29 	bl	20a10 <atomic_test_bit>
   20fbe:	b1e0      	cbz	r0, 20ffa <bt_gatt_unsubscribe+0xc4>
   20fc0:	9001      	str	r0, [sp, #4]
	bt_att_req_cancel(conn, params);
   20fc2:	4631      	mov	r1, r6
   20fc4:	4648      	mov	r0, r9
   20fc6:	f7e9 fddf 	bl	ab88 <bt_att_req_cancel>
   20fca:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20fcc:	b1bd      	cbz	r5, 20ffe <bt_gatt_unsubscribe+0xc8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20fce:	6929      	ldr	r1, [r5, #16]
   20fd0:	b101      	cbz	r1, 20fd4 <bt_gatt_unsubscribe+0x9e>
   20fd2:	3910      	subs	r1, #16
   20fd4:	462c      	mov	r4, r5
   20fd6:	460d      	mov	r5, r1
   20fd8:	e7cb      	b.n	20f72 <bt_gatt_unsubscribe+0x3c>
	parent->next = child;
   20fda:	6038      	str	r0, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   20fdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   20fe0:	4299      	cmp	r1, r3
	list->tail = node;
   20fe2:	bf08      	it	eq
   20fe4:	f8c8 700c 	streq.w	r7, [r8, #12]
   20fe8:	e7e3      	b.n	20fb2 <bt_gatt_unsubscribe+0x7c>
		if (tmp->value_handle == params->value_handle) {
   20fea:	88a4      	ldrh	r4, [r4, #4]
   20fec:	88b0      	ldrh	r0, [r6, #4]
   20fee:	460f      	mov	r7, r1
   20ff0:	4284      	cmp	r4, r0
   20ff2:	bf08      	it	eq
   20ff4:	f04f 0a01 	moveq.w	sl, #1
   20ff8:	e7e8      	b.n	20fcc <bt_gatt_unsubscribe+0x96>
			found = true;
   20ffa:	2301      	movs	r3, #1
   20ffc:	e7e6      	b.n	20fcc <bt_gatt_unsubscribe+0x96>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   20ffe:	4629      	mov	r1, r5
   21000:	e7e8      	b.n	20fd4 <bt_gatt_unsubscribe+0x9e>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21002:	88f1      	ldrh	r1, [r6, #6]
	params->value = 0x0000;
   21004:	f8a6 a008 	strh.w	sl, [r6, #8]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21008:	4633      	mov	r3, r6
   2100a:	4652      	mov	r2, sl
   2100c:	4648      	mov	r0, r9
}
   2100e:	b003      	add	sp, #12
   21010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   21014:	f7ea b8e4 	b.w	b1e0 <gatt_write_ccc.constprop.33>
		return -ENOTCONN;
   21018:	f06f 0038 	mvn.w	r0, #56	; 0x38
   2101c:	e799      	b.n	20f52 <bt_gatt_unsubscribe+0x1c>

0002101e <bt_gatt_notification>:
{
   2101e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21022:	4688      	mov	r8, r1
	sub = gatt_sub_find(conn);
   21024:	2100      	movs	r1, #0
{
   21026:	4606      	mov	r6, r0
   21028:	4691      	mov	r9, r2
   2102a:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2102c:	f7ea f90c 	bl	b248 <gatt_sub_find_free>
	if (!sub) {
   21030:	b1e0      	cbz	r0, 2106c <bt_gatt_notification+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   21032:	6883      	ldr	r3, [r0, #8]
   21034:	b1d3      	cbz	r3, 2106c <bt_gatt_notification+0x4e>
   21036:	f1b3 0510 	subs.w	r5, r3, #16
   2103a:	d017      	beq.n	2106c <bt_gatt_notification+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2103c:	681c      	ldr	r4, [r3, #0]
   2103e:	b104      	cbz	r4, 21042 <bt_gatt_notification+0x24>
   21040:	3c10      	subs	r4, #16
		if (handle != params->value_handle) {
   21042:	88ab      	ldrh	r3, [r5, #4]
   21044:	4543      	cmp	r3, r8
   21046:	d10a      	bne.n	2105e <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   21048:	682f      	ldr	r7, [r5, #0]
   2104a:	4653      	mov	r3, sl
   2104c:	464a      	mov	r2, r9
   2104e:	4629      	mov	r1, r5
   21050:	4630      	mov	r0, r6
   21052:	47b8      	blx	r7
   21054:	b918      	cbnz	r0, 2105e <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   21056:	4629      	mov	r1, r5
   21058:	4630      	mov	r0, r6
   2105a:	f7ff ff6c 	bl	20f36 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2105e:	b12c      	cbz	r4, 2106c <bt_gatt_notification+0x4e>
   21060:	6923      	ldr	r3, [r4, #16]
   21062:	b103      	cbz	r3, 21066 <bt_gatt_notification+0x48>
   21064:	3b10      	subs	r3, #16
{
   21066:	4625      	mov	r5, r4
   21068:	461c      	mov	r4, r3
   2106a:	e7ea      	b.n	21042 <bt_gatt_notification+0x24>
}
   2106c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021070 <bt_gatt_change_aware>:
{
   21070:	b570      	push	{r4, r5, r6, lr}
   21072:	460d      	mov	r5, r1
   21074:	f7ea fa88 	bl	b588 <find_cf_cfg.part.10>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21078:	b910      	cbnz	r0, 21080 <bt_gatt_change_aware+0x10>
		return true;
   2107a:	2501      	movs	r5, #1
}
   2107c:	4628      	mov	r0, r5
   2107e:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21080:	7a03      	ldrb	r3, [r0, #8]
   21082:	07db      	lsls	r3, r3, #31
   21084:	d5f9      	bpl.n	2107a <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   21086:	f100 040c 	add.w	r4, r0, #12
   2108a:	2100      	movs	r1, #0
   2108c:	4620      	mov	r0, r4
   2108e:	f7ff fcbf 	bl	20a10 <atomic_test_bit>
   21092:	4606      	mov	r6, r0
   21094:	2800      	cmp	r0, #0
   21096:	d1f0      	bne.n	2107a <bt_gatt_change_aware+0xa>
	if (!req) {
   21098:	2d00      	cmp	r5, #0
   2109a:	d0ef      	beq.n	2107c <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2109c:	2101      	movs	r1, #1
   2109e:	4620      	mov	r0, r4
   210a0:	f7ff fcb6 	bl	20a10 <atomic_test_bit>
   210a4:	4605      	mov	r5, r0
   210a6:	b148      	cbz	r0, 210bc <bt_gatt_change_aware+0x4c>
   210a8:	f06f 0102 	mvn.w	r1, #2
   210ac:	4620      	mov	r0, r4
   210ae:	f7ff fcb8 	bl	20a22 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   210b2:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   210b4:	4620      	mov	r0, r4
   210b6:	f7ff fd32 	bl	20b1e <atomic_set_bit>
	return false;
   210ba:	e7df      	b.n	2107c <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   210bc:	2101      	movs	r1, #1
   210be:	e7f9      	b.n	210b4 <bt_gatt_change_aware+0x44>

000210c0 <sys_memcpy_swap>:
	psrc += length - 1;
   210c0:	1e53      	subs	r3, r2, #1
   210c2:	4419      	add	r1, r3
	for (; length > 0; length--) {
   210c4:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   210c6:	f811 3901 	ldrb.w	r3, [r1], #-1
   210ca:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   210ce:	4290      	cmp	r0, r2
   210d0:	d1f9      	bne.n	210c6 <sys_memcpy_swap+0x6>
}
   210d2:	4770      	bx	lr

000210d4 <sys_mem_swap>:
{
   210d4:	b510      	push	{r4, lr}
   210d6:	1843      	adds	r3, r0, r1
   210d8:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   210dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		u8_t tmp = ((u8_t *)buf)[i];
   210e0:	7802      	ldrb	r2, [r0, #0]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   210e2:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   210e6:	4288      	cmp	r0, r1
		((u8_t *)buf)[length - 1 - i] = tmp;
   210e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   210ea:	d1f7      	bne.n	210dc <sys_mem_swap+0x8>
	}
}
   210ec:	bd10      	pop	{r4, pc}

000210ee <smp_pairing_rsp>:
}
   210ee:	2007      	movs	r0, #7
   210f0:	4770      	bx	lr

000210f2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   210f2:	2301      	movs	r3, #1
   210f4:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   210f8:	f3bf 8f5b 	dmb	ish
   210fc:	e850 3f00 	ldrex	r3, [r0]
   21100:	430b      	orrs	r3, r1
   21102:	e840 3200 	strex	r2, r3, [r0]
   21106:	2a00      	cmp	r2, #0
   21108:	d1f8      	bne.n	210fc <atomic_set_bit+0xa>
   2110a:	f3bf 8f5b 	dmb	ish
}
   2110e:	4770      	bx	lr

00021110 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21110:	f3bf 8f5b 	dmb	ish
   21114:	6800      	ldr	r0, [r0, #0]
   21116:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2111a:	4108      	asrs	r0, r1
}
   2111c:	f000 0001 	and.w	r0, r0, #1
   21120:	4770      	bx	lr

00021122 <bt_smp_aes_cmac>:
{
   21122:	b570      	push	{r4, r5, r6, lr}
   21124:	b0c2      	sub	sp, #264	; 0x108
   21126:	460d      	mov	r5, r1
   21128:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2112a:	4601      	mov	r1, r0
   2112c:	aa16      	add	r2, sp, #88	; 0x58
   2112e:	4668      	mov	r0, sp
{
   21130:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21132:	f7fd fb81 	bl	1e838 <tc_cmac_setup>
   21136:	b150      	cbz	r0, 2114e <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   21138:	4632      	mov	r2, r6
   2113a:	4629      	mov	r1, r5
   2113c:	4668      	mov	r0, sp
   2113e:	f7fd fba6 	bl	1e88e <tc_cmac_update>
   21142:	b120      	cbz	r0, 2114e <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   21144:	4669      	mov	r1, sp
   21146:	4620      	mov	r0, r4
   21148:	f7fd fc0c 	bl	1e964 <tc_cmac_final>
   2114c:	b918      	cbnz	r0, 21156 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2114e:	f06f 0004 	mvn.w	r0, #4
}
   21152:	b042      	add	sp, #264	; 0x108
   21154:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   21156:	2000      	movs	r0, #0
   21158:	e7fb      	b.n	21152 <bt_smp_aes_cmac+0x30>

0002115a <smp_f4>:
{
   2115a:	b570      	push	{r4, r5, r6, lr}
   2115c:	b096      	sub	sp, #88	; 0x58
   2115e:	4614      	mov	r4, r2
   21160:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   21162:	2220      	movs	r2, #32
   21164:	4601      	mov	r1, r0
   21166:	a805      	add	r0, sp, #20
{
   21168:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
   2116a:	f7ff ffa9 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2116e:	2220      	movs	r2, #32
   21170:	4631      	mov	r1, r6
   21172:	a80d      	add	r0, sp, #52	; 0x34
   21174:	f7ff ffa4 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   21178:	4621      	mov	r1, r4
   2117a:	2210      	movs	r2, #16
   2117c:	a801      	add	r0, sp, #4
	m[64] = z;
   2117e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   21182:	f7ff ff9d 	bl	210c0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   21186:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   21188:	2241      	movs	r2, #65	; 0x41
   2118a:	a905      	add	r1, sp, #20
   2118c:	a801      	add	r0, sp, #4
   2118e:	f7ff ffc8 	bl	21122 <bt_smp_aes_cmac>
	if (err) {
   21192:	4604      	mov	r4, r0
   21194:	b918      	cbnz	r0, 2119e <smp_f4+0x44>
	sys_mem_swap(res, 16);
   21196:	2110      	movs	r1, #16
   21198:	981a      	ldr	r0, [sp, #104]	; 0x68
   2119a:	f7ff ff9b 	bl	210d4 <sys_mem_swap>
}
   2119e:	4620      	mov	r0, r4
   211a0:	b016      	add	sp, #88	; 0x58
   211a2:	bd70      	pop	{r4, r5, r6, pc}

000211a4 <smp_f6>:
{
   211a4:	b570      	push	{r4, r5, r6, lr}
   211a6:	b096      	sub	sp, #88	; 0x58
   211a8:	4605      	mov	r5, r0
   211aa:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   211ac:	a805      	add	r0, sp, #20
   211ae:	2210      	movs	r2, #16
{
   211b0:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
   211b2:	f7ff ff85 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   211b6:	2210      	movs	r2, #16
   211b8:	4631      	mov	r1, r6
   211ba:	a809      	add	r0, sp, #36	; 0x24
   211bc:	f7ff ff80 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   211c0:	4621      	mov	r1, r4
   211c2:	2210      	movs	r2, #16
   211c4:	a80d      	add	r0, sp, #52	; 0x34
   211c6:	f7ff ff7b 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   211ca:	2203      	movs	r2, #3
   211cc:	991a      	ldr	r1, [sp, #104]	; 0x68
   211ce:	a811      	add	r0, sp, #68	; 0x44
   211d0:	f7ff ff76 	bl	210c0 <sys_memcpy_swap>
	m[51] = a1->type;
   211d4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   211d6:	f814 3b01 	ldrb.w	r3, [r4], #1
   211da:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   211de:	4621      	mov	r1, r4
   211e0:	2206      	movs	r2, #6
   211e2:	a812      	add	r0, sp, #72	; 0x48
   211e4:	f7fe fa08 	bl	1f5f8 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   211e8:	4621      	mov	r1, r4
   211ea:	2206      	movs	r2, #6
   211ec:	a812      	add	r0, sp, #72	; 0x48
   211ee:	f7ff ff67 	bl	210c0 <sys_memcpy_swap>
	m[58] = a2->type;
   211f2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   211f4:	f814 3b01 	ldrb.w	r3, [r4], #1
   211f8:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   211fc:	4621      	mov	r1, r4
   211fe:	2206      	movs	r2, #6
   21200:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21204:	f7fe f9f8 	bl	1f5f8 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   21208:	4621      	mov	r1, r4
   2120a:	2206      	movs	r2, #6
   2120c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21210:	f7ff ff56 	bl	210c0 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   21214:	2210      	movs	r2, #16
   21216:	4629      	mov	r1, r5
   21218:	a801      	add	r0, sp, #4
   2121a:	f7ff ff51 	bl	210c0 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2121e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   21220:	2241      	movs	r2, #65	; 0x41
   21222:	a905      	add	r1, sp, #20
   21224:	a801      	add	r0, sp, #4
   21226:	f7ff ff7c 	bl	21122 <bt_smp_aes_cmac>
	if (err) {
   2122a:	4604      	mov	r4, r0
   2122c:	b918      	cbnz	r0, 21236 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   2122e:	2110      	movs	r1, #16
   21230:	981d      	ldr	r0, [sp, #116]	; 0x74
   21232:	f7ff ff4f 	bl	210d4 <sys_mem_swap>
}
   21236:	4620      	mov	r0, r4
   21238:	b016      	add	sp, #88	; 0x58
   2123a:	bd70      	pop	{r4, r5, r6, pc}

0002123c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2123c:	2301      	movs	r3, #1
   2123e:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21242:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21244:	f3bf 8f5b 	dmb	ish
   21248:	e850 3f00 	ldrex	r3, [r0]
   2124c:	400b      	ands	r3, r1
   2124e:	e840 3200 	strex	r2, r3, [r0]
   21252:	2a00      	cmp	r2, #0
   21254:	d1f8      	bne.n	21248 <atomic_clear_bit+0xc>
   21256:	f3bf 8f5b 	dmb	ish
}
   2125a:	4770      	bx	lr

0002125c <bt_smp_disconnected>:
{
   2125c:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   2125e:	6803      	ldr	r3, [r0, #0]
   21260:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
{
   21264:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
   21266:	f500 70be 	add.w	r0, r0, #380	; 0x17c
   2126a:	f004 f906 	bl	2547a <k_delayed_work_cancel>
	if (keys) {
   2126e:	b13c      	cbz	r4, 21280 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   21270:	8963      	ldrh	r3, [r4, #10]
   21272:	b113      	cbz	r3, 2127a <bt_smp_disconnected+0x1e>
   21274:	7a63      	ldrb	r3, [r4, #9]
   21276:	079b      	lsls	r3, r3, #30
   21278:	d502      	bpl.n	21280 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   2127a:	4620      	mov	r0, r4
   2127c:	f7ed fafa 	bl	e874 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   21280:	4628      	mov	r0, r5
   21282:	f44f 72ce 	mov.w	r2, #412	; 0x19c
   21286:	2100      	movs	r1, #0
}
   21288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2128c:	f7fe b9de 	b.w	1f64c <memset>

00021290 <smp_create_pdu.isra.6>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   21290:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21292:	f100 0594 	add.w	r5, r0, #148	; 0x94
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   21296:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21298:	4628      	mov	r0, r5
   2129a:	2104      	movs	r1, #4
   2129c:	f7ff ff38 	bl	21110 <atomic_test_bit>
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   212a0:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   212a2:	2800      	cmp	r0, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   212a4:	f247 5230 	movw	r2, #30000	; 0x7530
   212a8:	4608      	mov	r0, r1
   212aa:	bf18      	it	ne
   212ac:	2200      	movne	r2, #0
   212ae:	f7fe ff41 	bl	20134 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   212b2:	4604      	mov	r4, r0
   212b4:	b928      	cbnz	r0, 212c2 <smp_create_pdu.isra.6+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   212b6:	2104      	movs	r1, #4
   212b8:	4628      	mov	r0, r5
   212ba:	f7ff ff1a 	bl	210f2 <atomic_set_bit>
}
   212be:	4620      	mov	r0, r4
   212c0:	bd70      	pop	{r4, r5, r6, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
   212c2:	2101      	movs	r1, #1
   212c4:	3008      	adds	r0, #8
   212c6:	f001 f9b5 	bl	22634 <net_buf_simple_add>
	hdr->code = op;
   212ca:	7006      	strb	r6, [r0, #0]
	return buf;
   212cc:	e7f7      	b.n	212be <smp_create_pdu.isra.6+0x2e>

000212ce <smp_dhkey_check>:
{
   212ce:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   212d0:	6803      	ldr	r3, [r0, #0]
   212d2:	78db      	ldrb	r3, [r3, #3]
   212d4:	2b01      	cmp	r3, #1
{
   212d6:	4605      	mov	r5, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   212d8:	d115      	bne.n	21306 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   212da:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   212dc:	f100 0494 	add.w	r4, r0, #148	; 0x94
   212e0:	210f      	movs	r1, #15
   212e2:	4620      	mov	r0, r4
   212e4:	f7ff ffaa 	bl	2123c <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   212e8:	4631      	mov	r1, r6
   212ea:	2210      	movs	r2, #16
   212ec:	f205 1047 	addw	r0, r5, #327	; 0x147
   212f0:	f7fe f982 	bl	1f5f8 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   212f4:	2107      	movs	r1, #7
   212f6:	4620      	mov	r0, r4
   212f8:	f7ff ff0a 	bl	21110 <atomic_test_bit>
   212fc:	b128      	cbz	r0, 2130a <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   212fe:	2108      	movs	r1, #8
   21300:	4620      	mov	r0, r4
   21302:	f7ff fef6 	bl	210f2 <atomic_set_bit>
}
   21306:	2000      	movs	r0, #0
   21308:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2130a:	2109      	movs	r1, #9
   2130c:	4620      	mov	r0, r4
   2130e:	f7ff feff 	bl	21110 <atomic_test_bit>
   21312:	2800      	cmp	r0, #0
   21314:	d1f3      	bne.n	212fe <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   21316:	4628      	mov	r0, r5
}
   21318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   2131c:	f7eb be96 	b.w	d04c <compute_and_check_and_send_slave_dhcheck>

00021320 <smp_send_pairing_random>:
{
   21320:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21322:	2104      	movs	r1, #4
{
   21324:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21326:	f7ff ffb3 	bl	21290 <smp_create_pdu.isra.6>
	if (!rsp_buf) {
   2132a:	4604      	mov	r4, r0
   2132c:	b178      	cbz	r0, 2134e <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   2132e:	2110      	movs	r1, #16
   21330:	3008      	adds	r0, #8
   21332:	f001 f97f 	bl	22634 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   21336:	2210      	movs	r2, #16
   21338:	f105 01b7 	add.w	r1, r5, #183	; 0xb7
   2133c:	f7fe f95c 	bl	1f5f8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   21340:	4628      	mov	r0, r5
   21342:	2200      	movs	r2, #0
   21344:	4621      	mov	r1, r4
   21346:	f7eb fdc7 	bl	ced8 <smp_send.isra.7>
	return 0;
   2134a:	2000      	movs	r0, #0
}
   2134c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2134e:	2008      	movs	r0, #8
   21350:	e7fc      	b.n	2134c <smp_send_pairing_random+0x2c>

00021352 <send_pairing_rsp>:
{
   21352:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   21354:	2102      	movs	r1, #2
{
   21356:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   21358:	f7ff ff9a 	bl	21290 <smp_create_pdu.isra.6>
	if (!rsp_buf) {
   2135c:	4604      	mov	r4, r0
   2135e:	b178      	cbz	r0, 21380 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   21360:	2106      	movs	r1, #6
   21362:	3008      	adds	r0, #8
   21364:	f001 f966 	bl	22634 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   21368:	2206      	movs	r2, #6
   2136a:	f105 01a1 	add.w	r1, r5, #161	; 0xa1
   2136e:	f7fe f943 	bl	1f5f8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   21372:	4628      	mov	r0, r5
   21374:	2200      	movs	r2, #0
   21376:	4621      	mov	r1, r4
   21378:	f7eb fdae 	bl	ced8 <smp_send.isra.7>
	return 0;
   2137c:	2000      	movs	r0, #0
}
   2137e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   21380:	2008      	movs	r0, #8
   21382:	e7fc      	b.n	2137e <send_pairing_rsp+0x2c>

00021384 <smp_security_request>:
   21384:	2007      	movs	r0, #7
   21386:	4770      	bx	lr

00021388 <atomic_test_and_clear_bit>:
{
   21388:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2138a:	f001 021f 	and.w	r2, r1, #31
   2138e:	2301      	movs	r3, #1
   21390:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21392:	0949      	lsrs	r1, r1, #5
   21394:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21396:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2139a:	f3bf 8f5b 	dmb	ish
   2139e:	e850 2f00 	ldrex	r2, [r0]
   213a2:	ea02 0104 	and.w	r1, r2, r4
   213a6:	e840 1c00 	strex	ip, r1, [r0]
   213aa:	f1bc 0f00 	cmp.w	ip, #0
   213ae:	d1f6      	bne.n	2139e <atomic_test_and_clear_bit+0x16>
   213b0:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   213b4:	421a      	tst	r2, r3
}
   213b6:	bf14      	ite	ne
   213b8:	2001      	movne	r0, #1
   213ba:	2000      	moveq	r0, #0
   213bc:	bd10      	pop	{r4, pc}

000213be <smp_reset>:
{
   213be:	b538      	push	{r3, r4, r5, lr}
   213c0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   213c2:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   213c4:	f500 70be 	add.w	r0, r0, #380	; 0x17c
   213c8:	f004 f857 	bl	2547a <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   213cc:	2300      	movs	r3, #0
   213ce:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	atomic_set(&smp->allowed_cmds, 0);
   213d2:	f104 0090 	add.w	r0, r4, #144	; 0x90
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   213d6:	f3bf 8f5b 	dmb	ish
   213da:	e850 2f00 	ldrex	r2, [r0]
   213de:	e840 3100 	strex	r1, r3, [r0]
   213e2:	2900      	cmp	r1, #0
   213e4:	d1f9      	bne.n	213da <smp_reset+0x1c>
   213e6:	f3bf 8f5b 	dmb	ish
   213ea:	f3bf 8f5b 	dmb	ish
   213ee:	3494      	adds	r4, #148	; 0x94
   213f0:	e854 2f00 	ldrex	r2, [r4]
   213f4:	e844 3100 	strex	r1, r3, [r4]
   213f8:	2900      	cmp	r1, #0
   213fa:	d1f9      	bne.n	213f0 <smp_reset+0x32>
   213fc:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   21400:	7a6b      	ldrb	r3, [r5, #9]
   21402:	7aaa      	ldrb	r2, [r5, #10]
   21404:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   21406:	bf18      	it	ne
   21408:	72ab      	strbne	r3, [r5, #10]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2140a:	2101      	movs	r1, #1
}
   2140c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   21410:	f7ff be6f 	b.w	210f2 <atomic_set_bit>

00021414 <smp_error>:
{
   21414:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21416:	4606      	mov	r6, r0
   21418:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   2141a:	f7ec f94f 	bl	d6bc <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2141e:	2105      	movs	r1, #5
   21420:	4630      	mov	r0, r6
   21422:	f7ff ff35 	bl	21290 <smp_create_pdu.isra.6>
	if (!buf) {
   21426:	4605      	mov	r5, r0
   21428:	b178      	cbz	r0, 2144a <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   2142a:	2101      	movs	r1, #1
   2142c:	3008      	adds	r0, #8
   2142e:	f001 f901 	bl	22634 <net_buf_simple_add>
	rsp->reason = reason;
   21432:	7004      	strb	r4, [r0, #0]
   21434:	2400      	movs	r4, #0
   21436:	9400      	str	r4, [sp, #0]
   21438:	4623      	mov	r3, r4
   2143a:	462a      	mov	r2, r5
   2143c:	2106      	movs	r1, #6
   2143e:	6830      	ldr	r0, [r6, #0]
   21440:	f7fe fe7b 	bl	2013a <bt_l2cap_send_cb>
	return 0;
   21444:	4620      	mov	r0, r4
}
   21446:	b002      	add	sp, #8
   21448:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2144a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2144e:	e7fa      	b.n	21446 <smp_error+0x32>

00021450 <smp_check_complete.part.14>:
static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
   21450:	b510      	push	{r4, lr}
   21452:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   21454:	2106      	movs	r1, #6
   21456:	f7fe fe89 	bl	2016c <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2145a:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
   2145e:	ea21 0104 	bic.w	r1, r1, r4
   21462:	f880 1178 	strb.w	r1, [r0, #376]	; 0x178
		if (!smp->local_dist && !smp->remote_dist) {
   21466:	f8b0 1178 	ldrh.w	r1, [r0, #376]	; 0x178
   2146a:	b919      	cbnz	r1, 21474 <smp_check_complete.part.14+0x24>
}
   2146c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   21470:	f7ec b924 	b.w	d6bc <smp_pairing_complete>
}
   21474:	bd10      	pop	{r4, pc}

00021476 <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   21476:	7881      	ldrb	r1, [r0, #2]
   21478:	2901      	cmp	r1, #1
   2147a:	d101      	bne.n	21480 <smp_ident_sent+0xa>
   2147c:	f7ff bfe8 	b.w	21450 <smp_check_complete.part.14>
}
   21480:	4770      	bx	lr

00021482 <smp_sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   21482:	7883      	ldrb	r3, [r0, #2]
   21484:	2b01      	cmp	r3, #1
   21486:	d102      	bne.n	2148e <smp_sign_info_sent+0xc>
   21488:	2104      	movs	r1, #4
   2148a:	f7ff bfe1 	b.w	21450 <smp_check_complete.part.14>
}
   2148e:	4770      	bx	lr

00021490 <smp_id_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   21490:	7883      	ldrb	r3, [r0, #2]
   21492:	2b01      	cmp	r3, #1
   21494:	d102      	bne.n	2149c <smp_id_sent+0xc>
   21496:	2102      	movs	r1, #2
   21498:	f7ff bfda 	b.w	21450 <smp_check_complete.part.14>
}
   2149c:	4770      	bx	lr

0002149e <smp_c1>:
{
   2149e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   214a2:	b089      	sub	sp, #36	; 0x24
   214a4:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   214a8:	4699      	mov	r9, r3
	p1[0] = ia->type;
   214aa:	783b      	ldrb	r3, [r7, #0]
{
   214ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
	p1[0] = ia->type;
   214ae:	f88d 3000 	strb.w	r3, [sp]
{
   214b2:	460d      	mov	r5, r1
	p1[1] = ra->type;
   214b4:	f898 3000 	ldrb.w	r3, [r8]
   214b8:	f88d 3001 	strb.w	r3, [sp, #1]
{
   214bc:	4611      	mov	r1, r2
   214be:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   214c0:	2207      	movs	r2, #7
   214c2:	f10d 0002 	add.w	r0, sp, #2
   214c6:	f7fe f897 	bl	1f5f8 <memcpy>
	memcpy(p1 + 9, pres, 7);
   214ca:	2207      	movs	r2, #7
   214cc:	4649      	mov	r1, r9
   214ce:	f10d 0009 	add.w	r0, sp, #9
   214d2:	f7fe f891 	bl	1f5f8 <memcpy>
	while (len--) {
   214d6:	f105 0010 	add.w	r0, r5, #16
	memcpy(p1 + 9, pres, 7);
   214da:	4621      	mov	r1, r4
   214dc:	466a      	mov	r2, sp
	while (len--) {
   214de:	4285      	cmp	r5, r0
   214e0:	d127      	bne.n	21532 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   214e2:	4622      	mov	r2, r4
   214e4:	4621      	mov	r1, r4
   214e6:	4630      	mov	r0, r6
   214e8:	f000 fbce 	bl	21c88 <bt_encrypt_le>
	if (err) {
   214ec:	4605      	mov	r5, r0
   214ee:	b9e0      	cbnz	r0, 2152a <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   214f0:	2206      	movs	r2, #6
   214f2:	f108 0101 	add.w	r1, r8, #1
   214f6:	a804      	add	r0, sp, #16
   214f8:	f7fe f87e 	bl	1f5f8 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   214fc:	2206      	movs	r2, #6
   214fe:	1c79      	adds	r1, r7, #1
   21500:	f10d 0016 	add.w	r0, sp, #22
   21504:	f7fe f878 	bl	1f5f8 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   21508:	2204      	movs	r2, #4
   2150a:	4629      	mov	r1, r5
   2150c:	a807      	add	r0, sp, #28
   2150e:	f7fe f89d 	bl	1f64c <memset>
	while (len--) {
   21512:	f104 0010 	add.w	r0, r4, #16
	(void)memset(p2 + 12, 0, 4);
   21516:	4622      	mov	r2, r4
   21518:	ab04      	add	r3, sp, #16
	while (len--) {
   2151a:	4282      	cmp	r2, r0
   2151c:	d112      	bne.n	21544 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2151e:	4622      	mov	r2, r4
   21520:	4621      	mov	r1, r4
   21522:	4630      	mov	r0, r6
   21524:	f000 fbb0 	bl	21c88 <bt_encrypt_le>
   21528:	4605      	mov	r5, r0
}
   2152a:	4628      	mov	r0, r5
   2152c:	b009      	add	sp, #36	; 0x24
   2152e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   21532:	f815 3b01 	ldrb.w	r3, [r5], #1
   21536:	f812 cb01 	ldrb.w	ip, [r2], #1
   2153a:	ea83 030c 	eor.w	r3, r3, ip
   2153e:	f801 3b01 	strb.w	r3, [r1], #1
   21542:	e7cc      	b.n	214de <smp_c1+0x40>
   21544:	f812 1b01 	ldrb.w	r1, [r2], #1
   21548:	f813 5b01 	ldrb.w	r5, [r3], #1
   2154c:	4069      	eors	r1, r5
   2154e:	f802 1c01 	strb.w	r1, [r2, #-1]
   21552:	e7e2      	b.n	2151a <smp_c1+0x7c>

00021554 <legacy_pairing_confirm>:
{
   21554:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   21556:	f100 0794 	add.w	r7, r0, #148	; 0x94
{
   2155a:	b085      	sub	sp, #20
   2155c:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2155e:	2109      	movs	r1, #9
   21560:	4638      	mov	r0, r7
   21562:	f7ff fdd5 	bl	21110 <atomic_test_bit>
   21566:	bb90      	cbnz	r0, 215ce <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   21568:	2104      	movs	r1, #4
   2156a:	f105 0090 	add.w	r0, r5, #144	; 0x90
   2156e:	f7ff fdc0 	bl	210f2 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   21572:	2103      	movs	r1, #3
   21574:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   21576:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   21578:	f7ff fe8a 	bl	21290 <smp_create_pdu.isra.6>
	if (!buf) {
   2157c:	4606      	mov	r6, r0
   2157e:	b1c0      	cbz	r0, 215b2 <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   21580:	2110      	movs	r1, #16
   21582:	3008      	adds	r0, #8
   21584:	f001 f856 	bl	22634 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   21588:	f104 037e 	add.w	r3, r4, #126	; 0x7e
   2158c:	3477      	adds	r4, #119	; 0x77
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2158e:	9002      	str	r0, [sp, #8]
   21590:	9301      	str	r3, [sp, #4]
   21592:	9400      	str	r4, [sp, #0]
   21594:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
   21598:	f105 0299 	add.w	r2, r5, #153	; 0x99
   2159c:	f105 01b7 	add.w	r1, r5, #183	; 0xb7
   215a0:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
   215a4:	f7ff ff7b 	bl	2149e <smp_c1>
   215a8:	4604      	mov	r4, r0
   215aa:	b120      	cbz	r0, 215b6 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   215ac:	4630      	mov	r0, r6
   215ae:	f7f6 f811 	bl	175d4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   215b2:	2008      	movs	r0, #8
   215b4:	e009      	b.n	215ca <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   215b6:	4602      	mov	r2, r0
   215b8:	4631      	mov	r1, r6
   215ba:	4628      	mov	r0, r5
   215bc:	f7eb fc8c 	bl	ced8 <smp_send.isra.7>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   215c0:	4621      	mov	r1, r4
   215c2:	4638      	mov	r0, r7
   215c4:	f7ff fe3a 	bl	2123c <atomic_clear_bit>
	return 0;
   215c8:	2000      	movs	r0, #0
}
   215ca:	b005      	add	sp, #20
   215cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   215ce:	2100      	movs	r1, #0
   215d0:	4638      	mov	r0, r7
   215d2:	f7ff fd8e 	bl	210f2 <atomic_set_bit>
   215d6:	e7f7      	b.n	215c8 <legacy_pairing_confirm+0x74>

000215d8 <smp_pairing_confirm>:
{
   215d8:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   215da:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   215dc:	f100 0594 	add.w	r5, r0, #148	; 0x94
{
   215e0:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   215e2:	210a      	movs	r1, #10
   215e4:	4628      	mov	r0, r5
   215e6:	f7ff fe29 	bl	2123c <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   215ea:	4631      	mov	r1, r6
   215ec:	2210      	movs	r2, #16
   215ee:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
   215f2:	f7fe f801 	bl	1f5f8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   215f6:	2105      	movs	r1, #5
   215f8:	4628      	mov	r0, r5
   215fa:	f7ff fd89 	bl	21110 <atomic_test_bit>
   215fe:	b920      	cbnz	r0, 2160a <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   21600:	4620      	mov	r0, r4
}
   21602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   21606:	f7ff bfa5 	b.w	21554 <legacy_pairing_confirm>
	switch (smp->method) {
   2160a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
   2160e:	2b01      	cmp	r3, #1
   21610:	d00b      	beq.n	2162a <smp_pairing_confirm+0x52>
   21612:	2b02      	cmp	r3, #2
   21614:	d115      	bne.n	21642 <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   21616:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2161a:	2104      	movs	r1, #4
   2161c:	f7ff fd69 	bl	210f2 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   21620:	4620      	mov	r0, r4
}
   21622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   21626:	f7eb bc6d 	b.w	cf04 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2162a:	2109      	movs	r1, #9
   2162c:	4628      	mov	r0, r5
   2162e:	f7ff fd6f 	bl	21110 <atomic_test_bit>
   21632:	2800      	cmp	r0, #0
   21634:	d0ef      	beq.n	21616 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   21636:	4628      	mov	r0, r5
   21638:	2100      	movs	r1, #0
   2163a:	f7ff fd5a 	bl	210f2 <atomic_set_bit>
			return 0;
   2163e:	2000      	movs	r0, #0
}
   21640:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   21642:	2008      	movs	r0, #8
   21644:	e7fc      	b.n	21640 <smp_pairing_confirm+0x68>

00021646 <bt_smp_request_ltk>:
{
   21646:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2164a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   2164c:	4605      	mov	r5, r0
   2164e:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   21652:	f7eb fbe1 	bl	ce18 <smp_chan_get>
	if (!smp) {
   21656:	4604      	mov	r4, r0
   21658:	2800      	cmp	r0, #0
   2165a:	f000 809c 	beq.w	21796 <bt_smp_request_ltk+0x150>
	if (ediv == 0U && rand == 0U &&
   2165e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   21662:	f1b9 0f00 	cmp.w	r9, #0
   21666:	d12d      	bne.n	216c4 <bt_smp_request_ltk+0x7e>
   21668:	e9dd 2300 	ldrd	r2, r3, [sp]
   2166c:	4313      	orrs	r3, r2
   2166e:	d129      	bne.n	216c4 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   21670:	f100 0894 	add.w	r8, r0, #148	; 0x94
   21674:	2103      	movs	r1, #3
   21676:	4640      	mov	r0, r8
   21678:	f7ff fd4a 	bl	21110 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2167c:	b310      	cbz	r0, 216c4 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2167e:	2101      	movs	r1, #1
   21680:	4640      	mov	r0, r8
   21682:	f7ff fd45 	bl	21110 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   21686:	4606      	mov	r6, r0
   21688:	b1e0      	cbz	r0, 216c4 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2168a:	f894 50a4 	ldrb.w	r5, [r4, #164]	; 0xa4
   2168e:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   21692:	429d      	cmp	r5, r3
   21694:	bf28      	it	cs
   21696:	461d      	movcs	r5, r3
		memcpy(ltk, smp->tk, enc_size);
   21698:	462a      	mov	r2, r5
   2169a:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
   2169e:	4638      	mov	r0, r7
   216a0:	f7fd ffaa 	bl	1f5f8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   216a4:	2d0f      	cmp	r5, #15
   216a6:	d805      	bhi.n	216b4 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   216a8:	f1c5 0210 	rsb	r2, r5, #16
   216ac:	4649      	mov	r1, r9
   216ae:	1978      	adds	r0, r7, r5
   216b0:	f7fd ffcc 	bl	1f64c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   216b4:	2101      	movs	r1, #1
   216b6:	4640      	mov	r0, r8
   216b8:	f7ff fd1b 	bl	210f2 <atomic_set_bit>
}
   216bc:	4630      	mov	r0, r6
   216be:	b003      	add	sp, #12
   216c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   216c4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   216c8:	b983      	cbnz	r3, 216ec <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   216ca:	f105 0670 	add.w	r6, r5, #112	; 0x70
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   216ce:	4632      	mov	r2, r6
   216d0:	7a29      	ldrb	r1, [r5, #8]
   216d2:	2020      	movs	r0, #32
   216d4:	f7ed f86c 	bl	e7b0 <bt_keys_find>
   216d8:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
		if (!conn->le.keys) {
   216dc:	b930      	cbnz	r0, 216ec <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   216de:	4632      	mov	r2, r6
   216e0:	7a29      	ldrb	r1, [r5, #8]
   216e2:	2001      	movs	r0, #1
   216e4:	f7ed f864 	bl	e7b0 <bt_keys_find>
   216e8:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
	if (ediv == 0U && rand == 0U &&
   216ec:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   216f0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   216f4:	b9ce      	cbnz	r6, 2172a <bt_smp_request_ltk+0xe4>
   216f6:	e9dd 2300 	ldrd	r2, r3, [sp]
   216fa:	4313      	orrs	r3, r2
   216fc:	d115      	bne.n	2172a <bt_smp_request_ltk+0xe4>
   216fe:	2800      	cmp	r0, #0
   21700:	d03c      	beq.n	2177c <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   21702:	8943      	ldrh	r3, [r0, #10]
   21704:	069a      	lsls	r2, r3, #26
   21706:	d511      	bpl.n	2172c <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   21708:	7a04      	ldrb	r4, [r0, #8]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2170a:	f100 0116 	add.w	r1, r0, #22
   2170e:	4622      	mov	r2, r4
   21710:	4638      	mov	r0, r7
   21712:	f7fd ff71 	bl	1f5f8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   21716:	2c0f      	cmp	r4, #15
   21718:	d805      	bhi.n	21726 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   2171a:	f1c4 0210 	rsb	r2, r4, #16
   2171e:	4631      	mov	r1, r6
   21720:	1938      	adds	r0, r7, r4
   21722:	f7fd ff93 	bl	1f64c <memset>
		return true;
   21726:	2601      	movs	r6, #1
   21728:	e7c8      	b.n	216bc <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2172a:	b338      	cbz	r0, 2177c <bt_smp_request_ltk+0x136>
   2172c:	8943      	ldrh	r3, [r0, #10]
   2172e:	07db      	lsls	r3, r3, #31
   21730:	d524      	bpl.n	2177c <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   21732:	2208      	movs	r2, #8
   21734:	4669      	mov	r1, sp
   21736:	3064      	adds	r0, #100	; 0x64
   21738:	f7fd ff4e 	bl	1f5d8 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2173c:	b9f0      	cbnz	r0, 2177c <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   2173e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   21742:	2202      	movs	r2, #2
   21744:	a90a      	add	r1, sp, #40	; 0x28
   21746:	306c      	adds	r0, #108	; 0x6c
   21748:	f7fd ff46 	bl	1f5d8 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2174c:	4606      	mov	r6, r0
   2174e:	b9a8      	cbnz	r0, 2177c <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   21750:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
   21754:	7a0d      	ldrb	r5, [r1, #8]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   21756:	4638      	mov	r0, r7
   21758:	462a      	mov	r2, r5
   2175a:	316e      	adds	r1, #110	; 0x6e
   2175c:	f7fd ff4c 	bl	1f5f8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   21760:	2d0f      	cmp	r5, #15
   21762:	d805      	bhi.n	21770 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   21764:	f1c5 0210 	rsb	r2, r5, #16
   21768:	4631      	mov	r1, r6
   2176a:	1978      	adds	r0, r7, r5
   2176c:	f7fd ff6e 	bl	1f64c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   21770:	2101      	movs	r1, #1
   21772:	f104 0094 	add.w	r0, r4, #148	; 0x94
   21776:	f7ff fcbc 	bl	210f2 <atomic_set_bit>
		return true;
   2177a:	e7d4      	b.n	21726 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2177c:	210e      	movs	r1, #14
   2177e:	f104 0094 	add.w	r0, r4, #148	; 0x94
   21782:	f7ff fcc5 	bl	21110 <atomic_test_bit>
   21786:	b118      	cbz	r0, 21790 <bt_smp_request_ltk+0x14a>
		bt_conn_security_changed(smp->chan.chan.conn,
   21788:	2102      	movs	r1, #2
   2178a:	6820      	ldr	r0, [r4, #0]
   2178c:	f7e7 fba4 	bl	8ed8 <bt_conn_security_changed>
	smp_reset(smp);
   21790:	4620      	mov	r0, r4
   21792:	f7ff fe14 	bl	213be <smp_reset>
	return false;
   21796:	2600      	movs	r6, #0
   21798:	e790      	b.n	216bc <bt_smp_request_ltk+0x76>

0002179a <bt_smp_irk_get>:
{
   2179a:	b530      	push	{r4, r5, lr}
   2179c:	b085      	sub	sp, #20
   2179e:	4605      	mov	r5, r0
	u8_t invalid_ir[16] = { 0 };
   217a0:	2210      	movs	r2, #16
{
   217a2:	460c      	mov	r4, r1
	u8_t invalid_ir[16] = { 0 };
   217a4:	4668      	mov	r0, sp
   217a6:	2100      	movs	r1, #0
   217a8:	f7fd ff50 	bl	1f64c <memset>
	if (!memcmp(ir, invalid_ir, 16)) {
   217ac:	2210      	movs	r2, #16
   217ae:	4669      	mov	r1, sp
   217b0:	4628      	mov	r0, r5
   217b2:	f7fd ff11 	bl	1f5d8 <memcmp>
   217b6:	b180      	cbz	r0, 217da <bt_smp_irk_get+0x40>
	dst[1] = val >> 8;
   217b8:	2100      	movs	r1, #0
	dst[0] = val;
   217ba:	2301      	movs	r3, #1
	dst[1] = val >> 8;
   217bc:	7061      	strb	r1, [r4, #1]
	dst[0] = val;
   217be:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   217c0:	70e1      	strb	r1, [r4, #3]
	memset(&res[4], 0, 16 - 4);
   217c2:	220c      	movs	r2, #12
	dst[0] = val;
   217c4:	7023      	strb	r3, [r4, #0]
   217c6:	1d20      	adds	r0, r4, #4
   217c8:	f7fd ff40 	bl	1f64c <memset>
	err = bt_encrypt_le(key, res, res);
   217cc:	4622      	mov	r2, r4
   217ce:	4621      	mov	r1, r4
   217d0:	4628      	mov	r0, r5
   217d2:	f000 fa59 	bl	21c88 <bt_encrypt_le>
}
   217d6:	b005      	add	sp, #20
   217d8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   217da:	f06f 0015 	mvn.w	r0, #21
   217de:	e7fa      	b.n	217d6 <bt_smp_irk_get+0x3c>

000217e0 <id_add>:
	bt_id_add(keys);
   217e0:	f7e6 b82c 	b.w	783c <bt_id_add>

000217e4 <bt_keys_get_type>:
{
   217e4:	b570      	push	{r4, r5, r6, lr}
   217e6:	4604      	mov	r4, r0
   217e8:	460d      	mov	r5, r1
   217ea:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   217ec:	f7ec ffe0 	bl	e7b0 <bt_keys_find>
	if (keys) {
   217f0:	b938      	cbnz	r0, 21802 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   217f2:	4631      	mov	r1, r6
   217f4:	4628      	mov	r0, r5
   217f6:	f7ec ff67 	bl	e6c8 <bt_keys_get_addr>
	if (!keys) {
   217fa:	b110      	cbz	r0, 21802 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   217fc:	8943      	ldrh	r3, [r0, #10]
   217fe:	431c      	orrs	r4, r3
   21800:	8144      	strh	r4, [r0, #10]
}
   21802:	bd70      	pop	{r4, r5, r6, pc}

00021804 <bt_keys_add_type>:
	keys->keys |= type;
   21804:	8943      	ldrh	r3, [r0, #10]
   21806:	4319      	orrs	r1, r3
   21808:	8141      	strh	r1, [r0, #10]
}
   2180a:	4770      	bx	lr

0002180c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   2180c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   2180e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   21810:	1dc3      	adds	r3, r0, #7
   21812:	f023 0303 	bic.w	r3, r3, #3
{
   21816:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   21818:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2181a:	3a01      	subs	r2, #1
   2181c:	b294      	uxth	r4, r2
{
   2181e:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   21820:	2204      	movs	r2, #4
   21822:	2100      	movs	r1, #0
   21824:	fb06 0004 	mla	r0, r6, r4, r0
   21828:	f7fd ff10 	bl	1f64c <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   2182c:	f64f 77ff 	movw	r7, #65535	; 0xffff
   21830:	3c01      	subs	r4, #1
   21832:	b2a4      	uxth	r4, r4
   21834:	42bc      	cmp	r4, r7
   21836:	d101      	bne.n	2183c <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   21838:	b003      	add	sp, #12
   2183a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   2183c:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   21840:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   21842:	2204      	movs	r2, #4
   21844:	1b80      	subs	r0, r0, r6
   21846:	eb0d 0102 	add.w	r1, sp, r2
   2184a:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   2184c:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   2184e:	f7fd fed3 	bl	1f5f8 <memcpy>
   21852:	e7ed      	b.n	21830 <mem_init+0x24>

00021854 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   21854:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   21856:	6804      	ldr	r4, [r0, #0]
{
   21858:	4606      	mov	r6, r0
	if (*mem_head) {
   2185a:	b18c      	cbz	r4, 21880 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   2185c:	1de3      	adds	r3, r4, #7
   2185e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   21862:	2204      	movs	r2, #4
   21864:	4621      	mov	r1, r4
   21866:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   2186a:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   2186c:	f7fd fec4 	bl	1f5f8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   21870:	9b01      	ldr	r3, [sp, #4]
   21872:	b123      	cbz	r3, 2187e <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   21874:	1dda      	adds	r2, r3, #7
   21876:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   2187a:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   2187c:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   2187e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   21880:	4620      	mov	r0, r4
   21882:	b002      	add	sp, #8
   21884:	bd70      	pop	{r4, r5, r6, pc}

00021886 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   21886:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   21888:	680c      	ldr	r4, [r1, #0]
{
   2188a:	4606      	mov	r6, r0
   2188c:	460d      	mov	r5, r1
	if (*mem_head) {
   2188e:	b11c      	cbz	r4, 21898 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   21890:	1de3      	adds	r3, r4, #7
   21892:	f023 0303 	bic.w	r3, r3, #3
   21896:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   21898:	2204      	movs	r2, #4
   2189a:	4629      	mov	r1, r5
   2189c:	4630      	mov	r0, r6
   2189e:	f7fd feab 	bl	1f5f8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   218a2:	1df2      	adds	r2, r6, #7
   218a4:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   218a8:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   218aa:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   218ac:	602e      	str	r6, [r5, #0]
}
   218ae:	bd70      	pop	{r4, r5, r6, pc}

000218b0 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   218b0:	fb02 0001 	mla	r0, r2, r1, r0
   218b4:	4770      	bx	lr

000218b6 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   218b6:	1a40      	subs	r0, r0, r1
   218b8:	b280      	uxth	r0, r0
}
   218ba:	fbb0 f0f2 	udiv	r0, r0, r2
   218be:	4770      	bx	lr

000218c0 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   218c0:	b510      	push	{r4, lr}
	src += len;
   218c2:	4411      	add	r1, r2
	while (len--) {
   218c4:	3801      	subs	r0, #1
   218c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   218ca:	3a01      	subs	r2, #1
   218cc:	b292      	uxth	r2, r2
   218ce:	429a      	cmp	r2, r3
   218d0:	d100      	bne.n	218d4 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   218d2:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   218d4:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   218d8:	f800 4f01 	strb.w	r4, [r0, #1]!
   218dc:	e7f5      	b.n	218ca <mem_rcopy+0xa>

000218de <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
   218de:	4401      	add	r1, r0
   218e0:	4288      	cmp	r0, r1
   218e2:	d101      	bne.n	218e8 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   218e4:	2000      	movs	r0, #0
   218e6:	4770      	bx	lr
		if (*src++) {
   218e8:	f810 3b01 	ldrb.w	r3, [r0], #1
   218ec:	2b00      	cmp	r3, #0
   218ee:	d0f7      	beq.n	218e0 <mem_nz+0x2>
			return 1;
   218f0:	2001      	movs	r0, #1
}
   218f2:	4770      	bx	lr

000218f4 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   218f4:	6010      	str	r0, [r2, #0]
   218f6:	6008      	str	r0, [r1, #0]

	return link;
}
   218f8:	4770      	bx	lr

000218fa <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   218fa:	6803      	ldr	r3, [r0, #0]
   218fc:	680a      	ldr	r2, [r1, #0]
   218fe:	4293      	cmp	r3, r2
   21900:	f04f 0200 	mov.w	r2, #0
		return NULL;
   21904:	bf12      	itee	ne
   21906:	4613      	movne	r3, r2
	}

	old_head = *head;
	*head = *tail = NULL;
   21908:	600a      	streq	r2, [r1, #0]
   2190a:	6002      	streq	r2, [r0, #0]

	return old_head;
}
   2190c:	4618      	mov	r0, r3
   2190e:	4770      	bx	lr

00021910 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   21910:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   21912:	6814      	ldr	r4, [r2, #0]
   21914:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   21916:	6814      	ldr	r4, [r2, #0]
   21918:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   2191a:	6010      	str	r0, [r2, #0]

	return link;
}
   2191c:	bd10      	pop	{r4, pc}

0002191e <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   2191e:	4288      	cmp	r0, r1
   21920:	d003      	beq.n	2192a <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   21922:	b11a      	cbz	r2, 2192c <memq_peek+0xe>
		*mem = head->mem;
   21924:	6843      	ldr	r3, [r0, #4]
   21926:	6013      	str	r3, [r2, #0]
   21928:	4770      	bx	lr
		return NULL;
   2192a:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   2192c:	4770      	bx	lr

0002192e <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   2192e:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   21930:	4283      	cmp	r3, r0
   21932:	d009      	beq.n	21948 <memq_dequeue+0x1a>
	if (mem) {
   21934:	b122      	cbz	r2, 21940 <memq_dequeue+0x12>
		*mem = head->mem;
   21936:	6858      	ldr	r0, [r3, #4]
   21938:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   2193a:	681a      	ldr	r2, [r3, #0]
   2193c:	600a      	str	r2, [r1, #0]

	return old_head;
   2193e:	e001      	b.n	21944 <memq_dequeue+0x16>
	if (old_head == NULL) {
   21940:	2b00      	cmp	r3, #0
   21942:	d1fa      	bne.n	2193a <memq_dequeue+0xc>
}
   21944:	4618      	mov	r0, r3
   21946:	4770      	bx	lr
		return NULL; /* queue is empty */
   21948:	2300      	movs	r3, #0
   2194a:	e7fb      	b.n	21944 <memq_dequeue+0x16>

0002194c <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   2194c:	b510      	push	{r4, lr}
   2194e:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
   21950:	2000      	movs	r0, #0

	while (octets_len--) {
   21952:	3901      	subs	r1, #1
   21954:	b2c9      	uxtb	r1, r1
   21956:	29ff      	cmp	r1, #255	; 0xff
   21958:	d100      	bne.n	2195c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   2195a:	bd10      	pop	{r4, pc}
		bite = *octets;
   2195c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   21960:	2b00      	cmp	r3, #0
   21962:	d0f6      	beq.n	21952 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   21964:	b25b      	sxtb	r3, r3
   21966:	1e5c      	subs	r4, r3, #1
   21968:	4023      	ands	r3, r4
			one_count++;
   2196a:	3001      	adds	r0, #1
			bite &= (bite - 1);
   2196c:	b2db      	uxtb	r3, r3
			one_count++;
   2196e:	b2c0      	uxtb	r0, r0
   21970:	e7f6      	b.n	21960 <util_ones_count_get+0x14>

00021972 <ticks_to_expire_prep>:
{
   21972:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   21974:	1a55      	subs	r5, r2, r1
   21976:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   2197a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   2197c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2197e:	d109      	bne.n	21994 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   21980:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   21984:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   21986:	42a2      	cmp	r2, r4
   21988:	d90e      	bls.n	219a8 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   2198a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   2198c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   2198e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   21990:	6144      	str	r4, [r0, #20]
}
   21992:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   21994:	1a8a      	subs	r2, r1, r2
   21996:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   2199a:	4293      	cmp	r3, r2
   2199c:	d901      	bls.n	219a2 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   2199e:	1a9a      	subs	r2, r3, r2
   219a0:	e7f1      	b.n	21986 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   219a2:	4422      	add	r2, r4
   219a4:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   219a6:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   219a8:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   219aa:	2200      	movs	r2, #0
   219ac:	e7ef      	b.n	2198e <ticks_to_expire_prep+0x1c>

000219ae <ticker_job_op_cb>:
{
   219ae:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   219b0:	2200      	movs	r2, #0
   219b2:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   219b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   219b6:	6259      	str	r1, [r3, #36]	; 0x24
{
   219b8:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   219ba:	b10a      	cbz	r2, 219c0 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   219bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   219be:	4710      	bx	r2
}
   219c0:	4770      	bx	lr

000219c2 <ticker_worker>:
{
   219c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   219c6:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   219c8:	2301      	movs	r3, #1
{
   219ca:	b08b      	sub	sp, #44	; 0x2c
   219cc:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   219ce:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   219d0:	b91e      	cbnz	r6, 219da <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   219d2:	7f43      	ldrb	r3, [r0, #29]
   219d4:	2bff      	cmp	r3, #255	; 0xff
   219d6:	d103      	bne.n	219e0 <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   219d8:	77c6      	strb	r6, [r0, #31]
}
   219da:	b00b      	add	sp, #44	; 0x2c
   219dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   219e0:	f7f5 f84e 	bl	16a80 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   219e4:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   219e6:	f895 801d 	ldrb.w	r8, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   219ea:	1ac0      	subs	r0, r0, r3
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   219ec:	7f2b      	ldrb	r3, [r5, #28]
   219ee:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   219f0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   219f4:	d027      	beq.n	21a46 <ticker_worker+0x84>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   219f6:	69ae      	ldr	r6, [r5, #24]
	u8_t slot_reserved = 0;
   219f8:	454e      	cmp	r6, r9
   219fa:	bf94      	ite	ls
   219fc:	2300      	movls	r3, #0
   219fe:	2301      	movhi	r3, #1
   21a00:	9301      	str	r3, [sp, #4]
	node = &instance->nodes[0];
   21a02:	f8d5 a000 	ldr.w	sl, [r5]
	ticks_expired = 0U;
   21a06:	f04f 0b00 	mov.w	fp, #0
	while (ticker_id_head != TICKER_NULL) {
   21a0a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   21a0e:	d11c      	bne.n	21a4a <ticker_worker+0x88>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   21a10:	7aea      	ldrb	r2, [r5, #11]
   21a12:	7aab      	ldrb	r3, [r5, #10]
   21a14:	4293      	cmp	r3, r2
   21a16:	d105      	bne.n	21a24 <ticker_worker+0x62>
	u8_t idx = *ticks_elapsed_index + 1;
   21a18:	3301      	adds	r3, #1
   21a1a:	b2db      	uxtb	r3, r3
		idx = 0U;
   21a1c:	2b02      	cmp	r3, #2
   21a1e:	bf08      	it	eq
   21a20:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   21a22:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   21a24:	7aeb      	ldrb	r3, [r5, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   21a26:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   21a28:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   21a2c:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   21a2e:	f8c3 b00c 	str.w	fp, [r3, #12]
	instance->worker_trigger = 0U;
   21a32:	2300      	movs	r3, #0
   21a34:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   21a36:	2104      	movs	r1, #4
   21a38:	462b      	mov	r3, r5
   21a3a:	2003      	movs	r0, #3
   21a3c:	46a4      	mov	ip, r4
}
   21a3e:	b00b      	add	sp, #44	; 0x2c
   21a40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   21a44:	4760      	bx	ip
	u8_t slot_reserved = 0;
   21a46:	9601      	str	r6, [sp, #4]
   21a48:	e7db      	b.n	21a02 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
   21a4a:	232c      	movs	r3, #44	; 0x2c
   21a4c:	fb18 f803 	smulbb	r8, r8, r3
   21a50:	eb0a 0408 	add.w	r4, sl, r8
		ticks_to_expire = ticker->ticks_to_expire;
   21a54:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   21a56:	4599      	cmp	r9, r3
   21a58:	d3da      	bcc.n	21a10 <ticker_worker+0x4e>
		if (ticker->ticks_slot != 0U &&
   21a5a:	69a7      	ldr	r7, [r4, #24]
		ticker_id_head = ticker->next;
   21a5c:	f81a 8008 	ldrb.w	r8, [sl, r8]
		ticks_elapsed -= ticks_to_expire;
   21a60:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
   21a64:	449b      	add	fp, r3
		if (ticker->ticks_slot != 0U &&
   21a66:	b35f      	cbz	r7, 21ac0 <ticker_worker+0xfe>
   21a68:	8be3      	ldrh	r3, [r4, #30]
   21a6a:	461e      	mov	r6, r3
   21a6c:	9b01      	ldr	r3, [sp, #4]
   21a6e:	2b00      	cmp	r3, #0
   21a70:	f040 8083 	bne.w	21b7a <ticker_worker+0x1b8>
	if (ticker->lazy_periodic > lazy_current) {
   21a74:	8ba2      	ldrh	r2, [r4, #28]
   21a76:	4296      	cmp	r6, r2
   21a78:	d37f      	bcc.n	21b7a <ticker_worker+0x1b8>
	} else if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   21a7a:	f994 3029 	ldrsb.w	r3, [r4, #41]	; 0x29
   21a7e:	9302      	str	r3, [sp, #8]
   21a80:	3380      	adds	r3, #128	; 0x80
   21a82:	d01c      	beq.n	21abe <ticker_worker+0xfc>
   21a84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   21a88:	f000 8088 	beq.w	21b9c <ticker_worker+0x1da>
		u32_t acc_ticks_to_expire = 0;
   21a8c:	9901      	ldr	r1, [sp, #4]
		u32_t current_age = ticker->ticks_periodic +
   21a8e:	6863      	ldr	r3, [r4, #4]
		u32_t acc_ticks_to_expire = 0;
   21a90:	9104      	str	r1, [sp, #16]
				(lazy_current - ticker->priority);
   21a92:	9902      	ldr	r1, [sp, #8]
			lazy_current -= ticker->lazy_periodic;
   21a94:	1ab2      	subs	r2, r6, r2
		u32_t current_age = ticker->ticks_periodic +
   21a96:	fb02 3303 	mla	r3, r2, r3, r3
				(lazy_current - ticker->priority);
   21a9a:	1a52      	subs	r2, r2, r1
		u32_t current_age = ticker->ticks_periodic +
   21a9c:	9306      	str	r3, [sp, #24]
				(lazy_current - ticker->priority);
   21a9e:	9209      	str	r2, [sp, #36]	; 0x24
		u32_t current_age = ticker->ticks_periodic +
   21aa0:	4643      	mov	r3, r8
			struct ticker_node *ticker_next = &nodes[id_head];
   21aa2:	222c      	movs	r2, #44	; 0x2c
   21aa4:	fb13 f302 	smulbb	r3, r3, r2
   21aa8:	eb0a 0e03 	add.w	lr, sl, r3
   21aac:	9305      	str	r3, [sp, #20]
			if (ticker_next->ticks_slot == 0) {
   21aae:	f8de 3018 	ldr.w	r3, [lr, #24]
   21ab2:	bb4b      	cbnz	r3, 21b08 <ticker_worker+0x146>
			id_head = ticker_next->next;
   21ab4:	9b05      	ldr	r3, [sp, #20]
   21ab6:	f81a 3003 	ldrb.w	r3, [sl, r3]
		while (id_head != TICKER_NULL) {
   21aba:	2bff      	cmp	r3, #255	; 0xff
   21abc:	d1f1      	bne.n	21aa2 <ticker_worker+0xe0>
		must_expire_skip = 0U;
   21abe:	2700      	movs	r7, #0
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   21ac0:	78a2      	ldrb	r2, [r4, #2]
   21ac2:	7863      	ldrb	r3, [r4, #1]
   21ac4:	1a9b      	subs	r3, r3, r2
   21ac6:	b2db      	uxtb	r3, r3
   21ac8:	2b01      	cmp	r3, #1
   21aca:	d19e      	bne.n	21a0a <ticker_worker+0x48>
		if (ticker->timeout_func) {
   21acc:	68e3      	ldr	r3, [r4, #12]
		ticker->ack--;
   21ace:	3a01      	subs	r2, #1
   21ad0:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   21ad2:	461e      	mov	r6, r3
   21ad4:	2b00      	cmp	r3, #0
   21ad6:	d098      	beq.n	21a0a <ticker_worker+0x48>
					   ticks_expired -
   21ad8:	6960      	ldr	r0, [r4, #20]
   21ada:	696b      	ldr	r3, [r5, #20]
			ticker->timeout_func(ticks_at_expire,
   21adc:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   21ade:	ebab 0000 	sub.w	r0, fp, r0
   21ae2:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   21ae4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   21ae8:	2f00      	cmp	r7, #0
   21aea:	d159      	bne.n	21ba0 <ticker_worker+0x1de>
   21aec:	8be2      	ldrh	r2, [r4, #30]
   21aee:	6923      	ldr	r3, [r4, #16]
   21af0:	47b0      	blx	r6
			if (must_expire_skip == 0U) {
   21af2:	2f00      	cmp	r7, #0
   21af4:	d189      	bne.n	21a0a <ticker_worker+0x48>
				if (ticker->ticks_slot != 0U) {
   21af6:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   21af8:	83e7      	strh	r7, [r4, #30]
					slot_reserved = 1U;
   21afa:	2b00      	cmp	r3, #0
   21afc:	9b01      	ldr	r3, [sp, #4]
				ticker->force = 0U;
   21afe:	70e7      	strb	r7, [r4, #3]
					slot_reserved = 1U;
   21b00:	bf18      	it	ne
   21b02:	2301      	movne	r3, #1
   21b04:	9301      	str	r3, [sp, #4]
   21b06:	e780      	b.n	21a0a <ticker_worker+0x48>
			s32_t lazy_next = ticker_next->lazy_current;
   21b08:	f8be 001e 	ldrh.w	r0, [lr, #30]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   21b0c:	9a04      	ldr	r2, [sp, #16]
				ticker_next->lazy_periodic > lazy_next;
   21b0e:	f8be c01c 	ldrh.w	ip, [lr, #28]
				ticker_next->priority;
   21b12:	f99e 1029 	ldrsb.w	r1, [lr, #41]	; 0x29
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   21b16:	f8de 3008 	ldr.w	r3, [lr, #8]
				ticker_next->priority;
   21b1a:	9103      	str	r1, [sp, #12]
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
   21b1c:	f8de 1004 	ldr.w	r1, [lr, #4]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   21b20:	441a      	add	r2, r3
			if (!lazy_next_periodic_skip) {
   21b22:	4560      	cmp	r0, ip
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   21b24:	9204      	str	r2, [sp, #16]
			s32_t lazy_next = ticker_next->lazy_current;
   21b26:	4602      	mov	r2, r0
				lazy_next -= ticker_next->lazy_periodic;
   21b28:	bf28      	it	cs
   21b2a:	eba0 020c 	subcs.w	r2, r0, ip
					  0U :
   21b2e:	2900      	cmp	r1, #0
   21b30:	d032      	beq.n	21b98 <ticker_worker+0x1d6>
   21b32:	1acb      	subs	r3, r1, r3
   21b34:	9307      	str	r3, [sp, #28]
			u8_t next_force = (ticker_next->force > ticker->force);
   21b36:	f89e 3003 	ldrb.w	r3, [lr, #3]
   21b3a:	9308      	str	r3, [sp, #32]
			if (!lazy_next_periodic_skip &&
   21b3c:	4560      	cmp	r0, ip
			u8_t next_force = (ticker_next->force > ticker->force);
   21b3e:	f894 e003 	ldrb.w	lr, [r4, #3]
			if (!lazy_next_periodic_skip &&
   21b42:	d3b7      	bcc.n	21ab4 <ticker_worker+0xf2>
   21b44:	9b04      	ldr	r3, [sp, #16]
   21b46:	429f      	cmp	r7, r3
   21b48:	d9b4      	bls.n	21ab4 <ticker_worker+0xf2>
			    (acc_ticks_to_expire < ticker->ticks_slot) &&
   21b4a:	9b08      	ldr	r3, [sp, #32]
   21b4c:	4573      	cmp	r3, lr
   21b4e:	d814      	bhi.n	21b7a <ticker_worker+0x1b8>
			    (next_force ||
   21b50:	9b03      	ldr	r3, [sp, #12]
   21b52:	3380      	adds	r3, #128	; 0x80
   21b54:	d011      	beq.n	21b7a <ticker_worker+0x1b8>
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
   21b56:	9b07      	ldr	r3, [sp, #28]
   21b58:	fb01 3302 	mla	r3, r1, r2, r3
				(lazy_next - ticker_next->priority) >
   21b5c:	9903      	ldr	r1, [sp, #12]
   21b5e:	1a52      	subs	r2, r2, r1
			     next_is_critical ||
   21b60:	9909      	ldr	r1, [sp, #36]	; 0x24
   21b62:	428a      	cmp	r2, r1
   21b64:	dd02      	ble.n	21b6c <ticker_worker+0x1aa>
			    (next_has_priority && !current_is_older) ||
   21b66:	9a06      	ldr	r2, [sp, #24]
   21b68:	429a      	cmp	r2, r3
   21b6a:	d906      	bls.n	21b7a <ticker_worker+0x1b8>
   21b6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   21b70:	428a      	cmp	r2, r1
   21b72:	d19f      	bne.n	21ab4 <ticker_worker+0xf2>
			    (equal_priority && next_is_older))) {
   21b74:	9a06      	ldr	r2, [sp, #24]
   21b76:	429a      	cmp	r2, r3
   21b78:	d29c      	bcs.n	21ab4 <ticker_worker+0xf2>
			ticker->lazy_current++;
   21b7a:	4633      	mov	r3, r6
   21b7c:	3301      	adds	r3, #1
			if ((ticker->must_expire == 0U) ||
   21b7e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
			ticker->lazy_current++;
   21b82:	b29b      	uxth	r3, r3
   21b84:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   21b86:	2a00      	cmp	r2, #0
   21b88:	f43f af3f 	beq.w	21a0a <ticker_worker+0x48>
   21b8c:	8ba2      	ldrh	r2, [r4, #28]
   21b8e:	429a      	cmp	r2, r3
   21b90:	f4bf af3b 	bcs.w	21a0a <ticker_worker+0x48>
			must_expire_skip = 1U;
   21b94:	2701      	movs	r7, #1
   21b96:	e793      	b.n	21ac0 <ticker_worker+0xfe>
					  0U :
   21b98:	9107      	str	r1, [sp, #28]
   21b9a:	e7cc      	b.n	21b36 <ticker_worker+0x174>
		must_expire_skip = 0U;
   21b9c:	9f01      	ldr	r7, [sp, #4]
   21b9e:	e78f      	b.n	21ac0 <ticker_worker+0xfe>
			ticker->timeout_func(ticks_at_expire,
   21ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21ba4:	e7a3      	b.n	21aee <ticker_worker+0x12c>

00021ba6 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   21ba6:	f7f4 bf6b 	b.w	16a80 <cntr_cnt_get>

00021baa <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   21baa:	1a40      	subs	r0, r0, r1
}
   21bac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   21bb0:	4770      	bx	lr

00021bb2 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

u8_t ll_tx_pwr_lvl_get(u8_t handle_type,
		       u16_t handle, u8_t type, s8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   21bb2:	2802      	cmp	r0, #2
{
   21bb4:	b538      	push	{r3, r4, r5, lr}
   21bb6:	4604      	mov	r4, r0
   21bb8:	461d      	mov	r5, r3
	switch (handle_type) {
   21bba:	d107      	bne.n	21bcc <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   21bbc:	4608      	mov	r0, r1
   21bbe:	f000 fa25 	bl	2200c <ll_connected_get>
			if (!conn) {
   21bc2:	b108      	cbz	r0, 21bc8 <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   21bc4:	2400      	movs	r4, #0
   21bc6:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   21bc8:	4620      	mov	r0, r4
   21bca:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   21bcc:	2401      	movs	r4, #1
   21bce:	e7fb      	b.n	21bc8 <ll_tx_pwr_lvl_get+0x16>

00021bd0 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   21bd0:	2300      	movs	r3, #0
   21bd2:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   21bd4:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   21bd6:	4770      	bx	lr

00021bd8 <sys_put_le32>:
	dst[1] = val >> 8;
   21bd8:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   21bdc:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   21bde:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   21be0:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   21be2:	0a00      	lsrs	r0, r0, #8
   21be4:	704b      	strb	r3, [r1, #1]
   21be6:	70c8      	strb	r0, [r1, #3]
}
   21be8:	4770      	bx	lr

00021bea <sys_get_le64>:
{
   21bea:	4603      	mov	r3, r0
}
   21bec:	6800      	ldr	r0, [r0, #0]
   21bee:	6859      	ldr	r1, [r3, #4]
   21bf0:	4770      	bx	lr

00021bf2 <hci_evt_create>:
{
   21bf2:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   21bf4:	3008      	adds	r0, #8
{
   21bf6:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   21bf8:	2102      	movs	r1, #2
{
   21bfa:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   21bfc:	f000 fd1a 	bl	22634 <net_buf_simple_add>
	hdr->evt = evt;
   21c00:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   21c02:	7044      	strb	r4, [r0, #1]
}
   21c04:	bd38      	pop	{r3, r4, r5, pc}

00021c06 <meta_evt>:
{
   21c06:	b570      	push	{r4, r5, r6, lr}
   21c08:	4604      	mov	r4, r0
   21c0a:	4615      	mov	r5, r2
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   21c0c:	3201      	adds	r2, #1
{
   21c0e:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   21c10:	3408      	adds	r4, #8
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   21c12:	b2d2      	uxtb	r2, r2
   21c14:	213e      	movs	r1, #62	; 0x3e
   21c16:	f7ff ffec 	bl	21bf2 <hci_evt_create>
	me = net_buf_add(buf, sizeof(*me));
   21c1a:	2101      	movs	r1, #1
   21c1c:	4620      	mov	r0, r4
   21c1e:	f000 fd09 	bl	22634 <net_buf_simple_add>
	me->subevent = subevt;
   21c22:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
   21c24:	4629      	mov	r1, r5
   21c26:	4620      	mov	r0, r4
}
   21c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   21c2c:	f000 bd02 	b.w	22634 <net_buf_simple_add>

00021c30 <hci_num_cmplt_encode>:
{
   21c30:	b570      	push	{r4, r5, r6, lr}
   21c32:	4606      	mov	r6, r0
   21c34:	460d      	mov	r5, r1
   21c36:	4614      	mov	r4, r2
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   21c38:	2113      	movs	r1, #19
   21c3a:	2205      	movs	r2, #5
   21c3c:	f7ff ffd9 	bl	21bf2 <hci_evt_create>
	ep = net_buf_add(buf, len);
   21c40:	2105      	movs	r1, #5
   21c42:	f106 0008 	add.w	r0, r6, #8
   21c46:	f000 fcf5 	bl	22634 <net_buf_simple_add>
	ep->num_handles = num_handles;
   21c4a:	2301      	movs	r3, #1
   21c4c:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   21c4e:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   21c52:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   21c56:	bd70      	pop	{r4, r5, r6, pc}

00021c58 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   21c58:	7903      	ldrb	r3, [r0, #4]
   21c5a:	2b02      	cmp	r3, #2
   21c5c:	d007      	beq.n	21c6e <hci_get_class+0x16>
		switch (node_rx->hdr.type) {
   21c5e:	2b08      	cmp	r3, #8
   21c60:	d00e      	beq.n	21c80 <hci_get_class+0x28>
   21c62:	d30f      	bcc.n	21c84 <hci_get_class+0x2c>
   21c64:	2b0e      	cmp	r3, #14
			return HCI_CLASS_EVT_CONNECTION;
   21c66:	bf8c      	ite	hi
   21c68:	2000      	movhi	r0, #0
   21c6a:	2003      	movls	r0, #3
   21c6c:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   21c6e:	f890 3020 	ldrb.w	r3, [r0, #32]
   21c72:	f003 0303 	and.w	r3, r3, #3
   21c76:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   21c78:	bf0c      	ite	eq
   21c7a:	2004      	moveq	r0, #4
   21c7c:	2005      	movne	r0, #5
   21c7e:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   21c80:	2001      	movs	r0, #1
   21c82:	4770      	bx	lr
			return HCI_CLASS_NONE;
   21c84:	2000      	movs	r0, #0
}
   21c86:	4770      	bx	lr

00021c88 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   21c88:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   21c8a:	2300      	movs	r3, #0
   21c8c:	f000 fc52 	bl	22534 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   21c90:	2000      	movs	r0, #0
   21c92:	bd08      	pop	{r3, pc}

00021c94 <disabled_cb>:
   21c94:	f7fa be10 	b.w	1c8b8 <z_impl_k_sem_give>

00021c98 <rx_demux_conn_tx_ack>:
{
   21c98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21c9a:	4606      	mov	r6, r0
   21c9c:	4614      	mov	r4, r2
   21c9e:	9300      	str	r3, [sp, #0]
   21ca0:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   21ca4:	f7f3 f9da 	bl	1505c <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   21ca8:	9a00      	ldr	r2, [sp, #0]
   21caa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   21cae:	4621      	mov	r1, r4
   21cb0:	f7f3 fa18 	bl	150e4 <ull_conn_tx_ack>
   21cb4:	4605      	mov	r5, r0
		ull_conn_link_tx_release(link);
   21cb6:	4620      	mov	r0, r4
   21cb8:	f7f3 f996 	bl	14fe8 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   21cbc:	2001      	movs	r0, #1
   21cbe:	f7f3 f895 	bl	14dec <ull_conn_tx_demux>
		if (conn) {
   21cc2:	b11d      	cbz	r5, 21ccc <rx_demux_conn_tx_ack+0x34>
			ull_conn_tx_lll_enqueue(conn, 1);
   21cc4:	2101      	movs	r1, #1
   21cc6:	4628      	mov	r0, r5
   21cc8:	f7f3 f8d6 	bl	14e78 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   21ccc:	466a      	mov	r2, sp
   21cce:	f10d 0106 	add.w	r1, sp, #6
   21cd2:	4630      	mov	r0, r6
   21cd4:	f7f3 f9ac 	bl	15030 <ull_conn_ack_by_last_peek>
	} while (link);
   21cd8:	4604      	mov	r4, r0
   21cda:	2800      	cmp	r0, #0
   21cdc:	d1e2      	bne.n	21ca4 <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   21cde:	f7ef fb95 	bl	1140c <ll_rx_sched>
}
   21ce2:	b002      	add	sp, #8
   21ce4:	bd70      	pop	{r4, r5, r6, pc}

00021ce6 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   21ce6:	2300      	movs	r3, #0
   21ce8:	7003      	strb	r3, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   21cea:	2304      	movs	r3, #4
   21cec:	700b      	strb	r3, [r1, #0]
}
   21cee:	4770      	bx	lr

00021cf0 <chan_sel_remap>:
{
   21cf0:	b530      	push	{r4, r5, lr}
   21cf2:	1e42      	subs	r2, r0, #1
   21cf4:	1d03      	adds	r3, r0, #4
	chan_next = 0U;
   21cf6:	2000      	movs	r0, #0
	while (byte_count--) {
   21cf8:	4293      	cmp	r3, r2
   21cfa:	d100      	bne.n	21cfe <chan_sel_remap+0xe>
}
   21cfc:	bd30      	pop	{r4, r5, pc}
		bite = *chan_map;
   21cfe:	f100 0408 	add.w	r4, r0, #8
   21d02:	f812 5f01 	ldrb.w	r5, [r2, #1]!
		while (bit_count--) {
   21d06:	b2e4      	uxtb	r4, r4
   21d08:	4284      	cmp	r4, r0
   21d0a:	d0f5      	beq.n	21cf8 <chan_sel_remap+0x8>
			if (bite & 0x01) {
   21d0c:	f015 0f01 	tst.w	r5, #1
   21d10:	d003      	beq.n	21d1a <chan_sel_remap+0x2a>
				if (chan_index == 0U) {
   21d12:	2900      	cmp	r1, #0
   21d14:	d0f2      	beq.n	21cfc <chan_sel_remap+0xc>
				chan_index--;
   21d16:	3901      	subs	r1, #1
   21d18:	b2c9      	uxtb	r1, r1
			chan_next++;
   21d1a:	3001      	adds	r0, #1
   21d1c:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   21d1e:	086d      	lsrs	r5, r5, #1
   21d20:	e7f2      	b.n	21d08 <chan_sel_remap+0x18>

00021d22 <lll_chan_sel_1>:
{
   21d22:	b430      	push	{r4, r5}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   21d24:	fb02 1101 	mla	r1, r2, r1, r1
   21d28:	7802      	ldrb	r2, [r0, #0]
{
   21d2a:	f89d 5008 	ldrb.w	r5, [sp, #8]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   21d2e:	4411      	add	r1, r2
   21d30:	2425      	movs	r4, #37	; 0x25
   21d32:	fbb1 f2f4 	udiv	r2, r1, r4
   21d36:	fb04 1212 	mls	r2, r4, r2, r1
   21d3a:	b2d1      	uxtb	r1, r2
	*chan_use = chan_next;
   21d3c:	7001      	strb	r1, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   21d3e:	08c8      	lsrs	r0, r1, #3
   21d40:	f002 0207 	and.w	r2, r2, #7
   21d44:	5c1c      	ldrb	r4, [r3, r0]
   21d46:	fa44 f202 	asr.w	r2, r4, r2
   21d4a:	07d2      	lsls	r2, r2, #31
   21d4c:	d408      	bmi.n	21d60 <lll_chan_sel_1+0x3e>
		chan_index = chan_next % chan_count;
   21d4e:	fbb1 f2f5 	udiv	r2, r1, r5
   21d52:	fb05 1112 	mls	r1, r5, r2, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   21d56:	b2c9      	uxtb	r1, r1
   21d58:	4618      	mov	r0, r3
}
   21d5a:	bc30      	pop	{r4, r5}
		chan_next = chan_sel_remap(chan_map, chan_index);
   21d5c:	f7ff bfc8 	b.w	21cf0 <chan_sel_remap>
}
   21d60:	4608      	mov	r0, r1
   21d62:	bc30      	pop	{r4, r5}
   21d64:	4770      	bx	lr

00021d66 <clock_control_on>:
	return api->on(dev, sys);
   21d66:	6843      	ldr	r3, [r0, #4]
   21d68:	681b      	ldr	r3, [r3, #0]
   21d6a:	4718      	bx	r3

00021d6c <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   21d6c:	2000      	movs	r0, #0
   21d6e:	f7ec bf5f 	b.w	ec30 <mayfly_run>

00021d72 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   21d72:	4668      	mov	r0, sp
   21d74:	f020 0107 	bic.w	r1, r0, #7
   21d78:	468d      	mov	sp, r1
   21d7a:	b501      	push	{r0, lr}
	isr_radio();
   21d7c:	f7f4 ff34 	bl	16be8 <isr_radio>
	ISR_DIRECT_PM();
   21d80:	f7e2 fdd8 	bl	4934 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   21d84:	f7e2 fd2a 	bl	47dc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   21d88:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   21d8c:	4685      	mov	sp, r0
   21d8e:	4770      	bx	lr

00021d90 <lll_reset>:
}
   21d90:	2000      	movs	r0, #0
   21d92:	4770      	bx	lr

00021d94 <lll_prepare>:
{
   21d94:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   21d96:	2400      	movs	r4, #0
   21d98:	9401      	str	r4, [sp, #4]
   21d9a:	9c04      	ldr	r4, [sp, #16]
   21d9c:	9400      	str	r4, [sp, #0]
   21d9e:	f7ef fea9 	bl	11af4 <prepare>
}
   21da2:	b002      	add	sp, #8
   21da4:	bd10      	pop	{r4, pc}

00021da6 <lll_prepare_done>:
}
   21da6:	2000      	movs	r0, #0
   21da8:	4770      	bx	lr

00021daa <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   21daa:	e9d0 2300 	ldrd	r2, r3, [r0]
   21dae:	2a00      	cmp	r2, #0
   21db0:	da04      	bge.n	21dbc <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   21db2:	6880      	ldr	r0, [r0, #8]
   21db4:	4298      	cmp	r0, r3
   21db6:	bf38      	it	cc
   21db8:	4618      	movcc	r0, r3
   21dba:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   21dbc:	429a      	cmp	r2, r3
   21dbe:	bf38      	it	cc
   21dc0:	461a      	movcc	r2, r3
   21dc2:	4610      	mov	r0, r2
}
   21dc4:	4770      	bx	lr

00021dc6 <lll_preempt_calc>:
{
   21dc6:	b510      	push	{r4, lr}
   21dc8:	4614      	mov	r4, r2
	u32_t ticks_now = ticker_ticks_now_get();
   21dca:	f7ff feec 	bl	21ba6 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   21dce:	4621      	mov	r1, r4
   21dd0:	f7ff feeb 	bl	21baa <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   21dd4:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   21dd6:	0203      	lsls	r3, r0, #8
   21dd8:	d404      	bmi.n	21de4 <lll_preempt_calc+0x1e>
   21dda:	2809      	cmp	r0, #9
   21ddc:	bf94      	ite	ls
   21dde:	2000      	movls	r0, #0
   21de0:	2001      	movhi	r0, #1
}
   21de2:	bd10      	pop	{r4, pc}
	return 0;
   21de4:	2000      	movs	r0, #0
   21de6:	e7fc      	b.n	21de2 <lll_preempt_calc+0x1c>

00021de8 <ull_adv_init>:
}
   21de8:	2000      	movs	r0, #0
   21dea:	4770      	bx	lr

00021dec <ull_adv_reset>:
{
   21dec:	b508      	push	{r3, lr}
		(void)disable(handle);
   21dee:	f7f0 fc0d 	bl	1260c <disable.constprop.5>
}
   21df2:	2000      	movs	r0, #0
   21df4:	bd08      	pop	{r3, pc}

00021df6 <ull_adv_is_enabled>:
{
   21df6:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   21df8:	f7f0 fbfa 	bl	125f0 <ull_adv_is_enabled_get>
}
   21dfc:	3000      	adds	r0, #0
   21dfe:	bf18      	it	ne
   21e00:	2001      	movne	r0, #1
   21e02:	bd08      	pop	{r3, pc}

00021e04 <ull_adv_filter_pol_get>:
{
   21e04:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   21e06:	f7f0 fbf3 	bl	125f0 <ull_adv_is_enabled_get>
	if (!adv) {
   21e0a:	b118      	cbz	r0, 21e14 <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   21e0c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   21e10:	f000 0003 	and.w	r0, r0, #3
}
   21e14:	bd08      	pop	{r3, pc}

00021e16 <isr_race>:
	radio_status_reset();
   21e16:	f7f4 bfd1 	b.w	16dbc <radio_status_reset>

00021e1a <isr_abort>:
{
   21e1a:	b510      	push	{r4, lr}
   21e1c:	4604      	mov	r4, r0
	radio_status_reset();
   21e1e:	f7f4 ffcd 	bl	16dbc <radio_status_reset>
	radio_tmr_status_reset();
   21e22:	f7f5 f889 	bl	16f38 <radio_tmr_status_reset>
	radio_filter_status_reset();
   21e26:	f7f5 f863 	bl	16ef0 <radio_filter_status_reset>
	radio_ar_status_reset();
   21e2a:	f7f5 fa23 	bl	17274 <radio_ar_status_reset>
	radio_rssi_status_reset();
   21e2e:	f7f5 f827 	bl	16e80 <radio_rssi_status_reset>
	radio_filter_disable();
   21e32:	f7f5 f853 	bl	16edc <radio_filter_disable>
	isr_cleanup(param);
   21e36:	4620      	mov	r0, r4
}
   21e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   21e3c:	f7f0 bc78 	b.w	12730 <isr_cleanup>

00021e40 <isr_rx_ci_adva_check>:
		       BDADDR_SIZE);
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
   21e40:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   21e42:	7804      	ldrb	r4, [r0, #0]
   21e44:	780a      	ldrb	r2, [r1, #0]
   21e46:	f3c4 1380 	ubfx	r3, r4, #6, #1
   21e4a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   21e4e:	d119      	bne.n	21e84 <isr_rx_ci_adva_check+0x44>
   21e50:	f004 040f 	and.w	r4, r4, #15
   21e54:	2c01      	cmp	r4, #1
   21e56:	f100 0502 	add.w	r5, r0, #2
   21e5a:	f101 0608 	add.w	r6, r1, #8
   21e5e:	d008      	beq.n	21e72 <isr_rx_ci_adva_check+0x32>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   21e60:	2206      	movs	r2, #6
   21e62:	4631      	mov	r1, r6
   21e64:	4628      	mov	r0, r5
   21e66:	f7fd fbb7 	bl	1f5d8 <memcmp>
			 BDADDR_SIZE)) ||
   21e6a:	fab0 f080 	clz	r0, r0
   21e6e:	0940      	lsrs	r0, r0, #5
			  BDADDR_SIZE)));
}
   21e70:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   21e72:	2206      	movs	r2, #6
   21e74:	4631      	mov	r1, r6
   21e76:	4628      	mov	r0, r5
   21e78:	f7fd fbae 	bl	1f5d8 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   21e7c:	2800      	cmp	r0, #0
   21e7e:	d1ef      	bne.n	21e60 <isr_rx_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   21e80:	4620      	mov	r0, r4
   21e82:	e7f5      	b.n	21e70 <isr_rx_ci_adva_check+0x30>
   21e84:	2000      	movs	r0, #0
   21e86:	e7f3      	b.n	21e70 <isr_rx_ci_adva_check+0x30>

00021e88 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   21e88:	68c3      	ldr	r3, [r0, #12]
{
   21e8a:	b570      	push	{r4, r5, r6, lr}
   21e8c:	4604      	mov	r4, r0
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   21e8e:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   21e90:	f7ff fe89 	bl	21ba6 <ticker_ticks_now_get>
   21e94:	4605      	mov	r5, r0
   21e96:	4630      	mov	r0, r6
   21e98:	f7ff ff87 	bl	21daa <lll_evt_offset_get>
	p->remainder = 0;
   21e9c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   21e9e:	1a28      	subs	r0, r5, r0
   21ea0:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   21ea2:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   21ea4:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   21ea6:	4620      	mov	r0, r4
}
   21ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   21eac:	f7f0 bf06 	b.w	12cbc <prepare_cb>

00021eb0 <isr_done>:
{
   21eb0:	b510      	push	{r4, lr}
   21eb2:	4604      	mov	r4, r0
	radio_status_reset();
   21eb4:	f7f4 ff82 	bl	16dbc <radio_status_reset>
	radio_tmr_status_reset();
   21eb8:	f7f5 f83e 	bl	16f38 <radio_tmr_status_reset>
	radio_filter_status_reset();
   21ebc:	f7f5 f818 	bl	16ef0 <radio_filter_status_reset>
	radio_ar_status_reset();
   21ec0:	f7f5 f9d8 	bl	17274 <radio_ar_status_reset>
	radio_rssi_status_reset();
   21ec4:	f7f4 ffdc 	bl	16e80 <radio_rssi_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   21ec8:	7b23      	ldrb	r3, [r4, #12]
   21eca:	f003 0271 	and.w	r2, r3, #113	; 0x71
   21ece:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   21ed0:	bf02      	ittt	eq
   21ed2:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   21ed6:	f362 1306 	bfieq	r3, r2, #4, #3
   21eda:	7323      	strbeq	r3, [r4, #12]
	if (lll->chan_map_curr) {
   21edc:	7b23      	ldrb	r3, [r4, #12]
   21ede:	f013 0f70 	tst.w	r3, #112	; 0x70
   21ee2:	d008      	beq.n	21ef6 <isr_done+0x46>
		chan_prepare(lll);
   21ee4:	4620      	mov	r0, r4
   21ee6:	f7f0 fe67 	bl	12bb8 <chan_prepare>
		radio_tx_enable();
   21eea:	f7f4 ff4f 	bl	16d8c <radio_tx_enable>
}
   21eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   21ef2:	f7f5 b8f7 	b.w	170e4 <radio_tmr_end_capture>
	radio_filter_disable();
   21ef6:	f7f4 fff1 	bl	16edc <radio_filter_disable>
	isr_cleanup(param);
   21efa:	4620      	mov	r0, r4
}
   21efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   21f00:	f7f0 bc16 	b.w	12730 <isr_cleanup>

00021f04 <lll_adv_init>:
}
   21f04:	2000      	movs	r0, #0
   21f06:	4770      	bx	lr

00021f08 <lll_adv_reset>:
   21f08:	2000      	movs	r0, #0
   21f0a:	4770      	bx	lr

00021f0c <tx_ull_dequeue>:
{
   21f0c:	4603      	mov	r3, r0
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   21f0e:	e9d0 206c 	ldrd	r2, r0, [r0, #432]	; 0x1b0
{
   21f12:	b510      	push	{r4, lr}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   21f14:	b978      	cbnz	r0, 21f36 <tx_ull_dequeue+0x2a>
   21f16:	f8d3 01bc 	ldr.w	r0, [r3, #444]	; 0x1bc
   21f1a:	4290      	cmp	r0, r2
   21f1c:	d00b      	beq.n	21f36 <tx_ull_dequeue+0x2a>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   21f1e:	7910      	ldrb	r0, [r2, #4]
   21f20:	f000 0003 	and.w	r0, r0, #3
   21f24:	2803      	cmp	r0, #3
   21f26:	d104      	bne.n	21f32 <tx_ull_dequeue+0x26>
		    ((pdu_data_tx->llctrl.opcode !=
   21f28:	79d0      	ldrb	r0, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   21f2a:	2803      	cmp	r0, #3
   21f2c:	d003      	beq.n	21f36 <tx_ull_dequeue+0x2a>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   21f2e:	280a      	cmp	r0, #10
   21f30:	d001      	beq.n	21f36 <tx_ull_dequeue+0x2a>
			conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   21f32:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
	if (conn->tx_head == conn->tx_ctrl) {
   21f36:	f8d3 41b4 	ldr.w	r4, [r3, #436]	; 0x1b4
   21f3a:	6810      	ldr	r0, [r2, #0]
   21f3c:	4294      	cmp	r4, r2
   21f3e:	d10d      	bne.n	21f5c <tx_ull_dequeue+0x50>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   21f40:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
   21f44:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   21f48:	42a2      	cmp	r2, r4
			conn->tx_ctrl = NULL;
   21f4a:	bf06      	itte	eq
   21f4c:	2200      	moveq	r2, #0
			conn->tx_ctrl_last = NULL;
   21f4e:	e9c3 226d 	strdeq	r2, r2, [r3, #436]	; 0x1b4
			conn->tx_ctrl = conn->tx_head;
   21f52:	f8c3 01b4 	strne.w	r0, [r3, #436]	; 0x1b4
		tx->next = tx;
   21f56:	6009      	str	r1, [r1, #0]
}
   21f58:	4608      	mov	r0, r1
   21f5a:	bd10      	pop	{r4, pc}
		if (conn->tx_head == conn->tx_data) {
   21f5c:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		conn->tx_head = conn->tx_head->next;
   21f60:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0
		if (conn->tx_head == conn->tx_data) {
   21f64:	4294      	cmp	r4, r2
			conn->tx_data = conn->tx_data->next;
   21f66:	bf08      	it	eq
   21f68:	f8c3 01bc 	streq.w	r0, [r3, #444]	; 0x1bc
		tx->next = NULL;
   21f6c:	2300      	movs	r3, #0
   21f6e:	600b      	str	r3, [r1, #0]
   21f70:	e7f2      	b.n	21f58 <tx_ull_dequeue+0x4c>

00021f72 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   21f72:	f890 2152 	ldrb.w	r2, [r0, #338]	; 0x152
   21f76:	f012 0202 	ands.w	r2, r2, #2
{
   21f7a:	b430      	push	{r4, r5}
	if (conn->llcp_enc.pause_tx) {
   21f7c:	d013      	beq.n	21fa6 <ctrl_tx_sec_enqueue+0x34>
		if (!conn->tx_ctrl) {
   21f7e:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
   21f82:	b953      	cbnz	r3, 21f9a <ctrl_tx_sec_enqueue+0x28>
			tx->next = conn->tx_head;
   21f84:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   21f88:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   21f8a:	f8c0 11b0 	str.w	r1, [r0, #432]	; 0x1b0
		if (!tx->next) {
   21f8e:	680b      	ldr	r3, [r1, #0]
   21f90:	b90b      	cbnz	r3, 21f96 <ctrl_tx_sec_enqueue+0x24>
			conn->tx_data_last = tx;
   21f92:	f8c0 11c0 	str.w	r1, [r0, #448]	; 0x1c0
}
   21f96:	bc30      	pop	{r4, r5}
   21f98:	4770      	bx	lr
			tx->next = conn->tx_ctrl_last->next;
   21f9a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   21f9e:	681a      	ldr	r2, [r3, #0]
   21fa0:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   21fa2:	6019      	str	r1, [r3, #0]
   21fa4:	e7f3      	b.n	21f8e <ctrl_tx_sec_enqueue+0x1c>
		if (conn->tx_head) {
   21fa6:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   21faa:	b1c3      	cbz	r3, 21fde <ctrl_tx_sec_enqueue+0x6c>
			if ((conn->llcp_req != conn->llcp_ack) &&
   21fac:	f890 50e8 	ldrb.w	r5, [r0, #232]	; 0xe8
   21fb0:	f890 40e9 	ldrb.w	r4, [r0, #233]	; 0xe9
   21fb4:	42a5      	cmp	r5, r4
   21fb6:	d00f      	beq.n	21fd8 <ctrl_tx_sec_enqueue+0x66>
   21fb8:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
   21fbc:	2c03      	cmp	r4, #3
   21fbe:	d10b      	bne.n	21fd8 <ctrl_tx_sec_enqueue+0x66>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   21fc0:	791c      	ldrb	r4, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   21fc2:	f004 0403 	and.w	r4, r4, #3
   21fc6:	2c03      	cmp	r4, #3
   21fc8:	d106      	bne.n	21fd8 <ctrl_tx_sec_enqueue+0x66>
			    ((pdu_data_tx->llctrl.opcode ==
   21fca:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   21fcc:	2a03      	cmp	r2, #3
   21fce:	d008      	beq.n	21fe2 <ctrl_tx_sec_enqueue+0x70>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   21fd0:	f1a2 030a 	sub.w	r3, r2, #10
   21fd4:	425a      	negs	r2, r3
   21fd6:	415a      	adcs	r2, r3
}
   21fd8:	bc30      	pop	{r4, r5}
		ctrl_tx_pause_enqueue(conn, tx, pause);
   21fda:	f7f1 b92b 	b.w	13234 <ctrl_tx_pause_enqueue>
	bool pause = false;
   21fde:	461a      	mov	r2, r3
   21fe0:	e7fa      	b.n	21fd8 <ctrl_tx_sec_enqueue+0x66>
				pause = true;
   21fe2:	2201      	movs	r2, #1
   21fe4:	e7f8      	b.n	21fd8 <ctrl_tx_sec_enqueue+0x66>

00021fe6 <ctrl_tx_enqueue>:
	ctrl_tx_pause_enqueue(conn, tx, false);
   21fe6:	2200      	movs	r2, #0
   21fe8:	f7f1 b924 	b.w	13234 <ctrl_tx_pause_enqueue>

00021fec <start_enc_rsp_send>:
	conn->lll.enc_tx = 1;
   21fec:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
   21ff0:	f043 0310 	orr.w	r3, r3, #16
   21ff4:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21ff8:	780b      	ldrb	r3, [r1, #0]
   21ffa:	f043 0303 	orr.w	r3, r3, #3
   21ffe:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   22000:	2301      	movs	r3, #1
   22002:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   22004:	2306      	movs	r3, #6
   22006:	70cb      	strb	r3, [r1, #3]
}
   22008:	2000      	movs	r0, #0
   2200a:	4770      	bx	lr

0002200c <ll_connected_get>:
{
   2200c:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   2200e:	b918      	cbnz	r0, 22018 <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   22010:	f7f1 f9d4 	bl	133bc <ll_conn_get>
	if (conn->lll.handle != handle) {
   22014:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   22016:	b103      	cbz	r3, 2201a <ll_connected_get+0xe>
		return NULL;
   22018:	2000      	movs	r0, #0
}
   2201a:	bd08      	pop	{r3, pc}

0002201c <ll_conn_update>:
{
   2201c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22020:	460d      	mov	r5, r1
   22022:	4690      	mov	r8, r2
   22024:	469a      	mov	sl, r3
   22026:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   2202a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
   2202e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	conn = ll_connected_get(handle);
   22032:	f7ff ffeb 	bl	2200c <ll_connected_get>
	if (!conn) {
   22036:	4604      	mov	r4, r0
   22038:	2800      	cmp	r0, #0
   2203a:	d065      	beq.n	22108 <ll_conn_update+0xec>
	if (!cmd) {
   2203c:	bb7d      	cbnz	r5, 2209e <ll_conn_update+0x82>
		if (!conn->llcp_conn_param.disabled &&
   2203e:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   22042:	06da      	lsls	r2, r3, #27
   22044:	d408      	bmi.n	22058 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   22046:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   2204a:	f011 0101 	ands.w	r1, r1, #1
   2204e:	d041      	beq.n	220d4 <ll_conn_update+0xb8>
		     (conn->llcp_feature.features &
   22050:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   22054:	079b      	lsls	r3, r3, #30
   22056:	d423      	bmi.n	220a0 <ll_conn_update+0x84>
		} else if (conn->lll.role) {
   22058:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   2205c:	2b00      	cmp	r3, #0
   2205e:	db51      	blt.n	22104 <ll_conn_update+0xe8>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   22060:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   22064:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   22068:	429a      	cmp	r2, r3
   2206a:	d14d      	bne.n	22108 <ll_conn_update+0xec>
		conn->llcp_cu.win_size = 1U;
   2206c:	2301      	movs	r3, #1
   2206e:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   22072:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   22076:	f8a4 9108 	strh.w	r9, [r4, #264]	; 0x108
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2207a:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_cu.win_offset_us = 0U;
   2207e:	2000      	movs	r0, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   22080:	f043 0305 	orr.w	r3, r3, #5
		conn->llcp_cu.req++;
   22084:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   22086:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		conn->llcp_cu.latency = latency;
   2208a:	f8a4 710a 	strh.w	r7, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   2208e:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   22092:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.req++;
   22096:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
}
   2209a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2209e:	4629      	mov	r1, r5
		cmd--;
   220a0:	1e48      	subs	r0, r1, #1
		if (cmd) {
   220a2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   220a6:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   220aa:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   220ae:	d013      	beq.n	220d8 <ll_conn_update+0xbc>
			if ((conn->llcp_conn_param.req ==
   220b0:	4293      	cmp	r3, r2
   220b2:	d029      	beq.n	22108 <ll_conn_update+0xec>
			    (conn->llcp_conn_param.state !=
   220b4:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   220b8:	f003 0207 	and.w	r2, r3, #7
   220bc:	2a03      	cmp	r2, #3
   220be:	d123      	bne.n	22108 <ll_conn_update+0xec>
			conn->llcp_conn_param.state = cmd;
   220c0:	f360 0302 	bfi	r3, r0, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   220c4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   220c8:	f884 8173 	strb.w	r8, [r4, #371]	; 0x173
			conn->llcp_conn_param.cmd = 1U;
   220cc:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	return 0;
   220d0:	2000      	movs	r0, #0
   220d2:	e7e2      	b.n	2209a <ll_conn_update+0x7e>
			cmd++;
   220d4:	2101      	movs	r1, #1
   220d6:	e7e3      	b.n	220a0 <ll_conn_update+0x84>
			if (conn->llcp_conn_param.req !=
   220d8:	4293      	cmp	r3, r2
   220da:	d115      	bne.n	22108 <ll_conn_update+0xec>
			conn->llcp_conn_param.state = cmd;
   220dc:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.interval_min = interval_min;
   220e0:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   220e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   220e8:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
   220ec:	3301      	adds	r3, #1
			conn->llcp_conn_param.interval_max = interval_max;
   220ee:	f8a4 9176 	strh.w	r9, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency = latency;
   220f2:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   220f6:	f8a4 617a 	strh.w	r6, [r4, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   220fa:	f8a4 2172 	strh.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.req++;
   220fe:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
   22102:	e7ca      	b.n	2209a <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   22104:	201a      	movs	r0, #26
   22106:	e7c8      	b.n	2209a <ll_conn_update+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   22108:	200c      	movs	r0, #12
   2210a:	e7c6      	b.n	2209a <ll_conn_update+0x7e>

0002210c <ll_chm_get>:
{
   2210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2210e:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   22110:	f7ff ff7c 	bl	2200c <ll_connected_get>
	if (!conn) {
   22114:	4604      	mov	r4, r0
   22116:	b170      	cbz	r0, 22136 <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   22118:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   2211a:	f100 0638 	add.w	r6, r0, #56	; 0x38
		conn->chm_updated = 0U;
   2211e:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   22122:	2205      	movs	r2, #5
   22124:	4631      	mov	r1, r6
   22126:	4628      	mov	r0, r5
   22128:	f7fd fa66 	bl	1f5f8 <memcpy>
	} while (conn->chm_updated);
   2212c:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   22130:	2800      	cmp	r0, #0
   22132:	d1f4      	bne.n	2211e <ll_chm_get+0x12>
}
   22134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22136:	200c      	movs	r0, #12
   22138:	e7fc      	b.n	22134 <ll_chm_get+0x28>

0002213a <ll_terminate_ind_send>:
{
   2213a:	b510      	push	{r4, lr}
   2213c:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   2213e:	f7ff ff65 	bl	2200c <ll_connected_get>
	if (!conn) {
   22142:	b140      	cbz	r0, 22156 <ll_terminate_ind_send+0x1c>
	conn->llcp_terminate.req++;
   22144:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
	conn->llcp_terminate.reason_own = reason;
   22148:	f880 412a 	strb.w	r4, [r0, #298]	; 0x12a
	conn->llcp_terminate.req++;
   2214c:	3301      	adds	r3, #1
   2214e:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
	return 0;
   22152:	2000      	movs	r0, #0
}
   22154:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22156:	200c      	movs	r0, #12
   22158:	e7fc      	b.n	22154 <ll_terminate_ind_send+0x1a>

0002215a <ll_feature_req_send>:
{
   2215a:	b508      	push	{r3, lr}
	conn = ll_connected_get(handle);
   2215c:	f7ff ff56 	bl	2200c <ll_connected_get>
	if (!conn) {
   22160:	b150      	cbz	r0, 22178 <ll_feature_req_send+0x1e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   22162:	f890 2118 	ldrb.w	r2, [r0, #280]	; 0x118
   22166:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   2216a:	4293      	cmp	r3, r2
   2216c:	d104      	bne.n	22178 <ll_feature_req_send+0x1e>
	conn->llcp_feature.req++;
   2216e:	3301      	adds	r3, #1
   22170:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   22174:	2000      	movs	r0, #0
}
   22176:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22178:	200c      	movs	r0, #12
   2217a:	e7fc      	b.n	22176 <ll_feature_req_send+0x1c>

0002217c <ll_version_ind_send>:
{
   2217c:	b508      	push	{r3, lr}
	conn = ll_connected_get(handle);
   2217e:	f7ff ff45 	bl	2200c <ll_connected_get>
	if (!conn) {
   22182:	b150      	cbz	r0, 2219a <ll_version_ind_send+0x1e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   22184:	f890 2120 	ldrb.w	r2, [r0, #288]	; 0x120
   22188:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
   2218c:	4293      	cmp	r3, r2
   2218e:	d104      	bne.n	2219a <ll_version_ind_send+0x1e>
	conn->llcp_version.req++;
   22190:	3301      	adds	r3, #1
   22192:	f880 3120 	strb.w	r3, [r0, #288]	; 0x120
	return 0;
   22196:	2000      	movs	r0, #0
}
   22198:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2219a:	200c      	movs	r0, #12
   2219c:	e7fc      	b.n	22198 <ll_version_ind_send+0x1c>

0002219e <ll_length_req_send>:
{
   2219e:	b570      	push	{r4, r5, r6, lr}
   221a0:	460e      	mov	r6, r1
   221a2:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   221a4:	f7ff ff32 	bl	2200c <ll_connected_get>
	if (!conn) {
   221a8:	b340      	cbz	r0, 221fc <ll_length_req_send+0x5e>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   221aa:	f890 2198 	ldrb.w	r2, [r0, #408]	; 0x198
   221ae:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   221b2:	4293      	cmp	r3, r2
   221b4:	d014      	beq.n	221e0 <ll_length_req_send+0x42>
		switch (conn->llcp_length.state) {
   221b6:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   221ba:	f003 0307 	and.w	r3, r3, #7
   221be:	2b07      	cmp	r3, #7
   221c0:	d01e      	beq.n	22200 <ll_length_req_send+0x62>
   221c2:	2401      	movs	r4, #1
   221c4:	fa04 f303 	lsl.w	r3, r4, r3
   221c8:	f013 0f68 	tst.w	r3, #104	; 0x68
   221cc:	d018      	beq.n	22200 <ll_length_req_send+0x62>
			if (!conn->llcp_length.cache.tx_octets) {
   221ce:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   221d2:	b9ab      	cbnz	r3, 22200 <ll_length_req_send+0x62>
				conn->llcp_length.cache.tx_octets = tx_octets;
   221d4:	f8a0 61a4 	strh.w	r6, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   221d8:	f8a0 51a6 	strh.w	r5, [r0, #422]	; 0x1a6
	return 0;
   221dc:	2000      	movs	r0, #0
}
   221de:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   221e0:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
	conn->llcp_length.tx_octets = tx_octets;
   221e4:	f8a0 619e 	strh.w	r6, [r0, #414]	; 0x19e
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   221e8:	f36f 0202 	bfc	r2, #0, #3
	conn->llcp_length.req++;
   221ec:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   221ee:	f880 219a 	strb.w	r2, [r0, #410]	; 0x19a
	conn->llcp_length.tx_time = tx_time;
   221f2:	f8a0 51a2 	strh.w	r5, [r0, #418]	; 0x1a2
	conn->llcp_length.req++;
   221f6:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   221fa:	e7ef      	b.n	221dc <ll_length_req_send+0x3e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   221fc:	2002      	movs	r0, #2
   221fe:	e7ee      	b.n	221de <ll_length_req_send+0x40>
			return BT_HCI_ERR_CMD_DISALLOWED;
   22200:	200c      	movs	r0, #12
   22202:	e7ec      	b.n	221de <ll_length_req_send+0x40>

00022204 <ll_length_max_get>:
{
   22204:	b510      	push	{r4, lr}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   22206:	241b      	movs	r4, #27
   22208:	8004      	strh	r4, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   2220a:	8014      	strh	r4, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   2220c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   22210:	800a      	strh	r2, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   22212:	801a      	strh	r2, [r3, #0]
}
   22214:	bd10      	pop	{r4, pc}

00022216 <ll_phy_get>:
{
   22216:	b538      	push	{r3, r4, r5, lr}
   22218:	460d      	mov	r5, r1
   2221a:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   2221c:	f7ff fef6 	bl	2200c <ll_connected_get>
	if (!conn) {
   22220:	b158      	cbz	r0, 2223a <ll_phy_get+0x24>
	*tx = conn->lll.phy_tx;
   22222:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   22226:	f3c3 0302 	ubfx	r3, r3, #0, #3
   2222a:	702b      	strb	r3, [r5, #0]
	*rx = conn->lll.phy_rx;
   2222c:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   22230:	f3c3 0302 	ubfx	r3, r3, #0, #3
   22234:	7023      	strb	r3, [r4, #0]
	return 0;
   22236:	2000      	movs	r0, #0
}
   22238:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2223a:	2002      	movs	r0, #2
   2223c:	e7fc      	b.n	22238 <ll_phy_get+0x22>

0002223e <ll_phy_req_send>:
{
   2223e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22242:	4689      	mov	r9, r1
   22244:	4690      	mov	r8, r2
   22246:	461f      	mov	r7, r3
	conn = ll_connected_get(handle);
   22248:	f7ff fee0 	bl	2200c <ll_connected_get>
	if (!conn) {
   2224c:	b330      	cbz	r0, 2229c <ll_phy_req_send+0x5e>
	if ((conn->llcp_req != conn->llcp_ack) ||
   2224e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   22252:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   22256:	429a      	cmp	r2, r3
   22258:	d122      	bne.n	222a0 <ll_phy_req_send+0x62>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   2225a:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   2225e:	f890 61a9 	ldrb.w	r6, [r0, #425]	; 0x1a9
   22262:	429e      	cmp	r6, r3
   22264:	d11c      	bne.n	222a0 <ll_phy_req_send+0x62>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   22266:	f8b0 41aa 	ldrh.w	r4, [r0, #426]	; 0x1aa
   2226a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
   2226e:	f024 0403 	bic.w	r4, r4, #3
   22272:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
	conn->llcp_phy.tx = tx;
   22276:	4625      	mov	r5, r4
   22278:	f369 0584 	bfi	r5, r9, #2, #3
	conn->llcp_phy.flags = flags;
   2227c:	f3c4 2407 	ubfx	r4, r4, #8, #8
   22280:	f368 0441 	bfi	r4, r8, #1, #1
	conn->llcp_phy.rx = rx;
   22284:	f367 1547 	bfi	r5, r7, #5, #3
	conn->llcp_phy.req++;
   22288:	3601      	adds	r6, #1
	conn->llcp_phy.flags = flags;
   2228a:	f880 41ab 	strb.w	r4, [r0, #427]	; 0x1ab
	conn->llcp_phy.rx = rx;
   2228e:	f880 51aa 	strb.w	r5, [r0, #426]	; 0x1aa
	conn->llcp_phy.req++;
   22292:	f880 61a8 	strb.w	r6, [r0, #424]	; 0x1a8
	return 0;
   22296:	2000      	movs	r0, #0
}
   22298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2229c:	2002      	movs	r0, #2
   2229e:	e7fb      	b.n	22298 <ll_phy_req_send+0x5a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   222a0:	200c      	movs	r0, #12
   222a2:	e7f9      	b.n	22298 <ll_phy_req_send+0x5a>

000222a4 <ll_apto_get>:
{
   222a4:	b510      	push	{r4, lr}
   222a6:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   222a8:	f7ff feb0 	bl	2200c <ll_connected_get>
	if (!conn) {
   222ac:	b160      	cbz	r0, 222c8 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   222ae:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   222b0:	f8b0 20d2 	ldrh.w	r2, [r0, #210]	; 0xd2
   222b4:	435a      	muls	r2, r3
   222b6:	237d      	movs	r3, #125	; 0x7d
   222b8:	4353      	muls	r3, r2
	return 0;
   222ba:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   222bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   222c0:	fbb3 f3f2 	udiv	r3, r3, r2
   222c4:	8023      	strh	r3, [r4, #0]
}
   222c6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   222c8:	2002      	movs	r0, #2
   222ca:	e7fc      	b.n	222c6 <ll_apto_get+0x22>

000222cc <ll_apto_set>:
{
   222cc:	b510      	push	{r4, lr}
   222ce:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   222d0:	f7ff fe9c 	bl	2200c <ll_connected_get>
	if (!conn) {
   222d4:	b170      	cbz	r0, 222f4 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   222d6:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   222d8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   222dc:	4353      	muls	r3, r2
   222de:	f242 7110 	movw	r1, #10000	; 0x2710
   222e2:	fb01 3404 	mla	r4, r1, r4, r3
   222e6:	3c01      	subs	r4, #1
   222e8:	fbb4 f4f3 	udiv	r4, r4, r3
   222ec:	f8a0 40d2 	strh.w	r4, [r0, #210]	; 0xd2
	return 0;
   222f0:	2000      	movs	r0, #0
}
   222f2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   222f4:	2002      	movs	r0, #2
   222f6:	e7fc      	b.n	222f2 <ll_apto_set+0x26>

000222f8 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   222f8:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   222fc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   22300:	f3c2 1202 	ubfx	r2, r2, #4, #3
   22304:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   22306:	bf14      	ite	ne
   22308:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   2230a:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   2230c:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   22310:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   22314:	bf14      	ite	ne
   22316:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   22318:	3b0b      	subeq	r3, #11
   2231a:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   2231c:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   2231e:	bf44      	itt	mi
   22320:	3b04      	submi	r3, #4
   22322:	b29b      	uxthmi	r3, r3
}
   22324:	4298      	cmp	r0, r3
   22326:	bf28      	it	cs
   22328:	4618      	movcs	r0, r3
   2232a:	4770      	bx	lr

0002232c <isr_race>:
	radio_status_reset();
   2232c:	f7f4 bd46 	b.w	16dbc <radio_status_reset>

00022330 <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   22330:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   22332:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   22336:	f043 0304 	orr.w	r3, r3, #4
   2233a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
{
   2233e:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   22340:	f7f4 fd72 	bl	16e28 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   22344:	7803      	ldrb	r3, [r0, #0]
   22346:	2201      	movs	r2, #1
   22348:	f362 0301 	bfi	r3, r2, #0, #2
	p->len = 0;
   2234c:	2200      	movs	r2, #0
   2234e:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   22350:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   22352:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   22354:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   22358:	f7ff fae1 	bl	2191e <memq_peek>
   2235c:	7823      	ldrb	r3, [r4, #0]
   2235e:	3000      	adds	r0, #0
   22360:	bf18      	it	ne
   22362:	2001      	movne	r0, #1
   22364:	f360 1304 	bfi	r3, r0, #4, #1
   22368:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   2236a:	4620      	mov	r0, r4
   2236c:	bd38      	pop	{r3, r4, r5, pc}

0002236e <lll_conn_init>:
}
   2236e:	2000      	movs	r0, #0
   22370:	4770      	bx	lr

00022372 <lll_conn_reset>:
   22372:	2000      	movs	r0, #0
   22374:	4770      	bx	lr

00022376 <lll_conn_ppm_local_get>:
}
   22376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2237a:	4770      	bx	lr

0002237c <lll_conn_is_abort_cb>:
}
   2237c:	f06f 0047 	mvn.w	r0, #71	; 0x47
   22380:	4770      	bx	lr

00022382 <lll_conn_isr_abort>:
{
   22382:	b510      	push	{r4, lr}
   22384:	4604      	mov	r4, r0
	radio_status_reset();
   22386:	f7f4 fd19 	bl	16dbc <radio_status_reset>
	radio_tmr_status_reset();
   2238a:	f7f4 fdd5 	bl	16f38 <radio_tmr_status_reset>
	radio_filter_status_reset();
   2238e:	f7f4 fdaf 	bl	16ef0 <radio_filter_status_reset>
	radio_ar_status_reset();
   22392:	f7f4 ff6f 	bl	17274 <radio_ar_status_reset>
	radio_rssi_status_reset();
   22396:	f7f4 fd73 	bl	16e80 <radio_rssi_status_reset>
	isr_cleanup(param);
   2239a:	4620      	mov	r0, r4
}
   2239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   223a0:	f7f3 b830 	b.w	15404 <isr_cleanup>

000223a4 <lll_conn_tx_pkt_set>:
{
   223a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   223a6:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   223a8:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   223ac:	f8b0 5040 	ldrh.w	r5, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   223b0:	f001 0407 	and.w	r4, r1, #7
{
   223b4:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
   223b6:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   223ba:	4620      	mov	r0, r4
   223bc:	f7f4 fc68 	bl	16c90 <radio_phy_set>
	} else if (lll->enc_tx) {
   223c0:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
   223c4:	0062      	lsls	r2, r4, #1
   223c6:	06db      	lsls	r3, r3, #27
   223c8:	b2e9      	uxtb	r1, r5
   223ca:	f042 0201 	orr.w	r2, r2, #1
   223ce:	d50d      	bpl.n	223ec <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   223d0:	3104      	adds	r1, #4
   223d2:	b2c9      	uxtb	r1, r1
   223d4:	2008      	movs	r0, #8
   223d6:	f7f4 fca1 	bl	16d1c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   223da:	4639      	mov	r1, r7
   223dc:	f106 0084 	add.w	r0, r6, #132	; 0x84
   223e0:	f7f4 fec8 	bl	17174 <radio_ccm_tx_pkt_set>
}
   223e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   223e8:	f7f4 bcca 	b.w	16d80 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   223ec:	2008      	movs	r0, #8
   223ee:	f7f4 fc95 	bl	16d1c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   223f2:	4638      	mov	r0, r7
   223f4:	e7f6      	b.n	223e4 <lll_conn_tx_pkt_set+0x40>

000223f6 <lll_conn_pdu_tx_prep>:
	if (lll->empty) {
   223f6:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   223fa:	075b      	lsls	r3, r3, #29
{
   223fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22400:	4606      	mov	r6, r0
   22402:	4688      	mov	r8, r1
	if (lll->empty) {
   22404:	d506      	bpl.n	22414 <lll_conn_pdu_tx_prep+0x1e>
		*pdu_data_tx = empty_tx_enqueue(lll);
   22406:	f7ff ff93 	bl	22330 <empty_tx_enqueue>
   2240a:	f8c8 0000 	str.w	r0, [r8]
}
   2240e:	b003      	add	sp, #12
   22410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   22414:	aa01      	add	r2, sp, #4
   22416:	e9d0 0113 	ldrd	r0, r1, [r0, #76]	; 0x4c
   2241a:	f7ff fa80 	bl	2191e <memq_peek>
	if (!link) {
   2241e:	4681      	mov	r9, r0
   22420:	b960      	cbnz	r0, 2243c <lll_conn_pdu_tx_prep+0x46>
		p = empty_tx_enqueue(lll);
   22422:	4630      	mov	r0, r6
   22424:	f7ff ff84 	bl	22330 <empty_tx_enqueue>
   22428:	4607      	mov	r7, r0
	p->rfu = 0U;
   2242a:	783b      	ldrb	r3, [r7, #0]
   2242c:	f36f 1347 	bfc	r3, #5, #3
   22430:	703b      	strb	r3, [r7, #0]
	p->resv = 0U;
   22432:	2300      	movs	r3, #0
   22434:	70bb      	strb	r3, [r7, #2]
	*pdu_data_tx = p;
   22436:	f8c8 7000 	str.w	r7, [r8]
   2243a:	e7e8      	b.n	2240e <lll_conn_pdu_tx_prep+0x18>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   2243c:	9d01      	ldr	r5, [sp, #4]
   2243e:	f896 4061 	ldrb.w	r4, [r6, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   22442:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   22446:	3504      	adds	r5, #4
   22448:	192f      	adds	r7, r5, r4
		if (!lll->packet_tx_head_len) {
   2244a:	b913      	cbnz	r3, 22452 <lll_conn_pdu_tx_prep+0x5c>
			lll->packet_tx_head_len = p->len;
   2244c:	787b      	ldrb	r3, [r7, #1]
   2244e:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   22452:	b124      	cbz	r4, 2245e <lll_conn_pdu_tx_prep+0x68>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   22454:	5d2b      	ldrb	r3, [r5, r4]
   22456:	2201      	movs	r2, #1
   22458:	f362 0301 	bfi	r3, r2, #0, #2
   2245c:	552b      	strb	r3, [r5, r4]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   2245e:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
   22462:	1b1b      	subs	r3, r3, r4
   22464:	707b      	strb	r3, [r7, #1]
		p->md = 0;
   22466:	5d2b      	ldrb	r3, [r5, r4]
   22468:	f36f 1304 	bfc	r3, #4, #1
   2246c:	552b      	strb	r3, [r5, r4]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   2246e:	4630      	mov	r0, r6
   22470:	f7ff ff42 	bl	222f8 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   22474:	787b      	ldrb	r3, [r7, #1]
   22476:	4283      	cmp	r3, r0
			p->len = max_tx_octets;
   22478:	bf84      	itt	hi
   2247a:	7078      	strbhi	r0, [r7, #1]
			p->md = 1;
   2247c:	5d2b      	ldrbhi	r3, [r5, r4]
		if (link->next != lll->memq_tx.tail) {
   2247e:	f8d9 2000 	ldr.w	r2, [r9]
			p->md = 1;
   22482:	bf84      	itt	hi
   22484:	f043 0310 	orrhi.w	r3, r3, #16
   22488:	552b      	strbhi	r3, [r5, r4]
		if (link->next != lll->memq_tx.tail) {
   2248a:	6d33      	ldr	r3, [r6, #80]	; 0x50
   2248c:	429a      	cmp	r2, r3
			p->md = 1;
   2248e:	bf1e      	ittt	ne
   22490:	5d2b      	ldrbne	r3, [r5, r4]
   22492:	f043 0310 	orrne.w	r3, r3, #16
   22496:	552b      	strbne	r3, [r5, r4]
   22498:	e7c7      	b.n	2242a <lll_conn_pdu_tx_prep+0x34>

0002249a <lll_conn_flush>:

void lll_conn_flush(struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   2249a:	4770      	bx	lr

0002249c <ll_start_enc_req_send>:
{
   2249c:	b570      	push	{r4, r5, r6, lr}
   2249e:	460d      	mov	r5, r1
   224a0:	4616      	mov	r6, r2
	conn = ll_connected_get(handle);
   224a2:	f7ff fdb3 	bl	2200c <ll_connected_get>
	if (!conn) {
   224a6:	4604      	mov	r4, r0
   224a8:	b3e0      	cbz	r0, 22524 <ll_start_enc_req_send+0x88>
	if (error_code) {
   224aa:	b325      	cbz	r5, 224f6 <ll_start_enc_req_send+0x5a>
		if (conn->llcp_enc.refresh == 0U) {
   224ac:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   224b0:	f010 0004 	ands.w	r0, r0, #4
   224b4:	d112      	bne.n	224dc <ll_start_enc_req_send+0x40>
			if ((conn->llcp_req == conn->llcp_ack) ||
   224b6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   224ba:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   224be:	429a      	cmp	r2, r3
   224c0:	d032      	beq.n	22528 <ll_start_enc_req_send+0x8c>
   224c2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   224c6:	2b03      	cmp	r3, #3
   224c8:	d12e      	bne.n	22528 <ll_start_enc_req_send+0x8c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   224ca:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   224ce:	f884 50ed 	strb.w	r5, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   224d2:	f360 0301 	bfi	r3, r0, #0, #2
   224d6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   224da:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   224dc:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
			if (conn->llcp_terminate.ack !=
   224e0:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   224e4:	4293      	cmp	r3, r2
   224e6:	d11f      	bne.n	22528 <ll_start_enc_req_send+0x8c>
			conn->llcp_terminate.req++;
   224e8:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   224ea:	f884 512a 	strb.w	r5, [r4, #298]	; 0x12a
			conn->llcp_terminate.req++;
   224ee:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
	return 0;
   224f2:	2000      	movs	r0, #0
   224f4:	e7f1      	b.n	224da <ll_start_enc_req_send+0x3e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   224f6:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   224fa:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   224fe:	429a      	cmp	r2, r3
   22500:	d012      	beq.n	22528 <ll_start_enc_req_send+0x8c>
   22502:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   22506:	2b03      	cmp	r3, #3
   22508:	d10e      	bne.n	22528 <ll_start_enc_req_send+0x8c>
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   2250a:	2210      	movs	r2, #16
   2250c:	4631      	mov	r1, r6
   2250e:	f200 105d 	addw	r0, r0, #349	; 0x15d
   22512:	f7fd f871 	bl	1f5f8 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   22516:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   2251a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   2251e:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
   22522:	e7e6      	b.n	224f2 <ll_start_enc_req_send+0x56>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   22524:	2002      	movs	r0, #2
   22526:	e7d8      	b.n	224da <ll_start_enc_req_send+0x3e>
				return BT_HCI_ERR_CMD_DISALLOWED;
   22528:	200c      	movs	r0, #12
   2252a:	e7d6      	b.n	224da <ll_start_enc_req_send+0x3e>

0002252c <ll_wl_size_get>:
}
   2252c:	2008      	movs	r0, #8
   2252e:	4770      	bx	lr

00022530 <ll_rl_size_get>:
   22530:	2008      	movs	r0, #8
   22532:	4770      	bx	lr

00022534 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   22534:	b570      	push	{r4, r5, r6, lr}
   22536:	b08c      	sub	sp, #48	; 0x30
   22538:	460e      	mov	r6, r1
   2253a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   2253c:	4601      	mov	r1, r0
   2253e:	2210      	movs	r2, #16
   22540:	4668      	mov	r0, sp
{
   22542:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   22544:	f7ff f9bc 	bl	218c0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   22548:	2210      	movs	r2, #16
   2254a:	eb0d 0002 	add.w	r0, sp, r2
   2254e:	4631      	mov	r1, r6
   22550:	f7ff f9b6 	bl	218c0 <mem_rcopy>

	do_ecb(&ecb);
   22554:	4668      	mov	r0, sp
   22556:	f7f4 faa1 	bl	16a9c <do_ecb>

	if (cipher_text_le) {
   2255a:	b125      	cbz	r5, 22566 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   2255c:	2210      	movs	r2, #16
   2255e:	a908      	add	r1, sp, #32
   22560:	4628      	mov	r0, r5
   22562:	f7ff f9ad 	bl	218c0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   22566:	b124      	cbz	r4, 22572 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   22568:	2210      	movs	r2, #16
   2256a:	a908      	add	r1, sp, #32
   2256c:	4620      	mov	r0, r4
   2256e:	f7fd f843 	bl	1f5f8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   22572:	b00c      	add	sp, #48	; 0x30
   22574:	bd70      	pop	{r4, r5, r6, pc}

00022576 <radio_tx_chain_delay_get>:
}
   22576:	2001      	movs	r0, #1
   22578:	4770      	bx	lr

0002257a <radio_rx_ready_delay_get>:
}
   2257a:	2029      	movs	r0, #41	; 0x29
   2257c:	4770      	bx	lr

0002257e <radio_rx_chain_delay_get>:
	switch (phy) {
   2257e:	2802      	cmp	r0, #2
}
   22580:	bf14      	ite	ne
   22582:	200a      	movne	r0, #10
   22584:	2006      	moveq	r0, #6
   22586:	4770      	bx	lr

00022588 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   22588:	4288      	cmp	r0, r1
   2258a:	d00c      	beq.n	225a6 <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
   2258c:	b978      	cbnz	r0, 225ae <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   2258e:	1e48      	subs	r0, r1, #1
   22590:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   22592:	bf8c      	ite	hi
   22594:	2000      	movhi	r0, #0
   22596:	2001      	movls	r0, #1
   22598:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   2259a:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   2259e:	bf0c      	ite	eq
   225a0:	2001      	moveq	r0, #1
   225a2:	2000      	movne	r0, #0
   225a4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   225a6:	2001      	movs	r0, #1
   225a8:	4770      	bx	lr
   225aa:	2000      	movs	r0, #0
}
   225ac:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   225ae:	2801      	cmp	r0, #1
   225b0:	d0f3      	beq.n	2259a <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   225b2:	2802      	cmp	r0, #2
   225b4:	d1f9      	bne.n	225aa <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   225b6:	2901      	cmp	r1, #1
   225b8:	e7eb      	b.n	22592 <mayfly_prio_is_equal+0xa>

000225ba <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   225ba:	4601      	mov	r1, r0
   225bc:	2000      	movs	r0, #0
   225be:	f7f4 ba65 	b.w	16a8c <cntr_cmp_set>

000225c2 <fixed_data_unref>:
}
   225c2:	4770      	bx	lr

000225c4 <k_uptime_get_32>:
{
   225c4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   225c6:	f002 ffb1 	bl	2552c <z_impl_k_uptime_get>
}
   225ca:	bd08      	pop	{r3, pc}

000225cc <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   225cc:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   225ce:	685b      	ldr	r3, [r3, #4]
   225d0:	460a      	mov	r2, r1
   225d2:	6819      	ldr	r1, [r3, #0]
   225d4:	f7f4 bf8c 	b.w	174f0 <net_buf_alloc_len>

000225d8 <net_buf_get>:
{
   225d8:	b570      	push	{r4, r5, r6, lr}
   225da:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   225dc:	f002 fd6e 	bl	250bc <z_impl_k_queue_get>
	if (!buf) {
   225e0:	4605      	mov	r5, r0
   225e2:	b128      	cbz	r0, 225f0 <net_buf_get+0x18>
   225e4:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   225e6:	7963      	ldrb	r3, [r4, #5]
   225e8:	f013 0301 	ands.w	r3, r3, #1
   225ec:	d102      	bne.n	225f4 <net_buf_get+0x1c>
	frag->frags = NULL;
   225ee:	6023      	str	r3, [r4, #0]
}
   225f0:	4628      	mov	r0, r5
   225f2:	bd70      	pop	{r4, r5, r6, pc}
   225f4:	2100      	movs	r1, #0
   225f6:	4630      	mov	r0, r6
   225f8:	f002 fd60 	bl	250bc <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   225fc:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   225fe:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   22600:	f023 0301 	bic.w	r3, r3, #1
   22604:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22606:	4604      	mov	r4, r0
   22608:	e7ed      	b.n	225e6 <net_buf_get+0xe>

0002260a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2260a:	6883      	ldr	r3, [r0, #8]
   2260c:	4419      	add	r1, r3
   2260e:	6001      	str	r1, [r0, #0]
}
   22610:	4770      	bx	lr

00022612 <net_buf_put>:
{
   22612:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   22614:	460a      	mov	r2, r1
   22616:	6814      	ldr	r4, [r2, #0]
   22618:	b914      	cbnz	r4, 22620 <net_buf_put+0xe>
}
   2261a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2261c:	f002 bd2f 	b.w	2507e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   22620:	7953      	ldrb	r3, [r2, #5]
   22622:	f043 0301 	orr.w	r3, r3, #1
   22626:	7153      	strb	r3, [r2, #5]
   22628:	4622      	mov	r2, r4
   2262a:	e7f4      	b.n	22616 <net_buf_put+0x4>

0002262c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2262c:	7903      	ldrb	r3, [r0, #4]
   2262e:	3301      	adds	r3, #1
   22630:	7103      	strb	r3, [r0, #4]
	return buf;
}
   22632:	4770      	bx	lr

00022634 <net_buf_simple_add>:
	return buf->data + buf->len;
   22634:	8883      	ldrh	r3, [r0, #4]
   22636:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22638:	4419      	add	r1, r3
   2263a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2263c:	18d0      	adds	r0, r2, r3
   2263e:	4770      	bx	lr

00022640 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   22640:	b430      	push	{r4, r5}
   22642:	8883      	ldrh	r3, [r0, #4]
   22644:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   22646:	189d      	adds	r5, r3, r2
   22648:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2264a:	18e0      	adds	r0, r4, r3
}
   2264c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2264e:	f7fc bfd3 	b.w	1f5f8 <memcpy>

00022652 <net_buf_simple_add_u8>:
   22652:	8883      	ldrh	r3, [r0, #4]
   22654:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   22656:	b510      	push	{r4, lr}
	buf->len += len;
   22658:	1c5c      	adds	r4, r3, #1
   2265a:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2265c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2265e:	18d0      	adds	r0, r2, r3
   22660:	bd10      	pop	{r4, pc}

00022662 <net_buf_simple_add_le16>:
   22662:	8883      	ldrh	r3, [r0, #4]
   22664:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   22666:	b530      	push	{r4, r5, lr}
   22668:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2266a:	1c9d      	adds	r5, r3, #2
   2266c:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   2266e:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   22670:	0a09      	lsrs	r1, r1, #8
   22672:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   22674:	bd30      	pop	{r4, r5, pc}

00022676 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   22676:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   22678:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   2267a:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   2267c:	4411      	add	r1, r2
	buf->data -= len;
   2267e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   22680:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   22682:	4618      	mov	r0, r3
   22684:	4770      	bx	lr

00022686 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22686:	8883      	ldrh	r3, [r0, #4]
   22688:	1a5b      	subs	r3, r3, r1
   2268a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   2268c:	6803      	ldr	r3, [r0, #0]
   2268e:	4419      	add	r1, r3
   22690:	6001      	str	r1, [r0, #0]
}
   22692:	4608      	mov	r0, r1
   22694:	4770      	bx	lr

00022696 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   22696:	4603      	mov	r3, r0
	void *data = buf->data;
   22698:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2269a:	889a      	ldrh	r2, [r3, #4]
   2269c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2269e:	4401      	add	r1, r0
	buf->len -= len;
   226a0:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   226a2:	6019      	str	r1, [r3, #0]

	return data;
}
   226a4:	4770      	bx	lr

000226a6 <net_buf_simple_pull_le16>:

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   226a6:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   226a8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   226aa:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   226ac:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   226ae:	f7ff ffea 	bl	22686 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   226b2:	4610      	mov	r0, r2
   226b4:	bd08      	pop	{r3, pc}

000226b6 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   226b6:	6802      	ldr	r2, [r0, #0]
   226b8:	6880      	ldr	r0, [r0, #8]
}
   226ba:	1a10      	subs	r0, r2, r0
   226bc:	4770      	bx	lr

000226be <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   226be:	8883      	ldrh	r3, [r0, #4]
   226c0:	88c2      	ldrh	r2, [r0, #6]
   226c2:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   226c4:	6803      	ldr	r3, [r0, #0]
   226c6:	6880      	ldr	r0, [r0, #8]
   226c8:	1a18      	subs	r0, r3, r0
}
   226ca:	1a10      	subs	r0, r2, r0
   226cc:	4770      	bx	lr

000226ce <gpio_nrfx_write>:
{
   226ce:	b510      	push	{r4, lr}
	return port->config->config_info;
   226d0:	6804      	ldr	r4, [r0, #0]
   226d2:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   226d4:	68a4      	ldr	r4, [r4, #8]
   226d6:	69c0      	ldr	r0, [r0, #28]
   226d8:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   226da:	2901      	cmp	r1, #1
   226dc:	d104      	bne.n	226e8 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   226de:	4058      	eors	r0, r3
    p_reg->OUT = value;
   226e0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   226e4:	2000      	movs	r0, #0
   226e6:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   226e8:	3300      	adds	r3, #0
   226ea:	fa20 f002 	lsr.w	r0, r0, r2
   226ee:	f04f 0101 	mov.w	r1, #1
   226f2:	bf18      	it	ne
   226f4:	2301      	movne	r3, #1
   226f6:	f000 0001 	and.w	r0, r0, #1
   226fa:	4091      	lsls	r1, r2
   226fc:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   226fe:	bf14      	ite	ne
   22700:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   22704:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   22708:	e7ec      	b.n	226e4 <gpio_nrfx_write+0x16>

0002270a <gpio_nrfx_read>:
{
   2270a:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   2270c:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   2270e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22710:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   22712:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22714:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
   22716:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
   2271a:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
   2271e:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   22722:	4060      	eors	r0, r4
   22724:	406c      	eors	r4, r5
   22726:	4034      	ands	r4, r6
   22728:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2272a:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
   2272c:	bf1c      	itt	ne
   2272e:	40d0      	lsrne	r0, r2
   22730:	f000 0001 	andne.w	r0, r0, #1
   22734:	6018      	str	r0, [r3, #0]
}
   22736:	2000      	movs	r0, #0
   22738:	bd70      	pop	{r4, r5, r6, pc}

0002273a <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2273a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
   2273c:	6818      	ldr	r0, [r3, #0]
{
   2273e:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   22740:	b158      	cbz	r0, 2275a <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22742:	2400      	movs	r4, #0
   22744:	4281      	cmp	r1, r0
   22746:	d113      	bne.n	22770 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   22748:	6808      	ldr	r0, [r1, #0]
   2274a:	b95c      	cbnz	r4, 22764 <gpio_nrfx_manage_callback+0x2a>
   2274c:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   2274e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22750:	42a1      	cmp	r1, r4
   22752:	d100      	bne.n	22756 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   22754:	6058      	str	r0, [r3, #4]
	parent->next = child;
   22756:	2000      	movs	r0, #0
   22758:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   2275a:	b972      	cbnz	r2, 2277a <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2275c:	2000      	movs	r0, #0
}
   2275e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22760:	4628      	mov	r0, r5
   22762:	e7ef      	b.n	22744 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   22764:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   22766:	6858      	ldr	r0, [r3, #4]
   22768:	4281      	cmp	r1, r0
	list->tail = node;
   2276a:	bf08      	it	eq
   2276c:	605c      	streq	r4, [r3, #4]
   2276e:	e7f2      	b.n	22756 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22770:	6805      	ldr	r5, [r0, #0]
	return node->next;
   22772:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22774:	2d00      	cmp	r5, #0
   22776:	d1f3      	bne.n	22760 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   22778:	b13a      	cbz	r2, 2278a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2277a:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   2277c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2277e:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   22780:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   22782:	2800      	cmp	r0, #0
   22784:	d1ea      	bne.n	2275c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   22786:	6059      	str	r1, [r3, #4]
   22788:	e7e9      	b.n	2275e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2278a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2278e:	e7e6      	b.n	2275e <gpio_nrfx_manage_callback+0x24>

00022790 <gpio_nrfx_config>:
{
   22790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22794:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   22796:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   22798:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   2279c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   227a0:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   227a2:	d041      	beq.n	22828 <gpio_nrfx_config+0x98>
   227a4:	dc09      	bgt.n	227ba <gpio_nrfx_config+0x2a>
   227a6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   227aa:	d03f      	beq.n	2282c <gpio_nrfx_config+0x9c>
   227ac:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   227b0:	d03e      	beq.n	22830 <gpio_nrfx_config+0xa0>
   227b2:	b190      	cbz	r0, 227da <gpio_nrfx_config+0x4a>
		return -EINVAL;
   227b4:	f06f 0015 	mvn.w	r0, #21
   227b8:	e033      	b.n	22822 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   227ba:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   227be:	d039      	beq.n	22834 <gpio_nrfx_config+0xa4>
   227c0:	dc04      	bgt.n	227cc <gpio_nrfx_config+0x3c>
   227c2:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   227c6:	d1f5      	bne.n	227b4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   227c8:	2003      	movs	r0, #3
   227ca:	e006      	b.n	227da <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   227cc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   227d0:	d032      	beq.n	22838 <gpio_nrfx_config+0xa8>
   227d2:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   227d6:	d1ed      	bne.n	227b4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   227d8:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   227da:	f406 7740 	and.w	r7, r6, #768	; 0x300
   227de:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   227e2:	d02b      	beq.n	2283c <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
   227e4:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   227e8:	4263      	negs	r3, r4
   227ea:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   227ec:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   227f0:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
   227f4:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   227f6:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
   227fa:	bf18      	it	ne
   227fc:	b2d4      	uxtbne	r4, r2
   227fe:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   22802:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
   22806:	bf12      	itee	ne
   22808:	46a1      	movne	r9, r4
		to_pin   = 31U;
   2280a:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   2280e:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22810:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
   22814:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   22818:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2281c:	45a1      	cmp	r9, r4
   2281e:	d20f      	bcs.n	22840 <gpio_nrfx_config+0xb0>
	return 0;
   22820:	2000      	movs	r0, #0
}
   22822:	b003      	add	sp, #12
   22824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   22828:	2002      	movs	r0, #2
   2282a:	e7d6      	b.n	227da <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   2282c:	2001      	movs	r0, #1
   2282e:	e7d4      	b.n	227da <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   22830:	2004      	movs	r0, #4
   22832:	e7d2      	b.n	227da <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   22834:	2005      	movs	r0, #5
   22836:	e7d0      	b.n	227da <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   22838:	2006      	movs	r0, #6
   2283a:	e7ce      	b.n	227da <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   2283c:	2303      	movs	r3, #3
   2283e:	e7d5      	b.n	227ec <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   22840:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   22844:	6892      	ldr	r2, [r2, #8]
   22846:	7911      	ldrb	r1, [r2, #4]
   22848:	f004 021f 	and.w	r2, r4, #31
   2284c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   22850:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   22854:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   22858:	fa0b f204 	lsl.w	r2, fp, r4
   2285c:	68a9      	ldr	r1, [r5, #8]
   2285e:	2b00      	cmp	r3, #0
   22860:	d025      	beq.n	228ae <gpio_nrfx_config+0x11e>
   22862:	4311      	orrs	r1, r2
   22864:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   22866:	6969      	ldr	r1, [r5, #20]
   22868:	9301      	str	r3, [sp, #4]
   2286a:	06b0      	lsls	r0, r6, #26
   2286c:	bf4c      	ite	mi
   2286e:	4311      	orrmi	r1, r2
   22870:	4391      	bicpl	r1, r2
   22872:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   22874:	69a9      	ldr	r1, [r5, #24]
   22876:	0670      	lsls	r0, r6, #25
   22878:	bf4c      	ite	mi
   2287a:	4311      	orrmi	r1, r2
   2287c:	4391      	bicpl	r1, r2
   2287e:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   22880:	6929      	ldr	r1, [r5, #16]
   22882:	0770      	lsls	r0, r6, #29
   22884:	bf4c      	ite	mi
   22886:	4311      	orrmi	r1, r2
   22888:	4391      	bicpl	r1, r2
   2288a:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   2288c:	69e9      	ldr	r1, [r5, #28]
   2288e:	0630      	lsls	r0, r6, #24
   22890:	bf4c      	ite	mi
   22892:	430a      	orrmi	r2, r1
   22894:	ea21 0202 	bicpl.w	r2, r1, r2
   22898:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2289a:	4621      	mov	r1, r4
   2289c:	4640      	mov	r0, r8
   2289e:	f7f4 fedf 	bl	17660 <gpiote_pin_int_cfg>
		if (res != 0) {
   228a2:	2800      	cmp	r0, #0
   228a4:	d1bd      	bne.n	22822 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   228a6:	3401      	adds	r4, #1
   228a8:	b2e4      	uxtb	r4, r4
   228aa:	9b01      	ldr	r3, [sp, #4]
   228ac:	e7b6      	b.n	2281c <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   228ae:	ea21 0102 	bic.w	r1, r1, r2
   228b2:	e7d7      	b.n	22864 <gpio_nrfx_config+0xd4>

000228b4 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   228b4:	2901      	cmp	r1, #1
{
   228b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   228ba:	bf18      	it	ne
   228bc:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   228be:	6887      	ldr	r7, [r0, #8]
{
   228c0:	4606      	mov	r6, r0
		to_pin   = pin;
   228c2:	bf12      	itee	ne
   228c4:	4625      	movne	r5, r4
		to_pin   = 31U;
   228c6:	251f      	moveq	r5, #31
		from_pin = 0U;
   228c8:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   228ca:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   228ce:	42ac      	cmp	r4, r5
   228d0:	d902      	bls.n	228d8 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   228d2:	2000      	movs	r0, #0
}
   228d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   228d8:	68fb      	ldr	r3, [r7, #12]
   228da:	fa08 f204 	lsl.w	r2, r8, r4
   228de:	ea23 0302 	bic.w	r3, r3, r2
   228e2:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   228e4:	4621      	mov	r1, r4
   228e6:	4630      	mov	r0, r6
   228e8:	f7f4 feba 	bl	17660 <gpiote_pin_int_cfg>
		if (res != 0) {
   228ec:	2800      	cmp	r0, #0
   228ee:	d1f1      	bne.n	228d4 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   228f0:	3401      	adds	r4, #1
   228f2:	b2e4      	uxtb	r4, r4
   228f4:	e7eb      	b.n	228ce <gpio_nrfx_pin_disable_callback+0x1a>

000228f6 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   228f6:	2901      	cmp	r1, #1
{
   228f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   228fc:	bf18      	it	ne
   228fe:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   22900:	6887      	ldr	r7, [r0, #8]
{
   22902:	4606      	mov	r6, r0
		to_pin   = pin;
   22904:	bf12      	itee	ne
   22906:	4625      	movne	r5, r4
		to_pin   = 31U;
   22908:	251f      	moveq	r5, #31
		from_pin = 0U;
   2290a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2290c:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   22910:	42ac      	cmp	r4, r5
   22912:	d902      	bls.n	2291a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   22914:	2000      	movs	r0, #0
}
   22916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2291a:	68fb      	ldr	r3, [r7, #12]
   2291c:	fa08 f204 	lsl.w	r2, r8, r4
   22920:	4313      	orrs	r3, r2
   22922:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   22924:	4621      	mov	r1, r4
   22926:	4630      	mov	r0, r6
   22928:	f7f4 fe9a 	bl	17660 <gpiote_pin_int_cfg>
		if (res != 0) {
   2292c:	2800      	cmp	r0, #0
   2292e:	d1f2      	bne.n	22916 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   22930:	3401      	adds	r4, #1
   22932:	b2e4      	uxtb	r4, r4
   22934:	e7ec      	b.n	22910 <gpio_nrfx_pin_enable_callback+0x1a>

00022936 <gpio_pin_write>:
{
   22936:	b410      	push	{r4}
   22938:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
   2293a:	6842      	ldr	r2, [r0, #4]
   2293c:	6854      	ldr	r4, [r2, #4]
   2293e:	460a      	mov	r2, r1
   22940:	46a4      	mov	ip, r4
   22942:	2100      	movs	r1, #0
}
   22944:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   22946:	4760      	bx	ip

00022948 <_spi_context_cs_control.isra.7>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   22948:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2294a:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2294c:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2294e:	b324      	cbz	r4, 2299a <_spi_context_cs_control.isra.7+0x52>
   22950:	68a3      	ldr	r3, [r4, #8]
   22952:	b313      	cbz	r3, 2299a <_spi_context_cs_control.isra.7+0x52>
   22954:	6818      	ldr	r0, [r3, #0]
   22956:	b300      	cbz	r0, 2299a <_spi_context_cs_control.isra.7+0x52>
		if (on) {
   22958:	b161      	cbz	r1, 22974 <_spi_context_cs_control.isra.7+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   2295a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   2295e:	6859      	ldr	r1, [r3, #4]
   22960:	0fd2      	lsrs	r2, r2, #31
   22962:	f7ff ffe8 	bl	22936 <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
   22966:	682b      	ldr	r3, [r5, #0]
   22968:	689b      	ldr	r3, [r3, #8]
   2296a:	6898      	ldr	r0, [r3, #8]
}
   2296c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   22970:	f002 bd06 	b.w	25380 <z_impl_k_busy_wait>
			if (!force_off &&
   22974:	b912      	cbnz	r2, 2297c <_spi_context_cs_control.isra.7+0x34>
   22976:	88a2      	ldrh	r2, [r4, #4]
   22978:	0492      	lsls	r2, r2, #18
   2297a:	d40e      	bmi.n	2299a <_spi_context_cs_control.isra.7+0x52>
			k_busy_wait(ctx->config->cs->delay);
   2297c:	6898      	ldr	r0, [r3, #8]
   2297e:	f002 fcff 	bl	25380 <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
   22982:	682a      	ldr	r2, [r5, #0]
   22984:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   22986:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   2298a:	43d2      	mvns	r2, r2
   2298c:	e9d3 0100 	ldrd	r0, r1, [r3]
   22990:	0fd2      	lsrs	r2, r2, #31
}
   22992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
   22996:	f7ff bfce 	b.w	22936 <gpio_pin_write>
}
   2299a:	bd38      	pop	{r3, r4, r5, pc}

0002299c <spi_context_unlock_unconditionally>:
{
   2299c:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2299e:	2201      	movs	r2, #1
   229a0:	2100      	movs	r1, #0
{
   229a2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   229a4:	f7ff ffd0 	bl	22948 <_spi_context_cs_control.isra.7>
	if (!k_sem_count_get(&ctx->lock)) {
   229a8:	68e3      	ldr	r3, [r4, #12]
   229aa:	b923      	cbnz	r3, 229b6 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   229ac:	1d20      	adds	r0, r4, #4
}
   229ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   229b2:	f7f9 bf81 	b.w	1c8b8 <z_impl_k_sem_give>
   229b6:	bd10      	pop	{r4, pc}

000229b8 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   229b8:	6880      	ldr	r0, [r0, #8]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   229ba:	6803      	ldr	r3, [r0, #0]
   229bc:	428b      	cmp	r3, r1
{
   229be:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   229c0:	d106      	bne.n	229d0 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   229c2:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   229c6:	b934      	cbnz	r4, 229d6 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   229c8:	f7ff ffe8 	bl	2299c <spi_context_unlock_unconditionally>
	return 0;
   229cc:	4620      	mov	r0, r4
}
   229ce:	bd10      	pop	{r4, pc}
		return -EINVAL;
   229d0:	f06f 0015 	mvn.w	r0, #21
   229d4:	e7fb      	b.n	229ce <spi_nrfx_release+0x16>
		return -EBUSY;
   229d6:	f06f 000f 	mvn.w	r0, #15
   229da:	e7f8      	b.n	229ce <spi_nrfx_release+0x16>

000229dc <flash_nrf_write_protection>:
}
   229dc:	2000      	movs	r0, #0
   229de:	4770      	bx	lr

000229e0 <is_regular_addr_valid>:
{
   229e0:	b538      	push	{r3, r4, r5, lr}
   229e2:	4604      	mov	r4, r0
   229e4:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   229e6:	f000 f8a9 	bl	22b3c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   229ea:	4284      	cmp	r4, r0
   229ec:	d209      	bcs.n	22a02 <is_regular_addr_valid+0x22>
   229ee:	2c00      	cmp	r4, #0
   229f0:	db07      	blt.n	22a02 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   229f2:	42a8      	cmp	r0, r5
   229f4:	d305      	bcc.n	22a02 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   229f6:	442c      	add	r4, r5
	    len > flash_size ||
   229f8:	4284      	cmp	r4, r0
   229fa:	bf8c      	ite	hi
   229fc:	2000      	movhi	r0, #0
   229fe:	2001      	movls	r0, #1
}
   22a00:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   22a02:	2000      	movs	r0, #0
   22a04:	e7fc      	b.n	22a00 <is_regular_addr_valid+0x20>

00022a06 <flash_nrf_read>:
{
   22a06:	b570      	push	{r4, r5, r6, lr}
   22a08:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   22a0a:	4628      	mov	r0, r5
   22a0c:	4619      	mov	r1, r3
{
   22a0e:	4616      	mov	r6, r2
   22a10:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   22a12:	f7ff ffe5 	bl	229e0 <is_regular_addr_valid>
   22a16:	b138      	cbz	r0, 22a28 <flash_nrf_read+0x22>
	if (!len) {
   22a18:	b14c      	cbz	r4, 22a2e <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   22a1a:	4622      	mov	r2, r4
   22a1c:	4629      	mov	r1, r5
   22a1e:	4630      	mov	r0, r6
   22a20:	f7fc fdea 	bl	1f5f8 <memcpy>
	return 0;
   22a24:	2000      	movs	r0, #0
}
   22a26:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22a28:	f06f 0015 	mvn.w	r0, #21
   22a2c:	e7fb      	b.n	22a26 <flash_nrf_read+0x20>
		return 0;
   22a2e:	4620      	mov	r0, r4
   22a30:	e7f9      	b.n	22a26 <flash_nrf_read+0x20>

00022a32 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   22a32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22a36:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   22a38:	6843      	ldr	r3, [r0, #4]
{
   22a3a:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   22a3c:	691b      	ldr	r3, [r3, #16]
   22a3e:	4669      	mov	r1, sp
{
   22a40:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   22a42:	aa01      	add	r2, sp, #4
   22a44:	4798      	blx	r3

	while (layout_size--) {
   22a46:	e9dd 1200 	ldrd	r1, r2, [sp]
   22a4a:	2300      	movs	r3, #0
   22a4c:	3a01      	subs	r2, #1
	off_t end = 0;
   22a4e:	4618      	mov	r0, r3
	off_t group_offs = 0;
   22a50:	469e      	mov	lr, r3
	size_t page_count = 0;
   22a52:	469c      	mov	ip, r3
	while (layout_size--) {
   22a54:	1c57      	adds	r7, r2, #1
   22a56:	d102      	bne.n	22a5e <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   22a58:	f06f 0015 	mvn.w	r0, #21
   22a5c:	e01a      	b.n	22a94 <flash_get_page_info+0x62>
		if (use_addr) {
   22a5e:	f8d1 8000 	ldr.w	r8, [r1]
   22a62:	b1d6      	cbz	r6, 22a9a <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   22a64:	684f      	ldr	r7, [r1, #4]
   22a66:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   22a6a:	42a0      	cmp	r0, r4
   22a6c:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   22a70:	dd18      	ble.n	22aa4 <flash_get_page_info+0x72>
   22a72:	9201      	str	r2, [sp, #4]
   22a74:	b103      	cbz	r3, 22a78 <flash_get_page_info+0x46>
   22a76:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   22a78:	9b00      	ldr	r3, [sp, #0]
   22a7a:	685b      	ldr	r3, [r3, #4]
   22a7c:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   22a7e:	b176      	cbz	r6, 22a9e <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   22a80:	eba4 040e 	sub.w	r4, r4, lr
   22a84:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   22a88:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   22a8c:	4464      	add	r4, ip
			info->start_offset = group_offs +
   22a8e:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   22a90:	60ac      	str	r4, [r5, #8]
			return 0;
   22a92:	2000      	movs	r0, #0
}
   22a94:	b002      	add	sp, #8
   22a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   22a9a:	4440      	add	r0, r8
   22a9c:	e7e5      	b.n	22a6a <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   22a9e:	eba4 040c 	sub.w	r4, r4, ip
   22aa2:	e7f1      	b.n	22a88 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   22aa4:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   22aa6:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   22aa8:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   22aac:	3108      	adds	r1, #8
   22aae:	2301      	movs	r3, #1
   22ab0:	463a      	mov	r2, r7
   22ab2:	e7cf      	b.n	22a54 <flash_get_page_info+0x22>

00022ab4 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   22ab4:	4613      	mov	r3, r2
   22ab6:	2201      	movs	r2, #1
   22ab8:	f7ff bfbb 	b.w	22a32 <flash_get_page_info>

00022abc <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   22abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   22ac0:	6843      	ldr	r3, [r0, #4]
{
   22ac2:	b086      	sub	sp, #24
   22ac4:	4689      	mov	r9, r1
   22ac6:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   22ac8:	691b      	ldr	r3, [r3, #16]
   22aca:	aa02      	add	r2, sp, #8
   22acc:	a901      	add	r1, sp, #4
   22ace:	4798      	blx	r3
	off_t off = 0;
   22ad0:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   22ad2:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   22ad4:	4625      	mov	r5, r4
   22ad6:	9b02      	ldr	r3, [sp, #8]
   22ad8:	42ab      	cmp	r3, r5
   22ada:	d802      	bhi.n	22ae2 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   22adc:	b006      	add	sp, #24
   22ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   22ae2:	9f01      	ldr	r7, [sp, #4]
   22ae4:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   22ae8:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   22aea:	687b      	ldr	r3, [r7, #4]
   22aec:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   22aee:	683a      	ldr	r2, [r7, #0]
   22af0:	42b2      	cmp	r2, r6
   22af2:	eb08 0306 	add.w	r3, r8, r6
   22af6:	d802      	bhi.n	22afe <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   22af8:	3501      	adds	r5, #1
   22afa:	4698      	mov	r8, r3
   22afc:	e7eb      	b.n	22ad6 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   22afe:	4651      	mov	r1, sl
   22b00:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   22b02:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   22b04:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   22b06:	47c8      	blx	r9
   22b08:	2800      	cmp	r0, #0
   22b0a:	d0e7      	beq.n	22adc <flash_page_foreach+0x20>
			off += page_info.size;
   22b0c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   22b0e:	3601      	adds	r6, #1
			off += page_info.size;
   22b10:	441c      	add	r4, r3
			page++;
   22b12:	e7ec      	b.n	22aee <flash_page_foreach+0x32>

00022b14 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   22b14:	4700      	bx	r0

00022b16 <partial_word_create>:
{
   22b16:	b082      	sub	sp, #8
    value32 = 0xFFFFFFFF;
   22b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22b1c:	9301      	str	r3, [sp, #4]
    byte_shift = addr % NVMC_BYTES_IN_WORD;
   22b1e:	f000 0003 	and.w	r0, r0, #3
   22b22:	ab01      	add	r3, sp, #4
   22b24:	4418      	add	r0, r3
   22b26:	440a      	add	r2, r1
    for (uint32_t i = 0; i < bytes_count; i++)
   22b28:	4291      	cmp	r1, r2
   22b2a:	d102      	bne.n	22b32 <partial_word_create+0x1c>
}
   22b2c:	9801      	ldr	r0, [sp, #4]
   22b2e:	b002      	add	sp, #8
   22b30:	4770      	bx	lr
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   22b32:	f811 3b01 	ldrb.w	r3, [r1], #1
   22b36:	f800 3b01 	strb.w	r3, [r0], #1
        byte_shift++;
   22b3a:	e7f5      	b.n	22b28 <partial_word_create+0x12>

00022b3c <nrfx_nvmc_flash_size_get>:
   22b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22b40:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   22b42:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   22b44:	4350      	muls	r0, r2
   22b46:	4770      	bx	lr

00022b48 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   22b48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22b4c:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   22b4e:	4770      	bx	lr

00022b50 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   22b50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22b54:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   22b56:	4770      	bx	lr

00022b58 <transfer_byte>:
{
   22b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   22b5a:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   22b5e:	698a      	ldr	r2, [r1, #24]
   22b60:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   22b62:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   22b66:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   22b68:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   22b6a:	bf3e      	ittt	cc
   22b6c:	694a      	ldrcc	r2, [r1, #20]
   22b6e:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   22b72:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   22b74:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    if (p_cb->abort)
   22b76:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    ++p_cb->bytes_transferred;
   22b7a:	1c53      	adds	r3, r2, #1
   22b7c:	624b      	str	r3, [r1, #36]	; 0x24
    size_t bytes_used = p_cb->bytes_transferred + 1;
   22b7e:	3202      	adds	r2, #2
    if (p_cb->abort)
   22b80:	b13c      	cbz	r4, 22b92 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   22b82:	690c      	ldr	r4, [r1, #16]
   22b84:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   22b86:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   22b88:	bf38      	it	cc
   22b8a:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   22b8c:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   22b8e:	bf88      	it	hi
   22b90:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   22b92:	690d      	ldr	r5, [r1, #16]
   22b94:	4295      	cmp	r5, r2
   22b96:	d905      	bls.n	22ba4 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   22b98:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   22b9a:	5c9b      	ldrb	r3, [r3, r2]
   22b9c:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   22ba0:	2001      	movs	r0, #1
   22ba2:	e00b      	b.n	22bbc <transfer_byte+0x64>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   22ba4:	698c      	ldr	r4, [r1, #24]
   22ba6:	4294      	cmp	r4, r2
   22ba8:	d902      	bls.n	22bb0 <transfer_byte+0x58>
   22baa:	f891 3020 	ldrb.w	r3, [r1, #32]
   22bae:	e7f5      	b.n	22b9c <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   22bb0:	42ab      	cmp	r3, r5
   22bb2:	d3f5      	bcc.n	22ba0 <transfer_byte+0x48>
   22bb4:	42a3      	cmp	r3, r4
   22bb6:	bf2c      	ite	cs
   22bb8:	2000      	movcs	r0, #0
   22bba:	2001      	movcc	r0, #1
}
   22bbc:	b003      	add	sp, #12
   22bbe:	bd30      	pop	{r4, r5, pc}

00022bc0 <nrf_twi_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22bc0:	2300      	movs	r3, #0
   22bc2:	5043      	str	r3, [r0, r1]
{
   22bc4:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   22bc6:	5843      	ldr	r3, [r0, r1]
   22bc8:	9301      	str	r3, [sp, #4]
    (void)dummy;
   22bca:	9b01      	ldr	r3, [sp, #4]
}
   22bcc:	b002      	add	sp, #8
   22bce:	4770      	bx	lr

00022bd0 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   22bd0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   22bd2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   22bd4:	4293      	cmp	r3, r2
   22bd6:	d208      	bcs.n	22bea <twi_send_byte+0x1a>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   22bd8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
   22bda:	5cd2      	ldrb	r2, [r2, r3]
   22bdc:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
        ++(p_cb->bytes_transferred);
   22be0:	3301      	adds	r3, #1
   22be2:	634b      	str	r3, [r1, #52]	; 0x34
    return true;
   22be4:	2301      	movs	r3, #1
}
   22be6:	4618      	mov	r0, r3
   22be8:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   22bea:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   22bee:	b11b      	cbz	r3, 22bf8 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22bf0:	2301      	movs	r3, #1
   22bf2:	61c3      	str	r3, [r0, #28]
            return false;
   22bf4:	2300      	movs	r3, #0
   22bf6:	e7f6      	b.n	22be6 <twi_send_byte+0x16>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   22bf8:	6a0a      	ldr	r2, [r1, #32]
   22bfa:	f012 0f40 	tst.w	r2, #64	; 0x40
   22bfe:	f04f 0201 	mov.w	r2, #1
   22c02:	bf15      	itete	ne
   22c04:	61c2      	strne	r2, [r0, #28]
   22c06:	6142      	streq	r2, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   22c08:	f881 202d 	strbne.w	r2, [r1, #45]	; 0x2d
    return true;
   22c0c:	4613      	moveq	r3, r2
   22c0e:	e7ea      	b.n	22be6 <twi_send_byte+0x16>

00022c10 <twi_transfer>:
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
   22c10:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
{
   22c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c16:	4604      	mov	r4, r0
   22c18:	460d      	mov	r5, r1
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
   22c1a:	2a00      	cmp	r2, #0
   22c1c:	d160      	bne.n	22ce0 <twi_transfer+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c1e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   22c22:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   22c24:	6a8f      	ldr	r7, [r1, #40]	; 0x28
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   22c26:	b1b3      	cbz	r3, 22c56 <twi_transfer+0x46>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   22c28:	f44f 7192 	mov.w	r1, #292	; 0x124
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   22c2c:	f7ff ffc8 	bl	22bc0 <nrf_twi_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22c30:	2301      	movs	r3, #1
   22c32:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   22c34:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   22c38:	42be      	cmp	r6, r7
   22c3a:	d14f      	bne.n	22cdc <twi_transfer+0xcc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c3c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22c40:	2b00      	cmp	r3, #0
   22c42:	d04b      	beq.n	22cdc <twi_transfer+0xcc>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   22c44:	f44f 7182 	mov.w	r1, #260	; 0x104
   22c48:	4620      	mov	r0, r4
   22c4a:	f7ff ffb9 	bl	22bc0 <nrf_twi_event_clear>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   22c4e:	2200      	movs	r2, #0
   22c50:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
        return false;
   22c54:	e013      	b.n	22c7e <twi_transfer+0x6e>
   22c56:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   22c5a:	b193      	cbz	r3, 22c82 <twi_transfer+0x72>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
   22c5c:	f44f 718e 	mov.w	r1, #284	; 0x11c
   22c60:	f7ff ffae 	bl	22bc0 <nrf_twi_event_clear>
   22c64:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   22c68:	b11b      	cbz	r3, 22c72 <twi_transfer+0x62>
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   22c6a:	f44f 7192 	mov.w	r1, #292	; 0x124
   22c6e:	4620      	mov	r0, r4
   22c70:	e7dc      	b.n	22c2c <twi_transfer+0x1c>
                if (!twi_send_byte(p_twi, p_cb))
   22c72:	4629      	mov	r1, r5
   22c74:	f7ff ffac 	bl	22bd0 <twi_send_byte>
   22c78:	4602      	mov	r2, r0
   22c7a:	2800      	cmp	r0, #0
   22c7c:	d1dc      	bne.n	22c38 <twi_transfer+0x28>
}
   22c7e:	4610      	mov	r0, r2
   22c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c82:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   22c86:	2b00      	cmp	r3, #0
   22c88:	d0d6      	beq.n	22c38 <twi_transfer+0x28>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
   22c8a:	f44f 7184 	mov.w	r1, #264	; 0x108
   22c8e:	f7ff ff97 	bl	22bc0 <nrf_twi_event_clear>
   22c92:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   22c96:	2b00      	cmp	r3, #0
   22c98:	d1e7      	bne.n	22c6a <twi_transfer+0x5a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   22c9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22c9c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   22c9e:	428b      	cmp	r3, r1
   22ca0:	d2ca      	bcs.n	22c38 <twi_transfer+0x28>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   22ca2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   22ca4:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   22ca8:	54c8      	strb	r0, [r1, r3]
        ++(p_cb->bytes_transferred);
   22caa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22cac:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   22cae:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22cb0:	1e48      	subs	r0, r1, #1
   22cb2:	4283      	cmp	r3, r0
        ++(p_cb->bytes_transferred);
   22cb4:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22cb6:	d108      	bne.n	22cca <twi_transfer+0xba>
   22cb8:	6a28      	ldr	r0, [r5, #32]
   22cba:	0640      	lsls	r0, r0, #25
   22cbc:	d41d      	bmi.n	22cfa <twi_transfer+0xea>
    p_reg->SHORTS = mask;
   22cbe:	2302      	movs	r3, #2
   22cc0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22cc4:	2301      	movs	r3, #1
   22cc6:	6223      	str	r3, [r4, #32]
   22cc8:	e7b6      	b.n	22c38 <twi_transfer+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22cca:	428b      	cmp	r3, r1
   22ccc:	d1fa      	bne.n	22cc4 <twi_transfer+0xb4>
   22cce:	6a2b      	ldr	r3, [r5, #32]
   22cd0:	065b      	lsls	r3, r3, #25
   22cd2:	d5b1      	bpl.n	22c38 <twi_transfer+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   22cd4:	2302      	movs	r3, #2
   22cd6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   22cda:	e7d0      	b.n	22c7e <twi_transfer+0x6e>
    return true;
   22cdc:	2201      	movs	r2, #1
   22cde:	e7ce      	b.n	22c7e <twi_transfer+0x6e>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   22ce0:	f44f 7192 	mov.w	r1, #292	; 0x124
   22ce4:	f7ff ff6c 	bl	22bc0 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
   22ce8:	f44f 718e 	mov.w	r1, #284	; 0x11c
   22cec:	f7ff ff68 	bl	22bc0 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
   22cf0:	f44f 7184 	mov.w	r1, #264	; 0x108
   22cf4:	f7ff ff64 	bl	22bc0 <nrf_twi_event_clear>
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   22cf8:	e7a0      	b.n	22c3c <twi_transfer+0x2c>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22cfa:	428b      	cmp	r3, r1
   22cfc:	d1e2      	bne.n	22cc4 <twi_transfer+0xb4>
   22cfe:	e7e9      	b.n	22cd4 <twi_transfer+0xc4>

00022d00 <lv_indev_reset.part.5>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
   22d00:	b508      	push	{r3, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
   22d02:	2000      	movs	r0, #0
        while(i) {
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
   22d04:	f7f7 fe42 	bl	1a98c <lv_indev_get_next>
        while(i) {
   22d08:	b900      	cbnz	r0, 22d0c <lv_indev_reset.part.5+0xc>
        }
    }
}
   22d0a:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
   22d0c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   22d10:	f043 0302 	orr.w	r3, r3, #2
   22d14:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
   22d18:	e7f4      	b.n	22d04 <lv_indev_reset.part.5+0x4>

00022d1a <lv_indev_init>:
    if(indev)
   22d1a:	f7ff bff1 	b.w	22d00 <lv_indev_reset.part.5>

00022d1e <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
   22d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
   22d20:	1d07      	adds	r7, r0, #4
   22d22:	4638      	mov	r0, r7
{
   22d24:	460d      	mov	r5, r1
   22d26:	4616      	mov	r6, r2
    LV_LL_READ(obj->child_ll, i)
   22d28:	f001 fd5d 	bl	247e6 <lv_ll_get_head>
   22d2c:	4604      	mov	r4, r0
   22d2e:	b900      	cbnz	r0, 22d32 <refresh_children_position+0x14>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
   22d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
   22d32:	8a23      	ldrh	r3, [r4, #16]
   22d34:	442b      	add	r3, r5
   22d36:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
   22d38:	8a63      	ldrh	r3, [r4, #18]
   22d3a:	4433      	add	r3, r6
   22d3c:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
   22d3e:	8aa3      	ldrh	r3, [r4, #20]
   22d40:	442b      	add	r3, r5
   22d42:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
   22d44:	8ae3      	ldrh	r3, [r4, #22]
   22d46:	4433      	add	r3, r6
        refresh_children_position(i, x_diff, y_diff);
   22d48:	4629      	mov	r1, r5
   22d4a:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
   22d4c:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
   22d4e:	4632      	mov	r2, r6
   22d50:	f7ff ffe5 	bl	22d1e <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
   22d54:	4621      	mov	r1, r4
   22d56:	4638      	mov	r0, r7
   22d58:	f001 fd4b 	bl	247f2 <lv_ll_get_next>
   22d5c:	e7e6      	b.n	22d2c <refresh_children_position+0xe>

00022d5e <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
   22d5e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   22d62:	f361 0300 	bfi	r3, r1, #0, #1
   22d66:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
}
   22d6a:	4770      	bx	lr

00022d6c <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
   22d6c:	61c1      	str	r1, [r0, #28]
}
   22d6e:	4770      	bx	lr

00022d70 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
   22d70:	6201      	str	r1, [r0, #32]
}
   22d72:	4770      	bx	lr

00022d74 <lv_obj_allocate_ext_attr>:
{
   22d74:	b510      	push	{r4, lr}
   22d76:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
   22d78:	6a40      	ldr	r0, [r0, #36]	; 0x24
   22d7a:	f7f7 ff95 	bl	1aca8 <lv_mem_realloc>
   22d7e:	6260      	str	r0, [r4, #36]	; 0x24
}
   22d80:	bd10      	pop	{r4, pc}

00022d82 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
   22d82:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
   22d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(lv_obj_get_hidden(obj)) return;
   22d88:	06da      	lsls	r2, r3, #27
{
   22d8a:	4606      	mov	r6, r0
    if(lv_obj_get_hidden(obj)) return;
   22d8c:	d439      	bmi.n	22e02 <lv_obj_invalidate+0x80>
   22d8e:	4604      	mov	r4, r0
    return obj->par;
   22d90:	6823      	ldr	r3, [r4, #0]
    } while(par != NULL);
   22d92:	bb53      	cbnz	r3, 22dea <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
   22d94:	4620      	mov	r0, r4
   22d96:	f7f6 f8f7 	bl	18f88 <lv_obj_get_disp>
   22d9a:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
   22d9c:	f7f6 f87c 	bl	18e98 <lv_disp_get_scr_act>
   22da0:	4284      	cmp	r4, r0
   22da2:	d124      	bne.n	22dee <lv_obj_invalidate+0x6c>
    memcpy(dest, src, sizeof(lv_area_t));
   22da4:	2208      	movs	r2, #8
   22da6:	f106 0110 	add.w	r1, r6, #16
   22daa:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
   22dac:	f9b6 4030 	ldrsh.w	r4, [r6, #48]	; 0x30
    return obj->par;
   22db0:	6835      	ldr	r5, [r6, #0]
   22db2:	f7fc fc21 	bl	1f5f8 <memcpy>
        area_trunc.x1 -= ext_size;
   22db6:	f8bd 3000 	ldrh.w	r3, [sp]
   22dba:	1b1b      	subs	r3, r3, r4
   22dbc:	f8ad 3000 	strh.w	r3, [sp]
        area_trunc.y1 -= ext_size;
   22dc0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   22dc4:	1b1b      	subs	r3, r3, r4
   22dc6:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_trunc.x2 += ext_size;
   22dca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   22dce:	4423      	add	r3, r4
   22dd0:	f8ad 3004 	strh.w	r3, [sp, #4]
        area_trunc.y2 += ext_size;
   22dd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22dd8:	441c      	add	r4, r3
   22dda:	f8ad 4006 	strh.w	r4, [sp, #6]
        while(par != NULL) {
   22dde:	b995      	cbnz	r5, 22e06 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
   22de0:	4669      	mov	r1, sp
   22de2:	4638      	mov	r0, r7
   22de4:	f000 fb44 	bl	23470 <lv_inv_area>
   22de8:	e00b      	b.n	22e02 <lv_obj_invalidate+0x80>
    } while(par != NULL);
   22dea:	461c      	mov	r4, r3
   22dec:	e7d0      	b.n	22d90 <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
   22dee:	4638      	mov	r0, r7
   22df0:	f7f6 f868 	bl	18ec4 <lv_disp_get_layer_top>
   22df4:	4284      	cmp	r4, r0
   22df6:	d0d5      	beq.n	22da4 <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
   22df8:	4638      	mov	r0, r7
   22dfa:	f7f6 f879 	bl	18ef0 <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
   22dfe:	4284      	cmp	r4, r0
   22e00:	d0d0      	beq.n	22da4 <lv_obj_invalidate+0x22>
}
   22e02:	b003      	add	sp, #12
   22e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
   22e06:	f105 0210 	add.w	r2, r5, #16
   22e0a:	4669      	mov	r1, sp
   22e0c:	4668      	mov	r0, sp
   22e0e:	f001 fbdb 	bl	245c8 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
   22e12:	2800      	cmp	r0, #0
   22e14:	d0f5      	beq.n	22e02 <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
   22e16:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
   22e1a:	06db      	lsls	r3, r3, #27
   22e1c:	d4f1      	bmi.n	22e02 <lv_obj_invalidate+0x80>
    return obj->par;
   22e1e:	682d      	ldr	r5, [r5, #0]
   22e20:	e7dd      	b.n	22dde <lv_obj_invalidate+0x5c>

00022e22 <lv_obj_set_pos>:
{
   22e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->par;
   22e24:	6807      	ldr	r7, [r0, #0]
    diff.x = x - obj->coords.x1;
   22e26:	8a03      	ldrh	r3, [r0, #16]
   22e28:	8a3d      	ldrh	r5, [r7, #16]
    diff.y = y - obj->coords.y1;
   22e2a:	8a7e      	ldrh	r6, [r7, #18]
    diff.x = x - obj->coords.x1;
   22e2c:	1aed      	subs	r5, r5, r3
    diff.y = y - obj->coords.y1;
   22e2e:	8a43      	ldrh	r3, [r0, #18]
   22e30:	1af6      	subs	r6, r6, r3
    diff.x = x - obj->coords.x1;
   22e32:	440d      	add	r5, r1
    diff.y = y - obj->coords.y1;
   22e34:	4416      	add	r6, r2
    diff.x = x - obj->coords.x1;
   22e36:	b22d      	sxth	r5, r5
    diff.y = y - obj->coords.y1;
   22e38:	b236      	sxth	r6, r6
    if(diff.x == 0 && diff.y == 0) return;
   22e3a:	ea55 0306 	orrs.w	r3, r5, r6
{
   22e3e:	4604      	mov	r4, r0
    if(diff.x == 0 && diff.y == 0) return;
   22e40:	d025      	beq.n	22e8e <lv_obj_set_pos+0x6c>
    lv_obj_invalidate(obj);
   22e42:	f7ff ff9e 	bl	22d82 <lv_obj_invalidate>
   22e46:	2208      	movs	r2, #8
   22e48:	f104 0110 	add.w	r1, r4, #16
   22e4c:	4668      	mov	r0, sp
   22e4e:	f7fc fbd3 	bl	1f5f8 <memcpy>
    obj->coords.x1 += diff.x;
   22e52:	8a23      	ldrh	r3, [r4, #16]
   22e54:	442b      	add	r3, r5
   22e56:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
   22e58:	8a63      	ldrh	r3, [r4, #18]
   22e5a:	4433      	add	r3, r6
   22e5c:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
   22e5e:	8aa3      	ldrh	r3, [r4, #20]
   22e60:	442b      	add	r3, r5
   22e62:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
   22e64:	8ae3      	ldrh	r3, [r4, #22]
   22e66:	4433      	add	r3, r6
   22e68:	82e3      	strh	r3, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
   22e6a:	4632      	mov	r2, r6
   22e6c:	4629      	mov	r1, r5
   22e6e:	4620      	mov	r0, r4
   22e70:	f7ff ff55 	bl	22d1e <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
   22e74:	69e3      	ldr	r3, [r4, #28]
   22e76:	466a      	mov	r2, sp
   22e78:	2102      	movs	r1, #2
   22e7a:	4620      	mov	r0, r4
   22e7c:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   22e7e:	69fb      	ldr	r3, [r7, #28]
   22e80:	4622      	mov	r2, r4
   22e82:	2101      	movs	r1, #1
   22e84:	4638      	mov	r0, r7
   22e86:	4798      	blx	r3
    lv_obj_invalidate(obj);
   22e88:	4620      	mov	r0, r4
   22e8a:	f7ff ff7a 	bl	22d82 <lv_obj_invalidate>
}
   22e8e:	b003      	add	sp, #12
   22e90:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022e92 <lv_obj_refresh_style>:
{
   22e92:	b510      	push	{r4, lr}
   22e94:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
   22e96:	f7ff ff74 	bl	22d82 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
   22e9a:	69e3      	ldr	r3, [r4, #28]
   22e9c:	4620      	mov	r0, r4
   22e9e:	2200      	movs	r2, #0
   22ea0:	2104      	movs	r1, #4
   22ea2:	4798      	blx	r3
    lv_obj_invalidate(obj);
   22ea4:	4620      	mov	r0, r4
}
   22ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
   22eaa:	f7ff bf6a 	b.w	22d82 <lv_obj_invalidate>

00022eae <lv_obj_refresh_ext_draw_pad>:
{
   22eae:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
   22eb0:	2200      	movs	r2, #0
{
   22eb2:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
   22eb4:	8602      	strh	r2, [r0, #48]	; 0x30
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   22eb6:	69c3      	ldr	r3, [r0, #28]
   22eb8:	2106      	movs	r1, #6
   22eba:	4798      	blx	r3
    lv_obj_invalidate(obj);
   22ebc:	4620      	mov	r0, r4
}
   22ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
   22ec2:	f7ff bf5e 	b.w	22d82 <lv_obj_invalidate>

00022ec6 <lv_obj_set_size>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   22ec6:	8a83      	ldrh	r3, [r0, #20]
{
   22ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22eca:	4616      	mov	r6, r2
   22ecc:	8a02      	ldrh	r2, [r0, #16]
   22ece:	3301      	adds	r3, #1
   22ed0:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   22ed2:	b21b      	sxth	r3, r3
   22ed4:	428b      	cmp	r3, r1
{
   22ed6:	4604      	mov	r4, r0
   22ed8:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   22eda:	d106      	bne.n	22eea <lv_obj_set_size+0x24>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   22edc:	8ac3      	ldrh	r3, [r0, #22]
   22ede:	8a42      	ldrh	r2, [r0, #18]
   22ee0:	3301      	adds	r3, #1
   22ee2:	1a9b      	subs	r3, r3, r2
   22ee4:	b21b      	sxth	r3, r3
   22ee6:	429e      	cmp	r6, r3
   22ee8:	d024      	beq.n	22f34 <lv_obj_set_size+0x6e>
    lv_obj_invalidate(obj);
   22eea:	4620      	mov	r0, r4
   22eec:	f7ff ff49 	bl	22d82 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
   22ef0:	2208      	movs	r2, #8
   22ef2:	f104 0110 	add.w	r1, r4, #16
   22ef6:	4668      	mov	r0, sp
   22ef8:	f7fc fb7e 	bl	1f5f8 <memcpy>
    obj->coords.y2 = obj->coords.y1 + h - 1;
   22efc:	8a63      	ldrh	r3, [r4, #18]
   22efe:	3e01      	subs	r6, #1
   22f00:	441e      	add	r6, r3
        obj->coords.x2 = obj->coords.x1 + w - 1;
   22f02:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.y2 = obj->coords.y1 + h - 1;
   22f04:	82e6      	strh	r6, [r4, #22]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   22f06:	3d01      	subs	r5, #1
   22f08:	441d      	add	r5, r3
   22f0a:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
   22f0c:	69e3      	ldr	r3, [r4, #28]
   22f0e:	466a      	mov	r2, sp
   22f10:	2102      	movs	r1, #2
   22f12:	4620      	mov	r0, r4
   22f14:	4798      	blx	r3
    return obj->par;
   22f16:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   22f18:	b118      	cbz	r0, 22f22 <lv_obj_set_size+0x5c>
   22f1a:	69c3      	ldr	r3, [r0, #28]
   22f1c:	4622      	mov	r2, r4
   22f1e:	2101      	movs	r1, #1
   22f20:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
   22f22:	1d26      	adds	r6, r4, #4
   22f24:	4630      	mov	r0, r6
   22f26:	f001 fc5e 	bl	247e6 <lv_ll_get_head>
   22f2a:	4605      	mov	r5, r0
   22f2c:	b920      	cbnz	r0, 22f38 <lv_obj_set_size+0x72>
    lv_obj_invalidate(obj);
   22f2e:	4620      	mov	r0, r4
   22f30:	f7ff ff27 	bl	22d82 <lv_obj_invalidate>
}
   22f34:	b002      	add	sp, #8
   22f36:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
   22f38:	69eb      	ldr	r3, [r5, #28]
   22f3a:	2200      	movs	r2, #0
   22f3c:	2103      	movs	r1, #3
   22f3e:	4628      	mov	r0, r5
   22f40:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
   22f42:	4629      	mov	r1, r5
   22f44:	4630      	mov	r0, r6
   22f46:	f001 fc54 	bl	247f2 <lv_ll_get_next>
   22f4a:	e7ee      	b.n	22f2a <lv_obj_set_size+0x64>

00022f4c <lv_obj_set_width>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   22f4c:	8ac2      	ldrh	r2, [r0, #22]
   22f4e:	8a43      	ldrh	r3, [r0, #18]
   22f50:	3201      	adds	r2, #1
   22f52:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
   22f54:	b212      	sxth	r2, r2
   22f56:	f7ff bfb6 	b.w	22ec6 <lv_obj_set_size>

00022f5a <lv_obj_set_height>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   22f5a:	8a83      	ldrh	r3, [r0, #20]
   22f5c:	8a02      	ldrh	r2, [r0, #16]
   22f5e:	3301      	adds	r3, #1
   22f60:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
   22f62:	460a      	mov	r2, r1
   22f64:	b219      	sxth	r1, r3
   22f66:	f7ff bfae 	b.w	22ec6 <lv_obj_set_size>

00022f6a <lv_obj_get_parent>:
}
   22f6a:	6800      	ldr	r0, [r0, #0]
   22f6c:	4770      	bx	lr

00022f6e <lv_obj_get_child>:
    if(child == NULL) {
   22f6e:	3004      	adds	r0, #4
   22f70:	b909      	cbnz	r1, 22f76 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
   22f72:	f001 bc38 	b.w	247e6 <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
   22f76:	f001 bc3c 	b.w	247f2 <lv_ll_get_next>

00022f7a <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
   22f7a:	b538      	push	{r3, r4, r5, lr}
   22f7c:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
   22f7e:	3004      	adds	r0, #4
   22f80:	f001 fc31 	bl	247e6 <lv_ll_get_head>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
   22f84:	4604      	mov	r4, r0
    while(child != NULL) {
   22f86:	b900      	cbnz	r0, 22f8a <refresh_children_style+0x10>
    }
}
   22f88:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
   22f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f8c:	b953      	cbnz	r3, 22fa4 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
   22f8e:	4620      	mov	r0, r4
   22f90:	f7ff fff3 	bl	22f7a <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
   22f94:	4620      	mov	r0, r4
   22f96:	f7ff ff7c 	bl	22e92 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
   22f9a:	4621      	mov	r1, r4
   22f9c:	4628      	mov	r0, r5
   22f9e:	f7ff ffe6 	bl	22f6e <lv_obj_get_child>
   22fa2:	e7ef      	b.n	22f84 <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
   22fa4:	781b      	ldrb	r3, [r3, #0]
   22fa6:	07db      	lsls	r3, r3, #31
   22fa8:	d5f7      	bpl.n	22f9a <refresh_children_style+0x20>
            refresh_children_style(child);
   22faa:	4620      	mov	r0, r4
   22fac:	f7ff ffe5 	bl	22f7a <refresh_children_style>
   22fb0:	e7f3      	b.n	22f9a <refresh_children_style+0x20>

00022fb2 <lv_obj_set_style>:
{
   22fb2:	b510      	push	{r4, lr}
   22fb4:	4604      	mov	r4, r0
    obj->style_p = style;
   22fb6:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
   22fb8:	f7ff ffdf 	bl	22f7a <refresh_children_style>
    lv_obj_refresh_style(obj);
   22fbc:	4620      	mov	r0, r4
}
   22fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
   22fc2:	f7ff bf66 	b.w	22e92 <lv_obj_refresh_style>

00022fc6 <lv_obj_get_coords>:
{
   22fc6:	460b      	mov	r3, r1
    memcpy(dest, src, sizeof(lv_area_t));
   22fc8:	2208      	movs	r2, #8
   22fca:	f100 0110 	add.w	r1, r0, #16
   22fce:	4618      	mov	r0, r3
   22fd0:	f7fc bb12 	b.w	1f5f8 <memcpy>

00022fd4 <lv_obj_get_x>:
    return obj->par;
   22fd4:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   22fd6:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
   22fda:	b113      	cbz	r3, 22fe2 <lv_obj_get_x+0xe>
        rel_x             = obj->coords.x1 - parent->coords.x1;
   22fdc:	8a1b      	ldrh	r3, [r3, #16]
   22fde:	1ac0      	subs	r0, r0, r3
   22fe0:	b200      	sxth	r0, r0
}
   22fe2:	4770      	bx	lr

00022fe4 <lv_obj_get_y>:
    return obj->par;
   22fe4:	6803      	ldr	r3, [r0, #0]
   if(parent) {
   22fe6:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   22fea:	b113      	cbz	r3, 22ff2 <lv_obj_get_y+0xe>
       rel_y             = obj->coords.y1 - parent->coords.y1;
   22fec:	8a5b      	ldrh	r3, [r3, #18]
   22fee:	1ac0      	subs	r0, r0, r3
   22ff0:	b200      	sxth	r0, r0
}
   22ff2:	4770      	bx	lr

00022ff4 <lv_obj_align>:
{
   22ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ff8:	4606      	mov	r6, r0
   22ffa:	461f      	mov	r7, r3
    lv_coord_t new_x = lv_obj_get_x(obj);
   22ffc:	f7ff ffea 	bl	22fd4 <lv_obj_get_x>
   23000:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
   23002:	4630      	mov	r0, r6
   23004:	f7ff ffee 	bl	22fe4 <lv_obj_get_y>
    if(base == NULL) {
   23008:	f8d6 e000 	ldr.w	lr, [r6]
{
   2300c:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
   23010:	2900      	cmp	r1, #0
   23012:	bf08      	it	eq
   23014:	4671      	moveq	r1, lr
    switch(align) {
   23016:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
   2301a:	f9b1 c010 	ldrsh.w	ip, [r1, #16]
   2301e:	2a14      	cmp	r2, #20
   23020:	d818      	bhi.n	23054 <lv_obj_align+0x60>
   23022:	e8df f012 	tbh	[pc, r2, lsl #1]
   23026:	0029      	.short	0x0029
   23028:	004c0015 	.word	0x004c0015
   2302c:	00680060 	.word	0x00680060
   23030:	00880070 	.word	0x00880070
   23034:	00a10090 	.word	0x00a10090
   23038:	00ae00a9 	.word	0x00ae00a9
   2303c:	00ce00c6 	.word	0x00ce00c6
   23040:	00e700d1 	.word	0x00e700d1
   23044:	00f400ef 	.word	0x00f400ef
   23048:	00fe00f9 	.word	0x00fe00f9
   2304c:	01040101 	.word	0x01040101
            new_y = 0;
   23050:	2000      	movs	r0, #0
            new_x = 0;
   23052:	2500      	movs	r5, #0
    new_y -= par_abs_y;
   23054:	f8be 2012 	ldrh.w	r2, [lr, #18]
    new_x -= par_abs_x;
   23058:	f8be 1010 	ldrh.w	r1, [lr, #16]
    new_y -= par_abs_y;
   2305c:	eba8 0202 	sub.w	r2, r8, r2
    new_x -= par_abs_x;
   23060:	1a79      	subs	r1, r7, r1
    new_y -= par_abs_y;
   23062:	441a      	add	r2, r3
    new_x -= par_abs_x;
   23064:	4461      	add	r1, ip
    new_y -= par_abs_y;
   23066:	4402      	add	r2, r0
    new_x -= par_abs_x;
   23068:	4429      	add	r1, r5
    lv_obj_set_pos(obj, new_x, new_y);
   2306a:	4630      	mov	r0, r6
   2306c:	b212      	sxth	r2, r2
   2306e:	b209      	sxth	r1, r1
}
   23070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_set_pos(obj, new_x, new_y);
   23074:	f7ff bed5 	b.w	22e22 <lv_obj_set_pos>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23078:	8ab5      	ldrh	r5, [r6, #20]
   2307a:	8a32      	ldrh	r2, [r6, #16]
   2307c:	3501      	adds	r5, #1
   2307e:	1aad      	subs	r5, r5, r2
   23080:	8a8a      	ldrh	r2, [r1, #20]
   23082:	3201      	adds	r2, #1
   23084:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   23088:	b212      	sxth	r2, r2
   2308a:	b22d      	sxth	r5, r5
   2308c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   23090:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   23094:	1055      	asrs	r5, r2, #1
   23096:	eba5 0560 	sub.w	r5, r5, r0, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2309a:	8acc      	ldrh	r4, [r1, #22]
   2309c:	8af0      	ldrh	r0, [r6, #22]
   2309e:	8a72      	ldrh	r2, [r6, #18]
   230a0:	3401      	adds	r4, #1
   230a2:	3001      	adds	r0, #1
   230a4:	1ae4      	subs	r4, r4, r3
   230a6:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
   230a8:	b224      	sxth	r4, r4
   230aa:	b200      	sxth	r0, r0
   230ac:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   230b0:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
   230b4:	1060      	asrs	r0, r4, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   230b6:	b22d      	sxth	r5, r5
   230b8:	eba0 0062 	sub.w	r0, r0, r2, asr #1
   230bc:	e077      	b.n	231ae <lv_obj_align+0x1ba>
   230be:	8ab5      	ldrh	r5, [r6, #20]
   230c0:	8a32      	ldrh	r2, [r6, #16]
   230c2:	3501      	adds	r5, #1
   230c4:	1aad      	subs	r5, r5, r2
   230c6:	8a8a      	ldrh	r2, [r1, #20]
   230c8:	3201      	adds	r2, #1
   230ca:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   230ce:	b212      	sxth	r2, r2
   230d0:	b22d      	sxth	r5, r5
   230d2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   230d6:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   230da:	1055      	asrs	r5, r2, #1
   230dc:	eba5 0560 	sub.w	r5, r5, r0, asr #1
   230e0:	b22d      	sxth	r5, r5
            new_y = 0;
   230e2:	2000      	movs	r0, #0
            break;
   230e4:	e7b6      	b.n	23054 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   230e6:	8a35      	ldrh	r5, [r6, #16]
   230e8:	8ab2      	ldrh	r2, [r6, #20]
   230ea:	8a89      	ldrh	r1, [r1, #20]
   230ec:	1aad      	subs	r5, r5, r2
   230ee:	440d      	add	r5, r1
   230f0:	eba5 050c 	sub.w	r5, r5, ip
   230f4:	e7f4      	b.n	230e0 <lv_obj_align+0xec>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
   230f6:	8af2      	ldrh	r2, [r6, #22]
   230f8:	8a70      	ldrh	r0, [r6, #18]
   230fa:	1a80      	subs	r0, r0, r2
   230fc:	8aca      	ldrh	r2, [r1, #22]
   230fe:	4410      	add	r0, r2
   23100:	1ac0      	subs	r0, r0, r3
   23102:	b200      	sxth	r0, r0
   23104:	e7a5      	b.n	23052 <lv_obj_align+0x5e>
   23106:	8ab5      	ldrh	r5, [r6, #20]
   23108:	8a32      	ldrh	r2, [r6, #16]
   2310a:	3501      	adds	r5, #1
   2310c:	1aad      	subs	r5, r5, r2
   2310e:	8a8a      	ldrh	r2, [r1, #20]
   23110:	3201      	adds	r2, #1
   23112:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   23116:	b212      	sxth	r2, r2
   23118:	b22d      	sxth	r5, r5
   2311a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2311e:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   23122:	1055      	asrs	r5, r2, #1
   23124:	eba5 0560 	sub.w	r5, r5, r0, asr #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
   23128:	8af2      	ldrh	r2, [r6, #22]
   2312a:	8a70      	ldrh	r0, [r6, #18]
   2312c:	1a80      	subs	r0, r0, r2
   2312e:	8aca      	ldrh	r2, [r1, #22]
   23130:	b22d      	sxth	r5, r5
   23132:	4410      	add	r0, r2
   23134:	e05c      	b.n	231f0 <lv_obj_align+0x1fc>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   23136:	8ab2      	ldrh	r2, [r6, #20]
   23138:	8a35      	ldrh	r5, [r6, #16]
   2313a:	1aad      	subs	r5, r5, r2
   2313c:	8a8a      	ldrh	r2, [r1, #20]
   2313e:	4415      	add	r5, r2
   23140:	eba5 050c 	sub.w	r5, r5, ip
   23144:	e7f0      	b.n	23128 <lv_obj_align+0x134>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23146:	8acc      	ldrh	r4, [r1, #22]
   23148:	8af0      	ldrh	r0, [r6, #22]
   2314a:	8a72      	ldrh	r2, [r6, #18]
   2314c:	3401      	adds	r4, #1
   2314e:	3001      	adds	r0, #1
   23150:	1ae4      	subs	r4, r4, r3
   23152:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
   23154:	b224      	sxth	r4, r4
   23156:	b200      	sxth	r0, r0
   23158:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   2315c:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
   23160:	1060      	asrs	r0, r4, #1
   23162:	eba0 0062 	sub.w	r0, r0, r2, asr #1
   23166:	e7cc      	b.n	23102 <lv_obj_align+0x10e>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   23168:	8ab2      	ldrh	r2, [r6, #20]
   2316a:	8a35      	ldrh	r5, [r6, #16]
   2316c:	1aad      	subs	r5, r5, r2
   2316e:	8a8a      	ldrh	r2, [r1, #20]
   23170:	4415      	add	r5, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23172:	eba5 050c 	sub.w	r5, r5, ip
   23176:	e790      	b.n	2309a <lv_obj_align+0xa6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23178:	8af0      	ldrh	r0, [r6, #22]
   2317a:	1c42      	adds	r2, r0, #1
   2317c:	8a70      	ldrh	r0, [r6, #18]
            new_y = -lv_obj_get_height(obj);
   2317e:	1a80      	subs	r0, r0, r2
   23180:	e7bf      	b.n	23102 <lv_obj_align+0x10e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23182:	8ab5      	ldrh	r5, [r6, #20]
   23184:	8a32      	ldrh	r2, [r6, #16]
   23186:	3501      	adds	r5, #1
   23188:	1aad      	subs	r5, r5, r2
   2318a:	8a8a      	ldrh	r2, [r1, #20]
   2318c:	3201      	adds	r2, #1
   2318e:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   23192:	b212      	sxth	r2, r2
   23194:	b22d      	sxth	r5, r5
   23196:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2319a:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   2319e:	1055      	asrs	r5, r2, #1
   231a0:	eba5 0560 	sub.w	r5, r5, r0, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   231a4:	8af0      	ldrh	r0, [r6, #22]
   231a6:	1c42      	adds	r2, r0, #1
   231a8:	8a70      	ldrh	r0, [r6, #18]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   231aa:	b22d      	sxth	r5, r5
            new_y = -lv_obj_get_height(obj);
   231ac:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
   231ae:	b200      	sxth	r0, r0
            break;
   231b0:	e750      	b.n	23054 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   231b2:	8a35      	ldrh	r5, [r6, #16]
   231b4:	8ab2      	ldrh	r2, [r6, #20]
   231b6:	8a89      	ldrh	r1, [r1, #20]
   231b8:	1aad      	subs	r5, r5, r2
   231ba:	440d      	add	r5, r1
   231bc:	eba5 050c 	sub.w	r5, r5, ip
   231c0:	e7f0      	b.n	231a4 <lv_obj_align+0x1b0>
   231c2:	8ac8      	ldrh	r0, [r1, #22]
   231c4:	3001      	adds	r0, #1
   231c6:	e79b      	b.n	23100 <lv_obj_align+0x10c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   231c8:	8ab5      	ldrh	r5, [r6, #20]
   231ca:	8a32      	ldrh	r2, [r6, #16]
   231cc:	3501      	adds	r5, #1
   231ce:	1aad      	subs	r5, r5, r2
   231d0:	8a8a      	ldrh	r2, [r1, #20]
   231d2:	3201      	adds	r2, #1
   231d4:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   231d8:	b212      	sxth	r2, r2
   231da:	b22d      	sxth	r5, r5
   231dc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   231e0:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   231e4:	1055      	asrs	r5, r2, #1
   231e6:	eba5 0560 	sub.w	r5, r5, r0, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   231ea:	8ac8      	ldrh	r0, [r1, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   231ec:	b22d      	sxth	r5, r5
   231ee:	3001      	adds	r0, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
   231f0:	1ac0      	subs	r0, r0, r3
   231f2:	e7dc      	b.n	231ae <lv_obj_align+0x1ba>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   231f4:	8ab2      	ldrh	r2, [r6, #20]
   231f6:	8a35      	ldrh	r5, [r6, #16]
   231f8:	1aad      	subs	r5, r5, r2
   231fa:	8a8a      	ldrh	r2, [r1, #20]
   231fc:	4415      	add	r5, r2
   231fe:	eba5 050c 	sub.w	r5, r5, ip
   23202:	e7f2      	b.n	231ea <lv_obj_align+0x1f6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23204:	8ab5      	ldrh	r5, [r6, #20]
   23206:	1c69      	adds	r1, r5, #1
   23208:	8a35      	ldrh	r5, [r6, #16]
            new_x = -lv_obj_get_width(obj);
   2320a:	1a6d      	subs	r5, r5, r1
   2320c:	e768      	b.n	230e0 <lv_obj_align+0xec>
   2320e:	8ab5      	ldrh	r5, [r6, #20]
   23210:	1c6a      	adds	r2, r5, #1
   23212:	8a35      	ldrh	r5, [r6, #16]
            new_x = -lv_obj_get_width(obj);
   23214:	1aad      	subs	r5, r5, r2
   23216:	e740      	b.n	2309a <lv_obj_align+0xa6>
   23218:	8ab5      	ldrh	r5, [r6, #20]
   2321a:	1c6a      	adds	r2, r5, #1
   2321c:	8a35      	ldrh	r5, [r6, #16]
            new_x = -lv_obj_get_width(obj);
   2321e:	1aad      	subs	r5, r5, r2
   23220:	e782      	b.n	23128 <lv_obj_align+0x134>
   23222:	8a8d      	ldrh	r5, [r1, #20]
   23224:	3501      	adds	r5, #1
   23226:	e763      	b.n	230f0 <lv_obj_align+0xfc>
   23228:	8a8d      	ldrh	r5, [r1, #20]
   2322a:	3501      	adds	r5, #1
   2322c:	e7a1      	b.n	23172 <lv_obj_align+0x17e>
   2322e:	8a8d      	ldrh	r5, [r1, #20]
   23230:	3501      	adds	r5, #1
   23232:	e785      	b.n	23140 <lv_obj_align+0x14c>

00023234 <lv_obj_get_width>:
   23234:	8a83      	ldrh	r3, [r0, #20]
   23236:	8a00      	ldrh	r0, [r0, #16]
   23238:	3301      	adds	r3, #1
   2323a:	1a18      	subs	r0, r3, r0
}
   2323c:	b200      	sxth	r0, r0
   2323e:	4770      	bx	lr

00023240 <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23240:	8ac3      	ldrh	r3, [r0, #22]
   23242:	8a40      	ldrh	r0, [r0, #18]
   23244:	3301      	adds	r3, #1
   23246:	1a18      	subs	r0, r3, r0
}
   23248:	b200      	sxth	r0, r0
   2324a:	4770      	bx	lr

0002324c <lv_obj_get_base_dir>:
}
   2324c:	2000      	movs	r0, #0
   2324e:	4770      	bx	lr

00023250 <lv_obj_get_opa_scale>:
    while(parent) {
   23250:	b908      	cbnz	r0, 23256 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
   23252:	20ff      	movs	r0, #255	; 0xff
}
   23254:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
   23256:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   2325a:	065b      	lsls	r3, r3, #25
   2325c:	d502      	bpl.n	23264 <lv_obj_get_opa_scale+0x14>
   2325e:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
   23262:	4770      	bx	lr
    return obj->par;
   23264:	6800      	ldr	r0, [r0, #0]
   23266:	e7f3      	b.n	23250 <lv_obj_get_opa_scale>

00023268 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
   23268:	2a02      	cmp	r2, #2
{
   2326a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2326c:	4604      	mov	r4, r0
   2326e:	460d      	mov	r5, r1
    if(mode == LV_DESIGN_COVER_CHK) {
   23270:	d13d      	bne.n	232ee <lv_obj_design+0x86>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
   23272:	f100 0610 	add.w	r6, r0, #16
   23276:	4631      	mov	r1, r6
   23278:	4628      	mov	r0, r5
   2327a:	f001 fa0e 	bl	2469a <lv_area_is_in>
   2327e:	b398      	cbz	r0, 232e8 <lv_obj_design+0x80>
        const lv_style_t * style = lv_obj_get_style(obj);
   23280:	4620      	mov	r0, r4
   23282:	f7f5 ffe3 	bl	1924c <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
   23286:	7b83      	ldrb	r3, [r0, #14]
   23288:	2bfa      	cmp	r3, #250	; 0xfa
   2328a:	d92d      	bls.n	232e8 <lv_obj_design+0x80>
        lv_coord_t r = style->body.radius;
   2328c:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
        if(r == LV_RADIUS_CIRCLE) return false;
   23290:	f647 4318 	movw	r3, #31768	; 0x7c18
   23294:	429c      	cmp	r4, r3
   23296:	d027      	beq.n	232e8 <lv_obj_design+0x80>
    memcpy(dest, src, sizeof(lv_area_t));
   23298:	4631      	mov	r1, r6
   2329a:	2208      	movs	r2, #8
   2329c:	4668      	mov	r0, sp
   2329e:	f7fc f9ab 	bl	1f5f8 <memcpy>
        area_tmp.x1 += r;
   232a2:	f8bd 3000 	ldrh.w	r3, [sp]
   232a6:	4423      	add	r3, r4
   232a8:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
   232ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   232b0:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
   232b2:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   232b4:	4628      	mov	r0, r5
        area_tmp.x2 -= r;
   232b6:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   232ba:	f001 f9ee 	bl	2469a <lv_area_is_in>
   232be:	b198      	cbz	r0, 232e8 <lv_obj_design+0x80>
   232c0:	4631      	mov	r1, r6
   232c2:	2208      	movs	r2, #8
   232c4:	4668      	mov	r0, sp
   232c6:	f7fc f997 	bl	1f5f8 <memcpy>
        area_tmp.y1 += r;
   232ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   232ce:	4423      	add	r3, r4
   232d0:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
   232d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   232d8:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
   232da:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   232dc:	4628      	mov	r0, r5
        area_tmp.y2 -= r;
   232de:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   232e2:	f001 f9da 	bl	2469a <lv_area_is_in>
   232e6:	b900      	cbnz	r0, 232ea <lv_obj_design+0x82>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
   232e8:	2000      	movs	r0, #0
}
   232ea:	b002      	add	sp, #8
   232ec:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
   232ee:	b95a      	cbnz	r2, 23308 <lv_obj_design+0xa0>
        const lv_style_t * style = lv_obj_get_style(obj);
   232f0:	f7f5 ffac 	bl	1924c <lv_obj_get_style>
   232f4:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
   232f6:	4620      	mov	r0, r4
   232f8:	f7ff ffaa 	bl	23250 <lv_obj_get_opa_scale>
   232fc:	4629      	mov	r1, r5
   232fe:	4603      	mov	r3, r0
   23300:	f104 0010 	add.w	r0, r4, #16
   23304:	f000 fa40 	bl	23788 <lv_draw_rect>
    return true;
   23308:	2001      	movs	r0, #1
   2330a:	e7ee      	b.n	232ea <lv_obj_design+0x82>

0002330c <lv_obj_get_signal_cb>:
}
   2330c:	69c0      	ldr	r0, [r0, #28]
   2330e:	4770      	bx	lr

00023310 <lv_obj_get_ext_attr>:
}
   23310:	6a40      	ldr	r0, [r0, #36]	; 0x24
   23312:	4770      	bx	lr

00023314 <lv_obj_handle_get_type_signal>:
{
   23314:	b510      	push	{r4, lr}
   23316:	2300      	movs	r3, #0
        if(buf->type[i] == NULL) break;
   23318:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2331c:	b2da      	uxtb	r2, r3
   2331e:	b11c      	cbz	r4, 23328 <lv_obj_handle_get_type_signal+0x14>
   23320:	3301      	adds	r3, #1
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
   23322:	2b07      	cmp	r3, #7
   23324:	d1f8      	bne.n	23318 <lv_obj_handle_get_type_signal+0x4>
   23326:	461a      	mov	r2, r3
    buf->type[i] = name;
   23328:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   2332c:	2001      	movs	r0, #1
   2332e:	bd10      	pop	{r4, pc}

00023330 <lv_refr_get_top_obj>:
{
   23330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23332:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
   23334:	3110      	adds	r1, #16
{
   23336:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
   23338:	f001 f9af 	bl	2469a <lv_area_is_in>
   2333c:	b908      	cbnz	r0, 23342 <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
   2333e:	2000      	movs	r0, #0
}
   23340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
   23342:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   23346:	06db      	lsls	r3, r3, #27
   23348:	d4f9      	bmi.n	2333e <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
   2334a:	1d27      	adds	r7, r4, #4
   2334c:	4638      	mov	r0, r7
   2334e:	f001 fa4a 	bl	247e6 <lv_ll_get_head>
   23352:	4605      	mov	r5, r0
   23354:	b998      	cbnz	r0, 2337e <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
   23356:	4620      	mov	r0, r4
   23358:	f7f5 ff78 	bl	1924c <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
   2335c:	7b83      	ldrb	r3, [r0, #14]
   2335e:	2bff      	cmp	r3, #255	; 0xff
   23360:	d1ed      	bne.n	2333e <lv_refr_get_top_obj+0xe>
   23362:	6a23      	ldr	r3, [r4, #32]
   23364:	2202      	movs	r2, #2
   23366:	4631      	mov	r1, r6
   23368:	4620      	mov	r0, r4
   2336a:	4798      	blx	r3
   2336c:	2800      	cmp	r0, #0
   2336e:	d0e6      	beq.n	2333e <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
   23370:	4620      	mov	r0, r4
   23372:	f7ff ff6d 	bl	23250 <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
   23376:	28ff      	cmp	r0, #255	; 0xff
   23378:	d1e1      	bne.n	2333e <lv_refr_get_top_obj+0xe>
   2337a:	4620      	mov	r0, r4
    return found_p;
   2337c:	e7e0      	b.n	23340 <lv_refr_get_top_obj+0x10>
            found_p = lv_refr_get_top_obj(area_p, i);
   2337e:	4629      	mov	r1, r5
   23380:	4630      	mov	r0, r6
   23382:	f7ff ffd5 	bl	23330 <lv_refr_get_top_obj>
            if(found_p != NULL) {
   23386:	2800      	cmp	r0, #0
   23388:	d1da      	bne.n	23340 <lv_refr_get_top_obj+0x10>
        LV_LL_READ(obj->child_ll, i)
   2338a:	4629      	mov	r1, r5
   2338c:	4638      	mov	r0, r7
   2338e:	f001 fa30 	bl	247f2 <lv_ll_get_next>
   23392:	e7de      	b.n	23352 <lv_refr_get_top_obj+0x22>

00023394 <lv_refr_obj>:
{
   23394:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
   23396:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
   2339a:	f016 0610 	ands.w	r6, r6, #16
{
   2339e:	b08b      	sub	sp, #44	; 0x2c
   233a0:	4604      	mov	r4, r0
   233a2:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
   233a4:	d138      	bne.n	23418 <lv_refr_obj+0x84>
    lv_obj_get_coords(obj, &obj_area);
   233a6:	a904      	add	r1, sp, #16
    lv_coord_t ext_size = obj->ext_draw_pad;
   233a8:	f9b0 5030 	ldrsh.w	r5, [r0, #48]	; 0x30
    lv_obj_get_coords(obj, &obj_area);
   233ac:	f7ff fe0b 	bl	22fc6 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
   233b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   233b4:	1b5b      	subs	r3, r3, r5
   233b6:	f8ad 3010 	strh.w	r3, [sp, #16]
    obj_area.y1 -= ext_size;
   233ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   233be:	1b5b      	subs	r3, r3, r5
   233c0:	f8ad 3012 	strh.w	r3, [sp, #18]
    obj_area.x2 += ext_size;
   233c4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   233c8:	442b      	add	r3, r5
   233ca:	f8ad 3014 	strh.w	r3, [sp, #20]
    obj_area.y2 += ext_size;
   233ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   233d2:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
   233d4:	441d      	add	r5, r3
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   233d6:	4639      	mov	r1, r7
   233d8:	a802      	add	r0, sp, #8
    obj_area.y2 += ext_size;
   233da:	f8ad 5016 	strh.w	r5, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   233de:	f001 f8f3 	bl	245c8 <lv_area_intersect>
    if(union_ok != false) {
   233e2:	b1c8      	cbz	r0, 23418 <lv_refr_obj+0x84>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
   233e4:	4632      	mov	r2, r6
   233e6:	6a23      	ldr	r3, [r4, #32]
   233e8:	a902      	add	r1, sp, #8
   233ea:	4620      	mov	r0, r4
   233ec:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
   233ee:	a904      	add	r1, sp, #16
   233f0:	4620      	mov	r0, r4
   233f2:	f7ff fde8 	bl	22fc6 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
   233f6:	aa04      	add	r2, sp, #16
   233f8:	4639      	mov	r1, r7
   233fa:	4668      	mov	r0, sp
   233fc:	f001 f8e4 	bl	245c8 <lv_area_intersect>
        if(union_ok != false) {
   23400:	b128      	cbz	r0, 2340e <lv_refr_obj+0x7a>
            LV_LL_READ_BACK(obj->child_ll, child_p)
   23402:	1d26      	adds	r6, r4, #4
   23404:	4630      	mov	r0, r6
   23406:	f001 f9f1 	bl	247ec <lv_ll_get_tail>
   2340a:	4605      	mov	r5, r0
   2340c:	b930      	cbnz	r0, 2341c <lv_refr_obj+0x88>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
   2340e:	6a23      	ldr	r3, [r4, #32]
   23410:	2201      	movs	r2, #1
   23412:	a902      	add	r1, sp, #8
   23414:	4620      	mov	r0, r4
   23416:	4798      	blx	r3
}
   23418:	b00b      	add	sp, #44	; 0x2c
   2341a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
   2341c:	a908      	add	r1, sp, #32
   2341e:	4628      	mov	r0, r5
   23420:	f7ff fdd1 	bl	22fc6 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
   23424:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
                child_area.x1 -= ext_size;
   23428:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2342c:	1ad2      	subs	r2, r2, r3
   2342e:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
   23432:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   23436:	1ad2      	subs	r2, r2, r3
   23438:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
   2343c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   23440:	441a      	add	r2, r3
   23442:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
   23446:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
   2344a:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
   2344c:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
   2344e:	a806      	add	r0, sp, #24
   23450:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
   23452:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
   23456:	f001 f8b7 	bl	245c8 <lv_area_intersect>
                if(union_ok) {
   2345a:	b118      	cbz	r0, 23464 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
   2345c:	a906      	add	r1, sp, #24
   2345e:	4628      	mov	r0, r5
   23460:	f7ff ff98 	bl	23394 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
   23464:	4629      	mov	r1, r5
   23466:	4630      	mov	r0, r6
   23468:	f001 f9d3 	bl	24812 <lv_ll_get_prev>
   2346c:	e7cd      	b.n	2340a <lv_refr_obj+0x76>

0002346e <lv_refr_init>:
}
   2346e:	4770      	bx	lr

00023470 <lv_inv_area>:
{
   23470:	b5f0      	push	{r4, r5, r6, r7, lr}
   23472:	460d      	mov	r5, r1
   23474:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
   23476:	4604      	mov	r4, r0
   23478:	b920      	cbnz	r0, 23484 <lv_inv_area+0x14>
   2347a:	f7f7 fa61 	bl	1a940 <lv_disp_get_default>
    if(!disp) return;
   2347e:	4604      	mov	r4, r0
   23480:	2800      	cmp	r0, #0
   23482:	d043      	beq.n	2350c <lv_inv_area+0x9c>
    if(area_p == NULL) {
   23484:	b935      	cbnz	r5, 23494 <lv_inv_area+0x24>
        disp->inv_p = 0;
   23486:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
   2348a:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
   2348e:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
   23492:	e03b      	b.n	2350c <lv_inv_area+0x9c>
    scr_area.x1 = 0;
   23494:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   23496:	4620      	mov	r0, r4
    scr_area.x1 = 0;
   23498:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   2349a:	f7f7 fa57 	bl	1a94c <lv_disp_get_hor_res>
   2349e:	3801      	subs	r0, #1
   234a0:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
   234a4:	4620      	mov	r0, r4
   234a6:	f7f7 fa61 	bl	1a96c <lv_disp_get_ver_res>
   234aa:	3801      	subs	r0, #1
   234ac:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
   234b0:	466a      	mov	r2, sp
   234b2:	4629      	mov	r1, r5
   234b4:	a802      	add	r0, sp, #8
   234b6:	f001 f887 	bl	245c8 <lv_area_intersect>
    if(suc != false) {
   234ba:	b338      	cbz	r0, 2350c <lv_inv_area+0x9c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
   234bc:	6923      	ldr	r3, [r4, #16]
   234be:	b113      	cbz	r3, 234c6 <lv_inv_area+0x56>
   234c0:	a902      	add	r1, sp, #8
   234c2:	4620      	mov	r0, r4
   234c4:	4798      	blx	r3
   234c6:	f104 0540 	add.w	r5, r4, #64	; 0x40
{
   234ca:	2600      	movs	r6, #0
   234cc:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
   234ce:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
   234d2:	b2b2      	uxth	r2, r6
   234d4:	f3c3 0009 	ubfx	r0, r3, #0, #10
   234d8:	4290      	cmp	r0, r2
   234da:	d80f      	bhi.n	234fc <lv_inv_area+0x8c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
   234dc:	281f      	cmp	r0, #31
   234de:	d817      	bhi.n	23510 <lv_inv_area+0xa0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
   234e0:	3008      	adds	r0, #8
   234e2:	2208      	movs	r2, #8
   234e4:	eb0d 0102 	add.w	r1, sp, r2
   234e8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   234ec:	f7fc f884 	bl	1f5f8 <memcpy>
        disp->inv_p++;
   234f0:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
   234f4:	1c5a      	adds	r2, r3, #1
   234f6:	f362 0309 	bfi	r3, r2, #0, #10
   234fa:	e7c8      	b.n	2348e <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
   234fc:	4629      	mov	r1, r5
   234fe:	a802      	add	r0, sp, #8
   23500:	f001 f8cb 	bl	2469a <lv_area_is_in>
   23504:	3601      	adds	r6, #1
   23506:	3508      	adds	r5, #8
   23508:	2800      	cmp	r0, #0
   2350a:	d0e0      	beq.n	234ce <lv_inv_area+0x5e>
}
   2350c:	b005      	add	sp, #20
   2350e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
   23510:	f36f 0309 	bfc	r3, #0, #10
   23514:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
   23518:	2208      	movs	r2, #8
   2351a:	4669      	mov	r1, sp
   2351c:	4638      	mov	r0, r7
   2351e:	e7e5      	b.n	234ec <lv_inv_area+0x7c>

00023520 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
   23520:	2250      	movs	r2, #80	; 0x50
   23522:	f7fc b869 	b.w	1f5f8 <memcpy>

00023526 <lv_color_mix.isra.0>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
   23526:	b530      	push	{r4, r5, lr}
   23528:	f89d 5014 	ldrb.w	r5, [sp, #20]
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   2352c:	b2ac      	uxth	r4, r5
   2352e:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
   23532:	436b      	muls	r3, r5
   23534:	fb00 3304 	mla	r3, r0, r4, r3
   23538:	f3c3 2307 	ubfx	r3, r3, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   2353c:	2000      	movs	r0, #0
   2353e:	f363 0007 	bfi	r0, r3, #0, #8
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   23542:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23546:	fb13 f305 	smulbb	r3, r3, r5
   2354a:	fb01 3104 	mla	r1, r1, r4, r3
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   2354e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   23552:	fb13 f505 	smulbb	r5, r3, r5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   23556:	f3c1 2107 	ubfx	r1, r1, #8, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   2355a:	fb02 5204 	mla	r2, r2, r4, r5
    return ret;
   2355e:	f361 200f 	bfi	r0, r1, #8, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   23562:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
   23566:	f362 4017 	bfi	r0, r2, #16, #8
}
   2356a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
   2356e:	bd30      	pop	{r4, r5, pc}

00023570 <lv_draw_fill>:
{
   23570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
   23574:	2b0f      	cmp	r3, #15
{
   23576:	b08d      	sub	sp, #52	; 0x34
   23578:	4616      	mov	r6, r2
   2357a:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
   2357c:	d973      	bls.n	23666 <lv_draw_fill+0xf6>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   2357e:	2bfc      	cmp	r3, #252	; 0xfc
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
   23580:	460a      	mov	r2, r1
   23582:	4601      	mov	r1, r0
   23584:	a80a      	add	r0, sp, #40	; 0x28
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   23586:	bf28      	it	cs
   23588:	27ff      	movcs	r7, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
   2358a:	f001 f81d 	bl	245c8 <lv_area_intersect>
    if(union_ok == false) {
   2358e:	2800      	cmp	r0, #0
   23590:	d069      	beq.n	23666 <lv_draw_fill+0xf6>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
   23592:	f7f5 ff15 	bl	193c0 <lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   23596:	f000 ffba 	bl	2450e <lv_disp_get_buf>
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
   2359a:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   2359e:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
   235a2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   235a6:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
   235aa:	f8d0 a008 	ldr.w	sl, [r0, #8]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
   235ae:	1b49      	subs	r1, r1, r5
   235b0:	fa0f fb81 	sxth.w	fp, r1
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
   235b4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   235b8:	1ac9      	subs	r1, r1, r3
   235ba:	b20a      	sxth	r2, r1
   235bc:	9204      	str	r2, [sp, #16]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
   235be:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   235c2:	1b52      	subs	r2, r2, r5
   235c4:	8a85      	ldrh	r5, [r0, #20]
   235c6:	3501      	adds	r5, #1
   235c8:	1aed      	subs	r5, r5, r3
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
   235ca:	1ae4      	subs	r4, r4, r3
   235cc:	b22b      	sxth	r3, r5
   235ce:	9309      	str	r3, [sp, #36]	; 0x24
   235d0:	b2f3      	uxtb	r3, r6
   235d2:	9305      	str	r3, [sp, #20]
   235d4:	f3c6 2307 	ubfx	r3, r6, #8, #8
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
   235d8:	b212      	sxth	r2, r2
   235da:	9306      	str	r3, [sp, #24]
   235dc:	f3c6 4307 	ubfx	r3, r6, #16, #8
   235e0:	9307      	str	r3, [sp, #28]
   235e2:	9208      	str	r2, [sp, #32]
{
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
   235e4:	f7f5 feec 	bl	193c0 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
   235e8:	6943      	ldr	r3, [r0, #20]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
   235ea:	b224      	sxth	r4, r4
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
   235ec:	4681      	mov	r9, r0
    if(disp->driver.set_px_cb) {
   235ee:	2b00      	cmp	r3, #0
   235f0:	d136      	bne.n	23660 <lv_draw_fill+0xf0>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
            }
        }
    } else {
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
   235f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   235f4:	fb0b f202 	mul.w	r2, fp, r2
   235f8:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2

        /*Run simpler function without opacity*/
        if(opa == LV_OPA_COVER) {
   235fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   235fe:	2fff      	cmp	r7, #255	; 0xff
   23600:	ea4f 0582 	mov.w	r5, r2, lsl #2
   23604:	d05c      	beq.n	236c0 <lv_draw_fill+0x150>
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            scr_transp = disp->driver.screen_transp;
#endif

            lv_color_t bg_tmp  = LV_COLOR_BLACK;
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
   23606:	e9cd 3701 	strd	r3, r7, [sp, #4]
   2360a:	9300      	str	r3, [sp, #0]
   2360c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   23610:	9805      	ldr	r0, [sp, #20]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
   23612:	f04f 487f 	mov.w	r8, #4278190080	; 0xff000000
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
   23616:	f7ff ff86 	bl	23526 <lv_color_mix.isra.0>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   2361a:	9b08      	ldr	r3, [sp, #32]
   2361c:	455b      	cmp	r3, fp
   2361e:	db22      	blt.n	23666 <lv_draw_fill+0xf6>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
   23620:	4626      	mov	r6, r4
   23622:	e068      	b.n	236f6 <lv_draw_fill+0x186>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
   23624:	f8d9 3014 	ldr.w	r3, [r9, #20]
   23628:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2362a:	f8cd 8000 	str.w	r8, [sp]
   2362e:	461d      	mov	r5, r3
   23630:	9b05      	ldr	r3, [sp, #20]
   23632:	f363 0607 	bfi	r6, r3, #0, #8
   23636:	9b06      	ldr	r3, [sp, #24]
   23638:	f363 260f 	bfi	r6, r3, #8, #8
   2363c:	9b07      	ldr	r3, [sp, #28]
   2363e:	f363 4617 	bfi	r6, r3, #16, #8
   23642:	e9cd 6701 	strd	r6, r7, [sp, #4]
   23646:	4623      	mov	r3, r4
   23648:	4651      	mov	r1, sl
   2364a:	4648      	mov	r0, r9
   2364c:	47a8      	blx	r5
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   2364e:	f108 0801 	add.w	r8, r8, #1
   23652:	fa0f f888 	sxth.w	r8, r8
   23656:	9b08      	ldr	r3, [sp, #32]
   23658:	4543      	cmp	r3, r8
   2365a:	dae3      	bge.n	23624 <lv_draw_fill+0xb4>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
   2365c:	3401      	adds	r4, #1
   2365e:	b224      	sxth	r4, r4
   23660:	9b04      	ldr	r3, [sp, #16]
   23662:	42a3      	cmp	r3, r4
   23664:	da02      	bge.n	2366c <lv_draw_fill+0xfc>
}
   23666:	b00d      	add	sp, #52	; 0x34
   23668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   2366c:	46d8      	mov	r8, fp
   2366e:	e7f2      	b.n	23656 <lv_draw_fill+0xe6>
                mem[col] = color;
   23670:	9a05      	ldr	r2, [sp, #20]
   23672:	f362 0607 	bfi	r6, r2, #0, #8
   23676:	9a06      	ldr	r2, [sp, #24]
   23678:	f362 260f 	bfi	r6, r2, #8, #8
   2367c:	9a07      	ldr	r2, [sp, #28]
   2367e:	f362 4617 	bfi	r6, r2, #16, #8
   23682:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
   23686:	3301      	adds	r3, #1
   23688:	b21b      	sxth	r3, r3
   2368a:	9a04      	ldr	r2, [sp, #16]
   2368c:	429a      	cmp	r2, r3
   2368e:	daef      	bge.n	23670 <lv_draw_fill+0x100>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
   23690:	3201      	adds	r2, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
   23692:	00a3      	lsls	r3, r4, #2
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
   23694:	1b14      	subs	r4, r2, r4
            lv_color_t * mem_first = &mem[fill_area->x1];
   23696:	eb0a 0603 	add.w	r6, sl, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
   2369a:	00a4      	lsls	r4, r4, #2
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
   2369c:	f10b 0701 	add.w	r7, fp, #1
   236a0:	442b      	add	r3, r5
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
   236a2:	b224      	sxth	r4, r4
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
   236a4:	b23f      	sxth	r7, r7
   236a6:	449a      	add	sl, r3
   236a8:	9b08      	ldr	r3, [sp, #32]
   236aa:	42bb      	cmp	r3, r7
   236ac:	dbdb      	blt.n	23666 <lv_draw_fill+0xf6>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
   236ae:	4650      	mov	r0, sl
   236b0:	4622      	mov	r2, r4
   236b2:	4631      	mov	r1, r6
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
   236b4:	3701      	adds	r7, #1
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
   236b6:	f7fb ff9f 	bl	1f5f8 <memcpy>
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
   236ba:	b23f      	sxth	r7, r7
   236bc:	44aa      	add	sl, r5
   236be:	e7f3      	b.n	236a8 <lv_draw_fill+0x138>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
   236c0:	4623      	mov	r3, r4
   236c2:	e7e2      	b.n	2368a <lv_draw_fill+0x11a>
                    if(scr_transp == false) {
                        /*If the bg color changed recalculate the result color*/
                        if(mem[col].full != bg_tmp.full) {
   236c4:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   236c8:	4543      	cmp	r3, r8
   236ca:	eb0a 0986 	add.w	r9, sl, r6, lsl #2
   236ce:	d00e      	beq.n	236ee <lv_draw_fill+0x17e>
                            bg_tmp  = mem[col];
   236d0:	4698      	mov	r8, r3
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
   236d2:	f3c3 4307 	ubfx	r3, r3, #16, #8
   236d6:	9301      	str	r3, [sp, #4]
   236d8:	f3c8 2307 	ubfx	r3, r8, #8, #8
   236dc:	9300      	str	r3, [sp, #0]
   236de:	9702      	str	r7, [sp, #8]
   236e0:	fa5f f388 	uxtb.w	r3, r8
   236e4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   236e8:	9805      	ldr	r0, [sp, #20]
   236ea:	f7ff ff1c 	bl	23526 <lv_color_mix.isra.0>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
   236ee:	3601      	adds	r6, #1
                        }

                        mem[col] = opa_tmp;
   236f0:	f8c9 0000 	str.w	r0, [r9]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
   236f4:	b236      	sxth	r6, r6
   236f6:	9b04      	ldr	r3, [sp, #16]
   236f8:	42b3      	cmp	r3, r6
   236fa:	dae3      	bge.n	236c4 <lv_draw_fill+0x154>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   236fc:	f10b 0301 	add.w	r3, fp, #1
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
                        mem[col] = color_mix_2_alpha(mem[col], mem[col].ch.alpha, color, opa);
#endif
                    }
                }
                mem += mem_width;
   23700:	44aa      	add	sl, r5
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   23702:	fa0f fb83 	sxth.w	fp, r3
   23706:	e788      	b.n	2361a <lv_draw_fill+0xaa>

00023708 <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
   23708:	b570      	push	{r4, r5, r6, lr}
   2370a:	460e      	mov	r6, r1
   2370c:	4604      	mov	r4, r0
   2370e:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   23710:	f7f5 fe56 	bl	193c0 <lv_refr_get_disp_refreshing>
   23714:	f000 fef3 	bl	244fe <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
   23718:	1071      	asrs	r1, r6, #1
   2371a:	428c      	cmp	r4, r1
   2371c:	db03      	blt.n	23726 <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
   2371e:	b28c      	uxth	r4, r1
        if(r != 0) r--;
   23720:	b10c      	cbz	r4, 23726 <lv_draw_cont_radius_corr+0x1e>
   23722:	3c01      	subs	r4, #1
   23724:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
   23726:	106a      	asrs	r2, r5, #1
   23728:	4294      	cmp	r4, r2
   2372a:	db03      	blt.n	23734 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
   2372c:	b294      	uxth	r4, r2
        if(r != 0) r--;
   2372e:	b124      	cbz	r4, 2373a <lv_draw_cont_radius_corr+0x32>
   23730:	3c01      	subs	r4, #1
   23732:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
   23734:	b10c      	cbz	r4, 2373a <lv_draw_cont_radius_corr+0x32>
   23736:	1a24      	subs	r4, r4, r0
   23738:	b2a4      	uxth	r4, r4

    return r;
}
   2373a:	4620      	mov	r0, r4
   2373c:	bd70      	pop	{r4, r5, r6, pc}

0002373e <lv_color_mix.isra.0>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
   2373e:	b530      	push	{r4, r5, lr}
   23740:	f89d 5014 	ldrb.w	r5, [sp, #20]
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   23744:	b2ac      	uxth	r4, r5
   23746:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
   2374a:	436b      	muls	r3, r5
   2374c:	fb00 3304 	mla	r3, r0, r4, r3
   23750:	f3c3 2307 	ubfx	r3, r3, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   23754:	2000      	movs	r0, #0
   23756:	f363 0007 	bfi	r0, r3, #0, #8
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   2375a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2375e:	fb13 f305 	smulbb	r3, r3, r5
   23762:	fb01 3104 	mla	r1, r1, r4, r3
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   23766:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2376a:	fb13 f505 	smulbb	r5, r3, r5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   2376e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   23772:	fb02 5204 	mla	r2, r2, r4, r5
    return ret;
   23776:	f361 200f 	bfi	r0, r1, #8, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   2377a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
   2377e:	f362 4017 	bfi	r0, r2, #16, #8
}
   23782:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
   23786:	bd30      	pop	{r4, r5, pc}

00023788 <lv_draw_rect>:
{
   23788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2378c:	b09d      	sub	sp, #116	; 0x74
   2378e:	e9cd 1205 	strd	r1, r2, [sp, #20]
   23792:	9307      	str	r3, [sp, #28]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23794:	88c3      	ldrh	r3, [r0, #6]
   23796:	8842      	ldrh	r2, [r0, #2]
   23798:	3301      	adds	r3, #1
   2379a:	1a9b      	subs	r3, r3, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   2379c:	b21b      	sxth	r3, r3
   2379e:	2b00      	cmp	r3, #0
{
   237a0:	4681      	mov	r9, r0
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   237a2:	f340 8236 	ble.w	23c12 <lv_draw_rect+0x48a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   237a6:	8883      	ldrh	r3, [r0, #4]
   237a8:	8802      	ldrh	r2, [r0, #0]
   237aa:	3301      	adds	r3, #1
   237ac:	1a9b      	subs	r3, r3, r2
   237ae:	b21b      	sxth	r3, r3
   237b0:	2b00      	cmp	r3, #0
   237b2:	f340 822e 	ble.w	23c12 <lv_draw_rect+0x48a>
    if(lv_area_is_on(coords, mask) == false) return;
   237b6:	f000 ff53 	bl	24660 <lv_area_is_on>
   237ba:	2800      	cmp	r0, #0
   237bc:	f000 8229 	beq.w	23c12 <lv_draw_rect+0x48a>
    if(style->body.opa > LV_OPA_MIN) {
   237c0:	9b06      	ldr	r3, [sp, #24]
   237c2:	7b9b      	ldrb	r3, [r3, #14]
   237c4:	2b10      	cmp	r3, #16
   237c6:	f240 80fd 	bls.w	239c4 <lv_draw_rect+0x23c>
    uint16_t radius = style->body.radius;
   237ca:	9b06      	ldr	r3, [sp, #24]
   237cc:	899d      	ldrh	r5, [r3, #12]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   237ce:	f7f5 fdf7 	bl	193c0 <lv_refr_get_disp_refreshing>
   237d2:	f000 fe94 	bl	244fe <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
   237d6:	9b06      	ldr	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   237d8:	f8b9 6006 	ldrh.w	r6, [r9, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   237dc:	f8b9 1004 	ldrh.w	r1, [r9, #4]
    lv_color_t gcolor = style->body.grad_color;
   237e0:	e9d3 8a01 	ldrd	r8, sl, [r3, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   237e4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   237e8:	3601      	adds	r6, #1
   237ea:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   237ec:	f8b9 3000 	ldrh.w	r3, [r9]
   237f0:	3101      	adds	r1, #1
   237f2:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
   237f4:	9b07      	ldr	r3, [sp, #28]
   237f6:	2bff      	cmp	r3, #255	; 0xff
   237f8:	9b06      	ldr	r3, [sp, #24]
   237fa:	7b9f      	ldrb	r7, [r3, #14]
   237fc:	bf18      	it	ne
   237fe:	9b07      	ldrne	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23800:	b236      	sxth	r6, r6
   23802:	bf18      	it	ne
   23804:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   23806:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23808:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
   2380a:	4632      	mov	r2, r6
   2380c:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
   2380e:	bf18      	it	ne
   23810:	0a3f      	lsrne	r7, r7, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
   23812:	f7ff ff79 	bl	23708 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
   23816:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
   2381a:	ebb0 0f63 	cmp.w	r0, r3, asr #1
   2381e:	f340 81fb 	ble.w	23c18 <lv_draw_rect+0x490>
        if(style->body.radius != 0) {
   23822:	9b06      	ldr	r3, [sp, #24]
   23824:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
   23828:	2f00      	cmp	r7, #0
   2382a:	f000 80cb 	beq.w	239c4 <lv_draw_rect+0x23c>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   2382e:	f7f5 fdc7 	bl	193c0 <lv_refr_get_disp_refreshing>
   23832:	f000 fe64 	bl	244fe <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
   23836:	9b06      	ldr	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23838:	f8b9 a006 	ldrh.w	sl, [r9, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2383c:	f8b9 1004 	ldrh.w	r1, [r9, #4]
    lv_color_t gcolor = style->body.grad_color;
   23840:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
   23844:	9b07      	ldr	r3, [sp, #28]
   23846:	2bff      	cmp	r3, #255	; 0xff
   23848:	9b06      	ldr	r3, [sp, #24]
   2384a:	7b9e      	ldrb	r6, [r3, #14]
   2384c:	bf1c      	itt	ne
   2384e:	9b07      	ldrne	r3, [sp, #28]
   23850:	435e      	mulne	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23852:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   23856:	f10a 0a01 	add.w	sl, sl, #1
   2385a:	ebaa 0a03 	sub.w	sl, sl, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2385e:	f8b9 3000 	ldrh.w	r3, [r9]
   23862:	f101 0101 	add.w	r1, r1, #1
   23866:	eba1 0103 	sub.w	r1, r1, r3
    uint16_t radius = style->body.radius;
   2386a:	b2bf      	uxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2386c:	fa0f fa8a 	sxth.w	sl, sl
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   23870:	4683      	mov	fp, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
   23872:	4652      	mov	r2, sl
   23874:	b209      	sxth	r1, r1
   23876:	4638      	mov	r0, r7
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
   23878:	bf18      	it	ne
   2387a:	0a36      	lsrne	r6, r6, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
   2387c:	f7ff ff44 	bl	23708 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
   23880:	f8b9 3000 	ldrh.w	r3, [r9]
   23884:	fa0f f18b 	sxth.w	r1, fp
   23888:	b202      	sxth	r2, r0
   2388a:	440b      	add	r3, r1
   2388c:	4413      	add	r3, r2
   2388e:	fa0f f883 	sxth.w	r8, r3
    lt_origo.y = coords->y1 + radius + aa;
   23892:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    rt_origo.x = coords->x2 - radius - aa;
   23896:	f8b9 b004 	ldrh.w	fp, [r9, #4]
    lt_origo.y = coords->y1 + radius + aa;
   2389a:	440b      	add	r3, r1
   2389c:	4413      	add	r3, r2
   2389e:	b21b      	sxth	r3, r3
   238a0:	9308      	str	r3, [sp, #32]
    lb_origo.y = coords->y2 - radius - aa;
   238a2:	f8b9 3006 	ldrh.w	r3, [r9, #6]
   238a6:	1a5b      	subs	r3, r3, r1
   238a8:	1a9b      	subs	r3, r3, r2
   238aa:	b21b      	sxth	r3, r3
    rt_origo.x = coords->x2 - radius - aa;
   238ac:	ebab 0b01 	sub.w	fp, fp, r1
    lv_circ_init(&cir, &cir_tmp, radius);
   238b0:	a813      	add	r0, sp, #76	; 0x4c
   238b2:	f10d 014a 	add.w	r1, sp, #74	; 0x4a
    rt_origo.x = coords->x2 - radius - aa;
   238b6:	ebab 0b02 	sub.w	fp, fp, r2
    lb_origo.y = coords->y2 - radius - aa;
   238ba:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir, &cir_tmp, radius);
   238bc:	f000 fe4a 	bl	24554 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
   238c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   238c2:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
   238c6:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
    rt_origo.x = coords->x2 - radius - aa;
   238ca:	fa0f fb8b 	sxth.w	fp, fp
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
   238ce:	441a      	add	r2, r3
   238d0:	b212      	sxth	r2, r2
   238d2:	eb0b 0301 	add.w	r3, fp, r1
   238d6:	eba8 0101 	sub.w	r1, r8, r1
   238da:	9200      	str	r2, [sp, #0]
   238dc:	b21b      	sxth	r3, r3
   238de:	b209      	sxth	r1, r1
   238e0:	a818      	add	r0, sp, #96	; 0x60
   238e2:	f000 fe5c 	bl	2459e <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
   238e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   238e8:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   238ec:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
   238f0:	441a      	add	r2, r3
   238f2:	b212      	sxth	r2, r2
   238f4:	eb0b 0301 	add.w	r3, fp, r1
   238f8:	eba8 0101 	sub.w	r1, r8, r1
   238fc:	9200      	str	r2, [sp, #0]
   238fe:	b21b      	sxth	r3, r3
   23900:	b209      	sxth	r1, r1
   23902:	a81a      	add	r0, sp, #104	; 0x68
   23904:	f000 fe4b 	bl	2459e <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
   23908:	9b08      	ldr	r3, [sp, #32]
   2390a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
   2390e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
   23912:	1a9a      	subs	r2, r3, r2
   23914:	b212      	sxth	r2, r2
   23916:	eb0b 0301 	add.w	r3, fp, r1
   2391a:	eba8 0101 	sub.w	r1, r8, r1
   2391e:	9200      	str	r2, [sp, #0]
   23920:	b21b      	sxth	r3, r3
   23922:	b209      	sxth	r1, r1
   23924:	a816      	add	r0, sp, #88	; 0x58
   23926:	f000 fe3a 	bl	2459e <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
   2392a:	9b08      	ldr	r3, [sp, #32]
   2392c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   23930:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
   23934:	1a9a      	subs	r2, r3, r2
   23936:	b212      	sxth	r2, r2
   23938:	eb0b 0301 	add.w	r3, fp, r1
   2393c:	af14      	add	r7, sp, #80	; 0x50
   2393e:	eba8 0101 	sub.w	r1, r8, r1
   23942:	b21b      	sxth	r3, r3
   23944:	9200      	str	r2, [sp, #0]
   23946:	b209      	sxth	r1, r1
   23948:	4638      	mov	r0, r7
   2394a:	f000 fe28 	bl	2459e <lv_area_set>
    while(lv_circ_cont(&cir)) {
   2394e:	ab13      	add	r3, sp, #76	; 0x4c
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
   23950:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
                act_color = lv_color_mix(mcolor, gcolor, mix);
   23954:	b2eb      	uxtb	r3, r5
   23956:	930a      	str	r3, [sp, #40]	; 0x28
    while(lv_circ_cont(&cir)) {
   23958:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2395a:	f000 fe02 	bl	24562 <lv_circ_cont>
   2395e:	2800      	cmp	r0, #0
   23960:	f040 81c3 	bne.w	23cea <lv_draw_rect+0x562>
    if(mcolor.full == gcolor.full)
   23964:	42ac      	cmp	r4, r5
   23966:	f040 82bd 	bne.w	23ee4 <lv_draw_rect+0x75c>
        act_color = mcolor;
   2396a:	4622      	mov	r2, r4
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
   2396c:	4633      	mov	r3, r6
   2396e:	9905      	ldr	r1, [sp, #20]
   23970:	a814      	add	r0, sp, #80	; 0x50
   23972:	f7ff fdfd 	bl	23570 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
   23976:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   2397a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
   2397e:	4293      	cmp	r3, r2
   23980:	d008      	beq.n	23994 <lv_draw_rect+0x20c>
        if(mcolor.full == gcolor.full)
   23982:	42ac      	cmp	r4, r5
   23984:	f040 82c9 	bne.w	23f1a <lv_draw_rect+0x792>
            act_color = mcolor;
   23988:	4622      	mov	r2, r4
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
   2398a:	4633      	mov	r3, r6
   2398c:	9905      	ldr	r1, [sp, #20]
   2398e:	a816      	add	r0, sp, #88	; 0x58
   23990:	f7ff fdee 	bl	23570 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
   23994:	42ac      	cmp	r4, r5
   23996:	f040 82d9 	bne.w	23f4c <lv_draw_rect+0x7c4>
        act_color = mcolor;
   2399a:	4622      	mov	r2, r4
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
   2399c:	4633      	mov	r3, r6
   2399e:	9905      	ldr	r1, [sp, #20]
   239a0:	a818      	add	r0, sp, #96	; 0x60
   239a2:	f7ff fde5 	bl	23570 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
   239a6:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
   239aa:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
   239ae:	4293      	cmp	r3, r2
   239b0:	d008      	beq.n	239c4 <lv_draw_rect+0x23c>
        if(mcolor.full == gcolor.full)
   239b2:	42ac      	cmp	r4, r5
   239b4:	f040 82e5 	bne.w	23f82 <lv_draw_rect+0x7fa>
            act_color = mcolor;
   239b8:	4622      	mov	r2, r4
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
   239ba:	4633      	mov	r3, r6
   239bc:	9905      	ldr	r1, [sp, #20]
   239be:	a81a      	add	r0, sp, #104	; 0x68
   239c0:	f7ff fdd6 	bl	23570 <lv_draw_fill>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
   239c4:	9b06      	ldr	r3, [sp, #24]
   239c6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
   239ca:	2b00      	cmp	r3, #0
   239cc:	f000 8121 	beq.w	23c12 <lv_draw_rect+0x48a>
   239d0:	9b06      	ldr	r3, [sp, #24]
   239d2:	7d9b      	ldrb	r3, [r3, #22]
   239d4:	2b00      	cmp	r3, #0
   239d6:	f000 811c 	beq.w	23c12 <lv_draw_rect+0x48a>
   239da:	9b06      	ldr	r3, [sp, #24]
   239dc:	7ddb      	ldrb	r3, [r3, #23]
   239de:	2b0f      	cmp	r3, #15
   239e0:	f240 8117 	bls.w	23c12 <lv_draw_rect+0x48a>
    uint16_t radius = style->body.radius;
   239e4:	9b06      	ldr	r3, [sp, #24]
   239e6:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   239ea:	f7f5 fce9 	bl	193c0 <lv_refr_get_disp_refreshing>
   239ee:	f000 fd86 	bl	244fe <lv_disp_get_antialiasing>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   239f2:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   239f6:	f8b9 3000 	ldrh.w	r3, [r9]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   239fa:	f8b9 2006 	ldrh.w	r2, [r9, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   239fe:	3101      	adds	r1, #1
   23a00:	1ac9      	subs	r1, r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23a02:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   23a06:	3201      	adds	r2, #1
   23a08:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
   23a0a:	9b06      	ldr	r3, [sp, #24]
   23a0c:	f9b3 b014 	ldrsh.w	fp, [r3, #20]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
   23a10:	9b07      	ldr	r3, [sp, #28]
   23a12:	2bff      	cmp	r3, #255	; 0xff
   23a14:	9b06      	ldr	r3, [sp, #24]
   23a16:	7ddc      	ldrb	r4, [r3, #23]
   23a18:	bf1c      	itt	ne
   23a1a:	9b07      	ldrne	r3, [sp, #28]
   23a1c:	435c      	mulne	r4, r3
    lv_border_part_t part = style->body.border.part;
   23a1e:	9b06      	ldr	r3, [sp, #24]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   23a20:	4680      	mov	r8, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23a22:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
   23a24:	4650      	mov	r0, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23a26:	b212      	sxth	r2, r2
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
   23a28:	bf18      	it	ne
   23a2a:	0a24      	lsrne	r4, r4, #8
    lv_border_part_t part = style->body.border.part;
   23a2c:	7d9e      	ldrb	r6, [r3, #22]
    lv_color_t color      = style->body.border.color;
   23a2e:	691f      	ldr	r7, [r3, #16]
    radius = lv_draw_cont_radius_corr(radius, width, height);
   23a30:	f7ff fe6a 	bl	23708 <lv_draw_cont_radius_corr>
    bwidth--;
   23a34:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   23a38:	b22d      	sxth	r5, r5
    if(radius < bwidth) {
   23a3a:	42a8      	cmp	r0, r5
    radius = lv_draw_cont_radius_corr(radius, width, height);
   23a3c:	4682      	mov	sl, r0
    if(radius < bwidth) {
   23a3e:	f280 82b9 	bge.w	23fb4 <lv_draw_rect+0x82c>
        length_corr = bwidth - radius - aa;
   23a42:	eba5 0308 	sub.w	r3, r5, r8
   23a46:	1a1b      	subs	r3, r3, r0
   23a48:	b21b      	sxth	r3, r3
   23a4a:	9309      	str	r3, [sp, #36]	; 0x24
        corner_size = bwidth;
   23a4c:	462b      	mov	r3, r5
    if(style->body.radius == 0) {
   23a4e:	9a06      	ldr	r2, [sp, #24]
   23a50:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
   23a54:	f006 0102 	and.w	r1, r6, #2
   23a58:	9108      	str	r1, [sp, #32]
   23a5a:	2a00      	cmp	r2, #0
   23a5c:	f040 82b0 	bne.w	23fc0 <lv_draw_rect+0x838>
        if(part & LV_BORDER_TOP) {
   23a60:	b1a1      	cbz	r1, 23a8c <lv_draw_rect+0x304>
            work_area.x1 = coords->x1;
   23a62:	f8b9 3000 	ldrh.w	r3, [r9]
   23a66:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.x2 = coords->x2;
   23a6a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   23a6e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.y1 = coords->y1;
   23a72:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   23a76:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + bwidth;
   23a7a:	442b      	add	r3, r5
   23a7c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   23a80:	463a      	mov	r2, r7
   23a82:	4623      	mov	r3, r4
   23a84:	9905      	ldr	r1, [sp, #20]
   23a86:	a81a      	add	r0, sp, #104	; 0x68
   23a88:	f7ff fd72 	bl	23570 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
   23a8c:	0731      	lsls	r1, r6, #28
   23a8e:	d520      	bpl.n	23ad2 <lv_draw_rect+0x34a>
            work_area.x1 = coords->x2 - bwidth;
   23a90:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
            work_area.x2 = coords->x2;
   23a94:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - bwidth;
   23a98:	1b5a      	subs	r2, r3, r5
   23a9a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   23a9e:	9a08      	ldr	r2, [sp, #32]
   23aa0:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
            lv_draw_fill(&work_area, mask, color, opa);
   23aa4:	9905      	ldr	r1, [sp, #20]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   23aa6:	2a00      	cmp	r2, #0
   23aa8:	bf14      	ite	ne
   23aaa:	465a      	movne	r2, fp
   23aac:	2200      	moveq	r2, #0
   23aae:	4413      	add	r3, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
   23ab0:	f016 0f01 	tst.w	r6, #1
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   23ab4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
   23ab8:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23abc:	bf14      	ite	ne
   23abe:	465a      	movne	r2, fp
   23ac0:	2200      	moveq	r2, #0
   23ac2:	1a9b      	subs	r3, r3, r2
   23ac4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   23ac8:	463a      	mov	r2, r7
   23aca:	4623      	mov	r3, r4
   23acc:	a81a      	add	r0, sp, #104	; 0x68
   23ace:	f7ff fd4f 	bl	23570 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
   23ad2:	f016 0f04 	tst.w	r6, #4
   23ad6:	f006 0601 	and.w	r6, r6, #1
   23ada:	d020      	beq.n	23b1e <lv_draw_rect+0x396>
            work_area.x1 = coords->x1;
   23adc:	f9b9 3000 	ldrsh.w	r3, [r9]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   23ae0:	9a08      	ldr	r2, [sp, #32]
            work_area.x1 = coords->x1;
   23ae2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + bwidth;
   23ae6:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   23ae8:	2a00      	cmp	r2, #0
            work_area.x2 = coords->x1 + bwidth;
   23aea:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   23aee:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
            lv_draw_fill(&work_area, mask, color, opa);
   23af2:	9905      	ldr	r1, [sp, #20]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   23af4:	bf14      	ite	ne
   23af6:	465a      	movne	r2, fp
   23af8:	2200      	moveq	r2, #0
   23afa:	4413      	add	r3, r2
   23afc:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
   23b00:	2e00      	cmp	r6, #0
   23b02:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23b06:	bf08      	it	eq
   23b08:	f04f 0b00 	moveq.w	fp, #0
   23b0c:	eba3 0b0b 	sub.w	fp, r3, fp
            lv_draw_fill(&work_area, mask, color, opa);
   23b10:	463a      	mov	r2, r7
   23b12:	4623      	mov	r3, r4
   23b14:	a81a      	add	r0, sp, #104	; 0x68
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
   23b16:	f8ad b06e 	strh.w	fp, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   23b1a:	f7ff fd29 	bl	23570 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
   23b1e:	b1a6      	cbz	r6, 23b4a <lv_draw_rect+0x3c2>
            work_area.x1 = coords->x1;
   23b20:	f8b9 3000 	ldrh.w	r3, [r9]
   23b24:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.x2 = coords->x2;
   23b28:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   23b2c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.y1 = coords->y2 - bwidth;
   23b30:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23b34:	1b5d      	subs	r5, r3, r5
   23b36:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2;
   23b3a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   23b3e:	463a      	mov	r2, r7
   23b40:	4623      	mov	r3, r4
   23b42:	9905      	ldr	r1, [sp, #20]
   23b44:	a81a      	add	r0, sp, #104	; 0x68
   23b46:	f7ff fd13 	bl	23570 <lv_draw_fill>
        if(style->body.radius != 0) {
   23b4a:	9b06      	ldr	r3, [sp, #24]
   23b4c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
   23b50:	2c00      	cmp	r4, #0
   23b52:	d05e      	beq.n	23c12 <lv_draw_rect+0x48a>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   23b54:	f7f5 fc34 	bl	193c0 <lv_refr_get_disp_refreshing>
   23b58:	f000 fcd1 	bl	244fe <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
   23b5c:	9b06      	ldr	r3, [sp, #24]
   23b5e:	f8b9 2006 	ldrh.w	r2, [r9, #6]
   23b62:	f9b3 a014 	ldrsh.w	sl, [r3, #20]
    lv_color_t color      = style->body.border.color;
   23b66:	f8d3 b010 	ldr.w	fp, [r3, #16]
    lv_border_part_t part = style->body.border.part;
   23b6a:	7d9b      	ldrb	r3, [r3, #22]
   23b6c:	9308      	str	r3, [sp, #32]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
   23b6e:	9b07      	ldr	r3, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23b70:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   23b74:	2bff      	cmp	r3, #255	; 0xff
   23b76:	9b06      	ldr	r3, [sp, #24]
   23b78:	7ddd      	ldrb	r5, [r3, #23]
   23b7a:	bf1c      	itt	ne
   23b7c:	9b07      	ldrne	r3, [sp, #28]
   23b7e:	435d      	mulne	r5, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   23b80:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   23b84:	f102 0201 	add.w	r2, r2, #1
   23b88:	eba2 0203 	sub.w	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   23b8c:	f8b9 3000 	ldrh.w	r3, [r9]
   23b90:	f101 0101 	add.w	r1, r1, #1
   23b94:	eba1 0103 	sub.w	r1, r1, r3
    uint16_t radius       = style->body.radius;
   23b98:	b2a4      	uxth	r4, r4
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   23b9a:	4606      	mov	r6, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
   23b9c:	b212      	sxth	r2, r2
   23b9e:	b209      	sxth	r1, r1
   23ba0:	4620      	mov	r0, r4
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
   23ba2:	bf18      	it	ne
   23ba4:	0a2d      	lsrne	r5, r5, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
   23ba6:	f7ff fdaf 	bl	23708 <lv_draw_cont_radius_corr>
    lb_origo.y = coords->y2 - radius - aa;
   23baa:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    lt_origo.x = coords->x1 + radius + aa;
   23bae:	f8b9 7000 	ldrh.w	r7, [r9]
    lt_origo.y = coords->y1 + radius + aa;
   23bb2:	f8b9 8002 	ldrh.w	r8, [r9, #2]
    rt_origo.x = coords->x2 - radius - aa;
   23bb6:	f8b9 9004 	ldrh.w	r9, [r9, #4]
    lt_origo.x = coords->x1 + radius + aa;
   23bba:	b232      	sxth	r2, r6
   23bbc:	b204      	sxth	r4, r0
    lb_origo.y = coords->y2 - radius - aa;
   23bbe:	1a9b      	subs	r3, r3, r2
   23bc0:	1b1b      	subs	r3, r3, r4
    lt_origo.x = coords->x1 + radius + aa;
   23bc2:	4417      	add	r7, r2
    lt_origo.y = coords->y1 + radius + aa;
   23bc4:	4490      	add	r8, r2
    rt_origo.x = coords->x2 - radius - aa;
   23bc6:	eba9 0902 	sub.w	r9, r9, r2
    lv_circ_init(&cir_out, &tmp_out, radius);
   23bca:	a913      	add	r1, sp, #76	; 0x4c
   23bcc:	4622      	mov	r2, r4
   23bce:	a816      	add	r0, sp, #88	; 0x58
    lb_origo.y = coords->y2 - radius - aa;
   23bd0:	b21e      	sxth	r6, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
   23bd2:	f000 fcbf 	bl	24554 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
   23bd6:	f1ca 0201 	rsb	r2, sl, #1
   23bda:	4422      	add	r2, r4
   23bdc:	b212      	sxth	r2, r2
    lv_circ_init(&cir_in, &tmp_in, radius_in);
   23bde:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   23be2:	a914      	add	r1, sp, #80	; 0x50
   23be4:	a818      	add	r0, sp, #96	; 0x60
   23be6:	f000 fcb5 	bl	24554 <lv_circ_init>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   23bea:	9b08      	ldr	r3, [sp, #32]
    lt_origo.x = coords->x1 + radius + aa;
   23bec:	4427      	add	r7, r4
    lt_origo.y = coords->y1 + radius + aa;
   23bee:	44a0      	add	r8, r4
    rt_origo.x = coords->x2 - radius - aa;
   23bf0:	eba9 0904 	sub.w	r9, r9, r4
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   23bf4:	f003 0309 	and.w	r3, r3, #9
    lt_origo.x = coords->x1 + radius + aa;
   23bf8:	b23f      	sxth	r7, r7
    lt_origo.y = coords->y1 + radius + aa;
   23bfa:	fa0f f888 	sxth.w	r8, r8
    rt_origo.x = coords->x2 - radius - aa;
   23bfe:	fa0f f989 	sxth.w	r9, r9
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   23c02:	9306      	str	r3, [sp, #24]
    while(cir_out.y <= cir_out.x) {
   23c04:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   23c08:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
   23c0c:	429a      	cmp	r2, r3
   23c0e:	f280 8330 	bge.w	24272 <lv_draw_rect+0xaea>
}
   23c12:	b01d      	add	sp, #116	; 0x74
   23c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    work_area.x1 = coords->x1;
   23c18:	f8b9 3000 	ldrh.w	r3, [r9]
   23c1c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    work_area.x2 = coords->x2;
   23c20:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   23c24:	f8b9 5006 	ldrh.w	r5, [r9, #6]
   23c28:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    if(mcolor.full == gcolor.full) {
   23c2c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   23c30:	9a06      	ldr	r2, [sp, #24]
   23c32:	b200      	sxth	r0, r0
   23c34:	4403      	add	r3, r0
   23c36:	45d0      	cmp	r8, sl
   23c38:	eba5 0000 	sub.w	r0, r5, r0
   23c3c:	b21b      	sxth	r3, r3
   23c3e:	b205      	sxth	r5, r0
   23c40:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
   23c44:	d117      	bne.n	23c76 <lv_draw_rect+0x4ee>
        work_area.y1 = coords->y1 + radius;
   23c46:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        work_area.y2 = coords->y2 - radius;
   23c4a:	f8ad 506e 	strh.w	r5, [sp, #110]	; 0x6e
        if(style->body.radius != 0) {
   23c4e:	b132      	cbz	r2, 23c5e <lv_draw_rect+0x4d6>
            if(aa) {
   23c50:	b164      	cbz	r4, 23c6c <lv_draw_rect+0x4e4>
                work_area.y1 += 2;
   23c52:	1c9c      	adds	r4, r3, #2
   23c54:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
                work_area.y2 -= 2;
   23c58:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
   23c5a:	f8ad 506e 	strh.w	r5, [sp, #110]	; 0x6e
        lv_draw_fill(&work_area, mask, mcolor, opa);
   23c5e:	463b      	mov	r3, r7
   23c60:	4642      	mov	r2, r8
   23c62:	9905      	ldr	r1, [sp, #20]
   23c64:	a81a      	add	r0, sp, #104	; 0x68
   23c66:	f7ff fc83 	bl	23570 <lv_draw_fill>
   23c6a:	e5da      	b.n	23822 <lv_draw_rect+0x9a>
                work_area.y1 += 1;
   23c6c:	1c5c      	adds	r4, r3, #1
   23c6e:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
                work_area.y2 -= 1;
   23c72:	3d01      	subs	r5, #1
   23c74:	e7f1      	b.n	23c5a <lv_draw_rect+0x4d2>
        if(style->body.radius != 0) {
   23c76:	b122      	cbz	r2, 23c82 <lv_draw_rect+0x4fa>
            if(aa) {
   23c78:	b39c      	cbz	r4, 23ce2 <lv_draw_rect+0x55a>
                row_start += 2;
   23c7a:	1c9c      	adds	r4, r3, #2
   23c7c:	b223      	sxth	r3, r4
                row_end -= 2;
   23c7e:	3d02      	subs	r5, #2
                row_end -= 1;
   23c80:	b22d      	sxth	r5, r5
        if(row_start < 0) row_start = 0;
   23c82:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
            act_color    = lv_color_mix(mcolor, gcolor, mix);
   23c86:	fa5f f38a 	uxtb.w	r3, sl
   23c8a:	9308      	str	r3, [sp, #32]
   23c8c:	f3c8 4307 	ubfx	r3, r8, #16, #8
   23c90:	9309      	str	r3, [sp, #36]	; 0x24
   23c92:	f3c8 2b07 	ubfx	fp, r8, #8, #8
        for(row = row_start; row <= row_end; row++) {
   23c96:	42ac      	cmp	r4, r5
   23c98:	f73f adc3 	bgt.w	23822 <lv_draw_rect+0x9a>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
   23c9c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
            work_area.y1 = row;
   23ca0:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
   23ca4:	1b1b      	subs	r3, r3, r4
   23ca6:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23caa:	fbb3 f3f6 	udiv	r3, r3, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
   23cae:	b2db      	uxtb	r3, r3
   23cb0:	9302      	str	r3, [sp, #8]
   23cb2:	f3ca 4307 	ubfx	r3, sl, #16, #8
   23cb6:	9301      	str	r3, [sp, #4]
   23cb8:	f3ca 2307 	ubfx	r3, sl, #8, #8
   23cbc:	9300      	str	r3, [sp, #0]
   23cbe:	4659      	mov	r1, fp
   23cc0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   23cc4:	fa5f f088 	uxtb.w	r0, r8
            work_area.y2 = row;
   23cc8:	f8ad 406e 	strh.w	r4, [sp, #110]	; 0x6e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
   23ccc:	f7ff fd37 	bl	2373e <lv_color_mix.isra.0>
        for(row = row_start; row <= row_end; row++) {
   23cd0:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
   23cd2:	4602      	mov	r2, r0
   23cd4:	463b      	mov	r3, r7
   23cd6:	9905      	ldr	r1, [sp, #20]
   23cd8:	a81a      	add	r0, sp, #104	; 0x68
   23cda:	f7ff fc49 	bl	23570 <lv_draw_fill>
        for(row = row_start; row <= row_end; row++) {
   23cde:	b224      	sxth	r4, r4
   23ce0:	e7d9      	b.n	23c96 <lv_draw_rect+0x50e>
                row_start += 1;
   23ce2:	1c5c      	adds	r4, r3, #1
   23ce4:	b223      	sxth	r3, r4
                row_end -= 1;
   23ce6:	3d01      	subs	r5, #1
   23ce8:	e7ca      	b.n	23c80 <lv_draw_rect+0x4f8>
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
   23cea:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
   23cee:	f9bd 704e 	ldrsh.w	r7, [sp, #78]	; 0x4e
   23cf2:	930d      	str	r3, [sp, #52]	; 0x34
   23cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
   23cf6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
   23cfa:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
   23cfe:	18fb      	adds	r3, r7, r3
   23d00:	930e      	str	r3, [sp, #56]	; 0x38
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
   23d02:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
   23d06:	930f      	str	r3, [sp, #60]	; 0x3c
   23d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23d0a:	4413      	add	r3, r2
   23d0c:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
   23d0e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   23d12:	9311      	str	r3, [sp, #68]	; 0x44
   23d14:	9b08      	ldr	r3, [sp, #32]
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
   23d16:	1a9a      	subs	r2, r3, r2
   23d18:	4291      	cmp	r1, r2
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
   23d1a:	eba3 0707 	sub.w	r7, r3, r7
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
   23d1e:	d007      	beq.n	23d30 <lv_draw_rect+0x5a8>
            if(mcolor.full == gcolor.full)
   23d20:	42ac      	cmp	r4, r5
   23d22:	d175      	bne.n	23e10 <lv_draw_rect+0x688>
                act_color = mcolor;
   23d24:	4622      	mov	r2, r4
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
   23d26:	4633      	mov	r3, r6
   23d28:	9905      	ldr	r1, [sp, #20]
   23d2a:	980c      	ldr	r0, [sp, #48]	; 0x30
   23d2c:	f7ff fc20 	bl	23570 <lv_draw_fill>
        if(mid_top_refr != 0) {
   23d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
   23d32:	42bb      	cmp	r3, r7
   23d34:	d008      	beq.n	23d48 <lv_draw_rect+0x5c0>
            if(mcolor.full == gcolor.full)
   23d36:	42ac      	cmp	r4, r5
   23d38:	f040 8083 	bne.w	23e42 <lv_draw_rect+0x6ba>
                act_color = mcolor;
   23d3c:	4622      	mov	r2, r4
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
   23d3e:	4633      	mov	r3, r6
   23d40:	9905      	ldr	r1, [sp, #20]
   23d42:	a816      	add	r0, sp, #88	; 0x58
   23d44:	f7ff fc14 	bl	23570 <lv_draw_fill>
        if(mid_bot_refr != 0) {
   23d48:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
   23d4c:	4293      	cmp	r3, r2
   23d4e:	d008      	beq.n	23d62 <lv_draw_rect+0x5da>
            if(mcolor.full == gcolor.full)
   23d50:	42ac      	cmp	r4, r5
   23d52:	f040 8091 	bne.w	23e78 <lv_draw_rect+0x6f0>
                act_color = mcolor;
   23d56:	4622      	mov	r2, r4
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
   23d58:	4633      	mov	r3, r6
   23d5a:	9905      	ldr	r1, [sp, #20]
   23d5c:	a818      	add	r0, sp, #96	; 0x60
   23d5e:	f7ff fc07 	bl	23570 <lv_draw_fill>
        if(edge_bot_refr != 0) {
   23d62:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   23d66:	4293      	cmp	r3, r2
   23d68:	d008      	beq.n	23d7c <lv_draw_rect+0x5f4>
            if(mcolor.full == gcolor.full)
   23d6a:	42ac      	cmp	r4, r5
   23d6c:	f040 809f 	bne.w	23eae <lv_draw_rect+0x726>
                act_color = mcolor;
   23d70:	4622      	mov	r2, r4
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
   23d72:	4633      	mov	r3, r6
   23d74:	9905      	ldr	r1, [sp, #20]
   23d76:	a81a      	add	r0, sp, #104	; 0x68
   23d78:	f7ff fbfa 	bl	23570 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
   23d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23d7e:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
   23d82:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
   23d86:	441a      	add	r2, r3
   23d88:	b212      	sxth	r2, r2
   23d8a:	eb0b 0301 	add.w	r3, fp, r1
   23d8e:	eba8 0101 	sub.w	r1, r8, r1
   23d92:	9200      	str	r2, [sp, #0]
   23d94:	a818      	add	r0, sp, #96	; 0x60
   23d96:	b21b      	sxth	r3, r3
   23d98:	b209      	sxth	r1, r1
   23d9a:	f000 fc00 	bl	2459e <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
   23d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23da0:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   23da4:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
   23da8:	441a      	add	r2, r3
   23daa:	b212      	sxth	r2, r2
   23dac:	eb0b 0301 	add.w	r3, fp, r1
   23db0:	eba8 0101 	sub.w	r1, r8, r1
   23db4:	9200      	str	r2, [sp, #0]
   23db6:	a81a      	add	r0, sp, #104	; 0x68
   23db8:	b21b      	sxth	r3, r3
   23dba:	b209      	sxth	r1, r1
   23dbc:	f000 fbef 	bl	2459e <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
   23dc0:	9b08      	ldr	r3, [sp, #32]
   23dc2:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
   23dc6:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
   23dca:	1a9a      	subs	r2, r3, r2
   23dcc:	b212      	sxth	r2, r2
   23dce:	eb0b 0301 	add.w	r3, fp, r1
   23dd2:	eba8 0101 	sub.w	r1, r8, r1
   23dd6:	9200      	str	r2, [sp, #0]
   23dd8:	a816      	add	r0, sp, #88	; 0x58
   23dda:	b21b      	sxth	r3, r3
   23ddc:	b209      	sxth	r1, r1
   23dde:	f000 fbde 	bl	2459e <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
   23de2:	9b08      	ldr	r3, [sp, #32]
   23de4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   23de8:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
   23dec:	980c      	ldr	r0, [sp, #48]	; 0x30
   23dee:	1a9a      	subs	r2, r3, r2
   23df0:	b212      	sxth	r2, r2
   23df2:	eb0b 0301 	add.w	r3, fp, r1
   23df6:	eba8 0101 	sub.w	r1, r8, r1
   23dfa:	9200      	str	r2, [sp, #0]
   23dfc:	b21b      	sxth	r3, r3
   23dfe:	b209      	sxth	r1, r1
   23e00:	f000 fbcd 	bl	2459e <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
   23e04:	f10d 014a 	add.w	r1, sp, #74	; 0x4a
   23e08:	980b      	ldr	r0, [sp, #44]	; 0x2c
   23e0a:	f000 fbb3 	bl	24574 <lv_circ_next>
   23e0e:	e5a3      	b.n	23958 <lv_draw_rect+0x1d0>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
   23e10:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23e14:	1a5b      	subs	r3, r3, r1
   23e16:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23e1a:	fbb3 f3fa 	udiv	r3, r3, sl
                act_color = lv_color_mix(mcolor, gcolor, mix);
   23e1e:	b2db      	uxtb	r3, r3
   23e20:	9302      	str	r3, [sp, #8]
   23e22:	f3c5 4307 	ubfx	r3, r5, #16, #8
   23e26:	9301      	str	r3, [sp, #4]
   23e28:	f3c5 2307 	ubfx	r3, r5, #8, #8
   23e2c:	9300      	str	r3, [sp, #0]
   23e2e:	f3c4 4207 	ubfx	r2, r4, #16, #8
   23e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23e34:	f3c4 2107 	ubfx	r1, r4, #8, #8
   23e38:	b2e0      	uxtb	r0, r4
   23e3a:	f7ff fc80 	bl	2373e <lv_color_mix.isra.0>
   23e3e:	4602      	mov	r2, r0
   23e40:	e771      	b.n	23d26 <lv_draw_rect+0x59e>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
   23e42:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23e46:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   23e4a:	1a9b      	subs	r3, r3, r2
   23e4c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23e50:	fbb3 f3fa 	udiv	r3, r3, sl
                act_color = lv_color_mix(mcolor, gcolor, mix);
   23e54:	b2db      	uxtb	r3, r3
   23e56:	9302      	str	r3, [sp, #8]
   23e58:	f3c5 4307 	ubfx	r3, r5, #16, #8
   23e5c:	9301      	str	r3, [sp, #4]
   23e5e:	f3c5 2307 	ubfx	r3, r5, #8, #8
   23e62:	9300      	str	r3, [sp, #0]
   23e64:	f3c4 4207 	ubfx	r2, r4, #16, #8
   23e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23e6a:	f3c4 2107 	ubfx	r1, r4, #8, #8
   23e6e:	b2e0      	uxtb	r0, r4
   23e70:	f7ff fc65 	bl	2373e <lv_color_mix.isra.0>
   23e74:	4602      	mov	r2, r0
   23e76:	e762      	b.n	23d3e <lv_draw_rect+0x5b6>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
   23e78:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23e7c:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   23e80:	1a9b      	subs	r3, r3, r2
   23e82:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23e86:	fbb3 f3fa 	udiv	r3, r3, sl
                act_color = lv_color_mix(mcolor, gcolor, mix);
   23e8a:	b2db      	uxtb	r3, r3
   23e8c:	9302      	str	r3, [sp, #8]
   23e8e:	f3c5 4307 	ubfx	r3, r5, #16, #8
   23e92:	9301      	str	r3, [sp, #4]
   23e94:	f3c5 2307 	ubfx	r3, r5, #8, #8
   23e98:	9300      	str	r3, [sp, #0]
   23e9a:	f3c4 4207 	ubfx	r2, r4, #16, #8
   23e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23ea0:	f3c4 2107 	ubfx	r1, r4, #8, #8
   23ea4:	b2e0      	uxtb	r0, r4
   23ea6:	f7ff fc4a 	bl	2373e <lv_color_mix.isra.0>
   23eaa:	4602      	mov	r2, r0
   23eac:	e754      	b.n	23d58 <lv_draw_rect+0x5d0>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
   23eae:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23eb2:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
   23eb6:	1a9b      	subs	r3, r3, r2
   23eb8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23ebc:	fbb3 f3fa 	udiv	r3, r3, sl
                act_color = lv_color_mix(mcolor, gcolor, mix);
   23ec0:	b2db      	uxtb	r3, r3
   23ec2:	9302      	str	r3, [sp, #8]
   23ec4:	f3c5 4307 	ubfx	r3, r5, #16, #8
   23ec8:	9301      	str	r3, [sp, #4]
   23eca:	f3c5 2307 	ubfx	r3, r5, #8, #8
   23ece:	9300      	str	r3, [sp, #0]
   23ed0:	f3c4 4207 	ubfx	r2, r4, #16, #8
   23ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23ed6:	f3c4 2107 	ubfx	r1, r4, #8, #8
   23eda:	b2e0      	uxtb	r0, r4
   23edc:	f7ff fc2f 	bl	2373e <lv_color_mix.isra.0>
   23ee0:	4602      	mov	r2, r0
   23ee2:	e746      	b.n	23d72 <lv_draw_rect+0x5ea>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
   23ee4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23ee8:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
   23eec:	1a9b      	subs	r3, r3, r2
   23eee:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23ef2:	fbb3 f3fa 	udiv	r3, r3, sl
        act_color = lv_color_mix(mcolor, gcolor, mix);
   23ef6:	b2db      	uxtb	r3, r3
   23ef8:	9302      	str	r3, [sp, #8]
   23efa:	f3c5 4307 	ubfx	r3, r5, #16, #8
   23efe:	9301      	str	r3, [sp, #4]
   23f00:	f3c5 2307 	ubfx	r3, r5, #8, #8
   23f04:	9300      	str	r3, [sp, #0]
   23f06:	f3c4 4207 	ubfx	r2, r4, #16, #8
   23f0a:	b2eb      	uxtb	r3, r5
   23f0c:	f3c4 2107 	ubfx	r1, r4, #8, #8
   23f10:	b2e0      	uxtb	r0, r4
   23f12:	f7ff fc14 	bl	2373e <lv_color_mix.isra.0>
   23f16:	4602      	mov	r2, r0
   23f18:	e528      	b.n	2396c <lv_draw_rect+0x1e4>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
   23f1a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23f1e:	1a9b      	subs	r3, r3, r2
   23f20:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23f24:	fbb3 f3fa 	udiv	r3, r3, sl
            act_color = lv_color_mix(mcolor, gcolor, mix);
   23f28:	b2db      	uxtb	r3, r3
   23f2a:	9302      	str	r3, [sp, #8]
   23f2c:	f3c5 4307 	ubfx	r3, r5, #16, #8
   23f30:	9301      	str	r3, [sp, #4]
   23f32:	f3c5 2307 	ubfx	r3, r5, #8, #8
   23f36:	9300      	str	r3, [sp, #0]
   23f38:	f3c4 4207 	ubfx	r2, r4, #16, #8
   23f3c:	b2eb      	uxtb	r3, r5
   23f3e:	f3c4 2107 	ubfx	r1, r4, #8, #8
   23f42:	b2e0      	uxtb	r0, r4
   23f44:	f7ff fbfb 	bl	2373e <lv_color_mix.isra.0>
   23f48:	4602      	mov	r2, r0
   23f4a:	e51e      	b.n	2398a <lv_draw_rect+0x202>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
   23f4c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23f50:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   23f54:	1a9b      	subs	r3, r3, r2
   23f56:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23f5a:	fbb3 f3fa 	udiv	r3, r3, sl
        act_color = lv_color_mix(mcolor, gcolor, mix);
   23f5e:	b2db      	uxtb	r3, r3
   23f60:	9302      	str	r3, [sp, #8]
   23f62:	f3c5 4307 	ubfx	r3, r5, #16, #8
   23f66:	9301      	str	r3, [sp, #4]
   23f68:	f3c5 2307 	ubfx	r3, r5, #8, #8
   23f6c:	9300      	str	r3, [sp, #0]
   23f6e:	f3c4 4207 	ubfx	r2, r4, #16, #8
   23f72:	b2eb      	uxtb	r3, r5
   23f74:	f3c4 2107 	ubfx	r1, r4, #8, #8
   23f78:	b2e0      	uxtb	r0, r4
   23f7a:	f7ff fbe0 	bl	2373e <lv_color_mix.isra.0>
   23f7e:	4602      	mov	r2, r0
   23f80:	e50c      	b.n	2399c <lv_draw_rect+0x214>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
   23f82:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23f86:	1a9b      	subs	r3, r3, r2
   23f88:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   23f8c:	fbb3 f3fa 	udiv	r3, r3, sl
            act_color = lv_color_mix(mcolor, gcolor, mix);
   23f90:	b2db      	uxtb	r3, r3
   23f92:	9302      	str	r3, [sp, #8]
   23f94:	f3c5 4307 	ubfx	r3, r5, #16, #8
   23f98:	9301      	str	r3, [sp, #4]
   23f9a:	f3c5 2307 	ubfx	r3, r5, #8, #8
   23f9e:	9300      	str	r3, [sp, #0]
   23fa0:	f3c4 4207 	ubfx	r2, r4, #16, #8
   23fa4:	b2eb      	uxtb	r3, r5
   23fa6:	f3c4 2107 	ubfx	r1, r4, #8, #8
   23faa:	b2e0      	uxtb	r0, r4
   23fac:	f7ff fbc7 	bl	2373e <lv_color_mix.isra.0>
   23fb0:	4602      	mov	r2, r0
   23fb2:	e502      	b.n	239ba <lv_draw_rect+0x232>
        corner_size = radius + aa;
   23fb4:	eb00 0308 	add.w	r3, r0, r8
    lv_coord_t length_corr = 0;
   23fb8:	2200      	movs	r2, #0
        corner_size = radius + aa;
   23fba:	b21b      	sxth	r3, r3
    lv_coord_t length_corr = 0;
   23fbc:	9209      	str	r2, [sp, #36]	; 0x24
   23fbe:	e546      	b.n	23a4e <lv_draw_rect+0x2c6>
    if(part & LV_BORDER_TOP)
   23fc0:	9a08      	ldr	r2, [sp, #32]
    corner_size++;
   23fc2:	f103 0b01 	add.w	fp, r3, #1
   23fc6:	fa0f fb8b 	sxth.w	fp, fp
    if(part & LV_BORDER_TOP)
   23fca:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   23fce:	2a00      	cmp	r2, #0
   23fd0:	f000 814d 	beq.w	2426e <lv_draw_rect+0xae6>
        work_area.y1 = coords->y1 + corner_size;
   23fd4:	445b      	add	r3, fp
        work_area.y1 = coords->y1 + radius;
   23fd6:	b21b      	sxth	r3, r3
   23fd8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(part & LV_BORDER_BOTTOM)
   23fdc:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   23fe0:	f016 0201 	ands.w	r2, r6, #1
        work_area.y2 = coords->y2 - corner_size;
   23fe4:	bf14      	ite	ne
   23fe6:	eba3 030b 	subne.w	r3, r3, fp
        work_area.y2 = coords->y2 - radius;
   23fea:	eba3 030a 	subeq.w	r3, r3, sl
    if(part & LV_BORDER_BOTTOM)
   23fee:	920a      	str	r2, [sp, #40]	; 0x28
        work_area.y2 = coords->y2 - radius;
   23ff0:	b21b      	sxth	r3, r3
    if(part & LV_BORDER_LEFT) {
   23ff2:	0772      	lsls	r2, r6, #29
   23ff4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
   23ff8:	d50c      	bpl.n	24014 <lv_draw_rect+0x88c>
        work_area.x1 = coords->x1;
   23ffa:	f9b9 3000 	ldrsh.w	r3, [r9]
   23ffe:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        work_area.x2 = work_area.x1 + bwidth;
   24002:	442b      	add	r3, r5
   24004:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        lv_draw_fill(&work_area, mask, color, opa);
   24008:	463a      	mov	r2, r7
   2400a:	4623      	mov	r3, r4
   2400c:	9905      	ldr	r1, [sp, #20]
   2400e:	a81a      	add	r0, sp, #104	; 0x68
   24010:	f7ff faae 	bl	23570 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
   24014:	0733      	lsls	r3, r6, #28
   24016:	d50c      	bpl.n	24032 <lv_draw_rect+0x8aa>
   24018:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
        work_area.x2 = coords->x2;
   2401c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        work_area.x1 = work_area.x2 - bwidth;
   24020:	1b5b      	subs	r3, r3, r5
   24022:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        lv_draw_fill(&work_area, mask, color, opa);
   24026:	463a      	mov	r2, r7
   24028:	4623      	mov	r3, r4
   2402a:	9905      	ldr	r1, [sp, #20]
   2402c:	a81a      	add	r0, sp, #104	; 0x68
   2402e:	f7ff fa9f 	bl	23570 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
   24032:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24034:	f8b9 2000 	ldrh.w	r2, [r9]
   24038:	ebab 0303 	sub.w	r3, fp, r3
   2403c:	4413      	add	r3, r2
   2403e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    work_area.x2 = coords->x2 - corner_size + length_corr;
   24042:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24044:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   24048:	4413      	add	r3, r2
   2404a:	eba3 0b0b 	sub.w	fp, r3, fp
    if(part & LV_BORDER_TOP) {
   2404e:	9b08      	ldr	r3, [sp, #32]
    work_area.x2 = coords->x2 - corner_size + length_corr;
   24050:	f8ad b06c 	strh.w	fp, [sp, #108]	; 0x6c
    if(part & LV_BORDER_TOP) {
   24054:	b163      	cbz	r3, 24070 <lv_draw_rect+0x8e8>
        work_area.y1 = coords->y1;
   24056:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   2405a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        work_area.y2 = coords->y1 + bwidth;
   2405e:	442b      	add	r3, r5
   24060:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        lv_draw_fill(&work_area, mask, color, opa);
   24064:	463a      	mov	r2, r7
   24066:	4623      	mov	r3, r4
   24068:	9905      	ldr	r1, [sp, #20]
   2406a:	a81a      	add	r0, sp, #104	; 0x68
   2406c:	f7ff fa80 	bl	23570 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
   24070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24072:	b163      	cbz	r3, 2408e <lv_draw_rect+0x906>
        work_area.y2 = coords->y2;
   24074:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   24078:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        work_area.y1 = work_area.y2 - bwidth;
   2407c:	1b5b      	subs	r3, r3, r5
   2407e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_fill(&work_area, mask, color, opa);
   24082:	463a      	mov	r2, r7
   24084:	4623      	mov	r3, r4
   24086:	9905      	ldr	r1, [sp, #20]
   24088:	a81a      	add	r0, sp, #104	; 0x68
   2408a:	f7ff fa71 	bl	23570 <lv_draw_fill>
    if(length_corr != 0) {
   2408e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24090:	2b00      	cmp	r3, #0
   24092:	f000 8086 	beq.w	241a2 <lv_draw_rect+0xa1a>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
   24096:	f006 0306 	and.w	r3, r6, #6
   2409a:	2b06      	cmp	r3, #6
   2409c:	d11c      	bne.n	240d8 <lv_draw_rect+0x950>
            work_area.x1 = coords->x1;
   2409e:	f9b9 3000 	ldrsh.w	r3, [r9]
   240a2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + radius + aa;
   240a6:	fa0f f188 	sxth.w	r1, r8
   240aa:	fa0f f28a 	sxth.w	r2, sl
   240ae:	440b      	add	r3, r1
   240b0:	4413      	add	r3, r2
   240b2:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.y1 = coords->y1 + radius + 1 + aa;
   240b6:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
            work_area.x2 = coords->x1 + radius + aa;
   240ba:	4610      	mov	r0, r2
            work_area.y1 = coords->y1 + radius + 1 + aa;
   240bc:	1c5a      	adds	r2, r3, #1
   240be:	4411      	add	r1, r2
   240c0:	1842      	adds	r2, r0, r1
            work_area.y2 = coords->y1 + bwidth;
   240c2:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + radius + 1 + aa;
   240c4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + bwidth;
   240c8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   240cc:	463a      	mov	r2, r7
   240ce:	4623      	mov	r3, r4
   240d0:	9905      	ldr	r1, [sp, #20]
   240d2:	a81a      	add	r0, sp, #104	; 0x68
   240d4:	f7ff fa4c 	bl	23570 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
   240d8:	f006 030a 	and.w	r3, r6, #10
   240dc:	2b0a      	cmp	r3, #10
   240de:	d11d      	bne.n	2411c <lv_draw_rect+0x994>
            work_area.x1 = coords->x2 - radius - aa;
   240e0:	f9b9 c004 	ldrsh.w	ip, [r9, #4]
            work_area.x2 = coords->x2;
   240e4:	f8ad c06c 	strh.w	ip, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - radius - aa;
   240e8:	fa0f f188 	sxth.w	r1, r8
   240ec:	fa0f f28a 	sxth.w	r2, sl
   240f0:	ebac 0301 	sub.w	r3, ip, r1
   240f4:	1a9b      	subs	r3, r3, r2
   240f6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.y1 = coords->y1 + radius + 1 + aa;
   240fa:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
            work_area.x1 = coords->x2 - radius - aa;
   240fe:	4610      	mov	r0, r2
            work_area.y1 = coords->y1 + radius + 1 + aa;
   24100:	1c5a      	adds	r2, r3, #1
   24102:	4411      	add	r1, r2
   24104:	1842      	adds	r2, r0, r1
            work_area.y2 = coords->y1 + bwidth;
   24106:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + radius + 1 + aa;
   24108:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + bwidth;
   2410c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   24110:	463a      	mov	r2, r7
   24112:	4623      	mov	r3, r4
   24114:	9905      	ldr	r1, [sp, #20]
   24116:	a81a      	add	r0, sp, #104	; 0x68
   24118:	f7ff fa2a 	bl	23570 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
   2411c:	f006 0305 	and.w	r3, r6, #5
   24120:	2b05      	cmp	r3, #5
   24122:	d11c      	bne.n	2415e <lv_draw_rect+0x9d6>
            work_area.x1 = coords->x1;
   24124:	f9b9 2000 	ldrsh.w	r2, [r9]
   24128:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + radius + aa;
   2412c:	fa0f f088 	sxth.w	r0, r8
   24130:	fa0f f38a 	sxth.w	r3, sl
   24134:	4402      	add	r2, r0
   24136:	4619      	mov	r1, r3
   24138:	441a      	add	r2, r3
            work_area.y1 = coords->y2 - bwidth;
   2413a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
            work_area.x2 = coords->x1 + radius + aa;
   2413e:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            work_area.y1 = coords->y2 - bwidth;
   24142:	1b5a      	subs	r2, r3, r5
            work_area.y2 = coords->y2 - radius - 1 - aa;
   24144:	3b01      	subs	r3, #1
   24146:	1a1b      	subs	r3, r3, r0
   24148:	1a5b      	subs	r3, r3, r1
            work_area.y1 = coords->y2 - bwidth;
   2414a:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2 - radius - 1 - aa;
   2414e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   24152:	463a      	mov	r2, r7
   24154:	4623      	mov	r3, r4
   24156:	9905      	ldr	r1, [sp, #20]
   24158:	a81a      	add	r0, sp, #104	; 0x68
   2415a:	f7ff fa09 	bl	23570 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   2415e:	f006 0309 	and.w	r3, r6, #9
   24162:	2b09      	cmp	r3, #9
   24164:	d11d      	bne.n	241a2 <lv_draw_rect+0xa1a>
            work_area.x1 = coords->x2 - radius - aa;
   24166:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
            work_area.x2 = coords->x2;
   2416a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - radius - aa;
   2416e:	fa0f f188 	sxth.w	r1, r8
   24172:	1a5a      	subs	r2, r3, r1
            work_area.y1 = coords->y2 - bwidth;
   24174:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
            work_area.x1 = coords->x2 - radius - aa;
   24178:	fa0f fa8a 	sxth.w	sl, sl
            work_area.y1 = coords->y2 - bwidth;
   2417c:	1b5d      	subs	r5, r3, r5
            work_area.y2 = coords->y2 - radius - 1 - aa;
   2417e:	3b01      	subs	r3, #1
            work_area.x1 = coords->x2 - radius - aa;
   24180:	eba2 020a 	sub.w	r2, r2, sl
            work_area.y2 = coords->y2 - radius - 1 - aa;
   24184:	1a5b      	subs	r3, r3, r1
   24186:	eba3 0a0a 	sub.w	sl, r3, sl
            work_area.x1 = coords->x2 - radius - aa;
   2418a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            lv_draw_fill(&work_area, mask, color, opa);
   2418e:	4623      	mov	r3, r4
   24190:	463a      	mov	r2, r7
   24192:	9905      	ldr	r1, [sp, #20]
            work_area.y1 = coords->y2 - bwidth;
   24194:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
            lv_draw_fill(&work_area, mask, color, opa);
   24198:	a81a      	add	r0, sp, #104	; 0x68
            work_area.y2 = coords->y2 - radius - 1 - aa;
   2419a:	f8ad a06e 	strh.w	sl, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   2419e:	f7ff f9e7 	bl	23570 <lv_draw_fill>
    if(style->body.radius == 0) {
   241a2:	9b06      	ldr	r3, [sp, #24]
   241a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   241a8:	2b00      	cmp	r3, #0
   241aa:	f47f acce 	bne.w	23b4a <lv_draw_rect+0x3c2>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
   241ae:	f016 0f06 	tst.w	r6, #6
   241b2:	d015      	beq.n	241e0 <lv_draw_rect+0xa58>
            work_area.x1 = coords->x1;
   241b4:	f9b9 2000 	ldrsh.w	r2, [r9]
   241b8:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + aa;
   241bc:	fa0f f388 	sxth.w	r3, r8
   241c0:	441a      	add	r2, r3
   241c2:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            work_area.y1 = coords->y1;
   241c6:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
   241ca:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + aa;
   241ce:	4413      	add	r3, r2
   241d0:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   241d4:	463a      	mov	r2, r7
   241d6:	4623      	mov	r3, r4
   241d8:	9905      	ldr	r1, [sp, #20]
   241da:	a81a      	add	r0, sp, #104	; 0x68
   241dc:	f7ff f9c8 	bl	23570 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
   241e0:	f016 0f0a 	tst.w	r6, #10
   241e4:	d015      	beq.n	24212 <lv_draw_rect+0xa8a>
            work_area.x1 = coords->x2 - aa;
   241e6:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
            work_area.x2 = coords->x2;
   241ea:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - aa;
   241ee:	fa0f f388 	sxth.w	r3, r8
   241f2:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
   241f4:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
            work_area.x1 = coords->x2 - aa;
   241f8:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
            work_area.y2 = coords->y1 + aa;
   241fc:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
   241fe:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + aa;
   24202:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   24206:	463a      	mov	r2, r7
   24208:	4623      	mov	r3, r4
   2420a:	9905      	ldr	r1, [sp, #20]
   2420c:	a81a      	add	r0, sp, #104	; 0x68
   2420e:	f7ff f9af 	bl	23570 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
   24212:	f016 0f05 	tst.w	r6, #5
   24216:	d015      	beq.n	24244 <lv_draw_rect+0xabc>
            work_area.x1 = coords->x1;
   24218:	f9b9 2000 	ldrsh.w	r2, [r9]
   2421c:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + aa;
   24220:	fa0f f388 	sxth.w	r3, r8
   24224:	441a      	add	r2, r3
   24226:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            work_area.y1 = coords->y2 - aa;
   2422a:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
            work_area.y2 = coords->y2;
   2422e:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            work_area.y1 = coords->y2 - aa;
   24232:	1ad3      	subs	r3, r2, r3
   24234:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_fill(&work_area, mask, color, opa);
   24238:	463a      	mov	r2, r7
   2423a:	4623      	mov	r3, r4
   2423c:	9905      	ldr	r1, [sp, #20]
   2423e:	a81a      	add	r0, sp, #104	; 0x68
   24240:	f7ff f996 	bl	23570 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
   24244:	f016 0f09 	tst.w	r6, #9
   24248:	f43f ac7f 	beq.w	23b4a <lv_draw_rect+0x3c2>
            work_area.x1 = coords->x2 - aa;
   2424c:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
            work_area.x2 = coords->x2;
   24250:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - aa;
   24254:	fa0f f888 	sxth.w	r8, r8
   24258:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
   2425c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
            work_area.x1 = coords->x2 - aa;
   24260:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.y1 = coords->y2 - aa;
   24264:	eba3 0808 	sub.w	r8, r3, r8
   24268:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2;
   2426c:	e465      	b.n	23b3a <lv_draw_rect+0x3b2>
        work_area.y1 = coords->y1 + radius;
   2426e:	4453      	add	r3, sl
   24270:	e6b1      	b.n	23fd6 <lv_draw_rect+0x84e>
        if(cir_in.y < cir_in.x) {
   24272:	f9bd 4060 	ldrsh.w	r4, [sp, #96]	; 0x60
   24276:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
   2427a:	42a1      	cmp	r1, r4
            act_w1 = cir_out.x - cir_out.y;
   2427c:	bfaa      	itet	ge
   2427e:	1ad4      	subge	r4, r2, r3
            act_w1 = cir_out.x - cir_in.x;
   24280:	1b14      	sublt	r4, r2, r4
            act_w1 = cir_out.x - cir_out.y;
   24282:	b224      	sxthge	r4, r4
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   24284:	9906      	ldr	r1, [sp, #24]
            act_w1 = cir_out.x - cir_in.x;
   24286:	bfb5      	itete	lt
   24288:	b224      	sxthlt	r4, r4
            act_w2 = act_w1 - 1;
   2428a:	f104 3aff 	addge.w	sl, r4, #4294967295	; 0xffffffff
            act_w2 = act_w1;
   2428e:	46a2      	movlt	sl, r4
            act_w2 = act_w1 - 1;
   24290:	fa0f fa8a 	sxthge.w	sl, sl
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   24294:	2909      	cmp	r1, #9
   24296:	d12a      	bne.n	242ee <lv_draw_rect+0xb66>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
   24298:	444a      	add	r2, r9
   2429a:	b212      	sxth	r2, r2
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
   2429c:	4433      	add	r3, r6
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
   2429e:	eba2 010a 	sub.w	r1, r2, sl
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
   242a2:	b21b      	sxth	r3, r3
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
   242a4:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
   242a8:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
   242ac:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
   242b0:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   242b4:	465a      	mov	r2, fp
   242b6:	462b      	mov	r3, r5
   242b8:	9905      	ldr	r1, [sp, #20]
   242ba:	a81a      	add	r0, sp, #104	; 0x68
   242bc:	f7ff f958 	bl	23570 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
   242c0:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            lv_draw_fill(&circ_area, mask, color, opa);
   242c4:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
   242c6:	444b      	add	r3, r9
   242c8:	b21b      	sxth	r3, r3
   242ca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
   242ce:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
   242d2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   242d6:	4433      	add	r3, r6
   242d8:	b21b      	sxth	r3, r3
   242da:	1b1a      	subs	r2, r3, r4
   242dc:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
   242e0:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   242e4:	465a      	mov	r2, fp
   242e6:	462b      	mov	r3, r5
   242e8:	a81a      	add	r0, sp, #104	; 0x68
   242ea:	f7ff f941 	bl	23570 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
   242ee:	9b08      	ldr	r3, [sp, #32]
   242f0:	f003 0305 	and.w	r3, r3, #5
   242f4:	2b05      	cmp	r3, #5
   242f6:	d12e      	bne.n	24356 <lv_draw_rect+0xbce>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
   242f8:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            lv_draw_fill(&circ_area, mask, color, opa);
   242fc:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
   242fe:	1afb      	subs	r3, r7, r3
   24300:	b21b      	sxth	r3, r3
   24302:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
   24306:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
   2430a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2430e:	4433      	add	r3, r6
   24310:	b21b      	sxth	r3, r3
   24312:	eba3 020a 	sub.w	r2, r3, sl
   24316:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
   2431a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   2431e:	465a      	mov	r2, fp
   24320:	462b      	mov	r3, r5
   24322:	a81a      	add	r0, sp, #104	; 0x68
   24324:	f7ff f924 	bl	23570 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
   24328:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
            lv_draw_fill(&circ_area, mask, color, opa);
   2432c:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
   2432e:	1afb      	subs	r3, r7, r3
   24330:	b21b      	sxth	r3, r3
   24332:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
   24336:	4423      	add	r3, r4
   24338:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
   2433c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   24340:	4433      	add	r3, r6
   24342:	b21b      	sxth	r3, r3
   24344:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
   24348:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   2434c:	465a      	mov	r2, fp
   2434e:	462b      	mov	r3, r5
   24350:	a81a      	add	r0, sp, #104	; 0x68
   24352:	f7ff f90d 	bl	23570 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
   24356:	9b08      	ldr	r3, [sp, #32]
   24358:	f003 0306 	and.w	r3, r3, #6
   2435c:	2b06      	cmp	r3, #6
   2435e:	d132      	bne.n	243c6 <lv_draw_rect+0xc3e>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
   24360:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   24364:	18f2      	adds	r2, r6, r3
   24366:	eba8 0303 	sub.w	r3, r8, r3
   2436a:	429a      	cmp	r2, r3
   2436c:	dd13      	ble.n	24396 <lv_draw_rect+0xc0e>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
   2436e:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
                lv_draw_fill(&circ_area, mask, color, opa);
   24372:	9905      	ldr	r1, [sp, #20]
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
   24374:	1aba      	subs	r2, r7, r2
   24376:	b212      	sxth	r2, r2
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
   24378:	b21b      	sxth	r3, r3
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
   2437a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
   2437e:	4452      	add	r2, sl
   24380:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
   24384:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
   24388:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                lv_draw_fill(&circ_area, mask, color, opa);
   2438c:	465a      	mov	r2, fp
   2438e:	462b      	mov	r3, r5
   24390:	a81a      	add	r0, sp, #104	; 0x68
   24392:	f7ff f8ed 	bl	23570 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
   24396:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            lv_draw_fill(&circ_area, mask, color, opa);
   2439a:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
   2439c:	1afb      	subs	r3, r7, r3
   2439e:	b21b      	sxth	r3, r3
   243a0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
   243a4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
   243a8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   243ac:	eba8 0303 	sub.w	r3, r8, r3
   243b0:	b21b      	sxth	r3, r3
   243b2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
   243b6:	4423      	add	r3, r4
   243b8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   243bc:	465a      	mov	r2, fp
   243be:	462b      	mov	r3, r5
   243c0:	a81a      	add	r0, sp, #104	; 0x68
   243c2:	f7ff f8d5 	bl	23570 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
   243c6:	9b08      	ldr	r3, [sp, #32]
   243c8:	f003 030a 	and.w	r3, r3, #10
   243cc:	2b0a      	cmp	r3, #10
   243ce:	d132      	bne.n	24436 <lv_draw_rect+0xcae>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
   243d0:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            lv_draw_fill(&circ_area, mask, color, opa);
   243d4:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
   243d6:	444b      	add	r3, r9
   243d8:	b21b      	sxth	r3, r3
   243da:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
   243de:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
   243e2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   243e6:	eba8 0303 	sub.w	r3, r8, r3
   243ea:	b21b      	sxth	r3, r3
   243ec:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
   243f0:	449a      	add	sl, r3
            lv_draw_fill(&circ_area, mask, color, opa);
   243f2:	465a      	mov	r2, fp
   243f4:	462b      	mov	r3, r5
   243f6:	a81a      	add	r0, sp, #104	; 0x68
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
   243f8:	f8ad a06e 	strh.w	sl, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   243fc:	f7ff f8b8 	bl	23570 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
   24400:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   24404:	18f2      	adds	r2, r6, r3
   24406:	eba8 0303 	sub.w	r3, r8, r3
   2440a:	429a      	cmp	r2, r3
   2440c:	dd13      	ble.n	24436 <lv_draw_rect+0xcae>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
   2440e:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
                lv_draw_fill(&circ_area, mask, color, opa);
   24412:	9905      	ldr	r1, [sp, #20]
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
   24414:	444a      	add	r2, r9
   24416:	b212      	sxth	r2, r2
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
   24418:	b21b      	sxth	r3, r3
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
   2441a:	1b14      	subs	r4, r2, r4
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
   2441c:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
   24420:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
   24424:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                lv_draw_fill(&circ_area, mask, color, opa);
   24428:	465a      	mov	r2, fp
   2442a:	462b      	mov	r3, r5
   2442c:	a81a      	add	r0, sp, #104	; 0x68
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
   2442e:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
                lv_draw_fill(&circ_area, mask, color, opa);
   24432:	f7ff f89d 	bl	23570 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
   24436:	a913      	add	r1, sp, #76	; 0x4c
   24438:	a816      	add	r0, sp, #88	; 0x58
   2443a:	f000 f89b 	bl	24574 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
   2443e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   24442:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
   24446:	429a      	cmp	r2, r3
   24448:	f6bf abdc 	bge.w	23c04 <lv_draw_rect+0x47c>
            lv_circ_next(&cir_in, &tmp_in);
   2444c:	a914      	add	r1, sp, #80	; 0x50
   2444e:	a818      	add	r0, sp, #96	; 0x60
   24450:	f000 f890 	bl	24574 <lv_circ_next>
   24454:	f7ff bbd6 	b.w	23c04 <lv_draw_rect+0x47c>

00024458 <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
   24458:	b150      	cbz	r0, 24470 <lv_img_src_get_type+0x18>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
   2445a:	7803      	ldrb	r3, [r0, #0]
   2445c:	f1a3 0220 	sub.w	r2, r3, #32
   24460:	2a5f      	cmp	r2, #95	; 0x5f
   24462:	d907      	bls.n	24474 <lv_img_src_get_type+0x1c>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    } else if(u8_p[0] >= 0x80) {
   24464:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
   24468:	bf0c      	ite	eq
   2446a:	2000      	moveq	r0, #0
   2446c:	2002      	movne	r0, #2
   2446e:	4770      	bx	lr
    if(src == NULL) return img_src_type;
   24470:	2003      	movs	r0, #3
   24472:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
   24474:	2001      	movs	r0, #1
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
   24476:	4770      	bx	lr

00024478 <lv_img_decoder_built_in_close>:
{
   24478:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   2447a:	6a0c      	ldr	r4, [r1, #32]
{
   2447c:	460d      	mov	r5, r1
    if(user_data) {
   2447e:	b144      	cbz	r4, 24492 <lv_img_decoder_built_in_close+0x1a>
        if(user_data->palette) lv_mem_free(user_data->palette);
   24480:	6820      	ldr	r0, [r4, #0]
   24482:	b108      	cbz	r0, 24488 <lv_img_decoder_built_in_close+0x10>
   24484:	f7f6 fbf2 	bl	1ac6c <lv_mem_free>
        lv_mem_free(user_data);
   24488:	4620      	mov	r0, r4
   2448a:	f7f6 fbef 	bl	1ac6c <lv_mem_free>
        dsc->user_data = NULL;
   2448e:	2300      	movs	r3, #0
   24490:	622b      	str	r3, [r5, #32]
}
   24492:	bd38      	pop	{r3, r4, r5, pc}

00024494 <lv_img_decoder_close>:
{
   24494:	b510      	push	{r4, lr}
   24496:	4604      	mov	r4, r0
    if(dsc->decoder) {
   24498:	6800      	ldr	r0, [r0, #0]
   2449a:	b158      	cbz	r0, 244b4 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
   2449c:	68c3      	ldr	r3, [r0, #12]
   2449e:	b10b      	cbz	r3, 244a4 <lv_img_decoder_close+0x10>
   244a0:	4621      	mov	r1, r4
   244a2:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   244a4:	7b23      	ldrb	r3, [r4, #12]
   244a6:	2b01      	cmp	r3, #1
   244a8:	d104      	bne.n	244b4 <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
   244aa:	6860      	ldr	r0, [r4, #4]
   244ac:	f7f6 fbde 	bl	1ac6c <lv_mem_free>
            dsc->src = NULL;
   244b0:	2300      	movs	r3, #0
   244b2:	6063      	str	r3, [r4, #4]
}
   244b4:	bd10      	pop	{r4, pc}

000244b6 <lv_disp_drv_init>:
{
   244b6:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
   244b8:	2224      	movs	r2, #36	; 0x24
{
   244ba:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
   244bc:	2100      	movs	r1, #0
   244be:	f7fb f8c5 	bl	1f64c <memset>
    driver->flush_cb         = NULL;
   244c2:	2300      	movs	r3, #0
    driver->hor_res          = LV_HOR_RES_MAX;
   244c4:	f04f 12f0 	mov.w	r2, #15728880	; 0xf000f0
    driver->buffer           = NULL;
   244c8:	e9c4 2300 	strd	r2, r3, [r4]
    driver->rotated          = 0;
   244cc:	7a22      	ldrb	r2, [r4, #8]
    driver->flush_cb         = NULL;
   244ce:	60e3      	str	r3, [r4, #12]
    driver->rotated          = 0;
   244d0:	f363 0200 	bfi	r2, r3, #0, #1
   244d4:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
   244d6:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
    driver->user_data = NULL;
   244da:	e9c4 2307 	strd	r2, r3, [r4, #28]
    driver->set_px_cb = NULL;
   244de:	6163      	str	r3, [r4, #20]
}
   244e0:	bd10      	pop	{r4, pc}

000244e2 <lv_disp_buf_init>:
{
   244e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244e4:	4604      	mov	r4, r0
   244e6:	460d      	mov	r5, r1
   244e8:	4617      	mov	r7, r2
   244ea:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
   244ec:	221c      	movs	r2, #28
   244ee:	2100      	movs	r1, #0
   244f0:	f7fb f8ac 	bl	1f64c <memset>
    disp_buf->buf2    = buf2;
   244f4:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->size    = size_in_px_cnt;
   244f8:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
   244fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000244fe <lv_disp_get_antialiasing>:
    if(disp == NULL) disp = lv_disp_get_default();
    if(disp == NULL) return false;

    return disp->driver.antialiasing ? true : false;
#endif
}
   244fe:	2000      	movs	r0, #0
   24500:	4770      	bx	lr

00024502 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   24502:	6842      	ldr	r2, [r0, #4]
   24504:	7e13      	ldrb	r3, [r2, #24]
   24506:	f36f 0300 	bfc	r3, #0, #1
   2450a:	7613      	strb	r3, [r2, #24]
}
   2450c:	4770      	bx	lr

0002450e <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   2450e:	6840      	ldr	r0, [r0, #4]
   24510:	4770      	bx	lr

00024512 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   24512:	6843      	ldr	r3, [r0, #4]
   24514:	6818      	ldr	r0, [r3, #0]
   24516:	b118      	cbz	r0, 24520 <lv_disp_is_double_buf+0xe>
   24518:	6858      	ldr	r0, [r3, #4]
   2451a:	3000      	adds	r0, #0
   2451c:	bf18      	it	ne
   2451e:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
   24520:	4770      	bx	lr

00024522 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   24522:	b508      	push	{r3, lr}
   24524:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   24526:	f7ff fff4 	bl	24512 <lv_disp_is_double_buf>
   2452a:	b140      	cbz	r0, 2453e <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   2452c:	8853      	ldrh	r3, [r2, #2]
   2452e:	8810      	ldrh	r0, [r2, #0]
   24530:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   24534:	6853      	ldr	r3, [r2, #4]
   24536:	68db      	ldr	r3, [r3, #12]
   24538:	1ac3      	subs	r3, r0, r3
   2453a:	4258      	negs	r0, r3
   2453c:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
   2453e:	bd08      	pop	{r3, pc}

00024540 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
   24540:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   24542:	f000 fff3 	bl	2552c <z_impl_k_uptime_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   24546:	bd08      	pop	{r3, pc}

00024548 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   24548:	b510      	push	{r4, lr}
   2454a:	4604      	mov	r4, r0
   2454c:	f000 ffee 	bl	2552c <z_impl_k_uptime_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   24550:	1b00      	subs	r0, r0, r4
   24552:	bd10      	pop	{r4, pc}

00024554 <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
   24554:	8002      	strh	r2, [r0, #0]
    c->y = 0;
   24556:	2300      	movs	r3, #0
    *tmp = 1 - radius;
   24558:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
   2455c:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
   2455e:	800a      	strh	r2, [r1, #0]
}
   24560:	4770      	bx	lr

00024562 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
   24562:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   24566:	f9b0 0000 	ldrsh.w	r0, [r0]
}
   2456a:	4282      	cmp	r2, r0
   2456c:	bfcc      	ite	gt
   2456e:	2000      	movgt	r0, #0
   24570:	2001      	movle	r0, #1
   24572:	4770      	bx	lr

00024574 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
   24574:	8843      	ldrh	r3, [r0, #2]
   24576:	3301      	adds	r3, #1
   24578:	b21b      	sxth	r3, r3
   2457a:	8043      	strh	r3, [r0, #2]

    if(*tmp <= 0) {
   2457c:	f9b1 2000 	ldrsh.w	r2, [r1]
   24580:	2a00      	cmp	r2, #0
        (*tmp) += 2 * c->y + 1; /*Change in decision criterion for y -> y+1*/
    } else {
        c->x--;
   24582:	bfc1      	itttt	gt
   24584:	8802      	ldrhgt	r2, [r0, #0]
   24586:	f102 32ff 	addgt.w	r2, r2, #4294967295	; 0xffffffff
   2458a:	b212      	sxthgt	r2, r2
   2458c:	8002      	strhgt	r2, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
   2458e:	bfc4      	itt	gt
   24590:	1a9b      	subgt	r3, r3, r2
   24592:	880a      	ldrhgt	r2, [r1, #0]
   24594:	3201      	adds	r2, #1
   24596:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   2459a:	800b      	strh	r3, [r1, #0]
    }
}
   2459c:	4770      	bx	lr

0002459e <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
   2459e:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
   245a0:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
   245a4:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
   245a6:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
   245a8:	80c3      	strh	r3, [r0, #6]
}
   245aa:	4770      	bx	lr

000245ac <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   245ac:	f9b0 3000 	ldrsh.w	r3, [r0]
   245b0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   245b4:	1ad2      	subs	r2, r2, r3
   245b6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   245ba:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   245be:	3301      	adds	r3, #1
   245c0:	1a18      	subs	r0, r3, r0

    return size;
}
   245c2:	fb02 0000 	mla	r0, r2, r0, r0
   245c6:	4770      	bx	lr

000245c8 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   245c8:	f9b1 3000 	ldrsh.w	r3, [r1]
{
   245cc:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   245ce:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   245d2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   245d6:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   245da:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   245de:	429d      	cmp	r5, r3
   245e0:	bfb8      	it	lt
   245e2:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   245e4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   245e8:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   245ea:	42a3      	cmp	r3, r4
   245ec:	bfb8      	it	lt
   245ee:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   245f0:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   245f4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   245f8:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   245fa:	42b4      	cmp	r4, r6
   245fc:	bfa8      	it	ge
   245fe:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   24600:	428a      	cmp	r2, r1
   24602:	bfa8      	it	ge
   24604:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   24606:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   24608:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   2460a:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   2460c:	dc04      	bgt.n	24618 <lv_area_intersect+0x50>
   2460e:	4293      	cmp	r3, r2
   24610:	bfcc      	ite	gt
   24612:	2000      	movgt	r0, #0
   24614:	2001      	movle	r0, #1
        union_ok = false;
    }

    return union_ok;
}
   24616:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
   24618:	2000      	movs	r0, #0
   2461a:	e7fc      	b.n	24616 <lv_area_intersect+0x4e>

0002461c <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   2461c:	f9b2 3000 	ldrsh.w	r3, [r2]
{
   24620:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   24622:	f9b1 4000 	ldrsh.w	r4, [r1]
   24626:	42a3      	cmp	r3, r4
   24628:	bfa8      	it	ge
   2462a:	4623      	movge	r3, r4
   2462c:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   2462e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   24632:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   24636:	42a3      	cmp	r3, r4
   24638:	bfa8      	it	ge
   2463a:	4623      	movge	r3, r4
   2463c:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   2463e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   24642:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   24646:	42a3      	cmp	r3, r4
   24648:	bfb8      	it	lt
   2464a:	4623      	movlt	r3, r4
   2464c:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   2464e:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   24652:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   24656:	4293      	cmp	r3, r2
   24658:	bfb8      	it	lt
   2465a:	4613      	movlt	r3, r2
   2465c:	80c3      	strh	r3, [r0, #6]
}
   2465e:	bd10      	pop	{r4, pc}

00024660 <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   24660:	f9b0 2000 	ldrsh.w	r2, [r0]
   24664:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   24668:	429a      	cmp	r2, r3
   2466a:	dc14      	bgt.n	24696 <lv_area_is_on+0x36>
   2466c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   24670:	f9b1 3000 	ldrsh.w	r3, [r1]
   24674:	429a      	cmp	r2, r3
   24676:	db0e      	blt.n	24696 <lv_area_is_on+0x36>
   24678:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   2467c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   24680:	429a      	cmp	r2, r3
   24682:	dc08      	bgt.n	24696 <lv_area_is_on+0x36>
   24684:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   24688:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2468c:	4298      	cmp	r0, r3
   2468e:	bfb4      	ite	lt
   24690:	2000      	movlt	r0, #0
   24692:	2001      	movge	r0, #1
   24694:	4770      	bx	lr
        return true;
    } else {
        return false;
   24696:	2000      	movs	r0, #0
    }
}
   24698:	4770      	bx	lr

0002469a <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   2469a:	f9b0 2000 	ldrsh.w	r2, [r0]
   2469e:	f9b1 3000 	ldrsh.w	r3, [r1]
   246a2:	429a      	cmp	r2, r3
   246a4:	db14      	blt.n	246d0 <lv_area_is_in+0x36>
   246a6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   246aa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   246ae:	429a      	cmp	r2, r3
   246b0:	db0e      	blt.n	246d0 <lv_area_is_in+0x36>
   246b2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   246b6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   246ba:	429a      	cmp	r2, r3
   246bc:	dc08      	bgt.n	246d0 <lv_area_is_in+0x36>
   246be:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   246c2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   246c6:	4298      	cmp	r0, r3
   246c8:	bfcc      	ite	gt
   246ca:	2000      	movgt	r0, #0
   246cc:	2001      	movle	r0, #1
   246ce:	4770      	bx	lr
    bool is_in = false;
   246d0:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
   246d2:	4770      	bx	lr

000246d4 <lv_task_create>:
{
   246d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   246d8:	4680      	mov	r8, r0
   246da:	460f      	mov	r7, r1
   246dc:	4616      	mov	r6, r2
   246de:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   246e0:	f7f6 f96c 	bl	1a9bc <lv_task_create_basic>
    if(new_task == NULL) return NULL;
   246e4:	4604      	mov	r4, r0
   246e6:	b130      	cbz	r0, 246f6 <lv_task_create+0x22>
    task->task_cb = task_cb;
   246e8:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
   246ec:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
   246ee:	4631      	mov	r1, r6
   246f0:	f7f6 fa70 	bl	1abd4 <lv_task_set_prio>
    new_task->user_data = user_data;
   246f4:	60e5      	str	r5, [r4, #12]
}
   246f6:	4620      	mov	r0, r4
   246f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000246fc <lv_task_ready>:
{
   246fc:	b510      	push	{r4, lr}
   246fe:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   24700:	f7ff ff1e 	bl	24540 <lv_tick_get>
   24704:	6823      	ldr	r3, [r4, #0]
   24706:	43db      	mvns	r3, r3
   24708:	4403      	add	r3, r0
   2470a:	6063      	str	r3, [r4, #4]
}
   2470c:	bd10      	pop	{r4, pc}

0002470e <lv_mem_init>:
}
   2470e:	4770      	bx	lr

00024710 <node_set_next.isra.0>:
 * Set the 'next node pointer' of a node
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
   24710:	b507      	push	{r0, r1, r2, lr}
   24712:	9201      	str	r2, [sp, #4]
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   24714:	b149      	cbz	r1, 2472a <node_set_next.isra.0+0x1a>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
   24716:	6800      	ldr	r0, [r0, #0]
   24718:	3004      	adds	r0, #4
   2471a:	4408      	add	r0, r1
   2471c:	4611      	mov	r1, r2
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   2471e:	2204      	movs	r2, #4
    if(next)
   24720:	b131      	cbz	r1, 24730 <node_set_next.isra.0+0x20>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   24722:	eb0d 0102 	add.w	r1, sp, r2
   24726:	f7fa ff67 	bl	1f5f8 <memcpy>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
}
   2472a:	b003      	add	sp, #12
   2472c:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
   24730:	f7fa ff8c 	bl	1f64c <memset>
   24734:	e7f9      	b.n	2472a <node_set_next.isra.0+0x1a>

00024736 <node_set_prev.isra.2>:
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
   24736:	b507      	push	{r0, r1, r2, lr}
   24738:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   2473a:	b141      	cbz	r1, 2474e <node_set_prev.isra.2+0x18>
    if(prev)
   2473c:	6800      	ldr	r0, [r0, #0]
   2473e:	4408      	add	r0, r1
   24740:	4611      	mov	r1, r2
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   24742:	2204      	movs	r2, #4
    if(prev)
   24744:	b131      	cbz	r1, 24754 <node_set_prev.isra.2+0x1e>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   24746:	eb0d 0102 	add.w	r1, sp, r2
   2474a:	f7fa ff55 	bl	1f5f8 <memcpy>
}
   2474e:	b003      	add	sp, #12
   24750:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
   24754:	f7fa ff7a 	bl	1f64c <memset>
   24758:	e7f9      	b.n	2474e <node_set_prev.isra.2+0x18>

0002475a <lv_ll_init>:
    ll_p->head = NULL;
   2475a:	2300      	movs	r3, #0
    ll_p->tail = NULL;
   2475c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    if(node_size & 0x3) {
   24760:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
   24762:	bf1c      	itt	ne
   24764:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
   24768:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
   2476a:	6001      	str	r1, [r0, #0]
}
   2476c:	4770      	bx	lr

0002476e <lv_ll_ins_head>:
{
   2476e:	b538      	push	{r3, r4, r5, lr}
   24770:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   24772:	6800      	ldr	r0, [r0, #0]
   24774:	3008      	adds	r0, #8
   24776:	f7f6 fa53 	bl	1ac20 <lv_mem_alloc>
    if(n_new != NULL) {
   2477a:	4605      	mov	r5, r0
   2477c:	b198      	cbz	r0, 247a6 <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   2477e:	4601      	mov	r1, r0
   24780:	2200      	movs	r2, #0
   24782:	4620      	mov	r0, r4
   24784:	f7ff ffd7 	bl	24736 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   24788:	4629      	mov	r1, r5
   2478a:	6862      	ldr	r2, [r4, #4]
   2478c:	4620      	mov	r0, r4
   2478e:	f7ff ffbf 	bl	24710 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   24792:	6861      	ldr	r1, [r4, #4]
   24794:	b119      	cbz	r1, 2479e <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
   24796:	462a      	mov	r2, r5
   24798:	4620      	mov	r0, r4
   2479a:	f7ff ffcc 	bl	24736 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   2479e:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   247a0:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   247a2:	b903      	cbnz	r3, 247a6 <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
   247a4:	60a5      	str	r5, [r4, #8]
}
   247a6:	4628      	mov	r0, r5
   247a8:	bd38      	pop	{r3, r4, r5, pc}

000247aa <lv_ll_ins_tail>:
{
   247aa:	b538      	push	{r3, r4, r5, lr}
   247ac:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   247ae:	6800      	ldr	r0, [r0, #0]
   247b0:	3008      	adds	r0, #8
   247b2:	f7f6 fa35 	bl	1ac20 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
   247b6:	4605      	mov	r5, r0
   247b8:	b198      	cbz	r0, 247e2 <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   247ba:	4601      	mov	r1, r0
   247bc:	2200      	movs	r2, #0
   247be:	4620      	mov	r0, r4
   247c0:	f7ff ffa6 	bl	24710 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
   247c4:	4629      	mov	r1, r5
   247c6:	68a2      	ldr	r2, [r4, #8]
   247c8:	4620      	mov	r0, r4
   247ca:	f7ff ffb4 	bl	24736 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   247ce:	68a1      	ldr	r1, [r4, #8]
   247d0:	b119      	cbz	r1, 247da <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
   247d2:	462a      	mov	r2, r5
   247d4:	4620      	mov	r0, r4
   247d6:	f7ff ff9b 	bl	24710 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   247da:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   247dc:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   247de:	b903      	cbnz	r3, 247e2 <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
   247e0:	6065      	str	r5, [r4, #4]
}
   247e2:	4628      	mov	r0, r5
   247e4:	bd38      	pop	{r3, r4, r5, pc}

000247e6 <lv_ll_get_head>:
    if(ll_p != NULL) {
   247e6:	b100      	cbz	r0, 247ea <lv_ll_get_head+0x4>
        head = ll_p->head;
   247e8:	6840      	ldr	r0, [r0, #4]
}
   247ea:	4770      	bx	lr

000247ec <lv_ll_get_tail>:
    if(ll_p != NULL) {
   247ec:	b100      	cbz	r0, 247f0 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
   247ee:	6880      	ldr	r0, [r0, #8]
}
   247f0:	4770      	bx	lr

000247f2 <lv_ll_get_next>:
{
   247f2:	b507      	push	{r0, r1, r2, lr}
    void * next = NULL;
   247f4:	2300      	movs	r3, #0
   247f6:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   247f8:	b138      	cbz	r0, 2480a <lv_ll_get_next+0x18>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
   247fa:	6803      	ldr	r3, [r0, #0]
   247fc:	2204      	movs	r2, #4
   247fe:	3304      	adds	r3, #4
   24800:	4419      	add	r1, r3
   24802:	eb0d 0002 	add.w	r0, sp, r2
   24806:	f7fa fef7 	bl	1f5f8 <memcpy>
}
   2480a:	9801      	ldr	r0, [sp, #4]
   2480c:	b003      	add	sp, #12
   2480e:	f85d fb04 	ldr.w	pc, [sp], #4

00024812 <lv_ll_get_prev>:
{
   24812:	b507      	push	{r0, r1, r2, lr}
    void * prev = NULL;
   24814:	2300      	movs	r3, #0
   24816:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   24818:	b130      	cbz	r0, 24828 <lv_ll_get_prev+0x16>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
   2481a:	6803      	ldr	r3, [r0, #0]
   2481c:	2204      	movs	r2, #4
   2481e:	4419      	add	r1, r3
   24820:	eb0d 0002 	add.w	r0, sp, r2
   24824:	f7fa fee8 	bl	1f5f8 <memcpy>
}
   24828:	9801      	ldr	r0, [sp, #4]
   2482a:	b003      	add	sp, #12
   2482c:	f85d fb04 	ldr.w	pc, [sp], #4

00024830 <lv_ll_ins_prev>:
{
   24830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24832:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
   24834:	4605      	mov	r5, r0
   24836:	b340      	cbz	r0, 2488a <lv_ll_ins_prev+0x5a>
   24838:	b349      	cbz	r1, 2488e <lv_ll_ins_prev+0x5e>
    if(lv_ll_get_head(ll_p) == n_act) {
   2483a:	6843      	ldr	r3, [r0, #4]
   2483c:	4299      	cmp	r1, r3
   2483e:	d103      	bne.n	24848 <lv_ll_ins_prev+0x18>
}
   24840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
   24844:	f7ff bf93 	b.w	2476e <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   24848:	6800      	ldr	r0, [r0, #0]
   2484a:	3008      	adds	r0, #8
   2484c:	f7f6 f9e8 	bl	1ac20 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
   24850:	4604      	mov	r4, r0
   24852:	b1c0      	cbz	r0, 24886 <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
   24854:	4631      	mov	r1, r6
   24856:	4628      	mov	r0, r5
   24858:	f7ff ffdb 	bl	24812 <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
   2485c:	4622      	mov	r2, r4
   2485e:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
   24860:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
   24862:	4628      	mov	r0, r5
   24864:	f7ff ff54 	bl	24710 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
   24868:	463a      	mov	r2, r7
   2486a:	4621      	mov	r1, r4
   2486c:	4628      	mov	r0, r5
   2486e:	f7ff ff62 	bl	24736 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
   24872:	4622      	mov	r2, r4
   24874:	4631      	mov	r1, r6
   24876:	4628      	mov	r0, r5
   24878:	f7ff ff5d 	bl	24736 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
   2487c:	4632      	mov	r2, r6
   2487e:	4621      	mov	r1, r4
   24880:	4628      	mov	r0, r5
   24882:	f7ff ff45 	bl	24710 <node_set_next.isra.0>
}
   24886:	4620      	mov	r0, r4
   24888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
   2488a:	4604      	mov	r4, r0
   2488c:	e7fb      	b.n	24886 <lv_ll_ins_prev+0x56>
   2488e:	460c      	mov	r4, r1
   24890:	e7f9      	b.n	24886 <lv_ll_ins_prev+0x56>

00024892 <lv_ll_rem>:
{
   24892:	b570      	push	{r4, r5, r6, lr}
   24894:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   24896:	4604      	mov	r4, r0
   24898:	b308      	cbz	r0, 248de <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
   2489a:	6843      	ldr	r3, [r0, #4]
   2489c:	4299      	cmp	r1, r3
   2489e:	d10e      	bne.n	248be <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
   248a0:	4629      	mov	r1, r5
   248a2:	4620      	mov	r0, r4
   248a4:	f7ff ffa5 	bl	247f2 <lv_ll_get_next>
   248a8:	4601      	mov	r1, r0
   248aa:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   248ac:	b908      	cbnz	r0, 248b2 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
   248ae:	60a0      	str	r0, [r4, #8]
}
   248b0:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
   248b2:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
   248b4:	4620      	mov	r0, r4
}
   248b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
   248ba:	f7ff bf3c 	b.w	24736 <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
   248be:	6883      	ldr	r3, [r0, #8]
   248c0:	4299      	cmp	r1, r3
   248c2:	d10e      	bne.n	248e2 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
   248c4:	f7ff ffa5 	bl	24812 <lv_ll_get_prev>
   248c8:	4601      	mov	r1, r0
   248ca:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   248cc:	b908      	cbnz	r0, 248d2 <lv_ll_rem+0x40>
            ll_p->head = NULL;
   248ce:	6060      	str	r0, [r4, #4]
   248d0:	e7ee      	b.n	248b0 <lv_ll_rem+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
   248d2:	4620      	mov	r0, r4
   248d4:	2200      	movs	r2, #0
}
   248d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
   248da:	f7ff bf19 	b.w	24710 <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
   248de:	2900      	cmp	r1, #0
   248e0:	d0de      	beq.n	248a0 <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
   248e2:	4629      	mov	r1, r5
   248e4:	4620      	mov	r0, r4
   248e6:	f7ff ff94 	bl	24812 <lv_ll_get_prev>
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
   248ea:	4629      	mov	r1, r5
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
   248ec:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
   248ee:	4620      	mov	r0, r4
   248f0:	f7ff ff7f 	bl	247f2 <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
   248f4:	4631      	mov	r1, r6
   248f6:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
   248f8:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   248fa:	4620      	mov	r0, r4
   248fc:	f7ff ff08 	bl	24710 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
   24900:	4632      	mov	r2, r6
   24902:	4629      	mov	r1, r5
   24904:	e7d6      	b.n	248b4 <lv_ll_rem+0x22>

00024906 <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   24906:	4291      	cmp	r1, r2
{
   24908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2490a:	4604      	mov	r4, r0
   2490c:	460d      	mov	r5, r1
   2490e:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
   24910:	d022      	beq.n	24958 <lv_ll_move_before+0x52>
    if(n_after != NULL)
   24912:	b312      	cbz	r2, 2495a <lv_ll_move_before+0x54>
        n_before = lv_ll_get_prev(ll_p, n_after);
   24914:	4611      	mov	r1, r2
   24916:	f7ff ff7c 	bl	24812 <lv_ll_get_prev>
   2491a:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   2491c:	42ae      	cmp	r6, r5
   2491e:	d01b      	beq.n	24958 <lv_ll_move_before+0x52>
    lv_ll_rem(ll_p, n_act);
   24920:	4629      	mov	r1, r5
   24922:	4620      	mov	r0, r4
   24924:	f7ff ffb5 	bl	24892 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
   24928:	462a      	mov	r2, r5
   2492a:	4631      	mov	r1, r6
   2492c:	4620      	mov	r0, r4
   2492e:	f7ff feef 	bl	24710 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
   24932:	4632      	mov	r2, r6
   24934:	4629      	mov	r1, r5
   24936:	4620      	mov	r0, r4
   24938:	f7ff fefd 	bl	24736 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
   2493c:	462a      	mov	r2, r5
   2493e:	4639      	mov	r1, r7
   24940:	4620      	mov	r0, r4
   24942:	f7ff fef8 	bl	24736 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
   24946:	463a      	mov	r2, r7
   24948:	4629      	mov	r1, r5
   2494a:	4620      	mov	r0, r4
   2494c:	f7ff fee0 	bl	24710 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
   24950:	b907      	cbnz	r7, 24954 <lv_ll_move_before+0x4e>
   24952:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
   24954:	b906      	cbnz	r6, 24958 <lv_ll_move_before+0x52>
   24956:	6065      	str	r5, [r4, #4]
}
   24958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
   2495a:	b108      	cbz	r0, 24960 <lv_ll_move_before+0x5a>
        tail = ll_p->tail;
   2495c:	6886      	ldr	r6, [r0, #8]
   2495e:	e7dd      	b.n	2491c <lv_ll_move_before+0x16>
    void * tail = NULL;
   24960:	4606      	mov	r6, r0
   24962:	e7db      	b.n	2491c <lv_ll_move_before+0x16>

00024964 <lv_txt_iso8859_1_size>:
}
   24964:	2001      	movs	r0, #1
   24966:	4770      	bx	lr

00024968 <lv_txt_iso8859_1_next>:
    if(i == NULL) return txt[1]; /*Get the next char */
   24968:	b909      	cbnz	r1, 2496e <lv_txt_iso8859_1_next+0x6>
   2496a:	7840      	ldrb	r0, [r0, #1]
   2496c:	4770      	bx	lr
    uint8_t letter = txt[*i];
   2496e:	680b      	ldr	r3, [r1, #0]
   24970:	5cc0      	ldrb	r0, [r0, r3]
    (*i)++;
   24972:	3301      	adds	r3, #1
   24974:	600b      	str	r3, [r1, #0]
}
   24976:	4770      	bx	lr

00024978 <lv_txt_iso8859_1_prev>:
    if(i == NULL) return *(txt - 1); /*Get the prev. char */
   24978:	b911      	cbnz	r1, 24980 <lv_txt_iso8859_1_prev+0x8>
   2497a:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   2497e:	4770      	bx	lr
    (*i)--;
   24980:	680b      	ldr	r3, [r1, #0]
   24982:	3b01      	subs	r3, #1
   24984:	600b      	str	r3, [r1, #0]
    return letter;
   24986:	5cc0      	ldrb	r0, [r0, r3]
}
   24988:	4770      	bx	lr

0002498a <lv_txt_iso8859_1_get_byte_id>:
}
   2498a:	4608      	mov	r0, r1
   2498c:	4770      	bx	lr

0002498e <lv_txt_iso8859_1_get_length>:
    return strlen(txt);
   2498e:	f7fa be01 	b.w	1f594 <strlen>

00024992 <lv_txt_iso8859_1_get_char_id>:
   24992:	4608      	mov	r0, r1
   24994:	4770      	bx	lr

00024996 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   24996:	2923      	cmp	r1, #35	; 0x23
{
   24998:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   2499a:	d117      	bne.n	249cc <lv_txt_is_cmd+0x36>
   2499c:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   2499e:	b91b      	cbnz	r3, 249a8 <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
   249a0:	2301      	movs	r3, #1
   249a2:	7003      	strb	r3, [r0, #0]
            ret    = true;
   249a4:	2001      	movs	r0, #1
   249a6:	e004      	b.n	249b2 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   249a8:	2b01      	cmp	r3, #1
   249aa:	f04f 0000 	mov.w	r0, #0
   249ae:	d109      	bne.n	249c4 <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
   249b0:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
   249b2:	7813      	ldrb	r3, [r2, #0]
   249b4:	2b01      	cmp	r3, #1
   249b6:	d104      	bne.n	249c2 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
   249b8:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   249ba:	bf04      	itt	eq
   249bc:	2102      	moveq	r1, #2
   249be:	7011      	strbeq	r1, [r2, #0]
        ret = true;
   249c0:	4618      	mov	r0, r3
}
   249c2:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
   249c4:	2b02      	cmp	r3, #2
   249c6:	d1f4      	bne.n	249b2 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
   249c8:	7010      	strb	r0, [r2, #0]
   249ca:	e7eb      	b.n	249a4 <lv_txt_is_cmd+0xe>
    bool ret = false;
   249cc:	2000      	movs	r0, #0
   249ce:	e7f0      	b.n	249b2 <lv_txt_is_cmd+0x1c>

000249d0 <lv_txt_get_size>:
{
   249d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249d4:	b087      	sub	sp, #28
    size_res->x = 0;
   249d6:	2500      	movs	r5, #0
{
   249d8:	9304      	str	r3, [sp, #16]
   249da:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   249de:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
   249e2:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
   249e6:	9303      	str	r3, [sp, #12]
   249e8:	4604      	mov	r4, r0
   249ea:	4616      	mov	r6, r2
    size_res->x = 0;
   249ec:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
   249ee:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
   249f0:	4689      	mov	r9, r1
   249f2:	b1f9      	cbz	r1, 24a34 <lv_txt_get_size+0x64>
    if(font == NULL) return;
   249f4:	b1f2      	cbz	r2, 24a34 <lv_txt_get_size+0x64>
    uint8_t letter_height = lv_font_get_line_height(font);
   249f6:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   249f8:	f013 0f02 	tst.w	r3, #2
   249fc:	f647 4318 	movw	r3, #31768	; 0x7c18
   24a00:	bf18      	it	ne
   24a02:	469a      	movne	sl, r3
        size_res->y += line_space;
   24a04:	eb0b 0307 	add.w	r3, fp, r7
   24a08:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
   24a0a:	f819 3005 	ldrb.w	r3, [r9, r5]
   24a0e:	eb09 0805 	add.w	r8, r9, r5
   24a12:	b993      	cbnz	r3, 24a3a <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   24a14:	b155      	cbz	r5, 24a2c <lv_txt_get_size+0x5c>
   24a16:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   24a1a:	2b0a      	cmp	r3, #10
   24a1c:	d001      	beq.n	24a22 <lv_txt_get_size+0x52>
   24a1e:	2b0d      	cmp	r3, #13
   24a20:	d104      	bne.n	24a2c <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
   24a22:	8862      	ldrh	r2, [r4, #2]
   24a24:	eb0b 0307 	add.w	r3, fp, r7
   24a28:	4413      	add	r3, r2
   24a2a:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
   24a2c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   24a30:	b9fb      	cbnz	r3, 24a72 <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
   24a32:	8067      	strh	r7, [r4, #2]
}
   24a34:	b007      	add	sp, #28
   24a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   24a3a:	9b03      	ldr	r3, [sp, #12]
   24a3c:	9300      	str	r3, [sp, #0]
   24a3e:	9a04      	ldr	r2, [sp, #16]
   24a40:	4653      	mov	r3, sl
   24a42:	4631      	mov	r1, r6
   24a44:	4640      	mov	r0, r8
   24a46:	f7f6 f9b1 	bl	1adac <lv_txt_get_next_line>
        size_res->y += line_space;
   24a4a:	8863      	ldrh	r3, [r4, #2]
   24a4c:	9a05      	ldr	r2, [sp, #20]
   24a4e:	4413      	add	r3, r2
   24a50:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
   24a52:	9b03      	ldr	r3, [sp, #12]
   24a54:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   24a56:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
   24a58:	9b04      	ldr	r3, [sp, #16]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   24a5a:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
   24a5c:	4632      	mov	r2, r6
   24a5e:	4640      	mov	r0, r8
   24a60:	f7f6 f954 	bl	1ad0c <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   24a64:	f9b4 3000 	ldrsh.w	r3, [r4]
   24a68:	4298      	cmp	r0, r3
   24a6a:	bfb8      	it	lt
   24a6c:	4618      	movlt	r0, r3
   24a6e:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
   24a70:	e7cb      	b.n	24a0a <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
   24a72:	eba3 030b 	sub.w	r3, r3, fp
   24a76:	8063      	strh	r3, [r4, #2]
   24a78:	e7dc      	b.n	24a34 <lv_txt_get_size+0x64>

00024a7a <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
   24a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24a7e:	9d08      	ldr	r5, [sp, #32]
   24a80:	4681      	mov	r9, r0
   24a82:	4688      	mov	r8, r1
   24a84:	4614      	mov	r4, r2
   24a86:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   24a88:	b90c      	cbnz	r4, 24a8e <lv_utils_bsearch+0x14>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
   24a8a:	4626      	mov	r6, r4
   24a8c:	e010      	b.n	24ab0 <lv_utils_bsearch+0x36>
        middle += (n / 2) * size;
   24a8e:	0867      	lsrs	r7, r4, #1
   24a90:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
   24a94:	4631      	mov	r1, r6
   24a96:	4648      	mov	r0, r9
   24a98:	47a8      	blx	r5
   24a9a:	2800      	cmp	r0, #0
   24a9c:	dd07      	ble.n	24aae <lv_utils_bsearch+0x34>
            n    = (n / 2) - ((n & 1) == 0);
   24a9e:	43e4      	mvns	r4, r4
   24aa0:	f004 0401 	and.w	r4, r4, #1
   24aa4:	1b3f      	subs	r7, r7, r4
            base = (middle += size);
   24aa6:	eb06 080a 	add.w	r8, r6, sl
{
   24aaa:	463c      	mov	r4, r7
   24aac:	e7ec      	b.n	24a88 <lv_utils_bsearch+0xe>
        } else if(c < 0) {
   24aae:	d1fc      	bne.n	24aaa <lv_utils_bsearch+0x30>
}
   24ab0:	4630      	mov	r0, r6
   24ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024ab6 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
   24ab6:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24ab8:	f7fe fc2a 	bl	23310 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   24abc:	7bc3      	ldrb	r3, [r0, #15]
   24abe:	079b      	lsls	r3, r3, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24ac0:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   24ac2:	d503      	bpl.n	24acc <lv_label_dot_tmp_free+0x16>
   24ac4:	6840      	ldr	r0, [r0, #4]
   24ac6:	b108      	cbz	r0, 24acc <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
   24ac8:	f7f6 f8d0 	bl	1ac6c <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
   24acc:	7be3      	ldrb	r3, [r4, #15]
   24ace:	f36f 0341 	bfc	r3, #1, #1
   24ad2:	73e3      	strb	r3, [r4, #15]
    ext->dot.tmp_ptr   = NULL;
   24ad4:	2300      	movs	r3, #0
   24ad6:	6063      	str	r3, [r4, #4]
}
   24ad8:	bd10      	pop	{r4, pc}

00024ada <lv_label_set_align>:
{
   24ada:	b538      	push	{r3, r4, r5, lr}
   24adc:	460c      	mov	r4, r1
   24ade:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24ae0:	f7fe fc16 	bl	23310 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
   24ae4:	7b83      	ldrb	r3, [r0, #14]
   24ae6:	f3c3 1201 	ubfx	r2, r3, #4, #2
   24aea:	42a2      	cmp	r2, r4
   24aec:	d007      	beq.n	24afe <lv_label_set_align+0x24>
    ext->align = align;
   24aee:	f364 1305 	bfi	r3, r4, #4, #2
   24af2:	7383      	strb	r3, [r0, #14]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   24af4:	4628      	mov	r0, r5
}
   24af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   24afa:	f7fe b942 	b.w	22d82 <lv_obj_invalidate>
}
   24afe:	bd38      	pop	{r3, r4, r5, pc}

00024b00 <lv_label_set_body_draw>:
{
   24b00:	b538      	push	{r3, r4, r5, lr}
   24b02:	460d      	mov	r5, r1
   24b04:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24b06:	f7fe fc03 	bl	23310 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
   24b0a:	7bc3      	ldrb	r3, [r0, #15]
   24b0c:	f003 0201 	and.w	r2, r3, #1
   24b10:	42aa      	cmp	r2, r5
   24b12:	d00a      	beq.n	24b2a <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
   24b14:	f365 0300 	bfi	r3, r5, #0, #1
   24b18:	73c3      	strb	r3, [r0, #15]
    lv_obj_refresh_ext_draw_pad(label);
   24b1a:	4620      	mov	r0, r4
   24b1c:	f7fe f9c7 	bl	22eae <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
   24b20:	4620      	mov	r0, r4
}
   24b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
   24b26:	f7fe b92c 	b.w	22d82 <lv_obj_invalidate>
}
   24b2a:	bd38      	pop	{r3, r4, r5, pc}

00024b2c <lv_label_get_text>:
{
   24b2c:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24b2e:	f7fe fbef 	bl	23310 <lv_obj_get_ext_attr>
}
   24b32:	6800      	ldr	r0, [r0, #0]
   24b34:	bd08      	pop	{r3, pc}

00024b36 <lv_label_get_long_mode>:
{
   24b36:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24b38:	f7fe fbea 	bl	23310 <lv_obj_get_ext_attr>
    return ext->long_mode;
   24b3c:	7b80      	ldrb	r0, [r0, #14]
}
   24b3e:	f000 0007 	and.w	r0, r0, #7
   24b42:	bd08      	pop	{r3, pc}

00024b44 <lv_label_get_align>:
{
   24b44:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24b46:	f7fe fbe3 	bl	23310 <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
   24b4a:	7b80      	ldrb	r0, [r0, #14]
   24b4c:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
   24b50:	2803      	cmp	r0, #3
}
   24b52:	bf08      	it	eq
   24b54:	2000      	moveq	r0, #0
   24b56:	bd08      	pop	{r3, pc}

00024b58 <lv_label_design>:
{
   24b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK)
   24b5c:	2a02      	cmp	r2, #2
{
   24b5e:	b08f      	sub	sp, #60	; 0x3c
   24b60:	4606      	mov	r6, r0
   24b62:	4689      	mov	r9, r1
    if(mode == LV_DESIGN_COVER_CHK)
   24b64:	f000 8102 	beq.w	24d6c <lv_label_design+0x214>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   24b68:	2a00      	cmp	r2, #0
   24b6a:	f040 80f8 	bne.w	24d5e <lv_label_design+0x206>
        const lv_style_t * style = lv_obj_get_style(label);
   24b6e:	f7f4 fb6d 	bl	1924c <lv_obj_get_style>
   24b72:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
   24b74:	4630      	mov	r0, r6
   24b76:	f7fe fb6b 	bl	23250 <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
   24b7a:	a90a      	add	r1, sp, #40	; 0x28
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
   24b7c:	4682      	mov	sl, r0
        lv_obj_get_coords(label, &coords);
   24b7e:	4630      	mov	r0, r6
   24b80:	f7fe fa21 	bl	22fc6 <lv_obj_get_coords>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24b84:	4630      	mov	r0, r6
   24b86:	f7fe fbc3 	bl	23310 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
   24b8a:	7bc3      	ldrb	r3, [r0, #15]
   24b8c:	07d9      	lsls	r1, r3, #31
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24b8e:	4680      	mov	r8, r0
        if(ext->body_draw) {
   24b90:	d524      	bpl.n	24bdc <lv_label_design+0x84>
            lv_obj_get_coords(label, &bg);
   24b92:	a90c      	add	r1, sp, #48	; 0x30
   24b94:	4630      	mov	r0, r6
   24b96:	f7fe fa16 	bl	22fc6 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
   24b9a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   24b9c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   24ba0:	1a9b      	subs	r3, r3, r2
   24ba2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            bg.x2 += style->body.padding.right;
   24ba6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   24ba8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   24bac:	4413      	add	r3, r2
   24bae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            bg.y1 -= style->body.padding.top;
   24bb2:	8c22      	ldrh	r2, [r4, #32]
   24bb4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   24bb8:	1a9b      	subs	r3, r3, r2
   24bba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            bg.y2 += style->body.padding.bottom;
   24bbe:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   24bc0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
   24bc4:	4630      	mov	r0, r6
            bg.y2 += style->body.padding.bottom;
   24bc6:	4413      	add	r3, r2
   24bc8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
   24bcc:	f7fe fb40 	bl	23250 <lv_obj_get_opa_scale>
   24bd0:	4622      	mov	r2, r4
   24bd2:	4603      	mov	r3, r0
   24bd4:	4649      	mov	r1, r9
   24bd6:	a80c      	add	r0, sp, #48	; 0x30
   24bd8:	f7fe fdd6 	bl	23788 <lv_draw_rect>
        lv_label_align_t align = lv_label_get_align(label);
   24bdc:	4630      	mov	r0, r6
   24bde:	f7ff ffb1 	bl	24b44 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   24be2:	f898 300e 	ldrb.w	r3, [r8, #14]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   24be6:	061a      	lsls	r2, r3, #24
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   24be8:	f3c3 1580 	ubfx	r5, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   24bec:	bf48      	it	mi
   24bee:	f045 0502 	orrmi.w	r5, r5, #2
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   24bf2:	2801      	cmp	r0, #1
   24bf4:	f040 80b5 	bne.w	24d62 <lv_label_design+0x20a>
   24bf8:	f045 0504 	orr.w	r5, r5, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   24bfc:	f003 0207 	and.w	r2, r3, #7
   24c00:	3a03      	subs	r2, #3
   24c02:	2a01      	cmp	r2, #1
   24c04:	d81d      	bhi.n	24c42 <lv_label_design+0xea>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   24c06:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   24c0a:	2b10      	cmp	r3, #16
   24c0c:	d001      	beq.n	24c12 <lv_label_design+0xba>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   24c0e:	2b20      	cmp	r3, #32
   24c10:	d117      	bne.n	24c42 <lv_label_design+0xea>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
   24c12:	f647 4218 	movw	r2, #31768	; 0x7c18
   24c16:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
   24c1a:	9502      	str	r5, [sp, #8]
   24c1c:	9201      	str	r2, [sp, #4]
   24c1e:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
   24c22:	9200      	str	r2, [sp, #0]
   24c24:	6b62      	ldr	r2, [r4, #52]	; 0x34
   24c26:	f8d8 1000 	ldr.w	r1, [r8]
   24c2a:	a80c      	add	r0, sp, #48	; 0x30
   24c2c:	f7ff fed0 	bl	249d0 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
   24c30:	4630      	mov	r0, r6
   24c32:	f9bd 7030 	ldrsh.w	r7, [sp, #48]	; 0x30
   24c36:	f7fe fafd 	bl	23234 <lv_obj_get_width>
   24c3a:	4287      	cmp	r7, r0
                flag &= ~LV_TXT_FLAG_CENTER;
   24c3c:	bfc8      	it	gt
   24c3e:	f005 05f3 	andgt.w	r5, r5, #243	; 0xf3
        sel.start = lv_label_get_text_sel_start(label);
   24c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24c46:	9308      	str	r3, [sp, #32]
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset, &sel, hint, lv_obj_get_base_dir(label));
   24c48:	4643      	mov	r3, r8
   24c4a:	4630      	mov	r0, r6
   24c4c:	f853 2b0a 	ldr.w	r2, [r3], #10
   24c50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   24c54:	f7fe fafa 	bl	2324c <lv_obj_get_base_dir>
   24c58:	9b07      	ldr	r3, [sp, #28]
   24c5a:	9a06      	ldr	r2, [sp, #24]
   24c5c:	9005      	str	r0, [sp, #20]
   24c5e:	f04f 0b00 	mov.w	fp, #0
   24c62:	af08      	add	r7, sp, #32
   24c64:	e9cd 5301 	strd	r5, r3, [sp, #4]
   24c68:	9200      	str	r2, [sp, #0]
   24c6a:	4653      	mov	r3, sl
   24c6c:	f8cd b010 	str.w	fp, [sp, #16]
   24c70:	9703      	str	r7, [sp, #12]
   24c72:	4622      	mov	r2, r4
   24c74:	4649      	mov	r1, r9
   24c76:	a80a      	add	r0, sp, #40	; 0x28
   24c78:	f7f5 f906 	bl	19e88 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   24c7c:	f898 300e 	ldrb.w	r3, [r8, #14]
   24c80:	f003 0307 	and.w	r3, r3, #7
   24c84:	2b04      	cmp	r3, #4
   24c86:	d16a      	bne.n	24d5e <lv_label_design+0x206>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
   24c88:	f647 4218 	movw	r2, #31768	; 0x7c18
   24c8c:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
   24c90:	9502      	str	r5, [sp, #8]
   24c92:	9201      	str	r2, [sp, #4]
   24c94:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
   24c98:	9200      	str	r2, [sp, #0]
   24c9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   24c9c:	f8d8 1000 	ldr.w	r1, [r8]
   24ca0:	a809      	add	r0, sp, #36	; 0x24
   24ca2:	f7ff fe95 	bl	249d0 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
   24ca6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
   24caa:	9306      	str	r3, [sp, #24]
   24cac:	4630      	mov	r0, r6
   24cae:	f7fe fac1 	bl	23234 <lv_obj_get_width>
   24cb2:	9b06      	ldr	r3, [sp, #24]
   24cb4:	4283      	cmp	r3, r0
   24cb6:	dd29      	ble.n	24d0c <lv_label_design+0x1b4>
                ofs.x = ext->offset.x + size.x +
   24cb8:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   24cbc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   24cc0:	2220      	movs	r2, #32
                ofs.x = ext->offset.x + size.x +
   24cc2:	4403      	add	r3, r0
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   24cc4:	4611      	mov	r1, r2
                ofs.x = ext->offset.x + size.x +
   24cc6:	b21b      	sxth	r3, r3
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   24cc8:	6b60      	ldr	r0, [r4, #52]	; 0x34
                ofs.x = ext->offset.x + size.x +
   24cca:	9306      	str	r3, [sp, #24]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   24ccc:	f000 f8f6 	bl	24ebc <lv_font_get_glyph_width>
                ofs.x = ext->offset.x + size.x +
   24cd0:	9b06      	ldr	r3, [sp, #24]
   24cd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   24cd6:	4403      	add	r3, r0
   24cd8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                ofs.y = ext->offset.y;
   24cdc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   24ce0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   24ce4:	4630      	mov	r0, r6
   24ce6:	f8d8 3000 	ldr.w	r3, [r8]
   24cea:	9306      	str	r3, [sp, #24]
   24cec:	f7fe faae 	bl	2324c <lv_obj_get_base_dir>
   24cf0:	aa0c      	add	r2, sp, #48	; 0x30
   24cf2:	9b06      	ldr	r3, [sp, #24]
   24cf4:	9300      	str	r3, [sp, #0]
   24cf6:	e9cd b004 	strd	fp, r0, [sp, #16]
   24cfa:	e9cd 5201 	strd	r5, r2, [sp, #4]
   24cfe:	9703      	str	r7, [sp, #12]
   24d00:	4653      	mov	r3, sl
   24d02:	4622      	mov	r2, r4
   24d04:	4649      	mov	r1, r9
   24d06:	a80a      	add	r0, sp, #40	; 0x28
   24d08:	f7f5 f8be 	bl	19e88 <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
   24d0c:	4630      	mov	r0, r6
   24d0e:	f9bd 7026 	ldrsh.w	r7, [sp, #38]	; 0x26
   24d12:	f7fe fa95 	bl	23240 <lv_obj_get_height>
   24d16:	4287      	cmp	r7, r0
   24d18:	dd21      	ble.n	24d5e <lv_label_design+0x206>
                ofs.x = ext->offset.x;
   24d1a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   24d1e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   24d22:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   24d26:	f8b8 300c 	ldrh.w	r3, [r8, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   24d2a:	f8d8 7000 	ldr.w	r7, [r8]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   24d2e:	441a      	add	r2, r3
   24d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24d32:	7a1b      	ldrb	r3, [r3, #8]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   24d34:	4630      	mov	r0, r6
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   24d36:	4413      	add	r3, r2
   24d38:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   24d3c:	f7fe fa86 	bl	2324c <lv_obj_get_base_dir>
   24d40:	2300      	movs	r3, #0
   24d42:	9304      	str	r3, [sp, #16]
   24d44:	ab08      	add	r3, sp, #32
   24d46:	9303      	str	r3, [sp, #12]
   24d48:	ab0c      	add	r3, sp, #48	; 0x30
   24d4a:	9005      	str	r0, [sp, #20]
   24d4c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   24d50:	9700      	str	r7, [sp, #0]
   24d52:	4653      	mov	r3, sl
   24d54:	4622      	mov	r2, r4
   24d56:	4649      	mov	r1, r9
   24d58:	a80a      	add	r0, sp, #40	; 0x28
   24d5a:	f7f5 f895 	bl	19e88 <lv_draw_label>
    return true;
   24d5e:	2001      	movs	r0, #1
   24d60:	e005      	b.n	24d6e <lv_label_design+0x216>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   24d62:	2802      	cmp	r0, #2
   24d64:	bf08      	it	eq
   24d66:	f045 0508 	orreq.w	r5, r5, #8
   24d6a:	e747      	b.n	24bfc <lv_label_design+0xa4>
        return false;
   24d6c:	2000      	movs	r0, #0
}
   24d6e:	b00f      	add	sp, #60	; 0x3c
   24d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024d74 <lv_label_get_recolor>:
{
   24d74:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24d76:	f7fe facb 	bl	23310 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
   24d7a:	7b80      	ldrb	r0, [r0, #14]
}
   24d7c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   24d80:	bd08      	pop	{r3, pc}

00024d82 <lv_label_get_body_draw>:
{
   24d82:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24d84:	f7fe fac4 	bl	23310 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
   24d88:	7bc0      	ldrb	r0, [r0, #15]
}
   24d8a:	f000 0001 	and.w	r0, r0, #1
   24d8e:	bd08      	pop	{r3, pc}

00024d90 <lv_label_set_text>:
{
   24d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d94:	4607      	mov	r7, r0
   24d96:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
   24d98:	f7fd fff3 	bl	22d82 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24d9c:	4638      	mov	r0, r7
   24d9e:	f7fe fab7 	bl	23310 <lv_obj_get_ext_attr>
   24da2:	4604      	mov	r4, r0
    if(text == NULL) {
   24da4:	b925      	cbnz	r5, 24db0 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
   24da6:	4638      	mov	r0, r7
}
   24da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_label_refr_text(label);
   24dac:	f7f6 ba66 	b.w	1b27c <lv_label_refr_text>
    if(ext->text == text) {
   24db0:	6806      	ldr	r6, [r0, #0]
   24db2:	42ae      	cmp	r6, r5
   24db4:	d10b      	bne.n	24dce <lv_label_set_text+0x3e>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   24db6:	4630      	mov	r0, r6
   24db8:	f7fa fbec 	bl	1f594 <strlen>
   24dbc:	1c41      	adds	r1, r0, #1
   24dbe:	4630      	mov	r0, r6
   24dc0:	f7f5 ff72 	bl	1aca8 <lv_mem_realloc>
   24dc4:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   24dc6:	2800      	cmp	r0, #0
   24dc8:	d1ed      	bne.n	24da6 <lv_label_set_text+0x16>
}
   24dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        size_t len = strlen(text) + 1;
   24dce:	4628      	mov	r0, r5
   24dd0:	f7fa fbe0 	bl	1f594 <strlen>
   24dd4:	f100 0801 	add.w	r8, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
   24dd8:	6820      	ldr	r0, [r4, #0]
   24dda:	b130      	cbz	r0, 24dea <lv_label_set_text+0x5a>
   24ddc:	7ba3      	ldrb	r3, [r4, #14]
   24dde:	f013 0608 	ands.w	r6, r3, #8
   24de2:	d102      	bne.n	24dea <lv_label_set_text+0x5a>
            lv_mem_free(ext->text);
   24de4:	f7f5 ff42 	bl	1ac6c <lv_mem_free>
            ext->text = NULL;
   24de8:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
   24dea:	4640      	mov	r0, r8
   24dec:	f7f5 ff18 	bl	1ac20 <lv_mem_alloc>
   24df0:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   24df2:	2800      	cmp	r0, #0
   24df4:	d0e9      	beq.n	24dca <lv_label_set_text+0x3a>
        strcpy(ext->text, text);
   24df6:	4629      	mov	r1, r5
   24df8:	f7fa fba1 	bl	1f53e <strcpy>
        ext->static_txt = 0;
   24dfc:	7ba3      	ldrb	r3, [r4, #14]
   24dfe:	f36f 03c3 	bfc	r3, #3, #1
   24e02:	73a3      	strb	r3, [r4, #14]
   24e04:	e7cf      	b.n	24da6 <lv_label_set_text+0x16>

00024e06 <lv_label_set_static_text>:
{
   24e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e08:	4607      	mov	r7, r0
   24e0a:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24e0c:	f7fe fa80 	bl	23310 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
   24e10:	7b83      	ldrb	r3, [r0, #14]
   24e12:	f013 0508 	ands.w	r5, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24e16:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
   24e18:	d104      	bne.n	24e24 <lv_label_set_static_text+0x1e>
   24e1a:	6800      	ldr	r0, [r0, #0]
   24e1c:	b110      	cbz	r0, 24e24 <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
   24e1e:	f7f5 ff25 	bl	1ac6c <lv_mem_free>
        ext->text = NULL;
   24e22:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
   24e24:	b126      	cbz	r6, 24e30 <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
   24e26:	7ba3      	ldrb	r3, [r4, #14]
        ext->text       = (char *)text;
   24e28:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
   24e2a:	f043 0308 	orr.w	r3, r3, #8
   24e2e:	73a3      	strb	r3, [r4, #14]
    lv_label_refr_text(label);
   24e30:	4638      	mov	r0, r7
}
   24e32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
   24e36:	f7f6 ba21 	b.w	1b27c <lv_label_refr_text>

00024e3a <lv_label_set_long_mode>:
{
   24e3a:	b570      	push	{r4, r5, r6, lr}
   24e3c:	460e      	mov	r6, r1
   24e3e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24e40:	f7fe fa66 	bl	23310 <lv_obj_get_ext_attr>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   24e44:	1ef2      	subs	r2, r6, #3
    ext->offset.x = 0;
   24e46:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   24e48:	2a02      	cmp	r2, #2
    ext->offset.x = 0;
   24e4a:	8143      	strh	r3, [r0, #10]
    ext->offset.y = 0;
   24e4c:	8183      	strh	r3, [r0, #12]
   24e4e:	7b83      	ldrb	r3, [r0, #14]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   24e50:	bf8c      	ite	hi
   24e52:	2200      	movhi	r2, #0
   24e54:	2201      	movls	r2, #1
   24e56:	f362 13c7 	bfi	r3, r2, #7, #1
   24e5a:	7383      	strb	r3, [r0, #14]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   24e5c:	f003 0307 	and.w	r3, r3, #7
   24e60:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24e62:	4604      	mov	r4, r0
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   24e64:	d107      	bne.n	24e76 <lv_label_set_long_mode+0x3c>
   24e66:	8902      	ldrh	r2, [r0, #8]
   24e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24e6c:	429a      	cmp	r2, r3
   24e6e:	d002      	beq.n	24e76 <lv_label_set_long_mode+0x3c>
        lv_label_revert_dots(label);
   24e70:	4628      	mov	r0, r5
   24e72:	f7f6 f8a7 	bl	1afc4 <lv_label_revert_dots>
    ext->long_mode = long_mode;
   24e76:	7ba3      	ldrb	r3, [r4, #14]
   24e78:	f366 0302 	bfi	r3, r6, #0, #3
   24e7c:	73a3      	strb	r3, [r4, #14]
    lv_label_refr_text(label);
   24e7e:	4628      	mov	r0, r5
}
   24e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
   24e84:	f7f6 b9fa 	b.w	1b27c <lv_label_refr_text>

00024e88 <lv_label_set_recolor>:
{
   24e88:	b538      	push	{r3, r4, r5, lr}
   24e8a:	460c      	mov	r4, r1
   24e8c:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   24e8e:	f7fe fa3f 	bl	23310 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
   24e92:	7b83      	ldrb	r3, [r0, #14]
   24e94:	f3c3 1280 	ubfx	r2, r3, #6, #1
   24e98:	42a2      	cmp	r2, r4
   24e9a:	d007      	beq.n	24eac <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
   24e9c:	f364 1386 	bfi	r3, r4, #6, #1
   24ea0:	7383      	strb	r3, [r0, #14]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
   24ea2:	4628      	mov	r0, r5
}
   24ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
   24ea8:	f7f6 b9e8 	b.w	1b27c <lv_label_refr_text>
}
   24eac:	bd38      	pop	{r3, r4, r5, pc}

00024eae <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
   24eae:	6843      	ldr	r3, [r0, #4]
   24eb0:	4718      	bx	r3

00024eb2 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
   24eb2:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   24eb4:	6804      	ldr	r4, [r0, #0]
   24eb6:	46a4      	mov	ip, r4
}
   24eb8:	bc10      	pop	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   24eba:	4760      	bx	ip

00024ebc <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
   24ebc:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
   24ebe:	4613      	mov	r3, r2
   24ec0:	460a      	mov	r2, r1
   24ec2:	4669      	mov	r1, sp
   24ec4:	f7ff fff5 	bl	24eb2 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
   24ec8:	b108      	cbz	r0, 24ece <lv_font_get_glyph_width+0x12>
   24eca:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
   24ece:	b003      	add	sp, #12
   24ed0:	f85d fb04 	ldr.w	pc, [sp], #4

00024ed4 <kern_pair_8_compare>:
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   24ed4:	7803      	ldrb	r3, [r0, #0]
   24ed6:	780a      	ldrb	r2, [r1, #0]
   24ed8:	4293      	cmp	r3, r2
   24eda:	bf11      	iteee	ne
   24edc:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   24ede:	784b      	ldrbeq	r3, [r1, #1]
   24ee0:	7840      	ldrbeq	r0, [r0, #1]
   24ee2:	1ac0      	subeq	r0, r0, r3
}
   24ee4:	4770      	bx	lr

00024ee6 <kern_pair_16_compare>:
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   24ee6:	8803      	ldrh	r3, [r0, #0]
   24ee8:	880a      	ldrh	r2, [r1, #0]
   24eea:	4293      	cmp	r3, r2
   24eec:	bf11      	iteee	ne
   24eee:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   24ef0:	884b      	ldrheq	r3, [r1, #2]
   24ef2:	8840      	ldrheq	r0, [r0, #2]
   24ef4:	1ac0      	subeq	r0, r0, r3
}
   24ef6:	4770      	bx	lr

00024ef8 <get_bits>:
{
   24ef8:	b510      	push	{r4, lr}
    uint32_t byte_pos = bit_pos >> 3;
   24efa:	08cb      	lsrs	r3, r1, #3
    bit_pos = bit_pos & 0x7;
   24efc:	f001 0107 	and.w	r1, r1, #7
    uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   24f00:	5cc4      	ldrb	r4, [r0, r3]
   24f02:	4418      	add	r0, r3
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   24f04:	2301      	movs	r3, #1
    uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   24f06:	7840      	ldrb	r0, [r0, #1]
   24f08:	eb00 2004 	add.w	r0, r0, r4, lsl #8
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
   24f0c:	f1c2 0410 	rsb	r4, r2, #16
   24f10:	1a61      	subs	r1, r4, r1
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   24f12:	4093      	lsls	r3, r2
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
   24f14:	b280      	uxth	r0, r0
   24f16:	4108      	asrs	r0, r1
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   24f18:	3b01      	subs	r3, #1
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
   24f1a:	4018      	ands	r0, r3
}
   24f1c:	b2c0      	uxtb	r0, r0
   24f1e:	bd10      	pop	{r4, pc}

00024f20 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
   24f20:	8800      	ldrh	r0, [r0, #0]
   24f22:	880b      	ldrh	r3, [r1, #0]
}
   24f24:	1ac0      	subs	r0, r0, r3
   24f26:	4770      	bx	lr

00024f28 <arch_system_halt>:
	__asm__ volatile(
   24f28:	f04f 0220 	mov.w	r2, #32
   24f2c:	f3ef 8311 	mrs	r3, BASEPRI
   24f30:	f382 8811 	msr	BASEPRI, r2
   24f34:	f3bf 8f6f 	isb	sy
	}
   24f38:	e7fe      	b.n	24f38 <arch_system_halt+0x10>

00024f3a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   24f3a:	f7fa ba74 	b.w	1f426 <z_clock_idle_exit>

00024f3e <k_mem_slab_init>:
{
   24f3e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   24f40:	2400      	movs	r4, #0
	slab->block_size = block_size;
   24f42:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   24f46:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   24f4a:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   24f4c:	42a3      	cmp	r3, r4
   24f4e:	d102      	bne.n	24f56 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   24f50:	e9c0 0000 	strd	r0, r0, [r0]
}
   24f54:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   24f56:	6945      	ldr	r5, [r0, #20]
   24f58:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   24f5a:	3401      	adds	r4, #1
		slab->free_list = p;
   24f5c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   24f5e:	4411      	add	r1, r2
   24f60:	e7f4      	b.n	24f4c <k_mem_slab_init+0xe>

00024f62 <k_mem_pool_malloc>:
{
   24f62:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24f64:	2404      	movs	r4, #4
   24f66:	190a      	adds	r2, r1, r4
   24f68:	d204      	bcs.n	24f74 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   24f6a:	2300      	movs	r3, #0
   24f6c:	4669      	mov	r1, sp
   24f6e:	f7f7 f807 	bl	1bf80 <k_mem_pool_alloc>
   24f72:	b110      	cbz	r0, 24f7a <k_mem_pool_malloc+0x18>
		return NULL;
   24f74:	2000      	movs	r0, #0
}
   24f76:	b002      	add	sp, #8
   24f78:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   24f7a:	4622      	mov	r2, r4
   24f7c:	a901      	add	r1, sp, #4
   24f7e:	9800      	ldr	r0, [sp, #0]
   24f80:	f7fa fb3a 	bl	1f5f8 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   24f84:	9800      	ldr	r0, [sp, #0]
   24f86:	3004      	adds	r0, #4
   24f88:	e7f5      	b.n	24f76 <k_mem_pool_malloc+0x14>

00024f8a <k_free>:
	if (ptr != NULL) {
   24f8a:	b110      	cbz	r0, 24f92 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   24f8c:	3804      	subs	r0, #4
   24f8e:	f7f7 b843 	b.w	1c018 <k_mem_pool_free_id>
}
   24f92:	4770      	bx	lr

00024f94 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   24f94:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
   24f96:	e9c0 3302 	strd	r3, r3, [r0, #8]
   24f9a:	e9c0 0000 	strd	r0, r0, [r0]
}
   24f9e:	4770      	bx	lr

00024fa0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   24fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24fa4:	4604      	mov	r4, r0
   24fa6:	460f      	mov	r7, r1
   24fa8:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24faa:	f100 0508 	add.w	r5, r0, #8
   24fae:	f04f 0220 	mov.w	r2, #32
   24fb2:	f3ef 8611 	mrs	r6, BASEPRI
   24fb6:	f382 8811 	msr	BASEPRI, r2
   24fba:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   24fbe:	b1db      	cbz	r3, 24ff8 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   24fc0:	2008      	movs	r0, #8
   24fc2:	f7f7 f85b 	bl	1c07c <z_thread_malloc>
		if (anode == NULL) {
   24fc6:	b938      	cbnz	r0, 24fd8 <queue_insert+0x38>
	__asm__ volatile(
   24fc8:	f386 8811 	msr	BASEPRI, r6
   24fcc:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   24fd0:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   24fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   24fd8:	2301      	movs	r3, #1
		anode->data = data;
   24fda:	f8c0 8004 	str.w	r8, [r0, #4]
   24fde:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   24fe0:	6803      	ldr	r3, [r0, #0]
   24fe2:	f003 0203 	and.w	r2, r3, #3
   24fe6:	b95f      	cbnz	r7, 25000 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24fe8:	6823      	ldr	r3, [r4, #0]
   24fea:	4313      	orrs	r3, r2
   24fec:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24fee:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   24ff0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24ff2:	b973      	cbnz	r3, 25012 <queue_insert+0x72>
	list->tail = node;
   24ff4:	6060      	str	r0, [r4, #4]
   24ff6:	e00c      	b.n	25012 <queue_insert+0x72>
	node->next_and_flags = flags;
   24ff8:	f8c8 3000 	str.w	r3, [r8]
   24ffc:	4640      	mov	r0, r8
   24ffe:	e7ef      	b.n	24fe0 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25000:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25002:	f033 0303 	bics.w	r3, r3, #3
   25006:	d114      	bne.n	25032 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25008:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2500a:	6862      	ldr	r2, [r4, #4]
   2500c:	b95a      	cbnz	r2, 25026 <queue_insert+0x86>
	list->head = node;
   2500e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25012:	2104      	movs	r1, #4
   25014:	4628      	mov	r0, r5
   25016:	f000 fbbc 	bl	25792 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2501a:	4628      	mov	r0, r5
   2501c:	4631      	mov	r1, r6
   2501e:	f000 f8ed 	bl	251fc <z_reschedule>
	return 0;
   25022:	2000      	movs	r0, #0
   25024:	e7d6      	b.n	24fd4 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25026:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25028:	f003 0303 	and.w	r3, r3, #3
   2502c:	4303      	orrs	r3, r0
   2502e:	6013      	str	r3, [r2, #0]
   25030:	e7e0      	b.n	24ff4 <queue_insert+0x54>
   25032:	4313      	orrs	r3, r2
   25034:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25036:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25038:	f003 0303 	and.w	r3, r3, #3
   2503c:	4318      	orrs	r0, r3
   2503e:	6038      	str	r0, [r7, #0]
   25040:	e7e7      	b.n	25012 <queue_insert+0x72>

00025042 <z_queue_node_peek>:
{
   25042:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   25044:	4604      	mov	r4, r0
   25046:	b130      	cbz	r0, 25056 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25048:	6802      	ldr	r2, [r0, #0]
   2504a:	0793      	lsls	r3, r2, #30
   2504c:	d003      	beq.n	25056 <z_queue_node_peek+0x14>
		ret = anode->data;
   2504e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25050:	b109      	cbz	r1, 25056 <z_queue_node_peek+0x14>
			k_free(anode);
   25052:	f7ff ff9a 	bl	24f8a <k_free>
}
   25056:	4620      	mov	r0, r4
   25058:	bd10      	pop	{r4, pc}

0002505a <z_impl_k_queue_init>:
	list->head = NULL;
   2505a:	2300      	movs	r3, #0
	list->tail = NULL;
   2505c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   25060:	f100 0308 	add.w	r3, r0, #8
   25064:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   25068:	4770      	bx	lr

0002506a <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2506a:	460a      	mov	r2, r1
   2506c:	2300      	movs	r3, #0
   2506e:	6841      	ldr	r1, [r0, #4]
   25070:	f7ff bf96 	b.w	24fa0 <queue_insert>

00025074 <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   25074:	2300      	movs	r3, #0
   25076:	460a      	mov	r2, r1
   25078:	4619      	mov	r1, r3
   2507a:	f7ff bf91 	b.w	24fa0 <queue_insert>

0002507e <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2507e:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(head && tail, "invalid head or tail");

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25080:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   25084:	f04f 0320 	mov.w	r3, #32
   25088:	f3ef 8611 	mrs	r6, BASEPRI
   2508c:	f383 8811 	msr	BASEPRI, r3
   25090:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25094:	6843      	ldr	r3, [r0, #4]
   25096:	b95b      	cbnz	r3, 250b0 <k_queue_append_list+0x32>
	list->head = node;
   25098:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2509a:	6042      	str	r2, [r0, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2509c:	2104      	movs	r1, #4
   2509e:	4628      	mov	r0, r5
   250a0:	f000 fb77 	bl	25792 <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   250a4:	4631      	mov	r1, r6
   250a6:	4628      	mov	r0, r5
}
   250a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   250ac:	f000 b8a6 	b.w	251fc <z_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   250b0:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   250b2:	f004 0403 	and.w	r4, r4, #3
   250b6:	4321      	orrs	r1, r4
   250b8:	6019      	str	r1, [r3, #0]
   250ba:	e7ee      	b.n	2509a <k_queue_append_list+0x1c>

000250bc <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   250bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   250c0:	4604      	mov	r4, r0
   250c2:	b086      	sub	sp, #24
   250c4:	460d      	mov	r5, r1
   250c6:	f04f 0320 	mov.w	r3, #32
   250ca:	f3ef 8711 	mrs	r7, BASEPRI
   250ce:	f383 8811 	msr	BASEPRI, r3
   250d2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   250d6:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   250d8:	b188      	cbz	r0, 250fe <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   250da:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   250dc:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   250de:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   250e2:	4290      	cmp	r0, r2
	list->head = node;
   250e4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   250e6:	bf08      	it	eq
   250e8:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   250ea:	2101      	movs	r1, #1
   250ec:	f7ff ffa9 	bl	25042 <z_queue_node_peek>
	__asm__ volatile(
   250f0:	f387 8811 	msr	BASEPRI, r7
   250f4:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   250f8:	b006      	add	sp, #24
   250fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   250fe:	2900      	cmp	r1, #0
   25100:	d0f6      	beq.n	250f0 <z_impl_k_queue_get+0x34>
   25102:	f387 8811 	msr	BASEPRI, r7
   25106:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2510a:	2104      	movs	r1, #4
   2510c:	4602      	mov	r2, r0
   2510e:	4623      	mov	r3, r4
   25110:	eb0d 0001 	add.w	r0, sp, r1
   25114:	f7f7 fef2 	bl	1cefc <k_poll_event_init>
	if (timeout != K_FOREVER) {
   25118:	1c6a      	adds	r2, r5, #1
   2511a:	d002      	beq.n	25122 <z_impl_k_queue_get+0x66>
   2511c:	f000 fa06 	bl	2552c <z_impl_k_uptime_get>
   25120:	4606      	mov	r6, r0
{
   25122:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   25124:	9b04      	ldr	r3, [sp, #16]
   25126:	f36f 3310 	bfc	r3, #12, #5
   2512a:	9304      	str	r3, [sp, #16]
	return z_impl_k_poll(events, num_events, timeout);
   2512c:	2101      	movs	r1, #1
   2512e:	1bea      	subs	r2, r5, r7
   25130:	a801      	add	r0, sp, #4
   25132:	f7f7 fef7 	bl	1cf24 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   25136:	b118      	cbz	r0, 25140 <z_impl_k_queue_get+0x84>
   25138:	300b      	adds	r0, #11
   2513a:	d001      	beq.n	25140 <z_impl_k_queue_get+0x84>
			return NULL;
   2513c:	2000      	movs	r0, #0
   2513e:	e7db      	b.n	250f8 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   25140:	f04f 0320 	mov.w	r3, #32
   25144:	f3ef 8811 	mrs	r8, BASEPRI
   25148:	f383 8811 	msr	BASEPRI, r3
   2514c:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   25150:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   25152:	b138      	cbz	r0, 25164 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25154:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25156:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25158:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2515c:	4290      	cmp	r0, r2
	list->head = node;
   2515e:	6023      	str	r3, [r4, #0]
	list->tail = node;
   25160:	bf08      	it	eq
   25162:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   25164:	2101      	movs	r1, #1
   25166:	f7ff ff6c 	bl	25042 <z_queue_node_peek>
	__asm__ volatile(
   2516a:	f388 8811 	msr	BASEPRI, r8
   2516e:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   25172:	2800      	cmp	r0, #0
   25174:	d1c0      	bne.n	250f8 <z_impl_k_queue_get+0x3c>
   25176:	1c6b      	adds	r3, r5, #1
   25178:	d0d4      	beq.n	25124 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   2517a:	f000 f9d7 	bl	2552c <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   2517e:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   25180:	42bd      	cmp	r5, r7
   25182:	dacf      	bge.n	25124 <z_impl_k_queue_get+0x68>
   25184:	e7da      	b.n	2513c <z_impl_k_queue_get+0x80>

00025186 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25186:	7b43      	ldrb	r3, [r0, #13]
   25188:	06db      	lsls	r3, r3, #27
   2518a:	bf03      	ittte	eq
   2518c:	6980      	ldreq	r0, [r0, #24]
   2518e:	fab0 f080 	clzeq	r0, r0
   25192:	0940      	lsreq	r0, r0, #5
   25194:	2000      	movne	r0, #0
}
   25196:	4770      	bx	lr

00025198 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   25198:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2519c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   251a0:	4298      	cmp	r0, r3
   251a2:	bfac      	ite	ge
   251a4:	2000      	movge	r0, #0
   251a6:	2001      	movlt	r0, #1
   251a8:	4770      	bx	lr

000251aa <z_find_first_thread_to_unpend>:
{
   251aa:	b510      	push	{r4, lr}
	__asm__ volatile(
   251ac:	f04f 0320 	mov.w	r3, #32
   251b0:	f3ef 8411 	mrs	r4, BASEPRI
   251b4:	f383 8811 	msr	BASEPRI, r3
   251b8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   251bc:	f000 f85d 	bl	2527a <z_priq_dumb_best>
	__asm__ volatile(
   251c0:	f384 8811 	msr	BASEPRI, r4
   251c4:	f3bf 8f6f 	isb	sy
}
   251c8:	bd10      	pop	{r4, pc}

000251ca <z_unpend_thread_no_timeout>:
{
   251ca:	b538      	push	{r3, r4, r5, lr}
   251cc:	4604      	mov	r4, r0
	__asm__ volatile(
   251ce:	f04f 0320 	mov.w	r3, #32
   251d2:	f3ef 8511 	mrs	r5, BASEPRI
   251d6:	f383 8811 	msr	BASEPRI, r3
   251da:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   251de:	4601      	mov	r1, r0
   251e0:	6880      	ldr	r0, [r0, #8]
   251e2:	f7f7 f85d 	bl	1c2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   251e6:	7b63      	ldrb	r3, [r4, #13]
   251e8:	f023 0302 	bic.w	r3, r3, #2
   251ec:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   251ee:	f385 8811 	msr	BASEPRI, r5
   251f2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   251f6:	2300      	movs	r3, #0
   251f8:	60a3      	str	r3, [r4, #8]
}
   251fa:	bd38      	pop	{r3, r4, r5, pc}

000251fc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   251fc:	b921      	cbnz	r1, 25208 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   251fe:	f3ef 8005 	mrs	r0, IPSR
   25202:	b908      	cbnz	r0, 25208 <z_reschedule+0xc>
   25204:	f7df baf8 	b.w	47f8 <arch_swap>
   25208:	f381 8811 	msr	BASEPRI, r1
   2520c:	f3bf 8f6f 	isb	sy
}
   25210:	4770      	bx	lr

00025212 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25212:	4603      	mov	r3, r0
   25214:	b920      	cbnz	r0, 25220 <z_reschedule_irqlock+0xe>
   25216:	f3ef 8205 	mrs	r2, IPSR
   2521a:	b90a      	cbnz	r2, 25220 <z_reschedule_irqlock+0xe>
   2521c:	f7df baec 	b.w	47f8 <arch_swap>
   25220:	f383 8811 	msr	BASEPRI, r3
   25224:	f3bf 8f6f 	isb	sy
}
   25228:	4770      	bx	lr

0002522a <z_reschedule_unlocked>:
	__asm__ volatile(
   2522a:	f04f 0320 	mov.w	r3, #32
   2522e:	f3ef 8011 	mrs	r0, BASEPRI
   25232:	f383 8811 	msr	BASEPRI, r3
   25236:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2523a:	f7ff bfea 	b.w	25212 <z_reschedule_irqlock>

0002523e <z_unpend_thread>:
{
   2523e:	b538      	push	{r3, r4, r5, lr}
   25240:	4604      	mov	r4, r0
   25242:	f04f 0320 	mov.w	r3, #32
   25246:	f3ef 8511 	mrs	r5, BASEPRI
   2524a:	f383 8811 	msr	BASEPRI, r3
   2524e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25252:	4601      	mov	r1, r0
   25254:	6880      	ldr	r0, [r0, #8]
   25256:	f7f7 f823 	bl	1c2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2525a:	7b63      	ldrb	r3, [r4, #13]
   2525c:	f023 0302 	bic.w	r3, r3, #2
   25260:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25262:	f385 8811 	msr	BASEPRI, r5
   25266:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2526a:	2300      	movs	r3, #0
   2526c:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   2526e:	f104 0018 	add.w	r0, r4, #24
}
   25272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25276:	f000 b915 	b.w	254a4 <z_abort_timeout>

0002527a <z_priq_dumb_best>:
	return list->head == list;
   2527a:	6803      	ldr	r3, [r0, #0]
}
   2527c:	4298      	cmp	r0, r3
   2527e:	bf14      	ite	ne
   25280:	4618      	movne	r0, r3
   25282:	2000      	moveq	r0, #0
   25284:	4770      	bx	lr

00025286 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   25286:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   2528a:	b570      	push	{r4, r5, r6, lr}
   2528c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2528e:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   25292:	b1cb      	cbz	r3, 252c8 <z_thread_timeout+0x42>
	__asm__ volatile(
   25294:	f04f 0320 	mov.w	r3, #32
   25298:	f3ef 8611 	mrs	r6, BASEPRI
   2529c:	f383 8811 	msr	BASEPRI, r3
   252a0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   252a4:	4629      	mov	r1, r5
   252a6:	f850 0c10 	ldr.w	r0, [r0, #-16]
   252aa:	f7f6 fff9 	bl	1c2a0 <z_priq_dumb_remove>
   252ae:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   252b2:	f023 0302 	bic.w	r3, r3, #2
   252b6:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   252ba:	f386 8811 	msr	BASEPRI, r6
   252be:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   252c2:	2300      	movs	r3, #0
   252c4:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   252c8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   252cc:	f023 0314 	bic.w	r3, r3, #20
   252d0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   252d4:	4628      	mov	r0, r5
   252d6:	f7ff ff56 	bl	25186 <z_is_thread_ready>
   252da:	b120      	cbz	r0, 252e6 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   252dc:	4628      	mov	r0, r5
}
   252de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   252e2:	f7f7 b82d 	b.w	1c340 <z_add_thread_to_ready_q>
   252e6:	bd70      	pop	{r4, r5, r6, pc}

000252e8 <z_unpend_first_thread>:
{
   252e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   252ea:	f04f 0320 	mov.w	r3, #32
   252ee:	f3ef 8211 	mrs	r2, BASEPRI
   252f2:	f383 8811 	msr	BASEPRI, r3
   252f6:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   252fa:	f7ff ffbe 	bl	2527a <z_priq_dumb_best>
   252fe:	4604      	mov	r4, r0
	__asm__ volatile(
   25300:	f382 8811 	msr	BASEPRI, r2
   25304:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   25308:	b1c8      	cbz	r0, 2533e <z_unpend_first_thread+0x56>
	__asm__ volatile(
   2530a:	f04f 0320 	mov.w	r3, #32
   2530e:	f3ef 8511 	mrs	r5, BASEPRI
   25312:	f383 8811 	msr	BASEPRI, r3
   25316:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2531a:	4601      	mov	r1, r0
   2531c:	6880      	ldr	r0, [r0, #8]
   2531e:	f7f6 ffbf 	bl	1c2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25322:	7b63      	ldrb	r3, [r4, #13]
   25324:	f023 0302 	bic.w	r3, r3, #2
   25328:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   2532a:	f385 8811 	msr	BASEPRI, r5
   2532e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25332:	2300      	movs	r3, #0
   25334:	60a3      	str	r3, [r4, #8]
   25336:	f104 0018 	add.w	r0, r4, #24
   2533a:	f000 f8b3 	bl	254a4 <z_abort_timeout>
}
   2533e:	4620      	mov	r0, r4
   25340:	bd38      	pop	{r3, r4, r5, pc}

00025342 <z_unpend_all>:
{
   25342:	b570      	push	{r4, r5, r6, lr}
   25344:	4606      	mov	r6, r0
	int need_sched = 0;
   25346:	2500      	movs	r5, #0
   25348:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2534a:	42a6      	cmp	r6, r4
   2534c:	d000      	beq.n	25350 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2534e:	b90c      	cbnz	r4, 25354 <z_unpend_all+0x12>
}
   25350:	4628      	mov	r0, r5
   25352:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   25354:	4620      	mov	r0, r4
   25356:	f7ff ff72 	bl	2523e <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   2535a:	4620      	mov	r0, r4
   2535c:	f7ff ff13 	bl	25186 <z_is_thread_ready>
		need_sched = 1;
   25360:	2501      	movs	r5, #1
   25362:	2800      	cmp	r0, #0
   25364:	d0f0      	beq.n	25348 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   25366:	4620      	mov	r0, r4
   25368:	f7f6 ffea 	bl	1c340 <z_add_thread_to_ready_q>
   2536c:	e7ec      	b.n	25348 <z_unpend_all+0x6>

0002536e <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   2536e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25372:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   25376:	e9c0 0000 	strd	r0, r0, [r0]
   2537a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2537e:	4770      	bx	lr

00025380 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   25380:	f7e0 bd4a 	b.w	5e18 <arch_busy_wait>

00025384 <z_impl_k_thread_name_set>:
}
   25384:	f06f 0046 	mvn.w	r0, #70	; 0x46
   25388:	4770      	bx	lr

0002538a <k_thread_name_get>:
}
   2538a:	2000      	movs	r0, #0
   2538c:	4770      	bx	lr

0002538e <z_new_thread_init>:
{
   2538e:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   25390:	9c02      	ldr	r4, [sp, #8]
   25392:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   25394:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
   25396:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
   25398:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   2539a:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
   2539c:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   2539e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   253a2:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   253a6:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   253aa:	bd10      	pop	{r4, pc}

000253ac <k_work_submit_to_queue>:
{
   253ac:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   253ae:	f101 0308 	add.w	r3, r1, #8
   253b2:	f3bf 8f5b 	dmb	ish
   253b6:	e853 2f00 	ldrex	r2, [r3]
   253ba:	f042 0c01 	orr.w	ip, r2, #1
   253be:	e843 ce00 	strex	lr, ip, [r3]
   253c2:	f1be 0f00 	cmp.w	lr, #0
   253c6:	d1f6      	bne.n	253b6 <k_work_submit_to_queue+0xa>
   253c8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   253cc:	07d3      	lsls	r3, r2, #31
   253ce:	d403      	bmi.n	253d8 <k_work_submit_to_queue+0x2c>
}
   253d0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   253d4:	f7ff be49 	b.w	2506a <k_queue_append>
}
   253d8:	f85d fb04 	ldr.w	pc, [sp], #4

000253dc <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   253dc:	f1a0 010c 	sub.w	r1, r0, #12
   253e0:	6900      	ldr	r0, [r0, #16]
   253e2:	f7ff bfe3 	b.w	253ac <k_work_submit_to_queue>

000253e6 <work_cancel>:
{
   253e6:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   253e8:	f3bf 8f5b 	dmb	ish
   253ec:	6883      	ldr	r3, [r0, #8]
   253ee:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   253f2:	07db      	lsls	r3, r3, #31
{
   253f4:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   253f6:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   253fa:	d532      	bpl.n	25462 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   253fc:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   253fe:	6813      	ldr	r3, [r2, #0]
   25400:	2100      	movs	r1, #0
   25402:	b913      	cbnz	r3, 2540a <work_cancel+0x24>
			return -EINVAL;
   25404:	f06f 0015 	mvn.w	r0, #21
}
   25408:	bd70      	pop	{r4, r5, r6, pc}
   2540a:	429c      	cmp	r4, r3
   2540c:	d124      	bne.n	25458 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   2540e:	6823      	ldr	r3, [r4, #0]
   25410:	6856      	ldr	r6, [r2, #4]
   25412:	f023 0003 	bic.w	r0, r3, #3
   25416:	b9b1      	cbnz	r1, 25446 <work_cancel+0x60>
   25418:	42b4      	cmp	r4, r6
	list->head = node;
   2541a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2541c:	d100      	bne.n	25420 <work_cancel+0x3a>
	list->tail = node;
   2541e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25420:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25422:	f003 0303 	and.w	r3, r3, #3
   25426:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   25428:	2000      	movs	r0, #0
   2542a:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2542c:	f3bf 8f5b 	dmb	ish
   25430:	e855 3f00 	ldrex	r3, [r5]
   25434:	f023 0301 	bic.w	r3, r3, #1
   25438:	e845 3200 	strex	r2, r3, [r5]
   2543c:	2a00      	cmp	r2, #0
   2543e:	d1f7      	bne.n	25430 <work_cancel+0x4a>
   25440:	f3bf 8f5b 	dmb	ish
   25444:	e7e0      	b.n	25408 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25446:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25448:	f003 0303 	and.w	r3, r3, #3
   2544c:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2544e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   25450:	600b      	str	r3, [r1, #0]
	list->tail = node;
   25452:	bf08      	it	eq
   25454:	6051      	streq	r1, [r2, #4]
   25456:	e7e3      	b.n	25420 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25458:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2545a:	4619      	mov	r1, r3
   2545c:	f020 0303 	bic.w	r3, r0, #3
   25460:	e7cf      	b.n	25402 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   25462:	300c      	adds	r0, #12
   25464:	f000 f81e 	bl	254a4 <z_abort_timeout>
   25468:	e7de      	b.n	25428 <work_cancel+0x42>

0002546a <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2546a:	2300      	movs	r3, #0
   2546c:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   25470:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   25474:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   25476:	61c3      	str	r3, [r0, #28]
}
   25478:	4770      	bx	lr

0002547a <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   2547a:	69c3      	ldr	r3, [r0, #28]
{
   2547c:	b510      	push	{r4, lr}
	if (!work->work_q) {
   2547e:	b173      	cbz	r3, 2549e <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   25480:	f04f 0320 	mov.w	r3, #32
   25484:	f3ef 8411 	mrs	r4, BASEPRI
   25488:	f383 8811 	msr	BASEPRI, r3
   2548c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   25490:	f7ff ffa9 	bl	253e6 <work_cancel>
	__asm__ volatile(
   25494:	f384 8811 	msr	BASEPRI, r4
   25498:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2549c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2549e:	f06f 0015 	mvn.w	r0, #21
   254a2:	e7fb      	b.n	2549c <k_delayed_work_cancel+0x22>

000254a4 <z_abort_timeout>:
{
   254a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   254a6:	f04f 0220 	mov.w	r2, #32
   254aa:	f3ef 8411 	mrs	r4, BASEPRI
   254ae:	f382 8811 	msr	BASEPRI, r2
   254b2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   254b6:	6803      	ldr	r3, [r0, #0]
   254b8:	b13b      	cbz	r3, 254ca <z_abort_timeout+0x26>
			remove_timeout(to);
   254ba:	f7f7 fbbd 	bl	1cc38 <remove_timeout>
			ret = 0;
   254be:	2000      	movs	r0, #0
	__asm__ volatile(
   254c0:	f384 8811 	msr	BASEPRI, r4
   254c4:	f3bf 8f6f 	isb	sy
}
   254c8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   254ca:	f06f 0015 	mvn.w	r0, #21
   254ce:	e7f7      	b.n	254c0 <z_abort_timeout+0x1c>

000254d0 <z_get_next_timeout_expiry>:
{
   254d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   254d2:	f04f 0320 	mov.w	r3, #32
   254d6:	f3ef 8411 	mrs	r4, BASEPRI
   254da:	f383 8811 	msr	BASEPRI, r3
   254de:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   254e2:	f7f7 fbbd 	bl	1cc60 <next_timeout>
	__asm__ volatile(
   254e6:	f384 8811 	msr	BASEPRI, r4
   254ea:	f3bf 8f6f 	isb	sy
}
   254ee:	bd10      	pop	{r4, pc}

000254f0 <z_set_timeout_expiry>:
{
   254f0:	b570      	push	{r4, r5, r6, lr}
   254f2:	4604      	mov	r4, r0
   254f4:	460e      	mov	r6, r1
	__asm__ volatile(
   254f6:	f04f 0320 	mov.w	r3, #32
   254fa:	f3ef 8511 	mrs	r5, BASEPRI
   254fe:	f383 8811 	msr	BASEPRI, r3
   25502:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   25506:	f7f7 fbab 	bl	1cc60 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2550a:	2801      	cmp	r0, #1
   2550c:	dd05      	ble.n	2551a <z_set_timeout_expiry+0x2a>
   2550e:	42a0      	cmp	r0, r4
   25510:	dd03      	ble.n	2551a <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   25512:	4631      	mov	r1, r6
   25514:	4620      	mov	r0, r4
   25516:	f7df f8d7 	bl	46c8 <z_clock_set_timeout>
	__asm__ volatile(
   2551a:	f385 8811 	msr	BASEPRI, r5
   2551e:	f3bf 8f6f 	isb	sy
}
   25522:	bd70      	pop	{r4, r5, r6, pc}

00025524 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   25524:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   25526:	f7f7 fc79 	bl	1ce1c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2552a:	bd08      	pop	{r3, pc}

0002552c <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   2552c:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   2552e:	f7f7 fc75 	bl	1ce1c <z_tick_get>
			return (t * to_hz + off) / from_hz;
   25532:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   25536:	fba0 2304 	umull	r2, r3, r0, r4
   2553a:	fb04 3301 	mla	r3, r4, r1, r3
   2553e:	0bd0      	lsrs	r0, r2, #15
}
   25540:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   25544:	0bd9      	lsrs	r1, r3, #15
   25546:	bd10      	pop	{r4, pc}

00025548 <k_timer_init>:
	timer->status = 0U;
   25548:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2554a:	e9c0 1206 	strd	r1, r2, [r0, #24]
   2554e:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   25552:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   25554:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   25558:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   2555c:	6283      	str	r3, [r0, #40]	; 0x28
}
   2555e:	4770      	bx	lr

00025560 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   25560:	b510      	push	{r4, lr}
   25562:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   25564:	f7ff ff9e 	bl	254a4 <z_abort_timeout>

	if (inactive) {
   25568:	bb00      	cbnz	r0, 255ac <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   2556a:	69e3      	ldr	r3, [r4, #28]
   2556c:	b10b      	cbz	r3, 25572 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2556e:	4620      	mov	r0, r4
   25570:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   25572:	f104 0010 	add.w	r0, r4, #16
   25576:	2100      	movs	r1, #0
   25578:	f7ff fe17 	bl	251aa <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2557c:	4604      	mov	r4, r0
   2557e:	b1a8      	cbz	r0, 255ac <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   25580:	f7ff fe23 	bl	251ca <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25584:	7b63      	ldrb	r3, [r4, #13]
   25586:	06db      	lsls	r3, r3, #27
   25588:	d104      	bne.n	25594 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   2558a:	69a3      	ldr	r3, [r4, #24]
   2558c:	b913      	cbnz	r3, 25594 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   2558e:	4620      	mov	r0, r4
   25590:	f7f6 fed6 	bl	1c340 <z_add_thread_to_ready_q>
	__asm__ volatile(
   25594:	f04f 0320 	mov.w	r3, #32
   25598:	f3ef 8011 	mrs	r0, BASEPRI
   2559c:	f383 8811 	msr	BASEPRI, r3
   255a0:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   255a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   255a8:	f7ff be33 	b.w	25212 <z_reschedule_irqlock>
   255ac:	bd10      	pop	{r4, pc}

000255ae <clear_event_registrations>:
	while (num_events--) {
   255ae:	2314      	movs	r3, #20
{
   255b0:	b570      	push	{r4, r5, r6, lr}
   255b2:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   255b6:	2400      	movs	r4, #0
   255b8:	2601      	movs	r6, #1
	while (num_events--) {
   255ba:	4281      	cmp	r1, r0
   255bc:	d100      	bne.n	255c0 <clear_event_registrations+0x12>
}
   255be:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   255c0:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   255c4:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   255c8:	f003 030f 	and.w	r3, r3, #15
   255cc:	2b04      	cmp	r3, #4
   255ce:	d80d      	bhi.n	255ec <clear_event_registrations+0x3e>
   255d0:	fa06 f303 	lsl.w	r3, r6, r3
   255d4:	f013 0f16 	tst.w	r3, #22
   255d8:	d008      	beq.n	255ec <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   255da:	f851 3c14 	ldr.w	r3, [r1, #-20]
   255de:	b12b      	cbz	r3, 255ec <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   255e0:	f851 5c10 	ldr.w	r5, [r1, #-16]
   255e4:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   255e6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   255e8:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   255ec:	f382 8811 	msr	BASEPRI, r2
   255f0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   255f4:	f04f 0320 	mov.w	r3, #32
   255f8:	f3ef 8211 	mrs	r2, BASEPRI
   255fc:	f383 8811 	msr	BASEPRI, r3
   25600:	f3bf 8f6f 	isb	sy
   25604:	3914      	subs	r1, #20
   25606:	e7d8      	b.n	255ba <clear_event_registrations+0xc>

00025608 <signal_poll_event>:
{
   25608:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2560a:	6884      	ldr	r4, [r0, #8]
{
   2560c:	4605      	mov	r5, r0
   2560e:	460e      	mov	r6, r1
	if (poller) {
   25610:	b19c      	cbz	r4, 2563a <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   25612:	68a3      	ldr	r3, [r4, #8]
   25614:	b95b      	cbnz	r3, 2562e <signal_poll_event+0x26>
		poller->is_polling = false;
   25616:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   25618:	4618      	mov	r0, r3
	event->poller = NULL;
   2561a:	2300      	movs	r3, #0
   2561c:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2561e:	68eb      	ldr	r3, [r5, #12]
   25620:	f3c3 3204 	ubfx	r2, r3, #12, #5
   25624:	4316      	orrs	r6, r2
   25626:	f366 3310 	bfi	r3, r6, #12, #5
   2562a:	60eb      	str	r3, [r5, #12]
	return retcode;
   2562c:	e004      	b.n	25638 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2562e:	4798      	blx	r3
		poller->is_polling = false;
   25630:	2300      	movs	r3, #0
		if (retcode < 0) {
   25632:	2800      	cmp	r0, #0
		poller->is_polling = false;
   25634:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   25636:	daf0      	bge.n	2561a <signal_poll_event+0x12>
}
   25638:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2563a:	4620      	mov	r0, r4
   2563c:	e7ed      	b.n	2561a <signal_poll_event+0x12>

0002563e <k_poll_poller_cb>:
{
   2563e:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   25640:	6883      	ldr	r3, [r0, #8]
   25642:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   25644:	7b63      	ldrb	r3, [r4, #13]
   25646:	079a      	lsls	r2, r3, #30
{
   25648:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   2564a:	d401      	bmi.n	25650 <k_poll_poller_cb+0x12>
		return 0;
   2564c:	2000      	movs	r0, #0
}
   2564e:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   25650:	6a23      	ldr	r3, [r4, #32]
   25652:	3302      	adds	r3, #2
   25654:	d012      	beq.n	2567c <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   25656:	4620      	mov	r0, r4
   25658:	f7ff fdf1 	bl	2523e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2565c:	2d08      	cmp	r5, #8
   2565e:	bf0c      	ite	eq
   25660:	f06f 0303 	mvneq.w	r3, #3
   25664:	2300      	movne	r3, #0
   25666:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25668:	7b63      	ldrb	r3, [r4, #13]
   2566a:	06db      	lsls	r3, r3, #27
   2566c:	d1ee      	bne.n	2564c <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   2566e:	69a5      	ldr	r5, [r4, #24]
   25670:	2d00      	cmp	r5, #0
   25672:	d1eb      	bne.n	2564c <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   25674:	4620      	mov	r0, r4
   25676:	f7f6 fe63 	bl	1c340 <z_add_thread_to_ready_q>
	return 0;
   2567a:	e7e7      	b.n	2564c <k_poll_poller_cb+0xe>
		return -EAGAIN;
   2567c:	f06f 000a 	mvn.w	r0, #10
   25680:	e7e5      	b.n	2564e <k_poll_poller_cb+0x10>

00025682 <add_event>:
{
   25682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25684:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   25686:	e9d0 2300 	ldrd	r2, r3, [r0]
   2568a:	4290      	cmp	r0, r2
   2568c:	4604      	mov	r4, r0
   2568e:	460d      	mov	r5, r1
   25690:	d106      	bne.n	256a0 <add_event+0x1e>
	node->prev = list->tail;
   25692:	6863      	ldr	r3, [r4, #4]
   25694:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   25696:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   25698:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2569a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2569c:	6065      	str	r5, [r4, #4]
}
   2569e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   256a0:	2b00      	cmp	r3, #0
   256a2:	d0f6      	beq.n	25692 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   256a4:	689b      	ldr	r3, [r3, #8]
   256a6:	6879      	ldr	r1, [r7, #4]
   256a8:	6858      	ldr	r0, [r3, #4]
   256aa:	f7ff fd75 	bl	25198 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   256ae:	2800      	cmp	r0, #0
   256b0:	d1ef      	bne.n	25692 <add_event+0x10>
	return list->head == list;
   256b2:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   256b4:	42b4      	cmp	r4, r6
   256b6:	d0ec      	beq.n	25692 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   256b8:	2e00      	cmp	r6, #0
   256ba:	d0ea      	beq.n	25692 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   256bc:	68b3      	ldr	r3, [r6, #8]
   256be:	6878      	ldr	r0, [r7, #4]
   256c0:	6859      	ldr	r1, [r3, #4]
   256c2:	f7ff fd69 	bl	25198 <z_is_t1_higher_prio_than_t2>
   256c6:	b128      	cbz	r0, 256d4 <add_event+0x52>
	node->prev = successor->prev;
   256c8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   256ca:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   256ce:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   256d0:	6075      	str	r5, [r6, #4]
			return;
   256d2:	e7e4      	b.n	2569e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   256d4:	6863      	ldr	r3, [r4, #4]
   256d6:	429e      	cmp	r6, r3
   256d8:	d0db      	beq.n	25692 <add_event+0x10>
   256da:	6836      	ldr	r6, [r6, #0]
   256dc:	e7ec      	b.n	256b8 <add_event+0x36>

000256de <register_events>:
{
   256de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   256e2:	f04f 0b00 	mov.w	fp, #0
{
   256e6:	4688      	mov	r8, r1
   256e8:	4615      	mov	r5, r2
   256ea:	4699      	mov	r9, r3
   256ec:	4604      	mov	r4, r0
	int events_registered = 0;
   256ee:	465e      	mov	r6, fp
	event->poller = NULL;
   256f0:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   256f2:	45c3      	cmp	fp, r8
   256f4:	db02      	blt.n	256fc <register_events+0x1e>
}
   256f6:	4630      	mov	r0, r6
   256f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256fc:	f04f 0320 	mov.w	r3, #32
   25700:	f3ef 8a11 	mrs	sl, BASEPRI
   25704:	f383 8811 	msr	BASEPRI, r3
   25708:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2570c:	7b63      	ldrb	r3, [r4, #13]
   2570e:	f003 030f 	and.w	r3, r3, #15
   25712:	2b02      	cmp	r3, #2
   25714:	d005      	beq.n	25722 <register_events+0x44>
   25716:	2b04      	cmp	r3, #4
   25718:	d006      	beq.n	25728 <register_events+0x4a>
   2571a:	2b01      	cmp	r3, #1
   2571c:	d118      	bne.n	25750 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   2571e:	6922      	ldr	r2, [r4, #16]
   25720:	e000      	b.n	25724 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   25722:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   25724:	6892      	ldr	r2, [r2, #8]
   25726:	e001      	b.n	2572c <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   25728:	6922      	ldr	r2, [r4, #16]
   2572a:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   2572c:	b182      	cbz	r2, 25750 <register_events+0x72>
	event->state |= state;
   2572e:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   25730:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   25732:	f3c2 3104 	ubfx	r1, r2, #12, #5
   25736:	430b      	orrs	r3, r1
   25738:	f363 3210 	bfi	r2, r3, #12, #5
   2573c:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   2573e:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   25740:	f38a 8811 	msr	BASEPRI, sl
   25744:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   25748:	f10b 0b01 	add.w	fp, fp, #1
   2574c:	3414      	adds	r4, #20
   2574e:	e7d0      	b.n	256f2 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   25750:	f1b9 0f00 	cmp.w	r9, #0
   25754:	d1f4      	bne.n	25740 <register_events+0x62>
   25756:	782b      	ldrb	r3, [r5, #0]
   25758:	2b00      	cmp	r3, #0
   2575a:	d0f1      	beq.n	25740 <register_events+0x62>
	switch (event->type) {
   2575c:	7b63      	ldrb	r3, [r4, #13]
   2575e:	f003 030f 	and.w	r3, r3, #15
   25762:	2b02      	cmp	r3, #2
   25764:	d007      	beq.n	25776 <register_events+0x98>
   25766:	2b04      	cmp	r3, #4
   25768:	d00e      	beq.n	25788 <register_events+0xaa>
   2576a:	2b01      	cmp	r3, #1
   2576c:	d109      	bne.n	25782 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   2576e:	462a      	mov	r2, r5
   25770:	4621      	mov	r1, r4
   25772:	6920      	ldr	r0, [r4, #16]
   25774:	e003      	b.n	2577e <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   25776:	6920      	ldr	r0, [r4, #16]
   25778:	462a      	mov	r2, r5
   2577a:	4621      	mov	r1, r4
   2577c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2577e:	f7ff ff80 	bl	25682 <add_event>
	event->poller = poller;
   25782:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   25784:	3601      	adds	r6, #1
   25786:	e7db      	b.n	25740 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   25788:	6920      	ldr	r0, [r4, #16]
   2578a:	462a      	mov	r2, r5
   2578c:	4621      	mov	r1, r4
   2578e:	3008      	adds	r0, #8
   25790:	e7f5      	b.n	2577e <register_events+0xa0>

00025792 <z_handle_obj_poll_events>:
	return list->head == list;
   25792:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   25794:	4298      	cmp	r0, r3
   25796:	d009      	beq.n	257ac <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   25798:	e9d3 2000 	ldrd	r2, r0, [r3]
   2579c:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   2579e:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   257a0:	2200      	movs	r2, #0
	node->prev = NULL;
   257a2:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   257a6:	4618      	mov	r0, r3
   257a8:	f7ff bf2e 	b.w	25608 <signal_poll_event>
}
   257ac:	4770      	bx	lr

000257ae <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   257ae:	4770      	bx	lr
