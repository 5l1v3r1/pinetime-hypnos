
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	2000b348 	.word	0x2000b348
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00003339 	.word	0x00003339
   8:	00018b81 	.word	0x00018b81
		if (fdtable[fd].obj == NULL) {
   c:	0000320d 	.word	0x0000320d
  10:	0000320d 	.word	0x0000320d
  14:	0000320d 	.word	0x0000320d
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	0000320d 	.word	0x0000320d
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	0000320d 	.word	0x0000320d
	errno = ENFILE;
  20:	0000320d 	.word	0x0000320d
	return -1;
  24:	0000320d 	.word	0x0000320d
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	0000320d 	.word	0x0000320d
  2c:	000030a5 	.word	0x000030a5
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	0000320d 	.word	0x0000320d
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	0000320d 	.word	0x0000320d
  38:	00003051 	.word	0x00003051
  3c:	00018b71 	.word	0x00018b71

00000040 <_irq_vector_table>:
  40:	000032f9 0001a96d 000032f9 000032f9     .2..m....2...2..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	000032f9 000032f9 000032f9 000032f9     .2...2...2...2..
  60:	000032f9 000032f9 000032f9 000032f9     .2...2...2...2..
  70:	000032f9 000032f9 000032f9 000032f9     .2...2...2...2..
  80:	000032f9 000032f9 000032f9 000032f9     .2...2...2...2..
  90:	000032f9 000032f9 000032f9 000032f9     .2...2...2...2..
  a0:	000032f9 000032f9 000032f9 000032f9     .2...2...2...2..
  b0:	000032f9 000032f9 000032f9 000032f9     .2...2...2...2..
  c0:	000032f9 000032f9 000032f9 000032f9     .2...2...2...2..
  d0:	000032f9 000032f9 000032f9              .2...2...2..

Disassembly of section _TEXT_SECTION_NAME_2:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <CONFIG_LVGL_HOR_RES+0x8>
      e2:	b94a      	cbnz	r2, f8 <CONFIG_LVGL_HOR_RES+0x8>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	9f09      	ldr	r7, [sp, #36]	; 0x24
     11a:	4615      	mov	r5, r2
     11c:	4604      	mov	r4, r0
     11e:	468e      	mov	lr, r1
     120:	461e      	mov	r6, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80cc 	bne.w	2c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>
     128:	428a      	cmp	r2, r1
     12a:	fab2 fc82 	clz	ip, r2
     12e:	d94c      	bls.n	1ca <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xa>
     130:	f1bc 0f00 	cmp.w	ip, #0
     134:	d00b      	beq.n	14e <CONFIG_IDLE_STACK_SIZE+0xe>
     136:	f1cc 0820 	rsb	r8, ip, #32
     13a:	fa01 fe0c 	lsl.w	lr, r1, ip
     13e:	fa20 f808 	lsr.w	r8, r0, r8
     142:	fa02 f50c 	lsl.w	r5, r2, ip
     146:	ea48 0e0e 	orr.w	lr, r8, lr
     14a:	fa00 f40c 	lsl.w	r4, r0, ip
     14e:	ea4f 4915 	mov.w	r9, r5, lsr #16
     152:	fa1f f885 	uxth.w	r8, r5
     156:	fbbe faf9 	udiv	sl, lr, r9
     15a:	0c21      	lsrs	r1, r4, #16
     15c:	fb09 e31a 	mls	r3, r9, sl, lr
     160:	fb0a fb08 	mul.w	fp, sl, r8
     164:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     168:	459b      	cmp	fp, r3
     16a:	d92a      	bls.n	1c2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2>
     16c:	18eb      	adds	r3, r5, r3
     16e:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     172:	d204      	bcs.n	17e <CONFIG_IDLE_STACK_SIZE+0x3e>
     174:	459b      	cmp	fp, r3
     176:	d902      	bls.n	17e <CONFIG_IDLE_STACK_SIZE+0x3e>
     178:	f1aa 0002 	sub.w	r0, sl, #2
     17c:	442b      	add	r3, r5
     17e:	eba3 030b 	sub.w	r3, r3, fp
     182:	b2a4      	uxth	r4, r4
     184:	fbb3 f2f9 	udiv	r2, r3, r9
     188:	fb09 3312 	mls	r3, r9, r2, r3
     18c:	fb02 f808 	mul.w	r8, r2, r8
     190:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     194:	45a0      	cmp	r8, r4
     196:	d916      	bls.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     198:	192c      	adds	r4, r5, r4
     19a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19e:	d203      	bcs.n	1a8 <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x18>
     1a0:	45a0      	cmp	r8, r4
     1a2:	d901      	bls.n	1a8 <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x18>
     1a4:	1e93      	subs	r3, r2, #2
     1a6:	442c      	add	r4, r5
     1a8:	eba4 0408 	sub.w	r4, r4, r8
     1ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1b0:	b127      	cbz	r7, 1bc <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x2c>
     1b2:	fa24 f40c 	lsr.w	r4, r4, ip
     1b6:	2300      	movs	r3, #0
     1b8:	603c      	str	r4, [r7, #0]
     1ba:	607b      	str	r3, [r7, #4]
     1bc:	4631      	mov	r1, r6
     1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1c2:	4650      	mov	r0, sl
     1c4:	e7db      	b.n	17e <CONFIG_IDLE_STACK_SIZE+0x3e>
     1c6:	4613      	mov	r3, r2
     1c8:	e7ee      	b.n	1a8 <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x18>
     1ca:	b902      	cbnz	r2, 1ce <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xe>
     1cc:	deff      	udf	#255	; 0xff
     1ce:	f1bc 0f00 	cmp.w	ip, #0
     1d2:	d12e      	bne.n	232 <CONFIG_FLASH_SIZE+0x32>
     1d4:	1a8b      	subs	r3, r1, r2
     1d6:	2601      	movs	r6, #1
     1d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1dc:	b2aa      	uxth	r2, r5
     1de:	fbb3 f8fe 	udiv	r8, r3, lr
     1e2:	0c21      	lsrs	r1, r4, #16
     1e4:	fb0e 3318 	mls	r3, lr, r8, r3
     1e8:	fb08 f902 	mul.w	r9, r8, r2
     1ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1f0:	4599      	cmp	r9, r3
     1f2:	d961      	bls.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     1f4:	18eb      	adds	r3, r5, r3
     1f6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     1fa:	d204      	bcs.n	206 <CONFIG_FLASH_SIZE+0x6>
     1fc:	4599      	cmp	r9, r3
     1fe:	d902      	bls.n	206 <CONFIG_FLASH_SIZE+0x6>
     200:	f1a8 0002 	sub.w	r0, r8, #2
     204:	442b      	add	r3, r5
     206:	eba3 0309 	sub.w	r3, r3, r9
     20a:	b2a4      	uxth	r4, r4
     20c:	fbb3 f1fe 	udiv	r1, r3, lr
     210:	fb0e 3311 	mls	r3, lr, r1, r3
     214:	434a      	muls	r2, r1
     216:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     21a:	42a2      	cmp	r2, r4
     21c:	d94e      	bls.n	2bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     21e:	192c      	adds	r4, r5, r4
     220:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     224:	d203      	bcs.n	22e <CONFIG_FLASH_SIZE+0x2e>
     226:	42a2      	cmp	r2, r4
     228:	d901      	bls.n	22e <CONFIG_FLASH_SIZE+0x2e>
     22a:	1e8b      	subs	r3, r1, #2
     22c:	442c      	add	r4, r5
     22e:	1aa4      	subs	r4, r4, r2
     230:	e7bc      	b.n	1ac <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x1c>
     232:	f1cc 0e20 	rsb	lr, ip, #32
     236:	fa02 f50c 	lsl.w	r5, r2, ip
     23a:	fa21 f90e 	lsr.w	r9, r1, lr
     23e:	fa01 f30c 	lsl.w	r3, r1, ip
     242:	fa20 fe0e 	lsr.w	lr, r0, lr
     246:	ea4e 0303 	orr.w	r3, lr, r3
     24a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     24e:	fa00 f40c 	lsl.w	r4, r0, ip
     252:	fbb9 f1f8 	udiv	r1, r9, r8
     256:	fa1f fe85 	uxth.w	lr, r5
     25a:	fb08 9211 	mls	r2, r8, r1, r9
     25e:	0c18      	lsrs	r0, r3, #16
     260:	fb01 f60e 	mul.w	r6, r1, lr
     264:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     268:	4296      	cmp	r6, r2
     26a:	d921      	bls.n	2b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     26c:	18aa      	adds	r2, r5, r2
     26e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     272:	d203      	bcs.n	27c <CONFIG_FLASH_SIZE+0x7c>
     274:	4296      	cmp	r6, r2
     276:	d901      	bls.n	27c <CONFIG_FLASH_SIZE+0x7c>
     278:	1e88      	subs	r0, r1, #2
     27a:	442a      	add	r2, r5
     27c:	1b92      	subs	r2, r2, r6
     27e:	b29b      	uxth	r3, r3
     280:	fbb2 f9f8 	udiv	r9, r2, r8
     284:	fb08 2219 	mls	r2, r8, r9, r2
     288:	fb09 fe0e 	mul.w	lr, r9, lr
     28c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     290:	459e      	cmp	lr, r3
     292:	d90f      	bls.n	2b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
     294:	18eb      	adds	r3, r5, r3
     296:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     29a:	d204      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     29c:	459e      	cmp	lr, r3
     29e:	d902      	bls.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2a0:	f1a9 0602 	sub.w	r6, r9, #2
     2a4:	442b      	add	r3, r5
     2a6:	eba3 030e 	sub.w	r3, r3, lr
     2aa:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     2ae:	e793      	b.n	1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     2b0:	4608      	mov	r0, r1
     2b2:	e7e3      	b.n	27c <CONFIG_FLASH_SIZE+0x7c>
     2b4:	464e      	mov	r6, r9
     2b6:	e7f6      	b.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2b8:	4640      	mov	r0, r8
     2ba:	e7a4      	b.n	206 <CONFIG_FLASH_SIZE+0x6>
     2bc:	460b      	mov	r3, r1
     2be:	e7b6      	b.n	22e <CONFIG_FLASH_SIZE+0x2e>
     2c0:	428b      	cmp	r3, r1
     2c2:	d905      	bls.n	2d0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     2c4:	b10f      	cbz	r7, 2ca <CONFIG_BT_HCI_TX_STACK_SIZE+0x4a>
     2c6:	e9c7 0100 	strd	r0, r1, [r7]
     2ca:	2600      	movs	r6, #0
     2cc:	4630      	mov	r0, r6
     2ce:	e775      	b.n	1bc <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x2c>
     2d0:	fab3 fc83 	clz	ip, r3
     2d4:	f1bc 0f00 	cmp.w	ip, #0
     2d8:	d10f      	bne.n	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     2da:	428b      	cmp	r3, r1
     2dc:	d301      	bcc.n	2e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     2de:	4282      	cmp	r2, r0
     2e0:	d809      	bhi.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     2e2:	1a84      	subs	r4, r0, r2
     2e4:	eb61 0e03 	sbc.w	lr, r1, r3
     2e8:	2001      	movs	r0, #1
     2ea:	2f00      	cmp	r7, #0
     2ec:	d06a      	beq.n	3c4 <CONFIG_BT_DEVICE_APPEARANCE+0x83>
     2ee:	e9c7 4e00 	strd	r4, lr, [r7]
     2f2:	2600      	movs	r6, #0
     2f4:	e762      	b.n	1bc <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x2c>
     2f6:	4660      	mov	r0, ip
     2f8:	e7f7      	b.n	2ea <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     2fa:	f1cc 0e20 	rsb	lr, ip, #32
     2fe:	fa03 f30c 	lsl.w	r3, r3, ip
     302:	fa22 f50e 	lsr.w	r5, r2, lr
     306:	fa21 f40e 	lsr.w	r4, r1, lr
     30a:	431d      	orrs	r5, r3
     30c:	fa01 f30c 	lsl.w	r3, r1, ip
     310:	fa20 f10e 	lsr.w	r1, r0, lr
     314:	430b      	orrs	r3, r1
     316:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     31a:	fa00 f60c 	lsl.w	r6, r0, ip
     31e:	fbb4 f9fa 	udiv	r9, r4, sl
     322:	fa1f f885 	uxth.w	r8, r5
     326:	fb0a 4019 	mls	r0, sl, r9, r4
     32a:	0c1c      	lsrs	r4, r3, #16
     32c:	fb09 f108 	mul.w	r1, r9, r8
     330:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     334:	42a1      	cmp	r1, r4
     336:	fa02 f20c 	lsl.w	r2, r2, ip
     33a:	d93f      	bls.n	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     33c:	192c      	adds	r4, r5, r4
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d204      	bcs.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     344:	42a1      	cmp	r1, r4
     346:	d902      	bls.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     348:	f1a9 0002 	sub.w	r0, r9, #2
     34c:	442c      	add	r4, r5
     34e:	1a64      	subs	r4, r4, r1
     350:	b29b      	uxth	r3, r3
     352:	fbb4 f9fa 	udiv	r9, r4, sl
     356:	fb0a 4419 	mls	r4, sl, r9, r4
     35a:	fb09 f808 	mul.w	r8, r9, r8
     35e:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     362:	4588      	cmp	r8, r1
     364:	d92c      	bls.n	3c0 <CONFIG_BT_DEVICE_APPEARANCE+0x7f>
     366:	1869      	adds	r1, r5, r1
     368:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     36c:	d204      	bcs.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     36e:	4588      	cmp	r8, r1
     370:	d902      	bls.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     372:	f1a9 0302 	sub.w	r3, r9, #2
     376:	4429      	add	r1, r5
     378:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     37c:	eba1 0108 	sub.w	r1, r1, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	4549      	cmp	r1, r9
     386:	46c2      	mov	sl, r8
     388:	464c      	mov	r4, r9
     38a:	d302      	bcc.n	392 <CONFIG_BT_DEVICE_APPEARANCE+0x51>
     38c:	d106      	bne.n	39c <CONFIG_BT_DEVICE_APPEARANCE+0x5b>
     38e:	4546      	cmp	r6, r8
     390:	d204      	bcs.n	39c <CONFIG_BT_DEVICE_APPEARANCE+0x5b>
     392:	ebb8 0a02 	subs.w	sl, r8, r2
     396:	eb69 0405 	sbc.w	r4, r9, r5
     39a:	3801      	subs	r0, #1
     39c:	b197      	cbz	r7, 3c4 <CONFIG_BT_DEVICE_APPEARANCE+0x83>
     39e:	ebb6 030a 	subs.w	r3, r6, sl
     3a2:	eb61 0604 	sbc.w	r6, r1, r4
     3a6:	fa06 fe0e 	lsl.w	lr, r6, lr
     3aa:	fa23 f30c 	lsr.w	r3, r3, ip
     3ae:	ea4e 0303 	orr.w	r3, lr, r3
     3b2:	fa26 f60c 	lsr.w	r6, r6, ip
     3b6:	e9c7 3600 	strd	r3, r6, [r7]
     3ba:	e79a      	b.n	2f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x72>
     3bc:	4648      	mov	r0, r9
     3be:	e7c6      	b.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     3c0:	464b      	mov	r3, r9
     3c2:	e7d9      	b.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     3c4:	463e      	mov	r6, r7
     3c6:	e6f9      	b.n	1bc <CONFIG_LVGL_INPUT_LONG_PRESS_TIME+0x2c>

000003c8 <ll_adv_enable>:
{
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
{
     3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3cc:	b091      	sub	sp, #68	; 0x44
	u16_t const handle = 0;
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     3ce:	2302      	movs	r3, #2
     3d0:	930f      	str	r3, [sp, #60]	; 0x3c
	u32_t ticks_slot_offset;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	u32_t ret;

	if (!enable) {
     3d2:	b930      	cbnz	r0, 3e2 <ll_adv_enable+0x1a>
		return disable(handle);
     3d4:	f00d f8e8 	bl	d5a8 <disable.constprop.5>
     3d8:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     3da:	4630      	mov	r0, r6
     3dc:	b011      	add	sp, #68	; 0x44
     3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(u16_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     3e2:	4f89      	ldr	r7, [pc, #548]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)
     3e4:	f897 60cc 	ldrb.w	r6, [r7, #204]	; 0xcc
     3e8:	f016 0601 	ands.w	r6, r6, #1
     3ec:	463d      	mov	r5, r7
     3ee:	d001      	beq.n	3f4 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xc>
	return BT_HCI_ERR_CMD_DISALLOWED;
     3f0:	260c      	movs	r6, #12
     3f2:	e7f2      	b.n	3da <ll_adv_enable+0x12>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     3f4:	f897 802c 	ldrb.w	r8, [r7, #44]	; 0x2c
		ull_filter_adv_update(lll->filter_policy);
     3f8:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
     3fc:	2227      	movs	r2, #39	; 0x27
     3fe:	232d      	movs	r3, #45	; 0x2d
     400:	fb12 3808 	smlabb	r8, r2, r8, r3
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     404:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
     408:	fb02 7303 	mla	r3, r2, r3, r7
     40c:	337d      	adds	r3, #125	; 0x7d
     40e:	f000 0003 	and.w	r0, r0, #3
     412:	930b      	str	r3, [sp, #44]	; 0x2c
     414:	f010 fdc8 	bl	10fa8 <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     418:	f897 00da 	ldrb.w	r0, [r7, #218]	; 0xda
     41c:	0784      	lsls	r4, r0, #30
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     41e:	eb07 0b08 	add.w	fp, r7, r8
     422:	f140 80b1 	bpl.w	588 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x13c>
			rl_idx = ull_filter_rl_find(adv->id_addr_type,
     426:	4632      	mov	r2, r6
     428:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
     42c:	f3c0 0080 	ubfx	r0, r0, #2, #1
     430:	f010 fe30 	bl	11094 <ull_filter_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
     434:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ull_filter_rl_find(adv->id_addr_type,
     436:	4681      	mov	r9, r0
			if (rl_idx != FILTER_IDX_NONE) {
     438:	d002      	beq.n	440 <CONFIG_BT_RX_STACK_SIZE+0x40>
				ull_filter_rpa_update(false);
     43a:	4630      	mov	r0, r6
     43c:	f011 f852 	bl	114e4 <ull_filter_rpa_update>
			ull_filter_adv_pdu_update(adv, rl_idx, pdu_adv);
     440:	465a      	mov	r2, fp
     442:	4649      	mov	r1, r9
     444:	4870      	ldr	r0, [pc, #448]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)
     446:	f010 fdbb 	bl	10fc0 <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, rl_idx, pdu_scan);
     44a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     44c:	486e      	ldr	r0, [pc, #440]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)
     44e:	4649      	mov	r1, r9
     450:	f010 fdb6 	bl	10fc0 <ull_filter_adv_pdu_update>
		if (pdu_adv->tx_addr &&
     454:	f817 3008 	ldrb.w	r3, [r7, r8]
     458:	0658      	lsls	r0, r3, #25
     45a:	f100 80ac 	bmi.w	5b6 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x16a>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     45e:	f817 3008 	ldrb.w	r3, [r7, r8]
     462:	f013 0f0e 	tst.w	r3, #14
     466:	f000 80b0 	beq.w	5ca <CONFIG_BT_HCI_ECC_STACK_SIZE+0x17e>
	u8_t ch_map = lll->chan_map;
     46a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	adv->rl_idx = rl_idx;
     46e:	f885 90db 	strb.w	r9, [r5, #219]	; 0xdb
	u8_t ch_map = lll->chan_map;
     472:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     476:	2101      	movs	r1, #1
     478:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
	u8_t ch_map = lll->chan_map;
     47c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     480:	f01a f866 	bl	1a550 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     484:	2800      	cmp	r0, #0
     486:	f000 81b1 	beq.w	7ec <CONFIG_BT_COMPANY_ID+0x1fb>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     48a:	f817 4008 	ldrb.w	r4, [r7, r8]
		const u8_t rsp_data_len = pdu_scan->len;
     48e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		const u8_t adv_data_len = pdu_adv->len;
     490:	f89b 3001 	ldrb.w	r3, [fp, #1]
		const u8_t rsp_data_len = pdu_scan->len;
     494:	7852      	ldrb	r2, [r2, #1]
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     496:	f004 040f 	and.w	r4, r4, #15
     49a:	2c02      	cmp	r4, #2
     49c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     4a0:	f040 8173 	bne.w	78a <CONFIG_BT_COMPANY_ID+0x199>
			adv_size += adv_data_len;
     4a4:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     4a6:	00db      	lsls	r3, r3, #3
     4a8:	4358      	muls	r0, r3
     4aa:	f500 70aa 	add.w	r0, r0, #340	; 0x154
     4ae:	2364      	movs	r3, #100	; 0x64
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     4b0:	fb01 0003 	mla	r0, r1, r3, r0
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     4b4:	f895 3020 	ldrb.w	r3, [r5, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     4b8:	4954      	ldr	r1, [pc, #336]	; (60c <CONFIG_BT_COMPANY_ID+0x1b>)
	hdr->parent = parent;
     4ba:	61ed      	str	r5, [r5, #28]
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     4bc:	2400      	movs	r4, #0
	hdr->is_stop = 0U;
     4be:	f364 0300 	bfi	r3, r4, #0, #1
     4c2:	f885 3020 	strb.w	r3, [r5, #32]
	adv->evt.ticks_xtal_to_start =
     4c6:	2331      	movs	r3, #49	; 0x31
     4c8:	602b      	str	r3, [r5, #0]
     4ca:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     4ce:	a34c      	add	r3, pc, #304	; (adr r3, 600 <CONFIG_BT_COMPANY_ID+0xf>)
     4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
     4d4:	606c      	str	r4, [r5, #4]
	adv->evt.ticks_preempt_to_start =
     4d6:	60ac      	str	r4, [r5, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     4d8:	fba0 0101 	umull	r0, r1, r0, r1
     4dc:	f7ff fe00 	bl	e0 <__aeabi_uldivmod>
     4e0:	60e8      	str	r0, [r5, #12]
	u16_t interval = adv->interval;
     4e2:	f8b5 90d8 	ldrh.w	r9, [r5, #216]	; 0xd8
	ticks_anchor = ticker_ticks_now_get();
     4e6:	f01a f960 	bl	1a7aa <ticker_ticks_now_get>
     4ea:	4682      	mov	sl, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     4ec:	f1b9 0f00 	cmp.w	r9, #0
     4f0:	d106      	bne.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
     4f2:	f817 4008 	ldrb.w	r4, [r7, r8]
     4f6:	f004 040f 	and.w	r4, r4, #15
     4fa:	1e63      	subs	r3, r4, #1
     4fc:	425c      	negs	r4, r3
     4fe:	415c      	adcs	r4, r3
     500:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
     504:	f8df 8110 	ldr.w	r8, [pc, #272]	; 618 <CONFIG_BT_COMPANY_ID+0x27>
     508:	68ea      	ldr	r2, [r5, #12]
     50a:	f364 0300 	bfi	r3, r4, #0, #1
     50e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	if (lll->is_hdcd) {
     512:	f013 0401 	ands.w	r4, r3, #1
     516:	4b3e      	ldr	r3, [pc, #248]	; (610 <CONFIG_BT_COMPANY_ID+0x1f>)
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     518:	9204      	str	r2, [sp, #16]
     51a:	af0f      	add	r7, sp, #60	; 0x3c
     51c:	e9cd 8707 	strd	r8, r7, [sp, #28]
     520:	e9cd 3505 	strd	r3, r5, [sp, #20]
	if (lll->is_hdcd) {
     524:	f000 814a 	beq.w	7bc <CONFIG_BT_COMPANY_ID+0x1cb>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     528:	2000      	movs	r0, #0
     52a:	e9cd 0200 	strd	r0, r2, [sp]
     52e:	2103      	movs	r1, #3
     530:	e9cd 0002 	strd	r0, r0, [sp, #8]
     534:	4653      	mov	r3, sl
     536:	2202      	movs	r2, #2
     538:	f009 ff94 	bl	a464 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     53c:	4639      	mov	r1, r7
     53e:	f00b ffb9 	bl	c4b4 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     542:	2800      	cmp	r0, #0
     544:	f040 8152 	bne.w	7ec <CONFIG_BT_COMPANY_ID+0x1fb>
		ret_cb = TICKER_STATUS_BUSY;
     548:	2202      	movs	r2, #2
     54a:	920f      	str	r2, [sp, #60]	; 0x3c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     54c:	e9cd 8707 	strd	r8, r7, [sp, #28]
     550:	4a30      	ldr	r2, [pc, #192]	; (614 <CONFIG_BT_COMPANY_ID+0x23>)
     552:	9506      	str	r5, [sp, #24]
     554:	e9cd 0002 	strd	r0, r0, [sp, #8]
     558:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     55c:	e9cd 0204 	strd	r0, r2, [sp, #16]
     560:	9300      	str	r3, [sp, #0]
     562:	9001      	str	r0, [sp, #4]
     564:	4653      	mov	r3, sl
     566:	2201      	movs	r2, #1
     568:	2103      	movs	r1, #3
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     56a:	f009 ff7b 	bl	a464 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     56e:	4639      	mov	r1, r7
     570:	f00b ffa0 	bl	c4b4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     574:	2800      	cmp	r0, #0
     576:	f040 8139 	bne.w	7ec <CONFIG_BT_COMPANY_ID+0x1fb>
	adv->is_enabled = 1;
     57a:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
     57e:	f043 0301 	orr.w	r3, r3, #1
     582:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
	return 0;
     586:	e728      	b.n	3da <ll_adv_enable+0x12>
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     588:	f817 0008 	ldrb.w	r0, [r7, r8]
     58c:	4631      	mov	r1, r6
     58e:	f3c0 1080 	ubfx	r0, r0, #6, #1
     592:	f00a f833 	bl	a5fc <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     596:	2206      	movs	r2, #6
     598:	4601      	mov	r1, r0
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     59a:	4604      	mov	r4, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     59c:	f10b 0002 	add.w	r0, fp, #2
     5a0:	f018 fb4b 	bl	18c3a <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     5a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     5a6:	2206      	movs	r2, #6
     5a8:	4621      	mov	r1, r4
     5aa:	1c98      	adds	r0, r3, #2
     5ac:	f018 fb45 	bl	18c3a <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
     5b0:	f04f 09ff 	mov.w	r9, #255	; 0xff
     5b4:	e74e      	b.n	454 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     5b6:	2106      	movs	r1, #6
     5b8:	f10b 0002 	add.w	r0, fp, #2
     5bc:	f019 ff91 	bl	1a4e2 <mem_nz>
		if (pdu_adv->tx_addr &&
     5c0:	2800      	cmp	r0, #0
     5c2:	f47f af4c 	bne.w	45e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
			return BT_HCI_ERR_INVALID_PARAM;
     5c6:	2612      	movs	r6, #18
     5c8:	e707      	b.n	3da <ll_adv_enable+0x12>
		if (lll->conn) {
     5ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     5cc:	2b00      	cmp	r3, #0
     5ce:	f47f af0f 	bne.w	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
		link = ll_rx_link_alloc();
     5d2:	f00b fee5 	bl	c3a0 <ll_rx_link_alloc>
		if (!link) {
     5d6:	4682      	mov	sl, r0
     5d8:	b128      	cbz	r0, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		node_rx = ll_rx_alloc();
     5da:	f00b feed 	bl	c3b8 <ll_rx_alloc>
		if (!node_rx) {
     5de:	b920      	cbnz	r0, 5ea <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xe>
			ll_rx_link_release(link);
     5e0:	4650      	mov	r0, sl
     5e2:	f00b fee3 	bl	c3ac <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     5e6:	2607      	movs	r6, #7
     5e8:	e6f7      	b.n	3da <ll_adv_enable+0x12>
     5ea:	900c      	str	r0, [sp, #48]	; 0x30
		conn = ll_conn_acquire();
     5ec:	f00d fea0 	bl	e330 <ll_conn_acquire>
		if (!conn) {
     5f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     5f2:	4604      	mov	r4, r0
     5f4:	b990      	cbnz	r0, 61c <CONFIG_BT_COMPANY_ID+0x2b>
			ll_rx_release(node_rx);
     5f6:	4618      	mov	r0, r3
     5f8:	f00b fee4 	bl	c3c4 <ll_rx_release>
     5fc:	e7f0      	b.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
     5fe:	bf00      	nop
     600:	1afd498d 	.word	0x1afd498d
     604:	00000007 	.word	0x00000007
     608:	20000dc0 	.word	0x20000dc0
     60c:	3b9aca00 	.word	0x3b9aca00
     610:	0000d03d 	.word	0x0000d03d
     614:	0000d299 	.word	0x0000d299
     618:	0000c4a9 	.word	0x0000c4a9
		conn_lll = &conn->lll;
     61c:	f100 021c 	add.w	r2, r0, #28
     620:	920c      	str	r2, [sp, #48]	; 0x30
		conn_lll->handle = 0xFFFF;
     622:	f64f 72ff 	movw	r2, #65535	; 0xffff
     626:	8582      	strh	r2, [r0, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     628:	6f82      	ldr	r2, [r0, #120]	; 0x78
     62a:	b912      	cbnz	r2, 632 <CONFIG_BT_COMPANY_ID+0x41>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     62c:	f100 0270 	add.w	r2, r0, #112	; 0x70
     630:	6782      	str	r2, [r0, #120]	; 0x78
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     632:	f104 026c 	add.w	r2, r4, #108	; 0x6c
     636:	f104 0168 	add.w	r1, r4, #104	; 0x68
     63a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     63c:	930d      	str	r3, [sp, #52]	; 0x34
     63e:	f019 ff5b 	bl	1a4f8 <memq_init>
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
     642:	4a71      	ldr	r2, [pc, #452]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
		conn->llcp_terminate.node_rx.hdr.link = link;
     644:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
     648:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
     64c:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
		conn_lll->phy_tx = BIT(0);
     650:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
     654:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
		conn_lll->phy_tx = BIT(0);
     658:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     65c:	f022 0207 	bic.w	r2, r2, #7
     660:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     664:	f042 0201 	orr.w	r2, r2, #1
     668:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
     66c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
     670:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     674:	f062 027f 	orn	r2, r2, #127	; 0x7f
     678:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		conn_lll->data_chan_use = 0;
     67c:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
     67e:	f362 0100 	bfi	r1, r2, #0, #1
     682:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
		conn->connect_expire = 6;
     686:	2106      	movs	r1, #6
     688:	f8a4 10c4 	strh.w	r1, [r4, #196]	; 0xc4
		conn->common.fex_valid = 0;
     68c:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
		conn_lll->data_chan_use = 0;
     690:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
		conn->common.fex_valid = 0;
     694:	f021 0103 	bic.w	r1, r1, #3
     698:	f884 10dc 	strb.w	r1, [r4, #220]	; 0xdc
		conn->llcp_feature.features = LL_FEAT;
     69c:	495b      	ldr	r1, [pc, #364]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     69e:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     6a2:	f894 1122 	ldrb.w	r1, [r4, #290]	; 0x122
		conn_lll->latency_prepare = 0;
     6a6:	8662      	strh	r2, [r4, #50]	; 0x32
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     6a8:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->latency_event = 0;
     6ac:	6362      	str	r2, [r4, #52]	; 0x34
		conn_lll->slave.window_widening_event_us = 0;
     6ae:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
		conn_lll->slave.window_size_prepare_us = 0;
     6b2:	6562      	str	r2, [r4, #84]	; 0x54
		conn->supervision_expire = 0;
     6b4:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->procedure_expire = 0;
     6b8:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     6bc:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
     6c0:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_rx = NULL;
     6c4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     6c8:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     6cc:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     6d0:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
		conn->llcp_terminate.reason_peer = 0;
     6d4:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
		conn_lll->link_tx_free = NULL;
     6d8:	67a2      	str	r2, [r4, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     6da:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     6de:	f884 1122 	strb.w	r1, [r4, #290]	; 0x122
		conn_lll->sn = 0;
     6e2:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     6e6:	f8a4 2150 	strh.w	r2, [r4, #336]	; 0x150
		conn_lll->sn = 0;
     6ea:	f021 011f 	bic.w	r1, r1, #31
     6ee:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6f2:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
		conn->llcp_conn_param.req = 0;
     6f6:	f8a4 2170 	strh.w	r2, [r4, #368]	; 0x170
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6fa:	f021 0107 	bic.w	r1, r1, #7
     6fe:	f884 1152 	strb.w	r1, [r4, #338]	; 0x152
		conn->llcp_conn_param.disabled = 0;
     702:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     706:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
		conn->llcp_conn_param.disabled = 0;
     70a:	f362 1104 	bfi	r1, r2, #4, #1
		conn->llcp_length.cache.tx_octets = 0U;
     70e:	f8a4 21a4 	strh.w	r2, [r4, #420]	; 0x1a4
		conn->llcp_conn_param.disabled = 0;
     712:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     716:	f00d ff3f 	bl	e598 <ull_conn_default_tx_octets_get>
     71a:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     71e:	f00d ff41 	bl	e5a4 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     722:	493b      	ldr	r1, [pc, #236]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     724:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     728:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
     72c:	4001      	ands	r1, r0
     72e:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     732:	f00d ff3d 	bl	e5b0 <ull_conn_default_phy_tx_get>
     736:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
     73a:	f360 0102 	bfi	r1, r0, #0, #3
     73e:	f884 11ac 	strb.w	r1, [r4, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     742:	f00d ff3b 	bl	e5bc <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     748:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		lll->conn = conn_lll;
     74c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		adv->link_cc_free = link;
     74e:	f8c5 a0d0 	str.w	sl, [r5, #208]	; 0xd0
		lll->conn = conn_lll;
     752:	626b      	str	r3, [r5, #36]	; 0x24
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     754:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
     758:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->parent = parent;
     75c:	61e4      	str	r4, [r4, #28]
		conn->phy_pref_flags = 0;
     75e:	2200      	movs	r2, #0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     760:	f360 1106 	bfi	r1, r0, #4, #3
		conn->phy_pref_flags = 0;
     764:	f362 01c3 	bfi	r1, r2, #3, #1
	hdr->is_stop = 0U;
     768:	f362 0300 	bfi	r3, r2, #0, #1
     76c:	f884 11ac 	strb.w	r1, [r4, #428]	; 0x1ac
		conn->tx_data = conn->tx_data_last = 0;
     770:	e9c4 226f 	strd	r2, r2, [r4, #444]	; 0x1bc
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     774:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
     778:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
     77c:	e9c4 2205 	strd	r2, r2, [r4, #20]
     780:	f884 3020 	strb.w	r3, [r4, #32]
		lll_clock_wait();
     784:	f00f fdda 	bl	1033c <lll_clock_wait>
     788:	e66f      	b.n	46a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     78a:	2c01      	cmp	r4, #1
     78c:	d012      	beq.n	7b4 <CONFIG_BT_COMPANY_ID+0x1c3>
					  BYTES2US(ADVA_SIZE + rsp_data_len,
     78e:	00d2      	lsls	r2, r2, #3
		const u16_t scan_rsp_us  = ll_hdr_us +
     790:	3280      	adds	r2, #128	; 0x80
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     792:	b94c      	cbnz	r4, 7a8 <CONFIG_BT_COMPANY_ID+0x1b7>
				adv_size += adv_data_len;
     794:	3310      	adds	r3, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
     796:	f502 7227 	add.w	r2, r2, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     79a:	00db      	lsls	r3, r3, #3
     79c:	f102 0098 	add.w	r0, r2, #152	; 0x98
     7a0:	4418      	add	r0, r3
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     7a2:	f503 739a 	add.w	r3, r3, #308	; 0x134
     7a6:	e683      	b.n	4b0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     7a8:	2c06      	cmp	r4, #6
     7aa:	d0f3      	beq.n	794 <CONFIG_BT_COMPANY_ID+0x1a3>
		u32_t adv_size		= ll_hdr_size + ADVA_SIZE;
     7ac:	2310      	movs	r3, #16
	u32_t slot_us	= EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
     7ae:	f44f 72aa 	mov.w	r2, #340	; 0x154
     7b2:	e7f2      	b.n	79a <CONFIG_BT_COMPANY_ID+0x1a9>
				adv_size += TARGETA_SIZE;
     7b4:	2316      	movs	r3, #22
				slot_us += conn_ind_us;
     7b6:	f44f 722d 	mov.w	r2, #692	; 0x2b4
     7ba:	e7ee      	b.n	79a <CONFIG_BT_COMPANY_ID+0x1a9>
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     7bc:	4815      	ldr	r0, [pc, #84]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7be:	f64f 73ff 	movw	r3, #65535	; 0xffff
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     7c2:	fa1f f889 	uxth.w	r8, r9
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     7ca:	fba8 0100 	umull	r0, r1, r8, r0
     7ce:	2391      	movs	r3, #145	; 0x91
     7d0:	fb03 1108 	mla	r1, r3, r8, r1
     7d4:	a30a      	add	r3, pc, #40	; (adr r3, 800 <CONFIG_ISR_STACK_SIZE>)
     7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
     7da:	f7ff fc81 	bl	e0 <__aeabi_uldivmod>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7de:	4653      	mov	r3, sl
     7e0:	e9cd 4000 	strd	r4, r0, [sp]
     7e4:	2202      	movs	r2, #2
     7e6:	2103      	movs	r1, #3
     7e8:	4620      	mov	r0, r4
     7ea:	e6be      	b.n	56a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x11e>
	if (adv->lll.conn) {
     7ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     7ee:	2b00      	cmp	r3, #0
     7f0:	f43f adfe 	beq.w	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
		conn_release(adv);
     7f4:	4808      	ldr	r0, [pc, #32]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     7f6:	f00c fca3 	bl	d140 <conn_release>
     7fa:	e5f9      	b.n	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     7fc:	f3af 8000 	nop.w
     800:	1afd498d 	.word	0x1afd498d
     804:	00000007 	.word	0x00000007
     808:	01480148 	.word	0x01480148
     80c:	0001417f 	.word	0x0001417f
     810:	feff0000 	.word	0xfeff0000
     814:	84e72a00 	.word	0x84e72a00
     818:	20000dc0 	.word	0x20000dc0
     81c:	00000000 	.word	0x00000000

00000820 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, u32_t ticks_at_expire, u16_t lazy)
{
     820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     824:	4692      	mov	sl, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     826:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     828:	f64f 73ff 	movw	r3, #65535	; 0xffff
     82c:	429a      	cmp	r2, r3
{
     82e:	b08d      	sub	sp, #52	; 0x34
     830:	4604      	mov	r4, r0
     832:	4688      	mov	r8, r1
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     834:	d10c      	bne.n	850 <ull_conn_llcp+0x30>
     836:	f240 3303 	movw	r3, #771	; 0x303
     83a:	4aca      	ldr	r2, [pc, #808]	; (b64 <ull_conn_llcp+0x344>)
     83c:	49ca      	ldr	r1, [pc, #808]	; (b68 <ull_conn_llcp+0x348>)
     83e:	48cb      	ldr	r0, [pc, #812]	; (b6c <ull_conn_llcp+0x34c>)
     840:	f017 fc78 	bl	18134 <printk>
     844:	4040      	eors	r0, r0
     846:	f380 8811 	msr	BASEPRI, r0
     84a:	f04f 0003 	mov.w	r0, #3
     84e:	df02      	svc	2

	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     850:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
     854:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
     858:	4293      	cmp	r3, r2
     85a:	d110      	bne.n	87e <ull_conn_llcp+0x5e>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_rx) {
     85c:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
     860:	f011 0501 	ands.w	r5, r1, #1
     864:	d10b      	bne.n	87e <ull_conn_llcp+0x5e>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     866:	f894 0105 	ldrb.w	r0, [r4, #261]	; 0x105
     86a:	f894 6104 	ldrb.w	r6, [r4, #260]	; 0x104
     86e:	4286      	cmp	r6, r0
     870:	d01d      	beq.n	8ae <ull_conn_llcp+0x8e>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
     872:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     874:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     876:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
     87a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
#endif /* CONFIG_BT_CTLR_PHY */
		}
	}

	/* check if procedure is requested */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     87e:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
     882:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
     886:	1acb      	subs	r3, r1, r3
     888:	f003 0303 	and.w	r3, r3, #3
     88c:	2b02      	cmp	r3, #2
     88e:	f040 83bd 	bne.w	100c <ull_conn_llcp+0x7ec>
		switch (conn->llcp_type) {
     892:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
     896:	3b01      	subs	r3, #1
     898:	2b05      	cmp	r3, #5
     89a:	f201 808c 	bhi.w	19b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62e>
     89e:	e8df f013 	tbh	[pc, r3, lsl #1]
     8a2:	0363      	.short	0x0363
     8a4:	05d90589 	.word	0x05d90589
     8a8:	0710088a 	.word	0x0710088a
     8ac:	072f      	.short	0x072f
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     8ae:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
     8b2:	f894 6118 	ldrb.w	r6, [r4, #280]	; 0x118
     8b6:	42b3      	cmp	r3, r6
     8b8:	d063      	beq.n	982 <ull_conn_llcp+0x162>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     8ba:	1b9b      	subs	r3, r3, r6
     8bc:	07de      	lsls	r6, r3, #31
     8be:	d5de      	bpl.n	87e <ull_conn_llcp+0x5e>
		return;
	}

	if (conn->common.fex_valid) {
     8c0:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
     8c4:	f011 0601 	ands.w	r6, r1, #1
     8c8:	d02e      	beq.n	928 <ull_conn_llcp+0x108>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
     8ca:	f00b fda9 	bl	c420 <ll_pdu_rx_alloc>
		if (!rx) {
     8ce:	4606      	mov	r6, r0
     8d0:	2800      	cmp	r0, #0
     8d2:	d0d4      	beq.n	87e <ull_conn_llcp+0x5e>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
     8d4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
     8d8:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
     8dc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     8de:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     8e0:	2302      	movs	r3, #2
     8e2:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     8e4:	f890 3020 	ldrb.w	r3, [r0, #32]
     8e8:	f043 0303 	orr.w	r3, r3, #3
     8ec:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     8f0:	2309      	movs	r3, #9
     8f2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     8f6:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     8fa:	2208      	movs	r2, #8
     8fc:	4629      	mov	r1, r5
     8fe:	3024      	adds	r0, #36	; 0x24
     900:	f018 f9c5 	bl	18c8e <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le24(conn->llcp_feature.features,
     904:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
     908:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	dst[1] = val >> 8;
     90c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(u32_t val, u8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
     910:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
     912:	f886 2025 	strb.w	r2, [r6, #37]	; 0x25
	dst[2] = val >> 16;
     916:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     91a:	4631      	mov	r1, r6
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     91c:	6808      	ldr	r0, [r1, #0]
     91e:	f00b fd57 	bl	c3d0 <ll_rx_put>
		ll_rx_sched();
     922:	f00b fd5f 	bl	c3e4 <ll_rx_sched>
     926:	e7aa      	b.n	87e <ull_conn_llcp+0x5e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     928:	4891      	ldr	r0, [pc, #580]	; (b70 <ull_conn_llcp+0x350>)
     92a:	f019 fd95 	bl	1a458 <mem_acquire>
	if (tx) {
     92e:	4605      	mov	r5, r0
     930:	2800      	cmp	r0, #0
     932:	d0a4      	beq.n	87e <ull_conn_llcp+0x5e>
		conn->llcp_feature.ack--;
     934:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
     938:	3b01      	subs	r3, #1
     93a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features = LL_FEAT;
     93e:	4b8d      	ldr	r3, [pc, #564]	; (b74 <ull_conn_llcp+0x354>)
     940:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     944:	7903      	ldrb	r3, [r0, #4]
     946:	f043 0303 	orr.w	r3, r3, #3
     94a:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
     94c:	2309      	movs	r3, #9
     94e:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
     950:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
     954:	2b00      	cmp	r3, #0
     956:	bfac      	ite	ge
     958:	2308      	movge	r3, #8
     95a:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
     95c:	2208      	movs	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
     95e:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
     960:	4631      	mov	r1, r6
     962:	4410      	add	r0, r2
     964:	f018 f993 	bl	18c8e <memset>
		sys_put_le24(conn->llcp_feature.features,
     968:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
     96c:	722b      	strb	r3, [r5, #8]
	dst[1] = val >> 8;
     96e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
     972:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
     974:	726a      	strb	r2, [r5, #9]
	dst[2] = val >> 16;
     976:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
     978:	4629      	mov	r1, r5

		pr = &pdu_ctrl_tx->llctrl.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
		pr->rx_phys = conn->llcp_phy.rx;

		ctrl_tx_enqueue(conn, tx);
     97a:	4620      	mov	r0, r4
     97c:	f01a f930 	bl	1abe0 <ctrl_tx_enqueue>
     980:	e0ca      	b.n	b18 <ull_conn_llcp+0x2f8>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     982:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
     986:	f894 5120 	ldrb.w	r5, [r4, #288]	; 0x120
     98a:	42ab      	cmp	r3, r5
     98c:	d064      	beq.n	a58 <ull_conn_llcp+0x238>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     98e:	1b5b      	subs	r3, r3, r5
     990:	07d8      	lsls	r0, r3, #31
     992:	f57f af74 	bpl.w	87e <ull_conn_llcp+0x5e>
	if (conn->llcp_version.tx == 0U) {
     996:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
     99a:	07d9      	lsls	r1, r3, #31
     99c:	d425      	bmi.n	9ea <ull_conn_llcp+0x1ca>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     99e:	4874      	ldr	r0, [pc, #464]	; (b70 <ull_conn_llcp+0x350>)
     9a0:	f019 fd5a 	bl	1a458 <mem_acquire>
		if (tx) {
     9a4:	4601      	mov	r1, r0
     9a6:	2800      	cmp	r0, #0
     9a8:	f43f af69 	beq.w	87e <ull_conn_llcp+0x5e>
			conn->llcp_version.ack--;
     9ac:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
     9b0:	3b01      	subs	r3, #1
     9b2:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
			conn->llcp_version.tx = 1U;
     9b6:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
     9ba:	f043 0301 	orr.w	r3, r3, #1
     9be:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
			pdu->ll_id = PDU_DATA_LLID_CTRL;
     9c2:	7903      	ldrb	r3, [r0, #4]
     9c4:	f043 0303 	orr.w	r3, r3, #3
     9c8:	7103      	strb	r3, [r0, #4]
			pdu->len =
     9ca:	2306      	movs	r3, #6
     9cc:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
     9ce:	230c      	movs	r3, #12
     9d0:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
     9d2:	230a      	movs	r3, #10
     9d4:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
     9d6:	f06f 030e 	mvn.w	r3, #14
     9da:	7243      	strb	r3, [r0, #9]
     9dc:	2305      	movs	r3, #5
     9de:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
     9e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     9e4:	72c3      	strb	r3, [r0, #11]
     9e6:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, tx);
     9e8:	e7c7      	b.n	97a <ull_conn_llcp+0x15a>
	} else if (conn->llcp_version.rx) {
     9ea:	079a      	lsls	r2, r3, #30
     9ec:	d526      	bpl.n	a3c <ull_conn_llcp+0x21c>
		rx = ll_pdu_rx_alloc();
     9ee:	f00b fd17 	bl	c420 <ll_pdu_rx_alloc>
		if (!rx) {
     9f2:	4601      	mov	r1, r0
     9f4:	2800      	cmp	r0, #0
     9f6:	f43f af42 	beq.w	87e <ull_conn_llcp+0x5e>
		conn->llcp_version.ack = conn->llcp_version.req;
     9fa:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
     9fe:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		rx->hdr.handle = conn->lll.handle;
     a02:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     a04:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     a06:	2302      	movs	r3, #2
     a08:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     a0a:	f890 3020 	ldrb.w	r3, [r0, #32]
     a0e:	f043 0303 	orr.w	r3, r3, #3
     a12:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     a16:	2306      	movs	r3, #6
     a18:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     a1c:	230c      	movs	r3, #12
     a1e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
     a22:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
     a26:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		pdu->llctrl.version_ind.company_id =
     a2a:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
     a2e:	f8a0 3025 	strh.w	r3, [r0, #37]	; 0x25
		pdu->llctrl.version_ind.sub_version_number =
     a32:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
     a36:	f8a0 3027 	strh.w	r3, [r0, #39]	; 0x27
     a3a:	e76f      	b.n	91c <ull_conn_llcp+0xfc>
		LL_ASSERT(0);
     a3c:	f640 3302 	movw	r3, #2818	; 0xb02
	case LLCP_PHY_STATE_RSP_WAIT:
		/* no nothing */
		break;

	default:
		LL_ASSERT(0);
     a40:	4a48      	ldr	r2, [pc, #288]	; (b64 <ull_conn_llcp+0x344>)
     a42:	494d      	ldr	r1, [pc, #308]	; (b78 <ull_conn_llcp+0x358>)
     a44:	4849      	ldr	r0, [pc, #292]	; (b6c <ull_conn_llcp+0x34c>)
     a46:	f017 fb75 	bl	18134 <printk>
     a4a:	4040      	eors	r0, r0
     a4c:	f380 8811 	msr	BASEPRI, r0
     a50:	f04f 0003 	mov.w	r0, #3
     a54:	df02      	svc	2
		break;
     a56:	e712      	b.n	87e <ull_conn_llcp+0x5e>
		} else if (conn->llcp_conn_param.ack !=
     a58:	f894 5171 	ldrb.w	r5, [r4, #369]	; 0x171
     a5c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
     a60:	429d      	cmp	r5, r3
     a62:	f000 8138 	beq.w	cd6 <ull_conn_llcp+0x4b6>
	conn_upd = conn_upd_curr;
     a66:	4d45      	ldr	r5, [pc, #276]	; (b7c <ull_conn_llcp+0x35c>)
     a68:	682b      	ldr	r3, [r5, #0]
	if (conn_upd && (conn_upd != conn)) {
     a6a:	b113      	cbz	r3, a72 <ull_conn_llcp+0x252>
     a6c:	429c      	cmp	r4, r3
     a6e:	f47f af06 	bne.w	87e <ull_conn_llcp+0x5e>
	switch (conn->llcp_conn_param.state) {
     a72:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
     a76:	f003 0307 	and.w	r3, r3, #7
     a7a:	2b05      	cmp	r3, #5
     a7c:	f200 8128 	bhi.w	cd0 <ull_conn_llcp+0x4b0>
     a80:	a201      	add	r2, pc, #4	; (adr r2, a88 <ull_conn_llcp+0x268>)
     a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a86:	bf00      	nop
     a88:	00000aa1 	.word	0x00000aa1
     a8c:	00000b23 	.word	0x00000b23
     a90:	00000c79 	.word	0x00000c79
     a94:	0000087f 	.word	0x0000087f
     a98:	0000087f 	.word	0x0000087f
     a9c:	0000087f 	.word	0x0000087f
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     aa0:	4833      	ldr	r0, [pc, #204]	; (b70 <ull_conn_llcp+0x350>)
			event_counter = lll->event_counter +
     aa2:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
     aa4:	8e67      	ldrh	r7, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     aa6:	f019 fcd7 	bl	1a458 <mem_acquire>
	if (!tx) {
     aaa:	4601      	mov	r1, r0
     aac:	2800      	cmp	r0, #0
     aae:	f43f aee6 	beq.w	87e <ull_conn_llcp+0x5e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     ab2:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
     ab6:	2204      	movs	r2, #4
     ab8:	f362 0302 	bfi	r3, r2, #0, #3
     abc:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     ac0:	7903      	ldrb	r3, [r0, #4]
     ac2:	f043 0303 	orr.w	r3, r3, #3
     ac6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     ac8:	2318      	movs	r3, #24
     aca:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     acc:	230f      	movs	r3, #15
     ace:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     ad0:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
     ad4:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     ad6:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
     ada:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     adc:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
     ae0:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     ae2:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
     ae6:	81c3      	strh	r3, [r0, #14]
			event_counter = lll->event_counter +
     ae8:	443e      	add	r6, r7
	p->preferred_periodicity = 0U;
     aea:	2300      	movs	r3, #0
     aec:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
     aee:	74c3      	strb	r3, [r0, #19]
     af0:	7503      	strb	r3, [r0, #20]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     af2:	4456      	add	r6, sl
	p->offset1 = sys_cpu_to_le16(0xffff);
     af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     af8:	f8a0 6011 	strh.w	r6, [r0, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
     afc:	7543      	strb	r3, [r0, #21]
     afe:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
     b00:	75c3      	strb	r3, [r0, #23]
     b02:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
     b04:	7643      	strb	r3, [r0, #25]
     b06:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
     b08:	76c3      	strb	r3, [r0, #27]
     b0a:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
     b0c:	7743      	strb	r3, [r0, #29]
     b0e:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, tx);
     b10:	4620      	mov	r0, r4
     b12:	f01a f865 	bl	1abe0 <ctrl_tx_enqueue>
	conn_upd_curr = conn;
     b16:	602c      	str	r4, [r5, #0]
		conn->procedure_expire = conn->procedure_reload;
     b18:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
     b1c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
     b20:	e6ad      	b.n	87e <ull_conn_llcp+0x5e>
	if (conn->llcp_conn_param.status) {
     b22:	f894 6173 	ldrb.w	r6, [r4, #371]	; 0x173
     b26:	b35e      	cbz	r6, b80 <ull_conn_llcp+0x360>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     b28:	4811      	ldr	r0, [pc, #68]	; (b70 <ull_conn_llcp+0x350>)
     b2a:	f019 fc95 	bl	1a458 <mem_acquire>
		if (!tx) {
     b2e:	4601      	mov	r1, r0
     b30:	2800      	cmp	r0, #0
     b32:	f43f aea4 	beq.w	87e <ull_conn_llcp+0x5e>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     b36:	7903      	ldrb	r3, [r0, #4]
     b38:	f043 0303 	orr.w	r3, r3, #3
     b3c:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     b3e:	2311      	movs	r3, #17
     b40:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     b42:	2303      	movs	r3, #3
     b44:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     b46:	230f      	movs	r3, #15
     b48:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     b4a:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
     b4e:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
     b50:	4620      	mov	r0, r4
     b52:	f01a f845 	bl	1abe0 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     b56:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
     b5a:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
		conn_upd_curr = NULL;
     b5e:	2300      	movs	r3, #0
     b60:	602b      	str	r3, [r5, #0]
		return;
     b62:	e68c      	b.n	87e <ull_conn_llcp+0x5e>
     b64:	00020ce6 	.word	0x00020ce6
     b68:	00020d92 	.word	0x00020d92
     b6c:	0001ff46 	.word	0x0001ff46
     b70:	20001100 	.word	0x20001100
     b74:	0001417f 	.word	0x0001417f
     b78:	0002195a 	.word	0x0002195a
     b7c:	20001080 	.word	0x20001080
	if (!conn->lll.role) {
     b80:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
     b84:	2b00      	cmp	r3, #0
     b86:	db34      	blt.n	bf2 <ull_conn_llcp+0x3d2>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     b88:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_offset_us = 0U;
     b8c:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     b90:	2205      	movs	r2, #5
     b92:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
     b96:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     b9a:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
     b9e:	2301      	movs	r3, #1
     ba0:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
     ba4:	b312      	cbz	r2, bec <ull_conn_llcp+0x3cc>
				((conn->llcp_conn_param.interval_min /
     ba6:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
     baa:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
     bae:	3301      	adds	r3, #1
			conn->llcp_cu.interval =
     bb0:	fb13 f302 	smulbb	r3, r3, r2
     bb4:	b29b      	uxth	r3, r3
     bb6:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
     bba:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
     bbe:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
     bc2:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
     bc6:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     bca:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
     bce:	2202      	movs	r2, #2
     bd0:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     bd4:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
     bd8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
     bdc:	f362 0382 	bfi	r3, r2, #2, #1
		conn->llcp_cu.ack--;
     be0:	3801      	subs	r0, #1
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     be2:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
     be6:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		return;
     bea:	e648      	b.n	87e <ull_conn_llcp+0x5e>
				conn->llcp_conn_param.interval_max;
     bec:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
     bf0:	e7e1      	b.n	bb6 <ull_conn_llcp+0x396>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     bf2:	48d9      	ldr	r0, [pc, #868]	; (f58 <ull_conn_llcp+0x738>)
     bf4:	f019 fc30 	bl	1a458 <mem_acquire>
	if (!tx) {
     bf8:	4601      	mov	r1, r0
     bfa:	2800      	cmp	r0, #0
     bfc:	f43f ae3f 	beq.w	87e <ull_conn_llcp+0x5e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     c00:	7903      	ldrb	r3, [r0, #4]
     c02:	f043 0303 	orr.w	r3, r3, #3
     c06:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
     c08:	2318      	movs	r3, #24
     c0a:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
     c0c:	2310      	movs	r3, #16
     c0e:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
     c10:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
     c14:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
     c16:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
     c1a:	8143      	strh	r3, [r0, #10]
	rsp->latency =
     c1c:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
     c20:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
     c22:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
     c26:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
     c28:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
     c2c:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
     c2e:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
     c32:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
     c36:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
     c3a:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
     c3e:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
     c42:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
     c46:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
     c4a:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
     c4e:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
     c52:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
     c56:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
     c5a:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
     c5e:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
     c62:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
     c66:	4620      	mov	r0, r4
     c68:	f019 ffba 	bl	1abe0 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     c6c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
     c70:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
     c74:	602e      	str	r6, [r5, #0]
     c76:	e602      	b.n	87e <ull_conn_llcp+0x5e>
	if (conn->llcp_enc.pause_tx) {
     c78:	078b      	lsls	r3, r1, #30
     c7a:	f53f ae00 	bmi.w	87e <ull_conn_llcp+0x5e>
	rx = ll_pdu_rx_alloc();
     c7e:	f00b fbcf 	bl	c420 <ll_pdu_rx_alloc>
	if (!rx) {
     c82:	4601      	mov	r1, r0
     c84:	2800      	cmp	r0, #0
     c86:	f43f adfa 	beq.w	87e <ull_conn_llcp+0x5e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
     c8a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
     c8e:	2203      	movs	r2, #3
     c90:	f362 0302 	bfi	r3, r2, #0, #3
     c94:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
     c98:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     c9a:	80c3      	strh	r3, [r0, #6]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     c9c:	2302      	movs	r3, #2
     c9e:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     ca0:	f890 3020 	ldrb.w	r3, [r0, #32]
     ca4:	4313      	orrs	r3, r2
     ca6:	f880 3020 	strb.w	r3, [r0, #32]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     caa:	2318      	movs	r3, #24
     cac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     cb0:	230f      	movs	r3, #15
     cb2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     cb6:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
     cba:	8483      	strh	r3, [r0, #36]	; 0x24
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     cbc:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
     cc0:	84c3      	strh	r3, [r0, #38]	; 0x26
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     cc2:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
     cc6:	8503      	strh	r3, [r0, #40]	; 0x28
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     cc8:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
     ccc:	8543      	strh	r3, [r0, #42]	; 0x2a
	ll_rx_put(rx->hdr.link, rx);
     cce:	e625      	b.n	91c <ull_conn_llcp+0xfc>
		LL_ASSERT(0);
     cd0:	f640 430f 	movw	r3, #3087	; 0xc0f
     cd4:	e6b4      	b.n	a40 <ull_conn_llcp+0x220>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     cd6:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
     cda:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
     cde:	4283      	cmp	r3, r0
     ce0:	f000 8099 	beq.w	e16 <ull_conn_llcp+0x5f6>
	switch (conn->llcp_length.state) {
     ce4:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
     ce8:	f3c3 0502 	ubfx	r5, r3, #0, #3
     cec:	b2e9      	uxtb	r1, r5
     cee:	2907      	cmp	r1, #7
     cf0:	f000 808e 	beq.w	e10 <ull_conn_llcp+0x5f0>
     cf4:	2201      	movs	r2, #1
     cf6:	408a      	lsls	r2, r1
     cf8:	f012 0f4e 	tst.w	r2, #78	; 0x4e
     cfc:	f47f adbf 	bne.w	87e <ull_conn_llcp+0x5e>
     d00:	f012 0f30 	tst.w	r2, #48	; 0x30
     d04:	d12d      	bne.n	d62 <ull_conn_llcp+0x542>
     d06:	2900      	cmp	r1, #0
     d08:	f040 8082 	bne.w	e10 <ull_conn_llcp+0x5f0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     d0c:	4892      	ldr	r0, [pc, #584]	; (f58 <ull_conn_llcp+0x738>)
     d0e:	f019 fba3 	bl	1a458 <mem_acquire>
		if (!tx) {
     d12:	4601      	mov	r1, r0
     d14:	2800      	cmp	r0, #0
     d16:	f43f adb2 	beq.w	87e <ull_conn_llcp+0x5e>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
     d1a:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
		conn->default_tx_time = conn->llcp_length.tx_time;
     d1e:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
     d22:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
     d26:	2201      	movs	r2, #1
     d28:	f362 0302 	bfi	r3, r2, #0, #3
     d2c:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
     d30:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
     d34:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     d38:	790a      	ldrb	r2, [r1, #4]
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
     d3a:	818b      	strh	r3, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     d3c:	f042 0203 	orr.w	r2, r2, #3
     d40:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
     d42:	2209      	movs	r2, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
     d44:	f045 0348 	orr.w	r3, r5, #72	; 0x48
		pdu_ctrl_tx->len =
     d48:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
     d4a:	2214      	movs	r2, #20
     d4c:	71ca      	strb	r2, [r1, #7]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
     d4e:	728b      	strb	r3, [r1, #10]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
     d50:	f045 021b 	orr.w	r2, r5, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
     d54:	f045 0301 	orr.w	r3, r5, #1
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
     d58:	720a      	strb	r2, [r1, #8]
     d5a:	724d      	strb	r5, [r1, #9]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
     d5c:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
     d5e:	81c8      	strh	r0, [r1, #14]
		ctrl_tx_enqueue(conn, tx);
     d60:	e60b      	b.n	97a <ull_conn_llcp+0x15a>
		lll->max_rx_octets = conn->llcp_length.rx_octets;
     d62:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
     d66:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		lll->max_rx_time = conn->llcp_length.rx_time;
     d6a:	f8b4 21a0 	ldrh.w	r2, [r4, #416]	; 0x1a0
     d6e:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
     d72:	f003 0207 	and.w	r2, r3, #7
     d76:	2a04      	cmp	r2, #4
		tx_octets = conn->llcp_length.tx_octets;
     d78:	f8b4 619e 	ldrh.w	r6, [r4, #414]	; 0x19e
		u16_t tx_time = conn->llcp_length.tx_time;
     d7c:	f8b4 51a2 	ldrh.w	r5, [r4, #418]	; 0x1a2
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
     d80:	d144      	bne.n	e0c <ull_conn_llcp+0x5ec>
			if (!conn->llcp_length.cache.tx_octets) {
     d82:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
     d86:	bb9a      	cbnz	r2, df0 <ull_conn_llcp+0x5d0>
				conn->llcp_length.ack = conn->llcp_length.req;
     d88:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
     d8c:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		rx = conn->llcp_rx;
     d90:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
     d94:	b10f      	cbz	r7, d9a <ull_conn_llcp+0x57a>
     d96:	683b      	ldr	r3, [r7, #0]
     d98:	b963      	cbnz	r3, db4 <ull_conn_llcp+0x594>
     d9a:	f640 43ce 	movw	r3, #3278	; 0xcce
     d9e:	4a6f      	ldr	r2, [pc, #444]	; (f5c <ull_conn_llcp+0x73c>)
     da0:	496f      	ldr	r1, [pc, #444]	; (f60 <ull_conn_llcp+0x740>)
     da2:	4870      	ldr	r0, [pc, #448]	; (f64 <ull_conn_llcp+0x744>)
     da4:	f017 f9c6 	bl	18134 <printk>
     da8:	4040      	eors	r0, r0
     daa:	f380 8811 	msr	BASEPRI, r0
     dae:	f04f 0003 	mov.w	r0, #3
     db2:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
     db4:	6838      	ldr	r0, [r7, #0]
     db6:	6843      	ldr	r3, [r0, #4]
     db8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		rx->hdr.handle = conn->lll.handle;
     dbc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     dbe:	80fb      	strh	r3, [r7, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     dc0:	2302      	movs	r3, #2
     dc2:	713b      	strb	r3, [r7, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
     dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
     dc8:	f043 0303 	orr.w	r3, r3, #3
     dcc:	f887 3020 	strb.w	r3, [r7, #32]
		pdu_ctrl_rx->len =
     dd0:	2309      	movs	r3, #9
     dd2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
     dd6:	2315      	movs	r3, #21
     dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
     ddc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
     de0:	84bb      	strh	r3, [r7, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
     de2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
     de6:	853e      	strh	r6, [r7, #40]	; 0x28
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
     de8:	84fb      	strh	r3, [r7, #38]	; 0x26
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
     dea:	857d      	strh	r5, [r7, #42]	; 0x2a
		ll_rx_put(rx->hdr.link, rx);
     dec:	4639      	mov	r1, r7
     dee:	e596      	b.n	91e <ull_conn_llcp+0xfe>
				conn->llcp_length.tx_octets =
     df0:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
     df4:	f8b4 11a6 	ldrh.w	r1, [r4, #422]	; 0x1a6
     df8:	f8a4 11a2 	strh.w	r1, [r4, #418]	; 0x1a2
				conn->llcp_length.cache.tx_octets = 0;
     dfc:	2200      	movs	r2, #0
     dfe:	f8a4 21a4 	strh.w	r2, [r4, #420]	; 0x1a4
			conn->llcp_length.state =
     e02:	f362 0302 	bfi	r3, r2, #0, #3
     e06:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
     e0a:	e7c1      	b.n	d90 <ull_conn_llcp+0x570>
     e0c:	2206      	movs	r2, #6
     e0e:	e7f8      	b.n	e02 <ull_conn_llcp+0x5e2>
		LL_ASSERT(0);
     e10:	f640 43f6 	movw	r3, #3318	; 0xcf6
     e14:	e614      	b.n	a40 <ull_conn_llcp+0x220>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
     e16:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
     e1a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
     e1e:	428b      	cmp	r3, r1
     e20:	f43f ad2d 	beq.w	87e <ull_conn_llcp+0x5e>
	switch (conn->llcp_phy.state) {
     e24:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
     e28:	f003 0003 	and.w	r0, r3, #3
     e2c:	2803      	cmp	r0, #3
     e2e:	f200 808f 	bhi.w	f50 <ull_conn_llcp+0x730>
     e32:	a501      	add	r5, pc, #4	; (adr r5, e38 <ull_conn_llcp+0x618>)
     e34:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
     e38:	00000e49 	.word	0x00000e49
     e3c:	0000087f 	.word	0x0000087f
     e40:	0000087f 	.word	0x0000087f
     e44:	00000ead 	.word	0x00000ead
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e48:	4843      	ldr	r0, [pc, #268]	; (f58 <ull_conn_llcp+0x738>)
     e4a:	f019 fb05 	bl	1a458 <mem_acquire>
		if (!tx) {
     e4e:	4601      	mov	r1, r0
     e50:	2800      	cmp	r0, #0
     e52:	f43f ad14 	beq.w	87e <ull_conn_llcp+0x5e>
		conn->phy_pref_tx = conn->llcp_phy.tx;
     e56:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
     e5a:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
     e5e:	f894 51ab 	ldrb.w	r5, [r4, #427]	; 0x1ab
		conn->phy_pref_tx = conn->llcp_phy.tx;
     e62:	f3c2 0082 	ubfx	r0, r2, #2, #3
     e66:	f360 0302 	bfi	r3, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
     e6a:	f3c2 1242 	ubfx	r2, r2, #5, #3
     e6e:	f362 1306 	bfi	r3, r2, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
     e72:	f3c5 0540 	ubfx	r5, r5, #1, #1
     e76:	f365 03c3 	bfi	r3, r5, #3, #1
     e7a:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
     e7e:	f8b4 31aa 	ldrh.w	r3, [r4, #426]	; 0x1aa
     e82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
     e86:	f023 0301 	bic.w	r3, r3, #1
     e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     e8e:	f043 0301 	orr.w	r3, r3, #1
     e92:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e96:	790b      	ldrb	r3, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
     e98:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e9a:	f043 0303 	orr.w	r3, r3, #3
     e9e:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
     ea0:	2303      	movs	r3, #3
     ea2:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
     ea4:	2316      	movs	r3, #22
     ea6:	71cb      	strb	r3, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
     ea8:	724a      	strb	r2, [r1, #9]
     eaa:	e566      	b.n	97a <ull_conn_llcp+0x15a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
     eac:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
     eb0:	f3c3 0182 	ubfx	r1, r3, #2, #3
     eb4:	078f      	lsls	r7, r1, #30
     eb6:	d539      	bpl.n	f2c <ull_conn_llcp+0x70c>
			conn->llcp_phy.tx = BIT(1);
     eb8:	2102      	movs	r1, #2
			conn->llcp_phy.tx = 0U;
     eba:	f361 0384 	bfi	r3, r1, #2, #3
     ebe:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
     ec2:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
     ec6:	0959      	lsrs	r1, r3, #5
     ec8:	078d      	lsls	r5, r1, #30
     eca:	d538      	bpl.n	f3e <ull_conn_llcp+0x71e>
			conn->llcp_phy.rx = BIT(1);
     ecc:	2102      	movs	r1, #2
			conn->llcp_phy.rx = 0U;
     ece:	f361 1347 	bfi	r3, r1, #5, #3
     ed2:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
     ed6:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
     eda:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
     ede:	f3c1 0082 	ubfx	r0, r1, #2, #3
     ee2:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
     ee6:	4283      	cmp	r3, r0
     ee8:	bf08      	it	eq
     eea:	2000      	moveq	r0, #0
     eec:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
     ef0:	f360 0384 	bfi	r3, r0, #2, #3
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
     ef4:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
     ef8:	0949      	lsrs	r1, r1, #5
     efa:	f000 0007 	and.w	r0, r0, #7
			conn->llcp.phy_upd_ind.rx = 0U;
     efe:	4288      	cmp	r0, r1
     f00:	bf08      	it	eq
     f02:	2100      	moveq	r1, #0
     f04:	f361 1347 	bfi	r3, r1, #5, #3
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
     f08:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.initiate = 1U;
     f0c:	b2db      	uxtb	r3, r3
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
     f0e:	f3c1 0180 	ubfx	r1, r1, #2, #1
     f12:	f043 0301 	orr.w	r3, r3, #1
     f16:	f361 0341 	bfi	r3, r1, #1, #1
     f1a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_ack -= 2U;
     f1e:	3a02      	subs	r2, #2
		conn->llcp_type = LLCP_PHY_UPD;
     f20:	2306      	movs	r3, #6
     f22:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
     f26:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	break;
     f2a:	e4a8      	b.n	87e <ull_conn_llcp+0x5e>
		} else if (conn->llcp_phy.tx & BIT(0)) {
     f2c:	07ce      	lsls	r6, r1, #31
     f2e:	d501      	bpl.n	f34 <ull_conn_llcp+0x714>
			conn->llcp_phy.tx = BIT(0);
     f30:	2101      	movs	r1, #1
     f32:	e7c2      	b.n	eba <ull_conn_llcp+0x69a>
		} else if (conn->llcp_phy.tx & BIT(2)) {
     f34:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.tx = BIT(2);
     f38:	bf18      	it	ne
     f3a:	2104      	movne	r1, #4
     f3c:	e7bd      	b.n	eba <ull_conn_llcp+0x69a>
		} else if (conn->llcp_phy.rx & BIT(0)) {
     f3e:	07c8      	lsls	r0, r1, #31
     f40:	d501      	bpl.n	f46 <ull_conn_llcp+0x726>
			conn->llcp_phy.rx = BIT(0);
     f42:	2101      	movs	r1, #1
     f44:	e7c3      	b.n	ece <ull_conn_llcp+0x6ae>
		} else if (conn->llcp_phy.rx & BIT(2)) {
     f46:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
     f4a:	bf18      	it	ne
     f4c:	2104      	movne	r1, #4
     f4e:	e7be      	b.n	ece <ull_conn_llcp+0x6ae>
		LL_ASSERT(0);
     f50:	f640 5377 	movw	r3, #3447	; 0xd77
     f54:	e574      	b.n	a40 <ull_conn_llcp+0x220>
     f56:	bf00      	nop
     f58:	20001100 	.word	0x20001100
     f5c:	00020ce6 	.word	0x00020ce6
     f60:	00020dad 	.word	0x00020dad
     f64:	0001ff46 	.word	0x0001ff46
	conn_upd = conn_upd_curr;
     f68:	4a2e      	ldr	r2, [pc, #184]	; (1024 <ull_conn_llcp+0x804>)
	if (!conn_upd) {
     f6a:	6813      	ldr	r3, [r2, #0]
     f6c:	b903      	cbnz	r3, f70 <ull_conn_llcp+0x750>
		conn_upd_curr = conn;
     f6e:	6014      	str	r4, [r2, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     f72:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
     f74:	441e      	add	r6, r3
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f76:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f7a:	4456      	add	r6, sl
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f7c:	f013 0003 	ands.w	r0, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f80:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f82:	d053      	beq.n	102c <ull_conn_llcp+0x80c>
		rx = ll_pdu_rx_alloc_peek(1);
     f84:	2001      	movs	r0, #1
     f86:	f00b fa33 	bl	c3f0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     f8a:	4607      	mov	r7, r0
     f8c:	2800      	cmp	r0, #0
     f8e:	d03d      	beq.n	100c <ull_conn_llcp+0x7ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     f90:	4825      	ldr	r0, [pc, #148]	; (1028 <ull_conn_llcp+0x808>)
     f92:	f019 fa61 	bl	1a458 <mem_acquire>
		if (!tx) {
     f96:	4605      	mov	r5, r0
     f98:	b3c0      	cbz	r0, 100c <ull_conn_llcp+0x7ec>
		(void)ll_pdu_rx_alloc();
     f9a:	f00b fa41 	bl	c420 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     f9e:	683b      	ldr	r3, [r7, #0]
     fa0:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
     fa4:	605a      	str	r2, [r3, #4]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     fa6:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_rx = rx;
     faa:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     fae:	f36f 0301 	bfc	r3, #0, #2
     fb2:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     fb6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     fb8:	441e      	add	r6, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     fba:	792b      	ldrb	r3, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     fbc:	3606      	adds	r6, #6
     fbe:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     fc0:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     fc4:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     fc8:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     fca:	230c      	movs	r3, #12
     fcc:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     fce:	2300      	movs	r3, #0
     fd0:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     fd2:	f894 3114 	ldrb.w	r3, [r4, #276]	; 0x114
     fd6:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     fd8:	f240 42e2 	movw	r2, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
     fdc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     fe0:	fbb3 f3f2 	udiv	r3, r3, r2
     fe4:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     fe8:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
     fec:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     ff0:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
     ff4:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     ff8:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
     ffc:	f8a5 300f 	strh.w	r3, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1000:	f8a5 6011 	strh.w	r6, [r5, #17]
			ctrl_tx_enqueue(conn, tx);
    1004:	4629      	mov	r1, r5
    1006:	4620      	mov	r0, r4
    1008:	f019 fdea 	bl	1abe0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    100c:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
    1010:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    1014:	429a      	cmp	r2, r3
    1016:	f040 84dd 	bne.w	19d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64c>
	return 0;
    101a:	2000      	movs	r0, #0
}
    101c:	b00d      	add	sp, #52	; 0x34
    101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1022:	bf00      	nop
    1024:	20001080 	.word	0x20001080
    1028:	20001100 	.word	0x20001100
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    102c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    1030:	930b      	str	r3, [sp, #44]	; 0x2c
    1032:	1af7      	subs	r7, r6, r3
    1034:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    1036:	043b      	lsls	r3, r7, #16
    1038:	d4e8      	bmi.n	100c <ull_conn_llcp+0x7ec>
		conn->llcp_cu.ack = conn->llcp_cu.req;
    103a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    103e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
		conn->llcp_ack = conn->llcp_req;
    1042:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1046:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    104a:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    104e:	428b      	cmp	r3, r1
    1050:	d009      	beq.n	1066 <ull_conn_llcp+0x846>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1052:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1056:	f003 0307 	and.w	r3, r3, #7
    105a:	2b05      	cmp	r3, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    105c:	bf04      	itt	eq
    105e:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171
			conn->procedure_expire = 0U;
    1062:	f8a4 00cc 	strheq.w	r0, [r4, #204]	; 0xcc
		if (conn_upd_curr == conn) {
    1066:	6813      	ldr	r3, [r2, #0]
		rx = conn->llcp_rx;
    1068:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		if (conn_upd_curr == conn) {
    106c:	429c      	cmp	r4, r3
			conn_upd_curr = NULL;
    106e:	bf04      	itt	eq
    1070:	2300      	moveq	r3, #0
    1072:	6013      	streq	r3, [r2, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1074:	b10d      	cbz	r5, 107a <ull_conn_llcp+0x85a>
    1076:	682b      	ldr	r3, [r5, #0]
    1078:	b963      	cbnz	r3, 1094 <ull_conn_llcp+0x874>
    107a:	f640 039b 	movw	r3, #2203	; 0x89b
    107e:	4ac0      	ldr	r2, [pc, #768]	; (1380 <ull_conn_llcp+0xb60>)
    1080:	49c0      	ldr	r1, [pc, #768]	; (1384 <ull_conn_llcp+0xb64>)
    1082:	48c1      	ldr	r0, [pc, #772]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    1084:	f017 f856 	bl	18134 <printk>
    1088:	4040      	eors	r0, r0
    108a:	f380 8811 	msr	BASEPRI, r0
    108e:	f04f 0003 	mov.w	r0, #3
    1092:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    1094:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    1096:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
		conn->llcp_rx = rx->hdr.link->mem;
    109a:	6843      	ldr	r3, [r0, #4]
    109c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    10a0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    10a2:	f8b4 c10a 	ldrh.w	ip, [r4, #266]	; 0x10a
    10a6:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    10aa:	429a      	cmp	r2, r3
    10ac:	d113      	bne.n	10d6 <ull_conn_llcp+0x8b6>
    10ae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    10b0:	4563      	cmp	r3, ip
    10b2:	d110      	bne.n	10d6 <ull_conn_llcp+0x8b6>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    10b4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    10b8:	fb03 fe02 	mul.w	lr, r3, r2
    10bc:	f242 7310 	movw	r3, #10000	; 0x2710
    10c0:	fb03 e301 	mla	r3, r3, r1, lr
    10c4:	3b01      	subs	r3, #1
    10c6:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    10ca:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
    10ce:	b29b      	uxth	r3, r3
    10d0:	459e      	cmp	lr, r3
    10d2:	f000 812e 	beq.w	1332 <ull_conn_llcp+0xb12>
			rx->hdr.handle = lll->handle;
    10d6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    10d8:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    10da:	230a      	movs	r3, #10
    10dc:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    10de:	2300      	movs	r3, #0
    10e0:	f885 3020 	strb.w	r3, [r5, #32]
			cu->interval = conn->llcp_cu.interval;
    10e4:	846a      	strh	r2, [r5, #34]	; 0x22
			cu->latency = conn->llcp_cu.latency;
    10e6:	f8a5 c024 	strh.w	ip, [r5, #36]	; 0x24
			cu->timeout = conn->llcp_cu.timeout;
    10ea:	84e9      	strh	r1, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    10ec:	4629      	mov	r1, r5
    10ee:	f00b f96f 	bl	c3d0 <ll_rx_put>
		ll_rx_sched();
    10f2:	f00b f977 	bl	c3e4 <ll_rx_sched>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    10f6:	6823      	ldr	r3, [r4, #0]
    10f8:	2b00      	cmp	r3, #0
    10fa:	da0a      	bge.n	1112 <ull_conn_llcp+0x8f2>
			u32_t ticks_prepare_to_start =
    10fc:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1104:	4290      	cmp	r0, r2
    1106:	bf2c      	ite	cs
    1108:	4480      	addcs	r8, r0
    110a:	4490      	addcc	r8, r2
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    110c:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    110e:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * lll->interval;
    1112:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    1114:	f8b4 5108 	ldrh.w	r5, [r4, #264]	; 0x108
    1118:	f8df b294 	ldr.w	fp, [pc, #660]	; 13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
		conn_interval_old = instant_latency * lll->interval;
    111c:	fb13 f307 	smulbb	r3, r3, r7
    1120:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1122:	fbb3 f1f5 	udiv	r1, r3, r5
    1126:	fa1f f981 	uxth.w	r9, r1
		conn_interval_new = latency * conn->llcp_cu.interval;
    112a:	fb15 f209 	smulbb	r2, r5, r9
    112e:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1130:	4293      	cmp	r3, r2
    1132:	f240 40e2 	movw	r0, #1250	; 0x4e2
    1136:	f080 80ff 	bcs.w	1338 <ull_conn_llcp+0xb18>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    113a:	1ad3      	subs	r3, r2, r3
    113c:	4358      	muls	r0, r3
    113e:	fba0 010b 	umull	r0, r1, r0, fp
    1142:	a38d      	add	r3, pc, #564	; (adr r3, 1378 <ull_conn_llcp+0xb58>)
    1144:	e9d3 2300 	ldrd	r2, r3, [r3]
    1148:	f7fe ffca 	bl	e0 <__aeabi_uldivmod>
    114c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1150:	4480      	add	r8, r0
		lll->latency_prepare += lazy;
    1152:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1154:	449a      	add	sl, r3
		lll->latency_prepare -= (instant_latency - latency);
    1156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1158:	1b9e      	subs	r6, r3, r6
		} else if (lll->role) {
    115a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    115e:	444e      	add	r6, r9
    1160:	4456      	add	r6, sl
		} else if (lll->role) {
    1162:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1164:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    1168:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    116a:	fb0a f505 	mul.w	r5, sl, r5
		} else if (lll->role) {
    116e:	f280 80f1 	bge.w	1354 <ull_conn_llcp+0xb34>
			lll->slave.window_widening_prepare_us -=
    1172:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    1174:	6c63      	ldr	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    1176:	fb03 2717 	mls	r7, r3, r7, r2
    117a:	64e7      	str	r7, [r4, #76]	; 0x4c
				(((lll_conn_ppm_local_get() +
    117c:	f019 fef8 	bl	1af70 <lll_conn_ppm_local_get>
    1180:	4606      	mov	r6, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    1182:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1186:	f3c0 0082 	ubfx	r0, r0, #2, #3
    118a:	f00f f987 	bl	1049c <lll_conn_ppm_get>
				conn->llcp_cu.win_size * 1250U;
    118e:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
				(((lll_conn_ppm_local_get() +
    1192:	4406      	add	r6, r0
				conn->llcp_cu.win_size * 1250U;
    1194:	fb0a f202 	mul.w	r2, sl, r2
			lll->slave.window_size_prepare_us =
    1198:	6562      	str	r2, [r4, #84]	; 0x54
				   lll_conn_ppm_get(conn->slave.sca)) *
    119a:	436e      	muls	r6, r5
			conn->slave.ticks_to_offset = 0U;
    119c:	2200      	movs	r2, #0
    119e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    11a2:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    11a6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    11a8:	4878      	ldr	r0, [pc, #480]	; (138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>)
    11aa:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    11ae:	086b      	lsrs	r3, r5, #1
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    11b0:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->slave.window_widening_periodic_us *
    11b4:	fb06 f009 	mul.w	r0, r6, r9
				(conn_interval_us >> 1) - EVENT_IFS_US;
    11b8:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    11ba:	4402      	add	r2, r0
			lll->slave.window_widening_periodic_us =
    11bc:	6466      	str	r6, [r4, #68]	; 0x44
			lll->slave.window_widening_max_us =
    11be:	64a3      	str	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us +=
    11c0:	429a      	cmp	r2, r3
    11c2:	bf94      	ite	ls
    11c4:	64e2      	strls	r2, [r4, #76]	; 0x4c
    11c6:	64e3      	strhi	r3, [r4, #76]	; 0x4c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    11c8:	fba0 010b 	umull	r0, r1, r0, fp
    11cc:	a36a      	add	r3, pc, #424	; (adr r3, 1378 <ull_conn_llcp+0xb58>)
    11ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    11d2:	f7fe ff85 	bl	e0 <__aeabi_uldivmod>
    11d6:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    11da:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    11de:	fbb0 f0fa 	udiv	r0, r0, sl
    11e2:	fb0a f000 	mul.w	r0, sl, r0
    11e6:	a364      	add	r3, pc, #400	; (adr r3, 1378 <ull_conn_llcp+0xb58>)
    11e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    11ec:	fba0 010b 	umull	r0, r1, r0, fp
    11f0:	f7fe ff76 	bl	e0 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    11f4:	1bae      	subs	r6, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    11f6:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    11fa:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    11fe:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->interval = conn->llcp_cu.interval;
    1202:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1204:	f242 7310 	movw	r3, #10000	; 0x2710
    1208:	fb03 5202 	mla	r2, r3, r2, r5
		lll->latency = conn->llcp_cu.latency;
    120c:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1210:	4b5f      	ldr	r3, [pc, #380]	; (1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>)
		lll->latency = conn->llcp_cu.latency;
    1212:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1214:	3a01      	subs	r2, #1
    1216:	fbb2 f2f5 	udiv	r2, r2, r5
    121a:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    121e:	4a5d      	ldr	r2, [pc, #372]	; (1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1220:	442b      	add	r3, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1222:	442a      	add	r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1224:	fbb3 f3f5 	udiv	r3, r3, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1228:	fbb2 f5f5 	udiv	r5, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    122c:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1230:	1d8a      	adds	r2, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1232:	b2ab      	uxth	r3, r5
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1234:	4293      	cmp	r3, r2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1236:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
				     (conn->apto_reload - (lll->latency + 6)) :
    123a:	bfc2      	ittt	gt
    123c:	1a5b      	subgt	r3, r3, r1
    123e:	3b06      	subgt	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1240:	b29b      	uxthgt	r3, r3
    1242:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    1246:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
    124a:	075d      	lsls	r5, r3, #29
			conn->supervision_expire = 0U;
    124c:	bf44      	itt	mi
    124e:	2300      	movmi	r3, #0
    1250:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1254:	2102      	movs	r1, #2
    1256:	2001      	movs	r0, #1
    1258:	f011 f81a 	bl	12290 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    125c:	2200      	movs	r2, #0
    125e:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1260:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1262:	2001      	movs	r0, #1
    1264:	f008 fc64 	bl	9b30 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1268:	4620      	mov	r0, r4
    126a:	f00d f86d 	bl	e348 <ll_conn_handle_get>
    126e:	3003      	adds	r0, #3
    1270:	b2c5      	uxtb	r5, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1272:	4b49      	ldr	r3, [pc, #292]	; (1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>)
    1274:	9400      	str	r4, [sp, #0]
    1276:	462a      	mov	r2, r5
    1278:	2101      	movs	r1, #1
    127a:	2000      	movs	r0, #0
    127c:	f009 f984 	bl	a588 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1280:	f030 0302 	bics.w	r3, r0, #2
    1284:	d00c      	beq.n	12a0 <ull_conn_llcp+0xa80>
    1286:	f44f 6314 	mov.w	r3, #2368	; 0x940
    128a:	4a3d      	ldr	r2, [pc, #244]	; (1380 <ull_conn_llcp+0xb60>)
    128c:	4943      	ldr	r1, [pc, #268]	; (139c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14>)
    128e:	483e      	ldr	r0, [pc, #248]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    1290:	f016 ff50 	bl	18134 <printk>
    1294:	4040      	eors	r0, r0
    1296:	f380 8811 	msr	BASEPRI, r0
    129a:	f04f 0003 	mov.w	r0, #3
    129e:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    12a0:	fba6 670b 	umull	r6, r7, r6, fp
    12a4:	a334      	add	r3, pc, #208	; (adr r3, 1378 <ull_conn_llcp+0xb58>)
    12a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    12aa:	4630      	mov	r0, r6
    12ac:	4639      	mov	r1, r7
    12ae:	f7fe ff17 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12b2:	4b3b      	ldr	r3, [pc, #236]	; (13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>)
    12b4:	9408      	str	r4, [sp, #32]
    12b6:	e9cd 4306 	strd	r4, r3, [sp, #24]
    12ba:	4b3a      	ldr	r3, [pc, #232]	; (13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>)
    12bc:	9305      	str	r3, [sp, #20]
    12be:	68e3      	ldr	r3, [r4, #12]
    12c0:	9304      	str	r3, [sp, #16]
    12c2:	2300      	movs	r3, #0
    12c4:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    12c6:	4b38      	ldr	r3, [pc, #224]	; (13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>)
    12c8:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    12cc:	fba4 bc03 	umull	fp, ip, r4, r3
    12d0:	2307      	movs	r3, #7
    12d2:	fb03 cc04 	mla	ip, r3, r4, ip
    12d6:	ebb6 000b 	subs.w	r0, r6, fp
    12da:	eb67 010c 	sbc.w	r1, r7, ip
    12de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    12e2:	2300      	movs	r3, #0
    12e4:	f7fe fefc 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12e8:	4643      	mov	r3, r8
    12ea:	e9cd 4001 	strd	r4, r0, [sp, #4]
    12ee:	f8cd 9000 	str.w	r9, [sp]
    12f2:	462a      	mov	r2, r5
    12f4:	2101      	movs	r1, #1
    12f6:	2000      	movs	r0, #0
    12f8:	f009 f8b4 	bl	a464 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    12fc:	f030 0302 	bics.w	r3, r0, #2
    1300:	d00c      	beq.n	131c <ull_conn_llcp+0xafc>
    1302:	f640 135a 	movw	r3, #2394	; 0x95a
    1306:	4a1e      	ldr	r2, [pc, #120]	; (1380 <ull_conn_llcp+0xb60>)
    1308:	4924      	ldr	r1, [pc, #144]	; (139c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14>)
    130a:	481f      	ldr	r0, [pc, #124]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    130c:	f016 ff12 	bl	18134 <printk>
    1310:	4040      	eors	r0, r0
    1312:	f380 8811 	msr	BASEPRI, r0
    1316:	f04f 0003 	mov.w	r0, #3
    131a:	df02      	svc	2
		if (mayfly_was_enabled) {
    131c:	f1ba 0f00 	cmp.w	sl, #0
    1320:	d004      	beq.n	132c <ull_conn_llcp+0xb0c>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1322:	2201      	movs	r2, #1
    1324:	2102      	movs	r1, #2
    1326:	4610      	mov	r0, r2
    1328:	f008 fc02 	bl	9b30 <mayfly_enable>
				return -ECANCELED;
    132c:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1330:	e674      	b.n	101c <ull_conn_llcp+0x7fc>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1332:	2303      	movs	r3, #3
    1334:	712b      	strb	r3, [r5, #4]
    1336:	e6d9      	b.n	10ec <ull_conn_llcp+0x8cc>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1338:	fb05 3111 	mls	r1, r5, r1, r3
    133c:	b289      	uxth	r1, r1
    133e:	4348      	muls	r0, r1
    1340:	a30d      	add	r3, pc, #52	; (adr r3, 1378 <ull_conn_llcp+0xb58>)
    1342:	e9d3 2300 	ldrd	r2, r3, [r3]
    1346:	fba0 010b 	umull	r0, r1, r0, fp
    134a:	f7fe fec9 	bl	e0 <__aeabi_uldivmod>
    134e:	eba8 0800 	sub.w	r8, r8, r0
    1352:	e6fe      	b.n	1152 <ull_conn_llcp+0x932>
			LL_ASSERT(0);
    1354:	f44f 6311 	mov.w	r3, #2320	; 0x910
    1358:	4a09      	ldr	r2, [pc, #36]	; (1380 <ull_conn_llcp+0xb60>)
    135a:	4914      	ldr	r1, [pc, #80]	; (13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>)
    135c:	480a      	ldr	r0, [pc, #40]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    135e:	f016 fee9 	bl	18134 <printk>
    1362:	4040      	eors	r0, r0
    1364:	f380 8811 	msr	BASEPRI, r0
    1368:	f04f 0003 	mov.w	r0, #3
    136c:	df02      	svc	2
		u32_t ticks_win_offset = 0;
    136e:	f04f 0900 	mov.w	r9, #0
		periodic_us = conn_interval_us;
    1372:	462e      	mov	r6, r5
    1374:	e741      	b.n	11fa <ull_conn_llcp+0x9da>
    1376:	bf00      	nop
    1378:	1afd498d 	.word	0x1afd498d
    137c:	00000007 	.word	0x00000007
    1380:	00020ce6 	.word	0x00020ce6
    1384:	00020dad 	.word	0x00020dad
    1388:	0001ff46 	.word	0x0001ff46
    138c:	000f4240 	.word	0x000f4240
    1390:	026259ff 	.word	0x026259ff
    1394:	01c9c37f 	.word	0x01c9c37f
    1398:	0000df31 	.word	0x0000df31
    139c:	00020c45 	.word	0x00020c45
    13a0:	0000ded9 	.word	0x0000ded9
    13a4:	00010a3d 	.word	0x00010a3d
    13a8:	1afd498d 	.word	0x1afd498d
    13ac:	0002195a 	.word	0x0002195a
    13b0:	3b9aca00 	.word	0x3b9aca00
			event_counter = lll->event_counter +
    13b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    13b6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    13b8:	4413      	add	r3, r2
					lll->latency_prepare + lazy;
    13ba:	449a      	add	sl, r3
	if (conn->llcp.chan_map.initiate) {
    13bc:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    13c0:	07d8      	lsls	r0, r3, #31
			event_counter = lll->event_counter +
    13c2:	fa1f fa8a 	uxth.w	sl, sl
	if (conn->llcp.chan_map.initiate) {
    13c6:	d525      	bpl.n	1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    13c8:	48cb      	ldr	r0, [pc, #812]	; (16f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x370>)
    13ca:	f019 f845 	bl	1a458 <mem_acquire>
		if (tx) {
    13ce:	4605      	mov	r5, r0
    13d0:	2800      	cmp	r0, #0
    13d2:	f43f ae1b 	beq.w	100c <ull_conn_llcp+0x7ec>
			conn->llcp.chan_map.initiate = 0U;
    13d6:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    13da:	f36f 0300 	bfc	r3, #0, #1
    13de:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    13e2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13e4:	449a      	add	sl, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    13e6:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    13e8:	f10a 0a06 	add.w	sl, sl, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    13ec:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    13f0:	f8a4 a0f2 	strh.w	sl, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    13f4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    13f6:	2308      	movs	r3, #8
    13f8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    13fa:	2301      	movs	r3, #1
    13fc:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    13fe:	2205      	movs	r2, #5
    1400:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1404:	3008      	adds	r0, #8
    1406:	f017 fc18 	bl	18c3a <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    140a:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    140e:	f8a5 300d 	strh.w	r3, [r5, #13]
    1412:	e5f7      	b.n	1004 <ull_conn_llcp+0x7e4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1414:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    1418:	ebaa 0a03 	sub.w	sl, sl, r3
    141c:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
    1420:	f47f adf4 	bne.w	100c <ull_conn_llcp+0x7ec>
		memcpy(&lll->data_chan_map[0],
    1424:	f104 0538 	add.w	r5, r4, #56	; 0x38
		conn->llcp_ack = conn->llcp_req;
    1428:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    142c:	2205      	movs	r2, #5
    142e:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1432:	4628      	mov	r0, r5
    1434:	f017 fc01 	bl	18c3a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    1438:	2105      	movs	r1, #5
    143a:	4628      	mov	r0, r5
    143c:	f019 f888 	bl	1a550 <util_ones_count_get>
		lll->data_chan_count =
    1440:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    1444:	f360 0305 	bfi	r3, r0, #0, #6
    1448:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    144c:	2301      	movs	r3, #1
    144e:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
    1452:	e5db      	b.n	100c <ull_conn_llcp+0x7ec>
	if (conn->llcp.encryption.state) {
    1454:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
    1458:	f016 0603 	ands.w	r6, r6, #3
    145c:	d063      	beq.n	1526 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19e>
		if (lll->role &&
    145e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1462:	2b00      	cmp	r3, #0
    1464:	f6bf add2 	bge.w	100c <ull_conn_llcp+0x7ec>
    1468:	2e01      	cmp	r6, #1
    146a:	f47f adcf 	bne.w	100c <ull_conn_llcp+0x7ec>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    146e:	48a2      	ldr	r0, [pc, #648]	; (16f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x370>)
    1470:	f018 fff2 	bl	1a458 <mem_acquire>
	if (!tx) {
    1474:	4607      	mov	r7, r0
    1476:	2800      	cmp	r0, #0
    1478:	f43f adc8 	beq.w	100c <ull_conn_llcp+0x7ec>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    147c:	7903      	ldrb	r3, [r0, #4]
    147e:	f043 0303 	orr.w	r3, r3, #3
    1482:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1484:	230d      	movs	r3, #13
    1486:	7143      	strb	r3, [r0, #5]
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1488:	2304      	movs	r3, #4
    148a:	71c3      	strb	r3, [r0, #7]
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    148c:	4b9b      	ldr	r3, [pc, #620]	; (16fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x374>)
    148e:	6818      	ldr	r0, [r3, #0]
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    1490:	6843      	ldr	r3, [r0, #4]
    1492:	685e      	ldr	r6, [r3, #4]
    1494:	f107 0508 	add.w	r5, r7, #8
    1498:	b11e      	cbz	r6, 14a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    149a:	2300      	movs	r3, #0
    149c:	220c      	movs	r2, #12
    149e:	4629      	mov	r1, r5
    14a0:	47b0      	blx	r6
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs), 0);

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    14a2:	4629      	mov	r1, r5
    14a4:	2208      	movs	r2, #8
    14a6:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    14aa:	f017 fbc6 	bl	18c3a <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    14ae:	2204      	movs	r2, #4
    14b0:	f107 0110 	add.w	r1, r7, #16
    14b4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    14b8:	f017 fbbf 	bl	18c3a <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, tx);
    14bc:	4639      	mov	r1, r7
    14be:	4620      	mov	r0, r4
    14c0:	f019 fb8e 	bl	1abe0 <ctrl_tx_enqueue>
			rx = ll_pdu_rx_alloc();
    14c4:	f00a ffac 	bl	c420 <ll_pdu_rx_alloc>
			if (!rx) {
    14c8:	4605      	mov	r5, r0
    14ca:	2800      	cmp	r0, #0
    14cc:	f43f ad9e 	beq.w	100c <ull_conn_llcp+0x7ec>
			rx->hdr.handle = conn->lll.handle;
    14d0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    14d2:	80c3      	strh	r3, [r0, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    14d4:	f890 3020 	ldrb.w	r3, [r0, #32]
    14d8:	f043 0303 	orr.w	r3, r3, #3
    14dc:	f880 3020 	strb.w	r3, [r0, #32]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    14e0:	2317      	movs	r3, #23
    14e2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    14e6:	2602      	movs	r6, #2
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    14e8:	2303      	movs	r3, #3
    14ea:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
			memcpy(&pdu->llctrl.enc_req.rand[0],
    14ee:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    14f0:	7106      	strb	r6, [r0, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    14f2:	f204 1155 	addw	r1, r4, #341	; 0x155
    14f6:	3024      	adds	r0, #36	; 0x24
    14f8:	f017 fb9f 	bl	18c3a <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    14fc:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    1500:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    1504:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    1508:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ll_rx_put(rx->hdr.link, rx);
    150c:	4629      	mov	r1, r5
    150e:	6828      	ldr	r0, [r5, #0]
    1510:	f00a ff5e 	bl	c3d0 <ll_rx_put>
			ll_rx_sched();
    1514:	f00a ff66 	bl	c3e4 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    1518:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    151c:	f366 0301 	bfi	r3, r6, #0, #2
    1520:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    1524:	e572      	b.n	100c <ull_conn_llcp+0x7ec>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1526:	4874      	ldr	r0, [pc, #464]	; (16f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x370>)
    1528:	f018 ff96 	bl	1a458 <mem_acquire>
	if (!tx) {
    152c:	4605      	mov	r5, r0
    152e:	2800      	cmp	r0, #0
    1530:	f43f ad6c 	beq.w	100c <ull_conn_llcp+0x7ec>
	if (!lll->role) {
    1534:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1538:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    153a:	f100 0704 	add.w	r7, r0, #4
	if (!lll->role) {
    153e:	db47      	blt.n	15d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x248>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    1540:	f104 087f 	add.w	r8, r4, #127	; 0x7f
    1544:	4643      	mov	r3, r8
    1546:	4632      	mov	r2, r6
    1548:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    154c:	f204 105d 	addw	r0, r4, #349	; 0x15d
    1550:	f019 fded 	bl	1b12e <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    1554:	2210      	movs	r2, #16
    1556:	4641      	mov	r1, r8
    1558:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    155c:	f017 fb6d 	bl	18c3a <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1560:	f104 0198 	add.w	r1, r4, #152	; 0x98
    1564:	2208      	movs	r2, #8
    1566:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    156a:	f017 fb66 	bl	18c3a <memcpy>
		lll->ccm_rx.direction = 0;
    156e:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
		lll->ccm_rx.counter = 0;
    1572:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
		lll->ccm_rx.direction = 0;
    1576:	f366 0300 	bfi	r3, r6, #0, #1
    157a:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    157e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
		lll->ccm_rx.counter = 0;
    1582:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
		lll->ccm_tx.direction = 1;
    1586:	f043 0301 	orr.w	r3, r3, #1
    158a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    158e:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    1592:	f884 6091 	strb.w	r6, [r4, #145]	; 0x91
		lll->enc_rx = 1;
    1596:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.counter = 0;
    159a:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    159e:	f884 6093 	strb.w	r6, [r4, #147]	; 0x93
    15a2:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
    15a6:	f884 6095 	strb.w	r6, [r4, #149]	; 0x95
    15aa:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    15ae:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
		lll->enc_rx = 1;
    15b2:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    15b6:	4639      	mov	r1, r7
    15b8:	4620      	mov	r0, r4
    15ba:	f019 fb14 	bl	1abe6 <start_enc_rsp_send>
			ctrl_tx_enqueue(conn, tx);
    15be:	4629      	mov	r1, r5
    15c0:	4620      	mov	r0, r4
    15c2:	f019 fb0d 	bl	1abe0 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    15c6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    15ca:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    15ce:	e51d      	b.n	100c <ull_conn_llcp+0x7ec>
	else if (!lll->enc_rx) {
    15d0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    15d4:	071a      	lsls	r2, r3, #28
    15d6:	d465      	bmi.n	16a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31c>
		if (conn->llcp.encryption.error_code) {
    15d8:	f894 60ed 	ldrb.w	r6, [r4, #237]	; 0xed
    15dc:	b1f6      	cbz	r6, 161c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x294>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    15de:	7903      	ldrb	r3, [r0, #4]
    15e0:	f043 0303 	orr.w	r3, r3, #3
    15e4:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    15e6:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    15ea:	07db      	lsls	r3, r3, #31
    15ec:	d511      	bpl.n	1612 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28a>
	    (conn->llcp_feature.features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    15ee:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    15f2:	075f      	lsls	r7, r3, #29
    15f4:	d50d      	bpl.n	1612 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28a>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    15f6:	2311      	movs	r3, #17
    15f8:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    15fa:	2303      	movs	r3, #3
    15fc:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    15fe:	7246      	strb	r6, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    1600:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    1602:	716b      	strb	r3, [r5, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1604:	796b      	ldrb	r3, [r5, #5]
    1606:	3301      	adds	r3, #1
    1608:	716b      	strb	r3, [r5, #5]
	conn->llcp.encryption.error_code = 0U;
    160a:	2300      	movs	r3, #0
    160c:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    1610:	e7d5      	b.n	15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1612:	230d      	movs	r3, #13
    1614:	71eb      	strb	r3, [r5, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    1616:	722e      	strb	r6, [r5, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    1618:	2301      	movs	r3, #1
    161a:	e7f2      	b.n	1602 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x27a>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    161c:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    1620:	463b      	mov	r3, r7
    1622:	4632      	mov	r2, r6
    1624:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    1628:	f204 105d 	addw	r0, r4, #349	; 0x15d
    162c:	f019 fd7f 	bl	1b12e <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    1630:	2210      	movs	r2, #16
    1632:	4639      	mov	r1, r7
    1634:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    1638:	f017 faff 	bl	18c3a <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    163c:	2208      	movs	r2, #8
    163e:	f104 0198 	add.w	r1, r4, #152	; 0x98
    1642:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    1646:	f017 faf8 	bl	18c3a <memcpy>
			lll->ccm_rx.direction = 1U;
    164a:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
			lll->ccm_rx.counter = 0U;
    164e:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    1652:	f043 0301 	orr.w	r3, r3, #1
    1656:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    165a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
			lll->ccm_rx.counter = 0U;
    165e:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
			lll->ccm_tx.direction = 0U;
    1662:	f366 0300 	bfi	r3, r6, #0, #1
    1666:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    166a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    166e:	f884 6091 	strb.w	r6, [r4, #145]	; 0x91
			lll->enc_rx = 1U;
    1672:	f043 0308 	orr.w	r3, r3, #8
    1676:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    167a:	792b      	ldrb	r3, [r5, #4]
			lll->ccm_rx.counter = 0U;
    167c:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1680:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_rx.counter = 0U;
    1684:	f884 6093 	strb.w	r6, [r4, #147]	; 0x93
    1688:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
    168c:	f884 6095 	strb.w	r6, [r4, #149]	; 0x95
    1690:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    1694:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1698:	712b      	strb	r3, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    169a:	2301      	movs	r3, #1
    169c:	716b      	strb	r3, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    169e:	2305      	movs	r3, #5
    16a0:	71eb      	strb	r3, [r5, #7]
			ctrl_tx_enqueue(conn, tx);
    16a2:	e78c      	b.n	15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    16a4:	4639      	mov	r1, r7
    16a6:	4620      	mov	r0, r4
    16a8:	f019 fa9d 	bl	1abe6 <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, tx);
    16ac:	4629      	mov	r1, r5
    16ae:	4620      	mov	r0, r4
    16b0:	f019 fa96 	bl	1abe0 <ctrl_tx_enqueue>
		conn->llcp_enc.pause_rx = 0U;
    16b4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    16b8:	f023 0303 	bic.w	r3, r3, #3
    16bc:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    16c0:	e781      	b.n	15c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    16c2:	480d      	ldr	r0, [pc, #52]	; (16f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x370>)
    16c4:	f018 fec8 	bl	1a458 <mem_acquire>
	if (tx) {
    16c8:	4601      	mov	r1, r0
    16ca:	2800      	cmp	r0, #0
    16cc:	f43f ac9e 	beq.w	100c <ull_conn_llcp+0x7ec>
		conn->llcp_ack = conn->llcp_req;
    16d0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    16d4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16d8:	7903      	ldrb	r3, [r0, #4]
    16da:	f043 0303 	orr.w	r3, r3, #3
    16de:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    16e0:	2301      	movs	r3, #1
    16e2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    16e4:	2312      	movs	r3, #18
    16e6:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, tx);
    16e8:	4620      	mov	r0, r4
    16ea:	f019 fa79 	bl	1abe0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    16ee:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    16f2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    16f6:	e489      	b.n	100c <ull_conn_llcp+0x7ec>
    16f8:	20001100 	.word	0x20001100
    16fc:	20001084 	.word	0x20001084
			event_counter = lll->event_counter +
    1700:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1702:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1704:	4413      	add	r3, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    1706:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
					lll->latency_prepare + lazy;
    170a:	449a      	add	sl, r3
	if (conn->llcp.phy_upd_ind.initiate) {
    170c:	07d0      	lsls	r0, r2, #31
			event_counter = lll->event_counter +
    170e:	fa1f fa8a 	uxth.w	sl, sl
	if (conn->llcp.phy_upd_ind.initiate) {
    1712:	d568      	bpl.n	17e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45e>
		rx = ll_pdu_rx_alloc_peek(2);
    1714:	2002      	movs	r0, #2
    1716:	f00a fe6b 	bl	c3f0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    171a:	4606      	mov	r6, r0
    171c:	2800      	cmp	r0, #0
    171e:	f43f ac75 	beq.w	100c <ull_conn_llcp+0x7ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1722:	48c0      	ldr	r0, [pc, #768]	; (1a24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69c>)
    1724:	f018 fe98 	bl	1a458 <mem_acquire>
		if (!tx) {
    1728:	4605      	mov	r5, r0
    172a:	2800      	cmp	r0, #0
    172c:	f43f ac6e 	beq.w	100c <ull_conn_llcp+0x7ec>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1730:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1734:	f36f 0300 	bfc	r3, #0, #1
    1738:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    173c:	b2db      	uxtb	r3, r3
    173e:	f3c3 0782 	ubfx	r7, r3, #2, #3
    1742:	ea57 1753 	orrs.w	r7, r7, r3, lsr #5
    1746:	d137      	bne.n	17b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x430>
			conn->llcp_ack = conn->llcp_req;
    1748:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    174c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    1750:	079b      	lsls	r3, r3, #30
			conn->llcp.phy_upd_ind.instant = 0U;
    1752:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    1756:	d519      	bpl.n	178c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x404>
				(void)ll_pdu_rx_alloc();
    1758:	f00a fe62 	bl	c420 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    175c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    175e:	80f3      	strh	r3, [r6, #6]
				upd->status = 0U;
    1760:	f886 7020 	strb.w	r7, [r6, #32]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1764:	230e      	movs	r3, #14
    1766:	7133      	strb	r3, [r6, #4]
				upd->tx = lll->phy_tx;
    1768:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    176c:	6830      	ldr	r0, [r6, #0]
				upd->tx = lll->phy_tx;
    176e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1772:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
				upd->rx = lll->phy_rx;
    1776:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    177a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    177e:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
				ll_rx_put(rx->hdr.link, rx);
    1782:	4631      	mov	r1, r6
    1784:	f00a fe24 	bl	c3d0 <ll_rx_put>
				ll_rx_sched();
    1788:	f00a fe2c 	bl	c3e4 <ll_rx_sched>
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    178c:	792b      	ldrb	r3, [r5, #4]
    178e:	f043 0303 	orr.w	r3, r3, #3
    1792:	712b      	strb	r3, [r5, #4]
		pdu_ctrl_tx->len =
    1794:	2305      	movs	r3, #5
    1796:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
    1798:	2318      	movs	r3, #24
    179a:	71eb      	strb	r3, [r5, #7]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    179c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    17a0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    17a4:	722b      	strb	r3, [r5, #8]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    17a6:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    17aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
    17ae:	726b      	strb	r3, [r5, #9]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    17b0:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    17b4:	816b      	strh	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
    17b6:	e425      	b.n	1004 <ull_conn_llcp+0x7e4>
			conn->llcp.phy_upd_ind.instant = event_counter +
    17b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    17ba:	449a      	add	sl, r3
							 lll->latency +
    17bc:	f10a 0a06 	add.w	sl, sl, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    17c0:	f8a4 a0ee 	strh.w	sl, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    17c4:	f00a fe2c 	bl	c420 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    17c8:	6833      	ldr	r3, [r6, #0]
    17ca:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    17ce:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    17d0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    17d4:	f00a fe24 	bl	c420 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    17d8:	6803      	ldr	r3, [r0, #0]
    17da:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    17de:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    17e0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    17e4:	e7d2      	b.n	178c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x404>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    17e6:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    17ea:	ebaa 0a03 	sub.w	sl, sl, r3
    17ee:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
    17f2:	f47f ac0b 	bne.w	100c <ull_conn_llcp+0x7ec>
		old_tx = lll->phy_tx;
    17f6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    17fa:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    17fe:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
		if (conn->llcp.phy_upd_ind.tx) {
    1802:	f012 0f1c 	tst.w	r2, #28
		old_tx = lll->phy_tx;
    1806:	f003 0707 	and.w	r7, r3, #7
		old_rx = lll->phy_rx;
    180a:	f005 0507 	and.w	r5, r5, #7
		u16_t eff_rx_time = lll->max_rx_time;
    180e:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
		if (conn->llcp.phy_upd_ind.tx) {
    1812:	d16a      	bne.n	18ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x562>
		u16_t eff_tx_time = lll->max_tx_time;
    1814:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
		if (conn->llcp.phy_upd_ind.rx) {
    1818:	f012 0fe0 	tst.w	r2, #224	; 0xe0
    181c:	d008      	beq.n	1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    181e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    1822:	0952      	lsrs	r2, r2, #5
    1824:	f362 0302 	bfi	r3, r2, #0, #3
    1828:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
		eff_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
    182c:	f44f 76a4 	mov.w	r6, #328	; 0x148
		lll->phy_flags = conn->phy_pref_flags;
    1830:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    1834:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		rx = conn->llcp_rx;
    1838:	f8d4 9100 	ldr.w	r9, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
    183c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1840:	f363 02c3 	bfi	r2, r3, #3, #1
    1844:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
    1848:	f1b9 0f00 	cmp.w	r9, #0
    184c:	d002      	beq.n	1854 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4cc>
    184e:	f8d9 3000 	ldr.w	r3, [r9]
    1852:	b963      	cbnz	r3, 186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
    1854:	f44f 6360 	mov.w	r3, #3584	; 0xe00
    1858:	4a73      	ldr	r2, [pc, #460]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    185a:	4974      	ldr	r1, [pc, #464]	; (1a2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a4>)
    185c:	4874      	ldr	r0, [pc, #464]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    185e:	f016 fc69 	bl	18134 <printk>
    1862:	4040      	eors	r0, r0
    1864:	f380 8811 	msr	BASEPRI, r0
    1868:	f04f 0003 	mov.w	r0, #3
    186c:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    186e:	f8d9 0000 	ldr.w	r0, [r9]
    1872:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    1876:	6843      	ldr	r3, [r0, #4]
    1878:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    187c:	f894 e0ec 	ldrb.w	lr, [r4, #236]	; 0xec
    1880:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    1884:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1888:	f3c3 0302 	ubfx	r3, r3, #0, #3
    188c:	f01e 0f02 	tst.w	lr, #2
    1890:	fa5f fc82 	uxtb.w	ip, r2
    1894:	b2d9      	uxtb	r1, r3
    1896:	d142      	bne.n	191e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x596>
    1898:	4567      	cmp	r7, ip
    189a:	d140      	bne.n	191e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x596>
    189c:	428d      	cmp	r5, r1
    189e:	d13e      	bne.n	191e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x596>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    18a0:	2303      	movs	r3, #3
    18a2:	f889 3004 	strb.w	r3, [r9, #4]
			ll_rx_put(rx->hdr.link, rx);
    18a6:	4649      	mov	r1, r9
    18a8:	f00a fd92 	bl	c3d0 <ll_rx_put>
				rx = conn->llcp_rx;
    18ac:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    18b0:	b10d      	cbz	r5, 18b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52e>
    18b2:	682b      	ldr	r3, [r5, #0]
    18b4:	b963      	cbnz	r3, 18d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x548>
    18b6:	f640 630f 	movw	r3, #3599	; 0xe0f
    18ba:	4a5b      	ldr	r2, [pc, #364]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    18bc:	495b      	ldr	r1, [pc, #364]	; (1a2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a4>)
    18be:	485c      	ldr	r0, [pc, #368]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    18c0:	f016 fc38 	bl	18134 <printk>
    18c4:	4040      	eors	r0, r0
    18c6:	f380 8811 	msr	BASEPRI, r0
    18ca:	f04f 0003 	mov.w	r0, #3
    18ce:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
    18d0:	6828      	ldr	r0, [r5, #0]
    18d2:	6843      	ldr	r3, [r0, #4]
    18d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    18d8:	2303      	movs	r3, #3
    18da:	712b      	strb	r3, [r5, #4]
		ll_rx_put(rx->hdr.link, rx);
    18dc:	4629      	mov	r1, r5
    18de:	f00a fd77 	bl	c3d0 <ll_rx_put>
		ll_rx_sched();
    18e2:	f00a fd7f 	bl	c3e4 <ll_rx_sched>
    18e6:	f7ff bb91 	b.w	100c <ull_conn_llcp+0x7ec>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    18ea:	f3c2 0182 	ubfx	r1, r2, #2, #3
    18ee:	f361 0302 	bfi	r3, r1, #0, #3
    18f2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	u16_t time = PKT_US(max_octets, phy);
    18f6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    18fa:	330e      	adds	r3, #14
    18fc:	00db      	lsls	r3, r3, #3
    18fe:	f3c1 0140 	ubfx	r1, r1, #1, #1
    1902:	40cb      	lsrs	r3, r1
	if (time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
    1904:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1908:	d306      	bcc.n	1918 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x590>
		eff_time = MIN(time, default_time);
    190a:	f8b4 80d8 	ldrh.w	r8, [r4, #216]	; 0xd8
    190e:	b29b      	uxth	r3, r3
    1910:	4598      	cmp	r8, r3
    1912:	bf28      	it	cs
    1914:	4698      	movcs	r8, r3
    1916:	e77f      	b.n	1818 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x490>
		eff_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
    1918:	f44f 78a4 	mov.w	r8, #328	; 0x148
    191c:	e77c      	b.n	1818 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x490>
		rx->hdr.handle = lll->handle;
    191e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    1920:	f8a9 1006 	strh.w	r1, [r9, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1924:	210e      	movs	r1, #14
    1926:	f889 1004 	strb.w	r1, [r9, #4]
		upd->status = 0U;
    192a:	2100      	movs	r1, #0
    192c:	f889 1020 	strb.w	r1, [r9, #32]
		upd->tx = lll->phy_tx;
    1930:	f889 2021 	strb.w	r2, [r9, #33]	; 0x21
		upd->rx = lll->phy_rx;
    1934:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    1938:	4649      	mov	r1, r9
    193a:	f00a fd49 	bl	c3d0 <ll_rx_put>
		rx = conn->llcp_rx;
    193e:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1942:	b10d      	cbz	r5, 1948 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c0>
    1944:	682b      	ldr	r3, [r5, #0]
    1946:	b963      	cbnz	r3, 1962 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5da>
    1948:	f640 632c 	movw	r3, #3628	; 0xe2c
    194c:	4a36      	ldr	r2, [pc, #216]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    194e:	4937      	ldr	r1, [pc, #220]	; (1a2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a4>)
    1950:	4837      	ldr	r0, [pc, #220]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    1952:	f016 fbef 	bl	18134 <printk>
    1956:	4040      	eors	r0, r0
    1958:	f380 8811 	msr	BASEPRI, r0
    195c:	f04f 0003 	mov.w	r0, #3
    1960:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    1962:	6828      	ldr	r0, [r5, #0]
    1964:	6843      	ldr	r3, [r0, #4]
    1966:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    196a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    196e:	4543      	cmp	r3, r8
    1970:	d303      	bcc.n	197a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5f2>
    1972:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    1976:	42b3      	cmp	r3, r6
    1978:	d2ae      	bcs.n	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
		rx->hdr.handle = lll->handle;
    197a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		lll->max_tx_time = eff_tx_time;
    197c:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    1980:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
    1984:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1986:	2302      	movs	r3, #2
    1988:	712b      	strb	r3, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    198a:	f895 3020 	ldrb.w	r3, [r5, #32]
    198e:	f043 0303 	orr.w	r3, r3, #3
    1992:	f885 3020 	strb.w	r3, [r5, #32]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1996:	2309      	movs	r3, #9
    1998:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    199c:	2315      	movs	r3, #21
    199e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    19a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    19a6:	84ab      	strh	r3, [r5, #36]	; 0x24
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    19a8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    19ac:	852b      	strh	r3, [r5, #40]	; 0x28
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    19ae:	84ee      	strh	r6, [r5, #38]	; 0x26
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    19b0:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
    19b4:	e792      	b.n	18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>
			LL_ASSERT(0);
    19b6:	f240 3376 	movw	r3, #886	; 0x376
    19ba:	4a1b      	ldr	r2, [pc, #108]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    19bc:	491d      	ldr	r1, [pc, #116]	; (1a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ac>)
    19be:	481c      	ldr	r0, [pc, #112]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    19c0:	f016 fbb8 	bl	18134 <printk>
    19c4:	4040      	eors	r0, r0
    19c6:	f380 8811 	msr	BASEPRI, r0
    19ca:	f04f 0003 	mov.w	r0, #3
    19ce:	df02      	svc	2
			break;
    19d0:	f7ff bb1c 	b.w	100c <ull_conn_llcp+0x7ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    19d4:	4813      	ldr	r0, [pc, #76]	; (1a24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69c>)
    19d6:	f018 fd3f 	bl	1a458 <mem_acquire>
		if (tx) {
    19da:	4601      	mov	r1, r0
    19dc:	b180      	cbz	r0, 1a00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x678>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    19de:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    19e2:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    19e6:	7903      	ldrb	r3, [r0, #4]
    19e8:	f043 0303 	orr.w	r3, r3, #3
    19ec:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    19ee:	2302      	movs	r3, #2
    19f0:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    19f2:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    19f4:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
    19f8:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    19fa:	4620      	mov	r0, r4
    19fc:	f019 f8f0 	bl	1abe0 <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    1a00:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    1a04:	2800      	cmp	r0, #0
    1a06:	f47f ab08 	bne.w	101a <ull_conn_llcp+0x7fa>
			conn->procedure_expire = conn->supervision_reload;
    1a0a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    1a0e:	2b01      	cmp	r3, #1
    1a10:	d903      	bls.n	1a1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x692>
			conn->procedure_expire = conn->supervision_reload;
    1a12:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1a16:	f7ff bb00 	b.w	101a <ull_conn_llcp+0x7fa>
				conn->procedure_expire++;
    1a1a:	3301      	adds	r3, #1
    1a1c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1a20:	f7ff bafc 	b.w	101c <ull_conn_llcp+0x7fc>
    1a24:	20001100 	.word	0x20001100
    1a28:	00020ce6 	.word	0x00020ce6
    1a2c:	00020dad 	.word	0x00020dad
    1a30:	0001ff46 	.word	0x0001ff46
    1a34:	0002195a 	.word	0x0002195a

00001a38 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(u32_t status, void *param);
static void ticker_op_cb(u32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a3c:	b097      	sub	sp, #92	; 0x5c
    1a3e:	461d      	mov	r5, r3
    1a40:	900e      	str	r0, [sp, #56]	; 0x38
	u16_t win_offset;
	u16_t timeout;
	u16_t interval;
	u8_t chan_sel;

	((struct lll_adv *)ftr->param)->conn = NULL;
    1a42:	6813      	ldr	r3, [r2, #0]

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    1a44:	4628      	mov	r0, r5
{
    1a46:	4690      	mov	r8, r2
	((struct lll_adv *)ftr->param)->conn = NULL;
    1a48:	2200      	movs	r2, #0
{
    1a4a:	460c      	mov	r4, r1
	conn = lll->hdr.parent;
    1a4c:	f850 6b0c 	ldr.w	r6, [r0], #12
	((struct lll_adv *)ftr->param)->conn = NULL;
    1a50:	609a      	str	r2, [r3, #8]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1a52:	f105 0a08 	add.w	sl, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1a56:	2203      	movs	r2, #3
    1a58:	3132      	adds	r1, #50	; 0x32
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1a5a:	f8d3 9000 	ldr.w	r9, [r3]
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1a5e:	f105 071c 	add.w	r7, r5, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1a62:	f017 f8ea 	bl	18c3a <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1a66:	2204      	movs	r2, #4
    1a68:	f104 012e 	add.w	r1, r4, #46	; 0x2e
    1a6c:	4650      	mov	r0, sl
    1a6e:	f017 f8e4 	bl	18c3a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1a72:	2205      	movs	r2, #5
    1a74:	f104 013e 	add.w	r1, r4, #62	; 0x3e
    1a78:	4638      	mov	r0, r7
    1a7a:	f017 f8de 	bl	18c3a <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1a7e:	2105      	movs	r1, #5
    1a80:	4638      	mov	r0, r7
    1a82:	f018 fd65 	bl	1a550 <util_ones_count_get>
    1a86:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    1a8a:	f360 0305 	bfi	r3, r0, #0, #6
    1a8e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    1a96:	f3c3 0304 	ubfx	r3, r3, #0, #5
    1a9a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1a9e:	8f27      	ldrh	r7, [r4, #56]	; 0x38
	lll->interval = interval;
    1aa0:	826f      	strh	r7, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1aa2:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
    1aa6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    1aaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1aae:	82ab      	strh	r3, [r5, #20]

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1ab0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1ab2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	conn_interval_us = interval * 1250U;

	/* calculate the window widening */
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ab6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    1aba:	f896 20dc 	ldrb.w	r2, [r6, #220]	; 0xdc
    1abe:	095b      	lsrs	r3, r3, #5
    1ac0:	f363 0284 	bfi	r2, r3, #2, #3
    1ac4:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
	lll->slave.window_widening_periodic_us =
		(((lll_conn_ppm_local_get() +
    1ac8:	f019 fa52 	bl	1af70 <lll_conn_ppm_local_get>
    1acc:	900a      	str	r0, [sp, #40]	; 0x28
		   lll_conn_ppm_get(conn->slave.sca)) *
    1ace:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
    1ad2:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1ad6:	f00e fce1 	bl	1049c <lll_conn_ppm_get>
		(((lll_conn_ppm_local_get() +
    1ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					      conn_interval_us);
	/* Dispatch LE Ping PDU 6 connection events (that peer would
	 * listen to) before 30s timeout
	 * TODO: "peer listens to" is greater than 30s due to latency
	 */
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1adc:	8aa9      	ldrh	r1, [r5, #20]
	conn_interval_us = interval * 1250U;
    1ade:	f240 4be2 	movw	fp, #1250	; 0x4e2
    1ae2:	fb0b f707 	mul.w	r7, fp, r7
		(((lll_conn_ppm_local_get() +
    1ae6:	4418      	add	r0, r3
		   lll_conn_ppm_get(conn->slave.sca)) *
    1ae8:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1aea:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    1aee:	4bb8      	ldr	r3, [pc, #736]	; (1dd0 <ull_slave_setup+0x398>)
    1af0:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1af4:	fbb0 f0f3 	udiv	r0, r0, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1af8:	087b      	lsrs	r3, r7, #1
    1afa:	3b96      	subs	r3, #150	; 0x96
    1afc:	62eb      	str	r3, [r5, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    1afe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	lll->slave.window_widening_periodic_us =
    1b02:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    1b04:	fb0b f303 	mul.w	r3, fp, r3
    1b08:	63eb      	str	r3, [r5, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1b0a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    1b0c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1b10:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    1b14:	f242 7310 	movw	r3, #10000	; 0x2710
    1b18:	fb03 7302 	mla	r3, r3, r2, r7
    1b1c:	3b01      	subs	r3, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1b1e:	4aad      	ldr	r2, [pc, #692]	; (1dd4 <ull_slave_setup+0x39c>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1b20:	fbb3 f3f7 	udiv	r3, r3, r7
    1b24:	f8a6 30c6 	strh.w	r3, [r6, #198]	; 0xc6
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1b28:	4bab      	ldr	r3, [pc, #684]	; (1dd8 <ull_slave_setup+0x3a0>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1b2a:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1b2c:	443b      	add	r3, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1b2e:	443a      	add	r2, r7
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1b30:	fbb3 f3f7 	udiv	r3, r3, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1b34:	fbb2 f2f7 	udiv	r2, r2, r7
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1b38:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1b3c:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1b3e:	4283      	cmp	r3, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1b40:	f8a6 30d2 	strh.w	r3, [r6, #210]	; 0xd2
			     (conn->apto_reload - (lll->latency + 6)) :
    1b44:	bfc2      	ittt	gt
    1b46:	1a5b      	subgt	r3, r3, r1
    1b48:	3b06      	subgt	r3, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1b4a:	b29b      	uxthgt	r3, r3
			     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1b4c:	4651      	mov	r1, sl
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1b4e:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1b52:	2204      	movs	r2, #4
    1b54:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    1b58:	f017 f86f 	bl	18c3a <memcpy>
	       sizeof(conn->slave.force));

#if defined(CONFIG_BT_CTLR_PRIVACY)
	u8_t own_addr_type = pdu_adv->rx_addr;
	u8_t own_addr[BDADDR_SIZE];
	u8_t rl_idx = ftr->rl_idx;
    1b5c:	f898 3015 	ldrb.w	r3, [r8, #21]
	u8_t own_addr_type = pdu_adv->rx_addr;
    1b60:	f894 a020 	ldrb.w	sl, [r4, #32]
	u8_t rl_idx = ftr->rl_idx;
    1b64:	930a      	str	r3, [sp, #40]	; 0x28

	memcpy(own_addr, &pdu_adv->connect_ind.adv_addr[0], BDADDR_SIZE);
    1b66:	2206      	movs	r2, #6
    1b68:	f104 0128 	add.w	r1, r4, #40	; 0x28
    1b6c:	a814      	add	r0, sp, #80	; 0x50
    1b6e:	f017 f864 	bl	18c3a <memcpy>
#endif

	peer_addr_type = pdu_adv->tx_addr;
    1b72:	f894 3020 	ldrb.w	r3, [r4, #32]
    1b76:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1b7a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1b7e:	f104 0322 	add.w	r3, r4, #34	; 0x22
    1b82:	4619      	mov	r1, r3
    1b84:	2206      	movs	r2, #6
    1b86:	a812      	add	r0, sp, #72	; 0x48
    1b88:	9311      	str	r3, [sp, #68]	; 0x44
    1b8a:	f017 f856 	bl	18c3a <memcpy>

	chan_sel = pdu_adv->chan_sel;
    1b8e:	f894 2020 	ldrb.w	r2, [r4, #32]
	u8_t own_addr_type = pdu_adv->rx_addr;
    1b92:	f3ca 1ac0 	ubfx	sl, sl, #7, #1
	chan_sel = pdu_adv->chan_sel;
    1b96:	f3c2 1340 	ubfx	r3, r2, #5, #1

	cc = (void *)pdu_adv;
	cc->status = 0U;
    1b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
	chan_sel = pdu_adv->chan_sel;
    1b9e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	cc->status = 0U;
    1ba2:	8422      	strh	r2, [r4, #32]
	chan_sel = pdu_adv->chan_sel;
    1ba4:	b2db      	uxtb	r3, r3
	cc->role = 1U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	cc->own_addr_type = own_addr_type;
    1ba6:	f884 a02f 	strb.w	sl, [r4, #47]	; 0x2f
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    1baa:	2206      	movs	r2, #6
    1bac:	a914      	add	r1, sp, #80	; 0x50
    1bae:	f104 0030 	add.w	r0, r4, #48	; 0x30
	chan_sel = pdu_adv->chan_sel;
    1bb2:	930d      	str	r3, [sp, #52]	; 0x34
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    1bb4:	f017 f841 	bl	18c3a <memcpy>

	if (rl_idx != FILTER_IDX_NONE) {
    1bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1bba:	2bff      	cmp	r3, #255	; 0xff
    1bbc:	f104 0b29 	add.w	fp, r4, #41	; 0x29
    1bc0:	f104 0a23 	add.w	sl, r4, #35	; 0x23
    1bc4:	f000 80ee 	beq.w	1da4 <ull_slave_setup+0x36c>
		/* TODO: store rl_idx instead if safe */
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    1bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1bca:	980a      	ldr	r0, [sp, #40]	; 0x28
    1bcc:	4619      	mov	r1, r3
    1bce:	4652      	mov	r2, sl
    1bd0:	f00f f93c 	bl	10e4c <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    1bd4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    1bd8:	3302      	adds	r3, #2
    1bda:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    1bde:	2206      	movs	r2, #6
    1be0:	a912      	add	r1, sp, #72	; 0x48
    1be2:	4658      	mov	r0, fp
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    1be4:	f017 f829 	bl	18c3a <memcpy>
	}

	cc->interval = lll->interval;
    1be8:	8a6b      	ldrh	r3, [r5, #18]
    1bea:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->latency = lll->latency;
    1bec:	8aab      	ldrh	r3, [r5, #20]
    1bee:	8723      	strh	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
    1bf0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    1bf4:	8763      	strh	r3, [r4, #58]	; 0x3a
	cc->sca = conn->slave.sca;
    1bf6:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
    1bfa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1bfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

	lll->handle = ll_conn_handle_get(conn);
    1c02:	4630      	mov	r0, r6
    1c04:	f00c fba0 	bl	e348 <ll_conn_handle_get>
		struct node_rx_cs *cs;

		/* pick the rx node instance stored within the connection
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;
    1c08:	f8d8 a004 	ldr.w	sl, [r8, #4]
	lll->handle = ll_conn_handle_get(conn);
    1c0c:	8228      	strh	r0, [r5, #16]

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    1c0e:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    1c10:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    1c12:	980e      	ldr	r0, [sp, #56]	; 0x38
    1c14:	f00a fbdc 	bl	c3d0 <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    1c18:	8a2b      	ldrh	r3, [r5, #16]
    1c1a:	f8aa 3006 	strh.w	r3, [sl, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1c1e:	230d      	movs	r3, #13
    1c20:	f88a 3004 	strb.w	r3, [sl, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    1c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		link = rx->link;
    1c26:	f8da 0000 	ldr.w	r0, [sl]
		if (chan_sel) {
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	f000 80c7 	beq.w	1dbe <ull_slave_setup+0x386>
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    1c30:	7a6a      	ldrb	r2, [r5, #9]
				      lll->access_addr[0];
    1c32:	7a2b      	ldrb	r3, [r5, #8]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    1c34:	7ae9      	ldrb	r1, [r5, #11]
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    1c36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				      lll->access_addr[2];
    1c3a:	7aaa      	ldrb	r2, [r5, #10]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    1c3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

			lll->data_chan_sel = 1;
    1c40:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
			lll->data_chan_id = aa_ms ^ aa_ls;
    1c44:	4053      	eors	r3, r2
			lll->data_chan_sel = 1;
    1c46:	f041 0140 	orr.w	r1, r1, #64	; 0x40
			lll->data_chan_id = aa_ms ^ aa_ls;
    1c4a:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    1c4c:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21

			cs->csa = 0x01;
    1c50:	2301      	movs	r3, #1
		} else {
			cs->csa = 0x00;
    1c52:	f88a 3020 	strb.w	r3, [sl, #32]
		}
	}

	ll_rx_put(link, rx);
    1c56:	4651      	mov	r1, sl
    1c58:	f00a fbba 	bl	c3d0 <ll_rx_put>
	ll_rx_sched();
    1c5c:	f00a fbc2 	bl	c3e4 <ll_rx_sched>
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1c60:	f8d8 b010 	ldr.w	fp, [r8, #16]
    1c64:	f8df a190 	ldr.w	sl, [pc, #400]	; 1df8 <ull_slave_setup+0x3c0>
	conn->evt.ticks_xtal_to_start =
    1c68:	2400      	movs	r4, #0
    1c6a:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1c6c:	f20b 4052 	addw	r0, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    1c70:	e9c6 3400 	strd	r3, r4, [r6]
	conn->evt.ticks_preempt_to_start =
    1c74:	60b4      	str	r4, [r6, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1c76:	a354      	add	r3, pc, #336	; (adr r3, 1dc8 <ull_slave_setup+0x390>)
    1c78:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c7c:	fba0 010a 	umull	r0, r1, r0, sl
    1c80:	f7fe fa2e 	bl	e0 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    1c84:	6aab      	ldr	r3, [r5, #40]	; 0x28

	conn_offset_us = ftr->us_radio_end;
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    1c86:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    1c8a:	1aff      	subs	r7, r7, r3
    1c8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    1c90:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
    1c94:	eba3 030b 	sub.w	r3, r3, fp
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    1c98:	f240 4be2 	movw	fp, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    1ca0:	fb0b bb02 	mla	fp, fp, r2, fp
	conn_offset_us -= EVENT_OVERHEAD_START_US;
	conn_offset_us -= EVENT_TICKER_RES_MARGIN_US;
	conn_offset_us -= EVENT_JITTER_US;
	conn_offset_us -= ftr->us_radio_rdy;
    1ca4:	445b      	add	r3, fp

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1ca6:	4622      	mov	r2, r4
    1ca8:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    1caa:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1cac:	2001      	movs	r0, #1
	conn_offset_us -= ftr->us_radio_rdy;
    1cae:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1cb0:	f007 ff3e 	bl	9b30 <mayfly_enable>
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1cb4:	4648      	mov	r0, r9
    1cb6:	f00b fc55 	bl	d564 <ull_adv_handle_get>
    1cba:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1cbc:	4b47      	ldr	r3, [pc, #284]	; (1ddc <ull_slave_setup+0x3a4>)
    1cbe:	f8cd 9000 	str.w	r9, [sp]
    1cc2:	b2d2      	uxtb	r2, r2
    1cc4:	2101      	movs	r1, #1
    1cc6:	4620      	mov	r0, r4
    1cc8:	f008 fc5e 	bl	a588 <ticker_stop>
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_adv, ticker_op_stop_adv_cb, adv);
	ticker_op_stop_adv_cb(ticker_status, adv);
    1ccc:	4649      	mov	r1, r9
    1cce:	f00e fe99 	bl	10a04 <ticker_op_stop_adv_cb>

	/* Stop Direct Adv Stop */
	if (adv->lll.is_hdcd) {
    1cd2:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    1cd6:	07db      	lsls	r3, r3, #31
    1cd8:	d506      	bpl.n	1ce8 <ull_slave_setup+0x2b0>
		/* Advertiser stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1cda:	2201      	movs	r2, #1
    1cdc:	9400      	str	r4, [sp, #0]
    1cde:	4623      	mov	r3, r4
    1ce0:	4611      	mov	r1, r2
    1ce2:	4620      	mov	r0, r4
    1ce4:	f008 fc50 	bl	a588 <ticker_stop>
			    TICKER_ID_ADV_STOP, NULL, NULL);
	}

	/* Start Slave */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1ce8:	4630      	mov	r0, r6
    1cea:	f00c fb2d 	bl	e348 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1cee:	fba7 450a 	umull	r4, r5, r7, sl
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1cf2:	4681      	mov	r9, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1cf4:	a334      	add	r3, pc, #208	; (adr r3, 1dc8 <ull_slave_setup+0x390>)
    1cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cfa:	4620      	mov	r0, r4
    1cfc:	4629      	mov	r1, r5
    1cfe:	f7fe f9ef 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1d06:	f1a3 0831 	sub.w	r8, r3, #49	; 0x31
    1d0a:	f240 131d 	movw	r3, #285	; 0x11d
    1d0e:	9308      	str	r3, [sp, #32]
    1d10:	4b33      	ldr	r3, [pc, #204]	; (1de0 <ull_slave_setup+0x3a8>)
    1d12:	e9cd 6306 	strd	r6, r3, [sp, #24]
    1d16:	4b33      	ldr	r3, [pc, #204]	; (1de4 <ull_slave_setup+0x3ac>)
    1d18:	9305      	str	r3, [sp, #20]
    1d1a:	68f3      	ldr	r3, [r6, #12]
    1d1c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1d1e:	4b32      	ldr	r3, [pc, #200]	; (1de8 <ull_slave_setup+0x3b0>)
    1d20:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    1d24:	fba6 bc03 	umull	fp, ip, r6, r3
    1d28:	2307      	movs	r3, #7
    1d2a:	fb03 cc06 	mla	ip, r3, r6, ip
    1d2e:	ebb4 000b 	subs.w	r0, r4, fp
    1d32:	eb65 010c 	sbc.w	r1, r5, ip
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1d36:	f109 0703 	add.w	r7, r9, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d3e:	f04f 0900 	mov.w	r9, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1d42:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d44:	f8cd 900c 	str.w	r9, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1d48:	f7fe f9ca 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1d4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    1d4e:	a31e      	add	r3, pc, #120	; (adr r3, 1dc8 <ull_slave_setup+0x390>)
    1d50:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d54:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1d58:	fba1 010a 	umull	r0, r1, r1, sl
    1d5c:	f7fe f9c0 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d60:	b2ff      	uxtb	r7, r7
    1d62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d66:	9000      	str	r0, [sp, #0]
    1d68:	4643      	mov	r3, r8
    1d6a:	463a      	mov	r2, r7
    1d6c:	2101      	movs	r1, #1
    1d6e:	4648      	mov	r0, r9
    1d70:	f008 fb78 	bl	a464 <ticker_start>
#endif /* CONFIG_BT_CTLR_CONN_META */
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_slave_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1d74:	f030 0302 	bics.w	r3, r0, #2
    1d78:	d00c      	beq.n	1d94 <ull_slave_setup+0x35c>
    1d7a:	f240 131f 	movw	r3, #287	; 0x11f
    1d7e:	4a1b      	ldr	r2, [pc, #108]	; (1dec <ull_slave_setup+0x3b4>)
    1d80:	491b      	ldr	r1, [pc, #108]	; (1df0 <ull_slave_setup+0x3b8>)
    1d82:	481c      	ldr	r0, [pc, #112]	; (1df4 <ull_slave_setup+0x3bc>)
    1d84:	f016 f9d6 	bl	18134 <printk>
    1d88:	4040      	eors	r0, r0
    1d8a:	f380 8811 	msr	BASEPRI, r0
    1d8e:	f04f 0003 	mov.w	r0, #3
    1d92:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1d94:	2201      	movs	r2, #1
    1d96:	2102      	movs	r1, #2
    1d98:	4610      	mov	r0, r2
    1d9a:	f007 fec9 	bl	9b30 <mayfly_enable>
#endif
}
    1d9e:	b017      	add	sp, #92	; 0x5c
    1da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    1da4:	2206      	movs	r2, #6
    1da6:	2100      	movs	r1, #0
    1da8:	4658      	mov	r0, fp
    1daa:	f016 ff70 	bl	18c8e <memset>
		cc->peer_addr_type = peer_addr_type;
    1dae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1db2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    1db6:	2206      	movs	r2, #6
    1db8:	a912      	add	r1, sp, #72	; 0x48
    1dba:	4650      	mov	r0, sl
    1dbc:	e712      	b.n	1be4 <ull_slave_setup+0x1ac>
			cs->csa = 0x00;
    1dbe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1dc2:	e746      	b.n	1c52 <ull_slave_setup+0x21a>
    1dc4:	f3af 8000 	nop.w
    1dc8:	1afd498d 	.word	0x1afd498d
    1dcc:	00000007 	.word	0x00000007
    1dd0:	000f4240 	.word	0x000f4240
    1dd4:	01c9c37f 	.word	0x01c9c37f
    1dd8:	026259ff 	.word	0x026259ff
    1ddc:	00010a05 	.word	0x00010a05
    1de0:	000109d9 	.word	0x000109d9
    1de4:	00010a3d 	.word	0x00010a3d
    1de8:	1afd498d 	.word	0x1afd498d
    1dec:	00020f3e 	.word	0x00020f3e
    1df0:	00020c45 	.word	0x00020c45
    1df4:	0001ff46 	.word	0x0001ff46
    1df8:	3b9aca00 	.word	0x3b9aca00
    1dfc:	00000000 	.word	0x00000000

00001e00 <ull_slave_done>:
 * @param ticks_drift_plus[out]  Positive part of drift uncertainty window
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_slave_done(struct node_rx_event_done *done, u32_t *ticks_drift_plus,
		    u32_t *ticks_drift_minus)
{
    1e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e04:	4689      	mov	r9, r1
	u32_t window_widening_event_us;
	u32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.slave.start_to_address_actual_us;
	window_widening_event_us =
    1e06:	e9d0 710b 	ldrd	r7, r1, [r0, #44]	; 0x2c
		done->extra.slave.window_widening_event_us;
	preamble_to_addr_us =
    1e0a:	6b46      	ldr	r6, [r0, #52]	; 0x34
		done->extra.slave.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
    1e0c:	4d16      	ldr	r5, [pc, #88]	; (1e68 <ull_slave_done+0x68>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1e0e:	198c      	adds	r4, r1, r6
	start_to_address_expected_us = EVENT_JITTER_US +
    1e10:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1e12:	42a7      	cmp	r7, r4
{
    1e14:	4690      	mov	r8, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1e16:	a312      	add	r3, pc, #72	; (adr r3, 1e60 <ull_slave_done+0x60>)
    1e18:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1e1c:	d815      	bhi.n	1e4a <ull_slave_done+0x4a>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1e1e:	fba1 0105 	umull	r0, r1, r1, r5
    1e22:	f7fe f95d 	bl	e0 <__aeabi_uldivmod>
    1e26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1e2a:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1e2e:	1be0      	subs	r0, r4, r7
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1e30:	a30b      	add	r3, pc, #44	; (adr r3, 1e60 <ull_slave_done+0x60>)
    1e32:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e36:	fba0 0105 	umull	r0, r1, r0, r5
    1e3a:	f7fe f951 	bl	e0 <__aeabi_uldivmod>
    1e3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1e42:	f8c8 0000 	str.w	r0, [r8]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1e4a:	fba7 0105 	umull	r0, r1, r7, r5
    1e4e:	f7fe f947 	bl	e0 <__aeabi_uldivmod>
    1e52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1e56:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1e5a:	f106 0030 	add.w	r0, r6, #48	; 0x30
    1e5e:	e7e7      	b.n	1e30 <ull_slave_done+0x30>
    1e60:	1afd498d 	.word	0x1afd498d
    1e64:	00000007 	.word	0x00000007
    1e68:	3b9aca00 	.word	0x3b9aca00

00001e6c <cts_sync_service_discovered>:
    return BT_GATT_ITER_CONTINUE;
}

u8_t cts_sync_service_discovered(struct bt_conn* conn, const struct bt_gatt_attr* attr,
        struct bt_gatt_discover_params* params)
{
    1e6c:	b570      	push	{r4, r5, r6, lr}
    1e6e:	4606      	mov	r6, r0
    if (!attr) {
    1e70:	460d      	mov	r5, r1
    1e72:	b921      	cbnz	r1, 1e7e <cts_sync_service_discovered+0x12>
        printk("CTS Service Discovery completed");
    1e74:	4811      	ldr	r0, [pc, #68]	; (1ebc <cts_sync_service_discovered+0x50>)
    read_params.by_uuid.uuid = &uuid;
    read_params.by_uuid.start_handle = attr->handle;
    read_params.by_uuid.end_handle = 0xffff;
    offset = 0;
    if (bt_gatt_read(conn, &read_params) < 0) {
        printk("Could not initiate read of CCC data.");
    1e76:	f016 f95d 	bl	18134 <printk>
    }

    return BT_GATT_ITER_STOP;
}
    1e7a:	2000      	movs	r0, #0
    1e7c:	bd70      	pop	{r4, r5, r6, pc}
    memset(&read_params, 0, sizeof(read_params));
    1e7e:	4c10      	ldr	r4, [pc, #64]	; (1ec0 <cts_sync_service_discovered+0x54>)
    printk("Discovered attribute, handle: %u\n", attr->handle);
    1e80:	8a09      	ldrh	r1, [r1, #16]
    1e82:	4810      	ldr	r0, [pc, #64]	; (1ec4 <cts_sync_service_discovered+0x58>)
    1e84:	f016 f956 	bl	18134 <printk>
    memset(&read_params, 0, sizeof(read_params));
    1e88:	2210      	movs	r2, #16
    1e8a:	2100      	movs	r1, #0
    1e8c:	4620      	mov	r0, r4
    1e8e:	f016 fefe 	bl	18c8e <memset>
    read_params.func = cts_sync_read;
    1e92:	4b0d      	ldr	r3, [pc, #52]	; (1ec8 <cts_sync_service_discovered+0x5c>)
    1e94:	6023      	str	r3, [r4, #0]
    read_params.by_uuid.uuid = &uuid;
    1e96:	4b0d      	ldr	r3, [pc, #52]	; (1ecc <cts_sync_service_discovered+0x60>)
    1e98:	60e3      	str	r3, [r4, #12]
    read_params.by_uuid.start_handle = attr->handle;
    1e9a:	8a2b      	ldrh	r3, [r5, #16]
    1e9c:	8123      	strh	r3, [r4, #8]
    read_params.by_uuid.end_handle = 0xffff;
    1e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1ea2:	8163      	strh	r3, [r4, #10]
    offset = 0;
    1ea4:	4b0a      	ldr	r3, [pc, #40]	; (1ed0 <cts_sync_service_discovered+0x64>)
    1ea6:	2200      	movs	r2, #0
    if (bt_gatt_read(conn, &read_params) < 0) {
    1ea8:	4621      	mov	r1, r4
    1eaa:	4630      	mov	r0, r6
    offset = 0;
    1eac:	601a      	str	r2, [r3, #0]
    if (bt_gatt_read(conn, &read_params) < 0) {
    1eae:	f007 fc11 	bl	96d4 <bt_gatt_read>
    1eb2:	2800      	cmp	r0, #0
    1eb4:	dae1      	bge.n	1e7a <cts_sync_service_discovered+0xe>
        printk("Could not initiate read of CCC data.");
    1eb6:	4807      	ldr	r0, [pc, #28]	; (1ed4 <cts_sync_service_discovered+0x68>)
    1eb8:	e7dd      	b.n	1e76 <cts_sync_service_discovered+0xa>
    1eba:	bf00      	nop
    1ebc:	0001f169 	.word	0x0001f169
    1ec0:	20000030 	.word	0x20000030
    1ec4:	0001f189 	.word	0x0001f189
    1ec8:	00001f31 	.word	0x00001f31
    1ecc:	20005cfc 	.word	0x20005cfc
    1ed0:	2000002c 	.word	0x2000002c
    1ed4:	0001f1ab 	.word	0x0001f1ab

00001ed8 <cts_sync_processor>:
 //#define BT_UUID_CTS                       BT_UUID_DECLARE_16(0x1805)
 //#define BT_UUID_CTS_CURRENT_TIME          BT_UUID_DECLARE_16(0x2a2b)


static void cts_sync_processor(struct bt_conn *conn, void *data)
{
    1ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    memcpy(&uuid, BT_UUID_CTS_CURRENT_TIME, sizeof(uuid));
    1eda:	4c11      	ldr	r4, [pc, #68]	; (1f20 <cts_sync_processor+0x48>)
    1edc:	2300      	movs	r3, #0
    1ede:	2204      	movs	r2, #4
{
    1ee0:	4605      	mov	r5, r0
    memcpy(&uuid, BT_UUID_CTS_CURRENT_TIME, sizeof(uuid));
    1ee2:	f88d 3004 	strb.w	r3, [sp, #4]
    1ee6:	eb0d 0102 	add.w	r1, sp, r2
    1eea:	f642 232b 	movw	r3, #10795	; 0x2a2b
    1eee:	4620      	mov	r0, r4
    1ef0:	f8ad 3006 	strh.w	r3, [sp, #6]
    1ef4:	f016 fea1 	bl	18c3a <memcpy>
    cts_discovery_params.func = cts_sync_service_discovered;
    1ef8:	490a      	ldr	r1, [pc, #40]	; (1f24 <cts_sync_processor+0x4c>)
    1efa:	4b0b      	ldr	r3, [pc, #44]	; (1f28 <cts_sync_processor+0x50>)
    1efc:	604b      	str	r3, [r1, #4]
    cts_discovery_params.start_handle = 0x0001;
    1efe:	2301      	movs	r3, #1
    1f00:	810b      	strh	r3, [r1, #8]
    cts_discovery_params.end_handle = 0xFFFF;
    1f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1f06:	81cb      	strh	r3, [r1, #14]
    cts_discovery_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
    cts_discovery_params.uuid = &uuid;

    if (bt_gatt_discover(conn, &cts_discovery_params) != 0) {
    1f08:	4628      	mov	r0, r5
    cts_discovery_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
    1f0a:	2303      	movs	r3, #3
    1f0c:	740b      	strb	r3, [r1, #16]
    cts_discovery_params.uuid = &uuid;
    1f0e:	600c      	str	r4, [r1, #0]
    if (bt_gatt_discover(conn, &cts_discovery_params) != 0) {
    1f10:	f007 f82a 	bl	8f68 <bt_gatt_discover>
    1f14:	b110      	cbz	r0, 1f1c <cts_sync_processor+0x44>
        printk("CTS Sync > GATT discovery FAILED.\n");
    1f16:	4805      	ldr	r0, [pc, #20]	; (1f2c <cts_sync_processor+0x54>)
    1f18:	f016 f90c 	bl	18134 <printk>
    }
}
    1f1c:	b003      	add	sp, #12
    1f1e:	bd30      	pop	{r4, r5, pc}
    1f20:	20005cfc 	.word	0x20005cfc
    1f24:	20000018 	.word	0x20000018
    1f28:	00001e6d 	.word	0x00001e6d
    1f2c:	0001f0c6 	.word	0x0001f0c6

00001f30 <cts_sync_read>:
{
    1f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    printk("Reading CCC data: err %d, %d bytes, offset %d.", err, length, offset);
    1f32:	4d1d      	ldr	r5, [pc, #116]	; (1fa8 <cts_sync_read+0x78>)
{
    1f34:	f8bd 6020 	ldrh.w	r6, [sp, #32]
    printk("Reading CCC data: err %d, %d bytes, offset %d.", err, length, offset);
    1f38:	481c      	ldr	r0, [pc, #112]	; (1fac <cts_sync_read+0x7c>)
    1f3a:	4c1d      	ldr	r4, [pc, #116]	; (1fb0 <cts_sync_read+0x80>)
{
    1f3c:	461f      	mov	r7, r3
    printk("Reading CCC data: err %d, %d bytes, offset %d.", err, length, offset);
    1f3e:	4632      	mov	r2, r6
    1f40:	682b      	ldr	r3, [r5, #0]
    1f42:	f016 f8f7 	bl	18134 <printk>
    if (!data || length <= 0) {
    1f46:	b107      	cbz	r7, 1f4a <cts_sync_read+0x1a>
    1f48:	bb06      	cbnz	r6, 1f8c <cts_sync_read+0x5c>
    printk("CTS sync to clock started.\n Y%04d D%03d T%2d:%2d:%2d",
    1f4a:	79a3      	ldrb	r3, [r4, #6]
    memset(&clock_datetime, 0, sizeof(cts_datetime_t));
    1f4c:	4d19      	ldr	r5, [pc, #100]	; (1fb4 <cts_sync_read+0x84>)
    printk("CTS sync to clock started.\n Y%04d D%03d T%2d:%2d:%2d",
    1f4e:	9301      	str	r3, [sp, #4]
    1f50:	7963      	ldrb	r3, [r4, #5]
    1f52:	9300      	str	r3, [sp, #0]
    1f54:	78e2      	ldrb	r2, [r4, #3]
    1f56:	7923      	ldrb	r3, [r4, #4]
    1f58:	8821      	ldrh	r1, [r4, #0]
    1f5a:	4817      	ldr	r0, [pc, #92]	; (1fb8 <cts_sync_read+0x88>)
    1f5c:	f016 f8ea 	bl	18134 <printk>
    memset(&clock_datetime, 0, sizeof(cts_datetime_t));
    1f60:	220a      	movs	r2, #10
    1f62:	2100      	movs	r1, #0
    1f64:	4628      	mov	r0, r5
    1f66:	f016 fe92 	bl	18c8e <memset>
    clock_datetime.year = cts_datetime->year;
    1f6a:	8822      	ldrh	r2, [r4, #0]
    1f6c:	802a      	strh	r2, [r5, #0]
    clock_datetime.month = cts_datetime->month;
    1f6e:	8862      	ldrh	r2, [r4, #2]
    1f70:	806a      	strh	r2, [r5, #2]
    clock_datetime.hours = cts_datetime->hours;
    1f72:	88a2      	ldrh	r2, [r4, #4]
    clock_datetime.seconds = cts_datetime->seconds;
    1f74:	79a3      	ldrb	r3, [r4, #6]
    clock_datetime.hours = cts_datetime->hours;
    1f76:	80aa      	strh	r2, [r5, #4]
    printk("CTS sync to clock complete.");
    1f78:	4810      	ldr	r0, [pc, #64]	; (1fbc <cts_sync_read+0x8c>)
    clock_datetime.seconds = cts_datetime->seconds;
    1f7a:	71ab      	strb	r3, [r5, #6]
    printk("CTS sync to clock complete.");
    1f7c:	f016 f8da 	bl	18134 <printk>
    time_sync_timeout = TIME_SYNC_WAIT;
    1f80:	4b0f      	ldr	r3, [pc, #60]	; (1fc0 <cts_sync_read+0x90>)
    1f82:	223c      	movs	r2, #60	; 0x3c
    1f84:	601a      	str	r2, [r3, #0]
        return BT_GATT_ITER_STOP;
    1f86:	2000      	movs	r0, #0
}
    1f88:	b003      	add	sp, #12
    1f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy(&datetime_buf + offset, data, length);
    1f8c:	682b      	ldr	r3, [r5, #0]
    1f8e:	200a      	movs	r0, #10
    1f90:	4632      	mov	r2, r6
    1f92:	fb00 4003 	mla	r0, r0, r3, r4
    1f96:	4639      	mov	r1, r7
    1f98:	f016 fe4f 	bl	18c3a <memcpy>
    offset += length;
    1f9c:	682b      	ldr	r3, [r5, #0]
    1f9e:	441e      	add	r6, r3
    1fa0:	602e      	str	r6, [r5, #0]
    return BT_GATT_ITER_CONTINUE;
    1fa2:	2001      	movs	r0, #1
    1fa4:	e7f0      	b.n	1f88 <cts_sync_read+0x58>
    1fa6:	bf00      	nop
    1fa8:	2000002c 	.word	0x2000002c
    1fac:	0001f0e9 	.word	0x0001f0e9
    1fb0:	20005cf2 	.word	0x20005cf2
    1fb4:	20005ce8 	.word	0x20005ce8
    1fb8:	0001f118 	.word	0x0001f118
    1fbc:	0001f14d 	.word	0x0001f14d
    1fc0:	2000cb84 	.word	0x2000cb84

00001fc4 <cts_get_datetime>:
	cts_time->hours=clock_datetime.hours;
    1fc4:	4b03      	ldr	r3, [pc, #12]	; (1fd4 <cts_get_datetime+0x10>)
    1fc6:	791a      	ldrb	r2, [r3, #4]
    1fc8:	7102      	strb	r2, [r0, #4]
	cts_time->minutes=clock_datetime.minutes;
    1fca:	795a      	ldrb	r2, [r3, #5]
    1fcc:	7142      	strb	r2, [r0, #5]
	cts_time->seconds=clock_datetime.seconds;
    1fce:	799b      	ldrb	r3, [r3, #6]
    1fd0:	7183      	strb	r3, [r0, #6]
}
    1fd2:	4770      	bx	lr
    1fd4:	20005ce8 	.word	0x20005ce8

00001fd8 <cts_sync_init>:
	.connected = connected,
	.disconnected = disconnected,
};

void cts_sync_init()
{
    1fd8:	b508      	push	{r3, lr}
    bt_conn_cb_register(&conn_callbacks);
    1fda:	4805      	ldr	r0, [pc, #20]	; (1ff0 <cts_sync_init+0x18>)
    1fdc:	f004 fc4e 	bl	687c <bt_conn_cb_register>
	clock_datetime.hours=12;
    1fe0:	4b04      	ldr	r3, [pc, #16]	; (1ff4 <cts_sync_init+0x1c>)
    1fe2:	f640 520c 	movw	r2, #3340	; 0xd0c
    1fe6:	809a      	strh	r2, [r3, #4]
	clock_datetime.seconds=14;
    1fe8:	220e      	movs	r2, #14
    1fea:	719a      	strb	r2, [r3, #6]
 //   cts_register_write_cb(cts_write_cb);
   sync_local_cts_to_clock();
}
    1fec:	bd08      	pop	{r3, pc}
    1fee:	bf00      	nop
    1ff0:	2000cb70 	.word	0x2000cb70
    1ff4:	20005ce8 	.word	0x20005ce8

00001ff8 <cts_sync_loop>:

void cts_sync_loop()
{
    1ff8:	b510      	push	{r4, lr}
    if (time_sync_timeout > 0) {
    1ffa:	4c07      	ldr	r4, [pc, #28]	; (2018 <cts_sync_loop+0x20>)
    1ffc:	6823      	ldr	r3, [r4, #0]
    1ffe:	2b00      	cmp	r3, #0
    2000:	dd02      	ble.n	2008 <cts_sync_loop+0x10>
        time_sync_timeout--;
    2002:	3b01      	subs	r3, #1
    } else {
        bt_conn_foreach(BT_CONN_TYPE_ALL, cts_sync_processor, NULL);
        time_sync_timeout = TIME_SYNC_WAIT;
    2004:	6023      	str	r3, [r4, #0]
    }
}
    2006:	bd10      	pop	{r4, pc}
        bt_conn_foreach(BT_CONN_TYPE_ALL, cts_sync_processor, NULL);
    2008:	2200      	movs	r2, #0
    200a:	4904      	ldr	r1, [pc, #16]	; (201c <cts_sync_loop+0x24>)
    200c:	2007      	movs	r0, #7
    200e:	f004 ff03 	bl	6e18 <bt_conn_foreach>
        time_sync_timeout = TIME_SYNC_WAIT;
    2012:	233c      	movs	r3, #60	; 0x3c
    2014:	e7f6      	b.n	2004 <cts_sync_loop+0xc>
    2016:	bf00      	nop
    2018:	2000cb84 	.word	0x2000cb84
    201c:	00001ed9 	.word	0x00001ed9

00002020 <init_clock>:
  */
cts_datetime_t pinetime_datetime;

void init_clock(cts_datetime_t* datetime)
{
	pinetime_datetime.hours=datetime->hours;
    2020:	4b06      	ldr	r3, [pc, #24]	; (203c <init_clock+0x1c>)
    2022:	7902      	ldrb	r2, [r0, #4]
    2024:	711a      	strb	r2, [r3, #4]
	pinetime_datetime.minutes=datetime->minutes;
    2026:	7942      	ldrb	r2, [r0, #5]
    2028:	715a      	strb	r2, [r3, #5]
	pinetime_datetime.seconds=datetime->seconds;
    202a:	7982      	ldrb	r2, [r0, #6]
    202c:	719a      	strb	r2, [r3, #6]
	pinetime_datetime.day=datetime->day;
    202e:	78c2      	ldrb	r2, [r0, #3]
    2030:	70da      	strb	r2, [r3, #3]
	pinetime_datetime.month=datetime->month;
    2032:	7882      	ldrb	r2, [r0, #2]
    2034:	709a      	strb	r2, [r3, #2]
	pinetime_datetime.year=datetime->year;
    2036:	8802      	ldrh	r2, [r0, #0]
    2038:	801a      	strh	r2, [r3, #0]

	//	LOG_INF("Local clock set to: %02d:%02d:%02d, %04d-%02d-%02d\n",
	//			datetime->hours, datetime->minutes, datetime->seconds,
	//			datetime->year, datetime->month, datetime->day);
}
    203a:	4770      	bx	lr
    203c:	20005d00 	.word	0x20005d00

00002040 <main>:
}



void main(void)
{
    2040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;
	struct device *counter_dev;

	err = bt_enable(NULL);
    2044:	2000      	movs	r0, #0
{
    2046:	b08d      	sub	sp, #52	; 0x34
	err = bt_enable(NULL);
    2048:	f003 ff52 	bl	5ef0 <bt_enable>
	if (err) {
    204c:	4d64      	ldr	r5, [pc, #400]	; (21e0 <main+0x1a0>)
    204e:	4604      	mov	r4, r0
    2050:	b140      	cbz	r0, 2064 <main+0x24>
		printk("Bluetooth init failed (err %d)\n", err);
    2052:	4601      	mov	r1, r0
    2054:	4863      	ldr	r0, [pc, #396]	; (21e4 <main+0x1a4>)
    2056:	f016 f86d 	bl	18134 <printk>
		MY_REGISTER1=0xb9;
    205a:	23b9      	movs	r3, #185	; 0xb9
    205c:	702b      	strb	r3, [r5, #0]
		cts_sync_loop();  //todo this should be activated by button or something - not looped
		//		MY_REGISTER1=0x05;
		cts_get_datetime(&pinetime_datetime);
		//MY_REGISTER1=0x06;
	}
}
    205e:	b00d      	add	sp, #52	; 0x34
    2060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	printk("Bluetooth initialized\n");
    2064:	4860      	ldr	r0, [pc, #384]	; (21e8 <main+0x1a8>)
    2066:	f016 f865 	bl	18134 <printk>
	MY_REGISTER1=0xb1;
    206a:	23b1      	movs	r3, #177	; 0xb1
    206c:	702b      	strb	r3, [r5, #0]
	printk("bt_le_adv_start\n");
    206e:	485f      	ldr	r0, [pc, #380]	; (21ec <main+0x1ac>)
    2070:	f016 f860 	bl	18134 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2074:	2309      	movs	r3, #9
    2076:	f8ad 4010 	strh.w	r4, [sp, #16]
    207a:	f88d 3011 	strb.w	r3, [sp, #17]
    207e:	23a0      	movs	r3, #160	; 0xa0
    2080:	f8ad 3012 	strh.w	r3, [sp, #18]
    2084:	23f0      	movs	r3, #240	; 0xf0
    2086:	f8ad 3014 	strh.w	r3, [sp, #20]
    208a:	4959      	ldr	r1, [pc, #356]	; (21f0 <main+0x1b0>)
    208c:	9400      	str	r4, [sp, #0]
    208e:	4623      	mov	r3, r4
    2090:	2203      	movs	r2, #3
    2092:	a804      	add	r0, sp, #16
    2094:	f017 f911 	bl	192ba <bt_le_adv_start>
	if (err) {
    2098:	4601      	mov	r1, r0
    209a:	b328      	cbz	r0, 20e8 <main+0xa8>
		MY_REGISTER1=0xb3;
    209c:	23b3      	movs	r3, #179	; 0xb3
    209e:	702b      	strb	r3, [r5, #0]
		printk("Advertising failed to start (err %d)\n", err);
    20a0:	4854      	ldr	r0, [pc, #336]	; (21f4 <main+0x1b4>)
    20a2:	f016 f847 	bl	18134 <printk>
	cts_sync_init();
    20a6:	f7ff ff97 	bl	1fd8 <cts_sync_init>
	cts_get_datetime(&pinetime_datetime); //this already should get dummy value to show on screen
    20aa:	4853      	ldr	r0, [pc, #332]	; (21f8 <main+0x1b8>)
    20ac:	f7ff ff8a 	bl	1fc4 <cts_get_datetime>
	char count_str[11] = {0};
    20b0:	2400      	movs	r4, #0
	init_clock(&localtime);
    20b2:	a806      	add	r0, sp, #24
    20b4:	f7ff ffb4 	bl	2020 <init_clock>
	char count_str[11] = {0};
    20b8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    20bc:	f8cd 402b 	str.w	r4, [sp, #43]	; 0x2b
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    20c0:	484e      	ldr	r0, [pc, #312]	; (21fc <main+0x1bc>)
    20c2:	f014 fb87 	bl	167d4 <z_impl_device_get_binding>
	if (display_dev == NULL) {
    20c6:	4605      	mov	r5, r0
    20c8:	b9a0      	cbnz	r0, 20f4 <main+0xb4>
		LOG_ERR("device not found.  Aborting test.");
    20ca:	2301      	movs	r3, #1
    20cc:	f04f 0100 	mov.w	r1, #0
    20d0:	f363 0107 	bfi	r1, r3, #0, #8
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    20d4:	4a4a      	ldr	r2, [pc, #296]	; (2200 <main+0x1c0>)
    20d6:	4b4b      	ldr	r3, [pc, #300]	; (2204 <main+0x1c4>)
    20d8:	484b      	ldr	r0, [pc, #300]	; (2208 <main+0x1c8>)
    20da:	1a9b      	subs	r3, r3, r2
    20dc:	08db      	lsrs	r3, r3, #3
    20de:	f363 118f 	bfi	r1, r3, #6, #10
    20e2:	f016 fa75 	bl	185d0 <log_0>
		return;
    20e6:	e7ba      	b.n	205e <main+0x1e>
	MY_REGISTER1=0xb4;
    20e8:	23b4      	movs	r3, #180	; 0xb4
    20ea:	702b      	strb	r3, [r5, #0]
	printk("Advertising successfully started\n");
    20ec:	4847      	ldr	r0, [pc, #284]	; (220c <main+0x1cc>)
    20ee:	f016 f821 	bl	18134 <printk>
    20f2:	e7d8      	b.n	20a6 <main+0x66>
    20f4:	4846      	ldr	r0, [pc, #280]	; (2210 <main+0x1d0>)
    20f6:	f014 fb6d 	bl	167d4 <z_impl_device_get_binding>
    20fa:	4606      	mov	r6, r0
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    20fc:	6843      	ldr	r3, [r0, #4]
    20fe:	2216      	movs	r2, #22
    2100:	681f      	ldr	r7, [r3, #0]
    2102:	4621      	mov	r1, r4
    2104:	2301      	movs	r3, #1
    2106:	47b8      	blx	r7
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    2108:	6873      	ldr	r3, [r6, #4]
		sprintf(snum, "%2d:%2d:%2d", pinetime_datetime.hours, pinetime_datetime.minutes,pinetime_datetime.seconds); 
    210a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 221c <main+0x1dc>
    210e:	685f      	ldr	r7, [r3, #4]
		lv_label_set_text(clock_label, "#00ffff"); 
    2110:	f8df 910c 	ldr.w	r9, [pc, #268]	; 2220 <main+0x1e0>
    2114:	4623      	mov	r3, r4
    2116:	2216      	movs	r2, #22
    2118:	4621      	mov	r1, r4
    211a:	4630      	mov	r0, r6
    211c:	47b8      	blx	r7
	lv_obj_t *scr = lv_scr_act();
    211e:	f015 fcc8 	bl	17ab2 <lv_scr_act>
	hello_world_label = lv_label_create(lv_scr_act(), NULL);
    2122:	f015 fcc6 	bl	17ab2 <lv_scr_act>
    2126:	4621      	mov	r1, r4
    2128:	f014 f814 	bl	16154 <lv_label_create>
	lv_label_set_long_mode(hello_world_label, LV_LABEL_LONG_BREAK);     //Break the long lines
    212c:	2101      	movs	r1, #1
	hello_world_label = lv_label_create(lv_scr_act(), NULL);
    212e:	4606      	mov	r6, r0
	lv_label_set_long_mode(hello_world_label, LV_LABEL_LONG_BREAK);     //Break the long lines
    2130:	f01b fbc3 	bl	1d8ba <lv_label_set_long_mode>
	lv_label_set_recolor(hello_world_label, true);                      //Enable re-coloring by commands in the text
    2134:	4630      	mov	r0, r6
    2136:	2101      	movs	r1, #1
    2138:	f01b fbe6 	bl	1d908 <lv_label_set_recolor>
	lv_obj_set_width(hello_world_label, 240);
    213c:	4630      	mov	r0, r6
    213e:	21f0      	movs	r1, #240	; 0xf0
    2140:	f019 fc44 	bl	1b9cc <lv_obj_set_width>
	lv_label_set_text(hello_world_label, "#00ffff Open Source Watch"); //recoloring should be blue ...
    2144:	4933      	ldr	r1, [pc, #204]	; (2214 <main+0x1d4>)
    2146:	4630      	mov	r0, r6
    2148:	f01b fb62 	bl	1d810 <lv_label_set_text>
	count_label = lv_label_create(lv_scr_act(), NULL);
    214c:	f015 fcb1 	bl	17ab2 <lv_scr_act>
    2150:	4621      	mov	r1, r4
    2152:	f013 ffff 	bl	16154 <lv_label_create>
    2156:	4607      	mov	r7, r0
	clock_label = lv_label_create(lv_scr_act(), NULL);
    2158:	f015 fcab 	bl	17ab2 <lv_scr_act>
    215c:	4621      	mov	r1, r4
    215e:	f013 fff9 	bl	16154 <lv_label_create>
	lv_obj_align(count_label, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
    2162:	4623      	mov	r3, r4
	clock_label = lv_label_create(lv_scr_act(), NULL);
    2164:	4606      	mov	r6, r0
	lv_obj_align(count_label, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
    2166:	2205      	movs	r2, #5
    2168:	4621      	mov	r1, r4
    216a:	4638      	mov	r0, r7
    216c:	9400      	str	r4, [sp, #0]
    216e:	f019 fc81 	bl	1ba74 <lv_obj_align>
	lv_obj_align(clock_label, NULL, LV_ALIGN_CENTER, 0, 0);
    2172:	4623      	mov	r3, r4
    2174:	4622      	mov	r2, r4
    2176:	4621      	mov	r1, r4
    2178:	4630      	mov	r0, r6
    217a:	9400      	str	r4, [sp, #0]
    217c:	f019 fc7a 	bl	1ba74 <lv_obj_align>
static inline int display_blanking_off(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->driver_api;

	return api->blanking_off(dev);
    2180:	686b      	ldr	r3, [r5, #4]
    2182:	4628      	mov	r0, r5
    2184:	685b      	ldr	r3, [r3, #4]
		sprintf(snum, "%2d:%2d:%2d", pinetime_datetime.hours, pinetime_datetime.minutes,pinetime_datetime.seconds); 
    2186:	4d1c      	ldr	r5, [pc, #112]	; (21f8 <main+0x1b8>)
    2188:	4798      	blx	r3
    218a:	79ab      	ldrb	r3, [r5, #6]
    218c:	9300      	str	r3, [sp, #0]
    218e:	796b      	ldrb	r3, [r5, #5]
    2190:	792a      	ldrb	r2, [r5, #4]
    2192:	4641      	mov	r1, r8
    2194:	a803      	add	r0, sp, #12
    2196:	f002 f945 	bl	4424 <sprintf>
		lv_label_set_text(clock_label, "#00ffff"); 
    219a:	4649      	mov	r1, r9
    219c:	4630      	mov	r0, r6
    219e:	f01b fb37 	bl	1d810 <lv_label_set_text>
		lv_label_set_text(clock_label, snum); 
    21a2:	a903      	add	r1, sp, #12
    21a4:	4630      	mov	r0, r6
    21a6:	f01b fb33 	bl	1d810 <lv_label_set_text>
		if ((count % 100) == 0U) {
    21aa:	2364      	movs	r3, #100	; 0x64
    21ac:	fbb4 f2f3 	udiv	r2, r4, r3
    21b0:	fb03 4312 	mls	r3, r3, r2, r4
    21b4:	b93b      	cbnz	r3, 21c6 <main+0x186>
			sprintf(count_str, "%d", count/100U);
    21b6:	4918      	ldr	r1, [pc, #96]	; (2218 <main+0x1d8>)
    21b8:	a809      	add	r0, sp, #36	; 0x24
    21ba:	f002 f933 	bl	4424 <sprintf>
			lv_label_set_text(count_label, count_str);
    21be:	a909      	add	r1, sp, #36	; 0x24
    21c0:	4638      	mov	r0, r7
    21c2:	f01b fb25 	bl	1d810 <lv_label_set_text>
		lv_task_handler();
    21c6:	f013 faaf 	bl	15728 <lv_task_handler>
	return z_impl_k_sleep(ms);
    21ca:	200a      	movs	r0, #10
    21cc:	f015 f88a 	bl	172e4 <z_impl_k_sleep>
		cts_sync_loop();  //todo this should be activated by button or something - not looped
    21d0:	f7ff ff12 	bl	1ff8 <cts_sync_loop>
		cts_get_datetime(&pinetime_datetime);
    21d4:	4628      	mov	r0, r5
		++count;
    21d6:	3401      	adds	r4, #1
		cts_get_datetime(&pinetime_datetime);
    21d8:	f7ff fef4 	bl	1fc4 <cts_get_datetime>
		sprintf(snum, "%2d:%2d:%2d", pinetime_datetime.hours, pinetime_datetime.minutes,pinetime_datetime.seconds); 
    21dc:	e7d5      	b.n	218a <main+0x14a>
    21de:	bf00      	nop
    21e0:	2000f000 	.word	0x2000f000
    21e4:	0001f1d0 	.word	0x0001f1d0
    21e8:	0001f1f0 	.word	0x0001f1f0
    21ec:	0001f207 	.word	0x0001f207
    21f0:	0001e608 	.word	0x0001e608
    21f4:	0001f218 	.word	0x0001f218
    21f8:	20005d00 	.word	0x20005d00
    21fc:	0001f260 	.word	0x0001f260
    2200:	0001e448 	.word	0x0001e448
    2204:	0001e448 	.word	0x0001e448
    2208:	0001f268 	.word	0x0001f268
    220c:	0001f23e 	.word	0x0001f23e
    2210:	0001f28a 	.word	0x0001f28a
    2214:	0001f291 	.word	0x0001f291
    2218:	0002061b 	.word	0x0002061b
    221c:	0001f141 	.word	0x0001f141
    2220:	0001f2ab 	.word	0x0001f2ab

00002224 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2224:	680b      	ldr	r3, [r1, #0]
    2226:	3301      	adds	r3, #1
    2228:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    222a:	4b01      	ldr	r3, [pc, #4]	; (2230 <char_out+0xc>)
    222c:	681b      	ldr	r3, [r3, #0]
    222e:	4718      	bx	r3
    2230:	2000cb88 	.word	0x2000cb88

00002234 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2238:	b085      	sub	sp, #20
    223a:	469b      	mov	fp, r3
    223c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    223e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 22c8 <_printk_dec_ulong+0x94>
    2242:	2c01      	cmp	r4, #1
    2244:	bfb8      	it	lt
    2246:	2401      	movlt	r4, #1
    2248:	2b01      	cmp	r3, #1
    224a:	bf0c      	ite	eq
    224c:	2330      	moveq	r3, #48	; 0x30
    224e:	2320      	movne	r3, #32
    2250:	4616      	mov	r6, r2
    2252:	4682      	mov	sl, r0
    2254:	4688      	mov	r8, r1
    2256:	9302      	str	r3, [sp, #8]
    2258:	2501      	movs	r5, #1
    225a:	270a      	movs	r7, #10
    225c:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    225e:	fbb6 f3f9 	udiv	r3, r6, r9
    2262:	9301      	str	r3, [sp, #4]
    2264:	b90a      	cbnz	r2, 226a <_printk_dec_ulong+0x36>
    2266:	45b1      	cmp	r9, r6
    2268:	d81d      	bhi.n	22a6 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    226a:	9b01      	ldr	r3, [sp, #4]
    226c:	4641      	mov	r1, r8
    226e:	f103 0030 	add.w	r0, r3, #48	; 0x30
    2272:	47d0      	blx	sl
			digits++;
    2274:	3501      	adds	r5, #1
			found_largest_digit = 1;
    2276:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    2278:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    227a:	3f01      	subs	r7, #1
	while (pos >= 10) {
    227c:	2f01      	cmp	r7, #1
		remainder %= pos;
    227e:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    2282:	f04f 030a 	mov.w	r3, #10
    2286:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    228a:	d1e8      	bne.n	225e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    228c:	4641      	mov	r1, r8
    228e:	f106 0030 	add.w	r0, r6, #48	; 0x30
    2292:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2294:	f1bb 0f03 	cmp.w	fp, #3
    2298:	d102      	bne.n	22a0 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
    229a:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    229c:	2c00      	cmp	r4, #0
    229e:	dc0e      	bgt.n	22be <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
    22a0:	b005      	add	sp, #20
    22a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    22a6:	42bc      	cmp	r4, r7
    22a8:	dbe6      	blt.n	2278 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    22aa:	f1bb 0f02 	cmp.w	fp, #2
    22ae:	d8e3      	bhi.n	2278 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    22b0:	4641      	mov	r1, r8
    22b2:	9802      	ldr	r0, [sp, #8]
    22b4:	9203      	str	r2, [sp, #12]
			digits++;
    22b6:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    22b8:	47d0      	blx	sl
			digits++;
    22ba:	9a03      	ldr	r2, [sp, #12]
    22bc:	e7dc      	b.n	2278 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    22be:	4641      	mov	r1, r8
    22c0:	2020      	movs	r0, #32
    22c2:	47d0      	blx	sl
    22c4:	3c01      	subs	r4, #1
    22c6:	e7e9      	b.n	229c <_printk_dec_ulong+0x68>
    22c8:	3b9aca00 	.word	0x3b9aca00

000022cc <vprintk>:
{
    22cc:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    22ce:	2300      	movs	r3, #0
    22d0:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    22d2:	4602      	mov	r2, r0
    22d4:	460b      	mov	r3, r1
    22d6:	4803      	ldr	r0, [pc, #12]	; (22e4 <vprintk+0x18>)
    22d8:	a901      	add	r1, sp, #4
    22da:	f015 fdbb 	bl	17e54 <z_vprintk>
}
    22de:	b003      	add	sp, #12
    22e0:	f85d fb04 	ldr.w	pc, [sp], #4
    22e4:	00002225 	.word	0x00002225

000022e8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    22e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    22ea:	4e28      	ldr	r6, [pc, #160]	; (238c <tc_aes128_set_encrypt_key+0xa4>)
{
    22ec:	4607      	mov	r7, r0
    22ee:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    22f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    22f2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    22f4:	ad01      	add	r5, sp, #4
    22f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    22f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    22fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    22fc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2300:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2304:	2f00      	cmp	r7, #0
    2306:	d03c      	beq.n	2382 <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    2308:	2c00      	cmp	r4, #0
    230a:	d03c      	beq.n	2386 <tc_aes128_set_encrypt_key+0x9e>
    230c:	1f38      	subs	r0, r7, #4
    230e:	4621      	mov	r1, r4
    2310:	4602      	mov	r2, r0
    2312:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2314:	784b      	ldrb	r3, [r1, #1]
    2316:	780d      	ldrb	r5, [r1, #0]
    2318:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    231a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    231e:	78cd      	ldrb	r5, [r1, #3]
    2320:	432b      	orrs	r3, r5
    2322:	788d      	ldrb	r5, [r1, #2]
    2324:	3104      	adds	r1, #4
    2326:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    232a:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    232c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    2330:	d1f0      	bne.n	2314 <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2332:	4c17      	ldr	r4, [pc, #92]	; (2390 <tc_aes128_set_encrypt_key+0xa8>)
    2334:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    2336:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    2338:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    233a:	d118      	bne.n	236e <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    233c:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2340:	0e1a      	lsrs	r2, r3, #24
    2342:	5ca5      	ldrb	r5, [r4, r2]
    2344:	b2da      	uxtb	r2, r3
    2346:	5ca2      	ldrb	r2, [r4, r2]
    2348:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    234c:	f3c3 4507 	ubfx	r5, r3, #16, #8
    2350:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2354:	5d65      	ldrb	r5, [r4, r5]
    2356:	5ce3      	ldrb	r3, [r4, r3]
    2358:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    235c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2360:	ad0c      	add	r5, sp, #48	; 0x30
    2362:	f021 0303 	bic.w	r3, r1, #3
    2366:	442b      	add	r3, r5
    2368:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    236c:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    236e:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    2372:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    2374:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    2376:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    2378:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    237a:	d1dc      	bne.n	2336 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    237c:	2001      	movs	r0, #1
}
    237e:	b00d      	add	sp, #52	; 0x34
    2380:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2382:	4638      	mov	r0, r7
    2384:	e7fb      	b.n	237e <tc_aes128_set_encrypt_key+0x96>
    2386:	4620      	mov	r0, r4
    2388:	e7f9      	b.n	237e <tc_aes128_set_encrypt_key+0x96>
    238a:	bf00      	nop
    238c:	0001e580 	.word	0x0001e580
    2390:	0001f2b7 	.word	0x0001f2b7

00002394 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    2394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2398:	4615      	mov	r5, r2
    239a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    239c:	4607      	mov	r7, r0
    239e:	2800      	cmp	r0, #0
    23a0:	d059      	beq.n	2456 <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    23a2:	2900      	cmp	r1, #0
    23a4:	d05a      	beq.n	245c <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    23a6:	2a00      	cmp	r2, #0
    23a8:	d05a      	beq.n	2460 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    23aa:	2310      	movs	r3, #16
    23ac:	460a      	mov	r2, r1
    23ae:	4668      	mov	r0, sp
    23b0:	4619      	mov	r1, r3
    23b2:	f015 fef6 	bl	181a2 <_copy>
	add_round_key(state, s->words);
    23b6:	4629      	mov	r1, r5
    23b8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    23ba:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2464 <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    23be:	f015 ff08 	bl	181d2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    23c2:	f105 0610 	add.w	r6, r5, #16
    23c6:	46c8      	mov	r8, r9
    23c8:	35a0      	adds	r5, #160	; 0xa0
    23ca:	466c      	mov	r4, sp
{
    23cc:	466a      	mov	r2, sp
    23ce:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    23d0:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    23d2:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    23d4:	f819 1001 	ldrb.w	r1, [r9, r1]
    23d8:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    23dc:	d1f8      	bne.n	23d0 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    23de:	4668      	mov	r0, sp
    23e0:	f015 ff3c 	bl	1825c <shift_rows>
	mult_row_column(t, s);
    23e4:	4669      	mov	r1, sp
    23e6:	a804      	add	r0, sp, #16
    23e8:	f015 ff71 	bl	182ce <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    23ec:	a901      	add	r1, sp, #4
    23ee:	a805      	add	r0, sp, #20
    23f0:	f015 ff6d 	bl	182ce <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    23f4:	a902      	add	r1, sp, #8
    23f6:	a806      	add	r0, sp, #24
    23f8:	f015 ff69 	bl	182ce <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    23fc:	a903      	add	r1, sp, #12
    23fe:	a807      	add	r0, sp, #28
    2400:	f015 ff65 	bl	182ce <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2404:	2310      	movs	r3, #16
    2406:	4619      	mov	r1, r3
    2408:	eb0d 0203 	add.w	r2, sp, r3
    240c:	4668      	mov	r0, sp
    240e:	f015 fec8 	bl	181a2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    2412:	4631      	mov	r1, r6
    2414:	4668      	mov	r0, sp
    2416:	3610      	adds	r6, #16
    2418:	f015 fedb 	bl	181d2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    241c:	42ae      	cmp	r6, r5
    241e:	d1d4      	bne.n	23ca <tc_aes_encrypt+0x36>
    2420:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    2422:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    2424:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    2426:	f818 3003 	ldrb.w	r3, [r8, r3]
    242a:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    242e:	d1f8      	bne.n	2422 <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    2430:	4668      	mov	r0, sp
    2432:	f015 ff13 	bl	1825c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    2436:	4629      	mov	r1, r5
    2438:	4668      	mov	r0, sp
    243a:	f015 feca 	bl	181d2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    243e:	2310      	movs	r3, #16
    2440:	4619      	mov	r1, r3
    2442:	466a      	mov	r2, sp
    2444:	4638      	mov	r0, r7
    2446:	f015 feac 	bl	181a2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    244a:	4668      	mov	r0, sp
    244c:	2210      	movs	r2, #16
    244e:	4631      	mov	r1, r6
    2450:	f015 feb4 	bl	181bc <_set>

	return TC_CRYPTO_SUCCESS;
    2454:	2001      	movs	r0, #1
}
    2456:	b009      	add	sp, #36	; 0x24
    2458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    245c:	4608      	mov	r0, r1
    245e:	e7fa      	b.n	2456 <tc_aes_encrypt+0xc2>
    2460:	4610      	mov	r0, r2
    2462:	e7f8      	b.n	2456 <tc_aes_encrypt+0xc2>
    2464:	0001f2b7 	.word	0x0001f2b7

00002468 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    2468:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    246a:	2200      	movs	r2, #0
{
    246c:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    246e:	490d      	ldr	r1, [pc, #52]	; (24a4 <enable_logger+0x3c>)
    2470:	480d      	ldr	r0, [pc, #52]	; (24a8 <enable_logger+0x40>)
    2472:	f01b fda3 	bl	1dfbc <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2476:	4d0d      	ldr	r5, [pc, #52]	; (24ac <enable_logger+0x44>)
    2478:	490d      	ldr	r1, [pc, #52]	; (24b0 <enable_logger+0x48>)
    247a:	2400      	movs	r4, #0
    247c:	230e      	movs	r3, #14
    247e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2482:	e9cd 4404 	strd	r4, r4, [sp, #16]
    2486:	e9cd 4400 	strd	r4, r4, [sp]
    248a:	4b0a      	ldr	r3, [pc, #40]	; (24b4 <enable_logger+0x4c>)
    248c:	f44f 7240 	mov.w	r2, #768	; 0x300
    2490:	4628      	mov	r0, r5
    2492:	f014 fff9 	bl	17488 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    2496:	4908      	ldr	r1, [pc, #32]	; (24b8 <enable_logger+0x50>)
    2498:	4628      	mov	r0, r5
    249a:	f01b fcad 	bl	1ddf8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    249e:	4620      	mov	r0, r4
    24a0:	b007      	add	sp, #28
    24a2:	bd30      	pop	{r4, r5, pc}
    24a4:	000024bd 	.word	0x000024bd
    24a8:	20000054 	.word	0x20000054
    24ac:	2000009c 	.word	0x2000009c
    24b0:	2000a408 	.word	0x2000a408
    24b4:	00002891 	.word	0x00002891
    24b8:	0001f3b7 	.word	0x0001f3b7

000024bc <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    24bc:	4801      	ldr	r0, [pc, #4]	; (24c4 <log_process_thread_timer_expiry_fn+0x8>)
    24be:	f014 bf3f 	b.w	17340 <z_impl_k_sem_give>
    24c2:	bf00      	nop
    24c4:	2000d214 	.word	0x2000d214

000024c8 <log_core_init>:
{
    24c8:	b508      	push	{r3, lr}
		log_msg_pool_init();
    24ca:	f000 fa41 	bl	2950 <log_msg_pool_init>
		log_list_init(&list);
    24ce:	4809      	ldr	r0, [pc, #36]	; (24f4 <log_core_init+0x2c>)
    24d0:	f016 f83b 	bl	1854a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    24d4:	2304      	movs	r3, #4
    24d6:	2228      	movs	r2, #40	; 0x28
    24d8:	4807      	ldr	r0, [pc, #28]	; (24f8 <log_core_init+0x30>)
    24da:	4908      	ldr	r1, [pc, #32]	; (24fc <log_core_init+0x34>)
    24dc:	f01b fa6f 	bl	1d9be <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    24e0:	4b07      	ldr	r3, [pc, #28]	; (2500 <log_core_init+0x38>)
    24e2:	4a08      	ldr	r2, [pc, #32]	; (2504 <log_core_init+0x3c>)
    24e4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    24e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    24ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    24ee:	f000 baa5 	b.w	2a3c <log_output_timestamp_freq_set>
    24f2:	bf00      	nop
    24f4:	2000004c 	.word	0x2000004c
    24f8:	20000080 	.word	0x20000080
    24fc:	2000c088 	.word	0x2000c088
    2500:	2000cb8c 	.word	0x2000cb8c
    2504:	00018589 	.word	0x00018589

00002508 <dropped_notify>:
{
    2508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    250a:	4b0f      	ldr	r3, [pc, #60]	; (2548 <dropped_notify+0x40>)
    250c:	f3bf 8f5b 	dmb	ish
    2510:	2500      	movs	r5, #0
    2512:	e853 7f00 	ldrex	r7, [r3]
    2516:	e843 5200 	strex	r2, r5, [r3]
    251a:	2a00      	cmp	r2, #0
    251c:	d1f9      	bne.n	2512 <dropped_notify+0xa>
    251e:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2522:	4c0a      	ldr	r4, [pc, #40]	; (254c <dropped_notify+0x44>)
    2524:	4e0a      	ldr	r6, [pc, #40]	; (2550 <dropped_notify+0x48>)
    2526:	1b36      	subs	r6, r6, r4
    2528:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    252a:	42b5      	cmp	r5, r6
    252c:	db00      	blt.n	2530 <dropped_notify+0x28>
}
    252e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2530:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2532:	795b      	ldrb	r3, [r3, #5]
    2534:	b12b      	cbz	r3, 2542 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    2536:	6823      	ldr	r3, [r4, #0]
    2538:	68db      	ldr	r3, [r3, #12]
    253a:	b113      	cbz	r3, 2542 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    253c:	4639      	mov	r1, r7
    253e:	4620      	mov	r0, r4
    2540:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2542:	3501      	adds	r5, #1
    2544:	3410      	adds	r4, #16
    2546:	e7f0      	b.n	252a <dropped_notify+0x22>
    2548:	20000044 	.word	0x20000044
    254c:	0001e580 	.word	0x0001e580
    2550:	0001e580 	.word	0x0001e580

00002554 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2554:	4b06      	ldr	r3, [pc, #24]	; (2570 <log_dropped+0x1c>)
    2556:	f3bf 8f5b 	dmb	ish
    255a:	e853 2f00 	ldrex	r2, [r3]
    255e:	3201      	adds	r2, #1
    2560:	e843 2100 	strex	r1, r2, [r3]
    2564:	2900      	cmp	r1, #0
    2566:	d1f8      	bne.n	255a <log_dropped+0x6>
    2568:	f3bf 8f5b 	dmb	ish
}
    256c:	4770      	bx	lr
    256e:	bf00      	nop
    2570:	20000044 	.word	0x20000044

00002574 <log_backend_enable>:
	id += backend - log_backend_get(0);
    2574:	4b09      	ldr	r3, [pc, #36]	; (259c <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    2576:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    2578:	1ac3      	subs	r3, r0, r3
    257a:	111b      	asrs	r3, r3, #4
    257c:	3301      	adds	r3, #1
{
    257e:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    2580:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    2582:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    2584:	4c06      	ldr	r4, [pc, #24]	; (25a0 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    2586:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2588:	2201      	movs	r2, #1
    258a:	715a      	strb	r2, [r3, #5]
    258c:	7822      	ldrb	r2, [r4, #0]
    258e:	b912      	cbnz	r2, 2596 <log_backend_enable+0x22>
    2590:	4804      	ldr	r0, [pc, #16]	; (25a4 <log_backend_enable+0x30>)
    2592:	f014 fed5 	bl	17340 <z_impl_k_sem_give>
	backend_attached = true;
    2596:	2301      	movs	r3, #1
    2598:	7023      	strb	r3, [r4, #0]
}
    259a:	bd10      	pop	{r4, pc}
    259c:	0001e580 	.word	0x0001e580
    25a0:	20005d22 	.word	0x20005d22
    25a4:	2000d214 	.word	0x2000d214

000025a8 <log_init>:
{
    25a8:	b570      	push	{r4, r5, r6, lr}
    25aa:	4b11      	ldr	r3, [pc, #68]	; (25f0 <log_init+0x48>)
    25ac:	f3bf 8f5b 	dmb	ish
    25b0:	e853 5f00 	ldrex	r5, [r3]
    25b4:	1c6a      	adds	r2, r5, #1
    25b6:	e843 2100 	strex	r1, r2, [r3]
    25ba:	2900      	cmp	r1, #0
    25bc:	d1f8      	bne.n	25b0 <log_init+0x8>
    25be:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    25c2:	b92d      	cbnz	r5, 25d0 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    25c4:	4c0b      	ldr	r4, [pc, #44]	; (25f4 <log_init+0x4c>)
    25c6:	4e0c      	ldr	r6, [pc, #48]	; (25f8 <log_init+0x50>)
    25c8:	1b36      	subs	r6, r6, r4
    25ca:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    25cc:	42b5      	cmp	r5, r6
    25ce:	db00      	blt.n	25d2 <log_init+0x2a>
}
    25d0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    25d2:	7b23      	ldrb	r3, [r4, #12]
    25d4:	b143      	cbz	r3, 25e8 <log_init+0x40>
			if (backend->api->init != NULL) {
    25d6:	6823      	ldr	r3, [r4, #0]
    25d8:	695b      	ldr	r3, [r3, #20]
    25da:	b103      	cbz	r3, 25de <log_init+0x36>
				backend->api->init();
    25dc:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    25de:	2204      	movs	r2, #4
    25e0:	2100      	movs	r1, #0
    25e2:	4620      	mov	r0, r4
    25e4:	f7ff ffc6 	bl	2574 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    25e8:	3501      	adds	r5, #1
    25ea:	3410      	adds	r4, #16
    25ec:	e7ee      	b.n	25cc <log_init+0x24>
    25ee:	bf00      	nop
    25f0:	20000048 	.word	0x20000048
    25f4:	0001e580 	.word	0x0001e580
    25f8:	0001e580 	.word	0x0001e580

000025fc <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    25fc:	4b16      	ldr	r3, [pc, #88]	; (2658 <log_strdup+0x5c>)
    25fe:	4298      	cmp	r0, r3
{
    2600:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2602:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2604:	d302      	bcc.n	260c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    2606:	4b15      	ldr	r3, [pc, #84]	; (265c <log_strdup+0x60>)
    2608:	4298      	cmp	r0, r3
    260a:	d31f      	bcc.n	264c <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    260c:	2200      	movs	r2, #0
    260e:	a901      	add	r1, sp, #4
    2610:	4813      	ldr	r0, [pc, #76]	; (2660 <log_strdup+0x64>)
    2612:	f014 fa7f 	bl	16b14 <k_mem_slab_alloc>
	if (err != 0) {
    2616:	4605      	mov	r5, r0
    2618:	b9d8      	cbnz	r0, 2652 <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    261a:	2201      	movs	r2, #1
    261c:	9b01      	ldr	r3, [sp, #4]
    261e:	f3bf 8f5b 	dmb	ish
    2622:	e853 1f00 	ldrex	r1, [r3]
    2626:	e843 2000 	strex	r0, r2, [r3]
    262a:	2800      	cmp	r0, #0
    262c:	d1f9      	bne.n	2622 <log_strdup+0x26>
    262e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2632:	9801      	ldr	r0, [sp, #4]
    2634:	4621      	mov	r1, r4
    2636:	221f      	movs	r2, #31
    2638:	3004      	adds	r0, #4
    263a:	f016 faba 	bl	18bb2 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    263e:	9c01      	ldr	r4, [sp, #4]
    2640:	237e      	movs	r3, #126	; 0x7e
    2642:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    2646:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    264a:	3404      	adds	r4, #4
}
    264c:	4620      	mov	r0, r4
    264e:	b003      	add	sp, #12
    2650:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    2652:	4c04      	ldr	r4, [pc, #16]	; (2664 <log_strdup+0x68>)
    2654:	e7fa      	b.n	264c <log_strdup+0x50>
    2656:	bf00      	nop
    2658:	0001e22c 	.word	0x0001e22c
    265c:	00029794 	.word	0x00029794
    2660:	20000080 	.word	0x20000080
    2664:	0001f3bf 	.word	0x0001f3bf

00002668 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    2668:	b148      	cbz	r0, 267e <log_is_strdup+0x16>
    266a:	4b05      	ldr	r3, [pc, #20]	; (2680 <log_is_strdup+0x18>)
    266c:	4298      	cmp	r0, r3
    266e:	d305      	bcc.n	267c <log_is_strdup+0x14>
    2670:	33a0      	adds	r3, #160	; 0xa0
    2672:	4298      	cmp	r0, r3
    2674:	bf2c      	ite	cs
    2676:	2000      	movcs	r0, #0
    2678:	2001      	movcc	r0, #1
    267a:	4770      	bx	lr
    267c:	2000      	movs	r0, #0
}
    267e:	4770      	bx	lr
    2680:	2000c088 	.word	0x2000c088

00002684 <z_impl_log_process>:
{
    2684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    2688:	4b46      	ldr	r3, [pc, #280]	; (27a4 <z_impl_log_process+0x120>)
    268a:	781b      	ldrb	r3, [r3, #0]
{
    268c:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    268e:	b903      	cbnz	r3, 2692 <z_impl_log_process+0xe>
    2690:	b360      	cbz	r0, 26ec <z_impl_log_process+0x68>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    2692:	f04f 0320 	mov.w	r3, #32
    2696:	f3ef 8611 	mrs	r6, BASEPRI
    269a:	f383 8811 	msr	BASEPRI, r3
    269e:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    26a2:	4841      	ldr	r0, [pc, #260]	; (27a8 <z_impl_log_process+0x124>)
    26a4:	f015 ff61 	bl	1856a <log_list_head_get>
    26a8:	4604      	mov	r4, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    26aa:	f386 8811 	msr	BASEPRI, r6
    26ae:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    26b2:	b178      	cbz	r0, 26d4 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    26b4:	f3bf 8f5b 	dmb	ish
    26b8:	4b3c      	ldr	r3, [pc, #240]	; (27ac <z_impl_log_process+0x128>)
    26ba:	e853 2f00 	ldrex	r2, [r3]
    26be:	3a01      	subs	r2, #1
    26c0:	e843 2100 	strex	r1, r2, [r3]
    26c4:	2900      	cmp	r1, #0
    26c6:	d1f8      	bne.n	26ba <z_impl_log_process+0x36>
    26c8:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    26cc:	b18d      	cbz	r5, 26f2 <z_impl_log_process+0x6e>
	log_msg_put(msg);
    26ce:	4620      	mov	r0, r4
    26d0:	f015 fffd 	bl	186ce <log_msg_put>
	if (!bypass && dropped_cnt) {
    26d4:	b925      	cbnz	r5, 26e0 <z_impl_log_process+0x5c>
    26d6:	4b36      	ldr	r3, [pc, #216]	; (27b0 <z_impl_log_process+0x12c>)
    26d8:	681b      	ldr	r3, [r3, #0]
    26da:	b10b      	cbz	r3, 26e0 <z_impl_log_process+0x5c>
		dropped_notify();
    26dc:	f7ff ff14 	bl	2508 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    26e0:	4831      	ldr	r0, [pc, #196]	; (27a8 <z_impl_log_process+0x124>)
    26e2:	f015 ff40 	bl	18566 <log_list_head_peek>
    26e6:	1c05      	adds	r5, r0, #0
    26e8:	bf18      	it	ne
    26ea:	2501      	movne	r5, #1
}
    26ec:	4628      	mov	r0, r5
    26ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    26f2:	4b30      	ldr	r3, [pc, #192]	; (27b4 <z_impl_log_process+0x130>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	b9ab      	cbnz	r3, 2724 <z_impl_log_process+0xa0>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    26f8:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
    26fa:	07db      	lsls	r3, r3, #31
    26fc:	d412      	bmi.n	2724 <z_impl_log_process+0xa0>
	msg_str = log_msg_str_get(msg);
    26fe:	f015 fff9 	bl	186f4 <log_msg_str_get>
    2702:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2704:	4620      	mov	r0, r4
    2706:	f015 ffc2 	bl	1868e <log_msg_nargs_get>
    270a:	4601      	mov	r1, r0
    270c:	4648      	mov	r0, r9
    270e:	f015 ff3f 	bl	18590 <z_log_get_s_mask>
    2712:	4b29      	ldr	r3, [pc, #164]	; (27b8 <z_impl_log_process+0x134>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    2714:	4a29      	ldr	r2, [pc, #164]	; (27bc <z_impl_log_process+0x138>)
    2716:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 27d4 <z_impl_log_process+0x150>
    271a:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    271c:	4607      	mov	r7, r0
				LOG_ERR(ERR_MSG, idx, msg_str);
    271e:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    2722:	b937      	cbnz	r7, 2732 <z_impl_log_process+0xae>
    2724:	4e26      	ldr	r6, [pc, #152]	; (27c0 <z_impl_log_process+0x13c>)
    2726:	4f27      	ldr	r7, [pc, #156]	; (27c4 <z_impl_log_process+0x140>)
    2728:	1bbf      	subs	r7, r7, r6
    272a:	113f      	asrs	r7, r7, #4
    272c:	f04f 0800 	mov.w	r8, #0
    2730:	e034      	b.n	279c <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
    2732:	fab7 f687 	clz	r6, r7
    2736:	f1c6 061f 	rsb	r6, r6, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    273a:	4631      	mov	r1, r6
    273c:	4620      	mov	r0, r4
    273e:	f015 ffa9 	bl	18694 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    2742:	4b21      	ldr	r3, [pc, #132]	; (27c8 <z_impl_log_process+0x144>)
    2744:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2746:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2748:	d302      	bcc.n	2750 <z_impl_log_process+0xcc>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    274a:	4b20      	ldr	r3, [pc, #128]	; (27cc <z_impl_log_process+0x148>)
    274c:	4298      	cmp	r0, r3
    274e:	d314      	bcc.n	277a <z_impl_log_process+0xf6>
    2750:	4610      	mov	r0, r2
    2752:	f7ff ff89 	bl	2668 <log_is_strdup>
    2756:	b980      	cbnz	r0, 277a <z_impl_log_process+0xf6>
    2758:	4b1d      	ldr	r3, [pc, #116]	; (27d0 <z_impl_log_process+0x14c>)
    275a:	429a      	cmp	r2, r3
    275c:	d00d      	beq.n	277a <z_impl_log_process+0xf6>
				LOG_ERR(ERR_MSG, idx, msg_str);
    275e:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    2762:	f043 0301 	orr.w	r3, r3, #1
    2766:	f363 0807 	bfi	r8, r3, #0, #8
    276a:	f36a 188f 	bfi	r8, sl, #6, #10
    276e:	4643      	mov	r3, r8
    2770:	464a      	mov	r2, r9
    2772:	4631      	mov	r1, r6
    2774:	4658      	mov	r0, fp
    2776:	f015 ff4c 	bl	18612 <log_2>
		mask &= ~BIT(idx);
    277a:	2301      	movs	r3, #1
    277c:	fa03 f606 	lsl.w	r6, r3, r6
    2780:	ea27 0706 	bic.w	r7, r7, r6
    2784:	e7cd      	b.n	2722 <z_impl_log_process+0x9e>
	return backend->cb->active;
    2786:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2788:	795b      	ldrb	r3, [r3, #5]
    278a:	b123      	cbz	r3, 2796 <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
    278c:	6833      	ldr	r3, [r6, #0]
    278e:	4621      	mov	r1, r4
    2790:	681b      	ldr	r3, [r3, #0]
    2792:	4630      	mov	r0, r6
    2794:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2796:	f108 0801 	add.w	r8, r8, #1
    279a:	3610      	adds	r6, #16
    279c:	45b8      	cmp	r8, r7
    279e:	dbf2      	blt.n	2786 <z_impl_log_process+0x102>
    27a0:	e795      	b.n	26ce <z_impl_log_process+0x4a>
    27a2:	bf00      	nop
    27a4:	20005d22 	.word	0x20005d22
    27a8:	2000004c 	.word	0x2000004c
    27ac:	20000040 	.word	0x20000040
    27b0:	20000044 	.word	0x20000044
    27b4:	20005d23 	.word	0x20005d23
    27b8:	0001e540 	.word	0x0001e540
    27bc:	0001e448 	.word	0x0001e448
    27c0:	0001e580 	.word	0x0001e580
    27c4:	0001e580 	.word	0x0001e580
    27c8:	0001e22c 	.word	0x0001e22c
    27cc:	00029794 	.word	0x00029794
    27d0:	0001f3bf 	.word	0x0001f3bf
    27d4:	0001f3dd 	.word	0x0001f3dd

000027d8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    27d8:	4b26      	ldr	r3, [pc, #152]	; (2874 <msg_finalize+0x9c>)
{
    27da:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    27dc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    27de:	8141      	strh	r1, [r0, #10]
{
    27e0:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    27e2:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    27e4:	4c24      	ldr	r4, [pc, #144]	; (2878 <msg_finalize+0xa0>)
    27e6:	60e8      	str	r0, [r5, #12]
    27e8:	f3bf 8f5b 	dmb	ish
    27ec:	e854 3f00 	ldrex	r3, [r4]
    27f0:	3301      	adds	r3, #1
    27f2:	e844 3200 	strex	r2, r3, [r4]
    27f6:	2a00      	cmp	r2, #0
    27f8:	d1f8      	bne.n	27ec <msg_finalize+0x14>
    27fa:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    27fe:	f04f 0320 	mov.w	r3, #32
    2802:	f3ef 8611 	mrs	r6, BASEPRI
    2806:	f383 8811 	msr	BASEPRI, r3
    280a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    280e:	481b      	ldr	r0, [pc, #108]	; (287c <msg_finalize+0xa4>)
    2810:	4629      	mov	r1, r5
    2812:	f015 fe9e 	bl	18552 <log_list_add_tail>
	__asm__ volatile(
    2816:	f386 8811 	msr	BASEPRI, r6
    281a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    281e:	4b18      	ldr	r3, [pc, #96]	; (2880 <msg_finalize+0xa8>)
    2820:	781a      	ldrb	r2, [r3, #0]
    2822:	b17a      	cbz	r2, 2844 <msg_finalize+0x6c>
	__asm__ volatile(
    2824:	f04f 0320 	mov.w	r3, #32
    2828:	f3ef 8411 	mrs	r4, BASEPRI
    282c:	f383 8811 	msr	BASEPRI, r3
    2830:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2834:	2000      	movs	r0, #0
    2836:	f7ff ff25 	bl	2684 <z_impl_log_process>
	__asm__ volatile(
    283a:	f384 8811 	msr	BASEPRI, r4
    283e:	f3bf 8f6f 	isb	sy
}
    2842:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2844:	490f      	ldr	r1, [pc, #60]	; (2884 <msg_finalize+0xac>)
    2846:	6823      	ldr	r3, [r4, #0]
    2848:	6809      	ldr	r1, [r1, #0]
    284a:	2900      	cmp	r1, #0
    284c:	d0f9      	beq.n	2842 <msg_finalize+0x6a>
    284e:	2b01      	cmp	r3, #1
    2850:	d106      	bne.n	2860 <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
    2852:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2856:	480c      	ldr	r0, [pc, #48]	; (2888 <msg_finalize+0xb0>)
}
    2858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    285c:	f015 b864 	b.w	17928 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2860:	2b0a      	cmp	r3, #10
    2862:	d1ee      	bne.n	2842 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    2864:	4808      	ldr	r0, [pc, #32]	; (2888 <msg_finalize+0xb0>)
    2866:	f01b fbb5 	bl	1dfd4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    286a:	4808      	ldr	r0, [pc, #32]	; (288c <msg_finalize+0xb4>)
}
    286c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2870:	f014 bd66 	b.w	17340 <z_impl_k_sem_give>
    2874:	2000cb8c 	.word	0x2000cb8c
    2878:	20000040 	.word	0x20000040
    287c:	2000004c 	.word	0x2000004c
    2880:	20005d23 	.word	0x20005d23
    2884:	20000108 	.word	0x20000108
    2888:	20000054 	.word	0x20000054
    288c:	2000d214 	.word	0x2000d214

00002890 <log_process_thread_func>:
{
    2890:	b508      	push	{r3, lr}
	log_init();
    2892:	f7ff fe89 	bl	25a8 <log_init>
	return z_impl_k_current_get();
    2896:	f014 fd4d 	bl	17334 <z_impl_k_current_get>
	proc_tid = process_tid;
    289a:	4b0b      	ldr	r3, [pc, #44]	; (28c8 <log_process_thread_func+0x38>)
    289c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    289e:	b130      	cbz	r0, 28ae <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    28a0:	4b0a      	ldr	r3, [pc, #40]	; (28cc <log_process_thread_func+0x3c>)
	    process_tid &&
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	2b09      	cmp	r3, #9
    28a6:	dd02      	ble.n	28ae <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    28a8:	4809      	ldr	r0, [pc, #36]	; (28d0 <log_process_thread_func+0x40>)
    28aa:	f014 fd49 	bl	17340 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    28ae:	4c08      	ldr	r4, [pc, #32]	; (28d0 <log_process_thread_func+0x40>)
    28b0:	2000      	movs	r0, #0
    28b2:	f7ff fee7 	bl	2684 <z_impl_log_process>
		if (log_process(false) == false) {
    28b6:	2800      	cmp	r0, #0
    28b8:	d1fa      	bne.n	28b0 <log_process_thread_func+0x20>
    28ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    28be:	4620      	mov	r0, r4
    28c0:	f014 fd6a 	bl	17398 <z_impl_k_sem_take>
    28c4:	e7f4      	b.n	28b0 <log_process_thread_func+0x20>
    28c6:	bf00      	nop
    28c8:	20000108 	.word	0x20000108
    28cc:	20000040 	.word	0x20000040
    28d0:	2000d214 	.word	0x2000d214

000028d4 <z_impl_log_panic>:
{
    28d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    28d6:	4f0e      	ldr	r7, [pc, #56]	; (2910 <z_impl_log_panic+0x3c>)
    28d8:	783d      	ldrb	r5, [r7, #0]
    28da:	b975      	cbnz	r5, 28fa <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    28dc:	4c0d      	ldr	r4, [pc, #52]	; (2914 <z_impl_log_panic+0x40>)
    28de:	4e0e      	ldr	r6, [pc, #56]	; (2918 <z_impl_log_panic+0x44>)
	log_init();
    28e0:	f7ff fe62 	bl	25a8 <log_init>
    28e4:	1b36      	subs	r6, r6, r4
    28e6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    28e8:	42b5      	cmp	r5, r6
    28ea:	db07      	blt.n	28fc <z_impl_log_panic+0x28>
    28ec:	2000      	movs	r0, #0
    28ee:	f7ff fec9 	bl	2684 <z_impl_log_process>
		while (log_process(false) == true) {
    28f2:	2800      	cmp	r0, #0
    28f4:	d1fa      	bne.n	28ec <z_impl_log_panic+0x18>
	panic_mode = true;
    28f6:	2301      	movs	r3, #1
    28f8:	703b      	strb	r3, [r7, #0]
}
    28fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    28fc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    28fe:	795b      	ldrb	r3, [r3, #5]
    2900:	b11b      	cbz	r3, 290a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    2902:	6823      	ldr	r3, [r4, #0]
    2904:	4620      	mov	r0, r4
    2906:	691b      	ldr	r3, [r3, #16]
    2908:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    290a:	3501      	adds	r5, #1
    290c:	3410      	adds	r4, #16
    290e:	e7eb      	b.n	28e8 <z_impl_log_panic+0x14>
    2910:	20005d23 	.word	0x20005d23
    2914:	0001e580 	.word	0x0001e580
    2918:	0001e580 	.word	0x0001e580

0000291c <log_free>:
{
    291c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    291e:	3804      	subs	r0, #4
    2920:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2922:	f3bf 8f5b 	dmb	ish
    2926:	e850 3f00 	ldrex	r3, [r0]
    292a:	1e5a      	subs	r2, r3, #1
    292c:	e840 2100 	strex	r1, r2, [r0]
    2930:	2900      	cmp	r1, #0
    2932:	d1f8      	bne.n	2926 <log_free+0xa>
    2934:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2938:	2b01      	cmp	r3, #1
    293a:	d103      	bne.n	2944 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    293c:	a901      	add	r1, sp, #4
    293e:	4803      	ldr	r0, [pc, #12]	; (294c <log_free+0x30>)
    2940:	f014 f914 	bl	16b6c <k_mem_slab_free>
}
    2944:	b003      	add	sp, #12
    2946:	f85d fb04 	ldr.w	pc, [sp], #4
    294a:	bf00      	nop
    294c:	20000080 	.word	0x20000080

00002950 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2950:	2320      	movs	r3, #32
    2952:	461a      	mov	r2, r3
    2954:	4901      	ldr	r1, [pc, #4]	; (295c <log_msg_pool_init+0xc>)
    2956:	4802      	ldr	r0, [pc, #8]	; (2960 <log_msg_pool_init+0x10>)
    2958:	f01b b831 	b.w	1d9be <k_mem_slab_init>
    295c:	2000c128 	.word	0x2000c128
    2960:	2000010c 	.word	0x2000010c

00002964 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2964:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    2966:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2968:	4d09      	ldr	r5, [pc, #36]	; (2990 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    296a:	9301      	str	r3, [sp, #4]
    296c:	2001      	movs	r0, #1
    296e:	f7ff fe89 	bl	2684 <z_impl_log_process>
    2972:	4604      	mov	r4, r0
			log_dropped();
    2974:	f7ff fdee 	bl	2554 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2978:	2200      	movs	r2, #0
    297a:	a901      	add	r1, sp, #4
    297c:	4628      	mov	r0, r5
    297e:	f014 f8c9 	bl	16b14 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2982:	b108      	cbz	r0, 2988 <log_msg_no_space_handle+0x24>
    2984:	2c00      	cmp	r4, #0
    2986:	d1f1      	bne.n	296c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    2988:	9801      	ldr	r0, [sp, #4]
    298a:	b003      	add	sp, #12
    298c:	bd30      	pop	{r4, r5, pc}
    298e:	bf00      	nop
    2990:	2000010c 	.word	0x2000010c

00002994 <log_msg_chunk_alloc>:
{
    2994:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2996:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2998:	a901      	add	r1, sp, #4
    299a:	4806      	ldr	r0, [pc, #24]	; (29b4 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    299c:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    299e:	f014 f8b9 	bl	16b14 <k_mem_slab_alloc>
	if (err != 0) {
    29a2:	b110      	cbz	r0, 29aa <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    29a4:	f7ff ffde 	bl	2964 <log_msg_no_space_handle>
    29a8:	9001      	str	r0, [sp, #4]
}
    29aa:	9801      	ldr	r0, [sp, #4]
    29ac:	b003      	add	sp, #12
    29ae:	f85d fb04 	ldr.w	pc, [sp], #4
    29b2:	bf00      	nop
    29b4:	2000010c 	.word	0x2000010c

000029b8 <msg_free>:
{
    29b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ba:	7a04      	ldrb	r4, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    29bc:	7a46      	ldrb	r6, [r0, #9]
{
    29be:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    29c0:	f014 0401 	ands.w	r4, r4, #1
{
    29c4:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    29c6:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    29ca:	d00e      	beq.n	29ea <msg_free+0x32>
	if (msg->hdr.params.generic.ext == 1) {
    29cc:	9b01      	ldr	r3, [sp, #4]
    29ce:	7a1a      	ldrb	r2, [r3, #8]
    29d0:	0792      	lsls	r2, r2, #30
    29d2:	d504      	bpl.n	29de <msg_free+0x26>
		cont_free(msg->payload.ext.next);
    29d4:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    29d6:	4c18      	ldr	r4, [pc, #96]	; (2a38 <msg_free+0x80>)
    29d8:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    29da:	9b03      	ldr	r3, [sp, #12]
    29dc:	bb2b      	cbnz	r3, 2a2a <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    29de:	a901      	add	r1, sp, #4
    29e0:	4815      	ldr	r0, [pc, #84]	; (2a38 <msg_free+0x80>)
    29e2:	f014 f8c3 	bl	16b6c <k_mem_slab_free>
}
    29e6:	b005      	add	sp, #20
    29e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    29ea:	2e00      	cmp	r6, #0
    29ec:	d0ee      	beq.n	29cc <msg_free+0x14>
		for (i = 0; i < nargs; i++) {
    29ee:	4625      	mov	r5, r4
    29f0:	e017      	b.n	2a22 <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    29f2:	4629      	mov	r1, r5
    29f4:	f015 fe4e 	bl	18694 <log_msg_arg_get>
    29f8:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    29fa:	f7ff fe35 	bl	2668 <log_is_strdup>
    29fe:	b178      	cbz	r0, 2a20 <msg_free+0x68>
				if (smask == 0) {
    2a00:	b93c      	cbnz	r4, 2a12 <msg_free+0x5a>
					smask = z_log_get_s_mask(
    2a02:	9b01      	ldr	r3, [sp, #4]
    2a04:	4631      	mov	r1, r6
    2a06:	6918      	ldr	r0, [r3, #16]
    2a08:	f015 fdc2 	bl	18590 <z_log_get_s_mask>
					if (smask == 0) {
    2a0c:	4604      	mov	r4, r0
    2a0e:	2800      	cmp	r0, #0
    2a10:	d0dc      	beq.n	29cc <msg_free+0x14>
				if (smask & BIT(i)) {
    2a12:	fa24 f305 	lsr.w	r3, r4, r5
    2a16:	07db      	lsls	r3, r3, #31
    2a18:	d502      	bpl.n	2a20 <msg_free+0x68>
					log_free(buf);
    2a1a:	4638      	mov	r0, r7
    2a1c:	f7ff ff7e 	bl	291c <log_free>
		for (i = 0; i < nargs; i++) {
    2a20:	3501      	adds	r5, #1
    2a22:	42ae      	cmp	r6, r5
    2a24:	9801      	ldr	r0, [sp, #4]
    2a26:	d8e4      	bhi.n	29f2 <msg_free+0x3a>
    2a28:	e7d0      	b.n	29cc <msg_free+0x14>
		next = cont->next;
    2a2a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2a2c:	a903      	add	r1, sp, #12
    2a2e:	4620      	mov	r0, r4
    2a30:	f014 f89c 	bl	16b6c <k_mem_slab_free>
		cont = next;
    2a34:	9503      	str	r5, [sp, #12]
    2a36:	e7d0      	b.n	29da <msg_free+0x22>
    2a38:	2000010c 	.word	0x2000010c

00002a3c <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    2a3c:	4a08      	ldr	r2, [pc, #32]	; (2a60 <log_output_timestamp_freq_set+0x24>)
{
    2a3e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2a40:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2a42:	4c08      	ldr	r4, [pc, #32]	; (2a64 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2a44:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2a46:	2100      	movs	r1, #0
    2a48:	42a0      	cmp	r0, r4
    2a4a:	d804      	bhi.n	2a56 <log_output_timestamp_freq_set+0x1a>
    2a4c:	b101      	cbz	r1, 2a50 <log_output_timestamp_freq_set+0x14>
    2a4e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2a50:	4b05      	ldr	r3, [pc, #20]	; (2a68 <log_output_timestamp_freq_set+0x2c>)
    2a52:	6018      	str	r0, [r3, #0]
}
    2a54:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2a56:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2a58:	005b      	lsls	r3, r3, #1
    2a5a:	2101      	movs	r1, #1
    2a5c:	e7f4      	b.n	2a48 <log_output_timestamp_freq_set+0xc>
    2a5e:	bf00      	nop
    2a60:	2000012c 	.word	0x2000012c
    2a64:	000f4240 	.word	0x000f4240
    2a68:	20000128 	.word	0x20000128

00002a6c <read_pnp_id>:

#if CONFIG_BT_GATT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   u16_t len, u16_t offset)
{
    2a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    2a6e:	2407      	movs	r4, #7
    2a70:	9402      	str	r4, [sp, #8]
    2a72:	4c04      	ldr	r4, [pc, #16]	; (2a84 <read_pnp_id+0x18>)
    2a74:	9401      	str	r4, [sp, #4]
    2a76:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    2a7a:	9400      	str	r4, [sp, #0]
    2a7c:	f017 faf7 	bl	1a06e <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    2a80:	b004      	add	sp, #16
    2a82:	bd10      	pop	{r4, pc}
    2a84:	2000d0d3 	.word	0x2000d0d3

00002a88 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2a88:	4b16      	ldr	r3, [pc, #88]	; (2ae4 <nrf_power_clock_isr+0x5c>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    2a8a:	b507      	push	{r0, r1, r2, lr}
    2a8c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    2a8e:	b182      	cbz	r2, 2ab2 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    2a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a94:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    2a98:	07d1      	lsls	r1, r2, #31
    2a9a:	d50a      	bpl.n	2ab2 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a9c:	2200      	movs	r2, #0
    2a9e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2aa0:	681b      	ldr	r3, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2aa2:	4811      	ldr	r0, [pc, #68]	; (2ae8 <nrf_power_clock_isr+0x60>)
    2aa4:	9300      	str	r3, [sp, #0]
    (void)dummy;
    2aa6:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    2aa8:	6883      	ldr	r3, [r0, #8]
    2aaa:	7a59      	ldrb	r1, [r3, #9]
    2aac:	b909      	cbnz	r1, 2ab2 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2aae:	f015 fe9e 	bl	187ee <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ab2:	4b0e      	ldr	r3, [pc, #56]	; (2aec <nrf_power_clock_isr+0x64>)
    2ab4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    2ab6:	b18a      	cbz	r2, 2adc <nrf_power_clock_isr+0x54>
    return p_reg->INTENSET & mask;
    2ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2abc:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    2ac0:	0792      	lsls	r2, r2, #30
    2ac2:	d50b      	bpl.n	2adc <nrf_power_clock_isr+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ac4:	2200      	movs	r2, #0
    2ac6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2acc:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2ace:	4806      	ldr	r0, [pc, #24]	; (2ae8 <nrf_power_clock_isr+0x60>)
    2ad0:	2101      	movs	r1, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    2ad2:	b003      	add	sp, #12
    2ad4:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2ad8:	f015 be89 	b.w	187ee <clkstarted_handle>
}
    2adc:	b003      	add	sp, #12
    2ade:	f85d fb04 	ldr.w	pc, [sp], #4
    2ae2:	bf00      	nop
    2ae4:	40000100 	.word	0x40000100
    2ae8:	2000d13c 	.word	0x2000d13c
    2aec:	40000104 	.word	0x40000104

00002af0 <st7789v_set_orientation>:
	return -ENOTSUP;
}

static int st7789v_set_orientation(const struct device *dev,
			    const enum display_orientation orientation)
{
    2af0:	b508      	push	{r3, lr}
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
    2af2:	b181      	cbz	r1, 2b16 <st7789v_set_orientation+0x26>
		return 0;
	}
	LOG_ERR("Changing display orientation not implemented");
    2af4:	2301      	movs	r3, #1
    2af6:	f04f 0100 	mov.w	r1, #0
    2afa:	f363 0107 	bfi	r1, r3, #0, #8
    2afe:	4a07      	ldr	r2, [pc, #28]	; (2b1c <st7789v_set_orientation+0x2c>)
    2b00:	4b07      	ldr	r3, [pc, #28]	; (2b20 <st7789v_set_orientation+0x30>)
    2b02:	4808      	ldr	r0, [pc, #32]	; (2b24 <st7789v_set_orientation+0x34>)
    2b04:	1a9b      	subs	r3, r3, r2
    2b06:	08db      	lsrs	r3, r3, #3
    2b08:	f363 118f 	bfi	r1, r3, #6, #10
    2b0c:	f015 fd60 	bl	185d0 <log_0>
	return -ENOTSUP;
    2b10:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2b14:	bd08      	pop	{r3, pc}
		return 0;
    2b16:	4608      	mov	r0, r1
    2b18:	e7fc      	b.n	2b14 <st7789v_set_orientation+0x24>
    2b1a:	bf00      	nop
    2b1c:	0001e448 	.word	0x0001e448
    2b20:	0001e530 	.word	0x0001e530
    2b24:	0001f513 	.word	0x0001f513

00002b28 <st7789v_set_pixel_format>:
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    2b28:	2910      	cmp	r1, #16
{
    2b2a:	b508      	push	{r3, lr}
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    2b2c:	d010      	beq.n	2b50 <st7789v_set_pixel_format+0x28>
	LOG_ERR("Pixel format change not implemented");
    2b2e:	2301      	movs	r3, #1
    2b30:	f04f 0100 	mov.w	r1, #0
    2b34:	f363 0107 	bfi	r1, r3, #0, #8
    2b38:	4a06      	ldr	r2, [pc, #24]	; (2b54 <st7789v_set_pixel_format+0x2c>)
    2b3a:	4b07      	ldr	r3, [pc, #28]	; (2b58 <st7789v_set_pixel_format+0x30>)
    2b3c:	4807      	ldr	r0, [pc, #28]	; (2b5c <st7789v_set_pixel_format+0x34>)
    2b3e:	1a9b      	subs	r3, r3, r2
    2b40:	08db      	lsrs	r3, r3, #3
    2b42:	f363 118f 	bfi	r1, r3, #6, #10
    2b46:	f015 fd43 	bl	185d0 <log_0>
	return -ENOTSUP;
    2b4a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2b4e:	bd08      	pop	{r3, pc}
		return 0;
    2b50:	2000      	movs	r0, #0
    2b52:	e7fc      	b.n	2b4e <st7789v_set_pixel_format+0x26>
    2b54:	0001e448 	.word	0x0001e448
    2b58:	0001e530 	.word	0x0001e530
    2b5c:	0001f540 	.word	0x0001f540

00002b60 <st7789v_init>:
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
			 sizeof(st7789v_rgb_param));
}

static int st7789v_init(struct device *dev)
{
    2b60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2b64:	4607      	mov	r7, r0
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
    2b66:	6884      	ldr	r4, [r0, #8]
    2b68:	489e      	ldr	r0, [pc, #632]	; (2de4 <st7789v_init+0x284>)
    2b6a:	f013 fe33 	bl	167d4 <z_impl_device_get_binding>

	data->spi_dev = device_get_binding(DT_INST_0_SITRONIX_ST7789V_BUS_NAME);
    2b6e:	6020      	str	r0, [r4, #0]
	if (data->spi_dev == NULL) {
    2b70:	b998      	cbnz	r0, 2b9a <st7789v_init+0x3a>
		LOG_ERR("Could not get SPI device for LCD");
    2b72:	2301      	movs	r3, #1
    2b74:	f04f 0100 	mov.w	r1, #0
    2b78:	f363 0107 	bfi	r1, r3, #0, #8
    2b7c:	4a9a      	ldr	r2, [pc, #616]	; (2de8 <st7789v_init+0x288>)
    2b7e:	4b9b      	ldr	r3, [pc, #620]	; (2dec <st7789v_init+0x28c>)
    2b80:	489b      	ldr	r0, [pc, #620]	; (2df0 <st7789v_init+0x290>)
    2b82:	1a9b      	subs	r3, r3, r2
    2b84:	08db      	lsrs	r3, r3, #3
    2b86:	f363 118f 	bfi	r1, r3, #6, #10
#endif

	data->cmd_data_gpio = device_get_binding(
			DT_INST_0_SITRONIX_ST7789V_CMD_DATA_GPIOS_CONTROLLER);
	if (data->cmd_data_gpio == NULL) {
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    2b8a:	f015 fd21 	bl	185d0 <log_0>
		return -EPERM;
    2b8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	st7789v_lcd_init(data);

	st7789v_exit_sleep(data);

	return 0;
}
    2b92:	4628      	mov	r0, r5
    2b94:	b002      	add	sp, #8
    2b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
    2b9a:	4a96      	ldr	r2, [pc, #600]	; (2df4 <st7789v_init+0x294>)
    2b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
    2ba0:	e9c4 2301 	strd	r2, r3, [r4, #4]
    2ba4:	4894      	ldr	r0, [pc, #592]	; (2df8 <st7789v_init+0x298>)
    2ba6:	f013 fe15 	bl	167d4 <z_impl_device_get_binding>
	data->cs_ctrl.delay = 0U;
    2baa:	2619      	movs	r6, #25
    2bac:	2500      	movs	r5, #0
	data->spi_config.cs = &(data->cs_ctrl);
    2bae:	f104 0310 	add.w	r3, r4, #16
	data->cs_ctrl.gpio_dev = device_get_binding(
    2bb2:	6120      	str	r0, [r4, #16]
	data->cs_ctrl.delay = 0U;
    2bb4:	e9c4 6505 	strd	r6, r5, [r4, #20]
	data->spi_config.cs = &(data->cs_ctrl);
    2bb8:	60e3      	str	r3, [r4, #12]
    2bba:	488f      	ldr	r0, [pc, #572]	; (2df8 <st7789v_init+0x298>)
    2bbc:	f013 fe0a 	bl	167d4 <z_impl_device_get_binding>
	data->reset_gpio = device_get_binding(
    2bc0:	61e0      	str	r0, [r4, #28]
	if (data->reset_gpio == NULL) {
    2bc2:	b960      	cbnz	r0, 2bde <st7789v_init+0x7e>
		LOG_ERR("Could not get GPIO port for display reset");
    2bc4:	2301      	movs	r3, #1
    2bc6:	f04f 0100 	mov.w	r1, #0
    2bca:	f363 0107 	bfi	r1, r3, #0, #8
    2bce:	4a86      	ldr	r2, [pc, #536]	; (2de8 <st7789v_init+0x288>)
    2bd0:	4b86      	ldr	r3, [pc, #536]	; (2dec <st7789v_init+0x28c>)
    2bd2:	488a      	ldr	r0, [pc, #552]	; (2dfc <st7789v_init+0x29c>)
    2bd4:	1a9b      	subs	r3, r3, r2
    2bd6:	08db      	lsrs	r3, r3, #3
    2bd8:	f363 118f 	bfi	r1, r3, #6, #10
    2bdc:	e7d5      	b.n	2b8a <st7789v_init+0x2a>
	return api->config(port, access_op, pin, flags);
    2bde:	6843      	ldr	r3, [r0, #4]
    2be0:	4629      	mov	r1, r5
    2be2:	f8d3 8000 	ldr.w	r8, [r3]
    2be6:	221a      	movs	r2, #26
    2be8:	2301      	movs	r3, #1
    2bea:	47c0      	blx	r8
	if (gpio_pin_configure(data->reset_gpio, ST7789V_RESET_PIN,
    2bec:	4605      	mov	r5, r0
    2bee:	b180      	cbz	r0, 2c12 <st7789v_init+0xb2>
		LOG_ERR("Couldn't configure reset pin");
    2bf0:	2301      	movs	r3, #1
    2bf2:	f04f 0100 	mov.w	r1, #0
    2bf6:	f363 0107 	bfi	r1, r3, #0, #8
    2bfa:	4a7b      	ldr	r2, [pc, #492]	; (2de8 <st7789v_init+0x288>)
    2bfc:	4b7b      	ldr	r3, [pc, #492]	; (2dec <st7789v_init+0x28c>)
    2bfe:	4880      	ldr	r0, [pc, #512]	; (2e00 <st7789v_init+0x2a0>)
    2c00:	1a9b      	subs	r3, r3, r2
    2c02:	08db      	lsrs	r3, r3, #3
    2c04:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Couldn't configure cmd/DATA pin");
    2c08:	f015 fce2 	bl	185d0 <log_0>
		return -EIO;
    2c0c:	f06f 0504 	mvn.w	r5, #4
    2c10:	e7bf      	b.n	2b92 <st7789v_init+0x32>
    2c12:	4879      	ldr	r0, [pc, #484]	; (2df8 <st7789v_init+0x298>)
    2c14:	f013 fdde 	bl	167d4 <z_impl_device_get_binding>
	data->cmd_data_gpio = device_get_binding(
    2c18:	6220      	str	r0, [r4, #32]
	if (data->cmd_data_gpio == NULL) {
    2c1a:	b960      	cbnz	r0, 2c36 <st7789v_init+0xd6>
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    2c1c:	2301      	movs	r3, #1
    2c1e:	f04f 0100 	mov.w	r1, #0
    2c22:	f363 0107 	bfi	r1, r3, #0, #8
    2c26:	4a70      	ldr	r2, [pc, #448]	; (2de8 <st7789v_init+0x288>)
    2c28:	4b70      	ldr	r3, [pc, #448]	; (2dec <st7789v_init+0x28c>)
    2c2a:	4876      	ldr	r0, [pc, #472]	; (2e04 <st7789v_init+0x2a4>)
    2c2c:	1a9b      	subs	r3, r3, r2
    2c2e:	08db      	lsrs	r3, r3, #3
    2c30:	f363 118f 	bfi	r1, r3, #6, #10
    2c34:	e7a9      	b.n	2b8a <st7789v_init+0x2a>
    2c36:	6843      	ldr	r3, [r0, #4]
    2c38:	4629      	mov	r1, r5
    2c3a:	f8d3 8000 	ldr.w	r8, [r3]
    2c3e:	2212      	movs	r2, #18
    2c40:	2301      	movs	r3, #1
    2c42:	47c0      	blx	r8
	if (gpio_pin_configure(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN,
    2c44:	4605      	mov	r5, r0
    2c46:	b160      	cbz	r0, 2c62 <st7789v_init+0x102>
		LOG_ERR("Couldn't configure cmd/DATA pin");
    2c48:	2301      	movs	r3, #1
    2c4a:	f04f 0100 	mov.w	r1, #0
    2c4e:	f363 0107 	bfi	r1, r3, #0, #8
    2c52:	4a65      	ldr	r2, [pc, #404]	; (2de8 <st7789v_init+0x288>)
    2c54:	4b65      	ldr	r3, [pc, #404]	; (2dec <st7789v_init+0x28c>)
    2c56:	486c      	ldr	r0, [pc, #432]	; (2e08 <st7789v_init+0x2a8>)
    2c58:	1a9b      	subs	r3, r3, r2
    2c5a:	08db      	lsrs	r3, r3, #3
    2c5c:	f363 118f 	bfi	r1, r3, #6, #10
    2c60:	e7d2      	b.n	2c08 <st7789v_init+0xa8>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 1);
    2c62:	2201      	movs	r2, #1
    2c64:	211a      	movs	r1, #26
    2c66:	69e0      	ldr	r0, [r4, #28]
    2c68:	f015 fecc 	bl	18a04 <gpio_pin_write>
	k_sleep(K_MSEC(1));
    2c6c:	2001      	movs	r0, #1
    2c6e:	f015 feb7 	bl	189e0 <k_sleep>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 0);
    2c72:	462a      	mov	r2, r5
    2c74:	211a      	movs	r1, #26
    2c76:	69e0      	ldr	r0, [r4, #28]
    2c78:	f015 fec4 	bl	18a04 <gpio_pin_write>
	k_sleep(K_MSEC(6));
    2c7c:	2006      	movs	r0, #6
    2c7e:	f015 feaf 	bl	189e0 <k_sleep>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 1);
    2c82:	2201      	movs	r2, #1
    2c84:	211a      	movs	r1, #26
    2c86:	69e0      	ldr	r0, [r4, #28]
    2c88:	f015 febc 	bl	18a04 <gpio_pin_write>
	k_sleep(K_MSEC(20));
    2c8c:	2014      	movs	r0, #20
    2c8e:	f015 fea7 	bl	189e0 <k_sleep>
	st7789v_blanking_on(dev);
    2c92:	4638      	mov	r0, r7
    2c94:	f015 fef3 	bl	18a7e <st7789v_blanking_on>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PORCTRL, st7789v_porch_param,
    2c98:	4620      	mov	r0, r4
	data->x_offset = x_offset;
    2c9a:	62a5      	str	r5, [r4, #40]	; 0x28
	st7789v_transmit(p_st7789v, ST7789V_CMD_PORCTRL, st7789v_porch_param,
    2c9c:	2305      	movs	r3, #5
    2c9e:	4a5b      	ldr	r2, [pc, #364]	; (2e0c <st7789v_init+0x2ac>)
    2ca0:	21b2      	movs	r1, #178	; 0xb2
    2ca2:	f015 febb 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_CMD2EN, st7789v_cmd2en_param,
    2ca6:	4620      	mov	r0, r4
    2ca8:	2304      	movs	r3, #4
    2caa:	4a59      	ldr	r2, [pc, #356]	; (2e10 <st7789v_init+0x2b0>)
    2cac:	21df      	movs	r1, #223	; 0xdf
    2cae:	f015 feb5 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
    2cb2:	f10d 0207 	add.w	r2, sp, #7
    2cb6:	4620      	mov	r0, r4
    2cb8:	2301      	movs	r3, #1
    2cba:	21ba      	movs	r1, #186	; 0xba
	tmp = 0x00;
    2cbc:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
    2cc0:	f015 feac 	bl	18a1c <st7789v_transmit>
	tmp = 0x0f;
    2cc4:	230f      	movs	r3, #15
    2cc6:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_FRCTRL2, &tmp, 1);
    2cca:	f10d 0207 	add.w	r2, sp, #7
    2cce:	4620      	mov	r0, r4
    2cd0:	2301      	movs	r3, #1
    2cd2:	21c6      	movs	r1, #198	; 0xc6
    2cd4:	f015 fea2 	bl	18a1c <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_GCTRL;
    2cd8:	2335      	movs	r3, #53	; 0x35
    2cda:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GCTRL, &tmp, 1);
    2cde:	f10d 0207 	add.w	r2, sp, #7
    2ce2:	4620      	mov	r0, r4
    2ce4:	2301      	movs	r3, #1
    2ce6:	21b7      	movs	r1, #183	; 0xb7
    2ce8:	f015 fe98 	bl	18a1c <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_VCOM;
    2cec:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VCOMS, &tmp, 1);
    2cf0:	f10d 0207 	add.w	r2, sp, #7
	tmp = 0x01;
    2cf4:	2601      	movs	r6, #1
	st7789v_transmit(p_st7789v, ST7789V_CMD_VCOMS, &tmp, 1);
    2cf6:	4620      	mov	r0, r4
    2cf8:	2301      	movs	r3, #1
    2cfa:	21bb      	movs	r1, #187	; 0xbb
    2cfc:	f015 fe8e 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
    2d00:	4633      	mov	r3, r6
    2d02:	f10d 0207 	add.w	r2, sp, #7
    2d06:	4620      	mov	r0, r4
    2d08:	21c2      	movs	r1, #194	; 0xc2
	tmp = 0x01;
    2d0a:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
    2d0e:	f015 fe85 	bl	18a1c <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_VRHS;
    2d12:	2312      	movs	r3, #18
    2d14:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VRH, &tmp, 1);
    2d18:	f10d 0207 	add.w	r2, sp, #7
    2d1c:	4633      	mov	r3, r6
    2d1e:	4620      	mov	r0, r4
    2d20:	21c3      	movs	r1, #195	; 0xc3
    2d22:	f015 fe7b 	bl	18a1c <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_VDVS;
    2d26:	2320      	movs	r3, #32
    2d28:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDS, &tmp, 1);
    2d2c:	f10d 0207 	add.w	r2, sp, #7
    2d30:	4633      	mov	r3, r6
    2d32:	4620      	mov	r0, r4
    2d34:	21c4      	movs	r1, #196	; 0xc4
    2d36:	f015 fe71 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PWCTRL1, st7789v_pwctrl1_param,
    2d3a:	4620      	mov	r0, r4
    2d3c:	2302      	movs	r3, #2
    2d3e:	4a35      	ldr	r2, [pc, #212]	; (2e14 <st7789v_init+0x2b4>)
    2d40:	21d0      	movs	r1, #208	; 0xd0
    2d42:	f015 fe6b 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
    2d46:	4633      	mov	r3, r6
    2d48:	f10d 0207 	add.w	r2, sp, #7
    2d4c:	4620      	mov	r0, r4
    2d4e:	2136      	movs	r1, #54	; 0x36
	tmp = DT_INST_0_SITRONIX_ST7789V_MDAC;
    2d50:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
    2d54:	f015 fe62 	bl	18a1c <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_COLMOD;
    2d58:	2305      	movs	r3, #5
    2d5a:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_COLMOD, &tmp, 1);
    2d5e:	f10d 0207 	add.w	r2, sp, #7
    2d62:	4633      	mov	r3, r6
    2d64:	4620      	mov	r0, r4
    2d66:	213a      	movs	r1, #58	; 0x3a
    2d68:	f015 fe58 	bl	18a1c <st7789v_transmit>
	tmp = DT_INST_0_SITRONIX_ST7789V_LCM;
    2d6c:	232c      	movs	r3, #44	; 0x2c
    2d6e:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_LCMCTRL, &tmp, 1);
    2d72:	f10d 0207 	add.w	r2, sp, #7
    2d76:	4633      	mov	r3, r6
    2d78:	4620      	mov	r0, r4
    2d7a:	21c0      	movs	r1, #192	; 0xc0
    2d7c:	f015 fe4e 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
    2d80:	4633      	mov	r3, r6
    2d82:	f10d 0207 	add.w	r2, sp, #7
    2d86:	4620      	mov	r0, r4
    2d88:	2126      	movs	r1, #38	; 0x26
	tmp = DT_INST_0_SITRONIX_ST7789V_GAMMA;
    2d8a:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
    2d8e:	f015 fe45 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_INV_ON, NULL, 0);
    2d92:	462b      	mov	r3, r5
    2d94:	462a      	mov	r2, r5
    2d96:	4620      	mov	r0, r4
    2d98:	2121      	movs	r1, #33	; 0x21
    2d9a:	f015 fe3f 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PVGAMCTRL, st7789v_pvgam_param,
    2d9e:	4620      	mov	r0, r4
    2da0:	230e      	movs	r3, #14
    2da2:	4a1d      	ldr	r2, [pc, #116]	; (2e18 <st7789v_init+0x2b8>)
    2da4:	21e0      	movs	r1, #224	; 0xe0
    2da6:	f015 fe39 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_NVGAMCTRL, st7789v_nvgam_param,
    2daa:	4620      	mov	r0, r4
    2dac:	230e      	movs	r3, #14
    2dae:	4a1b      	ldr	r2, [pc, #108]	; (2e1c <st7789v_init+0x2bc>)
    2db0:	21e1      	movs	r1, #225	; 0xe1
    2db2:	f015 fe33 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RAMCTRL, st7789v_ram_param,
    2db6:	4620      	mov	r0, r4
    2db8:	2302      	movs	r3, #2
    2dba:	4a19      	ldr	r2, [pc, #100]	; (2e20 <st7789v_init+0x2c0>)
    2dbc:	21b0      	movs	r1, #176	; 0xb0
    2dbe:	f015 fe2d 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
    2dc2:	4620      	mov	r0, r4
    2dc4:	2303      	movs	r3, #3
    2dc6:	4a17      	ldr	r2, [pc, #92]	; (2e24 <st7789v_init+0x2c4>)
    2dc8:	21b1      	movs	r1, #177	; 0xb1
    2dca:	f015 fe27 	bl	18a1c <st7789v_transmit>
	st7789v_transmit(data, ST7789V_CMD_SLEEP_OUT, NULL, 0);
    2dce:	4620      	mov	r0, r4
    2dd0:	462b      	mov	r3, r5
    2dd2:	462a      	mov	r2, r5
    2dd4:	2111      	movs	r1, #17
    2dd6:	f015 fe21 	bl	18a1c <st7789v_transmit>
	k_sleep(K_MSEC(120));
    2dda:	2078      	movs	r0, #120	; 0x78
    2ddc:	f015 fe00 	bl	189e0 <k_sleep>
    2de0:	e6d7      	b.n	2b92 <st7789v_init+0x32>
    2de2:	bf00      	nop
    2de4:	0001f45b 	.word	0x0001f45b
    2de8:	0001e448 	.word	0x0001e448
    2dec:	0001e530 	.word	0x0001e530
    2df0:	0001f461 	.word	0x0001f461
    2df4:	007a1200 	.word	0x007a1200
    2df8:	0001f28a 	.word	0x0001f28a
    2dfc:	0001f482 	.word	0x0001f482
    2e00:	0001f4ac 	.word	0x0001f4ac
    2e04:	0001f4c9 	.word	0x0001f4c9
    2e08:	0001f4f3 	.word	0x0001f4f3
    2e0c:	2000d0ec 	.word	0x2000d0ec
    2e10:	2000d0da 	.word	0x2000d0da
    2e14:	2000d0ff 	.word	0x2000d0ff
    2e18:	2000d0f1 	.word	0x2000d0f1
    2e1c:	2000d0de 	.word	0x2000d0de
    2e20:	2000d101 	.word	0x2000d101
    2e24:	2000d103 	.word	0x2000d103

00002e28 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    2e28:	4b0d      	ldr	r3, [pc, #52]	; (2e60 <rtc1_nrf_isr+0x38>)
    2e2a:	2200      	movs	r2, #0
    2e2c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    2e30:	f04f 0220 	mov.w	r2, #32
    2e34:	f3ef 8111 	mrs	r1, BASEPRI
    2e38:	f382 8811 	msr	BASEPRI, r2
    2e3c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    2e40:	4a08      	ldr	r2, [pc, #32]	; (2e64 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2e42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    2e46:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2e48:	1ac0      	subs	r0, r0, r3
    2e4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2e4e:	4403      	add	r3, r0
    2e50:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2e52:	f381 8811 	msr	BASEPRI, r1
    2e56:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    2e5a:	f014 bccd 	b.w	177f8 <z_clock_announce>
    2e5e:	bf00      	nop
    2e60:	40011000 	.word	0x40011000
    2e64:	20000148 	.word	0x20000148

00002e68 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    2e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2e6a:	481c      	ldr	r0, [pc, #112]	; (2edc <z_clock_driver_init+0x74>)
    2e6c:	f013 fcb2 	bl	167d4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    2e70:	b380      	cbz	r0, 2ed4 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    2e72:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    2e74:	4d1a      	ldr	r5, [pc, #104]	; (2ee0 <z_clock_driver_init+0x78>)
    2e76:	681b      	ldr	r3, [r3, #0]
    2e78:	2101      	movs	r1, #1
    2e7a:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    2e7c:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    2e7e:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    2e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    2e84:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    2e88:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    2e8c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2e90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2e94:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2e9c:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2ea2:	9b01      	ldr	r3, [sp, #4]
    2ea4:	4b0f      	ldr	r3, [pc, #60]	; (2ee4 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    2ea6:	4631      	mov	r1, r6
    2ea8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2eac:	2011      	movs	r0, #17
    2eae:	4622      	mov	r2, r4
    2eb0:	f000 f93a 	bl	3128 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    2eb4:	2011      	movs	r0, #17
    2eb6:	f000 f905 	bl	30c4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2eba:	4b0b      	ldr	r3, [pc, #44]	; (2ee8 <z_clock_driver_init+0x80>)
    2ebc:	601e      	str	r6, [r3, #0]
    2ebe:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    2ec0:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    2ec4:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2ec6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2eca:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    2ece:	4620      	mov	r0, r4
}
    2ed0:	b002      	add	sp, #8
    2ed2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2ed8:	e7fa      	b.n	2ed0 <z_clock_driver_init+0x68>
    2eda:	bf00      	nop
    2edc:	0001f43b 	.word	0x0001f43b
    2ee0:	40011000 	.word	0x40011000
    2ee4:	e000e100 	.word	0xe000e100
    2ee8:	40011008 	.word	0x40011008

00002eec <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    2eec:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    2eee:	4e25      	ldr	r6, [pc, #148]	; (2f84 <z_clock_set_timeout+0x98>)
    2ef0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2ef4:	bf08      	it	eq
    2ef6:	4630      	moveq	r0, r6
	__asm__ volatile(
    2ef8:	f04f 0320 	mov.w	r3, #32
    2efc:	f3ef 8511 	mrs	r5, BASEPRI
    2f00:	f383 8811 	msr	BASEPRI, r3
    2f04:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    2f08:	491f      	ldr	r1, [pc, #124]	; (2f88 <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    2f0a:	4b20      	ldr	r3, [pc, #128]	; (2f8c <z_clock_set_timeout+0xa0>)
    2f0c:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
    2f10:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    2f12:	1ae2      	subs	r2, r4, r3
    2f14:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    2f18:	0212      	lsls	r2, r2, #8
    2f1a:	d419      	bmi.n	2f50 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    2f1c:	1e42      	subs	r2, r0, #1
    2f1e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    2f22:	42b2      	cmp	r2, r6
    2f24:	bfa8      	it	ge
    2f26:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2f28:	1c78      	adds	r0, r7, #1
    2f2a:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    2f2c:	42b0      	cmp	r0, r6
    2f2e:	bf94      	ite	ls
    2f30:	1818      	addls	r0, r3, r0
    2f32:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    2f34:	1b04      	subs	r4, r0, r4
    2f36:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2f3a:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    2f3e:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
    2f40:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    2f44:	d906      	bls.n	2f54 <z_clock_set_timeout+0x68>
	__asm__ volatile(
    2f46:	f385 8811 	msr	BASEPRI, r5
    2f4a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    2f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
    2f50:	2200      	movs	r2, #0
    2f52:	e7e9      	b.n	2f28 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    2f54:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    2f58:	4a0d      	ldr	r2, [pc, #52]	; (2f90 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    2f5a:	1ac3      	subs	r3, r0, r3
    2f5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    2f60:	1e5c      	subs	r4, r3, #1
    2f62:	4294      	cmp	r4, r2
    2f64:	d905      	bls.n	2f72 <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f66:	4b0b      	ldr	r3, [pc, #44]	; (2f94 <z_clock_set_timeout+0xa8>)
    2f68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2f6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2f70:	e7e9      	b.n	2f46 <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
    2f72:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    2f74:	bf02      	ittt	eq
    2f76:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2f78:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2f7c:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    2f80:	e7e1      	b.n	2f46 <z_clock_set_timeout+0x5a>
    2f82:	bf00      	nop
    2f84:	00fffffe 	.word	0x00fffffe
    2f88:	40011000 	.word	0x40011000
    2f8c:	20000148 	.word	0x20000148
    2f90:	007ffffe 	.word	0x007ffffe
    2f94:	e000e100 	.word	0xe000e100

00002f98 <z_clock_elapsed>:
	__asm__ volatile(
    2f98:	f04f 0220 	mov.w	r2, #32
    2f9c:	f3ef 8311 	mrs	r3, BASEPRI
    2fa0:	f382 8811 	msr	BASEPRI, r2
    2fa4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    2fa8:	4a06      	ldr	r2, [pc, #24]	; (2fc4 <z_clock_elapsed+0x2c>)
    2faa:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2fae:	4a06      	ldr	r2, [pc, #24]	; (2fc8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    2fb0:	6812      	ldr	r2, [r2, #0]
    2fb2:	1a80      	subs	r0, r0, r2
    2fb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    2fb8:	f383 8811 	msr	BASEPRI, r3
    2fbc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2fc0:	4770      	bx	lr
    2fc2:	bf00      	nop
    2fc4:	40011000 	.word	0x40011000
    2fc8:	20000148 	.word	0x20000148

00002fcc <z_timer_cycle_get_32>:
	__asm__ volatile(
    2fcc:	f04f 0320 	mov.w	r3, #32
    2fd0:	f3ef 8211 	mrs	r2, BASEPRI
    2fd4:	f383 8811 	msr	BASEPRI, r3
    2fd8:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    2fdc:	4906      	ldr	r1, [pc, #24]	; (2ff8 <z_timer_cycle_get_32+0x2c>)
    2fde:	4b07      	ldr	r3, [pc, #28]	; (2ffc <z_timer_cycle_get_32+0x30>)
    2fe0:	6808      	ldr	r0, [r1, #0]
    2fe2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    2fe6:	f382 8811 	msr	BASEPRI, r2
    2fea:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    2fee:	1a1b      	subs	r3, r3, r0
    2ff0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    2ff4:	4418      	add	r0, r3
    2ff6:	4770      	bx	lr
    2ff8:	20000148 	.word	0x20000148
    2ffc:	40011000 	.word	0x40011000

00003000 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    3000:	4804      	ldr	r0, [pc, #16]	; (3014 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    3002:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    3004:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    3006:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    3008:	d003      	beq.n	3012 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    300a:	4903      	ldr	r1, [pc, #12]	; (3018 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    300c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    3010:	600a      	str	r2, [r1, #0]

00003012 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    3012:	4770      	bx	lr
    ldr r0, =_kernel
    3014:	20005c2c 	.word	0x20005c2c
    ldr r1, =_SCS_ICSR
    3018:	e000ed04 	.word	0xe000ed04

0000301c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    301c:	4a09      	ldr	r2, [pc, #36]	; (3044 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    301e:	490a      	ldr	r1, [pc, #40]	; (3048 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3020:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3022:	6809      	ldr	r1, [r1, #0]
    3024:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3026:	4909      	ldr	r1, [pc, #36]	; (304c <arch_swap+0x30>)
	_current->arch.basepri = key;
    3028:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    302a:	684b      	ldr	r3, [r1, #4]
    302c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3030:	604b      	str	r3, [r1, #4]
    3032:	2300      	movs	r3, #0
    3034:	f383 8811 	msr	BASEPRI, r3
    3038:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    303c:	6893      	ldr	r3, [r2, #8]
}
    303e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    3040:	4770      	bx	lr
    3042:	bf00      	nop
    3044:	20005c2c 	.word	0x20005c2c
    3048:	0001f02c 	.word	0x0001f02c
    304c:	e000ed00 	.word	0xe000ed00

00003050 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3050:	4912      	ldr	r1, [pc, #72]	; (309c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3052:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3054:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    3058:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    305a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    305e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3062:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3064:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3068:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    306c:	4f0c      	ldr	r7, [pc, #48]	; (30a0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    306e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3072:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    3074:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3076:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3078:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    307a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    307c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    307e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3082:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3084:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3086:	f015 fd82 	bl	18b8e <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    308a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    308e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    3092:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3096:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    309a:	4770      	bx	lr
    ldr r1, =_kernel
    309c:	20005c2c 	.word	0x20005c2c
    ldr v4, =_SCS_ICSR
    30a0:	e000ed04 	.word	0xe000ed04

000030a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    30a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    30a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    30aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    30ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    30b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    30b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    30b8:	2902      	cmp	r1, #2
    beq _oops
    30ba:	d0ff      	beq.n	30bc <_oops>

000030bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    30bc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    30be:	f015 fd5b 	bl	18b78 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    30c2:	bd01      	pop	{r0, pc}

000030c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    30c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    30c6:	2b00      	cmp	r3, #0
    30c8:	db08      	blt.n	30dc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30ca:	2201      	movs	r2, #1
    30cc:	f000 001f 	and.w	r0, r0, #31
    30d0:	fa02 f000 	lsl.w	r0, r2, r0
    30d4:	095b      	lsrs	r3, r3, #5
    30d6:	4a02      	ldr	r2, [pc, #8]	; (30e0 <arch_irq_enable+0x1c>)
    30d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	e000e100 	.word	0xe000e100

000030e4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    30e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    30e6:	2b00      	cmp	r3, #0
    30e8:	db0d      	blt.n	3106 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30ea:	2201      	movs	r2, #1
    30ec:	095b      	lsrs	r3, r3, #5
    30ee:	f000 001f 	and.w	r0, r0, #31
    30f2:	fa02 f000 	lsl.w	r0, r2, r0
    30f6:	3320      	adds	r3, #32
    30f8:	4a03      	ldr	r2, [pc, #12]	; (3108 <arch_irq_disable+0x24>)
    30fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    30fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3102:	f3bf 8f6f 	isb	sy
}
    3106:	4770      	bx	lr
    3108:	e000e100 	.word	0xe000e100

0000310c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    310c:	0942      	lsrs	r2, r0, #5
    310e:	4b05      	ldr	r3, [pc, #20]	; (3124 <arch_irq_is_enabled+0x18>)
    3110:	f000 001f 	and.w	r0, r0, #31
    3114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3118:	2301      	movs	r3, #1
    311a:	fa03 f000 	lsl.w	r0, r3, r0
}
    311e:	4010      	ands	r0, r2
    3120:	4770      	bx	lr
    3122:	bf00      	nop
    3124:	e000e100 	.word	0xe000e100

00003128 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3128:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    312a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    312c:	bfa8      	it	ge
    312e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    3132:	f101 0101 	add.w	r1, r1, #1
    3136:	ea4f 1141 	mov.w	r1, r1, lsl #5
    313a:	bfae      	itee	ge
    313c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3140:	f000 000f 	andlt.w	r0, r0, #15
    3144:	4b03      	ldrlt	r3, [pc, #12]	; (3154 <z_arm_irq_priority_set+0x2c>)
    3146:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3148:	bfac      	ite	ge
    314a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    314e:	5419      	strblt	r1, [r3, r0]
}
    3150:	4770      	bx	lr
    3152:	bf00      	nop
    3154:	e000ed14 	.word	0xe000ed14

00003158 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    3158:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    315a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    315c:	4b04      	ldr	r3, [pc, #16]	; (3170 <_arch_isr_direct_pm+0x18>)
    315e:	6a18      	ldr	r0, [r3, #32]
    3160:	b118      	cbz	r0, 316a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    3162:	2200      	movs	r2, #0
    3164:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    3166:	f01a fc28 	bl	1d9ba <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    316a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    316c:	bd08      	pop	{r3, pc}
    316e:	bf00      	nop
    3170:	20005c2c 	.word	0x20005c2c

00003174 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    3174:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3176:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    3178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    317a:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
    317c:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    317e:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
    3180:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    3182:	f01a fe3e 	bl	1de02 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    3186:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    318a:	4a0a      	ldr	r2, [pc, #40]	; (31b4 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    318c:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    3190:	f022 0201 	bic.w	r2, r2, #1
    3194:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    3196:	9a06      	ldr	r2, [sp, #24]
    3198:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    319a:	9a07      	ldr	r2, [sp, #28]
    319c:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    319e:	9a08      	ldr	r2, [sp, #32]
    31a0:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    31a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    31a6:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    31a8:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    31aa:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    31ac:	2300      	movs	r3, #0
    31ae:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    31b0:	b002      	add	sp, #8
    31b2:	bd70      	pop	{r4, r5, r6, pc}
    31b4:	0001814f 	.word	0x0001814f

000031b8 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    31b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ba:	4605      	mov	r5, r0
    31bc:	460c      	mov	r4, r1
    31be:	4617      	mov	r7, r2
    31c0:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    31c2:	f000 fb93 	bl	38ec <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    31c6:	4b0a      	ldr	r3, [pc, #40]	; (31f0 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    31c8:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    31ca:	4628      	mov	r0, r5
	_current = main_thread;
    31cc:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    31ce:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    31d2:	f015 fcdc 	bl	18b8e <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    31d6:	4630      	mov	r0, r6
    31d8:	f384 8809 	msr	PSP, r4
    31dc:	2100      	movs	r1, #0
    31de:	b663      	cpsie	if
    31e0:	f381 8811 	msr	BASEPRI, r1
    31e4:	f3bf 8f6f 	isb	sy
    31e8:	2200      	movs	r2, #0
    31ea:	2300      	movs	r3, #0
    31ec:	f014 ffaf 	bl	1814e <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    31f0:	20005c2c 	.word	0x20005c2c

000031f4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    31f4:	4901      	ldr	r1, [pc, #4]	; (31fc <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    31f6:	2210      	movs	r2, #16
	str r2, [r1]
    31f8:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    31fa:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    31fc:	e000ed10 	.word	0xe000ed10

00003200 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    3200:	4040      	eors	r0, r0
	msr BASEPRI, r0
    3202:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    3206:	bf30      	wfi

	bx lr
    3208:	4770      	bx	lr
    320a:	bf00      	nop

0000320c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    320c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3210:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    3214:	4672      	mov	r2, lr

	push {r0, lr}
    3216:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    3218:	f000 fa46 	bl	36a8 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    321c:	bd01      	pop	{r0, pc}
    321e:	bf00      	nop

00003220 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3220:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3222:	4606      	mov	r6, r0

	if (esf != NULL) {
    3224:	460c      	mov	r4, r1
    3226:	2900      	cmp	r1, #0
    3228:	d038      	beq.n	329c <z_arm_fatal_error+0x7c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    322a:	2201      	movs	r2, #1
    322c:	f04f 0300 	mov.w	r3, #0
    3230:	f362 0307 	bfi	r3, r2, #0, #8
    3234:	4d1d      	ldr	r5, [pc, #116]	; (32ac <z_arm_fatal_error+0x8c>)
    3236:	4a1e      	ldr	r2, [pc, #120]	; (32b0 <z_arm_fatal_error+0x90>)
    3238:	481e      	ldr	r0, [pc, #120]	; (32b4 <z_arm_fatal_error+0x94>)
    323a:	1aad      	subs	r5, r5, r2
    323c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    3240:	f365 138f 	bfi	r3, r5, #6, #10
    3244:	f8ad 3000 	strh.w	r3, [sp]
    3248:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    324c:	6809      	ldr	r1, [r1, #0]
    324e:	f015 f9f8 	bl	18642 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3252:	2201      	movs	r2, #1
    3254:	f04f 0300 	mov.w	r3, #0
    3258:	f362 0307 	bfi	r3, r2, #0, #8
    325c:	f365 138f 	bfi	r3, r5, #6, #10
    3260:	f8ad 3000 	strh.w	r3, [sp]
    3264:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    3268:	68e1      	ldr	r1, [r4, #12]
    326a:	4813      	ldr	r0, [pc, #76]	; (32b8 <z_arm_fatal_error+0x98>)
    326c:	f015 f9e9 	bl	18642 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3270:	2301      	movs	r3, #1
    3272:	f04f 0200 	mov.w	r2, #0
    3276:	f363 0207 	bfi	r2, r3, #0, #8
    327a:	f365 128f 	bfi	r2, r5, #6, #10
    327e:	69e1      	ldr	r1, [r4, #28]
    3280:	480e      	ldr	r0, [pc, #56]	; (32bc <z_arm_fatal_error+0x9c>)
    3282:	f015 f9b2 	bl	185ea <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3286:	f04f 0200 	mov.w	r2, #0
    328a:	2301      	movs	r3, #1
    328c:	f363 0207 	bfi	r2, r3, #0, #8
    3290:	f365 128f 	bfi	r2, r5, #6, #10
    3294:	69a1      	ldr	r1, [r4, #24]
    3296:	480a      	ldr	r0, [pc, #40]	; (32c0 <z_arm_fatal_error+0xa0>)
    3298:	f015 f9a7 	bl	185ea <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    329c:	4621      	mov	r1, r4
    329e:	4630      	mov	r0, r6
}
    32a0:	b002      	add	sp, #8
    32a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    32a6:	f013 bad7 	b.w	16858 <z_fatal_error>
    32aa:	bf00      	nop
    32ac:	0001e560 	.word	0x0001e560
    32b0:	0001e448 	.word	0x0001e448
    32b4:	0001f57e 	.word	0x0001f57e
    32b8:	0001f5ad 	.word	0x0001f5ad
    32bc:	0001f5dc 	.word	0x0001f5dc
    32c0:	0001f5eb 	.word	0x0001f5eb

000032c4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    32c4:	bf30      	wfi
    b z_SysNmiOnReset
    32c6:	f7ff bffd 	b.w	32c4 <z_SysNmiOnReset>
    32ca:	bf00      	nop

000032cc <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    32cc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    32ce:	4b08      	ldr	r3, [pc, #32]	; (32f0 <z_arm_prep_c+0x24>)
    32d0:	4a08      	ldr	r2, [pc, #32]	; (32f4 <z_arm_prep_c+0x28>)
    32d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    32d6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    32d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32dc:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    32e0:	f013 fb38 	bl	16954 <z_bss_zero>
	z_data_copy();
    32e4:	f013 fb40 	bl	16968 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    32e8:	f000 face 	bl	3888 <z_arm_int_lib_init>
	z_cstart();
    32ec:	f013 fb6e 	bl	169cc <z_cstart>
    32f0:	00000000 	.word	0x00000000
    32f4:	e000ed00 	.word	0xe000ed00

000032f8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    32f8:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    32fa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    32fc:	4a0b      	ldr	r2, [pc, #44]	; (332c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    32fe:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    3300:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3302:	bf1e      	ittt	ne
	movne	r1, #0
    3304:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3306:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    3308:	f01a fb57 	blne	1d9ba <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    330c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    330e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3312:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3316:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    331a:	4905      	ldr	r1, [pc, #20]	; (3330 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    331c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    331e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    3320:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3322:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3326:	4903      	ldr	r1, [pc, #12]	; (3334 <_isr_wrapper+0x3c>)
	bx r1
    3328:	4708      	bx	r1
    332a:	0000      	.short	0x0000
	ldr r2, =_kernel
    332c:	20005c2c 	.word	0x20005c2c
	ldr r1, =_sw_isr_table
    3330:	0001e22c 	.word	0x0001e22c
	ldr r1, =z_arm_int_exit
    3334:	00003001 	.word	0x00003001

00003338 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3338:	f015 fec0 	bl	190bc <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    333c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    333e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    3342:	4808      	ldr	r0, [pc, #32]	; (3364 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    3344:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3348:	1840      	adds	r0, r0, r1
    msr PSP, r0
    334a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    334e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3352:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3354:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3356:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    335a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    335e:	f7ff ffb5 	bl	32cc <z_arm_prep_c>
    3362:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    3364:	2000b488 	.word	0x2000b488

00003368 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3368:	2301      	movs	r3, #1
    336a:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    336e:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3370:	f363 0107 	bfi	r1, r3, #0, #8
    3374:	4c33      	ldr	r4, [pc, #204]	; (3444 <usage_fault.isra.2+0xdc>)
    3376:	4b34      	ldr	r3, [pc, #208]	; (3448 <usage_fault.isra.2+0xe0>)
    3378:	4834      	ldr	r0, [pc, #208]	; (344c <usage_fault.isra.2+0xe4>)
    337a:	1ae4      	subs	r4, r4, r3
    337c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    3380:	f364 118f 	bfi	r1, r4, #6, #10
    3384:	f015 f924 	bl	185d0 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3388:	4b31      	ldr	r3, [pc, #196]	; (3450 <usage_fault.isra.2+0xe8>)
    338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    338c:	019a      	lsls	r2, r3, #6
    338e:	d509      	bpl.n	33a4 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    3390:	f04f 0100 	mov.w	r1, #0
    3394:	2301      	movs	r3, #1
    3396:	f363 0107 	bfi	r1, r3, #0, #8
    339a:	f364 118f 	bfi	r1, r4, #6, #10
    339e:	482d      	ldr	r0, [pc, #180]	; (3454 <usage_fault.isra.2+0xec>)
    33a0:	f015 f916 	bl	185d0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    33a4:	4b2a      	ldr	r3, [pc, #168]	; (3450 <usage_fault.isra.2+0xe8>)
    33a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33a8:	01db      	lsls	r3, r3, #7
    33aa:	d509      	bpl.n	33c0 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    33ac:	f04f 0100 	mov.w	r1, #0
    33b0:	2301      	movs	r3, #1
    33b2:	f363 0107 	bfi	r1, r3, #0, #8
    33b6:	f364 118f 	bfi	r1, r4, #6, #10
    33ba:	4827      	ldr	r0, [pc, #156]	; (3458 <usage_fault.isra.2+0xf0>)
    33bc:	f015 f908 	bl	185d0 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    33c0:	4b23      	ldr	r3, [pc, #140]	; (3450 <usage_fault.isra.2+0xe8>)
    33c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33c4:	0318      	lsls	r0, r3, #12
    33c6:	d509      	bpl.n	33dc <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  No coprocessor instructions");
    33c8:	f04f 0100 	mov.w	r1, #0
    33cc:	2301      	movs	r3, #1
    33ce:	f363 0107 	bfi	r1, r3, #0, #8
    33d2:	f364 118f 	bfi	r1, r4, #6, #10
    33d6:	4821      	ldr	r0, [pc, #132]	; (345c <usage_fault.isra.2+0xf4>)
    33d8:	f015 f8fa 	bl	185d0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    33dc:	4b1c      	ldr	r3, [pc, #112]	; (3450 <usage_fault.isra.2+0xe8>)
    33de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33e0:	0359      	lsls	r1, r3, #13
    33e2:	d509      	bpl.n	33f8 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    33e4:	f04f 0100 	mov.w	r1, #0
    33e8:	2301      	movs	r3, #1
    33ea:	f363 0107 	bfi	r1, r3, #0, #8
    33ee:	f364 118f 	bfi	r1, r4, #6, #10
    33f2:	481b      	ldr	r0, [pc, #108]	; (3460 <usage_fault.isra.2+0xf8>)
    33f4:	f015 f8ec 	bl	185d0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    33f8:	4b15      	ldr	r3, [pc, #84]	; (3450 <usage_fault.isra.2+0xe8>)
    33fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33fc:	039a      	lsls	r2, r3, #14
    33fe:	d509      	bpl.n	3414 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3400:	f04f 0100 	mov.w	r1, #0
    3404:	2301      	movs	r3, #1
    3406:	f363 0107 	bfi	r1, r3, #0, #8
    340a:	f364 118f 	bfi	r1, r4, #6, #10
    340e:	4815      	ldr	r0, [pc, #84]	; (3464 <usage_fault.isra.2+0xfc>)
    3410:	f015 f8de 	bl	185d0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3414:	4b0e      	ldr	r3, [pc, #56]	; (3450 <usage_fault.isra.2+0xe8>)
    3416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3418:	03db      	lsls	r3, r3, #15
    341a:	d509      	bpl.n	3430 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    341c:	f04f 0100 	mov.w	r1, #0
    3420:	2301      	movs	r3, #1
    3422:	f363 0107 	bfi	r1, r3, #0, #8
    3426:	f364 118f 	bfi	r1, r4, #6, #10
    342a:	480f      	ldr	r0, [pc, #60]	; (3468 <usage_fault.isra.2+0x100>)
    342c:	f015 f8d0 	bl	185d0 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3430:	4a07      	ldr	r2, [pc, #28]	; (3450 <usage_fault.isra.2+0xe8>)
    3432:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3434:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3438:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    343c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    343e:	2000      	movs	r0, #0
    3440:	bd10      	pop	{r4, pc}
    3442:	bf00      	nop
    3444:	0001e560 	.word	0x0001e560
    3448:	0001e448 	.word	0x0001e448
    344c:	0001f779 	.word	0x0001f779
    3450:	e000ed00 	.word	0xe000ed00
    3454:	0001f791 	.word	0x0001f791
    3458:	0001f7a4 	.word	0x0001f7a4
    345c:	0001f7be 	.word	0x0001f7be
    3460:	0001f7dc 	.word	0x0001f7dc
    3464:	0001f801 	.word	0x0001f801
    3468:	0001f81b 	.word	0x0001f81b

0000346c <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    346e:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3470:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3472:	f04f 0100 	mov.w	r1, #0
    3476:	f363 0107 	bfi	r1, r3, #0, #8
    347a:	4c36      	ldr	r4, [pc, #216]	; (3554 <mem_manage_fault.isra.4+0xe8>)
    347c:	4b36      	ldr	r3, [pc, #216]	; (3558 <mem_manage_fault.isra.4+0xec>)
    347e:	1ae4      	subs	r4, r4, r3
    3480:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    3484:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3488:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    348a:	4834      	ldr	r0, [pc, #208]	; (355c <mem_manage_fault.isra.4+0xf0>)
    348c:	f015 f8a0 	bl	185d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3490:	4b33      	ldr	r3, [pc, #204]	; (3560 <mem_manage_fault.isra.4+0xf4>)
    3492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3494:	06d9      	lsls	r1, r3, #27
    3496:	d509      	bpl.n	34ac <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3498:	f04f 0100 	mov.w	r1, #0
    349c:	2301      	movs	r3, #1
    349e:	f363 0107 	bfi	r1, r3, #0, #8
    34a2:	f364 118f 	bfi	r1, r4, #6, #10
    34a6:	482f      	ldr	r0, [pc, #188]	; (3564 <mem_manage_fault.isra.4+0xf8>)
    34a8:	f015 f892 	bl	185d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    34ac:	4b2c      	ldr	r3, [pc, #176]	; (3560 <mem_manage_fault.isra.4+0xf4>)
    34ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34b0:	071a      	lsls	r2, r3, #28
    34b2:	d509      	bpl.n	34c8 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    34b4:	f04f 0100 	mov.w	r1, #0
    34b8:	2301      	movs	r3, #1
    34ba:	f363 0107 	bfi	r1, r3, #0, #8
    34be:	f364 118f 	bfi	r1, r4, #6, #10
    34c2:	4829      	ldr	r0, [pc, #164]	; (3568 <mem_manage_fault.isra.4+0xfc>)
    34c4:	f015 f884 	bl	185d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    34c8:	4d25      	ldr	r5, [pc, #148]	; (3560 <mem_manage_fault.isra.4+0xf4>)
    34ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    34cc:	079b      	lsls	r3, r3, #30
    34ce:	d51c      	bpl.n	350a <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    34d0:	2301      	movs	r3, #1
    34d2:	f04f 0100 	mov.w	r1, #0
    34d6:	f363 0107 	bfi	r1, r3, #0, #8
    34da:	f364 118f 	bfi	r1, r4, #6, #10
    34de:	4823      	ldr	r0, [pc, #140]	; (356c <mem_manage_fault.isra.4+0x100>)
    34e0:	f015 f876 	bl	185d0 <log_0>
		mmfar = SCB->MMFAR;
    34e4:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    34e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    34e8:	0618      	lsls	r0, r3, #24
    34ea:	d50e      	bpl.n	350a <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    34ec:	f04f 0200 	mov.w	r2, #0
    34f0:	2301      	movs	r3, #1
    34f2:	f363 0207 	bfi	r2, r3, #0, #8
    34f6:	f364 128f 	bfi	r2, r4, #6, #10
    34fa:	481d      	ldr	r0, [pc, #116]	; (3570 <mem_manage_fault.isra.4+0x104>)
    34fc:	f015 f875 	bl	185ea <log_1>
			if (from_hard_fault) {
    3500:	b11f      	cbz	r7, 350a <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3502:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3508:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    350a:	4b15      	ldr	r3, [pc, #84]	; (3560 <mem_manage_fault.isra.4+0xf4>)
    350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    350e:	07da      	lsls	r2, r3, #31
    3510:	d509      	bpl.n	3526 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    3512:	f04f 0100 	mov.w	r1, #0
    3516:	2301      	movs	r3, #1
    3518:	f363 0107 	bfi	r1, r3, #0, #8
    351c:	f364 118f 	bfi	r1, r4, #6, #10
    3520:	4814      	ldr	r0, [pc, #80]	; (3574 <mem_manage_fault.isra.4+0x108>)
    3522:	f015 f855 	bl	185d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3526:	4b0e      	ldr	r3, [pc, #56]	; (3560 <mem_manage_fault.isra.4+0xf4>)
    3528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    352a:	069b      	lsls	r3, r3, #26
    352c:	d509      	bpl.n	3542 <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    352e:	f04f 0100 	mov.w	r1, #0
    3532:	2301      	movs	r3, #1
    3534:	f363 0107 	bfi	r1, r3, #0, #8
    3538:	f364 118f 	bfi	r1, r4, #6, #10
    353c:	480e      	ldr	r0, [pc, #56]	; (3578 <mem_manage_fault.isra.4+0x10c>)
    353e:	f015 f847 	bl	185d0 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    3542:	4b07      	ldr	r3, [pc, #28]	; (3560 <mem_manage_fault.isra.4+0xf4>)
    3544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3548:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    354a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    354e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3550:	7030      	strb	r0, [r6, #0]
}
    3552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3554:	0001e560 	.word	0x0001e560
    3558:	0001e448 	.word	0x0001e448
    355c:	0001f6a1 	.word	0x0001f6a1
    3560:	e000ed00 	.word	0xe000ed00
    3564:	0001f6b7 	.word	0x0001f6b7
    3568:	0001f6ea 	.word	0x0001f6ea
    356c:	0001f6fd 	.word	0x0001f6fd
    3570:	0001f715 	.word	0x0001f715
    3574:	0001f72b 	.word	0x0001f72b
    3578:	0001f74a 	.word	0x0001f74a

0000357c <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    357e:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3580:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3582:	f04f 0100 	mov.w	r1, #0
    3586:	f363 0107 	bfi	r1, r3, #0, #8
    358a:	4c3c      	ldr	r4, [pc, #240]	; (367c <bus_fault.isra.5+0x100>)
    358c:	4b3c      	ldr	r3, [pc, #240]	; (3680 <bus_fault.isra.5+0x104>)
    358e:	1ae4      	subs	r4, r4, r3
    3590:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    3594:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3598:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    359a:	483a      	ldr	r0, [pc, #232]	; (3684 <bus_fault.isra.5+0x108>)
    359c:	f015 f818 	bl	185d0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    35a0:	4b39      	ldr	r3, [pc, #228]	; (3688 <bus_fault.isra.5+0x10c>)
    35a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35a4:	04d9      	lsls	r1, r3, #19
    35a6:	d509      	bpl.n	35bc <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    35a8:	f04f 0100 	mov.w	r1, #0
    35ac:	2301      	movs	r3, #1
    35ae:	f363 0107 	bfi	r1, r3, #0, #8
    35b2:	f364 118f 	bfi	r1, r4, #6, #10
    35b6:	4835      	ldr	r0, [pc, #212]	; (368c <bus_fault.isra.5+0x110>)
    35b8:	f015 f80a 	bl	185d0 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    35bc:	4b32      	ldr	r3, [pc, #200]	; (3688 <bus_fault.isra.5+0x10c>)
    35be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35c0:	051a      	lsls	r2, r3, #20
    35c2:	d509      	bpl.n	35d8 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    35c4:	f04f 0100 	mov.w	r1, #0
    35c8:	2301      	movs	r3, #1
    35ca:	f363 0107 	bfi	r1, r3, #0, #8
    35ce:	f364 118f 	bfi	r1, r4, #6, #10
    35d2:	482f      	ldr	r0, [pc, #188]	; (3690 <bus_fault.isra.5+0x114>)
    35d4:	f014 fffc 	bl	185d0 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    35d8:	4d2b      	ldr	r5, [pc, #172]	; (3688 <bus_fault.isra.5+0x10c>)
    35da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    35dc:	059b      	lsls	r3, r3, #22
    35de:	d51c      	bpl.n	361a <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    35e0:	2301      	movs	r3, #1
    35e2:	f04f 0100 	mov.w	r1, #0
    35e6:	f363 0107 	bfi	r1, r3, #0, #8
    35ea:	f364 118f 	bfi	r1, r4, #6, #10
    35ee:	4829      	ldr	r0, [pc, #164]	; (3694 <bus_fault.isra.5+0x118>)
    35f0:	f014 ffee 	bl	185d0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    35f4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    35f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    35f8:	0418      	lsls	r0, r3, #16
    35fa:	d50e      	bpl.n	361a <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    35fc:	f04f 0200 	mov.w	r2, #0
    3600:	2301      	movs	r3, #1
    3602:	f363 0207 	bfi	r2, r3, #0, #8
    3606:	f364 128f 	bfi	r2, r4, #6, #10
    360a:	4823      	ldr	r0, [pc, #140]	; (3698 <bus_fault.isra.5+0x11c>)
    360c:	f014 ffed 	bl	185ea <log_1>
			if (from_hard_fault) {
    3610:	b11f      	cbz	r7, 361a <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3612:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3614:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3618:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    361a:	4b1b      	ldr	r3, [pc, #108]	; (3688 <bus_fault.isra.5+0x10c>)
    361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    361e:	0559      	lsls	r1, r3, #21
    3620:	d509      	bpl.n	3636 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    3622:	f04f 0100 	mov.w	r1, #0
    3626:	2301      	movs	r3, #1
    3628:	f363 0107 	bfi	r1, r3, #0, #8
    362c:	f364 118f 	bfi	r1, r4, #6, #10
    3630:	481a      	ldr	r0, [pc, #104]	; (369c <bus_fault.isra.5+0x120>)
    3632:	f014 ffcd 	bl	185d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3636:	4b14      	ldr	r3, [pc, #80]	; (3688 <bus_fault.isra.5+0x10c>)
    3638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    363a:	05d2      	lsls	r2, r2, #23
    363c:	d511      	bpl.n	3662 <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    363e:	f04f 0100 	mov.w	r1, #0
    3642:	2301      	movs	r3, #1
    3644:	f363 0107 	bfi	r1, r3, #0, #8
    3648:	4815      	ldr	r0, [pc, #84]	; (36a0 <bus_fault.isra.5+0x124>)
    364a:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    364e:	f014 ffbf 	bl	185d0 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3652:	4a0d      	ldr	r2, [pc, #52]	; (3688 <bus_fault.isra.5+0x10c>)
    3654:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3656:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3658:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    365c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    365e:	7030      	strb	r0, [r6, #0]
}
    3660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3664:	049b      	lsls	r3, r3, #18
    3666:	d5f4      	bpl.n	3652 <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3668:	f04f 0100 	mov.w	r1, #0
    366c:	2301      	movs	r3, #1
    366e:	f363 0107 	bfi	r1, r3, #0, #8
    3672:	f364 118f 	bfi	r1, r4, #6, #10
    3676:	480b      	ldr	r0, [pc, #44]	; (36a4 <bus_fault.isra.5+0x128>)
    3678:	e7e9      	b.n	364e <bus_fault.isra.5+0xd2>
    367a:	bf00      	nop
    367c:	0001e560 	.word	0x0001e560
    3680:	0001e448 	.word	0x0001e448
    3684:	0001f619 	.word	0x0001f619
    3688:	e000ed00 	.word	0xe000ed00
    368c:	0001f62f 	.word	0x0001f62f
    3690:	0001f6ea 	.word	0x0001f6ea
    3694:	0001f640 	.word	0x0001f640
    3698:	0001f659 	.word	0x0001f659
    369c:	0001f66e 	.word	0x0001f66e
    36a0:	0001f689 	.word	0x0001f689
    36a4:	0001f74a 	.word	0x0001f74a

000036a8 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    36a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    36ac:	4b64      	ldr	r3, [pc, #400]	; (3840 <z_arm_fault+0x198>)
    36ae:	685e      	ldr	r6, [r3, #4]
{
    36b0:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    36b2:	f3c6 0408 	ubfx	r4, r6, #0, #9
    36b6:	2500      	movs	r5, #0
    36b8:	f385 8811 	msr	BASEPRI, r5
    36bc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    36c0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    36c4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    36c8:	d111      	bne.n	36ee <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    36ca:	f002 030c 	and.w	r3, r2, #12
    36ce:	2b08      	cmp	r3, #8
    36d0:	d10f      	bne.n	36f2 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    36d2:	2301      	movs	r3, #1
    36d4:	f04f 0100 	mov.w	r1, #0
    36d8:	f363 0107 	bfi	r1, r3, #0, #8
    36dc:	4a59      	ldr	r2, [pc, #356]	; (3844 <z_arm_fault+0x19c>)
    36de:	4b5a      	ldr	r3, [pc, #360]	; (3848 <z_arm_fault+0x1a0>)
    36e0:	485a      	ldr	r0, [pc, #360]	; (384c <z_arm_fault+0x1a4>)
    36e2:	1a9b      	subs	r3, r3, r2
    36e4:	08db      	lsrs	r3, r3, #3
    36e6:	f363 118f 	bfi	r1, r3, #6, #10
    36ea:	f014 ff71 	bl	185d0 <log_0>
		return NULL;
    36ee:	462f      	mov	r7, r5
    36f0:	e004      	b.n	36fc <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    36f2:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    36f4:	bf4e      	itee	mi
    36f6:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    36f8:	4607      	movpl	r7, r0
			*nested_exc = true;
    36fa:	2501      	movpl	r5, #1
	*recoverable = false;
    36fc:	2300      	movs	r3, #0
    36fe:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    3702:	1ee3      	subs	r3, r4, #3
    3704:	2b09      	cmp	r3, #9
    3706:	d87f      	bhi.n	3808 <z_arm_fault+0x160>
    3708:	e8df f003 	tbb	[pc, r3]
    370c:	4c6d6905 	.word	0x4c6d6905
    3710:	7e7e7e7e 	.word	0x7e7e7e7e
    3714:	717e      	.short	0x717e
	PR_FAULT_INFO("***** HARD FAULT *****");
    3716:	2301      	movs	r3, #1
    3718:	f04f 0100 	mov.w	r1, #0
    371c:	f363 0107 	bfi	r1, r3, #0, #8
    3720:	4e49      	ldr	r6, [pc, #292]	; (3848 <z_arm_fault+0x1a0>)
    3722:	4b48      	ldr	r3, [pc, #288]	; (3844 <z_arm_fault+0x19c>)
    3724:	484a      	ldr	r0, [pc, #296]	; (3850 <z_arm_fault+0x1a8>)
    3726:	1af6      	subs	r6, r6, r3
    3728:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    372c:	f366 118f 	bfi	r1, r6, #6, #10
    3730:	f014 ff4e 	bl	185d0 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3734:	4b42      	ldr	r3, [pc, #264]	; (3840 <z_arm_fault+0x198>)
    3736:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    3738:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    373c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    3740:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3744:	d00b      	beq.n	375e <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    3746:	f04f 0100 	mov.w	r1, #0
    374a:	2301      	movs	r3, #1
    374c:	f363 0107 	bfi	r1, r3, #0, #8
    3750:	4840      	ldr	r0, [pc, #256]	; (3854 <z_arm_fault+0x1ac>)
    3752:	f366 118f 	bfi	r1, r6, #6, #10
	PR_FAULT_INFO(
    3756:	f014 ff3b 	bl	185d0 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    375a:	2400      	movs	r4, #0
    375c:	e025      	b.n	37aa <z_arm_fault+0x102>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3760:	005b      	lsls	r3, r3, #1
    3762:	d522      	bpl.n	37aa <z_arm_fault+0x102>
		PR_EXC("  Fault escalation (see below)");
    3764:	2301      	movs	r3, #1
    3766:	f04f 0100 	mov.w	r1, #0
    376a:	f363 0107 	bfi	r1, r3, #0, #8
    376e:	f366 118f 	bfi	r1, r6, #6, #10
    3772:	4839      	ldr	r0, [pc, #228]	; (3858 <z_arm_fault+0x1b0>)
    3774:	f014 ff2c 	bl	185d0 <log_0>
		if (SCB_MMFSR != 0) {
    3778:	4b38      	ldr	r3, [pc, #224]	; (385c <z_arm_fault+0x1b4>)
    377a:	781b      	ldrb	r3, [r3, #0]
    377c:	b12b      	cbz	r3, 378a <z_arm_fault+0xe2>
			reason = mem_manage_fault(esf, 1, recoverable);
    377e:	f10d 0107 	add.w	r1, sp, #7
    3782:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3784:	f7ff fe72 	bl	346c <mem_manage_fault.isra.4>
    3788:	e00e      	b.n	37a8 <z_arm_fault+0x100>
		} else if (SCB_BFSR != 0) {
    378a:	4b35      	ldr	r3, [pc, #212]	; (3860 <z_arm_fault+0x1b8>)
    378c:	781b      	ldrb	r3, [r3, #0]
    378e:	b12b      	cbz	r3, 379c <z_arm_fault+0xf4>
			reason = bus_fault(esf, 1, recoverable);
    3790:	f10d 0107 	add.w	r1, sp, #7
    3794:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3796:	f7ff fef1 	bl	357c <bus_fault.isra.5>
    379a:	e005      	b.n	37a8 <z_arm_fault+0x100>
		} else if (SCB_UFSR != 0) {
    379c:	4b31      	ldr	r3, [pc, #196]	; (3864 <z_arm_fault+0x1bc>)
    379e:	881b      	ldrh	r3, [r3, #0]
    37a0:	b29b      	uxth	r3, r3
    37a2:	b113      	cbz	r3, 37aa <z_arm_fault+0x102>
			reason = usage_fault(esf);
    37a4:	f7ff fde0 	bl	3368 <usage_fault.isra.2>
    37a8:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    37aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    37ae:	b99b      	cbnz	r3, 37d8 <z_arm_fault+0x130>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    37b0:	2220      	movs	r2, #32
    37b2:	4639      	mov	r1, r7
    37b4:	a802      	add	r0, sp, #8
    37b6:	f015 fa40 	bl	18c3a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    37ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37bc:	2d00      	cmp	r5, #0
    37be:	d03a      	beq.n	3836 <z_arm_fault+0x18e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    37c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    37c4:	b922      	cbnz	r2, 37d0 <z_arm_fault+0x128>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    37c6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    37ca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    37ce:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    37d0:	a902      	add	r1, sp, #8
    37d2:	4620      	mov	r0, r4
    37d4:	f7ff fd24 	bl	3220 <z_arm_fatal_error>
}
    37d8:	b00a      	add	sp, #40	; 0x28
    37da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    37de:	f10d 0107 	add.w	r1, sp, #7
    37e2:	2000      	movs	r0, #0
    37e4:	e7ce      	b.n	3784 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    37e6:	f10d 0107 	add.w	r1, sp, #7
    37ea:	2000      	movs	r0, #0
    37ec:	e7d3      	b.n	3796 <z_arm_fault+0xee>
	PR_FAULT_INFO(
    37ee:	2301      	movs	r3, #1
    37f0:	f04f 0100 	mov.w	r1, #0
    37f4:	f363 0107 	bfi	r1, r3, #0, #8
    37f8:	4a12      	ldr	r2, [pc, #72]	; (3844 <z_arm_fault+0x19c>)
    37fa:	4b13      	ldr	r3, [pc, #76]	; (3848 <z_arm_fault+0x1a0>)
    37fc:	481a      	ldr	r0, [pc, #104]	; (3868 <z_arm_fault+0x1c0>)
    37fe:	1a9b      	subs	r3, r3, r2
    3800:	08db      	lsrs	r3, r3, #3
    3802:	f363 118f 	bfi	r1, r3, #6, #10
    3806:	e7a6      	b.n	3756 <z_arm_fault+0xae>
	PR_FAULT_INFO("***** %s %d) *****",
    3808:	2201      	movs	r2, #1
    380a:	f04f 0300 	mov.w	r3, #0
    380e:	f362 0307 	bfi	r3, r2, #0, #8
    3812:	490d      	ldr	r1, [pc, #52]	; (3848 <z_arm_fault+0x1a0>)
    3814:	4a0b      	ldr	r2, [pc, #44]	; (3844 <z_arm_fault+0x19c>)
    3816:	4815      	ldr	r0, [pc, #84]	; (386c <z_arm_fault+0x1c4>)
    3818:	1a89      	subs	r1, r1, r2
    381a:	08c9      	lsrs	r1, r1, #3
    381c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    3820:	f361 138f 	bfi	r3, r1, #6, #10
    3824:	f1a4 0210 	sub.w	r2, r4, #16
    3828:	4911      	ldr	r1, [pc, #68]	; (3870 <z_arm_fault+0x1c8>)
    382a:	bf18      	it	ne
    382c:	4601      	movne	r1, r0
    382e:	4811      	ldr	r0, [pc, #68]	; (3874 <z_arm_fault+0x1cc>)
    3830:	f014 feef 	bl	18612 <log_2>
    3834:	e791      	b.n	375a <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3836:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    383a:	f023 0301 	bic.w	r3, r3, #1
    383e:	e7c6      	b.n	37ce <z_arm_fault+0x126>
    3840:	e000ed00 	.word	0xe000ed00
    3844:	0001e448 	.word	0x0001e448
    3848:	0001e560 	.word	0x0001e560
    384c:	0001f846 	.word	0x0001f846
    3850:	0001f871 	.word	0x0001f871
    3854:	0001f888 	.word	0x0001f888
    3858:	0001f8a9 	.word	0x0001f8a9
    385c:	e000ed28 	.word	0xe000ed28
    3860:	e000ed29 	.word	0xe000ed29
    3864:	e000ed2a 	.word	0xe000ed2a
    3868:	0001f8c8 	.word	0x0001f8c8
    386c:	0001f913 	.word	0x0001f913
    3870:	0001f8fe 	.word	0x0001f8fe
    3874:	0001f92c 	.word	0x0001f92c

00003878 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3878:	4a02      	ldr	r2, [pc, #8]	; (3884 <z_arm_fault_init+0xc>)
    387a:	6953      	ldr	r3, [r2, #20]
    387c:	f043 0310 	orr.w	r3, r3, #16
    3880:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3882:	4770      	bx	lr
    3884:	e000ed00 	.word	0xe000ed00

00003888 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3888:	4804      	ldr	r0, [pc, #16]	; (389c <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    388a:	2300      	movs	r3, #0
    388c:	2120      	movs	r1, #32
    388e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3890:	3301      	adds	r3, #1
    3892:	2b27      	cmp	r3, #39	; 0x27
    3894:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3898:	d1f9      	bne.n	388e <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    389a:	4770      	bx	lr
    389c:	e000e100 	.word	0xe000e100

000038a0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    38a0:	b538      	push	{r3, r4, r5, lr}
    38a2:	4605      	mov	r5, r0
	__asm__ volatile(
    38a4:	f04f 0320 	mov.w	r3, #32
    38a8:	f3ef 8411 	mrs	r4, BASEPRI
    38ac:	f383 8811 	msr	BASEPRI, r3
    38b0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    38b4:	f013 fbac 	bl	17010 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    38b8:	4b0a      	ldr	r3, [pc, #40]	; (38e4 <z_impl_k_thread_abort+0x44>)
    38ba:	689b      	ldr	r3, [r3, #8]
    38bc:	42ab      	cmp	r3, r5
    38be:	d10b      	bne.n	38d8 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    38c0:	4b09      	ldr	r3, [pc, #36]	; (38e8 <z_impl_k_thread_abort+0x48>)
    38c2:	685a      	ldr	r2, [r3, #4]
    38c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    38c8:	b912      	cbnz	r2, 38d0 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    38ca:	4620      	mov	r0, r4
    38cc:	f7ff fba6 	bl	301c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    38d0:	685a      	ldr	r2, [r3, #4]
    38d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    38d6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    38d8:	4620      	mov	r0, r4
}
    38da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    38de:	f01a b9d2 	b.w	1dc86 <z_reschedule_irqlock>
    38e2:	bf00      	nop
    38e4:	20005c2c 	.word	0x20005c2c
    38e8:	e000ed00 	.word	0xe000ed00

000038ec <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    38ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    38ee:	4b08      	ldr	r3, [pc, #32]	; (3910 <z_arm_configure_static_mpu_regions+0x24>)
    38f0:	9301      	str	r3, [sp, #4]
    38f2:	4b08      	ldr	r3, [pc, #32]	; (3914 <z_arm_configure_static_mpu_regions+0x28>)
    38f4:	9302      	str	r3, [sp, #8]
    38f6:	4b08      	ldr	r3, [pc, #32]	; (3918 <z_arm_configure_static_mpu_regions+0x2c>)
    38f8:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    38fa:	ab01      	add	r3, sp, #4
    38fc:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    38fe:	4a07      	ldr	r2, [pc, #28]	; (391c <z_arm_configure_static_mpu_regions+0x30>)
    3900:	4b07      	ldr	r3, [pc, #28]	; (3920 <z_arm_configure_static_mpu_regions+0x34>)
    3902:	2101      	movs	r1, #1
    3904:	4668      	mov	r0, sp
    3906:	f000 f8b5 	bl	3a74 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    390a:	b005      	add	sp, #20
    390c:	f85d fb04 	ldr.w	pc, [sp], #4
    3910:	20000000 	.word	0x20000000
    3914:	00000000 	.word	0x00000000
    3918:	060b0000 	.word	0x060b0000
    391c:	20000000 	.word	0x20000000
    3920:	20010000 	.word	0x20010000

00003924 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    3924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    3926:	4f2e      	ldr	r7, [pc, #184]	; (39e0 <mpu_configure_regions+0xbc>)
    3928:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    392a:	2100      	movs	r1, #0
    392c:	42b1      	cmp	r1, r6
    392e:	da22      	bge.n	3976 <mpu_configure_regions+0x52>
		if (regions[i]->size == 0U) {
    3930:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    3934:	f8dc 4004 	ldr.w	r4, [ip, #4]
    3938:	2c00      	cmp	r4, #0
    393a:	d04f      	beq.n	39dc <mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    393c:	b1eb      	cbz	r3, 397a <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    393e:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3942:	ea14 0f0e 	tst.w	r4, lr
    3946:	d106      	bne.n	3956 <mpu_configure_regions+0x32>
		&&
    3948:	2c1f      	cmp	r4, #31
    394a:	d904      	bls.n	3956 <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    394c:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    3950:	ea1e 0f05 	tst.w	lr, r5
    3954:	d011      	beq.n	397a <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3956:	2301      	movs	r3, #1
    3958:	f04f 0200 	mov.w	r2, #0
    395c:	f363 0207 	bfi	r2, r3, #0, #8
    3960:	4820      	ldr	r0, [pc, #128]	; (39e4 <mpu_configure_regions+0xc0>)
    3962:	4b21      	ldr	r3, [pc, #132]	; (39e8 <mpu_configure_regions+0xc4>)
    3964:	1a1b      	subs	r3, r3, r0
    3966:	08db      	lsrs	r3, r3, #3
    3968:	4820      	ldr	r0, [pc, #128]	; (39ec <mpu_configure_regions+0xc8>)
    396a:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    396e:	f014 fe3c 	bl	185ea <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    3972:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3976:	4610      	mov	r0, r2
    3978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    397a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    397c:	b2d5      	uxtb	r5, r2
	region_conf.base = new_region->start;
    397e:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    3982:	f8dc c008 	ldr.w	ip, [ip, #8]
    3986:	d91a      	bls.n	39be <mpu_configure_regions+0x9a>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    3988:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    398c:	d819      	bhi.n	39c2 <mpu_configure_regions+0x9e>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    398e:	3c01      	subs	r4, #1
    3990:	fab4 f484 	clz	r4, r4
    3994:	f1c4 041f 	rsb	r4, r4, #31
    3998:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    399a:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    399c:	ea4c 0404 	orr.w	r4, ip, r4
    39a0:	d911      	bls.n	39c6 <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    39a2:	2301      	movs	r3, #1
    39a4:	f04f 0200 	mov.w	r2, #0
    39a8:	f363 0207 	bfi	r2, r3, #0, #8
    39ac:	490d      	ldr	r1, [pc, #52]	; (39e4 <mpu_configure_regions+0xc0>)
    39ae:	4b0e      	ldr	r3, [pc, #56]	; (39e8 <mpu_configure_regions+0xc4>)
    39b0:	480f      	ldr	r0, [pc, #60]	; (39f0 <mpu_configure_regions+0xcc>)
    39b2:	1a5b      	subs	r3, r3, r1
    39b4:	08db      	lsrs	r3, r3, #3
    39b6:	f363 128f 	bfi	r2, r3, #6, #10
    39ba:	4629      	mov	r1, r5
    39bc:	e7d7      	b.n	396e <mpu_configure_regions+0x4a>
		return REGION_32B;
    39be:	2408      	movs	r4, #8
    39c0:	e7eb      	b.n	399a <mpu_configure_regions+0x76>
		return REGION_4G;
    39c2:	243e      	movs	r4, #62	; 0x3e
    39c4:	e7e9      	b.n	399a <mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    39c6:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    39ca:	432a      	orrs	r2, r5
    39cc:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    39d0:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    39d4:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    39d6:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    39d8:	613c      	str	r4, [r7, #16]
		reg_index++;
    39da:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    39dc:	3101      	adds	r1, #1
    39de:	e7a5      	b.n	392c <mpu_configure_regions+0x8>
    39e0:	e000ed90 	.word	0xe000ed90
    39e4:	0001e448 	.word	0x0001e448
    39e8:	0001e550 	.word	0x0001e550
    39ec:	0001f943 	.word	0x0001f943
    39f0:	0001f966 	.word	0x0001f966

000039f4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    39f4:	4b03      	ldr	r3, [pc, #12]	; (3a04 <arm_core_mpu_enable+0x10>)
    39f6:	2205      	movs	r2, #5
    39f8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    39fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    39fe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3a02:	4770      	bx	lr
    3a04:	e000ed90 	.word	0xe000ed90

00003a08 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3a08:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3a0c:	4b01      	ldr	r3, [pc, #4]	; (3a14 <arm_core_mpu_disable+0xc>)
    3a0e:	2200      	movs	r2, #0
    3a10:	605a      	str	r2, [r3, #4]
}
    3a12:	4770      	bx	lr
    3a14:	e000ed90 	.word	0xe000ed90

00003a18 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3a18:	4913      	ldr	r1, [pc, #76]	; (3a68 <arm_mpu_init+0x50>)
    3a1a:	6808      	ldr	r0, [r1, #0]
    3a1c:	2808      	cmp	r0, #8
{
    3a1e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3a20:	d81e      	bhi.n	3a60 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3a22:	f7ff fff1 	bl	3a08 <arm_core_mpu_disable>
	MPU->RNR = index;
    3a26:	4c11      	ldr	r4, [pc, #68]	; (3a6c <arm_mpu_init+0x54>)
    3a28:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3a2a:	2200      	movs	r2, #0
    3a2c:	4290      	cmp	r0, r2
    3a2e:	f101 010c 	add.w	r1, r1, #12
    3a32:	d105      	bne.n	3a40 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3a34:	4b0e      	ldr	r3, [pc, #56]	; (3a70 <arm_mpu_init+0x58>)
    3a36:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3a38:	f7ff ffdc 	bl	39f4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    3a3c:	2000      	movs	r0, #0
}
    3a3e:	bd10      	pop	{r4, pc}
    3a40:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3a42:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3a46:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3a4a:	4313      	orrs	r3, r2
    3a4c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3a50:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3a56:	f043 0301 	orr.w	r3, r3, #1
    3a5a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3a5c:	3201      	adds	r2, #1
    3a5e:	e7e5      	b.n	3a2c <arm_mpu_init+0x14>
		return -1;
    3a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a64:	e7eb      	b.n	3a3e <arm_mpu_init+0x26>
    3a66:	bf00      	nop
    3a68:	0001e708 	.word	0x0001e708
    3a6c:	e000ed90 	.word	0xe000ed90
    3a70:	20005d24 	.word	0x20005d24

00003a74 <arm_core_mpu_configure_static_mpu_regions>:
{
    3a74:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3a76:	4c03      	ldr	r4, [pc, #12]	; (3a84 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3a78:	2301      	movs	r3, #1
    3a7a:	7822      	ldrb	r2, [r4, #0]
    3a7c:	f7ff ff52 	bl	3924 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3a80:	7020      	strb	r0, [r4, #0]
}
    3a82:	bd10      	pop	{r4, pc}
    3a84:	20005d24 	.word	0x20005d24

00003a88 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    3a88:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3a8a:	4a08      	ldr	r2, [pc, #32]	; (3aac <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    3a8c:	2300      	movs	r3, #0
    3a8e:	7812      	ldrb	r2, [r2, #0]
    3a90:	f7ff ff48 	bl	3924 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3a94:	f110 0f16 	cmn.w	r0, #22
    3a98:	d003      	beq.n	3aa2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3a9a:	4b05      	ldr	r3, [pc, #20]	; (3ab0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    3a9c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3a9e:	2807      	cmp	r0, #7
    3aa0:	dd00      	ble.n	3aa4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    3aa2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    3aa4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    3aa6:	611a      	str	r2, [r3, #16]
    3aa8:	3001      	adds	r0, #1
    3aaa:	e7f8      	b.n	3a9e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3aac:	20005d24 	.word	0x20005d24
    3ab0:	e000ed90 	.word	0xe000ed90

00003ab4 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    3ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ab8:	b09f      	sub	sp, #124	; 0x7c
    3aba:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    3abc:	2300      	movs	r3, #0
{
    3abe:	9001      	str	r0, [sp, #4]
    3ac0:	9104      	str	r1, [sp, #16]
	count = 0;
    3ac2:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
    3ac4:	4613      	mov	r3, r2
    3ac6:	f813 0b01 	ldrb.w	r0, [r3], #1
    3aca:	9305      	str	r3, [sp, #20]
    3acc:	b158      	cbz	r0, 3ae6 <z_prf+0x32>
		if (c != '%') {
    3ace:	2825      	cmp	r0, #37	; 0x25
    3ad0:	f000 8085 	beq.w	3bde <z_prf+0x12a>
			PUTC(c);
    3ad4:	9904      	ldr	r1, [sp, #16]
    3ad6:	9b01      	ldr	r3, [sp, #4]
    3ad8:	4798      	blx	r3
    3ada:	3001      	adds	r0, #1
    3adc:	f040 840d 	bne.w	42fa <CONFIG_HEAP_MEM_POOL_SIZE+0x2fa>
    3ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3ae4:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
    3ae6:	9800      	ldr	r0, [sp, #0]
    3ae8:	b01f      	add	sp, #124	; 0x7c
    3aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    3aee:	2c23      	cmp	r4, #35	; 0x23
    3af0:	d06c      	beq.n	3bcc <z_prf+0x118>
    3af2:	d861      	bhi.n	3bb8 <z_prf+0x104>
    3af4:	2c00      	cmp	r4, #0
    3af6:	d0f6      	beq.n	3ae6 <z_prf+0x32>
					fspace = true;
    3af8:	2c20      	cmp	r4, #32
    3afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3afc:	bf08      	it	eq
    3afe:	2301      	moveq	r3, #1
    3b00:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    3b02:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    3b06:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3b0a:	48b9      	ldr	r0, [pc, #740]	; (3df0 <z_prf+0x33c>)
    3b0c:	f818 4b01 	ldrb.w	r4, [r8], #1
    3b10:	4621      	mov	r1, r4
    3b12:	f015 f861 	bl	18bd8 <strchr>
    3b16:	2800      	cmp	r0, #0
    3b18:	d1e9      	bne.n	3aee <z_prf+0x3a>
			if (c == '*') {
    3b1a:	2c2a      	cmp	r4, #42	; 0x2a
    3b1c:	d166      	bne.n	3bec <z_prf+0x138>
				width = va_arg(vargs, int);
    3b1e:	f856 3b04 	ldr.w	r3, [r6], #4
    3b22:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    3b24:	2b00      	cmp	r3, #0
					width = -width;
    3b26:	bfbf      	itttt	lt
    3b28:	425b      	neglt	r3, r3
    3b2a:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    3b2c:	2301      	movlt	r3, #1
    3b2e:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    3b30:	9b05      	ldr	r3, [sp, #20]
    3b32:	f898 4000 	ldrb.w	r4, [r8]
    3b36:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    3b3a:	2c2e      	cmp	r4, #46	; 0x2e
    3b3c:	d17c      	bne.n	3c38 <z_prf+0x184>
				if (c == '*') {
    3b3e:	f898 3000 	ldrb.w	r3, [r8]
    3b42:	2b2a      	cmp	r3, #42	; 0x2a
    3b44:	d175      	bne.n	3c32 <z_prf+0x17e>
					precision = va_arg(vargs, int);
    3b46:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    3b4a:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    3b4e:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    3b52:	48a8      	ldr	r0, [pc, #672]	; (3df4 <z_prf+0x340>)
    3b54:	4621      	mov	r1, r4
    3b56:	4627      	mov	r7, r4
    3b58:	f015 f83e 	bl	18bd8 <strchr>
    3b5c:	2800      	cmp	r0, #0
    3b5e:	d06e      	beq.n	3c3e <z_prf+0x18a>
				c = *format++;
    3b60:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    3b62:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    3b64:	f813 4b01 	ldrb.w	r4, [r3], #1
    3b68:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
    3b6a:	d107      	bne.n	3b7c <z_prf+0xc8>
    3b6c:	2c68      	cmp	r4, #104	; 0x68
    3b6e:	d105      	bne.n	3b7c <z_prf+0xc8>
					c = *format++;
    3b70:	f108 0302 	add.w	r3, r8, #2
    3b74:	f898 4001 	ldrb.w	r4, [r8, #1]
    3b78:	9305      	str	r3, [sp, #20]
					i = 'H';
    3b7a:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    3b7c:	2c67      	cmp	r4, #103	; 0x67
    3b7e:	d87c      	bhi.n	3c7a <z_prf+0x1c6>
    3b80:	2c65      	cmp	r4, #101	; 0x65
    3b82:	f080 8139 	bcs.w	3df8 <z_prf+0x344>
    3b86:	2c47      	cmp	r4, #71	; 0x47
    3b88:	d85d      	bhi.n	3c46 <z_prf+0x192>
    3b8a:	2c45      	cmp	r4, #69	; 0x45
    3b8c:	f080 8134 	bcs.w	3df8 <z_prf+0x344>
    3b90:	2c00      	cmp	r4, #0
    3b92:	d0a8      	beq.n	3ae6 <z_prf+0x32>
    3b94:	2c25      	cmp	r4, #37	; 0x25
    3b96:	f000 83ac 	beq.w	42f2 <CONFIG_HEAP_MEM_POOL_SIZE+0x2f2>
				PUTC('%');
    3b9a:	9904      	ldr	r1, [sp, #16]
    3b9c:	9b01      	ldr	r3, [sp, #4]
    3b9e:	2025      	movs	r0, #37	; 0x25
    3ba0:	4798      	blx	r3
    3ba2:	3001      	adds	r0, #1
    3ba4:	d09c      	beq.n	3ae0 <z_prf+0x2c>
				PUTC(c);
    3ba6:	9904      	ldr	r1, [sp, #16]
    3ba8:	9b01      	ldr	r3, [sp, #4]
    3baa:	4620      	mov	r0, r4
    3bac:	4798      	blx	r3
    3bae:	3001      	adds	r0, #1
    3bb0:	d096      	beq.n	3ae0 <z_prf+0x2c>
				count += 2;
    3bb2:	9b00      	ldr	r3, [sp, #0]
    3bb4:	3302      	adds	r3, #2
    3bb6:	e3a2      	b.n	42fe <CONFIG_HEAP_MEM_POOL_SIZE+0x2fe>
				switch (c) {
    3bb8:	2c2d      	cmp	r4, #45	; 0x2d
    3bba:	d00a      	beq.n	3bd2 <z_prf+0x11e>
    3bbc:	2c30      	cmp	r4, #48	; 0x30
    3bbe:	d00b      	beq.n	3bd8 <z_prf+0x124>
					fplus = true;
    3bc0:	2c2b      	cmp	r4, #43	; 0x2b
    3bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3bc4:	bf08      	it	eq
    3bc6:	2301      	moveq	r3, #1
    3bc8:	9309      	str	r3, [sp, #36]	; 0x24
    3bca:	e79a      	b.n	3b02 <z_prf+0x4e>
					falt = true;
    3bcc:	2301      	movs	r3, #1
    3bce:	9306      	str	r3, [sp, #24]
    3bd0:	e797      	b.n	3b02 <z_prf+0x4e>
					fminus = true;
    3bd2:	2301      	movs	r3, #1
    3bd4:	930b      	str	r3, [sp, #44]	; 0x2c
    3bd6:	e794      	b.n	3b02 <z_prf+0x4e>
					fzero = true;
    3bd8:	2301      	movs	r3, #1
    3bda:	9308      	str	r3, [sp, #32]
    3bdc:	e791      	b.n	3b02 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    3bde:	2300      	movs	r3, #0
    3be0:	9308      	str	r3, [sp, #32]
    3be2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    3be6:	930b      	str	r3, [sp, #44]	; 0x2c
    3be8:	9306      	str	r3, [sp, #24]
    3bea:	e78c      	b.n	3b06 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    3bec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    3bf0:	2b09      	cmp	r3, #9
				width = 0;
    3bf2:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    3bf4:	d8a1      	bhi.n	3b3a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    3bf6:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    3bf8:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3bfc:	f818 4b01 	ldrb.w	r4, [r8], #1
    3c00:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    3c04:	2b09      	cmp	r3, #9
    3c06:	d898      	bhi.n	3b3a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    3c08:	9b07      	ldr	r3, [sp, #28]
    3c0a:	f8cd 8014 	str.w	r8, [sp, #20]
    3c0e:	fb02 4403 	mla	r4, r2, r3, r4
    3c12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    3c16:	9307      	str	r3, [sp, #28]
    3c18:	e7ee      	b.n	3bf8 <z_prf+0x144>
    3c1a:	fb01 3505 	mla	r5, r1, r5, r3
    3c1e:	3d30      	subs	r5, #48	; 0x30
    3c20:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    3c22:	4642      	mov	r2, r8
    3c24:	f812 3b01 	ldrb.w	r3, [r2], #1
    3c28:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3c2c:	2809      	cmp	r0, #9
    3c2e:	d9f4      	bls.n	3c1a <z_prf+0x166>
    3c30:	e78d      	b.n	3b4e <z_prf+0x9a>
	int i = 0;
    3c32:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    3c34:	210a      	movs	r1, #10
    3c36:	e7f4      	b.n	3c22 <z_prf+0x16e>
			precision = -1;
    3c38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3c3c:	e789      	b.n	3b52 <z_prf+0x9e>
    3c3e:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
    3c42:	4607      	mov	r7, r0
    3c44:	e79a      	b.n	3b7c <z_prf+0xc8>
			switch (c) {
    3c46:	2c63      	cmp	r4, #99	; 0x63
    3c48:	d05a      	beq.n	3d00 <z_prf+0x24c>
    3c4a:	d820      	bhi.n	3c8e <z_prf+0x1da>
    3c4c:	2c58      	cmp	r4, #88	; 0x58
    3c4e:	d1a4      	bne.n	3b9a <z_prf+0xe6>
				if (c == 'o') {
    3c50:	2c6f      	cmp	r4, #111	; 0x6f
    3c52:	f106 0904 	add.w	r9, r6, #4
    3c56:	6831      	ldr	r1, [r6, #0]
    3c58:	f040 831c 	bne.w	4294 <CONFIG_HEAP_MEM_POOL_SIZE+0x294>
	if (alt_form) {
    3c5c:	9b06      	ldr	r3, [sp, #24]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	f000 830a 	beq.w	4278 <CONFIG_HEAP_MEM_POOL_SIZE+0x278>
		*buf++ = '0';
    3c64:	2330      	movs	r3, #48	; 0x30
    3c66:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
    3c6a:	2900      	cmp	r1, #0
    3c6c:	f040 830f 	bne.w	428e <CONFIG_HEAP_MEM_POOL_SIZE+0x28e>
			*buf++ = 0;
    3c70:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
    3c74:	4688      	mov	r8, r1
			return 1;
    3c76:	2601      	movs	r6, #1
    3c78:	e026      	b.n	3cc8 <z_prf+0x214>
			switch (c) {
    3c7a:	2c70      	cmp	r4, #112	; 0x70
    3c7c:	f000 82e7 	beq.w	424e <CONFIG_HEAP_MEM_POOL_SIZE+0x24e>
    3c80:	d828      	bhi.n	3cd4 <z_prf+0x220>
    3c82:	2c6e      	cmp	r4, #110	; 0x6e
    3c84:	f000 82d0 	beq.w	4228 <CONFIG_HEAP_MEM_POOL_SIZE+0x228>
    3c88:	d8e2      	bhi.n	3c50 <z_prf+0x19c>
    3c8a:	2c69      	cmp	r4, #105	; 0x69
    3c8c:	d185      	bne.n	3b9a <z_prf+0xe6>
				switch (i) {
    3c8e:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    3c90:	2c00      	cmp	r4, #0
    3c92:	f106 0904 	add.w	r9, r6, #4
    3c96:	f280 809c 	bge.w	3dd2 <z_prf+0x31e>
		*buf++ = '-';
    3c9a:	232d      	movs	r3, #45	; 0x2d
    3c9c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
    3ca0:	4261      	negs	r1, r4
		*buf++ = ' ';
    3ca2:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
    3ca6:	4630      	mov	r0, r6
    3ca8:	220a      	movs	r2, #10
    3caa:	f015 f812 	bl	18cd2 <_to_x>
				if (fplus || fspace || val < 0) {
    3cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    3cb0:	4406      	add	r6, r0
    3cb2:	a817      	add	r0, sp, #92	; 0x5c
    3cb4:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	f040 8324 	bne.w	4304 <CONFIG_HEAP_MEM_POOL_SIZE+0x304>
    3cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	f040 8320 	bne.w	4304 <CONFIG_HEAP_MEM_POOL_SIZE+0x304>
    3cc4:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
    3cc8:	2d00      	cmp	r5, #0
    3cca:	da22      	bge.n	3d12 <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    3ccc:	2500      	movs	r5, #0
    3cce:	462f      	mov	r7, r5
    3cd0:	46aa      	mov	sl, r5
    3cd2:	e0e5      	b.n	3ea0 <z_prf+0x3ec>
			switch (c) {
    3cd4:	2c75      	cmp	r4, #117	; 0x75
    3cd6:	d0bb      	beq.n	3c50 <z_prf+0x19c>
    3cd8:	2c78      	cmp	r4, #120	; 0x78
    3cda:	d0b9      	beq.n	3c50 <z_prf+0x19c>
    3cdc:	2c73      	cmp	r4, #115	; 0x73
    3cde:	f47f af5c 	bne.w	3b9a <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    3ce2:	46b1      	mov	r9, r6
					precision = INT_MAX;
    3ce4:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
    3ce6:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
    3cea:	bfb8      	it	lt
    3cec:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    3cf0:	2600      	movs	r6, #0
    3cf2:	42b5      	cmp	r5, r6
    3cf4:	f040 82bb 	bne.w	426e <CONFIG_HEAP_MEM_POOL_SIZE+0x26e>
    3cf8:	462e      	mov	r6, r5
    3cfa:	2500      	movs	r5, #0
    3cfc:	46a8      	mov	r8, r5
    3cfe:	e009      	b.n	3d14 <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
    3d00:	46b1      	mov	r9, r6
				break;
    3d02:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    3d06:	f859 3b04 	ldr.w	r3, [r9], #4
    3d0a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
    3d0e:	2601      	movs	r6, #1
				break;
    3d10:	4645      	mov	r5, r8
    3d12:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
    3d14:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    3d18:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
    3d1a:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
    3d1c:	462f      	mov	r7, r5
    3d1e:	46aa      	mov	sl, r5
			if (zero_head < 0) {
    3d20:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    3d24:	1991      	adds	r1, r2, r6
    3d26:	9106      	str	r1, [sp, #24]
    3d28:	9907      	ldr	r1, [sp, #28]
    3d2a:	1990      	adds	r0, r2, r6
    3d2c:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    3d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3d30:	b911      	cbnz	r1, 3d38 <z_prf+0x284>
    3d32:	2c00      	cmp	r4, #0
    3d34:	f300 8304 	bgt.w	4340 <CONFIG_HEAP_MEM_POOL_SIZE+0x340>
			while (prefix-- > 0) {
    3d38:	eb03 0b08 	add.w	fp, r3, r8
    3d3c:	455b      	cmp	r3, fp
    3d3e:	f040 8301 	bne.w	4344 <CONFIG_HEAP_MEM_POOL_SIZE+0x344>
			while (zero_head-- > 0) {
    3d42:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    3d46:	f080 830d 	bcs.w	4364 <CONFIG_HEAP_MEM_POOL_SIZE+0x364>
			clen -= prefix;
    3d4a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    3d4e:	f1ba 0f00 	cmp.w	sl, #0
    3d52:	d011      	beq.n	3d78 <z_prf+0x2c4>
				c = *cptr;
    3d54:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
    3d58:	eb0b 0806 	add.w	r8, fp, r6
    3d5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3d60:	2b09      	cmp	r3, #9
    3d62:	eba8 060b 	sub.w	r6, r8, fp
    3d66:	f240 8308 	bls.w	437a <CONFIG_HEAP_MEM_POOL_SIZE+0x37a>
    3d6a:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
    3d6c:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    3d70:	f080 830c 	bcs.w	438c <CONFIG_HEAP_MEM_POOL_SIZE+0x38c>
				clen -= zero.predot;
    3d74:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
    3d78:	b1af      	cbz	r7, 3da6 <z_prf+0x2f2>
    3d7a:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
    3d7e:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
    3d82:	9904      	ldr	r1, [sp, #16]
    3d84:	9b01      	ldr	r3, [sp, #4]
    3d86:	4650      	mov	r0, sl
    3d88:	4798      	blx	r3
    3d8a:	3001      	adds	r0, #1
    3d8c:	f43f aea8 	beq.w	3ae0 <z_prf+0x2c>
				} while (c != '.');
    3d90:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
    3d94:	eba8 060b 	sub.w	r6, r8, fp
    3d98:	d1f1      	bne.n	3d7e <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
    3d9a:	46b8      	mov	r8, r7
    3d9c:	f1b8 0f00 	cmp.w	r8, #0
    3da0:	f300 82fd 	bgt.w	439e <CONFIG_HEAP_MEM_POOL_SIZE+0x39e>
				clen -= zero.postdot;
    3da4:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
    3da6:	b195      	cbz	r5, 3dce <z_prf+0x31a>
				c = *cptr;
    3da8:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
    3dac:	eb0b 0806 	add.w	r8, fp, r6
    3db0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3db4:	2b09      	cmp	r3, #9
    3db6:	eba8 060b 	sub.w	r6, r8, fp
    3dba:	f240 82fb 	bls.w	43b4 <CONFIG_HEAP_MEM_POOL_SIZE+0x3b4>
    3dbe:	282e      	cmp	r0, #46	; 0x2e
    3dc0:	f000 82f8 	beq.w	43b4 <CONFIG_HEAP_MEM_POOL_SIZE+0x3b4>
				while (zero.trail-- > 0) {
    3dc4:	462f      	mov	r7, r5
    3dc6:	2f00      	cmp	r7, #0
    3dc8:	f300 82fd 	bgt.w	43c6 <CONFIG_HEAP_MEM_POOL_SIZE+0x3c6>
				clen -= zero.trail;
    3dcc:	1b76      	subs	r6, r6, r5
    3dce:	445e      	add	r6, fp
    3dd0:	e30c      	b.n	43ec <CONFIG_HEAP_MEM_POOL_SIZE+0x3ec>
	} else if (fplus) {
    3dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3dd4:	b123      	cbz	r3, 3de0 <z_prf+0x32c>
		*buf++ = '+';
    3dd6:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    3dd8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    3ddc:	4621      	mov	r1, r4
    3dde:	e760      	b.n	3ca2 <z_prf+0x1ee>
	} else if (fspace) {
    3de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3de2:	b10b      	cbz	r3, 3de8 <z_prf+0x334>
		*buf++ = ' ';
    3de4:	2320      	movs	r3, #32
    3de6:	e7f7      	b.n	3dd8 <z_prf+0x324>
	} else if (fspace) {
    3de8:	4621      	mov	r1, r4
    3dea:	ae17      	add	r6, sp, #92	; 0x5c
    3dec:	e75b      	b.n	3ca6 <z_prf+0x1f2>
    3dee:	bf00      	nop
    3df0:	0001f98c 	.word	0x0001f98c
    3df4:	0001f992 	.word	0x0001f992
				u.d = va_arg(vargs, double);
    3df8:	f106 0907 	add.w	r9, r6, #7
    3dfc:	f029 0907 	bic.w	r9, r9, #7
    3e00:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    3e04:	02d8      	lsls	r0, r3, #11
    3e06:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    3e0a:	02d6      	lsls	r6, r2, #11
    3e0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    3e10:	9602      	str	r6, [sp, #8]
    3e12:	9003      	str	r0, [sp, #12]
    3e14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
    3e18:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    3e1a:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    3e1e:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    3e22:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
    3e26:	da43      	bge.n	3eb0 <z_prf+0x3fc>
		*buf++ = '-';
    3e28:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    3e2a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    3e2e:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    3e32:	f240 73ff 	movw	r3, #2047	; 0x7ff
    3e36:	4299      	cmp	r1, r3
    3e38:	d155      	bne.n	3ee6 <z_prf+0x432>
		if (!fract) {
    3e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3e3e:	4313      	orrs	r3, r2
    3e40:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    3e44:	f107 0b03 	add.w	fp, r7, #3
    3e48:	d142      	bne.n	3ed0 <z_prf+0x41c>
			if (isupper(c)) {
    3e4a:	2c19      	cmp	r4, #25
    3e4c:	d83a      	bhi.n	3ec4 <z_prf+0x410>
				*buf++ = 'I';
    3e4e:	2349      	movs	r3, #73	; 0x49
    3e50:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    3e52:	234e      	movs	r3, #78	; 0x4e
    3e54:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    3e56:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    3e58:	2500      	movs	r5, #0
		return buf - start;
    3e5a:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    3e5c:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    3e5e:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    3e60:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    3e64:	462f      	mov	r7, r5
    3e66:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    3e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	f040 81d9 	bne.w	4222 <CONFIG_HEAP_MEM_POOL_SIZE+0x222>
    3e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3e72:	2b00      	cmp	r3, #0
    3e74:	f040 81d5 	bne.w	4222 <CONFIG_HEAP_MEM_POOL_SIZE+0x222>
    3e78:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    3e7c:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    3e80:	f1d3 0800 	rsbs	r8, r3, #0
    3e84:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    3e88:	ab1e      	add	r3, sp, #120	; 0x78
    3e8a:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    3e8c:	44bb      	add	fp, r7
    3e8e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    3e92:	3b30      	subs	r3, #48	; 0x30
    3e94:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    3e98:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    3e9a:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    3e9c:	f200 8237 	bhi.w	430e <CONFIG_HEAP_MEM_POOL_SIZE+0x30e>
			} else if (fzero) {
    3ea0:	9b08      	ldr	r3, [sp, #32]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	f000 8236 	beq.w	4314 <CONFIG_HEAP_MEM_POOL_SIZE+0x314>
    3ea8:	9b07      	ldr	r3, [sp, #28]
    3eaa:	1b9a      	subs	r2, r3, r6
    3eac:	ab17      	add	r3, sp, #92	; 0x5c
    3eae:	e737      	b.n	3d20 <z_prf+0x26c>
	} else if (fplus) {
    3eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3eb2:	b10b      	cbz	r3, 3eb8 <z_prf+0x404>
		*buf++ = '+';
    3eb4:	232b      	movs	r3, #43	; 0x2b
    3eb6:	e7b8      	b.n	3e2a <z_prf+0x376>
	} else if (fspace) {
    3eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3eba:	b10b      	cbz	r3, 3ec0 <z_prf+0x40c>
		*buf++ = ' ';
    3ebc:	2320      	movs	r3, #32
    3ebe:	e7b4      	b.n	3e2a <z_prf+0x376>
	} else if (fspace) {
    3ec0:	af17      	add	r7, sp, #92	; 0x5c
    3ec2:	e7b6      	b.n	3e32 <z_prf+0x37e>
				*buf++ = 'i';
    3ec4:	2369      	movs	r3, #105	; 0x69
    3ec6:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    3ec8:	236e      	movs	r3, #110	; 0x6e
    3eca:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    3ecc:	2366      	movs	r3, #102	; 0x66
    3ece:	e7c3      	b.n	3e58 <z_prf+0x3a4>
			if (isupper(c)) {
    3ed0:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    3ed2:	bf99      	ittee	ls
    3ed4:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    3ed6:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    3ed8:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    3eda:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    3edc:	bf94      	ite	ls
    3ede:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    3ee0:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    3ee2:	707a      	strb	r2, [r7, #1]
    3ee4:	e7b8      	b.n	3e58 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    3ee6:	9b02      	ldr	r3, [sp, #8]
    3ee8:	9803      	ldr	r0, [sp, #12]
    3eea:	430b      	orrs	r3, r1
    3eec:	930c      	str	r3, [sp, #48]	; 0x30
    3eee:	17cb      	asrs	r3, r1, #31
    3ef0:	4303      	orrs	r3, r0
    3ef2:	930d      	str	r3, [sp, #52]	; 0x34
    3ef4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    3ef8:	2c46      	cmp	r4, #70	; 0x46
    3efa:	bf08      	it	eq
    3efc:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    3efe:	4313      	orrs	r3, r2
    3f00:	f000 80ff 	beq.w	4102 <CONFIG_HEAP_MEM_POOL_SIZE+0x102>
		if (exp == 0) {
    3f04:	2900      	cmp	r1, #0
    3f06:	f000 809f 	beq.w	4048 <CONFIG_HEAP_MEM_POOL_SIZE+0x48>
		fract |= HIGHBIT64;
    3f0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    3f10:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    3f14:	9313      	str	r3, [sp, #76]	; 0x4c
    3f16:	2600      	movs	r6, #0
	while (exp <= -3) {
    3f18:	f118 0f02 	cmn.w	r8, #2
    3f1c:	f2c0 80a8 	blt.w	4070 <CONFIG_HEAP_MEM_POOL_SIZE+0x70>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    3f20:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    3f24:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    3f28:	f1b8 0f00 	cmp.w	r8, #0
    3f2c:	f300 80cc 	bgt.w	40c8 <CONFIG_HEAP_MEM_POOL_SIZE+0xc8>
		_rlrshift(&fract);
    3f30:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    3f32:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    3f36:	f014 feee 	bl	18d16 <_rlrshift>
	while (exp < (0 + 4)) {
    3f3a:	f1b8 0f04 	cmp.w	r8, #4
    3f3e:	d1f7      	bne.n	3f30 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    3f40:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    3f42:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    3f46:	bfb8      	it	lt
    3f48:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    3f4a:	2b47      	cmp	r3, #71	; 0x47
    3f4c:	f040 80e1 	bne.w	4112 <CONFIG_HEAP_MEM_POOL_SIZE+0x112>
		if (decexp < (-4 + 1) || decexp > precision) {
    3f50:	1cf2      	adds	r2, r6, #3
    3f52:	db02      	blt.n	3f5a <z_prf+0x4a6>
    3f54:	42ae      	cmp	r6, r5
    3f56:	f340 80d7 	ble.w	4108 <CONFIG_HEAP_MEM_POOL_SIZE+0x108>
			c += 'e' - 'g';
    3f5a:	3c02      	subs	r4, #2
    3f5c:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    3f5e:	2d00      	cmp	r5, #0
    3f60:	f000 80dd 	beq.w	411e <CONFIG_HEAP_MEM_POOL_SIZE+0x11e>
		if (!falt && (precision > 0)) {
    3f64:	9b06      	ldr	r3, [sp, #24]
				precision--;
    3f66:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    3f68:	2b00      	cmp	r3, #0
    3f6a:	f040 80d8 	bne.w	411e <CONFIG_HEAP_MEM_POOL_SIZE+0x11e>
    3f6e:	2d00      	cmp	r5, #0
    3f70:	bfd4      	ite	le
    3f72:	f04f 0800 	movle.w	r8, #0
    3f76:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    3f7a:	2c66      	cmp	r4, #102	; 0x66
    3f7c:	f040 80d1 	bne.w	4122 <CONFIG_HEAP_MEM_POOL_SIZE+0x122>
		if (exp < 0) {
    3f80:	eb16 0a05 	adds.w	sl, r6, r5
    3f84:	f140 80d5 	bpl.w	4132 <CONFIG_HEAP_MEM_POOL_SIZE+0x132>
	digit_count = 16;
    3f88:	2310      	movs	r3, #16
    3f8a:	9311      	str	r3, [sp, #68]	; 0x44
    3f8c:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    3f8e:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    3f92:	2200      	movs	r2, #0
    3f94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    3f98:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    3f9c:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    3fa0:	f080 80c9 	bcs.w	4136 <CONFIG_HEAP_MEM_POOL_SIZE+0x136>
	fract += ltemp;
    3fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3fa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3fa8:	9915      	ldr	r1, [sp, #84]	; 0x54
    3faa:	189b      	adds	r3, r3, r2
    3fac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3fae:	eb41 0202 	adc.w	r2, r1, r2
    3fb2:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    3fb6:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    3fba:	930e      	str	r3, [sp, #56]	; 0x38
    3fbc:	2300      	movs	r3, #0
    3fbe:	930f      	str	r3, [sp, #60]	; 0x3c
    3fc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3fc4:	4313      	orrs	r3, r2
    3fc6:	d006      	beq.n	3fd6 <z_prf+0x522>
		_ldiv5(&fract);
    3fc8:	a812      	add	r0, sp, #72	; 0x48
    3fca:	f014 feb6 	bl	18d3a <_ldiv5>
		_rlrshift(&fract);
    3fce:	a812      	add	r0, sp, #72	; 0x48
    3fd0:	f014 fea1 	bl	18d16 <_rlrshift>
		decexp++;
    3fd4:	3601      	adds	r6, #1
	if (c == 'f') {
    3fd6:	2c66      	cmp	r4, #102	; 0x66
    3fd8:	f040 80c7 	bne.w	416a <CONFIG_HEAP_MEM_POOL_SIZE+0x16a>
		if (decexp > 0) {
    3fdc:	2e00      	cmp	r6, #0
    3fde:	f340 80b1 	ble.w	4144 <CONFIG_HEAP_MEM_POOL_SIZE+0x144>
			while (decexp > 0 && digit_count > 0) {
    3fe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	dd07      	ble.n	3ff8 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    3fe8:	a911      	add	r1, sp, #68	; 0x44
    3fea:	a812      	add	r0, sp, #72	; 0x48
    3fec:	f014 fed1 	bl	18d92 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    3ff0:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    3ff2:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    3ff6:	d1f4      	bne.n	3fe2 <z_prf+0x52e>
			zp->predot = decexp;
    3ff8:	46b2      	mov	sl, r6
    3ffa:	46bb      	mov	fp, r7
			decexp = 0;
    3ffc:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    3ffe:	9b06      	ldr	r3, [sp, #24]
    4000:	b913      	cbnz	r3, 4008 <CONFIG_HEAP_MEM_POOL_SIZE+0x8>
    4002:	2d00      	cmp	r5, #0
    4004:	f340 80af 	ble.w	4166 <CONFIG_HEAP_MEM_POOL_SIZE+0x166>
			*buf++ = '.';
    4008:	232e      	movs	r3, #46	; 0x2e
    400a:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    400e:	2e00      	cmp	r6, #0
    4010:	f000 80a7 	beq.w	4162 <CONFIG_HEAP_MEM_POOL_SIZE+0x162>
    4014:	2d00      	cmp	r5, #0
    4016:	f340 80a6 	ble.w	4166 <CONFIG_HEAP_MEM_POOL_SIZE+0x166>
			zp->postdot = -decexp;
    401a:	4277      	negs	r7, r6
    401c:	42af      	cmp	r7, r5
    401e:	bfa8      	it	ge
    4020:	462f      	movge	r7, r5
			precision -= zp->postdot;
    4022:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    4024:	2d00      	cmp	r5, #0
    4026:	dd03      	ble.n	4030 <CONFIG_HEAP_MEM_POOL_SIZE+0x30>
    4028:	9b11      	ldr	r3, [sp, #68]	; 0x44
    402a:	2b00      	cmp	r3, #0
    402c:	f300 8091 	bgt.w	4152 <CONFIG_HEAP_MEM_POOL_SIZE+0x152>
	if (prune_zero) {
    4030:	f1b8 0f00 	cmp.w	r8, #0
    4034:	f040 80af 	bne.w	4196 <CONFIG_HEAP_MEM_POOL_SIZE+0x196>
	*buf = 0;
    4038:	2300      	movs	r3, #0
	return buf - start;
    403a:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    403c:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    4040:	ebab 0b06 	sub.w	fp, fp, r6
    4044:	e710      	b.n	3e68 <z_prf+0x3b4>
				exp--;
    4046:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    4048:	9b02      	ldr	r3, [sp, #8]
    404a:	18db      	adds	r3, r3, r3
    404c:	9302      	str	r3, [sp, #8]
    404e:	9b03      	ldr	r3, [sp, #12]
    4050:	415b      	adcs	r3, r3
    4052:	9303      	str	r3, [sp, #12]
    4054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4058:	2a00      	cmp	r2, #0
    405a:	f173 0300 	sbcs.w	r3, r3, #0
    405e:	daf2      	bge.n	4046 <CONFIG_HEAP_MEM_POOL_SIZE+0x46>
    4060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4064:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    4068:	e74f      	b.n	3f0a <z_prf+0x456>
			_rlrshift(&fract);
    406a:	a812      	add	r0, sp, #72	; 0x48
    406c:	f014 fe53 	bl	18d16 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    4070:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    4074:	f04f 0b00 	mov.w	fp, #0
    4078:	48b9      	ldr	r0, [pc, #740]	; (4360 <CONFIG_HEAP_MEM_POOL_SIZE+0x360>)
    407a:	2100      	movs	r1, #0
    407c:	4559      	cmp	r1, fp
    407e:	bf08      	it	eq
    4080:	4560      	cmpeq	r0, ip
    4082:	f108 0801 	add.w	r8, r8, #1
    4086:	d3f0      	bcc.n	406a <CONFIG_HEAP_MEM_POOL_SIZE+0x6a>
		fract *= 5U;
    4088:	2005      	movs	r0, #5
    408a:	fba2 2300 	umull	r2, r3, r2, r0
    408e:	fb00 330c 	mla	r3, r0, ip, r3
    4092:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    4096:	46dc      	mov	ip, fp
    4098:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    409a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    409e:	f04f 0b00 	mov.w	fp, #0
    40a2:	2100      	movs	r1, #0
    40a4:	458b      	cmp	fp, r1
    40a6:	bf08      	it	eq
    40a8:	459a      	cmpeq	sl, r3
    40aa:	d206      	bcs.n	40ba <CONFIG_HEAP_MEM_POOL_SIZE+0xba>
    40ac:	f1bc 0f00 	cmp.w	ip, #0
    40b0:	f43f af32 	beq.w	3f18 <z_prf+0x464>
    40b4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    40b8:	e72e      	b.n	3f18 <z_prf+0x464>
			fract <<= 1;
    40ba:	1892      	adds	r2, r2, r2
    40bc:	415b      	adcs	r3, r3
			exp--;
    40be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    40c2:	f04f 0c01 	mov.w	ip, #1
    40c6:	e7ec      	b.n	40a2 <CONFIG_HEAP_MEM_POOL_SIZE+0xa2>
		_ldiv5(&fract);
    40c8:	a812      	add	r0, sp, #72	; 0x48
    40ca:	f014 fe36 	bl	18d3a <_ldiv5>
		exp--;
    40ce:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    40d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    40d6:	3601      	adds	r6, #1
    40d8:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    40dc:	2300      	movs	r3, #0
    40de:	459b      	cmp	fp, r3
    40e0:	bf08      	it	eq
    40e2:	4582      	cmpeq	sl, r0
    40e4:	d206      	bcs.n	40f4 <CONFIG_HEAP_MEM_POOL_SIZE+0xf4>
    40e6:	f1bc 0f00 	cmp.w	ip, #0
    40ea:	f43f af1d 	beq.w	3f28 <z_prf+0x474>
    40ee:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    40f2:	e719      	b.n	3f28 <z_prf+0x474>
			fract <<= 1;
    40f4:	1849      	adds	r1, r1, r1
    40f6:	4140      	adcs	r0, r0
			exp--;
    40f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    40fc:	f04f 0c01 	mov.w	ip, #1
    4100:	e7ec      	b.n	40dc <CONFIG_HEAP_MEM_POOL_SIZE+0xdc>
	if ((exp | fract) != 0) {
    4102:	2600      	movs	r6, #0
    4104:	46b0      	mov	r8, r6
    4106:	e713      	b.n	3f30 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    4108:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    410a:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    410c:	b923      	cbnz	r3, 4118 <CONFIG_HEAP_MEM_POOL_SIZE+0x118>
			c = 'f';
    410e:	2466      	movs	r4, #102	; 0x66
    4110:	e72d      	b.n	3f6e <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    4112:	f04f 0800 	mov.w	r8, #0
    4116:	e730      	b.n	3f7a <z_prf+0x4c6>
    4118:	f04f 0800 	mov.w	r8, #0
    411c:	e730      	b.n	3f80 <z_prf+0x4cc>
    411e:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    4122:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    4126:	2310      	movs	r3, #16
    4128:	459a      	cmp	sl, r3
    412a:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    412c:	bfa8      	it	ge
    412e:	469a      	movge	sl, r3
    4130:	e72f      	b.n	3f92 <z_prf+0x4de>
		if (exp < 0) {
    4132:	2466      	movs	r4, #102	; 0x66
    4134:	e7f7      	b.n	4126 <CONFIG_HEAP_MEM_POOL_SIZE+0x126>
		_ldiv5(&ltemp);
    4136:	a814      	add	r0, sp, #80	; 0x50
    4138:	f014 fdff 	bl	18d3a <_ldiv5>
		_rlrshift(&ltemp);
    413c:	a814      	add	r0, sp, #80	; 0x50
    413e:	f014 fdea 	bl	18d16 <_rlrshift>
    4142:	e72b      	b.n	3f9c <z_prf+0x4e8>
			*buf++ = '0';
    4144:	46bb      	mov	fp, r7
    4146:	2330      	movs	r3, #48	; 0x30
    4148:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    414c:	f04f 0a00 	mov.w	sl, #0
    4150:	e755      	b.n	3ffe <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    4152:	a911      	add	r1, sp, #68	; 0x44
    4154:	a812      	add	r0, sp, #72	; 0x48
    4156:	f014 fe1c 	bl	18d92 <_get_digit>
			precision--;
    415a:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    415c:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    4160:	e760      	b.n	4024 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>
			zero.predot = zero.postdot = zero.trail = 0;
    4162:	4637      	mov	r7, r6
    4164:	e75e      	b.n	4024 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>
    4166:	2700      	movs	r7, #0
    4168:	e762      	b.n	4030 <CONFIG_HEAP_MEM_POOL_SIZE+0x30>
		*buf = _get_digit(&fract, &digit_count);
    416a:	a911      	add	r1, sp, #68	; 0x44
    416c:	a812      	add	r0, sp, #72	; 0x48
    416e:	f014 fe10 	bl	18d92 <_get_digit>
		if (falt || (precision > 0)) {
    4172:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    4174:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    4176:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    4178:	bf18      	it	ne
    417a:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    417e:	2b00      	cmp	r3, #0
    4180:	d13b      	bne.n	41fa <CONFIG_HEAP_MEM_POOL_SIZE+0x1fa>
    4182:	2d00      	cmp	r5, #0
    4184:	dc39      	bgt.n	41fa <CONFIG_HEAP_MEM_POOL_SIZE+0x1fa>
		if (*buf++ != '0') {
    4186:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    418a:	f1b8 0f00 	cmp.w	r8, #0
    418e:	d045      	beq.n	421c <CONFIG_HEAP_MEM_POOL_SIZE+0x21c>
			zero.predot = zero.postdot = zero.trail = 0;
    4190:	f04f 0a00 	mov.w	sl, #0
    4194:	4657      	mov	r7, sl
		while (*--buf == '0')
    4196:	465b      	mov	r3, fp
    4198:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    419c:	2a30      	cmp	r2, #48	; 0x30
    419e:	d0fa      	beq.n	4196 <CONFIG_HEAP_MEM_POOL_SIZE+0x196>
		if (*buf != '.') {
    41a0:	2a2e      	cmp	r2, #46	; 0x2e
    41a2:	bf18      	it	ne
    41a4:	469b      	movne	fp, r3
    41a6:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    41a8:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    41ac:	2b45      	cmp	r3, #69	; 0x45
    41ae:	f47f af43 	bne.w	4038 <CONFIG_HEAP_MEM_POOL_SIZE+0x38>
		if (decexp < 0) {
    41b2:	2e00      	cmp	r6, #0
		*buf++ = c;
    41b4:	465a      	mov	r2, fp
			decexp = -decexp;
    41b6:	bfba      	itte	lt
    41b8:	4276      	neglt	r6, r6
			*buf++ = '-';
    41ba:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    41bc:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    41be:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    41c0:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    41c4:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    41c8:	dd0a      	ble.n	41e0 <CONFIG_HEAP_MEM_POOL_SIZE+0x1e0>
			*buf++ = (decexp / 100) + '0';
    41ca:	2164      	movs	r1, #100	; 0x64
    41cc:	fb96 f3f1 	sdiv	r3, r6, r1
    41d0:	f103 0030 	add.w	r0, r3, #48	; 0x30
    41d4:	f10b 0203 	add.w	r2, fp, #3
    41d8:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    41dc:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    41e0:	210a      	movs	r1, #10
    41e2:	4693      	mov	fp, r2
    41e4:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    41e8:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    41ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    41f0:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    41f2:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    41f6:	7056      	strb	r6, [r2, #1]
    41f8:	e71e      	b.n	4038 <CONFIG_HEAP_MEM_POOL_SIZE+0x38>
			*buf++ = '.';
    41fa:	232e      	movs	r3, #46	; 0x2e
    41fc:	f107 0b02 	add.w	fp, r7, #2
    4200:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    4202:	2d00      	cmp	r5, #0
    4204:	ddc1      	ble.n	418a <CONFIG_HEAP_MEM_POOL_SIZE+0x18a>
    4206:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4208:	2b00      	cmp	r3, #0
    420a:	ddbe      	ble.n	418a <CONFIG_HEAP_MEM_POOL_SIZE+0x18a>
			*buf++ = _get_digit(&fract, &digit_count);
    420c:	a911      	add	r1, sp, #68	; 0x44
    420e:	a812      	add	r0, sp, #72	; 0x48
    4210:	f014 fdbf 	bl	18d92 <_get_digit>
			precision--;
    4214:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    4216:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    421a:	e7f2      	b.n	4202 <CONFIG_HEAP_MEM_POOL_SIZE+0x202>
			zero.predot = zero.postdot = zero.trail = 0;
    421c:	46c2      	mov	sl, r8
    421e:	4647      	mov	r7, r8
    4220:	e7c2      	b.n	41a8 <CONFIG_HEAP_MEM_POOL_SIZE+0x1a8>
					prefix = 1;
    4222:	f04f 0801 	mov.w	r8, #1
    4226:	e62f      	b.n	3e88 <z_prf+0x3d4>
				switch (i) {
    4228:	46b1      	mov	r9, r6
    422a:	2f68      	cmp	r7, #104	; 0x68
    422c:	f859 3b04 	ldr.w	r3, [r9], #4
    4230:	d005      	beq.n	423e <CONFIG_HEAP_MEM_POOL_SIZE+0x23e>
    4232:	dc01      	bgt.n	4238 <CONFIG_HEAP_MEM_POOL_SIZE+0x238>
    4234:	2f48      	cmp	r7, #72	; 0x48
    4236:	d007      	beq.n	4248 <CONFIG_HEAP_MEM_POOL_SIZE+0x248>
					*va_arg(vargs, int *) = count;
    4238:	9a00      	ldr	r2, [sp, #0]
    423a:	601a      	str	r2, [r3, #0]
					break;
    423c:	e001      	b.n	4242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
					*va_arg(vargs, short *) = count;
    423e:	9a00      	ldr	r2, [sp, #0]
    4240:	801a      	strh	r2, [r3, #0]
				continue;
    4242:	464e      	mov	r6, r9
    4244:	9a05      	ldr	r2, [sp, #20]
    4246:	e43d      	b.n	3ac4 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    4248:	9a00      	ldr	r2, [sp, #0]
    424a:	701a      	strb	r2, [r3, #0]
					break;
    424c:	e7f9      	b.n	4242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
				val = (uintptr_t) va_arg(vargs, void *);
    424e:	46b1      	mov	r9, r6
		*buf++ = '0';
    4250:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    4254:	2210      	movs	r2, #16
    4256:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    425a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    425e:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    4262:	f014 fd36 	bl	18cd2 <_to_x>
				prefix = 2;
    4266:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    426a:	1c86      	adds	r6, r0, #2
				break;
    426c:	e52c      	b.n	3cc8 <z_prf+0x214>
					if (cptr[clen] == '\0') {
    426e:	5d9a      	ldrb	r2, [r3, r6]
    4270:	2a00      	cmp	r2, #0
    4272:	d04a      	beq.n	430a <CONFIG_HEAP_MEM_POOL_SIZE+0x30a>
				for (clen = 0; clen < precision; clen++) {
    4274:	3601      	adds	r6, #1
    4276:	e53c      	b.n	3cf2 <z_prf+0x23e>
	if (alt_form) {
    4278:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    427a:	2208      	movs	r2, #8
    427c:	4620      	mov	r0, r4
    427e:	f014 fd28 	bl	18cd2 <_to_x>
    4282:	ae17      	add	r6, sp, #92	; 0x5c
    4284:	1ba6      	subs	r6, r4, r6
    4286:	4406      	add	r6, r0
			prefix = 0;
    4288:	f04f 0800 	mov.w	r8, #0
    428c:	e51c      	b.n	3cc8 <z_prf+0x214>
		*buf++ = '0';
    428e:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    4292:	e7f2      	b.n	427a <CONFIG_HEAP_MEM_POOL_SIZE+0x27a>
				} else if (c == 'u') {
    4294:	2c75      	cmp	r4, #117	; 0x75
    4296:	d105      	bne.n	42a4 <CONFIG_HEAP_MEM_POOL_SIZE+0x2a4>
	return _to_x(buf, value, 10);
    4298:	220a      	movs	r2, #10
    429a:	a817      	add	r0, sp, #92	; 0x5c
    429c:	f014 fd19 	bl	18cd2 <_to_x>
    42a0:	4606      	mov	r6, r0
    42a2:	e7f1      	b.n	4288 <CONFIG_HEAP_MEM_POOL_SIZE+0x288>
	if (alt_form) {
    42a4:	9b06      	ldr	r3, [sp, #24]
    42a6:	b193      	cbz	r3, 42ce <CONFIG_HEAP_MEM_POOL_SIZE+0x2ce>
		*buf++ = '0';
    42a8:	f647 0330 	movw	r3, #30768	; 0x7830
    42ac:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    42b0:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    42b4:	2210      	movs	r2, #16
    42b6:	4638      	mov	r0, r7
    42b8:	f014 fd0b 	bl	18cd2 <_to_x>
	if (prefix == 'X') {
    42bc:	2c58      	cmp	r4, #88	; 0x58
    42be:	d008      	beq.n	42d2 <CONFIG_HEAP_MEM_POOL_SIZE+0x2d2>
	return len + (buf - buf0);
    42c0:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    42c2:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    42c4:	1bbe      	subs	r6, r7, r6
    42c6:	4406      	add	r6, r0
						prefix = 2;
    42c8:	ea4f 0843 	mov.w	r8, r3, lsl #1
    42cc:	e4fc      	b.n	3cc8 <z_prf+0x214>
	if (alt_form) {
    42ce:	af17      	add	r7, sp, #92	; 0x5c
    42d0:	e7f0      	b.n	42b4 <CONFIG_HEAP_MEM_POOL_SIZE+0x2b4>
    42d2:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    42d4:	f812 3b01 	ldrb.w	r3, [r2], #1
    42d8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    42dc:	2919      	cmp	r1, #25
    42de:	d803      	bhi.n	42e8 <CONFIG_HEAP_MEM_POOL_SIZE+0x2e8>
			*buf += 'A' - 'a';
    42e0:	3b20      	subs	r3, #32
    42e2:	f802 3c01 	strb.w	r3, [r2, #-1]
    42e6:	e7f5      	b.n	42d4 <CONFIG_HEAP_MEM_POOL_SIZE+0x2d4>
	} while (*buf++);
    42e8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    42ec:	2b00      	cmp	r3, #0
    42ee:	d1f1      	bne.n	42d4 <CONFIG_HEAP_MEM_POOL_SIZE+0x2d4>
    42f0:	e7e6      	b.n	42c0 <CONFIG_HEAP_MEM_POOL_SIZE+0x2c0>
				PUTC('%');
    42f2:	9904      	ldr	r1, [sp, #16]
    42f4:	4620      	mov	r0, r4
    42f6:	f7ff bbee 	b.w	3ad6 <z_prf+0x22>
				count++;
    42fa:	9b00      	ldr	r3, [sp, #0]
    42fc:	3301      	adds	r3, #1
				count += 2;
    42fe:	9300      	str	r3, [sp, #0]
				continue;
    4300:	46b1      	mov	r9, r6
    4302:	e79e      	b.n	4242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
					prefix = 1;
    4304:	f04f 0801 	mov.w	r8, #1
    4308:	e4de      	b.n	3cc8 <z_prf+0x214>
    430a:	4615      	mov	r5, r2
    430c:	e4f6      	b.n	3cfc <z_prf+0x248>
			cptr = buf;
    430e:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    4310:	2200      	movs	r2, #0
    4312:	e507      	b.n	3d24 <z_prf+0x270>
    4314:	ab17      	add	r3, sp, #92	; 0x5c
    4316:	9a08      	ldr	r2, [sp, #32]
    4318:	e504      	b.n	3d24 <z_prf+0x270>
    431a:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    431e:	9904      	ldr	r1, [sp, #16]
    4320:	9b01      	ldr	r3, [sp, #4]
    4322:	2020      	movs	r0, #32
    4324:	4798      	blx	r3
    4326:	3001      	adds	r0, #1
    4328:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    432c:	f43f abd8 	beq.w	3ae0 <z_prf+0x2c>
				while (width-- > 0) {
    4330:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    4334:	d2f1      	bcs.n	431a <CONFIG_HEAP_MEM_POOL_SIZE+0x31a>
				count += width;
    4336:	9900      	ldr	r1, [sp, #0]
    4338:	4421      	add	r1, r4
    433a:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    433c:	465c      	mov	r4, fp
    433e:	e4fb      	b.n	3d38 <z_prf+0x284>
    4340:	46a3      	mov	fp, r4
    4342:	e7f5      	b.n	4330 <CONFIG_HEAP_MEM_POOL_SIZE+0x330>
				PUTC(*cptr++);
    4344:	f813 0b01 	ldrb.w	r0, [r3], #1
    4348:	9307      	str	r3, [sp, #28]
    434a:	9904      	ldr	r1, [sp, #16]
    434c:	9b01      	ldr	r3, [sp, #4]
    434e:	9208      	str	r2, [sp, #32]
    4350:	4798      	blx	r3
    4352:	3001      	adds	r0, #1
    4354:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    4358:	f47f acf0 	bne.w	3d3c <z_prf+0x288>
    435c:	f7ff bbc0 	b.w	3ae0 <z_prf+0x2c>
    4360:	33333332 	.word	0x33333332
				PUTC('0');
    4364:	9904      	ldr	r1, [sp, #16]
    4366:	9b01      	ldr	r3, [sp, #4]
    4368:	9207      	str	r2, [sp, #28]
    436a:	2030      	movs	r0, #48	; 0x30
    436c:	4798      	blx	r3
    436e:	3001      	adds	r0, #1
    4370:	9a07      	ldr	r2, [sp, #28]
    4372:	f47f ace6 	bne.w	3d42 <z_prf+0x28e>
    4376:	f7ff bbb3 	b.w	3ae0 <z_prf+0x2c>
					PUTC(c);
    437a:	9904      	ldr	r1, [sp, #16]
    437c:	9b01      	ldr	r3, [sp, #4]
    437e:	4798      	blx	r3
    4380:	3001      	adds	r0, #1
    4382:	f43f abad 	beq.w	3ae0 <z_prf+0x2c>
					c = *++cptr;
    4386:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    438a:	e4e7      	b.n	3d5c <z_prf+0x2a8>
					PUTC('0');
    438c:	9904      	ldr	r1, [sp, #16]
    438e:	9b01      	ldr	r3, [sp, #4]
    4390:	2030      	movs	r0, #48	; 0x30
    4392:	4798      	blx	r3
    4394:	3001      	adds	r0, #1
    4396:	f47f ace9 	bne.w	3d6c <z_prf+0x2b8>
    439a:	f7ff bba1 	b.w	3ae0 <z_prf+0x2c>
					PUTC('0');
    439e:	9904      	ldr	r1, [sp, #16]
    43a0:	9b01      	ldr	r3, [sp, #4]
    43a2:	2030      	movs	r0, #48	; 0x30
    43a4:	4798      	blx	r3
    43a6:	3001      	adds	r0, #1
    43a8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    43ac:	f47f acf6 	bne.w	3d9c <z_prf+0x2e8>
    43b0:	f7ff bb96 	b.w	3ae0 <z_prf+0x2c>
					PUTC(c);
    43b4:	9904      	ldr	r1, [sp, #16]
    43b6:	9b01      	ldr	r3, [sp, #4]
    43b8:	4798      	blx	r3
    43ba:	3001      	adds	r0, #1
    43bc:	f43f ab90 	beq.w	3ae0 <z_prf+0x2c>
					c = *++cptr;
    43c0:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    43c4:	e4f4      	b.n	3db0 <z_prf+0x2fc>
					PUTC('0');
    43c6:	9904      	ldr	r1, [sp, #16]
    43c8:	9b01      	ldr	r3, [sp, #4]
    43ca:	2030      	movs	r0, #48	; 0x30
    43cc:	4798      	blx	r3
    43ce:	3001      	adds	r0, #1
    43d0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    43d4:	f47f acf7 	bne.w	3dc6 <z_prf+0x312>
    43d8:	f7ff bb82 	b.w	3ae0 <z_prf+0x2c>
				PUTC(*cptr++);
    43dc:	9904      	ldr	r1, [sp, #16]
    43de:	f81b 0b01 	ldrb.w	r0, [fp], #1
    43e2:	9b01      	ldr	r3, [sp, #4]
    43e4:	4798      	blx	r3
    43e6:	3001      	adds	r0, #1
    43e8:	f43f ab7a 	beq.w	3ae0 <z_prf+0x2c>
    43ec:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    43f0:	2b00      	cmp	r3, #0
    43f2:	dcf3      	bgt.n	43dc <CONFIG_HEAP_MEM_POOL_SIZE+0x3dc>
			count += clen;
    43f4:	9b00      	ldr	r3, [sp, #0]
    43f6:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    43f8:	2c00      	cmp	r4, #0
			count += clen;
    43fa:	4413      	add	r3, r2
    43fc:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    43fe:	f77f af20 	ble.w	4242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
    4402:	4625      	mov	r5, r4
    4404:	e006      	b.n	4414 <CONFIG_HEAP_MEM_POOL_SIZE+0x414>
					PUTC(' ');
    4406:	9904      	ldr	r1, [sp, #16]
    4408:	9b01      	ldr	r3, [sp, #4]
    440a:	2020      	movs	r0, #32
    440c:	4798      	blx	r3
    440e:	3001      	adds	r0, #1
    4410:	f43f ab66 	beq.w	3ae0 <z_prf+0x2c>
				while (width-- > 0) {
    4414:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    4418:	d2f5      	bcs.n	4406 <CONFIG_HEAP_MEM_POOL_SIZE+0x406>
				count += width;
    441a:	9b00      	ldr	r3, [sp, #0]
    441c:	4423      	add	r3, r4
    441e:	9300      	str	r3, [sp, #0]
    4420:	e70f      	b.n	4242 <CONFIG_HEAP_MEM_POOL_SIZE+0x242>
    4422:	bf00      	nop

00004424 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    4424:	b40e      	push	{r1, r2, r3}
    4426:	b50f      	push	{r0, r1, r2, r3, lr}
    4428:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    442a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    442e:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    4432:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    4434:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    4436:	4806      	ldr	r0, [pc, #24]	; (4450 <sprintf+0x2c>)
	va_start(vargs, format);
    4438:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    443a:	a902      	add	r1, sp, #8
    443c:	f7ff fb3a 	bl	3ab4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    4440:	9b02      	ldr	r3, [sp, #8]
    4442:	2200      	movs	r2, #0
    4444:	701a      	strb	r2, [r3, #0]
	return r;
}
    4446:	b004      	add	sp, #16
    4448:	f85d eb04 	ldr.w	lr, [sp], #4
    444c:	b003      	add	sp, #12
    444e:	4770      	bx	lr
    4450:	00018dc1 	.word	0x00018dc1

00004454 <set_lvgl_rendering_cb>:
 */

#include "lvgl_display.h"

int set_lvgl_rendering_cb(lv_disp_drv_t *disp_drv)
{
    4454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4456:	4604      	mov	r4, r0
	int err = 0;
	struct device *display_dev = (struct device *)disp_drv->user_data;
    4458:	6a00      	ldr	r0, [r0, #32]
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->driver_api;

	api->get_capabilities(dev, capabilities);
    445a:	6843      	ldr	r3, [r0, #4]
    445c:	4669      	mov	r1, sp
    445e:	69db      	ldr	r3, [r3, #28]
    4460:	4798      	blx	r3
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);

	switch (cap.current_pixel_format) {
    4462:	f89d 200c 	ldrb.w	r2, [sp, #12]
    4466:	3a01      	subs	r2, #1
    4468:	2300      	movs	r3, #0
    446a:	2a0f      	cmp	r2, #15
    446c:	d820      	bhi.n	44b0 <set_lvgl_rendering_cb+0x5c>
    446e:	e8df f002 	tbb	[pc, r2]
    4472:	190f      	.short	0x190f
    4474:	1f1f191f 	.word	0x1f1f191f
    4478:	1f1f081f 	.word	0x1f1f081f
    447c:	1f1f1f1f 	.word	0x1f1f1f1f
    4480:	141f      	.short	0x141f
	case PIXEL_FORMAT_ARGB_8888:
		disp_drv->flush_cb = lvgl_flush_cb_32bit;
    4482:	4a0e      	ldr	r2, [pc, #56]	; (44bc <set_lvgl_rendering_cb+0x68>)
		disp_drv->rounder_cb = NULL;
    4484:	e9c4 2303 	strd	r2, r3, [r4, #12]
		break;
	case PIXEL_FORMAT_MONO01:
	case PIXEL_FORMAT_MONO10:
		disp_drv->flush_cb = lvgl_flush_cb_mono;
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
    4488:	6163      	str	r3, [r4, #20]
	int err = 0;
    448a:	2000      	movs	r0, #0
		break;

	}

	return err;
}
    448c:	b004      	add	sp, #16
    448e:	bd10      	pop	{r4, pc}
		disp_drv->flush_cb = lvgl_flush_cb_24bit;
    4490:	4a0b      	ldr	r2, [pc, #44]	; (44c0 <set_lvgl_rendering_cb+0x6c>)
		disp_drv->rounder_cb = NULL;
    4492:	e9c4 2303 	strd	r2, r3, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    4496:	4b0b      	ldr	r3, [pc, #44]	; (44c4 <set_lvgl_rendering_cb+0x70>)
    4498:	e7f6      	b.n	4488 <set_lvgl_rendering_cb+0x34>
		disp_drv->flush_cb = lvgl_flush_cb_16bit;
    449a:	4a0b      	ldr	r2, [pc, #44]	; (44c8 <set_lvgl_rendering_cb+0x74>)
		disp_drv->rounder_cb = NULL;
    449c:	e9c4 2303 	strd	r2, r3, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_16bit;
    44a0:	4b0a      	ldr	r3, [pc, #40]	; (44cc <set_lvgl_rendering_cb+0x78>)
    44a2:	e7f1      	b.n	4488 <set_lvgl_rendering_cb+0x34>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
    44a4:	4b0a      	ldr	r3, [pc, #40]	; (44d0 <set_lvgl_rendering_cb+0x7c>)
    44a6:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
    44a8:	4b0a      	ldr	r3, [pc, #40]	; (44d4 <set_lvgl_rendering_cb+0x80>)
    44aa:	6123      	str	r3, [r4, #16]
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
    44ac:	4b0a      	ldr	r3, [pc, #40]	; (44d8 <set_lvgl_rendering_cb+0x84>)
    44ae:	e7eb      	b.n	4488 <set_lvgl_rendering_cb+0x34>
		disp_drv->rounder_cb = NULL;
    44b0:	e9c4 3303 	strd	r3, r3, [r4, #12]
		disp_drv->set_px_cb = NULL;
    44b4:	6163      	str	r3, [r4, #20]
		err = -ENOTSUP;
    44b6:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
    44ba:	e7e7      	b.n	448c <set_lvgl_rendering_cb+0x38>
    44bc:	00019071 	.word	0x00019071
    44c0:	00018fa3 	.word	0x00018fa3
    44c4:	00018ff5 	.word	0x00018ff5
    44c8:	00018f29 	.word	0x00018f29
    44cc:	00018f75 	.word	0x00018f75
    44d0:	00018de1 	.word	0x00018de1
    44d4:	00018ef1 	.word	0x00018ef1
    44d8:	00018e5b 	.word	0x00018e5b

000044dc <lvgl_log>:
	 * * LOG_LEVEL_ERR 1
	 * * LOG_LEVEL_WRN 2
	 * * LOG_LEVEL_INF 3
	 * * LOG_LEVEL_DBG 4
	 */
	u8_t zephyr_level = LOG_LEVEL_DBG - level;
    44dc:	f1c0 0004 	rsb	r0, r0, #4
    44e0:	b240      	sxtb	r0, r0
{
    44e2:	b410      	push	{r4}
	u8_t zephyr_level = LOG_LEVEL_DBG - level;
    44e4:	b2c4      	uxtb	r4, r0

	ARG_UNUSED(file);
	ARG_UNUSED(line);

	Z_LOG(zephyr_level, "%s", dsc);
    44e6:	2c03      	cmp	r4, #3
{
    44e8:	4619      	mov	r1, r3
	Z_LOG(zephyr_level, "%s", dsc);
    44ea:	d818      	bhi.n	451e <lvgl_log+0x42>
    44ec:	f04f 0300 	mov.w	r3, #0
    44f0:	f360 0302 	bfi	r3, r0, #0, #3
    44f4:	4a0b      	ldr	r2, [pc, #44]	; (4524 <lvgl_log+0x48>)
    44f6:	480c      	ldr	r0, [pc, #48]	; (4528 <lvgl_log+0x4c>)
    44f8:	1a12      	subs	r2, r2, r0
    44fa:	f36f 03c5 	bfc	r3, #3, #3
    44fe:	08d2      	lsrs	r2, r2, #3
    4500:	2c04      	cmp	r4, #4
    4502:	f362 138f 	bfi	r3, r2, #6, #10
    4506:	d105      	bne.n	4514 <lvgl_log+0x38>
    4508:	460a      	mov	r2, r1
    450a:	4808      	ldr	r0, [pc, #32]	; (452c <lvgl_log+0x50>)
    450c:	4908      	ldr	r1, [pc, #32]	; (4530 <lvgl_log+0x54>)
}
    450e:	bc10      	pop	{r4}
	Z_LOG(zephyr_level, "%s", dsc);
    4510:	f014 b87f 	b.w	18612 <log_2>
    4514:	461a      	mov	r2, r3
    4516:	4807      	ldr	r0, [pc, #28]	; (4534 <lvgl_log+0x58>)
}
    4518:	bc10      	pop	{r4}
	Z_LOG(zephyr_level, "%s", dsc);
    451a:	f014 b866 	b.w	185ea <log_1>
}
    451e:	bc10      	pop	{r4}
    4520:	4770      	bx	lr
    4522:	bf00      	nop
    4524:	0001e548 	.word	0x0001e548
    4528:	0001e448 	.word	0x0001e448
    452c:	0001f9f3 	.word	0x0001f9f3
    4530:	0001f996 	.word	0x0001f996
    4534:	000213d7 	.word	0x000213d7

00004538 <lvgl_init>:
	return 0;
}
#endif /* CONFIG_LVGL_BUFFER_ALLOC_STATIC */

static int lvgl_init(struct device *dev)
{
    4538:	b510      	push	{r4, lr}
    453a:	b08a      	sub	sp, #40	; 0x28
    453c:	482a      	ldr	r0, [pc, #168]	; (45e8 <lvgl_init+0xb0>)
    453e:	f012 f949 	bl	167d4 <z_impl_device_get_binding>

	struct device *display_dev =
		device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
	lv_disp_drv_t disp_drv;

	if (display_dev == NULL) {
    4542:	4604      	mov	r4, r0
    4544:	b990      	cbnz	r0, 456c <lvgl_init+0x34>
		LOG_ERR("Display device not found.");
    4546:	2301      	movs	r3, #1
    4548:	f04f 0100 	mov.w	r1, #0
    454c:	f363 0107 	bfi	r1, r3, #0, #8
    4550:	4a26      	ldr	r2, [pc, #152]	; (45ec <lvgl_init+0xb4>)
    4552:	4b27      	ldr	r3, [pc, #156]	; (45f0 <lvgl_init+0xb8>)
    4554:	4827      	ldr	r0, [pc, #156]	; (45f4 <lvgl_init+0xbc>)
    4556:	1a9b      	subs	r3, r3, r2
    4558:	08db      	lsrs	r3, r3, #3
    455a:	f363 118f 	bfi	r1, r3, #6, #10
    455e:	f014 f837 	bl	185d0 <log_0>
		return -ENODEV;
    4562:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Failed to register display device.");
		return -EPERM;
	}

	return 0;
}
    4566:	4620      	mov	r0, r4
    4568:	b00a      	add	sp, #40	; 0x28
    456a:	bd10      	pop	{r4, pc}
	lv_log_register_print_cb(lvgl_log);
    456c:	4822      	ldr	r0, [pc, #136]	; (45f8 <lvgl_init+0xc0>)
    456e:	f011 fb51 	bl	15c14 <lv_log_register_print_cb>
	lv_init();
    4572:	f00f fb11 	bl	13b98 <lv_init>
	lv_disp_drv_init(&disp_drv);
    4576:	a801      	add	r0, sp, #4
    4578:	f018 fcdd 	bl	1cf36 <lv_disp_drv_init>
	disp_drv->buffer = &disp_buf;
    457c:	481f      	ldr	r0, [pc, #124]	; (45fc <lvgl_init+0xc4>)
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    457e:	4920      	ldr	r1, [pc, #128]	; (4600 <lvgl_init+0xc8>)
	disp_drv.user_data = (void *) display_dev;
    4580:	9409      	str	r4, [sp, #36]	; 0x24
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4582:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
    4586:	2200      	movs	r2, #0
	disp_drv->buffer = &disp_buf;
    4588:	9002      	str	r0, [sp, #8]
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    458a:	f018 fcea 	bl	1cf62 <lv_disp_buf_init>
	if (set_lvgl_rendering_cb(&disp_drv) != 0) {
    458e:	a801      	add	r0, sp, #4
    4590:	f7ff ff60 	bl	4454 <set_lvgl_rendering_cb>
    4594:	4604      	mov	r4, r0
    4596:	b180      	cbz	r0, 45ba <lvgl_init+0x82>
		LOG_ERR("Display not supported.");
    4598:	2301      	movs	r3, #1
    459a:	f04f 0100 	mov.w	r1, #0
    459e:	f363 0107 	bfi	r1, r3, #0, #8
    45a2:	4a12      	ldr	r2, [pc, #72]	; (45ec <lvgl_init+0xb4>)
    45a4:	4b12      	ldr	r3, [pc, #72]	; (45f0 <lvgl_init+0xb8>)
    45a6:	4817      	ldr	r0, [pc, #92]	; (4604 <lvgl_init+0xcc>)
    45a8:	1a9b      	subs	r3, r3, r2
    45aa:	08db      	lsrs	r3, r3, #3
    45ac:	f363 118f 	bfi	r1, r3, #6, #10
    45b0:	f014 f80e 	bl	185d0 <log_0>
		return -ENOTSUP;
    45b4:	f06f 0422 	mvn.w	r4, #34	; 0x22
    45b8:	e7d5      	b.n	4566 <lvgl_init+0x2e>
	if (lv_disp_drv_register(&disp_drv) == NULL) {
    45ba:	a801      	add	r0, sp, #4
    45bc:	f010 ffa2 	bl	15504 <lv_disp_drv_register>
    45c0:	2800      	cmp	r0, #0
    45c2:	d1d0      	bne.n	4566 <lvgl_init+0x2e>
		LOG_ERR("Failed to register display device.");
    45c4:	2301      	movs	r3, #1
    45c6:	f04f 0100 	mov.w	r1, #0
    45ca:	f363 0107 	bfi	r1, r3, #0, #8
    45ce:	4a07      	ldr	r2, [pc, #28]	; (45ec <lvgl_init+0xb4>)
    45d0:	4b07      	ldr	r3, [pc, #28]	; (45f0 <lvgl_init+0xb8>)
    45d2:	480d      	ldr	r0, [pc, #52]	; (4608 <lvgl_init+0xd0>)
    45d4:	1a9b      	subs	r3, r3, r2
    45d6:	08db      	lsrs	r3, r3, #3
    45d8:	f363 118f 	bfi	r1, r3, #6, #10
    45dc:	f013 fff8 	bl	185d0 <log_0>
		return -EPERM;
    45e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    45e4:	e7bf      	b.n	4566 <lvgl_init+0x2e>
    45e6:	bf00      	nop
    45e8:	0001f260 	.word	0x0001f260
    45ec:	0001e448 	.word	0x0001e448
    45f0:	0001e548 	.word	0x0001e548
    45f4:	0001f99f 	.word	0x0001f99f
    45f8:	000044dd 	.word	0x000044dd
    45fc:	2000014c 	.word	0x2000014c
    4600:	20005d25 	.word	0x20005d25
    4604:	0001f9b9 	.word	0x0001f9b9
    4608:	0001f9d0 	.word	0x0001f9d0

0000460c <nordicsemi_nrf52_init>:
    460c:	f04f 0320 	mov.w	r3, #32
    4610:	f3ef 8211 	mrs	r2, BASEPRI
    4614:	f383 8811 	msr	BASEPRI, r3
    4618:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    461c:	4906      	ldr	r1, [pc, #24]	; (4638 <nordicsemi_nrf52_init+0x2c>)
    461e:	2301      	movs	r3, #1
    4620:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4624:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4628:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    462c:	f382 8811 	msr	BASEPRI, r2
    4630:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4634:	2000      	movs	r0, #0
    4636:	4770      	bx	lr
    4638:	4001e000 	.word	0x4001e000

0000463c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    463c:	b120      	cbz	r0, 4648 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    463e:	4b03      	ldr	r3, [pc, #12]	; (464c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4640:	0180      	lsls	r0, r0, #6
    4642:	f043 0301 	orr.w	r3, r3, #1
    4646:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4648:	4770      	bx	lr
    464a:	bf00      	nop
    464c:	0001e600 	.word	0x0001e600

00004650 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4650:	2940      	cmp	r1, #64	; 0x40
    4652:	4b0e      	ldr	r3, [pc, #56]	; (468c <bt_hex_real+0x3c>)
{
    4654:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    4656:	bf28      	it	cs
    4658:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    465a:	4c0d      	ldr	r4, [pc, #52]	; (4690 <bt_hex_real+0x40>)
    465c:	1846      	adds	r6, r0, r1
    465e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    4660:	42b0      	cmp	r0, r6
    4662:	f103 0302 	add.w	r3, r3, #2
    4666:	d104      	bne.n	4672 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4668:	2300      	movs	r3, #0
    466a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    466e:	4807      	ldr	r0, [pc, #28]	; (468c <bt_hex_real+0x3c>)
    4670:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4672:	7802      	ldrb	r2, [r0, #0]
    4674:	0912      	lsrs	r2, r2, #4
    4676:	5ca2      	ldrb	r2, [r4, r2]
    4678:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    467c:	f810 2b01 	ldrb.w	r2, [r0], #1
    4680:	f002 020f 	and.w	r2, r2, #15
    4684:	5ca2      	ldrb	r2, [r4, r2]
    4686:	f803 2c01 	strb.w	r2, [r3, #-1]
    468a:	e7e9      	b.n	4660 <bt_hex_real+0x10>
    468c:	2000a0a5 	.word	0x2000a0a5
    4690:	0001fa12 	.word	0x0001fa12

00004694 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4694:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    4696:	7802      	ldrb	r2, [r0, #0]
    4698:	2a01      	cmp	r2, #1
{
    469a:	4604      	mov	r4, r0
    469c:	460b      	mov	r3, r1
	switch (src->type) {
    469e:	d017      	beq.n	46d0 <uuid_to_uuid128+0x3c>
    46a0:	b11a      	cbz	r2, 46aa <uuid_to_uuid128+0x16>
    46a2:	2a02      	cmp	r2, #2
    46a4:	d02c      	beq.n	4700 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    46a6:	bcf0      	pop	{r4, r5, r6, r7}
    46a8:	4770      	bx	lr
		*dst = uuid128_base;
    46aa:	4a18      	ldr	r2, [pc, #96]	; (470c <uuid_to_uuid128+0x78>)
    46ac:	460d      	mov	r5, r1
    46ae:	f102 0710 	add.w	r7, r2, #16
    46b2:	6810      	ldr	r0, [r2, #0]
    46b4:	6851      	ldr	r1, [r2, #4]
    46b6:	462e      	mov	r6, r5
    46b8:	c603      	stmia	r6!, {r0, r1}
    46ba:	3208      	adds	r2, #8
    46bc:	42ba      	cmp	r2, r7
    46be:	4635      	mov	r5, r6
    46c0:	d1f7      	bne.n	46b2 <uuid_to_uuid128+0x1e>
    46c2:	7812      	ldrb	r2, [r2, #0]
    46c4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    46c6:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    46c8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    46ca:	0a12      	lsrs	r2, r2, #8
    46cc:	739a      	strb	r2, [r3, #14]
    46ce:	e7ea      	b.n	46a6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    46d0:	4a0e      	ldr	r2, [pc, #56]	; (470c <uuid_to_uuid128+0x78>)
    46d2:	460d      	mov	r5, r1
    46d4:	f102 0710 	add.w	r7, r2, #16
    46d8:	6810      	ldr	r0, [r2, #0]
    46da:	6851      	ldr	r1, [r2, #4]
    46dc:	462e      	mov	r6, r5
    46de:	c603      	stmia	r6!, {r0, r1}
    46e0:	3208      	adds	r2, #8
    46e2:	42ba      	cmp	r2, r7
    46e4:	4635      	mov	r5, r6
    46e6:	d1f7      	bne.n	46d8 <uuid_to_uuid128+0x44>
    46e8:	7812      	ldrb	r2, [r2, #0]
    46ea:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    46ec:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    46ee:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    46f0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    46f4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    46f6:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    46f8:	0a12      	lsrs	r2, r2, #8
    46fa:	7399      	strb	r1, [r3, #14]
    46fc:	741a      	strb	r2, [r3, #16]
    46fe:	e7d2      	b.n	46a6 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    4700:	4601      	mov	r1, r0
    4702:	2211      	movs	r2, #17
    4704:	4618      	mov	r0, r3
}
    4706:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    4708:	f014 ba97 	b.w	18c3a <memcpy>
    470c:	0001fa2a 	.word	0x0001fa2a

00004710 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    4710:	2302      	movs	r3, #2
    4712:	f04f 0200 	mov.w	r2, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    4716:	6881      	ldr	r1, [r0, #8]
    4718:	4805      	ldr	r0, [pc, #20]	; (4730 <hci_data_buf_overflow+0x20>)
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    471a:	7809      	ldrb	r1, [r1, #0]
    471c:	f363 0207 	bfi	r2, r3, #0, #8
    4720:	4b04      	ldr	r3, [pc, #16]	; (4734 <hci_data_buf_overflow+0x24>)
    4722:	1a1b      	subs	r3, r3, r0
    4724:	08db      	lsrs	r3, r3, #3
    4726:	f363 128f 	bfi	r2, r3, #6, #10
    472a:	4803      	ldr	r0, [pc, #12]	; (4738 <hci_data_buf_overflow+0x28>)
    472c:	f013 bf5d 	b.w	185ea <log_1>
    4730:	0001e448 	.word	0x0001e448
    4734:	0001e508 	.word	0x0001e508
    4738:	0001fdd6 	.word	0x0001fdd6

0000473c <le_data_len_change>:
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	u16_t handle = sys_le16_to_cpu(evt->handle);
    473c:	6883      	ldr	r3, [r0, #8]
{
    473e:	b510      	push	{r4, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4740:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    4742:	4620      	mov	r0, r4
    4744:	f002 fb0e 	bl	6d64 <bt_conn_lookup_handle>
	if (!conn) {
    4748:	b980      	cbnz	r0, 476c <le_data_len_change+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    474a:	2301      	movs	r3, #1
    474c:	f04f 0200 	mov.w	r2, #0
    4750:	f363 0207 	bfi	r2, r3, #0, #8
    4754:	4907      	ldr	r1, [pc, #28]	; (4774 <le_data_len_change+0x38>)
    4756:	4b08      	ldr	r3, [pc, #32]	; (4778 <le_data_len_change+0x3c>)
    4758:	4808      	ldr	r0, [pc, #32]	; (477c <le_data_len_change+0x40>)
    475a:	1a5b      	subs	r3, r3, r1
    475c:	08db      	lsrs	r3, r3, #3
    475e:	4621      	mov	r1, r4
    4760:	f363 128f 	bfi	r2, r3, #6, #10
	       max_tx_time, max_rx_octets, max_rx_time);

	/* TODO use those */

	bt_conn_unref(conn);
}
    4764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4768:	f013 bf3f 	b.w	185ea <log_1>
}
    476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    4770:	f014 be5f 	b.w	19432 <bt_conn_unref>
    4774:	0001e448 	.word	0x0001e448
    4778:	0001e508 	.word	0x0001e508
    477c:	0001ffdd 	.word	0x0001ffdd

00004780 <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
    4780:	b510      	push	{r4, lr}
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
    4782:	2302      	movs	r3, #2
    4784:	f04f 0400 	mov.w	r4, #0
    4788:	4a0a      	ldr	r2, [pc, #40]	; (47b4 <hci_vendor_event+0x34>)
    478a:	8981      	ldrh	r1, [r0, #12]
    478c:	6880      	ldr	r0, [r0, #8]
    478e:	f363 0407 	bfi	r4, r3, #0, #8
    4792:	4b09      	ldr	r3, [pc, #36]	; (47b8 <hci_vendor_event+0x38>)
    4794:	1a9b      	subs	r3, r3, r2
    4796:	08db      	lsrs	r3, r3, #3
    4798:	f363 148f 	bfi	r4, r3, #6, #10
    479c:	f7ff ff58 	bl	4650 <bt_hex_real>
    47a0:	f7fd ff2c 	bl	25fc <log_strdup>
    47a4:	4622      	mov	r2, r4
    47a6:	4601      	mov	r1, r0
			bt_hex(buf->data, buf->len));
	}
}
    47a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    47ac:	4803      	ldr	r0, [pc, #12]	; (47bc <hci_vendor_event+0x3c>)
    47ae:	f013 bf1c 	b.w	185ea <log_1>
    47b2:	bf00      	nop
    47b4:	0001e448 	.word	0x0001e448
    47b8:	0001e508 	.word	0x0001e508
    47bc:	0001ff9f 	.word	0x0001ff9f

000047c0 <find_pending_connect.part.16>:
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    47c0:	b507      	push	{r0, r1, r2, lr}
		conn = bt_conn_lookup_state_le(peer_addr,
    47c2:	2104      	movs	r1, #4
    47c4:	f002 fb06 	bl	6dd4 <bt_conn_lookup_state_le>
		if (!conn) {
    47c8:	b960      	cbnz	r0, 47e4 <find_pending_connect.part.16+0x24>
			conn = bt_conn_lookup_state_le(BT_ADDR_LE_NONE,
    47ca:	4b08      	ldr	r3, [pc, #32]	; (47ec <find_pending_connect.part.16+0x2c>)
    47cc:	6818      	ldr	r0, [r3, #0]
    47ce:	889a      	ldrh	r2, [r3, #4]
    47d0:	9000      	str	r0, [sp, #0]
    47d2:	799b      	ldrb	r3, [r3, #6]
    47d4:	f8ad 2004 	strh.w	r2, [sp, #4]
    47d8:	2103      	movs	r1, #3
    47da:	4668      	mov	r0, sp
    47dc:	f88d 3006 	strb.w	r3, [sp, #6]
    47e0:	f002 faf8 	bl	6dd4 <bt_conn_lookup_state_le>
}
    47e4:	b003      	add	sp, #12
    47e6:	f85d fb04 	ldr.w	pc, [sp], #4
    47ea:	bf00      	nop
    47ec:	0001e5b4 	.word	0x0001e5b4

000047f0 <handle_event>:
{
    47f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    47f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    47f6:	4604      	mov	r4, r0
    47f8:	4608      	mov	r0, r1
		if (handler->event != event) {
    47fa:	7811      	ldrb	r1, [r2, #0]
    47fc:	42a1      	cmp	r1, r4
    47fe:	d01e      	beq.n	483e <handle_event+0x4e>
			continue;
    4800:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    4802:	429a      	cmp	r2, r3
    4804:	d1f9      	bne.n	47fa <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    4806:	2302      	movs	r3, #2
    4808:	f04f 0500 	mov.w	r5, #0
    480c:	4a19      	ldr	r2, [pc, #100]	; (4874 <handle_event+0x84>)
    480e:	8986      	ldrh	r6, [r0, #12]
    4810:	6880      	ldr	r0, [r0, #8]
    4812:	f363 0507 	bfi	r5, r3, #0, #8
    4816:	4b18      	ldr	r3, [pc, #96]	; (4878 <handle_event+0x88>)
    4818:	1a9b      	subs	r3, r3, r2
    481a:	08db      	lsrs	r3, r3, #3
    481c:	4631      	mov	r1, r6
    481e:	f363 158f 	bfi	r5, r3, #6, #10
    4822:	f7ff ff15 	bl	4650 <bt_hex_real>
    4826:	f7fd fee9 	bl	25fc <log_strdup>
    482a:	f8ad 5000 	strh.w	r5, [sp]
    482e:	4603      	mov	r3, r0
    4830:	4632      	mov	r2, r6
    4832:	4621      	mov	r1, r4
    4834:	4811      	ldr	r0, [pc, #68]	; (487c <handle_event+0x8c>)
    4836:	f013 ff04 	bl	18642 <log_3>
}
    483a:	b002      	add	sp, #8
    483c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    483e:	8981      	ldrh	r1, [r0, #12]
    4840:	7853      	ldrb	r3, [r2, #1]
    4842:	428b      	cmp	r3, r1
    4844:	d911      	bls.n	486a <handle_event+0x7a>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4846:	2201      	movs	r2, #1
    4848:	f04f 0300 	mov.w	r3, #0
    484c:	f362 0307 	bfi	r3, r2, #0, #8
    4850:	4808      	ldr	r0, [pc, #32]	; (4874 <handle_event+0x84>)
    4852:	4a09      	ldr	r2, [pc, #36]	; (4878 <handle_event+0x88>)
    4854:	1a12      	subs	r2, r2, r0
    4856:	08d2      	lsrs	r2, r2, #3
    4858:	4809      	ldr	r0, [pc, #36]	; (4880 <handle_event+0x90>)
    485a:	f362 138f 	bfi	r3, r2, #6, #10
    485e:	4622      	mov	r2, r4
}
    4860:	b002      	add	sp, #8
    4862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4866:	f013 bed4 	b.w	18612 <log_2>
		handler->handler(buf);
    486a:	6853      	ldr	r3, [r2, #4]
}
    486c:	b002      	add	sp, #8
    486e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    4872:	4718      	bx	r3
    4874:	0001e448 	.word	0x0001e448
    4878:	0001e508 	.word	0x0001e508
    487c:	0001fd4c 	.word	0x0001fd4c
    4880:	0001fd2a 	.word	0x0001fd2a

00004884 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_generate_dhkey_complete)),
#endif /* CONFIG_BT_SMP */
};

static void hci_le_meta_event(struct net_buf *buf)
{
    4884:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_meta_event *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4886:	2101      	movs	r1, #1
{
    4888:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    488a:	3008      	adds	r0, #8
    488c:	f016 fd00 	bl	1b290 <net_buf_simple_pull_mem>

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4890:	4621      	mov	r1, r4
    4892:	2307      	movs	r3, #7
    4894:	4a02      	ldr	r2, [pc, #8]	; (48a0 <hci_le_meta_event+0x1c>)
    4896:	7800      	ldrb	r0, [r0, #0]
}
    4898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    489c:	f7ff bfa8 	b.w	47f0 <handle_event>
    48a0:	0001e728 	.word	0x0001e728

000048a4 <hci_cmd_done>:
{
    48a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48a8:	4606      	mov	r6, r0
    48aa:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    48ac:	7990      	ldrb	r0, [r2, #6]
    48ae:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 49a0 <hci_cmd_done+0xfc>
{
    48b2:	460f      	mov	r7, r1
    48b4:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    48b6:	f00d fdbf 	bl	12438 <net_buf_pool_get>
    48ba:	4580      	cmp	r8, r0
    48bc:	d01a      	beq.n	48f4 <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    48be:	2302      	movs	r3, #2
    48c0:	f04f 0400 	mov.w	r4, #0
    48c4:	f363 0407 	bfi	r4, r3, #0, #8
    48c8:	4a30      	ldr	r2, [pc, #192]	; (498c <hci_cmd_done+0xe8>)
    48ca:	4b31      	ldr	r3, [pc, #196]	; (4990 <hci_cmd_done+0xec>)
    48cc:	79a8      	ldrb	r0, [r5, #6]
    48ce:	9600      	str	r6, [sp, #0]
    48d0:	1ad2      	subs	r2, r2, r3
    48d2:	08d2      	lsrs	r2, r2, #3
    48d4:	f362 148f 	bfi	r4, r2, #6, #10
    48d8:	9001      	str	r0, [sp, #4]
    48da:	f00d fdad 	bl	12438 <net_buf_pool_get>
    48de:	4623      	mov	r3, r4
    48e0:	e9cd 0802 	strd	r0, r8, [sp, #8]
    48e4:	2204      	movs	r2, #4
    48e6:	4669      	mov	r1, sp
    48e8:	482a      	ldr	r0, [pc, #168]	; (4994 <hci_cmd_done+0xf0>)
    48ea:	f013 fec5 	bl	18678 <log_n>
}
    48ee:	b005      	add	sp, #20
    48f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    48f4:	4628      	mov	r0, r5
    48f6:	f00d fda5 	bl	12444 <net_buf_id>
    48fa:	4c27      	ldr	r4, [pc, #156]	; (4998 <hci_cmd_done+0xf4>)
    48fc:	f04f 080c 	mov.w	r8, #12
    4900:	fb08 4000 	mla	r0, r8, r0, r4
    4904:	8843      	ldrh	r3, [r0, #2]
    4906:	42b3      	cmp	r3, r6
    4908:	d015      	beq.n	4936 <hci_cmd_done+0x92>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    490a:	2302      	movs	r3, #2
    490c:	f04f 0900 	mov.w	r9, #0
    4910:	f363 0907 	bfi	r9, r3, #0, #8
    4914:	4a1d      	ldr	r2, [pc, #116]	; (498c <hci_cmd_done+0xe8>)
    4916:	4b1e      	ldr	r3, [pc, #120]	; (4990 <hci_cmd_done+0xec>)
    4918:	1ad2      	subs	r2, r2, r3
    491a:	08d2      	lsrs	r2, r2, #3
    491c:	4628      	mov	r0, r5
    491e:	f362 198f 	bfi	r9, r2, #6, #10
    4922:	f00d fd8f 	bl	12444 <net_buf_id>
    4926:	fb08 4000 	mla	r0, r8, r0, r4
    492a:	464b      	mov	r3, r9
    492c:	8842      	ldrh	r2, [r0, #2]
    492e:	481b      	ldr	r0, [pc, #108]	; (499c <hci_cmd_done+0xf8>)
    4930:	4631      	mov	r1, r6
    4932:	f013 fe6e 	bl	18612 <log_2>
	if (cmd(buf)->state && !status) {
    4936:	4628      	mov	r0, r5
    4938:	f00d fd84 	bl	12444 <net_buf_id>
    493c:	260c      	movs	r6, #12
    493e:	fb06 4000 	mla	r0, r6, r0, r4
    4942:	6843      	ldr	r3, [r0, #4]
    4944:	b15b      	cbz	r3, 495e <hci_cmd_done+0xba>
    4946:	b957      	cbnz	r7, 495e <hci_cmd_done+0xba>
		struct cmd_state_set *update = cmd(buf)->state;
    4948:	4628      	mov	r0, r5
    494a:	f00d fd7b 	bl	12444 <net_buf_id>
    494e:	fb06 4000 	mla	r0, r6, r0, r4
    4952:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    4954:	7a1a      	ldrb	r2, [r3, #8]
    4956:	e9d3 0100 	ldrd	r0, r1, [r3]
    495a:	f014 fc49 	bl	191f0 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    495e:	4628      	mov	r0, r5
    4960:	f00d fd70 	bl	12444 <net_buf_id>
    4964:	260c      	movs	r6, #12
    4966:	fb06 4000 	mla	r0, r6, r0, r4
    496a:	6883      	ldr	r3, [r0, #8]
    496c:	2b00      	cmp	r3, #0
    496e:	d0be      	beq.n	48ee <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
    4970:	4628      	mov	r0, r5
    4972:	f00d fd67 	bl	12444 <net_buf_id>
    4976:	4370      	muls	r0, r6
    4978:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
    497a:	4628      	mov	r0, r5
    497c:	f00d fd62 	bl	12444 <net_buf_id>
    4980:	fb06 4000 	mla	r0, r6, r0, r4
    4984:	6880      	ldr	r0, [r0, #8]
	z_impl_k_sem_give(sem);
    4986:	f012 fcdb 	bl	17340 <z_impl_k_sem_give>
    498a:	e7b0      	b.n	48ee <hci_cmd_done+0x4a>
    498c:	0001e508 	.word	0x0001e508
    4990:	0001e448 	.word	0x0001e448
    4994:	0001fd6e 	.word	0x0001fd6e
    4998:	20000168 	.word	0x20000168
    499c:	0001fda3 	.word	0x0001fda3
    49a0:	2000d2f8 	.word	0x2000d2f8

000049a4 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    49a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    49a6:	4e0b      	ldr	r6, [pc, #44]	; (49d4 <id_find+0x30>)
{
    49a8:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    49aa:	2500      	movs	r5, #0
    49ac:	79f3      	ldrb	r3, [r6, #7]
    49ae:	b2ec      	uxtb	r4, r5
    49b0:	42a3      	cmp	r3, r4
    49b2:	d802      	bhi.n	49ba <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    49b4:	f06f 0401 	mvn.w	r4, #1
    49b8:	e009      	b.n	49ce <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    49ba:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    49be:	2207      	movs	r2, #7
    49c0:	4431      	add	r1, r6
    49c2:	4638      	mov	r0, r7
    49c4:	f014 f929 	bl	18c1a <memcmp>
    49c8:	3501      	adds	r5, #1
    49ca:	2800      	cmp	r0, #0
    49cc:	d1ee      	bne.n	49ac <id_find+0x8>
}
    49ce:	4620      	mov	r0, r4
    49d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49d2:	bf00      	nop
    49d4:	2000ca40 	.word	0x2000ca40

000049d8 <le_conn_update_complete>:
{
    49d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    49da:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    49dc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    49e0:	4630      	mov	r0, r6
    49e2:	f002 f9bf 	bl	6d64 <bt_conn_lookup_handle>
	if (!conn) {
    49e6:	4604      	mov	r4, r0
    49e8:	b980      	cbnz	r0, 4a0c <le_conn_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    49ea:	2301      	movs	r3, #1
    49ec:	f04f 0200 	mov.w	r2, #0
    49f0:	f363 0207 	bfi	r2, r3, #0, #8
    49f4:	4921      	ldr	r1, [pc, #132]	; (4a7c <le_conn_update_complete+0xa4>)
    49f6:	4b22      	ldr	r3, [pc, #136]	; (4a80 <le_conn_update_complete+0xa8>)
    49f8:	4822      	ldr	r0, [pc, #136]	; (4a84 <le_conn_update_complete+0xac>)
    49fa:	1a5b      	subs	r3, r3, r1
    49fc:	08db      	lsrs	r3, r3, #3
    49fe:	f363 128f 	bfi	r2, r3, #6, #10
    4a02:	4631      	mov	r1, r6
    4a04:	f013 fdf1 	bl	185ea <log_1>
}
    4a08:	b002      	add	sp, #8
    4a0a:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    4a0c:	782b      	ldrb	r3, [r5, #0]
    4a0e:	b9bb      	cbnz	r3, 4a40 <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4a10:	792a      	ldrb	r2, [r5, #4]
    4a12:	78eb      	ldrb	r3, [r5, #3]
    4a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4a18:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4a1c:	79aa      	ldrb	r2, [r5, #6]
    4a1e:	796b      	ldrb	r3, [r5, #5]
    4a20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4a24:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4a28:	79eb      	ldrb	r3, [r5, #7]
    4a2a:	7a2a      	ldrb	r2, [r5, #8]
    4a2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4a30:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
		notify_le_param_updated(conn);
    4a34:	f001 fece 	bl	67d4 <notify_le_param_updated>
	bt_conn_unref(conn);
    4a38:	4620      	mov	r0, r4
    4a3a:	f014 fcfa 	bl	19432 <bt_conn_unref>
    4a3e:	e7e3      	b.n	4a08 <le_conn_update_complete+0x30>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    4a40:	2b1a      	cmp	r3, #26
    4a42:	d1f9      	bne.n	4a38 <le_conn_update_complete+0x60>
    4a44:	78c3      	ldrb	r3, [r0, #3]
    4a46:	2b01      	cmp	r3, #1
    4a48:	d1f6      	bne.n	4a38 <le_conn_update_complete+0x60>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4a4a:	f3bf 8f5b 	dmb	ish
    4a4e:	1d03      	adds	r3, r0, #4
    4a50:	e853 2f00 	ldrex	r2, [r3]
    4a54:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
    4a58:	e843 1500 	strex	r5, r1, [r3]
    4a5c:	2d00      	cmp	r5, #0
    4a5e:	d1f7      	bne.n	4a50 <le_conn_update_complete+0x78>
    4a60:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
    4a64:	0553      	lsls	r3, r2, #21
    4a66:	d4e7      	bmi.n	4a38 <le_conn_update_complete+0x60>
		param.interval_min = conn->le.interval_min;
    4a68:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    4a6c:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    4a6e:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    4a70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    4a74:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    4a76:	f002 fcf5 	bl	7464 <bt_l2cap_update_conn_param>
    4a7a:	e7dd      	b.n	4a38 <le_conn_update_complete+0x60>
    4a7c:	0001e448 	.word	0x0001e448
    4a80:	0001e508 	.word	0x0001e508
    4a84:	0001ffdd 	.word	0x0001ffdd

00004a88 <hci_num_completed_packets>:
{
    4a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				BT_ERR("packets count mismatch");
    4a8c:	4b53      	ldr	r3, [pc, #332]	; (4bdc <hci_num_completed_packets+0x154>)
    4a8e:	4c54      	ldr	r4, [pc, #336]	; (4be0 <hci_num_completed_packets+0x158>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4a90:	f8d0 a008 	ldr.w	sl, [r0, #8]
				BT_ERR("packets count mismatch");
    4a94:	1ae4      	subs	r4, r4, r3
    4a96:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	for (i = 0; i < evt->num_handles; i++) {
    4a9a:	2500      	movs	r5, #0
    4a9c:	f89a 3000 	ldrb.w	r3, [sl]
    4aa0:	429d      	cmp	r5, r3
    4aa2:	db02      	blt.n	4aaa <hci_num_completed_packets+0x22>
}
    4aa4:	b003      	add	sp, #12
    4aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4aaa:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
    4aae:	f8b3 9001 	ldrh.w	r9, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4ab2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    4ab6:	f04f 0320 	mov.w	r3, #32
    4aba:	f3ef 8211 	mrs	r2, BASEPRI
    4abe:	f383 8811 	msr	BASEPRI, r3
    4ac2:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    4ac6:	4648      	mov	r0, r9
    4ac8:	9201      	str	r2, [sp, #4]
    4aca:	f002 f94b 	bl	6d64 <bt_conn_lookup_handle>
		if (!conn) {
    4ace:	9a01      	ldr	r2, [sp, #4]
    4ad0:	4683      	mov	fp, r0
    4ad2:	b990      	cbnz	r0, 4afa <hci_num_completed_packets+0x72>
	__asm__ volatile(
    4ad4:	f382 8811 	msr	BASEPRI, r2
    4ad8:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    4adc:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    4ae0:	f043 0301 	orr.w	r3, r3, #1
    4ae4:	f363 0707 	bfi	r7, r3, #0, #8
    4ae8:	f364 178f 	bfi	r7, r4, #6, #10
    4aec:	463a      	mov	r2, r7
    4aee:	4649      	mov	r1, r9
    4af0:	483c      	ldr	r0, [pc, #240]	; (4be4 <hci_num_completed_packets+0x15c>)
    4af2:	f013 fd7a 	bl	185ea <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    4af6:	3501      	adds	r5, #1
    4af8:	e7d0      	b.n	4a9c <hci_num_completed_packets+0x14>
    4afa:	f382 8811 	msr	BASEPRI, r2
    4afe:	f3bf 8f6f 	isb	sy
    4b02:	f100 0930 	add.w	r9, r0, #48	; 0x30
		while (count--) {
    4b06:	b3b6      	cbz	r6, 4b76 <hci_num_completed_packets+0xee>
	__asm__ volatile(
    4b08:	f04f 0220 	mov.w	r2, #32
    4b0c:	f3ef 8111 	mrs	r1, BASEPRI
    4b10:	f382 8811 	msr	BASEPRI, r2
    4b14:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    4b18:	f8db 201c 	ldr.w	r2, [fp, #28]
    4b1c:	b172      	cbz	r2, 4b3c <hci_num_completed_packets+0xb4>
				conn->pending_no_cb--;
    4b1e:	3a01      	subs	r2, #1
    4b20:	f8cb 201c 	str.w	r2, [fp, #28]
	__asm__ volatile(
    4b24:	f381 8811 	msr	BASEPRI, r1
    4b28:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    4b2c:	4658      	mov	r0, fp
    4b2e:	f001 fe4d 	bl	67cc <bt_conn_get_pkts>
    4b32:	3e01      	subs	r6, #1
    4b34:	f012 fc04 	bl	17340 <z_impl_k_sem_give>
    4b38:	b2b6      	uxth	r6, r6
    4b3a:	e7e4      	b.n	4b06 <hci_num_completed_packets+0x7e>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    4b3c:	f8db 2014 	ldr.w	r2, [fp, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4b40:	b142      	cbz	r2, 4b54 <hci_num_completed_packets+0xcc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4b42:	f8db 0018 	ldr.w	r0, [fp, #24]
    4b46:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    4b48:	f8cb 3014 	str.w	r3, [fp, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4b4c:	4282      	cmp	r2, r0
	list->tail = node;
    4b4e:	bf08      	it	eq
    4b50:	f8cb 3018 	streq.w	r3, [fp, #24]
    4b54:	f381 8811 	msr	BASEPRI, r1
    4b58:	f3bf 8f6f 	isb	sy
			if (!node) {
    4b5c:	b97a      	cbnz	r2, 4b7e <hci_num_completed_packets+0xf6>
				BT_ERR("packets count mismatch");
    4b5e:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    4b62:	f042 0201 	orr.w	r2, r2, #1
    4b66:	f362 0807 	bfi	r8, r2, #0, #8
    4b6a:	f364 188f 	bfi	r8, r4, #6, #10
    4b6e:	4641      	mov	r1, r8
    4b70:	481d      	ldr	r0, [pc, #116]	; (4be8 <hci_num_completed_packets+0x160>)
    4b72:	f013 fd2d 	bl	185d0 <log_0>
		bt_conn_unref(conn);
    4b76:	4658      	mov	r0, fp
    4b78:	f014 fc5b 	bl	19432 <bt_conn_unref>
    4b7c:	e7bb      	b.n	4af6 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    4b7e:	f04f 0120 	mov.w	r1, #32
    4b82:	f3ef 8011 	mrs	r0, BASEPRI
    4b86:	f381 8811 	msr	BASEPRI, r1
    4b8a:	f3bf 8f6f 	isb	sy
			tx->pending_no_cb = 0U;
    4b8e:	2300      	movs	r3, #0
			conn->pending_no_cb = tx->pending_no_cb;
    4b90:	68d1      	ldr	r1, [r2, #12]
    4b92:	f8cb 101c 	str.w	r1, [fp, #28]
	parent->next = child;
    4b96:	6013      	str	r3, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    4b98:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
			tx->pending_no_cb = 0U;
    4b9c:	60d3      	str	r3, [r2, #12]
    4b9e:	b9c9      	cbnz	r1, 4bd4 <hci_num_completed_packets+0x14c>
	list->head = node;
    4ba0:	e9cb 2208 	strd	r2, r2, [fp, #32]
	__asm__ volatile(
    4ba4:	f380 8811 	msr	BASEPRI, r0
    4ba8:	f3bf 8f6f 	isb	sy
    4bac:	f3bf 8f5b 	dmb	ish
    4bb0:	e859 2f00 	ldrex	r2, [r9]
    4bb4:	f042 0301 	orr.w	r3, r2, #1
    4bb8:	e849 3100 	strex	r1, r3, [r9]
    4bbc:	2900      	cmp	r1, #0
    4bbe:	d1f7      	bne.n	4bb0 <hci_num_completed_packets+0x128>
    4bc0:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4bc4:	07d3      	lsls	r3, r2, #31
    4bc6:	d4b1      	bmi.n	4b2c <hci_num_completed_packets+0xa4>
		k_queue_append(&work_q->queue, work);
    4bc8:	f10b 0128 	add.w	r1, fp, #40	; 0x28
    4bcc:	4807      	ldr	r0, [pc, #28]	; (4bec <hci_num_completed_packets+0x164>)
    4bce:	f018 ff86 	bl	1dade <k_queue_append>
    4bd2:	e7ab      	b.n	4b2c <hci_num_completed_packets+0xa4>
	parent->next = child;
    4bd4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4bd6:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    4bda:	e7e3      	b.n	4ba4 <hci_num_completed_packets+0x11c>
    4bdc:	0001e448 	.word	0x0001e448
    4be0:	0001e508 	.word	0x0001e508
    4be4:	0001fedd 	.word	0x0001fedd
    4be8:	0001fef9 	.word	0x0001fef9
    4bec:	20005c68 	.word	0x20005c68

00004bf0 <hci_cmd_status>:
{
    4bf0:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4bf2:	2104      	movs	r1, #4
{
    4bf4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4bf6:	3008      	adds	r0, #8
    4bf8:	f016 fb4a 	bl	1b290 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    4bfc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    4bfe:	7801      	ldrb	r1, [r0, #0]
    4c00:	8840      	ldrh	r0, [r0, #2]
    4c02:	4622      	mov	r2, r4
    4c04:	f7ff fe4e 	bl	48a4 <hci_cmd_done>
	if (ncmd) {
    4c08:	b125      	cbz	r5, 4c14 <hci_cmd_status+0x24>
    4c0a:	4803      	ldr	r0, [pc, #12]	; (4c18 <hci_cmd_status+0x28>)
}
    4c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4c10:	f012 bb96 	b.w	17340 <z_impl_k_sem_give>
    4c14:	bd38      	pop	{r3, r4, r5, pc}
    4c16:	bf00      	nop
    4c18:	2000cae8 	.word	0x2000cae8

00004c1c <hci_cmd_complete>:
{
    4c1c:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4c1e:	2103      	movs	r1, #3
{
    4c20:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4c22:	3008      	adds	r0, #8
    4c24:	f016 fb34 	bl	1b290 <net_buf_simple_pull_mem>
	status = buf->data[0];
    4c28:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    4c2a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    4c2c:	7819      	ldrb	r1, [r3, #0]
    4c2e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    4c32:	4622      	mov	r2, r4
    4c34:	f7ff fe36 	bl	48a4 <hci_cmd_done>
	if (ncmd) {
    4c38:	b125      	cbz	r5, 4c44 <hci_cmd_complete+0x28>
    4c3a:	4803      	ldr	r0, [pc, #12]	; (4c48 <hci_cmd_complete+0x2c>)
}
    4c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4c40:	f012 bb7e 	b.w	17340 <z_impl_k_sem_give>
    4c44:	bd38      	pop	{r3, r4, r5, pc}
    4c46:	bf00      	nop
    4c48:	2000cae8 	.word	0x2000cae8

00004c4c <bt_hci_cmd_create>:
{
    4c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c50:	4681      	mov	r9, r0
    4c52:	468a      	mov	sl, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4c54:	4816      	ldr	r0, [pc, #88]	; (4cb0 <bt_hci_cmd_create+0x64>)
	cmd(buf)->opcode = opcode;
    4c56:	4f17      	ldr	r7, [pc, #92]	; (4cb4 <bt_hci_cmd_create+0x68>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4c5c:	f016 fab3 	bl	1b1c6 <net_buf_alloc_fixed>
    4c60:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    4c62:	f100 0808 	add.w	r8, r0, #8
    4c66:	2100      	movs	r1, #0
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    4c68:	2600      	movs	r6, #0
    4c6a:	4640      	mov	r0, r8
    4c6c:	f016 faca 	bl	1b204 <net_buf_simple_reserve>
    4c70:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
    4c72:	4620      	mov	r0, r4
    4c74:	f00d fbe6 	bl	12444 <net_buf_id>
    4c78:	250c      	movs	r5, #12
    4c7a:	fb05 7000 	mla	r0, r5, r0, r7
    4c7e:	f8a0 9002 	strh.w	r9, [r0, #2]
	cmd(buf)->sync = NULL;
    4c82:	4620      	mov	r0, r4
    4c84:	f00d fbde 	bl	12444 <net_buf_id>
    4c88:	fb05 7000 	mla	r0, r5, r0, r7
    4c8c:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
    4c8e:	4620      	mov	r0, r4
    4c90:	f00d fbd8 	bl	12444 <net_buf_id>
    4c94:	fb05 7000 	mla	r0, r5, r0, r7
	hdr = net_buf_add(buf, sizeof(*hdr));
    4c98:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    4c9a:	6046      	str	r6, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    4c9c:	4640      	mov	r0, r8
    4c9e:	f016 fac6 	bl	1b22e <net_buf_simple_add>
	hdr->param_len = param_len;
    4ca2:	f880 a002 	strb.w	sl, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    4ca6:	f8a0 9000 	strh.w	r9, [r0]
}
    4caa:	4620      	mov	r0, r4
    4cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cb0:	2000d2f8 	.word	0x2000d2f8
    4cb4:	20000168 	.word	0x20000168

00004cb8 <bt_hci_cmd_send_sync>:
{
    4cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cba:	4615      	mov	r5, r2
    4cbc:	b087      	sub	sp, #28
	if (!buf) {
    4cbe:	460c      	mov	r4, r1
    4cc0:	b919      	cbnz	r1, 4cca <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    4cc2:	f7ff ffc3 	bl	4c4c <bt_hci_cmd_create>
		if (!buf) {
    4cc6:	4604      	mov	r4, r0
    4cc8:	b3a8      	cbz	r0, 4d36 <bt_hci_cmd_send_sync+0x7e>
	z_impl_k_sem_init(sem, initial_count, limit);
    4cca:	2201      	movs	r2, #1
    4ccc:	2100      	movs	r1, #0
    4cce:	4668      	mov	r0, sp
    4cd0:	f019 f887 	bl	1dde2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    4cd4:	4620      	mov	r0, r4
    4cd6:	f00d fbb5 	bl	12444 <net_buf_id>
    4cda:	4f18      	ldr	r7, [pc, #96]	; (4d3c <bt_hci_cmd_send_sync+0x84>)
    4cdc:	260c      	movs	r6, #12
    4cde:	fb06 7000 	mla	r0, r6, r0, r7
    4ce2:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    4ce6:	4620      	mov	r0, r4
    4ce8:	f016 fa9d 	bl	1b226 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4cec:	4621      	mov	r1, r4
    4cee:	4814      	ldr	r0, [pc, #80]	; (4d40 <bt_hci_cmd_send_sync+0x88>)
    4cf0:	f016 fa8c 	bl	1b20c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    4cf4:	f242 7110 	movw	r1, #10000	; 0x2710
    4cf8:	4668      	mov	r0, sp
    4cfa:	f012 fb4d 	bl	17398 <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    4cfe:	4620      	mov	r0, r4
    4d00:	f00d fba0 	bl	12444 <net_buf_id>
    4d04:	4370      	muls	r0, r6
    4d06:	5c3b      	ldrb	r3, [r7, r0]
    4d08:	b173      	cbz	r3, 4d28 <bt_hci_cmd_send_sync+0x70>
		switch (cmd(buf)->status) {
    4d0a:	4620      	mov	r0, r4
    4d0c:	f00d fb9a 	bl	12444 <net_buf_id>
    4d10:	4370      	muls	r0, r6
    4d12:	5c3b      	ldrb	r3, [r7, r0]
    4d14:	2b09      	cmp	r3, #9
			err = -EIO;
    4d16:	bf0c      	ite	eq
    4d18:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    4d1c:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    4d20:	4620      	mov	r0, r4
    4d22:	f00d fc25 	bl	12570 <net_buf_unref>
    4d26:	e003      	b.n	4d30 <bt_hci_cmd_send_sync+0x78>
		if (rsp) {
    4d28:	2d00      	cmp	r5, #0
    4d2a:	d0f9      	beq.n	4d20 <bt_hci_cmd_send_sync+0x68>
			*rsp = buf;
    4d2c:	602c      	str	r4, [r5, #0]
		err = 0;
    4d2e:	461d      	mov	r5, r3
}
    4d30:	4628      	mov	r0, r5
    4d32:	b007      	add	sp, #28
    4d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOBUFS;
    4d36:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4d3a:	e7f9      	b.n	4d30 <bt_hci_cmd_send_sync+0x78>
    4d3c:	20000168 	.word	0x20000168
    4d40:	2000cb04 	.word	0x2000cb04

00004d44 <set_ad>:
{
    4d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d48:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    4d4a:	2120      	movs	r1, #32
{
    4d4c:	4682      	mov	sl, r0
    4d4e:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    4d50:	f7ff ff7c 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    4d54:	4607      	mov	r7, r0
    4d56:	2800      	cmp	r0, #0
    4d58:	d05a      	beq.n	4e10 <set_ad+0xcc>
	set_data = net_buf_add(buf, sizeof(*set_data));
    4d5a:	2120      	movs	r1, #32
    4d5c:	3008      	adds	r0, #8
    4d5e:	f016 fa66 	bl	1b22e <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    4d62:	2220      	movs	r2, #32
    4d64:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    4d66:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    4d68:	f013 ff91 	bl	18c8e <memset>
	for (c = 0; c < ad_len; c++) {
    4d6c:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    4d70:	454c      	cmp	r4, r9
    4d72:	d106      	bne.n	4d82 <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    4d74:	4639      	mov	r1, r7
    4d76:	4650      	mov	r0, sl
    4d78:	2200      	movs	r2, #0
}
    4d7a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    4d7e:	f7ff bf9b 	b.w	4cb8 <bt_hci_cmd_send_sync>
		for (i = 0; i < ad[c].len; i++) {
    4d82:	6826      	ldr	r6, [r4, #0]
    4d84:	f04f 0b00 	mov.w	fp, #0
    4d88:	6863      	ldr	r3, [r4, #4]
    4d8a:	459b      	cmp	fp, r3
    4d8c:	d301      	bcc.n	4d92 <set_ad+0x4e>
    4d8e:	3408      	adds	r4, #8
    4d90:	e7ee      	b.n	4d70 <set_ad+0x2c>
			if (set_data->len + len + 2 > 31) {
    4d92:	782b      	ldrb	r3, [r5, #0]
			int len = data[i].data_len;
    4d94:	7872      	ldrb	r2, [r6, #1]
			u8_t type = data[i].type;
    4d96:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
    4d98:	1c98      	adds	r0, r3, #2
    4d9a:	eb00 0c02 	add.w	ip, r0, r2
    4d9e:	f1bc 0f1f 	cmp.w	ip, #31
    4da2:	dd1a      	ble.n	4dda <set_ad+0x96>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    4da4:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    4da6:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    4daa:	d100      	bne.n	4dae <set_ad+0x6a>
    4dac:	b9a2      	cbnz	r2, 4dd8 <set_ad+0x94>
					net_buf_unref(buf);
    4dae:	4638      	mov	r0, r7
    4db0:	f00d fbde 	bl	12570 <net_buf_unref>
					BT_ERR("Too big advertising data");
    4db4:	2301      	movs	r3, #1
    4db6:	f04f 0100 	mov.w	r1, #0
    4dba:	f363 0107 	bfi	r1, r3, #0, #8
    4dbe:	4a16      	ldr	r2, [pc, #88]	; (4e18 <set_ad+0xd4>)
    4dc0:	4b16      	ldr	r3, [pc, #88]	; (4e1c <set_ad+0xd8>)
    4dc2:	4817      	ldr	r0, [pc, #92]	; (4e20 <set_ad+0xdc>)
    4dc4:	1a9b      	subs	r3, r3, r2
    4dc6:	08db      	lsrs	r3, r3, #3
    4dc8:	f363 118f 	bfi	r1, r3, #6, #10
    4dcc:	f013 fc00 	bl	185d0 <log_0>
					return -EINVAL;
    4dd0:	f06f 0015 	mvn.w	r0, #21
}
    4dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    4dd8:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    4dda:	eb05 0c03 	add.w	ip, r5, r3
    4dde:	3301      	adds	r3, #1
    4de0:	fa4f f882 	sxtb.w	r8, r2
			set_data->data[set_data->len++] = type;
    4de4:	fa55 f383 	uxtab	r3, r5, r3
			set_data->data[set_data->len++] = len + 1;
    4de8:	f108 0e01 	add.w	lr, r8, #1
			set_data->data[set_data->len++] = type;
    4dec:	b2c0      	uxtb	r0, r0
			set_data->data[set_data->len++] = len + 1;
    4dee:	f88c e001 	strb.w	lr, [ip, #1]
			set_data->data[set_data->len++] = type;
    4df2:	7028      	strb	r0, [r5, #0]
    4df4:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    4df6:	3001      	adds	r0, #1
    4df8:	6871      	ldr	r1, [r6, #4]
    4dfa:	4428      	add	r0, r5
    4dfc:	f013 ff1d 	bl	18c3a <memcpy>
			set_data->len += len;
    4e00:	782b      	ldrb	r3, [r5, #0]
    4e02:	4498      	add	r8, r3
    4e04:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
    4e08:	f10b 0b01 	add.w	fp, fp, #1
    4e0c:	3608      	adds	r6, #8
    4e0e:	e7bb      	b.n	4d88 <set_ad+0x44>
		return -ENOBUFS;
    4e10:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4e14:	e7de      	b.n	4dd4 <set_ad+0x90>
    4e16:	bf00      	nop
    4e18:	0001e448 	.word	0x0001e448
    4e1c:	0001e508 	.word	0x0001e508
    4e20:	00020001 	.word	0x00020001

00004e24 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    4e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e28:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	struct bt_data data;
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    4e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    4e2e:	4615      	mov	r5, r2
    4e30:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    4e32:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    4e34:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    4e36:	a902      	add	r1, sp, #8
    4e38:	f242 0008 	movw	r0, #8200	; 0x2008
{
    4e3c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    4e40:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    4e44:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    4e48:	f7ff ff7c 	bl	4d44 <set_ad>
	if (err) {
    4e4c:	4604      	mov	r4, r0
    4e4e:	bb10      	cbnz	r0, 4e96 <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    4e50:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    4e54:	f1b8 0f00 	cmp.w	r8, #0
    4e58:	d011      	beq.n	4e7e <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    4e5a:	b115      	cbz	r5, 4e62 <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    4e5c:	4602      	mov	r2, r0
    4e5e:	42b2      	cmp	r2, r6
    4e60:	d11d      	bne.n	4e9e <le_adv_update+0x7a>
				return -EINVAL;
			}
		}

		name = bt_get_name();
		data = (struct bt_data)BT_DATA(
    4e62:	4d14      	ldr	r5, [pc, #80]	; (4eb4 <le_adv_update+0x90>)
    4e64:	4628      	mov	r0, r5
    4e66:	f013 fec5 	bl	18bf4 <strlen>
    4e6a:	2309      	movs	r3, #9
    4e6c:	f88d 3000 	strb.w	r3, [sp]
			BT_DATA_NAME_COMPLETE,
			name, strlen(name));

		d[1].data = &data;
		d[1].len = 1;
    4e70:	2301      	movs	r3, #1
		data = (struct bt_data)BT_DATA(
    4e72:	f88d 0001 	strb.w	r0, [sp, #1]
    4e76:	9501      	str	r5, [sp, #4]
		d[1].data = &data;
    4e78:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    4e7c:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    4e7e:	9b02      	ldr	r3, [sp, #8]
    4e80:	b913      	cbnz	r3, 4e88 <le_adv_update+0x64>
    4e82:	9b04      	ldr	r3, [sp, #16]
    4e84:	b903      	cbnz	r3, 4e88 <le_adv_update+0x64>
    4e86:	b137      	cbz	r7, 4e96 <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    4e88:	2202      	movs	r2, #2
    4e8a:	a902      	add	r1, sp, #8
    4e8c:	f242 0009 	movw	r0, #8201	; 0x2009
    4e90:	f7ff ff58 	bl	4d44 <set_ad>
    4e94:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    4e96:	4620      	mov	r0, r4
    4e98:	b006      	add	sp, #24
    4e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    4e9e:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    4ea2:	3908      	subs	r1, #8
    4ea4:	2901      	cmp	r1, #1
    4ea6:	d901      	bls.n	4eac <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    4ea8:	3201      	adds	r2, #1
    4eaa:	e7d8      	b.n	4e5e <le_adv_update+0x3a>
				return -EINVAL;
    4eac:	f06f 0415 	mvn.w	r4, #21
    4eb0:	e7f1      	b.n	4e96 <le_adv_update+0x72>
    4eb2:	bf00      	nop
    4eb4:	2000cb18 	.word	0x2000cb18

00004eb8 <set_random_address>:
{
    4eb8:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    4eba:	4d15      	ldr	r5, [pc, #84]	; (4f10 <set_random_address+0x58>)
    4ebc:	2206      	movs	r2, #6
    4ebe:	f105 010a 	add.w	r1, r5, #10
    4ec2:	4606      	mov	r6, r0
    4ec4:	f013 fea9 	bl	18c1a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    4ec8:	4604      	mov	r4, r0
    4eca:	b1d8      	cbz	r0, 4f04 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    4ecc:	2106      	movs	r1, #6
    4ece:	f242 0005 	movw	r0, #8197	; 0x2005
    4ed2:	f7ff febb 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    4ed6:	4604      	mov	r4, r0
    4ed8:	b1b0      	cbz	r0, 4f08 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    4eda:	2206      	movs	r2, #6
    4edc:	4631      	mov	r1, r6
    4ede:	3008      	adds	r0, #8
    4ee0:	f016 f9ab 	bl	1b23a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    4ee4:	4621      	mov	r1, r4
    4ee6:	2200      	movs	r2, #0
    4ee8:	f242 0005 	movw	r0, #8197	; 0x2005
    4eec:	f7ff fee4 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    4ef0:	4604      	mov	r4, r0
    4ef2:	b938      	cbnz	r0, 4f04 <set_random_address+0x4c>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4ef4:	2206      	movs	r2, #6
    4ef6:	4631      	mov	r1, r6
    4ef8:	f105 000a 	add.w	r0, r5, #10
    4efc:	f013 fe9d 	bl	18c3a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    4f00:	2301      	movs	r3, #1
    4f02:	726b      	strb	r3, [r5, #9]
}
    4f04:	4620      	mov	r0, r4
    4f06:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    4f08:	f06f 0436 	mvn.w	r4, #54	; 0x36
    4f0c:	e7fa      	b.n	4f04 <set_random_address+0x4c>
    4f0e:	bf00      	nop
    4f10:	2000ca40 	.word	0x2000ca40

00004f14 <set_advertise_enable>:
{
    4f14:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    4f16:	2101      	movs	r1, #1
{
    4f18:	b085      	sub	sp, #20
    4f1a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    4f1c:	f242 000a 	movw	r0, #8202	; 0x200a
    4f20:	f7ff fe94 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    4f24:	4604      	mov	r4, r0
    4f26:	b1e8      	cbz	r0, 4f64 <set_advertise_enable+0x50>
	if (enable) {
    4f28:	3008      	adds	r0, #8
    4f2a:	b1cd      	cbz	r5, 4f60 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    4f2c:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    4f2e:	f016 f98d 	bl	1b24c <net_buf_simple_add_u8>
	state->target = target;
    4f32:	4b0e      	ldr	r3, [pc, #56]	; (4f6c <set_advertise_enable+0x58>)
    4f34:	9301      	str	r3, [sp, #4]
	cmd(buf)->state = &state;
    4f36:	4620      	mov	r0, r4
	state->bit = bit;
    4f38:	2305      	movs	r3, #5
    4f3a:	9302      	str	r3, [sp, #8]
	state->val = val;
    4f3c:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    4f40:	f00d fa80 	bl	12444 <net_buf_id>
    4f44:	4a0a      	ldr	r2, [pc, #40]	; (4f70 <set_advertise_enable+0x5c>)
    4f46:	230c      	movs	r3, #12
    4f48:	fb03 2000 	mla	r0, r3, r0, r2
    4f4c:	ab01      	add	r3, sp, #4
    4f4e:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    4f50:	2200      	movs	r2, #0
    4f52:	4621      	mov	r1, r4
    4f54:	f242 000a 	movw	r0, #8202	; 0x200a
    4f58:	f7ff feae 	bl	4cb8 <bt_hci_cmd_send_sync>
}
    4f5c:	b005      	add	sp, #20
    4f5e:	bd30      	pop	{r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    4f60:	4629      	mov	r1, r5
    4f62:	e7e4      	b.n	4f2e <set_advertise_enable+0x1a>
		return -ENOBUFS;
    4f64:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4f68:	e7f8      	b.n	4f5c <set_advertise_enable+0x48>
    4f6a:	bf00      	nop
    4f6c:	2000cab0 	.word	0x2000cab0
    4f70:	20000168 	.word	0x20000168

00004f74 <id_create.isra.22>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    4f74:	b530      	push	{r4, r5, lr}
    4f76:	4d14      	ldr	r5, [pc, #80]	; (4fc8 <id_create.isra.22+0x54>)
    4f78:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    4f7c:	b085      	sub	sp, #20
    4f7e:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4f80:	460c      	mov	r4, r1
    4f82:	b179      	cbz	r1, 4fa4 <id_create.isra.22+0x30>
    4f84:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    4f86:	2207      	movs	r2, #7
    4f88:	4669      	mov	r1, sp
    4f8a:	4620      	mov	r0, r4
    4f8c:	9300      	str	r3, [sp, #0]
    4f8e:	f8cd 3003 	str.w	r3, [sp, #3]
    4f92:	f013 fe42 	bl	18c1a <memcmp>
    4f96:	b128      	cbz	r0, 4fa4 <id_create.isra.22+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    4f98:	4621      	mov	r1, r4
    4f9a:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    4f9c:	f014 f916 	bl	191cc <bt_addr_le_copy>
}
    4fa0:	b005      	add	sp, #20
    4fa2:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    4fa4:	a802      	add	r0, sp, #8
    4fa6:	f014 f978 	bl	1929a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    4faa:	a802      	add	r0, sp, #8
    4fac:	f7ff fcfa 	bl	49a4 <id_find>
    4fb0:	2800      	cmp	r0, #0
    4fb2:	daf7      	bge.n	4fa4 <id_create.isra.22+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    4fb4:	a902      	add	r1, sp, #8
    4fb6:	4628      	mov	r0, r5
    4fb8:	f014 f908 	bl	191cc <bt_addr_le_copy>
		if (addr) {
    4fbc:	2c00      	cmp	r4, #0
    4fbe:	d0ef      	beq.n	4fa0 <id_create.isra.22+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    4fc0:	4629      	mov	r1, r5
    4fc2:	4620      	mov	r0, r4
    4fc4:	e7ea      	b.n	4f9c <id_create.isra.22+0x28>
    4fc6:	bf00      	nop
    4fc8:	2000ca40 	.word	0x2000ca40

00004fcc <bt_send>:
	return bt_dev.drv->send(buf);
    4fcc:	4b02      	ldr	r3, [pc, #8]	; (4fd8 <bt_send+0xc>)
    4fce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4fd2:	691b      	ldr	r3, [r3, #16]
    4fd4:	4718      	bx	r3
    4fd6:	bf00      	nop
    4fd8:	2000ca40 	.word	0x2000ca40

00004fdc <bt_hci_cmd_send>:
{
    4fdc:	b538      	push	{r3, r4, r5, lr}
    4fde:	4604      	mov	r4, r0
	if (!buf) {
    4fe0:	460d      	mov	r5, r1
    4fe2:	b919      	cbnz	r1, 4fec <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    4fe4:	f7ff fe32 	bl	4c4c <bt_hci_cmd_create>
		if (!buf) {
    4fe8:	4605      	mov	r5, r0
    4fea:	b310      	cbz	r0, 5032 <bt_hci_cmd_send+0x56>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4fec:	f640 4335 	movw	r3, #3125	; 0xc35
    4ff0:	429c      	cmp	r4, r3
    4ff2:	d118      	bne.n	5026 <bt_hci_cmd_send+0x4a>
		err = bt_send(buf);
    4ff4:	4628      	mov	r0, r5
    4ff6:	f7ff ffe9 	bl	4fcc <bt_send>
		if (err) {
    4ffa:	4604      	mov	r4, r0
    4ffc:	b188      	cbz	r0, 5022 <bt_hci_cmd_send+0x46>
			BT_ERR("Unable to send to driver (err %d)", err);
    4ffe:	2301      	movs	r3, #1
    5000:	f04f 0200 	mov.w	r2, #0
    5004:	f363 0207 	bfi	r2, r3, #0, #8
    5008:	490b      	ldr	r1, [pc, #44]	; (5038 <bt_hci_cmd_send+0x5c>)
    500a:	4b0c      	ldr	r3, [pc, #48]	; (503c <bt_hci_cmd_send+0x60>)
    500c:	1a5b      	subs	r3, r3, r1
    500e:	08db      	lsrs	r3, r3, #3
    5010:	4601      	mov	r1, r0
    5012:	f363 128f 	bfi	r2, r3, #6, #10
    5016:	480a      	ldr	r0, [pc, #40]	; (5040 <bt_hci_cmd_send+0x64>)
    5018:	f013 fae7 	bl	185ea <log_1>
			net_buf_unref(buf);
    501c:	4628      	mov	r0, r5
    501e:	f00d faa7 	bl	12570 <net_buf_unref>
}
    5022:	4620      	mov	r0, r4
    5024:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5026:	4629      	mov	r1, r5
    5028:	4806      	ldr	r0, [pc, #24]	; (5044 <bt_hci_cmd_send+0x68>)
    502a:	f016 f8ef 	bl	1b20c <net_buf_put>
	return 0;
    502e:	2400      	movs	r4, #0
    5030:	e7f7      	b.n	5022 <bt_hci_cmd_send+0x46>
			return -ENOBUFS;
    5032:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5036:	e7f4      	b.n	5022 <bt_hci_cmd_send+0x46>
    5038:	0001e448 	.word	0x0001e448
    503c:	0001e508 	.word	0x0001e508
    5040:	0001fa86 	.word	0x0001fa86
    5044:	2000cb04 	.word	0x2000cb04

00005048 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
    5048:	7a83      	ldrb	r3, [r0, #10]
    504a:	2b06      	cmp	r3, #6
{
    504c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5050:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5052:	d11e      	bne.n	5092 <conn_auto_initiate+0x4a>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    5054:	1d05      	adds	r5, r0, #4
    5056:	210d      	movs	r1, #13
    5058:	4628      	mov	r0, r5
    505a:	f014 f8e3 	bl	19224 <atomic_test_bit>
    505e:	b9d8      	cbnz	r0, 5098 <conn_auto_initiate+0x50>
    5060:	78e3      	ldrb	r3, [r4, #3]
    5062:	b123      	cbz	r3, 506e <conn_auto_initiate+0x26>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    5064:	4b56      	ldr	r3, [pc, #344]	; (51c0 <conn_auto_initiate+0x178>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    5066:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    506a:	0719      	lsls	r1, r3, #28
    506c:	d514      	bpl.n	5098 <conn_auto_initiate+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    506e:	2102      	movs	r1, #2
    5070:	f242 0016 	movw	r0, #8214	; 0x2016
    5074:	f7ff fdea 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    5078:	4606      	mov	r6, r0
    507a:	b168      	cbz	r0, 5098 <conn_auto_initiate+0x50>
	cp = net_buf_add(buf, sizeof(*cp));
    507c:	2102      	movs	r1, #2
    507e:	3008      	adds	r0, #8
    5080:	f016 f8d5 	bl	1b22e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5084:	8823      	ldrh	r3, [r4, #0]
    5086:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5088:	4631      	mov	r1, r6
    508a:	f242 0016 	movw	r0, #8214	; 0x2016
    508e:	f7ff ffa5 	bl	4fdc <bt_hci_cmd_send>
}
    5092:	b002      	add	sp, #8
    5094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    5098:	210c      	movs	r1, #12
    509a:	4628      	mov	r0, r5
    509c:	f014 f8c2 	bl	19224 <atomic_test_bit>
    50a0:	f8df 811c 	ldr.w	r8, [pc, #284]	; 51c0 <conn_auto_initiate+0x178>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    50a4:	4606      	mov	r6, r0
    50a6:	bb40      	cbnz	r0, 50fa <conn_auto_initiate+0xb2>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    50a8:	f898 3079 	ldrb.w	r3, [r8, #121]	; 0x79
    50ac:	07da      	lsls	r2, r3, #31
    50ae:	d524      	bpl.n	50fa <conn_auto_initiate+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    50b0:	2107      	movs	r1, #7
    50b2:	f242 0032 	movw	r0, #8242	; 0x2032
    50b6:	f7ff fdc9 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    50ba:	4607      	mov	r7, r0
    50bc:	b1e8      	cbz	r0, 50fa <conn_auto_initiate+0xb2>
	cp = net_buf_add(buf, sizeof(*cp));
    50be:	2107      	movs	r1, #7
    50c0:	3008      	adds	r0, #8
    50c2:	f016 f8b4 	bl	1b22e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    50c6:	8823      	ldrh	r3, [r4, #0]
    50c8:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    50ca:	2302      	movs	r3, #2
	cp->all_phys = 0U;
    50cc:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    50ce:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    50d0:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    50d2:	7146      	strb	r6, [r0, #5]
    50d4:	7186      	strb	r6, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    50d6:	4639      	mov	r1, r7
    50d8:	f242 0032 	movw	r0, #8242	; 0x2032
    50dc:	f7ff ff7e 	bl	4fdc <bt_hci_cmd_send>
    50e0:	f3bf 8f5b 	dmb	ish
    50e4:	e855 3f00 	ldrex	r3, [r5]
    50e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    50ec:	e845 3200 	strex	r2, r3, [r5]
    50f0:	2a00      	cmp	r2, #0
    50f2:	d1f7      	bne.n	50e4 <conn_auto_initiate+0x9c>
    50f4:	f3bf 8f5b 	dmb	ish
			return;
    50f8:	e7cb      	b.n	5092 <conn_auto_initiate+0x4a>
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    50fa:	f898 3078 	ldrb.w	r3, [r8, #120]	; 0x78
    50fe:	069b      	lsls	r3, r3, #26
    5100:	d514      	bpl.n	512c <conn_auto_initiate+0xe4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5102:	aa01      	add	r2, sp, #4
    5104:	2100      	movs	r1, #0
    5106:	f242 002f 	movw	r0, #8239	; 0x202f
    510a:	f7ff fdd5 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    510e:	b1f0      	cbz	r0, 514e <conn_auto_initiate+0x106>
		BT_ERR("Failed to read DLE max data len");
    5110:	2301      	movs	r3, #1
    5112:	f04f 0100 	mov.w	r1, #0
    5116:	f363 0107 	bfi	r1, r3, #0, #8
    511a:	4a2a      	ldr	r2, [pc, #168]	; (51c4 <conn_auto_initiate+0x17c>)
    511c:	4b2a      	ldr	r3, [pc, #168]	; (51c8 <conn_auto_initiate+0x180>)
    511e:	482b      	ldr	r0, [pc, #172]	; (51cc <conn_auto_initiate+0x184>)
    5120:	1a9b      	subs	r3, r3, r2
    5122:	08db      	lsrs	r3, r3, #3
    5124:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to send LE Set Data Length Command");
    5128:	f013 fa52 	bl	185d0 <log_0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    512c:	78e3      	ldrb	r3, [r4, #3]
    512e:	2b01      	cmp	r3, #1
    5130:	d1af      	bne.n	5092 <conn_auto_initiate+0x4a>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    5132:	2108      	movs	r1, #8
    5134:	4628      	mov	r0, r5
    5136:	f014 f875 	bl	19224 <atomic_test_bit>
    513a:	2800      	cmp	r0, #0
    513c:	d1a9      	bne.n	5092 <conn_auto_initiate+0x4a>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    513e:	f241 3288 	movw	r2, #5000	; 0x1388
    5142:	f104 0150 	add.w	r1, r4, #80	; 0x50
    5146:	4822      	ldr	r0, [pc, #136]	; (51d0 <conn_auto_initiate+0x188>)
    5148:	f012 fa6c 	bl	17624 <k_delayed_work_submit_to_queue>
    514c:	e7a1      	b.n	5092 <conn_auto_initiate+0x4a>
	rp = (void *)rsp->data;
    514e:	9801      	ldr	r0, [sp, #4]
    5150:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5152:	f8b3 8001 	ldrh.w	r8, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5156:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	net_buf_unref(rsp);
    515a:	f00d fa09 	bl	12570 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    515e:	2106      	movs	r1, #6
    5160:	f242 0022 	movw	r0, #8226	; 0x2022
    5164:	f7ff fd72 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    5168:	4606      	mov	r6, r0
    516a:	b960      	cbnz	r0, 5186 <conn_auto_initiate+0x13e>
		BT_ERR("Failed to create LE Set Data Length Command");
    516c:	2301      	movs	r3, #1
    516e:	f04f 0100 	mov.w	r1, #0
    5172:	f363 0107 	bfi	r1, r3, #0, #8
    5176:	4a13      	ldr	r2, [pc, #76]	; (51c4 <conn_auto_initiate+0x17c>)
    5178:	4b13      	ldr	r3, [pc, #76]	; (51c8 <conn_auto_initiate+0x180>)
    517a:	4816      	ldr	r0, [pc, #88]	; (51d4 <conn_auto_initiate+0x18c>)
    517c:	1a9b      	subs	r3, r3, r2
    517e:	08db      	lsrs	r3, r3, #3
    5180:	f363 118f 	bfi	r1, r3, #6, #10
    5184:	e7d0      	b.n	5128 <conn_auto_initiate+0xe0>
	cp = net_buf_add(buf, sizeof(*cp));
    5186:	2106      	movs	r1, #6
    5188:	3008      	adds	r0, #8
    518a:	f016 f850 	bl	1b22e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    518e:	8823      	ldrh	r3, [r4, #0]
    5190:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    5192:	f8a0 8002 	strh.w	r8, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    5196:	8087      	strh	r7, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    5198:	4631      	mov	r1, r6
    519a:	f242 0022 	movw	r0, #8226	; 0x2022
    519e:	f7ff ff1d 	bl	4fdc <bt_hci_cmd_send>
	if (err) {
    51a2:	2800      	cmp	r0, #0
    51a4:	d0c2      	beq.n	512c <conn_auto_initiate+0xe4>
		BT_ERR("Failed to send LE Set Data Length Command");
    51a6:	2301      	movs	r3, #1
    51a8:	f04f 0100 	mov.w	r1, #0
    51ac:	f363 0107 	bfi	r1, r3, #0, #8
    51b0:	4a04      	ldr	r2, [pc, #16]	; (51c4 <conn_auto_initiate+0x17c>)
    51b2:	4b05      	ldr	r3, [pc, #20]	; (51c8 <conn_auto_initiate+0x180>)
    51b4:	4808      	ldr	r0, [pc, #32]	; (51d8 <conn_auto_initiate+0x190>)
    51b6:	1a9b      	subs	r3, r3, r2
    51b8:	08db      	lsrs	r3, r3, #3
    51ba:	f363 118f 	bfi	r1, r3, #6, #10
    51be:	e7b3      	b.n	5128 <conn_auto_initiate+0xe0>
    51c0:	2000ca40 	.word	0x2000ca40
    51c4:	0001e448 	.word	0x0001e448
    51c8:	0001e508 	.word	0x0001e508
    51cc:	0001fc76 	.word	0x0001fc76
    51d0:	20005c68 	.word	0x20005c68
    51d4:	0001fc96 	.word	0x0001fc96
    51d8:	0001fcc2 	.word	0x0001fcc2

000051dc <le_phy_update_complete>:
{
    51dc:	b538      	push	{r3, r4, r5, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    51de:	6883      	ldr	r3, [r0, #8]
    51e0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    51e4:	4628      	mov	r0, r5
    51e6:	f001 fdbd 	bl	6d64 <bt_conn_lookup_handle>
	if (!conn) {
    51ea:	4604      	mov	r4, r0
    51ec:	b980      	cbnz	r0, 5210 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    51ee:	2301      	movs	r3, #1
    51f0:	f04f 0200 	mov.w	r2, #0
    51f4:	f363 0207 	bfi	r2, r3, #0, #8
    51f8:	4913      	ldr	r1, [pc, #76]	; (5248 <le_phy_update_complete+0x6c>)
    51fa:	4b14      	ldr	r3, [pc, #80]	; (524c <le_phy_update_complete+0x70>)
    51fc:	4814      	ldr	r0, [pc, #80]	; (5250 <le_phy_update_complete+0x74>)
    51fe:	1a5b      	subs	r3, r3, r1
    5200:	08db      	lsrs	r3, r3, #3
    5202:	f363 128f 	bfi	r2, r3, #6, #10
    5206:	4629      	mov	r1, r5
}
    5208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    520c:	f013 b9ed 	b.w	185ea <log_1>
	    !atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    5210:	1d05      	adds	r5, r0, #4
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5212:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5216:	4628      	mov	r0, r5
    5218:	f013 ffdb 	bl	191d2 <atomic_and>
	if (!IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) ||
    521c:	0603      	lsls	r3, r0, #24
    521e:	d50e      	bpl.n	523e <le_phy_update_complete+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5220:	f3bf 8f5b 	dmb	ish
    5224:	e855 3f00 	ldrex	r3, [r5]
    5228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    522c:	e845 3200 	strex	r2, r3, [r5]
    5230:	2a00      	cmp	r2, #0
    5232:	d1f7      	bne.n	5224 <le_phy_update_complete+0x48>
    5234:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
    5238:	4620      	mov	r0, r4
    523a:	f7ff ff05 	bl	5048 <conn_auto_initiate>
	bt_conn_unref(conn);
    523e:	4620      	mov	r0, r4
}
    5240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    5244:	f014 b8f5 	b.w	19432 <bt_conn_unref>
    5248:	0001e448 	.word	0x0001e448
    524c:	0001e508 	.word	0x0001e508
    5250:	0001ffdd 	.word	0x0001ffdd

00005254 <le_remote_feat_complete>:
{
    5254:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5256:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5258:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    525c:	4630      	mov	r0, r6
    525e:	f001 fd81 	bl	6d64 <bt_conn_lookup_handle>
	if (!conn) {
    5262:	4604      	mov	r4, r0
    5264:	b980      	cbnz	r0, 5288 <le_remote_feat_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5266:	2301      	movs	r3, #1
    5268:	f04f 0200 	mov.w	r2, #0
    526c:	f363 0207 	bfi	r2, r3, #0, #8
    5270:	4913      	ldr	r1, [pc, #76]	; (52c0 <le_remote_feat_complete+0x6c>)
    5272:	4b14      	ldr	r3, [pc, #80]	; (52c4 <le_remote_feat_complete+0x70>)
    5274:	4814      	ldr	r0, [pc, #80]	; (52c8 <le_remote_feat_complete+0x74>)
    5276:	1a5b      	subs	r3, r3, r1
    5278:	08db      	lsrs	r3, r3, #3
    527a:	4631      	mov	r1, r6
    527c:	f363 128f 	bfi	r2, r3, #6, #10
}
    5280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5284:	f013 b9b1 	b.w	185ea <log_1>
	if (!evt->status) {
    5288:	782b      	ldrb	r3, [r5, #0]
    528a:	b923      	cbnz	r3, 5296 <le_remote_feat_complete+0x42>
		memcpy(conn->le.features, evt->features,
    528c:	2208      	movs	r2, #8
    528e:	1ce9      	adds	r1, r5, #3
    5290:	3094      	adds	r0, #148	; 0x94
    5292:	f013 fcd2 	bl	18c3a <memcpy>
    5296:	f3bf 8f5b 	dmb	ish
    529a:	1d23      	adds	r3, r4, #4
    529c:	e853 2f00 	ldrex	r2, [r3]
    52a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    52a4:	e843 2100 	strex	r1, r2, [r3]
    52a8:	2900      	cmp	r1, #0
    52aa:	d1f7      	bne.n	529c <le_remote_feat_complete+0x48>
    52ac:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
    52b0:	4620      	mov	r0, r4
    52b2:	f7ff fec9 	bl	5048 <conn_auto_initiate>
	bt_conn_unref(conn);
    52b6:	4620      	mov	r0, r4
}
    52b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    52bc:	f014 b8b9 	b.w	19432 <bt_conn_unref>
    52c0:	0001e448 	.word	0x0001e448
    52c4:	0001e508 	.word	0x0001e508
    52c8:	0001ffdd 	.word	0x0001ffdd

000052cc <le_conn_param_neg_reply>:
{
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	4606      	mov	r6, r0
    52d0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    52d2:	f242 0021 	movw	r0, #8225	; 0x2021
    52d6:	2103      	movs	r1, #3
    52d8:	f7ff fcb8 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    52dc:	4604      	mov	r4, r0
    52de:	b978      	cbnz	r0, 5300 <le_conn_param_neg_reply+0x34>
		BT_ERR("Unable to allocate buffer");
    52e0:	2301      	movs	r3, #1
    52e2:	f04f 0100 	mov.w	r1, #0
    52e6:	f363 0107 	bfi	r1, r3, #0, #8
    52ea:	4a0c      	ldr	r2, [pc, #48]	; (531c <le_conn_param_neg_reply+0x50>)
    52ec:	4b0c      	ldr	r3, [pc, #48]	; (5320 <le_conn_param_neg_reply+0x54>)
    52ee:	480d      	ldr	r0, [pc, #52]	; (5324 <le_conn_param_neg_reply+0x58>)
    52f0:	1a9b      	subs	r3, r3, r2
    52f2:	08db      	lsrs	r3, r3, #3
    52f4:	f363 118f 	bfi	r1, r3, #6, #10
}
    52f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    52fc:	f013 b968 	b.w	185d0 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    5300:	2103      	movs	r1, #3
    5302:	3008      	adds	r0, #8
    5304:	f015 ff93 	bl	1b22e <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    5308:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    530a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    530c:	4621      	mov	r1, r4
    530e:	f242 0021 	movw	r0, #8225	; 0x2021
}
    5312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5316:	f7ff be61 	b.w	4fdc <bt_hci_cmd_send>
    531a:	bf00      	nop
    531c:	0001e448 	.word	0x0001e448
    5320:	0001e508 	.word	0x0001e508
    5324:	0001ffc3 	.word	0x0001ffc3

00005328 <le_conn_param_req>:
{
    5328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    532a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    532c:	78d9      	ldrb	r1, [r3, #3]
    532e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    5330:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5332:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5336:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    533a:	7959      	ldrb	r1, [r3, #5]
    533c:	791a      	ldrb	r2, [r3, #4]
    533e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5342:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    5346:	799a      	ldrb	r2, [r3, #6]
    5348:	79d9      	ldrb	r1, [r3, #7]
    534a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    534e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5352:	7a1a      	ldrb	r2, [r3, #8]
    5354:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    5356:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5358:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    535c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    535e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    5362:	f001 fcff 	bl	6d64 <bt_conn_lookup_handle>
	if (!conn) {
    5366:	4607      	mov	r7, r0
    5368:	b9a0      	cbnz	r0, 5394 <le_conn_param_req+0x6c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    536a:	2301      	movs	r3, #1
    536c:	f04f 0200 	mov.w	r2, #0
    5370:	f363 0207 	bfi	r2, r3, #0, #8
    5374:	491f      	ldr	r1, [pc, #124]	; (53f4 <le_conn_param_req+0xcc>)
    5376:	4b20      	ldr	r3, [pc, #128]	; (53f8 <le_conn_param_req+0xd0>)
    5378:	4820      	ldr	r0, [pc, #128]	; (53fc <le_conn_param_req+0xd4>)
    537a:	1a5b      	subs	r3, r3, r1
    537c:	08db      	lsrs	r3, r3, #3
    537e:	4621      	mov	r1, r4
    5380:	f363 128f 	bfi	r2, r3, #6, #10
    5384:	f013 f931 	bl	185ea <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    5388:	2102      	movs	r1, #2
    538a:	4620      	mov	r0, r4
    538c:	f7ff ff9e 	bl	52cc <le_conn_param_neg_reply>
}
    5390:	b003      	add	sp, #12
    5392:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    5394:	4669      	mov	r1, sp
    5396:	f001 fa51 	bl	683c <le_param_req>
    539a:	b938      	cbnz	r0, 53ac <le_conn_param_req+0x84>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    539c:	211e      	movs	r1, #30
    539e:	4620      	mov	r0, r4
    53a0:	f7ff ff94 	bl	52cc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    53a4:	4638      	mov	r0, r7
    53a6:	f014 f844 	bl	19432 <bt_conn_unref>
    53aa:	e7f1      	b.n	5390 <le_conn_param_req+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    53ac:	210e      	movs	r1, #14
    53ae:	f242 0020 	movw	r0, #8224	; 0x2020
    53b2:	f7ff fc4b 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    53b6:	4605      	mov	r5, r0
    53b8:	2800      	cmp	r0, #0
    53ba:	d0f3      	beq.n	53a4 <le_conn_param_req+0x7c>
	cp = net_buf_add(buf, sizeof(*cp));
    53bc:	210e      	movs	r1, #14
    53be:	3008      	adds	r0, #8
    53c0:	f015 ff35 	bl	1b22e <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    53c4:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    53c6:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    53c8:	2100      	movs	r1, #0
    53ca:	f013 fc60 	bl	18c8e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    53ce:	f8bd 3000 	ldrh.w	r3, [sp]
    53d2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    53d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    53d8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    53da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    53de:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    53e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    53e4:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    53e6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    53e8:	4629      	mov	r1, r5
    53ea:	f242 0020 	movw	r0, #8224	; 0x2020
    53ee:	f7ff fdf5 	bl	4fdc <bt_hci_cmd_send>
    53f2:	e7d7      	b.n	53a4 <le_conn_param_req+0x7c>
    53f4:	0001e448 	.word	0x0001e448
    53f8:	0001e508 	.word	0x0001e508
    53fc:	0001ffdd 	.word	0x0001ffdd

00005400 <hci_tx_thread>:
{
    5400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Uncleared pending sent_cmd");
    5404:	4a52      	ldr	r2, [pc, #328]	; (5550 <hci_tx_thread+0x150>)
    5406:	4b53      	ldr	r3, [pc, #332]	; (5554 <hci_tx_thread+0x154>)
    5408:	1a9b      	subs	r3, r3, r2
    540a:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
		events[0].state = K_POLL_STATE_NOT_READY;
    540e:	4a52      	ldr	r2, [pc, #328]	; (5558 <hci_tx_thread+0x158>)
    5410:	68d3      	ldr	r3, [r2, #12]
    5412:	f36f 3310 	bfc	r3, #12, #5
    5416:	60d3      	str	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5418:	f102 0014 	add.w	r0, r2, #20
    541c:	f001 fb5e 	bl	6adc <bt_conn_prepare_events>
    5420:	1c47      	adds	r7, r0, #1
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    5422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5426:	4639      	mov	r1, r7
    5428:	484b      	ldr	r0, [pc, #300]	; (5558 <hci_tx_thread+0x158>)
    542a:	f012 fabf 	bl	179ac <z_impl_k_poll>
		BT_ASSERT(err == 0);
    542e:	b160      	cbz	r0, 544a <hci_tx_thread+0x4a>
    5430:	f640 73ab 	movw	r3, #4011	; 0xfab
    5434:	4a49      	ldr	r2, [pc, #292]	; (555c <hci_tx_thread+0x15c>)
    5436:	494a      	ldr	r1, [pc, #296]	; (5560 <hci_tx_thread+0x160>)
    5438:	484a      	ldr	r0, [pc, #296]	; (5564 <hci_tx_thread+0x164>)
    543a:	f012 fe7b 	bl	18134 <printk>
    543e:	4040      	eors	r0, r0
    5440:	f380 8811 	msr	BASEPRI, r0
    5444:	f04f 0003 	mov.w	r0, #3
    5448:	df02      	svc	2
{
    544a:	4d43      	ldr	r5, [pc, #268]	; (5558 <hci_tx_thread+0x158>)
	return z_impl_k_sem_take(sem, timeout);
    544c:	4c46      	ldr	r4, [pc, #280]	; (5568 <hci_tx_thread+0x168>)
	for (; count; ev++, count--) {
    544e:	b917      	cbnz	r7, 5456 <hci_tx_thread+0x56>
	z_impl_k_yield();
    5450:	f011 fefc 	bl	1724c <z_impl_k_yield>
    5454:	e7db      	b.n	540e <hci_tx_thread+0xe>
		switch (ev->state) {
    5456:	68e9      	ldr	r1, [r5, #12]
    5458:	f3c1 3104 	ubfx	r1, r1, #12, #5
    545c:	2901      	cmp	r1, #1
    545e:	d960      	bls.n	5522 <hci_tx_thread+0x122>
    5460:	2904      	cmp	r1, #4
    5462:	d168      	bne.n	5536 <hci_tx_thread+0x136>
			if (ev->tag == BT_EVENT_CMD_TX) {
    5464:	7b29      	ldrb	r1, [r5, #12]
    5466:	2900      	cmp	r1, #0
    5468:	d15e      	bne.n	5528 <hci_tx_thread+0x128>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    546a:	4840      	ldr	r0, [pc, #256]	; (556c <hci_tx_thread+0x16c>)
    546c:	f015 feb1 	bl	1b1d2 <net_buf_get>
	BT_ASSERT(buf);
    5470:	4606      	mov	r6, r0
    5472:	b960      	cbnz	r0, 548e <hci_tx_thread+0x8e>
    5474:	f640 734c 	movw	r3, #3916	; 0xf4c
    5478:	4a38      	ldr	r2, [pc, #224]	; (555c <hci_tx_thread+0x15c>)
    547a:	493d      	ldr	r1, [pc, #244]	; (5570 <hci_tx_thread+0x170>)
    547c:	4839      	ldr	r0, [pc, #228]	; (5564 <hci_tx_thread+0x164>)
    547e:	f012 fe59 	bl	18134 <printk>
    5482:	4040      	eors	r0, r0
    5484:	f380 8811 	msr	BASEPRI, r0
    5488:	f04f 0003 	mov.w	r0, #3
    548c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    548e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5492:	4838      	ldr	r0, [pc, #224]	; (5574 <hci_tx_thread+0x174>)
    5494:	f011 ff80 	bl	17398 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    5498:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    549c:	b193      	cbz	r3, 54c4 <hci_tx_thread+0xc4>
		BT_ERR("Uncleared pending sent_cmd");
    549e:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    54a2:	f043 0301 	orr.w	r3, r3, #1
    54a6:	f363 0807 	bfi	r8, r3, #0, #8
    54aa:	f36b 188f 	bfi	r8, fp, #6, #10
    54ae:	4641      	mov	r1, r8
    54b0:	4831      	ldr	r0, [pc, #196]	; (5578 <hci_tx_thread+0x178>)
    54b2:	f013 f88d 	bl	185d0 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    54b6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    54ba:	f00d f859 	bl	12570 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    54be:	2300      	movs	r3, #0
    54c0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    54c4:	4630      	mov	r0, r6
    54c6:	f015 feae 	bl	1b226 <net_buf_ref>
    54ca:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    54ce:	4630      	mov	r0, r6
    54d0:	f7ff fd7c 	bl	4fcc <bt_send>
	if (err) {
    54d4:	4601      	mov	r1, r0
    54d6:	b320      	cbz	r0, 5522 <hci_tx_thread+0x122>
		BT_ERR("Unable to send to driver (err %d)", err);
    54d8:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    54dc:	f043 0301 	orr.w	r3, r3, #1
    54e0:	f363 0907 	bfi	r9, r3, #0, #8
    54e4:	f36b 198f 	bfi	r9, fp, #6, #10
    54e8:	464a      	mov	r2, r9
    54ea:	4824      	ldr	r0, [pc, #144]	; (557c <hci_tx_thread+0x17c>)
    54ec:	f013 f87d 	bl	185ea <log_1>
	z_impl_k_sem_give(sem);
    54f0:	4820      	ldr	r0, [pc, #128]	; (5574 <hci_tx_thread+0x174>)
    54f2:	f011 ff25 	bl	17340 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    54f6:	4630      	mov	r0, r6
    54f8:	f00c ffa4 	bl	12444 <net_buf_id>
    54fc:	4a20      	ldr	r2, [pc, #128]	; (5580 <hci_tx_thread+0x180>)
    54fe:	230c      	movs	r3, #12
    5500:	fb03 2000 	mla	r0, r3, r0, r2
    5504:	211f      	movs	r1, #31
    5506:	2200      	movs	r2, #0
    5508:	8840      	ldrh	r0, [r0, #2]
    550a:	f7ff f9cb 	bl	48a4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    550e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    5512:	f00d f82d 	bl	12570 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5516:	2300      	movs	r3, #0
		net_buf_unref(buf);
    5518:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    551a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    551e:	f00d f827 	bl	12570 <net_buf_unref>
	for (; count; ev++, count--) {
    5522:	3514      	adds	r5, #20
    5524:	3f01      	subs	r7, #1
    5526:	e792      	b.n	544e <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    5528:	2901      	cmp	r1, #1
    552a:	d1fa      	bne.n	5522 <hci_tx_thread+0x122>
					conn = CONTAINER_OF(ev->fifo,
    552c:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    552e:	3834      	subs	r0, #52	; 0x34
    5530:	f001 fd7a 	bl	7028 <bt_conn_process_tx>
    5534:	e7f5      	b.n	5522 <hci_tx_thread+0x122>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    5536:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    553a:	f043 0302 	orr.w	r3, r3, #2
    553e:	f363 0a07 	bfi	sl, r3, #0, #8
    5542:	f36b 1a8f 	bfi	sl, fp, #6, #10
    5546:	4652      	mov	r2, sl
    5548:	480e      	ldr	r0, [pc, #56]	; (5584 <hci_tx_thread+0x184>)
    554a:	f013 f84e 	bl	185ea <log_1>
    554e:	e7e8      	b.n	5522 <hci_tx_thread+0x122>
    5550:	0001e448 	.word	0x0001e448
    5554:	0001e508 	.word	0x0001e508
    5558:	2000cbd4 	.word	0x2000cbd4
    555c:	0001ff10 	.word	0x0001ff10
    5560:	0001ff3d 	.word	0x0001ff3d
    5564:	0001ff46 	.word	0x0001ff46
    5568:	2000ca40 	.word	0x2000ca40
    556c:	2000cb04 	.word	0x2000cb04
    5570:	00021370 	.word	0x00021370
    5574:	2000cae8 	.word	0x2000cae8
    5578:	0001ff63 	.word	0x0001ff63
    557c:	0001fa86 	.word	0x0001fa86
    5580:	20000168 	.word	0x20000168
    5584:	0001ff7e 	.word	0x0001ff7e

00005588 <bt_recv>:
{
    5588:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    558a:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    558c:	2901      	cmp	r1, #1
{
    558e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    5590:	d054      	beq.n	563c <bt_recv+0xb4>
    5592:	2903      	cmp	r1, #3
    5594:	f040 8084 	bne.w	56a0 <bt_recv+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5598:	8983      	ldrh	r3, [r0, #12]
    559a:	2b03      	cmp	r3, #3
    559c:	d80c      	bhi.n	55b8 <bt_recv+0x30>
    559e:	f240 237f 	movw	r3, #639	; 0x27f
    55a2:	4a49      	ldr	r2, [pc, #292]	; (56c8 <bt_recv+0x140>)
    55a4:	4949      	ldr	r1, [pc, #292]	; (56cc <bt_recv+0x144>)
    55a6:	484a      	ldr	r0, [pc, #296]	; (56d0 <bt_recv+0x148>)
    55a8:	f012 fdc4 	bl	18134 <printk>
    55ac:	4040      	eors	r0, r0
    55ae:	f380 8811 	msr	BASEPRI, r0
    55b2:	f04f 0003 	mov.w	r0, #3
    55b6:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    55b8:	2104      	movs	r1, #4
    55ba:	f104 0008 	add.w	r0, r4, #8
    55be:	f015 fe67 	bl	1b290 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    55c2:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    55c4:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    55c6:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->id = BT_CONN_ID_INVALID;
    55c8:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    55ca:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    55ce:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    55d0:	82e0      	strh	r0, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    55d2:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    55d4:	d011      	beq.n	55fa <bt_recv+0x72>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    55d6:	2001      	movs	r0, #1
    55d8:	f04f 0300 	mov.w	r3, #0
    55dc:	f360 0307 	bfi	r3, r0, #0, #8
    55e0:	4d3c      	ldr	r5, [pc, #240]	; (56d4 <bt_recv+0x14c>)
    55e2:	483d      	ldr	r0, [pc, #244]	; (56d8 <bt_recv+0x150>)
    55e4:	1b40      	subs	r0, r0, r5
    55e6:	08c0      	lsrs	r0, r0, #3
    55e8:	f360 138f 	bfi	r3, r0, #6, #10
    55ec:	483b      	ldr	r0, [pc, #236]	; (56dc <bt_recv+0x154>)
    55ee:	f013 f810 	bl	18612 <log_2>
	net_buf_unref(buf);
    55f2:	4620      	mov	r0, r4
    55f4:	f00c ffbc 	bl	12570 <net_buf_unref>
    55f8:	e01e      	b.n	5638 <bt_recv+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    55fa:	f001 fbb3 	bl	6d64 <bt_conn_lookup_handle>
	if (!conn) {
    55fe:	4605      	mov	r5, r0
    5600:	b978      	cbnz	r0, 5622 <bt_recv+0x9a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    5602:	2301      	movs	r3, #1
    5604:	f04f 0200 	mov.w	r2, #0
    5608:	f363 0207 	bfi	r2, r3, #0, #8
    560c:	4931      	ldr	r1, [pc, #196]	; (56d4 <bt_recv+0x14c>)
    560e:	4b32      	ldr	r3, [pc, #200]	; (56d8 <bt_recv+0x150>)
    5610:	4833      	ldr	r0, [pc, #204]	; (56e0 <bt_recv+0x158>)
    5612:	1a5b      	subs	r3, r3, r1
    5614:	08db      	lsrs	r3, r3, #3
    5616:	f363 128f 	bfi	r2, r3, #6, #10
    561a:	8ae1      	ldrh	r1, [r4, #22]
    561c:	f012 ffe5 	bl	185ea <log_1>
		net_buf_unref(buf);
    5620:	e7e7      	b.n	55f2 <bt_recv+0x6a>
	acl(buf)->id = bt_conn_index(conn);
    5622:	f001 fd69 	bl	70f8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    5626:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_index(conn);
    5628:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    562a:	4621      	mov	r1, r4
    562c:	4628      	mov	r0, r5
    562e:	f001 f92d 	bl	688c <bt_conn_recv>
	bt_conn_unref(conn);
    5632:	4628      	mov	r0, r5
    5634:	f013 fefd 	bl	19432 <bt_conn_unref>
		return 0;
    5638:	2000      	movs	r0, #0
}
    563a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    563c:	8983      	ldrh	r3, [r0, #12]
    563e:	2b01      	cmp	r3, #1
    5640:	d80c      	bhi.n	565c <bt_recv+0xd4>
    5642:	f640 7339 	movw	r3, #3897	; 0xf39
    5646:	4a20      	ldr	r2, [pc, #128]	; (56c8 <bt_recv+0x140>)
    5648:	4920      	ldr	r1, [pc, #128]	; (56cc <bt_recv+0x144>)
    564a:	4821      	ldr	r0, [pc, #132]	; (56d0 <bt_recv+0x148>)
    564c:	f012 fd72 	bl	18134 <printk>
    5650:	4040      	eors	r0, r0
    5652:	f380 8811 	msr	BASEPRI, r0
    5656:	f04f 0003 	mov.w	r0, #3
    565a:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    565c:	2102      	movs	r1, #2
    565e:	f104 0008 	add.w	r0, r4, #8
    5662:	f015 fe15 	bl	1b290 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    5666:	7802      	ldrb	r2, [r0, #0]
    5668:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    566a:	4605      	mov	r5, r0
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    566c:	d811      	bhi.n	5692 <bt_recv+0x10a>
    566e:	2301      	movs	r3, #1
    5670:	4093      	lsls	r3, r2
    5672:	4a1c      	ldr	r2, [pc, #112]	; (56e4 <bt_recv+0x15c>)
    5674:	4213      	tst	r3, r2
    5676:	d00c      	beq.n	5692 <bt_recv+0x10a>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    5678:	f640 733d 	movw	r3, #3901	; 0xf3d
    567c:	4a12      	ldr	r2, [pc, #72]	; (56c8 <bt_recv+0x140>)
    567e:	491a      	ldr	r1, [pc, #104]	; (56e8 <bt_recv+0x160>)
    5680:	4813      	ldr	r0, [pc, #76]	; (56d0 <bt_recv+0x148>)
    5682:	f012 fd57 	bl	18134 <printk>
    5686:	4040      	eors	r0, r0
    5688:	f380 8811 	msr	BASEPRI, r0
    568c:	f04f 0003 	mov.w	r0, #3
    5690:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    5692:	2303      	movs	r3, #3
    5694:	4a15      	ldr	r2, [pc, #84]	; (56ec <bt_recv+0x164>)
    5696:	7828      	ldrb	r0, [r5, #0]
    5698:	4621      	mov	r1, r4
    569a:	f7ff f8a9 	bl	47f0 <handle_event>
    569e:	e7a8      	b.n	55f2 <bt_recv+0x6a>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    56a0:	2301      	movs	r3, #1
    56a2:	f04f 0200 	mov.w	r2, #0
    56a6:	f363 0207 	bfi	r2, r3, #0, #8
    56aa:	480a      	ldr	r0, [pc, #40]	; (56d4 <bt_recv+0x14c>)
    56ac:	4b0a      	ldr	r3, [pc, #40]	; (56d8 <bt_recv+0x150>)
    56ae:	1a1b      	subs	r3, r3, r0
    56b0:	08db      	lsrs	r3, r3, #3
    56b2:	f363 128f 	bfi	r2, r3, #6, #10
    56b6:	480e      	ldr	r0, [pc, #56]	; (56f0 <bt_recv+0x168>)
    56b8:	f012 ff97 	bl	185ea <log_1>
		net_buf_unref(buf);
    56bc:	4620      	mov	r0, r4
    56be:	f00c ff57 	bl	12570 <net_buf_unref>
		return -EINVAL;
    56c2:	f06f 0015 	mvn.w	r0, #21
    56c6:	e7b8      	b.n	563a <bt_recv+0xb2>
    56c8:	0001ff10 	.word	0x0001ff10
    56cc:	0001fb2f 	.word	0x0001fb2f
    56d0:	0001ff46 	.word	0x0001ff46
    56d4:	0001e448 	.word	0x0001e448
    56d8:	0001e508 	.word	0x0001e508
    56dc:	0001fb48 	.word	0x0001fb48
    56e0:	0001fb6c 	.word	0x0001fb6c
    56e4:	0408c000 	.word	0x0408c000
    56e8:	0001fb8e 	.word	0x0001fb8e
    56ec:	0001e7a0 	.word	0x0001e7a0
    56f0:	0001fbac 	.word	0x0001fbac

000056f4 <bt_recv_prio>:
{
    56f4:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    56f6:	7d03      	ldrb	r3, [r0, #20]
    56f8:	2b01      	cmp	r3, #1
{
    56fa:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    56fc:	d00c      	beq.n	5718 <bt_recv_prio+0x24>
    56fe:	f241 33a6 	movw	r3, #5030	; 0x13a6
    5702:	4a20      	ldr	r2, [pc, #128]	; (5784 <bt_recv_prio+0x90>)
    5704:	4920      	ldr	r1, [pc, #128]	; (5788 <bt_recv_prio+0x94>)
    5706:	4821      	ldr	r0, [pc, #132]	; (578c <bt_recv_prio+0x98>)
    5708:	f012 fd14 	bl	18134 <printk>
    570c:	4040      	eors	r0, r0
    570e:	f380 8811 	msr	BASEPRI, r0
    5712:	f04f 0003 	mov.w	r0, #3
    5716:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5718:	89a3      	ldrh	r3, [r4, #12]
    571a:	2b01      	cmp	r3, #1
    571c:	d80c      	bhi.n	5738 <bt_recv_prio+0x44>
    571e:	f241 33a7 	movw	r3, #5031	; 0x13a7
    5722:	4a18      	ldr	r2, [pc, #96]	; (5784 <bt_recv_prio+0x90>)
    5724:	491a      	ldr	r1, [pc, #104]	; (5790 <bt_recv_prio+0x9c>)
    5726:	4819      	ldr	r0, [pc, #100]	; (578c <bt_recv_prio+0x98>)
    5728:	f012 fd04 	bl	18134 <printk>
    572c:	4040      	eors	r0, r0
    572e:	f380 8811 	msr	BASEPRI, r0
    5732:	f04f 0003 	mov.w	r0, #3
    5736:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    5738:	2102      	movs	r1, #2
    573a:	f104 0008 	add.w	r0, r4, #8
    573e:	f015 fda7 	bl	1b290 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5742:	7802      	ldrb	r2, [r0, #0]
    5744:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    5746:	4605      	mov	r5, r0
    5748:	d804      	bhi.n	5754 <bt_recv_prio+0x60>
    574a:	2301      	movs	r3, #1
    574c:	4093      	lsls	r3, r2
    574e:	4a11      	ldr	r2, [pc, #68]	; (5794 <bt_recv_prio+0xa0>)
    5750:	4213      	tst	r3, r2
    5752:	d10c      	bne.n	576e <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5754:	f241 33aa 	movw	r3, #5034	; 0x13aa
    5758:	4a0a      	ldr	r2, [pc, #40]	; (5784 <bt_recv_prio+0x90>)
    575a:	490f      	ldr	r1, [pc, #60]	; (5798 <bt_recv_prio+0xa4>)
    575c:	480b      	ldr	r0, [pc, #44]	; (578c <bt_recv_prio+0x98>)
    575e:	f012 fce9 	bl	18134 <printk>
    5762:	4040      	eors	r0, r0
    5764:	f380 8811 	msr	BASEPRI, r0
    5768:	f04f 0003 	mov.w	r0, #3
    576c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    576e:	2304      	movs	r3, #4
    5770:	4a0a      	ldr	r2, [pc, #40]	; (579c <bt_recv_prio+0xa8>)
    5772:	7828      	ldrb	r0, [r5, #0]
    5774:	4621      	mov	r1, r4
    5776:	f7ff f83b 	bl	47f0 <handle_event>
	net_buf_unref(buf);
    577a:	4620      	mov	r0, r4
    577c:	f00c fef8 	bl	12570 <net_buf_unref>
}
    5780:	2000      	movs	r0, #0
    5782:	bd38      	pop	{r3, r4, r5, pc}
    5784:	0001ff10 	.word	0x0001ff10
    5788:	0001fbc0 	.word	0x0001fbc0
    578c:	0001ff46 	.word	0x0001ff46
    5790:	0001fb2f 	.word	0x0001fb2f
    5794:	0408c000 	.word	0x0408c000
    5798:	0001fb8f 	.word	0x0001fb8f
    579c:	0001e7b8 	.word	0x0001e7b8

000057a0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    57a0:	4a08      	ldr	r2, [pc, #32]	; (57c4 <bt_hci_driver_register+0x24>)
    57a2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    57a6:	b93b      	cbnz	r3, 57b8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    57a8:	68c1      	ldr	r1, [r0, #12]
    57aa:	b141      	cbz	r1, 57be <bt_hci_driver_register+0x1e>
    57ac:	6901      	ldr	r1, [r0, #16]
    57ae:	b131      	cbz	r1, 57be <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    57b0:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    57b4:	4618      	mov	r0, r3
    57b6:	4770      	bx	lr
		return -EALREADY;
    57b8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    57bc:	4770      	bx	lr
		return -EINVAL;
    57be:	f06f 0015 	mvn.w	r0, #21
}
    57c2:	4770      	bx	lr
    57c4:	2000ca40 	.word	0x2000ca40

000057c8 <bt_finalize_init>:
    57c8:	4b06      	ldr	r3, [pc, #24]	; (57e4 <bt_finalize_init+0x1c>)
    57ca:	f3bf 8f5b 	dmb	ish
    57ce:	e853 2f00 	ldrex	r2, [r3]
    57d2:	f042 0202 	orr.w	r2, r2, #2
    57d6:	e843 2100 	strex	r1, r2, [r3]
    57da:	2900      	cmp	r1, #0
    57dc:	d1f7      	bne.n	57ce <bt_finalize_init+0x6>
    57de:	f3bf 8f5b 	dmb	ish
}
    57e2:	4770      	bx	lr
    57e4:	2000cab0 	.word	0x2000cab0

000057e8 <bt_set_name>:
{
    57e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    57ea:	4604      	mov	r4, r0
	size_t len = strlen(name);
    57ec:	f013 fa02 	bl	18bf4 <strlen>
	if (len >= sizeof(bt_dev.name)) {
    57f0:	2841      	cmp	r0, #65	; 0x41
    57f2:	d825      	bhi.n	5840 <bt_set_name+0x58>
	if (!strcmp(bt_dev.name, name)) {
    57f4:	4621      	mov	r1, r4
    57f6:	4814      	ldr	r0, [pc, #80]	; (5848 <bt_set_name+0x60>)
    57f8:	f013 fa03 	bl	18c02 <strcmp>
    57fc:	b910      	cbnz	r0, 5804 <bt_set_name+0x1c>
    57fe:	2000      	movs	r0, #0
}
    5800:	b004      	add	sp, #16
    5802:	bd10      	pop	{r4, pc}
	strncpy(bt_dev.name, name, sizeof(bt_dev.name));
    5804:	4621      	mov	r1, r4
    5806:	2242      	movs	r2, #66	; 0x42
    5808:	480f      	ldr	r0, [pc, #60]	; (5848 <bt_set_name+0x60>)
    580a:	f013 f9d2 	bl	18bb2 <strncpy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING_NAME)) {
    580e:	2106      	movs	r1, #6
    5810:	480e      	ldr	r0, [pc, #56]	; (584c <bt_set_name+0x64>)
    5812:	f013 fd07 	bl	19224 <atomic_test_bit>
    5816:	2800      	cmp	r0, #0
    5818:	d0f1      	beq.n	57fe <bt_set_name+0x16>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    581a:	2309      	movs	r3, #9
    581c:	4620      	mov	r0, r4
    581e:	f88d 3000 	strb.w	r3, [sp]
    5822:	f013 f9e7 	bl	18bf4 <strlen>
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    5826:	2201      	movs	r2, #1
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    5828:	f88d 0001 	strb.w	r0, [sp, #1]
		set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, &sd, 1);
    582c:	a902      	add	r1, sp, #8
    582e:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    5832:	9401      	str	r4, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    5834:	f8cd d008 	str.w	sp, [sp, #8]
    5838:	9203      	str	r2, [sp, #12]
		set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, &sd, 1);
    583a:	f7ff fa83 	bl	4d44 <set_ad>
    583e:	e7de      	b.n	57fe <bt_set_name+0x16>
		return -ENOMEM;
    5840:	f06f 000b 	mvn.w	r0, #11
    5844:	e7dc      	b.n	5800 <bt_set_name+0x18>
    5846:	bf00      	nop
    5848:	2000cb18 	.word	0x2000cb18
    584c:	2000cab0 	.word	0x2000cab0

00005850 <bt_get_name>:
}
    5850:	4800      	ldr	r0, [pc, #0]	; (5854 <bt_get_name+0x4>)
    5852:	4770      	bx	lr
    5854:	2000cb18 	.word	0x2000cb18

00005858 <bt_id_create>:
{
    5858:	b537      	push	{r0, r1, r2, r4, r5, lr}
    585a:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    585c:	4605      	mov	r5, r0
    585e:	b918      	cbnz	r0, 5868 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    5860:	b35c      	cbz	r4, 58ba <bt_id_create+0x62>
		return -EINVAL;
    5862:	f06f 0415 	mvn.w	r4, #21
    5866:	e032      	b.n	58ce <bt_id_create+0x76>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5868:	2300      	movs	r3, #0
    586a:	2207      	movs	r2, #7
    586c:	4669      	mov	r1, sp
    586e:	9300      	str	r3, [sp, #0]
    5870:	f8cd 3003 	str.w	r3, [sp, #3]
    5874:	f013 f9d1 	bl	18c1a <memcmp>
    5878:	2800      	cmp	r0, #0
    587a:	d0f1      	beq.n	5860 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    587c:	782b      	ldrb	r3, [r5, #0]
    587e:	2b01      	cmp	r3, #1
    5880:	d104      	bne.n	588c <bt_id_create+0x34>
    5882:	79ab      	ldrb	r3, [r5, #6]
    5884:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5888:	2bc0      	cmp	r3, #192	; 0xc0
    588a:	d00e      	beq.n	58aa <bt_id_create+0x52>
			BT_ERR("Only static random identity address supported");
    588c:	2301      	movs	r3, #1
    588e:	f04f 0100 	mov.w	r1, #0
    5892:	f363 0107 	bfi	r1, r3, #0, #8
    5896:	4a11      	ldr	r2, [pc, #68]	; (58dc <bt_id_create+0x84>)
    5898:	4b11      	ldr	r3, [pc, #68]	; (58e0 <bt_id_create+0x88>)
    589a:	4812      	ldr	r0, [pc, #72]	; (58e4 <bt_id_create+0x8c>)
    589c:	1a9b      	subs	r3, r3, r2
    589e:	08db      	lsrs	r3, r3, #3
    58a0:	f363 118f 	bfi	r1, r3, #6, #10
    58a4:	f012 fe94 	bl	185d0 <log_0>
			return -EINVAL;
    58a8:	e7db      	b.n	5862 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    58aa:	4628      	mov	r0, r5
    58ac:	f7ff f87a 	bl	49a4 <id_find>
    58b0:	2800      	cmp	r0, #0
    58b2:	dbd5      	blt.n	5860 <bt_id_create+0x8>
			return -EALREADY;
    58b4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    58b8:	e009      	b.n	58ce <bt_id_create+0x76>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    58ba:	4b0b      	ldr	r3, [pc, #44]	; (58e8 <bt_id_create+0x90>)
    58bc:	79dc      	ldrb	r4, [r3, #7]
    58be:	2c01      	cmp	r4, #1
    58c0:	d008      	beq.n	58d4 <bt_id_create+0x7c>
	new_id = bt_dev.id_count++;
    58c2:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    58c4:	4629      	mov	r1, r5
    58c6:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    58c8:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    58ca:	f7ff fb53 	bl	4f74 <id_create.isra.22>
}
    58ce:	4620      	mov	r0, r4
    58d0:	b003      	add	sp, #12
    58d2:	bd30      	pop	{r4, r5, pc}
		return -ENOMEM;
    58d4:	f06f 040b 	mvn.w	r4, #11
    58d8:	e7f9      	b.n	58ce <bt_id_create+0x76>
    58da:	bf00      	nop
    58dc:	0001e448 	.word	0x0001e448
    58e0:	0001e508 	.word	0x0001e508
    58e4:	0001faa8 	.word	0x0001faa8
    58e8:	2000ca40 	.word	0x2000ca40

000058ec <bt_setup_public_id_addr>:
{
    58ec:	b570      	push	{r4, r5, r6, lr}
    58ee:	b088      	sub	sp, #32
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    58f0:	aa01      	add	r2, sp, #4
    58f2:	2100      	movs	r1, #0
    58f4:	f241 0009 	movw	r0, #4105	; 0x1009
    58f8:	f7ff f9de 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    58fc:	4e21      	ldr	r6, [pc, #132]	; (5984 <bt_setup_public_id_addr+0x98>)
    58fe:	4604      	mov	r4, r0
    5900:	b188      	cbz	r0, 5926 <bt_setup_public_id_addr+0x3a>
		BT_WARN("Failed to read public address");
    5902:	2302      	movs	r3, #2
    5904:	f04f 0100 	mov.w	r1, #0
    5908:	f363 0107 	bfi	r1, r3, #0, #8
    590c:	4a1e      	ldr	r2, [pc, #120]	; (5988 <bt_setup_public_id_addr+0x9c>)
    590e:	4b1f      	ldr	r3, [pc, #124]	; (598c <bt_setup_public_id_addr+0xa0>)
    5910:	481f      	ldr	r0, [pc, #124]	; (5990 <bt_setup_public_id_addr+0xa4>)
    5912:	1a9b      	subs	r3, r3, r2
    5914:	08db      	lsrs	r3, r3, #3
    5916:	f363 118f 	bfi	r1, r3, #6, #10
    591a:	f012 fe59 	bl	185d0 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    591e:	2300      	movs	r3, #0
    5920:	71f3      	strb	r3, [r6, #7]
}
    5922:	b008      	add	sp, #32
    5924:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5926:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5928:	9004      	str	r0, [sp, #16]
    592a:	689d      	ldr	r5, [r3, #8]
    592c:	f8ad 0014 	strh.w	r0, [sp, #20]
    5930:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    5932:	2206      	movs	r2, #6
    5934:	a904      	add	r1, sp, #16
    5936:	4628      	mov	r0, r5
    5938:	f013 f96f 	bl	18c1a <memcmp>
    593c:	b918      	cbnz	r0, 5946 <bt_setup_public_id_addr+0x5a>
		net_buf_unref(rsp);
    593e:	9801      	ldr	r0, [sp, #4]
    5940:	f00c fe16 	bl	12570 <net_buf_unref>
    5944:	e7eb      	b.n	591e <bt_setup_public_id_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    5946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    594a:	2206      	movs	r2, #6
    594c:	a902      	add	r1, sp, #8
    594e:	4628      	mov	r0, r5
    5950:	9302      	str	r3, [sp, #8]
    5952:	f8ad 300c 	strh.w	r3, [sp, #12]
    5956:	f013 f960 	bl	18c1a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    595a:	2800      	cmp	r0, #0
    595c:	d0ef      	beq.n	593e <bt_setup_public_id_addr+0x52>
	memcpy(dst, src, sizeof(*dst));
    595e:	4629      	mov	r1, r5
    5960:	2206      	movs	r2, #6
    5962:	f10d 0019 	add.w	r0, sp, #25
    5966:	f013 f968 	bl	18c3a <memcpy>
	net_buf_unref(rsp);
    596a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    596c:	f88d 4018 	strb.w	r4, [sp, #24]
	net_buf_unref(rsp);
    5970:	f00c fdfe 	bl	12570 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    5974:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    5976:	a906      	add	r1, sp, #24
    5978:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    597a:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    597c:	f7ff fafa 	bl	4f74 <id_create.isra.22>
    5980:	e7cf      	b.n	5922 <bt_setup_public_id_addr+0x36>
    5982:	bf00      	nop
    5984:	2000ca40 	.word	0x2000ca40
    5988:	0001e448 	.word	0x0001e448
    598c:	0001e508 	.word	0x0001e508
    5990:	0001fbe3 	.word	0x0001fbe3

00005994 <bt_setup_random_id_addr>:
{
    5994:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    5996:	4c3b      	ldr	r4, [pc, #236]	; (5a84 <bt_setup_random_id_addr+0xf0>)
    5998:	79e7      	ldrb	r7, [r4, #7]
{
    599a:	b089      	sub	sp, #36	; 0x24
    599c:	4625      	mov	r5, r4
	if (!bt_dev.id_count) {
    599e:	b99f      	cbnz	r7, 59c8 <bt_setup_random_id_addr+0x34>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    59a0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    59a4:	f013 0601 	ands.w	r6, r3, #1
    59a8:	d113      	bne.n	59d2 <bt_setup_random_id_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
    59aa:	2302      	movs	r3, #2
    59ac:	f04f 0100 	mov.w	r1, #0
    59b0:	f363 0107 	bfi	r1, r3, #0, #8
    59b4:	4a34      	ldr	r2, [pc, #208]	; (5a88 <bt_setup_random_id_addr+0xf4>)
    59b6:	4b35      	ldr	r3, [pc, #212]	; (5a8c <bt_setup_random_id_addr+0xf8>)
    59b8:	4835      	ldr	r0, [pc, #212]	; (5a90 <bt_setup_random_id_addr+0xfc>)
    59ba:	1a9b      	subs	r3, r3, r2
    59bc:	08db      	lsrs	r3, r3, #3
    59be:	f363 118f 	bfi	r1, r3, #6, #10
    59c2:	f012 fe05 	bl	185d0 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    59c6:	71e6      	strb	r6, [r4, #7]
	return bt_id_create(NULL, NULL);
    59c8:	2100      	movs	r1, #0
    59ca:	4608      	mov	r0, r1
    59cc:	f7ff ff44 	bl	5858 <bt_id_create>
    59d0:	e04e      	b.n	5a70 <bt_setup_random_id_addr+0xdc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    59d2:	466a      	mov	r2, sp
    59d4:	4639      	mov	r1, r7
    59d6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    59da:	f7ff f96d 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    59de:	b178      	cbz	r0, 5a00 <bt_setup_random_id_addr+0x6c>
		BT_WARN("Failed to read static addresses");
    59e0:	2302      	movs	r3, #2
    59e2:	f04f 0100 	mov.w	r1, #0
    59e6:	f363 0107 	bfi	r1, r3, #0, #8
    59ea:	4a27      	ldr	r2, [pc, #156]	; (5a88 <bt_setup_random_id_addr+0xf4>)
    59ec:	4b27      	ldr	r3, [pc, #156]	; (5a8c <bt_setup_random_id_addr+0xf8>)
    59ee:	4829      	ldr	r0, [pc, #164]	; (5a94 <bt_setup_random_id_addr+0x100>)
    59f0:	1a9b      	subs	r3, r3, r2
    59f2:	08db      	lsrs	r3, r3, #3
    59f4:	f363 118f 	bfi	r1, r3, #6, #10
    59f8:	f012 fdea 	bl	185d0 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    59fc:	71e7      	strb	r7, [r4, #7]
		if (bt_dev.id_count) {
    59fe:	e7e3      	b.n	59c8 <bt_setup_random_id_addr+0x34>
	rp = (void *)rsp->data;
    5a00:	9b00      	ldr	r3, [sp, #0]
    5a02:	689c      	ldr	r4, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    5a04:	7866      	ldrb	r6, [r4, #1]
    5a06:	1c37      	adds	r7, r6, #0
    5a08:	bf18      	it	ne
    5a0a:	2701      	movne	r7, #1
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5a0c:	3402      	adds	r4, #2
	for (i = 0; i < cnt; i++) {
    5a0e:	4287      	cmp	r7, r0
    5a10:	dc30      	bgt.n	5a74 <bt_setup_random_id_addr+0xe0>
	net_buf_unref(rsp);
    5a12:	9800      	ldr	r0, [sp, #0]
    5a14:	f00c fdac 	bl	12570 <net_buf_unref>
	if (!cnt) {
    5a18:	b96e      	cbnz	r6, 5a36 <bt_setup_random_id_addr+0xa2>
		BT_WARN("No static addresses stored in controller");
    5a1a:	2302      	movs	r3, #2
    5a1c:	f04f 0100 	mov.w	r1, #0
    5a20:	f363 0107 	bfi	r1, r3, #0, #8
    5a24:	4a18      	ldr	r2, [pc, #96]	; (5a88 <bt_setup_random_id_addr+0xf4>)
    5a26:	4b19      	ldr	r3, [pc, #100]	; (5a8c <bt_setup_random_id_addr+0xf8>)
    5a28:	481b      	ldr	r0, [pc, #108]	; (5a98 <bt_setup_random_id_addr+0x104>)
    5a2a:	1a9b      	subs	r3, r3, r2
    5a2c:	08db      	lsrs	r3, r3, #3
    5a2e:	f363 118f 	bfi	r1, r3, #6, #10
    5a32:	f012 fdcd 	bl	185d0 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    5a36:	71ef      	strb	r7, [r5, #7]
		if (bt_dev.id_count) {
    5a38:	2e00      	cmp	r6, #0
    5a3a:	d0c5      	beq.n	59c8 <bt_setup_random_id_addr+0x34>
    5a3c:	2400      	movs	r4, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    5a3e:	2716      	movs	r7, #22
    5a40:	b2e6      	uxtb	r6, r4
    5a42:	ab02      	add	r3, sp, #8
    5a44:	2206      	movs	r2, #6
    5a46:	fb07 3106 	mla	r1, r7, r6, r3
    5a4a:	f10d 0001 	add.w	r0, sp, #1
    5a4e:	f013 f8f4 	bl	18c3a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    5a52:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    5a54:	4669      	mov	r1, sp
    5a56:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    5a58:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    5a5c:	3401      	adds	r4, #1
    5a5e:	f7ff fa89 	bl	4f74 <id_create.isra.22>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    5a62:	79ea      	ldrb	r2, [r5, #7]
    5a64:	b2e3      	uxtb	r3, r4
    5a66:	429a      	cmp	r2, r3
    5a68:	d8ea      	bhi.n	5a40 <bt_setup_random_id_addr+0xac>
			return set_random_address(&bt_dev.id_addr[0].a);
    5a6a:	480c      	ldr	r0, [pc, #48]	; (5a9c <bt_setup_random_id_addr+0x108>)
    5a6c:	f7ff fa24 	bl	4eb8 <set_random_address>
}
    5a70:	b009      	add	sp, #36	; 0x24
    5a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5a74:	2216      	movs	r2, #22
    5a76:	4621      	mov	r1, r4
    5a78:	a802      	add	r0, sp, #8
    5a7a:	f013 f8de 	bl	18c3a <memcpy>
	for (i = 0; i < cnt; i++) {
    5a7e:	2001      	movs	r0, #1
    5a80:	e7c5      	b.n	5a0e <bt_setup_random_id_addr+0x7a>
    5a82:	bf00      	nop
    5a84:	2000ca40 	.word	0x2000ca40
    5a88:	0001e448 	.word	0x0001e448
    5a8c:	0001e508 	.word	0x0001e508
    5a90:	0001fc01 	.word	0x0001fc01
    5a94:	0001fc2d 	.word	0x0001fc2d
    5a98:	0001fc4d 	.word	0x0001fc4d
    5a9c:	2000ca41 	.word	0x2000ca41

00005aa0 <hci_init>:
{
    5aa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    5aa4:	4dbe      	ldr	r5, [pc, #760]	; (5da0 <hci_init+0x300>)
    5aa6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    5aaa:	6899      	ldr	r1, [r3, #8]
    5aac:	f011 0101 	ands.w	r1, r1, #1
    5ab0:	d121      	bne.n	5af6 <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    5ab2:	aa01      	add	r2, sp, #4
    5ab4:	f640 4003 	movw	r0, #3075	; 0xc03
    5ab8:	f7ff f8fe 	bl	4cb8 <bt_hci_cmd_send_sync>
		if (err) {
    5abc:	4604      	mov	r4, r0
    5abe:	2800      	cmp	r0, #0
    5ac0:	d171      	bne.n	5ba6 <hci_init+0x106>
		hci_reset_complete(rsp);
    5ac2:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
    5ac4:	689b      	ldr	r3, [r3, #8]
	if (status) {
    5ac6:	781b      	ldrb	r3, [r3, #0]
    5ac8:	b993      	cbnz	r3, 5af0 <hci_init+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5aca:	f3bf 8f5b 	dmb	ish
    5ace:	462b      	mov	r3, r5
    5ad0:	f853 2f70 	ldr.w	r2, [r3, #112]!
    5ad4:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    5ad8:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5adc:	f3bf 8f5b 	dmb	ish
    5ae0:	e853 1f00 	ldrex	r1, [r3]
    5ae4:	e843 2000 	strex	r0, r2, [r3]
    5ae8:	2800      	cmp	r0, #0
    5aea:	d1f9      	bne.n	5ae0 <hci_init+0x40>
    5aec:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    5af0:	9801      	ldr	r0, [sp, #4]
    5af2:	f00c fd3d 	bl	12570 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    5af6:	aa01      	add	r2, sp, #4
    5af8:	2100      	movs	r1, #0
    5afa:	f241 0003 	movw	r0, #4099	; 0x1003
    5afe:	f7ff f8db 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5b02:	4604      	mov	r4, r0
    5b04:	2800      	cmp	r0, #0
    5b06:	d14e      	bne.n	5ba6 <hci_init+0x106>
	read_local_features_complete(rsp);
    5b08:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    5b0a:	48a6      	ldr	r0, [pc, #664]	; (5da4 <hci_init+0x304>)
    5b0c:	6899      	ldr	r1, [r3, #8]
    5b0e:	2208      	movs	r2, #8
    5b10:	3101      	adds	r1, #1
    5b12:	f013 f892 	bl	18c3a <memcpy>
	net_buf_unref(rsp);
    5b16:	9801      	ldr	r0, [sp, #4]
    5b18:	f00c fd2a 	bl	12570 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    5b1c:	4621      	mov	r1, r4
    5b1e:	aa01      	add	r2, sp, #4
    5b20:	f241 0001 	movw	r0, #4097	; 0x1001
    5b24:	f7ff f8c8 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5b28:	4604      	mov	r4, r0
    5b2a:	2800      	cmp	r0, #0
    5b2c:	d13b      	bne.n	5ba6 <hci_init+0x106>
	read_local_ver_complete(rsp);
    5b2e:	9801      	ldr	r0, [sp, #4]
    5b30:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    5b32:	785a      	ldrb	r2, [r3, #1]
    5b34:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    5b36:	78d9      	ldrb	r1, [r3, #3]
    5b38:	789a      	ldrb	r2, [r3, #2]
    5b3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5b3e:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    5b40:	791a      	ldrb	r2, [r3, #4]
    5b42:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    5b44:	7a19      	ldrb	r1, [r3, #8]
    5b46:	79da      	ldrb	r2, [r3, #7]
    5b48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5b4c:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    5b4e:	795a      	ldrb	r2, [r3, #5]
    5b50:	799b      	ldrb	r3, [r3, #6]
    5b52:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    5b56:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    5b58:	f00c fd0a 	bl	12570 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    5b5c:	4621      	mov	r1, r4
    5b5e:	aa01      	add	r2, sp, #4
    5b60:	f241 0002 	movw	r0, #4098	; 0x1002
    5b64:	f7ff f8a8 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5b68:	4604      	mov	r4, r0
    5b6a:	b9e0      	cbnz	r0, 5ba6 <hci_init+0x106>
	read_supported_commands_complete(rsp);
    5b6c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    5b6e:	488e      	ldr	r0, [pc, #568]	; (5da8 <hci_init+0x308>)
    5b70:	6899      	ldr	r1, [r3, #8]
    5b72:	2240      	movs	r2, #64	; 0x40
    5b74:	3101      	adds	r1, #1
    5b76:	f013 f860 	bl	18c3a <memcpy>
	net_buf_unref(rsp);
    5b7a:	9801      	ldr	r0, [sp, #4]
    5b7c:	f00c fcf8 	bl	12570 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    5b80:	7f2b      	ldrb	r3, [r5, #28]
    5b82:	065e      	lsls	r6, r3, #25
    5b84:	d413      	bmi.n	5bae <hci_init+0x10e>
		BT_ERR("Non-LE capable controller detected!");
    5b86:	2301      	movs	r3, #1
    5b88:	f04f 0100 	mov.w	r1, #0
    5b8c:	f363 0107 	bfi	r1, r3, #0, #8
    5b90:	4a86      	ldr	r2, [pc, #536]	; (5dac <hci_init+0x30c>)
    5b92:	4b87      	ldr	r3, [pc, #540]	; (5db0 <hci_init+0x310>)
    5b94:	4887      	ldr	r0, [pc, #540]	; (5db4 <hci_init+0x314>)
    5b96:	1a9b      	subs	r3, r3, r2
    5b98:	08db      	lsrs	r3, r3, #3
    5b9a:	f363 118f 	bfi	r1, r3, #6, #10
    5b9e:	f012 fd17 	bl	185d0 <log_0>
		return -ENODEV;
    5ba2:	f06f 0412 	mvn.w	r4, #18
}
    5ba6:	4620      	mov	r0, r4
    5ba8:	b002      	add	sp, #8
    5baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    5bae:	4621      	mov	r1, r4
    5bb0:	aa01      	add	r2, sp, #4
    5bb2:	f242 0003 	movw	r0, #8195	; 0x2003
    5bb6:	f7ff f87f 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5bba:	4604      	mov	r4, r0
    5bbc:	2800      	cmp	r0, #0
    5bbe:	d1f2      	bne.n	5ba6 <hci_init+0x106>
	read_le_features_complete(rsp);
    5bc0:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    5bc2:	487d      	ldr	r0, [pc, #500]	; (5db8 <hci_init+0x318>)
    5bc4:	6899      	ldr	r1, [r3, #8]
    5bc6:	2208      	movs	r2, #8
    5bc8:	3101      	adds	r1, #1
    5bca:	f013 f836 	bl	18c3a <memcpy>
	net_buf_unref(rsp);
    5bce:	9801      	ldr	r0, [sp, #4]
    5bd0:	f00c fcce 	bl	12570 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    5bd4:	4621      	mov	r1, r4
    5bd6:	aa01      	add	r2, sp, #4
    5bd8:	f242 0002 	movw	r0, #8194	; 0x2002
    5bdc:	f7ff f86c 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5be0:	4604      	mov	r4, r0
    5be2:	2800      	cmp	r0, #0
    5be4:	d1df      	bne.n	5ba6 <hci_init+0x106>
	le_read_buffer_size_complete(rsp);
    5be6:	9b01      	ldr	r3, [sp, #4]
    5be8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    5bea:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5bee:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
    5bf2:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
    5bf4:	b121      	cbz	r1, 5c00 <hci_init+0x160>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
    5bf6:	78da      	ldrb	r2, [r3, #3]
	z_impl_k_sem_init(sem, initial_count, limit);
    5bf8:	4870      	ldr	r0, [pc, #448]	; (5dbc <hci_init+0x31c>)
    5bfa:	4611      	mov	r1, r2
    5bfc:	f018 f8f1 	bl	1dde2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    5c00:	9801      	ldr	r0, [sp, #4]
    5c02:	f00c fcb5 	bl	12570 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5c06:	7f2c      	ldrb	r4, [r5, #28]
    5c08:	f014 0420 	ands.w	r4, r4, #32
    5c0c:	f000 80dc 	beq.w	5dc8 <hci_init+0x328>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    5c10:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    5c14:	0718      	lsls	r0, r3, #28
    5c16:	d511      	bpl.n	5c3c <hci_init+0x19c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    5c18:	aa01      	add	r2, sp, #4
    5c1a:	2100      	movs	r1, #0
    5c1c:	f242 001c 	movw	r0, #8220	; 0x201c
    5c20:	f7ff f84a 	bl	4cb8 <bt_hci_cmd_send_sync>
		if (err) {
    5c24:	4604      	mov	r4, r0
    5c26:	2800      	cmp	r0, #0
    5c28:	d1bd      	bne.n	5ba6 <hci_init+0x106>
		le_read_supp_states_complete(rsp);
    5c2a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5c2c:	6883      	ldr	r3, [r0, #8]
    5c2e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    5c32:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    5c34:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    5c38:	f00c fc9a 	bl	12570 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    5c3c:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    5c40:	0699      	lsls	r1, r3, #26
    5c42:	f100 80dd 	bmi.w	5e00 <hci_init+0x360>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    5c46:	2108      	movs	r1, #8
    5c48:	f242 0001 	movw	r0, #8193	; 0x2001
    5c4c:	f7fe fffe 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    5c50:	4604      	mov	r4, r0
    5c52:	2800      	cmp	r0, #0
    5c54:	f000 80bf 	beq.w	5dd6 <hci_init+0x336>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    5c58:	2108      	movs	r1, #8
    5c5a:	4408      	add	r0, r1
    5c5c:	f015 fae7 	bl	1b22e <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    5c60:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    5c64:	f012 0f02 	tst.w	r2, #2
    5c68:	bf14      	ite	ne
    5c6a:	232f      	movne	r3, #47	; 0x2f
    5c6c:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    5c6e:	0692      	lsls	r2, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    5c70:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    5c74:	bf48      	it	mi
    5c76:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    5c7a:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    5c7e:	bf18      	it	ne
    5c80:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    5c84:	2200      	movs	r2, #0
    5c86:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5c88:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5c8c:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    5c8e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5c90:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    5c92:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    5c94:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    5c96:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    5c98:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    5c9a:	4621      	mov	r1, r4
    5c9c:	f242 0001 	movw	r0, #8193	; 0x2001
    5ca0:	f7ff f80a 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5ca4:	4604      	mov	r4, r0
    5ca6:	2800      	cmp	r0, #0
    5ca8:	f47f af7d 	bne.w	5ba6 <hci_init+0x106>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5cac:	7f2b      	ldrb	r3, [r5, #28]
    5cae:	069b      	lsls	r3, r3, #26
    5cb0:	d41e      	bmi.n	5cf0 <hci_init+0x250>
	if (bt_dev.le.mtu) {
    5cb2:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    5cb6:	b9d9      	cbnz	r1, 5cf0 <hci_init+0x250>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    5cb8:	aa01      	add	r2, sp, #4
    5cba:	f241 0005 	movw	r0, #4101	; 0x1005
    5cbe:	f7fe fffb 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5cc2:	4604      	mov	r4, r0
    5cc4:	2800      	cmp	r0, #0
    5cc6:	f47f af6e 	bne.w	5ba6 <hci_init+0x106>
	if (bt_dev.le.mtu) {
    5cca:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    5cce:	b963      	cbnz	r3, 5cea <hci_init+0x24a>
	read_buffer_size_complete(rsp);
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    5cd4:	785a      	ldrb	r2, [r3, #1]
    5cd6:	7899      	ldrb	r1, [r3, #2]
    5cd8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5cdc:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    5ce0:	889a      	ldrh	r2, [r3, #4]
    5ce2:	4836      	ldr	r0, [pc, #216]	; (5dbc <hci_init+0x31c>)
    5ce4:	4611      	mov	r1, r2
    5ce6:	f018 f87c 	bl	1dde2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    5cea:	9801      	ldr	r0, [sp, #4]
    5cec:	f00c fc40 	bl	12570 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    5cf0:	2108      	movs	r1, #8
    5cf2:	f640 4001 	movw	r0, #3073	; 0xc01
    5cf6:	f7fe ffa9 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    5cfa:	4604      	mov	r4, r0
    5cfc:	2800      	cmp	r0, #0
    5cfe:	d06a      	beq.n	5dd6 <hci_init+0x336>
	ev = net_buf_add(buf, sizeof(*ev));
    5d00:	2108      	movs	r1, #8
    5d02:	4408      	add	r0, r1
    5d04:	f015 fa93 	bl	1b22e <net_buf_simple_add>
	dst[0] = val;
    5d08:	2310      	movs	r3, #16
    5d0a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5d0c:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    5d0e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    5d10:	7043      	strb	r3, [r0, #1]
    5d12:	2602      	movs	r6, #2
    5d14:	2320      	movs	r3, #32
	dst[0] = val;
    5d16:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5d18:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    5d1a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    5d1c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    5d1e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    5d20:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    5d22:	4621      	mov	r1, r4
    5d24:	f640 4001 	movw	r0, #3073	; 0xc01
    5d28:	f7fe ffc6 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5d2c:	4604      	mov	r4, r0
    5d2e:	2800      	cmp	r0, #0
    5d30:	f47f af39 	bne.w	5ba6 <hci_init+0x106>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    5d34:	4601      	mov	r1, r0
    5d36:	aa01      	add	r2, sp, #4
    5d38:	f64f 4001 	movw	r0, #64513	; 0xfc01
    5d3c:	f7fe ffbc 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5d40:	2800      	cmp	r0, #0
    5d42:	f000 8089 	beq.w	5e58 <hci_init+0x3b8>
    5d46:	4b1a      	ldr	r3, [pc, #104]	; (5db0 <hci_init+0x310>)
    5d48:	4a18      	ldr	r2, [pc, #96]	; (5dac <hci_init+0x30c>)
		BT_WARN("Vendor HCI extensions not available");
    5d4a:	481d      	ldr	r0, [pc, #116]	; (5dc0 <hci_init+0x320>)
    5d4c:	f04f 0100 	mov.w	r1, #0
    5d50:	1a9b      	subs	r3, r3, r2
    5d52:	f366 0107 	bfi	r1, r6, #0, #8
    5d56:	08db      	lsrs	r3, r3, #3
    5d58:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("Failed to read supported vendor commands");
    5d5c:	f012 fc38 	bl	185d0 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    5d60:	79eb      	ldrb	r3, [r5, #7]
    5d62:	2b00      	cmp	r3, #0
    5d64:	f47f af1f 	bne.w	5ba6 <hci_init+0x106>
		bt_setup_public_id_addr();
    5d68:	f7ff fdc0 	bl	58ec <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    5d6c:	79eb      	ldrb	r3, [r5, #7]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	f47f af19 	bne.w	5ba6 <hci_init+0x106>
		err = bt_setup_random_id_addr();
    5d74:	f7ff fe0e 	bl	5994 <bt_setup_random_id_addr>
		if (err) {
    5d78:	4604      	mov	r4, r0
    5d7a:	2800      	cmp	r0, #0
    5d7c:	f43f af13 	beq.w	5ba6 <hci_init+0x106>
			BT_ERR("Unable to set identity address");
    5d80:	2301      	movs	r3, #1
    5d82:	f04f 0100 	mov.w	r1, #0
    5d86:	f363 0107 	bfi	r1, r3, #0, #8
    5d8a:	4a08      	ldr	r2, [pc, #32]	; (5dac <hci_init+0x30c>)
    5d8c:	4b08      	ldr	r3, [pc, #32]	; (5db0 <hci_init+0x310>)
    5d8e:	480d      	ldr	r0, [pc, #52]	; (5dc4 <hci_init+0x324>)
    5d90:	1a9b      	subs	r3, r3, r2
    5d92:	08db      	lsrs	r3, r3, #3
    5d94:	f363 118f 	bfi	r1, r3, #6, #10
    5d98:	f012 fc1a 	bl	185d0 <log_0>
			return err;
    5d9c:	e703      	b.n	5ba6 <hci_init+0x106>
    5d9e:	bf00      	nop
    5da0:	2000ca40 	.word	0x2000ca40
    5da4:	2000ca58 	.word	0x2000ca58
    5da8:	2000ca60 	.word	0x2000ca60
    5dac:	0001e448 	.word	0x0001e448
    5db0:	0001e508 	.word	0x0001e508
    5db4:	0001fe24 	.word	0x0001fe24
    5db8:	2000cab8 	.word	0x2000cab8
    5dbc:	2000cacc 	.word	0x2000cacc
    5dc0:	0001fe48 	.word	0x0001fe48
    5dc4:	0001febe 	.word	0x0001febe
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    5dc8:	2102      	movs	r1, #2
    5dca:	f640 406d 	movw	r0, #3181	; 0xc6d
    5dce:	f7fe ff3d 	bl	4c4c <bt_hci_cmd_create>
		if (!buf) {
    5dd2:	4606      	mov	r6, r0
    5dd4:	b910      	cbnz	r0, 5ddc <hci_init+0x33c>
		return -ENOBUFS;
    5dd6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5dda:	e6e4      	b.n	5ba6 <hci_init+0x106>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    5ddc:	2102      	movs	r1, #2
    5dde:	3008      	adds	r0, #8
    5de0:	f015 fa25 	bl	1b22e <net_buf_simple_add>
		cp_le->le = 0x01;
    5de4:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    5de6:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    5de8:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    5dea:	4622      	mov	r2, r4
    5dec:	4631      	mov	r1, r6
    5dee:	f640 406d 	movw	r0, #3181	; 0xc6d
    5df2:	f7fe ff61 	bl	4cb8 <bt_hci_cmd_send_sync>
		if (err) {
    5df6:	4604      	mov	r4, r0
    5df8:	2800      	cmp	r0, #0
    5dfa:	f43f af09 	beq.w	5c10 <hci_init+0x170>
    5dfe:	e6d2      	b.n	5ba6 <hci_init+0x106>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    5e00:	aa01      	add	r2, sp, #4
    5e02:	2100      	movs	r1, #0
    5e04:	f242 002f 	movw	r0, #8239	; 0x202f
    5e08:	f7fe ff56 	bl	4cb8 <bt_hci_cmd_send_sync>
		if (err) {
    5e0c:	4604      	mov	r4, r0
    5e0e:	2800      	cmp	r0, #0
    5e10:	f47f aec9 	bne.w	5ba6 <hci_init+0x106>
		rp = (void *)rsp->data;
    5e14:	9801      	ldr	r0, [sp, #4]
    5e16:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5e18:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5e1c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    5e20:	f00c fba6 	bl	12570 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5e24:	2104      	movs	r1, #4
    5e26:	f242 0024 	movw	r0, #8228	; 0x2024
    5e2a:	f7fe ff0f 	bl	4c4c <bt_hci_cmd_create>
		if (!buf) {
    5e2e:	4606      	mov	r6, r0
    5e30:	2800      	cmp	r0, #0
    5e32:	d0d0      	beq.n	5dd6 <hci_init+0x336>
		cp = net_buf_add(buf, sizeof(*cp));
    5e34:	2104      	movs	r1, #4
    5e36:	3008      	adds	r0, #8
    5e38:	f015 f9f9 	bl	1b22e <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5e3c:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    5e3e:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    5e42:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5e44:	4631      	mov	r1, r6
    5e46:	f242 0024 	movw	r0, #8228	; 0x2024
    5e4a:	f7fe ff35 	bl	4cb8 <bt_hci_cmd_send_sync>
		if (err) {
    5e4e:	4604      	mov	r4, r0
    5e50:	2800      	cmp	r0, #0
    5e52:	f43f aef8 	beq.w	5c46 <hci_init+0x1a6>
    5e56:	e6a6      	b.n	5ba6 <hci_init+0x106>
	net_buf_unref(rsp);
    5e58:	9801      	ldr	r0, [sp, #4]
    5e5a:	f00c fb89 	bl	12570 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    5e5e:	aa01      	add	r2, sp, #4
    5e60:	4621      	mov	r1, r4
    5e62:	f64f 4002 	movw	r0, #64514	; 0xfc02
    5e66:	f7fe ff27 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5e6a:	b160      	cbz	r0, 5e86 <hci_init+0x3e6>
		BT_WARN("Failed to read supported vendor features");
    5e6c:	2302      	movs	r3, #2
    5e6e:	f04f 0100 	mov.w	r1, #0
    5e72:	f363 0107 	bfi	r1, r3, #0, #8
    5e76:	4a18      	ldr	r2, [pc, #96]	; (5ed8 <hci_init+0x438>)
    5e78:	4b18      	ldr	r3, [pc, #96]	; (5edc <hci_init+0x43c>)
    5e7a:	4819      	ldr	r0, [pc, #100]	; (5ee0 <hci_init+0x440>)
    5e7c:	1a9b      	subs	r3, r3, r2
    5e7e:	08db      	lsrs	r3, r3, #3
    5e80:	f363 118f 	bfi	r1, r3, #6, #10
    5e84:	e76a      	b.n	5d5c <hci_init+0x2bc>
	rp.cmds = (void *)rsp->data;
    5e86:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5e88:	4816      	ldr	r0, [pc, #88]	; (5ee4 <hci_init+0x444>)
    5e8a:	6899      	ldr	r1, [r3, #8]
    5e8c:	4632      	mov	r2, r6
    5e8e:	3101      	adds	r1, #1
    5e90:	f012 fed3 	bl	18c3a <memcpy>
	net_buf_unref(rsp);
    5e94:	9801      	ldr	r0, [sp, #4]
    5e96:	f00c fb6b 	bl	12570 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5e9a:	aa01      	add	r2, sp, #4
    5e9c:	4621      	mov	r1, r4
    5e9e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    5ea2:	f7fe ff09 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    5ea6:	b160      	cbz	r0, 5ec2 <hci_init+0x422>
		BT_WARN("Failed to read supported vendor commands");
    5ea8:	2302      	movs	r3, #2
    5eaa:	f04f 0100 	mov.w	r1, #0
    5eae:	f363 0107 	bfi	r1, r3, #0, #8
    5eb2:	4a09      	ldr	r2, [pc, #36]	; (5ed8 <hci_init+0x438>)
    5eb4:	4b09      	ldr	r3, [pc, #36]	; (5edc <hci_init+0x43c>)
    5eb6:	480c      	ldr	r0, [pc, #48]	; (5ee8 <hci_init+0x448>)
    5eb8:	1a9b      	subs	r3, r3, r2
    5eba:	08db      	lsrs	r3, r3, #3
    5ebc:	f363 118f 	bfi	r1, r3, #6, #10
    5ec0:	e74c      	b.n	5d5c <hci_init+0x2bc>
	rp.feat = (void *)rsp->data;
    5ec2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    5ec4:	4809      	ldr	r0, [pc, #36]	; (5eec <hci_init+0x44c>)
    5ec6:	6899      	ldr	r1, [r3, #8]
    5ec8:	2201      	movs	r2, #1
    5eca:	4411      	add	r1, r2
    5ecc:	f012 feb5 	bl	18c3a <memcpy>
	net_buf_unref(rsp);
    5ed0:	9801      	ldr	r0, [sp, #4]
    5ed2:	f00c fb4d 	bl	12570 <net_buf_unref>
    5ed6:	e743      	b.n	5d60 <hci_init+0x2c0>
    5ed8:	0001e448 	.word	0x0001e448
    5edc:	0001e508 	.word	0x0001e508
    5ee0:	0001fe6c 	.word	0x0001fe6c
    5ee4:	2000caa1 	.word	0x2000caa1
    5ee8:	0001fe95 	.word	0x0001fe95
    5eec:	2000caa0 	.word	0x2000caa0

00005ef0 <bt_enable>:
{
    5ef0:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    5ef2:	4d3f      	ldr	r5, [pc, #252]	; (5ff0 <bt_enable+0x100>)
    5ef4:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    5ef8:	b086      	sub	sp, #24
    5efa:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    5efc:	b993      	cbnz	r3, 5f24 <bt_enable+0x34>
		BT_ERR("No HCI driver registered");
    5efe:	2301      	movs	r3, #1
    5f00:	f04f 0100 	mov.w	r1, #0
    5f04:	f363 0107 	bfi	r1, r3, #0, #8
    5f08:	4a3a      	ldr	r2, [pc, #232]	; (5ff4 <bt_enable+0x104>)
    5f0a:	4b3b      	ldr	r3, [pc, #236]	; (5ff8 <bt_enable+0x108>)
    5f0c:	483b      	ldr	r0, [pc, #236]	; (5ffc <bt_enable+0x10c>)
    5f0e:	1a9b      	subs	r3, r3, r2
    5f10:	08db      	lsrs	r3, r3, #3
    5f12:	f363 118f 	bfi	r1, r3, #6, #10
    5f16:	f012 fb5b 	bl	185d0 <log_0>
		return -ENODEV;
    5f1a:	f06f 0412 	mvn.w	r4, #18
}
    5f1e:	4620      	mov	r0, r4
    5f20:	b006      	add	sp, #24
    5f22:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5f24:	f105 0370 	add.w	r3, r5, #112	; 0x70
    5f28:	f3bf 8f5b 	dmb	ish
    5f2c:	e853 4f00 	ldrex	r4, [r3]
    5f30:	f044 0201 	orr.w	r2, r4, #1
    5f34:	e843 2100 	strex	r1, r2, [r3]
    5f38:	2900      	cmp	r1, #0
    5f3a:	d1f7      	bne.n	5f2c <bt_enable+0x3c>
    5f3c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5f40:	f014 0401 	ands.w	r4, r4, #1
    5f44:	d151      	bne.n	5fea <bt_enable+0xfa>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    5f46:	482e      	ldr	r0, [pc, #184]	; (6000 <bt_enable+0x110>)
    5f48:	f7ff fc4e 	bl	57e8 <bt_set_name>
	ready_cb = cb;
    5f4c:	4b2d      	ldr	r3, [pc, #180]	; (6004 <bt_enable+0x114>)
    5f4e:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5f50:	f06f 0308 	mvn.w	r3, #8
    5f54:	e9cd 4302 	strd	r4, r3, [sp, #8]
    5f58:	e9cd 4404 	strd	r4, r4, [sp, #16]
    5f5c:	e9cd 4400 	strd	r4, r4, [sp]
    5f60:	4b29      	ldr	r3, [pc, #164]	; (6008 <bt_enable+0x118>)
    5f62:	492a      	ldr	r1, [pc, #168]	; (600c <bt_enable+0x11c>)
    5f64:	482a      	ldr	r0, [pc, #168]	; (6010 <bt_enable+0x120>)
    5f66:	f44f 7220 	mov.w	r2, #640	; 0x280
    5f6a:	f011 fa8d 	bl	17488 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5f6e:	4929      	ldr	r1, [pc, #164]	; (6014 <bt_enable+0x124>)
    5f70:	4827      	ldr	r0, [pc, #156]	; (6010 <bt_enable+0x120>)
    5f72:	f017 ff41 	bl	1ddf8 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    5f76:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    5f7a:	68db      	ldr	r3, [r3, #12]
    5f7c:	4798      	blx	r3
	if (err) {
    5f7e:	4604      	mov	r4, r0
    5f80:	b178      	cbz	r0, 5fa2 <bt_enable+0xb2>
		BT_ERR("HCI driver open failed (%d)", err);
    5f82:	2301      	movs	r3, #1
    5f84:	f04f 0200 	mov.w	r2, #0
    5f88:	f363 0207 	bfi	r2, r3, #0, #8
    5f8c:	4919      	ldr	r1, [pc, #100]	; (5ff4 <bt_enable+0x104>)
    5f8e:	4b1a      	ldr	r3, [pc, #104]	; (5ff8 <bt_enable+0x108>)
    5f90:	1a5b      	subs	r3, r3, r1
    5f92:	08db      	lsrs	r3, r3, #3
    5f94:	4601      	mov	r1, r0
    5f96:	f363 128f 	bfi	r2, r3, #6, #10
    5f9a:	481f      	ldr	r0, [pc, #124]	; (6018 <bt_enable+0x128>)
    5f9c:	f012 fb25 	bl	185ea <log_1>
		return err;
    5fa0:	e7bd      	b.n	5f1e <bt_enable+0x2e>
	if (!cb) {
    5fa2:	b966      	cbnz	r6, 5fbe <bt_enable+0xce>
	err = hci_init();
    5fa4:	f7ff fd7c 	bl	5aa0 <hci_init>
	if (err) {
    5fa8:	4604      	mov	r4, r0
    5faa:	2800      	cmp	r0, #0
    5fac:	d1b7      	bne.n	5f1e <bt_enable+0x2e>
		err = bt_conn_init();
    5fae:	f001 f8af 	bl	7110 <bt_conn_init>
		if (err) {
    5fb2:	4604      	mov	r4, r0
    5fb4:	2800      	cmp	r0, #0
    5fb6:	d1b2      	bne.n	5f1e <bt_enable+0x2e>
	bt_finalize_init();
    5fb8:	f7ff fc06 	bl	57c8 <bt_finalize_init>
	return 0;
    5fbc:	e7af      	b.n	5f1e <bt_enable+0x2e>
    5fbe:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    5fc2:	f3bf 8f5b 	dmb	ish
    5fc6:	e853 2f00 	ldrex	r2, [r3]
    5fca:	f042 0101 	orr.w	r1, r2, #1
    5fce:	e843 1000 	strex	r0, r1, [r3]
    5fd2:	2800      	cmp	r0, #0
    5fd4:	d1f7      	bne.n	5fc6 <bt_enable+0xd6>
    5fd6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5fda:	07d3      	lsls	r3, r2, #31
    5fdc:	d49f      	bmi.n	5f1e <bt_enable+0x2e>
		k_queue_append(&work_q->queue, work);
    5fde:	f105 0164 	add.w	r1, r5, #100	; 0x64
    5fe2:	480e      	ldr	r0, [pc, #56]	; (601c <bt_enable+0x12c>)
    5fe4:	f017 fd7b 	bl	1dade <k_queue_append>
    5fe8:	e799      	b.n	5f1e <bt_enable+0x2e>
		return -EALREADY;
    5fea:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5fee:	e796      	b.n	5f1e <bt_enable+0x2e>
    5ff0:	2000ca40 	.word	0x2000ca40
    5ff4:	0001e448 	.word	0x0001e448
    5ff8:	0001e508 	.word	0x0001e508
    5ffc:	0001fa3b 	.word	0x0001fa3b
    6000:	0001fa54 	.word	0x0001fa54
    6004:	20000180 	.word	0x20000180
    6008:	00005401 	.word	0x00005401
    600c:	2000a708 	.word	0x2000a708
    6010:	20000184 	.word	0x20000184
    6014:	0001fa64 	.word	0x0001fa64
    6018:	0001fa6a 	.word	0x0001fa6a
    601c:	20005c68 	.word	0x20005c68

00006020 <init_work>:
{
    6020:	b510      	push	{r4, lr}
	err = hci_init();
    6022:	f7ff fd3d 	bl	5aa0 <hci_init>
	if (err) {
    6026:	b920      	cbnz	r0, 6032 <init_work+0x12>
		err = bt_conn_init();
    6028:	f001 f872 	bl	7110 <bt_conn_init>
		if (err) {
    602c:	b908      	cbnz	r0, 6032 <init_work+0x12>
	bt_finalize_init();
    602e:	f7ff fbcb 	bl	57c8 <bt_finalize_init>
	if (ready_cb) {
    6032:	4b03      	ldr	r3, [pc, #12]	; (6040 <init_work+0x20>)
    6034:	681b      	ldr	r3, [r3, #0]
    6036:	b113      	cbz	r3, 603e <init_work+0x1e>
}
    6038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    603c:	4718      	bx	r3
}
    603e:	bd10      	pop	{r4, pc}
    6040:	20000180 	.word	0x20000180

00006044 <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    6044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6048:	4e9f      	ldr	r6, [pc, #636]	; (62c8 <bt_le_adv_start_internal+0x284>)
{
    604a:	b08d      	sub	sp, #52	; 0x34
    604c:	4605      	mov	r5, r0
    604e:	468a      	mov	sl, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6050:	f106 0070 	add.w	r0, r6, #112	; 0x70
    6054:	2101      	movs	r1, #1
{
    6056:	4693      	mov	fp, r2
    6058:	4699      	mov	r9, r3
    605a:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    605e:	f013 f8e1 	bl	19224 <atomic_test_bit>
    6062:	2800      	cmp	r0, #0
    6064:	f000 8123 	beq.w	62ae <bt_le_adv_start_internal+0x26a>
	if (param->id >= bt_dev.id_count ||
    6068:	7828      	ldrb	r0, [r5, #0]
    606a:	79f3      	ldrb	r3, [r6, #7]
    606c:	4283      	cmp	r3, r0
    606e:	d805      	bhi.n	607c <bt_le_adv_start_internal+0x38>
		return -EAGAIN;
	}

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    6070:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);

	return 0;
}
    6074:	4620      	mov	r0, r4
    6076:	b00d      	add	sp, #52	; 0x34
    6078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    607c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6080:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6082:	2207      	movs	r2, #7
    6084:	a906      	add	r1, sp, #24
    6086:	4430      	add	r0, r6
    6088:	9306      	str	r3, [sp, #24]
    608a:	f8cd 301b 	str.w	r3, [sp, #27]
    608e:	f012 fdc4 	bl	18c1a <memcmp>
	if (param->id >= bt_dev.id_count ||
    6092:	2800      	cmp	r0, #0
    6094:	d0ec      	beq.n	6070 <bt_le_adv_start_internal+0x2c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6096:	786b      	ldrb	r3, [r5, #1]
    6098:	07dc      	lsls	r4, r3, #31
    609a:	d405      	bmi.n	60a8 <bt_le_adv_start_internal+0x64>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    609c:	7c32      	ldrb	r2, [r6, #16]
    609e:	2a08      	cmp	r2, #8
    60a0:	d802      	bhi.n	60a8 <bt_le_adv_start_internal+0x64>
    60a2:	886a      	ldrh	r2, [r5, #2]
    60a4:	2a9f      	cmp	r2, #159	; 0x9f
    60a6:	d9e3      	bls.n	6070 <bt_le_adv_start_internal+0x2c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    60a8:	06d8      	lsls	r0, r3, #27
    60aa:	d402      	bmi.n	60b2 <bt_le_adv_start_internal+0x6e>
    60ac:	f1b8 0f00 	cmp.w	r8, #0
    60b0:	d108      	bne.n	60c4 <bt_le_adv_start_internal+0x80>
		if (param->interval_min > param->interval_max ||
    60b2:	886a      	ldrh	r2, [r5, #2]
    60b4:	88ab      	ldrh	r3, [r5, #4]
    60b6:	429a      	cmp	r2, r3
    60b8:	d8da      	bhi.n	6070 <bt_le_adv_start_internal+0x2c>
    60ba:	2a1f      	cmp	r2, #31
    60bc:	d9d8      	bls.n	6070 <bt_le_adv_start_internal+0x2c>
		    param->interval_min < 0x0020 ||
    60be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    60c2:	d8d5      	bhi.n	6070 <bt_le_adv_start_internal+0x2c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    60c4:	2105      	movs	r1, #5
    60c6:	4881      	ldr	r0, [pc, #516]	; (62cc <bt_le_adv_start_internal+0x288>)
    60c8:	f013 f8ac 	bl	19224 <atomic_test_bit>
    60cc:	4601      	mov	r1, r0
    60ce:	2800      	cmp	r0, #0
    60d0:	f040 80f0 	bne.w	62b4 <bt_le_adv_start_internal+0x270>
	(void)memset(&set_param, 0, sizeof(set_param));
    60d4:	220f      	movs	r2, #15
    60d6:	a808      	add	r0, sp, #32
    60d8:	f012 fdd9 	bl	18c8e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    60dc:	886b      	ldrh	r3, [r5, #2]
    60de:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    60e2:	88ab      	ldrh	r3, [r5, #4]
    60e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = 0x07;
    60e8:	2307      	movs	r3, #7
    60ea:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	if (bt_dev.adv_id != param->id) {
    60ee:	7a32      	ldrb	r2, [r6, #8]
    60f0:	782b      	ldrb	r3, [r5, #0]
    60f2:	429a      	cmp	r2, r3
    60f4:	d004      	beq.n	6100 <bt_le_adv_start_internal+0xbc>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    60f6:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
    60fa:	4874      	ldr	r0, [pc, #464]	; (62cc <bt_le_adv_start_internal+0x288>)
    60fc:	f013 f869 	bl	191d2 <atomic_and>
	bt_dev.adv_id = param->id;
    6100:	782f      	ldrb	r7, [r5, #0]
    6102:	7237      	strb	r7, [r6, #8]
		set_param.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;
    6104:	2300      	movs	r3, #0
    6106:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    610a:	786b      	ldrb	r3, [r5, #1]
    610c:	f013 0201 	ands.w	r2, r3, #1
    6110:	d063      	beq.n	61da <bt_le_adv_start_internal+0x196>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    6112:	00fb      	lsls	r3, r7, #3
    6114:	1bd9      	subs	r1, r3, r7
    6116:	5c71      	ldrb	r1, [r6, r1]
    6118:	2901      	cmp	r1, #1
    611a:	d009      	beq.n	6130 <bt_le_adv_start_internal+0xec>
			set_param.own_addr_type = id_addr->type;
    611c:	1bdf      	subs	r7, r3, r7
    611e:	5df3      	ldrb	r3, [r6, r7]
    6120:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		if (dir_adv) {
    6124:	f1b8 0f00 	cmp.w	r8, #0
    6128:	d110      	bne.n	614c <bt_le_adv_start_internal+0x108>
			set_param.type = BT_LE_ADV_IND;
    612a:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
    612e:	e019      	b.n	6164 <bt_le_adv_start_internal+0x120>
				err = set_random_address(&id_addr->a);
    6130:	2007      	movs	r0, #7
    6132:	fb10 1007 	smlabb	r0, r0, r7, r1
    6136:	4430      	add	r0, r6
    6138:	e9cd 2302 	strd	r2, r3, [sp, #8]
    613c:	f7fe febc 	bl	4eb8 <set_random_address>
				if (err) {
    6140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6144:	4604      	mov	r4, r0
    6146:	2800      	cmp	r0, #0
    6148:	d0e8      	beq.n	611c <bt_le_adv_start_internal+0xd8>
    614a:	e793      	b.n	6074 <bt_le_adv_start_internal+0x30>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    614c:	786b      	ldrb	r3, [r5, #1]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    614e:	f013 0f10 	tst.w	r3, #16
    6152:	bf18      	it	ne
    6154:	2204      	movne	r2, #4
			bt_addr_le_copy(&set_param.direct_addr, peer);
    6156:	4641      	mov	r1, r8
    6158:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    615c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    6160:	f013 f834 	bl	191cc <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    6164:	210f      	movs	r1, #15
    6166:	f242 0006 	movw	r0, #8198	; 0x2006
    616a:	f7fe fd6f 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
    616e:	4604      	mov	r4, r0
    6170:	2800      	cmp	r0, #0
    6172:	f000 80a2 	beq.w	62ba <bt_le_adv_start_internal+0x276>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    6176:	220f      	movs	r2, #15
    6178:	a908      	add	r1, sp, #32
    617a:	3008      	adds	r0, #8
    617c:	f015 f85d 	bl	1b23a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    6180:	4621      	mov	r1, r4
    6182:	2200      	movs	r2, #0
    6184:	f242 0006 	movw	r0, #8198	; 0x2006
    6188:	f7fe fd96 	bl	4cb8 <bt_hci_cmd_send_sync>
	if (err) {
    618c:	4604      	mov	r4, r0
    618e:	2800      	cmp	r0, #0
    6190:	f47f af70 	bne.w	6074 <bt_le_adv_start_internal+0x30>
	if (!dir_adv) {
    6194:	f1b8 0f00 	cmp.w	r8, #0
    6198:	d046      	beq.n	6228 <bt_le_adv_start_internal+0x1e4>
	struct bt_conn *conn = NULL;
    619a:	2600      	movs	r6, #0
	err = set_advertise_enable(true);
    619c:	2001      	movs	r0, #1
    619e:	f7fe feb9 	bl	4f14 <set_advertise_enable>
	if (err) {
    61a2:	4604      	mov	r4, r0
    61a4:	2800      	cmp	r0, #0
    61a6:	d066      	beq.n	6276 <bt_le_adv_start_internal+0x232>
		BT_ERR("Failed to start advertiser");
    61a8:	2301      	movs	r3, #1
    61aa:	f04f 0100 	mov.w	r1, #0
    61ae:	f363 0107 	bfi	r1, r3, #0, #8
    61b2:	4a47      	ldr	r2, [pc, #284]	; (62d0 <bt_le_adv_start_internal+0x28c>)
    61b4:	4b47      	ldr	r3, [pc, #284]	; (62d4 <bt_le_adv_start_internal+0x290>)
    61b6:	4848      	ldr	r0, [pc, #288]	; (62d8 <bt_le_adv_start_internal+0x294>)
    61b8:	1a9b      	subs	r3, r3, r2
    61ba:	08db      	lsrs	r3, r3, #3
    61bc:	f363 118f 	bfi	r1, r3, #6, #10
    61c0:	f012 fa06 	bl	185d0 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    61c4:	2e00      	cmp	r6, #0
    61c6:	f43f af55 	beq.w	6074 <bt_le_adv_start_internal+0x30>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    61ca:	4630      	mov	r0, r6
    61cc:	2100      	movs	r1, #0
    61ce:	f000 fcff 	bl	6bd0 <bt_conn_set_state>
			bt_conn_unref(conn);
    61d2:	4630      	mov	r0, r6
    61d4:	f013 f92d 	bl	19432 <bt_conn_unref>
    61d8:	e74c      	b.n	6074 <bt_le_adv_start_internal+0x30>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    61da:	0759      	lsls	r1, r3, #29
    61dc:	d51d      	bpl.n	621a <bt_le_adv_start_internal+0x1d6>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    61de:	00fb      	lsls	r3, r7, #3
    61e0:	1bd9      	subs	r1, r3, r7
    61e2:	5c71      	ldrb	r1, [r6, r1]
    61e4:	2901      	cmp	r1, #1
    61e6:	d116      	bne.n	6216 <bt_le_adv_start_internal+0x1d2>
				err = set_random_address(&id_addr->a);
    61e8:	2007      	movs	r0, #7
    61ea:	fb10 1007 	smlabb	r0, r0, r7, r1
    61ee:	4430      	add	r0, r6
    61f0:	9302      	str	r3, [sp, #8]
    61f2:	f7fe fe61 	bl	4eb8 <set_random_address>
    61f6:	9b02      	ldr	r3, [sp, #8]
    61f8:	4604      	mov	r4, r0
			set_param.own_addr_type = id_addr->type;
    61fa:	1bdf      	subs	r7, r3, r7
    61fc:	5df3      	ldrb	r3, [r6, r7]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    61fe:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		if (err) {
    6202:	2c00      	cmp	r4, #0
    6204:	f47f af36 	bne.w	6074 <bt_le_adv_start_internal+0x30>
		if (sd) {
    6208:	f1b9 0f00 	cmp.w	r9, #0
    620c:	d00a      	beq.n	6224 <bt_le_adv_start_internal+0x1e0>
			set_param.type = BT_LE_ADV_SCAN_IND;
    620e:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    6210:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    6214:	e7a6      	b.n	6164 <bt_le_adv_start_internal+0x120>
	int err = 0;
    6216:	4614      	mov	r4, r2
    6218:	e7ef      	b.n	61fa <bt_le_adv_start_internal+0x1b6>
			err = le_set_private_addr(param->id);
    621a:	f013 f80c 	bl	19236 <le_set_private_addr.isra.20>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    621e:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    6220:	4604      	mov	r4, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    6222:	e7ec      	b.n	61fe <bt_le_adv_start_internal+0x1ba>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    6224:	2303      	movs	r3, #3
    6226:	e7f3      	b.n	6210 <bt_le_adv_start_internal+0x1cc>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    6228:	786b      	ldrb	r3, [r5, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    622a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    622e:	f003 0301 	and.w	r3, r3, #1
    6232:	9201      	str	r2, [sp, #4]
    6234:	9300      	str	r3, [sp, #0]
    6236:	464a      	mov	r2, r9
    6238:	9b16      	ldr	r3, [sp, #88]	; 0x58
    623a:	4659      	mov	r1, fp
    623c:	4650      	mov	r0, sl
    623e:	f7fe fdf1 	bl	4e24 <le_adv_update>
		if (err) {
    6242:	4604      	mov	r4, r0
    6244:	2800      	cmp	r0, #0
    6246:	f47f af15 	bne.w	6074 <bt_le_adv_start_internal+0x30>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    624a:	786b      	ldrb	r3, [r5, #1]
    624c:	07db      	lsls	r3, r3, #31
    624e:	d5a4      	bpl.n	619a <bt_le_adv_start_internal+0x156>
			conn = bt_conn_add_le(param->id, BT_ADDR_LE_NONE);
    6250:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    6254:	9304      	str	r3, [sp, #16]
    6256:	a904      	add	r1, sp, #16
    6258:	f64f 73ff 	movw	r3, #65535	; 0xffff
    625c:	7828      	ldrb	r0, [r5, #0]
    625e:	f8ad 3014 	strh.w	r3, [sp, #20]
    6262:	f88d 3016 	strb.w	r3, [sp, #22]
    6266:	f000 fc75 	bl	6b54 <bt_conn_add_le>
			if (!conn) {
    626a:	4606      	mov	r6, r0
    626c:	b340      	cbz	r0, 62c0 <bt_le_adv_start_internal+0x27c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    626e:	2103      	movs	r1, #3
    6270:	f000 fcae 	bl	6bd0 <bt_conn_set_state>
    6274:	e792      	b.n	619c <bt_le_adv_start_internal+0x158>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    6276:	b116      	cbz	r6, 627e <bt_le_adv_start_internal+0x23a>
		bt_conn_unref(conn);
    6278:	4630      	mov	r0, r6
    627a:	f013 f8da 	bl	19432 <bt_conn_unref>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_KEEP_ADVERTISING,
    627e:	786a      	ldrb	r2, [r5, #1]
    6280:	4812      	ldr	r0, [pc, #72]	; (62cc <bt_le_adv_start_internal+0x288>)
    6282:	f082 0202 	eor.w	r2, r2, #2
    6286:	f3c2 0240 	ubfx	r2, r2, #1, #1
    628a:	2108      	movs	r1, #8
    628c:	f012 ffb0 	bl	191f0 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_NAME,
    6290:	786a      	ldrb	r2, [r5, #1]
    6292:	480e      	ldr	r0, [pc, #56]	; (62cc <bt_le_adv_start_internal+0x288>)
    6294:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    6298:	2106      	movs	r1, #6
    629a:	f012 ffa9 	bl	191f0 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
    629e:	786a      	ldrb	r2, [r5, #1]
    62a0:	480a      	ldr	r0, [pc, #40]	; (62cc <bt_le_adv_start_internal+0x288>)
    62a2:	f002 0201 	and.w	r2, r2, #1
    62a6:	2107      	movs	r1, #7
    62a8:	f012 ffa2 	bl	191f0 <atomic_set_bit_to>
	return 0;
    62ac:	e6e2      	b.n	6074 <bt_le_adv_start_internal+0x30>
		return -EAGAIN;
    62ae:	f06f 040a 	mvn.w	r4, #10
    62b2:	e6df      	b.n	6074 <bt_le_adv_start_internal+0x30>
		return -EALREADY;
    62b4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    62b8:	e6dc      	b.n	6074 <bt_le_adv_start_internal+0x30>
		return -ENOBUFS;
    62ba:	f06f 0436 	mvn.w	r4, #54	; 0x36
    62be:	e6d9      	b.n	6074 <bt_le_adv_start_internal+0x30>
				return -ENOMEM;
    62c0:	f06f 040b 	mvn.w	r4, #11
    62c4:	e6d6      	b.n	6074 <bt_le_adv_start_internal+0x30>
    62c6:	bf00      	nop
    62c8:	2000ca40 	.word	0x2000ca40
    62cc:	2000cab0 	.word	0x2000cab0
    62d0:	0001e448 	.word	0x0001e448
    62d4:	0001e508 	.word	0x0001e508
    62d8:	0001fb14 	.word	0x0001fb14

000062dc <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    62dc:	b513      	push	{r0, r1, r4, lr}
	struct bt_conn *adv_conn;
	int err;

	BT_ASSERT(atomic_test_bit(bt_dev.flags,
    62de:	2107      	movs	r1, #7
    62e0:	4818      	ldr	r0, [pc, #96]	; (6344 <bt_le_adv_resume+0x68>)
    62e2:	f012 ff9f 	bl	19224 <atomic_test_bit>
    62e6:	b960      	cbnz	r0, 6302 <bt_le_adv_resume+0x26>
    62e8:	f241 73a4 	movw	r3, #6052	; 0x17a4
    62ec:	4a16      	ldr	r2, [pc, #88]	; (6348 <bt_le_adv_resume+0x6c>)
    62ee:	4917      	ldr	r1, [pc, #92]	; (634c <bt_le_adv_resume+0x70>)
    62f0:	4817      	ldr	r0, [pc, #92]	; (6350 <bt_le_adv_resume+0x74>)
    62f2:	f011 ff1f 	bl	18134 <printk>
    62f6:	4040      	eors	r0, r0
    62f8:	f380 8811 	msr	BASEPRI, r0
    62fc:	f04f 0003 	mov.w	r0, #3
    6300:	df02      	svc	2
				  BT_DEV_ADVERTISING_CONNECTABLE));

	adv_conn = bt_conn_add_le(bt_dev.adv_id, BT_ADDR_LE_NONE);
    6302:	4b14      	ldr	r3, [pc, #80]	; (6354 <bt_le_adv_resume+0x78>)
    6304:	6818      	ldr	r0, [r3, #0]
    6306:	889a      	ldrh	r2, [r3, #4]
    6308:	799b      	ldrb	r3, [r3, #6]
    630a:	f88d 3006 	strb.w	r3, [sp, #6]
    630e:	4b12      	ldr	r3, [pc, #72]	; (6358 <bt_le_adv_resume+0x7c>)
    6310:	9000      	str	r0, [sp, #0]
    6312:	4669      	mov	r1, sp
    6314:	7a18      	ldrb	r0, [r3, #8]
    6316:	f8ad 2004 	strh.w	r2, [sp, #4]
    631a:	f000 fc1b 	bl	6b54 <bt_conn_add_le>
	if (!adv_conn) {
    631e:	4604      	mov	r4, r0
    6320:	b168      	cbz	r0, 633e <bt_le_adv_resume+0x62>
		return;
	}

	bt_conn_set_state(adv_conn, BT_CONN_CONNECT_ADV);
    6322:	2103      	movs	r1, #3
    6324:	f000 fc54 	bl	6bd0 <bt_conn_set_state>

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		le_set_private_addr(bt_dev.adv_id);
	}

	err = set_advertise_enable(true);
    6328:	2001      	movs	r0, #1
    632a:	f7fe fdf3 	bl	4f14 <set_advertise_enable>
	if (err) {
    632e:	b118      	cbz	r0, 6338 <bt_le_adv_resume+0x5c>
		bt_conn_set_state(adv_conn, BT_CONN_DISCONNECTED);
    6330:	2100      	movs	r1, #0
    6332:	4620      	mov	r0, r4
    6334:	f000 fc4c 	bl	6bd0 <bt_conn_set_state>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(adv_conn);
    6338:	4620      	mov	r0, r4
    633a:	f013 f87a 	bl	19432 <bt_conn_unref>
}
    633e:	b002      	add	sp, #8
    6340:	bd10      	pop	{r4, pc}
    6342:	bf00      	nop
    6344:	2000cab0 	.word	0x2000cab0
    6348:	0001ff10 	.word	0x0001ff10
    634c:	0001fad6 	.word	0x0001fad6
    6350:	0001ff46 	.word	0x0001ff46
    6354:	0001e5b4 	.word	0x0001e5b4
    6358:	2000ca40 	.word	0x2000ca40

0000635c <hci_disconn_complete>:
{
    635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    635e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    6360:	7835      	ldrb	r5, [r6, #0]
    6362:	bba5      	cbnz	r5, 63ce <hci_disconn_complete+0x72>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6364:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    6368:	4638      	mov	r0, r7
    636a:	f000 fcfb 	bl	6d64 <bt_conn_lookup_handle>
	if (!conn) {
    636e:	4604      	mov	r4, r0
    6370:	b9e0      	cbnz	r0, 63ac <hci_disconn_complete+0x50>
		BT_ERR("Unable to look up conn with handle %u", handle);
    6372:	2301      	movs	r3, #1
    6374:	f04f 0200 	mov.w	r2, #0
    6378:	f363 0207 	bfi	r2, r3, #0, #8
    637c:	4914      	ldr	r1, [pc, #80]	; (63d0 <hci_disconn_complete+0x74>)
    637e:	4b15      	ldr	r3, [pc, #84]	; (63d4 <hci_disconn_complete+0x78>)
    6380:	4815      	ldr	r0, [pc, #84]	; (63d8 <hci_disconn_complete+0x7c>)
    6382:	1a5b      	subs	r3, r3, r1
    6384:	08db      	lsrs	r3, r3, #3
    6386:	f363 128f 	bfi	r2, r3, #6, #10
    638a:	4639      	mov	r1, r7
    638c:	f012 f92d 	bl	185ea <log_1>
	    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6390:	2108      	movs	r1, #8
    6392:	4812      	ldr	r0, [pc, #72]	; (63dc <hci_disconn_complete+0x80>)
    6394:	f012 ff46 	bl	19224 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6398:	b1c8      	cbz	r0, 63ce <hci_disconn_complete+0x72>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    639a:	2105      	movs	r1, #5
    639c:	480f      	ldr	r0, [pc, #60]	; (63dc <hci_disconn_complete+0x80>)
    639e:	f012 ff41 	bl	19224 <atomic_test_bit>
	    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    63a2:	b9a0      	cbnz	r0, 63ce <hci_disconn_complete+0x72>
}
    63a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_le_adv_resume();
    63a8:	f7ff bf98 	b.w	62dc <bt_le_adv_resume>
	conn->err = evt->reason;
    63ac:	78f3      	ldrb	r3, [r6, #3]
    63ae:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    63b0:	4629      	mov	r1, r5
    63b2:	f000 fc0d 	bl	6bd0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    63b6:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    63b8:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    63ba:	2b01      	cmp	r3, #1
		bt_conn_unref(conn);
    63bc:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    63be:	d003      	beq.n	63c8 <hci_disconn_complete+0x6c>
}
    63c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    63c4:	f013 b835 	b.w	19432 <bt_conn_unref>
	bt_conn_unref(conn);
    63c8:	f013 f833 	bl	19432 <bt_conn_unref>
    63cc:	e7e0      	b.n	6390 <hci_disconn_complete+0x34>
}
    63ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63d0:	0001e448 	.word	0x0001e448
    63d4:	0001e508 	.word	0x0001e508
    63d8:	0001fdfe 	.word	0x0001fdfe
    63dc:	2000cab0 	.word	0x2000cab0

000063e0 <enh_conn_complete>:
{
    63e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    63e2:	7803      	ldrb	r3, [r0, #0]
{
    63e4:	b085      	sub	sp, #20
    63e6:	4605      	mov	r5, r0
	if (evt->status) {
    63e8:	b343      	cbz	r3, 643c <enh_conn_complete+0x5c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    63ea:	78c3      	ldrb	r3, [r0, #3]
    63ec:	2b01      	cmp	r3, #1
    63ee:	d15e      	bne.n	64ae <enh_conn_complete+0xce>
    63f0:	2000      	movs	r0, #0
    63f2:	f7fe f9e5 	bl	47c0 <find_pending_connect.part.16>
		if (!conn) {
    63f6:	4604      	mov	r4, r0
    63f8:	2800      	cmp	r0, #0
    63fa:	d058      	beq.n	64ae <enh_conn_complete+0xce>
		conn->err = evt->status;
    63fc:	7829      	ldrb	r1, [r5, #0]
    63fe:	7241      	strb	r1, [r0, #9]
			if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    6400:	293c      	cmp	r1, #60	; 0x3c
    6402:	d10c      	bne.n	641e <enh_conn_complete+0x3e>
    6404:	f06f 0120 	mvn.w	r1, #32
    6408:	484e      	ldr	r0, [pc, #312]	; (6544 <enh_conn_complete+0x164>)
    640a:	f012 fee2 	bl	191d2 <atomic_and>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    640e:	2100      	movs	r1, #0
    6410:	4620      	mov	r0, r4
    6412:	f000 fbdd 	bl	6bd0 <bt_conn_set_state>
	bt_conn_unref(conn);
    6416:	4620      	mov	r0, r4
    6418:	f013 f80b 	bl	19432 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
    641c:	e047      	b.n	64ae <enh_conn_complete+0xce>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    641e:	2302      	movs	r3, #2
    6420:	f04f 0200 	mov.w	r2, #0
    6424:	f363 0207 	bfi	r2, r3, #0, #8
    6428:	4847      	ldr	r0, [pc, #284]	; (6548 <enh_conn_complete+0x168>)
    642a:	4b48      	ldr	r3, [pc, #288]	; (654c <enh_conn_complete+0x16c>)
    642c:	1a1b      	subs	r3, r3, r0
    642e:	08db      	lsrs	r3, r3, #3
    6430:	f363 128f 	bfi	r2, r3, #6, #10
    6434:	4846      	ldr	r0, [pc, #280]	; (6550 <enh_conn_complete+0x170>)
    6436:	f012 f8d8 	bl	185ea <log_1>
		bt_conn_unref(conn);
    643a:	e7ec      	b.n	6416 <enh_conn_complete+0x36>
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    643c:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    643e:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    6442:	4621      	mov	r1, r4
    6444:	a802      	add	r0, sp, #8
    6446:	f012 fec1 	bl	191cc <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    644a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    644e:	3b02      	subs	r3, #2
    6450:	b2db      	uxtb	r3, r3
    6452:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6454:	b2be      	uxth	r6, r7
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6456:	d82c      	bhi.n	64b2 <enh_conn_complete+0xd2>
	memcpy(dst, src, sizeof(*dst));
    6458:	2206      	movs	r2, #6
    645a:	f105 0111 	add.w	r1, r5, #17
    645e:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6462:	f88d 3008 	strb.w	r3, [sp, #8]
    6466:	f012 fbe8 	bl	18c3a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    646a:	2301      	movs	r3, #1
    646c:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    6470:	78eb      	ldrb	r3, [r5, #3]
    6472:	2b01      	cmp	r3, #1
    6474:	d10c      	bne.n	6490 <enh_conn_complete+0xb0>
    6476:	a802      	add	r0, sp, #8
    6478:	f7fe f9a2 	bl	47c0 <find_pending_connect.part.16>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    647c:	78eb      	ldrb	r3, [r5, #3]
    647e:	2b01      	cmp	r3, #1
    6480:	4604      	mov	r4, r0
    6482:	d104      	bne.n	648e <enh_conn_complete+0xae>
    6484:	f06f 0120 	mvn.w	r1, #32
    6488:	482e      	ldr	r0, [pc, #184]	; (6544 <enh_conn_complete+0x164>)
    648a:	f012 fea2 	bl	191d2 <atomic_and>
	if (!conn) {
    648e:	b9ac      	cbnz	r4, 64bc <enh_conn_complete+0xdc>
		BT_ERR("Unable to add new conn for handle %u", handle);
    6490:	2301      	movs	r3, #1
    6492:	f04f 0200 	mov.w	r2, #0
    6496:	f363 0207 	bfi	r2, r3, #0, #8
    649a:	492b      	ldr	r1, [pc, #172]	; (6548 <enh_conn_complete+0x168>)
    649c:	4b2b      	ldr	r3, [pc, #172]	; (654c <enh_conn_complete+0x16c>)
    649e:	482d      	ldr	r0, [pc, #180]	; (6554 <enh_conn_complete+0x174>)
    64a0:	1a5b      	subs	r3, r3, r1
    64a2:	08db      	lsrs	r3, r3, #3
    64a4:	f363 128f 	bfi	r2, r3, #6, #10
    64a8:	4631      	mov	r1, r6
    64aa:	f012 f89e 	bl	185ea <log_1>
}
    64ae:	b005      	add	sp, #20
    64b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    64b2:	4621      	mov	r1, r4
    64b4:	4668      	mov	r0, sp
    64b6:	f012 fe89 	bl	191cc <bt_addr_le_copy>
    64ba:	e7d9      	b.n	6470 <enh_conn_complete+0x90>
	conn->handle = handle;
    64bc:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    64be:	a902      	add	r1, sp, #8
	conn->handle = handle;
    64c0:	f820 7b70 	strh.w	r7, [r0], #112
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    64c4:	f012 fe82 	bl	191cc <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    64c8:	7e2a      	ldrb	r2, [r5, #24]
    64ca:	7deb      	ldrb	r3, [r5, #23]
    64cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    64d0:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    64d4:	7eaa      	ldrb	r2, [r5, #26]
    64d6:	7e6b      	ldrb	r3, [r5, #25]
    64d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    64dc:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    64e0:	7eeb      	ldrb	r3, [r5, #27]
    64e2:	7f2a      	ldrb	r2, [r5, #28]
    64e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    64e8:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
	conn->role = evt->role;
    64ec:	78eb      	ldrb	r3, [r5, #3]
    64ee:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    64f0:	2600      	movs	r6, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    64f2:	2b01      	cmp	r3, #1
	conn->err = 0U;
    64f4:	7266      	strb	r6, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    64f6:	d11c      	bne.n	6532 <enh_conn_complete+0x152>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    64f8:	4669      	mov	r1, sp
    64fa:	f104 0077 	add.w	r0, r4, #119	; 0x77
    64fe:	f012 fe65 	bl	191cc <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    6502:	7a21      	ldrb	r1, [r4, #8]
    6504:	4d14      	ldr	r5, [pc, #80]	; (6558 <enh_conn_complete+0x178>)
    6506:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    650a:	4429      	add	r1, r5
    650c:	f104 007e 	add.w	r0, r4, #126	; 0x7e
    6510:	f012 fe5c 	bl	191cc <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6514:	2108      	movs	r1, #8
    6516:	f105 0070 	add.w	r0, r5, #112	; 0x70
    651a:	f012 fe83 	bl	19224 <atomic_test_bit>
    651e:	b140      	cbz	r0, 6532 <enh_conn_complete+0x152>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    6520:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
    6524:	4632      	mov	r2, r6
    6526:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    652a:	4313      	orrs	r3, r2
    652c:	d001      	beq.n	6532 <enh_conn_complete+0x152>
			bt_le_adv_resume();
    652e:	f7ff fed5 	bl	62dc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    6532:	4620      	mov	r0, r4
    6534:	2106      	movs	r1, #6
    6536:	f000 fb4b 	bl	6bd0 <bt_conn_set_state>
	conn_auto_initiate(conn);
    653a:	4620      	mov	r0, r4
    653c:	f7fe fd84 	bl	5048 <conn_auto_initiate>
    6540:	e769      	b.n	6416 <enh_conn_complete+0x36>
    6542:	bf00      	nop
    6544:	2000cab0 	.word	0x2000cab0
    6548:	0001e448 	.word	0x0001e448
    654c:	0001e508 	.word	0x0001e508
    6550:	0001fcec 	.word	0x0001fcec
    6554:	0001fd05 	.word	0x0001fd05
    6558:	2000ca40 	.word	0x2000ca40

0000655c <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    655c:	b538      	push	{r3, r4, r5, lr}
    655e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    6560:	4805      	ldr	r0, [pc, #20]	; (6578 <bt_buf_get_rx+0x1c>)
    6562:	f014 fe30 	bl	1b1c6 <net_buf_alloc_fixed>
#endif

	if (buf) {
    6566:	4604      	mov	r4, r0
    6568:	b120      	cbz	r0, 6574 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    656a:	2100      	movs	r1, #0
    656c:	3008      	adds	r0, #8
    656e:	f014 fe49 	bl	1b204 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    6572:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6574:	4620      	mov	r0, r4
    6576:	bd38      	pop	{r3, r4, r5, pc}
    6578:	2000d318 	.word	0x2000d318

0000657c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    657c:	b510      	push	{r4, lr}
    657e:	4601      	mov	r1, r0
	__asm__ volatile(
    6580:	f04f 0320 	mov.w	r3, #32
    6584:	f3ef 8011 	mrs	r0, BASEPRI
    6588:	f383 8811 	msr	BASEPRI, r3
    658c:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    6590:	4a0c      	ldr	r2, [pc, #48]	; (65c4 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    6592:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    6594:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    6598:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile(
    659c:	f380 8811 	msr	BASEPRI, r0
    65a0:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    65a4:	b924      	cbnz	r4, 65b0 <bt_buf_get_cmd_complete+0x34>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    65a6:	2001      	movs	r0, #1
}
    65a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    65ac:	f7ff bfd6 	b.w	655c <bt_buf_get_rx>
    65b0:	2201      	movs	r2, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    65b2:	f104 0008 	add.w	r0, r4, #8
    65b6:	7522      	strb	r2, [r4, #20]
		buf->len = 0U;
    65b8:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    65ba:	4619      	mov	r1, r3
    65bc:	f014 fe22 	bl	1b204 <net_buf_simple_reserve>
}
    65c0:	4620      	mov	r0, r4
    65c2:	bd10      	pop	{r4, pc}
    65c4:	2000ca40 	.word	0x2000ca40

000065c8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, s32_t timeout)
{
	switch (evt) {
    65c8:	280e      	cmp	r0, #14
{
    65ca:	460b      	mov	r3, r1
    65cc:	b510      	push	{r4, lr}
    65ce:	4611      	mov	r1, r2
	switch (evt) {
    65d0:	d315      	bcc.n	65fe <bt_buf_get_evt+0x36>
    65d2:	280f      	cmp	r0, #15
    65d4:	d90e      	bls.n	65f4 <bt_buf_get_evt+0x2c>
    65d6:	2813      	cmp	r0, #19
    65d8:	d111      	bne.n	65fe <bt_buf_get_evt+0x36>
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
    65da:	480d      	ldr	r0, [pc, #52]	; (6610 <bt_buf_get_evt+0x48>)
	default:
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
    65dc:	f014 fdf3 	bl	1b1c6 <net_buf_alloc_fixed>
			if (buf) {
    65e0:	4604      	mov	r4, r0
    65e2:	b128      	cbz	r0, 65f0 <bt_buf_get_evt+0x28>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    65e4:	2100      	movs	r1, #0
    65e6:	3008      	adds	r0, #8
    65e8:	f014 fe0c 	bl	1b204 <net_buf_simple_reserve>
    65ec:	2301      	movs	r3, #1
    65ee:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    65f0:	4620      	mov	r0, r4
    65f2:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    65f4:	4610      	mov	r0, r2
}
    65f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_cmd_complete(timeout);
    65fa:	f7ff bfbf 	b.w	657c <bt_buf_get_cmd_complete>
		if (discardable) {
    65fe:	b10b      	cbz	r3, 6604 <bt_buf_get_evt+0x3c>
			buf = net_buf_alloc(&discardable_pool, timeout);
    6600:	4804      	ldr	r0, [pc, #16]	; (6614 <bt_buf_get_evt+0x4c>)
    6602:	e7eb      	b.n	65dc <bt_buf_get_evt+0x14>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6604:	2001      	movs	r0, #1
}
    6606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    660a:	f7ff bfa7 	b.w	655c <bt_buf_get_rx>
    660e:	bf00      	nop
    6610:	2000d338 	.word	0x2000d338
    6614:	2000d2b8 	.word	0x2000d2b8

00006618 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6618:	2300      	movs	r3, #0
{
    661a:	4601      	mov	r1, r0
	tx->user_data = NULL;
    661c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    6620:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    6622:	4801      	ldr	r0, [pc, #4]	; (6628 <tx_free+0x10>)
    6624:	f017 ba5b 	b.w	1dade <k_queue_append>
    6628:	2000d258 	.word	0x2000d258

0000662c <notify_connected>:
{
    662c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    662e:	4b09      	ldr	r3, [pc, #36]	; (6654 <notify_connected+0x28>)
    6630:	681c      	ldr	r4, [r3, #0]
{
    6632:	4605      	mov	r5, r0
    6634:	7a69      	ldrb	r1, [r5, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
    6636:	b92c      	cbnz	r4, 6644 <notify_connected+0x18>
	if (!conn->err) {
    6638:	b951      	cbnz	r1, 6650 <notify_connected+0x24>
		bt_gatt_connected(conn);
    663a:	4628      	mov	r0, r5
}
    663c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    6640:	f003 b94c 	b.w	98dc <bt_gatt_connected>
		if (cb->connected) {
    6644:	6823      	ldr	r3, [r4, #0]
    6646:	b10b      	cbz	r3, 664c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    6648:	4628      	mov	r0, r5
    664a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    664c:	6924      	ldr	r4, [r4, #16]
    664e:	e7f1      	b.n	6634 <notify_connected+0x8>
}
    6650:	bd38      	pop	{r3, r4, r5, pc}
    6652:	bf00      	nop
    6654:	200001f0 	.word	0x200001f0

00006658 <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    6658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    665c:	4604      	mov	r4, r0
    665e:	460e      	mov	r6, r1
    6660:	4691      	mov	r9, r2
    6662:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    6664:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    6666:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    666a:	4844      	ldr	r0, [pc, #272]	; (677c <send_frag+0x124>)
    666c:	f010 fe94 	bl	17398 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    6670:	7aa3      	ldrb	r3, [r4, #10]
    6672:	2b06      	cmp	r3, #6
    6674:	d152      	bne.n	671c <send_frag+0xc4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    6676:	2104      	movs	r1, #4
    6678:	f106 0008 	add.w	r0, r6, #8
    667c:	f014 fdf8 	bl	1b270 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6680:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6682:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6684:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6688:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    668a:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    668c:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    668e:	f04f 0320 	mov.w	r3, #32
    6692:	f3ef 8211 	mrs	r2, BASEPRI
    6696:	f383 8811 	msr	BASEPRI, r3
    669a:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    669e:	2d00      	cmp	r5, #0
    66a0:	d04e      	beq.n	6740 <send_frag+0xe8>
	parent->next = child;
    66a2:	2300      	movs	r3, #0
    66a4:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    66a6:	69a3      	ldr	r3, [r4, #24]
    66a8:	2b00      	cmp	r3, #0
    66aa:	d146      	bne.n	673a <send_frag+0xe2>
	list->head = node;
    66ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    66b0:	f382 8811 	msr	BASEPRI, r2
    66b4:	f3bf 8f6f 	isb	sy
    66b8:	2302      	movs	r3, #2
    66ba:	7533      	strb	r3, [r6, #20]
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    66bc:	4630      	mov	r0, r6
    66be:	f7fe fc85 	bl	4fcc <bt_send>
	if (err) {
    66c2:	4601      	mov	r1, r0
    66c4:	2800      	cmp	r0, #0
    66c6:	d057      	beq.n	6778 <send_frag+0x120>
		BT_ERR("Unable to send to driver (err %d)", err);
    66c8:	2301      	movs	r3, #1
    66ca:	f04f 0200 	mov.w	r2, #0
    66ce:	f363 0207 	bfi	r2, r3, #0, #8
    66d2:	482b      	ldr	r0, [pc, #172]	; (6780 <send_frag+0x128>)
    66d4:	4b2b      	ldr	r3, [pc, #172]	; (6784 <send_frag+0x12c>)
    66d6:	1a1b      	subs	r3, r3, r0
    66d8:	08db      	lsrs	r3, r3, #3
    66da:	f363 128f 	bfi	r2, r3, #6, #10
    66de:	482a      	ldr	r0, [pc, #168]	; (6788 <send_frag+0x130>)
    66e0:	f011 ff83 	bl	185ea <log_1>
	__asm__ volatile(
    66e4:	f04f 0320 	mov.w	r3, #32
    66e8:	f3ef 8111 	mrs	r1, BASEPRI
    66ec:	f383 8811 	msr	BASEPRI, r3
    66f0:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    66f4:	2d00      	cmp	r5, #0
    66f6:	d039      	beq.n	676c <send_frag+0x114>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    66f8:	6963      	ldr	r3, [r4, #20]
    66fa:	2200      	movs	r2, #0
    66fc:	b153      	cbz	r3, 6714 <send_frag+0xbc>
    66fe:	429d      	cmp	r5, r3
    6700:	d131      	bne.n	6766 <send_frag+0x10e>
Z_GENLIST_REMOVE(slist, snode)
    6702:	682b      	ldr	r3, [r5, #0]
    6704:	bb4a      	cbnz	r2, 675a <send_frag+0x102>
    6706:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    6708:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    670a:	4295      	cmp	r5, r2
    670c:	d100      	bne.n	6710 <send_frag+0xb8>
	list->tail = node;
    670e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    6710:	2300      	movs	r3, #0
    6712:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    6714:	f381 8811 	msr	BASEPRI, r1
    6718:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    671c:	4817      	ldr	r0, [pc, #92]	; (677c <send_frag+0x124>)
    671e:	f010 fe0f 	bl	17340 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    6722:	b115      	cbz	r5, 672a <send_frag+0xd2>
		tx_free(tx);
    6724:	4628      	mov	r0, r5
    6726:	f7ff ff77 	bl	6618 <tx_free>
	}

	if (always_consume) {
    672a:	b11f      	cbz	r7, 6734 <send_frag+0xdc>
		net_buf_unref(buf);
    672c:	4630      	mov	r0, r6
    672e:	f00b ff1f 	bl	12570 <net_buf_unref>
	}
	return false;
    6732:	2700      	movs	r7, #0
}
    6734:	4638      	mov	r0, r7
    6736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    673a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    673c:	61a5      	str	r5, [r4, #24]
    673e:	e7b7      	b.n	66b0 <send_frag+0x58>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    6740:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    6742:	b133      	cbz	r3, 6752 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    6744:	f103 080c 	add.w	r8, r3, #12
    6748:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    674a:	3301      	adds	r3, #1
    674c:	f8c8 3000 	str.w	r3, [r8]
    6750:	e7ae      	b.n	66b0 <send_frag+0x58>
			pending_no_cb = &conn->pending_no_cb;
    6752:	f104 081c 	add.w	r8, r4, #28
    6756:	69e3      	ldr	r3, [r4, #28]
    6758:	e7f7      	b.n	674a <send_frag+0xf2>
	parent->next = child;
    675a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    675c:	69a3      	ldr	r3, [r4, #24]
    675e:	429d      	cmp	r5, r3
	list->tail = node;
    6760:	bf08      	it	eq
    6762:	61a2      	streq	r2, [r4, #24]
    6764:	e7d4      	b.n	6710 <send_frag+0xb8>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6766:	461a      	mov	r2, r3
    6768:	681b      	ldr	r3, [r3, #0]
    676a:	e7c7      	b.n	66fc <send_frag+0xa4>
			(*pending_no_cb)--;
    676c:	f8d8 3000 	ldr.w	r3, [r8]
    6770:	3b01      	subs	r3, #1
    6772:	f8c8 3000 	str.w	r3, [r8]
    6776:	e7cd      	b.n	6714 <send_frag+0xbc>
	return true;
    6778:	2701      	movs	r7, #1
    677a:	e7db      	b.n	6734 <send_frag+0xdc>
    677c:	2000cacc 	.word	0x2000cacc
    6780:	0001e448 	.word	0x0001e448
    6784:	0001e458 	.word	0x0001e458
    6788:	0001fa86 	.word	0x0001fa86

0000678c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    678c:	b570      	push	{r4, r5, r6, lr}
    678e:	4605      	mov	r5, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    6790:	f100 0634 	add.w	r6, r0, #52	; 0x34
    6794:	2100      	movs	r1, #0
    6796:	4630      	mov	r0, r6
    6798:	f014 fd1b 	bl	1b1d2 <net_buf_get>
    679c:	4604      	mov	r4, r0
    679e:	b950      	cbnz	r0, 67b6 <conn_cleanup+0x2a>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    67a0:	4628      	mov	r0, r5
    67a2:	f012 fde1 	bl	19368 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    67a6:	4622      	mov	r2, r4
    67a8:	f105 0150 	add.w	r1, r5, #80	; 0x50
    67ac:	4806      	ldr	r0, [pc, #24]	; (67c8 <conn_cleanup+0x3c>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    67ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    67b2:	f010 bf37 	b.w	17624 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    67b6:	6960      	ldr	r0, [r4, #20]
    67b8:	b108      	cbz	r0, 67be <conn_cleanup+0x32>
			tx_free(tx_data(buf)->tx);
    67ba:	f7ff ff2d 	bl	6618 <tx_free>
		net_buf_unref(buf);
    67be:	4620      	mov	r0, r4
    67c0:	f00b fed6 	bl	12570 <net_buf_unref>
    67c4:	e7e6      	b.n	6794 <conn_cleanup+0x8>
    67c6:	bf00      	nop
    67c8:	20005c68 	.word	0x20005c68

000067cc <bt_conn_get_pkts>:
}
    67cc:	4800      	ldr	r0, [pc, #0]	; (67d0 <bt_conn_get_pkts+0x4>)
    67ce:	4770      	bx	lr
    67d0:	2000cacc 	.word	0x2000cacc

000067d4 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    67d4:	1d02      	adds	r2, r0, #4
{
    67d6:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    67d8:	2109      	movs	r1, #9
{
    67da:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    67dc:	4610      	mov	r0, r2
    67de:	f012 fdbc 	bl	1935a <atomic_test_bit>
    67e2:	b1c8      	cbz	r0, 6818 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    67e4:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    67e8:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    67ec:	4299      	cmp	r1, r3
    67ee:	d813      	bhi.n	6818 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    67f0:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    67f4:	4299      	cmp	r1, r3
    67f6:	d30f      	bcc.n	6818 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    67f8:	e9d4 1323 	ldrd	r1, r3, [r4, #140]	; 0x8c
    67fc:	4299      	cmp	r1, r3
    67fe:	d10b      	bne.n	6818 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6800:	f3bf 8f5b 	dmb	ish
    6804:	e852 3f00 	ldrex	r3, [r2]
    6808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    680c:	e842 3100 	strex	r1, r3, [r2]
    6810:	2900      	cmp	r1, #0
    6812:	d1f7      	bne.n	6804 <notify_le_param_updated+0x30>
    6814:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    6818:	4b07      	ldr	r3, [pc, #28]	; (6838 <notify_le_param_updated+0x64>)
    681a:	681d      	ldr	r5, [r3, #0]
    681c:	b905      	cbnz	r5, 6820 <notify_le_param_updated+0x4c>
}
    681e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    6820:	68ee      	ldr	r6, [r5, #12]
    6822:	b13e      	cbz	r6, 6834 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    6824:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
    6828:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
    682c:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
    6830:	4620      	mov	r0, r4
    6832:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    6834:	692d      	ldr	r5, [r5, #16]
    6836:	e7f1      	b.n	681c <notify_le_param_updated+0x48>
    6838:	200001f0 	.word	0x200001f0

0000683c <le_param_req>:
{
    683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    683e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    6840:	4608      	mov	r0, r1
{
    6842:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    6844:	f012 fd09 	bl	1925a <bt_le_conn_params_valid>
    6848:	4605      	mov	r5, r0
    684a:	b910      	cbnz	r0, 6852 <le_param_req+0x16>
		return false;
    684c:	2500      	movs	r5, #0
}
    684e:	4628      	mov	r0, r5
    6850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    6852:	4b09      	ldr	r3, [pc, #36]	; (6878 <le_param_req+0x3c>)
    6854:	681c      	ldr	r4, [r3, #0]
    6856:	2c00      	cmp	r4, #0
    6858:	d0f9      	beq.n	684e <le_param_req+0x12>
		if (!cb->le_param_req) {
    685a:	68a3      	ldr	r3, [r4, #8]
    685c:	b90b      	cbnz	r3, 6862 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    685e:	6924      	ldr	r4, [r4, #16]
    6860:	e7f9      	b.n	6856 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    6862:	4631      	mov	r1, r6
    6864:	4638      	mov	r0, r7
    6866:	4798      	blx	r3
    6868:	2800      	cmp	r0, #0
    686a:	d0ef      	beq.n	684c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    686c:	4630      	mov	r0, r6
    686e:	f012 fcf4 	bl	1925a <bt_le_conn_params_valid>
    6872:	2800      	cmp	r0, #0
    6874:	d1f3      	bne.n	685e <le_param_req+0x22>
    6876:	e7e9      	b.n	684c <le_param_req+0x10>
    6878:	200001f0 	.word	0x200001f0

0000687c <bt_conn_cb_register>:
	cb->_next = callback_list;
    687c:	4b02      	ldr	r3, [pc, #8]	; (6888 <bt_conn_cb_register+0xc>)
    687e:	681a      	ldr	r2, [r3, #0]
    6880:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    6882:	6018      	str	r0, [r3, #0]
}
    6884:	4770      	bx	lr
    6886:	bf00      	nop
    6888:	200001f0 	.word	0x200001f0

0000688c <bt_conn_recv>:
{
    688c:	b570      	push	{r4, r5, r6, lr}
    688e:	4616      	mov	r6, r2
    6890:	4604      	mov	r4, r0
    6892:	460d      	mov	r5, r1
	tx_notify(conn);
    6894:	f012 fd8d 	bl	193b2 <tx_notify>
	switch (flags) {
    6898:	2e01      	cmp	r6, #1
    689a:	d020      	beq.n	68de <bt_conn_recv+0x52>
    689c:	2e02      	cmp	r6, #2
    689e:	f040 8081 	bne.w	69a4 <bt_conn_recv+0x118>
		len = sys_le16_to_cpu(hdr->len);
    68a2:	68ab      	ldr	r3, [r5, #8]
    68a4:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    68a6:	89a3      	ldrh	r3, [r4, #12]
    68a8:	b183      	cbz	r3, 68cc <bt_conn_recv+0x40>
			BT_ERR("Unexpected first L2CAP frame");
    68aa:	2301      	movs	r3, #1
    68ac:	f04f 0100 	mov.w	r1, #0
    68b0:	f363 0107 	bfi	r1, r3, #0, #8
    68b4:	4a46      	ldr	r2, [pc, #280]	; (69d0 <bt_conn_recv+0x144>)
    68b6:	4b47      	ldr	r3, [pc, #284]	; (69d4 <bt_conn_recv+0x148>)
    68b8:	4847      	ldr	r0, [pc, #284]	; (69d8 <bt_conn_recv+0x14c>)
    68ba:	1a9b      	subs	r3, r3, r2
    68bc:	08db      	lsrs	r3, r3, #3
    68be:	f363 118f 	bfi	r1, r3, #6, #10
    68c2:	f011 fe85 	bl	185d0 <log_0>
			bt_conn_reset_rx_state(conn);
    68c6:	4620      	mov	r0, r4
    68c8:	f012 fd4e 	bl	19368 <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    68cc:	89ab      	ldrh	r3, [r5, #12]
    68ce:	1af3      	subs	r3, r6, r3
    68d0:	3304      	adds	r3, #4
    68d2:	b29b      	uxth	r3, r3
    68d4:	81a3      	strh	r3, [r4, #12]
		if (conn->rx_len) {
    68d6:	2b00      	cmp	r3, #0
    68d8:	d04f      	beq.n	697a <bt_conn_recv+0xee>
			conn->rx = buf;
    68da:	6125      	str	r5, [r4, #16]
}
    68dc:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    68de:	89a3      	ldrh	r3, [r4, #12]
    68e0:	b9ab      	cbnz	r3, 690e <bt_conn_recv+0x82>
			BT_ERR("Unexpected L2CAP continuation");
    68e2:	2301      	movs	r3, #1
    68e4:	f04f 0100 	mov.w	r1, #0
    68e8:	f363 0107 	bfi	r1, r3, #0, #8
    68ec:	4a38      	ldr	r2, [pc, #224]	; (69d0 <bt_conn_recv+0x144>)
    68ee:	4b39      	ldr	r3, [pc, #228]	; (69d4 <bt_conn_recv+0x148>)
    68f0:	483a      	ldr	r0, [pc, #232]	; (69dc <bt_conn_recv+0x150>)
    68f2:	1a9b      	subs	r3, r3, r2
    68f4:	08db      	lsrs	r3, r3, #3
    68f6:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("L2CAP data overflow");
    68fa:	f011 fe69 	bl	185d0 <log_0>
			bt_conn_reset_rx_state(conn);
    68fe:	4620      	mov	r0, r4
    6900:	f012 fd32 	bl	19368 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6904:	4628      	mov	r0, r5
}
    6906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    690a:	f00b be31 	b.w	12570 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    690e:	89ae      	ldrh	r6, [r5, #12]
    6910:	42b3      	cmp	r3, r6
    6912:	d20c      	bcs.n	692e <bt_conn_recv+0xa2>
			BT_ERR("L2CAP data overflow");
    6914:	2301      	movs	r3, #1
    6916:	f04f 0100 	mov.w	r1, #0
    691a:	f363 0107 	bfi	r1, r3, #0, #8
    691e:	4a2c      	ldr	r2, [pc, #176]	; (69d0 <bt_conn_recv+0x144>)
    6920:	4b2c      	ldr	r3, [pc, #176]	; (69d4 <bt_conn_recv+0x148>)
    6922:	482f      	ldr	r0, [pc, #188]	; (69e0 <bt_conn_recv+0x154>)
    6924:	1a9b      	subs	r3, r3, r2
    6926:	08db      	lsrs	r3, r3, #3
    6928:	f363 118f 	bfi	r1, r3, #6, #10
    692c:	e7e5      	b.n	68fa <bt_conn_recv+0x6e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    692e:	6920      	ldr	r0, [r4, #16]
    6930:	3008      	adds	r0, #8
    6932:	f014 fcc1 	bl	1b2b8 <net_buf_simple_tailroom>
    6936:	4286      	cmp	r6, r0
    6938:	d90c      	bls.n	6954 <bt_conn_recv+0xc8>
			BT_ERR("Not enough buffer space for L2CAP data");
    693a:	2301      	movs	r3, #1
    693c:	f04f 0100 	mov.w	r1, #0
    6940:	f363 0107 	bfi	r1, r3, #0, #8
    6944:	4a22      	ldr	r2, [pc, #136]	; (69d0 <bt_conn_recv+0x144>)
    6946:	4b23      	ldr	r3, [pc, #140]	; (69d4 <bt_conn_recv+0x148>)
    6948:	4826      	ldr	r0, [pc, #152]	; (69e4 <bt_conn_recv+0x158>)
    694a:	1a9b      	subs	r3, r3, r2
    694c:	08db      	lsrs	r3, r3, #3
    694e:	f363 118f 	bfi	r1, r3, #6, #10
    6952:	e7d2      	b.n	68fa <bt_conn_recv+0x6e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    6954:	6920      	ldr	r0, [r4, #16]
    6956:	89aa      	ldrh	r2, [r5, #12]
    6958:	68a9      	ldr	r1, [r5, #8]
    695a:	3008      	adds	r0, #8
    695c:	f014 fc6d 	bl	1b23a <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    6960:	89a3      	ldrh	r3, [r4, #12]
    6962:	89aa      	ldrh	r2, [r5, #12]
    6964:	1a9b      	subs	r3, r3, r2
    6966:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    6968:	4628      	mov	r0, r5
    696a:	f00b fe01 	bl	12570 <net_buf_unref>
		if (conn->rx_len) {
    696e:	89a3      	ldrh	r3, [r4, #12]
    6970:	2b00      	cmp	r3, #0
    6972:	d1b3      	bne.n	68dc <bt_conn_recv+0x50>
		buf = conn->rx;
    6974:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    6976:	81a3      	strh	r3, [r4, #12]
		conn->rx = NULL;
    6978:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    697a:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    697c:	89aa      	ldrh	r2, [r5, #12]
    697e:	8819      	ldrh	r1, [r3, #0]
    6980:	1d0b      	adds	r3, r1, #4
    6982:	4293      	cmp	r3, r2
    6984:	d01e      	beq.n	69c4 <bt_conn_recv+0x138>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    6986:	2001      	movs	r0, #1
    6988:	f04f 0300 	mov.w	r3, #0
    698c:	f360 0307 	bfi	r3, r0, #0, #8
    6990:	4c0f      	ldr	r4, [pc, #60]	; (69d0 <bt_conn_recv+0x144>)
    6992:	4810      	ldr	r0, [pc, #64]	; (69d4 <bt_conn_recv+0x148>)
    6994:	1b00      	subs	r0, r0, r4
    6996:	08c0      	lsrs	r0, r0, #3
    6998:	f360 138f 	bfi	r3, r0, #6, #10
    699c:	4812      	ldr	r0, [pc, #72]	; (69e8 <bt_conn_recv+0x15c>)
    699e:	f011 fe38 	bl	18612 <log_2>
		net_buf_unref(buf);
    69a2:	e7af      	b.n	6904 <bt_conn_recv+0x78>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    69a4:	2301      	movs	r3, #1
    69a6:	f04f 0200 	mov.w	r2, #0
    69aa:	f363 0207 	bfi	r2, r3, #0, #8
    69ae:	4908      	ldr	r1, [pc, #32]	; (69d0 <bt_conn_recv+0x144>)
    69b0:	4b08      	ldr	r3, [pc, #32]	; (69d4 <bt_conn_recv+0x148>)
    69b2:	480e      	ldr	r0, [pc, #56]	; (69ec <bt_conn_recv+0x160>)
    69b4:	1a5b      	subs	r3, r3, r1
    69b6:	08db      	lsrs	r3, r3, #3
    69b8:	f363 128f 	bfi	r2, r3, #6, #10
    69bc:	4631      	mov	r1, r6
    69be:	f011 fe14 	bl	185ea <log_1>
		bt_conn_reset_rx_state(conn);
    69c2:	e79c      	b.n	68fe <bt_conn_recv+0x72>
	bt_l2cap_recv(conn, buf);
    69c4:	4629      	mov	r1, r5
    69c6:	4620      	mov	r0, r4
}
    69c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    69cc:	f000 bd08 	b.w	73e0 <bt_l2cap_recv>
    69d0:	0001e448 	.word	0x0001e448
    69d4:	0001e458 	.word	0x0001e458
    69d8:	00020075 	.word	0x00020075
    69dc:	00020092 	.word	0x00020092
    69e0:	000200b0 	.word	0x000200b0
    69e4:	000200c4 	.word	0x000200c4
    69e8:	00020109 	.word	0x00020109
    69ec:	000200eb 	.word	0x000200eb

000069f0 <bt_conn_send_cb>:
{
    69f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69f4:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    69f6:	7a83      	ldrb	r3, [r0, #10]
    69f8:	2b06      	cmp	r3, #6
{
    69fa:	4606      	mov	r6, r0
    69fc:	460d      	mov	r5, r1
    69fe:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    6a00:	d013      	beq.n	6a2a <bt_conn_send_cb+0x3a>
		BT_ERR("not connected!");
    6a02:	2301      	movs	r3, #1
    6a04:	f04f 0100 	mov.w	r1, #0
    6a08:	f363 0107 	bfi	r1, r3, #0, #8
    6a0c:	4a2c      	ldr	r2, [pc, #176]	; (6ac0 <bt_conn_send_cb+0xd0>)
    6a0e:	4b2d      	ldr	r3, [pc, #180]	; (6ac4 <bt_conn_send_cb+0xd4>)
    6a10:	482d      	ldr	r0, [pc, #180]	; (6ac8 <bt_conn_send_cb+0xd8>)
    6a12:	1a9b      	subs	r3, r3, r2
    6a14:	08db      	lsrs	r3, r3, #3
    6a16:	f363 118f 	bfi	r1, r3, #6, #10
    6a1a:	f011 fdd9 	bl	185d0 <log_0>
		net_buf_unref(buf);
    6a1e:	4628      	mov	r0, r5
    6a20:	f00b fda6 	bl	12570 <net_buf_unref>
			return -ENOTCONN;
    6a24:	f06f 0038 	mvn.w	r0, #56	; 0x38
    6a28:	e021      	b.n	6a6e <bt_conn_send_cb+0x7e>
	if (cb) {
    6a2a:	2a00      	cmp	r2, #0
    6a2c:	d045      	beq.n	6aba <bt_conn_send_cb+0xca>
	return z_impl_k_current_get();
    6a2e:	f010 fc81 	bl	17334 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    6a32:	4b26      	ldr	r3, [pc, #152]	; (6acc <bt_conn_send_cb+0xdc>)
    6a34:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    6a36:	4826      	ldr	r0, [pc, #152]	; (6ad0 <bt_conn_send_cb+0xe0>)
    6a38:	bf0c      	ite	eq
    6a3a:	2100      	moveq	r1, #0
    6a3c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6a40:	f017 f876 	bl	1db30 <z_impl_k_queue_get>
    6a44:	4604      	mov	r4, r0
		if (!tx) {
    6a46:	b9a0      	cbnz	r0, 6a72 <bt_conn_send_cb+0x82>
			BT_ERR("Unable to allocate TX context");
    6a48:	2301      	movs	r3, #1
    6a4a:	f04f 0100 	mov.w	r1, #0
    6a4e:	4a1c      	ldr	r2, [pc, #112]	; (6ac0 <bt_conn_send_cb+0xd0>)
    6a50:	4820      	ldr	r0, [pc, #128]	; (6ad4 <bt_conn_send_cb+0xe4>)
    6a52:	f363 0107 	bfi	r1, r3, #0, #8
    6a56:	4b1b      	ldr	r3, [pc, #108]	; (6ac4 <bt_conn_send_cb+0xd4>)
    6a58:	1a9b      	subs	r3, r3, r2
    6a5a:	08db      	lsrs	r3, r3, #3
    6a5c:	f363 118f 	bfi	r1, r3, #6, #10
    6a60:	f011 fdb6 	bl	185d0 <log_0>
			net_buf_unref(buf);
    6a64:	4628      	mov	r0, r5
    6a66:	f00b fd83 	bl	12570 <net_buf_unref>
			return -ENOBUFS;
    6a6a:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    6a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    6a72:	7ab3      	ldrb	r3, [r6, #10]
    6a74:	2b06      	cmp	r3, #6
    6a76:	d014      	beq.n	6aa2 <bt_conn_send_cb+0xb2>
			BT_WARN("Disconnected while allocating context");
    6a78:	2302      	movs	r3, #2
    6a7a:	f04f 0100 	mov.w	r1, #0
    6a7e:	4a10      	ldr	r2, [pc, #64]	; (6ac0 <bt_conn_send_cb+0xd0>)
    6a80:	4815      	ldr	r0, [pc, #84]	; (6ad8 <bt_conn_send_cb+0xe8>)
    6a82:	f363 0107 	bfi	r1, r3, #0, #8
    6a86:	4b0f      	ldr	r3, [pc, #60]	; (6ac4 <bt_conn_send_cb+0xd4>)
    6a88:	1a9b      	subs	r3, r3, r2
    6a8a:	08db      	lsrs	r3, r3, #3
    6a8c:	f363 118f 	bfi	r1, r3, #6, #10
    6a90:	f011 fd9e 	bl	185d0 <log_0>
			net_buf_unref(buf);
    6a94:	4628      	mov	r0, r5
    6a96:	f00b fd6b 	bl	12570 <net_buf_unref>
			tx_free(tx);
    6a9a:	4620      	mov	r0, r4
    6a9c:	f7ff fdbc 	bl	6618 <tx_free>
    6aa0:	e7c0      	b.n	6a24 <bt_conn_send_cb+0x34>
		tx->pending_no_cb = 0U;
    6aa2:	2300      	movs	r3, #0
		tx->user_data = user_data;
    6aa4:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    6aa8:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    6aaa:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    6aac:	f106 0034 	add.w	r0, r6, #52	; 0x34
    6ab0:	4629      	mov	r1, r5
    6ab2:	f014 fbab 	bl	1b20c <net_buf_put>
	return 0;
    6ab6:	2000      	movs	r0, #0
    6ab8:	e7d9      	b.n	6a6e <bt_conn_send_cb+0x7e>
		tx_data(buf)->tx = NULL;
    6aba:	616a      	str	r2, [r5, #20]
    6abc:	e7f6      	b.n	6aac <bt_conn_send_cb+0xbc>
    6abe:	bf00      	nop
    6ac0:	0001e448 	.word	0x0001e448
    6ac4:	0001e458 	.word	0x0001e458
    6ac8:	00020125 	.word	0x00020125
    6acc:	20005c78 	.word	0x20005c78
    6ad0:	2000d258 	.word	0x2000d258
    6ad4:	00020134 	.word	0x00020134
    6ad8:	00020152 	.word	0x00020152

00006adc <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0U;
    6adc:	4b1a      	ldr	r3, [pc, #104]	; (6b48 <bt_conn_prepare_events+0x6c>)
{
    6ade:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    6ae0:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6ae2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    6ae4:	609a      	str	r2, [r3, #8]
{
    6ae6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6ae8:	f010 ff4c 	bl	17984 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    6aec:	4b17      	ldr	r3, [pc, #92]	; (6b4c <bt_conn_prepare_events+0x70>)
    6aee:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    6af2:	f012 fc2c 	bl	1934e <atomic_get>
    6af6:	4619      	mov	r1, r3
    6af8:	b908      	cbnz	r0, 6afe <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6afa:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    6afc:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    6afe:	7a9a      	ldrb	r2, [r3, #10]
    6b00:	b99a      	cbnz	r2, 6b2a <bt_conn_prepare_events+0x4e>
    6b02:	f3bf 8f5b 	dmb	ish
    6b06:	1d1a      	adds	r2, r3, #4
    6b08:	e852 0f00 	ldrex	r0, [r2]
    6b0c:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    6b10:	e842 ce00 	strex	lr, ip, [r2]
    6b14:	f1be 0f00 	cmp.w	lr, #0
    6b18:	d1f6      	bne.n	6b08 <bt_conn_prepare_events+0x2c>
    6b1a:	f3bf 8f5b 	dmb	ish
    6b1e:	0642      	lsls	r2, r0, #25
    6b20:	d503      	bpl.n	6b2a <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    6b22:	4618      	mov	r0, r3
    6b24:	f7ff fe32 	bl	678c <conn_cleanup>
    6b28:	e7e7      	b.n	6afa <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    6b2a:	7a8b      	ldrb	r3, [r1, #10]
    6b2c:	2b06      	cmp	r3, #6
    6b2e:	d1e4      	bne.n	6afa <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    6b30:	4b07      	ldr	r3, [pc, #28]	; (6b50 <bt_conn_prepare_events+0x74>)
    6b32:	f104 0014 	add.w	r0, r4, #20
    6b36:	2200      	movs	r2, #0
    6b38:	2104      	movs	r1, #4
    6b3a:	f010 ff23 	bl	17984 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    6b3e:	2301      	movs	r3, #1
    6b40:	f884 3020 	strb.w	r3, [r4, #32]
    6b44:	2002      	movs	r0, #2
	return ev_count;
    6b46:	e7d9      	b.n	6afc <bt_conn_prepare_events+0x20>
    6b48:	2000cc10 	.word	0x2000cc10
    6b4c:	20000224 	.word	0x20000224
    6b50:	20000258 	.word	0x20000258

00006b54 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(u8_t id, const bt_addr_le_t *peer)
{
    6b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    6b58:	4c19      	ldr	r4, [pc, #100]	; (6bc0 <bt_conn_add_le+0x6c>)
    6b5a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
{
    6b5e:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    6b60:	4630      	mov	r0, r6
{
    6b62:	460f      	mov	r7, r1
		if (!atomic_get(&conns[i].ref)) {
    6b64:	f012 fbf3 	bl	1934e <atomic_get>
    6b68:	4605      	mov	r5, r0
    6b6a:	b110      	cbz	r0, 6b72 <bt_conn_add_le+0x1e>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    6b6c:	2000      	movs	r0, #0
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    6b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    6b72:	4601      	mov	r1, r0
    6b74:	22a0      	movs	r2, #160	; 0xa0
    6b76:	4620      	mov	r0, r4
    6b78:	f012 f889 	bl	18c8e <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    6b7c:	4911      	ldr	r1, [pc, #68]	; (6bc4 <bt_conn_add_le+0x70>)
    6b7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    6b82:	f017 f9ac 	bl	1dede <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    6b86:	4b10      	ldr	r3, [pc, #64]	; (6bc8 <bt_conn_add_le+0x74>)
    6b88:	62a5      	str	r5, [r4, #40]	; 0x28
    6b8a:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6b8e:	2501      	movs	r5, #1
    6b90:	f3bf 8f5b 	dmb	ish
    6b94:	e856 3f00 	ldrex	r3, [r6]
    6b98:	e846 5200 	strex	r2, r5, [r6]
    6b9c:	2a00      	cmp	r2, #0
    6b9e:	d1f9      	bne.n	6b94 <bt_conn_add_le+0x40>
    6ba0:	f3bf 8f5b 	dmb	ish
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    6ba4:	2207      	movs	r2, #7
    6ba6:	4639      	mov	r1, r7
    6ba8:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->id = id;
    6bac:	f884 8008 	strb.w	r8, [r4, #8]
    6bb0:	f012 f843 	bl	18c3a <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    6bb4:	4b05      	ldr	r3, [pc, #20]	; (6bcc <bt_conn_add_le+0x78>)
	conn->type = BT_CONN_TYPE_LE;
    6bb6:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    6bb8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			conn = &conns[i];
    6bbc:	4620      	mov	r0, r4
	return conn;
    6bbe:	e7d6      	b.n	6b6e <bt_conn_add_le+0x1a>
    6bc0:	20000224 	.word	0x20000224
    6bc4:	00006ea5 	.word	0x00006ea5
    6bc8:	000193f9 	.word	0x000193f9
    6bcc:	00280018 	.word	0x00280018

00006bd0 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    6bd0:	b570      	push	{r4, r5, r6, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    6bd2:	7a85      	ldrb	r5, [r0, #10]
    6bd4:	428d      	cmp	r5, r1
{
    6bd6:	4604      	mov	r4, r0
    6bd8:	460e      	mov	r6, r1
	if (conn->state == state) {
    6bda:	d10f      	bne.n	6bfc <bt_conn_set_state+0x2c>
		BT_WARN("no transition");
    6bdc:	2302      	movs	r3, #2
    6bde:	f04f 0100 	mov.w	r1, #0
    6be2:	f363 0107 	bfi	r1, r3, #0, #8
    6be6:	4a59      	ldr	r2, [pc, #356]	; (6d4c <bt_conn_set_state+0x17c>)
    6be8:	4b59      	ldr	r3, [pc, #356]	; (6d50 <bt_conn_set_state+0x180>)
    6bea:	485a      	ldr	r0, [pc, #360]	; (6d54 <bt_conn_set_state+0x184>)
    6bec:	1a9b      	subs	r3, r3, r2
    6bee:	08db      	lsrs	r3, r3, #3
    6bf0:	f363 118f 	bfi	r1, r3, #6, #10
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    6bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no transition");
    6bf8:	f011 bcea 	b.w	185d0 <log_0>
	conn->state = state;
    6bfc:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    6bfe:	b915      	cbnz	r5, 6c06 <bt_conn_set_state+0x36>
#endif /* defined(CONFIG_BT_BREDR) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    6c00:	304c      	adds	r0, #76	; 0x4c
    6c02:	f012 fbc9 	bl	19398 <atomic_inc>
	switch (conn->state) {
    6c06:	7aa3      	ldrb	r3, [r4, #10]
    6c08:	2b07      	cmp	r3, #7
    6c0a:	f200 808d 	bhi.w	6d28 <bt_conn_set_state+0x158>
    6c0e:	e8df f003 	tbb	[pc, r3]
    6c12:	8a1b      	.short	0x8a1b
    6c14:	8a8a8a8a 	.word	0x8a8a8a8a
    6c18:	8a04      	.short	0x8a04
		if (conn->type == BT_CONN_TYPE_SCO) {
    6c1a:	78a3      	ldrb	r3, [r4, #2]
    6c1c:	2b04      	cmp	r3, #4
    6c1e:	f000 8082 	beq.w	6d26 <bt_conn_set_state+0x156>
	z_impl_k_queue_init(queue);
    6c22:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6c26:	f016 ff52 	bl	1dace <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    6c2a:	2100      	movs	r1, #0
    6c2c:	484a      	ldr	r0, [pc, #296]	; (6d58 <bt_conn_set_state+0x188>)
    6c2e:	f010 ff11 	bl	17a54 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6c32:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    6c34:	4620      	mov	r0, r4
	list->tail = NULL;
    6c36:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
    6c3a:	f000 faff 	bl	723c <bt_l2cap_connected>
		notify_connected(conn);
    6c3e:	4620      	mov	r0, r4
}
    6c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    6c44:	f7ff bcf2 	b.w	662c <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6c48:	78a3      	ldrb	r3, [r4, #2]
    6c4a:	2b04      	cmp	r3, #4
    6c4c:	d105      	bne.n	6c5a <bt_conn_set_state+0x8a>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    6c4e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
}
    6c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_dec(&conn->ref);
    6c56:	f012 bb92 	b.w	1937e <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    6c5a:	1fab      	subs	r3, r5, #6
    6c5c:	2b01      	cmp	r3, #1
    6c5e:	d851      	bhi.n	6d04 <bt_conn_set_state+0x134>
	z_impl_k_sem_give(sem);
    6c60:	4d3e      	ldr	r5, [pc, #248]	; (6d5c <bt_conn_set_state+0x18c>)
		tx->pending_no_cb = 0U;
    6c62:	2600      	movs	r6, #0
	__asm__ volatile(
    6c64:	f04f 0320 	mov.w	r3, #32
    6c68:	f3ef 8211 	mrs	r2, BASEPRI
    6c6c:	f383 8811 	msr	BASEPRI, r3
    6c70:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    6c74:	69e3      	ldr	r3, [r4, #28]
    6c76:	b14b      	cbz	r3, 6c8c <bt_conn_set_state+0xbc>
			conn->pending_no_cb--;
    6c78:	3b01      	subs	r3, #1
    6c7a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    6c7c:	f382 8811 	msr	BASEPRI, r2
    6c80:	f3bf 8f6f 	isb	sy
    6c84:	4628      	mov	r0, r5
    6c86:	f010 fb5b 	bl	17340 <z_impl_k_sem_give>
    6c8a:	e7eb      	b.n	6c64 <bt_conn_set_state+0x94>
Z_GENLIST_IS_EMPTY(slist)
    6c8c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    6c8e:	b128      	cbz	r0, 6c9c <bt_conn_set_state+0xcc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6c90:	69a1      	ldr	r1, [r4, #24]
    6c92:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    6c94:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6c96:	4288      	cmp	r0, r1
	list->tail = node;
    6c98:	bf08      	it	eq
    6c9a:	61a3      	streq	r3, [r4, #24]
    6c9c:	f382 8811 	msr	BASEPRI, r2
    6ca0:	f3bf 8f6f 	isb	sy
		if (!node) {
    6ca4:	b188      	cbz	r0, 6cca <bt_conn_set_state+0xfa>
	__asm__ volatile(
    6ca6:	f04f 0220 	mov.w	r2, #32
    6caa:	f3ef 8311 	mrs	r3, BASEPRI
    6cae:	f382 8811 	msr	BASEPRI, r2
    6cb2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    6cb6:	68c2      	ldr	r2, [r0, #12]
    6cb8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    6cba:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    6cbc:	f383 8811 	msr	BASEPRI, r3
    6cc0:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    6cc4:	f7ff fca8 	bl	6618 <tx_free>
    6cc8:	e7dc      	b.n	6c84 <bt_conn_set_state+0xb4>
			tx_notify(conn);
    6cca:	4620      	mov	r0, r4
    6ccc:	f012 fb71 	bl	193b2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    6cd0:	78a3      	ldrb	r3, [r4, #2]
    6cd2:	2b01      	cmp	r3, #1
    6cd4:	d103      	bne.n	6cde <bt_conn_set_state+0x10e>
				k_delayed_work_cancel(&conn->update_work);
    6cd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
    6cda:	f017 f908 	bl	1deee <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6cde:	f3bf 8f5b 	dmb	ish
    6ce2:	3404      	adds	r4, #4
    6ce4:	e854 3f00 	ldrex	r3, [r4]
    6ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6cec:	e844 3200 	strex	r2, r3, [r4]
    6cf0:	2a00      	cmp	r2, #0
    6cf2:	d1f7      	bne.n	6ce4 <bt_conn_set_state+0x114>
    6cf4:	f3bf 8f5b 	dmb	ish
	return z_impl_k_poll_signal_raise(signal, result);
    6cf8:	2100      	movs	r1, #0
    6cfa:	4817      	ldr	r0, [pc, #92]	; (6d58 <bt_conn_set_state+0x188>)
}
    6cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d00:	f010 bea8 	b.w	17a54 <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    6d04:	2d05      	cmp	r5, #5
    6d06:	d103      	bne.n	6d10 <bt_conn_set_state+0x140>
			notify_connected(conn);
    6d08:	4620      	mov	r0, r4
    6d0a:	f7ff fc8f 	bl	662c <notify_connected>
    6d0e:	e79e      	b.n	6c4e <bt_conn_set_state+0x7e>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    6d10:	2d01      	cmp	r5, #1
    6d12:	d103      	bne.n	6d1c <bt_conn_set_state+0x14c>
			if (conn->err) {
    6d14:	7a63      	ldrb	r3, [r4, #9]
    6d16:	2b00      	cmp	r3, #0
    6d18:	d099      	beq.n	6c4e <bt_conn_set_state+0x7e>
    6d1a:	e7f5      	b.n	6d08 <bt_conn_set_state+0x138>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    6d1c:	2d04      	cmp	r5, #4
    6d1e:	d0f9      	beq.n	6d14 <bt_conn_set_state+0x144>
		} else if (old_state == BT_CONN_CONNECT_AUTO) {
    6d20:	3d02      	subs	r5, #2
    6d22:	2d01      	cmp	r5, #1
    6d24:	d993      	bls.n	6c4e <bt_conn_set_state+0x7e>
}
    6d26:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("no valid (%u) state was set", state);
    6d28:	2302      	movs	r3, #2
    6d2a:	f04f 0200 	mov.w	r2, #0
    6d2e:	f363 0207 	bfi	r2, r3, #0, #8
    6d32:	4906      	ldr	r1, [pc, #24]	; (6d4c <bt_conn_set_state+0x17c>)
    6d34:	4b06      	ldr	r3, [pc, #24]	; (6d50 <bt_conn_set_state+0x180>)
    6d36:	480a      	ldr	r0, [pc, #40]	; (6d60 <bt_conn_set_state+0x190>)
    6d38:	1a5b      	subs	r3, r3, r1
    6d3a:	08db      	lsrs	r3, r3, #3
    6d3c:	4631      	mov	r1, r6
    6d3e:	f363 128f 	bfi	r2, r3, #6, #10
}
    6d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    6d46:	f011 bc50 	b.w	185ea <log_1>
    6d4a:	bf00      	nop
    6d4c:	0001e448 	.word	0x0001e448
    6d50:	0001e458 	.word	0x0001e458
    6d54:	00020178 	.word	0x00020178
    6d58:	2000cc10 	.word	0x2000cc10
    6d5c:	2000cacc 	.word	0x2000cacc
    6d60:	00020186 	.word	0x00020186

00006d64 <bt_conn_lookup_handle>:
{
    6d64:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    6d66:	4c0b      	ldr	r4, [pc, #44]	; (6d94 <bt_conn_lookup_handle+0x30>)
{
    6d68:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    6d6a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    6d6e:	f012 faee 	bl	1934e <atomic_get>
    6d72:	b158      	cbz	r0, 6d8c <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    6d74:	7aa3      	ldrb	r3, [r4, #10]
    6d76:	3b06      	subs	r3, #6
    6d78:	2b01      	cmp	r3, #1
    6d7a:	d808      	bhi.n	6d8e <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    6d7c:	8823      	ldrh	r3, [r4, #0]
    6d7e:	4293      	cmp	r3, r2
    6d80:	d105      	bne.n	6d8e <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    6d82:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    6d86:	f012 fb07 	bl	19398 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    6d8a:	4620      	mov	r0, r4
}
    6d8c:	bd10      	pop	{r4, pc}
	return NULL;
    6d8e:	2000      	movs	r0, #0
    6d90:	e7fc      	b.n	6d8c <bt_conn_lookup_handle+0x28>
    6d92:	bf00      	nop
    6d94:	20000224 	.word	0x20000224

00006d98 <bt_conn_lookup_addr_le>:
{
    6d98:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    6d9a:	4c0d      	ldr	r4, [pc, #52]	; (6dd0 <bt_conn_lookup_addr_le+0x38>)
{
    6d9c:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    6d9e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    6da2:	f012 fad4 	bl	1934e <atomic_get>
    6da6:	b908      	cbnz	r0, 6dac <bt_conn_lookup_addr_le+0x14>
	return NULL;
    6da8:	2000      	movs	r0, #0
}
    6daa:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6dac:	78a2      	ldrb	r2, [r4, #2]
    6dae:	2a01      	cmp	r2, #1
    6db0:	d1fa      	bne.n	6da8 <bt_conn_lookup_addr_le+0x10>
		if (conns[i].id == id &&
    6db2:	7a22      	ldrb	r2, [r4, #8]
    6db4:	429a      	cmp	r2, r3
    6db6:	d1f7      	bne.n	6da8 <bt_conn_lookup_addr_le+0x10>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    6db8:	4620      	mov	r0, r4
    6dba:	f012 fb22 	bl	19402 <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    6dbe:	2800      	cmp	r0, #0
    6dc0:	d1f2      	bne.n	6da8 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    6dc2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    6dc6:	f012 fae7 	bl	19398 <atomic_inc>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    6dca:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    6dcc:	e7ed      	b.n	6daa <bt_conn_lookup_addr_le+0x12>
    6dce:	bf00      	nop
    6dd0:	20000224 	.word	0x20000224

00006dd4 <bt_conn_lookup_state_le>:
{
    6dd4:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    6dd6:	4c0e      	ldr	r4, [pc, #56]	; (6e10 <bt_conn_lookup_state_le+0x3c>)
{
    6dd8:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    6dda:	f104 004c 	add.w	r0, r4, #76	; 0x4c
{
    6dde:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    6de0:	f012 fab5 	bl	1934e <atomic_get>
    6de4:	b908      	cbnz	r0, 6dea <bt_conn_lookup_state_le+0x16>
	return NULL;
    6de6:	2000      	movs	r0, #0
}
    6de8:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6dea:	78a2      	ldrb	r2, [r4, #2]
    6dec:	2a01      	cmp	r2, #1
    6dee:	d1fa      	bne.n	6de6 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    6df0:	b93b      	cbnz	r3, 6e02 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    6df2:	7aa3      	ldrb	r3, [r4, #10]
    6df4:	42ab      	cmp	r3, r5
    6df6:	d1f6      	bne.n	6de6 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    6df8:	4806      	ldr	r0, [pc, #24]	; (6e14 <bt_conn_lookup_state_le+0x40>)
    6dfa:	f012 facd 	bl	19398 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    6dfe:	4804      	ldr	r0, [pc, #16]	; (6e10 <bt_conn_lookup_state_le+0x3c>)
    6e00:	e7f2      	b.n	6de8 <bt_conn_lookup_state_le+0x14>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    6e02:	4619      	mov	r1, r3
    6e04:	4620      	mov	r0, r4
    6e06:	f012 fafc 	bl	19402 <bt_conn_addr_le_cmp>
    6e0a:	2800      	cmp	r0, #0
    6e0c:	d0f1      	beq.n	6df2 <bt_conn_lookup_state_le+0x1e>
    6e0e:	e7ea      	b.n	6de6 <bt_conn_lookup_state_le+0x12>
    6e10:	20000224 	.word	0x20000224
    6e14:	20000270 	.word	0x20000270

00006e18 <bt_conn_foreach>:
		if (!atomic_get(&conns[i].ref)) {
    6e18:	4b09      	ldr	r3, [pc, #36]	; (6e40 <bt_conn_foreach+0x28>)
{
    6e1a:	b570      	push	{r4, r5, r6, lr}
    6e1c:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    6e1e:	f103 004c 	add.w	r0, r3, #76	; 0x4c
{
    6e22:	460c      	mov	r4, r1
		if (!atomic_get(&conns[i].ref)) {
    6e24:	f012 fa93 	bl	1934e <atomic_get>
    6e28:	b140      	cbz	r0, 6e3c <bt_conn_foreach+0x24>
		if (!(conns[i].type & type)) {
    6e2a:	7899      	ldrb	r1, [r3, #2]
    6e2c:	4229      	tst	r1, r5
    6e2e:	d005      	beq.n	6e3c <bt_conn_foreach+0x24>
		func(&conns[i], data);
    6e30:	4618      	mov	r0, r3
    6e32:	4611      	mov	r1, r2
    6e34:	4623      	mov	r3, r4
}
    6e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		func(&conns[i], data);
    6e3a:	4718      	bx	r3
}
    6e3c:	bd70      	pop	{r4, r5, r6, pc}
    6e3e:	bf00      	nop
    6e40:	20000224 	.word	0x20000224

00006e44 <send_conn_le_param_update>:
{
    6e44:	b538      	push	{r3, r4, r5, lr}
    6e46:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    6e48:	4608      	mov	r0, r1
{
    6e4a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6e4c:	f012 fa05 	bl	1925a <bt_le_conn_params_valid>
    6e50:	b310      	cbz	r0, 6e98 <send_conn_le_param_update+0x54>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6e52:	4b13      	ldr	r3, [pc, #76]	; (6ea0 <send_conn_le_param_update+0x5c>)
    6e54:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6e58:	079a      	lsls	r2, r3, #30
    6e5a:	d407      	bmi.n	6e6c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    6e5c:	78e3      	ldrb	r3, [r4, #3]
    6e5e:	b17b      	cbz	r3, 6e80 <send_conn_le_param_update+0x3c>
	return bt_l2cap_update_conn_param(conn, param);
    6e60:	4629      	mov	r1, r5
    6e62:	4620      	mov	r0, r4
}
    6e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6e68:	f000 bafc 	b.w	7464 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6e6c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    6e70:	079b      	lsls	r3, r3, #30
    6e72:	d5f3      	bpl.n	6e5c <send_conn_le_param_update+0x18>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    6e74:	210a      	movs	r1, #10
    6e76:	1d20      	adds	r0, r4, #4
    6e78:	f012 fa6f 	bl	1935a <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    6e7c:	2800      	cmp	r0, #0
    6e7e:	d1ed      	bne.n	6e5c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    6e80:	4629      	mov	r1, r5
    6e82:	4620      	mov	r0, r4
    6e84:	f012 fad8 	bl	19438 <bt_conn_le_conn_update>
		if (rc == 0) {
    6e88:	b928      	cbnz	r0, 6e96 <send_conn_le_param_update+0x52>
			conn->le.pending_latency = param->latency;
    6e8a:	88ab      	ldrh	r3, [r5, #4]
    6e8c:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
			conn->le.pending_timeout = param->timeout;
    6e90:	88eb      	ldrh	r3, [r5, #6]
    6e92:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
}
    6e96:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6e98:	f06f 0015 	mvn.w	r0, #21
    6e9c:	e7fb      	b.n	6e96 <send_conn_le_param_update+0x52>
    6e9e:	bf00      	nop
    6ea0:	2000ca40 	.word	0x2000ca40

00006ea4 <conn_update_timeout>:
{
    6ea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    6ea6:	f810 3c46 	ldrb.w	r3, [r0, #-70]
{
    6eaa:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    6eac:	f1a0 0650 	sub.w	r6, r0, #80	; 0x50
	if (conn->state == BT_CONN_DISCONNECTED) {
    6eb0:	b9f3      	cbnz	r3, 6ef0 <conn_update_timeout+0x4c>
		bt_l2cap_disconnected(conn);
    6eb2:	4630      	mov	r0, r6
    6eb4:	f012 fb25 	bl	19502 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6eb8:	4b25      	ldr	r3, [pc, #148]	; (6f50 <conn_update_timeout+0xac>)
    6eba:	681d      	ldr	r5, [r3, #0]
    6ebc:	b985      	cbnz	r5, 6ee0 <conn_update_timeout+0x3c>
	atomic_dec(&conn->ref);
    6ebe:	1f20      	subs	r0, r4, #4
    6ec0:	f012 fa5d 	bl	1937e <atomic_dec>
		    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6ec4:	2108      	movs	r1, #8
    6ec6:	4823      	ldr	r0, [pc, #140]	; (6f54 <conn_update_timeout+0xb0>)
    6ec8:	f012 fa47 	bl	1935a <atomic_test_bit>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6ecc:	b130      	cbz	r0, 6edc <conn_update_timeout+0x38>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6ece:	2105      	movs	r1, #5
    6ed0:	4820      	ldr	r0, [pc, #128]	; (6f54 <conn_update_timeout+0xb0>)
    6ed2:	f012 fa42 	bl	1935a <atomic_test_bit>
		    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6ed6:	b908      	cbnz	r0, 6edc <conn_update_timeout+0x38>
			bt_le_adv_resume();
    6ed8:	f7ff fa00 	bl	62dc <bt_le_adv_resume>
}
    6edc:	b004      	add	sp, #16
    6ede:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    6ee0:	686b      	ldr	r3, [r5, #4]
    6ee2:	b11b      	cbz	r3, 6eec <conn_update_timeout+0x48>
			cb->disconnected(conn, conn->err);
    6ee4:	f814 1c47 	ldrb.w	r1, [r4, #-71]
    6ee8:	4630      	mov	r0, r6
    6eea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6eec:	692d      	ldr	r5, [r5, #16]
    6eee:	e7e5      	b.n	6ebc <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    6ef0:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
    6ef4:	2b01      	cmp	r3, #1
    6ef6:	d1f1      	bne.n	6edc <conn_update_timeout+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ef8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    6efc:	f1a0 054c 	sub.w	r5, r0, #76	; 0x4c
    6f00:	e855 3f00 	ldrex	r3, [r5]
    6f04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    6f08:	e845 2100 	strex	r1, r2, [r5]
    6f0c:	2900      	cmp	r1, #0
    6f0e:	d1f7      	bne.n	6f00 <conn_update_timeout+0x5c>
    6f10:	f3bf 8f5b 	dmb	ish
    6f14:	059b      	lsls	r3, r3, #22
    6f16:	d514      	bpl.n	6f42 <conn_update_timeout+0x9e>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6f18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6f1a:	9300      	str	r3, [sp, #0]
    6f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6f1e:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    6f20:	4669      	mov	r1, sp
			send_conn_le_param_update(conn, param);
    6f22:	4630      	mov	r0, r6
    6f24:	f7ff ff8e 	bl	6e44 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6f28:	f3bf 8f5b 	dmb	ish
    6f2c:	e855 3f00 	ldrex	r3, [r5]
    6f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6f34:	e845 3200 	strex	r2, r3, [r5]
    6f38:	2a00      	cmp	r2, #0
    6f3a:	d1f7      	bne.n	6f2c <conn_update_timeout+0x88>
    6f3c:	f3bf 8f5b 	dmb	ish
    6f40:	e7cc      	b.n	6edc <conn_update_timeout+0x38>
			param = BT_LE_CONN_PARAM(
    6f42:	4a05      	ldr	r2, [pc, #20]	; (6f58 <conn_update_timeout+0xb4>)
    6f44:	6851      	ldr	r1, [r2, #4]
    6f46:	6810      	ldr	r0, [r2, #0]
    6f48:	ab02      	add	r3, sp, #8
    6f4a:	c303      	stmia	r3!, {r0, r1}
			send_conn_le_param_update(conn, param);
    6f4c:	a902      	add	r1, sp, #8
    6f4e:	e7e8      	b.n	6f22 <conn_update_timeout+0x7e>
    6f50:	200001f0 	.word	0x200001f0
    6f54:	2000cab0 	.word	0x2000cab0
    6f58:	0001e5ac 	.word	0x0001e5ac

00006f5c <bt_conn_create_pdu_timeout>:
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    6f5c:	4b10      	ldr	r3, [pc, #64]	; (6fa0 <bt_conn_create_pdu_timeout+0x44>)
{
    6f5e:	b570      	push	{r4, r5, r6, lr}
		buf = net_buf_alloc(pool, timeout);
    6f60:	2800      	cmp	r0, #0
    6f62:	bf08      	it	eq
    6f64:	4618      	moveq	r0, r3
{
    6f66:	460e      	mov	r6, r1
		buf = net_buf_alloc(pool, timeout);
    6f68:	4611      	mov	r1, r2
{
    6f6a:	4615      	mov	r5, r2
		buf = net_buf_alloc(pool, timeout);
    6f6c:	f014 f92b 	bl	1b1c6 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    6f70:	4604      	mov	r4, r0
    6f72:	b980      	cbnz	r0, 6f96 <bt_conn_create_pdu_timeout+0x3a>
		BT_WARN("Unable to allocate buffer: timeout %d", timeout);
    6f74:	2302      	movs	r3, #2
    6f76:	f04f 0200 	mov.w	r2, #0
    6f7a:	f363 0207 	bfi	r2, r3, #0, #8
    6f7e:	4909      	ldr	r1, [pc, #36]	; (6fa4 <bt_conn_create_pdu_timeout+0x48>)
    6f80:	4b09      	ldr	r3, [pc, #36]	; (6fa8 <bt_conn_create_pdu_timeout+0x4c>)
    6f82:	480a      	ldr	r0, [pc, #40]	; (6fac <bt_conn_create_pdu_timeout+0x50>)
    6f84:	1a5b      	subs	r3, r3, r1
    6f86:	08db      	lsrs	r3, r3, #3
    6f88:	f363 128f 	bfi	r2, r3, #6, #10
    6f8c:	4629      	mov	r1, r5
    6f8e:	f011 fb2c 	bl	185ea <log_1>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    6f92:	4620      	mov	r0, r4
    6f94:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_reserve(buf, reserve);
    6f96:	1d31      	adds	r1, r6, #4
    6f98:	3008      	adds	r0, #8
    6f9a:	f014 f933 	bl	1b204 <net_buf_simple_reserve>
	return buf;
    6f9e:	e7f8      	b.n	6f92 <bt_conn_create_pdu_timeout+0x36>
    6fa0:	2000d278 	.word	0x2000d278
    6fa4:	0001e448 	.word	0x0001e448
    6fa8:	0001e458 	.word	0x0001e458
    6fac:	00020026 	.word	0x00020026

00006fb0 <bt_conn_create_frag_timeout>:
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    6fb0:	460a      	mov	r2, r1
    6fb2:	4601      	mov	r1, r0
    6fb4:	4801      	ldr	r0, [pc, #4]	; (6fbc <bt_conn_create_frag_timeout+0xc>)
    6fb6:	f7ff bfd1 	b.w	6f5c <bt_conn_create_pdu_timeout>
    6fba:	bf00      	nop
    6fbc:	2000d2d8 	.word	0x2000d2d8

00006fc0 <create_frag.isra.11>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fc4:	4606      	mov	r6, r0
    6fc6:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    6fc8:	2000      	movs	r0, #0
    6fca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6fce:	f7ff ffef 	bl	6fb0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    6fd2:	7833      	ldrb	r3, [r6, #0]
    6fd4:	2b06      	cmp	r3, #6
	frag = bt_conn_create_frag(0);
    6fd6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6fd8:	f04f 0600 	mov.w	r6, #0
    6fdc:	d005      	beq.n	6fea <create_frag.isra.11+0x2a>
		net_buf_unref(frag);
    6fde:	f00b fac7 	bl	12570 <net_buf_unref>
		return NULL;
    6fe2:	4635      	mov	r5, r6
}
    6fe4:	4628      	mov	r0, r5
    6fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    6fea:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6fec:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    6ff0:	4e0c      	ldr	r6, [pc, #48]	; (7024 <create_frag.isra.11+0x64>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6ff2:	4638      	mov	r0, r7
    6ff4:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    6ff8:	f014 f95e 	bl	1b2b8 <net_buf_simple_tailroom>
    6ffc:	4580      	cmp	r8, r0
    6ffe:	d20c      	bcs.n	701a <create_frag.isra.11+0x5a>
	return bt_dev.le.mtu;
    7000:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    7004:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7008:	4632      	mov	r2, r6
    700a:	4638      	mov	r0, r7
    700c:	f014 f915 	bl	1b23a <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    7010:	4631      	mov	r1, r6
    7012:	4620      	mov	r0, r4
    7014:	f014 f934 	bl	1b280 <net_buf_simple_pull>
	return frag;
    7018:	e7e4      	b.n	6fe4 <create_frag.isra.11+0x24>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    701a:	4638      	mov	r0, r7
    701c:	f014 f94c 	bl	1b2b8 <net_buf_simple_tailroom>
    7020:	b286      	uxth	r6, r0
    7022:	e7ef      	b.n	7004 <create_frag.isra.11+0x44>
    7024:	2000ca40 	.word	0x2000ca40

00007028 <bt_conn_process_tx>:
{
    7028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    702a:	7a83      	ldrb	r3, [r0, #10]
{
    702c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    702e:	b993      	cbnz	r3, 7056 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7030:	f3bf 8f5b 	dmb	ish
    7034:	1d03      	adds	r3, r0, #4
    7036:	e853 2f00 	ldrex	r2, [r3]
    703a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    703e:	e843 1400 	strex	r4, r1, [r3]
    7042:	2c00      	cmp	r4, #0
    7044:	d1f7      	bne.n	7036 <bt_conn_process_tx+0xe>
    7046:	f3bf 8f5b 	dmb	ish
    704a:	0653      	lsls	r3, r2, #25
    704c:	d503      	bpl.n	7056 <bt_conn_process_tx+0x2e>
}
    704e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    7052:	f7ff bb9b 	b.w	678c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    7056:	2100      	movs	r1, #0
    7058:	f105 0034 	add.w	r0, r5, #52	; 0x34
    705c:	f014 f8b9 	bl	1b1d2 <net_buf_get>
	BT_ASSERT(buf);
    7060:	4604      	mov	r4, r0
    7062:	b960      	cbnz	r0, 707e <bt_conn_process_tx+0x56>
    7064:	f240 6316 	movw	r3, #1558	; 0x616
    7068:	4a1f      	ldr	r2, [pc, #124]	; (70e8 <bt_conn_process_tx+0xc0>)
    706a:	4920      	ldr	r1, [pc, #128]	; (70ec <bt_conn_process_tx+0xc4>)
    706c:	4820      	ldr	r0, [pc, #128]	; (70f0 <bt_conn_process_tx+0xc8>)
    706e:	f011 f861 	bl	18134 <printk>
    7072:	4040      	eors	r0, r0
    7074:	f380 8811 	msr	BASEPRI, r0
    7078:	f04f 0003 	mov.w	r0, #3
    707c:	df02      	svc	2
	return bt_dev.le.mtu;
    707e:	4e1d      	ldr	r6, [pc, #116]	; (70f4 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    7080:	89a1      	ldrh	r1, [r4, #12]
    7082:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    7086:	4291      	cmp	r1, r2
    7088:	d807      	bhi.n	709a <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    708a:	2300      	movs	r3, #0
    708c:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    708e:	4621      	mov	r1, r4
    7090:	4628      	mov	r0, r5
    7092:	f7ff fae1 	bl	6658 <send_frag>
	if (!send_buf(conn, buf)) {
    7096:	b140      	cbz	r0, 70aa <bt_conn_process_tx+0x82>
}
    7098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    709a:	f105 070a 	add.w	r7, r5, #10
    709e:	4621      	mov	r1, r4
    70a0:	4638      	mov	r0, r7
    70a2:	f7ff ff8d 	bl	6fc0 <create_frag.isra.11>
	if (!frag) {
    70a6:	4601      	mov	r1, r0
    70a8:	b920      	cbnz	r0, 70b4 <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
    70aa:	4620      	mov	r0, r4
}
    70ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    70b0:	f00b ba5e 	b.w	12570 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    70b4:	2301      	movs	r3, #1
    70b6:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    70b8:	4628      	mov	r0, r5
    70ba:	f7ff facd 	bl	6658 <send_frag>
    70be:	2800      	cmp	r0, #0
    70c0:	d0f3      	beq.n	70aa <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
    70c2:	89a2      	ldrh	r2, [r4, #12]
    70c4:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    70c8:	429a      	cmp	r2, r3
    70ca:	d802      	bhi.n	70d2 <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    70cc:	2300      	movs	r3, #0
    70ce:	2201      	movs	r2, #1
    70d0:	e7dd      	b.n	708e <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
    70d2:	4621      	mov	r1, r4
    70d4:	4638      	mov	r0, r7
    70d6:	f7ff ff73 	bl	6fc0 <create_frag.isra.11>
		if (!frag) {
    70da:	4601      	mov	r1, r0
    70dc:	2800      	cmp	r0, #0
    70de:	d0e4      	beq.n	70aa <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    70e0:	2301      	movs	r3, #1
    70e2:	461a      	mov	r2, r3
    70e4:	e7e8      	b.n	70b8 <bt_conn_process_tx+0x90>
    70e6:	bf00      	nop
    70e8:	0002004c 	.word	0x0002004c
    70ec:	00021370 	.word	0x00021370
    70f0:	0001ff46 	.word	0x0001ff46
    70f4:	2000ca40 	.word	0x2000ca40

000070f8 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    70f8:	4b03      	ldr	r3, [pc, #12]	; (7108 <bt_conn_index+0x10>)
    70fa:	1ac0      	subs	r0, r0, r3
    70fc:	4b03      	ldr	r3, [pc, #12]	; (710c <bt_conn_index+0x14>)
    70fe:	1140      	asrs	r0, r0, #5
    7100:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    7102:	b2c0      	uxtb	r0, r0
    7104:	4770      	bx	lr
    7106:	bf00      	nop
    7108:	20000224 	.word	0x20000224
    710c:	cccccccd 	.word	0xcccccccd

00007110 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    7110:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    7112:	490b      	ldr	r1, [pc, #44]	; (7140 <bt_conn_init+0x30>)
    7114:	480b      	ldr	r0, [pc, #44]	; (7144 <bt_conn_init+0x34>)
    7116:	f016 fce2 	bl	1dade <k_queue_append>
    711a:	490b      	ldr	r1, [pc, #44]	; (7148 <bt_conn_init+0x38>)
    711c:	4809      	ldr	r0, [pc, #36]	; (7144 <bt_conn_init+0x34>)
    711e:	f016 fcde 	bl	1dade <k_queue_append>
    7122:	490a      	ldr	r1, [pc, #40]	; (714c <bt_conn_init+0x3c>)
    7124:	4807      	ldr	r0, [pc, #28]	; (7144 <bt_conn_init+0x34>)
    7126:	f016 fcda 	bl	1dade <k_queue_append>
	}

	bt_att_init();
    712a:	f012 fcb1 	bl	19a90 <bt_att_init>

	err = bt_smp_init();
    712e:	f013 f96d 	bl	1a40c <bt_smp_init>
	if (err) {
    7132:	4604      	mov	r4, r0
    7134:	b908      	cbnz	r0, 713a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    7136:	f012 fa28 	bl	1958a <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    713a:	4620      	mov	r0, r4
    713c:	bd10      	pop	{r4, pc}
    713e:	bf00      	nop
    7140:	200001f4 	.word	0x200001f4
    7144:	2000d258 	.word	0x2000d258
    7148:	20000204 	.word	0x20000204
    714c:	20000214 	.word	0x20000214

00007150 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    7150:	4a0d      	ldr	r2, [pc, #52]	; (7188 <l2cap_accept+0x38>)
{
    7152:	b508      	push	{r3, lr}
		if (l2cap->chan.chan.conn) {
    7154:	6813      	ldr	r3, [r2, #0]
    7156:	b923      	cbnz	r3, 7162 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    7158:	480c      	ldr	r0, [pc, #48]	; (718c <l2cap_accept+0x3c>)
    715a:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    715c:	600a      	str	r2, [r1, #0]

		return 0;
    715e:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    7160:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    7162:	2301      	movs	r3, #1
    7164:	f04f 0200 	mov.w	r2, #0
    7168:	f363 0207 	bfi	r2, r3, #0, #8
    716c:	4908      	ldr	r1, [pc, #32]	; (7190 <l2cap_accept+0x40>)
    716e:	4b09      	ldr	r3, [pc, #36]	; (7194 <l2cap_accept+0x44>)
    7170:	1a5b      	subs	r3, r3, r1
    7172:	08db      	lsrs	r3, r3, #3
    7174:	4601      	mov	r1, r0
    7176:	f363 128f 	bfi	r2, r3, #6, #10
    717a:	4807      	ldr	r0, [pc, #28]	; (7198 <l2cap_accept+0x48>)
    717c:	f011 fa35 	bl	185ea <log_1>
	return -ENOMEM;
    7180:	f06f 000b 	mvn.w	r0, #11
    7184:	e7ec      	b.n	7160 <l2cap_accept+0x10>
    7186:	bf00      	nop
    7188:	200002c4 	.word	0x200002c4
    718c:	0001e808 	.word	0x0001e808
    7190:	0001e448 	.word	0x0001e448
    7194:	0001e510 	.word	0x0001e510
    7198:	0002022d 	.word	0x0002022d

0000719c <l2cap_create_le_sig_pdu.isra.8>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    719e:	4605      	mov	r5, r0
    71a0:	460f      	mov	r7, r1
    71a2:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    71a4:	2104      	movs	r1, #4
    71a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    71aa:	2000      	movs	r0, #0
    71ac:	f7ff fed6 	bl	6f5c <bt_conn_create_pdu_timeout>
	if (!buf) {
    71b0:	4604      	mov	r4, r0
    71b2:	b980      	cbnz	r0, 71d6 <l2cap_create_le_sig_pdu.isra.8+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    71b4:	2301      	movs	r3, #1
    71b6:	f04f 0200 	mov.w	r2, #0
    71ba:	f363 0207 	bfi	r2, r3, #0, #8
    71be:	490a      	ldr	r1, [pc, #40]	; (71e8 <l2cap_create_le_sig_pdu.isra.8+0x4c>)
    71c0:	4b0a      	ldr	r3, [pc, #40]	; (71ec <l2cap_create_le_sig_pdu.isra.8+0x50>)
    71c2:	480b      	ldr	r0, [pc, #44]	; (71f0 <l2cap_create_le_sig_pdu.isra.8+0x54>)
    71c4:	1a5b      	subs	r3, r3, r1
    71c6:	08db      	lsrs	r3, r3, #3
    71c8:	f363 128f 	bfi	r2, r3, #6, #10
    71cc:	4629      	mov	r1, r5
    71ce:	f011 fa0c 	bl	185ea <log_1>
}
    71d2:	4620      	mov	r0, r4
    71d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    71d6:	2104      	movs	r1, #4
    71d8:	3008      	adds	r0, #8
    71da:	f014 f828 	bl	1b22e <net_buf_simple_add>
	hdr->code = code;
    71de:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    71e0:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    71e2:	8046      	strh	r6, [r0, #2]
	return buf;
    71e4:	e7f5      	b.n	71d2 <l2cap_create_le_sig_pdu.isra.8+0x36>
    71e6:	bf00      	nop
    71e8:	0001e448 	.word	0x0001e448
    71ec:	0001e510 	.word	0x0001e510
    71f0:	00020254 	.word	0x00020254

000071f4 <l2cap_rtx_timeout>:
{
    71f4:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    71f6:	f04f 0200 	mov.w	r2, #0
    71fa:	2301      	movs	r3, #1
    71fc:	f363 0207 	bfi	r2, r3, #0, #8
    7200:	490b      	ldr	r1, [pc, #44]	; (7230 <l2cap_rtx_timeout+0x3c>)
    7202:	4b0c      	ldr	r3, [pc, #48]	; (7234 <l2cap_rtx_timeout+0x40>)
    7204:	1a5b      	subs	r3, r3, r1
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    7206:	f1a0 0410 	sub.w	r4, r0, #16
    720a:	08db      	lsrs	r3, r3, #3
{
    720c:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    720e:	f363 128f 	bfi	r2, r3, #6, #10
    7212:	4621      	mov	r1, r4
    7214:	4808      	ldr	r0, [pc, #32]	; (7238 <l2cap_rtx_timeout+0x44>)
    7216:	f011 f9e8 	bl	185ea <log_1>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    721a:	f855 0c10 	ldr.w	r0, [r5, #-16]
    721e:	4621      	mov	r1, r4
    7220:	f012 f934 	bl	1948c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7224:	4620      	mov	r0, r4
}
    7226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    722a:	f012 b94f 	b.w	194cc <bt_l2cap_chan_del>
    722e:	bf00      	nop
    7230:	0001e448 	.word	0x0001e448
    7234:	0001e510 	.word	0x0001e510
    7238:	00020316 	.word	0x00020316

0000723c <bt_l2cap_connected>:
{
    723c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7240:	4e21      	ldr	r6, [pc, #132]	; (72c8 <bt_l2cap_connected+0x8c>)
    7242:	4f22      	ldr	r7, [pc, #136]	; (72cc <bt_l2cap_connected+0x90>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    7244:	f8df 8088 	ldr.w	r8, [pc, #136]	; 72d0 <bt_l2cap_connected+0x94>
{
    7248:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    724a:	42be      	cmp	r6, r7
    724c:	d302      	bcc.n	7254 <bt_l2cap_connected+0x18>
}
    724e:	b002      	add	sp, #8
    7250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (fchan->accept(conn, &chan) < 0) {
    7254:	6873      	ldr	r3, [r6, #4]
    7256:	a901      	add	r1, sp, #4
    7258:	4628      	mov	r0, r5
    725a:	4798      	blx	r3
    725c:	2800      	cmp	r0, #0
    725e:	db2d      	blt.n	72bc <bt_l2cap_connected+0x80>
		ch = BT_L2CAP_LE_CHAN(chan);
    7260:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    7262:	8833      	ldrh	r3, [r6, #0]
    7264:	86a3      	strh	r3, [r4, #52]	; 0x34
		ch->tx.cid = fchan->cid;
    7266:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    726a:	4641      	mov	r1, r8
    726c:	f104 0010 	add.w	r0, r4, #16
    7270:	f016 fe35 	bl	1dede <k_delayed_work_init>
	parent->next = child;
    7274:	2300      	movs	r3, #0
    7276:	60a3      	str	r3, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    7278:	6ca9      	ldr	r1, [r5, #72]	; 0x48
	sys_slist_append(&conn->channels, &chan->node);
    727a:	f104 0208 	add.w	r2, r4, #8
    727e:	b9f9      	cbnz	r1, 72c0 <bt_l2cap_connected+0x84>
	list->head = node;
    7280:	e9c5 2211 	strd	r2, r2, [r5, #68]	; 0x44
		if (chan->ops->connected) {
    7284:	9801      	ldr	r0, [sp, #4]
	chan->destroy = destroy;
    7286:	60e3      	str	r3, [r4, #12]
		if (chan->ops->connected) {
    7288:	6843      	ldr	r3, [r0, #4]
	chan->conn = conn;
    728a:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    728c:	681b      	ldr	r3, [r3, #0]
    728e:	b103      	cbz	r3, 7292 <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
    7290:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7292:	9b01      	ldr	r3, [sp, #4]
    7294:	f3bf 8f5b 	dmb	ish
    7298:	3330      	adds	r3, #48	; 0x30
    729a:	e853 2f00 	ldrex	r2, [r3]
    729e:	f042 0201 	orr.w	r2, r2, #1
    72a2:	e843 2100 	strex	r1, r2, [r3]
    72a6:	2900      	cmp	r1, #0
    72a8:	d1f7      	bne.n	729a <bt_l2cap_connected+0x5e>
    72aa:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    72ae:	9801      	ldr	r0, [sp, #4]
    72b0:	6843      	ldr	r3, [r0, #4]
    72b2:	699b      	ldr	r3, [r3, #24]
    72b4:	b113      	cbz	r3, 72bc <bt_l2cap_connected+0x80>
			chan->ops->status(chan, chan->status);
    72b6:	f100 0130 	add.w	r1, r0, #48	; 0x30
    72ba:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    72bc:	3608      	adds	r6, #8
    72be:	e7c4      	b.n	724a <bt_l2cap_connected+0xe>
	parent->next = child;
    72c0:	600a      	str	r2, [r1, #0]
	list->tail = node;
    72c2:	64aa      	str	r2, [r5, #72]	; 0x48
    72c4:	e7de      	b.n	7284 <bt_l2cap_connected+0x48>
    72c6:	bf00      	nop
    72c8:	0001e418 	.word	0x0001e418
    72cc:	0001e430 	.word	0x0001e430
    72d0:	000071f5 	.word	0x000071f5

000072d4 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    72d4:	898b      	ldrh	r3, [r1, #12]
    72d6:	2b03      	cmp	r3, #3
{
    72d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    72da:	4605      	mov	r5, r0
    72dc:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    72de:	d80e      	bhi.n	72fe <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
    72e0:	2301      	movs	r3, #1
    72e2:	f04f 0100 	mov.w	r1, #0
    72e6:	f363 0107 	bfi	r1, r3, #0, #8
    72ea:	4a36      	ldr	r2, [pc, #216]	; (73c4 <l2cap_recv+0xf0>)
    72ec:	4b36      	ldr	r3, [pc, #216]	; (73c8 <l2cap_recv+0xf4>)
    72ee:	4837      	ldr	r0, [pc, #220]	; (73cc <l2cap_recv+0xf8>)
    72f0:	1a9b      	subs	r3, r3, r2
    72f2:	08db      	lsrs	r3, r3, #3
    72f4:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid ident value in L2CAP PDU");
    72f8:	f011 f96a 	bl	185d0 <log_0>
		return 0;
    72fc:	e017      	b.n	732e <l2cap_recv+0x5a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    72fe:	2104      	movs	r1, #4
    7300:	f106 0008 	add.w	r0, r6, #8
    7304:	f013 ffc4 	bl	1b290 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    7308:	89b1      	ldrh	r1, [r6, #12]
	len = sys_le16_to_cpu(hdr->len);
    730a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    730c:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    730e:	4604      	mov	r4, r0
	if (buf->len != len) {
    7310:	d010      	beq.n	7334 <l2cap_recv+0x60>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    7312:	2001      	movs	r0, #1
    7314:	f04f 0300 	mov.w	r3, #0
    7318:	f360 0307 	bfi	r3, r0, #0, #8
    731c:	4c29      	ldr	r4, [pc, #164]	; (73c4 <l2cap_recv+0xf0>)
    731e:	482a      	ldr	r0, [pc, #168]	; (73c8 <l2cap_recv+0xf4>)
    7320:	1b00      	subs	r0, r0, r4
    7322:	08c0      	lsrs	r0, r0, #3
    7324:	f360 138f 	bfi	r3, r0, #6, #10
    7328:	4829      	ldr	r0, [pc, #164]	; (73d0 <l2cap_recv+0xfc>)
    732a:	f011 f972 	bl	18612 <log_2>
}
    732e:	2000      	movs	r0, #0
    7330:	b002      	add	sp, #8
    7332:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    7334:	7843      	ldrb	r3, [r0, #1]
    7336:	b963      	cbnz	r3, 7352 <l2cap_recv+0x7e>
		BT_ERR("Invalid ident value in L2CAP PDU");
    7338:	2301      	movs	r3, #1
    733a:	f04f 0100 	mov.w	r1, #0
    733e:	f363 0107 	bfi	r1, r3, #0, #8
    7342:	4a20      	ldr	r2, [pc, #128]	; (73c4 <l2cap_recv+0xf0>)
    7344:	4b20      	ldr	r3, [pc, #128]	; (73c8 <l2cap_recv+0xf4>)
    7346:	4823      	ldr	r0, [pc, #140]	; (73d4 <l2cap_recv+0x100>)
    7348:	1a9b      	subs	r3, r3, r2
    734a:	08db      	lsrs	r3, r3, #3
    734c:	f363 118f 	bfi	r1, r3, #6, #10
    7350:	e7d2      	b.n	72f8 <l2cap_recv+0x24>
	switch (hdr->code) {
    7352:	7801      	ldrb	r1, [r0, #0]
    7354:	2901      	cmp	r1, #1
    7356:	d0ea      	beq.n	732e <l2cap_recv+0x5a>
    7358:	2913      	cmp	r1, #19
    735a:	d10e      	bne.n	737a <l2cap_recv+0xa6>
	if (buf->len < sizeof(*rsp)) {
    735c:	2a01      	cmp	r2, #1
    735e:	d8e6      	bhi.n	732e <l2cap_recv+0x5a>
		BT_ERR("Too small LE conn param rsp");
    7360:	2301      	movs	r3, #1
    7362:	f04f 0100 	mov.w	r1, #0
    7366:	f363 0107 	bfi	r1, r3, #0, #8
    736a:	4a16      	ldr	r2, [pc, #88]	; (73c4 <l2cap_recv+0xf0>)
    736c:	4b16      	ldr	r3, [pc, #88]	; (73c8 <l2cap_recv+0xf4>)
    736e:	481a      	ldr	r0, [pc, #104]	; (73d8 <l2cap_recv+0x104>)
    7370:	1a9b      	subs	r3, r3, r2
    7372:	08db      	lsrs	r3, r3, #3
    7374:	f363 118f 	bfi	r1, r3, #6, #10
    7378:	e7be      	b.n	72f8 <l2cap_recv+0x24>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    737a:	2302      	movs	r3, #2
    737c:	f04f 0200 	mov.w	r2, #0
    7380:	f363 0207 	bfi	r2, r3, #0, #8
    7384:	480f      	ldr	r0, [pc, #60]	; (73c4 <l2cap_recv+0xf0>)
    7386:	4b10      	ldr	r3, [pc, #64]	; (73c8 <l2cap_recv+0xf4>)
    7388:	1a1b      	subs	r3, r3, r0
    738a:	08db      	lsrs	r3, r3, #3
    738c:	f363 128f 	bfi	r2, r3, #6, #10
    7390:	4812      	ldr	r0, [pc, #72]	; (73dc <l2cap_recv+0x108>)
    7392:	f011 f92a 	bl	185ea <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    7396:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    7398:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    739a:	2202      	movs	r2, #2
    739c:	2001      	movs	r0, #1
    739e:	f7ff fefd 	bl	719c <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    73a2:	4604      	mov	r4, r0
    73a4:	2800      	cmp	r0, #0
    73a6:	d0c2      	beq.n	732e <l2cap_recv+0x5a>
	rej = net_buf_add(buf, sizeof(*rej));
    73a8:	2102      	movs	r1, #2
    73aa:	3008      	adds	r0, #8
    73ac:	f013 ff3f 	bl	1b22e <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    73b0:	2300      	movs	r3, #0
    73b2:	7003      	strb	r3, [r0, #0]
    73b4:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    73b6:	4622      	mov	r2, r4
    73b8:	9300      	str	r3, [sp, #0]
    73ba:	2105      	movs	r1, #5
    73bc:	4628      	mov	r0, r5
    73be:	f012 f8b6 	bl	1952e <bt_l2cap_send_cb>
    73c2:	e7b4      	b.n	732e <l2cap_recv+0x5a>
    73c4:	0001e448 	.word	0x0001e448
    73c8:	0001e510 	.word	0x0001e510
    73cc:	0002027c 	.word	0x0002027c
    73d0:	0002029a 	.word	0x0002029a
    73d4:	000202bb 	.word	0x000202bb
    73d8:	000202dc 	.word	0x000202dc
    73dc:	000202f8 	.word	0x000202f8

000073e0 <bt_l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    73e0:	898b      	ldrh	r3, [r1, #12]
    73e2:	2b03      	cmp	r3, #3
{
    73e4:	b570      	push	{r4, r5, r6, lr}
    73e6:	4606      	mov	r6, r0
    73e8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    73ea:	d812      	bhi.n	7412 <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
    73ec:	2301      	movs	r3, #1
    73ee:	f04f 0100 	mov.w	r1, #0
    73f2:	f363 0107 	bfi	r1, r3, #0, #8
    73f6:	4a17      	ldr	r2, [pc, #92]	; (7454 <bt_l2cap_recv+0x74>)
    73f8:	4b17      	ldr	r3, [pc, #92]	; (7458 <bt_l2cap_recv+0x78>)
    73fa:	4818      	ldr	r0, [pc, #96]	; (745c <bt_l2cap_recv+0x7c>)
    73fc:	1a9b      	subs	r3, r3, r2
    73fe:	08db      	lsrs	r3, r3, #3
    7400:	f363 118f 	bfi	r1, r3, #6, #10
    7404:	f011 f8e4 	bl	185d0 <log_0>
	net_buf_unref(buf);
    7408:	4620      	mov	r0, r4
}
    740a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    740e:	f00b b8af 	b.w	12570 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7412:	2104      	movs	r1, #4
    7414:	f104 0008 	add.w	r0, r4, #8
    7418:	f013 ff3a 	bl	1b290 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    741c:	8845      	ldrh	r5, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    741e:	4630      	mov	r0, r6
    7420:	4629      	mov	r1, r5
    7422:	f012 f8a8 	bl	19576 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7426:	b978      	cbnz	r0, 7448 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    7428:	2302      	movs	r3, #2
    742a:	f04f 0200 	mov.w	r2, #0
    742e:	f363 0207 	bfi	r2, r3, #0, #8
    7432:	4908      	ldr	r1, [pc, #32]	; (7454 <bt_l2cap_recv+0x74>)
    7434:	4b08      	ldr	r3, [pc, #32]	; (7458 <bt_l2cap_recv+0x78>)
    7436:	480a      	ldr	r0, [pc, #40]	; (7460 <bt_l2cap_recv+0x80>)
    7438:	1a5b      	subs	r3, r3, r1
    743a:	08db      	lsrs	r3, r3, #3
    743c:	f363 128f 	bfi	r2, r3, #6, #10
    7440:	4629      	mov	r1, r5
    7442:	f011 f8d2 	bl	185ea <log_1>
		net_buf_unref(buf);
    7446:	e7df      	b.n	7408 <bt_l2cap_recv+0x28>
	chan->ops->recv(chan, buf);
    7448:	6843      	ldr	r3, [r0, #4]
    744a:	4621      	mov	r1, r4
    744c:	691b      	ldr	r3, [r3, #16]
    744e:	4798      	blx	r3
    7450:	e7da      	b.n	7408 <bt_l2cap_recv+0x28>
    7452:	bf00      	nop
    7454:	0001e448 	.word	0x0001e448
    7458:	0001e510 	.word	0x0001e510
    745c:	000201eb 	.word	0x000201eb
    7460:	00020208 	.word	0x00020208

00007464 <bt_l2cap_update_conn_param>:
{
    7464:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    7466:	4b15      	ldr	r3, [pc, #84]	; (74bc <bt_l2cap_update_conn_param+0x58>)
    7468:	781a      	ldrb	r2, [r3, #0]
    746a:	3201      	adds	r2, #1
	if (!ident) {
    746c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    7470:	bf08      	it	eq
    7472:	2201      	moveq	r2, #1
    7474:	701a      	strb	r2, [r3, #0]
{
    7476:	4605      	mov	r5, r0
    7478:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    747a:	2208      	movs	r2, #8
    747c:	7819      	ldrb	r1, [r3, #0]
    747e:	2012      	movs	r0, #18
    7480:	f7ff fe8c 	bl	719c <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    7484:	4606      	mov	r6, r0
    7486:	b1b0      	cbz	r0, 74b6 <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    7488:	2108      	movs	r1, #8
    748a:	4408      	add	r0, r1
    748c:	f013 fecf 	bl	1b22e <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    7490:	8823      	ldrh	r3, [r4, #0]
    7492:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    7494:	8863      	ldrh	r3, [r4, #2]
    7496:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    7498:	88a3      	ldrh	r3, [r4, #4]
    749a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    749c:	88e3      	ldrh	r3, [r4, #6]
    749e:	80c3      	strh	r3, [r0, #6]
    74a0:	2400      	movs	r4, #0
    74a2:	9400      	str	r4, [sp, #0]
    74a4:	4623      	mov	r3, r4
    74a6:	4632      	mov	r2, r6
    74a8:	2105      	movs	r1, #5
    74aa:	4628      	mov	r0, r5
    74ac:	f012 f83f 	bl	1952e <bt_l2cap_send_cb>
	return 0;
    74b0:	4620      	mov	r0, r4
}
    74b2:	b002      	add	sp, #8
    74b4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    74b6:	f06f 000b 	mvn.w	r0, #11
    74ba:	e7fa      	b.n	74b2 <bt_l2cap_update_conn_param+0x4e>
    74bc:	2000a126 	.word	0x2000a126

000074c0 <find_type_cb>:
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    74c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
    74c4:	680e      	ldr	r6, [r1, #0]
{
    74c6:	b092      	sub	sp, #72	; 0x48
    74c8:	4605      	mov	r5, r0
    74ca:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    74cc:	2700      	movs	r7, #0
    74ce:	f642 0301 	movw	r3, #10241	; 0x2801
    74d2:	a902      	add	r1, sp, #8
    74d4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    74d6:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    74da:	f88d 7008 	strb.w	r7, [sp, #8]
    74de:	f8ad 300a 	strh.w	r3, [sp, #10]
    74e2:	f011 fe21 	bl	19128 <bt_uuid_cmp>
    74e6:	2800      	cmp	r0, #0
    74e8:	d03e      	beq.n	7568 <find_type_cb+0xa8>
		goto skip;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    74ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    74ee:	a903      	add	r1, sp, #12
    74f0:	6828      	ldr	r0, [r5, #0]
    74f2:	f88d 700c 	strb.w	r7, [sp, #12]
    74f6:	f8ad 300e 	strh.w	r3, [sp, #14]
    74fa:	f011 fe15 	bl	19128 <bt_uuid_cmp>
    74fe:	b150      	cbz	r0, 7516 <find_type_cb+0x56>
		if (data->group &&
    7500:	68a3      	ldr	r3, [r4, #8]
    7502:	b123      	cbz	r3, 750e <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    7504:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    7506:	8859      	ldrh	r1, [r3, #2]
    7508:	4291      	cmp	r1, r2
    750a:	d200      	bcs.n	750e <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    750c:	805a      	strh	r2, [r3, #2]
		}
		return BT_GATT_ITER_CONTINUE;
    750e:	2001      	movs	r0, #1
	return BT_GATT_ITER_CONTINUE;

skip:
	data->group = NULL;
	return BT_GATT_ITER_CONTINUE;
}
    7510:	b012      	add	sp, #72	; 0x48
    7512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    7516:	6862      	ldr	r2, [r4, #4]
    7518:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
    751c:	8992      	ldrh	r2, [r2, #12]
    751e:	1a9b      	subs	r3, r3, r2
    7520:	2b03      	cmp	r3, #3
    7522:	d9f5      	bls.n	7510 <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    7524:	2310      	movs	r3, #16
    7526:	9000      	str	r0, [sp, #0]
    7528:	686e      	ldr	r6, [r5, #4]
    752a:	eb0d 0203 	add.w	r2, sp, r3
    752e:	4629      	mov	r1, r5
    7530:	4640      	mov	r0, r8
    7532:	47b0      	blx	r6
	if (read < 0) {
    7534:	1e06      	subs	r6, r0, #0
    7536:	db17      	blt.n	7568 <find_type_cb+0xa8>
	if (read != data->value_len) {
    7538:	7c22      	ldrb	r2, [r4, #16]
    753a:	68e0      	ldr	r0, [r4, #12]
    753c:	4296      	cmp	r6, r2
    753e:	d03c      	beq.n	75ba <find_type_cb+0xfa>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    7540:	4601      	mov	r1, r0
    7542:	a80d      	add	r0, sp, #52	; 0x34
    7544:	f011 fe1a 	bl	1917c <bt_uuid_create>
    7548:	b988      	cbnz	r0, 756e <find_type_cb+0xae>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    754a:	2302      	movs	r3, #2
    754c:	f04f 0200 	mov.w	r2, #0
    7550:	f363 0207 	bfi	r2, r3, #0, #8
    7554:	491b      	ldr	r1, [pc, #108]	; (75c4 <find_type_cb+0x104>)
    7556:	4b1c      	ldr	r3, [pc, #112]	; (75c8 <find_type_cb+0x108>)
    7558:	481c      	ldr	r0, [pc, #112]	; (75cc <find_type_cb+0x10c>)
    755a:	1a5b      	subs	r3, r3, r1
    755c:	08db      	lsrs	r3, r3, #3
    755e:	7c21      	ldrb	r1, [r4, #16]
    7560:	f363 128f 	bfi	r2, r3, #6, #10
			BT_WARN("Unable to create UUID: size %d", read);
    7564:	f011 f841 	bl	185ea <log_1>
	data->group = NULL;
    7568:	2300      	movs	r3, #0
    756a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    756c:	e7cf      	b.n	750e <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    756e:	b2f2      	uxtb	r2, r6
    7570:	a904      	add	r1, sp, #16
    7572:	a808      	add	r0, sp, #32
    7574:	f011 fe02 	bl	1917c <bt_uuid_create>
    7578:	b968      	cbnz	r0, 7596 <find_type_cb+0xd6>
			BT_WARN("Unable to create UUID: size %d", read);
    757a:	2302      	movs	r3, #2
    757c:	f04f 0200 	mov.w	r2, #0
    7580:	f363 0207 	bfi	r2, r3, #0, #8
    7584:	490f      	ldr	r1, [pc, #60]	; (75c4 <find_type_cb+0x104>)
    7586:	4b10      	ldr	r3, [pc, #64]	; (75c8 <find_type_cb+0x108>)
    7588:	4811      	ldr	r0, [pc, #68]	; (75d0 <find_type_cb+0x110>)
    758a:	1a5b      	subs	r3, r3, r1
    758c:	08db      	lsrs	r3, r3, #3
    758e:	f363 128f 	bfi	r2, r3, #6, #10
    7592:	4631      	mov	r1, r6
    7594:	e7e6      	b.n	7564 <find_type_cb+0xa4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    7596:	a908      	add	r1, sp, #32
    7598:	a80d      	add	r0, sp, #52	; 0x34
    759a:	f011 fdc5 	bl	19128 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    759e:	2800      	cmp	r0, #0
    75a0:	d1e2      	bne.n	7568 <find_type_cb+0xa8>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    75a2:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    75a4:	2300      	movs	r3, #0
    75a6:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    75a8:	2104      	movs	r1, #4
    75aa:	3008      	adds	r0, #8
    75ac:	f013 fe3f 	bl	1b22e <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    75b0:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    75b2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    75b4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    75b6:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    75b8:	e7a9      	b.n	750e <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    75ba:	4632      	mov	r2, r6
    75bc:	a904      	add	r1, sp, #16
    75be:	f011 fb2c 	bl	18c1a <memcmp>
    75c2:	e7ec      	b.n	759e <find_type_cb+0xde>
    75c4:	0001e448 	.word	0x0001e448
    75c8:	0001e450 	.word	0x0001e450
    75cc:	00020492 	.word	0x00020492
    75d0:	000204b1 	.word	0x000204b1

000075d4 <att_send>:
{
    75d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    75d8:	4698      	mov	r8, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    75da:	688b      	ldr	r3, [r1, #8]
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	2bd2      	cmp	r3, #210	; 0xd2
{
    75e0:	4607      	mov	r7, r0
    75e2:	460c      	mov	r4, r1
    75e4:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    75e6:	d118      	bne.n	761a <att_send+0x46>
		err = bt_smp_sign(conn, buf);
    75e8:	f012 ff0d 	bl	1a406 <bt_smp_sign>
		if (err) {
    75ec:	4606      	mov	r6, r0
    75ee:	b1a0      	cbz	r0, 761a <att_send+0x46>
			BT_ERR("Error signing data");
    75f0:	2301      	movs	r3, #1
    75f2:	f04f 0100 	mov.w	r1, #0
    75f6:	f363 0107 	bfi	r1, r3, #0, #8
    75fa:	4a13      	ldr	r2, [pc, #76]	; (7648 <att_send+0x74>)
    75fc:	4b13      	ldr	r3, [pc, #76]	; (764c <att_send+0x78>)
    75fe:	4814      	ldr	r0, [pc, #80]	; (7650 <att_send+0x7c>)
    7600:	1a9b      	subs	r3, r3, r2
    7602:	08db      	lsrs	r3, r3, #3
    7604:	f363 118f 	bfi	r1, r3, #6, #10
    7608:	f010 ffe2 	bl	185d0 <log_0>
			net_buf_unref(buf);
    760c:	4620      	mov	r0, r4
    760e:	f00a ffaf 	bl	12570 <net_buf_unref>
}
    7612:	4630      	mov	r0, r6
    7614:	b002      	add	sp, #8
    7616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    761a:	b95d      	cbnz	r5, 7634 <att_send+0x60>
	switch (att_op_get_type(buf->data[0])) {
    761c:	68a3      	ldr	r3, [r4, #8]
    761e:	7818      	ldrb	r0, [r3, #0]
    7620:	f011 ffb4 	bl	1958c <att_op_get_type>
    7624:	3801      	subs	r0, #1
    7626:	b2c0      	uxtb	r0, r0
    7628:	2804      	cmp	r0, #4
    762a:	bf96      	itet	ls
    762c:	4b09      	ldrls	r3, [pc, #36]	; (7654 <att_send+0x80>)
    762e:	4d0a      	ldrhi	r5, [pc, #40]	; (7658 <att_send+0x84>)
    7630:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    7634:	f8cd 8000 	str.w	r8, [sp]
    7638:	462b      	mov	r3, r5
    763a:	4622      	mov	r2, r4
    763c:	2104      	movs	r1, #4
    763e:	4638      	mov	r0, r7
    7640:	f011 ff75 	bl	1952e <bt_l2cap_send_cb>
    7644:	4606      	mov	r6, r0
    7646:	e7e4      	b.n	7612 <att_send+0x3e>
    7648:	0001e448 	.word	0x0001e448
    764c:	0001e450 	.word	0x0001e450
    7650:	0002039a 	.word	0x0002039a
    7654:	0001e824 	.word	0x0001e824
    7658:	0001987d 	.word	0x0001987d

0000765c <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    765c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	};
	struct bt_att *att;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    765e:	2200      	movs	r2, #0
{
    7660:	4606      	mov	r6, r0
    7662:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    7664:	4814      	ldr	r0, [pc, #80]	; (76b8 <bt_att_accept+0x5c>)
    7666:	a901      	add	r1, sp, #4
    7668:	f00f fa54 	bl	16b14 <k_mem_slab_alloc>
    766c:	4604      	mov	r4, r0
    766e:	b198      	cbz	r0, 7698 <bt_att_accept+0x3c>
		BT_ERR("No available ATT context for conn %p", conn);
    7670:	2301      	movs	r3, #1
    7672:	f04f 0200 	mov.w	r2, #0
    7676:	f363 0207 	bfi	r2, r3, #0, #8
    767a:	4910      	ldr	r1, [pc, #64]	; (76bc <bt_att_accept+0x60>)
    767c:	4b10      	ldr	r3, [pc, #64]	; (76c0 <bt_att_accept+0x64>)
    767e:	4811      	ldr	r0, [pc, #68]	; (76c4 <bt_att_accept+0x68>)
    7680:	1a5b      	subs	r3, r3, r1
    7682:	08db      	lsrs	r3, r3, #3
    7684:	f363 128f 	bfi	r2, r3, #6, #10
    7688:	4631      	mov	r1, r6
    768a:	f010 ffae 	bl	185ea <log_1>
		return -ENOMEM;
    768e:	f06f 040b 	mvn.w	r4, #11
	att->chan.chan.ops = &ops;
	k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
	*chan = &att->chan.chan;

	return 0;
}
    7692:	4620      	mov	r0, r4
    7694:	b002      	add	sp, #8
    7696:	bd70      	pop	{r4, r5, r6, pc}
	(void)memset(att, 0, sizeof(*att));
    7698:	4601      	mov	r1, r0
    769a:	22f8      	movs	r2, #248	; 0xf8
    769c:	9801      	ldr	r0, [sp, #4]
    769e:	f011 faf6 	bl	18c8e <memset>
	att->chan.chan.ops = &ops;
    76a2:	9801      	ldr	r0, [sp, #4]
    76a4:	4b08      	ldr	r3, [pc, #32]	; (76c8 <bt_att_accept+0x6c>)
    76a6:	6043      	str	r3, [r0, #4]
	z_impl_k_sem_init(sem, initial_count, limit);
    76a8:	2203      	movs	r2, #3
    76aa:	4611      	mov	r1, r2
    76ac:	30c0      	adds	r0, #192	; 0xc0
    76ae:	f016 fb98 	bl	1dde2 <z_impl_k_sem_init>
	*chan = &att->chan.chan;
    76b2:	9b01      	ldr	r3, [sp, #4]
    76b4:	602b      	str	r3, [r5, #0]
	return 0;
    76b6:	e7ec      	b.n	7692 <bt_att_accept+0x36>
    76b8:	2000d1c0 	.word	0x2000d1c0
    76bc:	0001e448 	.word	0x0001e448
    76c0:	0001e450 	.word	0x0001e450
    76c4:	000203b9 	.word	0x000203b9
    76c8:	0001e920 	.word	0x0001e920

000076cc <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    76cc:	7a83      	ldrb	r3, [r0, #10]
    76ce:	2b06      	cmp	r3, #6
{
    76d0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    76d2:	d00f      	beq.n	76f4 <att_chan_get+0x28>
		BT_WARN("Not connected");
    76d4:	2302      	movs	r3, #2
    76d6:	f04f 0100 	mov.w	r1, #0
    76da:	f363 0107 	bfi	r1, r3, #0, #8
    76de:	4a1a      	ldr	r2, [pc, #104]	; (7748 <att_chan_get+0x7c>)
    76e0:	4b1a      	ldr	r3, [pc, #104]	; (774c <att_chan_get+0x80>)
    76e2:	481b      	ldr	r0, [pc, #108]	; (7750 <att_chan_get+0x84>)
    76e4:	1a9b      	subs	r3, r3, r2
    76e6:	08db      	lsrs	r3, r3, #3
    76e8:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("ATT context flagged as disconnected");
    76ec:	f010 ff70 	bl	185d0 <log_0>
		return NULL;
    76f0:	2400      	movs	r4, #0
    76f2:	e012      	b.n	771a <att_chan_get+0x4e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    76f4:	2104      	movs	r1, #4
    76f6:	f011 ff3e 	bl	19576 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    76fa:	4604      	mov	r4, r0
    76fc:	b978      	cbnz	r0, 771e <att_chan_get+0x52>
		BT_ERR("Unable to find ATT channel");
    76fe:	2301      	movs	r3, #1
    7700:	f04f 0100 	mov.w	r1, #0
    7704:	f363 0107 	bfi	r1, r3, #0, #8
    7708:	4a0f      	ldr	r2, [pc, #60]	; (7748 <att_chan_get+0x7c>)
    770a:	4b10      	ldr	r3, [pc, #64]	; (774c <att_chan_get+0x80>)
    770c:	4811      	ldr	r0, [pc, #68]	; (7754 <att_chan_get+0x88>)
    770e:	1a9b      	subs	r3, r3, r2
    7710:	08db      	lsrs	r3, r3, #3
    7712:	f363 118f 	bfi	r1, r3, #6, #10
    7716:	f010 ff5b 	bl	185d0 <log_0>
}
    771a:	4620      	mov	r0, r4
    771c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    771e:	f3bf 8f5b 	dmb	ish
    7722:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    7726:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    772a:	075b      	lsls	r3, r3, #29
    772c:	d5f5      	bpl.n	771a <att_chan_get+0x4e>
		BT_WARN("ATT context flagged as disconnected");
    772e:	2302      	movs	r3, #2
    7730:	f04f 0100 	mov.w	r1, #0
    7734:	f363 0107 	bfi	r1, r3, #0, #8
    7738:	4a03      	ldr	r2, [pc, #12]	; (7748 <att_chan_get+0x7c>)
    773a:	4b04      	ldr	r3, [pc, #16]	; (774c <att_chan_get+0x80>)
    773c:	4806      	ldr	r0, [pc, #24]	; (7758 <att_chan_get+0x8c>)
    773e:	1a9b      	subs	r3, r3, r2
    7740:	08db      	lsrs	r3, r3, #3
    7742:	f363 118f 	bfi	r1, r3, #6, #10
    7746:	e7d1      	b.n	76ec <att_chan_get+0x20>
    7748:	0001e448 	.word	0x0001e448
    774c:	0001e450 	.word	0x0001e450
    7750:	00020336 	.word	0x00020336
    7754:	00020344 	.word	0x00020344
    7758:	0002035f 	.word	0x0002035f

0000775c <bt_att_connected>:
{
    775c:	b510      	push	{r4, lr}
    775e:	4604      	mov	r4, r0
	z_impl_k_queue_init(queue);
    7760:	30d8      	adds	r0, #216	; 0xd8
    7762:	f016 f9b4 	bl	1dace <z_impl_k_queue_init>
    7766:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    776a:	f016 f9b0 	bl	1dace <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    776e:	2317      	movs	r3, #23
    7770:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7774:	86e3      	strh	r3, [r4, #54]	; 0x36
	k_delayed_work_init(&att->timeout_work, att_timeout);
    7776:	4904      	ldr	r1, [pc, #16]	; (7788 <bt_att_connected+0x2c>)
    7778:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    777c:	f016 fbaf 	bl	1dede <k_delayed_work_init>
	list->head = NULL;
    7780:	2300      	movs	r3, #0
	list->tail = NULL;
    7782:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
}
    7786:	bd10      	pop	{r4, pc}
    7788:	0000838d 	.word	0x0000838d

0000778c <att_req_sent>:
{
    778c:	b538      	push	{r3, r4, r5, lr}
    778e:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7790:	2104      	movs	r1, #4
{
    7792:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7794:	f011 fee4 	bl	19560 <bt_l2cap_le_lookup_tx_cid>
	if (att->req) {
    7798:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    779c:	b133      	cbz	r3, 77ac <att_req_sent+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    779e:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
    77a2:	f247 5230 	movw	r2, #30000	; 0x7530
    77a6:	4804      	ldr	r0, [pc, #16]	; (77b8 <att_req_sent+0x2c>)
    77a8:	f00f ff3c 	bl	17624 <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    77ac:	4629      	mov	r1, r5
    77ae:	4620      	mov	r0, r4
}
    77b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    77b4:	f012 b862 	b.w	1987c <att_pdu_sent>
    77b8:	20005c68 	.word	0x20005c68

000077bc <prep_write_cb>:
{
    77bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    77be:	460c      	mov	r4, r1
    77c0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    77c2:	4601      	mov	r1, r0
    77c4:	222a      	movs	r2, #42	; 0x2a
    77c6:	6820      	ldr	r0, [r4, #0]
    77c8:	f012 fca6 	bl	1a118 <bt_gatt_check_perm>
    77cc:	4605      	mov	r5, r0
    77ce:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    77d0:	2800      	cmp	r0, #0
    77d2:	d12d      	bne.n	7830 <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    77d4:	7cb3      	ldrb	r3, [r6, #18]
    77d6:	065b      	lsls	r3, r3, #25
    77d8:	d514      	bpl.n	7804 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    77da:	2301      	movs	r3, #1
    77dc:	9301      	str	r3, [sp, #4]
    77de:	89e3      	ldrh	r3, [r4, #14]
    77e0:	9300      	str	r3, [sp, #0]
    77e2:	68b7      	ldr	r7, [r6, #8]
    77e4:	89a3      	ldrh	r3, [r4, #12]
    77e6:	68a2      	ldr	r2, [r4, #8]
    77e8:	6820      	ldr	r0, [r4, #0]
    77ea:	4631      	mov	r1, r6
    77ec:	47b8      	blx	r7
	if (write != 0) {
    77ee:	b148      	cbz	r0, 7804 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    77f0:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    77f4:	bf26      	itte	cs
    77f6:	4240      	negcs	r0, r0
    77f8:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    77fa:	200e      	movcc	r0, #14
		data->err = err_to_att(write);
    77fc:	7420      	strb	r0, [r4, #16]
}
    77fe:	4628      	mov	r0, r5
    7800:	b003      	add	sp, #12
    7802:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    7804:	2100      	movs	r1, #0
    7806:	480b      	ldr	r0, [pc, #44]	; (7834 <prep_write_cb+0x78>)
    7808:	f013 fcdd 	bl	1b1c6 <net_buf_alloc_fixed>
    780c:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    780e:	b910      	cbnz	r0, 7816 <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    7810:	2309      	movs	r3, #9
    7812:	7423      	strb	r3, [r4, #16]
		return BT_GATT_ITER_STOP;
    7814:	e7f3      	b.n	77fe <prep_write_cb+0x42>
	attr_data->handle = attr->handle;
    7816:	8a33      	ldrh	r3, [r6, #16]
    7818:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    781a:	89e3      	ldrh	r3, [r4, #14]
    781c:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    781e:	89a2      	ldrh	r2, [r4, #12]
    7820:	68a1      	ldr	r1, [r4, #8]
    7822:	3008      	adds	r0, #8
    7824:	f013 fd09 	bl	1b23a <net_buf_simple_add_mem>
	data->err = 0U;
    7828:	2300      	movs	r3, #0
    782a:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    782c:	2501      	movs	r5, #1
    782e:	e7e6      	b.n	77fe <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    7830:	2500      	movs	r5, #0
    7832:	e7e4      	b.n	77fe <prep_write_cb+0x42>
    7834:	2000d358 	.word	0x2000d358

00007838 <att_send_req>:
{
    7838:	b573      	push	{r0, r1, r4, r5, r6, lr}
    783a:	4605      	mov	r5, r0
    783c:	460c      	mov	r4, r1
	att->req = req;
    783e:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	return z_impl_k_sem_take(sem, timeout);
    7842:	2100      	movs	r1, #0
    7844:	30c0      	adds	r0, #192	; 0xc0
    7846:	f00f fda7 	bl	17398 <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    784a:	2800      	cmp	r0, #0
    784c:	da08      	bge.n	7860 <att_send_req+0x28>
		k_fifo_put(&att->tx_queue, req->buf);
    784e:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    7852:	6921      	ldr	r1, [r4, #16]
    7854:	f016 f943 	bl	1dade <k_queue_append>
		return 0;
    7858:	2500      	movs	r5, #0
}
    785a:	4628      	mov	r0, r5
    785c:	b002      	add	sp, #8
    785e:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    7860:	6926      	ldr	r6, [r4, #16]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    7862:	f106 0008 	add.w	r0, r6, #8
    7866:	f013 fd23 	bl	1b2b0 <net_buf_simple_headroom>
	state->len = buf->len;
    786a:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    786c:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    786e:	81e3      	strh	r3, [r4, #14]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    7870:	6920      	ldr	r0, [r4, #16]
    7872:	682d      	ldr	r5, [r5, #0]
    7874:	f013 fcd7 	bl	1b226 <net_buf_ref>
    7878:	6923      	ldr	r3, [r4, #16]
	switch (att_op_get_type(buf->data[0])) {
    787a:	689b      	ldr	r3, [r3, #8]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    787c:	4602      	mov	r2, r0
	switch (att_op_get_type(buf->data[0])) {
    787e:	7818      	ldrb	r0, [r3, #0]
    7880:	f011 fe84 	bl	1958c <att_op_get_type>
    7884:	3801      	subs	r0, #1
    7886:	b2c0      	uxtb	r0, r0
    7888:	2804      	cmp	r0, #4
    788a:	bf96      	itet	ls
    788c:	4b08      	ldrls	r3, [pc, #32]	; (78b0 <att_send_req+0x78>)
    788e:	4b09      	ldrhi	r3, [pc, #36]	; (78b4 <att_send_req+0x7c>)
    7890:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    7894:	2600      	movs	r6, #0
    7896:	4628      	mov	r0, r5
    7898:	9600      	str	r6, [sp, #0]
    789a:	2104      	movs	r1, #4
    789c:	f011 fe47 	bl	1952e <bt_l2cap_send_cb>
	if (err) {
    78a0:	4605      	mov	r5, r0
    78a2:	2800      	cmp	r0, #0
    78a4:	d0d9      	beq.n	785a <att_send_req+0x22>
		net_buf_unref(req->buf);
    78a6:	6920      	ldr	r0, [r4, #16]
    78a8:	f00a fe62 	bl	12570 <net_buf_unref>
		req->buf = NULL;
    78ac:	6126      	str	r6, [r4, #16]
		return err;
    78ae:	e7d4      	b.n	785a <att_send_req+0x22>
    78b0:	0001e824 	.word	0x0001e824
    78b4:	0001987d 	.word	0x0001987d

000078b8 <bt_att_create_pdu>:
{
    78b8:	b570      	push	{r4, r5, r6, lr}
    78ba:	460e      	mov	r6, r1
    78bc:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    78be:	f7ff ff05 	bl	76cc <att_chan_get>
	if (!att) {
    78c2:	4604      	mov	r4, r0
    78c4:	b198      	cbz	r0, 78ee <bt_att_create_pdu+0x36>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    78c6:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    78ca:	1c6a      	adds	r2, r5, #1
    78cc:	428a      	cmp	r2, r1
    78ce:	d910      	bls.n	78f2 <bt_att_create_pdu+0x3a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    78d0:	2002      	movs	r0, #2
    78d2:	f04f 0300 	mov.w	r3, #0
    78d6:	f360 0307 	bfi	r3, r0, #0, #8
    78da:	4c1a      	ldr	r4, [pc, #104]	; (7944 <bt_att_create_pdu+0x8c>)
    78dc:	481a      	ldr	r0, [pc, #104]	; (7948 <bt_att_create_pdu+0x90>)
    78de:	1b00      	subs	r0, r0, r4
    78e0:	08c0      	lsrs	r0, r0, #3
    78e2:	f360 138f 	bfi	r3, r0, #6, #10
    78e6:	4819      	ldr	r0, [pc, #100]	; (794c <bt_att_create_pdu+0x94>)
    78e8:	f010 fe93 	bl	18612 <log_2>
		return NULL;
    78ec:	2400      	movs	r4, #0
}
    78ee:	4620      	mov	r0, r4
    78f0:	bd70      	pop	{r4, r5, r6, pc}
	switch (att_op_get_type(op)) {
    78f2:	4630      	mov	r0, r6
    78f4:	f011 fe4a 	bl	1958c <att_op_get_type>
    78f8:	2802      	cmp	r0, #2
    78fa:	d001      	beq.n	7900 <bt_att_create_pdu+0x48>
    78fc:	2804      	cmp	r0, #4
    78fe:	d117      	bne.n	7930 <bt_att_create_pdu+0x78>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    7900:	f247 5230 	movw	r2, #30000	; 0x7530
		buf = bt_l2cap_create_pdu(NULL, 0);
    7904:	2100      	movs	r1, #0
    7906:	4608      	mov	r0, r1
    7908:	f011 fe0e 	bl	19528 <bt_l2cap_create_pdu_timeout>
    790c:	4604      	mov	r4, r0
	if (!buf) {
    790e:	b990      	cbnz	r0, 7936 <bt_att_create_pdu+0x7e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    7910:	2301      	movs	r3, #1
    7912:	f04f 0200 	mov.w	r2, #0
    7916:	f363 0207 	bfi	r2, r3, #0, #8
    791a:	490a      	ldr	r1, [pc, #40]	; (7944 <bt_att_create_pdu+0x8c>)
    791c:	4b0a      	ldr	r3, [pc, #40]	; (7948 <bt_att_create_pdu+0x90>)
    791e:	480c      	ldr	r0, [pc, #48]	; (7950 <bt_att_create_pdu+0x98>)
    7920:	1a5b      	subs	r3, r3, r1
    7922:	08db      	lsrs	r3, r3, #3
    7924:	f363 128f 	bfi	r2, r3, #6, #10
    7928:	4631      	mov	r1, r6
    792a:	f010 fe5e 	bl	185ea <log_1>
		return NULL;
    792e:	e7de      	b.n	78ee <bt_att_create_pdu+0x36>
		buf = bt_l2cap_create_pdu(NULL, 0);
    7930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7934:	e7e6      	b.n	7904 <bt_att_create_pdu+0x4c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7936:	2101      	movs	r1, #1
    7938:	3008      	adds	r0, #8
    793a:	f013 fc78 	bl	1b22e <net_buf_simple_add>
	hdr->code = op;
    793e:	7006      	strb	r6, [r0, #0]
	return buf;
    7940:	e7d5      	b.n	78ee <bt_att_create_pdu+0x36>
    7942:	bf00      	nop
    7944:	0001e448 	.word	0x0001e448
    7948:	0001e450 	.word	0x0001e450
    794c:	000203de 	.word	0x000203de
    7950:	00020254 	.word	0x00020254

00007954 <att_indicate>:
{
    7954:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7956:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    7958:	f101 0008 	add.w	r0, r1, #8
{
    795c:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    795e:	f013 fc9f 	bl	1b2a0 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    7962:	89ab      	ldrh	r3, [r5, #12]
    7964:	68aa      	ldr	r2, [r5, #8]
    7966:	4601      	mov	r1, r0
    7968:	4620      	mov	r0, r4
    796a:	f012 fcd3 	bl	1a314 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    796e:	2200      	movs	r2, #0
    7970:	211e      	movs	r1, #30
    7972:	4620      	mov	r0, r4
    7974:	f7ff ffa0 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    7978:	4602      	mov	r2, r0
    797a:	b130      	cbz	r0, 798a <att_indicate+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent, NULL);
    797c:	2300      	movs	r3, #0
    797e:	9300      	str	r3, [sp, #0]
    7980:	2104      	movs	r1, #4
    7982:	4b03      	ldr	r3, [pc, #12]	; (7990 <att_indicate+0x3c>)
    7984:	4620      	mov	r0, r4
    7986:	f011 fdd2 	bl	1952e <bt_l2cap_send_cb>
}
    798a:	2000      	movs	r0, #0
    798c:	b003      	add	sp, #12
    798e:	bd30      	pop	{r4, r5, pc}
    7990:	000198d5 	.word	0x000198d5

00007994 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    7994:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7996:	881b      	ldrh	r3, [r3, #0]
    7998:	2b16      	cmp	r3, #22
{
    799a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    799e:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    79a0:	d91e      	bls.n	79e0 <att_mtu_req+0x4c>
	struct bt_conn *conn = att->chan.chan.conn;
    79a2:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    79a6:	2202      	movs	r2, #2
    79a8:	2103      	movs	r1, #3
    79aa:	4640      	mov	r0, r8
    79ac:	f7ff ff84 	bl	78b8 <bt_att_create_pdu>
	if (!pdu) {
    79b0:	4607      	mov	r7, r0
    79b2:	b1b8      	cbz	r0, 79e4 <att_mtu_req+0x50>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    79b4:	2102      	movs	r1, #2
    79b6:	3008      	adds	r0, #8
    79b8:	f013 fc39 	bl	1b22e <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    79bc:	2400      	movs	r4, #0
    79be:	2617      	movs	r6, #23
    79c0:	7006      	strb	r6, [r0, #0]
    79c2:	7044      	strb	r4, [r0, #1]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    79c4:	4b08      	ldr	r3, [pc, #32]	; (79e8 <att_mtu_req+0x54>)
    79c6:	9400      	str	r4, [sp, #0]
    79c8:	463a      	mov	r2, r7
    79ca:	2104      	movs	r1, #4
    79cc:	4640      	mov	r0, r8
    79ce:	f011 fdae 	bl	1952e <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    79d2:	86ee      	strh	r6, [r5, #54]	; 0x36
	att->chan.tx.mtu = att->chan.rx.mtu;
    79d4:	f8a5 6042 	strh.w	r6, [r5, #66]	; 0x42
	return 0;
    79d8:	4620      	mov	r0, r4
}
    79da:	b002      	add	sp, #8
    79dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    79e0:	2004      	movs	r0, #4
    79e2:	e7fa      	b.n	79da <att_mtu_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    79e4:	200e      	movs	r0, #14
    79e6:	e7f8      	b.n	79da <att_mtu_req+0x46>
    79e8:	00019907 	.word	0x00019907

000079ec <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    79ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    79f0:	4688      	mov	r8, r1
    79f2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    79f4:	2101      	movs	r1, #1
    79f6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    79f8:	4605      	mov	r5, r0
    79fa:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    79fc:	f7ff ff5c 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    7a00:	4604      	mov	r4, r0
    7a02:	b180      	cbz	r0, 7a26 <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7a04:	2104      	movs	r1, #4
    7a06:	3008      	adds	r0, #8
    7a08:	f013 fc11 	bl	1b22e <net_buf_simple_add>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    7a0c:	2300      	movs	r3, #0
	rsp->request = req;
    7a0e:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    7a12:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    7a16:	70c6      	strb	r6, [r0, #3]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    7a18:	4622      	mov	r2, r4
    7a1a:	9300      	str	r3, [sp, #0]
    7a1c:	2104      	movs	r1, #4
    7a1e:	4b03      	ldr	r3, [pc, #12]	; (7a2c <send_err_rsp.part.11+0x40>)
    7a20:	4628      	mov	r0, r5
    7a22:	f011 fd84 	bl	1952e <bt_l2cap_send_cb>
}
    7a26:	b002      	add	sp, #8
    7a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a2c:	00019907 	.word	0x00019907

00007a30 <bt_att_recv>:
{
    7a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    7a32:	898b      	ldrh	r3, [r1, #12]
{
    7a34:	4604      	mov	r4, r0
    7a36:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    7a38:	b97b      	cbnz	r3, 7a5a <bt_att_recv+0x2a>
		BT_ERR("Too small ATT PDU received");
    7a3a:	2301      	movs	r3, #1
    7a3c:	f04f 0100 	mov.w	r1, #0
    7a40:	f363 0107 	bfi	r1, r3, #0, #8
    7a44:	4a51      	ldr	r2, [pc, #324]	; (7b8c <bt_att_recv+0x15c>)
    7a46:	4b52      	ldr	r3, [pc, #328]	; (7b90 <bt_att_recv+0x160>)
    7a48:	4852      	ldr	r0, [pc, #328]	; (7b94 <bt_att_recv+0x164>)
    7a4a:	1a9b      	subs	r3, r3, r2
    7a4c:	08db      	lsrs	r3, r3, #3
    7a4e:	f363 118f 	bfi	r1, r3, #6, #10
			BT_WARN("Ignoring unexpected indication");
    7a52:	f010 fdbd 	bl	185d0 <log_0>
}
    7a56:	2000      	movs	r0, #0
    7a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7a5a:	2101      	movs	r1, #1
    7a5c:	f107 0008 	add.w	r0, r7, #8
    7a60:	f013 fc16 	bl	1b290 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    7a64:	4a4c      	ldr	r2, [pc, #304]	; (7b98 <bt_att_recv+0x168>)
    7a66:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7a68:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7a6a:	2300      	movs	r3, #0
    7a6c:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
    7a6e:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    7a72:	428e      	cmp	r6, r1
    7a74:	d122      	bne.n	7abc <bt_att_recv+0x8c>
		if (handler->type == ATT_REQUEST &&
    7a76:	00db      	lsls	r3, r3, #3
    7a78:	441a      	add	r2, r3
    7a7a:	7896      	ldrb	r6, [r2, #2]
    7a7c:	2e01      	cmp	r6, #1
    7a7e:	d13c      	bne.n	7afa <bt_att_recv+0xca>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7a80:	f3bf 8f5b 	dmb	ish
    7a84:	f104 0290 	add.w	r2, r4, #144	; 0x90
    7a88:	e852 1f00 	ldrex	r1, [r2]
    7a8c:	f041 0c01 	orr.w	ip, r1, #1
    7a90:	e842 ce00 	strex	lr, ip, [r2]
    7a94:	f1be 0f00 	cmp.w	lr, #0
    7a98:	d1f6      	bne.n	7a88 <bt_att_recv+0x58>
    7a9a:	f3bf 8f5b 	dmb	ish
    7a9e:	07c9      	lsls	r1, r1, #31
    7aa0:	d54b      	bpl.n	7b3a <bt_att_recv+0x10a>
			BT_WARN("Ignoring unexpected request");
    7aa2:	2302      	movs	r3, #2
    7aa4:	f04f 0100 	mov.w	r1, #0
    7aa8:	f363 0107 	bfi	r1, r3, #0, #8
    7aac:	4a37      	ldr	r2, [pc, #220]	; (7b8c <bt_att_recv+0x15c>)
    7aae:	4b38      	ldr	r3, [pc, #224]	; (7b90 <bt_att_recv+0x160>)
    7ab0:	483a      	ldr	r0, [pc, #232]	; (7b9c <bt_att_recv+0x16c>)
    7ab2:	1a9b      	subs	r3, r3, r2
    7ab4:	08db      	lsrs	r3, r3, #3
    7ab6:	f363 118f 	bfi	r1, r3, #6, #10
    7aba:	e7ca      	b.n	7a52 <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7abc:	3301      	adds	r3, #1
    7abe:	2b1b      	cmp	r3, #27
    7ac0:	d1d5      	bne.n	7a6e <bt_att_recv+0x3e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    7ac2:	2302      	movs	r3, #2
    7ac4:	f04f 0200 	mov.w	r2, #0
    7ac8:	f363 0207 	bfi	r2, r3, #0, #8
    7acc:	482f      	ldr	r0, [pc, #188]	; (7b8c <bt_att_recv+0x15c>)
    7ace:	4b30      	ldr	r3, [pc, #192]	; (7b90 <bt_att_recv+0x160>)
    7ad0:	1a1b      	subs	r3, r3, r0
    7ad2:	08db      	lsrs	r3, r3, #3
    7ad4:	4832      	ldr	r0, [pc, #200]	; (7ba0 <bt_att_recv+0x170>)
    7ad6:	f363 128f 	bfi	r2, r3, #6, #10
    7ada:	f010 fd86 	bl	185ea <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    7ade:	7829      	ldrb	r1, [r5, #0]
    7ae0:	4608      	mov	r0, r1
    7ae2:	f011 fd53 	bl	1958c <att_op_get_type>
    7ae6:	2800      	cmp	r0, #0
    7ae8:	d0b5      	beq.n	7a56 <bt_att_recv+0x26>
	if (!req) {
    7aea:	2900      	cmp	r1, #0
    7aec:	d0b3      	beq.n	7a56 <bt_att_recv+0x26>
    7aee:	2306      	movs	r3, #6
    7af0:	2200      	movs	r2, #0
    7af2:	6820      	ldr	r0, [r4, #0]
    7af4:	f7ff ff7a 	bl	79ec <send_err_rsp.part.11>
    7af8:	e7ad      	b.n	7a56 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
    7afa:	2e05      	cmp	r6, #5
    7afc:	d11d      	bne.n	7b3a <bt_att_recv+0x10a>
    7afe:	f3bf 8f5b 	dmb	ish
    7b02:	f104 0290 	add.w	r2, r4, #144	; 0x90
    7b06:	e852 1f00 	ldrex	r1, [r2]
    7b0a:	f041 0c02 	orr.w	ip, r1, #2
    7b0e:	e842 ce00 	strex	lr, ip, [r2]
    7b12:	f1be 0f00 	cmp.w	lr, #0
    7b16:	d1f6      	bne.n	7b06 <bt_att_recv+0xd6>
    7b18:	f3bf 8f5b 	dmb	ish
    7b1c:	078a      	lsls	r2, r1, #30
    7b1e:	d50c      	bpl.n	7b3a <bt_att_recv+0x10a>
			BT_WARN("Ignoring unexpected indication");
    7b20:	2302      	movs	r3, #2
    7b22:	f04f 0100 	mov.w	r1, #0
    7b26:	f363 0107 	bfi	r1, r3, #0, #8
    7b2a:	4a18      	ldr	r2, [pc, #96]	; (7b8c <bt_att_recv+0x15c>)
    7b2c:	4b18      	ldr	r3, [pc, #96]	; (7b90 <bt_att_recv+0x160>)
    7b2e:	481d      	ldr	r0, [pc, #116]	; (7ba4 <bt_att_recv+0x174>)
    7b30:	1a9b      	subs	r3, r3, r2
    7b32:	08db      	lsrs	r3, r3, #3
    7b34:	f363 118f 	bfi	r1, r3, #6, #10
    7b38:	e78b      	b.n	7a52 <bt_att_recv+0x22>
	if (buf->len < handler->expect_len) {
    7b3a:	4403      	add	r3, r0
    7b3c:	89b9      	ldrh	r1, [r7, #12]
    7b3e:	785a      	ldrb	r2, [r3, #1]
    7b40:	428a      	cmp	r2, r1
    7b42:	d913      	bls.n	7b6c <bt_att_recv+0x13c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    7b44:	2201      	movs	r2, #1
    7b46:	f04f 0300 	mov.w	r3, #0
    7b4a:	f362 0307 	bfi	r3, r2, #0, #8
    7b4e:	480f      	ldr	r0, [pc, #60]	; (7b8c <bt_att_recv+0x15c>)
    7b50:	4a0f      	ldr	r2, [pc, #60]	; (7b90 <bt_att_recv+0x160>)
    7b52:	1a12      	subs	r2, r2, r0
    7b54:	08d2      	lsrs	r2, r2, #3
    7b56:	f362 138f 	bfi	r3, r2, #6, #10
    7b5a:	4813      	ldr	r0, [pc, #76]	; (7ba8 <bt_att_recv+0x178>)
    7b5c:	782a      	ldrb	r2, [r5, #0]
    7b5e:	f010 fd58 	bl	18612 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    7b62:	2e01      	cmp	r6, #1
    7b64:	f47f af77 	bne.w	7a56 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
    7b68:	2304      	movs	r3, #4
    7b6a:	e00a      	b.n	7b82 <bt_att_recv+0x152>
		err = handler->func(att, buf);
    7b6c:	685b      	ldr	r3, [r3, #4]
    7b6e:	4639      	mov	r1, r7
    7b70:	4620      	mov	r0, r4
    7b72:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    7b74:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    7b76:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    7b78:	f47f af6d 	bne.w	7a56 <bt_att_recv+0x26>
    7b7c:	2800      	cmp	r0, #0
    7b7e:	f43f af6a 	beq.w	7a56 <bt_att_recv+0x26>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    7b82:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    7b84:	2900      	cmp	r1, #0
    7b86:	f43f af66 	beq.w	7a56 <bt_att_recv+0x26>
    7b8a:	e7b1      	b.n	7af0 <bt_att_recv+0xc0>
    7b8c:	0001e448 	.word	0x0001e448
    7b90:	0001e450 	.word	0x0001e450
    7b94:	00020403 	.word	0x00020403
    7b98:	0001e838 	.word	0x0001e838
    7b9c:	0002041e 	.word	0x0002041e
    7ba0:	00020478 	.word	0x00020478
    7ba4:	0002043a 	.word	0x0002043a
    7ba8:	00020459 	.word	0x00020459

00007bac <att_write_rsp>:
{
    7bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    7bb0:	460e      	mov	r6, r1
    7bb2:	3100      	adds	r1, #0
{
    7bb4:	b088      	sub	sp, #32
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    7bb6:	bf18      	it	ne
    7bb8:	2101      	movne	r1, #1
{
    7bba:	4605      	mov	r5, r0
    7bbc:	4690      	mov	r8, r2
    7bbe:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    7bc0:	f012 fbd1 	bl	1a366 <bt_gatt_change_aware>
    7bc4:	2800      	cmp	r0, #0
    7bc6:	d04e      	beq.n	7c66 <att_write_rsp+0xba>
	if (!handle) {
    7bc8:	2f00      	cmp	r7, #0
    7bca:	d04e      	beq.n	7c6a <att_write_rsp+0xbe>
	(void)memset(&data, 0, sizeof(data));
    7bcc:	2218      	movs	r2, #24
    7bce:	2100      	movs	r1, #0
    7bd0:	a802      	add	r0, sp, #8
    7bd2:	f011 f85c 	bl	18c8e <memset>
	if (rsp) {
    7bd6:	f1b8 0f00 	cmp.w	r8, #0
    7bda:	d124      	bne.n	7c26 <att_write_rsp+0x7a>
	data.offset = offset;
    7bdc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    7be0:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.value = value;
    7be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7be6:	9305      	str	r3, [sp, #20]
	data.len = len;
    7be8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    7bec:	f8ad 3018 	strh.w	r3, [sp, #24]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7bf0:	2301      	movs	r3, #1
    7bf2:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7bf6:	4a1e      	ldr	r2, [pc, #120]	; (7c70 <att_write_rsp+0xc4>)
	data.conn = conn;
    7bf8:	9502      	str	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7bfa:	ab02      	add	r3, sp, #8
    7bfc:	4639      	mov	r1, r7
    7bfe:	4638      	mov	r0, r7
	data.req = req;
    7c00:	f88d 6010 	strb.w	r6, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7c04:	f011 fd1e 	bl	19644 <bt_gatt_foreach_attr>
	if (data.err) {
    7c08:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7c0c:	b30c      	cbz	r4, 7c52 <att_write_rsp+0xa6>
		if (rsp) {
    7c0e:	f1b8 0f00 	cmp.w	r8, #0
    7c12:	d019      	beq.n	7c48 <att_write_rsp+0x9c>
			net_buf_unref(data.buf);
    7c14:	9803      	ldr	r0, [sp, #12]
    7c16:	f00a fcab 	bl	12570 <net_buf_unref>
	if (!req) {
    7c1a:	b976      	cbnz	r6, 7c3a <att_write_rsp+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7c1c:	2400      	movs	r4, #0
}
    7c1e:	4620      	mov	r0, r4
    7c20:	b008      	add	sp, #32
    7c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    7c26:	2200      	movs	r2, #0
    7c28:	4641      	mov	r1, r8
    7c2a:	4628      	mov	r0, r5
    7c2c:	f7ff fe44 	bl	78b8 <bt_att_create_pdu>
    7c30:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    7c32:	2800      	cmp	r0, #0
    7c34:	d1d2      	bne.n	7bdc <att_write_rsp+0x30>
			return BT_ATT_ERR_UNLIKELY;
    7c36:	240e      	movs	r4, #14
    7c38:	e7f1      	b.n	7c1e <att_write_rsp+0x72>
    7c3a:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7c3e:	463a      	mov	r2, r7
    7c40:	4631      	mov	r1, r6
    7c42:	4628      	mov	r0, r5
    7c44:	f7ff fed2 	bl	79ec <send_err_rsp.part.11>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7c48:	2e18      	cmp	r6, #24
    7c4a:	d1e7      	bne.n	7c1c <att_write_rsp+0x70>
    7c4c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7c50:	e7e5      	b.n	7c1e <att_write_rsp+0x72>
	if (data.buf) {
    7c52:	9a03      	ldr	r2, [sp, #12]
    7c54:	2a00      	cmp	r2, #0
    7c56:	d0e1      	beq.n	7c1c <att_write_rsp+0x70>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    7c58:	9400      	str	r4, [sp, #0]
    7c5a:	4b06      	ldr	r3, [pc, #24]	; (7c74 <att_write_rsp+0xc8>)
    7c5c:	2104      	movs	r1, #4
    7c5e:	4628      	mov	r0, r5
    7c60:	f011 fc65 	bl	1952e <bt_l2cap_send_cb>
    7c64:	e7db      	b.n	7c1e <att_write_rsp+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7c66:	2412      	movs	r4, #18
    7c68:	e7d9      	b.n	7c1e <att_write_rsp+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    7c6a:	2401      	movs	r4, #1
    7c6c:	e7d7      	b.n	7c1e <att_write_rsp+0x72>
    7c6e:	bf00      	nop
    7c70:	00019939 	.word	0x00019939
    7c74:	00019907 	.word	0x00019907

00007c78 <att_exec_write_req>:
{
    7c78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(att, req->flags);
    7c7c:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    7c7e:	4607      	mov	r7, r0
	return att_exec_write_rsp(att, req->flags);
    7c80:	f893 8000 	ldrb.w	r8, [r3]
	struct bt_conn *conn = att->chan.chan.conn;
    7c84:	f857 6be8 	ldr.w	r6, [r7], #232
	u8_t err = 0U;
    7c88:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    7c8a:	2100      	movs	r1, #0
    7c8c:	4638      	mov	r0, r7
    7c8e:	f013 faa0 	bl	1b1d2 <net_buf_get>
    7c92:	4605      	mov	r5, r0
    7c94:	b988      	cbnz	r0, 7cba <att_exec_write_req+0x42>
	if (err) {
    7c96:	bb64      	cbnz	r4, 7cf2 <att_exec_write_req+0x7a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    7c98:	4622      	mov	r2, r4
    7c9a:	2119      	movs	r1, #25
    7c9c:	4630      	mov	r0, r6
    7c9e:	f7ff fe0b 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    7ca2:	4602      	mov	r2, r0
    7ca4:	b338      	cbz	r0, 7cf6 <att_exec_write_req+0x7e>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    7ca6:	9400      	str	r4, [sp, #0]
    7ca8:	4b14      	ldr	r3, [pc, #80]	; (7cfc <att_exec_write_req+0x84>)
    7caa:	2104      	movs	r1, #4
    7cac:	4630      	mov	r0, r6
    7cae:	f011 fc3e 	bl	1952e <bt_l2cap_send_cb>
}
    7cb2:	4620      	mov	r0, r4
    7cb4:	b004      	add	sp, #16
    7cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    7cba:	b9b4      	cbnz	r4, 7cea <att_exec_write_req+0x72>
    7cbc:	f1b8 0f01 	cmp.w	r8, #1
    7cc0:	d113      	bne.n	7cea <att_exec_write_req+0x72>
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    7cc2:	89aa      	ldrh	r2, [r5, #12]
    7cc4:	8aab      	ldrh	r3, [r5, #20]
    7cc6:	9202      	str	r2, [sp, #8]
    7cc8:	68aa      	ldr	r2, [r5, #8]
    7cca:	9201      	str	r2, [sp, #4]
    7ccc:	8aea      	ldrh	r2, [r5, #22]
    7cce:	9200      	str	r2, [sp, #0]
    7cd0:	2118      	movs	r1, #24
    7cd2:	4622      	mov	r2, r4
    7cd4:	4630      	mov	r0, r6
    7cd6:	f7ff ff69 	bl	7bac <att_write_rsp>
			if (err) {
    7cda:	4604      	mov	r4, r0
    7cdc:	b128      	cbz	r0, 7cea <att_exec_write_req+0x72>
	if (!req) {
    7cde:	4603      	mov	r3, r0
    7ce0:	8aaa      	ldrh	r2, [r5, #20]
    7ce2:	2118      	movs	r1, #24
    7ce4:	4630      	mov	r0, r6
    7ce6:	f7ff fe81 	bl	79ec <send_err_rsp.part.11>
		net_buf_unref(buf);
    7cea:	4628      	mov	r0, r5
    7cec:	f00a fc40 	bl	12570 <net_buf_unref>
    7cf0:	e7cb      	b.n	7c8a <att_exec_write_req+0x12>
		return 0;
    7cf2:	4604      	mov	r4, r0
    7cf4:	e7dd      	b.n	7cb2 <att_exec_write_req+0x3a>
		return BT_ATT_ERR_UNLIKELY;
    7cf6:	240e      	movs	r4, #14
    7cf8:	e7db      	b.n	7cb2 <att_exec_write_req+0x3a>
    7cfa:	bf00      	nop
    7cfc:	00019907 	.word	0x00019907

00007d00 <att_prepare_write_req>:
{
    7d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d04:	460c      	mov	r4, r1
    7d06:	b089      	sub	sp, #36	; 0x24
    7d08:	4683      	mov	fp, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    7d0a:	2104      	movs	r1, #4
    7d0c:	f104 0008 	add.w	r0, r4, #8
    7d10:	f013 fabe 	bl	1b290 <net_buf_simple_pull_mem>
	struct bt_conn *conn = att->chan.chan.conn;
    7d14:	f8db 5000 	ldr.w	r5, [fp]
	handle = sys_le16_to_cpu(req->handle);
    7d18:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    7d1c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    7d20:	f8d4 8008 	ldr.w	r8, [r4, #8]
    7d24:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    7d26:	2101      	movs	r1, #1
    7d28:	4628      	mov	r0, r5
	handle = sys_le16_to_cpu(req->handle);
    7d2a:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    7d2e:	f012 fb1a 	bl	1a366 <bt_gatt_change_aware>
    7d32:	2800      	cmp	r0, #0
    7d34:	d04b      	beq.n	7dce <att_prepare_write_req+0xce>
	if (!handle) {
    7d36:	2e00      	cmp	r6, #0
    7d38:	d04b      	beq.n	7dd2 <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    7d3a:	2214      	movs	r2, #20
    7d3c:	2100      	movs	r1, #0
    7d3e:	a803      	add	r0, sp, #12
    7d40:	f010 ffa5 	bl	18c8e <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7d44:	2301      	movs	r3, #1
    7d46:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    7d4a:	4a24      	ldr	r2, [pc, #144]	; (7ddc <att_prepare_write_req+0xdc>)
	data.conn = conn;
    7d4c:	9503      	str	r5, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    7d4e:	ab03      	add	r3, sp, #12
    7d50:	4631      	mov	r1, r6
    7d52:	4630      	mov	r0, r6
	data.offset = offset;
    7d54:	f8ad 901a 	strh.w	r9, [sp, #26]
	data.value = value;
    7d58:	f8cd 8014 	str.w	r8, [sp, #20]
	data.len = len;
    7d5c:	f8ad 7018 	strh.w	r7, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    7d60:	f011 fc70 	bl	19644 <bt_gatt_foreach_attr>
	if (data.err) {
    7d64:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7d68:	b154      	cbz	r4, 7d80 <att_prepare_write_req+0x80>
	if (!req) {
    7d6a:	4623      	mov	r3, r4
    7d6c:	4632      	mov	r2, r6
    7d6e:	2116      	movs	r1, #22
    7d70:	4628      	mov	r0, r5
    7d72:	f7ff fe3b 	bl	79ec <send_err_rsp.part.11>
		return 0;
    7d76:	2400      	movs	r4, #0
}
    7d78:	4620      	mov	r0, r4
    7d7a:	b009      	add	sp, #36	; 0x24
    7d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&att->prep_queue, data.buf);
    7d80:	9904      	ldr	r1, [sp, #16]
    7d82:	f10b 00e8 	add.w	r0, fp, #232	; 0xe8
    7d86:	f013 fa41 	bl	1b20c <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    7d8a:	4622      	mov	r2, r4
    7d8c:	2117      	movs	r1, #23
    7d8e:	4628      	mov	r0, r5
    7d90:	f7ff fd92 	bl	78b8 <bt_att_create_pdu>
    7d94:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    7d96:	b1f0      	cbz	r0, 7dd6 <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    7d98:	2104      	movs	r1, #4
    7d9a:	3008      	adds	r0, #8
    7d9c:	f013 fa47 	bl	1b22e <net_buf_simple_add>
    7da0:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    7da2:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    7da6:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    7daa:	9804      	ldr	r0, [sp, #16]
    7dac:	4639      	mov	r1, r7
    7dae:	3008      	adds	r0, #8
    7db0:	f013 fa3d 	bl	1b22e <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    7db4:	463a      	mov	r2, r7
    7db6:	4641      	mov	r1, r8
    7db8:	1d30      	adds	r0, r6, #4
    7dba:	f010 ff3e 	bl	18c3a <memcpy>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7dbe:	9400      	str	r4, [sp, #0]
    7dc0:	4b07      	ldr	r3, [pc, #28]	; (7de0 <att_prepare_write_req+0xe0>)
    7dc2:	9a04      	ldr	r2, [sp, #16]
    7dc4:	2104      	movs	r1, #4
    7dc6:	4628      	mov	r0, r5
    7dc8:	f011 fbb1 	bl	1952e <bt_l2cap_send_cb>
	return 0;
    7dcc:	e7d4      	b.n	7d78 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7dce:	2412      	movs	r4, #18
    7dd0:	e7d2      	b.n	7d78 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_INVALID_HANDLE;
    7dd2:	2401      	movs	r4, #1
    7dd4:	e7d0      	b.n	7d78 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    7dd6:	240e      	movs	r4, #14
    7dd8:	e7ce      	b.n	7d78 <att_prepare_write_req+0x78>
    7dda:	bf00      	nop
    7ddc:	000077bd 	.word	0x000077bd
    7de0:	00019907 	.word	0x00019907

00007de4 <att_read_group_req>:
{
    7de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    7de8:	7b0c      	ldrb	r4, [r1, #12]
    7dea:	3c04      	subs	r4, #4
    7dec:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    7dee:	2c02      	cmp	r4, #2
{
    7df0:	4680      	mov	r8, r0
    7df2:	b08f      	sub	sp, #60	; 0x3c
    7df4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    7df6:	d001      	beq.n	7dfc <att_read_group_req+0x18>
    7df8:	2c10      	cmp	r4, #16
    7dfa:	d16e      	bne.n	7eda <att_read_group_req+0xf6>
	req = net_buf_pull_mem(buf, sizeof(*req));
    7dfc:	2104      	movs	r1, #4
    7dfe:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    7e00:	f8d8 9000 	ldr.w	r9, [r8]
	req = net_buf_pull_mem(buf, sizeof(*req));
    7e04:	f013 fa44 	bl	1b290 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7e08:	ae04      	add	r6, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    7e0a:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7e0c:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7e0e:	1d01      	adds	r1, r0, #4
    7e10:	4622      	mov	r2, r4
    7e12:	4630      	mov	r0, r6
    7e14:	f011 f9b2 	bl	1917c <bt_uuid_create>
    7e18:	2800      	cmp	r0, #0
    7e1a:	d060      	beq.n	7ede <att_read_group_req+0xfa>
	if (!start || !end) {
    7e1c:	2d00      	cmp	r5, #0
    7e1e:	d036      	beq.n	7e8e <att_read_group_req+0xaa>
    7e20:	2400      	movs	r4, #0
    7e22:	b39f      	cbz	r7, 7e8c <att_read_group_req+0xa8>
	if (start > end) {
    7e24:	42bd      	cmp	r5, r7
    7e26:	d832      	bhi.n	7e8e <att_read_group_req+0xaa>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7e28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7e2c:	a902      	add	r1, sp, #8
    7e2e:	4630      	mov	r0, r6
    7e30:	f88d 4008 	strb.w	r4, [sp, #8]
    7e34:	f8ad 300a 	strh.w	r3, [sp, #10]
    7e38:	f011 f976 	bl	19128 <bt_uuid_cmp>
    7e3c:	bb90      	cbnz	r0, 7ea4 <att_read_group_req+0xc0>
	struct bt_conn *conn = att->chan.chan.conn;
    7e3e:	f8d8 9000 	ldr.w	r9, [r8]
	(void)memset(&data, 0, sizeof(data));
    7e42:	2214      	movs	r2, #20
    7e44:	2100      	movs	r1, #0
    7e46:	a809      	add	r0, sp, #36	; 0x24
    7e48:	f010 ff21 	bl	18c8e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    7e4c:	2201      	movs	r2, #1
    7e4e:	2111      	movs	r1, #17
    7e50:	4648      	mov	r0, r9
    7e52:	f7ff fd31 	bl	78b8 <bt_att_create_pdu>
    7e56:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    7e58:	2800      	cmp	r0, #0
    7e5a:	d040      	beq.n	7ede <att_read_group_req+0xfa>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7e5c:	2101      	movs	r1, #1
    7e5e:	3008      	adds	r0, #8
	data.uuid = uuid;
    7e60:	e9cd 8609 	strd	r8, r6, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7e64:	f013 f9e3 	bl	1b22e <net_buf_simple_add>
	data.rsp->len = 0U;
    7e68:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7e6a:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7e6c:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    7e6e:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7e70:	4a1c      	ldr	r2, [pc, #112]	; (7ee4 <att_read_group_req+0x100>)
	data.group = NULL;
    7e72:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7e74:	4639      	mov	r1, r7
    7e76:	4628      	mov	r0, r5
    7e78:	f011 fbe4 	bl	19644 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    7e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7e7e:	781c      	ldrb	r4, [r3, #0]
    7e80:	bb1c      	cbnz	r4, 7eca <att_read_group_req+0xe6>
		net_buf_unref(data.buf);
    7e82:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7e84:	f00a fb74 	bl	12570 <net_buf_unref>
	if (!req) {
    7e88:	230a      	movs	r3, #10
    7e8a:	e018      	b.n	7ebe <att_read_group_req+0xda>
			*err = 0U;
    7e8c:	463d      	mov	r5, r7
	if (!req) {
    7e8e:	2301      	movs	r3, #1
    7e90:	462a      	mov	r2, r5
    7e92:	2110      	movs	r1, #16
    7e94:	4648      	mov	r0, r9
    7e96:	f7ff fda9 	bl	79ec <send_err_rsp.part.11>
		return 0;
    7e9a:	2400      	movs	r4, #0
}
    7e9c:	4620      	mov	r0, r4
    7e9e:	b00f      	add	sp, #60	; 0x3c
    7ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7ea4:	f642 0301 	movw	r3, #10241	; 0x2801
    7ea8:	a903      	add	r1, sp, #12
    7eaa:	4630      	mov	r0, r6
    7eac:	f88d 400c 	strb.w	r4, [sp, #12]
    7eb0:	f8ad 300e 	strh.w	r3, [sp, #14]
    7eb4:	f011 f938 	bl	19128 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7eb8:	2800      	cmp	r0, #0
    7eba:	d0c0      	beq.n	7e3e <att_read_group_req+0x5a>
	if (!req) {
    7ebc:	2310      	movs	r3, #16
    7ebe:	462a      	mov	r2, r5
    7ec0:	2110      	movs	r1, #16
    7ec2:	4648      	mov	r0, r9
    7ec4:	f7ff fd92 	bl	79ec <send_err_rsp.part.11>
		return 0;
    7ec8:	e7e8      	b.n	7e9c <att_read_group_req+0xb8>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7eca:	9600      	str	r6, [sp, #0]
    7ecc:	4b06      	ldr	r3, [pc, #24]	; (7ee8 <att_read_group_req+0x104>)
    7ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7ed0:	2104      	movs	r1, #4
    7ed2:	4648      	mov	r0, r9
    7ed4:	f011 fb2b 	bl	1952e <bt_l2cap_send_cb>
	return 0;
    7ed8:	e7df      	b.n	7e9a <att_read_group_req+0xb6>
		return BT_ATT_ERR_INVALID_PDU;
    7eda:	2404      	movs	r4, #4
    7edc:	e7de      	b.n	7e9c <att_read_group_req+0xb8>
		return BT_ATT_ERR_UNLIKELY;
    7ede:	240e      	movs	r4, #14
    7ee0:	e7dc      	b.n	7e9c <att_read_group_req+0xb8>
    7ee2:	bf00      	nop
    7ee4:	000196f5 	.word	0x000196f5
    7ee8:	00019907 	.word	0x00019907

00007eec <att_read_mult_req>:
{
    7eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7ef0:	6805      	ldr	r5, [r0, #0]
{
    7ef2:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    7ef4:	2214      	movs	r2, #20
{
    7ef6:	4606      	mov	r6, r0
    7ef8:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    7efa:	a803      	add	r0, sp, #12
    7efc:	2100      	movs	r1, #0
    7efe:	f010 fec6 	bl	18c8e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    7f02:	2200      	movs	r2, #0
    7f04:	210f      	movs	r1, #15
    7f06:	4628      	mov	r0, r5
    7f08:	f7ff fcd6 	bl	78b8 <bt_att_create_pdu>
    7f0c:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    7f0e:	b378      	cbz	r0, 7f70 <att_read_mult_req+0x84>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7f10:	f8df 9064 	ldr.w	r9, [pc, #100]	; 7f78 <att_read_mult_req+0x8c>
	data.att = att;
    7f14:	9603      	str	r6, [sp, #12]
		handle = net_buf_pull_le16(buf);
    7f16:	f104 0708 	add.w	r7, r4, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7f1a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    7f1e:	89a3      	ldrh	r3, [r4, #12]
    7f20:	2b01      	cmp	r3, #1
    7f22:	d808      	bhi.n	7f36 <att_read_mult_req+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7f24:	2400      	movs	r4, #0
    7f26:	9400      	str	r4, [sp, #0]
    7f28:	4b12      	ldr	r3, [pc, #72]	; (7f74 <att_read_mult_req+0x88>)
    7f2a:	9a05      	ldr	r2, [sp, #20]
    7f2c:	2104      	movs	r1, #4
    7f2e:	4628      	mov	r0, r5
    7f30:	f011 fafd 	bl	1952e <bt_l2cap_send_cb>
	return 0;
    7f34:	e018      	b.n	7f68 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    7f36:	4638      	mov	r0, r7
    7f38:	f013 f9b2 	bl	1b2a0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7f3c:	ab03      	add	r3, sp, #12
    7f3e:	464a      	mov	r2, r9
    7f40:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    7f42:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7f44:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7f48:	f011 fb7c 	bl	19644 <bt_gatt_foreach_attr>
		if (data.err) {
    7f4c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7f50:	2b00      	cmp	r3, #0
    7f52:	d0e4      	beq.n	7f1e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    7f54:	9805      	ldr	r0, [sp, #20]
    7f56:	f00a fb0b 	bl	12570 <net_buf_unref>
	if (!req) {
    7f5a:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7f5e:	4632      	mov	r2, r6
    7f60:	210e      	movs	r1, #14
    7f62:	4628      	mov	r0, r5
    7f64:	f7ff fd42 	bl	79ec <send_err_rsp.part.11>
			return 0;
    7f68:	2000      	movs	r0, #0
}
    7f6a:	b009      	add	sp, #36	; 0x24
    7f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    7f70:	200e      	movs	r0, #14
    7f72:	e7fa      	b.n	7f6a <att_read_mult_req+0x7e>
    7f74:	00019907 	.word	0x00019907
    7f78:	00019995 	.word	0x00019995

00007f7c <att_read_rsp>:
{
    7f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7f80:	6805      	ldr	r5, [r0, #0]
{
    7f82:	b088      	sub	sp, #32
    7f84:	4604      	mov	r4, r0
    7f86:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    7f88:	4628      	mov	r0, r5
    7f8a:	2101      	movs	r1, #1
{
    7f8c:	4690      	mov	r8, r2
    7f8e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    7f90:	f012 f9e9 	bl	1a366 <bt_gatt_change_aware>
    7f94:	b3a0      	cbz	r0, 8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
	if (!handle) {
    7f96:	b3ae      	cbz	r6, 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
	(void)memset(&data, 0, sizeof(data));
    7f98:	2214      	movs	r2, #20
    7f9a:	2100      	movs	r1, #0
    7f9c:	a803      	add	r0, sp, #12
    7f9e:	f010 fe76 	bl	18c8e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    7fa2:	2200      	movs	r2, #0
    7fa4:	4641      	mov	r1, r8
    7fa6:	4628      	mov	r0, r5
    7fa8:	f7ff fc86 	bl	78b8 <bt_att_create_pdu>
    7fac:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    7fae:	b358      	cbz	r0, 8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
	data.offset = offset;
    7fb0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    7fb4:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7fb8:	2301      	movs	r3, #1
    7fba:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7fbe:	4a13      	ldr	r2, [pc, #76]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
	data.att = att;
    7fc0:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7fc2:	ab03      	add	r3, sp, #12
    7fc4:	4631      	mov	r1, r6
    7fc6:	4630      	mov	r0, r6
    7fc8:	f011 fb3c 	bl	19644 <bt_gatt_foreach_attr>
	if (data.err) {
    7fcc:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7fd0:	b174      	cbz	r4, 7ff0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    7fd2:	9805      	ldr	r0, [sp, #20]
    7fd4:	f00a facc 	bl	12570 <net_buf_unref>
	if (!req) {
    7fd8:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7fdc:	4632      	mov	r2, r6
    7fde:	4639      	mov	r1, r7
    7fe0:	4628      	mov	r0, r5
    7fe2:	f7ff fd03 	bl	79ec <send_err_rsp.part.11>
		return 0;
    7fe6:	2400      	movs	r4, #0
}
    7fe8:	4620      	mov	r0, r4
    7fea:	b008      	add	sp, #32
    7fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7ff0:	9400      	str	r4, [sp, #0]
    7ff2:	4b07      	ldr	r3, [pc, #28]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
    7ff4:	9a05      	ldr	r2, [sp, #20]
    7ff6:	2104      	movs	r1, #4
    7ff8:	4628      	mov	r0, r5
    7ffa:	f011 fa98 	bl	1952e <bt_l2cap_send_cb>
	return 0;
    7ffe:	e7f3      	b.n	7fe8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8000:	2412      	movs	r4, #18
    8002:	e7f1      	b.n	7fe8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    8004:	2401      	movs	r4, #1
    8006:	e7ef      	b.n	7fe8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    8008:	240e      	movs	r4, #14
    800a:	e7ed      	b.n	7fe8 <att_read_rsp+0x6c>
    800c:	00019995 	.word	0x00019995
    8010:	00019907 	.word	0x00019907

00008014 <att_read_type_req>:
{
    8014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    8018:	7b0c      	ldrb	r4, [r1, #12]
    801a:	3c04      	subs	r4, #4
    801c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    801e:	2c02      	cmp	r4, #2
{
    8020:	4680      	mov	r8, r0
    8022:	b08f      	sub	sp, #60	; 0x3c
    8024:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    8026:	d001      	beq.n	802c <att_read_type_req+0x18>
    8028:	2c10      	cmp	r4, #16
    802a:	d154      	bne.n	80d6 <att_read_type_req+0xc2>
	req = net_buf_pull_mem(buf, sizeof(*req));
    802c:	2104      	movs	r1, #4
    802e:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    8030:	f8d8 7000 	ldr.w	r7, [r8]
	req = net_buf_pull_mem(buf, sizeof(*req));
    8034:	f013 f92c 	bl	1b290 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8038:	f10d 090c 	add.w	r9, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    803c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    803e:	8846      	ldrh	r6, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8040:	1d01      	adds	r1, r0, #4
    8042:	4622      	mov	r2, r4
    8044:	4648      	mov	r0, r9
    8046:	f011 f899 	bl	1917c <bt_uuid_create>
    804a:	b188      	cbz	r0, 8070 <att_read_type_req+0x5c>
	if (!start || !end) {
    804c:	b19d      	cbz	r5, 8076 <att_read_type_req+0x62>
    804e:	b18e      	cbz	r6, 8074 <att_read_type_req+0x60>
	if (start > end) {
    8050:	42b5      	cmp	r5, r6
    8052:	d810      	bhi.n	8076 <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    8054:	f8d8 7000 	ldr.w	r7, [r8]
	(void)memset(&data, 0, sizeof(data));
    8058:	2218      	movs	r2, #24
    805a:	2100      	movs	r1, #0
    805c:	a808      	add	r0, sp, #32
    805e:	f010 fe16 	bl	18c8e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    8062:	2201      	movs	r2, #1
    8064:	2109      	movs	r1, #9
    8066:	4638      	mov	r0, r7
    8068:	f7ff fc26 	bl	78b8 <bt_att_create_pdu>
    806c:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    806e:	b968      	cbnz	r0, 808c <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    8070:	240e      	movs	r4, #14
    8072:	e007      	b.n	8084 <att_read_type_req+0x70>
			*err = 0U;
    8074:	4635      	mov	r5, r6
	if (!req) {
    8076:	2301      	movs	r3, #1
    8078:	462a      	mov	r2, r5
    807a:	2108      	movs	r1, #8
    807c:	4638      	mov	r0, r7
    807e:	f7ff fcb5 	bl	79ec <send_err_rsp.part.11>
		return 0;
    8082:	2400      	movs	r4, #0
}
    8084:	4620      	mov	r0, r4
    8086:	b00f      	add	sp, #60	; 0x3c
    8088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    808c:	2101      	movs	r1, #1
    808e:	3008      	adds	r0, #8
	data.uuid = uuid;
    8090:	e9cd 8908 	strd	r8, r9, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8094:	f013 f8cb 	bl	1b22e <net_buf_simple_add>
	data.rsp->len = 0U;
    8098:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    809c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    809e:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    80a0:	4a0e      	ldr	r2, [pc, #56]	; (80dc <att_read_type_req+0xc8>)
	data.rsp->len = 0U;
    80a2:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    80a6:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    80a8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    80ac:	4628      	mov	r0, r5
    80ae:	ab08      	add	r3, sp, #32
    80b0:	f011 fac8 	bl	19644 <bt_gatt_foreach_attr>
	if (data.err) {
    80b4:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    80b8:	b12c      	cbz	r4, 80c6 <att_read_type_req+0xb2>
		net_buf_unref(data.buf);
    80ba:	980a      	ldr	r0, [sp, #40]	; 0x28
    80bc:	f00a fa58 	bl	12570 <net_buf_unref>
	if (!req) {
    80c0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    80c4:	e7d8      	b.n	8078 <att_read_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    80c6:	9400      	str	r4, [sp, #0]
    80c8:	4b05      	ldr	r3, [pc, #20]	; (80e0 <att_read_type_req+0xcc>)
    80ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    80cc:	2104      	movs	r1, #4
    80ce:	4638      	mov	r0, r7
    80d0:	f011 fa2d 	bl	1952e <bt_l2cap_send_cb>
	return 0;
    80d4:	e7d6      	b.n	8084 <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    80d6:	2404      	movs	r4, #4
    80d8:	e7d4      	b.n	8084 <att_read_type_req+0x70>
    80da:	bf00      	nop
    80dc:	000197c3 	.word	0x000197c3
    80e0:	00019907 	.word	0x00019907

000080e4 <att_find_type_req>:
{
    80e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80e8:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    80ea:	f8d0 b000 	ldr.w	fp, [r0]
{
    80ee:	b08b      	sub	sp, #44	; 0x2c
    80f0:	4681      	mov	r9, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    80f2:	2106      	movs	r1, #6
    80f4:	f108 0008 	add.w	r0, r8, #8
    80f8:	f013 f8ca 	bl	1b290 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    80fc:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    80fe:	b1fd      	cbz	r5, 8140 <att_find_type_req+0x5c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    8100:	8847      	ldrh	r7, [r0, #2]
	if (!start || !end) {
    8102:	b1e7      	cbz	r7, 813e <att_find_type_req+0x5a>
	if (start > end) {
    8104:	42bd      	cmp	r5, r7
    8106:	d81b      	bhi.n	8140 <att_find_type_req+0x5c>
	type = sys_le16_to_cpu(req->type);
    8108:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    810a:	f8ad 300e 	strh.w	r3, [sp, #14]
    810e:	2400      	movs	r4, #0
    8110:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8114:	a904      	add	r1, sp, #16
    8116:	a803      	add	r0, sp, #12
	value = buf->data;
    8118:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    811c:	f88d 400c 	strb.w	r4, [sp, #12]
    8120:	f88d 4010 	strb.w	r4, [sp, #16]
    8124:	f8ad 3012 	strh.w	r3, [sp, #18]
    8128:	f010 fffe 	bl	19128 <bt_uuid_cmp>
    812c:	4606      	mov	r6, r0
    812e:	b190      	cbz	r0, 8156 <att_find_type_req+0x72>
	if (!req) {
    8130:	230a      	movs	r3, #10
    8132:	462a      	mov	r2, r5
    8134:	2106      	movs	r1, #6
    8136:	4658      	mov	r0, fp
    8138:	f7ff fc58 	bl	79ec <send_err_rsp.part.11>
		return 0;
    813c:	e007      	b.n	814e <att_find_type_req+0x6a>
			*err = 0U;
    813e:	463d      	mov	r5, r7
	if (!req) {
    8140:	2301      	movs	r3, #1
    8142:	462a      	mov	r2, r5
    8144:	2106      	movs	r1, #6
    8146:	4658      	mov	r0, fp
    8148:	f7ff fc50 	bl	79ec <send_err_rsp.part.11>
		return 0;
    814c:	2400      	movs	r4, #0
}
    814e:	4620      	mov	r0, r4
    8150:	b00b      	add	sp, #44	; 0x2c
    8152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(void)memset(&data, 0, sizeof(data));
    8156:	2214      	movs	r2, #20
	return att_find_type_rsp(att, start_handle, end_handle, value,
    8158:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    815c:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    8160:	4601      	mov	r1, r0
    8162:	eb0d 0002 	add.w	r0, sp, r2
    8166:	f010 fd92 	bl	18c8e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    816a:	4632      	mov	r2, r6
    816c:	2107      	movs	r1, #7
    816e:	4640      	mov	r0, r8
    8170:	f7ff fba2 	bl	78b8 <bt_att_create_pdu>
    8174:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    8176:	b310      	cbz	r0, 81be <att_find_type_req+0xda>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8178:	230a      	movs	r3, #10
    817a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    817e:	4a11      	ldr	r2, [pc, #68]	; (81c4 <att_find_type_req+0xe0>)
	data.value_len = value_len;
    8180:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8184:	ab05      	add	r3, sp, #20
    8186:	4639      	mov	r1, r7
    8188:	4628      	mov	r0, r5
	data.att = att;
    818a:	f8cd 9014 	str.w	r9, [sp, #20]
	data.value = value;
    818e:	e9cd 6a07 	strd	r6, sl, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8192:	f011 fa57 	bl	19644 <bt_gatt_foreach_attr>
	if (data.err) {
    8196:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    819a:	b144      	cbz	r4, 81ae <att_find_type_req+0xca>
		net_buf_unref(data.buf);
    819c:	9806      	ldr	r0, [sp, #24]
    819e:	f00a f9e7 	bl	12570 <net_buf_unref>
	if (!req) {
    81a2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    81a6:	462a      	mov	r2, r5
    81a8:	2106      	movs	r1, #6
    81aa:	4640      	mov	r0, r8
    81ac:	e7cc      	b.n	8148 <att_find_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    81ae:	9400      	str	r4, [sp, #0]
    81b0:	4b05      	ldr	r3, [pc, #20]	; (81c8 <att_find_type_req+0xe4>)
    81b2:	9a06      	ldr	r2, [sp, #24]
    81b4:	2104      	movs	r1, #4
    81b6:	4640      	mov	r0, r8
    81b8:	f011 f9b9 	bl	1952e <bt_l2cap_send_cb>
	return 0;
    81bc:	e7c7      	b.n	814e <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    81be:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    81c0:	e7c5      	b.n	814e <att_find_type_req+0x6a>
    81c2:	bf00      	nop
    81c4:	000074c1 	.word	0x000074c1
    81c8:	00019907 	.word	0x00019907

000081cc <att_find_info_req>:
{
    81cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    81ce:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    81d0:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    81d2:	881d      	ldrh	r5, [r3, #0]
{
    81d4:	b087      	sub	sp, #28
    81d6:	4607      	mov	r7, r0
	if (!start || !end) {
    81d8:	b195      	cbz	r5, 8200 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    81da:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    81dc:	b17c      	cbz	r4, 81fe <att_find_info_req+0x32>
	if (start > end) {
    81de:	42a5      	cmp	r5, r4
    81e0:	d80e      	bhi.n	8200 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    81e2:	2210      	movs	r2, #16
    81e4:	2100      	movs	r1, #0
    81e6:	a802      	add	r0, sp, #8
    81e8:	f010 fd51 	bl	18c8e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    81ec:	2200      	movs	r2, #0
    81ee:	2105      	movs	r1, #5
    81f0:	4630      	mov	r0, r6
    81f2:	f7ff fb61 	bl	78b8 <bt_att_create_pdu>
    81f6:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    81f8:	b958      	cbnz	r0, 8212 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    81fa:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    81fc:	e007      	b.n	820e <att_find_info_req+0x42>
			*err = 0U;
    81fe:	4625      	mov	r5, r4
	if (!req) {
    8200:	2301      	movs	r3, #1
    8202:	462a      	mov	r2, r5
    8204:	2104      	movs	r1, #4
    8206:	4630      	mov	r0, r6
    8208:	f7ff fbf0 	bl	79ec <send_err_rsp.part.11>
		return 0;
    820c:	2000      	movs	r0, #0
}
    820e:	b007      	add	sp, #28
    8210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8212:	4621      	mov	r1, r4
    8214:	ab02      	add	r3, sp, #8
    8216:	4a0a      	ldr	r2, [pc, #40]	; (8240 <att_find_info_req+0x74>)
	data.att = att;
    8218:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    821a:	4628      	mov	r0, r5
    821c:	f011 fa12 	bl	19644 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    8220:	9c04      	ldr	r4, [sp, #16]
    8222:	b924      	cbnz	r4, 822e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    8224:	9803      	ldr	r0, [sp, #12]
    8226:	f00a f9a3 	bl	12570 <net_buf_unref>
	if (!req) {
    822a:	230a      	movs	r3, #10
    822c:	e7e9      	b.n	8202 <att_find_info_req+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    822e:	2400      	movs	r4, #0
    8230:	9400      	str	r4, [sp, #0]
    8232:	4b04      	ldr	r3, [pc, #16]	; (8244 <att_find_info_req+0x78>)
    8234:	9a03      	ldr	r2, [sp, #12]
    8236:	2104      	movs	r1, #4
    8238:	4630      	mov	r0, r6
    823a:	f011 f978 	bl	1952e <bt_l2cap_send_cb>
	return 0;
    823e:	e7e5      	b.n	820c <att_find_info_req+0x40>
    8240:	0001965b 	.word	0x0001965b
    8244:	00019907 	.word	0x00019907

00008248 <bt_att_req_alloc>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

struct bt_att_req *bt_att_req_alloc(s32_t timeout)
{
    8248:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    824a:	4602      	mov	r2, r0
	struct bt_att_req *req = NULL;
    824c:	2400      	movs	r4, #0
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    824e:	a901      	add	r1, sp, #4
    8250:	4806      	ldr	r0, [pc, #24]	; (826c <bt_att_req_alloc+0x24>)
	struct bt_att_req *req = NULL;
    8252:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    8254:	f00e fc5e 	bl	16b14 <k_mem_slab_alloc>
    8258:	4603      	mov	r3, r0
    825a:	b928      	cbnz	r0, 8268 <bt_att_req_alloc+0x20>
		return NULL;
	}

	BT_DBG("req %p", req);

	req->func = NULL;
    825c:	9801      	ldr	r0, [sp, #4]
	req->destroy = NULL;
    825e:	e9c0 3301 	strd	r3, r3, [r0, #4]
	req->user_data = NULL;
    8262:	6143      	str	r3, [r0, #20]

	return req;
}
    8264:	b002      	add	sp, #8
    8266:	bd10      	pop	{r4, pc}
		return NULL;
    8268:	4620      	mov	r0, r4
    826a:	e7fb      	b.n	8264 <bt_att_req_alloc+0x1c>
    826c:	2000d1dc 	.word	0x2000d1dc

00008270 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    8270:	b507      	push	{r0, r1, r2, lr}
    8272:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    8274:	a901      	add	r1, sp, #4
    8276:	4803      	ldr	r0, [pc, #12]	; (8284 <bt_att_req_free+0x14>)
    8278:	f00e fc78 	bl	16b6c <k_mem_slab_free>
}
    827c:	b003      	add	sp, #12
    827e:	f85d fb04 	ldr.w	pc, [sp], #4
    8282:	bf00      	nop
    8284:	2000d1dc 	.word	0x2000d1dc

00008288 <att_handle_rsp>:
{
    8288:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    828c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    828e:	30a0      	adds	r0, #160	; 0xa0
{
    8290:	461e      	mov	r6, r3
    8292:	460f      	mov	r7, r1
    8294:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    8296:	f015 fe2a 	bl	1deee <k_delayed_work_cancel>
	if (!att->req) {
    829a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    829e:	bb03      	cbnz	r3, 82e2 <att_handle_rsp+0x5a>
		BT_WARN("No pending ATT request");
    82a0:	2302      	movs	r3, #2
    82a2:	f04f 0100 	mov.w	r1, #0
    82a6:	f363 0107 	bfi	r1, r3, #0, #8
    82aa:	4a1f      	ldr	r2, [pc, #124]	; (8328 <att_handle_rsp+0xa0>)
    82ac:	4b1f      	ldr	r3, [pc, #124]	; (832c <att_handle_rsp+0xa4>)
    82ae:	4820      	ldr	r0, [pc, #128]	; (8330 <att_handle_rsp+0xa8>)
    82b0:	1a9b      	subs	r3, r3, r2
    82b2:	08db      	lsrs	r3, r3, #3
    82b4:	f363 118f 	bfi	r1, r3, #6, #10
    82b8:	f010 f98a 	bl	185d0 <log_0>
Z_GENLIST_IS_EMPTY(slist)
    82bc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    82c0:	b159      	cbz	r1, 82da <att_handle_rsp+0x52>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    82c2:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    82c6:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    82c8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    82cc:	4291      	cmp	r1, r2
	list->tail = node;
    82ce:	bf08      	it	eq
    82d0:	f8c4 309c 	streq.w	r3, [r4, #156]	; 0x9c
	att_send_req(att, ATT_REQ(node));
    82d4:	4620      	mov	r0, r4
    82d6:	f7ff faaf 	bl	7838 <att_send_req>
}
    82da:	2000      	movs	r0, #0
    82dc:	b002      	add	sp, #8
    82de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req == &cancel) {
    82e2:	4a14      	ldr	r2, [pc, #80]	; (8334 <att_handle_rsp+0xac>)
    82e4:	4293      	cmp	r3, r2
    82e6:	d103      	bne.n	82f0 <att_handle_rsp+0x68>
		att->req = NULL;
    82e8:	2300      	movs	r3, #0
    82ea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		goto process;
    82ee:	e7e5      	b.n	82bc <att_handle_rsp+0x34>
	if (att->req->buf) {
    82f0:	6918      	ldr	r0, [r3, #16]
    82f2:	b128      	cbz	r0, 8300 <att_handle_rsp+0x78>
		net_buf_unref(att->req->buf);
    82f4:	f00a f93c 	bl	12570 <net_buf_unref>
		att->req->buf = NULL;
    82f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    82fc:	2200      	movs	r2, #0
    82fe:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    8300:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	att->req->func = NULL;
    8304:	2500      	movs	r5, #0
	func = att->req->func;
    8306:	f8d0 9004 	ldr.w	r9, [r0, #4]
	params = att->req->user_data;
    830a:	f8d0 a014 	ldr.w	sl, [r0, #20]
	att->req->func = NULL;
    830e:	6045      	str	r5, [r0, #4]
	att_req_destroy(att->req);
    8310:	f011 fbc7 	bl	19aa2 <att_req_destroy>
	att->req = NULL;
    8314:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	func(att->chan.chan.conn, err, pdu, len, params);
    8318:	f8cd a000 	str.w	sl, [sp]
    831c:	4643      	mov	r3, r8
    831e:	463a      	mov	r2, r7
    8320:	4631      	mov	r1, r6
    8322:	6820      	ldr	r0, [r4, #0]
    8324:	47c8      	blx	r9
    8326:	e7c9      	b.n	82bc <att_handle_rsp+0x34>
    8328:	0001e448 	.word	0x0001e448
    832c:	0001e450 	.word	0x0001e450
    8330:	00020383 	.word	0x00020383
    8334:	20000354 	.word	0x20000354

00008338 <att_error_rsp>:
	if (!att->req || att->req == &cancel) {
    8338:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
{
    833c:	b430      	push	{r4, r5}
	if (!att->req || att->req == &cancel) {
    833e:	b18b      	cbz	r3, 8364 <att_error_rsp+0x2c>
    8340:	4a09      	ldr	r2, [pc, #36]	; (8368 <att_error_rsp+0x30>)
    8342:	4293      	cmp	r3, r2
    8344:	d00e      	beq.n	8364 <att_error_rsp+0x2c>
	if (att->req->buf) {
    8346:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
    8348:	688c      	ldr	r4, [r1, #8]
	if (att->req->buf) {
    834a:	b12a      	cbz	r2, 8358 <att_error_rsp+0x20>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    834c:	899d      	ldrh	r5, [r3, #12]
    834e:	6911      	ldr	r1, [r2, #16]
	buf->len = state->len;
    8350:	89db      	ldrh	r3, [r3, #14]
    8352:	8193      	strh	r3, [r2, #12]
	buf->data = buf->__buf + state->offset;
    8354:	4429      	add	r1, r5
    8356:	6091      	str	r1, [r2, #8]
	err = rsp->error;
    8358:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    835a:	2200      	movs	r2, #0
    835c:	4611      	mov	r1, r2
}
    835e:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    8360:	f7ff bf92 	b.w	8288 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    8364:	230e      	movs	r3, #14
    8366:	e7f8      	b.n	835a <att_error_rsp+0x22>
    8368:	20000354 	.word	0x20000354

0000836c <bt_att_disconnected>:
{
    836c:	b513      	push	{r0, r1, r4, lr}
    836e:	4604      	mov	r4, r0
	struct bt_att *att = ATT_CHAN(chan);
    8370:	9001      	str	r0, [sp, #4]
	att_reset(att);
    8372:	f011 fbd5 	bl	19b20 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8376:	6820      	ldr	r0, [r4, #0]
    8378:	f001 fb14 	bl	99a4 <bt_gatt_disconnected>
	k_mem_slab_free(&att_slab, (void **)&att);
    837c:	a901      	add	r1, sp, #4
    837e:	4802      	ldr	r0, [pc, #8]	; (8388 <bt_att_disconnected+0x1c>)
    8380:	f00e fbf4 	bl	16b6c <k_mem_slab_free>
}
    8384:	b002      	add	sp, #8
    8386:	bd10      	pop	{r4, pc}
    8388:	2000d1c0 	.word	0x2000d1c0

0000838c <att_timeout>:
{
    838c:	b513      	push	{r0, r1, r4, lr}
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
    838e:	f1a0 03a0 	sub.w	r3, r0, #160	; 0xa0
    8392:	9301      	str	r3, [sp, #4]
	BT_ERR("ATT Timeout");
    8394:	f04f 0100 	mov.w	r1, #0
    8398:	2301      	movs	r3, #1
    839a:	4a0e      	ldr	r2, [pc, #56]	; (83d4 <att_timeout+0x48>)
    839c:	f363 0107 	bfi	r1, r3, #0, #8
    83a0:	4b0d      	ldr	r3, [pc, #52]	; (83d8 <att_timeout+0x4c>)
    83a2:	1a9b      	subs	r3, r3, r2
    83a4:	08db      	lsrs	r3, r3, #3
    83a6:	f363 118f 	bfi	r1, r3, #6, #10
{
    83aa:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    83ac:	480b      	ldr	r0, [pc, #44]	; (83dc <att_timeout+0x50>)
    83ae:	f010 f90f 	bl	185d0 <log_0>
	att_reset(att);
    83b2:	9801      	ldr	r0, [sp, #4]
    83b4:	f011 fbb4 	bl	19b20 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    83b8:	f854 0ca0 	ldr.w	r0, [r4, #-160]
    83bc:	f001 faf2 	bl	99a4 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    83c0:	2300      	movs	r3, #0
    83c2:	f844 3ca0 	str.w	r3, [r4, #-160]
	k_mem_slab_free(&att_slab, (void **)&att);
    83c6:	a901      	add	r1, sp, #4
    83c8:	4805      	ldr	r0, [pc, #20]	; (83e0 <att_timeout+0x54>)
    83ca:	f00e fbcf 	bl	16b6c <k_mem_slab_free>
}
    83ce:	b002      	add	sp, #8
    83d0:	bd10      	pop	{r4, pc}
    83d2:	bf00      	nop
    83d4:	0001e448 	.word	0x0001e448
    83d8:	0001e450 	.word	0x0001e450
    83dc:	000203ad 	.word	0x000203ad
    83e0:	2000d1c0 	.word	0x2000d1c0

000083e4 <bt_att_req_cancel>:

	return att_send_req(att, req);
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    83e4:	b510      	push	{r4, lr}
    83e6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    83e8:	b370      	cbz	r0, 8448 <bt_att_req_cancel+0x64>
    83ea:	b369      	cbz	r1, 8448 <bt_att_req_cancel+0x64>
		return;
	}

	att = att_chan_get(conn);
    83ec:	f7ff f96e 	bl	76cc <att_chan_get>
	if (!att) {
    83f0:	b350      	cbz	r0, 8448 <bt_att_req_cancel+0x64>
		return;
	}

	/* Check if request is outstanding */
	if (att->req == req) {
    83f2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    83f6:	429c      	cmp	r4, r3
    83f8:	d107      	bne.n	840a <bt_att_req_cancel+0x26>
		att->req = &cancel;
    83fa:	4b14      	ldr	r3, [pc, #80]	; (844c <bt_att_req_cancel+0x68>)
    83fc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	} else {
		/* Remove request from the list */
		sys_slist_find_and_remove(&att->reqs, &req->node);
	}

	att_req_destroy(req);
    8400:	4620      	mov	r0, r4
}
    8402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    8406:	f011 bb4c 	b.w	19aa2 <att_req_destroy>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    840a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    840e:	2200      	movs	r2, #0
    8410:	2b00      	cmp	r3, #0
    8412:	d0f5      	beq.n	8400 <bt_att_req_cancel+0x1c>
    8414:	429c      	cmp	r4, r3
    8416:	d114      	bne.n	8442 <bt_att_req_cancel+0x5e>
Z_GENLIST_REMOVE(slist, snode)
    8418:	6823      	ldr	r3, [r4, #0]
    841a:	b952      	cbnz	r2, 8432 <bt_att_req_cancel+0x4e>
    841c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	list->head = node;
    8420:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
Z_GENLIST_REMOVE(slist, snode)
    8424:	4294      	cmp	r4, r2
    8426:	d101      	bne.n	842c <bt_att_req_cancel+0x48>
	list->tail = node;
    8428:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	parent->next = child;
    842c:	2300      	movs	r3, #0
    842e:	6023      	str	r3, [r4, #0]
    8430:	e7e6      	b.n	8400 <bt_att_req_cancel+0x1c>
    8432:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    8434:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    8438:	429c      	cmp	r4, r3
	list->tail = node;
    843a:	bf08      	it	eq
    843c:	f8c0 209c 	streq.w	r2, [r0, #156]	; 0x9c
    8440:	e7f4      	b.n	842c <bt_att_req_cancel+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8442:	461a      	mov	r2, r3
    8444:	681b      	ldr	r3, [r3, #0]
    8446:	e7e3      	b.n	8410 <bt_att_req_cancel+0x2c>
}
    8448:	bd10      	pop	{r4, pc}
    844a:	bf00      	nop
    844c:	20000354 	.word	0x20000354

00008450 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static u16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    8450:	b5f0      	push	{r4, r5, r6, r7, lr}
    8452:	490f      	ldr	r1, [pc, #60]	; (8490 <find_static_attr+0x40>)
	u16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8454:	4f0f      	ldr	r7, [pc, #60]	; (8494 <find_static_attr+0x44>)
	u16_t handle = 1;
    8456:	2501      	movs	r5, #1
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    8458:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    845c:	f1a1 0308 	sub.w	r3, r1, #8
    8460:	42bb      	cmp	r3, r7
    8462:	d211      	bcs.n	8488 <find_static_attr+0x38>
    8464:	f851 6c04 	ldr.w	r6, [r1, #-4]
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    8468:	2200      	movs	r2, #0
    846a:	e006      	b.n	847a <find_static_attr+0x2a>
			if (attr == &static_svc->attrs[i]) {
    846c:	f851 4c08 	ldr.w	r4, [r1, #-8]
    8470:	fb0c 4402 	mla	r4, ip, r2, r4
    8474:	42a0      	cmp	r0, r4
    8476:	d008      	beq.n	848a <find_static_attr+0x3a>
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    8478:	3201      	adds	r2, #1
    847a:	18ab      	adds	r3, r5, r2
    847c:	42b2      	cmp	r2, r6
    847e:	b29b      	uxth	r3, r3
    8480:	d1f4      	bne.n	846c <find_static_attr+0x1c>
    8482:	3108      	adds	r1, #8
    8484:	461d      	mov	r5, r3
    8486:	e7e9      	b.n	845c <find_static_attr+0xc>
				return handle;
			}
		}
	}

	return 0;
    8488:	2300      	movs	r3, #0
}
    848a:	4618      	mov	r0, r3
    848c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    848e:	bf00      	nop
    8490:	0001e438 	.word	0x0001e438
    8494:	0001e448 	.word	0x0001e448

00008498 <gatt_sub_find_free>:
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find_free(struct bt_conn *conn,
					   struct gatt_sub **free_sub)
{
    8498:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int i;

	if (free_sub) {
    849a:	460d      	mov	r5, r1
    849c:	b109      	cbz	r1, 84a2 <gatt_sub_find_free+0xa>
		*free_sub = NULL;
    849e:	2300      	movs	r3, #0
    84a0:	600b      	str	r3, [r1, #0]
	}

	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!bt_conn_addr_le_cmp(conn, &sub->peer)) {
    84a2:	4c0b      	ldr	r4, [pc, #44]	; (84d0 <gatt_sub_find_free+0x38>)
    84a4:	4621      	mov	r1, r4
    84a6:	f010 ffac 	bl	19402 <bt_conn_addr_le_cmp>
    84aa:	b170      	cbz	r0, 84ca <gatt_sub_find_free+0x32>
			return sub;
		} else if (free_sub &&
    84ac:	b155      	cbz	r5, 84c4 <gatt_sub_find_free+0x2c>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    84ae:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    84b0:	2207      	movs	r2, #7
    84b2:	4621      	mov	r1, r4
    84b4:	4668      	mov	r0, sp
    84b6:	9300      	str	r3, [sp, #0]
    84b8:	f8cd 3003 	str.w	r3, [sp, #3]
    84bc:	f010 fbad 	bl	18c1a <memcmp>
		} else if (free_sub &&
    84c0:	b900      	cbnz	r0, 84c4 <gatt_sub_find_free+0x2c>
			*free_sub = sub;
    84c2:	602c      	str	r4, [r5, #0]
		}
	}

	return NULL;
    84c4:	2000      	movs	r0, #0
}
    84c6:	b003      	add	sp, #12
    84c8:	bd30      	pop	{r4, r5, pc}
		struct gatt_sub *sub = &subscriptions[i];
    84ca:	4620      	mov	r0, r4
    84cc:	e7fb      	b.n	84c6 <gatt_sub_find_free+0x2e>
    84ce:	bf00      	nop
    84d0:	200003f0 	.word	0x200003f0

000084d4 <gatt_notify>:
{
    84d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84d8:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    84da:	8992      	ldrh	r2, [r2, #12]
{
    84dc:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    84de:	3202      	adds	r2, #2
    84e0:	211b      	movs	r1, #27
{
    84e2:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    84e4:	f7ff f9e8 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    84e8:	4605      	mov	r5, r0
    84ea:	b1c8      	cbz	r0, 8520 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    84ec:	f100 0708 	add.w	r7, r0, #8
    84f0:	2102      	movs	r1, #2
    84f2:	4638      	mov	r0, r7
    84f4:	f012 fe9b 	bl	1b22e <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    84f8:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    84fa:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    84fc:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    8500:	4638      	mov	r0, r7
    8502:	f012 fe94 	bl	1b22e <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    8506:	89a2      	ldrh	r2, [r4, #12]
    8508:	68a1      	ldr	r1, [r4, #8]
    850a:	4630      	mov	r0, r6
    850c:	f010 fb95 	bl	18c3a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    8510:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8514:	4629      	mov	r1, r5
    8516:	4640      	mov	r0, r8
}
    8518:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    851c:	f011 bb53 	b.w	19bc6 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    8520:	2302      	movs	r3, #2
    8522:	f04f 0100 	mov.w	r1, #0
    8526:	4a07      	ldr	r2, [pc, #28]	; (8544 <gatt_notify+0x70>)
    8528:	4807      	ldr	r0, [pc, #28]	; (8548 <gatt_notify+0x74>)
    852a:	f363 0107 	bfi	r1, r3, #0, #8
    852e:	4b07      	ldr	r3, [pc, #28]	; (854c <gatt_notify+0x78>)
    8530:	1a9b      	subs	r3, r3, r2
    8532:	08db      	lsrs	r3, r3, #3
    8534:	f363 118f 	bfi	r1, r3, #6, #10
    8538:	f010 f84a 	bl	185d0 <log_0>
}
    853c:	f06f 000b 	mvn.w	r0, #11
    8540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8544:	0001e448 	.word	0x0001e448
    8548:	000205b8 	.word	0x000205b8
    854c:	0001e500 	.word	0x0001e500

00008550 <gatt_send.constprop.31>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    8550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8554:	4606      	mov	r6, r0
    8556:	4688      	mov	r8, r1
    8558:	4617      	mov	r7, r2
	if (params) {
    855a:	461c      	mov	r4, r3
    855c:	b343      	cbz	r3, 85b0 <gatt_send.constprop.31+0x60>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    855e:	f247 5030 	movw	r0, #30000	; 0x7530
    8562:	f7ff fe71 	bl	8248 <bt_att_req_alloc>
		if (!req) {
    8566:	4605      	mov	r5, r0
    8568:	b348      	cbz	r0, 85be <gatt_send.constprop.31+0x6e>
		req->destroy = destroy;
    856a:	2300      	movs	r3, #0
		req->user_data = params;
    856c:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    856e:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    8572:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    8574:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    8576:	4601      	mov	r1, r0
    8578:	4630      	mov	r0, r6
    857a:	f011 fb54 	bl	19c26 <bt_att_req_send>
		if (err) {
    857e:	4604      	mov	r4, r0
    8580:	b918      	cbnz	r0, 858a <gatt_send.constprop.31+0x3a>
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    8582:	2400      	movs	r4, #0
}
    8584:	4620      	mov	r0, r4
    8586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_att_req_free(req);
    858a:	4628      	mov	r0, r5
    858c:	f7ff fe70 	bl	8270 <bt_att_req_free>
		BT_ERR("Error sending ATT PDU: %d", err);
    8590:	2301      	movs	r3, #1
    8592:	f04f 0200 	mov.w	r2, #0
    8596:	f363 0207 	bfi	r2, r3, #0, #8
    859a:	490a      	ldr	r1, [pc, #40]	; (85c4 <gatt_send.constprop.31+0x74>)
    859c:	4b0a      	ldr	r3, [pc, #40]	; (85c8 <gatt_send.constprop.31+0x78>)
    859e:	480b      	ldr	r0, [pc, #44]	; (85cc <gatt_send.constprop.31+0x7c>)
    85a0:	1a5b      	subs	r3, r3, r1
    85a2:	08db      	lsrs	r3, r3, #3
    85a4:	f363 128f 	bfi	r2, r3, #6, #10
    85a8:	4621      	mov	r1, r4
    85aa:	f010 f81e 	bl	185ea <log_1>
    85ae:	e7e9      	b.n	8584 <gatt_send.constprop.31+0x34>
		err = bt_att_send(conn, buf, NULL, NULL);
    85b0:	461a      	mov	r2, r3
    85b2:	f011 fb08 	bl	19bc6 <bt_att_send>
	if (err) {
    85b6:	4604      	mov	r4, r0
    85b8:	2800      	cmp	r0, #0
    85ba:	d0e2      	beq.n	8582 <gatt_send.constprop.31+0x32>
    85bc:	e7e8      	b.n	8590 <gatt_send.constprop.31+0x40>
			return -ENOMEM;
    85be:	f06f 040b 	mvn.w	r4, #11
    85c2:	e7df      	b.n	8584 <gatt_send.constprop.31+0x34>
    85c4:	0001e448 	.word	0x0001e448
    85c8:	0001e500 	.word	0x0001e500
    85cc:	00020604 	.word	0x00020604

000085d0 <gatt_indicate>:
{
    85d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85d4:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    85d6:	8a12      	ldrh	r2, [r2, #16]
{
    85d8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    85da:	3202      	adds	r2, #2
    85dc:	211d      	movs	r1, #29
{
    85de:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    85e0:	f7ff f96a 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    85e4:	4605      	mov	r5, r0
    85e6:	b1e8      	cbz	r0, 8624 <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    85e8:	f100 0608 	add.w	r6, r0, #8
    85ec:	2102      	movs	r1, #2
    85ee:	4630      	mov	r0, r6
    85f0:	f012 fe1d 	bl	1b22e <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    85f4:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    85f6:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    85f8:	f827 9b02 	strh.w	r9, [r7], #2
	net_buf_add(buf, params->len);
    85fc:	4630      	mov	r0, r6
    85fe:	f012 fe16 	bl	1b22e <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    8602:	8a22      	ldrh	r2, [r4, #16]
    8604:	68e1      	ldr	r1, [r4, #12]
    8606:	4638      	mov	r0, r7
    8608:	f010 fb17 	bl	18c3a <memcpy>
	if (!params->func) {
    860c:	68a3      	ldr	r3, [r4, #8]
    860e:	b933      	cbnz	r3, 861e <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    8610:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    8612:	4629      	mov	r1, r5
    8614:	4640      	mov	r0, r8
}
    8616:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    861a:	f7ff bf99 	b.w	8550 <gatt_send.constprop.31>
    861e:	4623      	mov	r3, r4
    8620:	4a09      	ldr	r2, [pc, #36]	; (8648 <gatt_indicate+0x78>)
    8622:	e7f6      	b.n	8612 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
    8624:	2302      	movs	r3, #2
    8626:	f04f 0100 	mov.w	r1, #0
    862a:	4a08      	ldr	r2, [pc, #32]	; (864c <gatt_indicate+0x7c>)
    862c:	4808      	ldr	r0, [pc, #32]	; (8650 <gatt_indicate+0x80>)
    862e:	f363 0107 	bfi	r1, r3, #0, #8
    8632:	4b08      	ldr	r3, [pc, #32]	; (8654 <gatt_indicate+0x84>)
    8634:	1a9b      	subs	r3, r3, r2
    8636:	08db      	lsrs	r3, r3, #3
    8638:	f363 118f 	bfi	r1, r3, #6, #10
    863c:	f00f ffc8 	bl	185d0 <log_0>
}
    8640:	f06f 000b 	mvn.w	r0, #11
    8644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8648:	00019c7f 	.word	0x00019c7f
    864c:	0001e448 	.word	0x0001e448
    8650:	00020591 	.word	0x00020591
    8654:	0001e500 	.word	0x0001e500

00008658 <find_sc_cfg>:
{
    8658:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    865a:	4c06      	ldr	r4, [pc, #24]	; (8674 <find_sc_cfg+0x1c>)
    865c:	7823      	ldrb	r3, [r4, #0]
    865e:	4283      	cmp	r3, r0
    8660:	d104      	bne.n	866c <find_sc_cfg+0x14>
    8662:	2207      	movs	r2, #7
    8664:	1c60      	adds	r0, r4, #1
    8666:	f010 fad8 	bl	18c1a <memcmp>
    866a:	b108      	cbz	r0, 8670 <find_sc_cfg+0x18>
	return NULL;
    866c:	2000      	movs	r0, #0
}
    866e:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    8670:	4620      	mov	r0, r4
    8672:	e7fc      	b.n	866e <find_sc_cfg+0x16>
    8674:	20005d0c 	.word	0x20005d0c

00008678 <sc_save>:
{
    8678:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    867c:	4680      	mov	r8, r0
    867e:	460f      	mov	r7, r1
    8680:	4616      	mov	r6, r2
    8682:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    8684:	f7ff ffe8 	bl	8658 <find_sc_cfg>
	if (!cfg) {
    8688:	4604      	mov	r4, r0
    868a:	b9e8      	cbnz	r0, 86c8 <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    868c:	4669      	mov	r1, sp
    868e:	9000      	str	r0, [sp, #0]
    8690:	f8cd 0003 	str.w	r0, [sp, #3]
    8694:	f7ff ffe0 	bl	8658 <find_sc_cfg>
		if (!cfg) {
    8698:	4604      	mov	r4, r0
    869a:	b980      	cbnz	r0, 86be <sc_save+0x46>
			BT_ERR("unable to save SC: no cfg left");
    869c:	2301      	movs	r3, #1
    869e:	f04f 0100 	mov.w	r1, #0
    86a2:	f363 0107 	bfi	r1, r3, #0, #8
    86a6:	4a0f      	ldr	r2, [pc, #60]	; (86e4 <sc_save+0x6c>)
    86a8:	4b0f      	ldr	r3, [pc, #60]	; (86e8 <sc_save+0x70>)
    86aa:	4810      	ldr	r0, [pc, #64]	; (86ec <sc_save+0x74>)
    86ac:	1a9b      	subs	r3, r3, r2
    86ae:	08db      	lsrs	r3, r3, #3
    86b0:	f363 118f 	bfi	r1, r3, #6, #10
    86b4:	f00f ff8c 	bl	185d0 <log_0>
}
    86b8:	b002      	add	sp, #8
    86ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    86be:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    86c2:	4639      	mov	r1, r7
    86c4:	f011 fae3 	bl	19c8e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    86c8:	8922      	ldrh	r2, [r4, #8]
    86ca:	8963      	ldrh	r3, [r4, #10]
    86cc:	b91a      	cbnz	r2, 86d6 <sc_save+0x5e>
    86ce:	b923      	cbnz	r3, 86da <sc_save+0x62>
		cfg->data.start = start;
    86d0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    86d2:	8165      	strh	r5, [r4, #10]
    86d4:	e7f0      	b.n	86b8 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
    86d6:	4296      	cmp	r6, r2
    86d8:	d302      	bcc.n	86e0 <sc_save+0x68>
    86da:	429d      	cmp	r5, r3
    86dc:	d9ec      	bls.n	86b8 <sc_save+0x40>
    86de:	e7f8      	b.n	86d2 <sc_save+0x5a>
		*start = new_start;
    86e0:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    86e2:	e7fa      	b.n	86da <sc_save+0x62>
    86e4:	0001e448 	.word	0x0001e448
    86e8:	0001e500 	.word	0x0001e500
    86ec:	0002061e 	.word	0x0002061e

000086f0 <find_cf_cfg>:
{
    86f0:	b507      	push	{r0, r1, r2, lr}
		if (!conn) {
    86f2:	b960      	cbnz	r0, 870e <find_cf_cfg+0x1e>
			if (!bt_addr_le_cmp(&cf_cfg[i].peer, BT_ADDR_LE_ANY)) {
    86f4:	9000      	str	r0, [sp, #0]
    86f6:	2207      	movs	r2, #7
    86f8:	f8cd 0003 	str.w	r0, [sp, #3]
    86fc:	4669      	mov	r1, sp
    86fe:	4807      	ldr	r0, [pc, #28]	; (871c <find_cf_cfg+0x2c>)
    8700:	f010 fa8b 	bl	18c1a <memcmp>
    8704:	b938      	cbnz	r0, 8716 <find_cf_cfg+0x26>
				return &cf_cfg[i];
    8706:	4806      	ldr	r0, [pc, #24]	; (8720 <find_cf_cfg+0x30>)
}
    8708:	b003      	add	sp, #12
    870a:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (!bt_conn_addr_le_cmp(conn, &cf_cfg[i].peer)) {
    870e:	4903      	ldr	r1, [pc, #12]	; (871c <find_cf_cfg+0x2c>)
    8710:	f010 fe77 	bl	19402 <bt_conn_addr_le_cmp>
    8714:	e7f6      	b.n	8704 <find_cf_cfg+0x14>
	return NULL;
    8716:	2000      	movs	r0, #0
    8718:	e7f6      	b.n	8708 <find_cf_cfg+0x18>
    871a:	bf00      	nop
    871c:	2000036d 	.word	0x2000036d
    8720:	2000036c 	.word	0x2000036c

00008724 <bt_gatt_attr_write_ccc>:
{
    8724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8728:	4698      	mov	r8, r3
    872a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    872e:	68ce      	ldr	r6, [r1, #12]
{
    8730:	4607      	mov	r7, r0
    8732:	4689      	mov	r9, r1
	if (offset) {
    8734:	2b00      	cmp	r3, #0
    8736:	d155      	bne.n	87e4 <bt_gatt_attr_write_ccc+0xc0>
	if (!len || len > sizeof(u16_t)) {
    8738:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    873c:	2b01      	cmp	r3, #1
    873e:	d854      	bhi.n	87ea <bt_gatt_attr_write_ccc+0xc6>
	if (len < sizeof(u16_t)) {
    8740:	f1b8 0f01 	cmp.w	r8, #1
		value = *(u8_t *)buf;
    8744:	7814      	ldrb	r4, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    8746:	bf18      	it	ne
    8748:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    874a:	4631      	mov	r1, r6
		value = *(u8_t *)buf;
    874c:	bf0c      	ite	eq
    874e:	b2a4      	uxtheq	r4, r4
    8750:	ea44 2403 	orrne.w	r4, r4, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    8754:	f011 fb5b 	bl	19e0e <find_ccc_cfg>
	if (!cfg) {
    8758:	4605      	mov	r5, r0
    875a:	bb08      	cbnz	r0, 87a0 <bt_gatt_attr_write_ccc+0x7c>
		if (!value) {
    875c:	b91c      	cbnz	r4, 8766 <bt_gatt_attr_write_ccc+0x42>
			return len;
    875e:	4640      	mov	r0, r8
}
    8760:	b003      	add	sp, #12
    8762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    8766:	4631      	mov	r1, r6
    8768:	f011 fb51 	bl	19e0e <find_ccc_cfg>
		if (!cfg) {
    876c:	4605      	mov	r5, r0
    876e:	b980      	cbnz	r0, 8792 <bt_gatt_attr_write_ccc+0x6e>
			BT_WARN("No space to store CCC cfg");
    8770:	2302      	movs	r3, #2
    8772:	f04f 0100 	mov.w	r1, #0
    8776:	f363 0107 	bfi	r1, r3, #0, #8
    877a:	4a1d      	ldr	r2, [pc, #116]	; (87f0 <bt_gatt_attr_write_ccc+0xcc>)
    877c:	4b1d      	ldr	r3, [pc, #116]	; (87f4 <bt_gatt_attr_write_ccc+0xd0>)
    877e:	481e      	ldr	r0, [pc, #120]	; (87f8 <bt_gatt_attr_write_ccc+0xd4>)
    8780:	1a9b      	subs	r3, r3, r2
    8782:	08db      	lsrs	r3, r3, #3
    8784:	f363 118f 	bfi	r1, r3, #6, #10
    8788:	f00f ff22 	bl	185d0 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    878c:	f06f 0010 	mvn.w	r0, #16
    8790:	e7e6      	b.n	8760 <bt_gatt_attr_write_ccc+0x3c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8792:	f107 0170 	add.w	r1, r7, #112	; 0x70
    8796:	3001      	adds	r0, #1
    8798:	f011 fa79 	bl	19c8e <bt_addr_le_copy>
		cfg->id = conn->id;
    879c:	7a3b      	ldrb	r3, [r7, #8]
    879e:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    87a0:	6933      	ldr	r3, [r6, #16]
    87a2:	b99b      	cbnz	r3, 87cc <bt_gatt_attr_write_ccc+0xa8>
	if (cfg->value != ccc->value) {
    87a4:	8973      	ldrh	r3, [r6, #10]
	cfg->value = value;
    87a6:	812c      	strh	r4, [r5, #8]
	if (cfg->value != ccc->value) {
    87a8:	42a3      	cmp	r3, r4
    87aa:	d003      	beq.n	87b4 <bt_gatt_attr_write_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
    87ac:	4631      	mov	r1, r6
    87ae:	4648      	mov	r0, r9
    87b0:	f011 fa5b 	bl	19c6a <gatt_ccc_changed>
	if (!value) {
    87b4:	2c00      	cmp	r4, #0
    87b6:	d1d2      	bne.n	875e <bt_gatt_attr_write_ccc+0x3a>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    87b8:	4669      	mov	r1, sp
    87ba:	1c68      	adds	r0, r5, #1
    87bc:	9400      	str	r4, [sp, #0]
    87be:	f8cd 4003 	str.w	r4, [sp, #3]
    87c2:	f011 fa64 	bl	19c8e <bt_addr_le_copy>
	cfg->id = 0U;
    87c6:	702c      	strb	r4, [r5, #0]
	cfg->value = 0U;
    87c8:	812c      	strh	r4, [r5, #8]
    87ca:	e7c8      	b.n	875e <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    87cc:	4622      	mov	r2, r4
    87ce:	4649      	mov	r1, r9
    87d0:	4638      	mov	r0, r7
    87d2:	4798      	blx	r3
		if (write < 0) {
    87d4:	2800      	cmp	r0, #0
    87d6:	dbc3      	blt.n	8760 <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
    87d8:	3801      	subs	r0, #1
    87da:	2801      	cmp	r0, #1
    87dc:	d9e2      	bls.n	87a4 <bt_gatt_attr_write_ccc+0x80>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    87de:	f06f 000d 	mvn.w	r0, #13
    87e2:	e7bd      	b.n	8760 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    87e4:	f06f 0006 	mvn.w	r0, #6
    87e8:	e7ba      	b.n	8760 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    87ea:	f06f 000c 	mvn.w	r0, #12
    87ee:	e7b7      	b.n	8760 <bt_gatt_attr_write_ccc+0x3c>
    87f0:	0001e448 	.word	0x0001e448
    87f4:	0001e500 	.word	0x0001e500
    87f8:	000204d7 	.word	0x000204d7

000087fc <gatt_write_ccc.constprop.26>:
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    87fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8800:	4689      	mov	r9, r1
    8802:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    8804:	2112      	movs	r1, #18
    8806:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    8808:	4607      	mov	r7, r0
    880a:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    880c:	f7ff f854 	bl	78b8 <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    8810:	4604      	mov	r4, r0
    8812:	b308      	cbz	r0, 8858 <gatt_write_ccc.constprop.26+0x5c>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    8814:	f100 0608 	add.w	r6, r0, #8
    8818:	2102      	movs	r1, #2
    881a:	4630      	mov	r0, r6
    881c:	f012 fd07 	bl	1b22e <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    8820:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    8822:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    8826:	4630      	mov	r0, r6
    8828:	f012 fd18 	bl	1b25c <net_buf_simple_add_le16>
    882c:	f3bf 8f5b 	dmb	ish
    8830:	f105 030c 	add.w	r3, r5, #12
    8834:	e853 2f00 	ldrex	r2, [r3]
    8838:	f042 0204 	orr.w	r2, r2, #4
    883c:	e843 2100 	strex	r1, r2, [r3]
    8840:	2900      	cmp	r1, #0
    8842:	d1f7      	bne.n	8834 <gatt_write_ccc.constprop.26+0x38>
    8844:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    8848:	462b      	mov	r3, r5
    884a:	4621      	mov	r1, r4
    884c:	4638      	mov	r0, r7
    884e:	4a04      	ldr	r2, [pc, #16]	; (8860 <gatt_write_ccc.constprop.26+0x64>)
}
    8850:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    8854:	f7ff be7c 	b.w	8550 <gatt_send.constprop.31>
}
    8858:	f06f 000b 	mvn.w	r0, #11
    885c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8860:	0001a009 	.word	0x0001a009

00008864 <cf_write>:
{
    8864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8868:	4690      	mov	r8, r2
    886a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    886e:	2a01      	cmp	r2, #1
{
    8870:	4606      	mov	r6, r0
    8872:	461f      	mov	r7, r3
	if (offset > sizeof(cfg->data)) {
    8874:	d844      	bhi.n	8900 <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
    8876:	441a      	add	r2, r3
    8878:	2a01      	cmp	r2, #1
    887a:	461d      	mov	r5, r3
    887c:	dc43      	bgt.n	8906 <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
    887e:	f7ff ff37 	bl	86f0 <find_cf_cfg>
	if (!cfg) {
    8882:	4604      	mov	r4, r0
    8884:	b9b0      	cbnz	r0, 88b4 <cf_write+0x50>
		cfg = find_cf_cfg(NULL);
    8886:	f7ff ff33 	bl	86f0 <find_cf_cfg>
	if (!cfg) {
    888a:	4604      	mov	r4, r0
    888c:	b990      	cbnz	r0, 88b4 <cf_write+0x50>
		BT_WARN("No space to store Client Supported Features");
    888e:	2302      	movs	r3, #2
    8890:	f04f 0100 	mov.w	r1, #0
    8894:	f363 0107 	bfi	r1, r3, #0, #8
    8898:	4a1c      	ldr	r2, [pc, #112]	; (890c <cf_write+0xa8>)
    889a:	4b1d      	ldr	r3, [pc, #116]	; (8910 <cf_write+0xac>)
    889c:	481d      	ldr	r0, [pc, #116]	; (8914 <cf_write+0xb0>)
    889e:	1a9b      	subs	r3, r3, r2
    88a0:	08db      	lsrs	r3, r3, #3
    88a2:	f363 118f 	bfi	r1, r3, #6, #10
    88a6:	f00f fe93 	bl	185d0 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    88aa:	f06f 0510 	mvn.w	r5, #16
}
    88ae:	4628      	mov	r0, r5
    88b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i < len && i < last_byte; i++) {
    88b4:	2300      	movs	r3, #0
    88b6:	429f      	cmp	r7, r3
    88b8:	d915      	bls.n	88e6 <cf_write+0x82>
    88ba:	b13b      	cbz	r3, 88cc <cf_write+0x68>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    88bc:	f898 3000 	ldrb.w	r3, [r8]
    88c0:	7a22      	ldrb	r2, [r4, #8]
    88c2:	f003 0301 	and.w	r3, r3, #1
    88c6:	4313      	orrs	r3, r2
    88c8:	7223      	strb	r3, [r4, #8]
		BT_DBG("byte %u: data 0x%02x value 0x%02x", i, cfg->data[i],
    88ca:	e00e      	b.n	88ea <cf_write+0x86>
    88cc:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    88ce:	f898 2000 	ldrb.w	r2, [r8]
    88d2:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    88d4:	07d0      	lsls	r0, r2, #31
	for (i = 0U; i < len && i < last_byte; i++) {
    88d6:	f04f 0301 	mov.w	r3, #1
			if ((BIT(bit) & chg_bits) &&
    88da:	d5ec      	bpl.n	88b6 <cf_write+0x52>
    88dc:	07ca      	lsls	r2, r1, #31
    88de:	d5ea      	bpl.n	88b6 <cf_write+0x52>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    88e0:	f06f 0512 	mvn.w	r5, #18
    88e4:	e7e3      	b.n	88ae <cf_write+0x4a>
	for (i = 0U; i < len && i < last_byte; i++) {
    88e6:	2f00      	cmp	r7, #0
    88e8:	d1e8      	bne.n	88bc <cf_write+0x58>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    88ea:	f106 0170 	add.w	r1, r6, #112	; 0x70
    88ee:	1c60      	adds	r0, r4, #1
    88f0:	f011 f9cd 	bl	19c8e <bt_addr_le_copy>
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    88f4:	2100      	movs	r1, #0
    88f6:	f104 000c 	add.w	r0, r4, #12
    88fa:	f011 faa2 	bl	19e42 <atomic_set_bit>
	return len;
    88fe:	e7d6      	b.n	88ae <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8900:	f06f 0506 	mvn.w	r5, #6
    8904:	e7d3      	b.n	88ae <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8906:	f06f 050c 	mvn.w	r5, #12
    890a:	e7d0      	b.n	88ae <cf_write+0x4a>
    890c:	0001e448 	.word	0x0001e448
    8910:	0001e500 	.word	0x0001e500
    8914:	00020521 	.word	0x00020521

00008918 <sc_indicate_rsp>:
{
    8918:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    891a:	4b13      	ldr	r3, [pc, #76]	; (8968 <sc_indicate_rsp+0x50>)
    891c:	f3bf 8f5b 	dmb	ish
    8920:	4604      	mov	r4, r0
    8922:	e853 2f00 	ldrex	r2, [r3]
    8926:	f022 0202 	bic.w	r2, r2, #2
    892a:	e843 2100 	strex	r1, r2, [r3]
    892e:	2900      	cmp	r1, #0
    8930:	d1f7      	bne.n	8922 <sc_indicate_rsp+0xa>
    8932:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    8936:	2100      	movs	r1, #0
    8938:	4618      	mov	r0, r3
    893a:	f011 fa20 	bl	19d7e <atomic_test_bit>
    893e:	b128      	cbz	r0, 894c <sc_indicate_rsp+0x34>
    8940:	2200      	movs	r2, #0
    8942:	f1a3 0120 	sub.w	r1, r3, #32
    8946:	4809      	ldr	r0, [pc, #36]	; (896c <sc_indicate_rsp+0x54>)
    8948:	f00e fe6c 	bl	17624 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    894c:	4620      	mov	r0, r4
    894e:	f7ff fecf 	bl	86f0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    8952:	b140      	cbz	r0, 8966 <sc_indicate_rsp+0x4e>
    8954:	7a03      	ldrb	r3, [r0, #8]
    8956:	07db      	lsls	r3, r3, #31
    8958:	d505      	bpl.n	8966 <sc_indicate_rsp+0x4e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    895a:	2100      	movs	r1, #0
    895c:	300c      	adds	r0, #12
}
    895e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    8962:	f011 ba6e 	b.w	19e42 <atomic_set_bit>
}
    8966:	bd10      	pop	{r4, pc}
    8968:	200003d4 	.word	0x200003d4
    896c:	20005c68 	.word	0x20005c68

00008970 <notify_cb>:
{
    8970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8972:	4b2e      	ldr	r3, [pc, #184]	; (8a2c <notify_cb+0xbc>)
    8974:	6882      	ldr	r2, [r0, #8]
    8976:	429a      	cmp	r2, r3
{
    8978:	4607      	mov	r7, r0
    897a:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    897c:	d002      	beq.n	8984 <notify_cb+0x14>
		return BT_GATT_ITER_CONTINUE;
    897e:	2001      	movs	r0, #1
}
    8980:	b003      	add	sp, #12
    8982:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
    8984:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    8986:	4b2a      	ldr	r3, [pc, #168]	; (8a30 <notify_cb+0xc0>)
    8988:	429e      	cmp	r6, r3
    898a:	d032      	beq.n	89f2 <notify_cb+0x82>
		if (cfg->value != data->type) {
    898c:	8932      	ldrh	r2, [r6, #8]
    898e:	88a3      	ldrh	r3, [r4, #4]
    8990:	429a      	cmp	r2, r3
    8992:	d1f4      	bne.n	897e <notify_cb+0xe>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8994:	4631      	mov	r1, r6
    8996:	f811 0b01 	ldrb.w	r0, [r1], #1
    899a:	f7fe f9fd 	bl	6d98 <bt_conn_lookup_addr_le>
		if (!conn) {
    899e:	4605      	mov	r5, r0
    89a0:	2800      	cmp	r0, #0
    89a2:	d0ec      	beq.n	897e <notify_cb+0xe>
		if (conn->state != BT_CONN_CONNECTED) {
    89a4:	7a83      	ldrb	r3, [r0, #10]
    89a6:	2b06      	cmp	r3, #6
    89a8:	d11d      	bne.n	89e6 <notify_cb+0x76>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    89aa:	6973      	ldr	r3, [r6, #20]
    89ac:	b9b3      	cbnz	r3, 89dc <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    89ae:	8a39      	ldrh	r1, [r7, #16]
    89b0:	88a3      	ldrh	r3, [r4, #4]
    89b2:	68a2      	ldr	r2, [r4, #8]
    89b4:	3901      	subs	r1, #1
    89b6:	2b02      	cmp	r3, #2
    89b8:	b289      	uxth	r1, r1
			err = gatt_indicate(conn, attr->handle - 1,
    89ba:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    89bc:	d10b      	bne.n	89d6 <notify_cb+0x66>
			err = gatt_indicate(conn, attr->handle - 1,
    89be:	f7ff fe07 	bl	85d0 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    89c2:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    89c4:	4628      	mov	r0, r5
    89c6:	f010 fd34 	bl	19432 <bt_conn_unref>
		if (err < 0) {
    89ca:	2e00      	cmp	r6, #0
    89cc:	f04f 0000 	mov.w	r0, #0
    89d0:	dbd6      	blt.n	8980 <notify_cb+0x10>
		data->err = 0;
    89d2:	6020      	str	r0, [r4, #0]
    89d4:	e7d3      	b.n	897e <notify_cb+0xe>
			err = gatt_notify(conn, attr->handle - 1,
    89d6:	f7ff fd7d 	bl	84d4 <gatt_notify>
    89da:	e7f2      	b.n	89c2 <notify_cb+0x52>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    89dc:	4639      	mov	r1, r7
    89de:	4798      	blx	r3
    89e0:	2800      	cmp	r0, #0
    89e2:	d1e4      	bne.n	89ae <notify_cb+0x3e>
			bt_conn_unref(conn);
    89e4:	4628      	mov	r0, r5
			bt_conn_unref(conn);
    89e6:	f010 fd24 	bl	19432 <bt_conn_unref>
			continue;
    89ea:	e7c8      	b.n	897e <notify_cb+0xe>
			bt_conn_unref(conn);
    89ec:	f010 fd21 	bl	19432 <bt_conn_unref>
    89f0:	e7cc      	b.n	898c <notify_cb+0x1c>
    89f2:	4d10      	ldr	r5, [pc, #64]	; (8a34 <notify_cb+0xc4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    89f4:	2300      	movs	r3, #0
    89f6:	2207      	movs	r2, #7
    89f8:	4669      	mov	r1, sp
    89fa:	1c68      	adds	r0, r5, #1
    89fc:	9300      	str	r3, [sp, #0]
    89fe:	f8cd 3003 	str.w	r3, [sp, #3]
    8a02:	f010 f90a 	bl	18c1a <memcmp>
    8a06:	2800      	cmp	r0, #0
    8a08:	d0c0      	beq.n	898c <notify_cb+0x1c>
			conn = bt_conn_lookup_state_le(&cfg->peer,
    8a0a:	2106      	movs	r1, #6
    8a0c:	1c68      	adds	r0, r5, #1
    8a0e:	f7fe f9e1 	bl	6dd4 <bt_conn_lookup_state_le>
			if (!conn) {
    8a12:	2800      	cmp	r0, #0
    8a14:	d1ea      	bne.n	89ec <notify_cb+0x7c>
				sc = (struct sc_data *)data->ind_params->data;
    8a16:	68a3      	ldr	r3, [r4, #8]
				sc_save(cfg->id, &cfg->peer,
    8a18:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    8a1a:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    8a1c:	f811 0b01 	ldrb.w	r0, [r1], #1
    8a20:	8853      	ldrh	r3, [r2, #2]
    8a22:	8812      	ldrh	r2, [r2, #0]
    8a24:	f7ff fe28 	bl	8678 <sc_save>
				continue;
    8a28:	e7b0      	b.n	898c <notify_cb+0x1c>
    8a2a:	bf00      	nop
    8a2c:	00008725 	.word	0x00008725
    8a30:	2000cc50 	.word	0x2000cc50
    8a34:	20005d0c 	.word	0x20005d0c

00008a38 <read_ppcp>:
{
    8a38:	b513      	push	{r0, r1, r4, lr}
    8a3a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    8a3e:	4c0b      	ldr	r4, [pc, #44]	; (8a6c <read_ppcp+0x34>)
{
    8a40:	4610      	mov	r0, r2
	if (offset > value_len) {
    8a42:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    8a44:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    8a48:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    8a4c:	d80b      	bhi.n	8a66 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    8a4e:	f1c1 0408 	rsb	r4, r1, #8
    8a52:	429c      	cmp	r4, r3
    8a54:	bfa8      	it	ge
    8a56:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    8a58:	4622      	mov	r2, r4
    8a5a:	4469      	add	r1, sp
    8a5c:	f010 f8ed 	bl	18c3a <memcpy>
}
    8a60:	4620      	mov	r0, r4
    8a62:	b002      	add	sp, #8
    8a64:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8a66:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    8a6a:	e7f9      	b.n	8a60 <read_ppcp+0x28>
    8a6c:	00280018 	.word	0x00280018

00008a70 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    8a70:	6882      	ldr	r2, [r0, #8]
    8a72:	4b23      	ldr	r3, [pc, #140]	; (8b00 <disconnected_cb+0x90>)
    8a74:	429a      	cmp	r2, r3
{
    8a76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8a7a:	4607      	mov	r7, r0
    8a7c:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    8a7e:	d102      	bne.n	8a86 <disconnected_cb+0x16>
	ccc = attr->user_data;
    8a80:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    8a82:	8963      	ldrh	r3, [r4, #10]
    8a84:	bb2b      	cbnz	r3, 8ad2 <disconnected_cb+0x62>
}
    8a86:	2001      	movs	r0, #1
    8a88:	b002      	add	sp, #8
    8a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    8a8e:	4629      	mov	r1, r5
    8a90:	4630      	mov	r0, r6
    8a92:	f010 fcb6 	bl	19402 <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    8a96:	bb20      	cbnz	r0, 8ae2 <disconnected_cb+0x72>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8a98:	f106 0870 	add.w	r8, r6, #112	; 0x70
    8a9c:	7a30      	ldrb	r0, [r6, #8]
    8a9e:	4641      	mov	r1, r8
    8aa0:	f010 fc09 	bl	192b6 <bt_addr_le_is_bonded>
    8aa4:	4606      	mov	r6, r0
    8aa6:	b978      	cbnz	r0, 8ac8 <disconnected_cb+0x58>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    8aa8:	9000      	str	r0, [sp, #0]
    8aaa:	4669      	mov	r1, sp
    8aac:	f8cd 0003 	str.w	r0, [sp, #3]
    8ab0:	4628      	mov	r0, r5
    8ab2:	f011 f8ec 	bl	19c8e <bt_addr_le_copy>
	cfg->id = 0U;
    8ab6:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
    8ab8:	8126      	strh	r6, [r4, #8]
    8aba:	e018      	b.n	8aee <disconnected_cb+0x7e>
				if (tmp->state == BT_CONN_CONNECTED) {
    8abc:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    8abe:	f010 fcb8 	bl	19432 <bt_conn_unref>
	if (!value_used) {
    8ac2:	2d06      	cmp	r5, #6
    8ac4:	d0df      	beq.n	8a86 <disconnected_cb+0x16>
    8ac6:	e012      	b.n	8aee <disconnected_cb+0x7e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8ac8:	4641      	mov	r1, r8
    8aca:	4628      	mov	r0, r5
    8acc:	f011 f8df 	bl	19c8e <bt_addr_le_copy>
    8ad0:	e00d      	b.n	8aee <disconnected_cb+0x7e>
		if (!cfg->value) {
    8ad2:	8923      	ldrh	r3, [r4, #8]
    8ad4:	b15b      	cbz	r3, 8aee <disconnected_cb+0x7e>
		if (conn->id != cfg->id ||
    8ad6:	4625      	mov	r5, r4
    8ad8:	7a32      	ldrb	r2, [r6, #8]
    8ada:	f815 3b01 	ldrb.w	r3, [r5], #1
    8ade:	429a      	cmp	r2, r3
    8ae0:	d0d5      	beq.n	8a8e <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8ae2:	4629      	mov	r1, r5
    8ae4:	7820      	ldrb	r0, [r4, #0]
    8ae6:	f7fe f957 	bl	6d98 <bt_conn_lookup_addr_le>
			if (tmp) {
    8aea:	2800      	cmp	r0, #0
    8aec:	d1e6      	bne.n	8abc <disconnected_cb+0x4c>
		if (ccc->cfg_changed) {
    8aee:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    8af0:	2100      	movs	r1, #0
    8af2:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    8af4:	2b00      	cmp	r3, #0
    8af6:	d0c6      	beq.n	8a86 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    8af8:	4638      	mov	r0, r7
    8afa:	4798      	blx	r3
    8afc:	e7c3      	b.n	8a86 <disconnected_cb+0x16>
    8afe:	bf00      	nop
    8b00:	00008725 	.word	0x00008725

00008b04 <bt_gatt_init>:
{
    8b04:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8b06:	4b17      	ldr	r3, [pc, #92]	; (8b64 <bt_gatt_init+0x60>)
    8b08:	f3bf 8f5b 	dmb	ish
    8b0c:	2201      	movs	r2, #1
    8b0e:	e853 1f00 	ldrex	r1, [r3]
    8b12:	2900      	cmp	r1, #0
    8b14:	d103      	bne.n	8b1e <bt_gatt_init+0x1a>
    8b16:	e843 2000 	strex	r0, r2, [r3]
    8b1a:	2800      	cmp	r0, #0
    8b1c:	d1f7      	bne.n	8b0e <bt_gatt_init+0xa>
    8b1e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    8b22:	d11d      	bne.n	8b60 <bt_gatt_init+0x5c>
    8b24:	4a10      	ldr	r2, [pc, #64]	; (8b68 <bt_gatt_init+0x64>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    8b26:	4911      	ldr	r1, [pc, #68]	; (8b6c <bt_gatt_init+0x68>)
    8b28:	8813      	ldrh	r3, [r2, #0]
    8b2a:	4c11      	ldr	r4, [pc, #68]	; (8b70 <bt_gatt_init+0x6c>)
	if (!atomic_cas(&init, 0, 1)) {
    8b2c:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    8b2e:	42a1      	cmp	r1, r4
    8b30:	d310      	bcc.n	8b54 <bt_gatt_init+0x50>
    8b32:	b100      	cbz	r0, 8b36 <bt_gatt_init+0x32>
    8b34:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    8b36:	490f      	ldr	r1, [pc, #60]	; (8b74 <bt_gatt_init+0x70>)
    8b38:	480f      	ldr	r0, [pc, #60]	; (8b78 <bt_gatt_init+0x74>)
    8b3a:	f015 f9d0 	bl	1dede <k_delayed_work_init>
    8b3e:	490e      	ldr	r1, [pc, #56]	; (8b78 <bt_gatt_init+0x74>)
    8b40:	480e      	ldr	r0, [pc, #56]	; (8b7c <bt_gatt_init+0x78>)
    8b42:	220a      	movs	r2, #10
    8b44:	f00e fd6e 	bl	17624 <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
    8b48:	490d      	ldr	r1, [pc, #52]	; (8b80 <bt_gatt_init+0x7c>)
    8b4a:	480e      	ldr	r0, [pc, #56]	; (8b84 <bt_gatt_init+0x80>)
}
    8b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_init(&gatt_sc.work, sc_process);
    8b50:	f015 b9c5 	b.w	1dede <k_delayed_work_init>
		last_static_handle += svc->attr_count;
    8b54:	6848      	ldr	r0, [r1, #4]
    8b56:	4403      	add	r3, r0
    8b58:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    8b5a:	3108      	adds	r1, #8
    8b5c:	2001      	movs	r0, #1
    8b5e:	e7e6      	b.n	8b2e <bt_gatt_init+0x2a>
}
    8b60:	bd10      	pop	{r4, pc}
    8b62:	bf00      	nop
    8b64:	200003d8 	.word	0x200003d8
    8b68:	20005d0a 	.word	0x20005d0a
    8b6c:	0001e430 	.word	0x0001e430
    8b70:	0001e448 	.word	0x0001e448
    8b74:	0001a115 	.word	0x0001a115
    8b78:	2000037c 	.word	0x2000037c
    8b7c:	20005c68 	.word	0x20005c68
    8b80:	00008e09 	.word	0x00008e09
    8b84:	200003b4 	.word	0x200003b4

00008b88 <bt_gatt_attr_value_handle>:
{
    8b88:	b508      	push	{r3, lr}
	if ((attr != NULL)
    8b8a:	b188      	cbz	r0, 8bb0 <bt_gatt_attr_value_handle+0x28>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    8b8c:	6841      	ldr	r1, [r0, #4]
    8b8e:	4b09      	ldr	r3, [pc, #36]	; (8bb4 <bt_gatt_attr_value_handle+0x2c>)
    8b90:	4299      	cmp	r1, r3
    8b92:	d10d      	bne.n	8bb0 <bt_gatt_attr_value_handle+0x28>
		handle = chrc->value_handle;
    8b94:	68c3      	ldr	r3, [r0, #12]
    8b96:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    8b98:	b91b      	cbnz	r3, 8ba2 <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    8b9a:	8a03      	ldrh	r3, [r0, #16]
    8b9c:	b11b      	cbz	r3, 8ba6 <bt_gatt_attr_value_handle+0x1e>
    8b9e:	3301      	adds	r3, #1
    8ba0:	b29b      	uxth	r3, r3
}
    8ba2:	4618      	mov	r0, r3
    8ba4:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    8ba6:	f7ff fc53 	bl	8450 <find_static_attr>
    8baa:	3001      	adds	r0, #1
    8bac:	b283      	uxth	r3, r0
	return handle;
    8bae:	e7f8      	b.n	8ba2 <bt_gatt_attr_value_handle+0x1a>
	u16_t handle = 0;
    8bb0:	2300      	movs	r3, #0
    8bb2:	e7f6      	b.n	8ba2 <bt_gatt_attr_value_handle+0x1a>
    8bb4:	0001a09d 	.word	0x0001a09d

00008bb8 <bt_gatt_foreach_attr_type>:
{
    8bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bbc:	b089      	sub	sp, #36	; 0x24
    8bbe:	4699      	mov	r9, r3
    8bc0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    8bc4:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    8bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8bca:	2d00      	cmp	r5, #0
    8bcc:	bf08      	it	eq
    8bce:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    8bd0:	4b25      	ldr	r3, [pc, #148]	; (8c68 <bt_gatt_foreach_attr_type+0xb0>)
    8bd2:	881b      	ldrh	r3, [r3, #0]
    8bd4:	4283      	cmp	r3, r0
{
    8bd6:	4607      	mov	r7, r0
    8bd8:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    8bda:	d33c      	bcc.n	8c56 <bt_gatt_foreach_attr_type+0x9e>
    8bdc:	f8df a090 	ldr.w	sl, [pc, #144]	; 8c70 <bt_gatt_foreach_attr_type+0xb8>
		u16_t handle = 1;
    8be0:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    8be2:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8be6:	4b21      	ldr	r3, [pc, #132]	; (8c6c <bt_gatt_foreach_attr_type+0xb4>)
    8be8:	f1aa 0208 	sub.w	r2, sl, #8
    8bec:	429a      	cmp	r2, r3
    8bee:	d232      	bcs.n	8c56 <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    8bf0:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    8bf4:	4422      	add	r2, r4
    8bf6:	42ba      	cmp	r2, r7
    8bf8:	d234      	bcs.n	8c64 <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    8bfa:	b294      	uxth	r4, r2
				continue;
    8bfc:	f10a 0a08 	add.w	sl, sl, #8
    8c00:	e7f1      	b.n	8be6 <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    8c02:	9903      	ldr	r1, [sp, #12]
    8c04:	4640      	mov	r0, r8
    8c06:	f010 fa8f 	bl	19128 <bt_uuid_cmp>
    8c0a:	b1c0      	cbz	r0, 8c3e <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    8c0c:	3401      	adds	r4, #1
    8c0e:	3601      	adds	r6, #1
    8c10:	b2a4      	uxth	r4, r4
    8c12:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    8c16:	42b2      	cmp	r2, r6
    8c18:	d9f0      	bls.n	8bfc <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    8c1a:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    8c1e:	2214      	movs	r2, #20
    8c20:	fb0b 1106 	mla	r1, fp, r6, r1
    8c24:	a803      	add	r0, sp, #12
    8c26:	f010 f808 	bl	18c3a <memcpy>
	if (attr->handle > end_handle) {
    8c2a:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    8c2c:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    8c30:	429c      	cmp	r4, r3
    8c32:	d810      	bhi.n	8c56 <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    8c34:	42bc      	cmp	r4, r7
    8c36:	d3e9      	bcc.n	8c0c <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    8c38:	f1b8 0f00 	cmp.w	r8, #0
    8c3c:	d1e1      	bne.n	8c02 <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    8c3e:	f1b9 0f00 	cmp.w	r9, #0
    8c42:	d10b      	bne.n	8c5c <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    8c44:	3d01      	subs	r5, #1
    8c46:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    8c48:	9914      	ldr	r1, [sp, #80]	; 0x50
    8c4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8c4c:	a803      	add	r0, sp, #12
    8c4e:	4798      	blx	r3
	if (!*num_matches) {
    8c50:	b10d      	cbz	r5, 8c56 <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    8c52:	2800      	cmp	r0, #0
    8c54:	d1da      	bne.n	8c0c <bt_gatt_foreach_attr_type+0x54>
}
    8c56:	b009      	add	sp, #36	; 0x24
    8c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    8c5c:	9a06      	ldr	r2, [sp, #24]
    8c5e:	4591      	cmp	r9, r2
    8c60:	d1d4      	bne.n	8c0c <bt_gatt_foreach_attr_type+0x54>
    8c62:	e7ef      	b.n	8c44 <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    8c64:	2600      	movs	r6, #0
    8c66:	e7d4      	b.n	8c12 <bt_gatt_foreach_attr_type+0x5a>
    8c68:	20005d0a 	.word	0x20005d0a
    8c6c:	0001e448 	.word	0x0001e448
    8c70:	0001e438 	.word	0x0001e438

00008c74 <db_hash_gen.isra.18>:
static void db_hash_gen(bool store)
    8c74:	b510      	push	{r4, lr}
    8c76:	b0c8      	sub	sp, #288	; 0x120
	u8_t key[16] = {};
    8c78:	2210      	movs	r2, #16
    8c7a:	2100      	movs	r1, #0
    8c7c:	4668      	mov	r0, sp
    8c7e:	f010 f806 	bl	18c8e <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    8c82:	aa1c      	add	r2, sp, #112	; 0x70
    8c84:	4669      	mov	r1, sp
    8c86:	a804      	add	r0, sp, #16
    8c88:	f00f fb94 	bl	183b4 <tc_cmac_setup>
    8c8c:	b978      	cbnz	r0, 8cae <db_hash_gen.isra.18+0x3a>
		BT_ERR("Unable to setup AES CMAC");
    8c8e:	2301      	movs	r3, #1
    8c90:	f04f 0100 	mov.w	r1, #0
    8c94:	f363 0107 	bfi	r1, r3, #0, #8
    8c98:	4a18      	ldr	r2, [pc, #96]	; (8cfc <db_hash_gen.isra.18+0x88>)
    8c9a:	4b19      	ldr	r3, [pc, #100]	; (8d00 <db_hash_gen.isra.18+0x8c>)
    8c9c:	4819      	ldr	r0, [pc, #100]	; (8d04 <db_hash_gen.isra.18+0x90>)
    8c9e:	1a9b      	subs	r3, r3, r2
    8ca0:	08db      	lsrs	r3, r3, #3
    8ca2:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to calculate hash");
    8ca6:	f00f fc93 	bl	185d0 <log_0>
}
    8caa:	b048      	add	sp, #288	; 0x120
    8cac:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    8cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8cb2:	2001      	movs	r0, #1
    8cb4:	ab04      	add	r3, sp, #16
    8cb6:	4a14      	ldr	r2, [pc, #80]	; (8d08 <db_hash_gen.isra.18+0x94>)
    8cb8:	f011 fa21 	bl	1a0fe <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    8cbc:	a904      	add	r1, sp, #16
    8cbe:	4813      	ldr	r0, [pc, #76]	; (8d0c <db_hash_gen.isra.18+0x98>)
    8cc0:	f00f fc0e 	bl	184e0 <tc_cmac_final>
    8cc4:	b960      	cbnz	r0, 8ce0 <db_hash_gen.isra.18+0x6c>
		BT_ERR("Unable to calculate hash");
    8cc6:	2301      	movs	r3, #1
    8cc8:	f04f 0100 	mov.w	r1, #0
    8ccc:	f363 0107 	bfi	r1, r3, #0, #8
    8cd0:	4a0a      	ldr	r2, [pc, #40]	; (8cfc <db_hash_gen.isra.18+0x88>)
    8cd2:	4b0b      	ldr	r3, [pc, #44]	; (8d00 <db_hash_gen.isra.18+0x8c>)
    8cd4:	480e      	ldr	r0, [pc, #56]	; (8d10 <db_hash_gen.isra.18+0x9c>)
    8cd6:	1a9b      	subs	r3, r3, r2
    8cd8:	08db      	lsrs	r3, r3, #3
    8cda:	f363 118f 	bfi	r1, r3, #6, #10
    8cde:	e7e2      	b.n	8ca6 <db_hash_gen.isra.18+0x32>
    8ce0:	4b0a      	ldr	r3, [pc, #40]	; (8d0c <db_hash_gen.isra.18+0x98>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    8ce2:	2208      	movs	r2, #8
    8ce4:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    8ce8:	7818      	ldrb	r0, [r3, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    8cea:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    8cee:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    8cf2:	3a01      	subs	r2, #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    8cf4:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    8cf6:	d1f7      	bne.n	8ce8 <db_hash_gen.isra.18+0x74>
    8cf8:	e7d7      	b.n	8caa <db_hash_gen.isra.18+0x36>
    8cfa:	bf00      	nop
    8cfc:	0001e448 	.word	0x0001e448
    8d00:	0001e500 	.word	0x0001e500
    8d04:	0002054d 	.word	0x0002054d
    8d08:	00019cd3 	.word	0x00019cd3
    8d0c:	2000a127 	.word	0x2000a127
    8d10:	00020566 	.word	0x00020566

00008d14 <bt_gatt_indicate>:
{
    8d14:	b570      	push	{r4, r5, r6, lr}
    8d16:	4605      	mov	r5, r0
    8d18:	b08a      	sub	sp, #40	; 0x28
    8d1a:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8d1c:	4837      	ldr	r0, [pc, #220]	; (8dfc <bt_gatt_indicate+0xe8>)
    8d1e:	2101      	movs	r1, #1
    8d20:	f011 f82d 	bl	19d7e <atomic_test_bit>
    8d24:	2800      	cmp	r0, #0
    8d26:	d060      	beq.n	8dea <bt_gatt_indicate+0xd6>
	attr = params->attr;
    8d28:	6870      	ldr	r0, [r6, #4]
    8d2a:	9004      	str	r0, [sp, #16]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    8d2c:	b115      	cbz	r5, 8d34 <bt_gatt_indicate+0x20>
    8d2e:	7aab      	ldrb	r3, [r5, #10]
    8d30:	2b06      	cmp	r3, #6
    8d32:	d15d      	bne.n	8df0 <bt_gatt_indicate+0xdc>
	handle = attr->handle ? : find_static_attr(attr);
    8d34:	8a04      	ldrh	r4, [r0, #16]
    8d36:	b93c      	cbnz	r4, 8d48 <bt_gatt_indicate+0x34>
    8d38:	f7ff fb8a 	bl	8450 <find_static_attr>
	if (!handle) {
    8d3c:	4604      	mov	r4, r0
    8d3e:	b918      	cbnz	r0, 8d48 <bt_gatt_indicate+0x34>
		return -ENOENT;
    8d40:	f06f 0001 	mvn.w	r0, #1
}
    8d44:	b00a      	add	sp, #40	; 0x28
    8d46:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid) {
    8d48:	6832      	ldr	r2, [r6, #0]
    8d4a:	b1b2      	cbz	r2, 8d7a <bt_gatt_indicate+0x66>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    8d4c:	a904      	add	r1, sp, #16
    8d4e:	9102      	str	r1, [sp, #8]
    8d50:	492b      	ldr	r1, [pc, #172]	; (8e00 <bt_gatt_indicate+0xec>)
    8d52:	9101      	str	r1, [sp, #4]
    8d54:	2101      	movs	r1, #1
		attr = NULL;
    8d56:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    8d58:	9100      	str	r1, [sp, #0]
    8d5a:	4620      	mov	r0, r4
    8d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    8d60:	9304      	str	r3, [sp, #16]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    8d62:	f7ff ff29 	bl	8bb8 <bt_gatt_foreach_attr_type>
		if (!attr) {
    8d66:	9804      	ldr	r0, [sp, #16]
    8d68:	2800      	cmp	r0, #0
    8d6a:	d0e9      	beq.n	8d40 <bt_gatt_indicate+0x2c>
		handle = attr->handle ? : find_static_attr(attr);
    8d6c:	8a04      	ldrh	r4, [r0, #16]
    8d6e:	b924      	cbnz	r4, 8d7a <bt_gatt_indicate+0x66>
    8d70:	f7ff fb6e 	bl	8450 <find_static_attr>
		if (!handle) {
    8d74:	4604      	mov	r4, r0
    8d76:	2800      	cmp	r0, #0
    8d78:	d0e2      	beq.n	8d40 <bt_gatt_indicate+0x2c>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    8d7a:	9b04      	ldr	r3, [sp, #16]
    8d7c:	6818      	ldr	r0, [r3, #0]
    8d7e:	2300      	movs	r3, #0
    8d80:	f88d 3014 	strb.w	r3, [sp, #20]
    8d84:	a905      	add	r1, sp, #20
    8d86:	f642 0303 	movw	r3, #10243	; 0x2803
    8d8a:	f8ad 3016 	strh.w	r3, [sp, #22]
    8d8e:	f010 f9cb 	bl	19128 <bt_uuid_cmp>
    8d92:	b938      	cbnz	r0, 8da4 <bt_gatt_indicate+0x90>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    8d94:	6870      	ldr	r0, [r6, #4]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    8d96:	68c3      	ldr	r3, [r0, #12]
    8d98:	799b      	ldrb	r3, [r3, #6]
    8d9a:	069b      	lsls	r3, r3, #26
    8d9c:	d52b      	bpl.n	8df6 <bt_gatt_indicate+0xe2>
		handle = bt_gatt_attr_value_handle(params->attr);
    8d9e:	f7ff fef3 	bl	8b88 <bt_gatt_attr_value_handle>
    8da2:	4604      	mov	r4, r0
	if (conn) {
    8da4:	b12d      	cbz	r5, 8db2 <bt_gatt_indicate+0x9e>
		return gatt_indicate(conn, handle, params);
    8da6:	4632      	mov	r2, r6
    8da8:	4621      	mov	r1, r4
    8daa:	4628      	mov	r0, r5
    8dac:	f7ff fc10 	bl	85d0 <gatt_indicate>
    8db0:	e7c8      	b.n	8d44 <bt_gatt_indicate+0x30>
	data.err = -ENOTCONN;
    8db2:	f06f 0338 	mvn.w	r3, #56	; 0x38
    8db6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    8db8:	2302      	movs	r3, #2
    8dba:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    8dbe:	f642 1302 	movw	r3, #10498	; 0x2902
    8dc2:	f8ad 301a 	strh.w	r3, [sp, #26]
    8dc6:	ab07      	add	r3, sp, #28
    8dc8:	9302      	str	r3, [sp, #8]
    8dca:	4b0e      	ldr	r3, [pc, #56]	; (8e04 <bt_gatt_indicate+0xf0>)
    8dcc:	9301      	str	r3, [sp, #4]
    8dce:	2301      	movs	r3, #1
    8dd0:	9300      	str	r3, [sp, #0]
    8dd2:	4620      	mov	r0, r4
    8dd4:	462b      	mov	r3, r5
    8dd6:	aa06      	add	r2, sp, #24
    8dd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    8ddc:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    8dde:	f88d 5018 	strb.w	r5, [sp, #24]
    8de2:	f7ff fee9 	bl	8bb8 <bt_gatt_foreach_attr_type>
	return data.err;
    8de6:	9807      	ldr	r0, [sp, #28]
    8de8:	e7ac      	b.n	8d44 <bt_gatt_indicate+0x30>
		return -EAGAIN;
    8dea:	f06f 000a 	mvn.w	r0, #10
    8dee:	e7a9      	b.n	8d44 <bt_gatt_indicate+0x30>
		return -ENOTCONN;
    8df0:	f06f 0038 	mvn.w	r0, #56	; 0x38
    8df4:	e7a6      	b.n	8d44 <bt_gatt_indicate+0x30>
			return -EINVAL;
    8df6:	f06f 0015 	mvn.w	r0, #21
    8dfa:	e7a3      	b.n	8d44 <bt_gatt_indicate+0x30>
    8dfc:	2000cab0 	.word	0x2000cab0
    8e00:	00019ddd 	.word	0x00019ddd
    8e04:	00008971 	.word	0x00008971

00008e08 <sc_process>:
{
    8e08:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    8e0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
    8e0e:	9201      	str	r2, [sp, #4]
{
    8e10:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    8e12:	f1a0 0118 	sub.w	r1, r0, #24
    8e16:	f100 0420 	add.w	r4, r0, #32
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8e1a:	f3bf 8f5b 	dmb	ish
    8e1e:	e854 2f00 	ldrex	r2, [r4]
    8e22:	f022 0201 	bic.w	r2, r2, #1
    8e26:	e844 2000 	strex	r0, r2, [r4]
    8e2a:	2800      	cmp	r0, #0
    8e2c:	d1f7      	bne.n	8e1e <sc_process+0x16>
    8e2e:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    8e32:	4a0d      	ldr	r2, [pc, #52]	; (8e68 <sc_process+0x60>)
    8e34:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    8e38:	4a0c      	ldr	r2, [pc, #48]	; (8e6c <sc_process+0x64>)
    8e3a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    8e3e:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    8e40:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    8e42:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    8e46:	2204      	movs	r2, #4
	sc->start = 0U;
    8e48:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
    8e4c:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    8e50:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    8e54:	f7ff ff5e 	bl	8d14 <bt_gatt_indicate>
    8e58:	b918      	cbnz	r0, 8e62 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    8e5a:	2101      	movs	r1, #1
    8e5c:	4620      	mov	r0, r4
    8e5e:	f010 fff0 	bl	19e42 <atomic_set_bit>
}
    8e62:	b002      	add	sp, #8
    8e64:	bd10      	pop	{r4, pc}
    8e66:	bf00      	nop
    8e68:	0001e964 	.word	0x0001e964
    8e6c:	00008919 	.word	0x00008919

00008e70 <update_ccc>:
{
    8e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8e72:	4b34      	ldr	r3, [pc, #208]	; (8f44 <update_ccc+0xd4>)
    8e74:	6882      	ldr	r2, [r0, #8]
    8e76:	429a      	cmp	r2, r3
{
    8e78:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8e7a:	d11f      	bne.n	8ebc <update_ccc+0x4c>
				BT_WARN("CCC %p not writable", attr);
    8e7c:	4b32      	ldr	r3, [pc, #200]	; (8f48 <update_ccc+0xd8>)
	ccc = attr->user_data;
    8e7e:	68c7      	ldr	r7, [r0, #12]
    8e80:	4c32      	ldr	r4, [pc, #200]	; (8f4c <update_ccc+0xdc>)
	struct bt_conn *conn = data->conn;
    8e82:	680d      	ldr	r5, [r1, #0]
				BT_WARN("CCC %p not writable", attr);
    8e84:	1ae4      	subs	r4, r4, r3
		if (!ccc->cfg[i].value ||
    8e86:	893b      	ldrh	r3, [r7, #8]
				BT_WARN("CCC %p not writable", attr);
    8e88:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		if (!ccc->cfg[i].value ||
    8e8c:	b1b3      	cbz	r3, 8ebc <update_ccc+0x4c>
		    bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    8e8e:	1c79      	adds	r1, r7, #1
    8e90:	4628      	mov	r0, r5
    8e92:	f010 fab6 	bl	19402 <bt_conn_addr_le_cmp>
		if (!ccc->cfg[i].value ||
    8e96:	b988      	cbnz	r0, 8ebc <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    8e98:	222a      	movs	r2, #42	; 0x2a
    8e9a:	4631      	mov	r1, r6
    8e9c:	4628      	mov	r0, r5
    8e9e:	f011 f93b 	bl	1a118 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    8ea2:	2803      	cmp	r0, #3
    8ea4:	d10d      	bne.n	8ec2 <update_ccc+0x52>
				BT_WARN("CCC %p not writable", attr);
    8ea6:	f04f 0200 	mov.w	r2, #0
    8eaa:	2302      	movs	r3, #2
    8eac:	f363 0207 	bfi	r2, r3, #0, #8
    8eb0:	f364 128f 	bfi	r2, r4, #6, #10
    8eb4:	4631      	mov	r1, r6
    8eb6:	4826      	ldr	r0, [pc, #152]	; (8f50 <update_ccc+0xe0>)
    8eb8:	f00f fb97 	bl	185ea <log_1>
}
    8ebc:	2001      	movs	r0, #1
    8ebe:	b003      	add	sp, #12
    8ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
    8ec2:	4639      	mov	r1, r7
    8ec4:	4630      	mov	r0, r6
    8ec6:	f010 fed0 	bl	19c6a <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    8eca:	4b22      	ldr	r3, [pc, #136]	; (8f54 <update_ccc+0xe4>)
    8ecc:	429f      	cmp	r7, r3
    8ece:	d1f5      	bne.n	8ebc <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    8ed0:	f105 0170 	add.w	r1, r5, #112	; 0x70
    8ed4:	7a28      	ldrb	r0, [r5, #8]
    8ed6:	f7ff fbbf 	bl	8658 <find_sc_cfg>
	if (!cfg) {
    8eda:	4606      	mov	r6, r0
    8edc:	2800      	cmp	r0, #0
    8ede:	d0ed      	beq.n	8ebc <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
    8ee0:	8902      	ldrh	r2, [r0, #8]
    8ee2:	8943      	ldrh	r3, [r0, #10]
    8ee4:	ea53 0102 	orrs.w	r1, r3, r2
    8ee8:	d0e8      	beq.n	8ebc <update_ccc+0x4c>
	index = bt_conn_index(conn);
    8eea:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    8eec:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    8ef0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    8ef4:	f7fe f900 	bl	70f8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    8ef8:	4917      	ldr	r1, [pc, #92]	; (8f58 <update_ccc+0xe8>)
    8efa:	4a18      	ldr	r2, [pc, #96]	; (8f5c <update_ccc+0xec>)
    8efc:	2314      	movs	r3, #20
    8efe:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    8f02:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    8f04:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    8f06:	4a16      	ldr	r2, [pc, #88]	; (8f60 <update_ccc+0xf0>)
    8f08:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    8f0a:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    8f0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	sc_restore_params[index].data = &sc_range[0];
    8f10:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    8f12:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    8f14:	eb01 0180 	add.w	r1, r1, r0, lsl #2
	sc_restore_params[index].len = sizeof(sc_range);
    8f18:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    8f1a:	4628      	mov	r0, r5
    8f1c:	f7ff fefa 	bl	8d14 <bt_gatt_indicate>
    8f20:	b148      	cbz	r0, 8f36 <update_ccc+0xc6>
		BT_ERR("SC restore indication failed");
    8f22:	f04f 0100 	mov.w	r1, #0
    8f26:	2301      	movs	r3, #1
    8f28:	f363 0107 	bfi	r1, r3, #0, #8
    8f2c:	f364 118f 	bfi	r1, r4, #6, #10
    8f30:	480c      	ldr	r0, [pc, #48]	; (8f64 <update_ccc+0xf4>)
    8f32:	f00f fb4d 	bl	185d0 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    8f36:	2204      	movs	r2, #4
    8f38:	2100      	movs	r1, #0
    8f3a:	f106 0008 	add.w	r0, r6, #8
    8f3e:	f00f fea6 	bl	18c8e <memset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
    8f42:	e7bb      	b.n	8ebc <update_ccc+0x4c>
    8f44:	00008725 	.word	0x00008725
    8f48:	0001e448 	.word	0x0001e448
    8f4c:	0001e500 	.word	0x0001e500
    8f50:	0002064c 	.word	0x0002064c
    8f54:	2000cc50 	.word	0x2000cc50
    8f58:	200003dc 	.word	0x200003dc
    8f5c:	0001e964 	.word	0x0001e964
    8f60:	00019e61 	.word	0x00019e61
    8f64:	00020660 	.word	0x00020660

00008f68 <bt_gatt_discover>:
{
    8f68:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8f6a:	7a83      	ldrb	r3, [r0, #10]
    8f6c:	2b06      	cmp	r3, #6
{
    8f6e:	b085      	sub	sp, #20
    8f70:	4605      	mov	r5, r0
    8f72:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    8f74:	f040 80e4 	bne.w	9140 <bt_gatt_discover+0x1d8>
	switch (params->type) {
    8f78:	7c09      	ldrb	r1, [r1, #16]
    8f7a:	2905      	cmp	r1, #5
    8f7c:	f200 80d1 	bhi.w	9122 <bt_gatt_discover+0x1ba>
    8f80:	e8df f001 	tbb	[pc, r1]
    8f84:	6a6a0303 	.word	0x6a6a0303
    8f88:	bb88      	.short	0xbb88
		if (params->uuid) {
    8f8a:	6823      	ldr	r3, [r4, #0]
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d045      	beq.n	901c <bt_gatt_discover+0xb4>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    8f90:	2206      	movs	r2, #6
    8f92:	4611      	mov	r1, r2
    8f94:	f7fe fc90 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    8f98:	4606      	mov	r6, r0
    8f9a:	b918      	cbnz	r0, 8fa4 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    8f9c:	f06f 000b 	mvn.w	r0, #11
}
    8fa0:	b005      	add	sp, #20
    8fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    8fa4:	f100 0708 	add.w	r7, r0, #8
    8fa8:	2106      	movs	r1, #6
    8faa:	4638      	mov	r0, r7
    8fac:	f012 f93f 	bl	1b22e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    8fb0:	8923      	ldrh	r3, [r4, #8]
    8fb2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    8fb4:	89e3      	ldrh	r3, [r4, #14]
    8fb6:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    8fb8:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    8fba:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    8fbc:	f642 0301 	movw	r3, #10241	; 0x2801
    8fc0:	bf08      	it	eq
    8fc2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    8fc6:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    8fc8:	6823      	ldr	r3, [r4, #0]
    8fca:	7819      	ldrb	r1, [r3, #0]
    8fcc:	b1a9      	cbz	r1, 8ffa <bt_gatt_discover+0x92>
    8fce:	2902      	cmp	r1, #2
    8fd0:	d01e      	beq.n	9010 <bt_gatt_discover+0xa8>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    8fd2:	2301      	movs	r3, #1
    8fd4:	f04f 0200 	mov.w	r2, #0
    8fd8:	f363 0207 	bfi	r2, r3, #0, #8
    8fdc:	485a      	ldr	r0, [pc, #360]	; (9148 <bt_gatt_discover+0x1e0>)
    8fde:	4b5b      	ldr	r3, [pc, #364]	; (914c <bt_gatt_discover+0x1e4>)
    8fe0:	1a1b      	subs	r3, r3, r0
    8fe2:	08db      	lsrs	r3, r3, #3
    8fe4:	485a      	ldr	r0, [pc, #360]	; (9150 <bt_gatt_discover+0x1e8>)
    8fe6:	f363 128f 	bfi	r2, r3, #6, #10
    8fea:	f00f fafe 	bl	185ea <log_1>
		net_buf_unref(buf);
    8fee:	4630      	mov	r0, r6
    8ff0:	f009 fabe 	bl	12570 <net_buf_unref>
	return -EINVAL;
    8ff4:	f06f 0015 	mvn.w	r0, #21
    8ff8:	e7d2      	b.n	8fa0 <bt_gatt_discover+0x38>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    8ffa:	8859      	ldrh	r1, [r3, #2]
    8ffc:	4638      	mov	r0, r7
    8ffe:	f012 f92d 	bl	1b25c <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    9002:	4a54      	ldr	r2, [pc, #336]	; (9154 <bt_gatt_discover+0x1ec>)
    9004:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    9006:	4631      	mov	r1, r6
    9008:	4628      	mov	r0, r5
    900a:	f7ff faa1 	bl	8550 <gatt_send.constprop.31>
    900e:	e7c7      	b.n	8fa0 <bt_gatt_discover+0x38>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    9010:	2210      	movs	r2, #16
    9012:	1c59      	adds	r1, r3, #1
    9014:	4638      	mov	r0, r7
    9016:	f012 f910 	bl	1b23a <net_buf_simple_add_mem>
		break;
    901a:	e7f2      	b.n	9002 <bt_gatt_discover+0x9a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    901c:	2204      	movs	r2, #4
    901e:	2110      	movs	r1, #16
    9020:	f7fe fc4a 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    9024:	4606      	mov	r6, r0
    9026:	2800      	cmp	r0, #0
    9028:	d0b8      	beq.n	8f9c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    902a:	f100 0708 	add.w	r7, r0, #8
    902e:	2104      	movs	r1, #4
    9030:	4638      	mov	r0, r7
    9032:	f012 f8fc 	bl	1b22e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    9036:	8923      	ldrh	r3, [r4, #8]
    9038:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    903a:	89e3      	ldrh	r3, [r4, #14]
    903c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    903e:	7c23      	ldrb	r3, [r4, #16]
    9040:	b93b      	cbnz	r3, 9052 <bt_gatt_discover+0xea>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_PRIMARY)->val);
    9042:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    9046:	4638      	mov	r0, r7
    9048:	f012 f908 	bl	1b25c <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    904c:	4623      	mov	r3, r4
    904e:	4a42      	ldr	r2, [pc, #264]	; (9158 <bt_gatt_discover+0x1f0>)
    9050:	e7d9      	b.n	9006 <bt_gatt_discover+0x9e>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    9052:	f642 0101 	movw	r1, #10241	; 0x2801
    9056:	e7f6      	b.n	9046 <bt_gatt_discover+0xde>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    9058:	2204      	movs	r2, #4
    905a:	2108      	movs	r1, #8
    905c:	f7fe fc2c 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    9060:	4606      	mov	r6, r0
    9062:	2800      	cmp	r0, #0
    9064:	d09a      	beq.n	8f9c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    9066:	f100 0708 	add.w	r7, r0, #8
    906a:	2104      	movs	r1, #4
    906c:	4638      	mov	r0, r7
    906e:	f012 f8de 	bl	1b22e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    9072:	8923      	ldrh	r3, [r4, #8]
    9074:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    9076:	89e3      	ldrh	r3, [r4, #14]
    9078:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    907a:	7c23      	ldrb	r3, [r4, #16]
    907c:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_INCLUDE)->val);
    907e:	bf0c      	ite	eq
    9080:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    9084:	f642 0103 	movwne	r1, #10243	; 0x2803
    9088:	4638      	mov	r0, r7
    908a:	f012 f8e7 	bl	1b25c <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    908e:	4623      	mov	r3, r4
    9090:	4a32      	ldr	r2, [pc, #200]	; (915c <bt_gatt_discover+0x1f4>)
    9092:	e7b8      	b.n	9006 <bt_gatt_discover+0x9e>
		if (params->uuid &&
    9094:	6820      	ldr	r0, [r4, #0]
    9096:	b380      	cbz	r0, 90fa <bt_gatt_discover+0x192>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    9098:	2600      	movs	r6, #0
    909a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    909e:	4669      	mov	r1, sp
    90a0:	f88d 6000 	strb.w	r6, [sp]
    90a4:	f8ad 3002 	strh.w	r3, [sp, #2]
    90a8:	f010 f83e 	bl	19128 <bt_uuid_cmp>
		if (params->uuid &&
    90ac:	2800      	cmp	r0, #0
    90ae:	d0a1      	beq.n	8ff4 <bt_gatt_discover+0x8c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    90b0:	f642 0301 	movw	r3, #10241	; 0x2801
    90b4:	a901      	add	r1, sp, #4
    90b6:	6820      	ldr	r0, [r4, #0]
    90b8:	f88d 6004 	strb.w	r6, [sp, #4]
    90bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    90c0:	f010 f832 	bl	19128 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    90c4:	2800      	cmp	r0, #0
    90c6:	d095      	beq.n	8ff4 <bt_gatt_discover+0x8c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    90c8:	f642 0302 	movw	r3, #10242	; 0x2802
    90cc:	a902      	add	r1, sp, #8
    90ce:	6820      	ldr	r0, [r4, #0]
    90d0:	f88d 6008 	strb.w	r6, [sp, #8]
    90d4:	f8ad 300a 	strh.w	r3, [sp, #10]
    90d8:	f010 f826 	bl	19128 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    90dc:	2800      	cmp	r0, #0
    90de:	d089      	beq.n	8ff4 <bt_gatt_discover+0x8c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    90e0:	f642 0303 	movw	r3, #10243	; 0x2803
    90e4:	a903      	add	r1, sp, #12
    90e6:	6820      	ldr	r0, [r4, #0]
    90e8:	f88d 600c 	strb.w	r6, [sp, #12]
    90ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    90f0:	f010 f81a 	bl	19128 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    90f4:	2800      	cmp	r0, #0
    90f6:	f43f af7d 	beq.w	8ff4 <bt_gatt_discover+0x8c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    90fa:	2204      	movs	r2, #4
    90fc:	4611      	mov	r1, r2
    90fe:	4628      	mov	r0, r5
    9100:	f7fe fbda 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    9104:	4606      	mov	r6, r0
    9106:	2800      	cmp	r0, #0
    9108:	f43f af48 	beq.w	8f9c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    910c:	2104      	movs	r1, #4
    910e:	3008      	adds	r0, #8
    9110:	f012 f88d 	bl	1b22e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    9114:	8923      	ldrh	r3, [r4, #8]
    9116:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    9118:	89e3      	ldrh	r3, [r4, #14]
    911a:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    911c:	4a10      	ldr	r2, [pc, #64]	; (9160 <bt_gatt_discover+0x1f8>)
    911e:	4623      	mov	r3, r4
    9120:	e771      	b.n	9006 <bt_gatt_discover+0x9e>
		BT_ERR("Invalid discovery type: %u", params->type);
    9122:	2301      	movs	r3, #1
    9124:	f04f 0200 	mov.w	r2, #0
    9128:	f363 0207 	bfi	r2, r3, #0, #8
    912c:	4806      	ldr	r0, [pc, #24]	; (9148 <bt_gatt_discover+0x1e0>)
    912e:	4b07      	ldr	r3, [pc, #28]	; (914c <bt_gatt_discover+0x1e4>)
    9130:	1a1b      	subs	r3, r3, r0
    9132:	08db      	lsrs	r3, r3, #3
    9134:	f363 128f 	bfi	r2, r3, #6, #10
    9138:	480a      	ldr	r0, [pc, #40]	; (9164 <bt_gatt_discover+0x1fc>)
    913a:	f00f fa56 	bl	185ea <log_1>
    913e:	e759      	b.n	8ff4 <bt_gatt_discover+0x8c>
		return -ENOTCONN;
    9140:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9144:	e72c      	b.n	8fa0 <bt_gatt_discover+0x38>
    9146:	bf00      	nop
    9148:	0001e448 	.word	0x0001e448
    914c:	0001e500 	.word	0x0001e500
    9150:	000204f1 	.word	0x000204f1
    9154:	0001a199 	.word	0x0001a199
    9158:	00009169 	.word	0x00009169
    915c:	00009281 	.word	0x00009281
    9160:	00009579 	.word	0x00009579
    9164:	00020506 	.word	0x00020506

00009168 <gatt_read_group_rsp>:
{
    9168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    916c:	b08f      	sub	sp, #60	; 0x3c
    916e:	4690      	mov	r8, r2
    9170:	4681      	mov	r9, r0
    9172:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
    9174:	460a      	mov	r2, r1
    9176:	b131      	cbz	r1, 9186 <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    9178:	686b      	ldr	r3, [r5, #4]
    917a:	462a      	mov	r2, r5
    917c:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    917e:	4798      	blx	r3
}
    9180:	b00f      	add	sp, #60	; 0x3c
    9182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
    9186:	f898 1000 	ldrb.w	r1, [r8]
    918a:	2906      	cmp	r1, #6
    918c:	d015      	beq.n	91ba <gatt_read_group_rsp+0x52>
    918e:	2914      	cmp	r1, #20
    9190:	d012      	beq.n	91b8 <gatt_read_group_rsp+0x50>
		BT_ERR("Invalid data len %u", rsp->len);
    9192:	2301      	movs	r3, #1
    9194:	f04f 0200 	mov.w	r2, #0
    9198:	f363 0207 	bfi	r2, r3, #0, #8
    919c:	4835      	ldr	r0, [pc, #212]	; (9274 <gatt_read_group_rsp+0x10c>)
    919e:	4b36      	ldr	r3, [pc, #216]	; (9278 <gatt_read_group_rsp+0x110>)
    91a0:	1a1b      	subs	r3, r3, r0
    91a2:	08db      	lsrs	r3, r3, #3
    91a4:	f363 128f 	bfi	r2, r3, #6, #10
    91a8:	4834      	ldr	r0, [pc, #208]	; (927c <gatt_read_group_rsp+0x114>)
    91aa:	f00f fa1e 	bl	185ea <log_1>
	params->func(conn, NULL, params);
    91ae:	686b      	ldr	r3, [r5, #4]
    91b0:	462a      	mov	r2, r5
    91b2:	2100      	movs	r1, #0
    91b4:	4648      	mov	r0, r9
    91b6:	e7e2      	b.n	917e <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    91b8:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    91ba:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    91bc:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    91c0:	b29c      	uxth	r4, r3
    91c2:	f108 0701 	add.w	r7, r8, #1
	u16_t start_handle, end_handle = 0U;
    91c6:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    91c8:	f898 3000 	ldrb.w	r3, [r8]
    91cc:	42a3      	cmp	r3, r4
    91ce:	d909      	bls.n	91e4 <gatt_read_group_rsp+0x7c>
	if (length == 0U && end_handle) {
    91d0:	2c00      	cmp	r4, #0
    91d2:	d1ec      	bne.n	91ae <gatt_read_group_rsp+0x46>
    91d4:	2e00      	cmp	r6, #0
    91d6:	d0ea      	beq.n	91ae <gatt_read_group_rsp+0x46>
	gatt_discover_next(conn, handle, params);
    91d8:	462a      	mov	r2, r5
    91da:	4631      	mov	r1, r6
    91dc:	4648      	mov	r0, r9
    91de:	f010 ffbe 	bl	1a15e <gatt_discover_next>
    91e2:	e7cd      	b.n	9180 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
    91e4:	2214      	movs	r2, #20
    91e6:	2100      	movs	r1, #0
    91e8:	a809      	add	r0, sp, #36	; 0x24
    91ea:	f00f fd50 	bl	18c8e <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    91ee:	f8b7 a000 	ldrh.w	sl, [r7]
    91f2:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    91f6:	2b00      	cmp	r3, #0
    91f8:	d0d9      	beq.n	91ae <gatt_read_group_rsp+0x46>
		end_handle = sys_le16_to_cpu(data->end_handle);
    91fa:	f8b7 b002 	ldrh.w	fp, [r7, #2]
    91fe:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    9202:	2e00      	cmp	r6, #0
    9204:	d0d3      	beq.n	91ae <gatt_read_group_rsp+0x46>
    9206:	42b3      	cmp	r3, r6
    9208:	d8d1      	bhi.n	91ae <gatt_read_group_rsp+0x46>
		switch (u.uuid.type) {
    920a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    920e:	b32b      	cbz	r3, 925c <gatt_read_group_rsp+0xf4>
    9210:	2b02      	cmp	r3, #2
    9212:	d02a      	beq.n	926a <gatt_read_group_rsp+0x102>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    9214:	f04f 0300 	mov.w	r3, #0
    9218:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    921c:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
    921e:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    9222:	2b00      	cmp	r3, #0
    9224:	f642 0301 	movw	r3, #10241	; 0x2801
    9228:	bf08      	it	eq
    922a:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    922e:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    9232:	ab04      	add	r3, sp, #16
    9234:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    9236:	ab01      	add	r3, sp, #4
    9238:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    923a:	ab02      	add	r3, sp, #8
    923c:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
    923e:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    9242:	686b      	ldr	r3, [r5, #4]
    9244:	462a      	mov	r2, r5
    9246:	a909      	add	r1, sp, #36	; 0x24
    9248:	4648      	mov	r0, r9
    924a:	4798      	blx	r3
    924c:	2800      	cmp	r0, #0
    924e:	d097      	beq.n	9180 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    9250:	f898 2000 	ldrb.w	r2, [r8]
    9254:	1aa4      	subs	r4, r4, r2
    9256:	b2a4      	uxth	r4, r4
    9258:	4417      	add	r7, r2
    925a:	e7b5      	b.n	91c8 <gatt_read_group_rsp+0x60>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    925c:	2202      	movs	r2, #2
    925e:	1d39      	adds	r1, r7, #4
    9260:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    9264:	f00f fce9 	bl	18c3a <memcpy>
			break;
    9268:	e7d4      	b.n	9214 <gatt_read_group_rsp+0xac>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    926a:	2210      	movs	r2, #16
    926c:	1d39      	adds	r1, r7, #4
    926e:	f10d 0011 	add.w	r0, sp, #17
    9272:	e7f7      	b.n	9264 <gatt_read_group_rsp+0xfc>
    9274:	0001e448 	.word	0x0001e448
    9278:	0001e500 	.word	0x0001e500
    927c:	000205e1 	.word	0x000205e1

00009280 <gatt_read_type_rsp>:
{
    9280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9284:	b091      	sub	sp, #68	; 0x44
    9286:	4690      	mov	r8, r2
    9288:	4607      	mov	r7, r0
    928a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	if (err) {
    928c:	460a      	mov	r2, r1
    928e:	b121      	cbz	r1, 929a <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
    9290:	6873      	ldr	r3, [r6, #4]
    9292:	4632      	mov	r2, r6
    9294:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    9296:	4798      	blx	r3
	if (!handle) {
    9298:	e084      	b.n	93a4 <gatt_read_type_rsp+0x124>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    929a:	7c30      	ldrb	r0, [r6, #16]
    929c:	f898 1000 	ldrb.w	r1, [r8]
    92a0:	2802      	cmp	r0, #2
    92a2:	f040 808b 	bne.w	93bc <gatt_read_type_rsp+0x13c>
	switch (rsp->len) {
    92a6:	2906      	cmp	r1, #6
    92a8:	d01d      	beq.n	92e6 <gatt_read_type_rsp+0x66>
    92aa:	2908      	cmp	r1, #8
    92ac:	f040 808a 	bne.w	93c4 <gatt_read_type_rsp+0x144>
		u.uuid.type = BT_UUID_TYPE_16;
    92b0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	for (length--, pdu = rsp->data; length >= rsp->len;
    92b4:	1e5c      	subs	r4, r3, #1
    92b6:	b2a4      	uxth	r4, r4
    92b8:	f108 0501 	add.w	r5, r8, #1
	u16_t handle = 0U;
    92bc:	f04f 0900 	mov.w	r9, #0
			value.uuid = &u.uuid;
    92c0:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
	for (length--, pdu = rsp->data; length >= rsp->len;
    92c4:	f898 3000 	ldrb.w	r3, [r8]
    92c8:	42a3      	cmp	r3, r4
    92ca:	d90f      	bls.n	92ec <gatt_read_type_rsp+0x6c>
	if (length == 0U && handle) {
    92cc:	2c00      	cmp	r4, #0
    92ce:	f040 8087 	bne.w	93e0 <gatt_read_type_rsp+0x160>
    92d2:	f1b9 0f00 	cmp.w	r9, #0
    92d6:	f000 8083 	beq.w	93e0 <gatt_read_type_rsp+0x160>
	gatt_discover_next(conn, handle, params);
    92da:	4632      	mov	r2, r6
    92dc:	4649      	mov	r1, r9
    92de:	4638      	mov	r0, r7
    92e0:	f010 ff3d 	bl	1a15e <gatt_discover_next>
    92e4:	e05e      	b.n	93a4 <gatt_read_type_rsp+0x124>
		u.uuid.type = BT_UUID_TYPE_128;
    92e6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
		break;
    92ea:	e7e3      	b.n	92b4 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
    92ec:	f8b5 b000 	ldrh.w	fp, [r5]
    92f0:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    92f4:	f1b9 0f00 	cmp.w	r9, #0
    92f8:	d072      	beq.n	93e0 <gatt_read_type_rsp+0x160>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    92fa:	886b      	ldrh	r3, [r5, #2]
    92fc:	f8ad 3014 	strh.w	r3, [sp, #20]
    9300:	b299      	uxth	r1, r3
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    9302:	88ab      	ldrh	r3, [r5, #4]
    9304:	f8ad 3016 	strh.w	r3, [sp, #22]
    9308:	b29a      	uxth	r2, r3
		switch (u.uuid.type) {
    930a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    930e:	b313      	cbz	r3, 9356 <gatt_read_type_rsp+0xd6>
    9310:	2b02      	cmp	r3, #2
    9312:	d029      	beq.n	9368 <gatt_read_type_rsp+0xe8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    9314:	6831      	ldr	r1, [r6, #0]
    9316:	2900      	cmp	r1, #0
    9318:	d14a      	bne.n	93b0 <gatt_read_type_rsp+0x130>
		attr = (&(struct bt_gatt_attr) {
    931a:	2210      	movs	r2, #16
    931c:	2100      	movs	r1, #0
    931e:	a807      	add	r0, sp, #28
    9320:	f00f fcb5 	bl	18c8e <memset>
			.uuid = BT_UUID_GATT_INCLUDE,
    9324:	2300      	movs	r3, #0
    9326:	f88d 3008 	strb.w	r3, [sp, #8]
    932a:	f642 0302 	movw	r3, #10242	; 0x2802
    932e:	f8ad 300a 	strh.w	r3, [sp, #10]
		attr = (&(struct bt_gatt_attr) {
    9332:	ab02      	add	r3, sp, #8
    9334:	9306      	str	r3, [sp, #24]
    9336:	ab04      	add	r3, sp, #16
    9338:	9309      	str	r3, [sp, #36]	; 0x24
		attr->handle = handle;
    933a:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    933e:	6873      	ldr	r3, [r6, #4]
    9340:	4632      	mov	r2, r6
    9342:	a906      	add	r1, sp, #24
    9344:	4638      	mov	r0, r7
    9346:	4798      	blx	r3
    9348:	b360      	cbz	r0, 93a4 <gatt_read_type_rsp+0x124>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    934a:	f898 2000 	ldrb.w	r2, [r8]
    934e:	1aa4      	subs	r4, r4, r2
    9350:	b2a4      	uxth	r4, r4
    9352:	4415      	add	r5, r2
    9354:	e7b6      	b.n	92c4 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
    9356:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    935a:	79ab      	ldrb	r3, [r5, #6]
    935c:	79ea      	ldrb	r2, [r5, #7]
    935e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9362:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			break;
    9366:	e7d5      	b.n	9314 <gatt_read_type_rsp+0x94>
			params->_included.start_handle = value.start_handle;
    9368:	8171      	strh	r1, [r6, #10]
			params->_included.end_handle = value.end_handle;
    936a:	81b2      	strh	r2, [r6, #12]
			params->_included.attr_handle = handle;
    936c:	f8a6 9008 	strh.w	r9, [r6, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    9370:	461a      	mov	r2, r3
    9372:	210a      	movs	r1, #10
    9374:	4638      	mov	r0, r7
    9376:	9301      	str	r3, [sp, #4]
    9378:	f7fe fa9e 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    937c:	4604      	mov	r4, r0
    937e:	b1a0      	cbz	r0, 93aa <gatt_read_type_rsp+0x12a>
	req = net_buf_add(buf, sizeof(*req));
    9380:	9b01      	ldr	r3, [sp, #4]
    9382:	3008      	adds	r0, #8
    9384:	4619      	mov	r1, r3
    9386:	f011 ff52 	bl	1b22e <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    938a:	8973      	ldrh	r3, [r6, #10]
    938c:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    938e:	4a47      	ldr	r2, [pc, #284]	; (94ac <gatt_read_type_rsp+0x22c>)
    9390:	4633      	mov	r3, r6
    9392:	4621      	mov	r1, r4
    9394:	4638      	mov	r0, r7
    9396:	f7ff f8db 	bl	8550 <gatt_send.constprop.31>
			return read_included_uuid(conn, params);
    939a:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
    939e:	f1b9 0f00 	cmp.w	r9, #0
    93a2:	d19a      	bne.n	92da <gatt_read_type_rsp+0x5a>
}
    93a4:	b011      	add	sp, #68	; 0x44
    93a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    93aa:	f06f 000b 	mvn.w	r0, #11
    93ae:	e7f4      	b.n	939a <gatt_read_type_rsp+0x11a>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    93b0:	4650      	mov	r0, sl
    93b2:	f00f feb9 	bl	19128 <bt_uuid_cmp>
    93b6:	2800      	cmp	r0, #0
    93b8:	d0af      	beq.n	931a <gatt_read_type_rsp+0x9a>
    93ba:	e7c6      	b.n	934a <gatt_read_type_rsp+0xca>
	switch (rsp->len) {
    93bc:	2907      	cmp	r1, #7
    93be:	d015      	beq.n	93ec <gatt_read_type_rsp+0x16c>
    93c0:	2915      	cmp	r1, #21
    93c2:	d012      	beq.n	93ea <gatt_read_type_rsp+0x16a>
		BT_ERR("Invalid data len %u", rsp->len);
    93c4:	2301      	movs	r3, #1
    93c6:	f04f 0200 	mov.w	r2, #0
    93ca:	f363 0207 	bfi	r2, r3, #0, #8
    93ce:	4838      	ldr	r0, [pc, #224]	; (94b0 <gatt_read_type_rsp+0x230>)
    93d0:	4b38      	ldr	r3, [pc, #224]	; (94b4 <gatt_read_type_rsp+0x234>)
    93d2:	1a1b      	subs	r3, r3, r0
    93d4:	08db      	lsrs	r3, r3, #3
    93d6:	f363 128f 	bfi	r2, r3, #6, #10
    93da:	4837      	ldr	r0, [pc, #220]	; (94b8 <gatt_read_type_rsp+0x238>)
    93dc:	f00f f905 	bl	185ea <log_1>
	params->func(conn, NULL, params);
    93e0:	6873      	ldr	r3, [r6, #4]
    93e2:	4632      	mov	r2, r6
    93e4:	2100      	movs	r1, #0
    93e6:	4638      	mov	r0, r7
    93e8:	e755      	b.n	9296 <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    93ea:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    93ec:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    93ee:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    93f2:	b2a4      	uxth	r4, r4
    93f4:	f108 0501 	add.w	r5, r8, #1
	u16_t handle = 0U;
    93f8:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    93fc:	f898 3000 	ldrb.w	r3, [r8]
    9400:	42a3      	cmp	r3, r4
    9402:	f63f af63 	bhi.w	92cc <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    9406:	f8b5 b000 	ldrh.w	fp, [r5]
    940a:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    940e:	f1b9 0f00 	cmp.w	r9, #0
    9412:	d0e5      	beq.n	93e0 <gatt_read_type_rsp+0x160>
		switch (u.uuid.type) {
    9414:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9418:	2b00      	cmp	r3, #0
    941a:	d032      	beq.n	9482 <gatt_read_type_rsp+0x202>
    941c:	2b02      	cmp	r3, #2
    941e:	d037      	beq.n	9490 <gatt_read_type_rsp+0x210>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    9420:	6831      	ldr	r1, [r6, #0]
    9422:	f10d 0a18 	add.w	sl, sp, #24
    9426:	2900      	cmp	r1, #0
    9428:	d139      	bne.n	949e <gatt_read_type_rsp+0x21e>
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    942a:	2300      	movs	r3, #0
    942c:	930f      	str	r3, [sp, #60]	; 0x3c
    942e:	930d      	str	r3, [sp, #52]	; 0x34
    9430:	f88d 300c 	strb.w	r3, [sp, #12]
    9434:	f642 0303 	movw	r3, #10243	; 0x2803
    9438:	f8ad 300e 	strh.w	r3, [sp, #14]
    943c:	ab03      	add	r3, sp, #12
    943e:	930b      	str	r3, [sp, #44]	; 0x2c
    9440:	4b1e      	ldr	r3, [pc, #120]	; (94bc <gatt_read_type_rsp+0x23c>)
    9442:	930c      	str	r3, [sp, #48]	; 0x30
    9444:	f8cd a010 	str.w	sl, [sp, #16]
    9448:	792a      	ldrb	r2, [r5, #4]
    944a:	78eb      	ldrb	r3, [r5, #3]
		attr->handle = handle;
    944c:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    9450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9454:	f8ad 3014 	strh.w	r3, [sp, #20]
    9458:	78ab      	ldrb	r3, [r5, #2]
    945a:	f88d 3016 	strb.w	r3, [sp, #22]
    945e:	ab04      	add	r3, sp, #16
    9460:	930e      	str	r3, [sp, #56]	; 0x38
    9462:	2301      	movs	r3, #1
    9464:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    9468:	4632      	mov	r2, r6
    946a:	6873      	ldr	r3, [r6, #4]
    946c:	a90b      	add	r1, sp, #44	; 0x2c
    946e:	4638      	mov	r0, r7
    9470:	4798      	blx	r3
    9472:	2800      	cmp	r0, #0
    9474:	d096      	beq.n	93a4 <gatt_read_type_rsp+0x124>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    9476:	f898 2000 	ldrb.w	r2, [r8]
    947a:	1aa4      	subs	r4, r4, r2
    947c:	b2a4      	uxth	r4, r4
    947e:	4415      	add	r5, r2
    9480:	e7bc      	b.n	93fc <gatt_read_type_rsp+0x17c>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    9482:	796b      	ldrb	r3, [r5, #5]
    9484:	79aa      	ldrb	r2, [r5, #6]
    9486:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    948a:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    948e:	e7c7      	b.n	9420 <gatt_read_type_rsp+0x1a0>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    9490:	2210      	movs	r2, #16
    9492:	1d69      	adds	r1, r5, #5
    9494:	f10d 0019 	add.w	r0, sp, #25
    9498:	f00f fbcf 	bl	18c3a <memcpy>
			break;
    949c:	e7c0      	b.n	9420 <gatt_read_type_rsp+0x1a0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    949e:	4650      	mov	r0, sl
    94a0:	f00f fe42 	bl	19128 <bt_uuid_cmp>
    94a4:	2800      	cmp	r0, #0
    94a6:	d0c0      	beq.n	942a <gatt_read_type_rsp+0x1aa>
    94a8:	e7e5      	b.n	9476 <gatt_read_type_rsp+0x1f6>
    94aa:	bf00      	nop
    94ac:	000094c1 	.word	0x000094c1
    94b0:	0001e448 	.word	0x0001e448
    94b4:	0001e500 	.word	0x0001e500
    94b8:	000205e1 	.word	0x000205e1
    94bc:	0001a09d 	.word	0x0001a09d

000094c0 <read_included_uuid_cb>:
{
    94c0:	b570      	push	{r4, r5, r6, lr}
    94c2:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    94c4:	2b10      	cmp	r3, #16
{
    94c6:	4605      	mov	r5, r0
    94c8:	4611      	mov	r1, r2
    94ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
    94cc:	d015      	beq.n	94fa <read_included_uuid_cb+0x3a>
		BT_ERR("Invalid data len %u", length);
    94ce:	2101      	movs	r1, #1
    94d0:	f04f 0200 	mov.w	r2, #0
    94d4:	f361 0207 	bfi	r2, r1, #0, #8
    94d8:	4824      	ldr	r0, [pc, #144]	; (956c <read_included_uuid_cb+0xac>)
    94da:	4925      	ldr	r1, [pc, #148]	; (9570 <read_included_uuid_cb+0xb0>)
    94dc:	1a40      	subs	r0, r0, r1
    94de:	08c0      	lsrs	r0, r0, #3
    94e0:	f360 128f 	bfi	r2, r0, #6, #10
    94e4:	4619      	mov	r1, r3
    94e6:	4823      	ldr	r0, [pc, #140]	; (9574 <read_included_uuid_cb+0xb4>)
    94e8:	f00f f87f 	bl	185ea <log_1>
		params->func(conn, NULL, params);
    94ec:	6863      	ldr	r3, [r4, #4]
    94ee:	4622      	mov	r2, r4
    94f0:	2100      	movs	r1, #0
    94f2:	4628      	mov	r0, r5
    94f4:	4798      	blx	r3
}
    94f6:	b00e      	add	sp, #56	; 0x38
    94f8:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    94fa:	8962      	ldrh	r2, [r4, #10]
    94fc:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
    9500:	89a2      	ldrh	r2, [r4, #12]
    9502:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
    9506:	2202      	movs	r2, #2
    9508:	f88d 2010 	strb.w	r2, [sp, #16]
	value.uuid = &u.uuid;
    950c:	ae04      	add	r6, sp, #16
	memcpy(u.u128.val, pdu, length);
    950e:	461a      	mov	r2, r3
    9510:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
    9514:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    9516:	f00f fb90 	bl	18c3a <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    951a:	6821      	ldr	r1, [r4, #0]
    951c:	b9f9      	cbnz	r1, 955e <read_included_uuid_cb+0x9e>
	attr = (&(struct bt_gatt_attr) {
    951e:	2210      	movs	r2, #16
    9520:	2100      	movs	r1, #0
    9522:	a80a      	add	r0, sp, #40	; 0x28
    9524:	f00f fbb3 	bl	18c8e <memset>
		.uuid = BT_UUID_GATT_INCLUDE,
    9528:	2300      	movs	r3, #0
    952a:	f88d 3004 	strb.w	r3, [sp, #4]
    952e:	f642 0302 	movw	r3, #10242	; 0x2802
    9532:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (&(struct bt_gatt_attr) {
    9536:	ab01      	add	r3, sp, #4
    9538:	9309      	str	r3, [sp, #36]	; 0x24
    953a:	ab02      	add	r3, sp, #8
    953c:	930c      	str	r3, [sp, #48]	; 0x30
	attr->handle = params->_included.attr_handle;
    953e:	8923      	ldrh	r3, [r4, #8]
    9540:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    9544:	4622      	mov	r2, r4
    9546:	6863      	ldr	r3, [r4, #4]
    9548:	a909      	add	r1, sp, #36	; 0x24
    954a:	4628      	mov	r0, r5
    954c:	4798      	blx	r3
    954e:	2800      	cmp	r0, #0
    9550:	d0d1      	beq.n	94f6 <read_included_uuid_cb+0x36>
	gatt_discover_next(conn, params->start_handle, params);
    9552:	4622      	mov	r2, r4
    9554:	8921      	ldrh	r1, [r4, #8]
    9556:	4628      	mov	r0, r5
    9558:	f010 fe01 	bl	1a15e <gatt_discover_next>
	return;
    955c:	e7cb      	b.n	94f6 <read_included_uuid_cb+0x36>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    955e:	4630      	mov	r0, r6
    9560:	f00f fde2 	bl	19128 <bt_uuid_cmp>
    9564:	2800      	cmp	r0, #0
    9566:	d0da      	beq.n	951e <read_included_uuid_cb+0x5e>
    9568:	e7f3      	b.n	9552 <read_included_uuid_cb+0x92>
    956a:	bf00      	nop
    956c:	0001e500 	.word	0x0001e500
    9570:	0001e448 	.word	0x0001e448
    9574:	000205e1 	.word	0x000205e1

00009578 <gatt_find_info_rsp>:
{
    9578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    957c:	b091      	sub	sp, #68	; 0x44
    957e:	4682      	mov	sl, r0
    9580:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	if (err) {
    9582:	4608      	mov	r0, r1
    9584:	b991      	cbnz	r1, 95ac <gatt_find_info_rsp+0x34>
	switch (rsp->format) {
    9586:	7811      	ldrb	r1, [r2, #0]
    9588:	2901      	cmp	r1, #1
    958a:	d015      	beq.n	95b8 <gatt_find_info_rsp+0x40>
    958c:	2902      	cmp	r1, #2
    958e:	d029      	beq.n	95e4 <gatt_find_info_rsp+0x6c>
		BT_ERR("Invalid format %u", rsp->format);
    9590:	2301      	movs	r3, #1
    9592:	f04f 0200 	mov.w	r2, #0
    9596:	f363 0207 	bfi	r2, r3, #0, #8
    959a:	484b      	ldr	r0, [pc, #300]	; (96c8 <gatt_find_info_rsp+0x150>)
    959c:	4b4b      	ldr	r3, [pc, #300]	; (96cc <gatt_find_info_rsp+0x154>)
    959e:	1a1b      	subs	r3, r3, r0
    95a0:	08db      	lsrs	r3, r3, #3
    95a2:	f363 128f 	bfi	r2, r3, #6, #10
    95a6:	484a      	ldr	r0, [pc, #296]	; (96d0 <gatt_find_info_rsp+0x158>)
    95a8:	f00f f81f 	bl	185ea <log_1>
	params->func(conn, NULL, params);
    95ac:	6873      	ldr	r3, [r6, #4]
    95ae:	4632      	mov	r2, r6
    95b0:	2100      	movs	r1, #0
    95b2:	4650      	mov	r0, sl
    95b4:	4798      	blx	r3
    95b6:	e084      	b.n	96c2 <gatt_find_info_rsp+0x14a>
		u.uuid.type = BT_UUID_TYPE_16;
    95b8:	f88d 0018 	strb.w	r0, [sp, #24]
		len = sizeof(*info.i16);
    95bc:	f04f 0804 	mov.w	r8, #4
	length--;
    95c0:	1e5c      	subs	r4, r3, #1
    95c2:	b2a4      	uxth	r4, r4
	if (length < len) {
    95c4:	4544      	cmp	r4, r8
    95c6:	d3f1      	bcc.n	95ac <gatt_find_info_rsp+0x34>
	for (i = length / len, pdu = rsp->info; i != 0;
    95c8:	fbb4 f4f8 	udiv	r4, r4, r8
	bool skip = false;
    95cc:	2300      	movs	r3, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    95ce:	1c55      	adds	r5, r2, #1
	u16_t handle = 0U;
    95d0:	9301      	str	r3, [sp, #4]
    95d2:	af06      	add	r7, sp, #24
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    95d4:	4699      	mov	r9, r3
	for (i = length / len, pdu = rsp->info; i != 0;
    95d6:	b954      	cbnz	r4, 95ee <gatt_find_info_rsp+0x76>
	gatt_discover_next(conn, handle, params);
    95d8:	4632      	mov	r2, r6
    95da:	9901      	ldr	r1, [sp, #4]
    95dc:	4650      	mov	r0, sl
    95de:	f010 fdbe 	bl	1a15e <gatt_discover_next>
	return;
    95e2:	e06e      	b.n	96c2 <gatt_find_info_rsp+0x14a>
		u.uuid.type = BT_UUID_TYPE_128;
    95e4:	f88d 1018 	strb.w	r1, [sp, #24]
		len = sizeof(*info.i128);
    95e8:	f04f 0812 	mov.w	r8, #18
		break;
    95ec:	e7e8      	b.n	95c0 <gatt_find_info_rsp+0x48>
		handle = sys_le16_to_cpu(info.i16->handle);
    95ee:	f8b5 b000 	ldrh.w	fp, [r5]
    95f2:	fa1f f28b 	uxth.w	r2, fp
    95f6:	9201      	str	r2, [sp, #4]
		if (skip) {
    95f8:	b11b      	cbz	r3, 9602 <gatt_find_info_rsp+0x8a>
			skip = false;
    95fa:	2300      	movs	r3, #0
	     i--, pdu = (const u8_t *)pdu + len) {
    95fc:	3c01      	subs	r4, #1
    95fe:	4445      	add	r5, r8
    9600:	e7e9      	b.n	95d6 <gatt_find_info_rsp+0x5e>
		switch (u.uuid.type) {
    9602:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9606:	2b00      	cmp	r3, #0
    9608:	d038      	beq.n	967c <gatt_find_info_rsp+0x104>
    960a:	2b02      	cmp	r3, #2
    960c:	d03d      	beq.n	968a <gatt_find_info_rsp+0x112>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    960e:	6831      	ldr	r1, [r6, #0]
    9610:	2900      	cmp	r1, #0
    9612:	d141      	bne.n	9698 <gatt_find_info_rsp+0x120>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    9614:	7c33      	ldrb	r3, [r6, #16]
    9616:	2b04      	cmp	r3, #4
    9618:	d144      	bne.n	96a4 <gatt_find_info_rsp+0x12c>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    961a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    961e:	a902      	add	r1, sp, #8
    9620:	4638      	mov	r0, r7
    9622:	f88d 9008 	strb.w	r9, [sp, #8]
    9626:	f8ad 300a 	strh.w	r3, [sp, #10]
    962a:	f00f fd7d 	bl	19128 <bt_uuid_cmp>
    962e:	2800      	cmp	r0, #0
    9630:	d0e3      	beq.n	95fa <gatt_find_info_rsp+0x82>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    9632:	f642 0301 	movw	r3, #10241	; 0x2801
    9636:	a903      	add	r1, sp, #12
    9638:	4638      	mov	r0, r7
    963a:	f88d 900c 	strb.w	r9, [sp, #12]
    963e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9642:	f00f fd71 	bl	19128 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    9646:	2800      	cmp	r0, #0
    9648:	d0d7      	beq.n	95fa <gatt_find_info_rsp+0x82>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    964a:	f642 0302 	movw	r3, #10242	; 0x2802
    964e:	a904      	add	r1, sp, #16
    9650:	4638      	mov	r0, r7
    9652:	f88d 9010 	strb.w	r9, [sp, #16]
    9656:	f8ad 3012 	strh.w	r3, [sp, #18]
    965a:	f00f fd65 	bl	19128 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    965e:	2800      	cmp	r0, #0
    9660:	d0cb      	beq.n	95fa <gatt_find_info_rsp+0x82>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    9662:	f642 0303 	movw	r3, #10243	; 0x2803
    9666:	a905      	add	r1, sp, #20
    9668:	4638      	mov	r0, r7
    966a:	f88d 9014 	strb.w	r9, [sp, #20]
    966e:	f8ad 3016 	strh.w	r3, [sp, #22]
    9672:	f00f fd59 	bl	19128 <bt_uuid_cmp>
    9676:	b9a8      	cbnz	r0, 96a4 <gatt_find_info_rsp+0x12c>
				skip = true;
    9678:	2301      	movs	r3, #1
    967a:	e7bf      	b.n	95fc <gatt_find_info_rsp+0x84>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    967c:	78ab      	ldrb	r3, [r5, #2]
    967e:	78ea      	ldrb	r2, [r5, #3]
    9680:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9684:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    9688:	e7c1      	b.n	960e <gatt_find_info_rsp+0x96>
			memcpy(u.u128.val, info.i128->uuid, 16);
    968a:	2210      	movs	r2, #16
    968c:	1ca9      	adds	r1, r5, #2
    968e:	f10d 0019 	add.w	r0, sp, #25
    9692:	f00f fad2 	bl	18c3a <memcpy>
			break;
    9696:	e7ba      	b.n	960e <gatt_find_info_rsp+0x96>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    9698:	4638      	mov	r0, r7
    969a:	f00f fd45 	bl	19128 <bt_uuid_cmp>
    969e:	2800      	cmp	r0, #0
    96a0:	d0b8      	beq.n	9614 <gatt_find_info_rsp+0x9c>
    96a2:	e7aa      	b.n	95fa <gatt_find_info_rsp+0x82>
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    96a4:	2210      	movs	r2, #16
    96a6:	2100      	movs	r1, #0
    96a8:	a80c      	add	r0, sp, #48	; 0x30
    96aa:	f00f faf0 	bl	18c8e <memset>
    96ae:	970b      	str	r7, [sp, #44]	; 0x2c
		attr->handle = handle;
    96b0:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    96b4:	6873      	ldr	r3, [r6, #4]
    96b6:	4632      	mov	r2, r6
    96b8:	a90b      	add	r1, sp, #44	; 0x2c
    96ba:	4650      	mov	r0, sl
    96bc:	4798      	blx	r3
    96be:	2800      	cmp	r0, #0
    96c0:	d19b      	bne.n	95fa <gatt_find_info_rsp+0x82>
}
    96c2:	b011      	add	sp, #68	; 0x44
    96c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96c8:	0001e448 	.word	0x0001e448
    96cc:	0001e500 	.word	0x0001e500
    96d0:	0002057f 	.word	0x0002057f

000096d4 <bt_gatt_read>:
	if (conn->state != BT_CONN_CONNECTED) {
    96d4:	7a83      	ldrb	r3, [r0, #10]
    96d6:	2b06      	cmp	r3, #6
{
    96d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96dc:	4605      	mov	r5, r0
    96de:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    96e0:	d166      	bne.n	97b0 <bt_gatt_read+0xdc>
	if (params->handle_count == 0) {
    96e2:	684a      	ldr	r2, [r1, #4]
    96e4:	bb1a      	cbnz	r2, 972e <bt_gatt_read+0x5a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    96e6:	2204      	movs	r2, #4
    96e8:	2108      	movs	r1, #8
    96ea:	f7fe f8e5 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    96ee:	4606      	mov	r6, r0
    96f0:	b918      	cbnz	r0, 96fa <bt_gatt_read+0x26>
		return -ENOMEM;
    96f2:	f06f 000b 	mvn.w	r0, #11
}
    96f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req = net_buf_add(buf, sizeof(*req));
    96fa:	f100 0708 	add.w	r7, r0, #8
    96fe:	2104      	movs	r1, #4
    9700:	4638      	mov	r0, r7
    9702:	f011 fd94 	bl	1b22e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
    9706:	8923      	ldrh	r3, [r4, #8]
    9708:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    970a:	68e1      	ldr	r1, [r4, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
    970c:	8963      	ldrh	r3, [r4, #10]
    970e:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    9710:	780b      	ldrb	r3, [r1, #0]
    9712:	b933      	cbnz	r3, 9722 <bt_gatt_read+0x4e>
		net_buf_add_le16(buf, BT_UUID_16(params->by_uuid.uuid)->val);
    9714:	8849      	ldrh	r1, [r1, #2]
    9716:	4638      	mov	r0, r7
    9718:	f011 fda0 	bl	1b25c <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    971c:	4623      	mov	r3, r4
    971e:	4a26      	ldr	r2, [pc, #152]	; (97b8 <bt_gatt_read+0xe4>)
    9720:	e019      	b.n	9756 <bt_gatt_read+0x82>
		net_buf_add_mem(buf, BT_UUID_128(params->by_uuid.uuid)->val, 16);
    9722:	2210      	movs	r2, #16
    9724:	3101      	adds	r1, #1
    9726:	4638      	mov	r0, r7
    9728:	f011 fd87 	bl	1b23a <net_buf_simple_add_mem>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    972c:	e7f6      	b.n	971c <bt_gatt_read+0x48>
	if (params->handle_count > 1) {
    972e:	2a01      	cmp	r2, #1
    9730:	d91e      	bls.n	9770 <bt_gatt_read+0x9c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
    9732:	0052      	lsls	r2, r2, #1
    9734:	210e      	movs	r1, #14
    9736:	f7fe f8bf 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    973a:	4606      	mov	r6, r0
    973c:	2800      	cmp	r0, #0
    973e:	d0d8      	beq.n	96f2 <bt_gatt_read+0x1e>
    9740:	2700      	movs	r7, #0
		net_buf_add_le16(buf, params->handles[i]);
    9742:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
    9746:	6862      	ldr	r2, [r4, #4]
    9748:	b2fb      	uxtb	r3, r7
    974a:	429a      	cmp	r2, r3
    974c:	f107 0701 	add.w	r7, r7, #1
    9750:	d807      	bhi.n	9762 <bt_gatt_read+0x8e>
	return gatt_send(conn, buf, gatt_read_multiple_rsp, params, NULL);
    9752:	4a1a      	ldr	r2, [pc, #104]	; (97bc <bt_gatt_read+0xe8>)
    9754:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    9756:	4631      	mov	r1, r6
    9758:	4628      	mov	r0, r5
}
    975a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    975e:	f7fe bef7 	b.w	8550 <gatt_send.constprop.31>
		net_buf_add_le16(buf, params->handles[i]);
    9762:	68a2      	ldr	r2, [r4, #8]
    9764:	4640      	mov	r0, r8
    9766:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    976a:	f011 fd77 	bl	1b25c <net_buf_simple_add_le16>
    976e:	e7ea      	b.n	9746 <bt_gatt_read+0x72>
	if (params->single.offset) {
    9770:	894b      	ldrh	r3, [r1, #10]
    9772:	b17b      	cbz	r3, 9794 <bt_gatt_read+0xc0>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
    9774:	2204      	movs	r2, #4
    9776:	210c      	movs	r1, #12
    9778:	f7fe f89e 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    977c:	4606      	mov	r6, r0
    977e:	2800      	cmp	r0, #0
    9780:	d0b7      	beq.n	96f2 <bt_gatt_read+0x1e>
	req = net_buf_add(buf, sizeof(*req));
    9782:	2104      	movs	r1, #4
    9784:	3008      	adds	r0, #8
    9786:	f011 fd52 	bl	1b22e <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    978a:	8923      	ldrh	r3, [r4, #8]
    978c:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
    978e:	8963      	ldrh	r3, [r4, #10]
    9790:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    9792:	e7c3      	b.n	971c <bt_gatt_read+0x48>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    9794:	2202      	movs	r2, #2
    9796:	210a      	movs	r1, #10
    9798:	f7fe f88e 	bl	78b8 <bt_att_create_pdu>
	if (!buf) {
    979c:	4606      	mov	r6, r0
    979e:	2800      	cmp	r0, #0
    97a0:	d0a7      	beq.n	96f2 <bt_gatt_read+0x1e>
	req = net_buf_add(buf, sizeof(*req));
    97a2:	2102      	movs	r1, #2
    97a4:	3008      	adds	r0, #8
    97a6:	f011 fd42 	bl	1b22e <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    97aa:	8923      	ldrh	r3, [r4, #8]
    97ac:	8003      	strh	r3, [r0, #0]
    97ae:	e7b5      	b.n	971c <bt_gatt_read+0x48>
		return -ENOTCONN;
    97b0:	f06f 0038 	mvn.w	r0, #56	; 0x38
    97b4:	e79f      	b.n	96f6 <bt_gatt_read+0x22>
    97b6:	bf00      	nop
    97b8:	000097c1 	.word	0x000097c1
    97bc:	00019d91 	.word	0x00019d91

000097c0 <gatt_read_rsp>:
{
    97c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    97c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    97c6:	4606      	mov	r6, r0
    97c8:	4690      	mov	r8, r2
    97ca:	4699      	mov	r9, r3
	if (err || !length) {
    97cc:	460f      	mov	r7, r1
    97ce:	b901      	cbnz	r1, 97d2 <gatt_read_rsp+0x12>
    97d0:	b953      	cbnz	r3, 97e8 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
    97d2:	2300      	movs	r3, #0
    97d4:	930a      	str	r3, [sp, #40]	; 0x28
    97d6:	6825      	ldr	r5, [r4, #0]
    97d8:	4622      	mov	r2, r4
    97da:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    97dc:	4630      	mov	r0, r6
    97de:	46ac      	mov	ip, r5
}
    97e0:	b003      	add	sp, #12
    97e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    97e6:	4760      	bx	ip
	if (!params->handle_count) {
    97e8:	6863      	ldr	r3, [r4, #4]
    97ea:	2b00      	cmp	r3, #0
    97ec:	d14d      	bne.n	988a <gatt_read_rsp+0xca>
	for (length--, pdu = rsp->data; length;
    97ee:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    97f2:	b2ad      	uxth	r5, r5
    97f4:	f102 0901 	add.w	r9, r2, #1
    97f8:	b35d      	cbz	r5, 9852 <gatt_read_rsp+0x92>
		handle = sys_le16_to_cpu(data->handle);
    97fa:	f8b9 2000 	ldrh.w	r2, [r9]
    97fe:	b293      	uxth	r3, r2
		if (!handle) {
    9800:	b983      	cbnz	r3, 9824 <gatt_read_rsp+0x64>
			BT_ERR("Invalid handle");
    9802:	2301      	movs	r3, #1
    9804:	f04f 0100 	mov.w	r1, #0
    9808:	f363 0107 	bfi	r1, r3, #0, #8
    980c:	4a30      	ldr	r2, [pc, #192]	; (98d0 <gatt_read_rsp+0x110>)
    980e:	4b31      	ldr	r3, [pc, #196]	; (98d4 <gatt_read_rsp+0x114>)
    9810:	4831      	ldr	r0, [pc, #196]	; (98d8 <gatt_read_rsp+0x118>)
    9812:	1a9b      	subs	r3, r3, r2
    9814:	08db      	lsrs	r3, r3, #3
    9816:	f363 118f 	bfi	r1, r3, #6, #10
}
    981a:	b003      	add	sp, #12
    981c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
    9820:	f00e bed6 	b.w	185d0 <log_0>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    9824:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
    9828:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    982a:	42ab      	cmp	r3, r5
    982c:	bf8c      	ite	hi
    982e:	1eab      	subhi	r3, r5, #2
    9830:	3b02      	subls	r3, #2
    9832:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
    9834:	9300      	str	r3, [sp, #0]
    9836:	6827      	ldr	r7, [r4, #0]
    9838:	f109 0302 	add.w	r3, r9, #2
    983c:	4622      	mov	r2, r4
    983e:	2100      	movs	r1, #0
    9840:	4630      	mov	r0, r6
    9842:	47b8      	blx	r7
    9844:	2800      	cmp	r0, #0
    9846:	d03f      	beq.n	98c8 <gatt_read_rsp+0x108>
		if (rsp->len > length) {
    9848:	f898 1000 	ldrb.w	r1, [r8]
    984c:	b28b      	uxth	r3, r1
    984e:	429d      	cmp	r5, r3
    9850:	d20b      	bcs.n	986a <gatt_read_rsp+0xaa>
	if (bt_gatt_read(conn, params) < 0) {
    9852:	4621      	mov	r1, r4
    9854:	4630      	mov	r0, r6
    9856:	f7ff ff3d 	bl	96d4 <bt_gatt_read>
    985a:	2800      	cmp	r0, #0
    985c:	da34      	bge.n	98c8 <gatt_read_rsp+0x108>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    985e:	2300      	movs	r3, #0
    9860:	930a      	str	r3, [sp, #40]	; 0x28
    9862:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    9864:	4622      	mov	r2, r4
    9866:	210e      	movs	r1, #14
    9868:	e7b8      	b.n	97dc <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
    986a:	8922      	ldrh	r2, [r4, #8]
    986c:	8960      	ldrh	r0, [r4, #10]
    986e:	4290      	cmp	r0, r2
    9870:	d105      	bne.n	987e <gatt_read_rsp+0xbe>
			params->func(conn, 0, params, NULL, 0);
    9872:	2300      	movs	r3, #0
    9874:	930a      	str	r3, [sp, #40]	; 0x28
    9876:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
    9878:	4622      	mov	r2, r4
    987a:	4619      	mov	r1, r3
    987c:	e7ae      	b.n	97dc <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
    987e:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    9880:	1aed      	subs	r5, r5, r3
		params->by_uuid.start_handle++;
    9882:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    9884:	b2ad      	uxth	r5, r5
    9886:	4489      	add	r9, r1
    9888:	e7b6      	b.n	97f8 <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
    988a:	f8cd 9000 	str.w	r9, [sp]
    988e:	4613      	mov	r3, r2
    9890:	6825      	ldr	r5, [r4, #0]
    9892:	4622      	mov	r2, r4
    9894:	47a8      	blx	r5
    9896:	b1b8      	cbz	r0, 98c8 <gatt_read_rsp+0x108>
	if (length < (bt_att_get_mtu(conn) - 1)) {
    9898:	4630      	mov	r0, r6
    989a:	f010 f8fb 	bl	19a94 <bt_att_get_mtu>
    989e:	3801      	subs	r0, #1
    98a0:	4581      	cmp	r9, r0
    98a2:	da03      	bge.n	98ac <gatt_read_rsp+0xec>
		params->func(conn, 0, params, NULL, 0);
    98a4:	970a      	str	r7, [sp, #40]	; 0x28
    98a6:	6825      	ldr	r5, [r4, #0]
    98a8:	463b      	mov	r3, r7
    98aa:	e7e5      	b.n	9878 <gatt_read_rsp+0xb8>
	params->single.offset += length;
    98ac:	8963      	ldrh	r3, [r4, #10]
    98ae:	eb09 0503 	add.w	r5, r9, r3
    98b2:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
    98b4:	4621      	mov	r1, r4
    98b6:	4630      	mov	r0, r6
    98b8:	f7ff ff0c 	bl	96d4 <bt_gatt_read>
    98bc:	2800      	cmp	r0, #0
    98be:	da03      	bge.n	98c8 <gatt_read_rsp+0x108>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    98c0:	970a      	str	r7, [sp, #40]	; 0x28
    98c2:	6825      	ldr	r5, [r4, #0]
    98c4:	463b      	mov	r3, r7
    98c6:	e7cd      	b.n	9864 <gatt_read_rsp+0xa4>
}
    98c8:	b003      	add	sp, #12
    98ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    98ce:	bf00      	nop
    98d0:	0001e448 	.word	0x0001e448
    98d4:	0001e500 	.word	0x0001e500
    98d8:	000205f5 	.word	0x000205f5

000098dc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    98dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    98de:	4a17      	ldr	r2, [pc, #92]	; (993c <bt_gatt_connected+0x60>)
	data.conn = conn;
    98e0:	9000      	str	r0, [sp, #0]
{
    98e2:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    98e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    98e8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    98ea:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    98ec:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    98f0:	f010 fc05 	bl	1a0fe <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    98f4:	2100      	movs	r1, #0
    98f6:	4628      	mov	r0, r5
    98f8:	f7fe fdce 	bl	8498 <gatt_sub_find_free>
	if (!sub) {
    98fc:	b128      	cbz	r0, 990a <bt_gatt_connected+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    98fe:	6884      	ldr	r4, [r0, #8]
    9900:	b11c      	cbz	r4, 990a <bt_gatt_connected+0x2e>
    9902:	3c10      	subs	r4, #16
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    9904:	f105 0670 	add.w	r6, r5, #112	; 0x70
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    9908:	b90c      	cbnz	r4, 990e <bt_gatt_connected+0x32>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    990a:	b002      	add	sp, #8
    990c:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    990e:	4631      	mov	r1, r6
    9910:	7a28      	ldrb	r0, [r5, #8]
    9912:	f00f fcd0 	bl	192b6 <bt_addr_le_is_bonded>
    9916:	b158      	cbz	r0, 9930 <bt_gatt_connected+0x54>
		    !atomic_test_bit(params->flags,
    9918:	2101      	movs	r1, #1
    991a:	f104 000c 	add.w	r0, r4, #12
    991e:	f010 fa2e 	bl	19d7e <atomic_test_bit>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    9922:	b928      	cbnz	r0, 9930 <bt_gatt_connected+0x54>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    9924:	4623      	mov	r3, r4
    9926:	8922      	ldrh	r2, [r4, #8]
    9928:	88e1      	ldrh	r1, [r4, #6]
    992a:	4628      	mov	r0, r5
    992c:	f7fe ff66 	bl	87fc <gatt_write_ccc.constprop.26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9930:	6924      	ldr	r4, [r4, #16]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    9932:	2c00      	cmp	r4, #0
    9934:	d0e9      	beq.n	990a <bt_gatt_connected+0x2e>
    9936:	3c10      	subs	r4, #16
    9938:	e7e6      	b.n	9908 <bt_gatt_connected+0x2c>
    993a:	bf00      	nop
    993c:	00008e71 	.word	0x00008e71

00009940 <db_hash_read>:
{
    9940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9942:	4604      	mov	r4, r0
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
    9944:	4814      	ldr	r0, [pc, #80]	; (9998 <db_hash_read+0x58>)
    9946:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    994a:	461f      	mov	r7, r3
    994c:	4616      	mov	r6, r2
    994e:	f00d ff29 	bl	177a4 <z_timeout_remaining>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    9952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9956:	fb80 0103 	smull	r0, r1, r0, r3
    995a:	0bc3      	lsrs	r3, r0, #15
	if (k_delayed_work_remaining_get(&db_hash_work)) {
    995c:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    9960:	d004      	beq.n	996c <db_hash_read+0x2c>
		k_delayed_work_cancel(&db_hash_work);
    9962:	480e      	ldr	r0, [pc, #56]	; (999c <db_hash_read+0x5c>)
    9964:	f014 fac3 	bl	1deee <k_delayed_work_cancel>
		db_hash_gen(true);
    9968:	f7ff f984 	bl	8c74 <db_hash_gen.isra.18>
	bt_gatt_change_aware(conn, true);
    996c:	2101      	movs	r1, #1
    996e:	4620      	mov	r0, r4
    9970:	f010 fcf9 	bl	1a366 <bt_gatt_change_aware>
	if (offset > value_len) {
    9974:	2d10      	cmp	r5, #16
    9976:	d80c      	bhi.n	9992 <db_hash_read+0x52>
	len = MIN(buf_len, value_len - offset);
    9978:	f1c5 0410 	rsb	r4, r5, #16
    997c:	42bc      	cmp	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    997e:	4908      	ldr	r1, [pc, #32]	; (99a0 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
    9980:	bfa8      	it	ge
    9982:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    9984:	4622      	mov	r2, r4
    9986:	4429      	add	r1, r5
    9988:	4630      	mov	r0, r6
    998a:	f00f f956 	bl	18c3a <memcpy>
}
    998e:	4620      	mov	r0, r4
    9990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9992:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    9996:	e7fa      	b.n	998e <db_hash_read+0x4e>
    9998:	20000388 	.word	0x20000388
    999c:	2000037c 	.word	0x2000037c
    99a0:	2000a127 	.word	0x2000a127

000099a4 <bt_gatt_disconnected>:
	return 0;

}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    99a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    99a8:	4603      	mov	r3, r0
{
    99aa:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    99ac:	4a37      	ldr	r2, [pc, #220]	; (9a8c <bt_gatt_disconnected+0xe8>)
    99ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    99b2:	2001      	movs	r0, #1
    99b4:	f010 fba3 	bl	1a0fe <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    99b8:	2100      	movs	r1, #0
    99ba:	4620      	mov	r0, r4
    99bc:	f7fe fd6c 	bl	8498 <gatt_sub_find_free>
	if (!sub) {
    99c0:	4607      	mov	r7, r0
    99c2:	b940      	cbnz	r0, 99d6 <bt_gatt_disconnected+0x32>
	cfg = find_cf_cfg(conn);
    99c4:	4620      	mov	r0, r4
    99c6:	f7fe fe93 	bl	86f0 <find_cf_cfg>
	if (!cfg) {
    99ca:	4605      	mov	r5, r0
    99cc:	2800      	cmp	r0, #0
    99ce:	d135      	bne.n	9a3c <bt_gatt_disconnected+0x98>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    99d0:	b002      	add	sp, #8
    99d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    99d6:	6883      	ldr	r3, [r0, #8]
    99d8:	2b00      	cmp	r3, #0
    99da:	d0f3      	beq.n	99c4 <bt_gatt_disconnected+0x20>
    99dc:	f1b3 0610 	subs.w	r6, r3, #16
    99e0:	d0f0      	beq.n	99c4 <bt_gatt_disconnected+0x20>
    99e2:	681d      	ldr	r5, [r3, #0]
    99e4:	b105      	cbz	r5, 99e8 <bt_gatt_disconnected+0x44>
    99e6:	3d10      	subs	r5, #16
{
    99e8:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    99ec:	f104 0970 	add.w	r9, r4, #112	; 0x70
		    (atomic_test_bit(params->flags,
    99f0:	46c2      	mov	sl, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    99f2:	4649      	mov	r1, r9
    99f4:	7a20      	ldrb	r0, [r4, #8]
    99f6:	f00f fc5e 	bl	192b6 <bt_addr_le_is_bonded>
    99fa:	b978      	cbnz	r0, 9a1c <bt_gatt_disconnected+0x78>
			params->value = 0U;
    99fc:	f8a6 a008 	strh.w	sl, [r6, #8]
			gatt_sub_remove(conn, sub, prev, params);
    9a00:	4633      	mov	r3, r6
    9a02:	4642      	mov	r2, r8
    9a04:	4639      	mov	r1, r7
    9a06:	4620      	mov	r0, r4
    9a08:	f010 fade 	bl	19fc8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    9a0c:	2d00      	cmp	r5, #0
    9a0e:	d0d9      	beq.n	99c4 <bt_gatt_disconnected+0x20>
    9a10:	692b      	ldr	r3, [r5, #16]
    9a12:	b103      	cbz	r3, 9a16 <bt_gatt_disconnected+0x72>
    9a14:	3b10      	subs	r3, #16
{
    9a16:	462e      	mov	r6, r5
    9a18:	461d      	mov	r5, r3
    9a1a:	e7ea      	b.n	99f2 <bt_gatt_disconnected+0x4e>
		    (atomic_test_bit(params->flags,
    9a1c:	2100      	movs	r1, #0
    9a1e:	f106 000c 	add.w	r0, r6, #12
    9a22:	f010 f9ac 	bl	19d7e <atomic_test_bit>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    9a26:	2800      	cmp	r0, #0
    9a28:	d1e8      	bne.n	99fc <bt_gatt_disconnected+0x58>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    9a2a:	783b      	ldrb	r3, [r7, #0]
    9a2c:	b11b      	cbz	r3, 9a36 <bt_gatt_disconnected+0x92>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    9a2e:	4649      	mov	r1, r9
    9a30:	4638      	mov	r0, r7
    9a32:	f010 f92c 	bl	19c8e <bt_addr_le_copy>
			prev = &params->node;
    9a36:	f106 0810 	add.w	r8, r6, #16
    9a3a:	e7e7      	b.n	9a0c <bt_gatt_disconnected+0x68>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9a3c:	f104 0670 	add.w	r6, r4, #112	; 0x70
    9a40:	7a20      	ldrb	r0, [r4, #8]
    9a42:	4631      	mov	r1, r6
    9a44:	f00f fc37 	bl	192b6 <bt_addr_le_is_bonded>
    9a48:	1c6b      	adds	r3, r5, #1
    9a4a:	4604      	mov	r4, r0
    9a4c:	b9c0      	cbnz	r0, 9a80 <bt_gatt_disconnected+0xdc>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    9a4e:	9000      	str	r0, [sp, #0]
    9a50:	4669      	mov	r1, sp
    9a52:	f8cd 0003 	str.w	r0, [sp, #3]
    9a56:	4618      	mov	r0, r3
    9a58:	f010 f919 	bl	19c8e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
    9a5c:	f105 0008 	add.w	r0, r5, #8
    9a60:	2201      	movs	r2, #1
    9a62:	4621      	mov	r1, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9a64:	350c      	adds	r5, #12
    9a66:	f00f f912 	bl	18c8e <memset>
    9a6a:	f3bf 8f5b 	dmb	ish
    9a6e:	e855 3f00 	ldrex	r3, [r5]
    9a72:	e845 4200 	strex	r2, r4, [r5]
    9a76:	2a00      	cmp	r2, #0
    9a78:	d1f9      	bne.n	9a6e <bt_gatt_disconnected+0xca>
    9a7a:	f3bf 8f5b 	dmb	ish
    9a7e:	e7a7      	b.n	99d0 <bt_gatt_disconnected+0x2c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9a80:	4631      	mov	r1, r6
    9a82:	4618      	mov	r0, r3
    9a84:	f010 f903 	bl	19c8e <bt_addr_le_copy>
}
    9a88:	e7a2      	b.n	99d0 <bt_gatt_disconnected+0x2c>
    9a8a:	bf00      	nop
    9a8c:	00008a71 	.word	0x00008a71

00009a90 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    9a90:	4a0d      	ldr	r2, [pc, #52]	; (9ac8 <bt_smp_accept+0x38>)
{
    9a92:	b508      	push	{r3, lr}
		if (smp->chan.conn) {
    9a94:	6813      	ldr	r3, [r2, #0]
    9a96:	b923      	cbnz	r3, 9aa2 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    9a98:	480c      	ldr	r0, [pc, #48]	; (9acc <bt_smp_accept+0x3c>)
    9a9a:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    9a9c:	600a      	str	r2, [r1, #0]

		return 0;
    9a9e:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    9aa0:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    9aa2:	2301      	movs	r3, #1
    9aa4:	f04f 0200 	mov.w	r2, #0
    9aa8:	f363 0207 	bfi	r2, r3, #0, #8
    9aac:	4908      	ldr	r1, [pc, #32]	; (9ad0 <bt_smp_accept+0x40>)
    9aae:	4b09      	ldr	r3, [pc, #36]	; (9ad4 <bt_smp_accept+0x44>)
    9ab0:	1a5b      	subs	r3, r3, r1
    9ab2:	08db      	lsrs	r3, r3, #3
    9ab4:	4601      	mov	r1, r0
    9ab6:	f363 128f 	bfi	r2, r3, #6, #10
    9aba:	4807      	ldr	r0, [pc, #28]	; (9ad8 <bt_smp_accept+0x48>)
    9abc:	f00e fd95 	bl	185ea <log_1>
	return -ENOMEM;
    9ac0:	f06f 000b 	mvn.w	r0, #11
    9ac4:	e7ec      	b.n	9aa0 <bt_smp_accept+0x10>
    9ac6:	bf00      	nop
    9ac8:	20000400 	.word	0x20000400
    9acc:	0001ea68 	.word	0x0001ea68
    9ad0:	0001e448 	.word	0x0001e448
    9ad4:	0001e520 	.word	0x0001e520
    9ad8:	0002067d 	.word	0x0002067d

00009adc <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    9adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    9ae0:	4f11      	ldr	r7, [pc, #68]	; (9b28 <mayfly_init+0x4c>)
    9ae2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 9b2c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    9ae6:	2604      	movs	r6, #4
	while (callee_id--) {
    9ae8:	3e01      	subs	r6, #1
    9aea:	b2f6      	uxtb	r6, r6
    9aec:	2eff      	cmp	r6, #255	; 0xff
    9aee:	d019      	beq.n	9b24 <mayfly_init+0x48>
    9af0:	b233      	sxth	r3, r6
    9af2:	ea4f 0883 	mov.w	r8, r3, lsl #2
    9af6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9afa:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
    9afc:	2404      	movs	r4, #4
    9afe:	f04f 0a0c 	mov.w	sl, #12
    9b02:	e00a      	b.n	9b1a <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
    9b04:	fb1a 5104 	smlabb	r1, sl, r4, r5
    9b08:	1d0a      	adds	r2, r1, #4
    9b0a:	eb04 0008 	add.w	r0, r4, r8
    9b0e:	443a      	add	r2, r7
    9b10:	4439      	add	r1, r7
    9b12:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    9b16:	f010 fcef 	bl	1a4f8 <memq_init>
		while (caller_id--) {
    9b1a:	3c01      	subs	r4, #1
    9b1c:	b2e4      	uxtb	r4, r4
    9b1e:	2cff      	cmp	r4, #255	; 0xff
    9b20:	d1f0      	bne.n	9b04 <mayfly_init+0x28>
    9b22:	e7e1      	b.n	9ae8 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    9b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b28:	20000510 	.word	0x20000510
    9b2c:	20000490 	.word	0x20000490

00009b30 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    9b30:	b4f0      	push	{r4, r5, r6, r7}
    9b32:	2430      	movs	r4, #48	; 0x30
    9b34:	4b10      	ldr	r3, [pc, #64]	; (9b78 <mayfly_enable+0x48>)
    9b36:	270c      	movs	r7, #12
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    9b38:	434c      	muls	r4, r1
    9b3a:	fb07 4400 	mla	r4, r7, r0, r4
{
    9b3e:	4605      	mov	r5, r0
    9b40:	460e      	mov	r6, r1
		if (mft[callee_id][caller_id].enable_req ==
    9b42:	4423      	add	r3, r4
	if (enable) {
    9b44:	b152      	cbz	r2, 9b5c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    9b46:	7a59      	ldrb	r1, [r3, #9]
    9b48:	7a18      	ldrb	r0, [r3, #8]
    9b4a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    9b4c:	bf04      	itt	eq
    9b4e:	3101      	addeq	r1, #1
    9b50:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    9b52:	4628      	mov	r0, r5
    9b54:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    9b56:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    9b58:	f008 bb7a 	b.w	12250 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    9b5c:	7a9c      	ldrb	r4, [r3, #10]
    9b5e:	7ada      	ldrb	r2, [r3, #11]
    9b60:	42a2      	cmp	r2, r4
    9b62:	d107      	bne.n	9b74 <mayfly_enable+0x44>
			mft[callee_id][caller_id].disable_req++;
    9b64:	3201      	adds	r2, #1
    9b66:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    9b68:	4b04      	ldr	r3, [pc, #16]	; (9b7c <mayfly_enable+0x4c>)
    9b6a:	2201      	movs	r2, #1
    9b6c:	545a      	strb	r2, [r3, r1]
}
    9b6e:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    9b70:	f008 bbb0 	b.w	122d4 <mayfly_pend>
}
    9b74:	bcf0      	pop	{r4, r5, r6, r7}
    9b76:	4770      	bx	lr
    9b78:	20000510 	.word	0x20000510
    9b7c:	2000a137 	.word	0x2000a137

00009b80 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    9b80:	b570      	push	{r4, r5, r6, lr}
    9b82:	4606      	mov	r6, r0
    9b84:	460d      	mov	r5, r1
    9b86:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    9b88:	b1a2      	cbz	r2, 9bb4 <mayfly_enqueue+0x34>
    9b8a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    9b8c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    9b8e:	7820      	ldrb	r0, [r4, #0]
    9b90:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    9b92:	f010 0003 	ands.w	r0, r0, #3
    9b96:	d02c      	beq.n	9bf2 <mayfly_enqueue+0x72>
		if (chain) {
    9b98:	b31b      	cbz	r3, 9be2 <mayfly_enqueue+0x62>
			if (state != 1U) {
    9b9a:	2801      	cmp	r0, #1
    9b9c:	d028      	beq.n	9bf0 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    9b9e:	3201      	adds	r2, #1
    9ba0:	b2d2      	uxtb	r2, r2
    9ba2:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    9ba4:	4b1c      	ldr	r3, [pc, #112]	; (9c18 <mayfly_enqueue+0x98>)
    9ba6:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    9ba8:	4629      	mov	r1, r5
    9baa:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    9bac:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    9bae:	f008 fb91 	bl	122d4 <mayfly_pend>
    9bb2:	e01c      	b.n	9bee <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    9bb4:	f011 fae5 	bl	1b182 <mayfly_prio_is_equal>
    9bb8:	2800      	cmp	r0, #0
    9bba:	d0e6      	beq.n	9b8a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    9bbc:	4629      	mov	r1, r5
    9bbe:	4630      	mov	r0, r6
    9bc0:	f008 fb66 	bl	12290 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    9bc4:	2800      	cmp	r0, #0
    9bc6:	d0e0      	beq.n	9b8a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    9bc8:	2330      	movs	r3, #48	; 0x30
    9bca:	220c      	movs	r2, #12
    9bcc:	436b      	muls	r3, r5
    9bce:	fb02 3306 	mla	r3, r2, r6, r3
    9bd2:	4a12      	ldr	r2, [pc, #72]	; (9c1c <mayfly_enqueue+0x9c>)
    9bd4:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    9bd6:	7a93      	ldrb	r3, [r2, #10]
    9bd8:	7ad2      	ldrb	r2, [r2, #11]
    9bda:	1a9b      	subs	r3, r3, r2
    9bdc:	bf18      	it	ne
    9bde:	2301      	movne	r3, #1
    9be0:	e7d4      	b.n	9b8c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    9be2:	3202      	adds	r2, #2
    9be4:	b2d2      	uxtb	r2, r2
    9be6:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    9be8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    9bec:	4798      	blx	r3

	return 0;
    9bee:	2000      	movs	r0, #0
}
    9bf0:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    9bf2:	2b00      	cmp	r3, #0
    9bf4:	d0f8      	beq.n	9be8 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    9bf6:	3201      	adds	r2, #1
    9bf8:	b2d2      	uxtb	r2, r2
    9bfa:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    9bfc:	2304      	movs	r3, #4
    9bfe:	2230      	movs	r2, #48	; 0x30
    9c00:	fb12 3205 	smlabb	r2, r2, r5, r3
    9c04:	230c      	movs	r3, #12
    9c06:	fb13 2306 	smlabb	r3, r3, r6, r2
    9c0a:	4a04      	ldr	r2, [pc, #16]	; (9c1c <mayfly_enqueue+0x9c>)
    9c0c:	6860      	ldr	r0, [r4, #4]
    9c0e:	441a      	add	r2, r3
    9c10:	4621      	mov	r1, r4
    9c12:	f010 fc7f 	bl	1a514 <memq_enqueue>
    9c16:	e7c5      	b.n	9ba4 <mayfly_enqueue+0x24>
    9c18:	2000a137 	.word	0x2000a137
    9c1c:	20000510 	.word	0x20000510

00009c20 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
    9c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    9c24:	4b57      	ldr	r3, [pc, #348]	; (9d84 <mayfly_run+0x164>)
    9c26:	5c1a      	ldrb	r2, [r3, r0]
{
    9c28:	b089      	sub	sp, #36	; 0x24
    9c2a:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
    9c2c:	2a00      	cmp	r2, #0
    9c2e:	f000 80a2 	beq.w	9d76 <mayfly_run+0x156>
		return;
	}
	mfp[callee_id] = 0U;
    9c32:	2600      	movs	r6, #0
    9c34:	541e      	strb	r6, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    9c36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    9c3a:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    9c3c:	f8df b148 	ldr.w	fp, [pc, #328]	; 9d88 <mayfly_run+0x168>
    9c40:	9304      	str	r3, [sp, #16]
    9c42:	2404      	movs	r4, #4
    9c44:	233c      	movs	r3, #60	; 0x3c
    9c46:	fb13 4300 	smlabb	r3, r3, r0, r4
    9c4a:	445b      	add	r3, fp
    9c4c:	9303      	str	r3, [sp, #12]
	u8_t disable = 0U;
    9c4e:	9600      	str	r6, [sp, #0]
    9c50:	46d9      	mov	r9, fp
	while (caller_id--) {
    9c52:	3c01      	subs	r4, #1
    9c54:	b2e4      	uxtb	r4, r4
    9c56:	2cff      	cmp	r4, #255	; 0xff
    9c58:	d10c      	bne.n	9c74 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    9c5a:	9b00      	ldr	r3, [sp, #0]
    9c5c:	2b00      	cmp	r3, #0
    9c5e:	f000 808a 	beq.w	9d76 <mayfly_run+0x156>
    9c62:	2e00      	cmp	r6, #0
    9c64:	f040 8087 	bne.w	9d76 <mayfly_run+0x156>
		mayfly_enable_cb(callee_id, callee_id, 0);
    9c68:	4632      	mov	r2, r6
    9c6a:	4629      	mov	r1, r5
    9c6c:	4628      	mov	r0, r5
    9c6e:	f008 faef 	bl	12250 <mayfly_enable_cb>
    9c72:	e080      	b.n	9d76 <mayfly_run+0x156>
		struct mayfly *m = 0;
    9c74:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    9c76:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    9c78:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    9c7a:	4367      	muls	r7, r4
    9c7c:	2330      	movs	r3, #48	; 0x30
    9c7e:	fb03 7305 	mla	r3, r3, r5, r7
    9c82:	eb09 0103 	add.w	r1, r9, r3
    9c86:	aa07      	add	r2, sp, #28
    9c88:	f859 0003 	ldr.w	r0, [r9, r3]
    9c8c:	6849      	ldr	r1, [r1, #4]
    9c8e:	f010 fc48 	bl	1a522 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    9c92:	9a04      	ldr	r2, [sp, #16]
    9c94:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    9c98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9c9c:	444b      	add	r3, r9
    9c9e:	e9cd 7301 	strd	r7, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
    9ca2:	4682      	mov	sl, r0
		while (link) {
    9ca4:	f1ba 0f00 	cmp.w	sl, #0
    9ca8:	d047      	beq.n	9d3a <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
    9caa:	9b07      	ldr	r3, [sp, #28]
    9cac:	f893 8000 	ldrb.w	r8, [r3]
    9cb0:	785a      	ldrb	r2, [r3, #1]
    9cb2:	eba8 0802 	sub.w	r8, r8, r2
    9cb6:	f008 0803 	and.w	r8, r8, #3
			if (state == 1U) {
    9cba:	f1b8 0f01 	cmp.w	r8, #1
    9cbe:	d104      	bne.n	9cca <mayfly_run+0xaa>
				m->_ack--;
    9cc0:	3a01      	subs	r2, #1
    9cc2:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    9cc4:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    9cc8:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    9cca:	9f07      	ldr	r7, [sp, #28]
	req = m->_req;
    9ccc:	783b      	ldrb	r3, [r7, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    9cce:	787a      	ldrb	r2, [r7, #1]
	req = m->_req;
    9cd0:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1U) {
    9cd2:	1a9a      	subs	r2, r3, r2
    9cd4:	f002 0203 	and.w	r2, r2, #3
    9cd8:	2a01      	cmp	r2, #1
    9cda:	9305      	str	r3, [sp, #20]
    9cdc:	d01b      	beq.n	9d16 <mayfly_run+0xf6>
		memq_dequeue(mft[callee_id][caller_id].tail,
    9cde:	9b01      	ldr	r3, [sp, #4]
    9ce0:	9902      	ldr	r1, [sp, #8]
    9ce2:	2030      	movs	r0, #48	; 0x30
    9ce4:	fb00 3005 	mla	r0, r0, r5, r3
    9ce8:	4b27      	ldr	r3, [pc, #156]	; (9d88 <mayfly_run+0x168>)
    9cea:	4418      	add	r0, r3
    9cec:	2200      	movs	r2, #0
    9cee:	6840      	ldr	r0, [r0, #4]
    9cf0:	f010 fc1f 	bl	1a532 <memq_dequeue>
		m->_ack = req;
    9cf4:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
    9cf6:	787a      	ldrb	r2, [r7, #1]
		m->_ack = req;
    9cf8:	707b      	strb	r3, [r7, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    9cfa:	783b      	ldrb	r3, [r7, #0]
		m->_link = link;
    9cfc:	f8c7 a004 	str.w	sl, [r7, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    9d00:	1a9b      	subs	r3, r3, r2
    9d02:	f003 0303 	and.w	r3, r3, #3
    9d06:	2b01      	cmp	r3, #1
    9d08:	d105      	bne.n	9d16 <mayfly_run+0xf6>
			m->_ack = ack;
    9d0a:	707a      	strb	r2, [r7, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    9d0c:	4639      	mov	r1, r7
    9d0e:	9a03      	ldr	r2, [sp, #12]
    9d10:	4650      	mov	r0, sl
    9d12:	f010 fbff 	bl	1a514 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    9d16:	9a01      	ldr	r2, [sp, #4]
    9d18:	2330      	movs	r3, #48	; 0x30
    9d1a:	fb03 2305 	mla	r3, r3, r5, r2
    9d1e:	eb09 0103 	add.w	r1, r9, r3
    9d22:	aa07      	add	r2, sp, #28
    9d24:	6849      	ldr	r1, [r1, #4]
    9d26:	f859 0003 	ldr.w	r0, [r9, r3]
    9d2a:	f010 fbfa 	bl	1a522 <memq_peek>
			if (state == 1U) {
    9d2e:	f1b8 0f01 	cmp.w	r8, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    9d32:	4682      	mov	sl, r0
			if (state == 1U) {
    9d34:	d1b6      	bne.n	9ca4 <mayfly_run+0x84>
				if (caller_id || link) {
    9d36:	b9bc      	cbnz	r4, 9d68 <mayfly_run+0x148>
    9d38:	b9b0      	cbnz	r0, 9d68 <mayfly_run+0x148>
		if (mft[callee_id][caller_id].disable_req !=
    9d3a:	2230      	movs	r2, #48	; 0x30
    9d3c:	4912      	ldr	r1, [pc, #72]	; (9d88 <mayfly_run+0x168>)
    9d3e:	230c      	movs	r3, #12
    9d40:	436a      	muls	r2, r5
    9d42:	fb03 2204 	mla	r2, r3, r4, r2
    9d46:	440a      	add	r2, r1
    9d48:	7a91      	ldrb	r1, [r2, #10]
    9d4a:	7ad0      	ldrb	r0, [r2, #11]
    9d4c:	4288      	cmp	r0, r1
    9d4e:	d115      	bne.n	9d7c <mayfly_run+0x15c>
		if (mft[callee_id][caller_id].enable_req !=
    9d50:	2230      	movs	r2, #48	; 0x30
    9d52:	436a      	muls	r2, r5
    9d54:	fb03 2304 	mla	r3, r3, r4, r2
    9d58:	445b      	add	r3, fp
    9d5a:	7a1a      	ldrb	r2, [r3, #8]
    9d5c:	7a59      	ldrb	r1, [r3, #9]
    9d5e:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    9d60:	bf1c      	itt	ne
    9d62:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    9d64:	2601      	movne	r6, #1
    9d66:	e774      	b.n	9c52 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
    9d68:	4b06      	ldr	r3, [pc, #24]	; (9d84 <mayfly_run+0x164>)
    9d6a:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
    9d6c:	4629      	mov	r1, r5
    9d6e:	4628      	mov	r0, r5
					mfp[callee_id] = 1U;
    9d70:	555a      	strb	r2, [r3, r5]
					mayfly_pend(callee_id, callee_id);
    9d72:	f008 faaf 	bl	122d4 <mayfly_pend>
	}
}
    9d76:	b009      	add	sp, #36	; 0x24
    9d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    9d7c:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
    9d7e:	2201      	movs	r2, #1
    9d80:	9200      	str	r2, [sp, #0]
    9d82:	e7e5      	b.n	9d50 <mayfly_run+0x130>
    9d84:	2000a137 	.word	0x2000a137
    9d88:	20000510 	.word	0x20000510

00009d8c <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    9d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    9d90:	7fc2      	ldrb	r2, [r0, #31]
{
    9d92:	b08f      	sub	sp, #60	; 0x3c
    9d94:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
    9d96:	2a00      	cmp	r2, #0
    9d98:	f040 830c 	bne.w	a3b4 <ticker_job+0x628>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    9d9c:	6943      	ldr	r3, [r0, #20]
    9d9e:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
    9da0:	2101      	movs	r1, #1

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    9da2:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    9da4:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    9da6:	7ac0      	ldrb	r0, [r0, #11]
    9da8:	4298      	cmp	r0, r3
    9daa:	d077      	beq.n	9e9c <ticker_job+0x110>
	u8_t idx = *ticks_elapsed_index + 1;
    9dac:	440b      	add	r3, r1
    9dae:	b2db      	uxtb	r3, r3
		idx = 0U;
    9db0:	2b02      	cmp	r3, #2
    9db2:	bf08      	it	eq
    9db4:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    9db6:	72a3      	strb	r3, [r4, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
    9db8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
    9dbc:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    9dbe:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    9dc2:	9b04      	ldr	r3, [sp, #16]
    9dc4:	4453      	add	r3, sl
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    9dc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9dca:	6163      	str	r3, [r4, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    9dcc:	7f63      	ldrb	r3, [r4, #29]
    9dce:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
    9dd0:	6823      	ldr	r3, [r4, #0]
    9dd2:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
    9dd4:	6863      	ldr	r3, [r4, #4]
    9dd6:	930c      	str	r3, [sp, #48]	; 0x30
	count_user = instance->count_user;
    9dd8:	7a63      	ldrb	r3, [r4, #9]
    9dda:	9302      	str	r3, [sp, #8]
	pending = 0U;
    9ddc:	2300      	movs	r3, #0
    9dde:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    9de0:	f04f 0bff 	mov.w	fp, #255	; 0xff
	while (count_user--) {
    9de4:	9b02      	ldr	r3, [sp, #8]
    9de6:	3b01      	subs	r3, #1
    9de8:	b2db      	uxtb	r3, r3
    9dea:	2bff      	cmp	r3, #255	; 0xff
    9dec:	9302      	str	r3, [sp, #8]
    9dee:	d158      	bne.n	9ea2 <ticker_job+0x116>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    9df0:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    9df2:	9a03      	ldr	r2, [sp, #12]
    9df4:	1a9b      	subs	r3, r3, r2
    9df6:	bf18      	it	ne
    9df8:	2301      	movne	r3, #1
    9dfa:	9302      	str	r3, [sp, #8]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    9dfc:	9b01      	ldr	r3, [sp, #4]
    9dfe:	b1cb      	cbz	r3, 9e34 <ticker_job+0xa8>
    9e00:	f8d4 9000 	ldr.w	r9, [r4]
	ticks_expired = 0U;
    9e04:	f04f 0800 	mov.w	r8, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    9e08:	7f66      	ldrb	r6, [r4, #29]
    9e0a:	2eff      	cmp	r6, #255	; 0xff
    9e0c:	d00b      	beq.n	9e26 <ticker_job+0x9a>
		ticker = &node[id_expired];
    9e0e:	272c      	movs	r7, #44	; 0x2c
    9e10:	fb16 f707 	smulbb	r7, r6, r7
    9e14:	eb09 0507 	add.w	r5, r9, r7
		ticks_to_expire = ticker->ticks_to_expire;
    9e18:	68aa      	ldr	r2, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
    9e1a:	4552      	cmp	r2, sl
    9e1c:	f240 8105 	bls.w	a02a <ticker_job+0x29e>
			ticker->ticks_to_expire -= ticks_elapsed;
    9e20:	eba2 020a 	sub.w	r2, r2, sl
    9e24:	60aa      	str	r2, [r5, #8]
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1U;
    9e26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    9e2a:	9903      	ldr	r1, [sp, #12]
    9e2c:	42b1      	cmp	r1, r6
    9e2e:	bf18      	it	ne
    9e30:	4613      	movne	r3, r2
    9e32:	9302      	str	r3, [sp, #8]
	node = &instance->nodes[0];
    9e34:	6823      	ldr	r3, [r4, #0]
    9e36:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
    9e38:	6863      	ldr	r3, [r4, #4]
    9e3a:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
    9e3c:	7a63      	ldrb	r3, [r4, #9]
    9e3e:	9301      	str	r3, [sp, #4]
				ticker = &node[id_insert];
    9e40:	f04f 092c 	mov.w	r9, #44	; 0x2c
	while (count_user--) {
    9e44:	9b01      	ldr	r3, [sp, #4]
    9e46:	3b01      	subs	r3, #1
    9e48:	b2db      	uxtb	r3, r3
    9e4a:	2bff      	cmp	r3, #255	; 0xff
    9e4c:	9301      	str	r3, [sp, #4]
    9e4e:	f040 8137 	bne.w	a0c0 <ticker_job+0x334>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1U;
    9e52:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
	if (instance->ticker_id_head != ticker_id_old_head) {
    9e56:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    9e58:	428b      	cmp	r3, r1
    9e5a:	bf18      	it	ne
    9e5c:	2201      	movne	r2, #1
	}

	/* Process any list inquiries */
	if (!pending) {
    9e5e:	9b08      	ldr	r3, [sp, #32]
		flag_compare_update = 1U;
    9e60:	9202      	str	r2, [sp, #8]
	if (!pending) {
    9e62:	2b00      	cmp	r3, #0
    9e64:	f000 81d7 	beq.w	a216 <ticker_job+0x48a>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0U;
    9e68:	2300      	movs	r3, #0
    9e6a:	77a3      	strb	r3, [r4, #30]

	/* update compare if head changed */
	if (flag_compare_update) {
    9e6c:	9b02      	ldr	r3, [sp, #8]
    9e6e:	b13b      	cbz	r3, 9e80 <ticker_job+0xf4>
	if (instance->ticker_id_head == TICKER_NULL) {
    9e70:	7f63      	ldrb	r3, [r4, #29]
    9e72:	2bff      	cmp	r3, #255	; 0xff
    9e74:	f040 823c 	bne.w	a2f0 <ticker_job+0x564>
		if (cntr_stop() == 0) {
    9e78:	f007 fdaa 	bl	119d0 <cntr_stop>
    9e7c:	b900      	cbnz	r0, 9e80 <ticker_job+0xf4>
			instance->ticks_slot_previous = 0U;
    9e7e:	61a0      	str	r0, [r4, #24]
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    9e80:	7fe3      	ldrb	r3, [r4, #31]
    9e82:	2b00      	cmp	r3, #0
    9e84:	f000 8296 	beq.w	a3b4 <ticker_job+0x628>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    9e88:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9e8a:	4623      	mov	r3, r4
    9e8c:	2201      	movs	r2, #1
    9e8e:	2103      	movs	r1, #3
    9e90:	2004      	movs	r0, #4
    9e92:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
    9e94:	b00f      	add	sp, #60	; 0x3c
    9e96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    9e9a:	4760      	bx	ip
		flag_elapsed = 0U;
    9e9c:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
    9e9e:	4692      	mov	sl, r2
    9ea0:	e794      	b.n	9dcc <ticker_job+0x40>
		user = &users[count_user];
    9ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ea4:	9a02      	ldr	r2, [sp, #8]
    9ea6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    9eaa:	687b      	ldr	r3, [r7, #4]
    9eac:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    9eae:	78f9      	ldrb	r1, [r7, #3]
    9eb0:	f897 8002 	ldrb.w	r8, [r7, #2]
    9eb4:	4588      	cmp	r8, r1
    9eb6:	d095      	beq.n	9de4 <ticker_job+0x58>
			user_op = &user_ops[user->middle];
    9eb8:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    9eba:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    9ebc:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    9ec0:	0112      	lsls	r2, r2, #4
    9ec2:	189e      	adds	r6, r3, r2
			middle = user->middle + 1;
    9ec4:	f108 0301 	add.w	r3, r8, #1
    9ec8:	b2db      	uxtb	r3, r3
				middle = 0U;
    9eca:	4298      	cmp	r0, r3
    9ecc:	bf08      	it	eq
    9ece:	2300      	moveq	r3, #0
			user->middle = middle;
    9ed0:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    9ed2:	9b06      	ldr	r3, [sp, #24]
    9ed4:	5c9a      	ldrb	r2, [r3, r2]
    9ed6:	2a04      	cmp	r2, #4
    9ed8:	d9ea      	bls.n	9eb0 <ticker_job+0x124>
			ticker = &node[user_op->id];
    9eda:	7873      	ldrb	r3, [r6, #1]
    9edc:	212c      	movs	r1, #44	; 0x2c
    9ede:	fb13 f101 	smulbb	r1, r3, r1
    9ee2:	910b      	str	r1, [sp, #44]	; 0x2c
    9ee4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9ee6:	9905      	ldr	r1, [sp, #20]
    9ee8:	180d      	adds	r5, r1, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    9eea:	2a06      	cmp	r2, #6
			state = (ticker->req - ticker->ack) & 0xff;
    9eec:	78a9      	ldrb	r1, [r5, #2]
    9eee:	f895 c001 	ldrb.w	ip, [r5, #1]
    9ef2:	9107      	str	r1, [sp, #28]
    9ef4:	ebac 0c01 	sub.w	ip, ip, r1
    9ef8:	fa5f f18c 	uxtb.w	r1, ip
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    9efc:	d80e      	bhi.n	9f1c <ticker_job+0x190>
    9efe:	b169      	cbz	r1, 9f1c <ticker_job+0x190>
			    (state == 0U) ||
    9f00:	2a05      	cmp	r2, #5
    9f02:	d110      	bne.n	9f26 <ticker_job+0x19a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    9f04:	6870      	ldr	r0, [r6, #4]
    9f06:	b970      	cbnz	r0, 9f26 <ticker_job+0x19a>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    9f08:	68b0      	ldr	r0, [r6, #8]
    9f0a:	b960      	cbnz	r0, 9f26 <ticker_job+0x19a>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    9f0c:	68f0      	ldr	r0, [r6, #12]
    9f0e:	b950      	cbnz	r0, 9f26 <ticker_job+0x19a>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    9f10:	6930      	ldr	r0, [r6, #16]
    9f12:	b940      	cbnz	r0, 9f26 <ticker_job+0x19a>
			     (user_op->params.update.lazy == 0U) &&
    9f14:	6970      	ldr	r0, [r6, #20]
    9f16:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    9f1a:	d104      	bne.n	9f26 <ticker_job+0x19a>
				ticker_job_op_cb(user_op,
    9f1c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    9f1e:	4630      	mov	r0, r6
    9f20:	f010 fb47 	bl	1a5b2 <ticker_job_op_cb>
    9f24:	e7c3      	b.n	9eae <ticker_job+0x122>
			if (state == 1U) {
    9f26:	2901      	cmp	r1, #1
    9f28:	d174      	bne.n	a014 <ticker_job+0x288>
	previous = instance->ticker_id_head;
    9f2a:	f894 c01d 	ldrb.w	ip, [r4, #29]
	node = &instance->nodes[0];
    9f2e:	6821      	ldr	r1, [r4, #0]
	previous = instance->ticker_id_head;
    9f30:	46e6      	mov	lr, ip
	total = 0U;
    9f32:	f04f 0800 	mov.w	r8, #0
	while (current != TICKER_NULL) {
    9f36:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    9f3a:	d146      	bne.n	9fca <ticker_job+0x23e>
		return 0;
    9f3c:	f04f 0800 	mov.w	r8, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    9f40:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    9f42:	f8c5 8008 	str.w	r8, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    9f46:	d151      	bne.n	9fec <ticker_job+0x260>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    9f48:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
    9f4c:	f007 fd66 	bl	11a1c <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9f50:	eba0 0109 	sub.w	r1, r0, r9
    9f54:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    9f58:	4451      	add	r1, sl
	if (ticks_to_expire > ticks_elapsed) {
    9f5a:	4588      	cmp	r8, r1
		ticker->ticks_to_expire_minus += ticks_elapsed -
    9f5c:	bf98      	it	ls
    9f5e:	696b      	ldrls	r3, [r5, #20]
	ticks_now = cntr_cnt_get();
    9f60:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    9f62:	bf98      	it	ls
    9f64:	eba3 0808 	subls.w	r8, r3, r8
	if ((ticker->ticks_periodic != 0U) &&
    9f68:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    9f6a:	bf97      	itett	ls
    9f6c:	4441      	addls	r1, r8
		ticks_to_expire -= ticks_elapsed;
    9f6e:	eba8 0801 	subhi.w	r8, r8, r1
		ticker->ticks_to_expire_minus += ticks_elapsed -
    9f72:	6169      	strls	r1, [r5, #20]
		ticks_to_expire = 0U;
    9f74:	f04f 0800 	movls.w	r8, #0
	if ((ticker->ticks_periodic != 0U) &&
    9f78:	b128      	cbz	r0, 9f86 <ticker_job+0x1fa>
	    (user_op->params.update.lazy != 0U)) {
    9f7a:	8ab3      	ldrh	r3, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
    9f7c:	b11b      	cbz	r3, 9f86 <ticker_job+0x1fa>
		user_op->params.update.lazy--;
    9f7e:	3b01      	subs	r3, #1
    9f80:	b29b      	uxth	r3, r3
    9f82:	82b3      	strh	r3, [r6, #20]
		ticker->lazy_periodic = user_op->params.update.lazy;
    9f84:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    9f86:	6871      	ldr	r1, [r6, #4]
	ticker->ticks_to_expire_minus +=
    9f88:	696b      	ldr	r3, [r5, #20]
	ticker->ticks_to_expire = ticks_to_expire +
    9f8a:	4441      	add	r1, r8
    9f8c:	60a9      	str	r1, [r5, #8]
	ticker->ticks_to_expire_minus +=
    9f8e:	68b1      	ldr	r1, [r6, #8]
    9f90:	440b      	add	r3, r1
    9f92:	616b      	str	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    9f94:	4649      	mov	r1, r9
    9f96:	4628      	mov	r0, r5
    9f98:	f010 faed 	bl	1a576 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    9f9c:	68f2      	ldr	r2, [r6, #12]
    9f9e:	69ab      	ldr	r3, [r5, #24]
    9fa0:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    9fa2:	6932      	ldr	r2, [r6, #16]
    9fa4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    9fa6:	bf8c      	ite	hi
    9fa8:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    9faa:	2300      	movls	r3, #0
    9fac:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    9fae:	7db3      	ldrb	r3, [r6, #22]
    9fb0:	b103      	cbz	r3, 9fb4 <ticker_job+0x228>
		ticker->force = user_op->params.update.force;
    9fb2:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
    9fb4:	9b05      	ldr	r3, [sp, #20]
    9fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9fb8:	f803 b002 	strb.w	fp, [r3, r2]
		ticker->req++;
    9fbc:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    9fbe:	f896 b001 	ldrb.w	fp, [r6, #1]
		ticker->req++;
    9fc2:	3301      	adds	r3, #1
    9fc4:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    9fc6:	2100      	movs	r1, #0
    9fc8:	e7a9      	b.n	9f1e <ticker_job+0x192>
		ticker_current = &node[current];
    9fca:	202c      	movs	r0, #44	; 0x2c
    9fcc:	fb1c f900 	smulbb	r9, ip, r0
    9fd0:	eb01 0009 	add.w	r0, r1, r9
    9fd4:	9009      	str	r0, [sp, #36]	; 0x24
		if (current == id) {
    9fd6:	6880      	ldr	r0, [r0, #8]
    9fd8:	900a      	str	r0, [sp, #40]	; 0x28
    9fda:	4563      	cmp	r3, ip
    9fdc:	4480      	add	r8, r0
    9fde:	f811 9009 	ldrb.w	r9, [r1, r9]
    9fe2:	f000 81cd 	beq.w	a380 <ticker_job+0x5f4>
    9fe6:	46e6      	mov	lr, ip
    9fe8:	46cc      	mov	ip, r9
    9fea:	e7a4      	b.n	9f36 <ticker_job+0x1aa>
		ticker->req = ticker->ack;
    9fec:	9a07      	ldr	r2, [sp, #28]
    9fee:	706a      	strb	r2, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    9ff0:	7f22      	ldrb	r2, [r4, #28]
    9ff2:	429a      	cmp	r2, r3
    9ff4:	d1e7      	bne.n	9fc6 <ticker_job+0x23a>
			u32_t ticks_now = cntr_cnt_get();
    9ff6:	f007 fd11 	bl	11a1c <cntr_cnt_get>
			instance->ticker_id_slot_previous = TICKER_NULL;
    9ffa:	23ff      	movs	r3, #255	; 0xff
    9ffc:	7723      	strb	r3, [r4, #28]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9ffe:	6963      	ldr	r3, [r4, #20]
    a000:	1ac0      	subs	r0, r0, r3
    a002:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_used = ticks_elapsed +
    a006:	4450      	add	r0, sl
			instance->ticks_slot_previous =	MIN(ticker->ticks_slot,
    a008:	69ab      	ldr	r3, [r5, #24]
    a00a:	4298      	cmp	r0, r3
    a00c:	bf94      	ite	ls
    a00e:	61a0      	strls	r0, [r4, #24]
    a010:	61a3      	strhi	r3, [r4, #24]
    a012:	e7d8      	b.n	9fc6 <ticker_job+0x23a>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    a014:	2104      	movs	r1, #4
    a016:	4623      	mov	r3, r4
    a018:	6a65      	ldr	r5, [r4, #36]	; 0x24
    a01a:	2201      	movs	r2, #1
    a01c:	4608      	mov	r0, r1
    a01e:	47a8      	blx	r5
				pending = 1U;
    a020:	2301      	movs	r3, #1
				user->middle = prev;
    a022:	f887 8002 	strb.w	r8, [r7, #2]
				pending = 1U;
    a026:	9308      	str	r3, [sp, #32]
    a028:	e6dc      	b.n	9de4 <ticker_job+0x58>
		if (ticker->lazy_current != 0U) {
    a02a:	8be8      	ldrh	r0, [r5, #30]
		ticks_elapsed -= ticks_to_expire;
    a02c:	ebaa 0a02 	sub.w	sl, sl, r2
		ticks_expired += ticks_to_expire;
    a030:	4490      	add	r8, r2
		if (ticker->lazy_current != 0U) {
    a032:	2800      	cmp	r0, #0
    a034:	d032      	beq.n	a09c <ticker_job+0x310>
			instance->ticker_id_slot_previous = TICKER_NULL;
    a036:	22ff      	movs	r2, #255	; 0xff
    a038:	7722      	strb	r2, [r4, #28]
			instance->ticks_slot_previous = 0U;
    a03a:	2200      	movs	r2, #0
				instance->ticks_slot_previous =
    a03c:	61a2      	str	r2, [r4, #24]
		ticker->ticks_to_expire = 0U;
    a03e:	f04f 0c00 	mov.w	ip, #0
    a042:	f8c5 c008 	str.w	ip, [r5, #8]
		instance->ticker_id_head = ticker->next;
    a046:	f819 1007 	ldrb.w	r1, [r9, r7]
    a04a:	7761      	strb	r1, [r4, #29]
		if (ticker->ticks_periodic != 0U) {
    a04c:	686b      	ldr	r3, [r5, #4]
    a04e:	2b00      	cmp	r3, #0
    a050:	d032      	beq.n	a0b8 <ticker_job+0x32c>
	ticker->remainder_current += ticker->remainder_periodic;
    a052:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
    a056:	4401      	add	r1, r0
	if ((ticker->remainder_current < BIT(31)) &&
    a058:	48a3      	ldr	r0, [pc, #652]	; (a2e8 <ticker_job+0x55c>)
    a05a:	4aa4      	ldr	r2, [pc, #656]	; (a2ec <ticker_job+0x560>)
			ticker->ticks_to_expire  = ticker->ticks_periodic;
    a05c:	60ab      	str	r3, [r5, #8]
	if ((ticker->remainder_current < BIT(31)) &&
    a05e:	1808      	adds	r0, r1, r0
    a060:	4290      	cmp	r0, r2
		return 1;
    a062:	bf95      	itete	ls
    a064:	9a01      	ldrls	r2, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    a066:	6269      	strhi	r1, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    a068:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
	return 0;
    a06c:	4662      	movhi	r2, ip
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    a06e:	bf98      	it	ls
    a070:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker_remainder_inc(ticker);
    a074:	441a      	add	r2, r3
			ticks_to_expire_prep(ticker, instance->ticks_current,
    a076:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire += ticker_remainder_inc(ticker);
    a078:	60aa      	str	r2, [r5, #8]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    a07a:	bf9c      	itt	ls
    a07c:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
    a080:	6269      	strls	r1, [r5, #36]	; 0x24
			ticks_to_expire_prep(ticker, instance->ticks_current,
    a082:	eb03 0208 	add.w	r2, r3, r8
    a086:	6961      	ldr	r1, [r4, #20]
    a088:	4628      	mov	r0, r5
    a08a:	f010 fa74 	bl	1a576 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    a08e:	f809 b007 	strb.w	fp, [r9, r7]
			ticker->req++;
    a092:	786a      	ldrb	r2, [r5, #1]
    a094:	3201      	adds	r2, #1
    a096:	706a      	strb	r2, [r5, #1]
			ticker->req = ticker->ack;
    a098:	46b3      	mov	fp, r6
    a09a:	e6b5      	b.n	9e08 <ticker_job+0x7c>
			if (instance->ticks_slot_previous > ticks_to_expire) {
    a09c:	69a1      	ldr	r1, [r4, #24]
    a09e:	428a      	cmp	r2, r1
				instance->ticker_id_slot_previous = TICKER_NULL;
    a0a0:	bf2b      	itete	cs
    a0a2:	22ff      	movcs	r2, #255	; 0xff
				instance->ticks_slot_previous -=
    a0a4:	1a8a      	subcc	r2, r1, r2
				instance->ticker_id_slot_previous = TICKER_NULL;
    a0a6:	7722      	strbcs	r2, [r4, #28]
				instance->ticks_slot_previous -=
    a0a8:	61a2      	strcc	r2, [r4, #24]
			if (ticker->ticks_slot != 0U) {
    a0aa:	69aa      	ldr	r2, [r5, #24]
				instance->ticks_slot_previous = 0U;
    a0ac:	bf28      	it	cs
    a0ae:	61a0      	strcs	r0, [r4, #24]
			if (ticker->ticks_slot != 0U) {
    a0b0:	2a00      	cmp	r2, #0
    a0b2:	d0c4      	beq.n	a03e <ticker_job+0x2b2>
				instance->ticker_id_slot_previous = id_expired;
    a0b4:	7726      	strb	r6, [r4, #28]
    a0b6:	e7c1      	b.n	a03c <ticker_job+0x2b0>
			ticker->req = ticker->ack;
    a0b8:	78aa      	ldrb	r2, [r5, #2]
    a0ba:	706a      	strb	r2, [r5, #1]
    a0bc:	465e      	mov	r6, fp
    a0be:	e7eb      	b.n	a098 <ticker_job+0x30c>
		user = &users[count_user];
    a0c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0c2:	9a01      	ldr	r2, [sp, #4]
    a0c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a0c8:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    a0ca:	685b      	ldr	r3, [r3, #4]
    a0cc:	9307      	str	r3, [sp, #28]
		user_ops_first = user->first;
    a0ce:	9b04      	ldr	r3, [sp, #16]
    a0d0:	785f      	ldrb	r7, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    a0d2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    a0d6:	d05e      	beq.n	a196 <ticker_job+0x40a>
				ticker = &node[id_insert];
    a0d8:	fb1b f309 	smulbb	r3, fp, r9
    a0dc:	9a05      	ldr	r2, [sp, #20]
				insert_head = ticker->next;
    a0de:	46da      	mov	sl, fp
    a0e0:	f812 b003 	ldrb.w	fp, [r2, r3]
				ticker = &node[id_insert];
    a0e4:	18d5      	adds	r5, r2, r3
				user_op = NULL;
    a0e6:	2600      	movs	r6, #0
	ticker->next = TICKER_NULL;
    a0e8:	22ff      	movs	r2, #255	; 0xff
    a0ea:	702a      	strb	r2, [r5, #0]
	node = &instance->nodes[0];
    a0ec:	6820      	ldr	r0, [r4, #0]
	previous = TICKER_NULL;
    a0ee:	9206      	str	r2, [sp, #24]
	ticker_new = &node[id];
    a0f0:	fb1a f309 	smulbb	r3, sl, r9
    a0f4:	eb00 0e03 	add.w	lr, r0, r3
    a0f8:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_to_expire = ticker_new->ticks_to_expire;
    a0fa:	f8de 1008 	ldr.w	r1, [lr, #8]
	current = instance->ticker_id_head;
    a0fe:	7f63      	ldrb	r3, [r4, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a100:	2bff      	cmp	r3, #255	; 0xff
    a102:	d008      	beq.n	a116 <ticker_job+0x38a>
		(ticker_current = &node[current])->ticks_to_expire))) {
    a104:	fb13 f209 	smulbb	r2, r3, r9
    a108:	920a      	str	r2, [sp, #40]	; 0x28
    a10a:	1882      	adds	r2, r0, r2
    a10c:	4690      	mov	r8, r2
		(ticks_to_expire_current =
    a10e:	f8d2 c008 	ldr.w	ip, [r2, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a112:	4561      	cmp	r1, ip
    a114:	d26b      	bcs.n	a1ee <ticker_job+0x462>
	ticker_new->next = current;
    a116:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ticker_new->ticks_to_expire = ticks_to_expire;
    a118:	f8ce 1008 	str.w	r1, [lr, #8]
	ticker_new->next = current;
    a11c:	5483      	strb	r3, [r0, r2]
	if (previous == TICKER_NULL) {
    a11e:	9a06      	ldr	r2, [sp, #24]
    a120:	2aff      	cmp	r2, #255	; 0xff
		node[previous].next = id;
    a122:	bf17      	itett	ne
    a124:	9a06      	ldrne	r2, [sp, #24]
		instance->ticker_id_head = id;
    a126:	f884 a01d 	strbeq.w	sl, [r4, #29]
		node[previous].next = id;
    a12a:	fb12 f209 	smulbbne	r2, r2, r9
    a12e:	f800 a002 	strbne.w	sl, [r0, r2]
	if (current != TICKER_NULL) {
    a132:	2bff      	cmp	r3, #255	; 0xff
		node[current].ticks_to_expire -= ticks_to_expire;
    a134:	bf1f      	itttt	ne
    a136:	fb03 0309 	mlane	r3, r3, r9, r0
    a13a:	689a      	ldrne	r2, [r3, #8]
    a13c:	1a51      	subne	r1, r2, r1
    a13e:	6099      	strne	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    a140:	78ab      	ldrb	r3, [r5, #2]
    a142:	3301      	adds	r3, #1
    a144:	706b      	strb	r3, [r5, #1]
			if (user_op) {
    a146:	2e00      	cmp	r6, #0
    a148:	d0c3      	beq.n	a0d2 <ticker_job+0x346>
				ticker_job_op_cb(user_op, status);
    a14a:	2100      	movs	r1, #0
    a14c:	4630      	mov	r0, r6
    a14e:	f010 fa30 	bl	1a5b2 <ticker_job_op_cb>
    a152:	e7be      	b.n	a0d2 <ticker_job+0x346>
				user_op = &user_ops[user_ops_first];
    a154:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    a158:	9a07      	ldr	r2, [sp, #28]
    a15a:	011b      	lsls	r3, r3, #4
    a15c:	18d6      	adds	r6, r2, r3
				if (first == user->count_user_op) {
    a15e:	9a04      	ldr	r2, [sp, #16]
				first = user_ops_first + 1;
    a160:	3701      	adds	r7, #1
				if (first == user->count_user_op) {
    a162:	7812      	ldrb	r2, [r2, #0]
				first = user_ops_first + 1;
    a164:	b2ff      	uxtb	r7, r7
					first = 0U;
    a166:	42ba      	cmp	r2, r7
    a168:	bf08      	it	eq
    a16a:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    a16c:	9a07      	ldr	r2, [sp, #28]
    a16e:	5cd3      	ldrb	r3, [r2, r3]
    a170:	2b04      	cmp	r3, #4
    a172:	d110      	bne.n	a196 <ticker_job+0x40a>
				ticker = &node[id_insert];
    a174:	9b05      	ldr	r3, [sp, #20]
				id_insert = user_op->id;
    a176:	f896 a001 	ldrb.w	sl, [r6, #1]
				ticker = &node[id_insert];
    a17a:	fb0a 3509 	mla	r5, sl, r9, r3
				if (((ticker->req -
    a17e:	f895 8001 	ldrb.w	r8, [r5, #1]
				      ticker->ack) & 0xff) != 0U) {
    a182:	78ab      	ldrb	r3, [r5, #2]
				if (((ticker->req -
    a184:	eba8 0803 	sub.w	r8, r8, r3
    a188:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    a18c:	d008      	beq.n	a1a0 <ticker_job+0x414>
					ticker_job_op_cb(user_op,
    a18e:	2101      	movs	r1, #1
    a190:	4630      	mov	r0, r6
    a192:	f010 fa0e 	bl	1a5b2 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    a196:	9b04      	ldr	r3, [sp, #16]
    a198:	789b      	ldrb	r3, [r3, #2]
    a19a:	42bb      	cmp	r3, r7
    a19c:	d1da      	bne.n	a154 <ticker_job+0x3c8>
    a19e:	e651      	b.n	9e44 <ticker_job+0xb8>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    a1a0:	8ab3      	ldrh	r3, [r6, #20]
				ticker_job_op_start(ticker, user_op,
    a1a2:	6961      	ldr	r1, [r4, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    a1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a1a8:	4293      	cmp	r3, r2
    a1aa:	bf0c      	ite	eq
    a1ac:	2201      	moveq	r2, #1
    a1ae:	2200      	movne	r2, #0
    a1b0:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    a1b4:	68f2      	ldr	r2, [r6, #12]
    a1b6:	606a      	str	r2, [r5, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    a1b8:	bf08      	it	eq
    a1ba:	2300      	moveq	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
    a1bc:	6932      	ldr	r2, [r6, #16]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    a1be:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_slot = start->ticks_slot;
    a1c0:	69b3      	ldr	r3, [r6, #24]
    a1c2:	61ab      	str	r3, [r5, #24]
	ticker->timeout_func = start->fp_timeout_func;
    a1c4:	69f3      	ldr	r3, [r6, #28]
    a1c6:	60eb      	str	r3, [r5, #12]
	ticker->context = start->context;
    a1c8:	6a33      	ldr	r3, [r6, #32]
    a1ca:	612b      	str	r3, [r5, #16]
	ticker->ticks_to_expire = start->ticks_first;
    a1cc:	68b3      	ldr	r3, [r6, #8]
	ticker->remainder_periodic = start->remainder_periodic;
    a1ce:	622a      	str	r2, [r5, #32]
	ticker->ticks_to_expire = start->ticks_first;
    a1d0:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0U;
    a1d2:	f8c5 8014 	str.w	r8, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    a1d6:	6872      	ldr	r2, [r6, #4]
    a1d8:	4628      	mov	r0, r5
    a1da:	f010 f9cc 	bl	1a576 <ticks_to_expire_prep>
	ticker->force = 1U;
    a1de:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    a1e2:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
	ticker->lazy_current = 0U;
    a1e6:	f8a5 801e 	strh.w	r8, [r5, #30]
	ticker->force = 1U;
    a1ea:	70eb      	strb	r3, [r5, #3]
    a1ec:	e77c      	b.n	a0e8 <ticker_job+0x35c>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    a1ee:	ebb1 010c 	subs.w	r1, r1, ip
    a1f2:	d10a      	bne.n	a20a <ticker_job+0x47e>
    a1f4:	f8be 201e 	ldrh.w	r2, [lr, #30]
    a1f8:	920c      	str	r2, [sp, #48]	; 0x30
    a1fa:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    a1fe:	920d      	str	r2, [sp, #52]	; 0x34
    a200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a202:	4690      	mov	r8, r2
    a204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a206:	4590      	cmp	r8, r2
    a208:	d803      	bhi.n	a212 <ticker_job+0x486>
		current = ticker_current->next;
    a20a:	9306      	str	r3, [sp, #24]
    a20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a20e:	5cc3      	ldrb	r3, [r0, r3]
    a210:	e776      	b.n	a100 <ticker_job+0x374>
		(ticks_to_expire_current =
    a212:	4661      	mov	r1, ip
    a214:	e77f      	b.n	a116 <ticker_job+0x38a>
	users = &instance->users[0];
    a216:	6863      	ldr	r3, [r4, #4]
	count_user = instance->count_user;
    a218:	7a65      	ldrb	r5, [r4, #9]
	users = &instance->users[0];
    a21a:	9301      	str	r3, [sp, #4]
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    a21c:	272c      	movs	r7, #44	; 0x2c
	while (count_user--) {
    a21e:	3d01      	subs	r5, #1
    a220:	b2ed      	uxtb	r5, r5
    a222:	2dff      	cmp	r5, #255	; 0xff
    a224:	f43f ae20 	beq.w	9e68 <ticker_job+0xdc>
		user = &users[count_user];
    a228:	9b01      	ldr	r3, [sp, #4]
    a22a:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
    a22e:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
    a232:	7873      	ldrb	r3, [r6, #1]
    a234:	78f2      	ldrb	r2, [r6, #3]
    a236:	429a      	cmp	r2, r3
    a238:	d0f1      	beq.n	a21e <ticker_job+0x492>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    a23a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a23e:	011a      	lsls	r2, r3, #4
    a240:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
    a244:	f818 2002 	ldrb.w	r2, [r8, r2]
    a248:	2a02      	cmp	r2, #2
    a24a:	d013      	beq.n	a274 <ticker_job+0x4e8>
    a24c:	2a03      	cmp	r2, #3
    a24e:	d03e      	beq.n	a2ce <ticker_job+0x542>
    a250:	2a01      	cmp	r2, #1
    a252:	d106      	bne.n	a262 <ticker_job+0x4d6>
			uop->status = TICKER_STATUS_SUCCESS;
    a254:	2200      	movs	r2, #0
			uop->status = TICKER_STATUS_FAILURE;
    a256:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
    a258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
    a25a:	b112      	cbz	r2, a262 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
    a25c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    a25e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a260:	4790      	blx	r2
			first = user->first + 1;
    a262:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
    a264:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
    a266:	3301      	adds	r3, #1
    a268:	b2db      	uxtb	r3, r3
				first = 0U;
    a26a:	429a      	cmp	r2, r3
    a26c:	bf08      	it	eq
    a26e:	2300      	moveq	r3, #0
			user->first = first;
    a270:	7073      	strb	r3, [r6, #1]
    a272:	e7de      	b.n	a232 <ticker_job+0x4a6>
		ticker_by_next_slot_get(instance,
    a274:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    a278:	f899 a000 	ldrb.w	sl, [r9]
		ticker_by_next_slot_get(instance,
    a27c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
    a280:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
    a284:	6961      	ldr	r1, [r4, #20]
    a286:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    a28a:	d002      	beq.n	a292 <ticker_job+0x506>
    a28c:	6802      	ldr	r2, [r0, #0]
    a28e:	428a      	cmp	r2, r1
    a290:	d013      	beq.n	a2ba <ticker_job+0x52e>
		_ticker_id_head = instance->ticker_id_head;
    a292:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
    a294:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
    a296:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    a298:	2aff      	cmp	r2, #255	; 0xff
    a29a:	d009      	beq.n	a2b0 <ticker_job+0x524>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    a29c:	fb12 fb07 	smulbb	fp, r2, r7
    a2a0:	eb0c 0a0b 	add.w	sl, ip, fp
    a2a4:	f8da 0008 	ldr.w	r0, [sl, #8]
    a2a8:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
    a2aa:	f8da 0018 	ldr.w	r0, [sl, #24]
    a2ae:	b158      	cbz	r0, a2c8 <ticker_job+0x53c>
	*ticker_id_head = _ticker_id_head;
    a2b0:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    a2b4:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
    a2b8:	e7cc      	b.n	a254 <ticker_job+0x4c8>
		ticker = &node[_ticker_id_head];
    a2ba:	fb1a f207 	smulbb	r2, sl, r7
	_ticks_to_expire = *ticks_to_expire;
    a2be:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    a2c2:	f81c 2002 	ldrb.w	r2, [ip, r2]
    a2c6:	e7e7      	b.n	a298 <ticker_job+0x50c>
		_ticker_id_head = ticker->next;
    a2c8:	f81c 200b 	ldrb.w	r2, [ip, fp]
    a2cc:	e7e4      	b.n	a298 <ticker_job+0x50c>
		if (uop->id < instance->count_node) {
    a2ce:	7859      	ldrb	r1, [r3, #1]
    a2d0:	7a22      	ldrb	r2, [r4, #8]
    a2d2:	428a      	cmp	r2, r1
    a2d4:	d906      	bls.n	a2e4 <ticker_job+0x558>
			node[uop->id].priority =
    a2d6:	6822      	ldr	r2, [r4, #0]
    a2d8:	fb01 2207 	mla	r2, r1, r7, r2
    a2dc:	7919      	ldrb	r1, [r3, #4]
    a2de:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    a2e2:	e7b7      	b.n	a254 <ticker_job+0x4c8>
			uop->status = TICKER_STATUS_FAILURE;
    a2e4:	2201      	movs	r2, #1
    a2e6:	e7b6      	b.n	a256 <ticker_job+0x4ca>
    a2e8:	ff172b5a 	.word	0xff172b5a
    a2ec:	7f172b59 	.word	0x7f172b59
	if (ticker_id_old_head == TICKER_NULL) {
    a2f0:	9b03      	ldr	r3, [sp, #12]
    a2f2:	2bff      	cmp	r3, #255	; 0xff
    a2f4:	d106      	bne.n	a304 <ticker_job+0x578>
		ticks_current = cntr_cnt_get();
    a2f6:	f007 fb91 	bl	11a1c <cntr_cnt_get>
    a2fa:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
    a2fc:	f007 fb5a 	bl	119b4 <cntr_start>
    a300:	b900      	cbnz	r0, a304 <ticker_job+0x578>
			instance->ticks_current = ticks_current;
    a302:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
    a304:	7f61      	ldrb	r1, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    a306:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
    a308:	f8df 80b0 	ldr.w	r8, [pc, #176]	; a3bc <ticker_job+0x630>
    a30c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; a3c0 <ticker_job+0x634>
    a310:	f8df a0b0 	ldr.w	sl, [pc, #176]	; a3c4 <ticker_job+0x638>
	ticks_to_expire = ticker->ticks_to_expire;
    a314:	232c      	movs	r3, #44	; 0x2c
    a316:	fb01 2303 	mla	r3, r1, r3, r2
	i = 10U;
    a31a:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
    a31c:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    a31e:	f007 fb7d 	bl	11a1c <cntr_cnt_get>
		cc = instance->ticks_current;
    a322:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a324:	1b43      	subs	r3, r0, r5
    a326:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    a32a:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    a32c:	42bb      	cmp	r3, r7
    a32e:	bf2c      	ite	cs
    a330:	18ed      	addcs	r5, r5, r3
    a332:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
    a334:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    a338:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    a33a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a33c:	4628      	mov	r0, r5
    a33e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    a340:	f007 fb6c 	bl	11a1c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a344:	eba0 000b 	sub.w	r0, r0, fp
    a348:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a34c:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    a350:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a352:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    a356:	42a8      	cmp	r0, r5
		i--;
    a358:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    a35c:	f67f ad90 	bls.w	9e80 <ticker_job+0xf4>
		LL_ASSERT(i);
    a360:	2e00      	cmp	r6, #0
    a362:	d1dc      	bne.n	a31e <ticker_job+0x592>
    a364:	f240 63f4 	movw	r3, #1780	; 0x6f4
    a368:	4642      	mov	r2, r8
    a36a:	4649      	mov	r1, r9
    a36c:	4650      	mov	r0, sl
    a36e:	f00d fee1 	bl	18134 <printk>
    a372:	4040      	eors	r0, r0
    a374:	f380 8811 	msr	BASEPRI, r0
    a378:	f04f 0003 	mov.w	r0, #3
    a37c:	df02      	svc	2
    a37e:	e7ce      	b.n	a31e <ticker_job+0x592>
	if (previous == current) {
    a380:	4573      	cmp	r3, lr
    a382:	d101      	bne.n	a388 <ticker_job+0x5fc>
		instance->ticker_id_head = ticker_current->next;
    a384:	f884 901d 	strb.w	r9, [r4, #29]
	node[previous].next = ticker_current->next;
    a388:	202c      	movs	r0, #44	; 0x2c
    a38a:	fb1e fe00 	smulbb	lr, lr, r0
	if (ticker_current->next != TICKER_NULL) {
    a38e:	9809      	ldr	r0, [sp, #36]	; 0x24
	node[previous].next = ticker_current->next;
    a390:	f801 900e 	strb.w	r9, [r1, lr]
	if (ticker_current->next != TICKER_NULL) {
    a394:	f890 c000 	ldrb.w	ip, [r0]
    a398:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    a39c:	f43f add0 	beq.w	9f40 <ticker_job+0x1b4>
		node[ticker_current->next].ticks_to_expire += timeout;
    a3a0:	202c      	movs	r0, #44	; 0x2c
    a3a2:	fb0c 1c00 	mla	ip, ip, r0, r1
    a3a6:	980a      	ldr	r0, [sp, #40]	; 0x28
    a3a8:	f8dc 1008 	ldr.w	r1, [ip, #8]
    a3ac:	4401      	add	r1, r0
    a3ae:	f8cc 1008 	str.w	r1, [ip, #8]
	return (total + timeout);
    a3b2:	e5c5      	b.n	9f40 <ticker_job+0x1b4>
}
    a3b4:	b00f      	add	sp, #60	; 0x3c
    a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3ba:	bf00      	nop
    a3bc:	000206b8 	.word	0x000206b8
    a3c0:	000208aa 	.word	0x000208aa
    a3c4:	0001ff46 	.word	0x0001ff46

0000a3c8 <ticker_init>:
{
    a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3ca:	9e05      	ldr	r6, [sp, #20]
    a3cc:	f89d 5018 	ldrb.w	r5, [sp, #24]
    a3d0:	9f07      	ldr	r7, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    a3d2:	b108      	cbz	r0, a3d8 <ticker_init+0x10>
		return TICKER_STATUS_FAILURE;
    a3d4:	2001      	movs	r0, #1
}
    a3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
    a3d8:	4c18      	ldr	r4, [pc, #96]	; (a43c <ticker_init+0x74>)
		instance->nodes[count_node].priority = 0;
    a3da:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
	instance->count_node = count_node;
    a3de:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
    a3e0:	6022      	str	r2, [r4, #0]
	while (count_node--) {
    a3e2:	3901      	subs	r1, #1
    a3e4:	b2c9      	uxtb	r1, r1
    a3e6:	29ff      	cmp	r1, #255	; 0xff
    a3e8:	d115      	bne.n	a416 <ticker_init+0x4e>
	instance->count_user = count_user;
    a3ea:	7263      	strb	r3, [r4, #9]
	instance->users = user;
    a3ec:	6066      	str	r6, [r4, #4]
	while (count_user--) {
    a3ee:	3b01      	subs	r3, #1
    a3f0:	b2db      	uxtb	r3, r3
    a3f2:	2bff      	cmp	r3, #255	; 0xff
    a3f4:	d114      	bne.n	a420 <ticker_init+0x58>
	if (count_op) {
    a3f6:	2d00      	cmp	r5, #0
    a3f8:	d1ec      	bne.n	a3d4 <ticker_init+0xc>
	instance->caller_id_get_cb = caller_id_get_cb;
    a3fa:	9b08      	ldr	r3, [sp, #32]
    a3fc:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
    a3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a400:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    a402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a404:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    a406:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
    a40a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    a40e:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
    a410:	8165      	strh	r5, [r4, #10]
	return TICKER_STATUS_SUCCESS;
    a412:	4628      	mov	r0, r5
    a414:	e7df      	b.n	a3d6 <ticker_init+0xe>
		instance->nodes[count_node].priority = 0;
    a416:	fb01 2e0c 	mla	lr, r1, ip, r2
    a41a:	f88e 0029 	strb.w	r0, [lr, #41]	; 0x29
    a41e:	e7e0      	b.n	a3e2 <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
    a420:	b21a      	sxth	r2, r3
    a422:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    a426:	604f      	str	r7, [r1, #4]
		user_op_ += users[count_user].count_user_op;
    a428:	f816 0032 	ldrb.w	r0, [r6, r2, lsl #3]
    a42c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
    a430:	1a28      	subs	r0, r5, r0
		user_op_ += users[count_user].count_user_op;
    a432:	eb07 1702 	add.w	r7, r7, r2, lsl #4
		count_op -= users[count_user].count_user_op;
    a436:	b2c5      	uxtb	r5, r0
    a438:	e7d9      	b.n	a3ee <ticker_init+0x26>
    a43a:	bf00      	nop
    a43c:	200005d0 	.word	0x200005d0

0000a440 <ticker_trigger>:
	if (instance->sched_cb) {
    a440:	4a07      	ldr	r2, [pc, #28]	; (a460 <ticker_trigger+0x20>)
    a442:	232c      	movs	r3, #44	; 0x2c
    a444:	fb03 2100 	mla	r1, r3, r0, r2
{
    a448:	b410      	push	{r4}
	if (instance->sched_cb) {
    a44a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    a44c:	b134      	cbz	r4, a45c <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    a44e:	460b      	mov	r3, r1
    a450:	46a4      	mov	ip, r4
    a452:	2201      	movs	r2, #1
    a454:	2103      	movs	r1, #3
    a456:	2002      	movs	r0, #2
}
    a458:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    a45a:	4760      	bx	ip
}
    a45c:	bc10      	pop	{r4}
    a45e:	4770      	bx	lr
    a460:	200005d0 	.word	0x200005d0

0000a464 <ticker_start>:
{
    a464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a468:	4c22      	ldr	r4, [pc, #136]	; (a4f4 <ticker_start+0x90>)
    a46a:	272c      	movs	r7, #44	; 0x2c
    a46c:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->users[user_id];
    a470:	b20d      	sxth	r5, r1
    a472:	f8d9 0004 	ldr.w	r0, [r9, #4]
    a476:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    a47a:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    a47e:	f89c 4003 	ldrb.w	r4, [ip, #3]
    a482:	1c66      	adds	r6, r4, #1
    a484:	b2f6      	uxtb	r6, r6
		last = 0U;
    a486:	42b0      	cmp	r0, r6
    a488:	bf98      	it	ls
    a48a:	2600      	movls	r6, #0
	if (last == user->first) {
    a48c:	f89c 0001 	ldrb.w	r0, [ip, #1]
    a490:	42b0      	cmp	r0, r6
    a492:	d02d      	beq.n	a4f0 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
    a494:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a498:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a49c:	0125      	lsls	r5, r4, #4
    a49e:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
    a4a0:	f04f 0804 	mov.w	r8, #4
    a4a4:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
    a4a8:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    a4aa:	9b08      	ldr	r3, [sp, #32]
    a4ac:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4b0:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    a4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a4b4:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    a4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a4b8:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    a4ba:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    a4be:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    a4c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4c2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    a4c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a4c6:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    a4c8:	2302      	movs	r3, #2
    a4ca:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    a4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a4ce:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    a4d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    a4d2:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    a4d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    a4d6:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a4da:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    a4de:	4608      	mov	r0, r1
    a4e0:	4798      	blx	r3
    a4e2:	464b      	mov	r3, r9
    a4e4:	2200      	movs	r2, #0
    a4e6:	4641      	mov	r1, r8
    a4e8:	47a8      	blx	r5
	return user_op->status;
    a4ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    a4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    a4f0:	2001      	movs	r0, #1
    a4f2:	e7fb      	b.n	a4ec <ticker_start+0x88>
    a4f4:	200005d0 	.word	0x200005d0

0000a4f8 <ticker_update>:
{
    a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a4fc:	4c21      	ldr	r4, [pc, #132]	; (a584 <ticker_update+0x8c>)
    a4fe:	272c      	movs	r7, #44	; 0x2c
    a500:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->users[user_id];
    a504:	b20d      	sxth	r5, r1
    a506:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a50a:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    a50e:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    a512:	f89c 4003 	ldrb.w	r4, [ip, #3]
    a516:	1c66      	adds	r6, r4, #1
    a518:	b2f6      	uxtb	r6, r6
		last = 0U;
    a51a:	42b0      	cmp	r0, r6
    a51c:	bf98      	it	ls
    a51e:	2600      	movls	r6, #0
	if (last == user->first) {
    a520:	f89c 0001 	ldrb.w	r0, [ip, #1]
    a524:	42b0      	cmp	r0, r6
    a526:	d02a      	beq.n	a57e <ticker_update+0x86>
	user_op = &user->user_op[user->last];
    a528:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a52c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a530:	0125      	lsls	r5, r4, #4
    a532:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    a534:	f04f 0e05 	mov.w	lr, #5
    a538:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    a53c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    a53e:	9b06      	ldr	r3, [sp, #24]
    a540:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    a542:	9b07      	ldr	r3, [sp, #28]
    a544:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    a546:	9b08      	ldr	r3, [sp, #32]
    a548:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    a54a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    a54e:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    a550:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a554:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
    a556:	2302      	movs	r3, #2
    a558:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    a55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a55c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    a55e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
    a560:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    a562:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    a564:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a568:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    a56c:	4608      	mov	r0, r1
    a56e:	4798      	blx	r3
    a570:	4643      	mov	r3, r8
    a572:	2200      	movs	r2, #0
    a574:	2104      	movs	r1, #4
    a576:	47a8      	blx	r5
	return user_op->status;
    a578:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    a57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    a57e:	2001      	movs	r0, #1
    a580:	e7fb      	b.n	a57a <ticker_update+0x82>
    a582:	bf00      	nop
    a584:	200005d0 	.word	0x200005d0

0000a588 <ticker_stop>:
{
    a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a58c:	4c1a      	ldr	r4, [pc, #104]	; (a5f8 <ticker_stop+0x70>)
    a58e:	262c      	movs	r6, #44	; 0x2c
    a590:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
    a594:	b20f      	sxth	r7, r1
    a596:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a59a:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    a59e:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    a5a2:	f89c 4003 	ldrb.w	r4, [ip, #3]
    a5a6:	1c65      	adds	r5, r4, #1
    a5a8:	b2ed      	uxtb	r5, r5
		last = 0U;
    a5aa:	42a8      	cmp	r0, r5
    a5ac:	bf98      	it	ls
    a5ae:	2500      	movls	r5, #0
	if (last == user->first) {
    a5b0:	f89c 0001 	ldrb.w	r0, [ip, #1]
    a5b4:	42a8      	cmp	r0, r5
    a5b6:	d01c      	beq.n	a5f2 <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
    a5b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a5bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a5c0:	0124      	lsls	r4, r4, #4
    a5c2:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    a5c4:	f04f 0e06 	mov.w	lr, #6
    a5c8:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
    a5cc:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    a5ce:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    a5d0:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    a5d4:	9b06      	ldr	r3, [sp, #24]
    a5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    a5d8:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a5dc:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    a5e0:	4608      	mov	r0, r1
    a5e2:	4798      	blx	r3
    a5e4:	4643      	mov	r3, r8
    a5e6:	2200      	movs	r2, #0
    a5e8:	2104      	movs	r1, #4
    a5ea:	47a0      	blx	r4
	return user_op->status;
    a5ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    a5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    a5f2:	2001      	movs	r0, #1
    a5f4:	e7fb      	b.n	a5ee <ticker_stop+0x66>
    a5f6:	bf00      	nop
    a5f8:	200005d0 	.word	0x200005d0

0000a5fc <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    a5fc:	b508      	push	{r3, lr}
    a5fe:	4603      	mov	r3, r0
	if (addr_type > 1) {
    a600:	2b01      	cmp	r3, #1
{
    a602:	4608      	mov	r0, r1
	if (addr_type > 1) {
    a604:	d80e      	bhi.n	a624 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    a606:	b133      	cbz	r3, a616 <ll_addr_get+0x1a>
		if (bdaddr) {
    a608:	b119      	cbz	r1, a612 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    a60a:	2206      	movs	r2, #6
    a60c:	4906      	ldr	r1, [pc, #24]	; (a628 <ll_addr_get+0x2c>)
    a60e:	f00e fb14 	bl	18c3a <memcpy>
		}

		return rnd_addr;
    a612:	4805      	ldr	r0, [pc, #20]	; (a628 <ll_addr_get+0x2c>)
    a614:	e007      	b.n	a626 <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    a616:	b119      	cbz	r1, a620 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    a618:	2206      	movs	r2, #6
    a61a:	4904      	ldr	r1, [pc, #16]	; (a62c <ll_addr_get+0x30>)
    a61c:	f00e fb0d 	bl	18c3a <memcpy>
	}

	return pub_addr;
    a620:	4802      	ldr	r0, [pc, #8]	; (a62c <ll_addr_get+0x30>)
    a622:	e000      	b.n	a626 <ll_addr_get+0x2a>
		return NULL;
    a624:	2000      	movs	r0, #0
}
    a626:	bd08      	pop	{r3, pc}
    a628:	2000a141 	.word	0x2000a141
    a62c:	2000a13b 	.word	0x2000a13b

0000a630 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    a630:	b570      	push	{r4, r5, r6, lr}
    a632:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
    a634:	2000      	movs	r0, #0
{
    a636:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
    a638:	f010 f9da 	bl	1a9f0 <ull_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    a63c:	4604      	mov	r4, r0
    a63e:	b948      	cbnz	r0, a654 <ll_addr_set+0x24>
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    a640:	2206      	movs	r2, #6
    a642:	4629      	mov	r1, r5
	if (addr_type) {
    a644:	b126      	cbz	r6, a650 <ll_addr_set+0x20>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    a646:	4804      	ldr	r0, [pc, #16]	; (a658 <ll_addr_set+0x28>)
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    a648:	f00e faf7 	bl	18c3a <memcpy>
	}

	return 0;
}
    a64c:	4620      	mov	r0, r4
    a64e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    a650:	4802      	ldr	r0, [pc, #8]	; (a65c <ll_addr_set+0x2c>)
    a652:	e7f9      	b.n	a648 <ll_addr_set+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a654:	240c      	movs	r4, #12
    a656:	e7f9      	b.n	a64c <ll_addr_set+0x1c>
    a658:	2000a141 	.word	0x2000a141
    a65c:	2000a13b 	.word	0x2000a13b

0000a660 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
    a660:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    a662:	4802      	ldr	r0, [pc, #8]	; (a66c <hci_driver_init+0xc>)
    a664:	f7fb f89c 	bl	57a0 <bt_hci_driver_register>

	return 0;
}
    a668:	2000      	movs	r0, #0
    a66a:	bd08      	pop	{r3, pc}
    a66c:	0001ea84 	.word	0x0001ea84

0000a670 <hci_driver_send>:
	if (!buf->len) {
    a670:	8983      	ldrh	r3, [r0, #12]
{
    a672:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a674:	4605      	mov	r5, r0
	if (!buf->len) {
    a676:	b993      	cbnz	r3, a69e <hci_driver_send+0x2e>
		BT_ERR("Empty HCI packet");
    a678:	2301      	movs	r3, #1
    a67a:	f04f 0100 	mov.w	r1, #0
    a67e:	f363 0107 	bfi	r1, r3, #0, #8
    a682:	4a22      	ldr	r2, [pc, #136]	; (a70c <hci_driver_send+0x9c>)
    a684:	4b22      	ldr	r3, [pc, #136]	; (a710 <hci_driver_send+0xa0>)
    a686:	4823      	ldr	r0, [pc, #140]	; (a714 <hci_driver_send+0xa4>)
    a688:	1a9b      	subs	r3, r3, r2
    a68a:	08db      	lsrs	r3, r3, #3
    a68c:	f363 118f 	bfi	r1, r3, #6, #10
    a690:	f00d ff9e 	bl	185d0 <log_0>
		return -EINVAL;
    a694:	f06f 0415 	mvn.w	r4, #21
}
    a698:	4620      	mov	r0, r4
    a69a:	b003      	add	sp, #12
    a69c:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    a69e:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
    a6a0:	b181      	cbz	r1, a6c4 <hci_driver_send+0x54>
    a6a2:	2902      	cmp	r1, #2
    a6a4:	d122      	bne.n	a6ec <hci_driver_send+0x7c>
	err = hci_acl_handle(buf, &evt);
    a6a6:	a901      	add	r1, sp, #4
    a6a8:	f000 fec4 	bl	b434 <hci_acl_handle>
    a6ac:	4604      	mov	r4, r0
	if (evt) {
    a6ae:	9801      	ldr	r0, [sp, #4]
    a6b0:	b108      	cbz	r0, a6b6 <hci_driver_send+0x46>
		bt_recv_prio(evt);
    a6b2:	f7fb f81f 	bl	56f4 <bt_recv_prio>
	if (!err) {
    a6b6:	2c00      	cmp	r4, #0
    a6b8:	d1ee      	bne.n	a698 <hci_driver_send+0x28>
		net_buf_unref(buf);
    a6ba:	4628      	mov	r0, r5
    a6bc:	f007 ff58 	bl	12570 <net_buf_unref>
    a6c0:	2400      	movs	r4, #0
    a6c2:	e7e9      	b.n	a698 <hci_driver_send+0x28>
	struct node_rx_pdu *node_rx = NULL;
    a6c4:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a6c6:	a901      	add	r1, sp, #4
    a6c8:	f000 fab0 	bl	ac2c <hci_cmd_handle>
	if (evt) {
    a6cc:	2800      	cmp	r0, #0
    a6ce:	d0f4      	beq.n	a6ba <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    a6d0:	f7fb f810 	bl	56f4 <bt_recv_prio>
		if (node_rx) {
    a6d4:	9c01      	ldr	r4, [sp, #4]
    a6d6:	2c00      	cmp	r4, #0
    a6d8:	d0ef      	beq.n	a6ba <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a6da:	4620      	mov	r0, r4
    a6dc:	f010 f8be 	bl	1a85c <hci_get_class>
    a6e0:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
    a6e2:	9901      	ldr	r1, [sp, #4]
    a6e4:	480c      	ldr	r0, [pc, #48]	; (a718 <hci_driver_send+0xa8>)
    a6e6:	f013 f9fa 	bl	1dade <k_queue_append>
	if (!err) {
    a6ea:	e7e6      	b.n	a6ba <hci_driver_send+0x4a>
		BT_ERR("Unknown HCI type %u", type);
    a6ec:	2301      	movs	r3, #1
    a6ee:	f04f 0200 	mov.w	r2, #0
    a6f2:	f363 0207 	bfi	r2, r3, #0, #8
    a6f6:	4805      	ldr	r0, [pc, #20]	; (a70c <hci_driver_send+0x9c>)
    a6f8:	4b05      	ldr	r3, [pc, #20]	; (a710 <hci_driver_send+0xa0>)
    a6fa:	1a1b      	subs	r3, r3, r0
    a6fc:	08db      	lsrs	r3, r3, #3
    a6fe:	f363 128f 	bfi	r2, r3, #6, #10
    a702:	4806      	ldr	r0, [pc, #24]	; (a71c <hci_driver_send+0xac>)
    a704:	f00d ff71 	bl	185ea <log_1>
    a708:	e7c4      	b.n	a694 <hci_driver_send+0x24>
    a70a:	bf00      	nop
    a70c:	0001e448 	.word	0x0001e448
    a710:	0001e490 	.word	0x0001e490
    a714:	0002071d 	.word	0x0002071d
    a718:	2000d268 	.word	0x2000d268
    a71c:	0002072e 	.word	0x0002072e

0000a720 <recv_thread>:
{
    a720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    a722:	4d27      	ldr	r5, [pc, #156]	; (a7c0 <recv_thread+0xa0>)
		LL_ASSERT(0);
    a724:	4e27      	ldr	r6, [pc, #156]	; (a7c4 <recv_thread+0xa4>)
    a726:	4f28      	ldr	r7, [pc, #160]	; (a7c8 <recv_thread+0xa8>)
    a728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a72c:	4628      	mov	r0, r5
    a72e:	f013 f9ff 	bl	1db30 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    a732:	b368      	cbz	r0, a790 <recv_thread+0x70>
	u8_t class = node_rx->hdr.user_meta;
    a734:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    a736:	9001      	str	r0, [sp, #4]
	switch (class) {
    a738:	b11b      	cbz	r3, a742 <recv_thread+0x22>
    a73a:	2b04      	cmp	r3, #4
    a73c:	d90f      	bls.n	a75e <recv_thread+0x3e>
    a73e:	2b05      	cmp	r3, #5
    a740:	d02f      	beq.n	a7a2 <recv_thread+0x82>
		LL_ASSERT(0);
    a742:	23c4      	movs	r3, #196	; 0xc4
    a744:	4632      	mov	r2, r6
    a746:	4639      	mov	r1, r7
    a748:	4820      	ldr	r0, [pc, #128]	; (a7cc <recv_thread+0xac>)
    a74a:	f00d fcf3 	bl	18134 <printk>
    a74e:	4040      	eors	r0, r0
    a750:	f380 8811 	msr	BASEPRI, r0
    a754:	f04f 0003 	mov.w	r0, #3
    a758:	df02      	svc	2
	struct net_buf *buf = NULL;
    a75a:	2400      	movs	r4, #0
    a75c:	e00c      	b.n	a778 <recv_thread+0x58>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    a75e:	2b02      	cmp	r3, #2
    a760:	d119      	bne.n	a796 <recv_thread+0x76>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    a762:	2200      	movs	r2, #0
    a764:	2101      	movs	r1, #1
    a766:	4610      	mov	r0, r2
    a768:	f7fb ff2e 	bl	65c8 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a76c:	4604      	mov	r4, r0
		if (buf) {
    a76e:	b118      	cbz	r0, a778 <recv_thread+0x58>
			hci_evt_encode(node_rx, buf);
    a770:	4601      	mov	r1, r0
    a772:	9801      	ldr	r0, [sp, #4]
    a774:	f000 ff3a 	bl	b5ec <hci_evt_encode>
	node_rx->hdr.next = NULL;
    a778:	9b01      	ldr	r3, [sp, #4]
    a77a:	2200      	movs	r2, #0
    a77c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a77e:	a801      	add	r0, sp, #4
    a780:	f001 fd72 	bl	c268 <ll_rx_mem_release>
		if (buf) {
    a784:	b124      	cbz	r4, a790 <recv_thread+0x70>
			if (buf->len) {
    a786:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    a788:	4620      	mov	r0, r4
			if (buf->len) {
    a78a:	b1ab      	cbz	r3, a7b8 <recv_thread+0x98>
				bt_recv(buf);
    a78c:	f7fa fefc 	bl	5588 <bt_recv>
	z_impl_k_yield();
    a790:	f00c fd5c 	bl	1724c <z_impl_k_yield>
    a794:	e7c8      	b.n	a728 <recv_thread+0x8>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a79a:	2001      	movs	r0, #1
    a79c:	f7fb fede 	bl	655c <bt_buf_get_rx>
    a7a0:	e7e4      	b.n	a76c <recv_thread+0x4c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    a7a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7a6:	2003      	movs	r0, #3
    a7a8:	f7fb fed8 	bl	655c <bt_buf_get_rx>
    a7ac:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    a7ae:	4601      	mov	r1, r0
    a7b0:	9801      	ldr	r0, [sp, #4]
    a7b2:	f000 fedd 	bl	b570 <hci_acl_encode>
		break;
    a7b6:	e7df      	b.n	a778 <recv_thread+0x58>
				net_buf_unref(buf);
    a7b8:	f007 feda 	bl	12570 <net_buf_unref>
    a7bc:	e7e8      	b.n	a790 <recv_thread+0x70>
    a7be:	bf00      	nop
    a7c0:	2000d268 	.word	0x2000d268
    a7c4:	00020742 	.word	0x00020742
    a7c8:	0002195a 	.word	0x0002195a
    a7cc:	0001ff46 	.word	0x0001ff46

0000a7d0 <prio_recv_thread>:
{
    a7d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_sem_take(sem, timeout);
    a7d2:	4d17      	ldr	r5, [pc, #92]	; (a830 <prio_recv_thread+0x60>)
				k_fifo_put(&recv_fifo, node_rx);
    a7d4:	4e17      	ldr	r6, [pc, #92]	; (a834 <prio_recv_thread+0x64>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a7d6:	f10d 0102 	add.w	r1, sp, #2
    a7da:	a801      	add	r0, sp, #4
    a7dc:	f001 fc2e 	bl	c03c <ll_rx_get>
    a7e0:	4604      	mov	r4, r0
    a7e2:	b968      	cbnz	r0, a800 <prio_recv_thread+0x30>
		if (node_rx) {
    a7e4:	9b01      	ldr	r3, [sp, #4]
    a7e6:	b1eb      	cbz	r3, a824 <prio_recv_thread+0x54>
			ll_rx_dequeue();
    a7e8:	f001 fc80 	bl	c0ec <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a7ec:	9c01      	ldr	r4, [sp, #4]
    a7ee:	4620      	mov	r0, r4
    a7f0:	f010 f834 	bl	1a85c <hci_get_class>
				k_fifo_put(&recv_fifo, node_rx);
    a7f4:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a7f6:	7160      	strb	r0, [r4, #5]
				k_fifo_put(&recv_fifo, node_rx);
    a7f8:	4630      	mov	r0, r6
    a7fa:	f013 f970 	bl	1dade <k_queue_append>
			continue;
    a7fe:	e7ea      	b.n	a7d6 <prio_recv_thread+0x6>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a804:	2100      	movs	r1, #0
    a806:	2013      	movs	r0, #19
    a808:	f7fb fede 	bl	65c8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a80c:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a80e:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a810:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a814:	f010 f80e 	bl	1a834 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    a818:	4638      	mov	r0, r7
    a81a:	f7fa ff6b 	bl	56f4 <bt_recv_prio>
	z_impl_k_yield();
    a81e:	f00c fd15 	bl	1724c <z_impl_k_yield>
    a822:	e7d8      	b.n	a7d6 <prio_recv_thread+0x6>
	return z_impl_k_sem_take(sem, timeout);
    a824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a828:	4628      	mov	r0, r5
    a82a:	f00c fdb5 	bl	17398 <z_impl_k_sem_take>
		BT_DBG("sem taken");
    a82e:	e7d2      	b.n	a7d6 <prio_recv_thread+0x6>
    a830:	2000d22c 	.word	0x2000d22c
    a834:	2000d268 	.word	0x2000d268

0000a838 <hci_driver_open>:
{
    a838:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    a83a:	4820      	ldr	r0, [pc, #128]	; (a8bc <hci_driver_open+0x84>)
{
    a83c:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    a83e:	f001 fb1f 	bl	be80 <ll_init>
	if (err) {
    a842:	4604      	mov	r4, r0
    a844:	b188      	cbz	r0, a86a <hci_driver_open+0x32>
		BT_ERR("LL initialization failed: %u", err);
    a846:	2301      	movs	r3, #1
    a848:	f04f 0200 	mov.w	r2, #0
    a84c:	f363 0207 	bfi	r2, r3, #0, #8
    a850:	491b      	ldr	r1, [pc, #108]	; (a8c0 <hci_driver_open+0x88>)
    a852:	4b1c      	ldr	r3, [pc, #112]	; (a8c4 <hci_driver_open+0x8c>)
    a854:	1a5b      	subs	r3, r3, r1
    a856:	08db      	lsrs	r3, r3, #3
    a858:	4601      	mov	r1, r0
    a85a:	f363 128f 	bfi	r2, r3, #6, #10
    a85e:	481a      	ldr	r0, [pc, #104]	; (a8c8 <hci_driver_open+0x90>)
    a860:	f00d fec3 	bl	185ea <log_1>
}
    a864:	4620      	mov	r0, r4
    a866:	b006      	add	sp, #24
    a868:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    a86a:	f001 f927 	bl	babc <hci_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a86e:	f06f 0309 	mvn.w	r3, #9
    a872:	e9cd 4302 	strd	r4, r3, [sp, #8]
    a876:	e9cd 4404 	strd	r4, r4, [sp, #16]
    a87a:	e9cd 4400 	strd	r4, r4, [sp]
    a87e:	4b13      	ldr	r3, [pc, #76]	; (a8cc <hci_driver_open+0x94>)
    a880:	4913      	ldr	r1, [pc, #76]	; (a8d0 <hci_driver_open+0x98>)
    a882:	4814      	ldr	r0, [pc, #80]	; (a8d4 <hci_driver_open+0x9c>)
    a884:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    a888:	f00c fdfe 	bl	17488 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a88c:	4912      	ldr	r1, [pc, #72]	; (a8d8 <hci_driver_open+0xa0>)
    a88e:	4811      	ldr	r0, [pc, #68]	; (a8d4 <hci_driver_open+0x9c>)
    a890:	f013 fab2 	bl	1ddf8 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a894:	f06f 0307 	mvn.w	r3, #7
    a898:	e9cd 4302 	strd	r4, r3, [sp, #8]
    a89c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    a8a0:	e9cd 4400 	strd	r4, r4, [sp]
    a8a4:	4b0d      	ldr	r3, [pc, #52]	; (a8dc <hci_driver_open+0xa4>)
    a8a6:	490e      	ldr	r1, [pc, #56]	; (a8e0 <hci_driver_open+0xa8>)
    a8a8:	480e      	ldr	r0, [pc, #56]	; (a8e4 <hci_driver_open+0xac>)
    a8aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a8ae:	f00c fdeb 	bl	17488 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a8b2:	490d      	ldr	r1, [pc, #52]	; (a8e8 <hci_driver_open+0xb0>)
    a8b4:	480b      	ldr	r0, [pc, #44]	; (a8e4 <hci_driver_open+0xac>)
    a8b6:	f013 fa9f 	bl	1ddf8 <z_impl_k_thread_name_set>
	return 0;
    a8ba:	e7d3      	b.n	a864 <hci_driver_open+0x2c>
    a8bc:	2000d22c 	.word	0x2000d22c
    a8c0:	0001e448 	.word	0x0001e448
    a8c4:	0001e490 	.word	0x0001e490
    a8c8:	000206f0 	.word	0x000206f0
    a8cc:	0000a7d1 	.word	0x0000a7d1
    a8d0:	2000a988 	.word	0x2000a988
    a8d4:	200005fc 	.word	0x200005fc
    a8d8:	0002070d 	.word	0x0002070d
    a8dc:	0000a721 	.word	0x0000a721
    a8e0:	2000ab48 	.word	0x2000ab48
    a8e4:	20000668 	.word	0x20000668
    a8e8:	00020717 	.word	0x00020717

0000a8ec <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    a8ec:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    a8ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    a8f2:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    a8f4:	2100      	movs	r1, #0
    a8f6:	200f      	movs	r0, #15
    a8f8:	f7fb fe66 	bl	65c8 <bt_buf_get_evt>
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    a8fc:	2204      	movs	r2, #4
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    a8fe:	4604      	mov	r4, r0
	hci_evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    a900:	210f      	movs	r1, #15
    a902:	f00f ff78 	bl	1a7f6 <hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    a906:	2104      	movs	r1, #4
    a908:	f104 0008 	add.w	r0, r4, #8
    a90c:	f010 fc8f 	bl	1b22e <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
    a910:	2301      	movs	r3, #1
    a912:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    a914:	4b02      	ldr	r3, [pc, #8]	; (a920 <cmd_status+0x34>)
	cs->status = status;
    a916:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    a918:	881b      	ldrh	r3, [r3, #0]
    a91a:	8043      	strh	r3, [r0, #2]

	return buf;
}
    a91c:	4620      	mov	r0, r4
    a91e:	bd38      	pop	{r3, r4, r5, pc}
    a920:	20005d18 	.word	0x20005d18

0000a924 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a926:	4605      	mov	r5, r0
    a928:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a92a:	4b13      	ldr	r3, [pc, #76]	; (a978 <le_remote_feat_complete+0x54>)
{
    a92c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a92e:	6859      	ldr	r1, [r3, #4]
    a930:	2400      	movs	r4, #0
{
    a932:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a934:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    a938:	4622      	mov	r2, r4
    a93a:	4313      	orrs	r3, r2
    a93c:	d01a      	beq.n	a974 <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    a93e:	4b0f      	ldr	r3, [pc, #60]	; (a97c <le_remote_feat_complete+0x58>)
    a940:	6819      	ldr	r1, [r3, #0]
    a942:	4623      	mov	r3, r4
    a944:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a948:	4313      	orrs	r3, r2
    a94a:	d013      	beq.n	a974 <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    a94c:	220b      	movs	r2, #11
    a94e:	2104      	movs	r1, #4
    a950:	f00f ff5b 	bl	1a80a <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    a954:	2208      	movs	r2, #8
	sep->status = status;
    a956:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a958:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
    a95c:	3003      	adds	r0, #3
    a95e:	b925      	cbnz	r5, a96a <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
    a960:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    a962:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    a966:	f00e b968 	b.w	18c3a <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    a96a:	4621      	mov	r1, r4
}
    a96c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    a970:	f00e b98d 	b.w	18c8e <memset>
}
    a974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a976:	bf00      	nop
    a978:	2000cb60 	.word	0x2000cb60
    a97c:	2000cb68 	.word	0x2000cb68

0000a980 <encrypt_change>:
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a980:	4b0e      	ldr	r3, [pc, #56]	; (a9bc <encrypt_change+0x3c>)
{
    a982:	b570      	push	{r4, r5, r6, lr}
    a984:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a986:	6819      	ldr	r1, [r3, #0]
{
    a988:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a98a:	2300      	movs	r3, #0
    a98c:	f001 0280 	and.w	r2, r1, #128	; 0x80
    a990:	4313      	orrs	r3, r2
{
    a992:	4604      	mov	r4, r0
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a994:	d010      	beq.n	a9b8 <encrypt_change+0x38>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    a996:	2204      	movs	r2, #4
    a998:	2108      	movs	r1, #8
    a99a:	4628      	mov	r0, r5
    a99c:	f00f ff2b 	bl	1a7f6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a9a0:	2104      	movs	r1, #4
    a9a2:	f105 0008 	add.w	r0, r5, #8
    a9a6:	f010 fc42 	bl	1b22e <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    a9aa:	fab4 f384 	clz	r3, r4
    a9ae:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    a9b0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a9b2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    a9b6:	70c3      	strb	r3, [r0, #3]
}
    a9b8:	bd70      	pop	{r4, r5, r6, pc}
    a9ba:	bf00      	nop
    a9bc:	2000cb60 	.word	0x2000cb60

0000a9c0 <hci_cmd_complete>:
{
    a9c0:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    a9c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    a9c6:	4604      	mov	r4, r0
    a9c8:	460d      	mov	r5, r1
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    a9ca:	200e      	movs	r0, #14
    a9cc:	2100      	movs	r1, #0
    a9ce:	f7fb fdfb 	bl	65c8 <bt_buf_get_evt>
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    a9d2:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
    a9d4:	6020      	str	r0, [r4, #0]
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    a9d6:	b2d2      	uxtb	r2, r2
    a9d8:	210e      	movs	r1, #14
    a9da:	f00f ff0c 	bl	1a7f6 <hci_evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    a9de:	6820      	ldr	r0, [r4, #0]
    a9e0:	2103      	movs	r1, #3
    a9e2:	3008      	adds	r0, #8
    a9e4:	f010 fc23 	bl	1b22e <net_buf_simple_add>
	cc->ncmd = 1U;
    a9e8:	2301      	movs	r3, #1
    a9ea:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    a9ec:	4b05      	ldr	r3, [pc, #20]	; (aa04 <hci_cmd_complete+0x44>)
    a9ee:	881b      	ldrh	r3, [r3, #0]
    a9f0:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    a9f4:	6820      	ldr	r0, [r4, #0]
    a9f6:	4629      	mov	r1, r5
    a9f8:	3008      	adds	r0, #8
}
    a9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    a9fe:	f010 bc16 	b.w	1b22e <net_buf_simple_add>
    aa02:	bf00      	nop
    aa04:	20005d18 	.word	0x20005d18

0000aa08 <hci_vendor_cmd_handle_common>:
{
    aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    aa0a:	3801      	subs	r0, #1
{
    aa0c:	b087      	sub	sp, #28
    aa0e:	4615      	mov	r5, r2
	switch (ocf) {
    aa10:	2809      	cmp	r0, #9
    aa12:	f200 8105 	bhi.w	ac20 <hci_vendor_cmd_handle_common+0x218>
    aa16:	e8df f010 	tbh	[pc, r0, lsl #1]
    aa1a:	000a      	.short	0x000a
    aa1c:	00380021 	.word	0x00380021
    aa20:	01030103 	.word	0x01030103
    aa24:	0103005f 	.word	0x0103005f
    aa28:	006a0044 	.word	0x006a0044
    aa2c:	00c5      	.short	0x00c5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa2e:	4610      	mov	r0, r2
    aa30:	210d      	movs	r1, #13
    aa32:	f7ff ffc5 	bl	a9c0 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    aa36:	2202      	movs	r2, #2
    aa38:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    aa3a:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    aa3c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    aa3e:	2201      	movs	r2, #1
	rp->status = 0x00;
    aa40:	2300      	movs	r3, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    aa42:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    aa44:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    aa46:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    aa48:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    aa4a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0U;
    aa4c:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    aa4e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    aa50:	7242      	strb	r2, [r0, #9]
    aa52:	7283      	strb	r3, [r0, #10]
    aa54:	72c3      	strb	r3, [r0, #11]
    aa56:	7303      	strb	r3, [r0, #12]
	return 0;
    aa58:	2400      	movs	r4, #0
    aa5a:	e013      	b.n	aa84 <hci_vendor_cmd_handle_common+0x7c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa5c:	2141      	movs	r1, #65	; 0x41
    aa5e:	4610      	mov	r0, r2
    aa60:	f7ff ffae 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    aa64:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa66:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    aa68:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    aa6a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    aa6e:	4621      	mov	r1, r4
    aa70:	f00e f90d 	bl	18c8e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    aa74:	786b      	ldrb	r3, [r5, #1]
    aa76:	f063 0358 	orn	r3, r3, #88	; 0x58
    aa7a:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    aa7c:	78ab      	ldrb	r3, [r5, #2]
    aa7e:	f043 0303 	orr.w	r3, r3, #3
    aa82:	70ab      	strb	r3, [r5, #2]
}
    aa84:	4620      	mov	r0, r4
    aa86:	b007      	add	sp, #28
    aa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa8a:	2109      	movs	r1, #9
    aa8c:	4610      	mov	r0, r2
    aa8e:	f7ff ff97 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    aa92:	2400      	movs	r4, #0
    aa94:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    aa98:	2208      	movs	r2, #8
    aa9a:	4621      	mov	r1, r4
    aa9c:	f00e f8f7 	bl	18c8e <memset>
    aaa0:	e7f0      	b.n	aa84 <hci_vendor_cmd_handle_common+0x7c>
	const char build_info[] = HCI_VS_BUILD_INFO;
    aaa2:	4b61      	ldr	r3, [pc, #388]	; (ac28 <hci_vendor_cmd_handle_common+0x220>)
    aaa4:	aa01      	add	r2, sp, #4
    aaa6:	f103 0710 	add.w	r7, r3, #16
    aaaa:	4616      	mov	r6, r2
    aaac:	6818      	ldr	r0, [r3, #0]
    aaae:	6859      	ldr	r1, [r3, #4]
    aab0:	4614      	mov	r4, r2
    aab2:	c403      	stmia	r4!, {r0, r1}
    aab4:	3308      	adds	r3, #8
    aab6:	42bb      	cmp	r3, r7
    aab8:	4622      	mov	r2, r4
    aaba:	d1f7      	bne.n	aaac <hci_vendor_cmd_handle_common+0xa4>
    aabc:	881b      	ldrh	r3, [r3, #0]
    aabe:	8023      	strh	r3, [r4, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    aac0:	2113      	movs	r1, #19
    aac2:	4628      	mov	r0, r5
    aac4:	f7ff ff7c 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    aac8:	2400      	movs	r4, #0
    aaca:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    aace:	2212      	movs	r2, #18
    aad0:	4631      	mov	r1, r6
    aad2:	f00e f8b2 	bl	18c3a <memcpy>
    aad6:	e7d5      	b.n	aa84 <hci_vendor_cmd_handle_common+0x7c>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    aad8:	6889      	ldr	r1, [r1, #8]
    aada:	2000      	movs	r0, #0
    aadc:	f7ff fda8 	bl	a630 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    aae0:	2101      	movs	r1, #1
    aae2:	4628      	mov	r0, r5
    aae4:	f7ff ff6c 	bl	a9c0 <hci_cmd_complete>
	ccst->status = 0x00;
    aae8:	2300      	movs	r3, #0
    aaea:	7003      	strb	r3, [r0, #0]
    aaec:	e7b4      	b.n	aa58 <hci_vendor_cmd_handle_common+0x50>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    aaee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aaf2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    aaf6:	3201      	adds	r2, #1
    aaf8:	d106      	bne.n	ab08 <hci_vendor_cmd_handle_common+0x100>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    aafa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    aafe:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    ab02:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    ab04:	4293      	cmp	r3, r2
    ab06:	d045      	beq.n	ab94 <hci_vendor_cmd_handle_common+0x18c>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    ab08:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    ab0c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    ab10:	07db      	lsls	r3, r3, #31
    ab12:	d53f      	bpl.n	ab94 <hci_vendor_cmd_handle_common+0x18c>
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    ab14:	2118      	movs	r1, #24
    ab16:	4628      	mov	r0, r5
    ab18:	f7ff ff52 	bl	a9c0 <hci_cmd_complete>
		rp->num_addrs = 1U;
    ab1c:	2301      	movs	r3, #1
		rp->status = 0x00;
    ab1e:	2200      	movs	r2, #0
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    ab20:	4605      	mov	r5, r0
		rp->num_addrs = 1U;
    ab22:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    ab24:	7002      	strb	r2, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    ab26:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    ab2a:	1ca9      	adds	r1, r5, #2
    ab2c:	f00f fe56 	bl	1a7dc <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    ab30:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
	dst[0] = val;
    ab34:	71ab      	strb	r3, [r5, #6]
	dst[1] = val >> 8;
    ab36:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    ab3a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    ab3e:	71eb      	strb	r3, [r5, #7]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    ab40:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    ab44:	3301      	adds	r3, #1
    ab46:	f105 0308 	add.w	r3, r5, #8
    ab4a:	d063      	beq.n	ac14 <hci_vendor_cmd_handle_common+0x20c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
    ab4c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    ab50:	3101      	adds	r1, #1
    ab52:	d05f      	beq.n	ac14 <hci_vendor_cmd_handle_common+0x20c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
    ab54:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
    ab58:	3101      	adds	r1, #1
    ab5a:	d05b      	beq.n	ac14 <hci_vendor_cmd_handle_common+0x20c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
    ab5c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
    ab60:	3101      	adds	r1, #1
    ab62:	d057      	beq.n	ac14 <hci_vendor_cmd_handle_common+0x20c>
			sys_put_le32(NRF_FICR->IR[0], &addr->ir[0]);
    ab64:	4619      	mov	r1, r3
    ab66:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    ab6a:	f00f fe37 	bl	1a7dc <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addr->ir[4]);
    ab6e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    ab72:	f105 010c 	add.w	r1, r5, #12
    ab76:	f00f fe31 	bl	1a7dc <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addr->ir[8]);
    ab7a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ab7e:	f105 0110 	add.w	r1, r5, #16
    ab82:	f00f fe2b 	bl	1a7dc <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addr->ir[12]);
    ab86:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    ab8a:	f105 0114 	add.w	r1, r5, #20
    ab8e:	f00f fe25 	bl	1a7dc <sys_put_le32>
    ab92:	e761      	b.n	aa58 <hci_vendor_cmd_handle_common+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab94:	2102      	movs	r1, #2
    ab96:	4628      	mov	r0, r5
    ab98:	f7ff ff12 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    ab9c:	2300      	movs	r3, #0
    ab9e:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0U;
    aba0:	7043      	strb	r3, [r0, #1]
    aba2:	e759      	b.n	aa58 <hci_vendor_cmd_handle_common+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aba4:	2121      	movs	r1, #33	; 0x21
    aba6:	4610      	mov	r0, r2
    aba8:	f7ff ff0a 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    abac:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    abae:	4605      	mov	r5, r0
	(void)memset(rp->ir, 0x00, sizeof(rp->ir));
    abb0:	2210      	movs	r2, #16
	rp->status = 0x00;
    abb2:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(rp->ir, 0x00, sizeof(rp->ir));
    abb6:	4621      	mov	r1, r4
    abb8:	f00e f869 	bl	18c8e <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    abbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    abc0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    abc4:	3301      	adds	r3, #1
    abc6:	f105 0311 	add.w	r3, r5, #17
    abca:	d023      	beq.n	ac14 <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    abcc:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    abd0:	3101      	adds	r1, #1
    abd2:	d01f      	beq.n	ac14 <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    abd4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    abd8:	3101      	adds	r1, #1
    abda:	d01b      	beq.n	ac14 <hci_vendor_cmd_handle_common+0x20c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    abdc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    abe0:	3101      	adds	r1, #1
    abe2:	d017      	beq.n	ac14 <hci_vendor_cmd_handle_common+0x20c>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    abe4:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    abe8:	4619      	mov	r1, r3
    abea:	f00f fdf7 	bl	1a7dc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    abee:	f105 0115 	add.w	r1, r5, #21
    abf2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    abf6:	f00f fdf1 	bl	1a7dc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    abfa:	f105 0119 	add.w	r1, r5, #25
    abfe:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    ac02:	f00f fdeb 	bl	1a7dc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    ac06:	f105 011d 	add.w	r1, r5, #29
    ac0a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    ac0e:	f00f fde5 	bl	1a7dc <sys_put_le32>
    ac12:	e737      	b.n	aa84 <hci_vendor_cmd_handle_common+0x7c>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
    ac14:	2210      	movs	r2, #16
    ac16:	2100      	movs	r1, #0
    ac18:	4618      	mov	r0, r3
    ac1a:	f00e f838 	bl	18c8e <memset>
    ac1e:	e71b      	b.n	aa58 <hci_vendor_cmd_handle_common+0x50>
		return -EINVAL;
    ac20:	f06f 0415 	mvn.w	r4, #21
    ac24:	e72e      	b.n	aa84 <hci_vendor_cmd_handle_common+0x7c>
    ac26:	bf00      	nop
    ac28:	0002088e 	.word	0x0002088e

0000ac2c <hci_cmd_handle>:
{
    ac2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    ac2e:	8983      	ldrh	r3, [r0, #12]
{
    ac30:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    ac32:	2600      	movs	r6, #0
	if (cmd->len < sizeof(*chdr)) {
    ac34:	2b02      	cmp	r3, #2
{
    ac36:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    ac38:	9607      	str	r6, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    ac3a:	d810      	bhi.n	ac5e <hci_cmd_handle+0x32>
		BT_ERR("No HCI Command header");
    ac3c:	2301      	movs	r3, #1
    ac3e:	f04f 0100 	mov.w	r1, #0
    ac42:	f363 0107 	bfi	r1, r3, #0, #8
    ac46:	4ab3      	ldr	r2, [pc, #716]	; (af14 <hci_cmd_handle+0x2e8>)
    ac48:	4bb3      	ldr	r3, [pc, #716]	; (af18 <hci_cmd_handle+0x2ec>)
    ac4a:	48b4      	ldr	r0, [pc, #720]	; (af1c <hci_cmd_handle+0x2f0>)
    ac4c:	1a9b      	subs	r3, r3, r2
    ac4e:	08db      	lsrs	r3, r3, #3
    ac50:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI CMD packet length");
    ac54:	f00d fcbc 	bl	185d0 <log_0>
		return NULL;
    ac58:	4630      	mov	r0, r6
}
    ac5a:	b00d      	add	sp, #52	; 0x34
    ac5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
    ac5e:	2103      	movs	r1, #3
    ac60:	3008      	adds	r0, #8
    ac62:	f010 fb15 	bl	1b290 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    ac66:	89a2      	ldrh	r2, [r4, #12]
    ac68:	7883      	ldrb	r3, [r0, #2]
    ac6a:	429a      	cmp	r2, r3
    ac6c:	d20c      	bcs.n	ac88 <hci_cmd_handle+0x5c>
		BT_ERR("Invalid HCI CMD packet length");
    ac6e:	2301      	movs	r3, #1
    ac70:	f04f 0100 	mov.w	r1, #0
    ac74:	f363 0107 	bfi	r1, r3, #0, #8
    ac78:	4aa6      	ldr	r2, [pc, #664]	; (af14 <hci_cmd_handle+0x2e8>)
    ac7a:	4ba7      	ldr	r3, [pc, #668]	; (af18 <hci_cmd_handle+0x2ec>)
    ac7c:	48a8      	ldr	r0, [pc, #672]	; (af20 <hci_cmd_handle+0x2f4>)
    ac7e:	1a9b      	subs	r3, r3, r2
    ac80:	08db      	lsrs	r3, r3, #3
    ac82:	f363 118f 	bfi	r1, r3, #6, #10
    ac86:	e7e5      	b.n	ac54 <hci_cmd_handle+0x28>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    ac88:	8802      	ldrh	r2, [r0, #0]
    ac8a:	49a6      	ldr	r1, [pc, #664]	; (af24 <hci_cmd_handle+0x2f8>)
    ac8c:	b293      	uxth	r3, r2
	ocf = BT_OCF(_opcode);
    ac8e:	f3c3 0509 	ubfx	r5, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    ac92:	0a9b      	lsrs	r3, r3, #10
    ac94:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
    ac96:	800a      	strh	r2, [r1, #0]
	switch (BT_OGF(_opcode)) {
    ac98:	f000 809a 	beq.w	add0 <hci_cmd_handle+0x1a4>
    ac9c:	d809      	bhi.n	acb2 <hci_cmd_handle+0x86>
    ac9e:	2b01      	cmp	r3, #1
    aca0:	d014      	beq.n	accc <hci_cmd_handle+0xa0>
    aca2:	2b03      	cmp	r3, #3
    aca4:	d024      	beq.n	acf0 <hci_cmd_handle+0xc4>
		ccst = hci_cmd_complete(&evt, sizeof(*ccst));
    aca6:	2101      	movs	r1, #1
    aca8:	a807      	add	r0, sp, #28
    acaa:	f7ff fe89 	bl	a9c0 <hci_cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    acae:	2301      	movs	r3, #1
    acb0:	e03d      	b.n	ad2e <hci_cmd_handle+0x102>
	switch (BT_OGF(_opcode)) {
    acb2:	2b08      	cmp	r3, #8
    acb4:	f000 813e 	beq.w	af34 <hci_cmd_handle+0x308>
    acb8:	2b3f      	cmp	r3, #63	; 0x3f
    acba:	d1f4      	bne.n	aca6 <hci_cmd_handle+0x7a>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    acbc:	aa07      	add	r2, sp, #28
    acbe:	4621      	mov	r1, r4
    acc0:	4628      	mov	r0, r5
    acc2:	f7ff fea1 	bl	aa08 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    acc6:	3016      	adds	r0, #22
    acc8:	d0ed      	beq.n	aca6 <hci_cmd_handle+0x7a>
    acca:	e04a      	b.n	ad62 <hci_cmd_handle+0x136>
	switch (ocf) {
    accc:	2d06      	cmp	r5, #6
    acce:	d006      	beq.n	acde <hci_cmd_handle+0xb2>
    acd0:	2d1d      	cmp	r5, #29
    acd2:	d1e8      	bne.n	aca6 <hci_cmd_handle+0x7a>
	handle = sys_le16_to_cpu(cmd->handle);
    acd4:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    acd6:	8818      	ldrh	r0, [r3, #0]
    acd8:	f010 f84d 	bl	1ad76 <ll_version_ind_send>
	*evt = cmd_status(status);
    acdc:	e004      	b.n	ace8 <hci_cmd_handle+0xbc>
		disconnect(cmd, evt);
    acde:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    ace0:	7899      	ldrb	r1, [r3, #2]
    ace2:	8818      	ldrh	r0, [r3, #0]
    ace4:	f010 f826 	bl	1ad34 <ll_terminate_ind_send>
	*evt = cmd_status(status);
    ace8:	f7ff fe00 	bl	a8ec <cmd_status>
    acec:	9007      	str	r0, [sp, #28]
	if (err == -EINVAL) {
    acee:	e038      	b.n	ad62 <hci_cmd_handle+0x136>
	switch (ocf) {
    acf0:	2d2d      	cmp	r5, #45	; 0x2d
    acf2:	d038      	beq.n	ad66 <hci_cmd_handle+0x13a>
    acf4:	d81d      	bhi.n	ad32 <hci_cmd_handle+0x106>
    acf6:	2d01      	cmp	r5, #1
    acf8:	d028      	beq.n	ad4c <hci_cmd_handle+0x120>
    acfa:	2d03      	cmp	r5, #3
    acfc:	d1d3      	bne.n	aca6 <hci_cmd_handle+0x7a>
	event_mask = DEFAULT_EVENT_MASK;
    acfe:	4b8a      	ldr	r3, [pc, #552]	; (af28 <hci_cmd_handle+0x2fc>)
    ad00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ad04:	f641 71ff 	movw	r1, #8191	; 0x1fff
    ad08:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ad0c:	4b87      	ldr	r3, [pc, #540]	; (af2c <hci_cmd_handle+0x300>)
    ad0e:	2000      	movs	r0, #0
    ad10:	2100      	movs	r1, #0
    ad12:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ad16:	4b86      	ldr	r3, [pc, #536]	; (af30 <hci_cmd_handle+0x304>)
    ad18:	201f      	movs	r0, #31
    ad1a:	2100      	movs	r1, #0
    ad1c:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    ad20:	f001 f916 	bl	bf50 <ll_reset>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    ad24:	2101      	movs	r1, #1
    ad26:	a807      	add	r0, sp, #28
    ad28:	f7ff fe4a 	bl	a9c0 <hci_cmd_complete>
	ccst->status = 0x00;
    ad2c:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    ad2e:	7003      	strb	r3, [r0, #0]
    ad30:	e017      	b.n	ad62 <hci_cmd_handle+0x136>
	switch (ocf) {
    ad32:	2d7b      	cmp	r5, #123	; 0x7b
    ad34:	d02a      	beq.n	ad8c <hci_cmd_handle+0x160>
    ad36:	2d7c      	cmp	r5, #124	; 0x7c
    ad38:	d03b      	beq.n	adb2 <hci_cmd_handle+0x186>
    ad3a:	2d63      	cmp	r5, #99	; 0x63
    ad3c:	d1b3      	bne.n	aca6 <hci_cmd_handle+0x7a>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    ad3e:	68a0      	ldr	r0, [r4, #8]
    ad40:	f00f fd55 	bl	1a7ee <sys_get_le64>
    ad44:	4b79      	ldr	r3, [pc, #484]	; (af2c <hci_cmd_handle+0x300>)
	le_event_mask = sys_get_le64(cmd->events);
    ad46:	e9c3 0100 	strd	r0, r1, [r3]
    ad4a:	e7eb      	b.n	ad24 <hci_cmd_handle+0xf8>
	event_mask = sys_get_le64(cmd->events);
    ad4c:	68a0      	ldr	r0, [r4, #8]
    ad4e:	f00f fd4e 	bl	1a7ee <sys_get_le64>
    ad52:	4b75      	ldr	r3, [pc, #468]	; (af28 <hci_cmd_handle+0x2fc>)
    ad54:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    ad58:	4629      	mov	r1, r5
    ad5a:	a807      	add	r0, sp, #28
    ad5c:	f7ff fe30 	bl	a9c0 <hci_cmd_complete>
	ccst->status = 0x00;
    ad60:	7006      	strb	r6, [r0, #0]
	return evt;
    ad62:	9807      	ldr	r0, [sp, #28]
    ad64:	e779      	b.n	ac5a <hci_cmd_handle+0x2e>
		read_tx_power_level(cmd, evt);
    ad66:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad68:	2104      	movs	r1, #4
    ad6a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    ad6c:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    ad6e:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad70:	f7ff fe26 	bl	a9c0 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    ad74:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad76:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    ad78:	1cc3      	adds	r3, r0, #3
    ad7a:	463a      	mov	r2, r7
    ad7c:	4631      	mov	r1, r6
    ad7e:	2002      	movs	r0, #2
    ad80:	f00f fd19 	bl	1a7b6 <ll_tx_pwr_lvl_get>
	rp->status = status;
    ad84:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    ad86:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    ad8a:	e7ea      	b.n	ad62 <hci_cmd_handle+0x136>
	handle = sys_le16_to_cpu(cmd->handle);
    ad8c:	68a3      	ldr	r3, [r4, #8]
    ad8e:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    ad90:	a908      	add	r1, sp, #32
    ad92:	4620      	mov	r0, r4
    ad94:	f010 f883 	bl	1ae9e <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad98:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    ad9a:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad9c:	a807      	add	r0, sp, #28
    ad9e:	f7ff fe0f 	bl	a9c0 <hci_cmd_complete>
	rp->status = status;
    ada2:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ada4:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    ada8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    adac:	f8a0 3003 	strh.w	r3, [r0, #3]
    adb0:	e7d7      	b.n	ad62 <hci_cmd_handle+0x136>
		write_auth_payload_timeout(cmd, evt);
    adb2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    adb4:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    adb6:	8859      	ldrh	r1, [r3, #2]
    adb8:	4620      	mov	r0, r4
    adba:	f010 f884 	bl	1aec6 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    adbe:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    adc0:	2103      	movs	r1, #3
    adc2:	a807      	add	r0, sp, #28
    adc4:	f7ff fdfc 	bl	a9c0 <hci_cmd_complete>
	rp->status = status;
    adc8:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    adca:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
    adce:	e7c8      	b.n	ad62 <hci_cmd_handle+0x136>
	switch (ocf) {
    add0:	3d01      	subs	r5, #1
    add2:	2d08      	cmp	r5, #8
    add4:	f63f af67 	bhi.w	aca6 <hci_cmd_handle+0x7a>
    add8:	a301      	add	r3, pc, #4	; (adr r3, ade0 <hci_cmd_handle+0x1b4>)
    adda:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    adde:	bf00      	nop
    ade0:	0000ae05 	.word	0x0000ae05
    ade4:	0000ae2f 	.word	0x0000ae2f
    ade8:	0000aedf 	.word	0x0000aedf
    adec:	0000aca7 	.word	0x0000aca7
    adf0:	0000aca7 	.word	0x0000aca7
    adf4:	0000aca7 	.word	0x0000aca7
    adf8:	0000aca7 	.word	0x0000aca7
    adfc:	0000aca7 	.word	0x0000aca7
    ae00:	0000aefb 	.word	0x0000aefb
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae04:	2109      	movs	r1, #9
    ae06:	a807      	add	r0, sp, #28
    ae08:	f7ff fdda 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    ae0c:	2300      	movs	r3, #0
    ae0e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    ae10:	7083      	strb	r3, [r0, #2]
    ae12:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    ae14:	f06f 030e 	mvn.w	r3, #14
    ae18:	7143      	strb	r3, [r0, #5]
    ae1a:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
    ae1c:	220a      	movs	r2, #10
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    ae1e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    ae20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = LL_VERSION_NUMBER;
    ae24:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    ae26:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    ae28:	71c3      	strb	r3, [r0, #7]
    ae2a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    ae2c:	e799      	b.n	ad62 <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae2e:	2141      	movs	r1, #65	; 0x41
    ae30:	a807      	add	r0, sp, #28
    ae32:	f7ff fdc5 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    ae36:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ae38:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    ae3a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    ae3c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    ae40:	f00d ff25 	bl	18c8e <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
    ae44:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[28] |= BIT(3);
    ae46:	7f62      	ldrb	r2, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
    ae48:	7ee1      	ldrb	r1, [r4, #27]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ae4a:	7ea0      	ldrb	r0, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    ae4c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    ae50:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    ae52:	7ae3      	ldrb	r3, [r4, #11]
    ae54:	f043 0304 	orr.w	r3, r3, #4
    ae58:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    ae5a:	7be3      	ldrb	r3, [r4, #15]
    ae5c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    ae60:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    ae62:	7c23      	ldrb	r3, [r4, #16]
    ae64:	f043 0302 	orr.w	r3, r3, #2
    ae68:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    ae6a:	7de3      	ldrb	r3, [r4, #23]
    ae6c:	f043 0304 	orr.w	r3, r3, #4
    ae70:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
    ae72:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    ae74:	f063 0308 	orn	r3, r3, #8
    ae78:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    ae7a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[28] |= BIT(1) | BIT(2);
    ae7e:	f042 020e 	orr.w	r2, r2, #14
	rp->commands[33] |= BIT(6) | BIT(7);
    ae82:	f063 030f 	orn	r3, r3, #15
	rp->commands[28] |= BIT(1) | BIT(2);
    ae86:	7762      	strb	r2, [r4, #29]
	rp->commands[33] |= BIT(6) | BIT(7);
    ae88:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    ae8c:	7862      	ldrb	r2, [r4, #1]
	rp->commands[35] |= BIT(3);
    ae8e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[0] |= BIT(5);
    ae92:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ae96:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[0] |= BIT(5);
    ae9a:	7062      	strb	r2, [r4, #1]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ae9c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    aea0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    aea4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    aea8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    aeac:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    aeb0:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    aeb4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    aeb8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    aebc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    aec0:	f060 0008 	orn	r0, r0, #8
	rp->commands[26] |= BIT(0) | BIT(1);
    aec4:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    aec8:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    aecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    aed0:	76a0      	strb	r0, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    aed2:	76e1      	strb	r1, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    aed4:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    aed8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
    aedc:	e741      	b.n	ad62 <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aede:	2109      	movs	r1, #9
    aee0:	a807      	add	r0, sp, #28
    aee2:	f7ff fd6d 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    aee6:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aee8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    aeea:	2208      	movs	r2, #8
	rp->status = 0x00;
    aeec:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    aef0:	f00d fecd 	bl	18c8e <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    aef4:	2360      	movs	r3, #96	; 0x60
    aef6:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    aef8:	e733      	b.n	ad62 <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aefa:	2107      	movs	r1, #7
    aefc:	a807      	add	r0, sp, #28
    aefe:	f7ff fd5f 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    af02:	4601      	mov	r1, r0
    af04:	2300      	movs	r3, #0
    af06:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    af0a:	4618      	mov	r0, r3
    af0c:	f7ff fb76 	bl	a5fc <ll_addr_get>
	if (err == -EINVAL) {
    af10:	e727      	b.n	ad62 <hci_cmd_handle+0x136>
    af12:	bf00      	nop
    af14:	0001e448 	.word	0x0001e448
    af18:	0001e488 	.word	0x0001e488
    af1c:	00020821 	.word	0x00020821
    af20:	00020837 	.word	0x00020837
    af24:	20005d18 	.word	0x20005d18
    af28:	2000cb60 	.word	0x2000cb60
    af2c:	20000000 	.word	0x20000000
    af30:	2000cb68 	.word	0x2000cb68
	switch (ocf) {
    af34:	3d01      	subs	r5, #1
    af36:	2d4d      	cmp	r5, #77	; 0x4d
    af38:	f63f aeb5 	bhi.w	aca6 <hci_cmd_handle+0x7a>
    af3c:	a301      	add	r3, pc, #4	; (adr r3, af44 <hci_cmd_handle+0x318>)
    af3e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    af42:	bf00      	nop
    af44:	0000b07d 	.word	0x0000b07d
    af48:	0000b087 	.word	0x0000b087
    af4c:	0000b09f 	.word	0x0000b09f
    af50:	0000aca7 	.word	0x0000aca7
    af54:	0000b0c3 	.word	0x0000b0c3
    af58:	0000b171 	.word	0x0000b171
    af5c:	0000b18d 	.word	0x0000b18d
    af60:	0000b19d 	.word	0x0000b19d
    af64:	0000b1a9 	.word	0x0000b1a9
    af68:	0000b1b5 	.word	0x0000b1b5
    af6c:	0000aca7 	.word	0x0000aca7
    af70:	0000aca7 	.word	0x0000aca7
    af74:	0000aca7 	.word	0x0000aca7
    af78:	0000aca7 	.word	0x0000aca7
    af7c:	0000b0d9 	.word	0x0000b0d9
    af80:	0000b0ef 	.word	0x0000b0ef
    af84:	0000b101 	.word	0x0000b101
    af88:	0000b109 	.word	0x0000b109
    af8c:	0000b1fd 	.word	0x0000b1fd
    af90:	0000aca7 	.word	0x0000aca7
    af94:	0000b1d9 	.word	0x0000b1d9
    af98:	0000b1f3 	.word	0x0000b1f3
    af9c:	0000b111 	.word	0x0000b111
    afa0:	0000b137 	.word	0x0000b137
    afa4:	0000aca7 	.word	0x0000aca7
    afa8:	0000b1bf 	.word	0x0000b1bf
    afac:	0000b1cf 	.word	0x0000b1cf
    afb0:	0000b14d 	.word	0x0000b14d
    afb4:	0000aca7 	.word	0x0000aca7
    afb8:	0000aca7 	.word	0x0000aca7
    afbc:	0000aca7 	.word	0x0000aca7
    afc0:	0000b219 	.word	0x0000b219
    afc4:	0000b237 	.word	0x0000b237
    afc8:	0000b247 	.word	0x0000b247
    afcc:	0000b257 	.word	0x0000b257
    afd0:	0000b281 	.word	0x0000b281
    afd4:	0000aca7 	.word	0x0000aca7
    afd8:	0000aca7 	.word	0x0000aca7
    afdc:	0000b377 	.word	0x0000b377
    afe0:	0000b38d 	.word	0x0000b38d
    afe4:	0000b395 	.word	0x0000b395
    afe8:	0000b3a5 	.word	0x0000b3a5
    afec:	0000b3b7 	.word	0x0000b3b7
    aff0:	0000b3d5 	.word	0x0000b3d5
    aff4:	0000b3f3 	.word	0x0000b3f3
    aff8:	0000b409 	.word	0x0000b409
    affc:	0000b28d 	.word	0x0000b28d
    b000:	0000b2b5 	.word	0x0000b2b5
    b004:	0000b303 	.word	0x0000b303
    b008:	0000b321 	.word	0x0000b321
    b00c:	0000aca7 	.word	0x0000aca7
    b010:	0000aca7 	.word	0x0000aca7
    b014:	0000aca7 	.word	0x0000aca7
    b018:	0000aca7 	.word	0x0000aca7
    b01c:	0000aca7 	.word	0x0000aca7
    b020:	0000aca7 	.word	0x0000aca7
    b024:	0000aca7 	.word	0x0000aca7
    b028:	0000aca7 	.word	0x0000aca7
    b02c:	0000aca7 	.word	0x0000aca7
    b030:	0000aca7 	.word	0x0000aca7
    b034:	0000aca7 	.word	0x0000aca7
    b038:	0000aca7 	.word	0x0000aca7
    b03c:	0000aca7 	.word	0x0000aca7
    b040:	0000aca7 	.word	0x0000aca7
    b044:	0000aca7 	.word	0x0000aca7
    b048:	0000aca7 	.word	0x0000aca7
    b04c:	0000aca7 	.word	0x0000aca7
    b050:	0000aca7 	.word	0x0000aca7
    b054:	0000aca7 	.word	0x0000aca7
    b058:	0000aca7 	.word	0x0000aca7
    b05c:	0000aca7 	.word	0x0000aca7
    b060:	0000aca7 	.word	0x0000aca7
    b064:	0000aca7 	.word	0x0000aca7
    b068:	0000aca7 	.word	0x0000aca7
    b06c:	0000b41d 	.word	0x0000b41d
    b070:	0000aca7 	.word	0x0000aca7
    b074:	0000aca7 	.word	0x0000aca7
    b078:	0000b413 	.word	0x0000b413
	le_event_mask = sys_get_le64(cmd->events);
    b07c:	68a0      	ldr	r0, [r4, #8]
    b07e:	f00f fbb6 	bl	1a7ee <sys_get_le64>
    b082:	4bc0      	ldr	r3, [pc, #768]	; (b384 <hci_cmd_handle+0x758>)
    b084:	e65f      	b.n	ad46 <hci_cmd_handle+0x11a>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b086:	2104      	movs	r1, #4
    b088:	a807      	add	r0, sp, #28
    b08a:	f7ff fc99 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    b08e:	2300      	movs	r3, #0
    b090:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    b092:	221b      	movs	r2, #27
    b094:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    b096:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    b098:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    b09a:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
    b09c:	e661      	b.n	ad62 <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b09e:	2109      	movs	r1, #9
    b0a0:	a807      	add	r0, sp, #28
    b0a2:	f7ff fc8d 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    b0a6:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b0a8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    b0aa:	2208      	movs	r2, #8
	rp->status = 0x00;
    b0ac:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    b0b0:	f00d fded 	bl	18c8e <memset>
	dst[0] = val;
    b0b4:	237f      	movs	r3, #127	; 0x7f
    b0b6:	7063      	strb	r3, [r4, #1]
	dst[1] = val >> 8;
    b0b8:	2341      	movs	r3, #65	; 0x41
    b0ba:	70a3      	strb	r3, [r4, #2]
	dst[2] = val >> 16;
    b0bc:	2301      	movs	r3, #1
    b0be:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
    b0c0:	e64f      	b.n	ad62 <hci_cmd_handle+0x136>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    b0c2:	68a1      	ldr	r1, [r4, #8]
    b0c4:	2001      	movs	r0, #1
    b0c6:	f7ff fab3 	bl	a630 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
    b0ca:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    b0cc:	2101      	movs	r1, #1
    b0ce:	a807      	add	r0, sp, #28
    b0d0:	f7ff fc76 	bl	a9c0 <hci_cmd_complete>
	ccst->status = status;
    b0d4:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
    b0d6:	e644      	b.n	ad62 <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b0d8:	2102      	movs	r1, #2
    b0da:	a807      	add	r0, sp, #28
    b0dc:	f7ff fc70 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    b0e0:	2300      	movs	r3, #0
    b0e2:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b0e4:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    b0e6:	f010 f81e 	bl	1b126 <ll_wl_size_get>
    b0ea:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    b0ec:	e639      	b.n	ad62 <hci_cmd_handle+0x136>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    b0ee:	2101      	movs	r1, #1
    b0f0:	a807      	add	r0, sp, #28
    b0f2:	f7ff fc65 	bl	a9c0 <hci_cmd_complete>
    b0f6:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    b0f8:	f005 fe3c 	bl	10d74 <ll_wl_clear>
	ccst->status = ll_rl_clear();
    b0fc:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    b0fe:	e630      	b.n	ad62 <hci_cmd_handle+0x136>
	status = ll_wl_add(&cmd->addr);
    b100:	68a0      	ldr	r0, [r4, #8]
    b102:	f005 fffd 	bl	11100 <ll_wl_add>
    b106:	e7e0      	b.n	b0ca <hci_cmd_handle+0x49e>
	status = ll_wl_remove(&cmd->addr);
    b108:	68a0      	ldr	r0, [r4, #8]
    b10a:	f005 fe6b 	bl	10de4 <ll_wl_remove>
    b10e:	e7dc      	b.n	b0ca <hci_cmd_handle+0x49e>
		le_encrypt(cmd, evt);
    b110:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    b112:	aa08      	add	r2, sp, #32
    b114:	2300      	movs	r3, #0
    b116:	f100 0110 	add.w	r1, r0, #16
    b11a:	f010 f808 	bl	1b12e <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b11e:	2111      	movs	r1, #17
    b120:	a807      	add	r0, sp, #28
    b122:	f7ff fc4d 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    b126:	2300      	movs	r3, #0
    b128:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    b12c:	2210      	movs	r2, #16
    b12e:	a908      	add	r1, sp, #32
    b130:	f00d fd83 	bl	18c3a <memcpy>
	if (err == -EINVAL) {
    b134:	e615      	b.n	ad62 <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b136:	2109      	movs	r1, #9
    b138:	a807      	add	r0, sp, #28
    b13a:	f7ff fc41 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    b13e:	2300      	movs	r3, #0
    b140:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    b144:	2108      	movs	r1, #8
    b146:	f000 fcd1 	bl	baec <bt_rand>
	if (err == -EINVAL) {
    b14a:	e60a      	b.n	ad62 <hci_cmd_handle+0x136>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b14c:	2109      	movs	r1, #9
    b14e:	a807      	add	r0, sp, #28
    b150:	f7ff fc36 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    b154:	4601      	mov	r1, r0
    b156:	2300      	movs	r3, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b158:	4602      	mov	r2, r0
	rp->status = 0x00;
    b15a:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    b15e:	488a      	ldr	r0, [pc, #552]	; (b388 <hci_cmd_handle+0x75c>)
    b160:	f00f fb3c 	bl	1a7dc <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    b164:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    b168:	1d51      	adds	r1, r2, #5
    b16a:	f00f fb37 	bl	1a7dc <sys_put_le32>
	if (err == -EINVAL) {
    b16e:	e5f8      	b.n	ad62 <hci_cmd_handle+0x136>
		le_set_adv_param(cmd, evt);
    b170:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    b172:	7ba5      	ldrb	r5, [r4, #14]
    b174:	79a3      	ldrb	r3, [r4, #6]
    b176:	7962      	ldrb	r2, [r4, #5]
    b178:	7921      	ldrb	r1, [r4, #4]
    b17a:	8820      	ldrh	r0, [r4, #0]
    b17c:	9502      	str	r5, [sp, #8]
    b17e:	7b65      	ldrb	r5, [r4, #13]
    b180:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    b182:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    b184:	9400      	str	r4, [sp, #0]
    b186:	f002 f8c3 	bl	d310 <ll_adv_params_set>
    b18a:	e79e      	b.n	b0ca <hci_cmd_handle+0x49e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b18c:	2102      	movs	r1, #2
    b18e:	a807      	add	r0, sp, #28
    b190:	f7ff fc16 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    b194:	2300      	movs	r3, #0
    b196:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    b198:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    b19a:	e5e2      	b.n	ad62 <hci_cmd_handle+0x136>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    b19c:	68a1      	ldr	r1, [r4, #8]
    b19e:	f811 0b01 	ldrb.w	r0, [r1], #1
    b1a2:	f002 f945 	bl	d430 <ll_adv_data_set>
    b1a6:	e790      	b.n	b0ca <hci_cmd_handle+0x49e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    b1a8:	68a1      	ldr	r1, [r4, #8]
    b1aa:	f811 0b01 	ldrb.w	r0, [r1], #1
    b1ae:	f002 f997 	bl	d4e0 <ll_adv_scan_rsp_set>
    b1b2:	e78a      	b.n	b0ca <hci_cmd_handle+0x49e>
	status = ll_adv_enable(cmd->enable);
    b1b4:	68a3      	ldr	r3, [r4, #8]
    b1b6:	7818      	ldrb	r0, [r3, #0]
    b1b8:	f7f5 f906 	bl	3c8 <ll_adv_enable>
    b1bc:	e785      	b.n	b0ca <hci_cmd_handle+0x49e>
	handle = sys_le16_to_cpu(cmd->handle);
    b1be:	68a2      	ldr	r2, [r4, #8]
    b1c0:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    b1c4:	2100      	movs	r1, #0
    b1c6:	4620      	mov	r0, r4
    b1c8:	f00f ff65 	bl	1b096 <ll_start_enc_req_send>
    b1cc:	e5f7      	b.n	adbe <hci_cmd_handle+0x192>
	handle = sys_le16_to_cpu(cmd->handle);
    b1ce:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    b1d0:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    b1d2:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    b1d4:	2106      	movs	r1, #6
    b1d6:	e7f6      	b.n	b1c6 <hci_cmd_handle+0x59a>
	handle = sys_le16_to_cpu(cmd->handle);
    b1d8:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b1da:	2108      	movs	r1, #8
    b1dc:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    b1de:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b1e0:	f7ff fbee 	bl	a9c0 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    b1e4:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b1e6:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    b1e8:	1cc1      	adds	r1, r0, #3
    b1ea:	4630      	mov	r0, r6
    b1ec:	f00f fd8b 	bl	1ad06 <ll_chm_get>
    b1f0:	e5c8      	b.n	ad84 <hci_cmd_handle+0x158>
	handle = sys_le16_to_cpu(cmd->handle);
    b1f2:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    b1f4:	8818      	ldrh	r0, [r3, #0]
    b1f6:	f00f fdad 	bl	1ad54 <ll_feature_req_send>
    b1fa:	e575      	b.n	ace8 <hci_cmd_handle+0xbc>
		le_conn_update(cmd, evt);
    b1fc:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    b1fe:	8911      	ldrh	r1, [r2, #8]
    b200:	8853      	ldrh	r3, [r2, #2]
    b202:	8810      	ldrh	r0, [r2, #0]
    b204:	9102      	str	r1, [sp, #8]
    b206:	88d1      	ldrh	r1, [r2, #6]
    b208:	9101      	str	r1, [sp, #4]
    b20a:	8892      	ldrh	r2, [r2, #4]
    b20c:	9200      	str	r2, [sp, #0]
    b20e:	2200      	movs	r2, #0
    b210:	4611      	mov	r1, r2
    b212:	f00f fd00 	bl	1ac16 <ll_conn_update>
	*evt = cmd_status(status);
    b216:	e567      	b.n	ace8 <hci_cmd_handle+0xbc>
		le_conn_param_req_reply(cmd, evt);
    b218:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    b21a:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    b21c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    b21e:	8853      	ldrh	r3, [r2, #2]
    b220:	9102      	str	r1, [sp, #8]
    b222:	88d1      	ldrh	r1, [r2, #6]
    b224:	9101      	str	r1, [sp, #4]
    b226:	8892      	ldrh	r2, [r2, #4]
    b228:	9200      	str	r2, [sp, #0]
    b22a:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    b22c:	2102      	movs	r1, #2
    b22e:	4620      	mov	r0, r4
    b230:	f00f fcf1 	bl	1ac16 <ll_conn_update>
    b234:	e5c3      	b.n	adbe <hci_cmd_handle+0x192>
		le_conn_param_req_neg_reply(cmd, evt);
    b236:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    b238:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    b23a:	789a      	ldrb	r2, [r3, #2]
    b23c:	2300      	movs	r3, #0
    b23e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    b242:	9300      	str	r3, [sp, #0]
    b244:	e7f2      	b.n	b22c <hci_cmd_handle+0x600>
		le_set_data_len(cmd, evt);
    b246:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    b248:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    b24a:	889a      	ldrh	r2, [r3, #4]
    b24c:	8859      	ldrh	r1, [r3, #2]
    b24e:	4620      	mov	r0, r4
    b250:	f00f fda2 	bl	1ad98 <ll_length_req_send>
    b254:	e5b3      	b.n	adbe <hci_cmd_handle+0x192>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b256:	2105      	movs	r1, #5
    b258:	a807      	add	r0, sp, #28
    b25a:	f7ff fbb1 	bl	a9c0 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    b25e:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b260:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    b262:	f10d 001a 	add.w	r0, sp, #26
    b266:	f003 f8ef 	bl	e448 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    b26a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b26e:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b272:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b276:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->status = 0x00;
    b27a:	2300      	movs	r3, #0
    b27c:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    b27e:	e570      	b.n	ad62 <hci_cmd_handle+0x136>
		le_write_default_data_len(cmd, evt);
    b280:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    b282:	8859      	ldrh	r1, [r3, #2]
    b284:	8818      	ldrh	r0, [r3, #0]
    b286:	f003 f8eb 	bl	e460 <ll_length_default_set>
    b28a:	e71e      	b.n	b0ca <hci_cmd_handle+0x49e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b28c:	2109      	movs	r1, #9
    b28e:	a807      	add	r0, sp, #28
    b290:	f7ff fb96 	bl	a9c0 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    b294:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b296:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    b298:	f10d 021a 	add.w	r2, sp, #26
    b29c:	a906      	add	r1, sp, #24
    b29e:	f10d 0016 	add.w	r0, sp, #22
    b2a2:	f00f fdac 	bl	1adfe <ll_length_max_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    b2a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    b2aa:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b2ae:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    b2b2:	e7e0      	b.n	b276 <hci_cmd_handle+0x64a>
	handle = sys_le16_to_cpu(cmd->handle);
    b2b4:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b2b6:	2105      	movs	r1, #5
    b2b8:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    b2ba:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b2bc:	f7ff fb80 	bl	a9c0 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    b2c0:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b2c2:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    b2c4:	1d02      	adds	r2, r0, #4
    b2c6:	1cc1      	adds	r1, r0, #3
    b2c8:	4630      	mov	r0, r6
    b2ca:	f00f fda1 	bl	1ae10 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    b2ce:	78e2      	ldrb	r2, [r4, #3]
	rp->status = status;
    b2d0:	7020      	strb	r0, [r4, #0]
    b2d2:	2a00      	cmp	r2, #0
    b2d4:	fa92 f3a2 	rbit	r3, r2
    b2d8:	fab3 f383 	clz	r3, r3
    b2dc:	7922      	ldrb	r2, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
    b2de:	f8a4 5001 	strh.w	r5, [r4, #1]
    b2e2:	bf08      	it	eq
    b2e4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b2e8:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    b2ea:	70e3      	strb	r3, [r4, #3]
    b2ec:	2a00      	cmp	r2, #0
    b2ee:	fa92 f3a2 	rbit	r3, r2
    b2f2:	fab3 f383 	clz	r3, r3
    b2f6:	bf08      	it	eq
    b2f8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b2fc:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    b2fe:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    b300:	e52f      	b.n	ad62 <hci_cmd_handle+0x136>
		le_set_default_phy(cmd, evt);
    b302:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b304:	781a      	ldrb	r2, [r3, #0]
    b306:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    b308:	bf44      	itt	mi
    b30a:	2107      	movmi	r1, #7
    b30c:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    b30e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    b310:	bf44      	itt	mi
    b312:	2207      	movmi	r2, #7
    b314:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    b316:	7899      	ldrb	r1, [r3, #2]
    b318:	7858      	ldrb	r0, [r3, #1]
    b31a:	f003 f8ab 	bl	e474 <ll_phy_default_set>
    b31e:	e6d4      	b.n	b0ca <hci_cmd_handle+0x49e>
		le_set_phy(cmd, evt);
    b320:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b322:	7899      	ldrb	r1, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    b324:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    b326:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b32a:	07cf      	lsls	r7, r1, #31
		cmd->tx_phys |= mask_phys;
    b32c:	bf42      	ittt	mi
    b32e:	78da      	ldrbmi	r2, [r3, #3]
    b330:	f042 0203 	orrmi.w	r2, r2, #3
    b334:	70da      	strbmi	r2, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    b336:	078e      	lsls	r6, r1, #30
		cmd->rx_phys |= mask_phys;
    b338:	bf48      	it	mi
    b33a:	791a      	ldrbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    b33c:	78d9      	ldrb	r1, [r3, #3]
		cmd->rx_phys |= mask_phys;
    b33e:	bf44      	itt	mi
    b340:	f042 0203 	orrmi.w	r2, r2, #3
    b344:	711a      	strbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    b346:	791b      	ldrb	r3, [r3, #4]
    b348:	ea41 0203 	orr.w	r2, r1, r3
    b34c:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    b350:	d001      	beq.n	b356 <hci_cmd_handle+0x72a>
		*evt = cmd_status(BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL);
    b352:	2011      	movs	r0, #17
    b354:	e4c8      	b.n	ace8 <hci_cmd_handle+0xbc>
	if (!(cmd->tx_phys & 0x07) ||
    b356:	074d      	lsls	r5, r1, #29
    b358:	d001      	beq.n	b35e <hci_cmd_handle+0x732>
    b35a:	075a      	lsls	r2, r3, #29
    b35c:	d101      	bne.n	b362 <hci_cmd_handle+0x736>
		*evt = cmd_status(BT_HCI_ERR_INVALID_PARAM);
    b35e:	2012      	movs	r0, #18
    b360:	e4c2      	b.n	ace8 <hci_cmd_handle+0xbc>
	if (phy_opts & 0x03) {
    b362:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    b366:	bf1c      	itt	ne
    b368:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    b36c:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    b370:	f00f fd62 	bl	1ae38 <ll_phy_req_send>
	*evt = cmd_status(status);
    b374:	e4b8      	b.n	ace8 <hci_cmd_handle+0xbc>
		le_add_dev_to_rl(cmd, evt);
    b376:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    b378:	f100 0217 	add.w	r2, r0, #23
    b37c:	1dc1      	adds	r1, r0, #7
    b37e:	f005 ff15 	bl	111ac <ll_rl_add>
    b382:	e6a2      	b.n	b0ca <hci_cmd_handle+0x49e>
    b384:	2000cb68 	.word	0x2000cb68
    b388:	ec30cc8f 	.word	0xec30cc8f
	status = ll_rl_remove(&cmd->peer_id_addr);
    b38c:	68a0      	ldr	r0, [r4, #8]
    b38e:	f005 ffaf 	bl	112f0 <ll_rl_remove>
    b392:	e69a      	b.n	b0ca <hci_cmd_handle+0x49e>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    b394:	2101      	movs	r1, #1
    b396:	a807      	add	r0, sp, #28
    b398:	f7ff fb12 	bl	a9c0 <hci_cmd_complete>
    b39c:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    b39e:	f005 fd95 	bl	10ecc <ll_rl_clear>
    b3a2:	e6ab      	b.n	b0fc <hci_cmd_handle+0x4d0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b3a4:	2102      	movs	r1, #2
    b3a6:	a807      	add	r0, sp, #28
    b3a8:	f7ff fb0a 	bl	a9c0 <hci_cmd_complete>
    b3ac:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    b3ae:	f00f febc 	bl	1b12a <ll_rl_size_get>
    b3b2:	7060      	strb	r0, [r4, #1]
    b3b4:	e761      	b.n	b27a <hci_cmd_handle+0x64e>
	memcpy(dst, src, sizeof(*dst));
    b3b6:	2207      	movs	r2, #7
    b3b8:	68a1      	ldr	r1, [r4, #8]
    b3ba:	a808      	add	r0, sp, #32
    b3bc:	f00d fc3d 	bl	18c3a <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b3c0:	2107      	movs	r1, #7
    b3c2:	a807      	add	r0, sp, #28
    b3c4:	f7ff fafc 	bl	a9c0 <hci_cmd_complete>
    b3c8:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    b3ca:	1c41      	adds	r1, r0, #1
    b3cc:	a808      	add	r0, sp, #32
    b3ce:	f006 f81f 	bl	11410 <ll_rl_crpa_get>
    b3d2:	e693      	b.n	b0fc <hci_cmd_handle+0x4d0>
    b3d4:	2207      	movs	r2, #7
    b3d6:	68a1      	ldr	r1, [r4, #8]
    b3d8:	a808      	add	r0, sp, #32
    b3da:	f00d fc2e 	bl	18c3a <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b3de:	2107      	movs	r1, #7
    b3e0:	a807      	add	r0, sp, #28
    b3e2:	f7ff faed 	bl	a9c0 <hci_cmd_complete>
    b3e6:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    b3e8:	1c41      	adds	r1, r0, #1
    b3ea:	a808      	add	r0, sp, #32
    b3ec:	f006 f832 	bl	11454 <ll_rl_lrpa_get>
    b3f0:	e684      	b.n	b0fc <hci_cmd_handle+0x4d0>
	u8_t enable = cmd->enable;
    b3f2:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    b3f4:	2101      	movs	r1, #1
    b3f6:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    b3f8:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    b3fa:	f7ff fae1 	bl	a9c0 <hci_cmd_complete>
    b3fe:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    b400:	4628      	mov	r0, r5
    b402:	f005 fda1 	bl	10f48 <ll_rl_enable>
    b406:	e679      	b.n	b0fc <hci_cmd_handle+0x4d0>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    b408:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    b40a:	8818      	ldrh	r0, [r3, #0]
    b40c:	f005 fdb4 	bl	10f78 <ll_rl_timeout_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    b410:	e488      	b.n	ad24 <hci_cmd_handle+0xf8>
		le_set_privacy_mode(cmd, evt);
    b412:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    b414:	79c1      	ldrb	r1, [r0, #7]
    b416:	f006 f837 	bl	11488 <ll_priv_mode_set>
    b41a:	e656      	b.n	b0ca <hci_cmd_handle+0x49e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    b41c:	2103      	movs	r1, #3
    b41e:	a807      	add	r0, sp, #28
    b420:	f7ff face 	bl	a9c0 <hci_cmd_complete>
	rp->status = 0x00;
    b424:	4601      	mov	r1, r0
    b426:	2300      	movs	r3, #0
    b428:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    b42c:	3001      	adds	r0, #1
    b42e:	f00f f9d1 	bl	1a7d4 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    b432:	e496      	b.n	ad62 <hci_cmd_handle+0x136>

0000b434 <hci_acl_handle>:
{
    b434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    b438:	2300      	movs	r3, #0
    b43a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    b43c:	8983      	ldrh	r3, [r0, #12]
    b43e:	2b03      	cmp	r3, #3
{
    b440:	4605      	mov	r5, r0
    b442:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    b444:	d810      	bhi.n	b468 <hci_acl_handle+0x34>
		BT_ERR("No HCI ACL header");
    b446:	2301      	movs	r3, #1
    b448:	f04f 0100 	mov.w	r1, #0
    b44c:	f363 0107 	bfi	r1, r3, #0, #8
    b450:	4a40      	ldr	r2, [pc, #256]	; (b554 <hci_acl_handle+0x120>)
    b452:	4b41      	ldr	r3, [pc, #260]	; (b558 <hci_acl_handle+0x124>)
    b454:	4841      	ldr	r0, [pc, #260]	; (b55c <hci_acl_handle+0x128>)
    b456:	1a9b      	subs	r3, r3, r2
    b458:	08db      	lsrs	r3, r3, #3
    b45a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI ACL packet length");
    b45e:	f00d f8b7 	bl	185d0 <log_0>
		return -EINVAL;
    b462:	f06f 0015 	mvn.w	r0, #21
    b466:	e046      	b.n	b4f6 <hci_acl_handle+0xc2>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
    b468:	2104      	movs	r1, #4
    b46a:	3008      	adds	r0, #8
    b46c:	f00f ff10 	bl	1b290 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    b470:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    b472:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    b474:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    b478:	42bb      	cmp	r3, r7
    b47a:	d20c      	bcs.n	b496 <hci_acl_handle+0x62>
		BT_ERR("Invalid HCI ACL packet length");
    b47c:	2301      	movs	r3, #1
    b47e:	f04f 0100 	mov.w	r1, #0
    b482:	f363 0107 	bfi	r1, r3, #0, #8
    b486:	4a33      	ldr	r2, [pc, #204]	; (b554 <hci_acl_handle+0x120>)
    b488:	4b33      	ldr	r3, [pc, #204]	; (b558 <hci_acl_handle+0x124>)
    b48a:	4835      	ldr	r0, [pc, #212]	; (b560 <hci_acl_handle+0x12c>)
    b48c:	1a9b      	subs	r3, r3, r2
    b48e:	08db      	lsrs	r3, r3, #3
    b490:	f363 118f 	bfi	r1, r3, #6, #10
    b494:	e7e3      	b.n	b45e <hci_acl_handle+0x2a>
	node_tx = ll_tx_mem_acquire();
    b496:	f002 ff67 	bl	e368 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    b49a:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
    b49e:	4604      	mov	r4, r0
    b4a0:	bb58      	cbnz	r0, b4fa <hci_acl_handle+0xc6>
		BT_ERR("Tx Buffer Overflow");
    b4a2:	2301      	movs	r3, #1
    b4a4:	f04f 0100 	mov.w	r1, #0
    b4a8:	4a2a      	ldr	r2, [pc, #168]	; (b554 <hci_acl_handle+0x120>)
    b4aa:	482e      	ldr	r0, [pc, #184]	; (b564 <hci_acl_handle+0x130>)
    b4ac:	f363 0107 	bfi	r1, r3, #0, #8
    b4b0:	4b29      	ldr	r3, [pc, #164]	; (b558 <hci_acl_handle+0x124>)
    b4b2:	1a9b      	subs	r3, r3, r2
    b4b4:	08db      	lsrs	r3, r3, #3
    b4b6:	f363 118f 	bfi	r1, r3, #6, #10
    b4ba:	f00d f889 	bl	185d0 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    b4be:	4b2a      	ldr	r3, [pc, #168]	; (b568 <hci_acl_handle+0x134>)
    b4c0:	6819      	ldr	r1, [r3, #0]
    b4c2:	4623      	mov	r3, r4
    b4c4:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    b4c8:	4313      	orrs	r3, r2
    b4ca:	d012      	beq.n	b4f2 <hci_acl_handle+0xbe>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b4cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b4d0:	2001      	movs	r0, #1
    b4d2:	f7fb f843 	bl	655c <bt_buf_get_rx>
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    b4d6:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b4d8:	f8c8 0000 	str.w	r0, [r8]
	hci_evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    b4dc:	211a      	movs	r1, #26
    b4de:	f00f f98a 	bl	1a7f6 <hci_evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    b4e2:	f8d8 0000 	ldr.w	r0, [r8]
    b4e6:	2101      	movs	r1, #1
    b4e8:	3008      	adds	r0, #8
    b4ea:	f00f fea0 	bl	1b22e <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    b4ee:	2301      	movs	r3, #1
    b4f0:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    b4f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    b4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    b4fa:	08b3      	lsrs	r3, r6, #2
    b4fc:	d1b1      	bne.n	b462 <hci_acl_handle+0x2e>
	switch (bt_acl_flags_pb(flags)) {
    b4fe:	b12e      	cbz	r6, b50c <hci_acl_handle+0xd8>
    b500:	2e01      	cmp	r6, #1
    b502:	d1ae      	bne.n	b462 <hci_acl_handle+0x2e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b504:	7903      	ldrb	r3, [r0, #4]
    b506:	f366 0301 	bfi	r3, r6, #0, #2
    b50a:	e003      	b.n	b514 <hci_acl_handle+0xe0>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    b50c:	7903      	ldrb	r3, [r0, #4]
    b50e:	2202      	movs	r2, #2
    b510:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
    b514:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    b516:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b518:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    b51a:	463a      	mov	r2, r7
    b51c:	1de0      	adds	r0, r4, #7
    b51e:	f00d fb8c 	bl	18c3a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    b522:	4621      	mov	r1, r4
    b524:	f3c9 000b 	ubfx	r0, r9, #0, #12
    b528:	f002 ff2a 	bl	e380 <ll_tx_mem_enqueue>
    b52c:	2800      	cmp	r0, #0
    b52e:	d0e2      	beq.n	b4f6 <hci_acl_handle+0xc2>
		BT_ERR("Invalid Tx Enqueue");
    b530:	2301      	movs	r3, #1
    b532:	f04f 0100 	mov.w	r1, #0
    b536:	4a07      	ldr	r2, [pc, #28]	; (b554 <hci_acl_handle+0x120>)
    b538:	480c      	ldr	r0, [pc, #48]	; (b56c <hci_acl_handle+0x138>)
    b53a:	f363 0107 	bfi	r1, r3, #0, #8
    b53e:	4b06      	ldr	r3, [pc, #24]	; (b558 <hci_acl_handle+0x124>)
    b540:	1a9b      	subs	r3, r3, r2
    b542:	08db      	lsrs	r3, r3, #3
    b544:	f363 118f 	bfi	r1, r3, #6, #10
    b548:	f00d f842 	bl	185d0 <log_0>
		ll_tx_mem_release(node_tx);
    b54c:	4620      	mov	r0, r4
    b54e:	f002 ff11 	bl	e374 <ll_tx_mem_release>
		return -EINVAL;
    b552:	e786      	b.n	b462 <hci_acl_handle+0x2e>
    b554:	0001e448 	.word	0x0001e448
    b558:	0001e488 	.word	0x0001e488
    b55c:	000207cb 	.word	0x000207cb
    b560:	000207dd 	.word	0x000207dd
    b564:	000207fb 	.word	0x000207fb
    b568:	2000cb60 	.word	0x2000cb60
    b56c:	0002080e 	.word	0x0002080e

0000b570 <hci_acl_encode>:
	u16_t handle;
	u8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    b570:	f890 3020 	ldrb.w	r3, [r0, #32]
    b574:	f003 0303 	and.w	r3, r3, #3
    b578:	3b01      	subs	r3, #1
    b57a:	2b01      	cmp	r3, #1
{
    b57c:	b570      	push	{r4, r5, r6, lr}
    b57e:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
    b580:	d81f      	bhi.n	b5c2 <hci_acl_encode+0x52>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    b582:	f101 0608 	add.w	r6, r1, #8
	handle = node_rx->hdr.handle;
    b586:	88c5      	ldrh	r5, [r0, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    b588:	2104      	movs	r1, #4
    b58a:	4630      	mov	r0, r6
    b58c:	f00f fe4f 	bl	1b22e <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    b590:	f894 3020 	ldrb.w	r3, [r4, #32]
    b594:	f003 0303 	and.w	r3, r3, #3
    b598:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    b59a:	bf0c      	ite	eq
    b59c:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    b5a0:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    b5a4:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    b5a6:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    b5aa:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    b5ac:	4630      	mov	r0, r6
    b5ae:	f00f fe3e 	bl	1b22e <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    b5b2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b5b6:	f104 0123 	add.w	r1, r4, #35	; 0x23

	default:
		LL_ASSERT(0);
		break;
	}
}
    b5ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    b5be:	f00d bb3c 	b.w	18c3a <memcpy>
		LL_ASSERT(0);
    b5c2:	f640 539e 	movw	r3, #3486	; 0xd9e
    b5c6:	4a06      	ldr	r2, [pc, #24]	; (b5e0 <hci_acl_encode+0x70>)
    b5c8:	4906      	ldr	r1, [pc, #24]	; (b5e4 <hci_acl_encode+0x74>)
    b5ca:	4807      	ldr	r0, [pc, #28]	; (b5e8 <hci_acl_encode+0x78>)
    b5cc:	f00c fdb2 	bl	18134 <printk>
    b5d0:	4040      	eors	r0, r0
    b5d2:	f380 8811 	msr	BASEPRI, r0
    b5d6:	f04f 0003 	mov.w	r0, #3
    b5da:	df02      	svc	2
}
    b5dc:	bd70      	pop	{r4, r5, r6, pc}
    b5de:	bf00      	nop
    b5e0:	00020799 	.word	0x00020799
    b5e4:	0002195a 	.word	0x0002195a
    b5e8:	0001ff46 	.word	0x0001ff46

0000b5ec <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b5ee:	7903      	ldrb	r3, [r0, #4]
    b5f0:	88c6      	ldrh	r6, [r0, #6]
    b5f2:	2b02      	cmp	r3, #2
{
    b5f4:	b089      	sub	sp, #36	; 0x24
    b5f6:	4604      	mov	r4, r0
    b5f8:	460d      	mov	r5, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b5fa:	f000 81a7 	beq.w	b94c <hci_evt_encode+0x360>
	switch (node_rx->hdr.type) {
    b5fe:	3b08      	subs	r3, #8
    b600:	2b06      	cmp	r3, #6
    b602:	f200 8180 	bhi.w	b906 <hci_evt_encode+0x31a>
    b606:	e8df f013 	tbh	[pc, r3, lsl #1]
    b60a:	0007      	.short	0x0007
    b60c:	00b7009a 	.word	0x00b7009a
    b610:	00f000da 	.word	0x00f000da
    b614:	011f0104 	.word	0x011f0104
	u8_t status = node_rx->status;
    b618:	f890 7020 	ldrb.w	r7, [r0, #32]
	if (!status) {
    b61c:	b947      	cbnz	r7, b630 <hci_evt_encode+0x44>
		ll_rl_crpa_set(node_rx->peer_addr_type,
    b61e:	f100 0329 	add.w	r3, r0, #41	; 0x29
    b622:	f100 0123 	add.w	r1, r0, #35	; 0x23
    b626:	22ff      	movs	r2, #255	; 0xff
    b628:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b62c:	f005 fece 	bl	113cc <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b630:	4bbc      	ldr	r3, [pc, #752]	; (b924 <hci_evt_encode+0x338>)
    b632:	6859      	ldr	r1, [r3, #4]
    b634:	f04f 0c00 	mov.w	ip, #0
    b638:	4662      	mov	r2, ip
    b63a:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    b63e:	4313      	orrs	r3, r2
    b640:	d052      	beq.n	b6e8 <hci_evt_encode+0xfc>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b642:	4bb9      	ldr	r3, [pc, #740]	; (b928 <hci_evt_encode+0x33c>)
    b644:	f8d3 e000 	ldr.w	lr, [r3]
    b648:	f240 2001 	movw	r0, #513	; 0x201
    b64c:	ea0e 0000 	and.w	r0, lr, r0
    b650:	4661      	mov	r1, ip
    b652:	4301      	orrs	r1, r0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    b654:	f40e 7200 	and.w	r2, lr, #512	; 0x200
    b658:	4663      	mov	r3, ip
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b65a:	d045      	beq.n	b6e8 <hci_evt_encode+0xfc>
	if (!status) {
    b65c:	b91f      	cbnz	r7, b666 <hci_evt_encode+0x7a>
		conn_count++;
    b65e:	48b3      	ldr	r0, [pc, #716]	; (b92c <hci_evt_encode+0x340>)
    b660:	6801      	ldr	r1, [r0, #0]
    b662:	3101      	adds	r1, #1
    b664:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b666:	4313      	orrs	r3, r2
    b668:	d044      	beq.n	b6f4 <hci_evt_encode+0x108>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b66a:	4628      	mov	r0, r5
    b66c:	221e      	movs	r2, #30
    b66e:	210a      	movs	r1, #10
    b670:	f00f f8cb 	bl	1a80a <meta_evt>
    b674:	4605      	mov	r5, r0
		if (status) {
    b676:	b12f      	cbz	r7, b684 <hci_evt_encode+0x98>
			(void)memset(leecc, 0x00, sizeof(*leecc));
    b678:	221e      	movs	r2, #30
		(void)memset(lecc, 0x00, sizeof(*lecc));
    b67a:	2100      	movs	r1, #0
    b67c:	f00d fb07 	bl	18c8e <memset>
		lecc->status = status;
    b680:	702f      	strb	r7, [r5, #0]
		return;
    b682:	e031      	b.n	b6e8 <hci_evt_encode+0xfc>
		leecc->status = 0x00;
    b684:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    b686:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = node_rx->role;
    b68a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b68e:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
    b690:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    b694:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
    b696:	2206      	movs	r2, #6
    b698:	f104 0123 	add.w	r1, r4, #35	; 0x23
    b69c:	3005      	adds	r0, #5
    b69e:	f00d facc 	bl	18c3a <memcpy>
		if ((node_rx->own_addr_type) &&
    b6a2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    b6a6:	f105 000b 	add.w	r0, r5, #11
			memcpy(&leecc->local_rpa.val[0], &node_rx->own_addr[0],
    b6aa:	2206      	movs	r2, #6
		if ((node_rx->own_addr_type) &&
    b6ac:	b1f3      	cbz	r3, b6ec <hci_evt_encode+0x100>
    b6ae:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    b6b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b6b6:	2b40      	cmp	r3, #64	; 0x40
    b6b8:	d118      	bne.n	b6ec <hci_evt_encode+0x100>
			memcpy(&leecc->local_rpa.val[0], &node_rx->own_addr[0],
    b6ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
    b6be:	f00d fabc 	bl	18c3a <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
    b6c2:	2206      	movs	r2, #6
    b6c4:	f104 0129 	add.w	r1, r4, #41	; 0x29
    b6c8:	f105 0011 	add.w	r0, r5, #17
    b6cc:	f00d fab5 	bl	18c3a <memcpy>
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
    b6d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    b6d2:	f8a5 3017 	strh.w	r3, [r5, #23]
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
    b6d6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    b6d8:	f8a5 3019 	strh.w	r3, [r5, #25]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    b6dc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    b6de:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = node_rx->sca;
    b6e2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    b6e6:	776b      	strb	r3, [r5, #29]
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    b6e8:	b009      	add	sp, #36	; 0x24
    b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(void)memset(&leecc->local_rpa.val[0], 0x0,
    b6ec:	2100      	movs	r1, #0
    b6ee:	f00d face 	bl	18c8e <memset>
    b6f2:	e7e6      	b.n	b6c2 <hci_evt_encode+0xd6>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b6f4:	4628      	mov	r0, r5
    b6f6:	2212      	movs	r2, #18
    b6f8:	2101      	movs	r1, #1
    b6fa:	f00f f886 	bl	1a80a <meta_evt>
    b6fe:	4605      	mov	r5, r0
	if (status) {
    b700:	b10f      	cbz	r7, b706 <hci_evt_encode+0x11a>
		(void)memset(lecc, 0x00, sizeof(*lecc));
    b702:	2212      	movs	r2, #18
    b704:	e7b9      	b.n	b67a <hci_evt_encode+0x8e>
	lecc->status = 0x00;
    b706:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    b708:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = node_rx->role;
    b70c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b710:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
    b712:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    b716:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
    b718:	2206      	movs	r2, #6
    b71a:	f104 0123 	add.w	r1, r4, #35	; 0x23
    b71e:	3005      	adds	r0, #5
    b720:	f00d fa8b 	bl	18c3a <memcpy>
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
    b724:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    b726:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
    b72a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    b72c:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    b730:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    b732:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = node_rx->sca;
    b736:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    b73a:	746b      	strb	r3, [r5, #17]
    b73c:	e7d4      	b.n	b6e8 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    b73e:	4b79      	ldr	r3, [pc, #484]	; (b924 <hci_evt_encode+0x338>)
    b740:	6819      	ldr	r1, [r3, #0]
    b742:	2700      	movs	r7, #0
    b744:	f001 0210 	and.w	r2, r1, #16
    b748:	463b      	mov	r3, r7
    b74a:	4313      	orrs	r3, r2
    b74c:	d0cc      	beq.n	b6e8 <hci_evt_encode+0xfc>
	hci_evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    b74e:	2204      	movs	r2, #4
    b750:	2105      	movs	r1, #5
    b752:	4628      	mov	r0, r5
    b754:	f00f f84f 	bl	1a7f6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    b758:	2104      	movs	r1, #4
    b75a:	f105 0008 	add.w	r0, r5, #8
    b75e:	f00f fd66 	bl	1b22e <net_buf_simple_add>
	conn_count--;
    b762:	4a72      	ldr	r2, [pc, #456]	; (b92c <hci_evt_encode+0x340>)
	ep->status = 0x00;
    b764:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b766:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    b76a:	f894 3020 	ldrb.w	r3, [r4, #32]
    b76e:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    b770:	6813      	ldr	r3, [r2, #0]
    b772:	3b01      	subs	r3, #1
    b774:	6013      	str	r3, [r2, #0]
    b776:	e7b7      	b.n	b6e8 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b778:	4b6a      	ldr	r3, [pc, #424]	; (b924 <hci_evt_encode+0x338>)
    b77a:	6858      	ldr	r0, [r3, #4]
    b77c:	2100      	movs	r1, #0
    b77e:	460a      	mov	r2, r1
    b780:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b784:	4313      	orrs	r3, r2
    b786:	d0af      	beq.n	b6e8 <hci_evt_encode+0xfc>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    b788:	4b67      	ldr	r3, [pc, #412]	; (b928 <hci_evt_encode+0x33c>)
    b78a:	6818      	ldr	r0, [r3, #0]
    b78c:	460b      	mov	r3, r1
    b78e:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b792:	4313      	orrs	r3, r2
    b794:	d0a8      	beq.n	b6e8 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    b796:	2209      	movs	r2, #9
    b798:	2103      	movs	r1, #3
    b79a:	4628      	mov	r0, r5
    b79c:	f00f f835 	bl	1a80a <meta_evt>
	sep->status = cu->status;
    b7a0:	f894 3020 	ldrb.w	r3, [r4, #32]
    b7a4:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b7a6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b7a8:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b7ac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b7ae:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b7b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	sep->handle = sys_cpu_to_le16(handle);
    b7b4:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b7b8:	f8a0 3007 	strh.w	r3, [r0, #7]
    b7bc:	e794      	b.n	b6e8 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    b7be:	4b59      	ldr	r3, [pc, #356]	; (b924 <hci_evt_encode+0x338>)
    b7c0:	6859      	ldr	r1, [r3, #4]
    b7c2:	2400      	movs	r4, #0
    b7c4:	4622      	mov	r2, r4
    b7c6:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    b7ca:	4313      	orrs	r3, r2
    b7cc:	d08c      	beq.n	b6e8 <hci_evt_encode+0xfc>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE,
    b7ce:	2203      	movs	r2, #3
    b7d0:	2130      	movs	r1, #48	; 0x30
    b7d2:	4628      	mov	r0, r5
    b7d4:	f00f f80f 	bl	1a7f6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    b7d8:	2103      	movs	r1, #3
    b7da:	f105 0008 	add.w	r0, r5, #8
    b7de:	f00f fd26 	bl	1b22e <net_buf_simple_add>
	ep->status = 0x00;
    b7e2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b7e4:	f8a0 6001 	strh.w	r6, [r0, #1]
    b7e8:	e77e      	b.n	b6e8 <hci_evt_encode+0xfc>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    b7ea:	4b51      	ldr	r3, [pc, #324]	; (b930 <hci_evt_encode+0x344>)
    b7ec:	6819      	ldr	r1, [r3, #0]
    b7ee:	2300      	movs	r3, #0
    b7f0:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    b7f4:	4313      	orrs	r3, r2
    b7f6:	f43f af77 	beq.w	b6e8 <hci_evt_encode+0xfc>
	hci_evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    b7fa:	2202      	movs	r2, #2
    b7fc:	2157      	movs	r1, #87	; 0x57
    b7fe:	4628      	mov	r0, r5
    b800:	f00e fff9 	bl	1a7f6 <hci_evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    b804:	2102      	movs	r1, #2
    b806:	f105 0008 	add.w	r0, r5, #8
    b80a:	f00f fd10 	bl	1b22e <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    b80e:	8006      	strh	r6, [r0, #0]
    b810:	e76a      	b.n	b6e8 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b812:	4b44      	ldr	r3, [pc, #272]	; (b924 <hci_evt_encode+0x338>)
    b814:	6858      	ldr	r0, [r3, #4]
    b816:	2100      	movs	r1, #0
    b818:	460a      	mov	r2, r1
    b81a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b81e:	4313      	orrs	r3, r2
    b820:	f43f af62 	beq.w	b6e8 <hci_evt_encode+0xfc>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    b824:	4b40      	ldr	r3, [pc, #256]	; (b928 <hci_evt_encode+0x33c>)
    b826:	6818      	ldr	r0, [r3, #0]
    b828:	460b      	mov	r3, r1
    b82a:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b82e:	4313      	orrs	r3, r2
    b830:	f43f af5a 	beq.w	b6e8 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    b834:	2203      	movs	r2, #3
    b836:	2114      	movs	r1, #20
    b838:	4628      	mov	r0, r5
    b83a:	f00e ffe6 	bl	1a80a <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b83e:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    b840:	f894 3020 	ldrb.w	r3, [r4, #32]
    b844:	7083      	strb	r3, [r0, #2]
    b846:	e74f      	b.n	b6e8 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b848:	4b36      	ldr	r3, [pc, #216]	; (b924 <hci_evt_encode+0x338>)
    b84a:	6858      	ldr	r0, [r3, #4]
    b84c:	2100      	movs	r1, #0
    b84e:	460a      	mov	r2, r1
    b850:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b854:	4313      	orrs	r3, r2
    b856:	d006      	beq.n	b866 <hci_evt_encode+0x27a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    b858:	4b33      	ldr	r3, [pc, #204]	; (b928 <hci_evt_encode+0x33c>)
    b85a:	6818      	ldr	r0, [r3, #0]
    b85c:	460b      	mov	r3, r1
    b85e:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b862:	4313      	orrs	r3, r2
    b864:	d12c      	bne.n	b8c0 <hci_evt_encode+0x2d4>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    b866:	2202      	movs	r2, #2
    b868:	f04f 0300 	mov.w	r3, #0
    b86c:	f362 0307 	bfi	r3, r2, #0, #8
    b870:	4930      	ldr	r1, [pc, #192]	; (b934 <hci_evt_encode+0x348>)
    b872:	4a31      	ldr	r2, [pc, #196]	; (b938 <hci_evt_encode+0x34c>)
    b874:	4831      	ldr	r0, [pc, #196]	; (b93c <hci_evt_encode+0x350>)
    b876:	9604      	str	r6, [sp, #16]
    b878:	1a52      	subs	r2, r2, r1
    b87a:	08d2      	lsrs	r2, r2, #3
    b87c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    b880:	f362 138f 	bfi	r3, r2, #6, #10
    b884:	f894 2020 	ldrb.w	r2, [r4, #32]
    b888:	9205      	str	r2, [sp, #20]
    b88a:	2900      	cmp	r1, #0
    b88c:	fa91 f2a1 	rbit	r2, r1
    b890:	fab2 f282 	clz	r2, r2
    b894:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    b898:	bf08      	it	eq
    b89a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    b89e:	3201      	adds	r2, #1
    b8a0:	2900      	cmp	r1, #0
    b8a2:	9206      	str	r2, [sp, #24]
    b8a4:	fa91 f2a1 	rbit	r2, r1
    b8a8:	fab2 f282 	clz	r2, r2
    b8ac:	bf08      	it	eq
    b8ae:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    b8b2:	3201      	adds	r2, #1
    b8b4:	9207      	str	r2, [sp, #28]
    b8b6:	a904      	add	r1, sp, #16
    b8b8:	2204      	movs	r2, #4
    b8ba:	f00c fedd 	bl	18678 <log_n>
		return;
    b8be:	e713      	b.n	b6e8 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    b8c0:	2205      	movs	r2, #5
    b8c2:	210c      	movs	r1, #12
    b8c4:	4628      	mov	r0, r5
    b8c6:	f00e ffa0 	bl	1a80a <meta_evt>
	sep->status = pu->status;
    b8ca:	f894 3020 	ldrb.w	r3, [r4, #32]
    b8ce:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    b8d0:	f8a0 6001 	strh.w	r6, [r0, #1]
    b8d4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b8d8:	2a00      	cmp	r2, #0
    b8da:	fa92 f3a2 	rbit	r3, r2
    b8de:	fab3 f383 	clz	r3, r3
    b8e2:	bf08      	it	eq
    b8e4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b8e8:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    b8ea:	70c3      	strb	r3, [r0, #3]
    b8ec:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b8f0:	fa92 f3a2 	rbit	r3, r2
    b8f4:	2a00      	cmp	r2, #0
    b8f6:	fab3 f383 	clz	r3, r3
    b8fa:	bf08      	it	eq
    b8fc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b900:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    b902:	7103      	strb	r3, [r0, #4]
    b904:	e6f0      	b.n	b6e8 <hci_evt_encode+0xfc>
		LL_ASSERT(0);
    b906:	f640 43a9 	movw	r3, #3241	; 0xca9
		LL_ASSERT(0);
    b90a:	4a0d      	ldr	r2, [pc, #52]	; (b940 <hci_evt_encode+0x354>)
    b90c:	490d      	ldr	r1, [pc, #52]	; (b944 <hci_evt_encode+0x358>)
    b90e:	480e      	ldr	r0, [pc, #56]	; (b948 <hci_evt_encode+0x35c>)
    b910:	f00c fc10 	bl	18134 <printk>
    b914:	4040      	eors	r0, r0
    b916:	f380 8811 	msr	BASEPRI, r0
    b91a:	f04f 0003 	mov.w	r0, #3
    b91e:	df02      	svc	2
}
    b920:	e6e2      	b.n	b6e8 <hci_evt_encode+0xfc>
    b922:	bf00      	nop
    b924:	2000cb60 	.word	0x2000cb60
    b928:	2000cb68 	.word	0x2000cb68
    b92c:	200006d4 	.word	0x200006d4
    b930:	20000000 	.word	0x20000000
    b934:	0001e448 	.word	0x0001e448
    b938:	0001e488 	.word	0x0001e488
    b93c:	00020855 	.word	0x00020855
    b940:	00020799 	.word	0x00020799
    b944:	0002195a 	.word	0x0002195a
    b948:	0001ff46 	.word	0x0001ff46
	switch (pdu_data->llctrl.opcode) {
    b94c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    b950:	3b03      	subs	r3, #3
    b952:	2b12      	cmp	r3, #18
    b954:	f200 80a4 	bhi.w	baa0 <hci_evt_encode+0x4b4>
    b958:	e8df f003 	tbb	[pc, r3]
    b95c:	30a2a20a 	.word	0x30a2a20a
    b960:	a236a28a 	.word	0xa236a28a
    b964:	a23ea2a2 	.word	0xa23ea2a2
    b968:	a2a2a243 	.word	0xa2a2a243
    b96c:	6ba2      	.short	0x6ba2
    b96e:	6b          	.byte	0x6b
    b96f:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b970:	4b4d      	ldr	r3, [pc, #308]	; (baa8 <hci_evt_encode+0x4bc>)
    b972:	6858      	ldr	r0, [r3, #4]
    b974:	2100      	movs	r1, #0
    b976:	460a      	mov	r2, r1
    b978:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b97c:	4313      	orrs	r3, r2
    b97e:	f43f aeb3 	beq.w	b6e8 <hci_evt_encode+0xfc>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    b982:	4b4a      	ldr	r3, [pc, #296]	; (baac <hci_evt_encode+0x4c0>)
    b984:	6818      	ldr	r0, [r3, #0]
    b986:	460b      	mov	r3, r1
    b988:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b98c:	4313      	orrs	r3, r2
    b98e:	f43f aeab 	beq.w	b6e8 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    b992:	220c      	movs	r2, #12
    b994:	2105      	movs	r1, #5
    b996:	4628      	mov	r0, r5
    b998:	f00e ff37 	bl	1a80a <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    b99c:	f104 0124 	add.w	r1, r4, #36	; 0x24
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    b9a0:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    b9a2:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    b9a4:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    b9a8:	f00d f947 	bl	18c3a <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    b9ac:	2202      	movs	r2, #2
    b9ae:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    b9b2:	f105 000a 	add.w	r0, r5, #10
    b9b6:	f00d f940 	bl	18c3a <memcpy>
    b9ba:	e695      	b.n	b6e8 <hci_evt_encode+0xfc>
		encrypt_change(0x00, handle, buf);
    b9bc:	460a      	mov	r2, r1
    b9be:	2000      	movs	r0, #0
    b9c0:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    b9c2:	f7fe ffdd 	bl	a980 <encrypt_change>
		break;
    b9c6:	e68f      	b.n	b6e8 <hci_evt_encode+0xfc>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    b9c8:	460b      	mov	r3, r1
    b9ca:	4632      	mov	r2, r6
    b9cc:	f100 0120 	add.w	r1, r0, #32
    b9d0:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b9d2:	f7fe ffa7 	bl	a924 <le_remote_feat_complete>
		break;
    b9d6:	e687      	b.n	b6e8 <hci_evt_encode+0xfc>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    b9d8:	460a      	mov	r2, r1
    b9da:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    b9de:	4631      	mov	r1, r6
    b9e0:	e7ef      	b.n	b9c2 <hci_evt_encode+0x3d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b9e2:	4b31      	ldr	r3, [pc, #196]	; (baa8 <hci_evt_encode+0x4bc>)
    b9e4:	6858      	ldr	r0, [r3, #4]
    b9e6:	2100      	movs	r1, #0
    b9e8:	460a      	mov	r2, r1
    b9ea:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b9ee:	4313      	orrs	r3, r2
    b9f0:	d006      	beq.n	ba00 <hci_evt_encode+0x414>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    b9f2:	4b2e      	ldr	r3, [pc, #184]	; (baac <hci_evt_encode+0x4c0>)
    b9f4:	6818      	ldr	r0, [r3, #0]
    b9f6:	460b      	mov	r3, r1
    b9f8:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b9fc:	4313      	orrs	r3, r2
    b9fe:	d109      	bne.n	ba14 <hci_evt_encode+0x428>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    ba00:	2300      	movs	r3, #0
    ba02:	e9cd 3301 	strd	r3, r3, [sp, #4]
    ba06:	9300      	str	r3, [sp, #0]
    ba08:	221a      	movs	r2, #26
    ba0a:	2102      	movs	r1, #2
    ba0c:	4630      	mov	r0, r6
    ba0e:	f00f f902 	bl	1ac16 <ll_conn_update>
		return;
    ba12:	e669      	b.n	b6e8 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    ba14:	220a      	movs	r2, #10
    ba16:	2106      	movs	r1, #6
    ba18:	4628      	mov	r0, r5
    ba1a:	f00e fef6 	bl	1a80a <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    ba1e:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    ba20:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    ba22:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    ba24:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    ba26:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    ba28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    ba2a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    ba2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    ba2e:	8103      	strh	r3, [r0, #8]
    ba30:	e65a      	b.n	b6e8 <hci_evt_encode+0xfc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ba32:	4b1d      	ldr	r3, [pc, #116]	; (baa8 <hci_evt_encode+0x4bc>)
    ba34:	6858      	ldr	r0, [r3, #4]
    ba36:	2100      	movs	r1, #0
    ba38:	460a      	mov	r2, r1
    ba3a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    ba3e:	4313      	orrs	r3, r2
    ba40:	f43f ae52 	beq.w	b6e8 <hci_evt_encode+0xfc>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    ba44:	4b19      	ldr	r3, [pc, #100]	; (baac <hci_evt_encode+0x4c0>)
    ba46:	6818      	ldr	r0, [r3, #0]
    ba48:	460b      	mov	r3, r1
    ba4a:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ba4e:	4313      	orrs	r3, r2
    ba50:	f43f ae4a 	beq.w	b6e8 <hci_evt_encode+0xfc>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    ba54:	220a      	movs	r2, #10
    ba56:	2107      	movs	r1, #7
    ba58:	4628      	mov	r0, r5
    ba5a:	f00e fed6 	bl	1a80a <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    ba5e:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    ba60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    ba62:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    ba64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    ba66:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    ba68:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    ba6a:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    ba6c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    ba6e:	e7de      	b.n	ba2e <hci_evt_encode+0x442>
		le_unknown_rsp(pdu_data, handle, buf);
    ba70:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
	switch (pdu_data->llctrl.unknown_rsp.type) {
    ba74:	290e      	cmp	r1, #14
    ba76:	d104      	bne.n	ba82 <hci_evt_encode+0x496>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    ba78:	462b      	mov	r3, r5
    ba7a:	4632      	mov	r2, r6
    ba7c:	2100      	movs	r1, #0
    ba7e:	201a      	movs	r0, #26
    ba80:	e7a7      	b.n	b9d2 <hci_evt_encode+0x3e6>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    ba82:	2302      	movs	r3, #2
    ba84:	f04f 0200 	mov.w	r2, #0
    ba88:	f363 0207 	bfi	r2, r3, #0, #8
    ba8c:	4808      	ldr	r0, [pc, #32]	; (bab0 <hci_evt_encode+0x4c4>)
    ba8e:	4b09      	ldr	r3, [pc, #36]	; (bab4 <hci_evt_encode+0x4c8>)
    ba90:	1a1b      	subs	r3, r3, r0
    ba92:	08db      	lsrs	r3, r3, #3
    ba94:	f363 128f 	bfi	r2, r3, #6, #10
    ba98:	4807      	ldr	r0, [pc, #28]	; (bab8 <hci_evt_encode+0x4cc>)
    ba9a:	f00c fda6 	bl	185ea <log_1>
    ba9e:	e623      	b.n	b6e8 <hci_evt_encode+0xfc>
		LL_ASSERT(0);
    baa0:	f640 5372 	movw	r3, #3442	; 0xd72
    baa4:	e731      	b.n	b90a <hci_evt_encode+0x31e>
    baa6:	bf00      	nop
    baa8:	2000cb60 	.word	0x2000cb60
    baac:	2000cb68 	.word	0x2000cb68
    bab0:	0001e448 	.word	0x0001e448
    bab4:	0001e488 	.word	0x0001e488
    bab8:	00020881 	.word	0x00020881

0000babc <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    babc:	4b08      	ldr	r3, [pc, #32]	; (bae0 <hci_init+0x24>)
    babe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bac2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    bac6:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    baca:	4b06      	ldr	r3, [pc, #24]	; (bae4 <hci_init+0x28>)
    bacc:	2000      	movs	r0, #0
    bace:	2100      	movs	r1, #0
    bad0:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    bad4:	4b04      	ldr	r3, [pc, #16]	; (bae8 <hci_init+0x2c>)
    bad6:	201f      	movs	r0, #31
    bad8:	2100      	movs	r1, #0
    bada:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    bade:	4770      	bx	lr
    bae0:	2000cb60 	.word	0x2000cb60
    bae4:	20000000 	.word	0x20000000
    bae8:	2000cb68 	.word	0x2000cb68

0000baec <bt_rand>:
#include "hal/ecb.h"

static struct device *entropy_driver;

int bt_rand(void *buf, size_t len)
{
    baec:	b570      	push	{r4, r5, r6, lr}
	struct device *dev = entropy_driver;
    baee:	4c08      	ldr	r4, [pc, #32]	; (bb10 <bt_rand+0x24>)
{
    baf0:	4605      	mov	r5, r0
	struct device *dev = entropy_driver;
    baf2:	6820      	ldr	r0, [r4, #0]
{
    baf4:	460e      	mov	r6, r1

	if (unlikely(!dev)) {
    baf6:	b918      	cbnz	r0, bb00 <bt_rand+0x14>
    baf8:	4806      	ldr	r0, [pc, #24]	; (bb14 <bt_rand+0x28>)
    bafa:	f00a fe6b 	bl	167d4 <z_impl_device_get_binding>
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
    bafe:	6020      	str	r0, [r4, #0]
	return api->get_entropy(dev, buffer, length);
    bb00:	6843      	ldr	r3, [r0, #4]
    bb02:	b2b2      	uxth	r2, r6
    bb04:	4629      	mov	r1, r5
    bb06:	681b      	ldr	r3, [r3, #0]
	}

	return entropy_get_entropy(dev, (u8_t *)buf, len);
}
    bb08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bb0c:	4718      	bx	r3
    bb0e:	bf00      	nop
    bb10:	200006d8 	.word	0x200006d8
    bb14:	000208ac 	.word	0x000208ac

0000bb18 <ll_rx_link_inc_quota>:
	rx_alloc(UINT8_MAX);
}

static inline void ll_rx_link_inc_quota(int8_t delta)
{
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    bb18:	2801      	cmp	r0, #1
{
    bb1a:	b538      	push	{r3, r4, r5, lr}
    bb1c:	4604      	mov	r4, r0
    bb1e:	4d0b      	ldr	r5, [pc, #44]	; (bb4c <ll_rx_link_inc_quota+0x34>)
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    bb20:	d10f      	bne.n	bb42 <ll_rx_link_inc_quota+0x2a>
    bb22:	782b      	ldrb	r3, [r5, #0]
    bb24:	2b06      	cmp	r3, #6
    bb26:	d90c      	bls.n	bb42 <ll_rx_link_inc_quota+0x2a>
    bb28:	f240 3369 	movw	r3, #873	; 0x369
    bb2c:	4a08      	ldr	r2, [pc, #32]	; (bb50 <ll_rx_link_inc_quota+0x38>)
    bb2e:	4909      	ldr	r1, [pc, #36]	; (bb54 <ll_rx_link_inc_quota+0x3c>)
    bb30:	4809      	ldr	r0, [pc, #36]	; (bb58 <ll_rx_link_inc_quota+0x40>)
    bb32:	f00c faff 	bl	18134 <printk>
    bb36:	4040      	eors	r0, r0
    bb38:	f380 8811 	msr	BASEPRI, r0
    bb3c:	f04f 0003 	mov.w	r0, #3
    bb40:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    bb42:	782b      	ldrb	r3, [r5, #0]
    bb44:	441c      	add	r4, r3
    bb46:	702c      	strb	r4, [r5, #0]
}
    bb48:	bd38      	pop	{r3, r4, r5, pc}
    bb4a:	bf00      	nop
    bb4c:	200007cc 	.word	0x200007cc
    bb50:	00020911 	.word	0x00020911
    bb54:	00020945 	.word	0x00020945
    bb58:	0001ff46 	.word	0x0001ff46

0000bb5c <rx_alloc>:

	return done;
}

static inline void rx_alloc(u8_t max)
{
    bb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8_t idx;

#if defined(CONFIG_BT_CONN)
	while (mem_link_rx.quota_pdu &&
    bb60:	4e31      	ldr	r6, [pc, #196]	; (bc28 <rx_alloc+0xcc>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    bb62:	4f32      	ldr	r7, [pc, #200]	; (bc2c <rx_alloc+0xd0>)
{
    bb64:	4680      	mov	r8, r0
    bb66:	46b1      	mov	r9, r6
	while (mem_link_rx.quota_pdu &&
    bb68:	7833      	ldrb	r3, [r6, #0]
    bb6a:	b1b3      	cbz	r3, bb9a <rx_alloc+0x3e>
 */
static inline bool mfifo_enqueue_idx_get(u8_t count, u8_t first, u8_t last,
					 u8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
    bb6c:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
    bb6e:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    bb70:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    bb72:	3401      	adds	r4, #1
    bb74:	b2e4      	uxtb	r4, r4
		last = 0U;
    bb76:	42a2      	cmp	r2, r4
    bb78:	bf08      	it	eq
    bb7a:	2400      	moveq	r4, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
    bb7c:	42a3      	cmp	r3, r4
    bb7e:	d00c      	beq.n	bb9a <rx_alloc+0x3e>
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
    bb80:	482b      	ldr	r0, [pc, #172]	; (bc30 <rx_alloc+0xd4>)
    bb82:	f00e fc69 	bl	1a458 <mem_acquire>
		if (!link) {
    bb86:	4605      	mov	r5, r0
    bb88:	b138      	cbz	r0, bb9a <rx_alloc+0x3e>
			break;
		}

		rx = mem_acquire(&mem_pdu_rx.free);
    bb8a:	482a      	ldr	r0, [pc, #168]	; (bc34 <rx_alloc+0xd8>)
    bb8c:	f00e fc64 	bl	1a458 <mem_acquire>
		if (!rx) {
    bb90:	bb00      	cbnz	r0, bbd4 <rx_alloc+0x78>
			mem_release(link, &mem_link_rx.free);
    bb92:	4927      	ldr	r1, [pc, #156]	; (bc30 <rx_alloc+0xd4>)
    bb94:	4628      	mov	r0, r5
    bb96:	f00e fc78 	bl	1a48a <mem_release>

		ll_rx_link_inc_quota(-1);
	}
#endif /* CONFIG_BT_CONN */

	if (max > mem_link_rx.quota_pdu) {
    bb9a:	f899 6000 	ldrb.w	r6, [r9]

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
    bb9e:	4f24      	ldr	r7, [pc, #144]	; (bc30 <rx_alloc+0xd4>)
    bba0:	4546      	cmp	r6, r8
    bba2:	bf28      	it	cs
    bba4:	4646      	movcs	r6, r8
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bba6:	f8df 8090 	ldr.w	r8, [pc, #144]	; bc38 <rx_alloc+0xdc>
    bbaa:	b18e      	cbz	r6, bbd0 <rx_alloc+0x74>
	last = last + 1;
    bbac:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
    bbb0:	f898 2001 	ldrb.w	r2, [r8, #1]
    bbb4:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    bbb8:	3401      	adds	r4, #1
    bbba:	b2e4      	uxtb	r4, r4
		last = 0U;
    bbbc:	42a2      	cmp	r2, r4
    bbbe:	bf08      	it	eq
    bbc0:	2400      	moveq	r4, #0
	if (last == first) {
    bbc2:	42a3      	cmp	r3, r4
    bbc4:	d004      	beq.n	bbd0 <rx_alloc+0x74>
		link = mem_acquire(&mem_link_rx.free);
    bbc6:	4638      	mov	r0, r7
    bbc8:	f00e fc46 	bl	1a458 <mem_acquire>
		if (!link) {
    bbcc:	4605      	mov	r5, r0
    bbce:	b978      	cbnz	r0, bbf0 <rx_alloc+0x94>

		MFIFO_BY_IDX_ENQUEUE(pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
	}
}
    bbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link->mem = NULL;
    bbd4:	2300      	movs	r3, #0
    bbd6:	606b      	str	r3, [r5, #4]
		rx->link = link;
    bbd8:	6005      	str	r5, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(u8_t *fifo, u8_t size, u8_t idx,
					void *mem, u8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bbda:	78fa      	ldrb	r2, [r7, #3]
    bbdc:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bbde:	fb02 7303 	mla	r3, r2, r3, r7
    bbe2:	6058      	str	r0, [r3, #4]

	*last = idx; /* Commit: Update write index */
    bbe4:	70fc      	strb	r4, [r7, #3]
		ll_rx_link_inc_quota(-1);
    bbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bbea:	f7ff ff95 	bl	bb18 <ll_rx_link_inc_quota>
    bbee:	e7bb      	b.n	bb68 <rx_alloc+0xc>
		rx = mem_acquire(&mem_pdu_rx.free);
    bbf0:	4810      	ldr	r0, [pc, #64]	; (bc34 <rx_alloc+0xd8>)
    bbf2:	f00e fc31 	bl	1a458 <mem_acquire>
		if (!rx) {
    bbf6:	b928      	cbnz	r0, bc04 <rx_alloc+0xa8>
			mem_release(link, &mem_link_rx.free);
    bbf8:	4628      	mov	r0, r5
    bbfa:	490d      	ldr	r1, [pc, #52]	; (bc30 <rx_alloc+0xd4>)
}
    bbfc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
    bc00:	f00e bc43 	b.w	1a48a <mem_release>
		rx->link = link;
    bc04:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bc06:	f898 2003 	ldrb.w	r2, [r8, #3]
    bc0a:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bc0e:	fb02 8303 	mla	r3, r2, r3, r8
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc12:	3e01      	subs	r6, #1
    bc14:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    bc16:	f888 4003 	strb.w	r4, [r8, #3]
		ll_rx_link_inc_quota(-1);
    bc1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc1e:	b2f6      	uxtb	r6, r6
		ll_rx_link_inc_quota(-1);
    bc20:	f7ff ff7a 	bl	bb18 <ll_rx_link_inc_quota>
    bc24:	e7c1      	b.n	bbaa <rx_alloc+0x4e>
    bc26:	bf00      	nop
    bc28:	200007cc 	.word	0x200007cc
    bc2c:	2000cc7c 	.word	0x2000cc7c
    bc30:	200007d0 	.word	0x200007d0
    bc34:	20000824 	.word	0x20000824
    bc38:	2000cc90 	.word	0x2000cc90

0000bc3c <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    bc3c:	4b3a      	ldr	r3, [pc, #232]	; (bd28 <init_reset+0xec>)
{
    bc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    bc42:	1d18      	adds	r0, r3, #4
    bc44:	2203      	movs	r2, #3
    bc46:	2138      	movs	r1, #56	; 0x38
    bc48:	f00e fbe2 	bl	1a410 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    bc4c:	4b37      	ldr	r3, [pc, #220]	; (bd2c <init_reset+0xf0>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    bc4e:	4d38      	ldr	r5, [pc, #224]	; (bd30 <init_reset+0xf4>)
		link = mem_acquire(&mem_link_done.free);
    bc50:	f8df 80d8 	ldr.w	r8, [pc, #216]	; bd2c <init_reset+0xf0>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    bc54:	2203      	movs	r2, #3
    bc56:	2108      	movs	r1, #8
    bc58:	1d18      	adds	r0, r3, #4
    bc5a:	f00e fbd9 	bl	1a410 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    bc5e:	462e      	mov	r6, r5
	last = last + 1;
    bc60:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    bc62:	786a      	ldrb	r2, [r5, #1]
    bc64:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    bc66:	3401      	adds	r4, #1
    bc68:	b2e4      	uxtb	r4, r4
		last = 0U;
    bc6a:	42a2      	cmp	r2, r4
    bc6c:	bf08      	it	eq
    bc6e:	2400      	moveq	r4, #0
	if (last == first) {
    bc70:	429c      	cmp	r4, r3
    bc72:	d00d      	beq.n	bc90 <init_reset+0x54>
		link = mem_acquire(&mem_link_done.free);
    bc74:	4640      	mov	r0, r8
    bc76:	f00e fbef 	bl	1a458 <mem_acquire>
		if (!link) {
    bc7a:	4607      	mov	r7, r0
    bc7c:	b140      	cbz	r0, bc90 <init_reset+0x54>
		rx = mem_acquire(&mem_done.free);
    bc7e:	482a      	ldr	r0, [pc, #168]	; (bd28 <init_reset+0xec>)
    bc80:	f00e fbea 	bl	1a458 <mem_acquire>
		if (!rx) {
    bc84:	2800      	cmp	r0, #0
    bc86:	d146      	bne.n	bd16 <init_reset+0xda>
			mem_release(link, &mem_link_done.free);
    bc88:	4928      	ldr	r1, [pc, #160]	; (bd2c <init_reset+0xf0>)
    bc8a:	4638      	mov	r0, r7
    bc8c:	f00e fbfd 	bl	1a48a <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    bc90:	4b28      	ldr	r3, [pc, #160]	; (bd34 <init_reset+0xf8>)
    bc92:	2208      	movs	r2, #8
    bc94:	1d18      	adds	r0, r3, #4
    bc96:	214c      	movs	r1, #76	; 0x4c
    bc98:	f00e fbba 	bl	1a410 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    bc9c:	4b26      	ldr	r3, [pc, #152]	; (bd38 <init_reset+0xfc>)
    bc9e:	220a      	movs	r2, #10
    bca0:	1d18      	adds	r0, r3, #4
    bca2:	2108      	movs	r1, #8
    bca4:	f00e fbb4 	bl	1a410 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    bca8:	4823      	ldr	r0, [pc, #140]	; (bd38 <init_reset+0xfc>)
    bcaa:	f00e fbd5 	bl	1a458 <mem_acquire>
	LL_ASSERT(link);
    bcae:	4604      	mov	r4, r0
    bcb0:	b960      	cbnz	r0, bccc <init_reset+0x90>
    bcb2:	f240 43bb 	movw	r3, #1211	; 0x4bb
    bcb6:	4a21      	ldr	r2, [pc, #132]	; (bd3c <init_reset+0x100>)
    bcb8:	4921      	ldr	r1, [pc, #132]	; (bd40 <init_reset+0x104>)
    bcba:	4822      	ldr	r0, [pc, #136]	; (bd44 <init_reset+0x108>)
    bcbc:	f00c fa3a 	bl	18134 <printk>
    bcc0:	4040      	eors	r0, r0
    bcc2:	f380 8811 	msr	BASEPRI, r0
    bcc6:	f04f 0003 	mov.w	r0, #3
    bcca:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
    bccc:	4a1e      	ldr	r2, [pc, #120]	; (bd48 <init_reset+0x10c>)
    bcce:	4620      	mov	r0, r4
    bcd0:	1f11      	subs	r1, r2, #4
    bcd2:	f00e fc11 	bl	1a4f8 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    bcd6:	4818      	ldr	r0, [pc, #96]	; (bd38 <init_reset+0xfc>)
    bcd8:	f00e fbbe 	bl	1a458 <mem_acquire>
	LL_ASSERT(link);
    bcdc:	4604      	mov	r4, r0
    bcde:	b960      	cbnz	r0, bcfa <init_reset+0xbe>
    bce0:	f240 43c2 	movw	r3, #1218	; 0x4c2
    bce4:	4a15      	ldr	r2, [pc, #84]	; (bd3c <init_reset+0x100>)
    bce6:	4916      	ldr	r1, [pc, #88]	; (bd40 <init_reset+0x104>)
    bce8:	4816      	ldr	r0, [pc, #88]	; (bd44 <init_reset+0x108>)
    bcea:	f00c fa23 	bl	18134 <printk>
    bcee:	4040      	eors	r0, r0
    bcf0:	f380 8811 	msr	BASEPRI, r0
    bcf4:	f04f 0003 	mov.w	r0, #3
    bcf8:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
    bcfa:	4a14      	ldr	r2, [pc, #80]	; (bd4c <init_reset+0x110>)
    bcfc:	4620      	mov	r0, r4
    bcfe:	1f11      	subs	r1, r2, #4
    bd00:	f00e fbfa 	bl	1a4f8 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    bd04:	4b12      	ldr	r3, [pc, #72]	; (bd50 <init_reset+0x114>)
    bd06:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
    bd08:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    bd0a:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    bd0c:	f7ff ff26 	bl	bb5c <rx_alloc>
}
    bd10:	2000      	movs	r0, #0
    bd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
    bd16:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bd18:	78f2      	ldrb	r2, [r6, #3]
    bd1a:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bd1c:	fb02 6303 	mla	r3, r2, r3, r6
    bd20:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    bd22:	70f4      	strb	r4, [r6, #3]
    bd24:	e79c      	b.n	bc60 <init_reset+0x24>
    bd26:	bf00      	nop
    bd28:	20000704 	.word	0x20000704
    bd2c:	200007b0 	.word	0x200007b0
    bd30:	2000cc68 	.word	0x2000cc68
    bd34:	20000824 	.word	0x20000824
    bd38:	200007d0 	.word	0x200007d0
    bd3c:	00020911 	.word	0x00020911
    bd40:	00020dbb 	.word	0x00020dbb
    bd44:	0001ff46 	.word	0x0001ff46
    bd48:	20000a94 	.word	0x20000a94
    bd4c:	20000a8c 	.word	0x20000a8c
    bd50:	200007cc 	.word	0x200007cc

0000bd54 <perform_lll_reset>:
{
    bd54:	b510      	push	{r4, lr}
    bd56:	4604      	mov	r4, r0
	err = lll_reset();
    bd58:	f00e fe17 	bl	1a98a <lll_reset>
	LL_ASSERT(!err);
    bd5c:	b160      	cbz	r0, bd78 <perform_lll_reset+0x24>
    bd5e:	f240 43d4 	movw	r3, #1236	; 0x4d4
    bd62:	4a18      	ldr	r2, [pc, #96]	; (bdc4 <perform_lll_reset+0x70>)
    bd64:	4918      	ldr	r1, [pc, #96]	; (bdc8 <perform_lll_reset+0x74>)
    bd66:	4819      	ldr	r0, [pc, #100]	; (bdcc <perform_lll_reset+0x78>)
    bd68:	f00c f9e4 	bl	18134 <printk>
    bd6c:	4040      	eors	r0, r0
    bd6e:	f380 8811 	msr	BASEPRI, r0
    bd72:	f04f 0003 	mov.w	r0, #3
    bd76:	df02      	svc	2
	err = lll_adv_reset();
    bd78:	f00e fec3 	bl	1ab02 <lll_adv_reset>
	LL_ASSERT(!err);
    bd7c:	b160      	cbz	r0, bd98 <perform_lll_reset+0x44>
    bd7e:	f240 43d9 	movw	r3, #1241	; 0x4d9
    bd82:	4a10      	ldr	r2, [pc, #64]	; (bdc4 <perform_lll_reset+0x70>)
    bd84:	4910      	ldr	r1, [pc, #64]	; (bdc8 <perform_lll_reset+0x74>)
    bd86:	4811      	ldr	r0, [pc, #68]	; (bdcc <perform_lll_reset+0x78>)
    bd88:	f00c f9d4 	bl	18134 <printk>
    bd8c:	4040      	eors	r0, r0
    bd8e:	f380 8811 	msr	BASEPRI, r0
    bd92:	f04f 0003 	mov.w	r0, #3
    bd96:	df02      	svc	2
	err = lll_conn_reset();
    bd98:	f00f f8e8 	bl	1af6c <lll_conn_reset>
	LL_ASSERT(!err);
    bd9c:	b160      	cbz	r0, bdb8 <perform_lll_reset+0x64>
    bd9e:	f240 43e5 	movw	r3, #1253	; 0x4e5
    bda2:	4a08      	ldr	r2, [pc, #32]	; (bdc4 <perform_lll_reset+0x70>)
    bda4:	4908      	ldr	r1, [pc, #32]	; (bdc8 <perform_lll_reset+0x74>)
    bda6:	4809      	ldr	r0, [pc, #36]	; (bdcc <perform_lll_reset+0x78>)
    bda8:	f00c f9c4 	bl	18134 <printk>
    bdac:	4040      	eors	r0, r0
    bdae:	f380 8811 	msr	BASEPRI, r0
    bdb2:	f04f 0003 	mov.w	r0, #3
    bdb6:	df02      	svc	2
	z_impl_k_sem_give(sem);
    bdb8:	4620      	mov	r0, r4
}
    bdba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bdbe:	f00b babf 	b.w	17340 <z_impl_k_sem_give>
    bdc2:	bf00      	nop
    bdc4:	00020911 	.word	0x00020911
    bdc8:	000209bb 	.word	0x000209bb
    bdcc:	0001ff46 	.word	0x0001ff46

0000bdd0 <tx_cmplt_get>:

#if defined(CONFIG_BT_CONN)
static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    bdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bdd4:	460d      	mov	r5, r1
	struct lll_tx *tx;
	u8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    bdd6:	4e28      	ldr	r6, [pc, #160]	; (be78 <tx_cmplt_get+0xa8>)
					   u8_t first, u8_t last, u8_t *idx)
{
	void *p;
	u8_t i;

	if (*idx >= count) {
    bdd8:	782b      	ldrb	r3, [r5, #0]
    bdda:	7871      	ldrb	r1, [r6, #1]
    bddc:	428b      	cmp	r3, r1
    bdde:	bf28      	it	cs
    bde0:	78b3      	ldrbcs	r3, [r6, #2]
{
    bde2:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    bde4:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
    bde6:	bf28      	it	cs
    bde8:	702b      	strbcs	r3, [r5, #0]
	}

	if (*idx == last) {
    bdea:	782b      	ldrb	r3, [r5, #0]
    bdec:	429a      	cmp	r2, r3
{
    bdee:	4691      	mov	r9, r2
    bdf0:	d103      	bne.n	bdfa <tx_cmplt_get+0x2a>
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
		return 0;
    bdf2:	2700      	movs	r7, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);

	return cmplt;
}
    bdf4:	4638      	mov	r0, r7
    bdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
    bdfa:	1c5a      	adds	r2, r3, #1
    bdfc:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    bdfe:	4c1f      	ldr	r4, [pc, #124]	; (be7c <tx_cmplt_get+0xac>)
		i = 0U;
    be00:	4291      	cmp	r1, r2
    be02:	bf08      	it	eq
    be04:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    be06:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
    be0a:	702a      	strb	r2, [r5, #0]
	if (!tx) {
    be0c:	18e2      	adds	r2, r4, r3
    be0e:	d0f0      	beq.n	bdf2 <tx_cmplt_get+0x22>
	*handle = tx->handle;
    be10:	5ae3      	ldrh	r3, [r4, r3]
    be12:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
    be16:	2700      	movs	r7, #0
		node_tx = tx->node;
    be18:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    be1a:	2801      	cmp	r0, #1
    be1c:	f020 0103 	bic.w	r1, r0, #3
    be20:	d906      	bls.n	be30 <tx_cmplt_get+0x60>
    be22:	b331      	cbz	r1, be72 <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    be24:	7903      	ldrb	r3, [r0, #4]
    be26:	f003 0303 	and.w	r3, r3, #3
		    (((u32_t)node_tx & ~3) &&
    be2a:	3b01      	subs	r3, #1
    be2c:	2b01      	cmp	r3, #1
    be2e:	d820      	bhi.n	be72 <tx_cmplt_get+0xa2>
			cmplt++;
    be30:	3701      	adds	r7, #1
    be32:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
    be34:	2301      	movs	r3, #1
    be36:	6053      	str	r3, [r2, #4]
		if (((u32_t)node_tx & ~3)) {
    be38:	b109      	cbz	r1, be3e <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
    be3a:	f002 fa9b 	bl	e374 <ll_tx_mem_release>
	if (*idx >= count) {
    be3e:	782b      	ldrb	r3, [r5, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    be40:	7872      	ldrb	r2, [r6, #1]
    be42:	7830      	ldrb	r0, [r6, #0]
    be44:	4293      	cmp	r3, r2
    be46:	bf24      	itt	cs
    be48:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
    be4a:	702b      	strbcs	r3, [r5, #0]
	if (*idx == last) {
    be4c:	782b      	ldrb	r3, [r5, #0]
    be4e:	4599      	cmp	r9, r3
    be50:	d0d0      	beq.n	bdf4 <tx_cmplt_get+0x24>
	i = *idx + 1;
    be52:	1c59      	adds	r1, r3, #1
    be54:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
    be56:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    be5a:	428a      	cmp	r2, r1
    be5c:	bf08      	it	eq
    be5e:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
    be60:	18e2      	adds	r2, r4, r3
	*idx = i;
    be62:	7029      	strb	r1, [r5, #0]
    be64:	d0c6      	beq.n	bdf4 <tx_cmplt_get+0x24>
    be66:	5ae3      	ldrh	r3, [r4, r3]
    be68:	f8b8 1000 	ldrh.w	r1, [r8]
    be6c:	4299      	cmp	r1, r3
    be6e:	d0d3      	beq.n	be18 <tx_cmplt_get+0x48>
    be70:	e7c0      	b.n	bdf4 <tx_cmplt_get+0x24>
			tx->node = (void *)2;
    be72:	2302      	movs	r3, #2
    be74:	e7df      	b.n	be36 <tx_cmplt_get+0x66>
    be76:	bf00      	nop
    be78:	2000cdcc 	.word	0x2000cdcc
    be7c:	2000cdd0 	.word	0x2000cdd0

0000be80 <ll_init>:
{
    be80:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
    be82:	4b28      	ldr	r3, [pc, #160]	; (bf24 <ll_init+0xa4>)
{
    be84:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    be86:	6018      	str	r0, [r3, #0]
	cntr_init();
    be88:	f005 fd86 	bl	11998 <cntr_init>
	mayfly_init();
    be8c:	f7fd fe26 	bl	9adc <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    be90:	4a25      	ldr	r2, [pc, #148]	; (bf28 <ll_init+0xa8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    be92:	2102      	movs	r1, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    be94:	2303      	movs	r3, #3
    be96:	7013      	strb	r3, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    be98:	7411      	strb	r1, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    be9a:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    be9c:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    be9e:	4923      	ldr	r1, [pc, #140]	; (bf2c <ll_init+0xac>)
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    bea0:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bea2:	9105      	str	r1, [sp, #20]
    bea4:	4922      	ldr	r1, [pc, #136]	; (bf30 <ll_init+0xb0>)
    bea6:	9104      	str	r1, [sp, #16]
    bea8:	4922      	ldr	r1, [pc, #136]	; (bf34 <ll_init+0xb4>)
    beaa:	9103      	str	r1, [sp, #12]
    beac:	4922      	ldr	r1, [pc, #136]	; (bf38 <ll_init+0xb8>)
    beae:	9102      	str	r1, [sp, #8]
    beb0:	210b      	movs	r1, #11
    beb2:	e9cd 2100 	strd	r2, r1, [sp]
    beb6:	2000      	movs	r0, #0
    beb8:	4a20      	ldr	r2, [pc, #128]	; (bf3c <ll_init+0xbc>)
    beba:	4619      	mov	r1, r3
    bebc:	f7fe fa84 	bl	a3c8 <ticker_init>
	LL_ASSERT(!err);
    bec0:	b160      	cbz	r0, bedc <ll_init+0x5c>
    bec2:	f240 130f 	movw	r3, #271	; 0x10f
    bec6:	4a1e      	ldr	r2, [pc, #120]	; (bf40 <ll_init+0xc0>)
    bec8:	491e      	ldr	r1, [pc, #120]	; (bf44 <ll_init+0xc4>)
    beca:	481f      	ldr	r0, [pc, #124]	; (bf48 <ll_init+0xc8>)
    becc:	f00c f932 	bl	18134 <printk>
    bed0:	4040      	eors	r0, r0
    bed2:	f380 8811 	msr	BASEPRI, r0
    bed6:	f04f 0003 	mov.w	r0, #3
    beda:	df02      	svc	2
	z_impl_k_sem_init(sem, initial_count, limit);
    bedc:	2201      	movs	r2, #1
    bede:	2100      	movs	r1, #0
    bee0:	481a      	ldr	r0, [pc, #104]	; (bf4c <ll_init+0xcc>)
    bee2:	f011 ff7e 	bl	1dde2 <z_impl_k_sem_init>
	err = lll_init();
    bee6:	f000 ff1d 	bl	cd24 <lll_init>
	if (err) {
    beea:	4604      	mov	r4, r0
    beec:	b9b0      	cbnz	r0, bf1c <ll_init+0x9c>
	err = init_reset();
    beee:	f7ff fea5 	bl	bc3c <init_reset>
	if (err) {
    bef2:	4604      	mov	r4, r0
    bef4:	b990      	cbnz	r0, bf1c <ll_init+0x9c>
	err = lll_adv_init();
    bef6:	f00e fe02 	bl	1aafe <lll_adv_init>
	if (err) {
    befa:	4604      	mov	r4, r0
    befc:	b970      	cbnz	r0, bf1c <ll_init+0x9c>
	err = ull_adv_init();
    befe:	f00e fd70 	bl	1a9e2 <ull_adv_init>
	if (err) {
    bf02:	4604      	mov	r4, r0
    bf04:	b950      	cbnz	r0, bf1c <ll_init+0x9c>
	err = lll_conn_init();
    bf06:	f00f f82f 	bl	1af68 <lll_conn_init>
	if (err) {
    bf0a:	4604      	mov	r4, r0
    bf0c:	b930      	cbnz	r0, bf1c <ll_init+0x9c>
	err = ull_conn_init();
    bf0e:	f002 fabb 	bl	e488 <ull_conn_init>
	if (err) {
    bf12:	4604      	mov	r4, r0
    bf14:	b910      	cbnz	r0, bf1c <ll_init+0x9c>
		ull_filter_reset(true);
    bf16:	2001      	movs	r0, #1
    bf18:	f005 fbea 	bl	116f0 <ull_filter_reset>
}
    bf1c:	4620      	mov	r0, r4
    bf1e:	b006      	add	sp, #24
    bf20:	bd10      	pop	{r4, pc}
    bf22:	bf00      	nop
    bf24:	20000a98 	.word	0x20000a98
    bf28:	20000d74 	.word	0x20000d74
    bf2c:	0001b1b5 	.word	0x0001b1b5
    bf30:	00012379 	.word	0x00012379
    bf34:	00012321 	.word	0x00012321
    bf38:	20000b64 	.word	0x20000b64
    bf3c:	20000ab4 	.word	0x20000ab4
    bf40:	00020911 	.word	0x00020911
    bf44:	000209bb 	.word	0x000209bb
    bf48:	0001ff46 	.word	0x0001ff46
    bf4c:	20000a9c 	.word	0x20000a9c

0000bf50 <ll_reset>:
{
    bf50:	b510      	push	{r4, lr}
    bf52:	b086      	sub	sp, #24
	err = ull_adv_reset();
    bf54:	f00e fd47 	bl	1a9e6 <ull_adv_reset>
	LL_ASSERT(!err);
    bf58:	b160      	cbz	r0, bf74 <ll_reset+0x24>
    bf5a:	f240 135d 	movw	r3, #349	; 0x15d
    bf5e:	4a2d      	ldr	r2, [pc, #180]	; (c014 <ll_reset+0xc4>)
    bf60:	492d      	ldr	r1, [pc, #180]	; (c018 <ll_reset+0xc8>)
    bf62:	482e      	ldr	r0, [pc, #184]	; (c01c <ll_reset+0xcc>)
    bf64:	f00c f8e6 	bl	18134 <printk>
    bf68:	4040      	eors	r0, r0
    bf6a:	f380 8811 	msr	BASEPRI, r0
    bf6e:	f04f 0003 	mov.w	r0, #3
    bf72:	df02      	svc	2
	err = ull_conn_reset();
    bf74:	f002 fa9a 	bl	e4ac <ull_conn_reset>
	LL_ASSERT(!err);
    bf78:	b160      	cbz	r0, bf94 <ll_reset+0x44>
    bf7a:	f240 137d 	movw	r3, #381	; 0x17d
    bf7e:	4a25      	ldr	r2, [pc, #148]	; (c014 <ll_reset+0xc4>)
    bf80:	4925      	ldr	r1, [pc, #148]	; (c018 <ll_reset+0xc8>)
    bf82:	4826      	ldr	r0, [pc, #152]	; (c01c <ll_reset+0xcc>)
    bf84:	f00c f8d6 	bl	18134 <printk>
    bf88:	4040      	eors	r0, r0
    bf8a:	f380 8811 	msr	BASEPRI, r0
    bf8e:	f04f 0003 	mov.w	r0, #3
    bf92:	df02      	svc	2
	MFIFO_INIT(tx_ack);
    bf94:	4b22      	ldr	r3, [pc, #136]	; (c020 <ll_reset+0xd0>)
    bf96:	2400      	movs	r4, #0
    bf98:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    bf9a:	4620      	mov	r0, r4
    bf9c:	f005 fba8 	bl	116f0 <ull_filter_reset>
	MFIFO_INIT(prep);
    bfa0:	4b20      	ldr	r3, [pc, #128]	; (c024 <ll_reset+0xd4>)
    bfa2:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
    bfa4:	4b20      	ldr	r3, [pc, #128]	; (c028 <ll_reset+0xd8>)
    bfa6:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    bfa8:	4b20      	ldr	r3, [pc, #128]	; (c02c <ll_reset+0xdc>)
    bfaa:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    bfac:	4b20      	ldr	r3, [pc, #128]	; (c030 <ll_reset+0xe0>)
    bfae:	805c      	strh	r4, [r3, #2]
    bfb0:	2201      	movs	r2, #1
    bfb2:	4621      	mov	r1, r4
    bfb4:	4668      	mov	r0, sp
    bfb6:	f011 ff14 	bl	1dde2 <z_impl_k_sem_init>
		mfy.param = &sem;
    bfba:	4b1e      	ldr	r3, [pc, #120]	; (c034 <ll_reset+0xe4>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    bfbc:	4622      	mov	r2, r4
    bfbe:	4621      	mov	r1, r4
    bfc0:	2003      	movs	r0, #3
		mfy.param = &sem;
    bfc2:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    bfc6:	f7fd fddb 	bl	9b80 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bfca:	b160      	cbz	r0, bfe6 <ll_reset+0x96>
    bfcc:	f240 13af 	movw	r3, #431	; 0x1af
    bfd0:	4a10      	ldr	r2, [pc, #64]	; (c014 <ll_reset+0xc4>)
    bfd2:	4919      	ldr	r1, [pc, #100]	; (c038 <ll_reset+0xe8>)
    bfd4:	4811      	ldr	r0, [pc, #68]	; (c01c <ll_reset+0xcc>)
    bfd6:	f00c f8ad 	bl	18134 <printk>
    bfda:	4040      	eors	r0, r0
    bfdc:	f380 8811 	msr	BASEPRI, r0
    bfe0:	f04f 0003 	mov.w	r0, #3
    bfe4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    bfe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bfea:	4668      	mov	r0, sp
    bfec:	f00b f9d4 	bl	17398 <z_impl_k_sem_take>
	err = init_reset();
    bff0:	f7ff fe24 	bl	bc3c <init_reset>
	LL_ASSERT(!err);
    bff4:	b160      	cbz	r0, c010 <ll_reset+0xc0>
    bff6:	f240 13bb 	movw	r3, #443	; 0x1bb
    bffa:	4a06      	ldr	r2, [pc, #24]	; (c014 <ll_reset+0xc4>)
    bffc:	4906      	ldr	r1, [pc, #24]	; (c018 <ll_reset+0xc8>)
    bffe:	4807      	ldr	r0, [pc, #28]	; (c01c <ll_reset+0xcc>)
    c000:	f00c f898 	bl	18134 <printk>
    c004:	4040      	eors	r0, r0
    c006:	f380 8811 	msr	BASEPRI, r0
    c00a:	f04f 0003 	mov.w	r0, #3
    c00e:	df02      	svc	2
}
    c010:	b006      	add	sp, #24
    c012:	bd10      	pop	{r4, pc}
    c014:	00020911 	.word	0x00020911
    c018:	000209bb 	.word	0x000209bb
    c01c:	0001ff46 	.word	0x0001ff46
    c020:	2000cdcc 	.word	0x2000cdcc
    c024:	2000cca8 	.word	0x2000cca8
    c028:	2000cc68 	.word	0x2000cc68
    c02c:	2000cc90 	.word	0x2000cc90
    c030:	2000cc7c 	.word	0x2000cc7c
    c034:	2000cdf0 	.word	0x2000cdf0
    c038:	000208ca 	.word	0x000208ca

0000c03c <ll_rx_get>:
{
    c03c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    c040:	4d25      	ldr	r5, [pc, #148]	; (c0d8 <ll_rx_get+0x9c>)
    c042:	4e26      	ldr	r6, [pc, #152]	; (c0dc <ll_rx_get+0xa0>)
{
    c044:	4680      	mov	r8, r0
    c046:	460f      	mov	r7, r1
    c048:	46aa      	mov	sl, r5
	*node_rx = NULL;
    c04a:	2300      	movs	r3, #0
    c04c:	f8c8 3000 	str.w	r3, [r8]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    c050:	aa01      	add	r2, sp, #4
    c052:	e9d5 0100 	ldrd	r0, r1, [r5]
    c056:	f00e fa64 	bl	1a522 <memq_peek>
	if (link) {
    c05a:	4681      	mov	r9, r0
    c05c:	b3a0      	cbz	r0, c0c8 <ll_rx_get+0x8c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    c05e:	9b01      	ldr	r3, [sp, #4]
    c060:	491f      	ldr	r1, [pc, #124]	; (c0e0 <ll_rx_get+0xa4>)
    c062:	781a      	ldrb	r2, [r3, #0]
    c064:	4638      	mov	r0, r7
    c066:	f7ff feb3 	bl	bdd0 <tx_cmplt_get>
		if (!cmplt) {
    c06a:	4604      	mov	r4, r0
    c06c:	bb40      	cbnz	r0, c0c0 <ll_rx_get+0x84>
			f = mfifo_tx_ack.f;
    c06e:	78b3      	ldrb	r3, [r6, #2]
    c070:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
    c074:	78f2      	ldrb	r2, [r6, #3]
    c076:	f10d 0101 	add.w	r1, sp, #1
    c07a:	f10d 0002 	add.w	r0, sp, #2
    c07e:	f7ff fea7 	bl	bdd0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    c082:	b9cc      	cbnz	r4, c0b8 <ll_rx_get+0x7c>
			} while ((cmplt_prev != 0U) ||
    c084:	b9c0      	cbnz	r0, c0b8 <ll_rx_get+0x7c>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
    c086:	9b01      	ldr	r3, [sp, #4]
    c088:	791a      	ldrb	r2, [r3, #4]
    c08a:	2a03      	cmp	r2, #3
    c08c:	d116      	bne.n	c0bc <ll_rx_get+0x80>
				(void)memq_dequeue(memq_ll_rx.tail,
    c08e:	4622      	mov	r2, r4
    c090:	4629      	mov	r1, r5
    c092:	f8da 0004 	ldr.w	r0, [sl, #4]
    c096:	f00e fa4c 	bl	1a532 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    c09a:	4912      	ldr	r1, [pc, #72]	; (c0e4 <ll_rx_get+0xa8>)
    c09c:	4648      	mov	r0, r9
    c09e:	f00e f9f4 	bl	1a48a <mem_release>
				ll_rx_link_inc_quota(1);
    c0a2:	2001      	movs	r0, #1
    c0a4:	f7ff fd38 	bl	bb18 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
    c0a8:	9801      	ldr	r0, [sp, #4]
    c0aa:	490f      	ldr	r1, [pc, #60]	; (c0e8 <ll_rx_get+0xac>)
    c0ac:	f00e f9ed 	bl	1a48a <mem_release>
				rx_alloc(1);
    c0b0:	2001      	movs	r0, #1
    c0b2:	f7ff fd53 	bl	bb5c <rx_alloc>
				goto ll_rx_get_again;
    c0b6:	e7c8      	b.n	c04a <ll_rx_get+0xe>
{
    c0b8:	4604      	mov	r4, r0
    c0ba:	e7db      	b.n	c074 <ll_rx_get+0x38>
			*node_rx = rx;
    c0bc:	f8c8 3000 	str.w	r3, [r8]
}
    c0c0:	4620      	mov	r0, r4
    c0c2:	b002      	add	sp, #8
    c0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    c0c8:	78f2      	ldrb	r2, [r6, #3]
    c0ca:	4905      	ldr	r1, [pc, #20]	; (c0e0 <ll_rx_get+0xa4>)
    c0cc:	4638      	mov	r0, r7
    c0ce:	f7ff fe7f 	bl	bdd0 <tx_cmplt_get>
    c0d2:	4604      	mov	r4, r0
    c0d4:	e7f4      	b.n	c0c0 <ll_rx_get+0x84>
    c0d6:	bf00      	nop
    c0d8:	20000a88 	.word	0x20000a88
    c0dc:	2000cdcc 	.word	0x2000cdcc
    c0e0:	2000cdce 	.word	0x2000cdce
    c0e4:	200007d0 	.word	0x200007d0
    c0e8:	20000824 	.word	0x20000824

0000c0ec <ll_rx_dequeue>:
{
    c0ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c0ee:	4954      	ldr	r1, [pc, #336]	; (c240 <ll_rx_dequeue+0x154>)
	struct node_rx_hdr *rx = NULL;
    c0f0:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c0f2:	aa01      	add	r2, sp, #4
    c0f4:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    c0f6:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c0f8:	f00e fa1b 	bl	1a532 <memq_dequeue>
	LL_ASSERT(link);
    c0fc:	4604      	mov	r4, r0
    c0fe:	b960      	cbnz	r0, c11a <ll_rx_dequeue+0x2e>
    c100:	f240 230d 	movw	r3, #525	; 0x20d
    c104:	4a4f      	ldr	r2, [pc, #316]	; (c244 <ll_rx_dequeue+0x158>)
    c106:	4950      	ldr	r1, [pc, #320]	; (c248 <ll_rx_dequeue+0x15c>)
    c108:	4850      	ldr	r0, [pc, #320]	; (c24c <ll_rx_dequeue+0x160>)
    c10a:	f00c f813 	bl	18134 <printk>
    c10e:	4040      	eors	r0, r0
    c110:	f380 8811 	msr	BASEPRI, r0
    c114:	f04f 0003 	mov.w	r0, #3
    c118:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
    c11a:	494d      	ldr	r1, [pc, #308]	; (c250 <ll_rx_dequeue+0x164>)
    c11c:	4620      	mov	r0, r4
    c11e:	f00e f9b4 	bl	1a48a <mem_release>
	switch (rx->type) {
    c122:	9b01      	ldr	r3, [sp, #4]
    c124:	7919      	ldrb	r1, [r3, #4]
    c126:	290e      	cmp	r1, #14
    c128:	f200 8084 	bhi.w	c234 <ll_rx_dequeue+0x148>
    c12c:	2201      	movs	r2, #1
    c12e:	408a      	lsls	r2, r1
    c130:	f647 6005 	movw	r0, #32261	; 0x7e05
    c134:	4202      	tst	r2, r0
    c136:	d16d      	bne.n	c214 <ll_rx_dequeue+0x128>
    c138:	05d2      	lsls	r2, r2, #23
    c13a:	d57b      	bpl.n	c234 <ll_rx_dequeue+0x148>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    c13c:	f893 2020 	ldrb.w	r2, [r3, #32]
    c140:	2a3c      	cmp	r2, #60	; 0x3c
    c142:	d003      	beq.n	c14c <ll_rx_dequeue+0x60>
    c144:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
    c148:	2900      	cmp	r1, #0
    c14a:	d055      	beq.n	c1f8 <ll_rx_dequeue+0x10c>
			struct lll_adv *lll = ftr->param;
    c14c:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    c14e:	2a3c      	cmp	r2, #60	; 0x3c
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    c150:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    c152:	d146      	bne.n	c1e2 <ll_rx_dequeue+0xf6>
				conn_lll = lll->conn;
    c154:	68b4      	ldr	r4, [r6, #8]
				LL_ASSERT(conn_lll);
    c156:	b964      	cbnz	r4, c172 <ll_rx_dequeue+0x86>
    c158:	f240 2326 	movw	r3, #550	; 0x226
    c15c:	4a39      	ldr	r2, [pc, #228]	; (c244 <ll_rx_dequeue+0x158>)
    c15e:	493d      	ldr	r1, [pc, #244]	; (c254 <ll_rx_dequeue+0x168>)
    c160:	483a      	ldr	r0, [pc, #232]	; (c24c <ll_rx_dequeue+0x160>)
    c162:	f00b ffe7 	bl	18134 <printk>
    c166:	4040      	eors	r0, r0
    c168:	f380 8811 	msr	BASEPRI, r0
    c16c:	f04f 0003 	mov.w	r0, #3
    c170:	df02      	svc	2
				lll->conn = NULL;
    c172:	2300      	movs	r3, #0
    c174:	60b3      	str	r3, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
    c176:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    c178:	b163      	cbz	r3, c194 <ll_rx_dequeue+0xa8>
    c17a:	f240 2329 	movw	r3, #553	; 0x229
    c17e:	4a31      	ldr	r2, [pc, #196]	; (c244 <ll_rx_dequeue+0x158>)
    c180:	4935      	ldr	r1, [pc, #212]	; (c258 <ll_rx_dequeue+0x16c>)
    c182:	4832      	ldr	r0, [pc, #200]	; (c24c <ll_rx_dequeue+0x160>)
    c184:	f00b ffd6 	bl	18134 <printk>
    c188:	4040      	eors	r0, r0
    c18a:	f380 8811 	msr	BASEPRI, r0
    c18e:	f04f 0003 	mov.w	r0, #3
    c192:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    c194:	f104 0150 	add.w	r1, r4, #80	; 0x50
    c198:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    c19c:	f00e f9af 	bl	1a4fe <memq_deinit>
				LL_ASSERT(link);
    c1a0:	4606      	mov	r6, r0
    c1a2:	b960      	cbnz	r0, c1be <ll_rx_dequeue+0xd2>
    c1a4:	f44f 730b 	mov.w	r3, #556	; 0x22c
    c1a8:	4a26      	ldr	r2, [pc, #152]	; (c244 <ll_rx_dequeue+0x158>)
    c1aa:	4927      	ldr	r1, [pc, #156]	; (c248 <ll_rx_dequeue+0x15c>)
    c1ac:	4827      	ldr	r0, [pc, #156]	; (c24c <ll_rx_dequeue+0x160>)
    c1ae:	f00b ffc1 	bl	18134 <printk>
    c1b2:	4040      	eors	r0, r0
    c1b4:	f380 8811 	msr	BASEPRI, r0
    c1b8:	f04f 0003 	mov.w	r0, #3
    c1bc:	df02      	svc	2
				conn_lll->link_tx_free = link;
    c1be:	65e6      	str	r6, [r4, #92]	; 0x5c
				ll_conn_release(conn);
    c1c0:	6820      	ldr	r0, [r4, #0]
    c1c2:	f002 f8bb 	bl	e33c <ll_conn_release>
			adv->is_enabled = 0U;
    c1c6:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    c1ca:	f36f 0300 	bfc	r3, #0, #1
    c1ce:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
			      ull_adv_is_enabled(0));
    c1d2:	2000      	movs	r0, #0
    c1d4:	f00e fc0c 	bl	1a9f0 <ull_adv_is_enabled>
			if (!bm) {
    c1d8:	b908      	cbnz	r0, c1de <ll_rx_dequeue+0xf2>
				ull_filter_adv_scan_state_cb(0);
    c1da:	f004 fed5 	bl	10f88 <ull_filter_adv_scan_state_cb>
}
    c1de:	b002      	add	sp, #8
    c1e0:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
    c1e2:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
    c1e6:	2800      	cmp	r0, #0
    c1e8:	d0ed      	beq.n	c1c6 <ll_rx_dequeue+0xda>
					adv->node_rx_cc_free = NULL;
    c1ea:	2300      	movs	r3, #0
    c1ec:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
					mem_release(rx_free, &mem_pdu_rx.free);
    c1f0:	491a      	ldr	r1, [pc, #104]	; (c25c <ll_rx_dequeue+0x170>)
    c1f2:	f00e f94a 	bl	1a48a <mem_release>
    c1f6:	e7e6      	b.n	c1c6 <ll_rx_dequeue+0xda>
			LL_ASSERT(0);
    c1f8:	f44f 7312 	mov.w	r3, #584	; 0x248
    c1fc:	4a11      	ldr	r2, [pc, #68]	; (c244 <ll_rx_dequeue+0x158>)
    c1fe:	4918      	ldr	r1, [pc, #96]	; (c260 <ll_rx_dequeue+0x174>)
    c200:	4812      	ldr	r0, [pc, #72]	; (c24c <ll_rx_dequeue+0x160>)
    c202:	f00b ff97 	bl	18134 <printk>
    c206:	4040      	eors	r0, r0
    c208:	f380 8811 	msr	BASEPRI, r0
    c20c:	f04f 0003 	mov.w	r0, #3
    c210:	df02      	svc	2
    c212:	e7de      	b.n	c1d2 <ll_rx_dequeue+0xe6>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    c214:	2900      	cmp	r1, #0
    c216:	d1e2      	bne.n	c1de <ll_rx_dequeue+0xf2>
    c218:	4a0a      	ldr	r2, [pc, #40]	; (c244 <ll_rx_dequeue+0x158>)
    c21a:	4912      	ldr	r1, [pc, #72]	; (c264 <ll_rx_dequeue+0x178>)
    c21c:	f240 2399 	movw	r3, #665	; 0x299
		LL_ASSERT(0);
    c220:	480a      	ldr	r0, [pc, #40]	; (c24c <ll_rx_dequeue+0x160>)
    c222:	f00b ff87 	bl	18134 <printk>
    c226:	4040      	eors	r0, r0
    c228:	f380 8811 	msr	BASEPRI, r0
    c22c:	f04f 0003 	mov.w	r0, #3
    c230:	df02      	svc	2
}
    c232:	e7d4      	b.n	c1de <ll_rx_dequeue+0xf2>
		LL_ASSERT(0);
    c234:	f240 239d 	movw	r3, #669	; 0x29d
    c238:	4a02      	ldr	r2, [pc, #8]	; (c244 <ll_rx_dequeue+0x158>)
    c23a:	4909      	ldr	r1, [pc, #36]	; (c260 <ll_rx_dequeue+0x174>)
    c23c:	e7f0      	b.n	c220 <ll_rx_dequeue+0x134>
    c23e:	bf00      	nop
    c240:	20000a88 	.word	0x20000a88
    c244:	00020911 	.word	0x00020911
    c248:	00020dbb 	.word	0x00020dbb
    c24c:	0001ff46 	.word	0x0001ff46
    c250:	200007d0 	.word	0x200007d0
    c254:	000208d2 	.word	0x000208d2
    c258:	000208db 	.word	0x000208db
    c25c:	20000824 	.word	0x20000824
    c260:	0002195a 	.word	0x0002195a
    c264:	000208f3 	.word	0x000208f3

0000c268 <ll_rx_mem_release>:
{
    c268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    c26c:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
    c26e:	4d44      	ldr	r5, [pc, #272]	; (c380 <ll_rx_mem_release+0x118>)
    c270:	f8df 8128 	ldr.w	r8, [pc, #296]	; c39c <ll_rx_mem_release+0x134>
    c274:	4e43      	ldr	r6, [pc, #268]	; (c384 <ll_rx_mem_release+0x11c>)
{
    c276:	4607      	mov	r7, r0
	while (rx) {
    c278:	b92c      	cbnz	r4, c286 <ll_rx_mem_release+0x1e>
	*node_rx = rx;
    c27a:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
    c27c:	20ff      	movs	r0, #255	; 0xff
}
    c27e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    c282:	f7ff bc6b 	b.w	bb5c <rx_alloc>
		switch (rx_free->type) {
    c286:	7922      	ldrb	r2, [r4, #4]
		rx = rx->next;
    c288:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
    c28c:	2a0e      	cmp	r2, #14
    c28e:	d868      	bhi.n	c362 <ll_rx_mem_release+0xfa>
    c290:	2301      	movs	r3, #1
    c292:	4093      	lsls	r3, r2
    c294:	f647 4205 	movw	r2, #31749	; 0x7c05
    c298:	4213      	tst	r3, r2
    c29a:	d11b      	bne.n	c2d4 <ll_rx_mem_release+0x6c>
    c29c:	059a      	lsls	r2, r3, #22
    c29e:	d42c      	bmi.n	c2fa <ll_rx_mem_release+0x92>
    c2a0:	05db      	lsls	r3, r3, #23
    c2a2:	d55e      	bpl.n	c362 <ll_rx_mem_release+0xfa>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    c2a4:	f894 3020 	ldrb.w	r3, [r4, #32]
    c2a8:	2b3c      	cmp	r3, #60	; 0x3c
    c2aa:	d105      	bne.n	c2b8 <ll_rx_mem_release+0x50>
			mem_release(rx_free, &mem_pdu_rx.free);
    c2ac:	4936      	ldr	r1, [pc, #216]	; (c388 <ll_rx_mem_release+0x120>)
    c2ae:	4620      	mov	r0, r4
    c2b0:	f00e f8eb 	bl	1a48a <mem_release>
{
    c2b4:	464c      	mov	r4, r9
    c2b6:	e7df      	b.n	c278 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
    c2b8:	b163      	cbz	r3, c2d4 <ll_rx_mem_release+0x6c>
    c2ba:	f240 23f5 	movw	r3, #757	; 0x2f5
    c2be:	462a      	mov	r2, r5
    c2c0:	4932      	ldr	r1, [pc, #200]	; (c38c <ll_rx_mem_release+0x124>)
    c2c2:	4630      	mov	r0, r6
    c2c4:	f00b ff36 	bl	18134 <printk>
    c2c8:	4040      	eors	r0, r0
    c2ca:	f380 8811 	msr	BASEPRI, r0
    c2ce:	f04f 0003 	mov.w	r0, #3
    c2d2:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    c2d4:	7923      	ldrb	r3, [r4, #4]
    c2d6:	b963      	cbnz	r3, c2f2 <ll_rx_mem_release+0x8a>
    c2d8:	f240 3336 	movw	r3, #822	; 0x336
    c2dc:	462a      	mov	r2, r5
    c2de:	492c      	ldr	r1, [pc, #176]	; (c390 <ll_rx_mem_release+0x128>)
    c2e0:	4630      	mov	r0, r6
    c2e2:	f00b ff27 	bl	18134 <printk>
    c2e6:	4040      	eors	r0, r0
    c2e8:	f380 8811 	msr	BASEPRI, r0
    c2ec:	f04f 0003 	mov.w	r0, #3
    c2f0:	df02      	svc	2
			ll_rx_link_inc_quota(1);
    c2f2:	2001      	movs	r0, #1
    c2f4:	f7ff fc10 	bl	bb18 <ll_rx_link_inc_quota>
    c2f8:	e7d8      	b.n	c2ac <ll_rx_mem_release+0x44>
			conn = ll_conn_get(rx_free->handle);
    c2fa:	88e0      	ldrh	r0, [r4, #6]
    c2fc:	f002 f82c 	bl	e358 <ll_conn_get>
			lll->handle = 0xFFFF;
    c300:	f64f 73ff 	movw	r3, #65535	; 0xffff
			conn = ll_conn_get(rx_free->handle);
    c304:	4604      	mov	r4, r0
			lll->handle = 0xFFFF;
    c306:	8583      	strh	r3, [r0, #44]	; 0x2c
			ull_conn_tx_demux(UINT8_MAX);
    c308:	20ff      	movs	r0, #255	; 0xff
    c30a:	f003 fd3d 	bl	fd88 <ull_conn_tx_demux>
			LL_ASSERT(!lll->link_tx_free);
    c30e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    c310:	b163      	cbz	r3, c32c <ll_rx_mem_release+0xc4>
    c312:	f240 334f 	movw	r3, #847	; 0x34f
    c316:	462a      	mov	r2, r5
    c318:	491e      	ldr	r1, [pc, #120]	; (c394 <ll_rx_mem_release+0x12c>)
    c31a:	4630      	mov	r0, r6
    c31c:	f00b ff0a 	bl	18134 <printk>
    c320:	4040      	eors	r0, r0
    c322:	f380 8811 	msr	BASEPRI, r0
    c326:	f04f 0003 	mov.w	r0, #3
    c32a:	df02      	svc	2
			link = memq_deinit(&lll->memq_tx.head,
    c32c:	f104 016c 	add.w	r1, r4, #108	; 0x6c
    c330:	f104 0068 	add.w	r0, r4, #104	; 0x68
    c334:	f00e f8e3 	bl	1a4fe <memq_deinit>
			LL_ASSERT(link);
    c338:	4682      	mov	sl, r0
    c33a:	b960      	cbnz	r0, c356 <ll_rx_mem_release+0xee>
    c33c:	f240 3352 	movw	r3, #850	; 0x352
    c340:	462a      	mov	r2, r5
    c342:	4915      	ldr	r1, [pc, #84]	; (c398 <ll_rx_mem_release+0x130>)
    c344:	4630      	mov	r0, r6
    c346:	f00b fef5 	bl	18134 <printk>
    c34a:	4040      	eors	r0, r0
    c34c:	f380 8811 	msr	BASEPRI, r0
    c350:	f04f 0003 	mov.w	r0, #3
    c354:	df02      	svc	2
			lll->link_tx_free = link;
    c356:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
			ll_conn_release(conn);
    c35a:	4620      	mov	r0, r4
    c35c:	f001 ffee 	bl	e33c <ll_conn_release>
		break;
    c360:	e7a8      	b.n	c2b4 <ll_rx_mem_release+0x4c>
			LL_ASSERT(0);
    c362:	f240 335d 	movw	r3, #861	; 0x35d
    c366:	462a      	mov	r2, r5
    c368:	4641      	mov	r1, r8
    c36a:	4630      	mov	r0, r6
    c36c:	f00b fee2 	bl	18134 <printk>
    c370:	4040      	eors	r0, r0
    c372:	f380 8811 	msr	BASEPRI, r0
    c376:	f04f 0003 	mov.w	r0, #3
    c37a:	df02      	svc	2
			break;
    c37c:	e79a      	b.n	c2b4 <ll_rx_mem_release+0x4c>
    c37e:	bf00      	nop
    c380:	00020911 	.word	0x00020911
    c384:	0001ff46 	.word	0x0001ff46
    c388:	20000824 	.word	0x20000824
    c38c:	00020979 	.word	0x00020979
    c390:	00020985 	.word	0x00020985
    c394:	000209a8 	.word	0x000209a8
    c398:	00020dbb 	.word	0x00020dbb
    c39c:	0002195a 	.word	0x0002195a

0000c3a0 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    c3a0:	4801      	ldr	r0, [pc, #4]	; (c3a8 <ll_rx_link_alloc+0x8>)
    c3a2:	f00e b859 	b.w	1a458 <mem_acquire>
    c3a6:	bf00      	nop
    c3a8:	200007d0 	.word	0x200007d0

0000c3ac <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    c3ac:	4901      	ldr	r1, [pc, #4]	; (c3b4 <ll_rx_link_release+0x8>)
    c3ae:	f00e b86c 	b.w	1a48a <mem_release>
    c3b2:	bf00      	nop
    c3b4:	200007d0 	.word	0x200007d0

0000c3b8 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    c3b8:	4801      	ldr	r0, [pc, #4]	; (c3c0 <ll_rx_alloc+0x8>)
    c3ba:	f00e b84d 	b.w	1a458 <mem_acquire>
    c3be:	bf00      	nop
    c3c0:	20000824 	.word	0x20000824

0000c3c4 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    c3c4:	4901      	ldr	r1, [pc, #4]	; (c3cc <ll_rx_release+0x8>)
    c3c6:	f00e b860 	b.w	1a48a <mem_release>
    c3ca:	bf00      	nop
    c3cc:	20000824 	.word	0x20000824

0000c3d0 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    c3d0:	4b02      	ldr	r3, [pc, #8]	; (c3dc <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    c3d2:	4a03      	ldr	r2, [pc, #12]	; (c3e0 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    c3d4:	78db      	ldrb	r3, [r3, #3]
    c3d6:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    c3d8:	f00e b89c 	b.w	1a514 <memq_enqueue>
    c3dc:	2000cdcc 	.word	0x2000cdcc
    c3e0:	20000a8c 	.word	0x20000a8c

0000c3e4 <ll_rx_sched>:
	k_sem_give(sem_recv);
    c3e4:	4b01      	ldr	r3, [pc, #4]	; (c3ec <ll_rx_sched+0x8>)
    c3e6:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    c3e8:	f00a bfaa 	b.w	17340 <z_impl_k_sem_give>
    c3ec:	20000a98 	.word	0x20000a98

0000c3f0 <ll_pdu_rx_alloc_peek>:
{
    c3f0:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    c3f2:	4a0a      	ldr	r2, [pc, #40]	; (c41c <ll_pdu_rx_alloc_peek+0x2c>)
    c3f4:	7891      	ldrb	r1, [r2, #2]
    c3f6:	78d4      	ldrb	r4, [r2, #3]
    c3f8:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
    c3fa:	42a1      	cmp	r1, r4
		return count - first + last;
    c3fc:	bf8a      	itet	hi
    c3fe:	1a5b      	subhi	r3, r3, r1
		return last - first;
    c400:	1a63      	subls	r3, r4, r1
		return count - first + last;
    c402:	191b      	addhi	r3, r3, r4
    c404:	b2db      	uxtb	r3, r3
    c406:	4298      	cmp	r0, r3
    c408:	d806      	bhi.n	c418 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
    c40a:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    c40c:	7813      	ldrb	r3, [r2, #0]
    c40e:	d003      	beq.n	c418 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
    c410:	fb01 2203 	mla	r2, r1, r3, r2
    c414:	6850      	ldr	r0, [r2, #4]
}
    c416:	bd10      	pop	{r4, pc}
		return NULL;
    c418:	2000      	movs	r0, #0
    c41a:	e7fc      	b.n	c416 <ll_pdu_rx_alloc_peek+0x26>
    c41c:	2000cc7c 	.word	0x2000cc7c

0000c420 <ll_pdu_rx_alloc>:
{
    c420:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    c422:	4a09      	ldr	r2, [pc, #36]	; (c448 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(u8_t *fifo, u8_t size, u8_t count,
				  u8_t last, u8_t *first)
{
	u8_t _first = *first; /* Copy read-index */
    c424:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    c426:	78d0      	ldrb	r0, [r2, #3]
    c428:	7811      	ldrb	r1, [r2, #0]
    c42a:	7854      	ldrb	r4, [r2, #1]
    c42c:	4298      	cmp	r0, r3
    c42e:	d009      	beq.n	c444 <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
    c430:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    c434:	3301      	adds	r3, #1
    c436:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
    c438:	429c      	cmp	r4, r3
    c43a:	bf08      	it	eq
    c43c:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
    c43e:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    c440:	7093      	strb	r3, [r2, #2]
}
    c442:	bd10      	pop	{r4, pc}
		return NULL;
    c444:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    c446:	e7fc      	b.n	c442 <ll_pdu_rx_alloc+0x22>
    c448:	2000cc7c 	.word	0x2000cc7c

0000c44c <ll_tx_ack_put>:
{
    c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    c44e:	4a12      	ldr	r2, [pc, #72]	; (c498 <ll_tx_ack_put+0x4c>)
    c450:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
    c452:	7857      	ldrb	r7, [r2, #1]
    c454:	7895      	ldrb	r5, [r2, #2]
    c456:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
    c458:	1c63      	adds	r3, r4, #1
    c45a:	b2db      	uxtb	r3, r3
		last = 0U;
    c45c:	429f      	cmp	r7, r3
    c45e:	bf08      	it	eq
    c460:	2300      	moveq	r3, #0
	if (last == first) {
    c462:	429d      	cmp	r5, r3
    c464:	d004      	beq.n	c470 <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c466:	1d15      	adds	r5, r2, #4
    c468:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
    c46c:	192e      	adds	r6, r5, r4
    c46e:	d10f      	bne.n	c490 <ll_tx_ack_put+0x44>
    c470:	f240 33b3 	movw	r3, #947	; 0x3b3
    c474:	4a09      	ldr	r2, [pc, #36]	; (c49c <ll_tx_ack_put+0x50>)
    c476:	490a      	ldr	r1, [pc, #40]	; (c4a0 <ll_tx_ack_put+0x54>)
    c478:	480a      	ldr	r0, [pc, #40]	; (c4a4 <ll_tx_ack_put+0x58>)
    c47a:	f00b fe5b 	bl	18134 <printk>
    c47e:	4040      	eors	r0, r0
    c480:	f380 8811 	msr	BASEPRI, r0
    c484:	f04f 0003 	mov.w	r0, #3
    c488:	df02      	svc	2
	tx->handle = handle;
    c48a:	2300      	movs	r3, #0
    c48c:	801b      	strh	r3, [r3, #0]
    c48e:	deff      	udf	#255	; 0xff
    c490:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
    c492:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
    c494:	6071      	str	r1, [r6, #4]
}
    c496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c498:	2000cdcc 	.word	0x2000cdcc
    c49c:	00020911 	.word	0x00020911
    c4a0:	00020d36 	.word	0x00020d36
    c4a4:	0001ff46 	.word	0x0001ff46

0000c4a8 <ull_ticker_status_give>:
	*((u32_t volatile *)param) = status;
    c4a8:	6008      	str	r0, [r1, #0]
    c4aa:	4801      	ldr	r0, [pc, #4]	; (c4b0 <ull_ticker_status_give+0x8>)
    c4ac:	f00a bf48 	b.w	17340 <z_impl_k_sem_give>
    c4b0:	20000a9c 	.word	0x20000a9c

0000c4b4 <ull_ticker_status_take>:
{
    c4b4:	b510      	push	{r4, lr}
    c4b6:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    c4b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c4bc:	4802      	ldr	r0, [pc, #8]	; (c4c8 <ull_ticker_status_take+0x14>)
    c4be:	f00a ff6b 	bl	17398 <z_impl_k_sem_take>
	return *ret_cb;
    c4c2:	6820      	ldr	r0, [r4, #0]
}
    c4c4:	bd10      	pop	{r4, pc}
    c4c6:	bf00      	nop
    c4c8:	20000a9c 	.word	0x20000a9c

0000c4cc <ull_disable_mark>:
	if (!*m) {
    c4cc:	4b02      	ldr	r3, [pc, #8]	; (c4d8 <ull_disable_mark+0xc>)
    c4ce:	681a      	ldr	r2, [r3, #0]
    c4d0:	b902      	cbnz	r2, c4d4 <ull_disable_mark+0x8>
		*m = param;
    c4d2:	6018      	str	r0, [r3, #0]
}
    c4d4:	6818      	ldr	r0, [r3, #0]
    c4d6:	4770      	bx	lr
    c4d8:	200006fc 	.word	0x200006fc

0000c4dc <ull_disable_unmark>:
	if (*m && *m == param) {
    c4dc:	4905      	ldr	r1, [pc, #20]	; (c4f4 <ull_disable_unmark+0x18>)
    c4de:	680b      	ldr	r3, [r1, #0]
    c4e0:	b12b      	cbz	r3, c4ee <ull_disable_unmark+0x12>
    c4e2:	4298      	cmp	r0, r3
    c4e4:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
    c4e8:	bf0c      	ite	eq
    c4ea:	600a      	streq	r2, [r1, #0]
	return NULL;
    c4ec:	4613      	movne	r3, r2
}
    c4ee:	4618      	mov	r0, r3
    c4f0:	4770      	bx	lr
    c4f2:	bf00      	nop
    c4f4:	200006fc 	.word	0x200006fc

0000c4f8 <ull_disable_mark_get>:
}
    c4f8:	4b01      	ldr	r3, [pc, #4]	; (c500 <ull_disable_mark_get+0x8>)
    c4fa:	6818      	ldr	r0, [r3, #0]
    c4fc:	4770      	bx	lr
    c4fe:	bf00      	nop
    c500:	200006fc 	.word	0x200006fc

0000c504 <ull_update_mark>:
	if (!*m) {
    c504:	4b02      	ldr	r3, [pc, #8]	; (c510 <ull_update_mark+0xc>)
    c506:	681a      	ldr	r2, [r3, #0]
    c508:	b902      	cbnz	r2, c50c <ull_update_mark+0x8>
		*m = param;
    c50a:	6018      	str	r0, [r3, #0]
}
    c50c:	6818      	ldr	r0, [r3, #0]
    c50e:	4770      	bx	lr
    c510:	20000700 	.word	0x20000700

0000c514 <ull_update_unmark>:
	if (*m && *m == param) {
    c514:	4905      	ldr	r1, [pc, #20]	; (c52c <ull_update_unmark+0x18>)
    c516:	680b      	ldr	r3, [r1, #0]
    c518:	b12b      	cbz	r3, c526 <ull_update_unmark+0x12>
    c51a:	4298      	cmp	r0, r3
    c51c:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
    c520:	bf0c      	ite	eq
    c522:	600a      	streq	r2, [r1, #0]
	return NULL;
    c524:	4613      	movne	r3, r2
}
    c526:	4618      	mov	r0, r3
    c528:	4770      	bx	lr
    c52a:	bf00      	nop
    c52c:	20000700 	.word	0x20000700

0000c530 <ull_update_mark_get>:
}
    c530:	4b01      	ldr	r3, [pc, #4]	; (c538 <ull_update_mark_get+0x8>)
    c532:	6818      	ldr	r0, [r3, #0]
    c534:	4770      	bx	lr
    c536:	bf00      	nop
    c538:	20000700 	.word	0x20000700

0000c53c <ull_disable>:
{
    c53c:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    c53e:	6804      	ldr	r4, [r0, #0]
	if (!hdr) {
    c540:	f114 0f10 	cmn.w	r4, #16
{
    c544:	b087      	sub	sp, #28
    c546:	4605      	mov	r5, r0
	if (!hdr) {
    c548:	d102      	bne.n	c550 <ull_disable+0x14>
		return ULL_STATUS_SUCCESS;
    c54a:	2000      	movs	r0, #0
}
    c54c:	b007      	add	sp, #28
    c54e:	bd30      	pop	{r4, r5, pc}
	z_impl_k_sem_init(sem, initial_count, limit);
    c550:	2201      	movs	r2, #1
    c552:	2100      	movs	r1, #0
    c554:	4668      	mov	r0, sp
    c556:	f011 fc44 	bl	1dde2 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
    c55a:	4b11      	ldr	r3, [pc, #68]	; (c5a0 <ull_disable+0x64>)
    c55c:	6163      	str	r3, [r4, #20]
	if (!hdr->ref) {
    c55e:	7c23      	ldrb	r3, [r4, #16]
	hdr->disabled_param = &sem;
    c560:	f8c4 d018 	str.w	sp, [r4, #24]
	if (!hdr->ref) {
    c564:	2b00      	cmp	r3, #0
    c566:	d0f0      	beq.n	c54a <ull_disable+0xe>
	mfy.param = lll;
    c568:	4b0e      	ldr	r3, [pc, #56]	; (c5a4 <ull_disable+0x68>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    c56a:	2200      	movs	r2, #0
    c56c:	4611      	mov	r1, r2
    c56e:	2003      	movs	r0, #3
	mfy.param = lll;
    c570:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    c572:	f7fd fb05 	bl	9b80 <mayfly_enqueue>
	LL_ASSERT(!ret);
    c576:	b160      	cbz	r0, c592 <ull_disable+0x56>
    c578:	f240 431e 	movw	r3, #1054	; 0x41e
    c57c:	4a0a      	ldr	r2, [pc, #40]	; (c5a8 <ull_disable+0x6c>)
    c57e:	490b      	ldr	r1, [pc, #44]	; (c5ac <ull_disable+0x70>)
    c580:	480b      	ldr	r0, [pc, #44]	; (c5b0 <ull_disable+0x74>)
    c582:	f00b fdd7 	bl	18134 <printk>
    c586:	4040      	eors	r0, r0
    c588:	f380 8811 	msr	BASEPRI, r0
    c58c:	f04f 0003 	mov.w	r0, #3
    c590:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    c592:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c596:	4668      	mov	r0, sp
    c598:	f00a fefe 	bl	17398 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
    c59c:	e7d6      	b.n	c54c <ull_disable+0x10>
    c59e:	bf00      	nop
    c5a0:	0001a899 	.word	0x0001a899
    c5a4:	2000ce00 	.word	0x2000ce00
    c5a8:	00020911 	.word	0x00020911
    c5ac:	000208c5 	.word	0x000208c5
    c5b0:	0001ff46 	.word	0x0001ff46

0000c5b4 <ull_pdu_rx_alloc_peek>:
{
    c5b4:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    c5b6:	4a0a      	ldr	r2, [pc, #40]	; (c5e0 <ull_pdu_rx_alloc_peek+0x2c>)
    c5b8:	7891      	ldrb	r1, [r2, #2]
    c5ba:	78d4      	ldrb	r4, [r2, #3]
    c5bc:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
    c5be:	42a1      	cmp	r1, r4
		return count - first + last;
    c5c0:	bf8a      	itet	hi
    c5c2:	1a5b      	subhi	r3, r3, r1
		return last - first;
    c5c4:	1a63      	subls	r3, r4, r1
		return count - first + last;
    c5c6:	191b      	addhi	r3, r3, r4
    c5c8:	b2db      	uxtb	r3, r3
    c5ca:	4298      	cmp	r0, r3
    c5cc:	d806      	bhi.n	c5dc <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
    c5ce:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    c5d0:	7813      	ldrb	r3, [r2, #0]
    c5d2:	d003      	beq.n	c5dc <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
    c5d4:	fb01 2203 	mla	r2, r1, r3, r2
    c5d8:	6850      	ldr	r0, [r2, #4]
}
    c5da:	bd10      	pop	{r4, pc}
		return NULL;
    c5dc:	2000      	movs	r0, #0
    c5de:	e7fc      	b.n	c5da <ull_pdu_rx_alloc_peek+0x26>
    c5e0:	2000cc90 	.word	0x2000cc90

0000c5e4 <ull_pdu_rx_alloc>:
{
    c5e4:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
    c5e6:	4a09      	ldr	r2, [pc, #36]	; (c60c <ull_pdu_rx_alloc+0x28>)
	u8_t _first = *first; /* Copy read-index */
    c5e8:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    c5ea:	78d0      	ldrb	r0, [r2, #3]
    c5ec:	7811      	ldrb	r1, [r2, #0]
    c5ee:	7854      	ldrb	r4, [r2, #1]
    c5f0:	4298      	cmp	r0, r3
    c5f2:	d009      	beq.n	c608 <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
    c5f4:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    c5f8:	3301      	adds	r3, #1
    c5fa:	b2db      	uxtb	r3, r3
		_first = 0U;
    c5fc:	429c      	cmp	r4, r3
    c5fe:	bf08      	it	eq
    c600:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
    c602:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    c604:	7093      	strb	r3, [r2, #2]
}
    c606:	bd10      	pop	{r4, pc}
		return NULL;
    c608:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    c60a:	e7fc      	b.n	c606 <ull_pdu_rx_alloc+0x22>
    c60c:	2000cc90 	.word	0x2000cc90

0000c610 <ull_rx_put>:
{
    c610:	b538      	push	{r3, r4, r5, lr}
    c612:	460c      	mov	r4, r1
    c614:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    c616:	f003 fcbb 	bl	ff90 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c61a:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    c61c:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c61e:	4a03      	ldr	r2, [pc, #12]	; (c62c <ull_rx_put+0x1c>)
    c620:	4628      	mov	r0, r5
}
    c622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c626:	f00d bf75 	b.w	1a514 <memq_enqueue>
    c62a:	bf00      	nop
    c62c:	20000a94 	.word	0x20000a94

0000c630 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    c630:	2201      	movs	r2, #1
    c632:	4b02      	ldr	r3, [pc, #8]	; (c63c <ull_rx_sched+0xc>)
    c634:	4611      	mov	r1, r2
    c636:	2000      	movs	r0, #0
    c638:	f7fd baa2 	b.w	9b80 <mayfly_enqueue>
    c63c:	2000ce10 	.word	0x2000ce10

0000c640 <ull_prepare_enqueue>:
{
    c640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c644:	4e16      	ldr	r6, [pc, #88]	; (c6a0 <ull_prepare_enqueue+0x60>)
{
    c646:	460f      	mov	r7, r1
    c648:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c64a:	78f2      	ldrb	r2, [r6, #3]
    c64c:	7834      	ldrb	r4, [r6, #0]
{
    c64e:	4680      	mov	r8, r0
	last = last + 1;
    c650:	1c55      	adds	r5, r2, #1
	if (last == count) {
    c652:	7870      	ldrb	r0, [r6, #1]
    c654:	4699      	mov	r9, r3
	last = last + 1;
    c656:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c658:	78b3      	ldrb	r3, [r6, #2]
		last = 0U;
    c65a:	42a8      	cmp	r0, r5
    c65c:	bf08      	it	eq
    c65e:	2500      	moveq	r5, #0
	if (last == first) {
    c660:	42ab      	cmp	r3, r5
    c662:	d01a      	beq.n	c69a <ull_prepare_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c664:	1d33      	adds	r3, r6, #4
    c666:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
    c66a:	b1b4      	cbz	r4, c69a <ull_prepare_enqueue+0x5a>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    c66c:	2210      	movs	r2, #16
    c66e:	4620      	mov	r0, r4
    c670:	f00c fae3 	bl	18c3a <memcpy>
	e->prio = prio;
    c674:	9b08      	ldr	r3, [sp, #32]
    c676:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
    c678:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    c67c:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
    c680:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    c682:	f362 0300 	bfi	r3, r2, #0, #1
	e->is_abort_cb = is_abort_cb;
    c686:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_aborted = 0U;
    c68a:	f36f 0341 	bfc	r3, #1, #1
    c68e:	f884 3020 	strb.w	r3, [r4, #32]
	*last = idx; /* Commit: Update write index */
    c692:	70f5      	strb	r5, [r6, #3]
	return 0;
    c694:	2000      	movs	r0, #0
}
    c696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
    c69a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    c69e:	e7fa      	b.n	c696 <ull_prepare_enqueue+0x56>
    c6a0:	2000cca8 	.word	0x2000cca8

0000c6a4 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    c6a4:	4b05      	ldr	r3, [pc, #20]	; (c6bc <ull_prepare_dequeue_get+0x18>)
    c6a6:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    c6a8:	78d9      	ldrb	r1, [r3, #3]
    c6aa:	7818      	ldrb	r0, [r3, #0]
    c6ac:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    c6ae:	bf1a      	itte	ne
    c6b0:	3304      	addne	r3, #4
    c6b2:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    c6b6:	2000      	moveq	r0, #0
}
    c6b8:	4770      	bx	lr
    c6ba:	bf00      	nop
    c6bc:	2000cca8 	.word	0x2000cca8

0000c6c0 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
    c6c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
    c6c4:	4e8b      	ldr	r6, [pc, #556]	; (c8f4 <rx_demux+0x234>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    c6c6:	4c8c      	ldr	r4, [pc, #560]	; (c8f8 <rx_demux+0x238>)
    c6c8:	aa01      	add	r2, sp, #4
    c6ca:	e9d4 0100 	ldrd	r0, r1, [r4]
    c6ce:	f00d ff28 	bl	1a522 <memq_peek>
		if (link) {
    c6d2:	4605      	mov	r5, r0
    c6d4:	2800      	cmp	r0, #0
    c6d6:	f000 80ee 	beq.w	c8b6 <rx_demux+0x1f6>
			LL_ASSERT(rx);
    c6da:	9b01      	ldr	r3, [sp, #4]
    c6dc:	b963      	cbnz	r3, c6f8 <rx_demux+0x38>
    c6de:	f240 53d6 	movw	r3, #1494	; 0x5d6
    c6e2:	4a86      	ldr	r2, [pc, #536]	; (c8fc <rx_demux+0x23c>)
    c6e4:	4986      	ldr	r1, [pc, #536]	; (c900 <rx_demux+0x240>)
    c6e6:	4887      	ldr	r0, [pc, #540]	; (c904 <rx_demux+0x244>)
    c6e8:	f00b fd24 	bl	18134 <printk>
    c6ec:	4040      	eors	r0, r0
    c6ee:	f380 8811 	msr	BASEPRI, r0
    c6f2:	f04f 0003 	mov.w	r0, #3
    c6f6:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    c6f8:	9b01      	ldr	r3, [sp, #4]
    c6fa:	aa02      	add	r2, sp, #8
    c6fc:	f10d 0102 	add.w	r1, sp, #2
    c700:	7818      	ldrb	r0, [r3, #0]
    c702:	f003 fc63 	bl	ffcc <ull_conn_ack_by_last_peek>
			if (link_tx) {
    c706:	9f01      	ldr	r7, [sp, #4]
    c708:	4602      	mov	r2, r0
    c70a:	b130      	cbz	r0, c71a <rx_demux+0x5a>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    c70c:	9b02      	ldr	r3, [sp, #8]
    c70e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    c712:	7838      	ldrb	r0, [r7, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
    c714:	f00e f8c2 	bl	1a89c <rx_demux_conn_tx_ack>
    c718:	e7d5      	b.n	c6c6 <rx_demux+0x6>
	switch (rx->type) {
    c71a:	793b      	ldrb	r3, [r7, #4]
    c71c:	9703      	str	r7, [sp, #12]
    c71e:	3b01      	subs	r3, #1
    c720:	2b08      	cmp	r3, #8
    c722:	f200 80ba 	bhi.w	c89a <rx_demux+0x1da>
    c726:	e8df f003 	tbb	[pc, r3]
    c72a:	9c05      	.short	0x9c05
    c72c:	b8b8b8b8 	.word	0xb8b8b8b8
    c730:	92b8      	.short	0x92b8
    c732:	b1          	.byte	0xb1
    c733:	00          	.byte	0x00
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    c734:	6860      	ldr	r0, [r4, #4]
    c736:	4970      	ldr	r1, [pc, #448]	; (c8f8 <rx_demux+0x238>)
    c738:	2200      	movs	r2, #0
    c73a:	f00d fefa 	bl	1a532 <memq_dequeue>
		rx_demux_event_done(link, rx);
    c73e:	9f03      	ldr	r7, [sp, #12]
	switch (done->extra.type) {
    c740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
	ull_hdr = done->param;
    c744:	6a3c      	ldr	r4, [r7, #32]
	switch (done->extra.type) {
    c746:	b123      	cbz	r3, c752 <rx_demux+0x92>
    c748:	2b01      	cmp	r3, #1
    c74a:	d169      	bne.n	c820 <rx_demux+0x160>
		ull_conn_done(done);
    c74c:	4638      	mov	r0, r7
    c74e:	f003 f9dd 	bl	fb0c <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    c752:	4a6d      	ldr	r2, [pc, #436]	; (c908 <rx_demux+0x248>)
    c754:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
    c756:	f892 c001 	ldrb.w	ip, [r2, #1]
    c75a:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
    c75c:	2300      	movs	r3, #0
    c75e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	last = last + 1;
    c762:	1c4b      	adds	r3, r1, #1
    c764:	b2db      	uxtb	r3, r3
		last = 0U;
    c766:	459c      	cmp	ip, r3
    c768:	bf08      	it	eq
    c76a:	2300      	moveq	r3, #0
	if (last == first) {
    c76c:	4298      	cmp	r0, r3
    c76e:	f000 80b0 	beq.w	c8d2 <rx_demux+0x212>
	done->hdr.link = link;
    c772:	603d      	str	r5, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c774:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c776:	fb00 2101 	mla	r1, r0, r1, r2
    c77a:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
    c77c:	70d3      	strb	r3, [r2, #3]
	next = ull_prepare_dequeue_get();
    c77e:	f7ff ff91 	bl	c6a4 <ull_prepare_dequeue_get>
			mfy.param = next;
    c782:	f8df 8188 	ldr.w	r8, [pc, #392]	; c90c <rx_demux+0x24c>
	while (next) {
    c786:	b358      	cbz	r0, c7e0 <rx_demux+0x120>
		u8_t is_aborted = next->is_aborted;
    c788:	f890 5020 	ldrb.w	r5, [r0, #32]
    c78c:	f3c5 0740 	ubfx	r7, r5, #1, #1
		u8_t is_resume = next->is_resume;
    c790:	f005 0501 	and.w	r5, r5, #1
		if (!is_aborted) {
    c794:	b9af      	cbnz	r7, c7c2 <rx_demux+0x102>
			mfy.param = next;
    c796:	f8c8 0008 	str.w	r0, [r8, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c79a:	4b5c      	ldr	r3, [pc, #368]	; (c90c <rx_demux+0x24c>)
    c79c:	463a      	mov	r2, r7
    c79e:	4639      	mov	r1, r7
    c7a0:	2001      	movs	r0, #1
    c7a2:	f7fd f9ed 	bl	9b80 <mayfly_enqueue>
			LL_ASSERT(!ret);
    c7a6:	b160      	cbz	r0, c7c2 <rx_demux+0x102>
    c7a8:	f240 63a7 	movw	r3, #1703	; 0x6a7
    c7ac:	4a53      	ldr	r2, [pc, #332]	; (c8fc <rx_demux+0x23c>)
    c7ae:	4958      	ldr	r1, [pc, #352]	; (c910 <rx_demux+0x250>)
    c7b0:	4854      	ldr	r0, [pc, #336]	; (c904 <rx_demux+0x244>)
    c7b2:	f00b fcbf 	bl	18134 <printk>
    c7b6:	4040      	eors	r0, r0
    c7b8:	f380 8811 	msr	BASEPRI, r0
    c7bc:	f04f 0003 	mov.w	r0, #3
    c7c0:	df02      	svc	2
	u8_t _first = *first; /* Copy read-index */
    c7c2:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
    c7c4:	78f1      	ldrb	r1, [r6, #3]
		MFIFO_DEQUEUE(prep);
    c7c6:	7872      	ldrb	r2, [r6, #1]
    c7c8:	4299      	cmp	r1, r3
    c7ca:	d005      	beq.n	c7d8 <rx_demux+0x118>
	_first += 1U;
    c7cc:	3301      	adds	r3, #1
    c7ce:	b2db      	uxtb	r3, r3
		_first = 0U;
    c7d0:	429a      	cmp	r2, r3
    c7d2:	bf08      	it	eq
    c7d4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    c7d6:	70b3      	strb	r3, [r6, #2]

		next = ull_prepare_dequeue_get();
    c7d8:	f7ff ff64 	bl	c6a4 <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    c7dc:	2800      	cmp	r0, #0
    c7de:	d12d      	bne.n	c83c <rx_demux+0x17c>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    c7e0:	2c00      	cmp	r4, #0
    c7e2:	f43f af70 	beq.w	c6c6 <rx_demux+0x6>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
    c7e6:	7823      	ldrb	r3, [r4, #0]
    c7e8:	b963      	cbnz	r3, c804 <rx_demux+0x144>
    c7ea:	f240 63b9 	movw	r3, #1721	; 0x6b9
    c7ee:	4a43      	ldr	r2, [pc, #268]	; (c8fc <rx_demux+0x23c>)
    c7f0:	4948      	ldr	r1, [pc, #288]	; (c914 <rx_demux+0x254>)
    c7f2:	4844      	ldr	r0, [pc, #272]	; (c904 <rx_demux+0x244>)
    c7f4:	f00b fc9e 	bl	18134 <printk>
    c7f8:	4040      	eors	r0, r0
    c7fa:	f380 8811 	msr	BASEPRI, r0
    c7fe:	f04f 0003 	mov.w	r0, #3
    c802:	df02      	svc	2
	return hdr->ref--;
    c804:	7823      	ldrb	r3, [r4, #0]
    c806:	3b01      	subs	r3, #1
    c808:	b2db      	uxtb	r3, r3
    c80a:	7023      	strb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
    c80c:	2b00      	cmp	r3, #0
    c80e:	f47f af5a 	bne.w	c6c6 <rx_demux+0x6>
    c812:	6863      	ldr	r3, [r4, #4]
    c814:	2b00      	cmp	r3, #0
    c816:	f43f af56 	beq.w	c6c6 <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    c81a:	68a0      	ldr	r0, [r4, #8]
    c81c:	4798      	blx	r3
			if (nack) {
    c81e:	e752      	b.n	c6c6 <rx_demux+0x6>
		LL_ASSERT(0);
    c820:	f240 638f 	movw	r3, #1679	; 0x68f
    c824:	4a35      	ldr	r2, [pc, #212]	; (c8fc <rx_demux+0x23c>)
    c826:	493c      	ldr	r1, [pc, #240]	; (c918 <rx_demux+0x258>)
    c828:	4836      	ldr	r0, [pc, #216]	; (c904 <rx_demux+0x244>)
    c82a:	f00b fc83 	bl	18134 <printk>
    c82e:	4040      	eors	r0, r0
    c830:	f380 8811 	msr	BASEPRI, r0
    c834:	f04f 0003 	mov.w	r0, #3
    c838:	df02      	svc	2
		break;
    c83a:	e78a      	b.n	c752 <rx_demux+0x92>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    c83c:	2f00      	cmp	r7, #0
    c83e:	d1a2      	bne.n	c786 <rx_demux+0xc6>
    c840:	2d00      	cmp	r5, #0
    c842:	d0cd      	beq.n	c7e0 <rx_demux+0x120>
    c844:	f890 3020 	ldrb.w	r3, [r0, #32]
    c848:	07db      	lsls	r3, r3, #31
    c84a:	d4c9      	bmi.n	c7e0 <rx_demux+0x120>
    c84c:	e79b      	b.n	c786 <rx_demux+0xc6>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    c84e:	2200      	movs	r2, #0
    c850:	4929      	ldr	r1, [pc, #164]	; (c8f8 <rx_demux+0x238>)
    c852:	6860      	ldr	r0, [r4, #4]
    c854:	f00d fe6d 	bl	1a532 <memq_dequeue>
		ull_conn_setup(link, rx);
    c858:	9903      	ldr	r1, [sp, #12]
    c85a:	4628      	mov	r0, r5
    c85c:	f001 feb4 	bl	e5c8 <ull_conn_setup>
			if (nack) {
    c860:	e731      	b.n	c6c6 <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
    c862:	a903      	add	r1, sp, #12
    c864:	4628      	mov	r0, r5
    c866:	f001 fed1 	bl	e60c <ull_conn_rx>
		if (nack) {
    c86a:	4602      	mov	r2, r0
    c86c:	2800      	cmp	r0, #0
    c86e:	d13e      	bne.n	c8ee <rx_demux+0x22e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    c870:	4921      	ldr	r1, [pc, #132]	; (c8f8 <rx_demux+0x238>)
    c872:	6860      	ldr	r0, [r4, #4]
    c874:	f00d fe5d 	bl	1a532 <memq_dequeue>
		if (rx) {
    c878:	9903      	ldr	r1, [sp, #12]
    c87a:	2900      	cmp	r1, #0
    c87c:	f43f af23 	beq.w	c6c6 <rx_demux+0x6>
		ll_rx_put(link, rx);
    c880:	4628      	mov	r0, r5
    c882:	f7ff fda5 	bl	c3d0 <ll_rx_put>
		ll_rx_sched();
    c886:	f7ff fdad 	bl	c3e4 <ll_rx_sched>
			if (nack) {
    c88a:	e71c      	b.n	c6c6 <rx_demux+0x6>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    c88c:	491a      	ldr	r1, [pc, #104]	; (c8f8 <rx_demux+0x238>)
    c88e:	6860      	ldr	r0, [r4, #4]
    c890:	2200      	movs	r2, #0
    c892:	f00d fe4e 	bl	1a532 <memq_dequeue>
		ll_rx_put(link, rx);
    c896:	9903      	ldr	r1, [sp, #12]
    c898:	e7f2      	b.n	c880 <rx_demux+0x1c0>
		LL_ASSERT(0);
    c89a:	f240 6367 	movw	r3, #1639	; 0x667
    c89e:	4a17      	ldr	r2, [pc, #92]	; (c8fc <rx_demux+0x23c>)
    c8a0:	491d      	ldr	r1, [pc, #116]	; (c918 <rx_demux+0x258>)
    c8a2:	4818      	ldr	r0, [pc, #96]	; (c904 <rx_demux+0x244>)
    c8a4:	f00b fc46 	bl	18134 <printk>
    c8a8:	4040      	eors	r0, r0
    c8aa:	f380 8811 	msr	BASEPRI, r0
    c8ae:	f04f 0003 	mov.w	r0, #3
    c8b2:	df02      	svc	2
			if (nack) {
    c8b4:	e707      	b.n	c6c6 <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    c8b6:	aa03      	add	r2, sp, #12
    c8b8:	a902      	add	r1, sp, #8
    c8ba:	f10d 0002 	add.w	r0, sp, #2
    c8be:	f003 fb6d 	bl	ff9c <ull_conn_ack_peek>
			if (link) {
    c8c2:	4602      	mov	r2, r0
    c8c4:	b198      	cbz	r0, c8ee <rx_demux+0x22e>
				rx_demux_conn_tx_ack(ack_last, handle,
    c8c6:	9b03      	ldr	r3, [sp, #12]
    c8c8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    c8cc:	f89d 0002 	ldrb.w	r0, [sp, #2]
    c8d0:	e720      	b.n	c714 <rx_demux+0x54>
	LL_ASSERT(release == done);
    c8d2:	f240 6396 	movw	r3, #1686	; 0x696
    c8d6:	4a09      	ldr	r2, [pc, #36]	; (c8fc <rx_demux+0x23c>)
    c8d8:	4910      	ldr	r1, [pc, #64]	; (c91c <rx_demux+0x25c>)
    c8da:	480a      	ldr	r0, [pc, #40]	; (c904 <rx_demux+0x244>)
    c8dc:	f00b fc2a 	bl	18134 <printk>
    c8e0:	4040      	eors	r0, r0
    c8e2:	f380 8811 	msr	BASEPRI, r0
    c8e6:	f04f 0003 	mov.w	r0, #3
    c8ea:	df02      	svc	2
    c8ec:	e747      	b.n	c77e <rx_demux+0xbe>
}
    c8ee:	b004      	add	sp, #16
    c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8f4:	2000cca8 	.word	0x2000cca8
    c8f8:	20000a90 	.word	0x20000a90
    c8fc:	00020911 	.word	0x00020911
    c900:	00020f18 	.word	0x00020f18
    c904:	0001ff46 	.word	0x0001ff46
    c908:	2000cc68 	.word	0x2000cc68
    c90c:	2000ce20 	.word	0x2000ce20
    c910:	000208c5 	.word	0x000208c5
    c914:	000209c0 	.word	0x000209c0
    c918:	0002195a 	.word	0x0002195a
    c91c:	000209cd 	.word	0x000209cd

0000c920 <ull_prepare_dequeue_iter>:
{
    c920:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    c922:	4b0c      	ldr	r3, [pc, #48]	; (c954 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
    c924:	7801      	ldrb	r1, [r0, #0]
    c926:	785c      	ldrb	r4, [r3, #1]
    c928:	78dd      	ldrb	r5, [r3, #3]
    c92a:	781a      	ldrb	r2, [r3, #0]
    c92c:	42a1      	cmp	r1, r4
    c92e:	bf24      	itt	cs
    c930:	789b      	ldrbcs	r3, [r3, #2]
		*idx = first;
    c932:	7003      	strbcs	r3, [r0, #0]
	if (*idx == last) {
    c934:	7801      	ldrb	r1, [r0, #0]
    c936:	428d      	cmp	r5, r1
    c938:	d00a      	beq.n	c950 <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
    c93a:	1c4b      	adds	r3, r1, #1
    c93c:	b2db      	uxtb	r3, r3
		i = 0U;
    c93e:	429c      	cmp	r4, r3
    c940:	bf08      	it	eq
    c942:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    c944:	4c04      	ldr	r4, [pc, #16]	; (c958 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
    c946:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    c948:	fb01 4202 	mla	r2, r1, r2, r4
}
    c94c:	4610      	mov	r0, r2
    c94e:	bd30      	pop	{r4, r5, pc}
		return NULL;
    c950:	2200      	movs	r2, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    c952:	e7fb      	b.n	c94c <ull_prepare_dequeue_iter+0x2c>
    c954:	2000cca8 	.word	0x2000cca8
    c958:	2000ccac 	.word	0x2000ccac

0000c95c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    c95c:	4b06      	ldr	r3, [pc, #24]	; (c978 <ull_event_done_extra_get+0x1c>)
    c95e:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
    c960:	78d8      	ldrb	r0, [r3, #3]
    c962:	781a      	ldrb	r2, [r3, #0]
    c964:	4288      	cmp	r0, r1
    c966:	d005      	beq.n	c974 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    c968:	fb01 3302 	mla	r3, r1, r2, r3
    c96c:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    c96e:	b110      	cbz	r0, c976 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    c970:	3024      	adds	r0, #36	; 0x24
    c972:	4770      	bx	lr
		return NULL;
    c974:	2000      	movs	r0, #0
}
    c976:	4770      	bx	lr
    c978:	2000cc68 	.word	0x2000cc68

0000c97c <ull_event_done>:
{
    c97c:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
    c97e:	4a10      	ldr	r2, [pc, #64]	; (c9c0 <ull_event_done+0x44>)
	u8_t _first = *first; /* Copy read-index */
    c980:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    c982:	78d4      	ldrb	r4, [r2, #3]
    c984:	7811      	ldrb	r1, [r2, #0]
    c986:	7855      	ldrb	r5, [r2, #1]
    c988:	429c      	cmp	r4, r3
    c98a:	d017      	beq.n	c9bc <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
    c98c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    c990:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    c992:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    c994:	b2db      	uxtb	r3, r3
		_first = 0U;
    c996:	429d      	cmp	r5, r3
    c998:	bf08      	it	eq
    c99a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    c99c:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    c99e:	b15c      	cbz	r4, c9b8 <ull_event_done+0x3c>
	link = evdone->hdr.link;
    c9a0:	6823      	ldr	r3, [r4, #0]
	evdone->param = param;
    c9a2:	6220      	str	r0, [r4, #32]
	evdone->hdr.link = NULL;
    c9a4:	2200      	movs	r2, #0
    c9a6:	6022      	str	r2, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    c9a8:	2201      	movs	r2, #1
    c9aa:	7122      	strb	r2, [r4, #4]
	ull_rx_put(link, evdone);
    c9ac:	4621      	mov	r1, r4
    c9ae:	4618      	mov	r0, r3
    c9b0:	f7ff fe2e 	bl	c610 <ull_rx_put>
	ull_rx_sched();
    c9b4:	f7ff fe3c 	bl	c630 <ull_rx_sched>
}
    c9b8:	4620      	mov	r0, r4
    c9ba:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    c9bc:	2400      	movs	r4, #0
    c9be:	e7fb      	b.n	c9b8 <ull_event_done+0x3c>
    c9c0:	2000cc68 	.word	0x2000cc68

0000c9c4 <lll_chan_sel_2>:
}

#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
u8_t lll_chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		    u8_t chan_count)
{
    c9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static u8_t chan_rev_8(u8_t b)
{
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    c9c8:	4f25      	ldr	r7, [pc, #148]	; (ca60 <lll_chan_sel_2+0x9c>)
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    c9ca:	4d26      	ldr	r5, [pc, #152]	; (ca64 <lll_chan_sel_2+0xa0>)
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    c9cc:	4048      	eors	r0, r1
    c9ce:	2403      	movs	r4, #3
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    c9d0:	f640 0c02 	movw	ip, #2050	; 0x802
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    c9d4:	f248 0620 	movw	r6, #32800	; 0x8020
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    c9d8:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    c9dc:	fb0c f80e 	mul.w	r8, ip, lr
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    c9e0:	fb06 fe0e 	mul.w	lr, r6, lr
    c9e4:	ea0e 0e05 	and.w	lr, lr, r5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    c9e8:	ea08 0807 	and.w	r8, r8, r7
    c9ec:	ea48 080e 	orr.w	r8, r8, lr
    c9f0:	b2c0      	uxtb	r0, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    c9f2:	eb08 2e08 	add.w	lr, r8, r8, lsl #8
    c9f6:	eb08 280e 	add.w	r8, r8, lr, lsl #8
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    c9fa:	fb0c fe00 	mul.w	lr, ip, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    c9fe:	4370      	muls	r0, r6
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    ca00:	ea0e 0e07 	and.w	lr, lr, r7
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    ca04:	4028      	ands	r0, r5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    ca06:	ea4e 0000 	orr.w	r0, lr, r0
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    ca0a:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
    ca0e:	eb00 200e 	add.w	r0, r0, lr, lsl #8
    ca12:	ea4f 4818 	mov.w	r8, r8, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    ca16:	f3c0 4007 	ubfx	r0, r0, #16, #8
    ca1a:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	return ((u32_t)a * 17U + b) & 0xFFFF;
    ca1e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    ca22:	3c01      	subs	r4, #1
    ca24:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
    ca26:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((u32_t)a * 17U + b) & 0xFFFF;
    ca2a:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
    ca2c:	d1d4      	bne.n	c9d8 <lll_chan_sel_2+0x14>
	chan_next = prn_e % 37;
    ca2e:	2425      	movs	r4, #37	; 0x25
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    ca30:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    ca32:	fbb1 f0f4 	udiv	r0, r1, r4
    ca36:	fb04 1010 	mls	r0, r4, r0, r1
    ca3a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    ca3c:	08c4      	lsrs	r4, r0, #3
    ca3e:	f000 0507 	and.w	r5, r0, #7
    ca42:	5d14      	ldrb	r4, [r2, r4]
    ca44:	412c      	asrs	r4, r5
    ca46:	07e4      	lsls	r4, r4, #31
    ca48:	d407      	bmi.n	ca5a <lll_chan_sel_2+0x96>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    ca4a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    ca4c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    ca50:	4610      	mov	r0, r2
}
    ca52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    ca56:	f00d bf48 	b.w	1a8ea <chan_sel_remap>
}
    ca5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca5e:	bf00      	nop
    ca60:	00022110 	.word	0x00022110
    ca64:	00088440 	.word	0x00088440

0000ca68 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    ca68:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    ca6a:	4b08      	ldr	r3, [pc, #32]	; (ca8c <rtc0_nrf5_isr+0x24>)
    ca6c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ca70:	b122      	cbz	r2, ca7c <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    ca72:	2000      	movs	r0, #0
    ca74:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
    ca78:	f7fd fce2 	bl	a440 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
    ca7c:	2001      	movs	r0, #1
    ca7e:	f7fd f8cf 	bl	9c20 <mayfly_run>

#if !defined(CONFIG_BT_CTLR_LOW_LAT) && \
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
    ca82:	2002      	movs	r0, #2
#endif

	DEBUG_TICKER_ISR(0);
}
    ca84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
    ca88:	f7fd b8ca 	b.w	9c20 <mayfly_run>
    ca8c:	4000b000 	.word	0x4000b000

0000ca90 <prepare>:
}

static int prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		   lll_prepare_cb_t prepare_cb, int prio,
		   struct lll_prepare_param *prepare_param, u8_t is_resume)
{
    ca90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca94:	b08d      	sub	sp, #52	; 0x34
    ca96:	4699      	mov	r9, r3
    ca98:	9d14      	ldr	r5, [sp, #80]	; 0x50
    ca9a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
	u8_t idx = UINT8_MAX;
    ca9e:	23ff      	movs	r3, #255	; 0xff
{
    caa0:	4680      	mov	r8, r0
    caa2:	460f      	mov	r7, r1
    caa4:	4616      	mov	r6, r2
	u8_t idx = UINT8_MAX;
    caa6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	int ret, err;

	/* Find the ready prepare in the pipeline */
	p = ull_prepare_dequeue_iter(&idx);
	while (p && (p->is_aborted || p->is_resume)) {
		p = ull_prepare_dequeue_iter(&idx);
    caaa:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    caae:	f7ff ff37 	bl	c920 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
    cab2:	b118      	cbz	r0, cabc <prepare+0x2c>
    cab4:	f890 3020 	ldrb.w	r3, [r0, #32]
    cab8:	079b      	lsls	r3, r3, #30
    caba:	d1f6      	bne.n	caaa <prepare+0x1a>
	}

	/* Current event active or another prepare is ready in the pipeline */
	if (event.curr.abort_cb || (p && is_resume)) {
    cabc:	4b36      	ldr	r3, [pc, #216]	; (cb98 <prepare+0x108>)
    cabe:	689a      	ldr	r2, [r3, #8]
    cac0:	b91a      	cbnz	r2, caca <prepare+0x3a>
    cac2:	2800      	cmp	r0, #0
    cac4:	d04a      	beq.n	cb5c <prepare+0xcc>
    cac6:	2c00      	cmp	r4, #0
    cac8:	d048      	beq.n	cb5c <prepare+0xcc>
			/* early abort */
			event.curr.abort_cb(NULL, event.curr.param);
		}

		/* Store the next prepare for deferred call */
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
    caca:	e9cd 9400 	strd	r9, r4, [sp]
    cace:	4633      	mov	r3, r6
    cad0:	462a      	mov	r2, r5
    cad2:	4639      	mov	r1, r7
    cad4:	4640      	mov	r0, r8
    cad6:	f7ff fdb3 	bl	c640 <ull_prepare_enqueue>
					  prepare_cb, prio, is_resume);
		LL_ASSERT(!ret);
    cada:	b160      	cbz	r0, caf6 <prepare+0x66>
    cadc:	f240 13e5 	movw	r3, #485	; 0x1e5
    cae0:	4a2e      	ldr	r2, [pc, #184]	; (cb9c <prepare+0x10c>)
    cae2:	492f      	ldr	r1, [pc, #188]	; (cba0 <prepare+0x110>)
    cae4:	482f      	ldr	r0, [pc, #188]	; (cba4 <prepare+0x114>)
    cae6:	f00b fb25 	bl	18134 <printk>
    caea:	4040      	eors	r0, r0
    caec:	f380 8811 	msr	BASEPRI, r0
    caf0:	f04f 0003 	mov.w	r0, #3
    caf4:	df02      	svc	2

#if !defined(CONFIG_BT_CTLR_LOW_LAT)
		if (is_resume) {
    caf6:	b12c      	cbz	r4, cb04 <prepare+0x74>
				LL_ASSERT(ret == -ECANCELED);
			}
		}
#endif /* CONFIG_BT_CTLR_LOW_LAT */

		return -EINPROGRESS;
    caf8:	f06f 0443 	mvn.w	r4, #67	; 0x43
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));

	return err;
}
    cafc:	4620      	mov	r0, r4
    cafe:	b00d      	add	sp, #52	; 0x34
    cb00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		evt = HDR_LLL2EVT(prepare_param->param);
    cb04:	68eb      	ldr	r3, [r5, #12]
    cb06:	681a      	ldr	r2, [r3, #0]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cb08:	4b27      	ldr	r3, [pc, #156]	; (cba8 <prepare+0x118>)
    cb0a:	9408      	str	r4, [sp, #32]
    cb0c:	e9cd 4306 	strd	r4, r3, [sp, #24]
    cb10:	4b26      	ldr	r3, [pc, #152]	; (cbac <prepare+0x11c>)
    cb12:	9401      	str	r4, [sp, #4]
    cb14:	e9cd 4304 	strd	r4, r3, [sp, #16]
    cb18:	e9cd 4402 	strd	r4, r4, [sp, #8]
		preempt_to = MAX(evt->ticks_active_to_start,
    cb1c:	e9d2 0100 	ldrd	r0, r1, [r2]
    cb20:	6893      	ldr	r3, [r2, #8]
    cb22:	4288      	cmp	r0, r1
    cb24:	bf2c      	ite	cs
    cb26:	ebc3 0300 	rsbcs	r3, r3, r0
    cb2a:	ebc3 0301 	rsbcc	r3, r3, r1
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cb2e:	9300      	str	r3, [sp, #0]
    cb30:	682b      	ldr	r3, [r5, #0]
    cb32:	4622      	mov	r2, r4
    cb34:	4621      	mov	r1, r4
    cb36:	4620      	mov	r0, r4
    cb38:	f7fd fc94 	bl	a464 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cb3c:	2802      	cmp	r0, #2
    cb3e:	d9db      	bls.n	caf8 <prepare+0x68>
    cb40:	f240 2301 	movw	r3, #513	; 0x201
    cb44:	4a15      	ldr	r2, [pc, #84]	; (cb9c <prepare+0x10c>)
    cb46:	491a      	ldr	r1, [pc, #104]	; (cbb0 <prepare+0x120>)
    cb48:	4816      	ldr	r0, [pc, #88]	; (cba4 <prepare+0x114>)
    cb4a:	f00b faf3 	bl	18134 <printk>
    cb4e:	4040      	eors	r0, r0
    cb50:	f380 8811 	msr	BASEPRI, r0
    cb54:	f04f 0003 	mov.w	r0, #3
    cb58:	df02      	svc	2
    cb5a:	e7cd      	b.n	caf8 <prepare+0x68>
	event.curr.param = prepare_param->param;
    cb5c:	68ea      	ldr	r2, [r5, #12]
	event.curr.abort_cb = abort_cb;
    cb5e:	609f      	str	r7, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
    cb60:	e9c3 2800 	strd	r2, r8, [r3]
	err = prepare_cb(prepare_param);
    cb64:	4628      	mov	r0, r5
    cb66:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
    cb68:	2300      	movs	r3, #0
	err = prepare_cb(prepare_param);
    cb6a:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
    cb6c:	9300      	str	r3, [sp, #0]
    cb6e:	461a      	mov	r2, r3
    cb70:	4619      	mov	r1, r3
    cb72:	4618      	mov	r0, r3
    cb74:	f7fd fd08 	bl	a588 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cb78:	2802      	cmp	r0, #2
    cb7a:	d9bf      	bls.n	cafc <prepare+0x6c>
    cb7c:	f240 2331 	movw	r3, #561	; 0x231
    cb80:	4a06      	ldr	r2, [pc, #24]	; (cb9c <prepare+0x10c>)
    cb82:	490b      	ldr	r1, [pc, #44]	; (cbb0 <prepare+0x120>)
    cb84:	4807      	ldr	r0, [pc, #28]	; (cba4 <prepare+0x114>)
    cb86:	f00b fad5 	bl	18134 <printk>
    cb8a:	4040      	eors	r0, r0
    cb8c:	f380 8811 	msr	BASEPRI, r0
    cb90:	f04f 0003 	mov.w	r0, #3
    cb94:	df02      	svc	2
    cb96:	e7b1      	b.n	cafc <prepare+0x6c>
    cb98:	20000d98 	.word	0x20000d98
    cb9c:	00020a49 	.word	0x00020a49
    cba0:	000208c5 	.word	0x000208c5
    cba4:	0001ff46 	.word	0x0001ff46
    cba8:	0000ccb9 	.word	0x0000ccb9
    cbac:	0000cce9 	.word	0x0000cce9
    cbb0:	00020a88 	.word	0x00020a88

0000cbb4 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
    cbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbb6:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
    cbb8:	f7ff fd74 	bl	c6a4 <ull_prepare_dequeue_get>
	lll_prepare_cb_t resume_cb;
	u8_t idx = UINT8_MAX;
    cbbc:	23ff      	movs	r3, #255	; 0xff
	int resume_prio;
	int ret;

	next = ull_prepare_dequeue_iter(&idx);
    cbbe:	f10d 000e 	add.w	r0, sp, #14
	u8_t idx = UINT8_MAX;
    cbc2:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
    cbc6:	f7ff feab 	bl	c920 <ull_prepare_dequeue_iter>
	if (!next || !event.curr.abort_cb || !event.curr.param) {
    cbca:	4605      	mov	r5, r0
    cbcc:	b120      	cbz	r0, cbd8 <preempt+0x24>
    cbce:	4c35      	ldr	r4, [pc, #212]	; (cca4 <preempt+0xf0>)
    cbd0:	68a3      	ldr	r3, [r4, #8]
    cbd2:	b10b      	cbz	r3, cbd8 <preempt+0x24>
    cbd4:	6823      	ldr	r3, [r4, #0]
    cbd6:	b943      	cbnz	r3, cbea <preempt+0x36>
		ret = resume_enqueue(resume_cb, resume_prio);
		LL_ASSERT(!ret);
	} else {
		LL_ASSERT(ret == -ECANCELED);
	}
}
    cbd8:	b00b      	add	sp, #44	; 0x2c
    cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
    cbdc:	f10d 000e 	add.w	r0, sp, #14
    cbe0:	f7ff fe9e 	bl	c920 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
    cbe4:	4605      	mov	r5, r0
    cbe6:	2800      	cmp	r0, #0
    cbe8:	d0f6      	beq.n	cbd8 <preempt+0x24>
    cbea:	f895 0020 	ldrb.w	r0, [r5, #32]
    cbee:	f010 0603 	ands.w	r6, r0, #3
    cbf2:	d1f3      	bne.n	cbdc <preempt+0x28>
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
    cbf4:	ab05      	add	r3, sp, #20
    cbf6:	9300      	str	r3, [sp, #0]
    cbf8:	6867      	ldr	r7, [r4, #4]
    cbfa:	6822      	ldr	r2, [r4, #0]
    cbfc:	69e9      	ldr	r1, [r5, #28]
    cbfe:	68e8      	ldr	r0, [r5, #12]
    cc00:	ab04      	add	r3, sp, #16
    cc02:	47b8      	blx	r7
	if (!ret) {
    cc04:	4607      	mov	r7, r0
    cc06:	b950      	cbnz	r0, cc1e <preempt+0x6a>
		next->is_aborted = 1;
    cc08:	f895 3020 	ldrb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    cc0c:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
    cc0e:	f043 0302 	orr.w	r3, r3, #2
    cc12:	f885 3020 	strb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    cc16:	4628      	mov	r0, r5
    cc18:	69ab      	ldr	r3, [r5, #24]
    cc1a:	4798      	blx	r3
		return;
    cc1c:	e7dc      	b.n	cbd8 <preempt+0x24>
	event.curr.abort_cb(NULL, event.curr.param);
    cc1e:	68a3      	ldr	r3, [r4, #8]
    cc20:	6821      	ldr	r1, [r4, #0]
    cc22:	4630      	mov	r0, r6
    cc24:	4798      	blx	r3
	if (ret == -EAGAIN) {
    cc26:	f117 0f0b 	cmn.w	r7, #11
    cc2a:	d133      	bne.n	cc94 <preempt+0xe0>
		u8_t idx = UINT8_MAX;
    cc2c:	23ff      	movs	r3, #255	; 0xff
    cc2e:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&idx);
    cc32:	f10d 000f 	add.w	r0, sp, #15
    cc36:	f7ff fe73 	bl	c920 <ull_prepare_dequeue_iter>
		while (iter) {
    cc3a:	b9e0      	cbnz	r0, cc76 <preempt+0xc2>
	prepare_param.param = event.curr.param;
    cc3c:	6823      	ldr	r3, [r4, #0]
    cc3e:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    cc40:	2301      	movs	r3, #1
    cc42:	9301      	str	r3, [sp, #4]
    cc44:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
    cc46:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    cc48:	9300      	str	r3, [sp, #0]
    cc4a:	aa06      	add	r2, sp, #24
    cc4c:	9b04      	ldr	r3, [sp, #16]
    cc4e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    cc52:	f7ff fcf5 	bl	c640 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
    cc56:	2800      	cmp	r0, #0
    cc58:	d0be      	beq.n	cbd8 <preempt+0x24>
    cc5a:	4a13      	ldr	r2, [pc, #76]	; (cca8 <preempt+0xf4>)
    cc5c:	4913      	ldr	r1, [pc, #76]	; (ccac <preempt+0xf8>)
    cc5e:	f44f 7323 	mov.w	r3, #652	; 0x28c
		LL_ASSERT(ret == -ECANCELED);
    cc62:	4813      	ldr	r0, [pc, #76]	; (ccb0 <preempt+0xfc>)
    cc64:	f00b fa66 	bl	18134 <printk>
    cc68:	4040      	eors	r0, r0
    cc6a:	f380 8811 	msr	BASEPRI, r0
    cc6e:	f04f 0003 	mov.w	r0, #3
    cc72:	df02      	svc	2
    cc74:	e7b0      	b.n	cbd8 <preempt+0x24>
			if (!iter->is_aborted &&
    cc76:	f890 3020 	ldrb.w	r3, [r0, #32]
    cc7a:	079a      	lsls	r2, r3, #30
    cc7c:	d4d9      	bmi.n	cc32 <preempt+0x7e>
			    event.curr.param == iter->prepare_param.param) {
    cc7e:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
    cc80:	6821      	ldr	r1, [r4, #0]
    cc82:	4291      	cmp	r1, r2
    cc84:	d1d5      	bne.n	cc32 <preempt+0x7e>
				iter->is_aborted = 1;
    cc86:	f043 0302 	orr.w	r3, r3, #2
    cc8a:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
    cc8e:	6983      	ldr	r3, [r0, #24]
    cc90:	4798      	blx	r3
    cc92:	e7ce      	b.n	cc32 <preempt+0x7e>
		LL_ASSERT(ret == -ECANCELED);
    cc94:	3748      	adds	r7, #72	; 0x48
    cc96:	d09f      	beq.n	cbd8 <preempt+0x24>
    cc98:	f240 238e 	movw	r3, #654	; 0x28e
    cc9c:	4a02      	ldr	r2, [pc, #8]	; (cca8 <preempt+0xf4>)
    cc9e:	4905      	ldr	r1, [pc, #20]	; (ccb4 <preempt+0x100>)
    cca0:	e7df      	b.n	cc62 <preempt+0xae>
    cca2:	bf00      	nop
    cca4:	20000d98 	.word	0x20000d98
    cca8:	00020a49 	.word	0x00020a49
    ccac:	000208c5 	.word	0x000208c5
    ccb0:	0001ff46 	.word	0x0001ff46
    ccb4:	00020a3e 	.word	0x00020a3e

0000ccb8 <ticker_start_op_cb>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ccb8:	2801      	cmp	r0, #1
{
    ccba:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ccbc:	d90c      	bls.n	ccd8 <ticker_start_op_cb+0x20>
    ccbe:	f240 234a 	movw	r3, #586	; 0x24a
    ccc2:	4a06      	ldr	r2, [pc, #24]	; (ccdc <ticker_start_op_cb+0x24>)
    ccc4:	4906      	ldr	r1, [pc, #24]	; (cce0 <ticker_start_op_cb+0x28>)
    ccc6:	4807      	ldr	r0, [pc, #28]	; (cce4 <ticker_start_op_cb+0x2c>)
    ccc8:	f00b fa34 	bl	18134 <printk>
    cccc:	4040      	eors	r0, r0
    ccce:	f380 8811 	msr	BASEPRI, r0
    ccd2:	f04f 0003 	mov.w	r0, #3
    ccd6:	df02      	svc	2
}
    ccd8:	bd08      	pop	{r3, pc}
    ccda:	bf00      	nop
    ccdc:	00020a49 	.word	0x00020a49
    cce0:	00020abb 	.word	0x00020abb
    cce4:	0001ff46 	.word	0x0001ff46

0000cce8 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    cce8:	2200      	movs	r2, #0
{
    ccea:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    ccec:	4611      	mov	r1, r2
    ccee:	4b09      	ldr	r3, [pc, #36]	; (cd14 <preempt_ticker_cb+0x2c>)
    ccf0:	2001      	movs	r0, #1
    ccf2:	f7fc ff45 	bl	9b80 <mayfly_enqueue>
	LL_ASSERT(!ret);
    ccf6:	b160      	cbz	r0, cd12 <preempt_ticker_cb+0x2a>
    ccf8:	f240 2356 	movw	r3, #598	; 0x256
    ccfc:	4a06      	ldr	r2, [pc, #24]	; (cd18 <preempt_ticker_cb+0x30>)
    ccfe:	4907      	ldr	r1, [pc, #28]	; (cd1c <preempt_ticker_cb+0x34>)
    cd00:	4807      	ldr	r0, [pc, #28]	; (cd20 <preempt_ticker_cb+0x38>)
    cd02:	f00b fa17 	bl	18134 <printk>
    cd06:	4040      	eors	r0, r0
    cd08:	f380 8811 	msr	BASEPRI, r0
    cd0c:	f04f 0003 	mov.w	r0, #3
    cd10:	df02      	svc	2
}
    cd12:	bd08      	pop	{r3, pc}
    cd14:	2000ce30 	.word	0x2000ce30
    cd18:	00020a49 	.word	0x00020a49
    cd1c:	000208c5 	.word	0x000208c5
    cd20:	0001ff46 	.word	0x0001ff46

0000cd24 <lll_init>:
{
    cd24:	b538      	push	{r3, r4, r5, lr}
    cd26:	4818      	ldr	r0, [pc, #96]	; (cd88 <lll_init+0x64>)
    cd28:	f009 fd54 	bl	167d4 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    cd2c:	4b17      	ldr	r3, [pc, #92]	; (cd8c <lll_init+0x68>)
    cd2e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
    cd30:	b910      	cbnz	r0, cd38 <lll_init+0x14>
		return -ENODEV;
    cd32:	f06f 0012 	mvn.w	r0, #18
}
    cd36:	bd38      	pop	{r3, r4, r5, pc}
	event.curr.abort_cb = NULL;
    cd38:	4b15      	ldr	r3, [pc, #84]	; (cd90 <lll_init+0x6c>)
    cd3a:	2400      	movs	r4, #0
    cd3c:	609c      	str	r4, [r3, #8]
    cd3e:	4815      	ldr	r0, [pc, #84]	; (cd94 <lll_init+0x70>)
    cd40:	f009 fd48 	bl	167d4 <z_impl_device_get_binding>
	if (!clk) {
    cd44:	4605      	mov	r5, r0
    cd46:	2800      	cmp	r0, #0
    cd48:	d0f3      	beq.n	cd32 <lll_init+0xe>
	clock_control_on(clk, CLOCK_CONTROL_NRF_SUBSYS_LF);
    cd4a:	2101      	movs	r1, #1
    cd4c:	f00d fe08 	bl	1a960 <clock_control_on>
	lll.clk = clk;
    cd50:	4b11      	ldr	r3, [pc, #68]	; (cd98 <lll_init+0x74>)
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
    cd52:	4622      	mov	r2, r4
    cd54:	4621      	mov	r1, r4
    cd56:	2001      	movs	r0, #1
	lll.clk = clk;
    cd58:	601d      	str	r5, [r3, #0]
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
    cd5a:	f7f6 f9e5 	bl	3128 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
    cd5e:	4622      	mov	r2, r4
    cd60:	4621      	mov	r1, r4
    cd62:	200b      	movs	r0, #11
    cd64:	f7f6 f9e0 	bl	3128 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
    cd68:	4622      	mov	r2, r4
    cd6a:	4621      	mov	r1, r4
    cd6c:	2018      	movs	r0, #24
    cd6e:	f7f6 f9db 	bl	3128 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    cd72:	2001      	movs	r0, #1
    cd74:	f7f6 f9a6 	bl	30c4 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
    cd78:	200b      	movs	r0, #11
    cd7a:	f7f6 f9a3 	bl	30c4 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
    cd7e:	2018      	movs	r0, #24
    cd80:	f7f6 f9a0 	bl	30c4 <arch_irq_enable>
	return 0;
    cd84:	4620      	mov	r0, r4
    cd86:	e7d6      	b.n	cd36 <lll_init+0x12>
    cd88:	000208ac 	.word	0x000208ac
    cd8c:	20000d94 	.word	0x20000d94
    cd90:	20000d98 	.word	0x20000d98
    cd94:	0001f43b 	.word	0x0001f43b
    cd98:	20000dac 	.word	0x20000dac

0000cd9c <lll_entropy_get>:
{
    cd9c:	b538      	push	{r3, r4, r5, lr}
	return entropy_get_entropy_isr(dev_entropy, rand, len, 0);
    cd9e:	4b07      	ldr	r3, [pc, #28]	; (cdbc <lll_entropy_get+0x20>)
    cda0:	681d      	ldr	r5, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
    cda2:	686b      	ldr	r3, [r5, #4]
    cda4:	685c      	ldr	r4, [r3, #4]
    cda6:	4602      	mov	r2, r0
    cda8:	b124      	cbz	r4, cdb4 <lll_entropy_get+0x18>
	return api->get_entropy_isr(dev, buffer, length, flags);
    cdaa:	2300      	movs	r3, #0
    cdac:	4628      	mov	r0, r5
    cdae:	47a0      	blx	r4
}
    cdb0:	b2c0      	uxtb	r0, r0
    cdb2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    cdb4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cdb8:	e7fa      	b.n	cdb0 <lll_entropy_get+0x14>
    cdba:	bf00      	nop
    cdbc:	20000d94 	.word	0x20000d94

0000cdc0 <lll_resume>:
{
    cdc0:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
    cdc2:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
    cdc6:	f003 0301 	and.w	r3, r3, #1
    cdca:	e9cd 0300 	strd	r0, r3, [sp]
    cdce:	69c3      	ldr	r3, [r0, #28]
    cdd0:	6902      	ldr	r2, [r0, #16]
    cdd2:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
    cdd6:	f7ff fe5b 	bl	ca90 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    cdda:	b168      	cbz	r0, cdf8 <lll_resume+0x38>
    cddc:	3044      	adds	r0, #68	; 0x44
    cdde:	d00b      	beq.n	cdf8 <lll_resume+0x38>
    cde0:	23da      	movs	r3, #218	; 0xda
    cde2:	4a07      	ldr	r2, [pc, #28]	; (ce00 <lll_resume+0x40>)
    cde4:	4907      	ldr	r1, [pc, #28]	; (ce04 <lll_resume+0x44>)
    cde6:	4808      	ldr	r0, [pc, #32]	; (ce08 <lll_resume+0x48>)
    cde8:	f00b f9a4 	bl	18134 <printk>
    cdec:	4040      	eors	r0, r0
    cdee:	f380 8811 	msr	BASEPRI, r0
    cdf2:	f04f 0003 	mov.w	r0, #3
    cdf6:	df02      	svc	2
}
    cdf8:	b003      	add	sp, #12
    cdfa:	f85d fb04 	ldr.w	pc, [sp], #4
    cdfe:	bf00      	nop
    ce00:	00020a49 	.word	0x00020a49
    ce04:	00020a2b 	.word	0x00020a2b
    ce08:	0001ff46 	.word	0x0001ff46

0000ce0c <lll_disable>:
{
    ce0c:	b513      	push	{r0, r1, r4, lr}
    ce0e:	4b1b      	ldr	r3, [pc, #108]	; (ce7c <lll_disable+0x70>)
	if (!param || (param == event.curr.param)) {
    ce10:	4604      	mov	r4, r0
    ce12:	b110      	cbz	r0, ce1a <lll_disable+0xe>
    ce14:	681a      	ldr	r2, [r3, #0]
    ce16:	4282      	cmp	r2, r0
    ce18:	d105      	bne.n	ce26 <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
    ce1a:	689a      	ldr	r2, [r3, #8]
    ce1c:	b16a      	cbz	r2, ce3a <lll_disable+0x2e>
    ce1e:	6819      	ldr	r1, [r3, #0]
    ce20:	b159      	cbz	r1, ce3a <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
    ce22:	2000      	movs	r0, #0
    ce24:	4790      	blx	r2
		u8_t idx = UINT8_MAX;
    ce26:	23ff      	movs	r3, #255	; 0xff
    ce28:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
    ce2c:	f10d 0007 	add.w	r0, sp, #7
    ce30:	f7ff fd76 	bl	c920 <ull_prepare_dequeue_iter>
		while (next) {
    ce34:	b980      	cbnz	r0, ce58 <lll_disable+0x4c>
}
    ce36:	b002      	add	sp, #8
    ce38:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
    ce3a:	2c00      	cmp	r4, #0
    ce3c:	d0f3      	beq.n	ce26 <lll_disable+0x1a>
    ce3e:	23e4      	movs	r3, #228	; 0xe4
    ce40:	4a0f      	ldr	r2, [pc, #60]	; (ce80 <lll_disable+0x74>)
    ce42:	4910      	ldr	r1, [pc, #64]	; (ce84 <lll_disable+0x78>)
    ce44:	4810      	ldr	r0, [pc, #64]	; (ce88 <lll_disable+0x7c>)
    ce46:	f00b f975 	bl	18134 <printk>
    ce4a:	4040      	eors	r0, r0
    ce4c:	f380 8811 	msr	BASEPRI, r0
    ce50:	f04f 0003 	mov.w	r0, #3
    ce54:	df02      	svc	2
    ce56:	e7e6      	b.n	ce26 <lll_disable+0x1a>
			if (!next->is_aborted &&
    ce58:	f890 3020 	ldrb.w	r3, [r0, #32]
    ce5c:	079b      	lsls	r3, r3, #30
    ce5e:	d4e5      	bmi.n	ce2c <lll_disable+0x20>
    ce60:	68c1      	ldr	r1, [r0, #12]
    ce62:	b10c      	cbz	r4, ce68 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
    ce64:	428c      	cmp	r4, r1
    ce66:	d1e1      	bne.n	ce2c <lll_disable+0x20>
				next->is_aborted = 1;
    ce68:	f890 3020 	ldrb.w	r3, [r0, #32]
    ce6c:	f043 0302 	orr.w	r3, r3, #2
    ce70:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
    ce74:	6983      	ldr	r3, [r0, #24]
    ce76:	4798      	blx	r3
    ce78:	e7d8      	b.n	ce2c <lll_disable+0x20>
    ce7a:	bf00      	nop
    ce7c:	20000d98 	.word	0x20000d98
    ce80:	00020a49 	.word	0x00020a49
    ce84:	000209fa 	.word	0x000209fa
    ce88:	0001ff46 	.word	0x0001ff46

0000ce8c <lll_done>:
{
    ce8c:	b510      	push	{r4, lr}
    ce8e:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
    ce90:	f7ff fc08 	bl	c6a4 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
    ce94:	b17c      	cbz	r4, ceb6 <lll_done+0x2a>
    ce96:	b960      	cbnz	r0, ceb2 <lll_done+0x26>
    ce98:	f240 1313 	movw	r3, #275	; 0x113
    ce9c:	4a1a      	ldr	r2, [pc, #104]	; (cf08 <lll_done+0x7c>)
    ce9e:	491b      	ldr	r1, [pc, #108]	; (cf0c <lll_done+0x80>)
    cea0:	481b      	ldr	r0, [pc, #108]	; (cf10 <lll_done+0x84>)
    cea2:	f00b f947 	bl	18134 <printk>
    cea6:	4040      	eors	r0, r0
    cea8:	f380 8811 	msr	BASEPRI, r0
    ceac:	f04f 0003 	mov.w	r0, #3
    ceb0:	df02      	svc	2
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    ceb2:	6820      	ldr	r0, [r4, #0]
    ceb4:	e015      	b.n	cee2 <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
    ceb6:	4c17      	ldr	r4, [pc, #92]	; (cf14 <lll_done+0x88>)
    ceb8:	68a3      	ldr	r3, [r4, #8]
    ceba:	b963      	cbnz	r3, ced6 <lll_done+0x4a>
    cebc:	f44f 738c 	mov.w	r3, #280	; 0x118
    cec0:	4a11      	ldr	r2, [pc, #68]	; (cf08 <lll_done+0x7c>)
    cec2:	4915      	ldr	r1, [pc, #84]	; (cf18 <lll_done+0x8c>)
    cec4:	4812      	ldr	r0, [pc, #72]	; (cf10 <lll_done+0x84>)
    cec6:	f00b f935 	bl	18134 <printk>
    ceca:	4040      	eors	r0, r0
    cecc:	f380 8811 	msr	BASEPRI, r0
    ced0:	f04f 0003 	mov.w	r0, #3
    ced4:	df02      	svc	2
		param = event.curr.param;
    ced6:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
    ced8:	2300      	movs	r3, #0
    ceda:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
    cedc:	6023      	str	r3, [r4, #0]
		if (param) {
    cede:	b108      	cbz	r0, cee4 <lll_done+0x58>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    cee0:	6800      	ldr	r0, [r0, #0]
    cee2:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
    cee4:	f7ff fd4a 	bl	c97c <ull_event_done>
	LL_ASSERT(evdone);
    cee8:	b960      	cbnz	r0, cf04 <lll_done+0x78>
    ceea:	f44f 7398 	mov.w	r3, #304	; 0x130
    ceee:	4a06      	ldr	r2, [pc, #24]	; (cf08 <lll_done+0x7c>)
    cef0:	490a      	ldr	r1, [pc, #40]	; (cf1c <lll_done+0x90>)
    cef2:	4807      	ldr	r0, [pc, #28]	; (cf10 <lll_done+0x84>)
    cef4:	f00b f91e 	bl	18134 <printk>
    cef8:	4040      	eors	r0, r0
    cefa:	f380 8811 	msr	BASEPRI, r0
    cefe:	f04f 0003 	mov.w	r0, #3
    cf02:	df02      	svc	2
}
    cf04:	2000      	movs	r0, #0
    cf06:	bd10      	pop	{r4, pc}
    cf08:	00020a49 	.word	0x00020a49
    cf0c:	00020a01 	.word	0x00020a01
    cf10:	0001ff46 	.word	0x0001ff46
    cf14:	20000d98 	.word	0x20000d98
    cf18:	00020a10 	.word	0x00020a10
    cf1c:	00020a24 	.word	0x00020a24

0000cf20 <lll_clk_on>:
	err = clock_control_on(lll.clk, CLOCK_CONTROL_NRF_SUBSYS_HF);
    cf20:	4b02      	ldr	r3, [pc, #8]	; (cf2c <lll_clk_on+0xc>)
    cf22:	2100      	movs	r1, #0
    cf24:	6818      	ldr	r0, [r3, #0]
    cf26:	f00d bd1b 	b.w	1a960 <clock_control_on>
    cf2a:	bf00      	nop
    cf2c:	20000dac 	.word	0x20000dac

0000cf30 <lll_clk_off>:
	err = clock_control_off(lll.clk, CLOCK_CONTROL_NRF_SUBSYS_HF);
    cf30:	4b02      	ldr	r3, [pc, #8]	; (cf3c <lll_clk_off+0xc>)
    cf32:	6818      	ldr	r0, [r3, #0]
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
    cf34:	6843      	ldr	r3, [r0, #4]
    cf36:	2100      	movs	r1, #0
    cf38:	685b      	ldr	r3, [r3, #4]
    cf3a:	4718      	bx	r3
    cf3c:	20000dac 	.word	0x20000dac

0000cf40 <lll_chan_set>:
	switch (chan) {
    cf40:	2826      	cmp	r0, #38	; 0x26
{
    cf42:	b510      	push	{r4, lr}
    cf44:	4604      	mov	r4, r0
	switch (chan) {
    cf46:	d00b      	beq.n	cf60 <lll_chan_set+0x20>
    cf48:	2827      	cmp	r0, #39	; 0x27
    cf4a:	d00b      	beq.n	cf64 <lll_chan_set+0x24>
    cf4c:	2825      	cmp	r0, #37	; 0x25
    cf4e:	d10b      	bne.n	cf68 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
    cf50:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
    cf52:	f004 fe81 	bl	11c58 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    cf56:	4620      	mov	r0, r4
}
    cf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    cf5c:	f004 be82 	b.w	11c64 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    cf60:	201a      	movs	r0, #26
    cf62:	e7f6      	b.n	cf52 <lll_chan_set+0x12>
		radio_freq_chan_set(80);
    cf64:	2050      	movs	r0, #80	; 0x50
    cf66:	e7f4      	b.n	cf52 <lll_chan_set+0x12>
		if (chan < 11) {
    cf68:	280a      	cmp	r0, #10
    cf6a:	d802      	bhi.n	cf72 <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
    cf6c:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    cf6e:	0040      	lsls	r0, r0, #1
    cf70:	e7ef      	b.n	cf52 <lll_chan_set+0x12>
		} else if (chan < 40) {
    cf72:	2827      	cmp	r0, #39	; 0x27
    cf74:	d801      	bhi.n	cf7a <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    cf76:	3003      	adds	r0, #3
    cf78:	e7f9      	b.n	cf6e <lll_chan_set+0x2e>
			LL_ASSERT(0);
    cf7a:	f240 13a1 	movw	r3, #417	; 0x1a1
    cf7e:	4a06      	ldr	r2, [pc, #24]	; (cf98 <lll_chan_set+0x58>)
    cf80:	4906      	ldr	r1, [pc, #24]	; (cf9c <lll_chan_set+0x5c>)
    cf82:	4807      	ldr	r0, [pc, #28]	; (cfa0 <lll_chan_set+0x60>)
    cf84:	f00b f8d6 	bl	18134 <printk>
    cf88:	4040      	eors	r0, r0
    cf8a:	f380 8811 	msr	BASEPRI, r0
    cf8e:	f04f 0003 	mov.w	r0, #3
    cf92:	df02      	svc	2
    cf94:	e7df      	b.n	cf56 <lll_chan_set+0x16>
    cf96:	bf00      	nop
    cf98:	00020a49 	.word	0x00020a49
    cf9c:	0002195a 	.word	0x0002195a
    cfa0:	0001ff46 	.word	0x0001ff46

0000cfa4 <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
    cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
    cfa6:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
    cfa8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
{
    cfac:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    cfae:	b963      	cbnz	r3, cfca <disabled_cb+0x26>
    cfb0:	f240 4396 	movw	r3, #1174	; 0x496
    cfb4:	4a1d      	ldr	r2, [pc, #116]	; (d02c <disabled_cb+0x88>)
    cfb6:	491e      	ldr	r1, [pc, #120]	; (d030 <disabled_cb+0x8c>)
    cfb8:	481e      	ldr	r0, [pc, #120]	; (d034 <disabled_cb+0x90>)
    cfba:	f00b f8bb 	bl	18134 <printk>
    cfbe:	4040      	eors	r0, r0
    cfc0:	f380 8811 	msr	BASEPRI, r0
    cfc4:	f04f 0003 	mov.w	r0, #3
    cfc8:	df02      	svc	2
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;
    cfca:	2300      	movs	r3, #0
	link = adv->link_cc_free;
    cfcc:	f8d5 70d0 	ldr.w	r7, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
    cfd0:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0

	LL_ASSERT(adv->node_rx_cc_free);
    cfd4:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    cfd8:	b963      	cbnz	r3, cff4 <disabled_cb+0x50>
    cfda:	f240 439a 	movw	r3, #1178	; 0x49a
    cfde:	4a13      	ldr	r2, [pc, #76]	; (d02c <disabled_cb+0x88>)
    cfe0:	4915      	ldr	r1, [pc, #84]	; (d038 <disabled_cb+0x94>)
    cfe2:	4814      	ldr	r0, [pc, #80]	; (d034 <disabled_cb+0x90>)
    cfe4:	f00b f8a6 	bl	18134 <printk>
    cfe8:	4040      	eors	r0, r0
    cfea:	f380 8811 	msr	BASEPRI, r0
    cfee:	f04f 0003 	mov.w	r0, #3
    cff2:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    cff4:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
	adv->node_rx_cc_free = NULL;
    cff8:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cffa:	2308      	movs	r3, #8
	adv->node_rx_cc_free = NULL;
    cffc:	f8c5 10d4 	str.w	r1, [r5, #212]	; 0xd4
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    d000:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    d002:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d006:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    d008:	221e      	movs	r2, #30
    d00a:	f104 0020 	add.w	r0, r4, #32
    d00e:	f00b fe3e 	bl	18c8e <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    d012:	233c      	movs	r3, #60	; 0x3c
    d014:	f884 3020 	strb.w	r3, [r4, #32]

	ftr = &(rx->hdr.rx_ftr);
	ftr->param = param;
    d018:	60a6      	str	r6, [r4, #8]

	ll_rx_put(link, rx);
    d01a:	4621      	mov	r1, r4
    d01c:	4638      	mov	r0, r7
    d01e:	f7ff f9d7 	bl	c3d0 <ll_rx_put>
	ll_rx_sched();
}
    d022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    d026:	f7ff b9dd 	b.w	c3e4 <ll_rx_sched>
    d02a:	bf00      	nop
    d02c:	00020ae6 	.word	0x00020ae6
    d030:	00020b1e 	.word	0x00020b1e
    d034:	0001ff46 	.word	0x0001ff46
    d038:	00020b30 	.word	0x00020b30

0000d03c <ticker_cb>:
{
    d03c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d03e:	461d      	mov	r5, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    d040:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d044:	429a      	cmp	r2, r3
{
    d046:	b08b      	sub	sp, #44	; 0x2c
    d048:	4607      	mov	r7, r0
    d04a:	460e      	mov	r6, r1
    d04c:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    d04e:	d02d      	beq.n	d0ac <ticker_cb+0x70>
	return ++hdr->ref;
    d050:	7c2b      	ldrb	r3, [r5, #16]
    d052:	3301      	adds	r3, #1
    d054:	b2db      	uxtb	r3, r3
    d056:	742b      	strb	r3, [r5, #16]
		LL_ASSERT(ref);
    d058:	b963      	cbnz	r3, d074 <ticker_cb+0x38>
    d05a:	f240 4312 	movw	r3, #1042	; 0x412
    d05e:	4a2f      	ldr	r2, [pc, #188]	; (d11c <ticker_cb+0xe0>)
    d060:	492f      	ldr	r1, [pc, #188]	; (d120 <ticker_cb+0xe4>)
    d062:	4830      	ldr	r0, [pc, #192]	; (d124 <ticker_cb+0xe8>)
    d064:	f00b f866 	bl	18134 <printk>
    d068:	4040      	eors	r0, r0
    d06a:	f380 8811 	msr	BASEPRI, r0
    d06e:	f04f 0003 	mov.w	r0, #3
    d072:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
    d074:	4a2c      	ldr	r2, [pc, #176]	; (d128 <ticker_cb+0xec>)
	lll = &adv->lll;
    d076:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
    d07a:	60d3      	str	r3, [r2, #12]
		mfy.param = &p;
    d07c:	4b2b      	ldr	r3, [pc, #172]	; (d12c <ticker_cb+0xf0>)
		p.lazy = lazy;
    d07e:	8114      	strh	r4, [r2, #8]
		p.remainder = remainder;
    d080:	e9c2 7600 	strd	r7, r6, [r2]
		mfy.param = &p;
    d084:	609a      	str	r2, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    d086:	2200      	movs	r2, #0
    d088:	4611      	mov	r1, r2
    d08a:	2001      	movs	r0, #1
    d08c:	f7fc fd78 	bl	9b80 <mayfly_enqueue>
		LL_ASSERT(!ret);
    d090:	b160      	cbz	r0, d0ac <ticker_cb+0x70>
    d092:	f240 431e 	movw	r3, #1054	; 0x41e
    d096:	4a21      	ldr	r2, [pc, #132]	; (d11c <ticker_cb+0xe0>)
    d098:	4925      	ldr	r1, [pc, #148]	; (d130 <ticker_cb+0xf4>)
    d09a:	4822      	ldr	r0, [pc, #136]	; (d124 <ticker_cb+0xe8>)
    d09c:	f00b f84a 	bl	18134 <printk>
    d0a0:	4040      	eors	r0, r0
    d0a2:	f380 8811 	msr	BASEPRI, r0
    d0a6:	f04f 0003 	mov.w	r0, #3
    d0aa:	df02      	svc	2
	if (!lll->is_hdcd)
    d0ac:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
    d0b0:	f014 0401 	ands.w	r4, r4, #1
    d0b4:	d12f      	bne.n	d116 <ticker_cb+0xda>
		lll_entropy_get(sizeof(random_delay), &random_delay);
    d0b6:	a909      	add	r1, sp, #36	; 0x24
    d0b8:	2004      	movs	r0, #4
    d0ba:	f7ff fe6f 	bl	cd9c <lll_entropy_get>
		random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    d0be:	9909      	ldr	r1, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d0c0:	9506      	str	r5, [sp, #24]
		random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    d0c2:	f240 1247 	movw	r2, #327	; 0x147
    d0c6:	fbb1 f3f2 	udiv	r3, r1, r2
    d0ca:	fb02 1313 	mls	r3, r2, r3, r1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    d0ce:	4a19      	ldr	r2, [pc, #100]	; (d134 <ticker_cb+0xf8>)
    d0d0:	21e4      	movs	r1, #228	; 0xe4
    d0d2:	1aaa      	subs	r2, r5, r2
    d0d4:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d0d8:	4917      	ldr	r1, [pc, #92]	; (d138 <ticker_cb+0xfc>)
				    (TICKER_ID_ADV_BASE +
    d0da:	3202      	adds	r2, #2
		random_delay += 1;
    d0dc:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d0de:	e9cd 4104 	strd	r4, r1, [sp, #16]
    d0e2:	e9cd 4402 	strd	r4, r4, [sp, #8]
    d0e6:	e9cd 4400 	strd	r4, r4, [sp]
    d0ea:	b2d2      	uxtb	r2, r2
    d0ec:	2101      	movs	r1, #1
    d0ee:	4620      	mov	r0, r4
		random_delay += 1;
    d0f0:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d0f2:	f7fd fa01 	bl	a4f8 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d0f6:	f030 0302 	bics.w	r3, r0, #2
    d0fa:	d00c      	beq.n	d116 <ticker_cb+0xda>
    d0fc:	f240 4335 	movw	r3, #1077	; 0x435
    d100:	4a06      	ldr	r2, [pc, #24]	; (d11c <ticker_cb+0xe0>)
    d102:	490e      	ldr	r1, [pc, #56]	; (d13c <ticker_cb+0x100>)
    d104:	4807      	ldr	r0, [pc, #28]	; (d124 <ticker_cb+0xe8>)
    d106:	f00b f815 	bl	18134 <printk>
    d10a:	4040      	eors	r0, r0
    d10c:	f380 8811 	msr	BASEPRI, r0
    d110:	f04f 0003 	mov.w	r0, #3
    d114:	df02      	svc	2
}
    d116:	b00b      	add	sp, #44	; 0x2c
    d118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d11a:	bf00      	nop
    d11c:	00020ae6 	.word	0x00020ae6
    d120:	000209c9 	.word	0x000209c9
    d124:	0001ff46 	.word	0x0001ff46
    d128:	20000ea4 	.word	0x20000ea4
    d12c:	2000ce40 	.word	0x2000ce40
    d130:	000208c5 	.word	0x000208c5
    d134:	20000dc0 	.word	0x20000dc0
    d138:	0000d261 	.word	0x0000d261
    d13c:	00020b55 	.word	0x00020b55

0000d140 <conn_release>:

static inline void conn_release(struct ll_adv_set *adv)
{
    d140:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    d142:	6a45      	ldr	r5, [r0, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
    d144:	6deb      	ldr	r3, [r5, #92]	; 0x5c
{
    d146:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
    d148:	b163      	cbz	r3, d164 <conn_release+0x24>
    d14a:	f240 43b1 	movw	r3, #1201	; 0x4b1
    d14e:	4a19      	ldr	r2, [pc, #100]	; (d1b4 <conn_release+0x74>)
    d150:	4919      	ldr	r1, [pc, #100]	; (d1b8 <conn_release+0x78>)
    d152:	481a      	ldr	r0, [pc, #104]	; (d1bc <conn_release+0x7c>)
    d154:	f00a ffee 	bl	18134 <printk>
    d158:	4040      	eors	r0, r0
    d15a:	f380 8811 	msr	BASEPRI, r0
    d15e:	f04f 0003 	mov.w	r0, #3
    d162:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    d164:	f105 0150 	add.w	r1, r5, #80	; 0x50
    d168:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    d16c:	f00d f9c7 	bl	1a4fe <memq_deinit>
	LL_ASSERT(link);
    d170:	4606      	mov	r6, r0
    d172:	b960      	cbnz	r0, d18e <conn_release+0x4e>
    d174:	f240 43b3 	movw	r3, #1203	; 0x4b3
    d178:	4a0e      	ldr	r2, [pc, #56]	; (d1b4 <conn_release+0x74>)
    d17a:	4911      	ldr	r1, [pc, #68]	; (d1c0 <conn_release+0x80>)
    d17c:	480f      	ldr	r0, [pc, #60]	; (d1bc <conn_release+0x7c>)
    d17e:	f00a ffd9 	bl	18134 <printk>
    d182:	4040      	eors	r0, r0
    d184:	f380 8811 	msr	BASEPRI, r0
    d188:	f04f 0003 	mov.w	r0, #3
    d18c:	df02      	svc	2
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
    d18e:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    d190:	65ee      	str	r6, [r5, #92]	; 0x5c
	adv->lll.conn = NULL;
    d192:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
    d194:	f001 f8d2 	bl	e33c <ll_conn_release>

	ll_rx_release(adv->node_rx_cc_free);
    d198:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	adv->lll.conn = NULL;
    d19c:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
    d19e:	f7ff f911 	bl	c3c4 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
    d1a2:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	ll_rx_link_release(adv->link_cc_free);
    d1a6:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    d1aa:	f7ff f8ff 	bl	c3ac <ll_rx_link_release>
	adv->link_cc_free = NULL;
    d1ae:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
}
    d1b2:	bd70      	pop	{r4, r5, r6, pc}
    d1b4:	00020ae6 	.word	0x00020ae6
    d1b8:	000209a8 	.word	0x000209a8
    d1bc:	0001ff46 	.word	0x0001ff46
    d1c0:	00020dbb 	.word	0x00020dbb

0000d1c4 <ticker_op_stop_cb>:
{
    d1c4:	b570      	push	{r4, r5, r6, lr}
    d1c6:	460c      	mov	r4, r1
	if (status != TICKER_STATUS_SUCCESS) {
    d1c8:	2800      	cmp	r0, #0
    d1ca:	d12f      	bne.n	d22c <ticker_op_stop_cb+0x68>
	mfy.param = &adv->lll;
    d1cc:	4b1d      	ldr	r3, [pc, #116]	; (d244 <ticker_op_stop_cb+0x80>)
    d1ce:	4d1e      	ldr	r5, [pc, #120]	; (d248 <ticker_op_stop_cb+0x84>)
    d1d0:	f101 021c 	add.w	r2, r1, #28
    d1d4:	609a      	str	r2, [r3, #8]
	if (hdr->ref) {
    d1d6:	7c0a      	ldrb	r2, [r1, #16]
    d1d8:	461e      	mov	r6, r3
    d1da:	b342      	cbz	r2, d22e <ticker_op_stop_cb+0x6a>
		LL_ASSERT(!hdr->disabled_cb);
    d1dc:	694b      	ldr	r3, [r1, #20]
    d1de:	b163      	cbz	r3, d1fa <ticker_op_stop_cb+0x36>
    d1e0:	f240 437c 	movw	r3, #1148	; 0x47c
    d1e4:	4a19      	ldr	r2, [pc, #100]	; (d24c <ticker_op_stop_cb+0x88>)
    d1e6:	491a      	ldr	r1, [pc, #104]	; (d250 <ticker_op_stop_cb+0x8c>)
    d1e8:	481a      	ldr	r0, [pc, #104]	; (d254 <ticker_op_stop_cb+0x90>)
    d1ea:	f00a ffa3 	bl	18134 <printk>
    d1ee:	4040      	eors	r0, r0
    d1f0:	f380 8811 	msr	BASEPRI, r0
    d1f4:	f04f 0003 	mov.w	r0, #3
    d1f8:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    d1fa:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    d1fc:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    d1fe:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
    d202:	4b15      	ldr	r3, [pc, #84]	; (d258 <ticker_op_stop_cb+0x94>)
    d204:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    d206:	4611      	mov	r1, r2
    d208:	4b0e      	ldr	r3, [pc, #56]	; (d244 <ticker_op_stop_cb+0x80>)
    d20a:	2002      	movs	r0, #2
    d20c:	f7fc fcb8 	bl	9b80 <mayfly_enqueue>
		LL_ASSERT(!ret);
    d210:	b160      	cbz	r0, d22c <ticker_op_stop_cb+0x68>
    d212:	f240 4383 	movw	r3, #1155	; 0x483
		LL_ASSERT(!ret);
    d216:	4a0d      	ldr	r2, [pc, #52]	; (d24c <ticker_op_stop_cb+0x88>)
    d218:	4910      	ldr	r1, [pc, #64]	; (d25c <ticker_op_stop_cb+0x98>)
    d21a:	480e      	ldr	r0, [pc, #56]	; (d254 <ticker_op_stop_cb+0x90>)
    d21c:	f00a ff8a 	bl	18134 <printk>
    d220:	4040      	eors	r0, r0
    d222:	f380 8811 	msr	BASEPRI, r0
    d226:	f04f 0003 	mov.w	r0, #3
    d22a:	df02      	svc	2
}
    d22c:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    d22e:	2101      	movs	r1, #1
    d230:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
    d232:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    d234:	f7fc fca4 	bl	9b80 <mayfly_enqueue>
		LL_ASSERT(!ret);
    d238:	2800      	cmp	r0, #0
    d23a:	d0f7      	beq.n	d22c <ticker_op_stop_cb+0x68>
    d23c:	f44f 6391 	mov.w	r3, #1160	; 0x488
    d240:	e7e9      	b.n	d216 <ticker_op_stop_cb+0x52>
    d242:	bf00      	nop
    d244:	2000ce50 	.word	0x2000ce50
    d248:	0000cfa5 	.word	0x0000cfa5
    d24c:	00020ae6 	.word	0x00020ae6
    d250:	00020b6e 	.word	0x00020b6e
    d254:	0001ff46 	.word	0x0001ff46
    d258:	0000ce0d 	.word	0x0000ce0d
    d25c:	000208c5 	.word	0x000208c5

0000d260 <ticker_op_update_cb>:
{
    d260:	b510      	push	{r4, lr}
    d262:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    d264:	b180      	cbz	r0, d288 <ticker_op_update_cb+0x28>
    d266:	f7ff f947 	bl	c4f8 <ull_disable_mark_get>
    d26a:	4284      	cmp	r4, r0
    d26c:	d00c      	beq.n	d288 <ticker_op_update_cb+0x28>
    d26e:	f240 433e 	movw	r3, #1086	; 0x43e
    d272:	4a06      	ldr	r2, [pc, #24]	; (d28c <ticker_op_update_cb+0x2c>)
    d274:	4906      	ldr	r1, [pc, #24]	; (d290 <ticker_op_update_cb+0x30>)
    d276:	4807      	ldr	r0, [pc, #28]	; (d294 <ticker_op_update_cb+0x34>)
    d278:	f00a ff5c 	bl	18134 <printk>
    d27c:	4040      	eors	r0, r0
    d27e:	f380 8811 	msr	BASEPRI, r0
    d282:	f04f 0003 	mov.w	r0, #3
    d286:	df02      	svc	2
}
    d288:	bd10      	pop	{r4, pc}
    d28a:	bf00      	nop
    d28c:	00020ae6 	.word	0x00020ae6
    d290:	00020b80 	.word	0x00020b80
    d294:	0001ff46 	.word	0x0001ff46

0000d298 <ticker_stop_cb>:
{
    d298:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    d29a:	4c17      	ldr	r4, [pc, #92]	; (d2f8 <ticker_stop_cb+0x60>)
{
    d29c:	461d      	mov	r5, r3
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    d29e:	1b1c      	subs	r4, r3, r4
    d2a0:	22e4      	movs	r2, #228	; 0xe4
    d2a2:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
    d2a6:	b2a3      	uxth	r3, r4
    d2a8:	b163      	cbz	r3, d2c4 <ticker_stop_cb+0x2c>
    d2aa:	f240 4359 	movw	r3, #1113	; 0x459
    d2ae:	4a13      	ldr	r2, [pc, #76]	; (d2fc <ticker_stop_cb+0x64>)
    d2b0:	4913      	ldr	r1, [pc, #76]	; (d300 <ticker_stop_cb+0x68>)
    d2b2:	4814      	ldr	r0, [pc, #80]	; (d304 <ticker_stop_cb+0x6c>)
    d2b4:	f00a ff3e 	bl	18134 <printk>
    d2b8:	4040      	eors	r0, r0
    d2ba:	f380 8811 	msr	BASEPRI, r0
    d2be:	f04f 0003 	mov.w	r0, #3
    d2c2:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
    d2c4:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    d2c6:	4b10      	ldr	r3, [pc, #64]	; (d308 <ticker_stop_cb+0x70>)
    d2c8:	9500      	str	r5, [sp, #0]
    d2ca:	b2d2      	uxtb	r2, r2
    d2cc:	2101      	movs	r1, #1
    d2ce:	2000      	movs	r0, #0
    d2d0:	f7fd f95a 	bl	a588 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d2d4:	f030 0302 	bics.w	r3, r0, #2
    d2d8:	d00c      	beq.n	d2f4 <ticker_stop_cb+0x5c>
    d2da:	f240 435f 	movw	r3, #1119	; 0x45f
    d2de:	4a07      	ldr	r2, [pc, #28]	; (d2fc <ticker_stop_cb+0x64>)
    d2e0:	490a      	ldr	r1, [pc, #40]	; (d30c <ticker_stop_cb+0x74>)
    d2e2:	4808      	ldr	r0, [pc, #32]	; (d304 <ticker_stop_cb+0x6c>)
    d2e4:	f00a ff26 	bl	18134 <printk>
    d2e8:	4040      	eors	r0, r0
    d2ea:	f380 8811 	msr	BASEPRI, r0
    d2ee:	f04f 0003 	mov.w	r0, #3
    d2f2:	df02      	svc	2
}
    d2f4:	b003      	add	sp, #12
    d2f6:	bd30      	pop	{r4, r5, pc}
    d2f8:	20000dc0 	.word	0x20000dc0
    d2fc:	00020ae6 	.word	0x00020ae6
    d300:	00020baf 	.word	0x00020baf
    d304:	0001ff46 	.word	0x0001ff46
    d308:	0000d1c5 	.word	0x0000d1c5
    d30c:	00020b55 	.word	0x00020b55

0000d310 <ll_adv_params_set>:
{
    d310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
    d314:	4c44      	ldr	r4, [pc, #272]	; (d428 <ll_adv_params_set+0x118>)
{
    d316:	4699      	mov	r9, r3
	if (!adv || adv->is_enabled) {
    d318:	f894 60cc 	ldrb.w	r6, [r4, #204]	; 0xcc
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d31c:	4b43      	ldr	r3, [pc, #268]	; (d42c <ll_adv_params_set+0x11c>)
    d31e:	9300      	str	r3, [sp, #0]
    d320:	2301      	movs	r3, #1
	if (!adv || adv->is_enabled) {
    d322:	401e      	ands	r6, r3
{
    d324:	4617      	mov	r7, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d326:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!adv || adv->is_enabled) {
    d32a:	d17a      	bne.n	d422 <ll_adv_params_set+0x112>
		adv->interval = 0;
    d32c:	4299      	cmp	r1, r3
	adv->lll.chan_map = chan_map;
    d32e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    d332:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    d336:	f362 0343 	bfi	r3, r2, #1, #3
    d33a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	adv->lll.filter_policy = filter_policy;
    d33e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    d342:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    d346:	f362 0301 	bfi	r3, r2, #0, #2
    d34a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    d34e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    d352:	f04f 0527 	mov.w	r5, #39	; 0x27
    d356:	f04f 032d 	mov.w	r3, #45	; 0x2d
    d35a:	fb15 3502 	smlabb	r5, r5, r2, r3
	pdu->type = pdu_adv_type[adv_type];
    d35e:	ab02      	add	r3, sp, #8
		adv->interval = 0;
    d360:	bf08      	it	eq
    d362:	2000      	moveq	r0, #0
	pdu->type = pdu_adv_type[adv_type];
    d364:	4419      	add	r1, r3
    d366:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
    d36a:	f811 2c08 	ldrb.w	r2, [r1, #-8]
    d36e:	5d63      	ldrb	r3, [r4, r5]
    d370:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
    d374:	f366 1304 	bfi	r3, r6, #4, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    d378:	b2db      	uxtb	r3, r3
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    d37a:	f013 0f0e 	tst.w	r3, #14
    d37e:	bf0c      	ite	eq
    d380:	2201      	moveq	r2, #1
    d382:	2200      	movne	r2, #0
    d384:	f362 1345 	bfi	r3, r2, #5, #1
    d388:	5563      	strb	r3, [r4, r5]
	adv->own_addr_type = own_addr_type;
    d38a:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
    d38e:	f367 0301 	bfi	r3, r7, #0, #2
    d392:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    d396:	b2db      	uxtb	r3, r3
    d398:	079a      	lsls	r2, r3, #30
    d39a:	eb04 0805 	add.w	r8, r4, r5
    d39e:	d509      	bpl.n	d3b4 <ll_adv_params_set+0xa4>
		adv->id_addr_type = direct_addr_type;
    d3a0:	f369 0382 	bfi	r3, r9, #2, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    d3a4:	2206      	movs	r2, #6
    d3a6:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
    d3a8:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    d3ac:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    d3b0:	f00b fc43 	bl	18c3a <memcpy>
	pdu->tx_addr = own_addr_type & 0x1;
    d3b4:	5d61      	ldrb	r1, [r4, r5]
    d3b6:	f007 0701 	and.w	r7, r7, #1
    d3ba:	f367 1186 	bfi	r1, r7, #6, #1
	pdu->rx_addr = 0;
    d3be:	f36f 11c7 	bfc	r1, #7, #1
    d3c2:	5561      	strb	r1, [r4, r5]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    d3c4:	b2c9      	uxtb	r1, r1
    d3c6:	f001 030f 	and.w	r3, r1, #15
    d3ca:	2b01      	cmp	r3, #1
    d3cc:	d123      	bne.n	d416 <ll_adv_params_set+0x106>
		pdu->rx_addr = direct_addr_type;
    d3ce:	f369 11c7 	bfi	r1, r9, #7, #1
    d3d2:	5561      	strb	r1, [r4, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    d3d4:	2206      	movs	r2, #6
    d3d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    d3d8:	f108 0008 	add.w	r0, r8, #8
    d3dc:	f00b fc2d 	bl	18c3a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    d3e0:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
    d3e2:	f888 3001 	strb.w	r3, [r8, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    d3e6:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d3ea:	237d      	movs	r3, #125	; 0x7d
    d3ec:	2227      	movs	r2, #39	; 0x27
    d3ee:	fb12 3201 	smlabb	r2, r2, r1, r3
    d3f2:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = own_addr_type & 0x1;
    d3f4:	5ca3      	ldrb	r3, [r4, r2]
    d3f6:	f367 1386 	bfi	r3, r7, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d3fe:	f043 0304 	orr.w	r3, r3, #4
    d402:	54a3      	strb	r3, [r4, r2]
	if (pdu->len == 0) {
    d404:	784b      	ldrb	r3, [r1, #1]
    d406:	b913      	cbnz	r3, d40e <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
    d408:	2206      	movs	r2, #6
    d40a:	704a      	strb	r2, [r1, #1]
	return 0;
    d40c:	461e      	mov	r6, r3
}
    d40e:	4630      	mov	r0, r6
    d410:	b003      	add	sp, #12
    d412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (pdu->len == 0) {
    d416:	f898 3001 	ldrb.w	r3, [r8, #1]
    d41a:	2b00      	cmp	r3, #0
    d41c:	d1e3      	bne.n	d3e6 <ll_adv_params_set+0xd6>
		pdu->len = BDADDR_SIZE;
    d41e:	2306      	movs	r3, #6
    d420:	e7df      	b.n	d3e2 <ll_adv_params_set+0xd2>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d422:	260c      	movs	r6, #12
    d424:	e7f3      	b.n	d40e <ll_adv_params_set+0xfe>
    d426:	bf00      	nop
    d428:	20000dc0 	.word	0x20000dc0
    d42c:	02060100 	.word	0x02060100

0000d430 <ll_adv_data_set>:
{
    d430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    d434:	4a29      	ldr	r2, [pc, #164]	; (d4dc <ll_adv_data_set+0xac>)
    d436:	f892 402c 	ldrb.w	r4, [r2, #44]	; 0x2c
    d43a:	232d      	movs	r3, #45	; 0x2d
    d43c:	4607      	mov	r7, r0
    d43e:	2027      	movs	r0, #39	; 0x27
    d440:	fb10 3004 	smlabb	r0, r0, r4, r3
    d444:	4689      	mov	r9, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    d446:	f812 c000 	ldrb.w	ip, [r2, r0]
    d44a:	f00c 030f 	and.w	r3, ip, #15
    d44e:	2b01      	cmp	r3, #1
    d450:	eb02 0100 	add.w	r1, r2, r0
    d454:	4615      	mov	r5, r2
    d456:	d03e      	beq.n	d4d6 <ll_adv_data_set+0xa6>
	if (pdu->first == pdu->last) {
    d458:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
    d45c:	42a3      	cmp	r3, r4
    d45e:	d104      	bne.n	d46a <ll_adv_data_set+0x3a>
		last = pdu->last + 1;
    d460:	3401      	adds	r4, #1
    d462:	b2e4      	uxtb	r4, r4
			last = 0U;
    d464:	2c02      	cmp	r4, #2
    d466:	bf08      	it	eq
    d468:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
    d46a:	2627      	movs	r6, #39	; 0x27
    d46c:	232d      	movs	r3, #45	; 0x2d
    d46e:	fb16 3304 	smlabb	r3, r6, r4, r3
    d472:	eb05 0803 	add.w	r8, r5, r3
	pdu->type = prev->type;
    d476:	5cee      	ldrb	r6, [r5, r3]
    d478:	f36c 0603 	bfi	r6, ip, #0, #4
	pdu->rfu = 0U;
    d47c:	f36f 1604 	bfc	r6, #4, #1
    d480:	54ee      	strb	r6, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
    d482:	5c16      	ldrb	r6, [r2, r0]
    d484:	f815 c003 	ldrb.w	ip, [r5, r3]
    d488:	f3c6 1640 	ubfx	r6, r6, #5, #1
    d48c:	f366 1c45 	bfi	ip, r6, #5, #1
    d490:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
    d494:	5c16      	ldrb	r6, [r2, r0]
    d496:	fa5f fc8c 	uxtb.w	ip, ip
    d49a:	f3c6 1680 	ubfx	r6, r6, #6, #1
    d49e:	f366 1c86 	bfi	ip, r6, #6, #1
    d4a2:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->rx_addr = prev->rx_addr;
    d4a6:	5c12      	ldrb	r2, [r2, r0]
    d4a8:	fa5f f08c 	uxtb.w	r0, ip
    d4ac:	09d2      	lsrs	r2, r2, #7
    d4ae:	f362 10c7 	bfi	r0, r2, #7, #1
    d4b2:	54e8      	strb	r0, [r5, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    d4b4:	2206      	movs	r2, #6
    d4b6:	3102      	adds	r1, #2
    d4b8:	f108 0002 	add.w	r0, r8, #2
    d4bc:	f00b fbbd 	bl	18c3a <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    d4c0:	463a      	mov	r2, r7
    d4c2:	4649      	mov	r1, r9
    d4c4:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
    d4c8:	3706      	adds	r7, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    d4ca:	f00b fbb6 	bl	18c3a <memcpy>
	pdu->len = BDADDR_SIZE + len;
    d4ce:	f888 7001 	strb.w	r7, [r8, #1]
	pdu->last = idx;
    d4d2:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
    d4d6:	2000      	movs	r0, #0
    d4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d4dc:	20000dc0 	.word	0x20000dc0

0000d4e0 <ll_adv_scan_rsp_set>:
{
    d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    d4e4:	4a1e      	ldr	r2, [pc, #120]	; (d560 <ll_adv_scan_rsp_set+0x80>)
    d4e6:	f892 407c 	ldrb.w	r4, [r2, #124]	; 0x7c
    d4ea:	237d      	movs	r3, #125	; 0x7d
    d4ec:	f04f 0c27 	mov.w	ip, #39	; 0x27
    d4f0:	fb1c 3c04 	smlabb	ip, ip, r4, r3
	if (pdu->first == pdu->last) {
    d4f4:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
    d4f8:	42a3      	cmp	r3, r4
    d4fa:	4688      	mov	r8, r1
    d4fc:	4607      	mov	r7, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    d4fe:	eb02 010c 	add.w	r1, r2, ip
	if (pdu->first == pdu->last) {
    d502:	4615      	mov	r5, r2
    d504:	d104      	bne.n	d510 <ll_adv_scan_rsp_set+0x30>
		last = pdu->last + 1;
    d506:	3401      	adds	r4, #1
    d508:	b2e4      	uxtb	r4, r4
			last = 0U;
    d50a:	2c02      	cmp	r4, #2
    d50c:	bf08      	it	eq
    d50e:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
    d510:	2027      	movs	r0, #39	; 0x27
    d512:	237d      	movs	r3, #125	; 0x7d
    d514:	fb10 3304 	smlabb	r3, r0, r4, r3
    d518:	18ee      	adds	r6, r5, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d51a:	5ce8      	ldrb	r0, [r5, r3]
    d51c:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    d520:	f040 0004 	orr.w	r0, r0, #4
    d524:	54e8      	strb	r0, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
    d526:	f812 000c 	ldrb.w	r0, [r2, ip]
    d52a:	5cea      	ldrb	r2, [r5, r3]
    d52c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    d530:	f360 1286 	bfi	r2, r0, #6, #1
	pdu->rx_addr = 0;
    d534:	f36f 12c7 	bfc	r2, #7, #1
    d538:	54ea      	strb	r2, [r5, r3]
	pdu->len = BDADDR_SIZE + len;
    d53a:	1dbb      	adds	r3, r7, #6
    d53c:	7073      	strb	r3, [r6, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    d53e:	2206      	movs	r2, #6
    d540:	3102      	adds	r1, #2
    d542:	1cb0      	adds	r0, r6, #2
    d544:	f00b fb79 	bl	18c3a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    d548:	463a      	mov	r2, r7
    d54a:	4641      	mov	r1, r8
    d54c:	f106 0008 	add.w	r0, r6, #8
    d550:	f00b fb73 	bl	18c3a <memcpy>
	pdu->last = idx;
    d554:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
}
    d558:	2000      	movs	r0, #0
    d55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d55e:	bf00      	nop
    d560:	20000dc0 	.word	0x20000dc0

0000d564 <ull_adv_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    d564:	4b03      	ldr	r3, [pc, #12]	; (d574 <ull_adv_handle_get+0x10>)
    d566:	1ac0      	subs	r0, r0, r3
    d568:	23e4      	movs	r3, #228	; 0xe4
    d56a:	fbb0 f0f3 	udiv	r0, r0, r3
}
    d56e:	b280      	uxth	r0, r0
    d570:	4770      	bx	lr
    d572:	bf00      	nop
    d574:	20000dc0 	.word	0x20000dc0

0000d578 <ull_adv_lll_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    d578:	6800      	ldr	r0, [r0, #0]
    d57a:	4b03      	ldr	r3, [pc, #12]	; (d588 <ull_adv_lll_handle_get+0x10>)
    d57c:	1ac0      	subs	r0, r0, r3
    d57e:	23e4      	movs	r3, #228	; 0xe4
    d580:	fbb0 f0f3 	udiv	r0, r0, r3
}
    d584:	b280      	uxth	r0, r0
    d586:	4770      	bx	lr
    d588:	20000dc0 	.word	0x20000dc0

0000d58c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
    d58c:	b938      	cbnz	r0, d59e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    d58e:	4805      	ldr	r0, [pc, #20]	; (d5a4 <ull_adv_is_enabled_get+0x18>)
    d590:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
	return &ll_adv[handle];
    d594:	f013 0f01 	tst.w	r3, #1
    d598:	bf08      	it	eq
    d59a:	2000      	moveq	r0, #0
    d59c:	4770      	bx	lr
		return NULL;
    d59e:	2000      	movs	r0, #0
}
    d5a0:	4770      	bx	lr
    d5a2:	bf00      	nop
    d5a4:	20000dc0 	.word	0x20000dc0

0000d5a8 <disable.constprop.5>:
#endif /* CONFIG_BT_PERIPHERAL */

static inline u8_t disable(u16_t handle)
    d5a8:	b530      	push	{r4, r5, lr}
    d5aa:	b085      	sub	sp, #20
{
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    d5ac:	2302      	movs	r3, #2
	struct ll_adv_set *adv;
	void *mark;
	u32_t ret;

	adv = ull_adv_is_enabled_get(handle);
    d5ae:	2000      	movs	r0, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    d5b0:	9303      	str	r3, [sp, #12]
	adv = ull_adv_is_enabled_get(handle);
    d5b2:	f7ff ffeb 	bl	d58c <ull_adv_is_enabled_get>
	if (!adv) {
    d5b6:	4604      	mov	r4, r0
    d5b8:	b910      	cbnz	r0, d5c0 <disable.constprop.5+0x18>
		ret = ull_ticker_status_take(ret, &ret_cb);
		if (ret) {
			mark = ull_disable_mark(adv);
			LL_ASSERT(mark == adv);

			return BT_HCI_ERR_CMD_DISALLOWED;
    d5ba:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
    d5bc:	b005      	add	sp, #20
    d5be:	bd30      	pop	{r4, r5, pc}
	mark = ull_disable_mark(adv);
    d5c0:	f7fe ff84 	bl	c4cc <ull_disable_mark>
	LL_ASSERT(mark == adv);
    d5c4:	4284      	cmp	r4, r0
    d5c6:	d00c      	beq.n	d5e2 <disable.constprop.5+0x3a>
    d5c8:	f240 43cd 	movw	r3, #1229	; 0x4cd
    d5cc:	4a3a      	ldr	r2, [pc, #232]	; (d6b8 <disable.constprop.5+0x110>)
    d5ce:	493b      	ldr	r1, [pc, #236]	; (d6bc <disable.constprop.5+0x114>)
    d5d0:	483b      	ldr	r0, [pc, #236]	; (d6c0 <disable.constprop.5+0x118>)
    d5d2:	f00a fdaf 	bl	18134 <printk>
    d5d6:	4040      	eors	r0, r0
    d5d8:	f380 8811 	msr	BASEPRI, r0
    d5dc:	f04f 0003 	mov.w	r0, #3
    d5e0:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    d5e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    d5e6:	f013 0f01 	tst.w	r3, #1
    d5ea:	ad03      	add	r5, sp, #12
    d5ec:	d01f      	beq.n	d62e <disable.constprop.5+0x86>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d5ee:	2103      	movs	r1, #3
    d5f0:	9500      	str	r5, [sp, #0]
    d5f2:	4b34      	ldr	r3, [pc, #208]	; (d6c4 <disable.constprop.5+0x11c>)
    d5f4:	2201      	movs	r2, #1
    d5f6:	2000      	movs	r0, #0
    d5f8:	f7fc ffc6 	bl	a588 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    d5fc:	4629      	mov	r1, r5
    d5fe:	f7fe ff59 	bl	c4b4 <ull_ticker_status_take>
		if (ret) {
    d602:	b190      	cbz	r0, d62a <disable.constprop.5+0x82>
			mark = ull_disable_mark(adv);
    d604:	4620      	mov	r0, r4
    d606:	f7fe ff61 	bl	c4cc <ull_disable_mark>
			LL_ASSERT(mark == adv);
    d60a:	4284      	cmp	r4, r0
    d60c:	d0d5      	beq.n	d5ba <disable.constprop.5+0x12>
    d60e:	f240 43d7 	movw	r3, #1239	; 0x4d7
    d612:	4a29      	ldr	r2, [pc, #164]	; (d6b8 <disable.constprop.5+0x110>)
    d614:	4929      	ldr	r1, [pc, #164]	; (d6bc <disable.constprop.5+0x114>)
    d616:	482a      	ldr	r0, [pc, #168]	; (d6c0 <disable.constprop.5+0x118>)
    d618:	f00a fd8c 	bl	18134 <printk>
    d61c:	4040      	eors	r0, r0
    d61e:	f380 8811 	msr	BASEPRI, r0
    d622:	f04f 0003 	mov.w	r0, #3
    d626:	df02      	svc	2
    d628:	e7c7      	b.n	d5ba <disable.constprop.5+0x12>
		ret_cb = TICKER_STATUS_BUSY;
    d62a:	2302      	movs	r3, #2
    d62c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    d62e:	2103      	movs	r1, #3
    d630:	9500      	str	r5, [sp, #0]
    d632:	4b24      	ldr	r3, [pc, #144]	; (d6c4 <disable.constprop.5+0x11c>)
    d634:	2202      	movs	r2, #2
    d636:	2000      	movs	r0, #0
    d638:	f7fc ffa6 	bl	a588 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    d63c:	4629      	mov	r1, r5
    d63e:	f7fe ff39 	bl	c4b4 <ull_ticker_status_take>
	if (ret) {
    d642:	b138      	cbz	r0, d654 <disable.constprop.5+0xac>
		mark = ull_disable_mark(adv);
    d644:	4620      	mov	r0, r4
    d646:	f7fe ff41 	bl	c4cc <ull_disable_mark>
		LL_ASSERT(mark == adv);
    d64a:	4284      	cmp	r4, r0
    d64c:	d0b5      	beq.n	d5ba <disable.constprop.5+0x12>
    d64e:	f240 43e6 	movw	r3, #1254	; 0x4e6
    d652:	e7de      	b.n	d612 <disable.constprop.5+0x6a>
	ret = ull_disable(&adv->lll);
    d654:	f104 001c 	add.w	r0, r4, #28
    d658:	f7fe ff70 	bl	c53c <ull_disable>
	LL_ASSERT(!ret);
    d65c:	b160      	cbz	r0, d678 <disable.constprop.5+0xd0>
    d65e:	f240 43ec 	movw	r3, #1260	; 0x4ec
    d662:	4a15      	ldr	r2, [pc, #84]	; (d6b8 <disable.constprop.5+0x110>)
    d664:	4918      	ldr	r1, [pc, #96]	; (d6c8 <disable.constprop.5+0x120>)
    d666:	4816      	ldr	r0, [pc, #88]	; (d6c0 <disable.constprop.5+0x118>)
    d668:	f00a fd64 	bl	18134 <printk>
    d66c:	4040      	eors	r0, r0
    d66e:	f380 8811 	msr	BASEPRI, r0
    d672:	f04f 0003 	mov.w	r0, #3
    d676:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    d678:	4620      	mov	r0, r4
    d67a:	f7fe ff2f 	bl	c4dc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    d67e:	4284      	cmp	r4, r0
    d680:	d00c      	beq.n	d69c <disable.constprop.5+0xf4>
    d682:	f240 43ef 	movw	r3, #1263	; 0x4ef
    d686:	4a0c      	ldr	r2, [pc, #48]	; (d6b8 <disable.constprop.5+0x110>)
    d688:	490c      	ldr	r1, [pc, #48]	; (d6bc <disable.constprop.5+0x114>)
    d68a:	480d      	ldr	r0, [pc, #52]	; (d6c0 <disable.constprop.5+0x118>)
    d68c:	f00a fd52 	bl	18134 <printk>
    d690:	4040      	eors	r0, r0
    d692:	f380 8811 	msr	BASEPRI, r0
    d696:	f04f 0003 	mov.w	r0, #3
    d69a:	df02      	svc	2
	if (adv->lll.conn) {
    d69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d69e:	b113      	cbz	r3, d6a6 <disable.constprop.5+0xfe>
		conn_release(adv);
    d6a0:	4620      	mov	r0, r4
    d6a2:	f7ff fd4d 	bl	d140 <conn_release>
	adv->is_enabled = 0U;
    d6a6:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    d6aa:	f36f 0300 	bfc	r3, #0, #1
    d6ae:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	return 0;
    d6b2:	2000      	movs	r0, #0
    d6b4:	e782      	b.n	d5bc <disable.constprop.5+0x14>
    d6b6:	bf00      	nop
    d6b8:	00020ae6 	.word	0x00020ae6
    d6bc:	00020ada 	.word	0x00020ada
    d6c0:	0001ff46 	.word	0x0001ff46
    d6c4:	0000c4a9 	.word	0x0000c4a9
    d6c8:	000208c5 	.word	0x000208c5

0000d6cc <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
    d6cc:	b508      	push	{r3, lr}
	int err;

	radio_isr_set(isr_race, param);
    d6ce:	4601      	mov	r1, r0
    d6d0:	480d      	ldr	r0, [pc, #52]	; (d708 <isr_cleanup+0x3c>)
    d6d2:	f004 fa67 	bl	11ba4 <radio_isr_set>
	radio_tmr_stop();
    d6d6:	f004 fc8f 	bl	11ff8 <radio_tmr_stop>

	err = lll_clk_off();
    d6da:	f7ff fc29 	bl	cf30 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
    d6de:	b170      	cbz	r0, d6fe <isr_cleanup+0x32>
    d6e0:	3010      	adds	r0, #16
    d6e2:	d00c      	beq.n	d6fe <isr_cleanup+0x32>
    d6e4:	f44f 7311 	mov.w	r3, #580	; 0x244
    d6e8:	4a08      	ldr	r2, [pc, #32]	; (d70c <isr_cleanup+0x40>)
    d6ea:	4909      	ldr	r1, [pc, #36]	; (d710 <isr_cleanup+0x44>)
    d6ec:	4809      	ldr	r0, [pc, #36]	; (d714 <isr_cleanup+0x48>)
    d6ee:	f00a fd21 	bl	18134 <printk>
    d6f2:	4040      	eors	r0, r0
    d6f4:	f380 8811 	msr	BASEPRI, r0
    d6f8:	f04f 0003 	mov.w	r0, #3
    d6fc:	df02      	svc	2

	lll_done(NULL);
    d6fe:	2000      	movs	r0, #0
}
    d700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
    d704:	f7ff bbc2 	b.w	ce8c <lll_done>
    d708:	0001aa11 	.word	0x0001aa11
    d70c:	00020bcd 	.word	0x00020bcd
    d710:	00020c10 	.word	0x00020c10
    d714:	0001ff46 	.word	0x0001ff46

0000d718 <isr_tx>:
{
    d718:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d71a:	4604      	mov	r4, r0
	radio_status_reset();
    d71c:	f004 fb1c 	bl	11d58 <radio_status_reset>
	radio_tmr_status_reset();
    d720:	f004 fbd8 	bl	11ed4 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
    d724:	2096      	movs	r0, #150	; 0x96
    d726:	f004 fbe5 	bl	11ef4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    d72a:	2300      	movs	r3, #0
    d72c:	461a      	mov	r2, r3
    d72e:	4619      	mov	r1, r3
    d730:	4618      	mov	r0, r3
    d732:	f004 fb5b 	bl	11dec <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
    d736:	f004 fb49 	bl	11dcc <radio_pkt_scratch_get>
    d73a:	f004 fae9 	bl	11d10 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
    d73e:	f004 fb17 	bl	11d70 <radio_is_ready>
    d742:	b160      	cbz	r0, d75e <isr_tx+0x46>
    d744:	f44f 73ab 	mov.w	r3, #342	; 0x156
    d748:	4a17      	ldr	r2, [pc, #92]	; (d7a8 <isr_tx+0x90>)
    d74a:	4918      	ldr	r1, [pc, #96]	; (d7ac <isr_tx+0x94>)
    d74c:	4818      	ldr	r0, [pc, #96]	; (d7b0 <isr_tx+0x98>)
    d74e:	f00a fcf1 	bl	18134 <printk>
    d752:	4040      	eors	r0, r0
    d754:	f380 8811 	msr	BASEPRI, r0
    d758:	f04f 0003 	mov.w	r0, #3
    d75c:	df02      	svc	2
	radio_isr_set(isr_rx, param);
    d75e:	4621      	mov	r1, r4
    d760:	4814      	ldr	r0, [pc, #80]	; (d7b4 <isr_tx+0x9c>)
    d762:	f004 fa1f 	bl	11ba4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
    d766:	f004 f90f 	bl	11988 <ull_filter_lll_rl_enabled>
    d76a:	b140      	cbz	r0, d77e <isr_tx+0x66>
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
    d76c:	f10d 0007 	add.w	r0, sp, #7
    d770:	f004 f846 	bl	11800 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks);
    d774:	4601      	mov	r1, r0
    d776:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d77a:	f004 fd17 	bl	121ac <radio_ar_configure>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    d77e:	f004 fc8d 	bl	1209c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
    d782:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    d784:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    d786:	4608      	mov	r0, r1
    d788:	f00d fcf6 	bl	1b178 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
    d78c:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
    d78e:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
    d790:	4608      	mov	r0, r1
    d792:	f00d fced 	bl	1b170 <radio_tx_chain_delay_get>
    d796:	442c      	add	r4, r5
    d798:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
    d79a:	1a20      	subs	r0, r4, r0
    d79c:	f004 fc38 	bl	12010 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    d7a0:	f004 fc6e 	bl	12080 <radio_tmr_end_capture>
}
    d7a4:	b003      	add	sp, #12
    d7a6:	bd30      	pop	{r4, r5, pc}
    d7a8:	00020bcd 	.word	0x00020bcd
    d7ac:	00020c23 	.word	0x00020c23
    d7b0:	0001ff46 	.word	0x0001ff46
    d7b4:	0000d87d 	.word	0x0000d87d

0000d7b8 <is_abort_cb>:
	if (next != curr) {
    d7b8:	4282      	cmp	r2, r0
{
    d7ba:	b508      	push	{r3, lr}
	if (next != curr) {
    d7bc:	d01c      	beq.n	d7f8 <is_abort_cb+0x40>
		} else if (lll->is_hdcd) {
    d7be:	7b12      	ldrb	r2, [r2, #12]
    d7c0:	07d2      	lsls	r2, r2, #31
    d7c2:	d526      	bpl.n	d812 <is_abort_cb+0x5a>
			*resume_cb = resume_prepare_cb;
    d7c4:	4a14      	ldr	r2, [pc, #80]	; (d818 <is_abort_cb+0x60>)
    d7c6:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
    d7c8:	9b02      	ldr	r3, [sp, #8]
    d7ca:	2200      	movs	r2, #0
    d7cc:	601a      	str	r2, [r3, #0]
			err = lll_clk_on();
    d7ce:	f7ff fba7 	bl	cf20 <lll_clk_on>
			LL_ASSERT(!err || err == -EINPROGRESS);
    d7d2:	b170      	cbz	r0, d7f2 <is_abort_cb+0x3a>
    d7d4:	3044      	adds	r0, #68	; 0x44
    d7d6:	d00c      	beq.n	d7f2 <is_abort_cb+0x3a>
    d7d8:	f44f 7389 	mov.w	r3, #274	; 0x112
    d7dc:	4a0f      	ldr	r2, [pc, #60]	; (d81c <is_abort_cb+0x64>)
    d7de:	4910      	ldr	r1, [pc, #64]	; (d820 <is_abort_cb+0x68>)
    d7e0:	4810      	ldr	r0, [pc, #64]	; (d824 <is_abort_cb+0x6c>)
    d7e2:	f00a fca7 	bl	18134 <printk>
    d7e6:	4040      	eors	r0, r0
    d7e8:	f380 8811 	msr	BASEPRI, r0
    d7ec:	f04f 0003 	mov.w	r0, #3
    d7f0:	df02      	svc	2
    d7f2:	f06f 000a 	mvn.w	r0, #10
    d7f6:	e00b      	b.n	d810 <is_abort_cb+0x58>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
    d7f8:	7bd3      	ldrb	r3, [r2, #15]
    d7fa:	2127      	movs	r1, #39	; 0x27
    d7fc:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    d800:	7c53      	ldrb	r3, [r2, #17]
    d802:	f003 030f 	and.w	r3, r3, #15
    d806:	2b01      	cmp	r3, #1
		return 0;
    d808:	bf14      	ite	ne
    d80a:	f06f 0047 	mvnne.w	r0, #71	; 0x47
    d80e:	2000      	moveq	r0, #0
}
    d810:	bd08      	pop	{r3, pc}
			return -ECANCELED;
    d812:	f06f 0047 	mvn.w	r0, #71	; 0x47
    d816:	e7fb      	b.n	d810 <is_abort_cb+0x58>
    d818:	0001aa83 	.word	0x0001aa83
    d81c:	00020bcd 	.word	0x00020bcd
    d820:	00020bba 	.word	0x00020bba
    d824:	0001ff46 	.word	0x0001ff46

0000d828 <abort_cb>:
{
    d828:	b510      	push	{r4, lr}
    d82a:	460c      	mov	r4, r1
	if (!prepare_param) {
    d82c:	b930      	cbnz	r0, d83c <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
    d82e:	480f      	ldr	r0, [pc, #60]	; (d86c <abort_cb+0x44>)
    d830:	f004 f9b8 	bl	11ba4 <radio_isr_set>
}
    d834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    d838:	f004 ba7c 	b.w	11d34 <radio_disable>
	err = lll_clk_off();
    d83c:	f7ff fb78 	bl	cf30 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
    d840:	b170      	cbz	r0, d860 <abort_cb+0x38>
    d842:	3010      	adds	r0, #16
    d844:	d00c      	beq.n	d860 <abort_cb+0x38>
    d846:	f44f 739c 	mov.w	r3, #312	; 0x138
    d84a:	4a09      	ldr	r2, [pc, #36]	; (d870 <abort_cb+0x48>)
    d84c:	4909      	ldr	r1, [pc, #36]	; (d874 <abort_cb+0x4c>)
    d84e:	480a      	ldr	r0, [pc, #40]	; (d878 <abort_cb+0x50>)
    d850:	f00a fc70 	bl	18134 <printk>
    d854:	4040      	eors	r0, r0
    d856:	f380 8811 	msr	BASEPRI, r0
    d85a:	f04f 0003 	mov.w	r0, #3
    d85e:	df02      	svc	2
	lll_done(param);
    d860:	4620      	mov	r0, r4
}
    d862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
    d866:	f7ff bb11 	b.w	ce8c <lll_done>
    d86a:	bf00      	nop
    d86c:	0001aa15 	.word	0x0001aa15
    d870:	00020bcd 	.word	0x00020bcd
    d874:	00020c10 	.word	0x00020c10
    d878:	0001ff46 	.word	0x0001ff46

0000d87c <isr_rx>:
{
    d87c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d880:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    d882:	f004 fa7f 	bl	11d84 <radio_is_done>
    d886:	b2c5      	uxtb	r5, r0
	if (trx_done) {
    d888:	2d00      	cmp	r5, #0
    d88a:	d04d      	beq.n	d928 <isr_rx+0xac>
		crc_ok = radio_crc_is_valid();
    d88c:	f004 fa90 	bl	11db0 <radio_crc_is_valid>
    d890:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    d894:	f004 fb02 	bl	11e9c <radio_filter_has_match>
    d898:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    d89c:	f004 fb08 	bl	11eb0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    d8a0:	f004 fcc2 	bl	12228 <radio_ar_has_match>
    d8a4:	b2c6      	uxtb	r6, r0
		irkmatch_id = radio_ar_match_get();
    d8a6:	f004 fcad 	bl	12204 <radio_ar_match_get>
    d8aa:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
    d8ac:	f004 fabe 	bl	11e2c <radio_rssi_is_ready>
	radio_status_reset();
    d8b0:	f004 fa52 	bl	11d58 <radio_status_reset>
	radio_tmr_status_reset();
    d8b4:	f004 fb0e 	bl	11ed4 <radio_tmr_status_reset>
	radio_filter_status_reset();
    d8b8:	f004 fae8 	bl	11e8c <radio_filter_status_reset>
	radio_ar_status_reset();
    d8bc:	f004 fca8 	bl	12210 <radio_ar_status_reset>
	radio_rssi_status_reset();
    d8c0:	f004 faac 	bl	11e1c <radio_rssi_status_reset>
	if (!trx_done) {
    d8c4:	2d00      	cmp	r5, #0
    d8c6:	f000 8131 	beq.w	db2c <isr_rx+0x2b0>
	if (crc_ok) {
    d8ca:	f1b8 0f00 	cmp.w	r8, #0
    d8ce:	f000 812d 	beq.w	db2c <isr_rx+0x2b0>
{
	struct pdu_adv *pdu_rx, *pdu_adv;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    d8d2:	b376      	cbz	r6, d932 <isr_rx+0xb6>
    d8d4:	4638      	mov	r0, r7
    d8d6:	f003 ff9d 	bl	11814 <ull_filter_lll_rl_irk_idx>
    d8da:	f88d 0007 	strb.w	r0, [sp, #7]
				    FILTER_IDX_NONE;
#else
	u8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
    d8de:	f004 fa75 	bl	11dcc <radio_pkt_scratch_get>
    d8e2:	7be2      	ldrb	r2, [r4, #15]
    d8e4:	4605      	mov	r5, r0
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
    d8e6:	7800      	ldrb	r0, [r0, #0]
    d8e8:	2311      	movs	r3, #17
    d8ea:	2727      	movs	r7, #39	; 0x27
    d8ec:	fb17 3702 	smlabb	r7, r7, r2, r3
    d8f0:	f000 030f 	and.w	r3, r0, #15
    d8f4:	2b03      	cmp	r3, #3
    d8f6:	eb04 0807 	add.w	r8, r4, r7
    d8fa:	d157      	bne.n	d9ac <isr_rx+0x130>
    d8fc:	786b      	ldrb	r3, [r5, #1]
    d8fe:	2b0c      	cmp	r3, #12
    d900:	f040 8114 	bne.w	db2c <isr_rx+0x2b0>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
    d904:	5de3      	ldrb	r3, [r4, r7]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
    d906:	f003 030f 	and.w	r3, r3, #15
    d90a:	2b01      	cmp	r3, #1
    d90c:	f000 810e 	beq.w	db2c <isr_rx+0x2b0>
static inline bool isr_rx_sr_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *sr, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x01) == 0) &&
    d910:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
						sr->scan_req.scan_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    d912:	07da      	lsls	r2, r3, #31
    d914:	d50f      	bpl.n	d936 <isr_rx+0xba>
		(((lll->filter_policy & 0x01) != 0) &&
    d916:	f1b9 0f00 	cmp.w	r9, #0
    d91a:	d114      	bne.n	d946 <isr_rx+0xca>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    d91c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d920:	f003 ffc2 	bl	118a8 <ull_filter_lll_irk_whitelisted>
    d924:	b978      	cbnz	r0, d946 <isr_rx+0xca>
    d926:	e041      	b.n	d9ac <isr_rx+0x130>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
    d928:	462e      	mov	r6, r5
    d92a:	46a9      	mov	r9, r5
    d92c:	46a8      	mov	r8, r5
		devmatch_id = irkmatch_id = 0xFF;
    d92e:	27ff      	movs	r7, #255	; 0xff
    d930:	e7be      	b.n	d8b0 <isr_rx+0x34>
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    d932:	20ff      	movs	r0, #255	; 0xff
    d934:	e7d1      	b.n	d8da <isr_rx+0x5e>
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
    d936:	f10d 0207 	add.w	r2, sp, #7
    d93a:	1ca9      	adds	r1, r5, #2
    d93c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    d940:	f003 ffe6 	bl	11910 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
    d944:	b378      	cbz	r0, d9a6 <isr_rx+0x12a>
}

static inline bool isr_rx_sr_adva_check(struct pdu_adv *adv,
					struct pdu_adv *sr)
{
	return (adv->tx_addr == sr->rx_addr) &&
    d946:	5de3      	ldrb	r3, [r4, r7]
    d948:	782a      	ldrb	r2, [r5, #0]
    d94a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d94e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    d952:	d12b      	bne.n	d9ac <isr_rx+0x130>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    d954:	2206      	movs	r2, #6
    d956:	f105 0108 	add.w	r1, r5, #8
    d95a:	f108 0002 	add.w	r0, r8, #2
    d95e:	f00b f95c 	bl	18c1a <memcmp>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
    d962:	bb18      	cbnz	r0, d9ac <isr_rx+0x130>
		radio_isr_set(isr_done, lll);
    d964:	4621      	mov	r1, r4
    d966:	4875      	ldr	r0, [pc, #468]	; (db3c <isr_rx+0x2c0>)
    d968:	f004 f91c 	bl	11ba4 <radio_isr_set>
		radio_switch_complete_and_disable();
    d96c:	f004 fa48 	bl	11e00 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
    d970:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    d974:	2327      	movs	r3, #39	; 0x27
    d976:	fb03 4000 	mla	r0, r3, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
    d97a:	3061      	adds	r0, #97	; 0x61
    d97c:	f004 f9ce 	bl	11d1c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    d980:	f004 f9f6 	bl	11d70 <radio_is_ready>
    d984:	b160      	cbz	r0, d9a0 <isr_rx+0x124>
    d986:	f240 2396 	movw	r3, #662	; 0x296
    d98a:	4a6d      	ldr	r2, [pc, #436]	; (db40 <isr_rx+0x2c4>)
    d98c:	496d      	ldr	r1, [pc, #436]	; (db44 <isr_rx+0x2c8>)
    d98e:	486e      	ldr	r0, [pc, #440]	; (db48 <isr_rx+0x2cc>)
    d990:	f00a fbd0 	bl	18134 <printk>
    d994:	4040      	eors	r0, r0
    d996:	f380 8811 	msr	BASEPRI, r0
    d99a:	f04f 0003 	mov.w	r0, #3
    d99e:	df02      	svc	2
}
    d9a0:	b003      	add	sp, #12
    d9a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		(((lll->filter_policy & 0x01) != 0) &&
    d9a6:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
    d9a8:	07db      	lsls	r3, r3, #31
    d9aa:	d4b4      	bmi.n	d916 <isr_rx+0x9a>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
    d9ac:	7828      	ldrb	r0, [r5, #0]
    d9ae:	f000 030f 	and.w	r3, r0, #15
    d9b2:	2b05      	cmp	r3, #5
    d9b4:	f040 80ba 	bne.w	db2c <isr_rx+0x2b0>
    d9b8:	786b      	ldrb	r3, [r5, #1]
    d9ba:	2b22      	cmp	r3, #34	; 0x22
    d9bc:	f040 80b6 	bne.w	db2c <isr_rx+0x2b0>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    d9c0:	5de3      	ldrb	r3, [r4, r7]
    d9c2:	f003 030f 	and.w	r3, r3, #15
    d9c6:	2b01      	cmp	r3, #1
    d9c8:	f040 8091 	bne.w	daee <isr_rx+0x272>
#if defined(CONFIG_BT_CTLR_PRIVACY)
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						      ci->connect_ind.init_addr,
    d9cc:	f105 0902 	add.w	r9, r5, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
    d9d0:	f10d 0207 	add.w	r2, sp, #7
    d9d4:	4649      	mov	r1, r9
    d9d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    d9da:	f003 ff99 	bl	11910 <ull_filter_lll_rl_addr_allowed>
						      rl_idx) &&
#else
		return (1) &&
#endif
		       isr_rx_ci_adva_check(adv, ci) &&
    d9de:	b908      	cbnz	r0, d9e4 <isr_rx+0x168>
	return ((((lll->filter_policy & 0x02) == 0) &&
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    d9e0:	2000      	movs	r0, #0
    d9e2:	e00d      	b.n	da00 <isr_rx+0x184>
		       isr_rx_ci_adva_check(adv, ci) &&
    d9e4:	4629      	mov	r1, r5
    d9e6:	4640      	mov	r0, r8
    d9e8:	f00d f827 	bl	1aa3a <isr_rx_ci_adva_check>
						      rl_idx) &&
    d9ec:	2800      	cmp	r0, #0
    d9ee:	d0f7      	beq.n	d9e0 <isr_rx+0x164>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
    d9f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					struct pdu_adv *adv, struct pdu_adv *ci,
					u8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE) {
    d9f4:	2bff      	cmp	r3, #255	; 0xff
    d9f6:	d069      	beq.n	dacc <isr_rx+0x250>
		return rl_idx == lll->rl_idx;
    d9f8:	7ba0      	ldrb	r0, [r4, #14]
    d9fa:	1ac7      	subs	r7, r0, r3
    d9fc:	4278      	negs	r0, r7
    d9fe:	4178      	adcs	r0, r7
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    da00:	f000 0001 	and.w	r0, r0, #1
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
    da04:	2800      	cmp	r0, #0
    da06:	f000 8091 	beq.w	db2c <isr_rx+0x2b0>
				   &rl_idx) &&
    da0a:	68a3      	ldr	r3, [r4, #8]
    da0c:	2b00      	cmp	r3, #0
    da0e:	f000 808d 	beq.w	db2c <isr_rx+0x2b0>
			rx = ull_pdu_rx_alloc_peek(4);
    da12:	2004      	movs	r0, #4
    da14:	f7fe fdce 	bl	c5b4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    da18:	2800      	cmp	r0, #0
    da1a:	f000 8087 	beq.w	db2c <isr_rx+0x2b0>
		radio_isr_set(isr_abort, lll);
    da1e:	4621      	mov	r1, r4
    da20:	484a      	ldr	r0, [pc, #296]	; (db4c <isr_rx+0x2d0>)
    da22:	f004 f8bf 	bl	11ba4 <radio_isr_set>
		radio_disable();
    da26:	f004 f985 	bl	11d34 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    da2a:	f004 f9a1 	bl	11d70 <radio_is_ready>
    da2e:	b160      	cbz	r0, da4a <isr_rx+0x1ce>
    da30:	f240 23d2 	movw	r3, #722	; 0x2d2
    da34:	4a42      	ldr	r2, [pc, #264]	; (db40 <isr_rx+0x2c4>)
    da36:	4943      	ldr	r1, [pc, #268]	; (db44 <isr_rx+0x2c8>)
    da38:	4843      	ldr	r0, [pc, #268]	; (db48 <isr_rx+0x2cc>)
    da3a:	f00a fb7b 	bl	18134 <printk>
    da3e:	4040      	eors	r0, r0
    da40:	f380 8811 	msr	BASEPRI, r0
    da44:	f04f 0003 	mov.w	r0, #3
    da48:	df02      	svc	2
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
    da4a:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
    da4c:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
    da50:	07db      	lsls	r3, r3, #31
    da52:	7122      	strb	r2, [r4, #4]
    da54:	d50c      	bpl.n	da70 <isr_rx+0x1f4>
    da56:	f44f 7338 	mov.w	r3, #736	; 0x2e0
    da5a:	4a39      	ldr	r2, [pc, #228]	; (db40 <isr_rx+0x2c4>)
    da5c:	493c      	ldr	r1, [pc, #240]	; (db50 <isr_rx+0x2d4>)
    da5e:	483a      	ldr	r0, [pc, #232]	; (db48 <isr_rx+0x2cc>)
    da60:	f00a fb68 	bl	18134 <printk>
    da64:	4040      	eors	r0, r0
    da66:	f380 8811 	msr	BASEPRI, r0
    da6a:	f04f 0003 	mov.w	r0, #3
    da6e:	df02      	svc	2
		rx = ull_pdu_rx_alloc();
    da70:	f7fe fdb8 	bl	c5e4 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    da74:	2308      	movs	r3, #8
		rx = ull_pdu_rx_alloc();
    da76:	4607      	mov	r7, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    da78:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    da7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    da7e:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
    da80:	2224      	movs	r2, #36	; 0x24
    da82:	4629      	mov	r1, r5
    da84:	3020      	adds	r0, #32
    da86:	f00b f8d8 	bl	18c3a <memcpy>
		ftr->param = lll;
    da8a:	60bc      	str	r4, [r7, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
    da8c:	f004 faae 	bl	11fec <radio_tmr_start_get>
    da90:	6138      	str	r0, [r7, #16]
		ftr->us_radio_end = radio_tmr_end_get() -
    da92:	f004 fafd 	bl	12090 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
    da96:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
    da98:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
    da9a:	4608      	mov	r0, r1
    da9c:	f00d fb68 	bl	1b170 <radio_tx_chain_delay_get>
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
    daa0:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
    daa2:	1a20      	subs	r0, r4, r0
    daa4:	6178      	str	r0, [r7, #20]
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
    daa6:	4608      	mov	r0, r1
    daa8:	f00d fb64 	bl	1b174 <radio_rx_ready_delay_get>
    daac:	61b8      	str	r0, [r7, #24]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    daae:	2e00      	cmp	r6, #0
    dab0:	d03a      	beq.n	db28 <isr_rx+0x2ac>
    dab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dab6:	777b      	strb	r3, [r7, #29]
			ftr->extra = ull_pdu_rx_alloc();
    dab8:	f7fe fd94 	bl	c5e4 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
    dabc:	4639      	mov	r1, r7
			ftr->extra = ull_pdu_rx_alloc();
    dabe:	60f8      	str	r0, [r7, #12]
		ull_rx_put(rx->hdr.link, rx);
    dac0:	6838      	ldr	r0, [r7, #0]
    dac2:	f7fe fda5 	bl	c610 <ull_rx_put>
		ull_rx_sched();
    dac6:	f7fe fdb3 	bl	c630 <ull_rx_sched>
		if (!err) {
    daca:	e769      	b.n	d9a0 <isr_rx+0x124>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (adv->rx_addr == ci->tx_addr) &&
    dacc:	782b      	ldrb	r3, [r5, #0]
    dace:	5de2      	ldrb	r2, [r4, r7]
    dad0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dad4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    dad8:	d182      	bne.n	d9e0 <isr_rx+0x164>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    dada:	2206      	movs	r2, #6
    dadc:	4649      	mov	r1, r9
    dade:	f108 0008 	add.w	r0, r8, #8
    dae2:	f00b f89a 	bl	18c1a <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    dae6:	fab0 f080 	clz	r0, r0
    daea:	0940      	lsrs	r0, r0, #5
    daec:	e788      	b.n	da00 <isr_rx+0x184>
	return ((((lll->filter_policy & 0x02) == 0) &&
    daee:	7b63      	ldrb	r3, [r4, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    daf0:	0799      	lsls	r1, r3, #30
    daf2:	d508      	bpl.n	db06 <isr_rx+0x28a>
		(((lll->filter_policy & 0x02) != 0) &&
    daf4:	f1b9 0f00 	cmp.w	r9, #0
    daf8:	d10d      	bne.n	db16 <isr_rx+0x29a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    dafa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dafe:	f003 fed3 	bl	118a8 <ull_filter_lll_irk_whitelisted>
    db02:	b940      	cbnz	r0, db16 <isr_rx+0x29a>
    db04:	e76c      	b.n	d9e0 <isr_rx+0x164>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
    db06:	f10d 0207 	add.w	r2, sp, #7
    db0a:	1ca9      	adds	r1, r5, #2
    db0c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    db10:	f003 fefe 	bl	11910 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
    db14:	b120      	cbz	r0, db20 <isr_rx+0x2a4>
	       isr_rx_ci_adva_check(adv, ci);
    db16:	4629      	mov	r1, r5
    db18:	4640      	mov	r0, r8
    db1a:	f00c ff8e 	bl	1aa3a <isr_rx_ci_adva_check>
    db1e:	e76f      	b.n	da00 <isr_rx+0x184>
		(((lll->filter_policy & 0x02) != 0) &&
    db20:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
    db22:	079a      	lsls	r2, r3, #30
    db24:	d4e6      	bmi.n	daf4 <isr_rx+0x278>
    db26:	e75b      	b.n	d9e0 <isr_rx+0x164>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    db28:	23ff      	movs	r3, #255	; 0xff
    db2a:	e7c4      	b.n	dab6 <isr_rx+0x23a>
	radio_isr_set(isr_done, param);
    db2c:	4621      	mov	r1, r4
    db2e:	4803      	ldr	r0, [pc, #12]	; (db3c <isr_rx+0x2c0>)
    db30:	f004 f838 	bl	11ba4 <radio_isr_set>
	radio_disable();
    db34:	f004 f8fe 	bl	11d34 <radio_disable>
    db38:	e732      	b.n	d9a0 <isr_rx+0x124>
    db3a:	bf00      	nop
    db3c:	0001aaab 	.word	0x0001aaab
    db40:	00020bcd 	.word	0x00020bcd
    db44:	00020c23 	.word	0x00020c23
    db48:	0001ff46 	.word	0x0001ff46
    db4c:	0001aa15 	.word	0x0001aa15
    db50:	000208c5 	.word	0x000208c5

0000db54 <chan_prepare>:
{
    db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
    db56:	7bc3      	ldrb	r3, [r0, #15]
	if (first != pdu->last) {
    db58:	7c05      	ldrb	r5, [r0, #16]
    db5a:	42ab      	cmp	r3, r5
    db5c:	4604      	mov	r4, r0
    db5e:	d060      	beq.n	dc22 <chan_prepare+0xce>
		first += 1U;
    db60:	1c5d      	adds	r5, r3, #1
    db62:	b2ed      	uxtb	r5, r5
			first = 0U;
    db64:	2d02      	cmp	r5, #2
    db66:	bf08      	it	eq
    db68:	2500      	moveq	r5, #0
		pdu->first = first;
    db6a:	73c5      	strb	r5, [r0, #15]
		*is_modified = 1U;
    db6c:	f04f 0e01 	mov.w	lr, #1
	first = pdu->first;
    db70:	4620      	mov	r0, r4
	if (first != pdu->last) {
    db72:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	first = pdu->first;
    db76:	f810 2f5f 	ldrb.w	r2, [r0, #95]!
	return (void *)pdu->pdu[first];
    db7a:	2127      	movs	r1, #39	; 0x27
    db7c:	f04f 0c02 	mov.w	ip, #2
    db80:	f104 060f 	add.w	r6, r4, #15
    db84:	fb11 c505 	smlabb	r5, r1, r5, ip
	if (first != pdu->last) {
    db88:	4293      	cmp	r3, r2
	return (void *)pdu->pdu[first];
    db8a:	eb06 0705 	add.w	r7, r6, r5
	if (first != pdu->last) {
    db8e:	d04b      	beq.n	dc28 <chan_prepare+0xd4>
		first += 1U;
    db90:	3201      	adds	r2, #1
    db92:	b2d3      	uxtb	r3, r2
			first = 0U;
    db94:	4563      	cmp	r3, ip
    db96:	bf08      	it	eq
    db98:	2300      	moveq	r3, #0
		pdu->first = first;
    db9a:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
	return (void *)pdu->pdu[first];
    db9e:	fb11 c303 	smlabb	r3, r1, r3, ip
    dba2:	4418      	add	r0, r3
		memcpy(&scan_pdu->scan_rsp.addr[0],
    dba4:	2206      	movs	r2, #6
    dba6:	1cb9      	adds	r1, r7, #2
    dba8:	3002      	adds	r0, #2
    dbaa:	f00b f846 	bl	18c3a <memcpy>
	radio_pkt_tx_set(pdu);
    dbae:	4638      	mov	r0, r7
    dbb0:	f004 f8b4 	bl	11d1c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    dbb4:	5d73      	ldrb	r3, [r6, r5]
    dbb6:	f003 030f 	and.w	r3, r3, #15
    dbba:	2b02      	cmp	r3, #2
		radio_isr_set(isr_tx, lll);
    dbbc:	4621      	mov	r1, r4
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    dbbe:	d03a      	beq.n	dc36 <chan_prepare+0xe2>
		radio_isr_set(isr_tx, lll);
    dbc0:	4820      	ldr	r0, [pc, #128]	; (dc44 <chan_prepare+0xf0>)
    dbc2:	f003 ffef 	bl	11ba4 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
    dbc6:	2096      	movs	r0, #150	; 0x96
    dbc8:	f004 f994 	bl	11ef4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    dbcc:	2000      	movs	r0, #0
    dbce:	f004 f901 	bl	11dd4 <radio_switch_complete_and_rx>
	chan = find_lsb_set(lll->chan_map_curr);
    dbd2:	7b23      	ldrb	r3, [r4, #12]
    dbd4:	f3c3 1302 	ubfx	r3, r3, #4, #3
    dbd8:	2b00      	cmp	r3, #0
    dbda:	fa93 f0a3 	rbit	r0, r3
    dbde:	fab0 f080 	clz	r0, r0
    dbe2:	bf08      	it	eq
    dbe4:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
    dbe8:	1c45      	adds	r5, r0, #1
    dbea:	d10c      	bne.n	dc06 <chan_prepare+0xb2>
    dbec:	f44f 731d 	mov.w	r3, #628	; 0x274
    dbf0:	4a15      	ldr	r2, [pc, #84]	; (dc48 <chan_prepare+0xf4>)
    dbf2:	4916      	ldr	r1, [pc, #88]	; (dc4c <chan_prepare+0xf8>)
    dbf4:	4816      	ldr	r0, [pc, #88]	; (dc50 <chan_prepare+0xfc>)
    dbf6:	f00a fa9d 	bl	18134 <printk>
    dbfa:	4040      	eors	r0, r0
    dbfc:	f380 8811 	msr	BASEPRI, r0
    dc00:	f04f 0003 	mov.w	r0, #3
    dc04:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
    dc06:	7b23      	ldrb	r3, [r4, #12]
    dc08:	f3c3 1202 	ubfx	r2, r3, #4, #3
    dc0c:	1e51      	subs	r1, r2, #1
    dc0e:	400a      	ands	r2, r1
    dc10:	f362 1306 	bfi	r3, r2, #4, #3
    dc14:	7323      	strb	r3, [r4, #12]
	lll_chan_set(36 + chan);
    dc16:	f105 0024 	add.w	r0, r5, #36	; 0x24
}
    dc1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_chan_set(36 + chan);
    dc1e:	f7ff b98f 	b.w	cf40 <lll_chan_set>
	u8_t upd = 0U;
    dc22:	f04f 0e00 	mov.w	lr, #0
    dc26:	e7a3      	b.n	db70 <chan_prepare+0x1c>
	if (upd) {
    dc28:	f1be 0f00 	cmp.w	lr, #0
    dc2c:	d0bf      	beq.n	dbae <chan_prepare+0x5a>
    dc2e:	fb11 c103 	smlabb	r1, r1, r3, ip
    dc32:	4408      	add	r0, r1
    dc34:	e7b6      	b.n	dba4 <chan_prepare+0x50>
		radio_isr_set(isr_done, lll);
    dc36:	4807      	ldr	r0, [pc, #28]	; (dc54 <chan_prepare+0x100>)
    dc38:	f003 ffb4 	bl	11ba4 <radio_isr_set>
		radio_switch_complete_and_disable();
    dc3c:	f004 f8e0 	bl	11e00 <radio_switch_complete_and_disable>
    dc40:	e7c7      	b.n	dbd2 <chan_prepare+0x7e>
    dc42:	bf00      	nop
    dc44:	0000d719 	.word	0x0000d719
    dc48:	00020bcd 	.word	0x00020bcd
    dc4c:	000209f5 	.word	0x000209f5
    dc50:	0001ff46 	.word	0x0001ff46
    dc54:	0001aaab 	.word	0x0001aaab

0000dc58 <prepare_cb>:
{
    dc58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
    dc5a:	68c4      	ldr	r4, [r0, #12]
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    dc5c:	4b40      	ldr	r3, [pc, #256]	; (dd60 <prepare_cb+0x108>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
    dc5e:	7925      	ldrb	r5, [r4, #4]
    dc60:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
    dc62:	f015 0501 	ands.w	r5, r5, #1
{
    dc66:	4606      	mov	r6, r0
	if (lll_is_stop(lll)) {
    dc68:	d016      	beq.n	dc98 <prepare_cb+0x40>
		err = lll_clk_off();
    dc6a:	f7ff f961 	bl	cf30 <lll_clk_off>
		LL_ASSERT(!err || err == -EBUSY);
    dc6e:	b168      	cbz	r0, dc8c <prepare_cb+0x34>
    dc70:	3010      	adds	r0, #16
    dc72:	d00b      	beq.n	dc8c <prepare_cb+0x34>
    dc74:	238a      	movs	r3, #138	; 0x8a
    dc76:	4a3b      	ldr	r2, [pc, #236]	; (dd64 <prepare_cb+0x10c>)
    dc78:	493b      	ldr	r1, [pc, #236]	; (dd68 <prepare_cb+0x110>)
    dc7a:	483c      	ldr	r0, [pc, #240]	; (dd6c <prepare_cb+0x114>)
    dc7c:	f00a fa5a 	bl	18134 <printk>
    dc80:	4040      	eors	r0, r0
    dc82:	f380 8811 	msr	BASEPRI, r0
    dc86:	f04f 0003 	mov.w	r0, #3
    dc8a:	df02      	svc	2
		lll_done(NULL);
    dc8c:	2000      	movs	r0, #0
    dc8e:	f7ff f8fd 	bl	ce8c <lll_done>
}
    dc92:	2000      	movs	r0, #0
    dc94:	b003      	add	sp, #12
    dc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
    dc98:	f003 ffa4 	bl	11be4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    dc9c:	4628      	mov	r0, r5
    dc9e:	f003 ffd5 	bl	11c4c <radio_tx_power_set>
	radio_phy_set(0, 0);
    dca2:	4629      	mov	r1, r5
    dca4:	4628      	mov	r0, r5
    dca6:	f003 ffc1 	bl	11c2c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
    dcaa:	462a      	mov	r2, r5
    dcac:	2125      	movs	r1, #37	; 0x25
    dcae:	2008      	movs	r0, #8
    dcb0:	f004 f802 	bl	11cb8 <radio_pkt_configure>
	radio_aa_set((u8_t *)&aa);
    dcb4:	a801      	add	r0, sp, #4
    dcb6:	f003 ffe7 	bl	11c88 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    dcba:	492d      	ldr	r1, [pc, #180]	; (dd70 <prepare_cb+0x118>)
    dcbc:	f240 605b 	movw	r0, #1627	; 0x65b
    dcc0:	f004 f86a 	bl	11d98 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
    dcc4:	7b23      	ldrb	r3, [r4, #12]
    dcc6:	f3c3 0242 	ubfx	r2, r3, #1, #3
    dcca:	f362 1306 	bfi	r3, r2, #4, #3
    dcce:	7323      	strb	r3, [r4, #12]
	chan_prepare(lll);
    dcd0:	4620      	mov	r0, r4
    dcd2:	f7ff ff3f 	bl	db54 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
    dcd6:	f003 fe57 	bl	11988 <ull_filter_lll_rl_enabled>
    dcda:	7b63      	ldrb	r3, [r4, #13]
    dcdc:	b348      	cbz	r0, dd32 <prepare_cb+0xda>
			ull_filter_lll_get(!!(lll->filter_policy));
    dcde:	f013 0003 	ands.w	r0, r3, #3
    dce2:	bf18      	it	ne
    dce4:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
    dce6:	f003 fe07 	bl	118f8 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
    dcea:	1c82      	adds	r2, r0, #2
    dcec:	7841      	ldrb	r1, [r0, #1]
    dcee:	7800      	ldrb	r0, [r0, #0]
    dcf0:	f004 f8a6 	bl	11e40 <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
    dcf4:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
    dcf6:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
    dcf8:	4638      	mov	r0, r7
    dcfa:	f00c fe53 	bl	1a9a4 <lll_evt_offset_get>
    dcfe:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
    dd00:	6872      	ldr	r2, [r6, #4]
    dd02:	f105 0109 	add.w	r1, r5, #9
    dd06:	2001      	movs	r0, #1
    dd08:	f004 f900 	bl	11f0c <radio_tmr_start>
	radio_tmr_end_capture();
    dd0c:	f004 f9b8 	bl	12080 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
    dd10:	4620      	mov	r0, r4
    dd12:	f7ff fc31 	bl	d578 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
    dd16:	1c81      	adds	r1, r0, #2
    dd18:	462a      	mov	r2, r5
    dd1a:	b2c9      	uxtb	r1, r1
    dd1c:	4638      	mov	r0, r7
    dd1e:	f00c fe4f 	bl	1a9c0 <lll_preempt_calc>
    dd22:	b150      	cbz	r0, dd3a <prepare_cb+0xe2>
		radio_isr_set(isr_abort, lll);
    dd24:	4621      	mov	r1, r4
    dd26:	4813      	ldr	r0, [pc, #76]	; (dd74 <prepare_cb+0x11c>)
    dd28:	f003 ff3c 	bl	11ba4 <radio_isr_set>
		radio_disable();
    dd2c:	f004 f802 	bl	11d34 <radio_disable>
    dd30:	e7af      	b.n	dc92 <prepare_cb+0x3a>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
    dd32:	079b      	lsls	r3, r3, #30
    dd34:	d0de      	beq.n	dcf4 <prepare_cb+0x9c>
		struct lll_filter *wl = ull_filter_lll_get(true);
    dd36:	2001      	movs	r0, #1
    dd38:	e7d5      	b.n	dce6 <prepare_cb+0x8e>
		ret = lll_prepare_done(lll);
    dd3a:	4620      	mov	r0, r4
    dd3c:	f00c fe30 	bl	1a9a0 <lll_prepare_done>
		LL_ASSERT(!ret);
    dd40:	2800      	cmp	r0, #0
    dd42:	d0a6      	beq.n	dc92 <prepare_cb+0x3a>
    dd44:	23e8      	movs	r3, #232	; 0xe8
    dd46:	4a07      	ldr	r2, [pc, #28]	; (dd64 <prepare_cb+0x10c>)
    dd48:	490b      	ldr	r1, [pc, #44]	; (dd78 <prepare_cb+0x120>)
    dd4a:	4808      	ldr	r0, [pc, #32]	; (dd6c <prepare_cb+0x114>)
    dd4c:	f00a f9f2 	bl	18134 <printk>
    dd50:	4040      	eors	r0, r0
    dd52:	f380 8811 	msr	BASEPRI, r0
    dd56:	f04f 0003 	mov.w	r0, #3
    dd5a:	df02      	svc	2
    dd5c:	e799      	b.n	dc92 <prepare_cb+0x3a>
    dd5e:	bf00      	nop
    dd60:	8e89bed6 	.word	0x8e89bed6
    dd64:	00020bcd 	.word	0x00020bcd
    dd68:	00020c10 	.word	0x00020c10
    dd6c:	0001ff46 	.word	0x0001ff46
    dd70:	00555555 	.word	0x00555555
    dd74:	0001aa15 	.word	0x0001aa15
    dd78:	000208c5 	.word	0x000208c5

0000dd7c <lll_adv_prepare>:
{
    dd7c:	b513      	push	{r0, r1, r4, lr}
    dd7e:	4604      	mov	r4, r0
	err = lll_clk_on();
    dd80:	f7ff f8ce 	bl	cf20 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
    dd84:	b168      	cbz	r0, dda2 <lll_adv_prepare+0x26>
    dd86:	3044      	adds	r0, #68	; 0x44
    dd88:	d00b      	beq.n	dda2 <lll_adv_prepare+0x26>
    dd8a:	236d      	movs	r3, #109	; 0x6d
    dd8c:	4a11      	ldr	r2, [pc, #68]	; (ddd4 <lll_adv_prepare+0x58>)
    dd8e:	4912      	ldr	r1, [pc, #72]	; (ddd8 <lll_adv_prepare+0x5c>)
    dd90:	4812      	ldr	r0, [pc, #72]	; (dddc <lll_adv_prepare+0x60>)
    dd92:	f00a f9cf 	bl	18134 <printk>
    dd96:	4040      	eors	r0, r0
    dd98:	f380 8811 	msr	BASEPRI, r0
    dd9c:	f04f 0003 	mov.w	r0, #3
    dda0:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
    dda2:	9400      	str	r4, [sp, #0]
    dda4:	2300      	movs	r3, #0
    dda6:	4a0e      	ldr	r2, [pc, #56]	; (dde0 <lll_adv_prepare+0x64>)
    dda8:	490e      	ldr	r1, [pc, #56]	; (dde4 <lll_adv_prepare+0x68>)
    ddaa:	480f      	ldr	r0, [pc, #60]	; (dde8 <lll_adv_prepare+0x6c>)
    ddac:	f00c fdef 	bl	1a98e <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
    ddb0:	b168      	cbz	r0, ddce <lll_adv_prepare+0x52>
    ddb2:	3044      	adds	r0, #68	; 0x44
    ddb4:	d00b      	beq.n	ddce <lll_adv_prepare+0x52>
    ddb6:	2370      	movs	r3, #112	; 0x70
    ddb8:	4a06      	ldr	r2, [pc, #24]	; (ddd4 <lll_adv_prepare+0x58>)
    ddba:	4907      	ldr	r1, [pc, #28]	; (ddd8 <lll_adv_prepare+0x5c>)
    ddbc:	4807      	ldr	r0, [pc, #28]	; (dddc <lll_adv_prepare+0x60>)
    ddbe:	f00a f9b9 	bl	18134 <printk>
    ddc2:	4040      	eors	r0, r0
    ddc4:	f380 8811 	msr	BASEPRI, r0
    ddc8:	f04f 0003 	mov.w	r0, #3
    ddcc:	df02      	svc	2
}
    ddce:	b002      	add	sp, #8
    ddd0:	bd10      	pop	{r4, pc}
    ddd2:	bf00      	nop
    ddd4:	00020bcd 	.word	0x00020bcd
    ddd8:	00020bba 	.word	0x00020bba
    dddc:	0001ff46 	.word	0x0001ff46
    dde0:	0000dc59 	.word	0x0000dc59
    dde4:	0000d829 	.word	0x0000d829
    dde8:	0000d7b9 	.word	0x0000d7b9

0000ddec <pdu_len_cmp>:
		break;
	}
}

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    ddec:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    ddee:	4b0d      	ldr	r3, [pc, #52]	; (de24 <pdu_len_cmp+0x38>)
{
    ddf0:	b089      	sub	sp, #36	; 0x24
    ddf2:	4605      	mov	r5, r0
    ddf4:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    ddf6:	aa01      	add	r2, sp, #4
    ddf8:	f103 0718 	add.w	r7, r3, #24
    ddfc:	6818      	ldr	r0, [r3, #0]
    ddfe:	6859      	ldr	r1, [r3, #4]
    de00:	4614      	mov	r4, r2
    de02:	c403      	stmia	r4!, {r0, r1}
    de04:	3308      	adds	r3, #8
    de06:	42bb      	cmp	r3, r7
    de08:	4622      	mov	r2, r4
    de0a:	d1f7      	bne.n	ddfc <pdu_len_cmp+0x10>
    de0c:	881b      	ldrh	r3, [r3, #0]
    de0e:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    de10:	ab08      	add	r3, sp, #32
    de12:	441d      	add	r5, r3
    de14:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    de18:	1b83      	subs	r3, r0, r6
    de1a:	4258      	negs	r0, r3
    de1c:	4158      	adcs	r0, r3
    de1e:	b009      	add	sp, #36	; 0x24
    de20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de22:	bf00      	nop
    de24:	0001e5bb 	.word	0x0001e5bb

0000de28 <ticker_update_latency_cancel_op_cb>:
{
    de28:	b510      	push	{r4, lr}
    de2a:	460c      	mov	r4, r1
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    de2c:	b160      	cbz	r0, de48 <ticker_update_latency_cancel_op_cb+0x20>
    de2e:	f240 633a 	movw	r3, #1594	; 0x63a
    de32:	4a09      	ldr	r2, [pc, #36]	; (de58 <ticker_update_latency_cancel_op_cb+0x30>)
    de34:	4909      	ldr	r1, [pc, #36]	; (de5c <ticker_update_latency_cancel_op_cb+0x34>)
    de36:	480a      	ldr	r0, [pc, #40]	; (de60 <ticker_update_latency_cancel_op_cb+0x38>)
    de38:	f00a f97c 	bl	18134 <printk>
    de3c:	4040      	eors	r0, r0
    de3e:	f380 8811 	msr	BASEPRI, r0
    de42:	f04f 0003 	mov.w	r0, #3
    de46:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
    de48:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    de4c:	f36f 0341 	bfc	r3, #1, #1
    de50:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
    de54:	bd10      	pop	{r4, pc}
    de56:	bf00      	nop
    de58:	00020ce6 	.word	0x00020ce6
    de5c:	00020d1f 	.word	0x00020d1f
    de60:	0001ff46 	.word	0x0001ff46

0000de64 <init_reset>:
{
    de64:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    de66:	2201      	movs	r2, #1
    de68:	4b12      	ldr	r3, [pc, #72]	; (deb4 <init_reset+0x50>)
    de6a:	4813      	ldr	r0, [pc, #76]	; (deb8 <init_reset+0x54>)
    de6c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    de70:	f00c face 	bl	1a410 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
    de74:	4b11      	ldr	r3, [pc, #68]	; (debc <init_reset+0x58>)
    de76:	2203      	movs	r2, #3
    de78:	1d18      	adds	r0, r3, #4
    de7a:	2124      	movs	r1, #36	; 0x24
    de7c:	f00c fac8 	bl	1a410 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    de80:	4b0f      	ldr	r3, [pc, #60]	; (dec0 <init_reset+0x5c>)
    de82:	2204      	movs	r2, #4
    de84:	1898      	adds	r0, r3, r2
    de86:	2120      	movs	r1, #32
    de88:	f00c fac2 	bl	1a410 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    de8c:	4b0d      	ldr	r3, [pc, #52]	; (dec4 <init_reset+0x60>)
    de8e:	2207      	movs	r2, #7
    de90:	1d18      	adds	r0, r3, #4
    de92:	2108      	movs	r1, #8
    de94:	f00c fabc 	bl	1a410 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    de98:	4b0b      	ldr	r3, [pc, #44]	; (dec8 <init_reset+0x64>)
    de9a:	221b      	movs	r2, #27
    de9c:	801a      	strh	r2, [r3, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
    de9e:	4b0b      	ldr	r3, [pc, #44]	; (decc <init_reset+0x68>)
    dea0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dea4:	801a      	strh	r2, [r3, #0]
	default_phy_tx |= BIT(1);
    dea6:	4a0a      	ldr	r2, [pc, #40]	; (ded0 <init_reset+0x6c>)
    dea8:	2303      	movs	r3, #3
    deaa:	7013      	strb	r3, [r2, #0]
	default_phy_rx |= BIT(1);
    deac:	4a09      	ldr	r2, [pc, #36]	; (ded4 <init_reset+0x70>)
    deae:	7013      	strb	r3, [r2, #0]
}
    deb0:	2000      	movs	r0, #0
    deb2:	bd08      	pop	{r3, pc}
    deb4:	20000eb4 	.word	0x20000eb4
    deb8:	20000eb8 	.word	0x20000eb8
    debc:	20001090 	.word	0x20001090
    dec0:	20001100 	.word	0x20001100
    dec4:	20001184 	.word	0x20001184
    dec8:	20005d1a 	.word	0x20005d1a
    decc:	20005d1c 	.word	0x20005d1c
    ded0:	2000a148 	.word	0x2000a148
    ded4:	2000a147 	.word	0x2000a147

0000ded8 <ticker_start_conn_op_cb>:
{
    ded8:	b510      	push	{r4, lr}
    deda:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dedc:	b160      	cbz	r0, def8 <ticker_start_conn_op_cb+0x20>
    dede:	f240 6356 	movw	r3, #1622	; 0x656
    dee2:	4a0f      	ldr	r2, [pc, #60]	; (df20 <ticker_start_conn_op_cb+0x48>)
    dee4:	490f      	ldr	r1, [pc, #60]	; (df24 <ticker_start_conn_op_cb+0x4c>)
    dee6:	4810      	ldr	r0, [pc, #64]	; (df28 <ticker_start_conn_op_cb+0x50>)
    dee8:	f00a f924 	bl	18134 <printk>
    deec:	4040      	eors	r0, r0
    deee:	f380 8811 	msr	BASEPRI, r0
    def2:	f04f 0003 	mov.w	r0, #3
    def6:	df02      	svc	2
	void *p = ull_update_unmark(param);
    def8:	4620      	mov	r0, r4
    defa:	f7fe fb0b 	bl	c514 <ull_update_unmark>
	LL_ASSERT(p == param);
    defe:	4284      	cmp	r4, r0
    df00:	d00c      	beq.n	df1c <ticker_start_conn_op_cb+0x44>
    df02:	f240 635a 	movw	r3, #1626	; 0x65a
    df06:	4a06      	ldr	r2, [pc, #24]	; (df20 <ticker_start_conn_op_cb+0x48>)
    df08:	4908      	ldr	r1, [pc, #32]	; (df2c <ticker_start_conn_op_cb+0x54>)
    df0a:	4807      	ldr	r0, [pc, #28]	; (df28 <ticker_start_conn_op_cb+0x50>)
    df0c:	f00a f912 	bl	18134 <printk>
    df10:	4040      	eors	r0, r0
    df12:	f380 8811 	msr	BASEPRI, r0
    df16:	f04f 0003 	mov.w	r0, #3
    df1a:	df02      	svc	2
}
    df1c:	bd10      	pop	{r4, pc}
    df1e:	bf00      	nop
    df20:	00020ce6 	.word	0x00020ce6
    df24:	00020d26 	.word	0x00020d26
    df28:	0001ff46 	.word	0x0001ff46
    df2c:	00020c8a 	.word	0x00020c8a

0000df30 <ticker_stop_conn_op_cb>:
{
    df30:	b510      	push	{r4, lr}
    df32:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    df34:	b160      	cbz	r0, df50 <ticker_stop_conn_op_cb+0x20>
    df36:	f240 634d 	movw	r3, #1613	; 0x64d
    df3a:	4a0f      	ldr	r2, [pc, #60]	; (df78 <ticker_stop_conn_op_cb+0x48>)
    df3c:	490f      	ldr	r1, [pc, #60]	; (df7c <ticker_stop_conn_op_cb+0x4c>)
    df3e:	4810      	ldr	r0, [pc, #64]	; (df80 <ticker_stop_conn_op_cb+0x50>)
    df40:	f00a f8f8 	bl	18134 <printk>
    df44:	4040      	eors	r0, r0
    df46:	f380 8811 	msr	BASEPRI, r0
    df4a:	f04f 0003 	mov.w	r0, #3
    df4e:	df02      	svc	2
	void *p = ull_update_mark(param);
    df50:	4620      	mov	r0, r4
    df52:	f7fe fad7 	bl	c504 <ull_update_mark>
	LL_ASSERT(p == param);
    df56:	4284      	cmp	r4, r0
    df58:	d00c      	beq.n	df74 <ticker_stop_conn_op_cb+0x44>
    df5a:	f240 6351 	movw	r3, #1617	; 0x651
    df5e:	4a06      	ldr	r2, [pc, #24]	; (df78 <ticker_stop_conn_op_cb+0x48>)
    df60:	4908      	ldr	r1, [pc, #32]	; (df84 <ticker_stop_conn_op_cb+0x54>)
    df62:	4807      	ldr	r0, [pc, #28]	; (df80 <ticker_stop_conn_op_cb+0x50>)
    df64:	f00a f8e6 	bl	18134 <printk>
    df68:	4040      	eors	r0, r0
    df6a:	f380 8811 	msr	BASEPRI, r0
    df6e:	f04f 0003 	mov.w	r0, #3
    df72:	df02      	svc	2
}
    df74:	bd10      	pop	{r4, pc}
    df76:	bf00      	nop
    df78:	00020ce6 	.word	0x00020ce6
    df7c:	00020d26 	.word	0x00020d26
    df80:	0001ff46 	.word	0x0001ff46
    df84:	00020c8a 	.word	0x00020c8a

0000df88 <ticker_update_conn_op_cb>:
{
    df88:	b510      	push	{r4, lr}
    df8a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    df8c:	b1a0      	cbz	r0, dfb8 <ticker_update_conn_op_cb+0x30>
    df8e:	f7fe facf 	bl	c530 <ull_update_mark_get>
    df92:	4284      	cmp	r4, r0
    df94:	d010      	beq.n	dfb8 <ticker_update_conn_op_cb+0x30>
    df96:	f7fe faaf 	bl	c4f8 <ull_disable_mark_get>
    df9a:	4284      	cmp	r4, r0
    df9c:	d00c      	beq.n	dfb8 <ticker_update_conn_op_cb+0x30>
    df9e:	f44f 63c9 	mov.w	r3, #1608	; 0x648
    dfa2:	4a06      	ldr	r2, [pc, #24]	; (dfbc <ticker_update_conn_op_cb+0x34>)
    dfa4:	4906      	ldr	r1, [pc, #24]	; (dfc0 <ticker_update_conn_op_cb+0x38>)
    dfa6:	4807      	ldr	r0, [pc, #28]	; (dfc4 <ticker_update_conn_op_cb+0x3c>)
    dfa8:	f00a f8c4 	bl	18134 <printk>
    dfac:	4040      	eors	r0, r0
    dfae:	f380 8811 	msr	BASEPRI, r0
    dfb2:	f04f 0003 	mov.w	r0, #3
    dfb6:	df02      	svc	2
}
    dfb8:	bd10      	pop	{r4, pc}
    dfba:	bf00      	nop
    dfbc:	00020ce6 	.word	0x00020ce6
    dfc0:	00020c95 	.word	0x00020c95
    dfc4:	0001ff46 	.word	0x0001ff46

0000dfc8 <ticker_op_stop_cb>:
{
    dfc8:	b510      	push	{r4, lr}
    dfca:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dfcc:	b160      	cbz	r0, dfe8 <ticker_op_stop_cb+0x20>
    dfce:	f240 6363 	movw	r3, #1635	; 0x663
    dfd2:	4a10      	ldr	r2, [pc, #64]	; (e014 <ticker_op_stop_cb+0x4c>)
    dfd4:	4910      	ldr	r1, [pc, #64]	; (e018 <ticker_op_stop_cb+0x50>)
    dfd6:	4811      	ldr	r0, [pc, #68]	; (e01c <ticker_op_stop_cb+0x54>)
    dfd8:	f00a f8ac 	bl	18134 <printk>
    dfdc:	4040      	eors	r0, r0
    dfde:	f380 8811 	msr	BASEPRI, r0
    dfe2:	f04f 0003 	mov.w	r0, #3
    dfe6:	df02      	svc	2
	mfy.param = param;
    dfe8:	4b0d      	ldr	r3, [pc, #52]	; (e020 <ticker_op_stop_cb+0x58>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    dfea:	2200      	movs	r2, #0
    dfec:	4611      	mov	r1, r2
    dfee:	2002      	movs	r0, #2
	mfy.param = param;
    dff0:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    dff2:	f7fb fdc5 	bl	9b80 <mayfly_enqueue>
	LL_ASSERT(!retval);
    dff6:	b160      	cbz	r0, e012 <ticker_op_stop_cb+0x4a>
    dff8:	f240 636a 	movw	r3, #1642	; 0x66a
    dffc:	4a05      	ldr	r2, [pc, #20]	; (e014 <ticker_op_stop_cb+0x4c>)
    dffe:	4909      	ldr	r1, [pc, #36]	; (e024 <ticker_op_stop_cb+0x5c>)
    e000:	4806      	ldr	r0, [pc, #24]	; (e01c <ticker_op_stop_cb+0x54>)
    e002:	f00a f897 	bl	18134 <printk>
    e006:	4040      	eors	r0, r0
    e008:	f380 8811 	msr	BASEPRI, r0
    e00c:	f04f 0003 	mov.w	r0, #3
    e010:	df02      	svc	2
}
    e012:	bd10      	pop	{r4, pc}
    e014:	00020ce6 	.word	0x00020ce6
    e018:	00020d26 	.word	0x00020d26
    e01c:	0001ff46 	.word	0x0001ff46
    e020:	2000cec8 	.word	0x2000cec8
    e024:	000208ca 	.word	0x000208ca

0000e028 <conn_cleanup>:
	rx->hdr.handle = conn->lll.handle;
    e028:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
{
    e02a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	rx->hdr.handle = conn->lll.handle;
    e02e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
	*((u8_t *)rx->pdu) = reason;
    e032:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    e036:	2309      	movs	r3, #9
	rx = conn->llcp_rx;
    e038:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    e03c:	f880 3130 	strb.w	r3, [r0, #304]	; 0x130
{
    e040:	4604      	mov	r4, r0
	struct lll_conn *lll = &conn->lll;
    e042:	f100 061c 	add.w	r6, r0, #28
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e046:	2503      	movs	r5, #3
	while (rx) {
    e048:	bb19      	cbnz	r1, e092 <conn_cleanup+0x6a>
		link = mem_acquire(&mem_link_tx.free);
    e04a:	4f24      	ldr	r7, [pc, #144]	; (e0dc <conn_cleanup+0xb4>)
		LL_ASSERT(link);
    e04c:	f8df 8094 	ldr.w	r8, [pc, #148]	; e0e4 <conn_cleanup+0xbc>
    e050:	f8df 909c 	ldr.w	r9, [pc, #156]	; e0f0 <conn_cleanup+0xc8>
	while (conn->tx_head) {
    e054:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
    e058:	bb10      	cbnz	r0, e0a0 <conn_cleanup+0x78>
				    TICKER_ID_CONN_BASE + lll->handle,
    e05a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    e05e:	4b20      	ldr	r3, [pc, #128]	; (e0e0 <conn_cleanup+0xb8>)
    e060:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
    e062:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    e064:	b2d2      	uxtb	r2, r2
    e066:	2101      	movs	r1, #1
    e068:	f7fc fa8e 	bl	a588 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e06c:	f030 0302 	bics.w	r3, r0, #2
    e070:	d00c      	beq.n	e08c <conn_cleanup+0x64>
    e072:	f240 63b3 	movw	r3, #1715	; 0x6b3
    e076:	4a1b      	ldr	r2, [pc, #108]	; (e0e4 <conn_cleanup+0xbc>)
    e078:	491b      	ldr	r1, [pc, #108]	; (e0e8 <conn_cleanup+0xc0>)
    e07a:	481c      	ldr	r0, [pc, #112]	; (e0ec <conn_cleanup+0xc4>)
    e07c:	f00a f85a 	bl	18134 <printk>
    e080:	4040      	eors	r0, r0
    e082:	f380 8811 	msr	BASEPRI, r0
    e086:	f04f 0003 	mov.w	r0, #3
    e08a:	df02      	svc	2
}
    e08c:	b002      	add	sp, #8
    e08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rx = hdr->link->mem;
    e092:	6808      	ldr	r0, [r1, #0]
    e094:	6847      	ldr	r7, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e096:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    e098:	f7fe f99a 	bl	c3d0 <ll_rx_put>
		rx = hdr->link->mem;
    e09c:	4639      	mov	r1, r7
    e09e:	e7d3      	b.n	e048 <conn_cleanup+0x20>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    e0a0:	4601      	mov	r1, r0
    e0a2:	4620      	mov	r0, r4
    e0a4:	f00c fd2f 	bl	1ab06 <tx_ull_dequeue>
    e0a8:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
    e0aa:	4638      	mov	r0, r7
    e0ac:	f00c f9d4 	bl	1a458 <mem_acquire>
		LL_ASSERT(link);
    e0b0:	4605      	mov	r5, r0
    e0b2:	b960      	cbnz	r0, e0ce <conn_cleanup+0xa6>
    e0b4:	f240 63bf 	movw	r3, #1727	; 0x6bf
    e0b8:	4642      	mov	r2, r8
    e0ba:	4649      	mov	r1, r9
    e0bc:	480b      	ldr	r0, [pc, #44]	; (e0ec <conn_cleanup+0xc4>)
    e0be:	f00a f839 	bl	18134 <printk>
    e0c2:	4040      	eors	r0, r0
    e0c4:	f380 8811 	msr	BASEPRI, r0
    e0c8:	f04f 0003 	mov.w	r0, #3
    e0cc:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    e0ce:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    e0d2:	4651      	mov	r1, sl
    e0d4:	4628      	mov	r0, r5
    e0d6:	f00c fa1d 	bl	1a514 <memq_enqueue>
    e0da:	e7bb      	b.n	e054 <conn_cleanup+0x2c>
    e0dc:	20001184 	.word	0x20001184
    e0e0:	0000dfc9 	.word	0x0000dfc9
    e0e4:	00020ce6 	.word	0x00020ce6
    e0e8:	00020c45 	.word	0x00020c45
    e0ec:	0001ff46 	.word	0x0001ff46
    e0f0:	00020dbb 	.word	0x00020dbb

0000e0f4 <tx_lll_flush>:
{
    e0f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
    e0f8:	4606      	mov	r6, r0
{
    e0fa:	4607      	mov	r7, r0
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
    e0fc:	f856 5b4c 	ldr.w	r5, [r6], #76
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    e100:	4c2e      	ldr	r4, [pc, #184]	; (e1bc <tx_lll_flush+0xc8>)
	lll_conn_flush(lll);
    e102:	f00c ffc7 	bl	1b094 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    e106:	aa01      	add	r2, sp, #4
    e108:	4631      	mov	r1, r6
    e10a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    e10c:	f00c fa11 	bl	1a532 <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e110:	f104 0804 	add.w	r8, r4, #4
	while (link) {
    e114:	b9f0      	cbnz	r0, e154 <tx_lll_flush+0x60>
	LL_ASSERT(rx->hdr.link);
    e116:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
	rx = (void *)&conn->llcp_terminate.node_rx;
    e11a:	f505 7496 	add.w	r4, r5, #300	; 0x12c
	LL_ASSERT(rx->hdr.link);
    e11e:	b963      	cbnz	r3, e13a <tx_lll_flush+0x46>
    e120:	f240 63ea 	movw	r3, #1770	; 0x6ea
    e124:	4a26      	ldr	r2, [pc, #152]	; (e1c0 <tx_lll_flush+0xcc>)
    e126:	4927      	ldr	r1, [pc, #156]	; (e1c4 <tx_lll_flush+0xd0>)
    e128:	4827      	ldr	r0, [pc, #156]	; (e1c8 <tx_lll_flush+0xd4>)
    e12a:	f00a f803 	bl	18134 <printk>
    e12e:	4040      	eors	r0, r0
    e130:	f380 8811 	msr	BASEPRI, r0
    e134:	f04f 0003 	mov.w	r0, #3
    e138:	df02      	svc	2
	rx->hdr.link = NULL;
    e13a:	2300      	movs	r3, #0
	link = rx->hdr.link;
    e13c:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
	rx->hdr.link = NULL;
    e140:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
	ull_rx_put(link, rx);
    e144:	4621      	mov	r1, r4
    e146:	f7fe fa63 	bl	c610 <ull_rx_put>
	ull_rx_sched();
    e14a:	f7fe fa71 	bl	c630 <ull_rx_sched>
}
    e14e:	b002      	add	sp, #8
    e150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    e154:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
    e156:	f894 e001 	ldrb.w	lr, [r4, #1]
    e15a:	f894 c002 	ldrb.w	ip, [r4, #2]
    e15e:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
    e160:	1c53      	adds	r3, r2, #1
    e162:	b2db      	uxtb	r3, r3
		last = 0U;
    e164:	459e      	cmp	lr, r3
    e166:	bf08      	it	eq
    e168:	2300      	moveq	r3, #0
	if (last == first) {
    e16a:	459c      	cmp	ip, r3
    e16c:	d004      	beq.n	e178 <tx_lll_flush+0x84>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e16e:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
    e172:	eb18 0c02 	adds.w	ip, r8, r2
    e176:	d10f      	bne.n	e198 <tx_lll_flush+0xa4>
    e178:	f240 63d6 	movw	r3, #1750	; 0x6d6
    e17c:	4a10      	ldr	r2, [pc, #64]	; (e1c0 <tx_lll_flush+0xcc>)
    e17e:	4913      	ldr	r1, [pc, #76]	; (e1cc <tx_lll_flush+0xd8>)
    e180:	4811      	ldr	r0, [pc, #68]	; (e1c8 <tx_lll_flush+0xd4>)
    e182:	f009 ffd7 	bl	18134 <printk>
    e186:	4040      	eors	r0, r0
    e188:	f380 8811 	msr	BASEPRI, r0
    e18c:	f04f 0003 	mov.w	r0, #3
    e190:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
    e192:	2300      	movs	r3, #0
    e194:	801b      	strh	r3, [r3, #0]
    e196:	deff      	udf	#255	; 0xff
    e198:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e19c:	f828 1002 	strh.w	r1, [r8, r2]
		lll_tx->node = tx;
    e1a0:	9901      	ldr	r1, [sp, #4]
    e1a2:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    e1a6:	680a      	ldr	r2, [r1, #0]
    e1a8:	6002      	str	r2, [r0, #0]
		tx->next = link;
    e1aa:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    e1ac:	aa01      	add	r2, sp, #4
	*last = idx; /* Commit: Update write index */
    e1ae:	70e3      	strb	r3, [r4, #3]
    e1b0:	4631      	mov	r1, r6
    e1b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    e1b4:	f00c f9bd 	bl	1a532 <memq_dequeue>
    e1b8:	e7ac      	b.n	e114 <tx_lll_flush+0x20>
    e1ba:	bf00      	nop
    e1bc:	2000ce60 	.word	0x2000ce60
    e1c0:	00020ce6 	.word	0x00020ce6
    e1c4:	00020db3 	.word	0x00020db3
    e1c8:	0001ff46 	.word	0x0001ff46
    e1cc:	00020d32 	.word	0x00020d32

0000e1d0 <ctrl_tx_pause_enqueue>:
{
    e1d0:	b538      	push	{r3, r4, r5, lr}
    e1d2:	460d      	mov	r5, r1
    e1d4:	e9d0 316c 	ldrd	r3, r1, [r0, #432]	; 0x1b0
    e1d8:	4604      	mov	r4, r0
	if (
    e1da:	2b00      	cmp	r3, #0
    e1dc:	d030      	beq.n	e240 <ctrl_tx_pause_enqueue+0x70>
	    !conn->llcp_enc.pause_tx &&
    e1de:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
	    conn->tx_head &&
    e1e2:	0780      	lsls	r0, r0, #30
    e1e4:	d42c      	bmi.n	e240 <ctrl_tx_pause_enqueue+0x70>
	    !conn->llcp_phy.pause_tx &&
    e1e6:	f894 01ab 	ldrb.w	r0, [r4, #427]	; 0x1ab
    e1ea:	07c0      	lsls	r0, r0, #31
    e1ec:	d428      	bmi.n	e240 <ctrl_tx_pause_enqueue+0x70>
		if (conn->tx_head == conn->tx_data) {
    e1ee:	f8d4 01bc 	ldr.w	r0, [r4, #444]	; 0x1bc
    e1f2:	4283      	cmp	r3, r0
			conn->tx_data = conn->tx_data->next;
    e1f4:	bf04      	itt	eq
    e1f6:	6818      	ldreq	r0, [r3, #0]
    e1f8:	f8c4 01bc 	streq.w	r0, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    e1fc:	b961      	cbnz	r1, e218 <ctrl_tx_pause_enqueue+0x48>
			tx->next = conn->tx_head->next;
    e1fe:	6819      	ldr	r1, [r3, #0]
    e200:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    e202:	601d      	str	r5, [r3, #0]
			if (!pause) {
    e204:	b91a      	cbnz	r2, e20e <ctrl_tx_pause_enqueue+0x3e>
				conn->tx_ctrl = tx;
    e206:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
	conn->tx_ctrl_last = tx;
    e20a:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    e20e:	682b      	ldr	r3, [r5, #0]
    e210:	b90b      	cbnz	r3, e216 <ctrl_tx_pause_enqueue+0x46>
		conn->tx_data_last = tx;
    e212:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
    e216:	bd38      	pop	{r3, r4, r5, pc}
			LL_ASSERT(!pause);
    e218:	b162      	cbz	r2, e234 <ctrl_tx_pause_enqueue+0x64>
    e21a:	f240 7345 	movw	r3, #1861	; 0x745
			LL_ASSERT(!pause);
    e21e:	4a0d      	ldr	r2, [pc, #52]	; (e254 <ctrl_tx_pause_enqueue+0x84>)
    e220:	490d      	ldr	r1, [pc, #52]	; (e258 <ctrl_tx_pause_enqueue+0x88>)
    e222:	480e      	ldr	r0, [pc, #56]	; (e25c <ctrl_tx_pause_enqueue+0x8c>)
    e224:	f009 ff86 	bl	18134 <printk>
    e228:	4040      	eors	r0, r0
    e22a:	f380 8811 	msr	BASEPRI, r0
    e22e:	f04f 0003 	mov.w	r0, #3
    e232:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
    e234:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    e238:	681a      	ldr	r2, [r3, #0]
    e23a:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    e23c:	601d      	str	r5, [r3, #0]
    e23e:	e7e4      	b.n	e20a <ctrl_tx_pause_enqueue+0x3a>
		if (!conn->tx_ctrl) {
    e240:	b919      	cbnz	r1, e24a <ctrl_tx_pause_enqueue+0x7a>
			tx->next = conn->tx_head;
    e242:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    e244:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
    e248:	e7dc      	b.n	e204 <ctrl_tx_pause_enqueue+0x34>
			LL_ASSERT(!pause);
    e24a:	2a00      	cmp	r2, #0
    e24c:	d0f2      	beq.n	e234 <ctrl_tx_pause_enqueue+0x64>
    e24e:	f240 7357 	movw	r3, #1879	; 0x757
    e252:	e7e4      	b.n	e21e <ctrl_tx_pause_enqueue+0x4e>
    e254:	00020ce6 	.word	0x00020ce6
    e258:	00020c72 	.word	0x00020c72
    e25c:	0001ff46 	.word	0x0001ff46

0000e260 <feature_rsp_send.isra.15>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e262:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e264:	4820      	ldr	r0, [pc, #128]	; (e2e8 <feature_rsp_send.isra.15+0x88>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    e266:	460d      	mov	r5, r1
    e268:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e26a:	f00c f8f5 	bl	1a458 <mem_acquire>
	if (!tx) {
    e26e:	4604      	mov	r4, r0
    e270:	b3b8      	cbz	r0, e2e2 <feature_rsp_send.isra.15+0x82>
	       (features[1] << 8) | (features[2] << 16);
    e272:	79bb      	ldrb	r3, [r7, #6]
    e274:	797a      	ldrb	r2, [r7, #5]
    e276:	041b      	lsls	r3, r3, #16
    e278:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    e27c:	793a      	ldrb	r2, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
    e27e:	4313      	orrs	r3, r2
    e280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    e284:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_feature.features &= feat_get(&req->features[0]);
    e288:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
    e28c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    e290:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features &= feat_get(&req->features[0]);
    e294:	4013      	ands	r3, r2
    e296:	f3c3 0310 	ubfx	r3, r3, #0, #17
    e29a:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	conn->common.fex_valid = 1U;
    e29e:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
    e2a2:	f043 0301 	orr.w	r3, r3, #1
    e2a6:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2aa:	7903      	ldrb	r3, [r0, #4]
    e2ac:	f043 0303 	orr.w	r3, r3, #3
    e2b0:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    e2b2:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    e2b4:	2309      	movs	r3, #9
    e2b6:	7143      	strb	r3, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    e2b8:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    e2ba:	2100      	movs	r1, #0
    e2bc:	4410      	add	r0, r2
    e2be:	f00a fce6 	bl	18c8e <memset>
	sys_put_le24(conn->llcp_feature.features,
    e2c2:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
	dst[0] = val;
    e2c6:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
    e2c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    e2cc:	0c1b      	lsrs	r3, r3, #16
    e2ce:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, tx);
    e2d0:	4630      	mov	r0, r6
	dst[1] = val >> 8;
    e2d2:	7262      	strb	r2, [r4, #9]
    e2d4:	4621      	mov	r1, r4
    e2d6:	f00c fc49 	bl	1ab6c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e2da:	2303      	movs	r3, #3
    e2dc:	702b      	strb	r3, [r5, #0]
	return 0;
    e2de:	2000      	movs	r0, #0
}
    e2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    e2e2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e2e6:	e7fb      	b.n	e2e0 <feature_rsp_send.isra.15+0x80>
    e2e8:	20001100 	.word	0x20001100

0000e2ec <reject_ext_ind_send.isra.9>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    e2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2f0:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e2f2:	480e      	ldr	r0, [pc, #56]	; (e32c <reject_ext_ind_send.isra.9+0x40>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    e2f4:	460d      	mov	r5, r1
    e2f6:	4690      	mov	r8, r2
    e2f8:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e2fa:	f00c f8ad 	bl	1a458 <mem_acquire>
	if (!tx) {
    e2fe:	4601      	mov	r1, r0
    e300:	b188      	cbz	r0, e326 <reject_ext_ind_send.isra.9+0x3a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e302:	7900      	ldrb	r0, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    e304:	f881 8008 	strb.w	r8, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e308:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    e30c:	2403      	movs	r4, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    e30e:	2311      	movs	r3, #17
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e310:	7108      	strb	r0, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    e312:	714c      	strb	r4, [r1, #5]
	ctrl_tx_enqueue(conn, tx);
    e314:	4630      	mov	r0, r6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    e316:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    e318:	724f      	strb	r7, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
    e31a:	f00c fc61 	bl	1abe0 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e31e:	702c      	strb	r4, [r5, #0]
	return 0;
    e320:	2000      	movs	r0, #0
}
    e322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
    e326:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e32a:	e7fa      	b.n	e322 <reject_ext_ind_send.isra.9+0x36>
    e32c:	20001100 	.word	0x20001100

0000e330 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    e330:	4801      	ldr	r0, [pc, #4]	; (e338 <ll_conn_acquire+0x8>)
    e332:	f00c b891 	b.w	1a458 <mem_acquire>
    e336:	bf00      	nop
    e338:	20000eb4 	.word	0x20000eb4

0000e33c <ll_conn_release>:
	mem_release(conn, &conn_free);
    e33c:	4901      	ldr	r1, [pc, #4]	; (e344 <ll_conn_release+0x8>)
    e33e:	f00c b8a4 	b.w	1a48a <mem_release>
    e342:	bf00      	nop
    e344:	20000eb4 	.word	0x20000eb4

0000e348 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    e348:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    e34c:	4901      	ldr	r1, [pc, #4]	; (e354 <ll_conn_handle_get+0xc>)
    e34e:	f00c b8b4 	b.w	1a4ba <mem_index_get>
    e352:	bf00      	nop
    e354:	20000eb8 	.word	0x20000eb8

0000e358 <ll_conn_get>:
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e358:	4602      	mov	r2, r0
    e35a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e35e:	4801      	ldr	r0, [pc, #4]	; (e364 <ll_conn_get+0xc>)
    e360:	f00c b8a8 	b.w	1a4b4 <mem_get>
    e364:	20000eb8 	.word	0x20000eb8

0000e368 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    e368:	4801      	ldr	r0, [pc, #4]	; (e370 <ll_tx_mem_acquire+0x8>)
    e36a:	f00c b875 	b.w	1a458 <mem_acquire>
    e36e:	bf00      	nop
    e370:	20001090 	.word	0x20001090

0000e374 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    e374:	4901      	ldr	r1, [pc, #4]	; (e37c <ll_tx_mem_release+0x8>)
    e376:	f00c b888 	b.w	1a48a <mem_release>
    e37a:	bf00      	nop
    e37c:	20001090 	.word	0x20001090

0000e380 <ll_tx_mem_enqueue>:
{
    e380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e384:	b088      	sub	sp, #32
    e386:	4606      	mov	r6, r0
    e388:	4688      	mov	r8, r1
	conn = ll_connected_get(handle);
    e38a:	f00c fc3c 	bl	1ac06 <ll_connected_get>
	if (!conn) {
    e38e:	2800      	cmp	r0, #0
    e390:	d049      	beq.n	e426 <ll_tx_mem_enqueue+0xa6>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    e392:	4c28      	ldr	r4, [pc, #160]	; (e434 <ll_tx_mem_enqueue+0xb4>)
    e394:	78e5      	ldrb	r5, [r4, #3]
	if (last == count) {
    e396:	7867      	ldrb	r7, [r4, #1]
    e398:	78a2      	ldrb	r2, [r4, #2]
    e39a:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
    e39c:	1c6b      	adds	r3, r5, #1
    e39e:	b2db      	uxtb	r3, r3
		last = 0U;
    e3a0:	429f      	cmp	r7, r3
    e3a2:	bf08      	it	eq
    e3a4:	2300      	moveq	r3, #0
	if (last == first) {
    e3a6:	429a      	cmp	r2, r3
    e3a8:	d040      	beq.n	e42c <ll_tx_mem_enqueue+0xac>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e3aa:	1d22      	adds	r2, r4, #4
    e3ac:	fb15 f501 	smulbb	r5, r5, r1
	if (!lll_tx) {
    e3b0:	1957      	adds	r7, r2, r5
    e3b2:	d03b      	beq.n	e42c <ll_tx_mem_enqueue+0xac>
	lll_tx->handle = handle;
    e3b4:	5356      	strh	r6, [r2, r5]
	*last = idx; /* Commit: Update write index */
    e3b6:	70e3      	strb	r3, [r4, #3]
	if (conn->lll.role && conn->lll.latency_event &&
    e3b8:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	lll_tx->node = tx;
    e3bc:	f8c7 8004 	str.w	r8, [r7, #4]
	if (conn->lll.role && conn->lll.latency_event &&
    e3c0:	2b00      	cmp	r3, #0
    e3c2:	db03      	blt.n	e3cc <ll_tx_mem_enqueue+0x4c>
	return 0;
    e3c4:	2000      	movs	r0, #0
}
    e3c6:	b008      	add	sp, #32
    e3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->lll.role && conn->lll.latency_event &&
    e3cc:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	d0f8      	beq.n	e3c4 <ll_tx_mem_enqueue+0x44>
	    !conn->slave.latency_cancel) {
    e3d2:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->lll.role && conn->lll.latency_event &&
    e3d6:	f013 0402 	ands.w	r4, r3, #2
    e3da:	d1f3      	bne.n	e3c4 <ll_tx_mem_enqueue+0x44>
		conn->slave.latency_cancel = 1U;
    e3dc:	f043 0302 	orr.w	r3, r3, #2
    e3e0:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
    e3e4:	4b14      	ldr	r3, [pc, #80]	; (e438 <ll_tx_mem_enqueue+0xb8>)
    e3e6:	9006      	str	r0, [sp, #24]
    e3e8:	e9cd 4304 	strd	r4, r3, [sp, #16]
				      (TICKER_ID_CONN_BASE + handle),
    e3ec:	1cf2      	adds	r2, r6, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
    e3ee:	2301      	movs	r3, #1
    e3f0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e3f4:	e9cd 4400 	strd	r4, r4, [sp]
    e3f8:	4623      	mov	r3, r4
    e3fa:	b2d2      	uxtb	r2, r2
    e3fc:	2103      	movs	r1, #3
    e3fe:	4620      	mov	r0, r4
    e400:	f7fc f87a 	bl	a4f8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e404:	f030 0302 	bics.w	r3, r0, #2
    e408:	d0dc      	beq.n	e3c4 <ll_tx_mem_enqueue+0x44>
    e40a:	f240 1301 	movw	r3, #257	; 0x101
    e40e:	4a0b      	ldr	r2, [pc, #44]	; (e43c <ll_tx_mem_enqueue+0xbc>)
    e410:	490b      	ldr	r1, [pc, #44]	; (e440 <ll_tx_mem_enqueue+0xc0>)
    e412:	480c      	ldr	r0, [pc, #48]	; (e444 <ll_tx_mem_enqueue+0xc4>)
    e414:	f009 fe8e 	bl	18134 <printk>
    e418:	4040      	eors	r0, r0
    e41a:	f380 8811 	msr	BASEPRI, r0
    e41e:	f04f 0003 	mov.w	r0, #3
    e422:	df02      	svc	2
    e424:	e7ce      	b.n	e3c4 <ll_tx_mem_enqueue+0x44>
		return -EINVAL;
    e426:	f06f 0015 	mvn.w	r0, #21
    e42a:	e7cc      	b.n	e3c6 <ll_tx_mem_enqueue+0x46>
		return -ENOBUFS;
    e42c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e430:	e7c9      	b.n	e3c6 <ll_tx_mem_enqueue+0x46>
    e432:	bf00      	nop
    e434:	2000cea4 	.word	0x2000cea4
    e438:	0000de29 	.word	0x0000de29
    e43c:	00020ce6 	.word	0x00020ce6
    e440:	00020c45 	.word	0x00020c45
    e444:	0001ff46 	.word	0x0001ff46

0000e448 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    e448:	4b03      	ldr	r3, [pc, #12]	; (e458 <ll_length_default_get+0x10>)
    e44a:	881b      	ldrh	r3, [r3, #0]
    e44c:	8003      	strh	r3, [r0, #0]
	*max_tx_time = default_tx_time;
    e44e:	4b03      	ldr	r3, [pc, #12]	; (e45c <ll_length_default_get+0x14>)
    e450:	881b      	ldrh	r3, [r3, #0]
    e452:	800b      	strh	r3, [r1, #0]
}
    e454:	4770      	bx	lr
    e456:	bf00      	nop
    e458:	20005d1a 	.word	0x20005d1a
    e45c:	20005d1c 	.word	0x20005d1c

0000e460 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    e460:	4b02      	ldr	r3, [pc, #8]	; (e46c <ll_length_default_set+0xc>)
    e462:	8018      	strh	r0, [r3, #0]
	default_tx_time = max_tx_time;
    e464:	4b02      	ldr	r3, [pc, #8]	; (e470 <ll_length_default_set+0x10>)
}
    e466:	2000      	movs	r0, #0
	default_tx_time = max_tx_time;
    e468:	8019      	strh	r1, [r3, #0]
}
    e46a:	4770      	bx	lr
    e46c:	20005d1a 	.word	0x20005d1a
    e470:	20005d1c 	.word	0x20005d1c

0000e474 <ll_phy_default_set>:
	default_phy_tx = tx;
    e474:	4b02      	ldr	r3, [pc, #8]	; (e480 <ll_phy_default_set+0xc>)
    e476:	7018      	strb	r0, [r3, #0]
	default_phy_rx = rx;
    e478:	4b02      	ldr	r3, [pc, #8]	; (e484 <ll_phy_default_set+0x10>)
}
    e47a:	2000      	movs	r0, #0
	default_phy_rx = rx;
    e47c:	7019      	strb	r1, [r3, #0]
}
    e47e:	4770      	bx	lr
    e480:	2000a148 	.word	0x2000a148
    e484:	2000a147 	.word	0x2000a147

0000e488 <ull_conn_init>:
{
    e488:	b508      	push	{r3, lr}
    e48a:	4806      	ldr	r0, [pc, #24]	; (e4a4 <ull_conn_init+0x1c>)
    e48c:	f008 f9a2 	bl	167d4 <z_impl_device_get_binding>
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    e490:	4b05      	ldr	r3, [pc, #20]	; (e4a8 <ull_conn_init+0x20>)
    e492:	6018      	str	r0, [r3, #0]
	if (!entropy) {
    e494:	b118      	cbz	r0, e49e <ull_conn_init+0x16>
}
    e496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = init_reset();
    e49a:	f7ff bce3 	b.w	de64 <init_reset>
}
    e49e:	f06f 0012 	mvn.w	r0, #18
    e4a2:	bd08      	pop	{r3, pc}
    e4a4:	000208ac 	.word	0x000208ac
    e4a8:	20001084 	.word	0x20001084

0000e4ac <ull_conn_reset>:
{
    e4ac:	b530      	push	{r4, r5, lr}
    e4ae:	b085      	sub	sp, #20
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    e4b0:	2302      	movs	r3, #2
	conn = ll_conn_get(handle);
    e4b2:	2000      	movs	r0, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    e4b4:	9303      	str	r3, [sp, #12]
	conn = ll_conn_get(handle);
    e4b6:	f7ff ff4f 	bl	e358 <ll_conn_get>
    e4ba:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
    e4bc:	f7fe f806 	bl	c4cc <ull_disable_mark>
	LL_ASSERT(mark == conn);
    e4c0:	4284      	cmp	r4, r0
    e4c2:	d00c      	beq.n	e4de <ull_conn_reset+0x32>
    e4c4:	f240 6377 	movw	r3, #1655	; 0x677
    e4c8:	4a29      	ldr	r2, [pc, #164]	; (e570 <ull_conn_reset+0xc4>)
    e4ca:	492a      	ldr	r1, [pc, #168]	; (e574 <ull_conn_reset+0xc8>)
    e4cc:	482a      	ldr	r0, [pc, #168]	; (e578 <ull_conn_reset+0xcc>)
    e4ce:	f009 fe31 	bl	18134 <printk>
    e4d2:	4040      	eors	r0, r0
    e4d4:	f380 8811 	msr	BASEPRI, r0
    e4d8:	f04f 0003 	mov.w	r0, #3
    e4dc:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e4de:	ad03      	add	r5, sp, #12
    e4e0:	2203      	movs	r2, #3
    e4e2:	4611      	mov	r1, r2
    e4e4:	9500      	str	r5, [sp, #0]
    e4e6:	4b25      	ldr	r3, [pc, #148]	; (e57c <ull_conn_reset+0xd0>)
    e4e8:	2000      	movs	r0, #0
    e4ea:	f7fc f84d 	bl	a588 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    e4ee:	4629      	mov	r1, r5
    e4f0:	f7fd ffe0 	bl	c4b4 <ull_ticker_status_take>
	if (!ret) {
    e4f4:	b988      	cbnz	r0, e51a <ull_conn_reset+0x6e>
		ret = ull_disable(&conn->lll);
    e4f6:	f104 001c 	add.w	r0, r4, #28
    e4fa:	f7fe f81f 	bl	c53c <ull_disable>
		LL_ASSERT(!ret);
    e4fe:	b160      	cbz	r0, e51a <ull_conn_reset+0x6e>
    e500:	f44f 63d0 	mov.w	r3, #1664	; 0x680
    e504:	4a1a      	ldr	r2, [pc, #104]	; (e570 <ull_conn_reset+0xc4>)
    e506:	491e      	ldr	r1, [pc, #120]	; (e580 <ull_conn_reset+0xd4>)
    e508:	481b      	ldr	r0, [pc, #108]	; (e578 <ull_conn_reset+0xcc>)
    e50a:	f009 fe13 	bl	18134 <printk>
    e50e:	4040      	eors	r0, r0
    e510:	f380 8811 	msr	BASEPRI, r0
    e514:	f04f 0003 	mov.w	r0, #3
    e518:	df02      	svc	2
	conn->lll.link_tx_free = NULL;
    e51a:	2300      	movs	r3, #0
    e51c:	67a3      	str	r3, [r4, #120]	; 0x78
	mark = ull_disable_unmark(conn);
    e51e:	4620      	mov	r0, r4
    e520:	f7fd ffdc 	bl	c4dc <ull_disable_unmark>
	LL_ASSERT(mark == conn);
    e524:	4284      	cmp	r4, r0
    e526:	d00c      	beq.n	e542 <ull_conn_reset+0x96>
    e528:	f240 6386 	movw	r3, #1670	; 0x686
    e52c:	4a10      	ldr	r2, [pc, #64]	; (e570 <ull_conn_reset+0xc4>)
    e52e:	4911      	ldr	r1, [pc, #68]	; (e574 <ull_conn_reset+0xc8>)
    e530:	4811      	ldr	r0, [pc, #68]	; (e578 <ull_conn_reset+0xcc>)
    e532:	f009 fdff 	bl	18134 <printk>
    e536:	4040      	eors	r0, r0
    e538:	f380 8811 	msr	BASEPRI, r0
    e53c:	f04f 0003 	mov.w	r0, #3
    e540:	df02      	svc	2
	data_chan_map[0] = 0xFF;
    e542:	4b10      	ldr	r3, [pc, #64]	; (e584 <ull_conn_reset+0xd8>)
    e544:	22ff      	movs	r2, #255	; 0xff
    e546:	701a      	strb	r2, [r3, #0]
	data_chan_map[1] = 0xFF;
    e548:	705a      	strb	r2, [r3, #1]
	data_chan_map[2] = 0xFF;
    e54a:	709a      	strb	r2, [r3, #2]
	data_chan_map[3] = 0xFF;
    e54c:	70da      	strb	r2, [r3, #3]
	data_chan_map[4] = 0x1F;
    e54e:	221f      	movs	r2, #31
    e550:	711a      	strb	r2, [r3, #4]
	data_chan_count = 37U;
    e552:	4b0d      	ldr	r3, [pc, #52]	; (e588 <ull_conn_reset+0xdc>)
    e554:	2225      	movs	r2, #37	; 0x25
    e556:	701a      	strb	r2, [r3, #0]
	MFIFO_INIT(conn_tx);
    e558:	4a0c      	ldr	r2, [pc, #48]	; (e58c <ull_conn_reset+0xe0>)
    e55a:	2300      	movs	r3, #0
    e55c:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
    e55e:	4a0c      	ldr	r2, [pc, #48]	; (e590 <ull_conn_reset+0xe4>)
    e560:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
    e562:	4a0c      	ldr	r2, [pc, #48]	; (e594 <ull_conn_reset+0xe8>)
    e564:	6013      	str	r3, [r2, #0]
	err = init_reset();
    e566:	f7ff fc7d 	bl	de64 <init_reset>
}
    e56a:	b005      	add	sp, #20
    e56c:	bd30      	pop	{r4, r5, pc}
    e56e:	bf00      	nop
    e570:	00020ce6 	.word	0x00020ce6
    e574:	00020dc0 	.word	0x00020dc0
    e578:	0001ff46 	.word	0x0001ff46
    e57c:	0000c4a9 	.word	0x0000c4a9
    e580:	000208c5 	.word	0x000208c5
    e584:	2000d107 	.word	0x2000d107
    e588:	2000d106 	.word	0x2000d106
    e58c:	2000cea4 	.word	0x2000cea4
    e590:	2000ce60 	.word	0x2000ce60
    e594:	20001080 	.word	0x20001080

0000e598 <ull_conn_default_tx_octets_get>:
}
    e598:	4b01      	ldr	r3, [pc, #4]	; (e5a0 <ull_conn_default_tx_octets_get+0x8>)
    e59a:	8818      	ldrh	r0, [r3, #0]
    e59c:	4770      	bx	lr
    e59e:	bf00      	nop
    e5a0:	20005d1a 	.word	0x20005d1a

0000e5a4 <ull_conn_default_tx_time_get>:
}
    e5a4:	4b01      	ldr	r3, [pc, #4]	; (e5ac <ull_conn_default_tx_time_get+0x8>)
    e5a6:	8818      	ldrh	r0, [r3, #0]
    e5a8:	4770      	bx	lr
    e5aa:	bf00      	nop
    e5ac:	20005d1c 	.word	0x20005d1c

0000e5b0 <ull_conn_default_phy_tx_get>:
}
    e5b0:	4b01      	ldr	r3, [pc, #4]	; (e5b8 <ull_conn_default_phy_tx_get+0x8>)
    e5b2:	7818      	ldrb	r0, [r3, #0]
    e5b4:	4770      	bx	lr
    e5b6:	bf00      	nop
    e5b8:	2000a148 	.word	0x2000a148

0000e5bc <ull_conn_default_phy_rx_get>:
}
    e5bc:	4b01      	ldr	r3, [pc, #4]	; (e5c4 <ull_conn_default_phy_rx_get+0x8>)
    e5be:	7818      	ldrb	r0, [r3, #0]
    e5c0:	4770      	bx	lr
    e5c2:	bf00      	nop
    e5c4:	2000a147 	.word	0x2000a147

0000e5c8 <ull_conn_setup>:
	lll = *((struct lll_conn **)((u8_t *)ftr->param +
    e5c8:	688b      	ldr	r3, [r1, #8]
    e5ca:	689b      	ldr	r3, [r3, #8]
{
    e5cc:	b510      	push	{r4, lr}
	switch (lll->role) {
    e5ce:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
    e5d2:	09e4      	lsrs	r4, r4, #7
{
    e5d4:	460a      	mov	r2, r1
	switch (lll->role) {
    e5d6:	d004      	beq.n	e5e2 <ull_conn_setup+0x1a>
		ull_slave_setup(link, rx, ftr, lll);
    e5d8:	3208      	adds	r2, #8
}
    e5da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
    e5de:	f7f3 ba2b 	b.w	1a38 <ull_slave_setup>
		LL_ASSERT(0);
    e5e2:	f240 23c2 	movw	r3, #706	; 0x2c2
    e5e6:	4a06      	ldr	r2, [pc, #24]	; (e600 <ull_conn_setup+0x38>)
    e5e8:	4906      	ldr	r1, [pc, #24]	; (e604 <ull_conn_setup+0x3c>)
    e5ea:	4807      	ldr	r0, [pc, #28]	; (e608 <ull_conn_setup+0x40>)
    e5ec:	f009 fda2 	bl	18134 <printk>
    e5f0:	4040      	eors	r0, r0
    e5f2:	f380 8811 	msr	BASEPRI, r0
    e5f6:	f04f 0003 	mov.w	r0, #3
    e5fa:	df02      	svc	2
}
    e5fc:	bd10      	pop	{r4, pc}
    e5fe:	bf00      	nop
    e600:	00020ce6 	.word	0x00020ce6
    e604:	0002195a 	.word	0x0002195a
    e608:	0001ff46 	.word	0x0001ff46

0000e60c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    e60c:	680b      	ldr	r3, [r1, #0]
{
    e60e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e612:	4680      	mov	r8, r0
	conn = ll_connected_get((*rx)->hdr.handle);
    e614:	88d8      	ldrh	r0, [r3, #6]
{
    e616:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
    e618:	f00c faf5 	bl	1ac06 <ll_connected_get>
	if (!conn) {
    e61c:	6835      	ldr	r5, [r6, #0]
    e61e:	4604      	mov	r4, r0
    e620:	b910      	cbnz	r0, e628 <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e622:	2303      	movs	r3, #3
    e624:	712b      	strb	r3, [r5, #4]
	return 0;
    e626:	e1a5      	b.n	e974 <ull_conn_rx+0x368>
	switch (pdu_rx->ll_id) {
    e628:	f895 3020 	ldrb.w	r3, [r5, #32]
    e62c:	f890 7152 	ldrb.w	r7, [r0, #338]	; 0x152
    e630:	f3c3 0301 	ubfx	r3, r3, #0, #2
    e634:	b2d9      	uxtb	r1, r3
    e636:	b25b      	sxtb	r3, r3
    e638:	f007 0201 	and.w	r2, r7, #1
    e63c:	2b00      	cmp	r3, #0
    e63e:	f001 820e 	beq.w	fa5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffe>
    e642:	2902      	cmp	r1, #2
    e644:	f241 8206 	bls.w	fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	u8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
    e648:	f895 9023 	ldrb.w	r9, [r5, #35]	; 0x23

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    e64c:	b14a      	cbz	r2, e662 <ull_conn_rx+0x56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    e64e:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
    e652:	2a00      	cmp	r2, #0
    e654:	f007 0304 	and.w	r3, r7, #4
    e658:	db3d      	blt.n	e6d6 <ull_conn_rx+0xca>
	return (!conn->lll.role &&
    e65a:	bb23      	cbnz	r3, e6a6 <ull_conn_rx+0x9a>
		((!conn->llcp_enc.refresh &&
    e65c:	f1b9 0f02 	cmp.w	r9, #2
    e660:	d132      	bne.n	e6c8 <ull_conn_rx+0xbc>
	pdu_rx = (void *)(*rx)->pdu;
    e662:	f105 0a20 	add.w	sl, r5, #32

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
    e666:	f1b9 0f19 	cmp.w	r9, #25
    e66a:	f201 81e0 	bhi.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
    e66e:	e8df f019 	tbh	[pc, r9, lsl #1]
    e672:	008e      	.short	0x008e
    e674:	003a0108 	.word	0x003a0108
    e678:	0183013c 	.word	0x0183013c
    e67c:	01cd01a8 	.word	0x01cd01a8
    e680:	0206060f 	.word	0x0206060f
    e684:	02500224 	.word	0x02500224
    e688:	02a50281 	.word	0x02a50281
    e68c:	021b02fb 	.word	0x021b02fb
    e690:	049f030e 	.word	0x049f030e
    e694:	05d8005d 	.word	0x05d8005d
    e698:	06d705f4 	.word	0x06d705f4
    e69c:	07c906d7 	.word	0x07c906d7
    e6a0:	08e6089d 	.word	0x08e6089d
    e6a4:	09a8      	.short	0x09a8
		 (conn->llcp_enc.refresh &&
    e6a6:	f1a9 0302 	sub.w	r3, r9, #2
    e6aa:	b2db      	uxtb	r3, r3
    e6ac:	2b09      	cmp	r3, #9
    e6ae:	d80b      	bhi.n	e6c8 <ull_conn_rx+0xbc>
    e6b0:	f240 2205 	movw	r2, #517	; 0x205
    e6b4:	fa22 f303 	lsr.w	r3, r2, r3
    e6b8:	07da      	lsls	r2, r3, #31
    e6ba:	d4d2      	bmi.n	e662 <ull_conn_rx+0x56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    e6bc:	4bd1      	ldr	r3, [pc, #836]	; (ea04 <ull_conn_rx+0x3f8>)
    e6be:	fa23 f309 	lsr.w	r3, r3, r9
    e6c2:	07db      	lsls	r3, r3, #31
    e6c4:	d4cd      	bmi.n	e662 <ull_conn_rx+0x56>
    e6c6:	e002      	b.n	e6ce <ull_conn_rx+0xc2>
    e6c8:	f1b9 0f11 	cmp.w	r9, #17
    e6cc:	d9f6      	bls.n	e6bc <ull_conn_rx+0xb0>
			conn->llcp_terminate.reason_peer =
    e6ce:	233d      	movs	r3, #61	; 0x3d
    e6d0:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
    e6d4:	e171      	b.n	e9ba <ull_conn_rx+0x3ae>
	       (conn->lll.role &&
    e6d6:	b99b      	cbnz	r3, e700 <ull_conn_rx+0xf4>
		((!conn->llcp_enc.refresh &&
    e6d8:	f1b9 0f07 	cmp.w	r9, #7
    e6dc:	f000 85d8 	beq.w	f290 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x830>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    e6e0:	f1b9 0f02 	cmp.w	r9, #2
    e6e4:	d117      	bne.n	e716 <ull_conn_rx+0x10a>
		}
	}
	break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    e6e6:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    e6ea:	2002      	movs	r0, #2
    e6ec:	f7ff fb7e 	bl	ddec <pdu_len_cmp>
    e6f0:	2800      	cmp	r0, #0
    e6f2:	f001 819c 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
				 pdu_rx->len)) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		terminate_ind_recv(conn, *rx, pdu_rx);
    e6f6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
    e6fa:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e6fe:	e790      	b.n	e622 <ull_conn_rx+0x16>
		 (conn->llcp_enc.refresh &&
    e700:	f1b9 0f02 	cmp.w	r9, #2
    e704:	d0ef      	beq.n	e6e6 <ull_conn_rx+0xda>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    e706:	f1b9 0f0b 	cmp.w	r9, #11
    e70a:	f000 8233 	beq.w	eb74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    e70e:	f1b9 0f03 	cmp.w	r9, #3
    e712:	f000 80ea 	beq.w	e8ea <ull_conn_rx+0x2de>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    e716:	f1b9 0f06 	cmp.w	r9, #6
    e71a:	f000 8177 	beq.w	ea0c <ull_conn_rx+0x400>
    e71e:	f1b9 0f0d 	cmp.w	r9, #13
    e722:	f000 82a1 	beq.w	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    e726:	f1b9 0f11 	cmp.w	r9, #17
    e72a:	d1d0      	bne.n	e6ce <ull_conn_rx+0xc2>

		break;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	case PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    e72c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    e730:	2011      	movs	r0, #17
    e732:	f7ff fb5b 	bl	ddec <pdu_len_cmp>
    e736:	2800      	cmp	r0, #0
    e738:	f001 8179 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	switch (rej_ext_ind->reject_opcode) {
    e73c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    e740:	2b0f      	cmp	r3, #15
    e742:	f000 8501 	beq.w	f148 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e8>
    e746:	f200 84c5 	bhi.w	f0d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x674>
    e74a:	2b03      	cmp	r3, #3
    e74c:	f47f af69 	bne.w	e622 <ull_conn_rx+0x16>
		if ((conn->llcp_ack != conn->llcp_req) &&
    e750:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    e754:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    e758:	4293      	cmp	r3, r2
    e75a:	f43f af62 	beq.w	e622 <ull_conn_rx+0x16>
    e75e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    e762:	2b03      	cmp	r3, #3
    e764:	f47f af5d 	bne.w	e622 <ull_conn_rx+0x16>
	conn->llcp_enc.pause_rx = 0U;
    e768:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
    e76c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
    e770:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
    e774:	2000      	movs	r0, #0
	conn->llcp_enc.pause_rx = 0U;
    e776:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
    e77a:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e77e:	230d      	movs	r3, #13
    e780:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
    e784:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    e788:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	if (err) {
    e78c:	e1d5      	b.n	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
		if (!conn->lll.role ||
    e78e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e792:	2b00      	cmp	r3, #0
    e794:	f281 814b 	bge.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    e798:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    e79c:	2000      	movs	r0, #0
    e79e:	f7ff fb25 	bl	ddec <pdu_len_cmp>
		if (!conn->lll.role ||
    e7a2:	2800      	cmp	r0, #0
    e7a4:	f001 8143 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
    e7a8:	f8b5 202d 	ldrh.w	r2, [r5, #45]	; 0x2d
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
    e7ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e7ae:	1ad3      	subs	r3, r2, r3
    e7b0:	041f      	lsls	r7, r3, #16
    e7b2:	d505      	bpl.n	e7c0 <ull_conn_rx+0x1b4>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e7b4:	2303      	movs	r3, #3
    e7b6:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
    e7b8:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
    e7ba:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
    e7be:	e0d9      	b.n	e974 <ull_conn_rx+0x368>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e7c0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    e7c4:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
    e7c8:	1a5b      	subs	r3, r3, r1
    e7ca:	f003 0303 	and.w	r3, r3, #3
    e7ce:	2b02      	cmp	r3, #2
    e7d0:	d103      	bne.n	e7da <ull_conn_rx+0x1ce>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e7d2:	2303      	movs	r3, #3
    e7d4:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    e7d6:	232a      	movs	r3, #42	; 0x2a
    e7d8:	e7ef      	b.n	e7ba <ull_conn_rx+0x1ae>
	if (!conn_upd_curr) {
    e7da:	4b8b      	ldr	r3, [pc, #556]	; (ea08 <ull_conn_rx+0x3fc>)
    e7dc:	6819      	ldr	r1, [r3, #0]
    e7de:	b901      	cbnz	r1, e7e2 <ull_conn_rx+0x1d6>
		conn_upd_curr = conn;
    e7e0:	601c      	str	r4, [r3, #0]
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    e7e2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    e7e6:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
    e7ea:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
    e7ee:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e7f2:	434b      	muls	r3, r1
	conn->llcp_cu.win_offset_us =
    e7f4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
    e7f8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
    e7fc:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    e800:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
    e804:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
    e808:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    e80c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    e810:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
    e814:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    e818:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    e81c:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
	conn->llcp.conn_upd.instant = instant;
    e820:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    e824:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.timeout =
    e828:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    e82c:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
    e830:	f023 0307 	bic.w	r3, r3, #7
    e834:	f043 0304 	orr.w	r3, r3, #4
    e838:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp_cu.ack--;
    e83c:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
    e840:	3b01      	subs	r3, #1
    e842:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	link->mem = conn->llcp_rx;
    e846:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e84a:	f8c8 3004 	str.w	r3, [r8, #4]
	(*rx)->hdr.link = link;
    e84e:	6833      	ldr	r3, [r6, #0]
    e850:	f8c3 8000 	str.w	r8, [r3]
	conn->llcp_rx = *rx;
    e854:	6833      	ldr	r3, [r6, #0]
    e856:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
    e85a:	2300      	movs	r3, #0
    e85c:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e85e:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    e862:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    e866:	4293      	cmp	r3, r2
    e868:	d007      	beq.n	e87a <ull_conn_rx+0x26e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    e86a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e86e:	f003 0307 	and.w	r3, r3, #7
    e872:	2b04      	cmp	r3, #4
    e874:	d101      	bne.n	e87a <ull_conn_rx+0x26e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e876:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
    e87a:	2000      	movs	r0, #0
    e87c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		break;
    e880:	e15b      	b.n	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
		if (!conn->lll.role ||
    e882:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e886:	2b00      	cmp	r3, #0
    e888:	f281 80d1 	bge.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    e88c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    e890:	2001      	movs	r0, #1
    e892:	f7ff faab 	bl	ddec <pdu_len_cmp>
		if (!conn->lll.role ||
    e896:	2800      	cmp	r0, #0
    e898:	f001 80c9 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
    e89c:	f8b5 6029 	ldrh.w	r6, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    e8a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e8a2:	1af3      	subs	r3, r6, r3
    e8a4:	0418      	lsls	r0, r3, #16
    e8a6:	d485      	bmi.n	e7b4 <ull_conn_rx+0x1a8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e8a8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    e8ac:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    e8b0:	1a9b      	subs	r3, r3, r2
    e8b2:	f003 0303 	and.w	r3, r3, #3
    e8b6:	2b02      	cmp	r3, #2
    e8b8:	d08b      	beq.n	e7d2 <ull_conn_rx+0x1c6>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
    e8ba:	2205      	movs	r2, #5
    e8bc:	f105 0124 	add.w	r1, r5, #36	; 0x24
    e8c0:	f104 00ed 	add.w	r0, r4, #237	; 0xed
    e8c4:	f00a f9b9 	bl	18c3a <memcpy>
	conn->llcp.chan_map.initiate = 0U;
    e8c8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp.chan_map.instant = instant;
    e8cc:	f8a4 60f2 	strh.w	r6, [r4, #242]	; 0xf2
	conn->llcp.chan_map.initiate = 0U;
    e8d0:	f36f 0300 	bfc	r3, #0, #1
    e8d4:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
    e8d8:	2302      	movs	r3, #2
    e8da:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
    e8de:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    e8e2:	3b02      	subs	r3, #2
    e8e4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e8e8:	e69b      	b.n	e622 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
    e8ea:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e8ee:	2b00      	cmp	r3, #0
    e8f0:	f281 809d 	bge.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ, pdu_rx->len)) {
    e8f4:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    e8f8:	2003      	movs	r0, #3
    e8fa:	f7ff fa77 	bl	ddec <pdu_len_cmp>
		if (!conn->lll.role ||
    e8fe:	2800      	cmp	r0, #0
    e900:	f001 8095 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		memcpy(&conn->llcp_enc.rand[0],
    e904:	2208      	movs	r2, #8
    e906:	f105 0124 	add.w	r1, r5, #36	; 0x24
    e90a:	f204 1055 	addw	r0, r4, #341	; 0x155
    e90e:	f00a f994 	bl	18c3a <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
    e912:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    e916:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
    e91a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    e91e:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    e922:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    e926:	2201      	movs	r2, #1
    e928:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e92c:	6832      	ldr	r2, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    e92e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e932:	2303      	movs	r3, #3
    e934:	7113      	strb	r3, [r2, #4]
		conn->llcp_type = LLCP_ENCRYPTION;
    e936:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
    e93a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    e93e:	3b02      	subs	r3, #2
    e940:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
    e944:	2208      	movs	r2, #8
    e946:	f105 012e 	add.w	r1, r5, #46	; 0x2e
    e94a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
    e94e:	f00a f974 	bl	18c3a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
    e952:	2204      	movs	r2, #4
    e954:	f105 0136 	add.w	r1, r5, #54	; 0x36
    e958:	f104 0098 	add.w	r0, r4, #152	; 0x98
    e95c:	f00a f96d 	bl	18c3a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
    e960:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    e964:	f043 0301 	orr.w	r3, r3, #1
    e968:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
    e96c:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    e970:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
    e974:	2000      	movs	r0, #0
		break;
    e976:	e0e0      	b.n	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
		if (conn->lll.role ||
    e978:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e97c:	2b00      	cmp	r3, #0
    e97e:	f2c1 8056 	blt.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP, pdu_rx->len)) {
    e982:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    e986:	2004      	movs	r0, #4
    e988:	f7ff fa30 	bl	ddec <pdu_len_cmp>
		if (conn->lll.role ||
    e98c:	2800      	cmp	r0, #0
    e98e:	f001 804e 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		memcpy(&conn->llcp.encryption.skd[8],
    e992:	2208      	movs	r2, #8
    e994:	f105 0124 	add.w	r1, r5, #36	; 0x24
    e998:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    e99c:	f00a f94d 	bl	18c3a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
    e9a0:	2204      	movs	r2, #4
    e9a2:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    e9a6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    e9aa:	f00a f946 	bl	18c3a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
    e9ae:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    e9b2:	f043 0301 	orr.w	r3, r3, #1
    e9b6:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    e9ba:	6833      	ldr	r3, [r6, #0]
    e9bc:	2203      	movs	r2, #3
    e9be:	711a      	strb	r2, [r3, #4]
    e9c0:	e7d8      	b.n	e974 <ull_conn_rx+0x368>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
    e9c2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    e9c6:	2b00      	cmp	r3, #0
    e9c8:	f2c1 8031 	blt.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
    e9cc:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    e9d0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    e9d4:	429a      	cmp	r2, r3
    e9d6:	f001 802a 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
    e9da:	f894 60ea 	ldrb.w	r6, [r4, #234]	; 0xea
    e9de:	2e03      	cmp	r6, #3
    e9e0:	f041 8025 	bne.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    e9e4:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    e9e8:	2005      	movs	r0, #5
    e9ea:	f7ff f9ff 	bl	ddec <pdu_len_cmp>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    e9ee:	2800      	cmp	r0, #0
    e9f0:	f001 801d 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    e9f4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    e9f8:	f36f 0301 	bfc	r3, #0, #2
    e9fc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ea00:	712e      	strb	r6, [r5, #4]
	return 0;
    ea02:	e7b7      	b.n	e974 <ull_conn_rx+0x368>
    ea04:	00022060 	.word	0x00022060
    ea08:	20001080 	.word	0x20001080
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    ea0c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    ea10:	2006      	movs	r0, #6
    ea12:	f7ff f9eb 	bl	ddec <pdu_len_cmp>
    ea16:	2800      	cmp	r0, #0
    ea18:	f001 8009 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		if (conn->lll.role) {
    ea1c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    ea20:	2b00      	cmp	r3, #0
    ea22:	da25      	bge.n	ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
			if ((conn->llcp_req != conn->llcp_ack) &&
    ea24:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ea28:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    ea2c:	4293      	cmp	r3, r2
    ea2e:	d004      	beq.n	ea3a <ull_conn_rx+0x42e>
    ea30:	f894 10ea 	ldrb.w	r1, [r4, #234]	; 0xea
    ea34:	2903      	cmp	r1, #3
    ea36:	f040 87fa 	bne.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    ea3a:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
    ea3e:	4293      	cmp	r3, r2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    ea40:	f36f 0101 	bfc	r1, #0, #2
    ea44:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
    ea48:	d105      	bne.n	ea56 <ull_conn_rx+0x44a>
				conn->llcp_type = LLCP_ENCRYPTION;
    ea4a:	2203      	movs	r2, #3
				conn->llcp_ack -= 2U;
    ea4c:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_ENCRYPTION;
    ea4e:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
    ea52:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		if (conn->llcp_enc.refresh) {
    ea56:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    ea5a:	0759      	lsls	r1, r3, #29
    ea5c:	f57f af0d 	bpl.w	e87a <ull_conn_rx+0x26e>
			conn->llcp_enc.refresh = 0U;
    ea60:	f36f 0382 	bfc	r3, #2, #1
    ea64:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    ea68:	6833      	ldr	r3, [r6, #0]
    ea6a:	220b      	movs	r2, #11
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ea6c:	711a      	strb	r2, [r3, #4]
    ea6e:	e704      	b.n	e87a <ull_conn_rx+0x26e>
			conn->llcp_enc.pause_rx = 0U;
    ea70:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    ea74:	f023 0303 	bic.w	r3, r3, #3
    ea78:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    ea7c:	e7eb      	b.n	ea56 <ull_conn_rx+0x44a>
		if (!conn->lll.role ||
    ea7e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    ea82:	2b00      	cmp	r3, #0
    ea84:	f280 87d3 	bge.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    ea88:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    ea8c:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    ea8e:	f7ff f9ad 	bl	ddec <pdu_len_cmp>
		if (conn->lll.role ||
    ea92:	2800      	cmp	r0, #0
    ea94:	f000 87cb 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
    ea98:	4652      	mov	r2, sl
    ea9a:	1d29      	adds	r1, r5, #4
    ea9c:	4620      	mov	r0, r4
}
    ea9e:	b003      	add	sp, #12
    eaa0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
    eaa4:	f7ff bbdc 	b.w	e260 <feature_rsp_send.isra.15>
		if (conn->lll.role ||
    eaa8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    eaac:	2b00      	cmp	r3, #0
    eaae:	f2c0 87be 	blt.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    eab2:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    eab6:	200e      	movs	r0, #14
    eab8:	e7e9      	b.n	ea8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    eaba:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    eabe:	2009      	movs	r0, #9
    eac0:	f7ff f994 	bl	ddec <pdu_len_cmp>
    eac4:	2800      	cmp	r0, #0
    eac6:	f000 87b2 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	       (features[1] << 8) | (features[2] << 16);
    eaca:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    eace:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    ead2:	041b      	lsls	r3, r3, #16
    ead4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    ead8:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	       (features[1] << 8) | (features[2] << 16);
    eadc:	4313      	orrs	r3, r2
    eade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    eae2:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
    eae6:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
    eaea:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    eaee:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
    eaf2:	4013      	ands	r3, r2
    eaf4:	f3c3 0310 	ubfx	r3, r3, #0, #17
    eaf8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->common.fex_valid = 1U;
    eafc:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    eb00:	f043 0301 	orr.w	r3, r3, #1
    eb04:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
    eb08:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    eb0c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	conn->procedure_expire = 0U;
    eb10:	e6b3      	b.n	e87a <ull_conn_rx+0x26e>
		if (!conn->lll.role ||
    eb12:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    eb16:	2b00      	cmp	r3, #0
    eb18:	f280 8789 	bge.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    eb1c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    eb20:	200a      	movs	r0, #10
    eb22:	f7ff f963 	bl	ddec <pdu_len_cmp>
		if (!conn->lll.role ||
    eb26:	2800      	cmp	r0, #0
    eb28:	f000 8781 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    eb2c:	48c3      	ldr	r0, [pc, #780]	; (ee3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3dc>)
    eb2e:	f00b fc93 	bl	1a458 <mem_acquire>
		if (!tx) {
    eb32:	4601      	mov	r1, r0
    eb34:	b920      	cbnz	r0, eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
			return -ENOBUFS;
    eb36:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    eb3a:	b003      	add	sp, #12
    eb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	conn->llcp_enc.pause_rx = 1U;
    eb40:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    eb44:	f023 0305 	bic.w	r3, r3, #5
    eb48:	f043 0305 	orr.w	r3, r3, #5
    eb4c:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
    eb50:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    eb54:	f36f 03c3 	bfc	r3, #3, #1
    eb58:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eb5c:	790b      	ldrb	r3, [r1, #4]
    eb5e:	f043 0303 	orr.w	r3, r3, #3
    eb62:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    eb64:	2301      	movs	r3, #1
    eb66:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    eb68:	230b      	movs	r3, #11
    eb6a:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, tx);
    eb6c:	4620      	mov	r0, r4
    eb6e:	f00c f837 	bl	1abe0 <ctrl_tx_enqueue>
    eb72:	e556      	b.n	e622 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    eb74:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    eb78:	200b      	movs	r0, #11
    eb7a:	f7ff f937 	bl	ddec <pdu_len_cmp>
    eb7e:	2800      	cmp	r0, #0
    eb80:	f000 8755 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	} else if (!conn->lll.role) {
    eb84:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    eb88:	2b00      	cmp	r3, #0
    eb8a:	db10      	blt.n	ebae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    eb8c:	48ab      	ldr	r0, [pc, #684]	; (ee3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3dc>)
    eb8e:	f00b fc63 	bl	1a458 <mem_acquire>
		if (!tx) {
    eb92:	4601      	mov	r1, r0
    eb94:	2800      	cmp	r0, #0
    eb96:	d0ce      	beq.n	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
	conn->llcp_enc.pause_rx = 1U;
    eb98:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    eb9c:	f043 0301 	orr.w	r3, r3, #1
    eba0:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
    eba4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    eba8:	f023 0318 	bic.w	r3, r3, #24
    ebac:	e7d4      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
		conn->lll.enc_tx = 0;
    ebae:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    ebb2:	f36f 1304 	bfc	r3, #4, #1
    ebb6:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ebba:	e532      	b.n	e622 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    ebbc:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    ebc0:	200c      	movs	r0, #12
    ebc2:	f7ff f913 	bl	ddec <pdu_len_cmp>
    ebc6:	2800      	cmp	r0, #0
    ebc8:	f000 8731 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	if (!conn->llcp_version.tx) {
    ebcc:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
    ebd0:	07da      	lsls	r2, r3, #31
    ebd2:	d43e      	bmi.n	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ebd4:	4899      	ldr	r0, [pc, #612]	; (ee3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3dc>)
    ebd6:	f00b fc3f 	bl	1a458 <mem_acquire>
		if (!tx) {
    ebda:	4601      	mov	r1, r0
    ebdc:	2800      	cmp	r0, #0
    ebde:	d0aa      	beq.n	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
		conn->llcp_version.tx = 1U;
    ebe0:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
    ebe4:	f043 0301 	orr.w	r3, r3, #1
    ebe8:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ebec:	7903      	ldrb	r3, [r0, #4]
    ebee:	f043 0303 	orr.w	r3, r3, #3
    ebf2:	7103      	strb	r3, [r0, #4]
		pdu_tx->len =
    ebf4:	2306      	movs	r3, #6
    ebf6:	7143      	strb	r3, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    ebf8:	230c      	movs	r3, #12
    ebfa:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
    ebfc:	230a      	movs	r3, #10
    ebfe:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    ec00:	f06f 030e 	mvn.w	r3, #14
    ec04:	7243      	strb	r3, [r0, #9]
    ec06:	2305      	movs	r3, #5
    ec08:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
    ec0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ec0e:	72c3      	strb	r3, [r0, #11]
    ec10:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
    ec12:	4620      	mov	r0, r4
    ec14:	f00b ffaa 	bl	1ab6c <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ec18:	2303      	movs	r3, #3
    ec1a:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
    ec1c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    ec20:	f884 3123 	strb.w	r3, [r4, #291]	; 0x123
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    ec24:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
    ec28:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    ec2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec30:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
		sys_le16_to_cpu(v->sub_version_number);
    ec34:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    ec38:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    ec3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
    ec40:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	conn->llcp_version.rx = 1U;
    ec44:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
    ec48:	f043 0302 	orr.w	r3, r3, #2
    ec4c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
	return 0;
    ec50:	e690      	b.n	e974 <ull_conn_rx+0x368>
	} else if (!conn->llcp_version.rx) {
    ec52:	f013 0302 	ands.w	r3, r3, #2
    ec56:	f47f ace4 	bne.w	e622 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
    ec5a:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    ec5e:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		conn->procedure_expire = 0U;
    ec62:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    ec66:	e7d9      	b.n	ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
    ec68:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    ec6c:	200d      	movs	r0, #13
    ec6e:	f7ff f8bd 	bl	ddec <pdu_len_cmp>
    ec72:	2800      	cmp	r0, #0
    ec74:	f000 86db 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		conn->llcp_enc.pause_rx = 0U;
    ec78:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    ec7c:	f023 0303 	bic.w	r3, r3, #3
    ec80:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->llcp_ack = conn->llcp_req;
    ec84:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ec88:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0U;
    ec8c:	e5f5      	b.n	e87a <ull_conn_rx+0x26e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    ec8e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    ec92:	200f      	movs	r0, #15
    ec94:	f7ff f8aa 	bl	ddec <pdu_len_cmp>
    ec98:	2800      	cmp	r0, #0
    ec9a:	f000 86c8 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
    ec9e:	4b68      	ldr	r3, [pc, #416]	; (ee40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e0>)
    eca0:	6818      	ldr	r0, [r3, #0]
    eca2:	b150      	cbz	r0, ecba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x25a>
    eca4:	4284      	cmp	r4, r0
    eca6:	d008      	beq.n	ecba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x25a>
			nack = reject_ext_ind_send(conn, *rx,
    eca8:	2320      	movs	r3, #32
				nack = reject_ext_ind_send(conn, *rx,
    ecaa:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
    ecac:	1d29      	adds	r1, r5, #4
    ecae:	4620      	mov	r0, r4
}
    ecb0:	b003      	add	sp, #12
    ecb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
    ecb6:	f7ff bb19 	b.w	e2ec <reject_ext_ind_send.isra.9>
		if (!conn->lll.role) {
    ecba:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
    ecbe:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    ecc2:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    ecc6:	2900      	cmp	r1, #0
    ecc8:	f2c0 80bc 	blt.w	ee44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e4>
			if ((conn->llcp_conn_param.req !=
    eccc:	4293      	cmp	r3, r2
    ecce:	d009      	beq.n	ece4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x284>
			    ((conn->llcp_conn_param.state ==
    ecd0:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
    ecd4:	f013 0307 	ands.w	r3, r3, #7
    ecd8:	d002      	beq.n	ece0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x280>
			      LLCP_CPR_STATE_REQ) ||
    ecda:	3b04      	subs	r3, #4
    ecdc:	2b01      	cmp	r3, #1
    ecde:	d801      	bhi.n	ece4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x284>
				nack = reject_ext_ind_send(conn, *rx,
    ece0:	2323      	movs	r3, #35	; 0x23
    ece2:	e7e2      	b.n	ecaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    ece4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ece8:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
    ecec:	1a5b      	subs	r3, r3, r1
    ecee:	f003 0303 	and.w	r3, r3, #3
    ecf2:	2b02      	cmp	r3, #2
    ecf4:	d103      	bne.n	ecfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29e>
				      0x03) == 0x02) &&
    ecf6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    ecfa:	2b03      	cmp	r3, #3
    ecfc:	d105      	bne.n	ed0a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2aa>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    ecfe:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
    ed02:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    ed06:	4299      	cmp	r1, r3
    ed08:	d001      	beq.n	ed0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ae>
				nack = reject_ext_ind_send(conn, *rx,
    ed0a:	232a      	movs	r3, #42	; 0x2a
    ed0c:	e7cd      	b.n	ecaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24a>
				u16_t interval_min =
    ed0e:	f8b5 a024 	ldrh.w	sl, [r5, #36]	; 0x24
    ed12:	fa1f f38a 	uxth.w	r3, sl
				if ((interval_min < 6) ||
    ed16:	2b05      	cmp	r3, #5
    ed18:	d925      	bls.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
				u16_t interval_max =
    ed1a:	f8b5 9026 	ldrh.w	r9, [r5, #38]	; 0x26
    ed1e:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < 6) ||
    ed22:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    ed26:	d81e      	bhi.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
				    (interval_max > 3200) ||
    ed28:	428b      	cmp	r3, r1
    ed2a:	d81c      	bhi.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
				u16_t latency =
    ed2c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    ed2e:	f8ad 3000 	strh.w	r3, [sp]
    ed32:	fa1f fc83 	uxth.w	ip, r3
				    (interval_min > interval_max) ||
    ed36:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    ed3a:	d214      	bcs.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
				u16_t timeout =
    ed3c:	f8b5 b02a 	ldrh.w	fp, [r5, #42]	; 0x2a
    ed40:	fa1f f38b 	uxth.w	r3, fp
				    (latency > 499) ||
    ed44:	f1a3 0e0a 	sub.w	lr, r3, #10
    ed48:	fa1f fe8e 	uxth.w	lr, lr
    ed4c:	f640 4876 	movw	r8, #3190	; 0xc76
    ed50:	45c6      	cmp	lr, r8
    ed52:	d808      	bhi.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
				     ((latency + 1) * interval_max)) ||
    ed54:	fb0c 1e01 	mla	lr, ip, r1, r1
				    (timeout > 3200) ||
    ed58:	ebbe 0f83 	cmp.w	lr, r3, lsl #2
    ed5c:	d203      	bcs.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
					cpr->preferred_periodicity;
    ed5e:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
				     ((latency + 1) * interval_max)) ||
    ed62:	4571      	cmp	r1, lr
    ed64:	d201      	bcs.n	ed6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30a>
				nack = reject_ext_ind_send(conn, *rx,
    ed66:	231e      	movs	r3, #30
    ed68:	e79f      	b.n	ecaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24a>
				conn->llcp_conn_param.latency =	latency;
    ed6a:	f8bd 8000 	ldrh.w	r8, [sp]
				conn->llcp_conn_param.interval_min =
    ed6e:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
    ed72:	f8a4 9176 	strh.w	r9, [r4, #374]	; 0x176
				conn->llcp_conn_param.latency =	latency;
    ed76:	f8a4 8178 	strh.w	r8, [r4, #376]	; 0x178
				conn->llcp_conn_param.timeout =	timeout;
    ed7a:	f8a4 b17a 	strh.w	fp, [r4, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
    ed7e:	f884 e17c 	strb.w	lr, [r4, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    ed82:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
    ed86:	f895 e02d 	ldrb.w	lr, [r5, #45]	; 0x2d
    ed8a:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    ed8e:	f8a4 e17e 	strh.w	lr, [r4, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
    ed92:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
    ed96:	f895 e02f 	ldrb.w	lr, [r5, #47]	; 0x2f
    ed9a:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset0 =
    ed9e:	f8a4 e180 	strh.w	lr, [r4, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
    eda2:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
    eda6:	f895 e031 	ldrb.w	lr, [r5, #49]	; 0x31
    edaa:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset1 =
    edae:	f8a4 e182 	strh.w	lr, [r4, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
    edb2:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
    edb6:	f895 e033 	ldrb.w	lr, [r5, #51]	; 0x33
    edba:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset2 =
    edbe:	f8a4 e184 	strh.w	lr, [r4, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
    edc2:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
    edc6:	f895 e035 	ldrb.w	lr, [r5, #53]	; 0x35
    edca:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset3 =
    edce:	f8a4 e186 	strh.w	lr, [r4, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
    edd2:	f895 e037 	ldrb.w	lr, [r5, #55]	; 0x37
    edd6:	f895 8038 	ldrb.w	r8, [r5, #56]	; 0x38
    edda:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset4 =
    edde:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
    ede2:	f895 e039 	ldrb.w	lr, [r5, #57]	; 0x39
    ede6:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
    edea:	ea4e 2505 	orr.w	r5, lr, r5, lsl #8
				conn->llcp_conn_param.offset5 =
    edee:	f8a4 518a 	strh.w	r5, [r4, #394]	; 0x18a
				     lll->interval) ||
    edf2:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
    edf4:	42a9      	cmp	r1, r5
    edf6:	d112      	bne.n	ee1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3be>
				     lll->interval) ||
    edf8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    edfa:	4561      	cmp	r1, ip
    edfc:	d10f      	bne.n	ee1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3be>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    edfe:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ee02:	4369      	muls	r1, r5
    ee04:	f242 7510 	movw	r5, #10000	; 0x2710
    ee08:	fb05 1303 	mla	r3, r5, r3, r1
    ee0c:	3b01      	subs	r3, #1
    ee0e:	fbb3 f3f1 	udiv	r3, r3, r1
				     lll->latency) ||
    ee12:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
    ee16:	b29b      	uxth	r3, r3
    ee18:	4299      	cmp	r1, r3
    ee1a:	f000 80b2 	beq.w	ef82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x522>
					if (conn->llcp_enc.pause_tx) {
    ee1e:	f017 0f02 	tst.w	r7, #2
    ee22:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    ee26:	f000 809e 	beq.w	ef66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x506>
						conn->llcp_conn_param.state =
    ee2a:	2102      	movs	r1, #2
    ee2c:	f361 0302 	bfi	r3, r1, #0, #3
    ee30:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ee34:	6833      	ldr	r3, [r6, #0]
    ee36:	2103      	movs	r1, #3
    ee38:	7119      	strb	r1, [r3, #4]
    ee3a:	e099      	b.n	ef70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x510>
    ee3c:	20001100 	.word	0x20001100
    ee40:	20001080 	.word	0x20001080
		} else if ((conn->llcp_conn_param.req ==
    ee44:	4293      	cmp	r3, r2
    ee46:	d004      	beq.n	ee52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f2>
			    conn->llcp_conn_param.ack) ||
    ee48:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    ee4c:	079f      	lsls	r7, r3, #30
    ee4e:	f040 80a1 	bne.w	ef94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x534>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    ee52:	f8b5 a024 	ldrh.w	sl, [r5, #36]	; 0x24
    ee56:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < 6) ||
    ee5a:	2b05      	cmp	r3, #5
    ee5c:	d983      	bls.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    ee5e:	f8b5 9026 	ldrh.w	r9, [r5, #38]	; 0x26
    ee62:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < 6) ||
    ee66:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    ee6a:	f63f af7c 	bhi.w	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
			    (interval_max > 3200) ||
    ee6e:	428b      	cmp	r3, r1
    ee70:	f63f af79 	bhi.w	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
    ee74:	f8b5 8028 	ldrh.w	r8, [r5, #40]	; 0x28
    ee78:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
    ee7c:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
    ee80:	f4bf af71 	bcs.w	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
    ee84:	f8b5 e02a 	ldrh.w	lr, [r5, #42]	; 0x2a
    ee88:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
    ee8c:	f1a3 0c0a 	sub.w	ip, r3, #10
    ee90:	fa1f fc8c 	uxth.w	ip, ip
    ee94:	f640 4b76 	movw	fp, #3190	; 0xc76
    ee98:	45dc      	cmp	ip, fp
    ee9a:	f63f af64 	bhi.w	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
			     ((latency + 1) * interval_max)) ||
    ee9e:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
    eea2:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
    eea6:	f4bf af5e 	bcs.w	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
				cpr->preferred_periodicity;
    eeaa:	f895 c02c 	ldrb.w	ip, [r5, #44]	; 0x2c
			     ((latency + 1) * interval_max)) ||
    eeae:	4561      	cmp	r1, ip
    eeb0:	f4ff af59 	bcc.w	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
			conn->llcp_conn_param.interval_min = interval_min;
    eeb4:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
    eeb8:	f8a4 9176 	strh.w	r9, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
    eebc:	f8a4 8178 	strh.w	r8, [r4, #376]	; 0x178
			conn->llcp_conn_param.timeout =	timeout;
    eec0:	f8a4 e17a 	strh.w	lr, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
    eec4:	f884 c17c 	strb.w	ip, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    eec8:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
    eecc:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
    eed0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    eed4:	f8a4 c17e 	strh.w	ip, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
    eed8:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
    eedc:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
    eee0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset0 =
    eee4:	f8a4 c180 	strh.w	ip, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
    eee8:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
    eeec:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
    eef0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset1 =
    eef4:	f8a4 c182 	strh.w	ip, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
    eef8:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
    eefc:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
    ef00:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset2 =
    ef04:	f8a4 c184 	strh.w	ip, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
    ef08:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
    ef0c:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
    ef10:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset3 =
    ef14:	f8a4 c186 	strh.w	ip, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
    ef18:	f895 c037 	ldrb.w	ip, [r5, #55]	; 0x37
    ef1c:	f895 e038 	ldrb.w	lr, [r5, #56]	; 0x38
    ef20:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset4 =
    ef24:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
    ef28:	f895 c039 	ldrb.w	ip, [r5, #57]	; 0x39
    ef2c:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
    ef30:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
			conn->llcp_conn_param.offset5 =
    ef34:	f8a4 518a 	strh.w	r5, [r4, #394]	; 0x18a
			     lll->interval) ||
    ef38:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
    ef3a:	42a9      	cmp	r1, r5
    ef3c:	d111      	bne.n	ef62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x502>
			     lll->interval) ||
    ef3e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
    ef40:	42bd      	cmp	r5, r7
    ef42:	d10e      	bne.n	ef62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x502>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    ef44:	f240 45e2 	movw	r5, #1250	; 0x4e2
    ef48:	4369      	muls	r1, r5
    ef4a:	f242 7510 	movw	r5, #10000	; 0x2710
    ef4e:	fb05 1303 	mla	r3, r5, r3, r1
    ef52:	3b01      	subs	r3, #1
    ef54:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
    ef58:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
    ef5c:	b29b      	uxth	r3, r3
    ef5e:	4299      	cmp	r1, r3
    ef60:	d00f      	beq.n	ef82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x522>
				conn->llcp_conn_param.state =
    ef62:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    ef66:	2103      	movs	r1, #3
    ef68:	f361 0302 	bfi	r3, r1, #0, #3
    ef6c:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack--;
    ef70:	3a01      	subs	r2, #1
    ef72:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
			if (!conn_upd_curr) {
    ef76:	2800      	cmp	r0, #0
    ef78:	f47f acfc 	bne.w	e974 <ull_conn_rx+0x368>
				conn_upd_curr = conn;
    ef7c:	4bbe      	ldr	r3, [pc, #760]	; (f278 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x818>)
    ef7e:	601c      	str	r4, [r3, #0]
    ef80:	e5db      	b.n	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
				conn->llcp_conn_param.state =
    ef82:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
    ef86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ef8a:	f043 0301 	orr.w	r3, r3, #1
    ef8e:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
    ef92:	e74f      	b.n	ee34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d4>
			LL_ASSERT(0);
    ef94:	f241 6311 	movw	r3, #5649	; 0x1611
    ef98:	4ab8      	ldr	r2, [pc, #736]	; (f27c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x81c>)
    ef9a:	49b9      	ldr	r1, [pc, #740]	; (f280 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x820>)
    ef9c:	48b9      	ldr	r0, [pc, #740]	; (f284 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x824>)
    ef9e:	f009 f8c9 	bl	18134 <printk>
    efa2:	4040      	eors	r0, r0
    efa4:	f380 8811 	msr	BASEPRI, r0
    efa8:	f04f 0003 	mov.w	r0, #3
    efac:	df02      	svc	2
    efae:	e4e1      	b.n	e974 <ull_conn_rx+0x368>
		if (conn->lll.role ||
    efb0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    efb4:	2b00      	cmp	r3, #0
    efb6:	f2c0 853a 	blt.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    efba:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    efbe:	2010      	movs	r0, #16
    efc0:	f7fe ff14 	bl	ddec <pdu_len_cmp>
		if (conn->lll.role ||
    efc4:	2800      	cmp	r0, #0
    efc6:	f000 8532 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		if (!conn->lll.role &&
    efca:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    efce:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    efd2:	429a      	cmp	r2, r3
    efd4:	f43f acf1 	beq.w	e9ba <ull_conn_rx+0x3ae>
		    (conn->llcp_conn_param.state ==
    efd8:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
    efdc:	f003 0307 	and.w	r3, r3, #7
    efe0:	2b04      	cmp	r3, #4
    efe2:	f47f acea 	bne.w	e9ba <ull_conn_rx+0x3ae>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    efe6:	f8b5 e024 	ldrh.w	lr, [r5, #36]	; 0x24
    efea:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < 6) ||
    efee:	2a05      	cmp	r2, #5
    eff0:	d920      	bls.n	f034 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5d4>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    eff2:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
    eff6:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < 6) ||
    effa:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    effe:	d819      	bhi.n	f034 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5d4>
			    (interval_max > 3200) ||
    f000:	429a      	cmp	r2, r3
    f002:	d817      	bhi.n	f034 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5d4>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
    f004:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
    f006:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
    f008:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    f00c:	d212      	bcs.n	f034 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5d4>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
    f00e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    f010:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
    f014:	f1a8 010a 	sub.w	r1, r8, #10
    f018:	b289      	uxth	r1, r1
    f01a:	f640 4976 	movw	r9, #3190	; 0xc76
    f01e:	4549      	cmp	r1, r9
    f020:	d808      	bhi.n	f034 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5d4>
			     ((latency + 1) * interval_max)) ||
    f022:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
    f026:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
    f02a:	d203      	bcs.n	f034 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5d4>
				cpr->preferred_periodicity;
    f02c:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
			     ((latency + 1) * interval_max)) ||
    f030:	4293      	cmp	r3, r2
    f032:	d202      	bcs.n	f03a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5da>
				nack = reject_ext_ind_send(conn, *rx,
    f034:	231e      	movs	r3, #30
    f036:	2210      	movs	r2, #16
    f038:	e638      	b.n	ecac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24c>
			conn->procedure_expire = 0U;
    f03a:	2300      	movs	r3, #0
    f03c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
			conn->llcp_conn_param.interval_min = interval_min;
    f040:	f8a4 e174 	strh.w	lr, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
    f044:	f8a4 c176 	strh.w	ip, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
    f048:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
			conn->llcp_conn_param.timeout =	timeout;
    f04c:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
    f050:	f884 217c 	strb.w	r2, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    f054:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    f058:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    f05c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    f060:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
    f064:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    f068:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    f06c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset0 =
    f070:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
    f074:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
    f078:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    f07c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset1 =
    f080:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
    f084:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    f088:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    f08c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset2 =
    f090:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
    f094:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
    f098:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    f09c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset3 =
    f0a0:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
    f0a4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    f0a8:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
    f0ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset4 =
    f0b0:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
    f0b4:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
    f0b8:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    f0bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset5 =
    f0c0:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    f0c4:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    f0c8:	2201      	movs	r2, #1
    f0ca:	f362 0302 	bfi	r3, r2, #0, #3
    f0ce:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f0d2:	e472      	b.n	e9ba <ull_conn_rx+0x3ae>
	switch (rej_ext_ind->reject_opcode) {
    f0d4:	2b14      	cmp	r3, #20
    f0d6:	f000 8085 	beq.w	f1e4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x784>
    f0da:	2b16      	cmp	r3, #22
    f0dc:	f47f aaa1 	bne.w	e622 <ull_conn_rx+0x16>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    f0e0:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    f0e4:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    f0e8:	429a      	cmp	r2, r3
    f0ea:	f43f aa9a 	beq.w	e622 <ull_conn_rx+0x16>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    f0ee:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    f0f2:	2a23      	cmp	r2, #35	; 0x23
    f0f4:	d012      	beq.n	f11c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6bc>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f0f6:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f0fa:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    f0fe:	f3c3 0102 	ubfx	r1, r3, #0, #3
    f102:	f361 1306 	bfi	r3, r1, #4, #3
    f106:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    f10a:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    f10e:	f36f 0300 	bfc	r3, #0, #1
    f112:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
    f116:	2300      	movs	r3, #0
    f118:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
    f11c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    f120:	0759      	lsls	r1, r3, #29
    f122:	f57f aa7e 	bpl.w	e622 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f126:	230e      	movs	r3, #14
    f128:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    f12a:	f885 2020 	strb.w	r2, [r5, #32]
	p->tx = conn->lll.phy_tx;
    f12e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    f132:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f136:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	p->rx = conn->lll.phy_rx;
    f13a:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    f13e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f142:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	if (err) {
    f146:	e415      	b.n	e974 <ull_conn_rx+0x368>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    f148:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    f14c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    f150:	429a      	cmp	r2, r3
    f152:	f43f aa66 	beq.w	e622 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
    f156:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
    f15a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    f15e:	2a00      	cmp	r2, #0
    f160:	f2c0 848c 	blt.w	fa7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x101c>
    f164:	2b1a      	cmp	r3, #26
    f166:	f040 848f 	bne.w	fa88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1028>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
    f16a:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    f16e:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
    f172:	429a      	cmp	r2, r3
    f174:	d00c      	beq.n	f190 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x730>
    f176:	f241 0346 	movw	r3, #4166	; 0x1046
    f17a:	4a40      	ldr	r2, [pc, #256]	; (f27c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x81c>)
    f17c:	4942      	ldr	r1, [pc, #264]	; (f288 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x828>)
    f17e:	4841      	ldr	r0, [pc, #260]	; (f284 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x824>)
    f180:	f008 ffd8 	bl	18134 <printk>
    f184:	4040      	eors	r0, r0
    f186:	f380 8811 	msr	BASEPRI, r0
    f18a:	f04f 0003 	mov.w	r0, #3
    f18e:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    f190:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    f194:	2305      	movs	r3, #5
    f196:	f363 0202 	bfi	r2, r3, #0, #3
		conn->llcp_cu.win_offset_us = 0U;
    f19a:	2300      	movs	r3, #0
    f19c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    f1a0:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    f1a4:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    f1a8:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    f1ac:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    f1b0:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    f1b4:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f1b8:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    f1bc:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    f1c0:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f1c2:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    f1c6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f1ca:	f362 0382 	bfi	r3, r2, #2, #1
    f1ce:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    f1d2:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
		conn->llcp_cu.win_size = 1U;
    f1d6:	f884 1114 	strb.w	r1, [r4, #276]	; 0x114
		conn->llcp_cu.ack--;
    f1da:	3b01      	subs	r3, #1
    f1dc:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	if (err) {
    f1e0:	f7ff ba1f 	b.w	e622 <ull_conn_rx+0x16>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
    f1e4:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    f1e8:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    f1ec:	429a      	cmp	r2, r3
    f1ee:	f43f aa18 	beq.w	e622 <ull_conn_rx+0x16>
	conn->llcp_length.ack = conn->llcp_length.req;
    f1f2:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
	conn->procedure_expire = 0U;
    f1f6:	2000      	movs	r0, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f1f8:	2309      	movs	r3, #9
	conn->procedure_expire = 0U;
    f1fa:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f1fe:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f202:	2315      	movs	r3, #21
    f204:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    f208:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    f20c:	84ab      	strh	r3, [r5, #36]	; 0x24
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    f20e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    f212:	852b      	strh	r3, [r5, #40]	; 0x28
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    f214:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    f218:	84eb      	strh	r3, [r5, #38]	; 0x26
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    f21a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    f21e:	856b      	strh	r3, [r5, #42]	; 0x2a
	if (err) {
    f220:	e48b      	b.n	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
    f222:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    f226:	2012      	movs	r0, #18
    f228:	f7fe fde0 	bl	ddec <pdu_len_cmp>
    f22c:	2800      	cmp	r0, #0
    f22e:	f000 83fe 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f232:	4816      	ldr	r0, [pc, #88]	; (f28c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x82c>)
    f234:	f00b f910 	bl	1a458 <mem_acquire>
	if (!tx) {
    f238:	4601      	mov	r1, r0
    f23a:	2800      	cmp	r0, #0
    f23c:	f43f ac7b 	beq.w	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f240:	7903      	ldrb	r3, [r0, #4]
    f242:	f043 0303 	orr.w	r3, r3, #3
    f246:	7103      	strb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    f248:	2301      	movs	r3, #1
    f24a:	7143      	strb	r3, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    f24c:	2313      	movs	r3, #19
    f24e:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    f250:	4620      	mov	r0, r4
    f252:	f00b fc8b 	bl	1ab6c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f256:	f7ff b9e4 	b.w	e622 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
    f25a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    f25e:	2013      	movs	r0, #19
    f260:	f7fe fdc4 	bl	ddec <pdu_len_cmp>
    f264:	2800      	cmp	r0, #0
    f266:	f000 83e2 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		conn->procedure_expire = 0U;
    f26a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f26c:	2303      	movs	r3, #3
		conn->procedure_expire = 0U;
    f26e:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f272:	712b      	strb	r3, [r5, #4]
		break;
    f274:	e461      	b.n	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
    f276:	bf00      	nop
    f278:	20001080 	.word	0x20001080
    f27c:	00020ce6 	.word	0x00020ce6
    f280:	0002195a 	.word	0x0002195a
    f284:	0001ff46 	.word	0x0001ff46
    f288:	00020dcd 	.word	0x00020dcd
    f28c:	20001100 	.word	0x20001100
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    f290:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    f294:	2007      	movs	r0, #7
    f296:	f7fe fda9 	bl	ddec <pdu_len_cmp>
    f29a:	2800      	cmp	r0, #0
    f29c:	f000 83c7 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		} else if (conn->llcp_conn_param.ack !=
    f2a0:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    f2a4:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    f2a8:	429a      	cmp	r2, r3
    f2aa:	d07b      	beq.n	f3a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x944>
			conn->llcp_conn_param.disabled = 1U;
    f2ac:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    f2b0:	f043 0310 	orr.w	r3, r3, #16
    f2b4:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
			if (!conn->lll.role) {
    f2b8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f2bc:	2b00      	cmp	r3, #0
    f2be:	db3f      	blt.n	f340 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8e0>
				LL_ASSERT(conn->llcp_cu.req ==
    f2c0:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    f2c4:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
    f2c8:	429a      	cmp	r2, r3
    f2ca:	d00c      	beq.n	f2e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x886>
    f2cc:	f241 6392 	movw	r3, #5778	; 0x1692
    f2d0:	4ac5      	ldr	r2, [pc, #788]	; (f5e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb88>)
    f2d2:	49c6      	ldr	r1, [pc, #792]	; (f5ec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8c>)
    f2d4:	48c6      	ldr	r0, [pc, #792]	; (f5f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb90>)
    f2d6:	f008 ff2d 	bl	18134 <printk>
    f2da:	4040      	eors	r0, r0
    f2dc:	f380 8811 	msr	BASEPRI, r0
    f2e0:	f04f 0003 	mov.w	r0, #3
    f2e4:	df02      	svc	2
				conn->llcp_conn_param.state =
    f2e6:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    f2ea:	2305      	movs	r3, #5
    f2ec:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_cu.interval =
    f2f0:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    f2f4:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
				conn->llcp_cu.latency =
    f2f8:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    f2fc:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
				conn->llcp_cu.timeout =
    f300:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    f304:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f308:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
				conn->llcp_conn_param.state =
    f30c:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
				conn->llcp_cu.win_size = 1U;
    f310:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f312:	f361 0301 	bfi	r3, r1, #0, #2
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    f316:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f31a:	f362 0382 	bfi	r3, r2, #2, #1
    f31e:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
				conn->llcp_cu.ack--;
    f322:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.win_size = 1U;
    f326:	f884 1114 	strb.w	r1, [r4, #276]	; 0x114
				conn->llcp_cu.ack--;
    f32a:	3b01      	subs	r3, #1
    f32c:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.win_offset_us = 0U;
    f330:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f332:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
    f334:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f338:	2203      	movs	r2, #3
    f33a:	711a      	strb	r2, [r3, #4]
				break;
    f33c:	f7ff bbfd 	b.w	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
			LL_ASSERT(conn_upd_curr == conn);
    f340:	4fac      	ldr	r7, [pc, #688]	; (f5f4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb94>)
    f342:	683a      	ldr	r2, [r7, #0]
    f344:	4294      	cmp	r4, r2
    f346:	d00c      	beq.n	f362 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x902>
    f348:	f241 63a9 	movw	r3, #5801	; 0x16a9
    f34c:	4aa6      	ldr	r2, [pc, #664]	; (f5e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb88>)
    f34e:	49aa      	ldr	r1, [pc, #680]	; (f5f8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb98>)
    f350:	48a7      	ldr	r0, [pc, #668]	; (f5f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb90>)
    f352:	f008 feef 	bl	18134 <printk>
    f356:	4040      	eors	r0, r0
    f358:	f380 8811 	msr	BASEPRI, r0
    f35c:	f04f 0003 	mov.w	r0, #3
    f360:	df02      	svc	2
			conn_upd_curr = NULL;
    f362:	2300      	movs	r3, #0
			if (!conn->llcp_conn_param.cmd) {
    f364:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
			conn_upd_curr = NULL;
    f368:	603b      	str	r3, [r7, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f36a:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    f36e:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
			if (!conn->llcp_conn_param.cmd) {
    f372:	f010 0008 	ands.w	r0, r0, #8
    f376:	6833      	ldr	r3, [r6, #0]
    f378:	d0de      	beq.n	f338 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8d8>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f37a:	220a      	movs	r2, #10
    f37c:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    f37e:	231a      	movs	r3, #26
    f380:	f885 3020 	strb.w	r3, [r5, #32]
			cu->latency = lll->latency;
    f384:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			cu->interval = lll->interval;
    f386:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->latency = lll->latency;
    f388:	84aa      	strh	r2, [r5, #36]	; 0x24
			cu->timeout = conn->supervision_reload *
    f38a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
			cu->interval = lll->interval;
    f38e:	846b      	strh	r3, [r5, #34]	; 0x22
			cu->timeout = conn->supervision_reload *
    f390:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
    f392:	237d      	movs	r3, #125	; 0x7d
    f394:	4353      	muls	r3, r2
    f396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f39a:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
    f39e:	84eb      	strh	r3, [r5, #38]	; 0x26
    f3a0:	f7ff ba6b 	b.w	e87a <ull_conn_rx+0x26e>
		} else if (conn->llcp_length.req != conn->llcp_length.ack) {
    f3a4:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    f3a8:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    f3ac:	429a      	cmp	r2, r3
    f3ae:	d003      	beq.n	f3b8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x958>
			conn->llcp_length.ack = conn->llcp_length.req;
    f3b0:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
    f3b4:	f7ff ba61 	b.w	e87a <ull_conn_rx+0x26e>
		} else if (conn->llcp_phy.req !=
    f3b8:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    f3bc:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    f3c0:	429a      	cmp	r2, r3
    f3c2:	d025      	beq.n	f410 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9b0>
			conn->llcp_phy.ack = conn->llcp_phy.req;
    f3c4:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
			lll->phy_tx_time = lll->phy_tx;
    f3c8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
			conn->llcp_phy.pause_tx = 0U;
    f3cc:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
    f3d0:	f3c3 0102 	ubfx	r1, r3, #0, #3
			conn->llcp_phy.pause_tx = 0U;
    f3d4:	f36f 0200 	bfc	r2, #0, #1
			lll->phy_tx_time = lll->phy_tx;
    f3d8:	f361 1306 	bfi	r3, r1, #4, #3
			conn->llcp_phy.pause_tx = 0U;
    f3dc:	f884 21ab 	strb.w	r2, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
    f3e0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
			if (conn->llcp_phy.cmd) {
    f3e4:	f012 0f04 	tst.w	r2, #4
    f3e8:	6833      	ldr	r3, [r6, #0]
    f3ea:	d00e      	beq.n	f40a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9aa>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f3ec:	220e      	movs	r2, #14
    f3ee:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
    f3f0:	2300      	movs	r3, #0
    f3f2:	f885 3020 	strb.w	r3, [r5, #32]
				p->tx = lll->phy_tx;
    f3f6:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
				p->rx = lll->phy_rx;
    f3fa:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    f3fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f402:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    f406:	f7ff ba38 	b.w	e87a <ull_conn_rx+0x26e>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f40a:	2203      	movs	r2, #3
    f40c:	f7ff bb2e 	b.w	ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>
			switch (llctrl->unknown_rsp.type) {
    f410:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    f414:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f416:	bf04      	itt	eq
    f418:	2303      	moveq	r3, #3
    f41a:	712b      	strbeq	r3, [r5, #4]
				break;
    f41c:	f7ff ba2d 	b.w	e87a <ull_conn_rx+0x26e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    f420:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    f424:	2014      	movs	r0, #20
    f426:	f7fe fce1 	bl	ddec <pdu_len_cmp>
    f42a:	2800      	cmp	r0, #0
    f42c:	f000 82ff 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    f430:	f1b9 0f14 	cmp.w	r9, #20
    f434:	d176      	bne.n	f524 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f436:	4871      	ldr	r0, [pc, #452]	; (f5fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb9c>)
    f438:	f00b f80e 	bl	1a458 <mem_acquire>
		if (!tx) {
    f43c:	4607      	mov	r7, r0
    f43e:	2800      	cmp	r0, #0
    f440:	f43f ab79 	beq.w	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
	eff_rx_octets = conn->lll.max_rx_octets;
    f444:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    f448:	9300      	str	r3, [sp, #0]
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
    f44a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    f44e:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
    f450:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    f454:	9901      	ldr	r1, [sp, #4]
	eff_tx_octets = conn->lll.max_tx_octets;
    f456:	f8b4 905c 	ldrh.w	r9, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
    f45a:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
    f45e:	f8b4 b060 	ldrh.w	fp, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
    f462:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f466:	428a      	cmp	r2, r1
    f468:	d15e      	bne.n	f528 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac8>
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
    f46a:	2b14      	cmp	r3, #20
    f46c:	f040 80b4 	bne.w	f5d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb78>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
    f470:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    f472:	2b1a      	cmp	r3, #26
    f474:	d974      	bls.n	f560 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb00>
			eff_tx_octets = MIN(max_rx_octets,
    f476:	f8b4 20d6 	ldrh.w	r2, [r4, #214]	; 0xd6
    f47a:	429a      	cmp	r2, r3
    f47c:	bf28      	it	cs
    f47e:	461a      	movcs	r2, r3
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    f480:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
			eff_rx_octets = MIN(max_tx_octets,
    f482:	2b1b      	cmp	r3, #27
    f484:	9b00      	ldr	r3, [sp, #0]
    f486:	bf38      	it	cc
    f488:	469c      	movcc	ip, r3
		max_rx_time = sys_le16_to_cpu(lr->max_rx_time);
    f48a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
    f48c:	bf28      	it	cs
    f48e:	f04f 0c1b 	movcs.w	ip, #27
		if (max_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
    f492:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    f496:	d365      	bcc.n	f564 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb04>
			eff_tx_time = MIN(max_rx_time,
    f498:	f8b4 10d8 	ldrh.w	r1, [r4, #216]	; 0xd8
    f49c:	428b      	cmp	r3, r1
    f49e:	bf28      	it	cs
    f4a0:	460b      	movcs	r3, r1
		if (max_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
    f4a2:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    f4a4:	9800      	ldr	r0, [sp, #0]
			eff_rx_time = MIN(max_tx_time,
    f4a6:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f4aa:	bf34      	ite	cc
    f4ac:	4651      	movcc	r1, sl
    f4ae:	f44f 71a4 	movcs.w	r1, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    f4b2:	4560      	cmp	r0, ip
    f4b4:	d05e      	beq.n	f574 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb14>
			conn->llcp_length.ack = (conn->llcp_length.req -
    f4b6:	9801      	ldr	r0, [sp, #4]
			conn->llcp_length.rx_octets = eff_rx_octets;
    f4b8:	f8a4 c19c 	strh.w	ip, [r4, #412]	; 0x19c
			conn->llcp_length.ack = (conn->llcp_length.req -
    f4bc:	3801      	subs	r0, #1
    f4be:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
    f4c2:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
			conn->llcp_length.rx_time = eff_rx_time;
    f4c6:	f8a4 11a0 	strh.w	r1, [r4, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
    f4ca:	f8a4 31a2 	strh.w	r3, [r4, #418]	; 0x1a2
			if (tx) {
    f4ce:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
    f4d2:	2f00      	cmp	r7, #0
    f4d4:	d048      	beq.n	f568 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb08>
				conn->llcp_length.state =
    f4d6:	2505      	movs	r5, #5
				conn->llcp_length.state =
    f4d8:	f365 0002 	bfi	r0, r5, #0, #3
    f4dc:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
			link->mem = conn->llcp_rx;
    f4e0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    f4e4:	f8c8 0004 	str.w	r0, [r8, #4]
			(*rx)->hdr.link = link;
    f4e8:	6830      	ldr	r0, [r6, #0]
    f4ea:	f8c0 8000 	str.w	r8, [r0]
			conn->llcp_rx = *rx;
    f4ee:	6830      	ldr	r0, [r6, #0]
    f4f0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
			*rx = NULL;
    f4f4:	2000      	movs	r0, #0
    f4f6:	6030      	str	r0, [r6, #0]
	if (tx) {
    f4f8:	2f00      	cmp	r7, #0
    f4fa:	f43f aa3b 	beq.w	e974 <ull_conn_rx+0x368>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f4fe:	7938      	ldrb	r0, [r7, #4]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
    f500:	8179      	strh	r1, [r7, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f502:	f040 0003 	orr.w	r0, r0, #3
    f506:	7138      	strb	r0, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f508:	2009      	movs	r0, #9
    f50a:	7178      	strb	r0, [r7, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f50c:	2015      	movs	r0, #21
    f50e:	71f8      	strb	r0, [r7, #7]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
    f510:	f8a7 c008 	strh.w	ip, [r7, #8]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
    f514:	81ba      	strh	r2, [r7, #12]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
    f516:	81fb      	strh	r3, [r7, #14]
	ctrl_tx_sec_enqueue(conn, tx);
    f518:	4639      	mov	r1, r7
    f51a:	4620      	mov	r0, r4
    f51c:	f00b fb26 	bl	1ab6c <ctrl_tx_sec_enqueue>
    f520:	f7ff ba28 	b.w	e974 <ull_conn_rx+0x368>
	struct node_tx *tx = NULL;
    f524:	2700      	movs	r7, #0
    f526:	e78d      	b.n	f444 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e4>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    f528:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
    f52c:	f012 0f06 	tst.w	r2, #6
    f530:	d101      	bne.n	f536 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xad6>
		(conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT)) &&
    f532:	2b14      	cmp	r3, #20
    f534:	d09c      	beq.n	f470 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa10>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    f536:	f002 0207 	and.w	r2, r2, #7
    f53a:	2a02      	cmp	r2, #2
    f53c:	d14c      	bne.n	f5d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb78>
	      ((conn->llcp_length.state == LLCP_LENGTH_STATE_RSP_WAIT) &&
    f53e:	3b14      	subs	r3, #20
    f540:	2b01      	cmp	r3, #1
    f542:	d995      	bls.n	f470 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa10>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
    f544:	f241 2316 	movw	r3, #4630	; 0x1216
    f548:	4a27      	ldr	r2, [pc, #156]	; (f5e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb88>)
    f54a:	492d      	ldr	r1, [pc, #180]	; (f600 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xba0>)
    f54c:	4828      	ldr	r0, [pc, #160]	; (f5f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb90>)
    f54e:	f008 fdf1 	bl	18134 <printk>
    f552:	4040      	eors	r0, r0
    f554:	f380 8811 	msr	BASEPRI, r0
    f558:	f04f 0003 	mov.w	r0, #3
    f55c:	df02      	svc	2
    f55e:	e03d      	b.n	f5dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb7c>
	eff_tx_octets = conn->lll.max_tx_octets;
    f560:	464a      	mov	r2, r9
    f562:	e78d      	b.n	f480 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa20>
	eff_tx_time = conn->lll.max_tx_time;
    f564:	465b      	mov	r3, fp
    f566:	e79c      	b.n	f4a2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa42>
				conn->lll.max_tx_octets = eff_tx_octets;
    f568:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
    f56c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
				conn->llcp_length.state =
    f570:	2504      	movs	r5, #4
    f572:	e7b1      	b.n	f4d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa78>
			conn->llcp_length.ack = conn->llcp_length.req;
    f574:	9801      	ldr	r0, [sp, #4]
    f576:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
			conn->procedure_expire = 0U;
    f57a:	f04f 0e00 	mov.w	lr, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    f57e:	4591      	cmp	r9, r2
			conn->procedure_expire = 0U;
    f580:	f8a4 e0cc 	strh.w	lr, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    f584:	d107      	bne.n	f596 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb36>
    f586:	459b      	cmp	fp, r3
    f588:	d105      	bne.n	f596 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb36>
			    eff_rx_time == conn->lll.max_rx_time &&
    f58a:	458a      	cmp	sl, r1
    f58c:	d103      	bne.n	f596 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb36>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f58e:	6830      	ldr	r0, [r6, #0]
    f590:	2503      	movs	r5, #3
    f592:	7105      	strb	r5, [r0, #4]
				goto send_length_resp;
    f594:	e7b0      	b.n	f4f8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa98>
			conn->lll.max_rx_time = eff_rx_time;
    f596:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
			if (tx) {
    f59a:	b1c7      	cbz	r7, f5ce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb6e>
					(conn->llcp_length.req - 1);
    f59c:	9801      	ldr	r0, [sp, #4]
				conn->llcp_length.rx_octets = eff_rx_octets;
    f59e:	f8a4 c19c 	strh.w	ip, [r4, #412]	; 0x19c
					(conn->llcp_length.req - 1);
    f5a2:	3801      	subs	r0, #1
				conn->llcp_length.ack =
    f5a4:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
				conn->llcp_length.state =
    f5a8:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_octets = eff_tx_octets;
    f5ac:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.state =
    f5b0:	2603      	movs	r6, #3
    f5b2:	f366 0002 	bfi	r0, r6, #0, #3
				conn->llcp_length.rx_time = eff_rx_time;
    f5b6:	f8a4 11a0 	strh.w	r1, [r4, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
    f5ba:	f8a4 31a2 	strh.w	r3, [r4, #418]	; 0x1a2
				conn->llcp_length.state =
    f5be:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
    f5c2:	f8a5 c024 	strh.w	ip, [r5, #36]	; 0x24
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
    f5c6:	852a      	strh	r2, [r5, #40]	; 0x28
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
    f5c8:	84e9      	strh	r1, [r5, #38]	; 0x26
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
    f5ca:	856b      	strh	r3, [r5, #42]	; 0x2a
    f5cc:	e794      	b.n	f4f8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa98>
				conn->lll.max_tx_octets = eff_tx_octets;
    f5ce:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
    f5d2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    f5d6:	e7f4      	b.n	f5c2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb62>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
    f5d8:	2b15      	cmp	r3, #21
    f5da:	d1b3      	bne.n	f544 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xae4>
	eff_tx_time = conn->lll.max_tx_time;
    f5dc:	465b      	mov	r3, fp
	eff_rx_time = conn->lll.max_rx_time;
    f5de:	4651      	mov	r1, sl
	eff_tx_octets = conn->lll.max_tx_octets;
    f5e0:	464a      	mov	r2, r9
	eff_rx_octets = conn->lll.max_rx_octets;
    f5e2:	f8dd c000 	ldr.w	ip, [sp]
    f5e6:	e787      	b.n	f4f8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa98>
    f5e8:	00020ce6 	.word	0x00020ce6
    f5ec:	00020dcd 	.word	0x00020dcd
    f5f0:	0001ff46 	.word	0x0001ff46
    f5f4:	20001080 	.word	0x20001080
    f5f8:	00020df4 	.word	0x00020df4
    f5fc:	20001100 	.word	0x20001100
    f600:	00020e0a 	.word	0x00020e0a
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
    f604:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    f608:	2016      	movs	r0, #22
    f60a:	f7fe fbef 	bl	ddec <pdu_len_cmp>
    f60e:	2800      	cmp	r0, #0
    f610:	f000 820d 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		if (!conn->lll.role) {
    f614:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f618:	2b00      	cmp	r3, #0
    f61a:	db6d      	blt.n	f6f8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc98>
			if ((conn->llcp_phy.ack !=
    f61c:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
    f620:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
    f624:	428b      	cmp	r3, r1
    f626:	d00a      	beq.n	f63e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbde>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    f628:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    f62c:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
    f630:	3a01      	subs	r2, #1
    f632:	2a02      	cmp	r2, #2
    f634:	d803      	bhi.n	f63e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbde>
				nack = reject_ext_ind_send(conn, *rx,
    f636:	2323      	movs	r3, #35	; 0x23
				nack = reject_ext_ind_send(conn, *rx,
    f638:	2216      	movs	r2, #22
    f63a:	f7ff bb37 	b.w	ecac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24c>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    f63e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    f642:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
    f646:	1a12      	subs	r2, r2, r0
    f648:	f002 0203 	and.w	r2, r2, #3
    f64c:	2a02      	cmp	r2, #2
    f64e:	d103      	bne.n	f658 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbf8>
				      0x03) == 0x02) &&
    f650:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
    f654:	2a03      	cmp	r2, #3
    f656:	d105      	bne.n	f664 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc04>
				     LLCP_ENCRYPTION)) ||
    f658:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
    f65c:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
    f660:	4290      	cmp	r0, r2
    f662:	d001      	beq.n	f668 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc08>
				nack = reject_ext_ind_send(conn, *rx,
    f664:	232a      	movs	r3, #42	; 0x2a
    f666:	e7e7      	b.n	f638 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd8>
				conn->llcp_phy.state =
    f668:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
    f66c:	428b      	cmp	r3, r1
				conn->llcp_phy.state =
    f66e:	f042 0203 	orr.w	r2, r2, #3
    f672:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
    f676:	d116      	bne.n	f6a6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc46>
					conn->llcp_phy.ack--;
    f678:	3b01      	subs	r3, #1
    f67a:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
					conn->llcp_phy.cmd = 0U;
    f67e:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
						conn->phy_pref_tx;
    f682:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
					conn->llcp_phy.cmd = 0U;
    f686:	f36f 0382 	bfc	r3, #2, #1
    f68a:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
					conn->llcp_phy.tx =
    f68e:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
						conn->phy_pref_tx;
    f692:	f3c2 0102 	ubfx	r1, r2, #0, #3
					conn->llcp_phy.tx =
    f696:	f361 0384 	bfi	r3, r1, #2, #3
						conn->phy_pref_rx;
    f69a:	f3c2 1202 	ubfx	r2, r2, #4, #3
					conn->llcp_phy.rx =
    f69e:	f362 1347 	bfi	r3, r2, #5, #3
    f6a2:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
    f6a6:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    f6aa:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    f6ae:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f6b2:	400a      	ands	r2, r1
    f6b4:	f362 0384 	bfi	r3, r2, #2, #3
    f6b8:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				conn->llcp_phy.rx &= p->tx_phys;
    f6bc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    f6c0:	b2db      	uxtb	r3, r3
    f6c2:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f6c6:	f362 1347 	bfi	r3, r2, #5, #3
    f6ca:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    f6ce:	b2db      	uxtb	r3, r3
    f6d0:	f013 0f1c 	tst.w	r3, #28
    f6d4:	d002      	beq.n	f6dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc7c>
    f6d6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    f6da:	d105      	bne.n	f6e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc88>
					conn->llcp_phy.tx = 0;
    f6dc:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    f6e0:	f003 0303 	and.w	r3, r3, #3
    f6e4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				conn->llcp_phy.pause_tx = 1U;
    f6e8:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    f6ec:	f043 0301 	orr.w	r3, r3, #1
    f6f0:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f6f4:	f7ff b961 	b.w	e9ba <ull_conn_rx+0x3ae>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f6f8:	48db      	ldr	r0, [pc, #876]	; (fa68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1008>)
    f6fa:	f00a fead 	bl	1a458 <mem_acquire>
	if (!tx) {
    f6fe:	4601      	mov	r1, r0
    f700:	2800      	cmp	r0, #0
    f702:	f43f aa18 	beq.w	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f706:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
    f70a:	f894 c1a9 	ldrb.w	ip, [r4, #425]	; 0x1a9
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f70e:	2202      	movs	r2, #2
    f710:	f362 0301 	bfi	r3, r2, #0, #2
    f714:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
    f718:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    f71c:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    f720:	f3c2 0002 	ubfx	r0, r2, #0, #3
    f724:	4563      	cmp	r3, ip
    f726:	f3c2 1202 	ubfx	r2, r2, #4, #3
    f72a:	b2c7      	uxtb	r7, r0
    f72c:	b2d6      	uxtb	r6, r2
    f72e:	d114      	bne.n	f75a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcfa>
		conn->llcp_phy.ack--;
    f730:	3b01      	subs	r3, #1
    f732:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		conn->llcp_phy.cmd = 0U;
    f736:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    f73a:	f36f 0382 	bfc	r3, #2, #1
    f73e:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.tx =
    f742:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    f746:	f367 0384 	bfi	r3, r7, #2, #3
		conn->llcp_phy.rx =
    f74a:	f366 1347 	bfi	r3, r6, #5, #3
    f74e:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->procedure_expire =
    f752:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    f756:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	conn->llcp_phy.tx &= p->rx_phys;
    f75a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    f75e:	f895 6025 	ldrb.w	r6, [r5, #37]	; 0x25
    f762:	f3c3 0782 	ubfx	r7, r3, #2, #3
    f766:	403e      	ands	r6, r7
    f768:	f366 0384 	bfi	r3, r6, #2, #3
    f76c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	conn->llcp_phy.rx &= p->tx_phys;
    f770:	f895 6024 	ldrb.w	r6, [r5, #36]	; 0x24
    f774:	b2db      	uxtb	r3, r3
    f776:	ea06 1653 	and.w	r6, r6, r3, lsr #5
    f77a:	f366 1347 	bfi	r3, r6, #5, #3
    f77e:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	conn->llcp_phy.pause_tx = 1U;
    f782:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    f786:	f043 0301 	orr.w	r3, r3, #1
    f78a:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f78e:	790b      	ldrb	r3, [r1, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    f790:	7208      	strb	r0, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f792:	f043 0303 	orr.w	r3, r3, #3
    f796:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    f798:	2603      	movs	r6, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f79a:	2317      	movs	r3, #23
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    f79c:	714e      	strb	r6, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f79e:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    f7a0:	724a      	strb	r2, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
    f7a2:	4620      	mov	r0, r4
    f7a4:	f00b fa1c 	bl	1abe0 <ctrl_tx_enqueue>
    f7a8:	f7ff b92a 	b.w	ea00 <ull_conn_rx+0x3f4>
		if (conn->lll.role ||
    f7ac:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f7b0:	2b00      	cmp	r3, #0
    f7b2:	f2c0 813c 	blt.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP, pdu_rx->len)) {
    f7b6:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    f7ba:	2017      	movs	r0, #23
    f7bc:	f7fe fb16 	bl	ddec <pdu_len_cmp>
		if (conn->lll.role ||
    f7c0:	2800      	cmp	r0, #0
    f7c2:	f000 8134 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		if (!conn->lll.role &&
    f7c6:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    f7ca:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    f7ce:	429a      	cmp	r2, r3
    f7d0:	f43e af27 	beq.w	e622 <ull_conn_rx+0x16>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    f7d4:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f7d8:	f003 0203 	and.w	r2, r3, #3
    f7dc:	2a02      	cmp	r2, #2
    f7de:	f47e af20 	bne.w	e622 <ull_conn_rx+0x16>
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    f7e2:	f043 0303 	orr.w	r3, r3, #3
    f7e6:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.tx &= p->rx_phys;
    f7ea:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    f7ee:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f7f2:	400a      	ands	r2, r1
    f7f4:	f362 0384 	bfi	r3, r2, #2, #3
    f7f8:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.rx &= p->tx_phys;
    f7fc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    f800:	b2db      	uxtb	r3, r3
    f802:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f806:	f362 1347 	bfi	r3, r2, #5, #3
    f80a:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    f80e:	b2db      	uxtb	r3, r3
    f810:	f013 0f1c 	tst.w	r3, #28
    f814:	d002      	beq.n	f81c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdbc>
    f816:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    f81a:	d105      	bne.n	f828 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc8>
				conn->llcp_phy.tx = 0;
    f81c:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    f820:	f003 0303 	and.w	r3, r3, #3
    f824:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
    f828:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    f82c:	f043 0301 	orr.w	r3, r3, #1
    f830:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
    f834:	2300      	movs	r3, #0
    f836:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f83a:	f7fe bef2 	b.w	e622 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
    f83e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f842:	2b00      	cmp	r3, #0
    f844:	f280 80f3 	bge.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    f848:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    f84c:	2018      	movs	r0, #24
    f84e:	f7fe facd 	bl	ddec <pdu_len_cmp>
		if (!conn->lll.role ||
    f852:	2800      	cmp	r0, #0
    f854:	f000 80eb 	beq.w	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    f858:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    f85c:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
    f860:	ea41 0007 	orr.w	r0, r1, r7
    f864:	f010 0007 	ands.w	r0, r0, #7
    f868:	d135      	bne.n	f8d6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe76>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f86a:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
    f86e:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f872:	4293      	cmp	r3, r2
    f874:	f43e aed5 	beq.w	e622 <ull_conn_rx+0x16>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    f878:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f87c:	f003 0303 	and.w	r3, r3, #3
    f880:	2b02      	cmp	r3, #2
    f882:	f47e aece 	bne.w	e622 <ull_conn_rx+0x16>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f886:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f88a:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    f88e:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
    f892:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f896:	f3c2 0102 	ubfx	r1, r2, #0, #3
		conn->llcp_phy.pause_tx = 0U;
    f89a:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f89e:	f361 1206 	bfi	r2, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    f8a2:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f8a6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		if (!conn->llcp_phy.cmd) {
    f8aa:	f013 0304 	ands.w	r3, r3, #4
    f8ae:	6832      	ldr	r2, [r6, #0]
    f8b0:	d103      	bne.n	f8ba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe5a>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    f8b2:	2103      	movs	r1, #3
    f8b4:	7111      	strb	r1, [r2, #4]
		if (err) {
    f8b6:	f7ff b85d 	b.w	e974 <ull_conn_rx+0x368>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f8ba:	230e      	movs	r3, #14
    f8bc:	7113      	strb	r3, [r2, #4]
		p->status = 0U;
    f8be:	f885 0020 	strb.w	r0, [r5, #32]
		p->tx = conn->lll.phy_tx;
    f8c2:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
		p->rx = conn->lll.phy_rx;
    f8c6:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    f8ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f8ce:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
		if (err) {
    f8d2:	f7ff b932 	b.w	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
	instant = sys_le16_to_cpu(ind->instant);
    f8d6:	8cea      	ldrh	r2, [r5, #38]	; 0x26
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    f8d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    f8da:	1ad3      	subs	r3, r2, r3
    f8dc:	041b      	lsls	r3, r3, #16
    f8de:	f53e af69 	bmi.w	e7b4 <ull_conn_rx+0x1a8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    f8e2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    f8e6:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
    f8ea:	1a1b      	subs	r3, r3, r0
    f8ec:	f003 0303 	and.w	r3, r3, #3
    f8f0:	2b02      	cmp	r3, #2
    f8f2:	f43e af6e 	beq.w	e7d2 <ull_conn_rx+0x1c6>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f8f6:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
    f8fa:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    f8fe:	4283      	cmp	r3, r0
    f900:	d018      	beq.n	f934 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xed4>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    f902:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f906:	f003 0303 	and.w	r3, r3, #3
    f90a:	2b02      	cmp	r3, #2
    f90c:	d112      	bne.n	f934 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xed4>
		conn->llcp_phy.pause_tx = 0U;
    f90e:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f912:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->procedure_expire = 0U;
    f916:	2000      	movs	r0, #0
		conn->llcp_phy.pause_tx = 0U;
    f918:	f36f 0300 	bfc	r3, #0, #1
		conn->procedure_expire = 0U;
    f91c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f920:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
		conn->llcp_phy.pause_tx = 0U;
    f924:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f928:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f92c:	f363 0041 	bfi	r0, r3, #1, #1
    f930:	f884 00ec 	strb.w	r0, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f934:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
    f938:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f93c:	f367 0384 	bfi	r3, r7, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    f940:	f361 1347 	bfi	r3, r1, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0U;
    f944:	f36f 0300 	bfc	r3, #0, #1
    f948:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
    f94c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f950:	f8c8 3004 	str.w	r3, [r8, #4]
	(*rx)->hdr.link = link;
    f954:	6833      	ldr	r3, [r6, #0]
    f956:	f8c3 8000 	str.w	r8, [r3]
	conn->llcp_rx = *rx;
    f95a:	6833      	ldr	r3, [r6, #0]
    f95c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
    f960:	2300      	movs	r3, #0
    f962:	6033      	str	r3, [r6, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
    f964:	f7fc fd5c 	bl	c420 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
    f968:	4605      	mov	r5, r0
    f96a:	b960      	cbnz	r0, f986 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf26>
    f96c:	f241 23d9 	movw	r3, #4825	; 0x12d9
    f970:	4a3e      	ldr	r2, [pc, #248]	; (fa6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100c>)
    f972:	493f      	ldr	r1, [pc, #252]	; (fa70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1010>)
    f974:	483f      	ldr	r0, [pc, #252]	; (fa74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1014>)
    f976:	f008 fbdd 	bl	18134 <printk>
    f97a:	4040      	eors	r0, r0
    f97c:	f380 8811 	msr	BASEPRI, r0
    f980:	f04f 0003 	mov.w	r0, #3
    f984:	df02      	svc	2
	rx_dle->hdr.link->mem = conn->llcp_rx;
    f986:	682b      	ldr	r3, [r5, #0]
    f988:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f98c:	605a      	str	r2, [r3, #4]
	conn->llcp_type = LLCP_PHY_UPD;
    f98e:	2306      	movs	r3, #6
    f990:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
    f994:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp_rx = rx_dle;
    f998:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
	conn->llcp_ack -= 2U;
    f99c:	3b02      	subs	r3, #2
    f99e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
    f9a2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    f9a6:	f013 0f1c 	tst.w	r3, #28
    f9aa:	f43e afe3 	beq.w	e974 <ull_conn_rx+0x368>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    f9ae:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    f9b2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f9b6:	f363 1206 	bfi	r2, r3, #4, #3
    f9ba:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		if (err) {
    f9be:	f7fe bfd9 	b.w	e974 <ull_conn_rx+0x368>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
    f9c2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	db31      	blt.n	fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    f9ca:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    f9ce:	2019      	movs	r0, #25
    f9d0:	f7fe fa0c 	bl	ddec <pdu_len_cmp>
		if (conn->lll.role ||
    f9d4:	b358      	cbz	r0, fa2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfce>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
    f9d6:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
					 conn->lll.phy_rx))) {
    f9da:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
    f9de:	4313      	orrs	r3, r2
    f9e0:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    f9e4:	f003 0307 	and.w	r3, r3, #7
    f9e8:	4213      	tst	r3, r2
    f9ea:	f43e afc3 	beq.w	e974 <ull_conn_rx+0x368>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
    f9ee:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    f9f2:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    f9f6:	1a9b      	subs	r3, r3, r2
    f9f8:	f003 0303 	and.w	r3, r3, #3
    f9fc:	2b02      	cmp	r3, #2
    f9fe:	f43e afb9 	beq.w	e974 <ull_conn_rx+0x368>
			    0x02) {
				break;
			}

			memcpy(&conn->llcp.chan_map.chm[0], data_chan_map,
    fa02:	2205      	movs	r2, #5
    fa04:	491c      	ldr	r1, [pc, #112]	; (fa78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1018>)
    fa06:	f104 00ed 	add.w	r0, r4, #237	; 0xed
    fa0a:	f009 f916 	bl	18c3a <memcpy>
			       sizeof(conn->llcp.chan_map.chm));
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;
    fa0e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    fa12:	f043 0301 	orr.w	r3, r3, #1
    fa16:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec

			conn->llcp_type = LLCP_CHAN_MAP;
    fa1a:	2302      	movs	r3, #2
    fa1c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
    fa20:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    fa24:	3b02      	subs	r3, #2
    fa26:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    fa2a:	f7fe bfc6 	b.w	e9ba <ull_conn_rx+0x3ae>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    fa2e:	480e      	ldr	r0, [pc, #56]	; (fa68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1008>)
    fa30:	f00a fd12 	bl	1a458 <mem_acquire>
	if (!tx) {
    fa34:	4601      	mov	r1, r0
    fa36:	2800      	cmp	r0, #0
    fa38:	f43f a87d 	beq.w	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    fa3c:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
    fa3e:	f880 9008 	strb.w	r9, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    fa42:	f043 0303 	orr.w	r3, r3, #3
    fa46:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    fa48:	2302      	movs	r3, #2
    fa4a:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    fa4c:	2307      	movs	r3, #7
    fa4e:	71c3      	strb	r3, [r0, #7]
	pdu->llctrl.unknown_rsp.type = type;
    fa50:	f7ff b88c 	b.w	eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>
		if (conn->llcp_enc.pause_rx) {
    fa54:	2a00      	cmp	r2, #0
    fa56:	f43e af8d 	beq.w	e974 <ull_conn_rx+0x368>
    fa5a:	f7fe be38 	b.w	e6ce <ull_conn_rx+0xc2>
		if (conn->llcp_enc.pause_rx) {
    fa5e:	2a00      	cmp	r2, #0
    fa60:	f43e afab 	beq.w	e9ba <ull_conn_rx+0x3ae>
    fa64:	f7fe be33 	b.w	e6ce <ull_conn_rx+0xc2>
    fa68:	20001100 	.word	0x20001100
    fa6c:	00020ce6 	.word	0x00020ce6
    fa70:	00020e43 	.word	0x00020e43
    fa74:	0001ff46 	.word	0x0001ff46
    fa78:	2000d107 	.word	0x2000d107
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    fa7c:	2b23      	cmp	r3, #35	; 0x23
    fa7e:	d003      	beq.n	fa88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1028>
			conn->slave.ticks_to_offset =
    fa80:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    fa84:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    fa88:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    fa8c:	f003 0307 	and.w	r3, r3, #7
    fa90:	2b04      	cmp	r3, #4
    fa92:	d118      	bne.n	fac6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1066>
		LL_ASSERT(conn_upd_curr == conn);
    fa94:	4e19      	ldr	r6, [pc, #100]	; (fafc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x109c>)
    fa96:	6832      	ldr	r2, [r6, #0]
    fa98:	4294      	cmp	r4, r2
    fa9a:	d00c      	beq.n	fab6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1056>
    fa9c:	f241 0361 	movw	r3, #4193	; 0x1061
    faa0:	4a17      	ldr	r2, [pc, #92]	; (fb00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10a0>)
    faa2:	4918      	ldr	r1, [pc, #96]	; (fb04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10a4>)
    faa4:	4818      	ldr	r0, [pc, #96]	; (fb08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10a8>)
    faa6:	f008 fb45 	bl	18134 <printk>
    faaa:	4040      	eors	r0, r0
    faac:	f380 8811 	msr	BASEPRI, r0
    fab0:	f04f 0003 	mov.w	r0, #3
    fab4:	df02      	svc	2
		conn_upd_curr = NULL;
    fab6:	2300      	movs	r3, #0
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fab8:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
		conn_upd_curr = NULL;
    fabc:	6033      	str	r3, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fabe:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
    fac2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (!conn->llcp_conn_param.cmd) {
    fac6:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    faca:	071a      	lsls	r2, r3, #28
    facc:	f57e ada9 	bpl.w	e622 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    fad0:	230a      	movs	r3, #10
    fad2:	712b      	strb	r3, [r5, #4]
	cu->status = rej_ext_ind->error_code;
    fad4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    fad8:	f885 3020 	strb.w	r3, [r5, #32]
	cu->latency = lll->latency;
    fadc:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	cu->interval = lll->interval;
    fade:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->latency = lll->latency;
    fae0:	84aa      	strh	r2, [r5, #36]	; 0x24
	cu->timeout = conn->supervision_reload *
    fae2:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	cu->interval = lll->interval;
    fae6:	846b      	strh	r3, [r5, #34]	; 0x22
	cu->timeout = conn->supervision_reload *
    fae8:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
    faea:	237d      	movs	r3, #125	; 0x7d
    faec:	4353      	muls	r3, r2
    faee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    faf2:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
    faf6:	84eb      	strh	r3, [r5, #38]	; 0x26
	if (err) {
    faf8:	f7fe bf3c 	b.w	e974 <ull_conn_rx+0x368>
    fafc:	20001080 	.word	0x20001080
    fb00:	00020ce6 	.word	0x00020ce6
    fb04:	00020df4 	.word	0x00020df4
    fb08:	0001ff46 	.word	0x0001ff46

0000fb0c <ull_conn_done>:
{
    fb0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
    fb10:	6a05      	ldr	r5, [r0, #32]
	if (lll->handle == 0xFFFF) {
    fb12:	8baa      	ldrh	r2, [r5, #28]
    fb14:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fb18:	429a      	cmp	r2, r3
{
    fb1a:	b08b      	sub	sp, #44	; 0x2c
    fb1c:	4680      	mov	r8, r0
	if (lll->handle == 0xFFFF) {
    fb1e:	d00f      	beq.n	fb40 <ull_conn_done+0x34>
	switch (done->extra.mic_state) {
    fb20:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
    fb24:	68ec      	ldr	r4, [r5, #12]
	switch (done->extra.mic_state) {
    fb26:	2b01      	cmp	r3, #1
    fb28:	d032      	beq.n	fb90 <ull_conn_done+0x84>
    fb2a:	b163      	cbz	r3, fb46 <ull_conn_done+0x3a>
    fb2c:	2b02      	cmp	r3, #2
    fb2e:	d035      	beq.n	fb9c <ull_conn_done+0x90>
	reason_peer = conn->llcp_terminate.reason_peer;
    fb30:	f894 612b 	ldrb.w	r6, [r4, #299]	; 0x12b
	if (reason_peer && (
    fb34:	2e00      	cmp	r6, #0
    fb36:	d035      	beq.n	fba4 <ull_conn_done+0x98>
		conn_cleanup(conn, reason_peer);
    fb38:	4631      	mov	r1, r6
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    fb3a:	4620      	mov	r0, r4
    fb3c:	f7fe fa74 	bl	e028 <conn_cleanup>
}
    fb40:	b00b      	add	sp, #44	; 0x2c
    fb42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    fb46:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
    fb4a:	0719      	lsls	r1, r3, #28
    fb4c:	d403      	bmi.n	fb56 <ull_conn_done+0x4a>
    fb4e:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    fb52:	07da      	lsls	r2, r3, #31
    fb54:	d5ec      	bpl.n	fb30 <ull_conn_done+0x24>
					    (lll->latency + 6)) ?
    fb56:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
    fb58:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
    fb5c:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
    fb5e:	428a      	cmp	r2, r1
					   (conn->apto_reload -
    fb60:	bfc4      	itt	gt
    fb62:	1ad3      	subgt	r3, r2, r3
    fb64:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
    fb66:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
    fb6a:	bfcc      	ite	gt
    fb6c:	b29b      	uxthgt	r3, r3
    fb6e:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
    fb70:	4299      	cmp	r1, r3
    fb72:	d008      	beq.n	fb86 <ull_conn_done+0x7a>
				conn->appto_reload = appto_reload_new;
    fb74:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
    fb78:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    fb7c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
    fb80:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
    fb84:	e7d4      	b.n	fb30 <ull_conn_done+0x24>
			if (conn->apto_expire == 0U) {
    fb86:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    fb8a:	2b00      	cmp	r3, #0
    fb8c:	d1d0      	bne.n	fb30 <ull_conn_done+0x24>
    fb8e:	e7f3      	b.n	fb78 <ull_conn_done+0x6c>
		conn->appto_expire = conn->apto_expire = 0U;
    fb90:	2300      	movs	r3, #0
    fb92:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
    fb96:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
    fb9a:	e7c9      	b.n	fb30 <ull_conn_done+0x24>
		conn->llcp_terminate.reason_peer =
    fb9c:	233d      	movs	r3, #61	; 0x3d
    fb9e:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
		break;
    fba2:	e7c5      	b.n	fb30 <ull_conn_done+0x24>
	latency_event = lll->latency_event;
    fba4:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
    fba8:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
	elapsed_event = latency_event + 1;
    fbac:	f109 0701 	add.w	r7, r9, #1
    fbb0:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
    fbb2:	e9cd 6608 	strd	r6, r6, [sp, #32]
	if (done->extra.trx_cnt) {
    fbb6:	b183      	cbz	r3, fbda <ull_conn_done+0xce>
		} else if (lll->role) {
    fbb8:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
    fbbc:	2b00      	cmp	r3, #0
    fbbe:	da09      	bge.n	fbd4 <ull_conn_done+0xc8>
			ull_slave_done(done, &ticks_drift_plus,
    fbc0:	aa08      	add	r2, sp, #32
    fbc2:	a909      	add	r1, sp, #36	; 0x24
    fbc4:	4640      	mov	r0, r8
    fbc6:	f7f2 f91b 	bl	1e00 <ull_slave_done>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
    fbca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    fbce:	b15b      	cbz	r3, fbe8 <ull_conn_done+0xdc>
				lll->latency_event = 0;
    fbd0:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
    fbd2:	84ab      	strh	r3, [r5, #36]	; 0x24
		conn->connect_expire = 0U;
    fbd4:	2300      	movs	r3, #0
    fbd6:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
    fbda:	f898 302a 	ldrb.w	r3, [r8, #42]	; 0x2a
    fbde:	b183      	cbz	r3, fc02 <ull_conn_done+0xf6>
		conn->supervision_expire = 0U;
    fbe0:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
    fbe2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    fbe6:	e014      	b.n	fc12 <ull_conn_done+0x106>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
    fbe8:	4632      	mov	r2, r6
    fbea:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
    fbee:	f00a fc98 	bl	1a522 <memq_peek>
    fbf2:	2800      	cmp	r0, #0
    fbf4:	d1ec      	bne.n	fbd0 <ull_conn_done+0xc4>
			} else if (lll->slave.latency_enabled) {
    fbf6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    fbfa:	07db      	lsls	r3, r3, #31
    fbfc:	d5ea      	bpl.n	fbd4 <ull_conn_done+0xc8>
				lll->latency_event = lll->latency;
    fbfe:	8c2b      	ldrh	r3, [r5, #32]
    fc00:	e7e7      	b.n	fbd2 <ull_conn_done+0xc6>
	else if (conn->connect_expire) {
    fc02:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fc06:	b3c3      	cbz	r3, fc7a <ull_conn_done+0x16e>
		if (conn->connect_expire > elapsed_event) {
    fc08:	42bb      	cmp	r3, r7
    fc0a:	d934      	bls.n	fc76 <ull_conn_done+0x16a>
			conn->connect_expire -= elapsed_event;
    fc0c:	1bdb      	subs	r3, r3, r7
    fc0e:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
    fc12:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fc16:	b1eb      	cbz	r3, fc54 <ull_conn_done+0x148>
		if (conn->supervision_expire > elapsed_event) {
    fc18:	42bb      	cmp	r3, r7
    fc1a:	d935      	bls.n	fc88 <ull_conn_done+0x17c>
			conn->supervision_expire -= elapsed_event;
    fc1c:	1bdb      	subs	r3, r3, r7
    fc1e:	b29b      	uxth	r3, r3
			lll->latency_event = 0;
    fc20:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
    fc22:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
    fc24:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0;
    fc28:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
    fc2a:	d92f      	bls.n	fc8c <ull_conn_done+0x180>
			else if (lll->role) {
    fc2c:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
    fc30:	4293      	cmp	r3, r2
    fc32:	da0f      	bge.n	fc54 <ull_conn_done+0x148>
				if (latency_event) {
    fc34:	f1b9 0f00 	cmp.w	r9, #0
    fc38:	d128      	bne.n	fc8c <ull_conn_done+0x180>
					force = conn->slave.force & 0x01;
    fc3a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1;
    fc3e:	085a      	lsrs	r2, r3, #1
					if (force) {
    fc40:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
    fc44:	bf17      	itett	ne
    fc46:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1;
    fc4a:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
    fc4e:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
    fc52:	461e      	movne	r6, r3
	if (conn->procedure_expire != 0U) {
    fc54:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    fc58:	b123      	cbz	r3, fc64 <ull_conn_done+0x158>
		if (conn->procedure_expire > elapsed_event) {
    fc5a:	42bb      	cmp	r3, r7
    fc5c:	d918      	bls.n	fc90 <ull_conn_done+0x184>
			conn->procedure_expire -= elapsed_event;
    fc5e:	1bdb      	subs	r3, r3, r7
    fc60:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
    fc64:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    fc68:	b323      	cbz	r3, fcb4 <ull_conn_done+0x1a8>
		if (conn->apto_expire > elapsed_event) {
    fc6a:	42bb      	cmp	r3, r7
    fc6c:	d912      	bls.n	fc94 <ull_conn_done+0x188>
			conn->apto_expire -= elapsed_event;
    fc6e:	1bdb      	subs	r3, r3, r7
				conn->apto_expire = 1U;
    fc70:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
    fc74:	e01e      	b.n	fcb4 <ull_conn_done+0x1a8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    fc76:	213e      	movs	r1, #62	; 0x3e
    fc78:	e75f      	b.n	fb3a <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
    fc7a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d1c7      	bne.n	fc12 <ull_conn_done+0x106>
			conn->supervision_expire = conn->supervision_reload;
    fc82:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fc86:	e7ac      	b.n	fbe2 <ull_conn_done+0xd6>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
    fc88:	2108      	movs	r1, #8
    fc8a:	e756      	b.n	fb3a <ull_conn_done+0x2e>
				force = 1U;
    fc8c:	2601      	movs	r6, #1
    fc8e:	e7e1      	b.n	fc54 <ull_conn_done+0x148>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
    fc90:	2122      	movs	r1, #34	; 0x22
    fc92:	e752      	b.n	fb3a <ull_conn_done+0x2e>
			rx = ll_pdu_rx_alloc();
    fc94:	f7fc fbc4 	bl	c420 <ll_pdu_rx_alloc>
			if (rx) {
    fc98:	4601      	mov	r1, r0
    fc9a:	b320      	cbz	r0, fce6 <ull_conn_done+0x1da>
				conn->apto_expire = 0U;
    fc9c:	2300      	movs	r3, #0
    fc9e:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->handle = lll->handle;
    fca2:	8bab      	ldrh	r3, [r5, #28]
    fca4:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
    fca6:	230c      	movs	r3, #12
    fca8:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
    fcaa:	6800      	ldr	r0, [r0, #0]
    fcac:	f7fc fb90 	bl	c3d0 <ll_rx_put>
				ll_rx_sched();
    fcb0:	f7fc fb98 	bl	c3e4 <ll_rx_sched>
	if (conn->appto_expire != 0U) {
    fcb4:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
    fcb8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    fcbc:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
    fcc0:	b122      	cbz	r2, fccc <ull_conn_done+0x1c0>
		if (conn->appto_expire > elapsed_event) {
    fcc2:	42ba      	cmp	r2, r7
    fcc4:	d911      	bls.n	fcea <ull_conn_done+0x1de>
			conn->appto_expire -= elapsed_event;
    fcc6:	1bd7      	subs	r7, r2, r7
    fcc8:	f8a4 70d0 	strh.w	r7, [r4, #208]	; 0xd0
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    fccc:	1a5b      	subs	r3, r3, r1
    fcce:	f003 0303 	and.w	r3, r3, #3
    fcd2:	2b02      	cmp	r3, #2
    fcd4:	d118      	bne.n	fd08 <ull_conn_done+0x1fc>
	    ((conn->llcp_type == LLCP_CONN_UPD) ||
    fcd6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    fcda:	3b01      	subs	r3, #1
    fcdc:	2b01      	cmp	r3, #1
		lll->latency_event = 0;
    fcde:	bf9c      	itt	ls
    fce0:	2300      	movls	r3, #0
    fce2:	84ab      	strhls	r3, [r5, #36]	; 0x24
    fce4:	e010      	b.n	fd08 <ull_conn_done+0x1fc>
				conn->apto_expire = 1U;
    fce6:	2301      	movs	r3, #1
    fce8:	e7c2      	b.n	fc70 <ull_conn_done+0x164>
			conn->appto_expire = 0U;
    fcea:	2200      	movs	r2, #0
    fcec:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
    fcf0:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    fcf4:	2a00      	cmp	r2, #0
    fcf6:	d1e9      	bne.n	fccc <ull_conn_done+0x1c0>
    fcf8:	428b      	cmp	r3, r1
    fcfa:	d1e7      	bne.n	fccc <ull_conn_done+0x1c0>
				conn->llcp_type = LLCP_PING;
    fcfc:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
    fcfe:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
    fd00:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
    fd04:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((force) || (latency_event != lll->latency_event)) {
    fd08:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
    fd0a:	b90e      	cbnz	r6, fd10 <ull_conn_done+0x204>
    fd0c:	4589      	cmp	r9, r1
    fd0e:	d031      	beq.n	fd74 <ull_conn_done+0x268>
		lazy = lll->latency_event + 1;
    fd10:	3101      	adds	r1, #1
    fd12:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    fd14:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
    fd18:	ea53 0207 	orrs.w	r2, r3, r7
    fd1c:	d103      	bne.n	fd26 <ull_conn_done+0x21a>
    fd1e:	b911      	cbnz	r1, fd26 <ull_conn_done+0x21a>
	    (lazy != 0U) || (force != 0U)) {
    fd20:	2e00      	cmp	r6, #0
    fd22:	f43f af0d 	beq.w	fb40 <ull_conn_done+0x34>
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    fd26:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    fd28:	4813      	ldr	r0, [pc, #76]	; (fd78 <ull_conn_done+0x26c>)
		struct ll_conn *conn = lll->hdr.parent;
    fd2a:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    fd2c:	9406      	str	r4, [sp, #24]
    fd2e:	e9cd 6004 	strd	r6, r0, [sp, #16]
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    fd32:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    fd34:	2000      	movs	r0, #0
    fd36:	9103      	str	r1, [sp, #12]
    fd38:	e9cd 0001 	strd	r0, r0, [sp, #4]
    fd3c:	9700      	str	r7, [sp, #0]
    fd3e:	b2d2      	uxtb	r2, r2
    fd40:	2101      	movs	r1, #1
    fd42:	f7fa fbd9 	bl	a4f8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fd46:	f030 0302 	bics.w	r3, r0, #2
    fd4a:	f43f aef9 	beq.w	fb40 <ull_conn_done+0x34>
    fd4e:	f7fc fbd3 	bl	c4f8 <ull_disable_mark_get>
    fd52:	4284      	cmp	r4, r0
    fd54:	f43f aef4 	beq.w	fb40 <ull_conn_done+0x34>
    fd58:	f240 43cb 	movw	r3, #1227	; 0x4cb
    fd5c:	4a07      	ldr	r2, [pc, #28]	; (fd7c <ull_conn_done+0x270>)
    fd5e:	4908      	ldr	r1, [pc, #32]	; (fd80 <ull_conn_done+0x274>)
    fd60:	4808      	ldr	r0, [pc, #32]	; (fd84 <ull_conn_done+0x278>)
    fd62:	f008 f9e7 	bl	18134 <printk>
    fd66:	4040      	eors	r0, r0
    fd68:	f380 8811 	msr	BASEPRI, r0
    fd6c:	f04f 0003 	mov.w	r0, #3
    fd70:	df02      	svc	2
    fd72:	e6e5      	b.n	fb40 <ull_conn_done+0x34>
	lazy = 0U;
    fd74:	4631      	mov	r1, r6
    fd76:	e7cd      	b.n	fd14 <ull_conn_done+0x208>
    fd78:	0000df89 	.word	0x0000df89
    fd7c:	00020ce6 	.word	0x00020ce6
    fd80:	00020d39 	.word	0x00020d39
    fd84:	0001ff46 	.word	0x0001ff46

0000fd88 <ull_conn_tx_demux>:
{
    fd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    fd8c:	4e20      	ldr	r6, [pc, #128]	; (fe10 <ull_conn_tx_demux+0x88>)
{
    fd8e:	4604      	mov	r4, r0
    fd90:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
    fd92:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    fd94:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
    fd96:	78f1      	ldrb	r1, [r6, #3]
    fd98:	7832      	ldrb	r2, [r6, #0]
    fd9a:	4299      	cmp	r1, r3
    fd9c:	d02d      	beq.n	fdfa <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
    fd9e:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
    fda2:	eb15 0803 	adds.w	r8, r5, r3
    fda6:	d028      	beq.n	fdfa <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
    fda8:	5ae8      	ldrh	r0, [r5, r3]
    fdaa:	f00a ff2c 	bl	1ac06 <ll_connected_get>
		if (conn) {
    fdae:	f8d8 1004 	ldr.w	r1, [r8, #4]
    fdb2:	b320      	cbz	r0, fdfe <ull_conn_tx_demux+0x76>
			tx->next = NULL;
    fdb4:	2300      	movs	r3, #0
    fdb6:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
    fdb8:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
    fdbc:	b943      	cbnz	r3, fdd0 <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
    fdbe:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
    fdc2:	f8c0 11bc 	str.w	r1, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
    fdc6:	b91b      	cbnz	r3, fdd0 <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
    fdc8:	f8c0 11b0 	str.w	r1, [r0, #432]	; 0x1b0
					conn->tx_data_last = NULL;
    fdcc:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
			if (conn->tx_data_last) {
    fdd0:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
    fdd4:	b103      	cbz	r3, fdd8 <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
    fdd6:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
    fdd8:	f8c0 11c0 	str.w	r1, [r0, #448]	; 0x1c0
	u8_t _first = *first; /* Copy read-index */
    fddc:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
    fdde:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
    fde0:	787a      	ldrb	r2, [r7, #1]
    fde2:	4299      	cmp	r1, r3
    fde4:	d005      	beq.n	fdf2 <ull_conn_tx_demux+0x6a>
	_first += 1U;
    fde6:	3301      	adds	r3, #1
    fde8:	b2db      	uxtb	r3, r3
		_first = 0U;
    fdea:	429a      	cmp	r2, r3
    fdec:	bf08      	it	eq
    fdee:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    fdf0:	70bb      	strb	r3, [r7, #2]
	} while (--count);
    fdf2:	3c01      	subs	r4, #1
    fdf4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    fdf8:	d1cc      	bne.n	fd94 <ull_conn_tx_demux+0xc>
}
    fdfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
    fdfe:	790b      	ldrb	r3, [r1, #4]
    fe00:	f360 0301 	bfi	r3, r0, #0, #2
    fe04:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
    fe06:	f64f 70ff 	movw	r0, #65535	; 0xffff
    fe0a:	f7fc fb1f 	bl	c44c <ll_tx_ack_put>
    fe0e:	e7e5      	b.n	fddc <ull_conn_tx_demux+0x54>
    fe10:	2000cea4 	.word	0x2000cea4

0000fe14 <ull_conn_tx_lll_enqueue>:
{
    fe14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
    fe18:	4e56      	ldr	r6, [pc, #344]	; (ff74 <ull_conn_tx_lll_enqueue+0x160>)
		LL_ASSERT(link);
    fe1a:	4f57      	ldr	r7, [pc, #348]	; (ff78 <ull_conn_tx_lll_enqueue+0x164>)
    fe1c:	f8df 8160 	ldr.w	r8, [pc, #352]	; ff80 <ull_conn_tx_lll_enqueue+0x16c>
{
    fe20:	4604      	mov	r4, r0
    fe22:	460d      	mov	r5, r1
	while (conn->tx_head &&
    fe24:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    fe28:	b1f3      	cbz	r3, fe68 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_phy.pause_tx &&
    fe2a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
    fe2e:	07d1      	lsls	r1, r2, #31
    fe30:	f100 809a 	bmi.w	ff68 <ull_conn_tx_lll_enqueue+0x154>
		 !conn->llcp_enc.pause_tx &&
    fe34:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
    fe38:	0792      	lsls	r2, r2, #30
    fe3a:	f100 8095 	bmi.w	ff68 <ull_conn_tx_lll_enqueue+0x154>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    fe3e:	791a      	ldrb	r2, [r3, #4]
    fe40:	f002 0203 	and.w	r2, r2, #3
    fe44:	2a03      	cmp	r2, #3
    fe46:	d10e      	bne.n	fe66 <ull_conn_tx_lll_enqueue+0x52>
	    ((pdu_data_tx->llctrl.opcode ==
    fe48:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    fe4a:	2a03      	cmp	r2, #3
    fe4c:	d001      	beq.n	fe52 <ull_conn_tx_lll_enqueue+0x3e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    fe4e:	2a0a      	cmp	r2, #10
    fe50:	d109      	bne.n	fe66 <ull_conn_tx_lll_enqueue+0x52>
		if (((conn->llcp_req != conn->llcp_ack) &&
    fe52:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
    fe56:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    fe5a:	428a      	cmp	r2, r1
    fe5c:	d041      	beq.n	fee2 <ull_conn_tx_lll_enqueue+0xce>
    fe5e:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
    fe62:	2a03      	cmp	r2, #3
    fe64:	d15b      	bne.n	ff1e <ull_conn_tx_lll_enqueue+0x10a>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
    fe66:	b90d      	cbnz	r5, fe6c <ull_conn_tx_lll_enqueue+0x58>
}
    fe68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx = tx_ull_dequeue(conn, conn->tx_head);
    fe6c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    fe70:	4620      	mov	r0, r4
    fe72:	f00a fe48 	bl	1ab06 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    fe76:	7903      	ldrb	r3, [r0, #4]
    fe78:	f003 0303 	and.w	r3, r3, #3
    fe7c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
    fe7e:	4681      	mov	r9, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    fe80:	d114      	bne.n	feac <ull_conn_tx_lll_enqueue+0x98>
	switch (pdu_tx->llctrl.opcode) {
    fe82:	79c3      	ldrb	r3, [r0, #7]
    fe84:	3b03      	subs	r3, #3
    fe86:	2b08      	cmp	r3, #8
    fe88:	d810      	bhi.n	feac <ull_conn_tx_lll_enqueue+0x98>
    fe8a:	e8df f003 	tbb	[pc, r3]
    fe8e:	0909      	.short	0x0909
    fe90:	0f0f0f0f 	.word	0x0f0f0f0f
    fe94:	090f      	.short	0x090f
    fe96:	05          	.byte	0x05
    fe97:	00          	.byte	0x00
		if (!conn->lll.role) {
    fe98:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    fe9c:	2b00      	cmp	r3, #0
    fe9e:	da05      	bge.n	feac <ull_conn_tx_lll_enqueue+0x98>
		conn->llcp_enc.pause_tx = 1U;
    fea0:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    fea4:	f043 0302 	orr.w	r3, r3, #2
    fea8:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
    feac:	4630      	mov	r0, r6
    feae:	f00a fad3 	bl	1a458 <mem_acquire>
		LL_ASSERT(link);
    feb2:	4682      	mov	sl, r0
    feb4:	b960      	cbnz	r0, fed0 <ull_conn_tx_lll_enqueue+0xbc>
    feb6:	f240 5345 	movw	r3, #1349	; 0x545
    feba:	463a      	mov	r2, r7
    febc:	4641      	mov	r1, r8
    febe:	482f      	ldr	r0, [pc, #188]	; (ff7c <ull_conn_tx_lll_enqueue+0x168>)
    fec0:	f008 f938 	bl	18134 <printk>
    fec4:	4040      	eors	r0, r0
    fec6:	f380 8811 	msr	BASEPRI, r0
    feca:	f04f 0003 	mov.w	r0, #3
    fece:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    fed0:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    fed4:	4649      	mov	r1, r9
    fed6:	4650      	mov	r0, sl
    fed8:	3d01      	subs	r5, #1
    feda:	f00a fb1b 	bl	1a514 <memq_enqueue>
    fede:	b2ed      	uxtb	r5, r5
    fee0:	e7a0      	b.n	fe24 <ull_conn_tx_lll_enqueue+0x10>
		    ((conn->llcp_req == conn->llcp_ack) &&
    fee2:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
    fee6:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
    feea:	4288      	cmp	r0, r1
    feec:	d117      	bne.n	ff1e <ull_conn_tx_lll_enqueue+0x10a>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
    feee:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    fef2:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
    fef6:	4288      	cmp	r0, r1
    fef8:	d111      	bne.n	ff1e <ull_conn_tx_lll_enqueue+0x10a>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
    fefa:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
    fefe:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    ff02:	4288      	cmp	r0, r1
    ff04:	d10b      	bne.n	ff1e <ull_conn_tx_lll_enqueue+0x10a>
		       conn->llcp_conn_param.req) ||
    ff06:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
    ff0a:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
    ff0e:	4288      	cmp	r0, r1
    ff10:	d105      	bne.n	ff1e <ull_conn_tx_lll_enqueue+0x10a>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
    ff12:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
    ff16:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
    ff1a:	4288      	cmp	r0, r1
    ff1c:	d016      	beq.n	ff4c <ull_conn_tx_lll_enqueue+0x138>
			if ((tx->next != NULL) &&
    ff1e:	681a      	ldr	r2, [r3, #0]
    ff20:	2a00      	cmp	r2, #0
    ff22:	d0a1      	beq.n	fe68 <ull_conn_tx_lll_enqueue+0x54>
    ff24:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    ff28:	428a      	cmp	r2, r1
    ff2a:	d19d      	bne.n	fe68 <ull_conn_tx_lll_enqueue+0x54>
				conn->tx_head = tx->next;
    ff2c:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
    ff30:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    ff34:	6811      	ldr	r1, [r2, #0]
    ff36:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last->next = tx;
    ff38:	6013      	str	r3, [r2, #0]
				if (!conn->tx_data_last) {
    ff3a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
				conn->tx_data = tx;
    ff3e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
    ff42:	2a00      	cmp	r2, #0
    ff44:	d18f      	bne.n	fe66 <ull_conn_tx_lll_enqueue+0x52>
					conn->tx_data_last = tx;
    ff46:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    ff4a:	e78c      	b.n	fe66 <ull_conn_tx_lll_enqueue+0x52>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    ff4c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    ff50:	2101      	movs	r1, #1
    ff52:	f361 0301 	bfi	r3, r1, #0, #2
    ff56:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_ack -= 2U;
    ff5a:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
    ff5c:	2303      	movs	r3, #3
    ff5e:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
    ff62:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
    ff66:	e77e      	b.n	fe66 <ull_conn_tx_lll_enqueue+0x52>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
    ff68:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    ff6c:	4293      	cmp	r3, r2
    ff6e:	f43f af7a 	beq.w	fe66 <ull_conn_tx_lll_enqueue+0x52>
    ff72:	e779      	b.n	fe68 <ull_conn_tx_lll_enqueue+0x54>
    ff74:	20001184 	.word	0x20001184
    ff78:	00020ce6 	.word	0x00020ce6
    ff7c:	0001ff46 	.word	0x0001ff46
    ff80:	00020dbb 	.word	0x00020dbb

0000ff84 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    ff84:	4901      	ldr	r1, [pc, #4]	; (ff8c <ull_conn_link_tx_release+0x8>)
    ff86:	f00a ba80 	b.w	1a48a <mem_release>
    ff8a:	bf00      	nop
    ff8c:	20001184 	.word	0x20001184

0000ff90 <ull_conn_ack_last_idx_get>:
}
    ff90:	4b01      	ldr	r3, [pc, #4]	; (ff98 <ull_conn_ack_last_idx_get+0x8>)
    ff92:	78d8      	ldrb	r0, [r3, #3]
    ff94:	4770      	bx	lr
    ff96:	bf00      	nop
    ff98:	2000ce60 	.word	0x2000ce60

0000ff9c <ull_conn_ack_peek>:
{
    ff9c:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    ff9e:	4b0a      	ldr	r3, [pc, #40]	; (ffc8 <ull_conn_ack_peek+0x2c>)
    ffa0:	789c      	ldrb	r4, [r3, #2]
    ffa2:	78dd      	ldrb	r5, [r3, #3]
	if (first == last) {
    ffa4:	42ac      	cmp	r4, r5
{
    ffa6:	4606      	mov	r6, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    ffa8:	7818      	ldrb	r0, [r3, #0]
    ffaa:	d00b      	beq.n	ffc4 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
    ffac:	3304      	adds	r3, #4
    ffae:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
    ffb2:	1918      	adds	r0, r3, r4
    ffb4:	d005      	beq.n	ffc2 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
    ffb6:	7035      	strb	r5, [r6, #0]
	*handle = lll_tx->handle;
    ffb8:	5b1b      	ldrh	r3, [r3, r4]
    ffba:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
    ffbc:	6843      	ldr	r3, [r0, #4]
    ffbe:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    ffc0:	6818      	ldr	r0, [r3, #0]
}
    ffc2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    ffc4:	2000      	movs	r0, #0
    ffc6:	e7fc      	b.n	ffc2 <ull_conn_ack_peek+0x26>
    ffc8:	2000ce60 	.word	0x2000ce60

0000ffcc <ull_conn_ack_by_last_peek>:
{
    ffcc:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    ffce:	4b09      	ldr	r3, [pc, #36]	; (fff4 <ull_conn_ack_by_last_peek+0x28>)
    ffd0:	789c      	ldrb	r4, [r3, #2]
    ffd2:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
    ffd4:	4284      	cmp	r4, r0
    ffd6:	d00a      	beq.n	ffee <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
    ffd8:	3304      	adds	r3, #4
    ffda:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
    ffde:	1918      	adds	r0, r3, r4
    ffe0:	d004      	beq.n	ffec <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
    ffe2:	5b1b      	ldrh	r3, [r3, r4]
    ffe4:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
    ffe6:	6843      	ldr	r3, [r0, #4]
    ffe8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    ffea:	6818      	ldr	r0, [r3, #0]
}
    ffec:	bd30      	pop	{r4, r5, pc}
		return NULL;
    ffee:	2000      	movs	r0, #0
    fff0:	e7fc      	b.n	ffec <ull_conn_ack_by_last_peek+0x20>
    fff2:	bf00      	nop
    fff4:	2000ce60 	.word	0x2000ce60

0000fff8 <ull_conn_ack_dequeue>:
{
    fff8:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
    fffa:	4a09      	ldr	r2, [pc, #36]	; (10020 <__kernel_ram_size+0x20>)
	u8_t _first = *first; /* Copy read-index */
    fffc:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    fffe:	78d0      	ldrb	r0, [r2, #3]
   10000:	7811      	ldrb	r1, [r2, #0]
   10002:	7854      	ldrb	r4, [r2, #1]
   10004:	4298      	cmp	r0, r3
   10006:	d009      	beq.n	1001c <__kernel_ram_size+0x1c>
	mem = *((void **)(fifo + _first * size));
   10008:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1000c:	3301      	adds	r3, #1
   1000e:	b2db      	uxtb	r3, r3
		_first = 0U;
   10010:	429c      	cmp	r4, r3
   10012:	bf08      	it	eq
   10014:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   10016:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   10018:	7093      	strb	r3, [r2, #2]
}
   1001a:	bd10      	pop	{r4, pc}
		return NULL;
   1001c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1001e:	e7fc      	b.n	1001a <__kernel_ram_size+0x1a>
   10020:	2000ce60 	.word	0x2000ce60

00010024 <ull_conn_lll_ack_enqueue>:
{
   10024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   10026:	4a12      	ldr	r2, [pc, #72]	; (10070 <ull_conn_lll_ack_enqueue+0x4c>)
   10028:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1002a:	7857      	ldrb	r7, [r2, #1]
   1002c:	7895      	ldrb	r5, [r2, #2]
   1002e:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   10030:	1c63      	adds	r3, r4, #1
   10032:	b2db      	uxtb	r3, r3
		last = 0U;
   10034:	429f      	cmp	r7, r3
   10036:	bf08      	it	eq
   10038:	2300      	moveq	r3, #0
	if (last == first) {
   1003a:	429d      	cmp	r5, r3
   1003c:	d004      	beq.n	10048 <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1003e:	1d15      	adds	r5, r2, #4
   10040:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   10044:	192e      	adds	r6, r5, r4
   10046:	d10f      	bne.n	10068 <ull_conn_lll_ack_enqueue+0x44>
   10048:	f240 5383 	movw	r3, #1411	; 0x583
   1004c:	4a09      	ldr	r2, [pc, #36]	; (10074 <ull_conn_lll_ack_enqueue+0x50>)
   1004e:	490a      	ldr	r1, [pc, #40]	; (10078 <ull_conn_lll_ack_enqueue+0x54>)
   10050:	480a      	ldr	r0, [pc, #40]	; (1007c <ull_conn_lll_ack_enqueue+0x58>)
   10052:	f008 f86f 	bl	18134 <printk>
   10056:	4040      	eors	r0, r0
   10058:	f380 8811 	msr	BASEPRI, r0
   1005c:	f04f 0003 	mov.w	r0, #3
   10060:	df02      	svc	2
	lll_tx->handle = handle;
   10062:	2300      	movs	r3, #0
   10064:	801b      	strh	r3, [r3, #0]
   10066:	deff      	udf	#255	; 0xff
   10068:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1006a:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   1006c:	6071      	str	r1, [r6, #4]
}
   1006e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10070:	2000ce60 	.word	0x2000ce60
   10074:	00020ce6 	.word	0x00020ce6
   10078:	00020d32 	.word	0x00020d32
   1007c:	0001ff46 	.word	0x0001ff46

00010080 <ull_conn_tx_ack>:
{
   10080:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	LL_ASSERT(pdu_tx->len);
   10084:	7953      	ldrb	r3, [r2, #5]
{
   10086:	4606      	mov	r6, r0
   10088:	460f      	mov	r7, r1
   1008a:	4615      	mov	r5, r2
	LL_ASSERT(pdu_tx->len);
   1008c:	b963      	cbnz	r3, 100a8 <ull_conn_tx_ack+0x28>
   1008e:	f240 5392 	movw	r3, #1426	; 0x592
   10092:	4aa2      	ldr	r2, [pc, #648]	; (1031c <ull_conn_tx_ack+0x29c>)
   10094:	49a2      	ldr	r1, [pc, #648]	; (10320 <ull_conn_tx_ack+0x2a0>)
   10096:	48a3      	ldr	r0, [pc, #652]	; (10324 <ull_conn_tx_ack+0x2a4>)
   10098:	f008 f84c 	bl	18134 <printk>
   1009c:	4040      	eors	r0, r0
   1009e:	f380 8811 	msr	BASEPRI, r0
   100a2:	f04f 0003 	mov.w	r0, #3
   100a6:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   100a8:	792b      	ldrb	r3, [r5, #4]
   100aa:	f003 0203 	and.w	r2, r3, #3
   100ae:	2a03      	cmp	r2, #3
   100b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   100b4:	f040 8126 	bne.w	10304 <ull_conn_tx_ack+0x284>
		if (handle != 0xFFFF) {
   100b8:	4296      	cmp	r6, r2
   100ba:	f000 810b 	beq.w	102d4 <ull_conn_tx_ack+0x254>
			conn = ll_conn_get(handle);
   100be:	4630      	mov	r0, r6
   100c0:	f7fe f94a 	bl	e358 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   100c4:	79eb      	ldrb	r3, [r5, #7]
   100c6:	3b02      	subs	r3, #2
			conn = ll_conn_get(handle);
   100c8:	4604      	mov	r4, r0
	switch (pdu_tx->llctrl.opcode) {
   100ca:	2b16      	cmp	r3, #22
   100cc:	d81e      	bhi.n	1010c <ull_conn_tx_ack+0x8c>
   100ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   100d2:	0017      	.short	0x0017
   100d4:	00850037 	.word	0x00850037
   100d8:	001d001d 	.word	0x001d001d
   100dc:	001d001d 	.word	0x001d001d
   100e0:	0053001d 	.word	0x0053001d
   100e4:	001d005a 	.word	0x001d005a
   100e8:	001d008f 	.word	0x001d008f
   100ec:	001d001d 	.word	0x001d001d
   100f0:	001d008c 	.word	0x001d008c
   100f4:	0099001d 	.word	0x0099001d
   100f8:	00d300a1 	.word	0x00d300a1
   100fc:	00fa00da 	.word	0x00fa00da
		u8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   10100:	7a29      	ldrb	r1, [r5, #8]
   10102:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   10104:	bf08      	it	eq
   10106:	2116      	moveq	r1, #22
   10108:	f7fd ff8e 	bl	e028 <conn_cleanup>
		if (link->next == (void *)tx) {
   1010c:	683b      	ldr	r3, [r7, #0]
   1010e:	42ab      	cmp	r3, r5
   10110:	f040 80e2 	bne.w	102d8 <ull_conn_tx_ack+0x258>
			LL_ASSERT(link->next);
   10114:	b965      	cbnz	r5, 10130 <ull_conn_tx_ack+0xb0>
   10116:	f240 539e 	movw	r3, #1438	; 0x59e
   1011a:	4a80      	ldr	r2, [pc, #512]	; (1031c <ull_conn_tx_ack+0x29c>)
   1011c:	4982      	ldr	r1, [pc, #520]	; (10328 <ull_conn_tx_ack+0x2a8>)
   1011e:	4881      	ldr	r0, [pc, #516]	; (10324 <ull_conn_tx_ack+0x2a4>)
   10120:	f008 f808 	bl	18134 <printk>
   10124:	4040      	eors	r0, r0
   10126:	f380 8811 	msr	BASEPRI, r0
   1012a:	f04f 0003 	mov.w	r0, #3
   1012e:	df02      	svc	2
			mem_release(tx, &mem_conn_tx_ctrl.free);
   10130:	497e      	ldr	r1, [pc, #504]	; (1032c <ull_conn_tx_ack+0x2ac>)
   10132:	4628      	mov	r0, r5
   10134:	f00a f9a9 	bl	1a48a <mem_release>
}
   10138:	4620      	mov	r0, r4
   1013a:	b002      	add	sp, #8
   1013c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&conn->llcp.encryption.skd[0],
   10140:	2208      	movs	r2, #8
   10142:	f105 0112 	add.w	r1, r5, #18
   10146:	30ee      	adds	r0, #238	; 0xee
   10148:	f008 fd77 	bl	18c3a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1014c:	2204      	movs	r2, #4
   1014e:	f105 011a 	add.w	r1, r5, #26
   10152:	f104 0098 	add.w	r0, r4, #152	; 0x98
   10156:	f008 fd70 	bl	18c3a <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   1015a:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   1015e:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
   10162:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   10166:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   1016a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1016e:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   10172:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
		break;
   10176:	e7c9      	b.n	1010c <ull_conn_tx_ack+0x8c>
		conn->llcp_enc.pause_tx = 1U;
   10178:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   1017c:	f023 0306 	bic.w	r3, r3, #6
   10180:	f043 0306 	orr.w	r3, r3, #6
   10184:	e7ed      	b.n	10162 <ull_conn_tx_ack+0xe2>
		if (!conn->lll.role) {
   10186:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1018a:	2b00      	cmp	r3, #0
   1018c:	db26      	blt.n	101dc <ull_conn_tx_ack+0x15c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1018e:	792b      	ldrb	r3, [r5, #4]
   10190:	f043 0303 	orr.w	r3, r3, #3
   10194:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   10196:	2317      	movs	r3, #23
   10198:	716b      	strb	r3, [r5, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1019a:	2208      	movs	r2, #8
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1019c:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1019e:	f200 1155 	addw	r1, r0, #341	; 0x155
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   101a2:	71eb      	strb	r3, [r5, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   101a4:	18a8      	adds	r0, r5, r2
   101a6:	f008 fd48 	bl	18c3a <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   101aa:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
   101ae:	742b      	strb	r3, [r5, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   101b0:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   101b4:	746b      	strb	r3, [r5, #17]
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   101b6:	4b5e      	ldr	r3, [pc, #376]	; (10330 <ull_conn_tx_ack+0x2b0>)
   101b8:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   101ba:	6843      	ldr	r3, [r0, #4]
   101bc:	f8d3 8004 	ldr.w	r8, [r3, #4]
   101c0:	f105 0112 	add.w	r1, r5, #18
   101c4:	f1b8 0f00 	cmp.w	r8, #0
   101c8:	d002      	beq.n	101d0 <ull_conn_tx_ack+0x150>
	return api->get_entropy_isr(dev, buffer, length, flags);
   101ca:	2300      	movs	r3, #0
   101cc:	220c      	movs	r2, #12
   101ce:	47c0      	blx	r8
	ctrl_tx_enqueue(conn, *tx);
   101d0:	4629      	mov	r1, r5
   101d2:	4620      	mov	r0, r4
   101d4:	f00a fd04 	bl	1abe0 <ctrl_tx_enqueue>
	*tx = NULL;
   101d8:	2500      	movs	r5, #0
   101da:	e797      	b.n	1010c <ull_conn_tx_ack+0x8c>
			conn->llcp_enc.pause_tx = 1U;
   101dc:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   101e0:	f043 0302 	orr.w	r3, r3, #2
   101e4:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
   101e8:	e790      	b.n	1010c <ull_conn_tx_ack+0x8c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   101ea:	7a2b      	ldrb	r3, [r5, #8]
   101ec:	2b03      	cmp	r3, #3
   101ee:	d18d      	bne.n	1010c <ull_conn_tx_ack+0x8c>
		conn->llcp_enc.pause_rx = 0U;
   101f0:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   101f4:	f023 0303 	bic.w	r3, r3, #3
   101f8:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = 0U;
   101fc:	2300      	movs	r3, #0
   101fe:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   10202:	e783      	b.n	1010c <ull_conn_tx_ack+0x8c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   10204:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   10208:	2202      	movs	r2, #2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1020a:	f362 0302 	bfi	r3, r2, #0, #3
   1020e:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				break;
   10212:	e77b      	b.n	1010c <ull_conn_tx_ack+0x8c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   10214:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   10218:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   1021c:	428b      	cmp	r3, r1
   1021e:	f43f af75 	beq.w	1010c <ull_conn_tx_ack+0x8c>
			switch (conn->llcp_length.state) {
   10222:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   10226:	f003 0007 	and.w	r0, r3, #7
   1022a:	2807      	cmp	r0, #7
   1022c:	f43f af6e 	beq.w	1010c <ull_conn_tx_ack+0x8c>
   10230:	2201      	movs	r2, #1
   10232:	4082      	lsls	r2, r0
   10234:	f012 0f68 	tst.w	r2, #104	; 0x68
   10238:	f43f af68 	beq.w	1010c <ull_conn_tx_ack+0x8c>
				conn->lll.max_tx_octets =
   1023c:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   10240:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				if (conn->llcp_length.state ==
   10244:	2805      	cmp	r0, #5
				conn->lll.max_tx_time =
   10246:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
   1024a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				if (conn->llcp_length.state ==
   1024e:	d101      	bne.n	10254 <ull_conn_tx_ack+0x1d4>
					conn->llcp_length.state =
   10250:	2204      	movs	r2, #4
   10252:	e7da      	b.n	1020a <ull_conn_tx_ack+0x18a>
				if (!conn->llcp_length.cache.tx_octets) {
   10254:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   10258:	b922      	cbnz	r2, 10264 <ull_conn_tx_ack+0x1e4>
					conn->llcp_length.ack =
   1025a:	f884 1199 	strb.w	r1, [r4, #409]	; 0x199
					conn->procedure_expire = 0U;
   1025e:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
					break;
   10262:	e753      	b.n	1010c <ull_conn_tx_ack+0x8c>
				conn->llcp_length.tx_octets =
   10264:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
   10268:	f8b4 11a6 	ldrh.w	r1, [r4, #422]	; 0x1a6
   1026c:	f8a4 11a2 	strh.w	r1, [r4, #418]	; 0x1a2
				conn->llcp_length.cache.tx_octets = 0;
   10270:	2200      	movs	r2, #0
   10272:	f8a4 21a4 	strh.w	r2, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   10276:	e7c8      	b.n	1020a <ull_conn_tx_ack+0x18a>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   10278:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   1027c:	2202      	movs	r2, #2
   1027e:	f362 0301 	bfi	r3, r2, #0, #2
   10282:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   10286:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1028a:	2b00      	cmp	r3, #0
   1028c:	da14      	bge.n	102b8 <ull_conn_tx_ack+0x238>
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1028e:	4a29      	ldr	r2, [pc, #164]	; (10334 <ull_conn_tx_ack+0x2b4>)
   10290:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
   10294:	e9cd 2300 	strd	r2, r3, [sp]
			phys = conn->llcp_phy.tx | lll->phy_tx;
   10298:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   1029c:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   102a0:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   102a4:	f003 0307 	and.w	r3, r3, #7
   102a8:	a902      	add	r1, sp, #8
   102aa:	440b      	add	r3, r1
   102ac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   102b0:	f363 1206 	bfi	r2, r3, #4, #3
   102b4:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   102b8:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   102bc:	f36f 0300 	bfc	r3, #0, #1
   102c0:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   102c4:	e722      	b.n	1010c <ull_conn_tx_ack+0x8c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   102c6:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   102ca:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
   102ce:	f3c3 0382 	ubfx	r3, r3, #2, #3
   102d2:	e7ed      	b.n	102b0 <ull_conn_tx_ack+0x230>
	struct ll_conn *conn = NULL;
   102d4:	2400      	movs	r4, #0
   102d6:	e719      	b.n	1010c <ull_conn_tx_ack+0x8c>
		} else if (!tx) {
   102d8:	2d00      	cmp	r5, #0
   102da:	f43f af2d 	beq.w	10138 <ull_conn_tx_ack+0xb8>
			LL_ASSERT(!link->next);
   102de:	b163      	cbz	r3, 102fa <ull_conn_tx_ack+0x27a>
   102e0:	f240 53a5 	movw	r3, #1445	; 0x5a5
   102e4:	4a0d      	ldr	r2, [pc, #52]	; (1031c <ull_conn_tx_ack+0x29c>)
   102e6:	4914      	ldr	r1, [pc, #80]	; (10338 <ull_conn_tx_ack+0x2b8>)
   102e8:	480e      	ldr	r0, [pc, #56]	; (10324 <ull_conn_tx_ack+0x2a4>)
   102ea:	f007 ff23 	bl	18134 <printk>
   102ee:	4040      	eors	r0, r0
   102f0:	f380 8811 	msr	BASEPRI, r0
   102f4:	f04f 0003 	mov.w	r0, #3
   102f8:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   102fa:	4629      	mov	r1, r5
   102fc:	4630      	mov	r0, r6
   102fe:	f7fc f8a5 	bl	c44c <ll_tx_ack_put>
	return conn;
   10302:	e719      	b.n	10138 <ull_conn_tx_ack+0xb8>
	} else if (handle != 0xFFFF) {
   10304:	4296      	cmp	r6, r2
   10306:	d004      	beq.n	10312 <ull_conn_tx_ack+0x292>
		conn = ll_conn_get(handle);
   10308:	4630      	mov	r0, r6
   1030a:	f7fe f825 	bl	e358 <ll_conn_get>
   1030e:	4604      	mov	r4, r0
   10310:	e7f3      	b.n	102fa <ull_conn_tx_ack+0x27a>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   10312:	f36f 0301 	bfc	r3, #0, #2
   10316:	712b      	strb	r3, [r5, #4]
	struct ll_conn *conn = NULL;
   10318:	2400      	movs	r4, #0
   1031a:	e7ee      	b.n	102fa <ull_conn_tx_ack+0x27a>
   1031c:	00020ce6 	.word	0x00020ce6
   10320:	00020e4a 	.word	0x00020e4a
   10324:	0001ff46 	.word	0x0001ff46
   10328:	00020e57 	.word	0x00020e57
   1032c:	20001100 	.word	0x20001100
   10330:	20001084 	.word	0x20001084
   10334:	01020101 	.word	0x01020101
   10338:	00020e56 	.word	0x00020e56

0001033c <lll_clock_wait>:

void lll_clock_wait(void)
{
	static bool done;

	if (done) {
   1033c:	4b13      	ldr	r3, [pc, #76]	; (1038c <lll_clock_wait+0x50>)
   1033e:	781a      	ldrb	r2, [r3, #0]
{
   10340:	b510      	push	{r4, lr}
	if (done) {
   10342:	b9fa      	cbnz	r2, 10384 <lll_clock_wait+0x48>
		return;
	}
	done = true;
   10344:	2201      	movs	r2, #1
   10346:	701a      	strb	r2, [r3, #0]
   10348:	4811      	ldr	r0, [pc, #68]	; (10390 <lll_clock_wait+0x54>)
   1034a:	f006 fa43 	bl	167d4 <z_impl_device_get_binding>

	struct device *clock =
			device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);

	LL_ASSERT(clock);
   1034e:	4604      	mov	r4, r0
   10350:	b958      	cbnz	r0, 1036a <lll_clock_wait+0x2e>
   10352:	231e      	movs	r3, #30
   10354:	4a0f      	ldr	r2, [pc, #60]	; (10394 <lll_clock_wait+0x58>)
   10356:	4910      	ldr	r1, [pc, #64]	; (10398 <lll_clock_wait+0x5c>)
   10358:	4810      	ldr	r0, [pc, #64]	; (1039c <lll_clock_wait+0x60>)
   1035a:	f007 feeb 	bl	18134 <printk>
   1035e:	4040      	eors	r0, r0
   10360:	f380 8811 	msr	BASEPRI, r0
   10364:	f04f 0003 	mov.w	r0, #3
   10368:	df02      	svc	2
	return api->on(dev, sys);
   1036a:	6863      	ldr	r3, [r4, #4]
   1036c:	2101      	movs	r1, #1
   1036e:	681b      	ldr	r3, [r3, #0]
   10370:	4620      	mov	r0, r4
   10372:	4798      	blx	r3
						clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	if (!api->get_status) {
   10374:	6863      	ldr	r3, [r4, #4]
   10376:	691b      	ldr	r3, [r3, #16]
   10378:	b12b      	cbz	r3, 10386 <lll_clock_wait+0x4a>
		return CLOCK_CONTROL_STATUS_UNKNOWN;
	}

	return api->get_status(dev, sys);
   1037a:	2101      	movs	r1, #1
   1037c:	4620      	mov	r0, r4
   1037e:	4798      	blx	r3

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);
	while (clock_control_get_status(clock, CLOCK_CONTROL_NRF_SUBSYS_LF) !=
   10380:	2802      	cmp	r0, #2
   10382:	d100      	bne.n	10386 <lll_clock_wait+0x4a>
			CLOCK_CONTROL_STATUS_ON) {
		DEBUG_CPU_SLEEP(1);
		k_cpu_idle();
		DEBUG_CPU_SLEEP(0);
	}
}
   10384:	bd10      	pop	{r4, pc}
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10386:	f7f2 ff3b 	bl	3200 <arch_cpu_idle>
   1038a:	e7f3      	b.n	10374 <lll_clock_wait+0x38>
   1038c:	2000a149 	.word	0x2000a149
   10390:	0001f43b 	.word	0x0001f43b
   10394:	00020e62 	.word	0x00020e62
   10398:	00020eb3 	.word	0x00020eb3
   1039c:	0001ff46 	.word	0x0001ff46

000103a0 <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
   103a0:	b508      	push	{r3, lr}
	int err;

	radio_isr_set(isr_race, param);
   103a2:	4601      	mov	r1, r0
   103a4:	480d      	ldr	r0, [pc, #52]	; (103dc <isr_cleanup+0x3c>)
   103a6:	f001 fbfd 	bl	11ba4 <radio_isr_set>
	radio_tmr_stop();
   103aa:	f001 fe25 	bl	11ff8 <radio_tmr_stop>

	err = lll_clk_off();
   103ae:	f7fc fdbf 	bl	cf30 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   103b2:	b170      	cbz	r0, 103d2 <isr_cleanup+0x32>
   103b4:	3010      	adds	r0, #16
   103b6:	d00c      	beq.n	103d2 <isr_cleanup+0x32>
   103b8:	f240 237e 	movw	r3, #638	; 0x27e
   103bc:	4a08      	ldr	r2, [pc, #32]	; (103e0 <isr_cleanup+0x40>)
   103be:	4909      	ldr	r1, [pc, #36]	; (103e4 <isr_cleanup+0x44>)
   103c0:	4809      	ldr	r0, [pc, #36]	; (103e8 <isr_cleanup+0x48>)
   103c2:	f007 feb7 	bl	18134 <printk>
   103c6:	4040      	eors	r0, r0
   103c8:	f380 8811 	msr	BASEPRI, r0
   103cc:	f04f 0003 	mov.w	r0, #3
   103d0:	df02      	svc	2

	lll_done(NULL);
   103d2:	2000      	movs	r0, #0
}
   103d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   103d8:	f7fc bd58 	b.w	ce8c <lll_done>
   103dc:	0001af27 	.word	0x0001af27
   103e0:	00020eb9 	.word	0x00020eb9
   103e4:	00020c10 	.word	0x00020c10
   103e8:	0001ff46 	.word	0x0001ff46

000103ec <isr_done>:
{
   103ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103ee:	4605      	mov	r5, r0
	radio_status_reset();
   103f0:	f001 fcb2 	bl	11d58 <radio_status_reset>
	radio_tmr_status_reset();
   103f4:	f001 fd6e 	bl	11ed4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   103f8:	f001 fd48 	bl	11e8c <radio_filter_status_reset>
	radio_ar_status_reset();
   103fc:	f001 ff08 	bl	12210 <radio_ar_status_reset>
	radio_rssi_status_reset();
   10400:	f001 fd0c 	bl	11e1c <radio_rssi_status_reset>
	e = ull_event_done_extra_get();
   10404:	f7fc faaa 	bl	c95c <ull_event_done_extra_get>
	LL_ASSERT(e);
   10408:	4604      	mov	r4, r0
   1040a:	b960      	cbnz	r0, 10426 <isr_done+0x3a>
   1040c:	f240 234d 	movw	r3, #589	; 0x24d
   10410:	4a1c      	ldr	r2, [pc, #112]	; (10484 <isr_done+0x98>)
   10412:	491d      	ldr	r1, [pc, #116]	; (10488 <isr_done+0x9c>)
   10414:	481d      	ldr	r0, [pc, #116]	; (1048c <isr_done+0xa0>)
   10416:	f007 fe8d 	bl	18134 <printk>
   1041a:	4040      	eors	r0, r0
   1041c:	f380 8811 	msr	BASEPRI, r0
   10420:	f04f 0003 	mov.w	r0, #3
   10424:	df02      	svc	2
	e->crc_valid = crc_valid;
   10426:	4a1a      	ldr	r2, [pc, #104]	; (10490 <isr_done+0xa4>)
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   10428:	2301      	movs	r3, #1
	e->crc_valid = crc_valid;
   1042a:	7812      	ldrb	r2, [r2, #0]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1042c:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   1042e:	4b19      	ldr	r3, [pc, #100]	; (10494 <isr_done+0xa8>)
	e->crc_valid = crc_valid;
   10430:	71a2      	strb	r2, [r4, #6]
	e->mic_state = mic_state;
   10432:	4a19      	ldr	r2, [pc, #100]	; (10498 <isr_done+0xac>)
	e->trx_cnt = trx_cnt;
   10434:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   10436:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   10438:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1043a:	71e2      	strb	r2, [r4, #7]
	if (trx_cnt) {
   1043c:	b1db      	cbz	r3, 10476 <isr_done+0x8a>
		if (lll->role) {
   1043e:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   10442:	2b00      	cmp	r3, #0
   10444:	da17      	bge.n	10476 <isr_done+0x8a>
				addr_us_get(lll->phy_rx);
   10446:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1044a:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   1044e:	2b02      	cmp	r3, #2
   10450:	d016      	beq.n	10480 <isr_done+0x94>
	default:
	case BIT(0):
		return 40;
   10452:	2b04      	cmp	r3, #4
   10454:	bf0c      	ite	eq
   10456:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   1045a:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1045c:	f001 fe04 	bl	12068 <radio_tmr_aa_restore>
   10460:	4606      	mov	r6, r0
   10462:	f001 fe07 	bl	12074 <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   10466:	6b6b      	ldr	r3, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   10468:	1a30      	subs	r0, r6, r0
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   1046a:	e9c4 3703 	strd	r3, r7, [r4, #12]
			lll->slave.window_widening_event_us = 0;
   1046e:	2300      	movs	r3, #0
			e->slave.start_to_address_actual_us =
   10470:	60a0      	str	r0, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   10472:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   10474:	63eb      	str	r3, [r5, #60]	; 0x3c
	isr_cleanup(param);
   10476:	4628      	mov	r0, r5
}
   10478:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	isr_cleanup(param);
   1047c:	f7ff bf90 	b.w	103a0 <isr_cleanup>
	case BIT(1):
		return 24;
   10480:	2718      	movs	r7, #24
   10482:	e7eb      	b.n	1045c <isr_done+0x70>
   10484:	00020eb9 	.word	0x00020eb9
   10488:	00020b2e 	.word	0x00020b2e
   1048c:	0001ff46 	.word	0x0001ff46
   10490:	2000a14b 	.word	0x2000a14b
   10494:	20005d1e 	.word	0x20005d1e
   10498:	2000a14c 	.word	0x2000a14c

0001049c <lll_conn_ppm_get>:
}
   1049c:	4b01      	ldr	r3, [pc, #4]	; (104a4 <lll_conn_ppm_get+0x8>)
   1049e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   104a2:	4770      	bx	lr
   104a4:	0001f044 	.word	0x0001f044

000104a8 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   104a8:	4a04      	ldr	r2, [pc, #16]	; (104bc <lll_conn_prepare_reset+0x14>)
   104aa:	2300      	movs	r3, #0
   104ac:	8013      	strh	r3, [r2, #0]
	crc_expire = 0U;
   104ae:	4a04      	ldr	r2, [pc, #16]	; (104c0 <lll_conn_prepare_reset+0x18>)
   104b0:	7013      	strb	r3, [r2, #0]
	crc_valid = 0U;
   104b2:	4a04      	ldr	r2, [pc, #16]	; (104c4 <lll_conn_prepare_reset+0x1c>)
   104b4:	7013      	strb	r3, [r2, #0]
	mic_state = LLL_CONN_MIC_NONE;
   104b6:	4a04      	ldr	r2, [pc, #16]	; (104c8 <lll_conn_prepare_reset+0x20>)
   104b8:	7013      	strb	r3, [r2, #0]
}
   104ba:	4770      	bx	lr
   104bc:	20005d1e 	.word	0x20005d1e
   104c0:	2000a14a 	.word	0x2000a14a
   104c4:	2000a14b 	.word	0x2000a14b
   104c8:	2000a14c 	.word	0x2000a14c

000104cc <lll_conn_abort_cb>:
{
   104cc:	b510      	push	{r4, lr}
   104ce:	460c      	mov	r4, r1
	if (!prepare_param) {
   104d0:	b930      	cbnz	r0, 104e0 <lll_conn_abort_cb+0x14>
		radio_isr_set(isr_done, param);
   104d2:	480e      	ldr	r0, [pc, #56]	; (1050c <lll_conn_abort_cb+0x40>)
   104d4:	f001 fb66 	bl	11ba4 <radio_isr_set>
}
   104d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   104dc:	f001 bc2a 	b.w	11d34 <radio_disable>
	err = lll_clk_off();
   104e0:	f7fc fd26 	bl	cf30 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   104e4:	b168      	cbz	r0, 10502 <lll_conn_abort_cb+0x36>
   104e6:	3010      	adds	r0, #16
   104e8:	d00b      	beq.n	10502 <lll_conn_abort_cb+0x36>
   104ea:	2381      	movs	r3, #129	; 0x81
   104ec:	4a08      	ldr	r2, [pc, #32]	; (10510 <lll_conn_abort_cb+0x44>)
   104ee:	4909      	ldr	r1, [pc, #36]	; (10514 <lll_conn_abort_cb+0x48>)
   104f0:	4809      	ldr	r0, [pc, #36]	; (10518 <lll_conn_abort_cb+0x4c>)
   104f2:	f007 fe1f 	bl	18134 <printk>
   104f6:	4040      	eors	r0, r0
   104f8:	f380 8811 	msr	BASEPRI, r0
   104fc:	f04f 0003 	mov.w	r0, #3
   10500:	df02      	svc	2
	lll_done(param);
   10502:	4620      	mov	r0, r4
}
   10504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   10508:	f7fc bcc0 	b.w	ce8c <lll_done>
   1050c:	000103ed 	.word	0x000103ed
   10510:	00020eb9 	.word	0x00020eb9
   10514:	00020c10 	.word	0x00020c10
   10518:	0001ff46 	.word	0x0001ff46

0001051c <lll_conn_rx_pkt_set>:
{
   1051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1051e:	4607      	mov	r7, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   10520:	2001      	movs	r0, #1
   10522:	f7fc f847 	bl	c5b4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10526:	4604      	mov	r4, r0
   10528:	b960      	cbnz	r0, 10544 <lll_conn_rx_pkt_set+0x28>
   1052a:	f44f 73df 	mov.w	r3, #446	; 0x1be
   1052e:	4a19      	ldr	r2, [pc, #100]	; (10594 <lll_conn_rx_pkt_set+0x78>)
   10530:	4919      	ldr	r1, [pc, #100]	; (10598 <lll_conn_rx_pkt_set+0x7c>)
   10532:	481a      	ldr	r0, [pc, #104]	; (1059c <lll_conn_rx_pkt_set+0x80>)
   10534:	f007 fdfe 	bl	18134 <printk>
   10538:	4040      	eors	r0, r0
   1053a:	f380 8811 	msr	BASEPRI, r0
   1053e:	f04f 0003 	mov.w	r0, #3
   10542:	df02      	svc	2
	phy = lll->phy_rx;
   10544:	f897 5049 	ldrb.w	r5, [r7, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   10548:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	phy = lll->phy_rx;
   1054c:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   10550:	2100      	movs	r1, #0
   10552:	4628      	mov	r0, r5
   10554:	f001 fb6a 	bl	11c2c <radio_phy_set>
	} else if (lll->enc_rx) {
   10558:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
   1055c:	006a      	lsls	r2, r5, #1
   1055e:	071b      	lsls	r3, r3, #28
   10560:	f042 0201 	orr.w	r2, r2, #1
   10564:	f104 0420 	add.w	r4, r4, #32
   10568:	d50e      	bpl.n	10588 <lll_conn_rx_pkt_set+0x6c>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1056a:	1d31      	adds	r1, r6, #4
   1056c:	b2c9      	uxtb	r1, r1
   1056e:	2008      	movs	r0, #8
   10570:	f001 fba2 	bl	11cb8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   10574:	4622      	mov	r2, r4
   10576:	4629      	mov	r1, r5
   10578:	f107 0063 	add.w	r0, r7, #99	; 0x63
   1057c:	f001 fd94 	bl	120a8 <radio_ccm_rx_pkt_set>
}
   10580:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   10584:	f001 bbc4 	b.w	11d10 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   10588:	2008      	movs	r0, #8
   1058a:	b2f1      	uxtb	r1, r6
   1058c:	f001 fb94 	bl	11cb8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   10590:	4620      	mov	r0, r4
   10592:	e7f5      	b.n	10580 <lll_conn_rx_pkt_set+0x64>
   10594:	00020eb9 	.word	0x00020eb9
   10598:	00020f13 	.word	0x00020f13
   1059c:	0001ff46 	.word	0x0001ff46

000105a0 <lll_conn_isr_tx>:
{
   105a0:	b538      	push	{r3, r4, r5, lr}
   105a2:	4604      	mov	r4, r0
	radio_status_reset();
   105a4:	f001 fbd8 	bl	11d58 <radio_status_reset>
	radio_tmr_status_reset();
   105a8:	f001 fc94 	bl	11ed4 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   105ac:	2096      	movs	r0, #150	; 0x96
   105ae:	f001 fca1 	bl	11ef4 <radio_tmr_tifs_set>
				     lll->phy_flags);
   105b2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   105b6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   105ba:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   105be:	2100      	movs	r1, #0
   105c0:	f002 0207 	and.w	r2, r2, #7
   105c4:	f000 0007 	and.w	r0, r0, #7
   105c8:	f001 fc10 	bl	11dec <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   105cc:	4620      	mov	r0, r4
   105ce:	f7ff ffa5 	bl	1051c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   105d2:	f001 fbcd 	bl	11d70 <radio_is_ready>
   105d6:	b160      	cbz	r0, 105f2 <lll_conn_isr_tx+0x52>
   105d8:	f240 1379 	movw	r3, #377	; 0x179
   105dc:	4a1b      	ldr	r2, [pc, #108]	; (1064c <lll_conn_isr_tx+0xac>)
   105de:	491c      	ldr	r1, [pc, #112]	; (10650 <lll_conn_isr_tx+0xb0>)
   105e0:	481c      	ldr	r0, [pc, #112]	; (10654 <lll_conn_isr_tx+0xb4>)
   105e2:	f007 fda7 	bl	18134 <printk>
   105e6:	4040      	eors	r0, r0
   105e8:	f380 8811 	msr	BASEPRI, r0
   105ec:	f04f 0003 	mov.w	r0, #3
   105f0:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   105f2:	f001 fd53 	bl	1209c <radio_tmr_tifs_base_get>
   105f6:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   105f8:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   105fc:	2101      	movs	r1, #1
   105fe:	f000 0007 	and.w	r0, r0, #7
   10602:	f00a fdb9 	bl	1b178 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   10606:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1060a:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1060e:	4405      	add	r5, r0
	switch (phy) {
   10610:	2b02      	cmp	r3, #2
   10612:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   10616:	d016      	beq.n	10646 <lll_conn_isr_tx+0xa6>
		return 40;
   10618:	2b04      	cmp	r3, #4
   1061a:	bf0c      	ite	eq
   1061c:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   10620:	2028      	movne	r0, #40	; 0x28
	hcto += addr_us_get(lll->phy_rx);
   10622:	4405      	add	r5, r0
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   10624:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   10628:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1062c:	f000 0007 	and.w	r0, r0, #7
   10630:	f00a fd9e 	bl	1b170 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   10634:	1a28      	subs	r0, r5, r0
   10636:	f001 fceb 	bl	12010 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1063a:	4621      	mov	r1, r4
   1063c:	4806      	ldr	r0, [pc, #24]	; (10658 <lll_conn_isr_tx+0xb8>)
}
   1063e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   10642:	f001 baaf 	b.w	11ba4 <radio_isr_set>
		return 24;
   10646:	2018      	movs	r0, #24
   10648:	e7eb      	b.n	10622 <lll_conn_isr_tx+0x82>
   1064a:	bf00      	nop
   1064c:	00020eb9 	.word	0x00020eb9
   10650:	00020c23 	.word	0x00020c23
   10654:	0001ff46 	.word	0x0001ff46
   10658:	0001065d 	.word	0x0001065d

0001065c <lll_conn_isr_rx>:
{
   1065c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10660:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   10662:	f001 fb8f 	bl	11d84 <radio_is_done>
   10666:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   10668:	b1a5      	cbz	r5, 10694 <lll_conn_isr_rx+0x38>
		crc_ok = radio_crc_is_valid();
   1066a:	f001 fba1 	bl	11db0 <radio_crc_is_valid>
   1066e:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   10670:	f001 fbdc 	bl	11e2c <radio_rssi_is_ready>
	radio_status_reset();
   10674:	f001 fb70 	bl	11d58 <radio_status_reset>
	radio_tmr_status_reset();
   10678:	f001 fc2c 	bl	11ed4 <radio_tmr_status_reset>
	radio_rssi_status_reset();
   1067c:	f001 fbce 	bl	11e1c <radio_rssi_status_reset>
	if (!trx_done) {
   10680:	b955      	cbnz	r5, 10698 <lll_conn_isr_rx+0x3c>
		radio_isr_set(isr_done, param);
   10682:	4621      	mov	r1, r4
   10684:	48bd      	ldr	r0, [pc, #756]	; (1097c <lll_conn_isr_rx+0x320>)
   10686:	f001 fa8d 	bl	11ba4 <radio_isr_set>
		radio_disable();
   1068a:	f001 fb53 	bl	11d34 <radio_disable>
}
   1068e:	b003      	add	sp, #12
   10690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = rssi_ready = 0U;
   10694:	462f      	mov	r7, r5
   10696:	e7ed      	b.n	10674 <lll_conn_isr_rx+0x18>
	trx_cnt++;
   10698:	4ab9      	ldr	r2, [pc, #740]	; (10980 <lll_conn_isr_rx+0x324>)
   1069a:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1069c:	2001      	movs	r0, #1
	trx_cnt++;
   1069e:	3301      	adds	r3, #1
   106a0:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   106a2:	f7fb ff87 	bl	c5b4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   106a6:	4606      	mov	r6, r0
   106a8:	b958      	cbnz	r0, 106c2 <lll_conn_isr_rx+0x66>
   106aa:	23b7      	movs	r3, #183	; 0xb7
   106ac:	4ab5      	ldr	r2, [pc, #724]	; (10984 <lll_conn_isr_rx+0x328>)
   106ae:	49b6      	ldr	r1, [pc, #728]	; (10988 <lll_conn_isr_rx+0x32c>)
   106b0:	48b6      	ldr	r0, [pc, #728]	; (1098c <lll_conn_isr_rx+0x330>)
   106b2:	f007 fd3f 	bl	18134 <printk>
   106b6:	4040      	eors	r0, r0
   106b8:	f380 8811 	msr	BASEPRI, r0
   106bc:	f04f 0003 	mov.w	r0, #3
   106c0:	df02      	svc	2
	if (crc_ok) {
   106c2:	2f00      	cmp	r7, #0
   106c4:	f000 814a 	beq.w	1095c <lll_conn_isr_rx+0x300>

static int isr_rx_pdu(struct lll_conn *lll, struct pdu_data *pdu_data_rx,
		      struct node_tx **tx_release, u8_t *is_rx_enqueue)
{
	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   106c8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   106cc:	f896 1020 	ldrb.w	r1, [r6, #32]
   106d0:	f003 0201 	and.w	r2, r3, #1
   106d4:	f3c1 0180 	ubfx	r1, r1, #2, #1
   106d8:	4291      	cmp	r1, r2
   106da:	f000 80dd 	beq.w	10898 <lll_conn_isr_rx+0x23c>
		/* Increment serial number */
		lll->sn++;
   106de:	f082 0201 	eor.w	r2, r2, #1
   106e2:	f362 0300 	bfi	r3, r2, #0, #1
   106e6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (lll->role) {
   106ea:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   106ee:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   106f0:	bfbe      	ittt	lt
   106f2:	f894 3024 	ldrblt.w	r3, [r4, #36]	; 0x24
   106f6:	f043 0301 	orrlt.w	r3, r3, #1
   106fa:	f884 3024 	strblt.w	r3, [r4, #36]	; 0x24
		}
#endif /* CONFIG_BT_PERIPHERAL */

		if (!lll->empty) {
   106fe:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10702:	0758      	lsls	r0, r3, #29
   10704:	f100 80c4 	bmi.w	10890 <lll_conn_isr_rx+0x234>
			struct pdu_data *pdu_data_tx;
			u8_t pdu_data_tx_len;
			struct node_tx *tx;
			memq_link_t *link;

			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   10708:	aa01      	add	r2, sp, #4
   1070a:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1070e:	f009 ff08 	bl	1a522 <memq_peek>
					 (void **)&tx);
			LL_ASSERT(link);
   10712:	4605      	mov	r5, r0
   10714:	b960      	cbnz	r0, 10730 <lll_conn_isr_rx+0xd4>
   10716:	f240 23a9 	movw	r3, #681	; 0x2a9
   1071a:	4a9a      	ldr	r2, [pc, #616]	; (10984 <lll_conn_isr_rx+0x328>)
   1071c:	499c      	ldr	r1, [pc, #624]	; (10990 <lll_conn_isr_rx+0x334>)
   1071e:	489b      	ldr	r0, [pc, #620]	; (1098c <lll_conn_isr_rx+0x330>)
   10720:	f007 fd08 	bl	18134 <printk>
   10724:	4040      	eors	r0, r0
   10726:	f380 8811 	msr	BASEPRI, r0
   1072a:	f04f 0003 	mov.w	r0, #3
   1072e:	df02      	svc	2

			pdu_data_tx = (void *)(tx->pdu +
					       lll->packet_tx_head_offset);
   10730:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61

			pdu_data_tx_len = pdu_data_tx->len;
   10734:	9a01      	ldr	r2, [sp, #4]
   10736:	441a      	add	r2, r3
   10738:	7950      	ldrb	r0, [r2, #5]
#if defined(CONFIG_BT_CTLR_LE_ENC)
			if (pdu_data_tx_len != 0U) {
   1073a:	b150      	cbz	r0, 10752 <lll_conn_isr_rx+0xf6>
				/* if encrypted increment tx counter */
				if (lll->enc_tx) {
   1073c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   10740:	06d1      	lsls	r1, r2, #27
   10742:	d506      	bpl.n	10752 <lll_conn_isr_rx+0xf6>
					lll->ccm_tx.counter++;
   10744:	e9d4 2125 	ldrd	r2, r1, [r4, #148]	; 0x94
   10748:	3201      	adds	r2, #1
   1074a:	f141 0100 	adc.w	r1, r1, #0
   1074e:	e9c4 2125 	strd	r2, r1, [r4, #148]	; 0x94
				}
			}
#endif /* CONFIG_BT_CTLR_LE_ENC */

			lll->packet_tx_head_offset += pdu_data_tx_len;
			if (lll->packet_tx_head_offset ==
   10752:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			lll->packet_tx_head_offset += pdu_data_tx_len;
   10756:	4403      	add	r3, r0
   10758:	b2db      	uxtb	r3, r3
			if (lll->packet_tx_head_offset ==
   1075a:	429a      	cmp	r2, r3
			lll->packet_tx_head_offset += pdu_data_tx_len;
   1075c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			if (lll->packet_tx_head_offset ==
   10760:	f04f 0200 	mov.w	r2, #0
   10764:	f040 8098 	bne.w	10898 <lll_conn_isr_rx+0x23c>
			    lll->packet_tx_head_len) {
				lll->packet_tx_head_len = 0;
   10768:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				lll->packet_tx_head_offset = 0;

				memq_dequeue(lll->memq_tx.tail,
   1076c:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   10770:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10772:	f009 fede 	bl	1a532 <memq_dequeue>
					     &lll->memq_tx.head, NULL);

				/* TX node UPSTREAM, i.e. Tx node ack path */
				link->next = tx->next; /* Indicates ctrl or data
   10776:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1077a:	f8d8 3000 	ldr.w	r3, [r8]
   1077e:	602b      	str	r3, [r5, #0]
							* pool.
							*/
				tx->next = link;
   10780:	f8c8 5000 	str.w	r5, [r8]
			lll->empty = 0;
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   10784:	f896 2020 	ldrb.w	r2, [r6, #32]
   10788:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1078c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10790:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10794:	429a      	cmp	r2, r3
   10796:	f000 8082 	beq.w	1089e <lll_conn_isr_rx+0x242>
	u8_t is_rx_enqueue = 0U;
   1079a:	f04f 0900 	mov.w	r9, #0
		crc_expire = 0U;
   1079e:	4b7d      	ldr	r3, [pc, #500]	; (10994 <lll_conn_isr_rx+0x338>)
   107a0:	2500      	movs	r5, #0
   107a2:	701d      	strb	r5, [r3, #0]
		crc_valid = 1U;
   107a4:	4b7c      	ldr	r3, [pc, #496]	; (10998 <lll_conn_isr_rx+0x33c>)
   107a6:	2201      	movs	r2, #1
   107a8:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   107aa:	a901      	add	r1, sp, #4
   107ac:	4620      	mov	r0, r4
   107ae:	f00a fc1f 	bl	1aff0 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   107b2:	2d00      	cmp	r5, #0
   107b4:	f040 80fc 	bne.w	109b0 <lll_conn_isr_rx+0x354>
   107b8:	b147      	cbz	r7, 107cc <lll_conn_isr_rx+0x170>
   107ba:	f896 3020 	ldrb.w	r3, [r6, #32]
   107be:	06db      	lsls	r3, r3, #27
   107c0:	d404      	bmi.n	107cc <lll_conn_isr_rx+0x170>
				     (pdu_data_tx->len == 0));
   107c2:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   107c4:	785b      	ldrb	r3, [r3, #1]
   107c6:	2b00      	cmp	r3, #0
   107c8:	f000 80f2 	beq.w	109b0 <lll_conn_isr_rx+0x354>
		radio_tmr_tifs_set(EVENT_IFS_US);
   107cc:	2096      	movs	r0, #150	; 0x96
   107ce:	f001 fb91 	bl	11ef4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   107d2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   107d6:	f000 0007 	and.w	r0, r0, #7
   107da:	f001 fafb 	bl	11dd4 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   107de:	4621      	mov	r1, r4
   107e0:	486e      	ldr	r0, [pc, #440]	; (1099c <lll_conn_isr_rx+0x340>)
   107e2:	f001 f9df 	bl	11ba4 <radio_isr_set>
		radio_tmr_end_capture();
   107e6:	f001 fc4b 	bl	12080 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   107ea:	9901      	ldr	r1, [sp, #4]
   107ec:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   107f0:	780b      	ldrb	r3, [r1, #0]
   107f2:	f3c2 0200 	ubfx	r2, r2, #0, #1
   107f6:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   107fa:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   107fe:	f3c2 0240 	ubfx	r2, r2, #1, #1
   10802:	f362 0382 	bfi	r3, r2, #2, #1
   10806:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   10808:	4620      	mov	r0, r4
   1080a:	f00a fbc8 	bl	1af9e <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1080e:	f001 faaf 	bl	11d70 <radio_is_ready>
   10812:	b160      	cbz	r0, 1082e <lll_conn_isr_rx+0x1d2>
   10814:	f240 1321 	movw	r3, #289	; 0x121
   10818:	4a5a      	ldr	r2, [pc, #360]	; (10984 <lll_conn_isr_rx+0x328>)
   1081a:	4961      	ldr	r1, [pc, #388]	; (109a0 <lll_conn_isr_rx+0x344>)
   1081c:	485b      	ldr	r0, [pc, #364]	; (1098c <lll_conn_isr_rx+0x330>)
   1081e:	f007 fc89 	bl	18134 <printk>
   10822:	4040      	eors	r0, r0
   10824:	f380 8811 	msr	BASEPRI, r0
   10828:	f04f 0003 	mov.w	r0, #3
   1082c:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   1082e:	f001 fc1b 	bl	12068 <radio_tmr_aa_restore>
   10832:	b918      	cbnz	r0, 1083c <lll_conn_isr_rx+0x1e0>
		radio_tmr_aa_save(radio_tmr_aa_get());
   10834:	f001 fc0c 	bl	12050 <radio_tmr_aa_get>
   10838:	f001 fc10 	bl	1205c <radio_tmr_aa_save>
	if (tx_release) {
   1083c:	f1b8 0f00 	cmp.w	r8, #0
   10840:	f000 80bd 	beq.w	109be <lll_conn_isr_rx+0x362>
		LL_ASSERT(lll->handle != 0xFFFF);
   10844:	8a22      	ldrh	r2, [r4, #16]
   10846:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1084a:	429a      	cmp	r2, r3
   1084c:	d10c      	bne.n	10868 <lll_conn_isr_rx+0x20c>
   1084e:	f44f 7397 	mov.w	r3, #302	; 0x12e
   10852:	4a4c      	ldr	r2, [pc, #304]	; (10984 <lll_conn_isr_rx+0x328>)
   10854:	4953      	ldr	r1, [pc, #332]	; (109a4 <lll_conn_isr_rx+0x348>)
   10856:	484d      	ldr	r0, [pc, #308]	; (1098c <lll_conn_isr_rx+0x330>)
   10858:	f007 fc6c 	bl	18134 <printk>
   1085c:	4040      	eors	r0, r0
   1085e:	f380 8811 	msr	BASEPRI, r0
   10862:	f04f 0003 	mov.w	r0, #3
   10866:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   10868:	4641      	mov	r1, r8
   1086a:	8a20      	ldrh	r0, [r4, #16]
   1086c:	f7ff fbda 	bl	10024 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   10870:	f1b9 0f00 	cmp.w	r9, #0
   10874:	d009      	beq.n	1088a <lll_conn_isr_rx+0x22e>
		ull_pdu_rx_alloc();
   10876:	f7fb feb5 	bl	c5e4 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1087a:	2302      	movs	r3, #2
   1087c:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1087e:	8a23      	ldrh	r3, [r4, #16]
   10880:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   10882:	4631      	mov	r1, r6
   10884:	6830      	ldr	r0, [r6, #0]
   10886:	f7fb fec3 	bl	c610 <ull_rx_put>
		ull_rx_sched();
   1088a:	f7fb fed1 	bl	c630 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   1088e:	e6fe      	b.n	1068e <lll_conn_isr_rx+0x32>
			lll->empty = 0;
   10890:	f36f 0382 	bfc	r3, #2, #1
   10894:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   10898:	f04f 0800 	mov.w	r8, #0
   1089c:	e772      	b.n	10784 <lll_conn_isr_rx+0x128>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1089e:	2003      	movs	r0, #3
   108a0:	f7fb fe88 	bl	c5b4 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   108a4:	2800      	cmp	r0, #0
   108a6:	f43f af78 	beq.w	1079a <lll_conn_isr_rx+0x13e>
		/* Increment next expected serial number */
		lll->nesn++;
   108aa:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   108ae:	f083 0302 	eor.w	r3, r3, #2
   108b2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

		if (pdu_data_rx->len != 0) {
   108b6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   108ba:	2b00      	cmp	r3, #0
   108bc:	f43f af6d 	beq.w	1079a <lll_conn_isr_rx+0x13e>
#if defined(CONFIG_BT_CTLR_LE_ENC)
			/* If required, wait for CCM to finish
			 */
			if (lll->enc_rx) {
   108c0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   108c4:	071a      	lsls	r2, r3, #28
   108c6:	d546      	bpl.n	10956 <lll_conn_isr_rx+0x2fa>
				u32_t done;

				done = radio_ccm_is_done();
   108c8:	f001 fc48 	bl	1215c <radio_ccm_is_done>
				LL_ASSERT(done);
   108cc:	b960      	cbnz	r0, 108e8 <lll_conn_isr_rx+0x28c>
   108ce:	f240 23df 	movw	r3, #735	; 0x2df
   108d2:	4a2c      	ldr	r2, [pc, #176]	; (10984 <lll_conn_isr_rx+0x328>)
   108d4:	4934      	ldr	r1, [pc, #208]	; (109a8 <lll_conn_isr_rx+0x34c>)
   108d6:	482d      	ldr	r0, [pc, #180]	; (1098c <lll_conn_isr_rx+0x330>)
   108d8:	f007 fc2c 	bl	18134 <printk>
   108dc:	4040      	eors	r0, r0
   108de:	f380 8811 	msr	BASEPRI, r0
   108e2:	f04f 0003 	mov.w	r0, #3
   108e6:	df02      	svc	2

				bool mic_failure = !radio_ccm_mic_is_valid();
   108e8:	f001 fc56 	bl	12198 <radio_ccm_mic_is_valid>

				if (mic_failure &&
   108ec:	4d2f      	ldr	r5, [pc, #188]	; (109ac <lll_conn_isr_rx+0x350>)
   108ee:	bb10      	cbnz	r0, 10936 <lll_conn_isr_rx+0x2da>
				    lll->ccm_rx.counter == 0 &&
   108f0:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   108f4:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   108f8:	4313      	orrs	r3, r2
   108fa:	d165      	bne.n	109c8 <lll_conn_isr_rx+0x36c>
				    (pdu_data_rx->ll_id ==
   108fc:	f896 3020 	ldrb.w	r3, [r6, #32]
				    lll->ccm_rx.counter == 0 &&
   10900:	f003 0303 	and.w	r3, r3, #3
   10904:	2b03      	cmp	r3, #3
   10906:	d15f      	bne.n	109c8 <lll_conn_isr_rx+0x36c>
					 * middle of the LL encryption procedure
					 * with MIC failure.
					 * This could be an unencrypted packet
					 */
					struct pdu_data *scratch_pkt =
						radio_pkt_scratch_get();
   10908:	f001 fa60 	bl	11dcc <radio_pkt_scratch_get>

					if (ctrl_pdu_len_check(
   1090c:	7842      	ldrb	r2, [r0, #1]
   1090e:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   10910:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   10912:	d859      	bhi.n	109c8 <lll_conn_isr_rx+0x36c>
						scratch_pkt->len)) {
						memcpy(pdu_data_rx,
   10914:	3203      	adds	r2, #3
   10916:	f106 0020 	add.w	r0, r6, #32
   1091a:	f008 f98e 	bl	18c3a <memcpy>
						       scratch_pkt,
						       scratch_pkt->len +
						       offsetof(struct pdu_data,
							llctrl));
						mic_failure = false;
						lll->ccm_rx.counter--;
   1091e:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   10922:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   10926:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1092a:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1092e:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   10932:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77

					return -EINVAL;
				}

				/* Increment counter */
				lll->ccm_rx.counter++;
   10936:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1093a:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1093e:	3301      	adds	r3, #1
   10940:	f142 0200 	adc.w	r2, r2, #0

				/* Record MIC valid */
				mic_state = LLL_CONN_MIC_PASS;
   10944:	f04f 0901 	mov.w	r9, #1
				lll->ccm_rx.counter++;
   10948:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1094c:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   10950:	f885 9000 	strb.w	r9, [r5]
		if (err) {
   10954:	e723      	b.n	1079e <lll_conn_isr_rx+0x142>
			}
#endif /* CONFIG_BT_CTLR_LE_ENC */

			/* Enqueue non-empty PDU */
			*is_rx_enqueue = 1U;
   10956:	f04f 0901 	mov.w	r9, #1
   1095a:	e720      	b.n	1079e <lll_conn_isr_rx+0x142>
		if (crc_expire == 0U) {
   1095c:	4b0d      	ldr	r3, [pc, #52]	; (10994 <lll_conn_isr_rx+0x338>)
   1095e:	781a      	ldrb	r2, [r3, #0]
   10960:	b90a      	cbnz	r2, 10966 <lll_conn_isr_rx+0x30a>
			crc_expire = 2U;
   10962:	2202      	movs	r2, #2
   10964:	701a      	strb	r2, [r3, #0]
		crc_expire--;
   10966:	781d      	ldrb	r5, [r3, #0]
   10968:	3d01      	subs	r5, #1
   1096a:	b2ed      	uxtb	r5, r5
   1096c:	701d      	strb	r5, [r3, #0]
	u8_t is_rx_enqueue = 0U;
   1096e:	f04f 0900 	mov.w	r9, #0
		is_crc_backoff = (crc_expire == 0U);
   10972:	fab5 f585 	clz	r5, r5
   10976:	096d      	lsrs	r5, r5, #5
	struct node_tx *tx_release = NULL;
   10978:	46c8      	mov	r8, r9
   1097a:	e716      	b.n	107aa <lll_conn_isr_rx+0x14e>
   1097c:	000103ed 	.word	0x000103ed
   10980:	20005d1e 	.word	0x20005d1e
   10984:	00020eb9 	.word	0x00020eb9
   10988:	00020f13 	.word	0x00020f13
   1098c:	0001ff46 	.word	0x0001ff46
   10990:	00020dbb 	.word	0x00020dbb
   10994:	2000a14a 	.word	0x2000a14a
   10998:	2000a14b 	.word	0x2000a14b
   1099c:	000105a1 	.word	0x000105a1
   109a0:	00020c23 	.word	0x00020c23
   109a4:	00020efd 	.word	0x00020efd
   109a8:	000209d8 	.word	0x000209d8
   109ac:	2000a14c 	.word	0x2000a14c
		radio_isr_set(isr_done, param);
   109b0:	4621      	mov	r1, r4
   109b2:	4808      	ldr	r0, [pc, #32]	; (109d4 <lll_conn_isr_rx+0x378>)
   109b4:	f001 f8f6 	bl	11ba4 <radio_isr_set>
			radio_switch_complete_and_disable();
   109b8:	f001 fa22 	bl	11e00 <radio_switch_complete_and_disable>
   109bc:	e715      	b.n	107ea <lll_conn_isr_rx+0x18e>
	if (is_rx_enqueue) {
   109be:	f1b9 0f00 	cmp.w	r9, #0
   109c2:	f43f ae64 	beq.w	1068e <lll_conn_isr_rx+0x32>
   109c6:	e756      	b.n	10876 <lll_conn_isr_rx+0x21a>
					mic_state = LLL_CONN_MIC_FAIL;
   109c8:	2302      	movs	r3, #2
   109ca:	702b      	strb	r3, [r5, #0]
	u8_t is_rx_enqueue = 0U;
   109cc:	f04f 0900 	mov.w	r9, #0
   109d0:	e72d      	b.n	1082e <lll_conn_isr_rx+0x1d2>
   109d2:	bf00      	nop
   109d4:	000103ed 	.word	0x000103ed

000109d8 <ticker_op_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
		  param == ull_disable_mark_get());
}

static void ticker_op_cb(u32_t status, void *param)
{
   109d8:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   109da:	b160      	cbz	r0, 109f6 <ticker_op_cb+0x1e>
   109dc:	f240 13b9 	movw	r3, #441	; 0x1b9
   109e0:	4a05      	ldr	r2, [pc, #20]	; (109f8 <ticker_op_cb+0x20>)
   109e2:	4906      	ldr	r1, [pc, #24]	; (109fc <ticker_op_cb+0x24>)
   109e4:	4806      	ldr	r0, [pc, #24]	; (10a00 <ticker_op_cb+0x28>)
   109e6:	f007 fba5 	bl	18134 <printk>
   109ea:	4040      	eors	r0, r0
   109ec:	f380 8811 	msr	BASEPRI, r0
   109f0:	f04f 0003 	mov.w	r0, #3
   109f4:	df02      	svc	2
}
   109f6:	bd08      	pop	{r3, pc}
   109f8:	00020f3e 	.word	0x00020f3e
   109fc:	00020d26 	.word	0x00020d26
   10a00:	0001ff46 	.word	0x0001ff46

00010a04 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   10a04:	2801      	cmp	r0, #1
{
   10a06:	b510      	push	{r4, lr}
   10a08:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   10a0a:	d110      	bne.n	10a2e <ticker_op_stop_adv_cb+0x2a>
   10a0c:	f7fb fd74 	bl	c4f8 <ull_disable_mark_get>
   10a10:	4284      	cmp	r4, r0
   10a12:	d00c      	beq.n	10a2e <ticker_op_stop_adv_cb+0x2a>
   10a14:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   10a18:	4a05      	ldr	r2, [pc, #20]	; (10a30 <ticker_op_stop_adv_cb+0x2c>)
   10a1a:	4906      	ldr	r1, [pc, #24]	; (10a34 <ticker_op_stop_adv_cb+0x30>)
   10a1c:	4806      	ldr	r0, [pc, #24]	; (10a38 <ticker_op_stop_adv_cb+0x34>)
   10a1e:	f007 fb89 	bl	18134 <printk>
   10a22:	4040      	eors	r0, r0
   10a24:	f380 8811 	msr	BASEPRI, r0
   10a28:	f04f 0003 	mov.w	r0, #3
   10a2c:	df02      	svc	2
}
   10a2e:	bd10      	pop	{r4, pc}
   10a30:	00020f3e 	.word	0x00020f3e
   10a34:	00020f78 	.word	0x00020f78
   10a38:	0001ff46 	.word	0x0001ff46

00010a3c <ull_slave_ticker_cb>:
{
   10a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a3e:	4605      	mov	r5, r0
   10a40:	460f      	mov	r7, r1
	ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   10a42:	4601      	mov	r1, r0
   10a44:	4618      	mov	r0, r3
{
   10a46:	4616      	mov	r6, r2
   10a48:	461c      	mov	r4, r3
	ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   10a4a:	f7ef fee9 	bl	820 <ull_conn_llcp>
	if (ret) {
   10a4e:	2800      	cmp	r0, #0
   10a50:	d136      	bne.n	10ac0 <ull_slave_ticker_cb+0x84>
   10a52:	7c23      	ldrb	r3, [r4, #16]
   10a54:	3301      	adds	r3, #1
   10a56:	b2db      	uxtb	r3, r3
   10a58:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   10a5a:	b963      	cbnz	r3, 10a76 <ull_slave_ticker_cb+0x3a>
   10a5c:	f240 1369 	movw	r3, #361	; 0x169
   10a60:	4a18      	ldr	r2, [pc, #96]	; (10ac4 <ull_slave_ticker_cb+0x88>)
   10a62:	4919      	ldr	r1, [pc, #100]	; (10ac8 <ull_slave_ticker_cb+0x8c>)
   10a64:	4819      	ldr	r0, [pc, #100]	; (10acc <ull_slave_ticker_cb+0x90>)
   10a66:	f007 fb65 	bl	18134 <printk>
   10a6a:	4040      	eors	r0, r0
   10a6c:	f380 8811 	msr	BASEPRI, r0
   10a70:	f04f 0003 	mov.w	r0, #3
   10a74:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   10a76:	4a16      	ldr	r2, [pc, #88]	; (10ad0 <ull_slave_ticker_cb+0x94>)
	p.param = &conn->lll;
   10a78:	f104 031c 	add.w	r3, r4, #28
   10a7c:	60d3      	str	r3, [r2, #12]
	mfy.param = &p;
   10a7e:	4b15      	ldr	r3, [pc, #84]	; (10ad4 <ull_slave_ticker_cb+0x98>)
	p.lazy = lazy;
   10a80:	8116      	strh	r6, [r2, #8]
	p.remainder = remainder;
   10a82:	e9c2 5700 	strd	r5, r7, [r2]
	mfy.param = &p;
   10a86:	609a      	str	r2, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   10a88:	2200      	movs	r2, #0
   10a8a:	4611      	mov	r1, r2
   10a8c:	2001      	movs	r0, #1
   10a8e:	f7f9 f877 	bl	9b80 <mayfly_enqueue>
	LL_ASSERT(!err);
   10a92:	b160      	cbz	r0, 10aae <ull_slave_ticker_cb+0x72>
   10a94:	f240 1375 	movw	r3, #373	; 0x175
   10a98:	4a0a      	ldr	r2, [pc, #40]	; (10ac4 <ull_slave_ticker_cb+0x88>)
   10a9a:	490f      	ldr	r1, [pc, #60]	; (10ad8 <ull_slave_ticker_cb+0x9c>)
   10a9c:	480b      	ldr	r0, [pc, #44]	; (10acc <ull_slave_ticker_cb+0x90>)
   10a9e:	f007 fb49 	bl	18134 <printk>
   10aa2:	4040      	eors	r0, r0
   10aa4:	f380 8811 	msr	BASEPRI, r0
   10aa8:	f04f 0003 	mov.w	r0, #3
   10aac:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   10aae:	20ff      	movs	r0, #255	; 0xff
   10ab0:	f7ff f96a 	bl	fd88 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   10ab4:	4620      	mov	r0, r4
   10ab6:	21ff      	movs	r1, #255	; 0xff
}
   10ab8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   10abc:	f7ff b9aa 	b.w	fe14 <ull_conn_tx_lll_enqueue>
}
   10ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ac2:	bf00      	nop
   10ac4:	00020f3e 	.word	0x00020f3e
   10ac8:	000209c9 	.word	0x000209c9
   10acc:	0001ff46 	.word	0x0001ff46
   10ad0:	200011c8 	.word	0x200011c8
   10ad4:	2000ced8 	.word	0x2000ced8
   10ad8:	000209bb 	.word	0x000209bb

00010adc <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   10adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = prepare_param->param;
   10ae0:	68c4      	ldr	r4, [r0, #12]

	DEBUG_RADIO_START_S(1);

	/* TODO: Do the below in ULL ?  */

	lazy = prepare_param->lazy;
   10ae2:	8903      	ldrh	r3, [r0, #8]

	/* Calc window widening */
	if (lll->role) {
   10ae4:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
   10ae8:	2a00      	cmp	r2, #0
{
   10aea:	4605      	mov	r5, r0
	if (lll->role) {
   10aec:	da09      	bge.n	10b02 <prepare_cb+0x26>
		lll->slave.window_widening_prepare_us +=
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   10aee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		lll->slave.window_widening_prepare_us +=
   10af0:	6b21      	ldr	r1, [r4, #48]	; 0x30
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   10af2:	fb03 2202 	mla	r2, r3, r2, r2
		lll->slave.window_widening_prepare_us +=
   10af6:	440a      	add	r2, r1
		if (lll->slave.window_widening_prepare_us >
		    lll->slave.window_widening_max_us) {
   10af8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			lll->slave.window_widening_prepare_us =
   10afa:	4291      	cmp	r1, r2
   10afc:	bf94      	ite	ls
   10afe:	6321      	strls	r1, [r4, #48]	; 0x30
   10b00:	6322      	strhi	r2, [r4, #48]	; 0x30
				lll->slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	lll->latency_prepare += lazy;
   10b02:	8ae2      	ldrh	r2, [r4, #22]
   10b04:	4413      	add	r3, r2

	/* calc current event counter value */
	event_counter = lll->event_counter + lll->latency_prepare;
   10b06:	8b62      	ldrh	r2, [r4, #26]
	lll->latency_prepare += lazy;
   10b08:	b29b      	uxth	r3, r3
   10b0a:	82e3      	strh	r3, [r4, #22]
	event_counter = lll->event_counter + lll->latency_prepare;
   10b0c:	4413      	add	r3, r2

	/* store the next event counter value */
	lll->event_counter = event_counter + 1;
   10b0e:	3301      	adds	r3, #1
   10b10:	8363      	strh	r3, [r4, #26]

	/* TODO: Do the above in ULL ?  */

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   10b12:	f7ff fcc9 	bl	104a8 <lll_conn_prepare_reset>

	/* TODO: can we do something in ULL? */
	lll->latency_event = lll->latency_prepare;
	lll->latency_prepare = 0;
   10b16:	2300      	movs	r3, #0
	lll->latency_event = lll->latency_prepare;
   10b18:	8ae2      	ldrh	r2, [r4, #22]
	lll->latency_prepare = 0;
   10b1a:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   10b1c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare;
   10b20:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   10b22:	0659      	lsls	r1, r3, #25
   10b24:	f104 061c 	add.w	r6, r4, #28
   10b28:	f140 808e 	bpl.w	10c48 <prepare_cb+0x16c>
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(lll->event_counter - 1,
   10b2c:	8b60      	ldrh	r0, [r4, #26]
   10b2e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   10b30:	3801      	subs	r0, #1
   10b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10b36:	4632      	mov	r2, r6
   10b38:	b280      	uxth	r0, r0
   10b3a:	f7fb ff43 	bl	c9c4 <lll_chan_sel_2>
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   10b3e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   10b42:	4413      	add	r3, r2
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   10b44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   10b46:	429a      	cmp	r2, r3
   10b48:	bf94      	ite	ls
   10b4a:	6362      	strls	r2, [r4, #52]	; 0x34
   10b4c:	6363      	strhi	r3, [r4, #52]	; 0x34
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   10b4e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   10b52:	f04f 0800 	mov.w	r8, #0
	lll->slave.window_size_event_us +=
   10b56:	4413      	add	r3, r2
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   10b58:	e9c4 830e 	strd	r8, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   10b5c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   10b60:	4606      	mov	r6, r0

	/* Start setting up Radio h/w */
	radio_reset();
   10b62:	f001 f83f 	bl	11be4 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   10b66:	4640      	mov	r0, r8
   10b68:	f001 f870 	bl	11c4c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   10b6c:	4620      	mov	r0, r4
   10b6e:	f7ff fcd5 	bl	1051c <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   10b72:	f104 0008 	add.w	r0, r4, #8
   10b76:	f001 f887 	bl	11c88 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((u32_t)lll->crc_init[2] << 16) |
			     ((u32_t)lll->crc_init[1] << 8) |
   10b7a:	7b63      	ldrb	r3, [r4, #13]
			    (((u32_t)lll->crc_init[2] << 16) |
   10b7c:	7ba1      	ldrb	r1, [r4, #14]
			     ((u32_t)lll->crc_init[1] << 8) |
   10b7e:	021b      	lsls	r3, r3, #8
			    (((u32_t)lll->crc_init[2] << 16) |
   10b80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)lll->crc_init[0])));
   10b84:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10b86:	f240 605b 	movw	r0, #1627	; 0x65b
   10b8a:	4319      	orrs	r1, r3
   10b8c:	f001 f904 	bl	11d98 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   10b90:	4630      	mov	r0, r6
   10b92:	f7fc f9d5 	bl	cf40 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   10b96:	4621      	mov	r1, r4
   10b98:	483b      	ldr	r0, [pc, #236]	; (10c88 <prepare_cb+0x1ac>)
   10b9a:	f001 f803 	bl	11ba4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   10b9e:	2096      	movs	r0, #150	; 0x96
   10ba0:	f001 f9a8 	bl	11ef4 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   10ba4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   10ba8:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   10bac:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   10bb0:	4641      	mov	r1, r8
   10bb2:	f002 0207 	and.w	r2, r2, #7
   10bb6:	f000 0007 	and.w	r0, r0, #7
   10bba:	f001 f917 	bl	11dec <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   10bbe:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   10bc0:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   10bc2:	4638      	mov	r0, r7
   10bc4:	f009 feee 	bl	1a9a4 <lll_evt_offset_get>
   10bc8:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   10bca:	686a      	ldr	r2, [r5, #4]
   10bcc:	f106 0109 	add.w	r1, r6, #9
   10bd0:	4640      	mov	r0, r8
   10bd2:	f001 f99b 	bl	11f0c <radio_tmr_start>
   10bd6:	4681      	mov	r9, r0

	radio_tmr_aa_capture();
   10bd8:	f001 fa26 	bl	12028 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   10bdc:	4640      	mov	r0, r8
   10bde:	f001 fa3d 	bl	1205c <radio_tmr_aa_save>

	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   10be2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	       (lll->slave.window_widening_event_us << 1) +
   10be4:	6b60      	ldr	r0, [r4, #52]	; 0x34
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   10be6:	f103 0550 	add.w	r5, r3, #80	; 0x50
   10bea:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   10bee:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   10bf2:	2101      	movs	r1, #1
   10bf4:	f000 0007 	and.w	r0, r0, #7
   10bf8:	f00a fabc 	bl	1b174 <radio_rx_ready_delay_get>
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   10bfc:	444d      	add	r5, r9
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   10bfe:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   10c00:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   10c04:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   10c08:	2802      	cmp	r0, #2
   10c0a:	d028      	beq.n	10c5e <prepare_cb+0x182>
		return 40;
   10c0c:	2804      	cmp	r0, #4
   10c0e:	bf0c      	ite	eq
   10c10:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   10c14:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   10c16:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   10c18:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   10c1a:	f00a faad 	bl	1b178 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   10c1e:	4428      	add	r0, r5
   10c20:	f001 f9f6 	bl	12010 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   10c24:	7c21      	ldrb	r1, [r4, #16]
   10c26:	3103      	adds	r1, #3
   10c28:	4632      	mov	r2, r6
   10c2a:	b2c9      	uxtb	r1, r1
   10c2c:	4638      	mov	r0, r7
   10c2e:	f009 fec7 	bl	1a9c0 <lll_preempt_calc>
   10c32:	b1b0      	cbz	r0, 10c62 <prepare_cb+0x186>
			     ticks_at_event)) {
		radio_isr_set(lll_conn_isr_abort, lll);
   10c34:	4621      	mov	r1, r4
   10c36:	4815      	ldr	r0, [pc, #84]	; (10c8c <prepare_cb+0x1b0>)
   10c38:	f000 ffb4 	bl	11ba4 <radio_isr_set>
		radio_disable();
   10c3c:	f001 f87a 	bl	11d34 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   10c40:	2000      	movs	r0, #0
   10c42:	b003      	add	sp, #12
   10c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   10c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10c4c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   10c50:	9300      	str	r3, [sp, #0]
   10c52:	f104 0023 	add.w	r0, r4, #35	; 0x23
   10c56:	4633      	mov	r3, r6
   10c58:	f009 fe60 	bl	1a91c <lll_chan_sel_1>
   10c5c:	e76f      	b.n	10b3e <prepare_cb+0x62>
		return 24;
   10c5e:	2318      	movs	r3, #24
   10c60:	e7d9      	b.n	10c16 <prepare_cb+0x13a>
		ret = lll_prepare_done(lll);
   10c62:	4620      	mov	r0, r4
   10c64:	f009 fe9c 	bl	1a9a0 <lll_prepare_done>
		LL_ASSERT(!ret);
   10c68:	2800      	cmp	r0, #0
   10c6a:	d0e9      	beq.n	10c40 <prepare_cb+0x164>
   10c6c:	23ff      	movs	r3, #255	; 0xff
   10c6e:	4a08      	ldr	r2, [pc, #32]	; (10c90 <prepare_cb+0x1b4>)
   10c70:	4908      	ldr	r1, [pc, #32]	; (10c94 <prepare_cb+0x1b8>)
   10c72:	4809      	ldr	r0, [pc, #36]	; (10c98 <prepare_cb+0x1bc>)
   10c74:	f007 fa5e 	bl	18134 <printk>
   10c78:	4040      	eors	r0, r0
   10c7a:	f380 8811 	msr	BASEPRI, r0
   10c7e:	f04f 0003 	mov.w	r0, #3
   10c82:	df02      	svc	2
   10c84:	e7dc      	b.n	10c40 <prepare_cb+0x164>
   10c86:	bf00      	nop
   10c88:	0001065d 	.word	0x0001065d
   10c8c:	0001af7d 	.word	0x0001af7d
   10c90:	00020fa7 	.word	0x00020fa7
   10c94:	000208c5 	.word	0x000208c5
   10c98:	0001ff46 	.word	0x0001ff46

00010c9c <lll_slave_prepare>:
{
   10c9c:	b513      	push	{r0, r1, r4, lr}
   10c9e:	4604      	mov	r4, r0
	err = lll_clk_on();
   10ca0:	f7fc f93e 	bl	cf20 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10ca4:	b168      	cbz	r0, 10cc2 <lll_slave_prepare+0x26>
   10ca6:	3044      	adds	r0, #68	; 0x44
   10ca8:	d00b      	beq.n	10cc2 <lll_slave_prepare+0x26>
   10caa:	2345      	movs	r3, #69	; 0x45
   10cac:	4a11      	ldr	r2, [pc, #68]	; (10cf4 <lll_slave_prepare+0x58>)
   10cae:	4912      	ldr	r1, [pc, #72]	; (10cf8 <lll_slave_prepare+0x5c>)
   10cb0:	4812      	ldr	r0, [pc, #72]	; (10cfc <lll_slave_prepare+0x60>)
   10cb2:	f007 fa3f 	bl	18134 <printk>
   10cb6:	4040      	eors	r0, r0
   10cb8:	f380 8811 	msr	BASEPRI, r0
   10cbc:	f04f 0003 	mov.w	r0, #3
   10cc0:	df02      	svc	2
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   10cc2:	9400      	str	r4, [sp, #0]
   10cc4:	2300      	movs	r3, #0
   10cc6:	4a0e      	ldr	r2, [pc, #56]	; (10d00 <lll_slave_prepare+0x64>)
   10cc8:	490e      	ldr	r1, [pc, #56]	; (10d04 <lll_slave_prepare+0x68>)
   10cca:	480f      	ldr	r0, [pc, #60]	; (10d08 <lll_slave_prepare+0x6c>)
   10ccc:	f009 fe5f 	bl	1a98e <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10cd0:	b168      	cbz	r0, 10cee <lll_slave_prepare+0x52>
   10cd2:	3044      	adds	r0, #68	; 0x44
   10cd4:	d00b      	beq.n	10cee <lll_slave_prepare+0x52>
   10cd6:	2349      	movs	r3, #73	; 0x49
   10cd8:	4a06      	ldr	r2, [pc, #24]	; (10cf4 <lll_slave_prepare+0x58>)
   10cda:	4907      	ldr	r1, [pc, #28]	; (10cf8 <lll_slave_prepare+0x5c>)
   10cdc:	4807      	ldr	r0, [pc, #28]	; (10cfc <lll_slave_prepare+0x60>)
   10cde:	f007 fa29 	bl	18134 <printk>
   10ce2:	4040      	eors	r0, r0
   10ce4:	f380 8811 	msr	BASEPRI, r0
   10ce8:	f04f 0003 	mov.w	r0, #3
   10cec:	df02      	svc	2
}
   10cee:	b002      	add	sp, #8
   10cf0:	bd10      	pop	{r4, pc}
   10cf2:	bf00      	nop
   10cf4:	00020fa7 	.word	0x00020fa7
   10cf8:	00020bba 	.word	0x00020bba
   10cfc:	0001ff46 	.word	0x0001ff46
   10d00:	00010add 	.word	0x00010add
   10d04:	000104cd 	.word	0x000104cd
   10d08:	0001af77 	.word	0x0001af77

00010d0c <wl_find>:
		wl[i].taken = 0U;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   10d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d10:	4688      	mov	r8, r1
	int i;

	if (free) {
   10d12:	4615      	mov	r5, r2
   10d14:	b10a      	cbz	r2, 10d1a <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   10d16:	23ff      	movs	r3, #255	; 0xff
   10d18:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10d1a:	4f14      	ldr	r7, [pc, #80]	; (10d6c <wl_find+0x60>)
{
   10d1c:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10d1e:	f000 0601 	and.w	r6, r0, #1
   10d22:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   10d26:	07da      	lsls	r2, r3, #31
   10d28:	d51c      	bpl.n	10d64 <wl_find+0x58>
   10d2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10d2e:	42b3      	cmp	r3, r6
   10d30:	d113      	bne.n	10d5a <wl_find+0x4e>
   10d32:	480f      	ldr	r0, [pc, #60]	; (10d70 <wl_find+0x64>)
   10d34:	2206      	movs	r2, #6
   10d36:	4641      	mov	r1, r8
   10d38:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   10d3c:	f007 ff6d 	bl	18c1a <memcmp>
   10d40:	b910      	cbnz	r0, 10d48 <wl_find+0x3c>
			return i;
   10d42:	b2e0      	uxtb	r0, r4
			*free = i;
		}
	}

	return FILTER_IDX_NONE;
}
   10d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10d48:	b13d      	cbz	r5, 10d5a <wl_find+0x4e>
   10d4a:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   10d4e:	07db      	lsls	r3, r3, #31
   10d50:	d403      	bmi.n	10d5a <wl_find+0x4e>
   10d52:	782b      	ldrb	r3, [r5, #0]
   10d54:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   10d56:	bf08      	it	eq
   10d58:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   10d5a:	3401      	adds	r4, #1
   10d5c:	2c08      	cmp	r4, #8
   10d5e:	d1e0      	bne.n	10d22 <wl_find+0x16>
	return FILTER_IDX_NONE;
   10d60:	20ff      	movs	r0, #255	; 0xff
   10d62:	e7ef      	b.n	10d44 <wl_find+0x38>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10d64:	2d00      	cmp	r5, #0
   10d66:	d1f4      	bne.n	10d52 <wl_find+0x46>
   10d68:	e7f7      	b.n	10d5a <wl_find+0x4e>
   10d6a:	bf00      	nop
   10d6c:	2000a239 	.word	0x2000a239
   10d70:	2000a23b 	.word	0x2000a23b

00010d74 <ll_wl_clear>:
{
   10d74:	b508      	push	{r3, lr}
	if (ull_adv_filter_pol_get(0)) {
   10d76:	2000      	movs	r0, #0
   10d78:	f009 fe41 	bl	1a9fe <ull_adv_filter_pol_get>
   10d7c:	bb58      	cbnz	r0, 10dd6 <ll_wl_clear+0x62>
		wl[i].taken = 0U;
   10d7e:	4b17      	ldr	r3, [pc, #92]	; (10ddc <ll_wl_clear+0x68>)
   10d80:	781a      	ldrb	r2, [r3, #0]
   10d82:	f360 0200 	bfi	r2, r0, #0, #1
   10d86:	701a      	strb	r2, [r3, #0]
   10d88:	7a1a      	ldrb	r2, [r3, #8]
   10d8a:	f360 0200 	bfi	r2, r0, #0, #1
   10d8e:	721a      	strb	r2, [r3, #8]
   10d90:	7c1a      	ldrb	r2, [r3, #16]
   10d92:	f360 0200 	bfi	r2, r0, #0, #1
   10d96:	741a      	strb	r2, [r3, #16]
   10d98:	7e1a      	ldrb	r2, [r3, #24]
   10d9a:	f360 0200 	bfi	r2, r0, #0, #1
   10d9e:	761a      	strb	r2, [r3, #24]
   10da0:	f893 2020 	ldrb.w	r2, [r3, #32]
   10da4:	f360 0200 	bfi	r2, r0, #0, #1
   10da8:	f883 2020 	strb.w	r2, [r3, #32]
   10dac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   10db0:	f360 0200 	bfi	r2, r0, #0, #1
   10db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   10db8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   10dbc:	f360 0200 	bfi	r2, r0, #0, #1
   10dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   10dc4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   10dc8:	f360 0200 	bfi	r2, r0, #0, #1
   10dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	wl_anon = 0U;
   10dd0:	4b03      	ldr	r3, [pc, #12]	; (10de0 <ll_wl_clear+0x6c>)
   10dd2:	7018      	strb	r0, [r3, #0]
}
   10dd4:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10dd6:	200c      	movs	r0, #12
   10dd8:	e7fc      	b.n	10dd4 <ll_wl_clear+0x60>
   10dda:	bf00      	nop
   10ddc:	2000a239 	.word	0x2000a239
   10de0:	2000a279 	.word	0x2000a279

00010de4 <ll_wl_remove>:
{
   10de4:	b538      	push	{r3, r4, r5, lr}
   10de6:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   10de8:	2000      	movs	r0, #0
   10dea:	f009 fe08 	bl	1a9fe <ull_adv_filter_pol_get>
   10dee:	4604      	mov	r4, r0
   10df0:	bb18      	cbnz	r0, 10e3a <ll_wl_remove+0x56>
	if (addr->type == ADDR_TYPE_ANON) {
   10df2:	7828      	ldrb	r0, [r5, #0]
   10df4:	28ff      	cmp	r0, #255	; 0xff
   10df6:	d103      	bne.n	10e00 <ll_wl_remove+0x1c>
		wl_anon = 0U;
   10df8:	4b11      	ldr	r3, [pc, #68]	; (10e40 <ll_wl_remove+0x5c>)
		return 0;
   10dfa:	4620      	mov	r0, r4
		wl_anon = 0U;
   10dfc:	701c      	strb	r4, [r3, #0]
}
   10dfe:	bd38      	pop	{r3, r4, r5, pc}
}

static u32_t wl_remove(bt_addr_le_t *id_addr)
{
	/* find the device and mark it as empty */
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   10e00:	4622      	mov	r2, r4
   10e02:	1c69      	adds	r1, r5, #1
   10e04:	f7ff ff82 	bl	10d0c <wl_find>

	if (i < ARRAY_SIZE(wl)) {
   10e08:	2807      	cmp	r0, #7
   10e0a:	d814      	bhi.n	10e36 <ll_wl_remove+0x52>
		u8_t j = wl[i].rl_idx;
   10e0c:	4b0d      	ldr	r3, [pc, #52]	; (10e44 <ll_wl_remove+0x60>)
   10e0e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   10e12:	7855      	ldrb	r5, [r2, #1]

		if (j < ARRAY_SIZE(rl)) {
   10e14:	2d07      	cmp	r5, #7
   10e16:	d806      	bhi.n	10e26 <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   10e18:	2228      	movs	r2, #40	; 0x28
   10e1a:	490b      	ldr	r1, [pc, #44]	; (10e48 <ll_wl_remove+0x64>)
   10e1c:	436a      	muls	r2, r5
   10e1e:	5c8d      	ldrb	r5, [r1, r2]
   10e20:	f364 1545 	bfi	r5, r4, #5, #1
   10e24:	548d      	strb	r5, [r1, r2]
		}
		wl[i].taken = 0U;
   10e26:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   10e2a:	f36f 0200 	bfc	r2, #0, #1
   10e2e:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return wl_remove(addr);
   10e32:	b2e0      	uxtb	r0, r4
   10e34:	e7e3      	b.n	10dfe <ll_wl_remove+0x1a>
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10e36:	2402      	movs	r4, #2
   10e38:	e7fb      	b.n	10e32 <ll_wl_remove+0x4e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10e3a:	200c      	movs	r0, #12
   10e3c:	e7df      	b.n	10dfe <ll_wl_remove+0x1a>
   10e3e:	bf00      	nop
   10e40:	2000a279 	.word	0x2000a279
   10e44:	2000a239 	.word	0x2000a239
   10e48:	200011d8 	.word	0x200011d8

00010e4c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   10e4c:	2807      	cmp	r0, #7
{
   10e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e50:	4604      	mov	r4, r0
   10e52:	460f      	mov	r7, r1
   10e54:	4616      	mov	r6, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   10e56:	d90b      	bls.n	10e70 <ll_rl_id_addr_get+0x24>
   10e58:	23ff      	movs	r3, #255	; 0xff
   10e5a:	4a17      	ldr	r2, [pc, #92]	; (10eb8 <ll_rl_id_addr_get+0x6c>)
   10e5c:	4917      	ldr	r1, [pc, #92]	; (10ebc <ll_rl_id_addr_get+0x70>)
   10e5e:	4818      	ldr	r0, [pc, #96]	; (10ec0 <ll_rl_id_addr_get+0x74>)
   10e60:	f007 f968 	bl	18134 <printk>
   10e64:	4040      	eors	r0, r0
   10e66:	f380 8811 	msr	BASEPRI, r0
   10e6a:	f04f 0003 	mov.w	r0, #3
   10e6e:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   10e70:	2328      	movs	r3, #40	; 0x28
   10e72:	4d14      	ldr	r5, [pc, #80]	; (10ec4 <ll_rl_id_addr_get+0x78>)
   10e74:	4363      	muls	r3, r4
   10e76:	5ceb      	ldrb	r3, [r5, r3]
   10e78:	07db      	lsls	r3, r3, #31
   10e7a:	d40c      	bmi.n	10e96 <ll_rl_id_addr_get+0x4a>
   10e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
   10e80:	4a0d      	ldr	r2, [pc, #52]	; (10eb8 <ll_rl_id_addr_get+0x6c>)
   10e82:	4911      	ldr	r1, [pc, #68]	; (10ec8 <ll_rl_id_addr_get+0x7c>)
   10e84:	480e      	ldr	r0, [pc, #56]	; (10ec0 <ll_rl_id_addr_get+0x74>)
   10e86:	f007 f955 	bl	18134 <printk>
   10e8a:	4040      	eors	r0, r0
   10e8c:	f380 8811 	msr	BASEPRI, r0
   10e90:	f04f 0003 	mov.w	r0, #3
   10e94:	df02      	svc	2
	*id_addr_type = rl[rl_idx].id_addr_type;
   10e96:	2128      	movs	r1, #40	; 0x28
   10e98:	fb01 f304 	mul.w	r3, r1, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   10e9c:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   10ea0:	5ceb      	ldrb	r3, [r5, r3]
   10ea2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10ea6:	703b      	strb	r3, [r7, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   10ea8:	4630      	mov	r0, r6
   10eaa:	2206      	movs	r2, #6
   10eac:	3101      	adds	r1, #1
}
   10eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   10eb2:	f007 bec2 	b.w	18c3a <memcpy>
   10eb6:	bf00      	nop
   10eb8:	00020ffe 	.word	0x00020ffe
   10ebc:	00021039 	.word	0x00021039
   10ec0:	0001ff46 	.word	0x0001ff46
   10ec4:	200011d8 	.word	0x200011d8
   10ec8:	00021044 	.word	0x00021044

00010ecc <ll_rl_clear>:
{
   10ecc:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   10ece:	2000      	movs	r0, #0
   10ed0:	f009 fd8e 	bl	1a9f0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   10ed4:	bb88      	cbnz	r0, 10f3a <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   10ed6:	4b1a      	ldr	r3, [pc, #104]	; (10f40 <ll_rl_clear+0x74>)
   10ed8:	781a      	ldrb	r2, [r3, #0]
   10eda:	f360 0200 	bfi	r2, r0, #0, #1
   10ede:	701a      	strb	r2, [r3, #0]
   10ee0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   10ee4:	f360 0200 	bfi	r2, r0, #0, #1
   10ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   10eec:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   10ef0:	f360 0200 	bfi	r2, r0, #0, #1
   10ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   10ef8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   10efc:	f360 0200 	bfi	r2, r0, #0, #1
   10f00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   10f04:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
   10f08:	f360 0200 	bfi	r2, r0, #0, #1
   10f0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
   10f10:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   10f14:	f360 0200 	bfi	r2, r0, #0, #1
   10f18:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   10f1c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
   10f20:	f360 0200 	bfi	r2, r0, #0, #1
   10f24:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
   10f28:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   10f2c:	f360 0200 	bfi	r2, r0, #0, #1
   10f30:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	peer_irk_count = 0U;
   10f34:	4b03      	ldr	r3, [pc, #12]	; (10f44 <ll_rl_clear+0x78>)
   10f36:	7018      	strb	r0, [r3, #0]
}
   10f38:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10f3a:	200c      	movs	r0, #12
   10f3c:	e7fc      	b.n	10f38 <ll_rl_clear+0x6c>
   10f3e:	bf00      	nop
   10f40:	200011d8 	.word	0x200011d8
   10f44:	2000a17d 	.word	0x2000a17d

00010f48 <ll_rl_enable>:
{
   10f48:	b510      	push	{r4, lr}
   10f4a:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   10f4c:	2000      	movs	r0, #0
   10f4e:	f009 fd4f 	bl	1a9f0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   10f52:	b960      	cbnz	r0, 10f6e <ll_rl_enable+0x26>
	switch (enable) {
   10f54:	b124      	cbz	r4, 10f60 <ll_rl_enable+0x18>
   10f56:	2c01      	cmp	r4, #1
   10f58:	d005      	beq.n	10f66 <ll_rl_enable+0x1e>
		return BT_HCI_ERR_INVALID_PARAM;
   10f5a:	2412      	movs	r4, #18
}
   10f5c:	4620      	mov	r0, r4
   10f5e:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   10f60:	4b04      	ldr	r3, [pc, #16]	; (10f74 <ll_rl_enable+0x2c>)
   10f62:	701c      	strb	r4, [r3, #0]
		break;
   10f64:	e7fa      	b.n	10f5c <ll_rl_enable+0x14>
		rl_enable = 1U;
   10f66:	4b03      	ldr	r3, [pc, #12]	; (10f74 <ll_rl_enable+0x2c>)
   10f68:	701c      	strb	r4, [r3, #0]
	return 0;
   10f6a:	4604      	mov	r4, r0
		break;
   10f6c:	e7f6      	b.n	10f5c <ll_rl_enable+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10f6e:	240c      	movs	r4, #12
   10f70:	e7f4      	b.n	10f5c <ll_rl_enable+0x14>
   10f72:	bf00      	nop
   10f74:	2000a206 	.word	0x2000a206

00010f78 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   10f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10f7c:	4358      	muls	r0, r3
   10f7e:	4b01      	ldr	r3, [pc, #4]	; (10f84 <ll_rl_timeout_set+0xc>)
   10f80:	6018      	str	r0, [r3, #0]
}
   10f82:	4770      	bx	lr
   10f84:	20001318 	.word	0x20001318

00010f88 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   10f88:	b128      	cbz	r0, 10f96 <ull_filter_adv_scan_state_cb+0xe>
}

static void rpa_refresh_start(void)
{
	BT_DBG("");
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   10f8a:	4b04      	ldr	r3, [pc, #16]	; (10f9c <ull_filter_adv_scan_state_cb+0x14>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10f8c:	4904      	ldr	r1, [pc, #16]	; (10fa0 <ull_filter_adv_scan_state_cb+0x18>)
   10f8e:	681a      	ldr	r2, [r3, #0]
   10f90:	4804      	ldr	r0, [pc, #16]	; (10fa4 <ull_filter_adv_scan_state_cb+0x1c>)
   10f92:	f006 bb47 	b.w	17624 <k_delayed_work_submit_to_queue>
}

static void rpa_refresh_stop(void)
{
	k_delayed_work_cancel(&rpa_work);
   10f96:	4802      	ldr	r0, [pc, #8]	; (10fa0 <ull_filter_adv_scan_state_cb+0x18>)
   10f98:	f00c bfa9 	b.w	1deee <k_delayed_work_cancel>
   10f9c:	20001318 	.word	0x20001318
   10fa0:	2000131c 	.word	0x2000131c
   10fa4:	20005c68 	.word	0x20005c68

00010fa8 <ull_filter_adv_update>:
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   10fa8:	4a03      	ldr	r2, [pc, #12]	; (10fb8 <ull_filter_adv_update+0x10>)
   10faa:	2300      	movs	r3, #0
   10fac:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   10fae:	7053      	strb	r3, [r2, #1]
	filter->enable_bitmask = 0;
   10fb0:	4a02      	ldr	r2, [pc, #8]	; (10fbc <ull_filter_adv_update+0x14>)
   10fb2:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   10fb4:	7053      	strb	r3, [r2, #1]
}
   10fb6:	4770      	bx	lr
   10fb8:	2000a27a 	.word	0x2000a27a
   10fbc:	2000a207 	.word	0x2000a207

00010fc0 <ull_filter_adv_pdu_update>:
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   10fc0:	2907      	cmp	r1, #7
{
   10fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fc6:	4607      	mov	r7, r0
   10fc8:	460d      	mov	r5, r1
   10fca:	4614      	mov	r4, r2
   10fcc:	f102 0802 	add.w	r8, r2, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   10fd0:	d83b      	bhi.n	1104a <ull_filter_adv_pdu_update+0x8a>
   10fd2:	2328      	movs	r3, #40	; 0x28
   10fd4:	4e2b      	ldr	r6, [pc, #172]	; (11084 <ull_filter_adv_pdu_update+0xc4>)
   10fd6:	434b      	muls	r3, r1
   10fd8:	5cf3      	ldrb	r3, [r6, r3]
   10fda:	071a      	lsls	r2, r3, #28
   10fdc:	d535      	bpl.n	1104a <ull_filter_adv_pdu_update+0x8a>
		LL_ASSERT(rl[idx].rpas_ready);
   10fde:	079b      	lsls	r3, r3, #30
   10fe0:	d40c      	bmi.n	10ffc <ull_filter_adv_pdu_update+0x3c>
   10fe2:	f44f 7318 	mov.w	r3, #608	; 0x260
   10fe6:	4a28      	ldr	r2, [pc, #160]	; (11088 <ull_filter_adv_pdu_update+0xc8>)
   10fe8:	4928      	ldr	r1, [pc, #160]	; (1108c <ull_filter_adv_pdu_update+0xcc>)
   10fea:	4829      	ldr	r0, [pc, #164]	; (11090 <ull_filter_adv_pdu_update+0xd0>)
   10fec:	f007 f8a2 	bl	18134 <printk>
   10ff0:	4040      	eors	r0, r0
   10ff2:	f380 8811 	msr	BASEPRI, r0
   10ff6:	f04f 0003 	mov.w	r0, #3
   10ffa:	df02      	svc	2
		pdu->tx_addr = 1;
   10ffc:	7823      	ldrb	r3, [r4, #0]
   10ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11002:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   11004:	2328      	movs	r3, #40	; 0x28
   11006:	fb03 6605 	mla	r6, r3, r5, r6
   1100a:	2206      	movs	r2, #6
   1100c:	6a71      	ldr	r1, [r6, #36]	; 0x24
   1100e:	4640      	mov	r0, r8
   11010:	f007 fe13 	bl	18c3a <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11014:	7823      	ldrb	r3, [r4, #0]
   11016:	f003 020f 	and.w	r2, r3, #15
   1101a:	2a01      	cmp	r2, #1
   1101c:	d12f      	bne.n	1107e <ull_filter_adv_pdu_update+0xbe>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1101e:	2d07      	cmp	r5, #7
   11020:	f104 0008 	add.w	r0, r4, #8
   11024:	d81f      	bhi.n	11066 <ull_filter_adv_pdu_update+0xa6>
   11026:	2228      	movs	r2, #40	; 0x28
   11028:	4916      	ldr	r1, [pc, #88]	; (11084 <ull_filter_adv_pdu_update+0xc4>)
   1102a:	fb02 f605 	mul.w	r6, r2, r5
   1102e:	5d8e      	ldrb	r6, [r1, r6]
   11030:	0776      	lsls	r6, r6, #29
   11032:	d518      	bpl.n	11066 <ull_filter_adv_pdu_update+0xa6>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   11034:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   11038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1103c:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1103e:	2206      	movs	r2, #6
   11040:	311e      	adds	r1, #30
}
   11042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   11046:	f007 bdf8 	b.w	18c3a <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   1104a:	f897 00da 	ldrb.w	r0, [r7, #218]	; 0xda
   1104e:	7823      	ldrb	r3, [r4, #0]
   11050:	f000 0003 	and.w	r0, r0, #3
   11054:	f360 1386 	bfi	r3, r0, #6, #1
   11058:	7023      	strb	r3, [r4, #0]
		ll_addr_get(adv->own_addr_type & 0x1, adva);
   1105a:	4641      	mov	r1, r8
   1105c:	f000 0001 	and.w	r0, r0, #1
   11060:	f7f9 facc 	bl	a5fc <ll_addr_get>
   11064:	e7d6      	b.n	11014 <ull_filter_adv_pdu_update+0x54>
			pdu->rx_addr = adv->id_addr_type;
   11066:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
   1106a:	7822      	ldrb	r2, [r4, #0]
   1106c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   11070:	f363 12c7 	bfi	r2, r3, #7, #1
   11074:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   11076:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
   1107a:	2206      	movs	r2, #6
   1107c:	e7e1      	b.n	11042 <ull_filter_adv_pdu_update+0x82>
}
   1107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11082:	bf00      	nop
   11084:	200011d8 	.word	0x200011d8
   11088:	00020ffe 	.word	0x00020ffe
   1108c:	00021068 	.word	0x00021068
   11090:	0001ff46 	.word	0x0001ff46

00011094 <ull_filter_rl_find>:
{
   11094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11098:	468a      	mov	sl, r1
	if (free) {
   1109a:	4614      	mov	r4, r2
   1109c:	b10a      	cbz	r2, 110a2 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1109e:	23ff      	movs	r3, #255	; 0xff
   110a0:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   110a2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 110fc <ull_filter_rl_find+0x68>
{
   110a6:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   110a8:	f000 0801 	and.w	r8, r0, #1
   110ac:	2628      	movs	r6, #40	; 0x28
   110ae:	436e      	muls	r6, r5
   110b0:	b2ef      	uxtb	r7, r5
   110b2:	f819 3006 	ldrb.w	r3, [r9, r6]
   110b6:	07da      	lsls	r2, r3, #31
   110b8:	d51a      	bpl.n	110f0 <ull_filter_rl_find+0x5c>
   110ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
   110be:	4543      	cmp	r3, r8
   110c0:	d10f      	bne.n	110e2 <ull_filter_rl_find+0x4e>
   110c2:	480d      	ldr	r0, [pc, #52]	; (110f8 <ull_filter_rl_find+0x64>)
   110c4:	2206      	movs	r2, #6
   110c6:	4651      	mov	r1, sl
   110c8:	4430      	add	r0, r6
   110ca:	f007 fda6 	bl	18c1a <memcmp>
   110ce:	b160      	cbz	r0, 110ea <ull_filter_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   110d0:	b13c      	cbz	r4, 110e2 <ull_filter_rl_find+0x4e>
   110d2:	f819 3006 	ldrb.w	r3, [r9, r6]
   110d6:	07db      	lsls	r3, r3, #31
   110d8:	d403      	bmi.n	110e2 <ull_filter_rl_find+0x4e>
   110da:	7823      	ldrb	r3, [r4, #0]
   110dc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   110de:	bf08      	it	eq
   110e0:	7027      	strbeq	r7, [r4, #0]
   110e2:	3501      	adds	r5, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   110e4:	2d08      	cmp	r5, #8
   110e6:	d1e1      	bne.n	110ac <ull_filter_rl_find+0x18>
	return FILTER_IDX_NONE;
   110e8:	27ff      	movs	r7, #255	; 0xff
}
   110ea:	4638      	mov	r0, r7
   110ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   110f0:	2c00      	cmp	r4, #0
   110f2:	d1f2      	bne.n	110da <ull_filter_rl_find+0x46>
   110f4:	e7f5      	b.n	110e2 <ull_filter_rl_find+0x4e>
   110f6:	bf00      	nop
   110f8:	200011d9 	.word	0x200011d9
   110fc:	200011d8 	.word	0x200011d8

00011100 <ll_wl_add>:
{
   11100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11104:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   11106:	2000      	movs	r0, #0
   11108:	f009 fc79 	bl	1a9fe <ull_adv_filter_pol_get>
   1110c:	4604      	mov	r4, r0
   1110e:	2800      	cmp	r0, #0
   11110:	d143      	bne.n	1119a <ll_wl_add+0x9a>
	if (addr->type == ADDR_TYPE_ANON) {
   11112:	7838      	ldrb	r0, [r7, #0]
   11114:	28ff      	cmp	r0, #255	; 0xff
   11116:	d106      	bne.n	11126 <ll_wl_add+0x26>
		wl_anon = 1U;
   11118:	4b21      	ldr	r3, [pc, #132]	; (111a0 <ll_wl_add+0xa0>)
   1111a:	2201      	movs	r2, #1
   1111c:	701a      	strb	r2, [r3, #0]
		return 0;
   1111e:	4620      	mov	r0, r4
}
   11120:	b002      	add	sp, #8
   11122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   11126:	f107 0801 	add.w	r8, r7, #1
   1112a:	f10d 0207 	add.w	r2, sp, #7
   1112e:	4641      	mov	r1, r8
   11130:	f7ff fdec 	bl	10d0c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11134:	2807      	cmp	r0, #7
   11136:	d929      	bls.n	1118c <ll_wl_add+0x8c>
	} else if (j >= ARRAY_SIZE(wl)) {
   11138:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1113c:	2e07      	cmp	r6, #7
   1113e:	d82a      	bhi.n	11196 <ll_wl_add+0x96>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11140:	4d18      	ldr	r5, [pc, #96]	; (111a4 <ll_wl_add+0xa4>)
   11142:	783a      	ldrb	r2, [r7, #0]
   11144:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   11148:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1114c:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   11150:	4641      	mov	r1, r8
   11152:	2206      	movs	r2, #6
   11154:	3002      	adds	r0, #2
   11156:	f805 3036 	strb.w	r3, [r5, r6, lsl #3]
   1115a:	f007 fd6e 	bl	18c3a <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1115e:	4622      	mov	r2, r4
   11160:	4641      	mov	r1, r8
   11162:	7838      	ldrb	r0, [r7, #0]
   11164:	f7ff ff96 	bl	11094 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   11168:	00f3      	lsls	r3, r6, #3
   1116a:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   1116c:	442b      	add	r3, r5
	if (j < ARRAY_SIZE(rl)) {
   1116e:	d80f      	bhi.n	11190 <ll_wl_add+0x90>
		wl[i].rl_idx = j;
   11170:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1U;
   11172:	2328      	movs	r3, #40	; 0x28
   11174:	4a0c      	ldr	r2, [pc, #48]	; (111a8 <ll_wl_add+0xa8>)
   11176:	4358      	muls	r0, r3
   11178:	5c13      	ldrb	r3, [r2, r0]
   1117a:	f043 0320 	orr.w	r3, r3, #32
   1117e:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1U;
   11180:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   11184:	f043 0301 	orr.w	r3, r3, #1
   11188:	f805 3036 	strb.w	r3, [r5, r6, lsl #3]
	return wl_add(addr);
   1118c:	b2e0      	uxtb	r0, r4
   1118e:	e7c7      	b.n	11120 <ll_wl_add+0x20>
		wl[i].rl_idx = FILTER_IDX_NONE;
   11190:	22ff      	movs	r2, #255	; 0xff
   11192:	705a      	strb	r2, [r3, #1]
   11194:	e7f4      	b.n	11180 <ll_wl_add+0x80>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11196:	2407      	movs	r4, #7
   11198:	e7f8      	b.n	1118c <ll_wl_add+0x8c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1119a:	200c      	movs	r0, #12
   1119c:	e7c0      	b.n	11120 <ll_wl_add+0x20>
   1119e:	bf00      	nop
   111a0:	2000a279 	.word	0x2000a279
   111a4:	2000a239 	.word	0x2000a239
   111a8:	200011d8 	.word	0x200011d8

000111ac <ll_rl_add>:
{
   111ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111b0:	4680      	mov	r8, r0
   111b2:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   111b4:	2000      	movs	r0, #0
{
   111b6:	4689      	mov	r9, r1
   111b8:	4692      	mov	sl, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   111ba:	f009 fc19 	bl	1a9f0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   111be:	2800      	cmp	r0, #0
   111c0:	f040 8086 	bne.w	112d0 <ll_rl_add+0x124>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   111c4:	4647      	mov	r7, r8
   111c6:	f10d 020f 	add.w	r2, sp, #15
   111ca:	f817 0b01 	ldrb.w	r0, [r7], #1
   111ce:	4639      	mov	r1, r7
   111d0:	f7ff ff60 	bl	11094 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   111d4:	2807      	cmp	r0, #7
   111d6:	d97d      	bls.n	112d4 <ll_rl_add+0x128>
	} else if (j >= ARRAY_SIZE(rl)) {
   111d8:	f89d 500f 	ldrb.w	r5, [sp, #15]
   111dc:	2d07      	cmp	r5, #7
   111de:	d87b      	bhi.n	112d8 <ll_rl_add+0x12c>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   111e0:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
   111e4:	4c3d      	ldr	r4, [pc, #244]	; (112dc <ll_rl_add+0x130>)
   111e6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   111ea:	2628      	movs	r6, #40	; 0x28
   111ec:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   111ee:	f10b 0001 	add.w	r0, fp, #1
   111f2:	2206      	movs	r2, #6
   111f4:	4639      	mov	r1, r7
   111f6:	4420      	add	r0, r4
   111f8:	f007 fd1f 	bl	18c3a <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   111fc:	f898 1000 	ldrb.w	r1, [r8]
   11200:	5da3      	ldrb	r3, [r4, r6]
   11202:	19a2      	adds	r2, r4, r6
   11204:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   11208:	4648      	mov	r0, r9
   1120a:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1120c:	9201      	str	r2, [sp, #4]
   1120e:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   11210:	f009 f967 	bl	1a4e2 <mem_nz>
   11214:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   11216:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   11218:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   1121c:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   1121e:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   11220:	f009 f95f 	bl	1a4e2 <mem_nz>
   11224:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   11226:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   11228:	f000 0001 	and.w	r0, r0, #1
   1122c:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   11230:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   11234:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   11236:	d137      	bne.n	112a8 <ll_rl_add+0xfc>
	if (rl[i].lirk) {
   11238:	b158      	cbz	r0, 11252 <ll_rl_add+0xa6>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1123a:	f10b 0007 	add.w	r0, fp, #7
   1123e:	2210      	movs	r2, #16
   11240:	4651      	mov	r1, sl
   11242:	4420      	add	r0, r4
   11244:	f007 fcf9 	bl	18c3a <memcpy>
		rl[i].local_rpa = NULL;
   11248:	2328      	movs	r3, #40	; 0x28
   1124a:	fb03 4305 	mla	r3, r3, r5, r4
   1124e:	2200      	movs	r2, #0
   11250:	625a      	str	r2, [r3, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   11252:	2628      	movs	r6, #40	; 0x28
   11254:	436e      	muls	r6, r5
   11256:	f10b 0018 	add.w	r0, fp, #24
   1125a:	2206      	movs	r2, #6
   1125c:	2100      	movs	r1, #0
   1125e:	4420      	add	r0, r4
   11260:	f007 fd15 	bl	18c8e <memset>
	rl[i].rpas_ready = 0U;
   11264:	5da3      	ldrb	r3, [r4, r6]
   11266:	f023 0312 	bic.w	r3, r3, #18
   1126a:	55a3      	strb	r3, [r4, r6]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1126c:	2200      	movs	r2, #0
   1126e:	4639      	mov	r1, r7
   11270:	f898 0000 	ldrb.w	r0, [r8]
   11274:	f7ff fd4a 	bl	10d0c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   11278:	2807      	cmp	r0, #7
   1127a:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   1127c:	bf9d      	ittte	ls
   1127e:	4a18      	ldrls	r2, [pc, #96]	; (112e0 <ll_rl_add+0x134>)
		rl[i].wl = 1U;
   11280:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   11284:	eb02 02c0 	addls.w	r2, r2, r0, lsl #3
		rl[i].wl = 0U;
   11288:	f36f 1345 	bfchi	r3, #5, #1
   1128c:	55a3      	strb	r3, [r4, r6]
	rl[i].taken = 1U;
   1128e:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   11292:	bf98      	it	ls
   11294:	7055      	strbls	r5, [r2, #1]
	rl[i].taken = 1U;
   11296:	435d      	muls	r5, r3
	return 0;
   11298:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1129a:	5d63      	ldrb	r3, [r4, r5]
   1129c:	f043 0301 	orr.w	r3, r3, #1
   112a0:	5563      	strb	r3, [r4, r5]
}
   112a2:	b005      	add	sp, #20
   112a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   112a8:	4b0e      	ldr	r3, [pc, #56]	; (112e4 <ll_rl_add+0x138>)
   112aa:	7819      	ldrb	r1, [r3, #0]
   112ac:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   112ae:	4a0e      	ldr	r2, [pc, #56]	; (112e8 <ll_rl_add+0x13c>)
   112b0:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   112b2:	1c4a      	adds	r2, r1, #1
   112b4:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
   112b6:	4b0d      	ldr	r3, [pc, #52]	; (112ec <ll_rl_add+0x140>)
   112b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   112bc:	f109 0210 	add.w	r2, r9, #16
   112c0:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   112c2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   112c6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   112ca:	454a      	cmp	r2, r9
   112cc:	d1f9      	bne.n	112c2 <ll_rl_add+0x116>
   112ce:	e7b3      	b.n	11238 <ll_rl_add+0x8c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   112d0:	200c      	movs	r0, #12
   112d2:	e7e6      	b.n	112a2 <ll_rl_add+0xf6>
		return BT_HCI_ERR_INVALID_PARAM;
   112d4:	2012      	movs	r0, #18
   112d6:	e7e4      	b.n	112a2 <ll_rl_add+0xf6>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   112d8:	2007      	movs	r0, #7
   112da:	e7e2      	b.n	112a2 <ll_rl_add+0xf6>
   112dc:	200011d8 	.word	0x200011d8
   112e0:	2000a239 	.word	0x2000a239
   112e4:	2000a17d 	.word	0x2000a17d
   112e8:	2000a17e 	.word	0x2000a17e
   112ec:	2000a186 	.word	0x2000a186

000112f0 <ll_rl_remove>:
{
   112f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112f4:	4683      	mov	fp, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   112f6:	2000      	movs	r0, #0
   112f8:	f009 fb7a 	bl	1a9f0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   112fc:	4606      	mov	r6, r0
   112fe:	2800      	cmp	r0, #0
   11300:	d156      	bne.n	113b0 <ll_rl_remove+0xc0>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11302:	46d8      	mov	r8, fp
   11304:	4632      	mov	r2, r6
   11306:	f818 0b01 	ldrb.w	r0, [r8], #1
   1130a:	4641      	mov	r1, r8
   1130c:	f7ff fec2 	bl	11094 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11310:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11312:	4682      	mov	sl, r0
	if (i < ARRAY_SIZE(rl)) {
   11314:	d84e      	bhi.n	113b4 <ll_rl_remove+0xc4>
		if (rl[i].pirk) {
   11316:	2328      	movs	r3, #40	; 0x28
   11318:	fb03 f200 	mul.w	r2, r3, r0
   1131c:	4c26      	ldr	r4, [pc, #152]	; (113b8 <ll_rl_remove+0xc8>)
   1131e:	18a1      	adds	r1, r4, r2
   11320:	5ca2      	ldrb	r2, [r4, r2]
   11322:	0753      	lsls	r3, r2, #29
   11324:	d527      	bpl.n	11376 <ll_rl_remove+0x86>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11326:	4f25      	ldr	r7, [pc, #148]	; (113bc <ll_rl_remove+0xcc>)
   11328:	783d      	ldrb	r5, [r7, #0]
   1132a:	3d01      	subs	r5, #1
			if (pj && pi != pj) {
   1132c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11330:	d01e      	beq.n	11370 <ll_rl_remove+0x80>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11332:	f891 9017 	ldrb.w	r9, [r1, #23]
			if (pj && pi != pj) {
   11336:	45a9      	cmp	r9, r5
   11338:	d01a      	beq.n	11370 <ll_rl_remove+0x80>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   1133a:	4821      	ldr	r0, [pc, #132]	; (113c0 <ll_rl_remove+0xd0>)
   1133c:	2210      	movs	r2, #16
   1133e:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   11342:	eb00 1009 	add.w	r0, r0, r9, lsl #4
   11346:	f007 fc78 	bl	18c3a <memcpy>
					if (rl[k].taken && rl[k].pirk &&
   1134a:	2328      	movs	r3, #40	; 0x28
   1134c:	fb03 f106 	mul.w	r1, r3, r6
   11350:	1862      	adds	r2, r4, r1
   11352:	5c61      	ldrb	r1, [r4, r1]
   11354:	f011 0f01 	tst.w	r1, #1
   11358:	b2f0      	uxtb	r0, r6
   1135a:	d025      	beq.n	113a8 <ll_rl_remove+0xb8>
   1135c:	0749      	lsls	r1, r1, #29
   1135e:	d523      	bpl.n	113a8 <ll_rl_remove+0xb8>
   11360:	7dd1      	ldrb	r1, [r2, #23]
   11362:	42a9      	cmp	r1, r5
   11364:	d120      	bne.n	113a8 <ll_rl_remove+0xb8>
						peer_irk_rl_ids[pi] = k;
   11366:	4b17      	ldr	r3, [pc, #92]	; (113c4 <ll_rl_remove+0xd4>)
						rl[k].pirk_idx = pi;
   11368:	f882 9017 	strb.w	r9, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1136c:	f803 0009 	strb.w	r0, [r3, r9]
			peer_irk_count--;
   11370:	783b      	ldrb	r3, [r7, #0]
   11372:	3b01      	subs	r3, #1
   11374:	703b      	strb	r3, [r7, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11376:	2200      	movs	r2, #0
   11378:	4641      	mov	r1, r8
   1137a:	f89b 0000 	ldrb.w	r0, [fp]
   1137e:	f7ff fcc5 	bl	10d0c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   11382:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   11384:	bf9c      	itt	ls
   11386:	4b10      	ldrls	r3, [pc, #64]	; (113c8 <ll_rl_remove+0xd8>)
   11388:	eb03 03c0 	addls.w	r3, r3, r0, lsl #3
		rl[i].taken = 0U;
   1138c:	f04f 0028 	mov.w	r0, #40	; 0x28
   11390:	fb00 f00a 	mul.w	r0, r0, sl
			wl[j].rl_idx = FILTER_IDX_NONE;
   11394:	bf9c      	itt	ls
   11396:	22ff      	movls	r2, #255	; 0xff
   11398:	705a      	strbls	r2, [r3, #1]
		rl[i].taken = 0U;
   1139a:	5c23      	ldrb	r3, [r4, r0]
   1139c:	f36f 0300 	bfc	r3, #0, #1
   113a0:	5423      	strb	r3, [r4, r0]
		return 0;
   113a2:	2000      	movs	r0, #0
}
   113a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113a8:	3601      	adds	r6, #1
				for (k = 0U;
   113aa:	2e08      	cmp	r6, #8
   113ac:	d1ce      	bne.n	1134c <ll_rl_remove+0x5c>
   113ae:	e7df      	b.n	11370 <ll_rl_remove+0x80>
		return BT_HCI_ERR_CMD_DISALLOWED;
   113b0:	200c      	movs	r0, #12
   113b2:	e7f7      	b.n	113a4 <ll_rl_remove+0xb4>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   113b4:	2002      	movs	r0, #2
   113b6:	e7f5      	b.n	113a4 <ll_rl_remove+0xb4>
   113b8:	200011d8 	.word	0x200011d8
   113bc:	2000a17d 	.word	0x2000a17d
   113c0:	2000a186 	.word	0x2000a186
   113c4:	2000a17e 	.word	0x2000a17e
   113c8:	2000a239 	.word	0x2000a239

000113cc <ll_rl_crpa_set>:
{
   113cc:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   113ce:	795c      	ldrb	r4, [r3, #5]
   113d0:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   113d4:	2c40      	cmp	r4, #64	; 0x40
{
   113d6:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   113d8:	d117      	bne.n	1140a <ll_rl_crpa_set+0x3e>
		if (id_addr) {
   113da:	b119      	cbz	r1, 113e4 <ll_rl_crpa_set+0x18>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   113dc:	2200      	movs	r2, #0
   113de:	f7ff fe59 	bl	11094 <ull_filter_rl_find>
   113e2:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   113e4:	2a07      	cmp	r2, #7
   113e6:	d810      	bhi.n	1140a <ll_rl_crpa_set+0x3e>
   113e8:	2128      	movs	r1, #40	; 0x28
   113ea:	4c08      	ldr	r4, [pc, #32]	; (1140c <ll_rl_crpa_set+0x40>)
   113ec:	fb01 f302 	mul.w	r3, r1, r2
   113f0:	5ce3      	ldrb	r3, [r4, r3]
   113f2:	07db      	lsls	r3, r3, #31
   113f4:	d509      	bpl.n	1140a <ll_rl_crpa_set+0x3e>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   113f6:	2018      	movs	r0, #24
   113f8:	fb11 0002 	smlabb	r0, r1, r2, r0
   113fc:	4420      	add	r0, r4
   113fe:	4629      	mov	r1, r5
   11400:	2206      	movs	r2, #6
}
   11402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11406:	f007 bc18 	b.w	18c3a <memcpy>
}
   1140a:	bd70      	pop	{r4, r5, r6, pc}
   1140c:	200011d8 	.word	0x200011d8

00011410 <ll_rl_crpa_get>:
{
   11410:	b538      	push	{r3, r4, r5, lr}
   11412:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11414:	4601      	mov	r1, r0
   11416:	2200      	movs	r2, #0
   11418:	f811 0b01 	ldrb.w	r0, [r1], #1
   1141c:	f7ff fe3a 	bl	11094 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   11420:	2807      	cmp	r0, #7
   11422:	d901      	bls.n	11428 <ll_rl_crpa_get+0x18>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11424:	2002      	movs	r0, #2
}
   11426:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11428:	2428      	movs	r4, #40	; 0x28
   1142a:	2318      	movs	r3, #24
   1142c:	fb14 3000 	smlabb	r0, r4, r0, r3
   11430:	4c07      	ldr	r4, [pc, #28]	; (11450 <ll_rl_crpa_get+0x40>)
   11432:	4404      	add	r4, r0
   11434:	2106      	movs	r1, #6
   11436:	4620      	mov	r0, r4
   11438:	f009 f853 	bl	1a4e2 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1143c:	2800      	cmp	r0, #0
   1143e:	d0f1      	beq.n	11424 <ll_rl_crpa_get+0x14>
   11440:	2206      	movs	r2, #6
   11442:	4621      	mov	r1, r4
   11444:	4628      	mov	r0, r5
   11446:	f007 fbf8 	bl	18c3a <memcpy>
		return 0;
   1144a:	2000      	movs	r0, #0
   1144c:	e7eb      	b.n	11426 <ll_rl_crpa_get+0x16>
   1144e:	bf00      	nop
   11450:	200011d8 	.word	0x200011d8

00011454 <ll_rl_lrpa_get>:
{
   11454:	b510      	push	{r4, lr}
   11456:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11458:	4601      	mov	r1, r0
   1145a:	2200      	movs	r2, #0
   1145c:	f811 0b01 	ldrb.w	r0, [r1], #1
   11460:	f7ff fe18 	bl	11094 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11464:	2807      	cmp	r0, #7
   11466:	d80a      	bhi.n	1147e <ll_rl_lrpa_get+0x2a>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   11468:	4b06      	ldr	r3, [pc, #24]	; (11484 <ll_rl_lrpa_get+0x30>)
   1146a:	2228      	movs	r2, #40	; 0x28
   1146c:	fb02 3000 	mla	r0, r2, r0, r3
   11470:	2206      	movs	r2, #6
   11472:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11474:	4620      	mov	r0, r4
   11476:	f007 fbe0 	bl	18c3a <memcpy>
		return 0;
   1147a:	2000      	movs	r0, #0
}
   1147c:	bd10      	pop	{r4, pc}
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1147e:	2002      	movs	r0, #2
   11480:	e7fc      	b.n	1147c <ll_rl_lrpa_get+0x28>
   11482:	bf00      	nop
   11484:	200011d8 	.word	0x200011d8

00011488 <ll_priv_mode_set>:
{
   11488:	b570      	push	{r4, r5, r6, lr}
   1148a:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1148c:	2000      	movs	r0, #0
{
   1148e:	460c      	mov	r4, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   11490:	f009 faae 	bl	1a9f0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   11494:	4606      	mov	r6, r0
   11496:	b9f0      	cbnz	r0, 114d6 <ll_priv_mode_set+0x4e>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   11498:	4629      	mov	r1, r5
   1149a:	4632      	mov	r2, r6
   1149c:	f811 0b01 	ldrb.w	r0, [r1], #1
   114a0:	f7ff fdf8 	bl	11094 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   114a4:	2807      	cmp	r0, #7
   114a6:	d818      	bhi.n	114da <ll_priv_mode_set+0x52>
		switch (mode) {
   114a8:	b124      	cbz	r4, 114b4 <ll_priv_mode_set+0x2c>
   114aa:	2c01      	cmp	r4, #1
   114ac:	d00a      	beq.n	114c4 <ll_priv_mode_set+0x3c>
			return BT_HCI_ERR_INVALID_PARAM;
   114ae:	2412      	movs	r4, #18
}
   114b0:	4620      	mov	r0, r4
   114b2:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   114b4:	2328      	movs	r3, #40	; 0x28
   114b6:	4a0a      	ldr	r2, [pc, #40]	; (114e0 <ll_priv_mode_set+0x58>)
   114b8:	4358      	muls	r0, r3
   114ba:	5c13      	ldrb	r3, [r2, r0]
   114bc:	f364 1304 	bfi	r3, r4, #4, #1
   114c0:	5413      	strb	r3, [r2, r0]
			break;
   114c2:	e7f5      	b.n	114b0 <ll_priv_mode_set+0x28>
			rl[i].dev = 1U;
   114c4:	2328      	movs	r3, #40	; 0x28
   114c6:	4a06      	ldr	r2, [pc, #24]	; (114e0 <ll_priv_mode_set+0x58>)
   114c8:	4358      	muls	r0, r3
	return 0;
   114ca:	4634      	mov	r4, r6
			rl[i].dev = 1U;
   114cc:	5c13      	ldrb	r3, [r2, r0]
   114ce:	f043 0310 	orr.w	r3, r3, #16
   114d2:	5413      	strb	r3, [r2, r0]
			break;
   114d4:	e7ec      	b.n	114b0 <ll_priv_mode_set+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
   114d6:	240c      	movs	r4, #12
   114d8:	e7ea      	b.n	114b0 <ll_priv_mode_set+0x28>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   114da:	2402      	movs	r4, #2
   114dc:	e7e8      	b.n	114b0 <ll_priv_mode_set+0x28>
   114de:	bf00      	nop
   114e0:	200011d8 	.word	0x200011d8

000114e4 <ull_filter_rpa_update>:
{
   114e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114e8:	b087      	sub	sp, #28
   114ea:	9000      	str	r0, [sp, #0]
	return z_impl_k_uptime_get();
   114ec:	f00c fd58 	bl	1dfa0 <z_impl_k_uptime_get>
	bool all = timeout || (rpa_last_ms == -1) ||
   114f0:	9b00      	ldr	r3, [sp, #0]
   114f2:	4680      	mov	r8, r0
   114f4:	468a      	mov	sl, r1
   114f6:	2b00      	cmp	r3, #0
   114f8:	f040 80d5 	bne.w	116a6 <ull_filter_rpa_update+0x1c2>
   114fc:	4b6b      	ldr	r3, [pc, #428]	; (116ac <ull_filter_rpa_update+0x1c8>)
   114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   11502:	1c59      	adds	r1, r3, #1
   11504:	bf08      	it	eq
   11506:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1150a:	f000 80cc 	beq.w	116a6 <ull_filter_rpa_update+0x1c2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1150e:	ebb8 0402 	subs.w	r4, r8, r2
   11512:	eb6a 0503 	sbc.w	r5, sl, r3
   11516:	4b66      	ldr	r3, [pc, #408]	; (116b0 <ull_filter_rpa_update+0x1cc>)
   11518:	681a      	ldr	r2, [r3, #0]
   1151a:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1151c:	4294      	cmp	r4, r2
   1151e:	eb75 0303 	sbcs.w	r3, r5, r3
   11522:	bfac      	ite	ge
   11524:	2701      	movge	r7, #1
   11526:	2700      	movlt	r7, #0
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11528:	4d62      	ldr	r5, [pc, #392]	; (116b4 <ull_filter_rpa_update+0x1d0>)
				LL_ASSERT(!err);
   1152a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 116c4 <ull_filter_rpa_update+0x1e0>
   1152e:	f8df b198 	ldr.w	fp, [pc, #408]	; 116c8 <ull_filter_rpa_update+0x1e4>
	bool all = timeout || (rpa_last_ms == -1) ||
   11532:	2400      	movs	r4, #0
   11534:	462e      	mov	r6, r5
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11536:	2328      	movs	r3, #40	; 0x28
   11538:	4363      	muls	r3, r4
   1153a:	5cf3      	ldrb	r3, [r6, r3]
   1153c:	07da      	lsls	r2, r3, #31
   1153e:	d551      	bpl.n	115e4 <ull_filter_rpa_update+0x100>
   11540:	b90f      	cbnz	r7, 11546 <ull_filter_rpa_update+0x62>
   11542:	0798      	lsls	r0, r3, #30
   11544:	d44e      	bmi.n	115e4 <ull_filter_rpa_update+0x100>
			if (rl[i].pirk) {
   11546:	2328      	movs	r3, #40	; 0x28
   11548:	4363      	muls	r3, r4
   1154a:	5cf3      	ldrb	r3, [r6, r3]
   1154c:	0759      	lsls	r1, r3, #29
   1154e:	d51f      	bpl.n	11590 <ull_filter_rpa_update+0xac>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   11550:	7dea      	ldrb	r2, [r5, #23]
   11552:	4b59      	ldr	r3, [pc, #356]	; (116b8 <ull_filter_rpa_update+0x1d4>)
   11554:	a902      	add	r1, sp, #8
   11556:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1155a:	f103 0210 	add.w	r2, r3, #16
   1155e:	4608      	mov	r0, r1
		*pdst++ = *psrc--;
   11560:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   11564:	f801 cb01 	strb.w	ip, [r1], #1
	for (; length > 0; length--) {
   11568:	429a      	cmp	r2, r3
   1156a:	d1f9      	bne.n	11560 <ull_filter_rpa_update+0x7c>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1156c:	f105 011e 	add.w	r1, r5, #30
   11570:	f007 fdc3 	bl	190fa <bt_rpa_create>
				LL_ASSERT(!err);
   11574:	b160      	cbz	r0, 11590 <ull_filter_rpa_update+0xac>
   11576:	f240 232a 	movw	r3, #554	; 0x22a
   1157a:	464a      	mov	r2, r9
   1157c:	4659      	mov	r1, fp
   1157e:	484f      	ldr	r0, [pc, #316]	; (116bc <ull_filter_rpa_update+0x1d8>)
   11580:	f006 fdd8 	bl	18134 <printk>
   11584:	4040      	eors	r0, r0
   11586:	f380 8811 	msr	BASEPRI, r0
   1158a:	f04f 0003 	mov.w	r0, #3
   1158e:	df02      	svc	2
			if (rl[i].lirk) {
   11590:	2328      	movs	r3, #40	; 0x28
   11592:	4363      	muls	r3, r4
   11594:	5cf3      	ldrb	r3, [r6, r3]
   11596:	071a      	lsls	r2, r3, #28
   11598:	d51e      	bpl.n	115d8 <ull_filter_rpa_update+0xf4>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1159a:	a902      	add	r1, sp, #8
   1159c:	1de8      	adds	r0, r5, #7
   1159e:	f007 fdac 	bl	190fa <bt_rpa_create>
				LL_ASSERT(!err);
   115a2:	b160      	cbz	r0, 115be <ull_filter_rpa_update+0xda>
   115a4:	f240 2337 	movw	r3, #567	; 0x237
   115a8:	464a      	mov	r2, r9
   115aa:	4659      	mov	r1, fp
   115ac:	4843      	ldr	r0, [pc, #268]	; (116bc <ull_filter_rpa_update+0x1d8>)
   115ae:	f006 fdc1 	bl	18134 <printk>
   115b2:	4040      	eors	r0, r0
   115b4:	f380 8811 	msr	BASEPRI, r0
   115b8:	f04f 0003 	mov.w	r0, #3
   115bc:	df02      	svc	2
				rl[i].local_rpa = &rpa;
   115be:	ab02      	add	r3, sp, #8
   115c0:	626b      	str	r3, [r5, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   115c2:	4b3f      	ldr	r3, [pc, #252]	; (116c0 <ull_filter_rpa_update+0x1dc>)
   115c4:	2206      	movs	r2, #6
   115c6:	fb02 3304 	mla	r3, r2, r4, r3
   115ca:	4618      	mov	r0, r3
   115cc:	a902      	add	r1, sp, #8
   115ce:	9301      	str	r3, [sp, #4]
   115d0:	f007 fb33 	bl	18c3a <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   115d4:	9b01      	ldr	r3, [sp, #4]
   115d6:	626b      	str	r3, [r5, #36]	; 0x24
			rl[i].rpas_ready = 1U;
   115d8:	2328      	movs	r3, #40	; 0x28
   115da:	4363      	muls	r3, r4
   115dc:	5cf2      	ldrb	r2, [r6, r3]
   115de:	f042 0202 	orr.w	r2, r2, #2
   115e2:	54f2      	strb	r2, [r6, r3]
   115e4:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   115e6:	2c08      	cmp	r4, #8
   115e8:	f105 0528 	add.w	r5, r5, #40	; 0x28
   115ec:	d1a3      	bne.n	11536 <ull_filter_rpa_update+0x52>
	if (all) {
   115ee:	b117      	cbz	r7, 115f6 <ull_filter_rpa_update+0x112>
		rpa_last_ms = now;
   115f0:	4b2e      	ldr	r3, [pc, #184]	; (116ac <ull_filter_rpa_update+0x1c8>)
   115f2:	e9c3 8a00 	strd	r8, sl, [r3]
	if (timeout) {
   115f6:	9b00      	ldr	r3, [sp, #0]
   115f8:	2b00      	cmp	r3, #0
   115fa:	d051      	beq.n	116a0 <ull_filter_rpa_update+0x1bc>
		adv = ull_adv_is_enabled_get(0);
   115fc:	2000      	movs	r0, #0
   115fe:	f7fb ffc5 	bl	d58c <ull_adv_is_enabled_get>
		if (adv) {
   11602:	4605      	mov	r5, r0
   11604:	2800      	cmp	r0, #0
   11606:	d04b      	beq.n	116a0 <ull_filter_rpa_update+0x1bc>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   11608:	f890 00da 	ldrb.w	r0, [r0, #218]	; 0xda
   1160c:	0783      	lsls	r3, r0, #30
   1160e:	d547      	bpl.n	116a0 <ull_filter_rpa_update+0x1bc>
	rl_idx = ull_filter_rl_find(adv->id_addr_type, adv->id_addr, NULL);
   11610:	f105 01dc 	add.w	r1, r5, #220	; 0xdc
   11614:	2200      	movs	r2, #0
   11616:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1161a:	f7ff fd3b 	bl	11094 <ull_filter_rl_find>
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1161e:	2807      	cmp	r0, #7
	rl_idx = ull_filter_rl_find(adv->id_addr_type, adv->id_addr, NULL);
   11620:	4601      	mov	r1, r0
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11622:	d83d      	bhi.n	116a0 <ull_filter_rpa_update+0x1bc>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11624:	f895 402c 	ldrb.w	r4, [r5, #44]	; 0x2c
   11628:	2311      	movs	r3, #17
   1162a:	2627      	movs	r6, #39	; 0x27
   1162c:	fb16 3604 	smlabb	r6, r6, r4, r3
	if (pdu->first == pdu->last) {
   11630:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11634:	f105 0c1c 	add.w	ip, r5, #28
	if (pdu->first == pdu->last) {
   11638:	42a3      	cmp	r3, r4
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1163a:	eb0c 0906 	add.w	r9, ip, r6
	if (pdu->first == pdu->last) {
   1163e:	d104      	bne.n	1164a <ull_filter_rpa_update+0x166>
		last = pdu->last + 1;
   11640:	3401      	adds	r4, #1
   11642:	b2e4      	uxtb	r4, r4
			last = 0U;
   11644:	2c02      	cmp	r4, #2
   11646:	bf08      	it	eq
   11648:	2400      	moveq	r4, #0
	return (void *)pdu->pdu[last];
   1164a:	2027      	movs	r0, #39	; 0x27
   1164c:	2302      	movs	r3, #2
   1164e:	fb10 3304 	smlabb	r3, r0, r4, r3
   11652:	f105 022b 	add.w	r2, r5, #43	; 0x2b
	pdu->type = prev->type;
   11656:	f81c 0006 	ldrb.w	r0, [ip, r6]
   1165a:	5cd7      	ldrb	r7, [r2, r3]
   1165c:	f360 0703 	bfi	r7, r0, #0, #4
	pdu->rfu = 0;
   11660:	f36f 1704 	bfc	r7, #4, #1
   11664:	54d7      	strb	r7, [r2, r3]
		pdu->chan_sel = prev->chan_sel;
   11666:	f81c 6006 	ldrb.w	r6, [ip, r6]
   1166a:	b2f8      	uxtb	r0, r7
   1166c:	f3c6 1640 	ubfx	r6, r6, #5, #1
   11670:	eb02 0803 	add.w	r8, r2, r3
   11674:	f366 1045 	bfi	r0, r6, #5, #1
   11678:	54d0      	strb	r0, [r2, r3]
	ull_filter_adv_pdu_update(adv, rl_idx, pdu);
   1167a:	4642      	mov	r2, r8
   1167c:	4628      	mov	r0, r5
   1167e:	f7ff fc9f 	bl	10fc0 <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
   11682:	f899 2001 	ldrb.w	r2, [r9, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   11686:	f109 0108 	add.w	r1, r9, #8
   1168a:	3a06      	subs	r2, #6
   1168c:	f108 0008 	add.w	r0, r8, #8
   11690:	f007 fad3 	bl	18c3a <memcpy>
	pdu->len = prev->len;
   11694:	f899 3001 	ldrb.w	r3, [r9, #1]
   11698:	f888 3001 	strb.w	r3, [r8, #1]
	pdu->last = idx;
   1169c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
   116a0:	b007      	add	sp, #28
   116a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool all = timeout || (rpa_last_ms == -1) ||
   116a6:	2701      	movs	r7, #1
   116a8:	e73e      	b.n	11528 <ull_filter_rpa_update+0x44>
   116aa:	bf00      	nop
   116ac:	20000008 	.word	0x20000008
   116b0:	20001318 	.word	0x20001318
   116b4:	200011d8 	.word	0x200011d8
   116b8:	2000a186 	.word	0x2000a186
   116bc:	0001ff46 	.word	0x0001ff46
   116c0:	2000a14d 	.word	0x2000a14d
   116c4:	00020ffe 	.word	0x00020ffe
   116c8:	000209bb 	.word	0x000209bb

000116cc <rpa_timeout>:
{
   116cc:	b508      	push	{r3, lr}
	ull_filter_rpa_update(true);
   116ce:	2001      	movs	r0, #1
   116d0:	f7ff ff08 	bl	114e4 <ull_filter_rpa_update>
   116d4:	4b03      	ldr	r3, [pc, #12]	; (116e4 <rpa_timeout+0x18>)
   116d6:	4904      	ldr	r1, [pc, #16]	; (116e8 <rpa_timeout+0x1c>)
   116d8:	681a      	ldr	r2, [r3, #0]
   116da:	4804      	ldr	r0, [pc, #16]	; (116ec <rpa_timeout+0x20>)
}
   116dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   116e0:	f005 bfa0 	b.w	17624 <k_delayed_work_submit_to_queue>
   116e4:	20001318 	.word	0x20001318
   116e8:	2000131c 	.word	0x2000131c
   116ec:	20005c68 	.word	0x20005c68

000116f0 <ull_filter_reset>:
	wl_anon = 0U;
   116f0:	4a39      	ldr	r2, [pc, #228]	; (117d8 <ull_filter_reset+0xe8>)
   116f2:	2300      	movs	r3, #0
{
   116f4:	b430      	push	{r4, r5}
	wl_anon = 0U;
   116f6:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0U;
   116f8:	4a38      	ldr	r2, [pc, #224]	; (117dc <ull_filter_reset+0xec>)
   116fa:	7811      	ldrb	r1, [r2, #0]
   116fc:	f363 0100 	bfi	r1, r3, #0, #1
   11700:	7011      	strb	r1, [r2, #0]
   11702:	7a11      	ldrb	r1, [r2, #8]
   11704:	f363 0100 	bfi	r1, r3, #0, #1
   11708:	7211      	strb	r1, [r2, #8]
   1170a:	7c11      	ldrb	r1, [r2, #16]
   1170c:	f363 0100 	bfi	r1, r3, #0, #1
   11710:	7411      	strb	r1, [r2, #16]
   11712:	7e11      	ldrb	r1, [r2, #24]
   11714:	f363 0100 	bfi	r1, r3, #0, #1
   11718:	7611      	strb	r1, [r2, #24]
   1171a:	f892 1020 	ldrb.w	r1, [r2, #32]
   1171e:	f363 0100 	bfi	r1, r3, #0, #1
   11722:	f882 1020 	strb.w	r1, [r2, #32]
   11726:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   1172a:	f363 0100 	bfi	r1, r3, #0, #1
   1172e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   11732:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   11736:	f363 0100 	bfi	r1, r3, #0, #1
   1173a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
   1173e:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   11742:	f363 0100 	bfi	r1, r3, #0, #1
   11746:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
	rl_enable = 0U;
   1174a:	4a25      	ldr	r2, [pc, #148]	; (117e0 <ull_filter_reset+0xf0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1174c:	4925      	ldr	r1, [pc, #148]	; (117e4 <ull_filter_reset+0xf4>)
	rl_enable = 0U;
   1174e:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11750:	4a25      	ldr	r2, [pc, #148]	; (117e8 <ull_filter_reset+0xf8>)
   11752:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   11754:	4a25      	ldr	r2, [pc, #148]	; (117ec <ull_filter_reset+0xfc>)
   11756:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1175a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1175e:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0U;
   11762:	4a23      	ldr	r2, [pc, #140]	; (117f0 <ull_filter_reset+0x100>)
   11764:	7811      	ldrb	r1, [r2, #0]
   11766:	f363 0100 	bfi	r1, r3, #0, #1
   1176a:	7011      	strb	r1, [r2, #0]
   1176c:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   11770:	f363 0100 	bfi	r1, r3, #0, #1
   11774:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   11778:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   1177c:	f363 0100 	bfi	r1, r3, #0, #1
   11780:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
   11784:	f892 1078 	ldrb.w	r1, [r2, #120]	; 0x78
   11788:	f363 0100 	bfi	r1, r3, #0, #1
   1178c:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
   11790:	f892 10a0 	ldrb.w	r1, [r2, #160]	; 0xa0
   11794:	f363 0100 	bfi	r1, r3, #0, #1
   11798:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
   1179c:	f892 10c8 	ldrb.w	r1, [r2, #200]	; 0xc8
   117a0:	f363 0100 	bfi	r1, r3, #0, #1
   117a4:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
   117a8:	f892 10f0 	ldrb.w	r1, [r2, #240]	; 0xf0
   117ac:	f363 0100 	bfi	r1, r3, #0, #1
   117b0:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
   117b4:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
   117b8:	f363 0100 	bfi	r1, r3, #0, #1
   117bc:	f882 1118 	strb.w	r1, [r2, #280]	; 0x118
	peer_irk_count = 0U;
   117c0:	4a0c      	ldr	r2, [pc, #48]	; (117f4 <ull_filter_reset+0x104>)
   117c2:	7013      	strb	r3, [r2, #0]
	if (init) {
   117c4:	b120      	cbz	r0, 117d0 <ull_filter_reset+0xe0>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   117c6:	490c      	ldr	r1, [pc, #48]	; (117f8 <ull_filter_reset+0x108>)
   117c8:	480c      	ldr	r0, [pc, #48]	; (117fc <ull_filter_reset+0x10c>)
}
   117ca:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   117cc:	f00c bb87 	b.w	1dede <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   117d0:	480a      	ldr	r0, [pc, #40]	; (117fc <ull_filter_reset+0x10c>)
}
   117d2:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   117d4:	f00c bb8b 	b.w	1deee <k_delayed_work_cancel>
   117d8:	2000a279 	.word	0x2000a279
   117dc:	2000a239 	.word	0x2000a239
   117e0:	2000a206 	.word	0x2000a206
   117e4:	000dbba0 	.word	0x000dbba0
   117e8:	20001318 	.word	0x20001318
   117ec:	20000008 	.word	0x20000008
   117f0:	200011d8 	.word	0x200011d8
   117f4:	2000a17d 	.word	0x2000a17d
   117f8:	000116cd 	.word	0x000116cd
   117fc:	2000131c 	.word	0x2000131c

00011800 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   11800:	4b02      	ldr	r3, [pc, #8]	; (1180c <ull_filter_lll_irks_get+0xc>)
   11802:	781b      	ldrb	r3, [r3, #0]
   11804:	7003      	strb	r3, [r0, #0]
}
   11806:	4802      	ldr	r0, [pc, #8]	; (11810 <ull_filter_lll_irks_get+0x10>)
   11808:	4770      	bx	lr
   1180a:	bf00      	nop
   1180c:	2000a17d 	.word	0x2000a17d
   11810:	2000a186 	.word	0x2000a186

00011814 <ull_filter_lll_rl_irk_idx>:
{
   11814:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11816:	4b1c      	ldr	r3, [pc, #112]	; (11888 <ull_filter_lll_rl_irk_idx+0x74>)
   11818:	781b      	ldrb	r3, [r3, #0]
   1181a:	4283      	cmp	r3, r0
{
   1181c:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1181e:	d80c      	bhi.n	1183a <ull_filter_lll_rl_irk_idx+0x26>
   11820:	f240 23cd 	movw	r3, #717	; 0x2cd
   11824:	4a19      	ldr	r2, [pc, #100]	; (1188c <ull_filter_lll_rl_irk_idx+0x78>)
   11826:	491a      	ldr	r1, [pc, #104]	; (11890 <ull_filter_lll_rl_irk_idx+0x7c>)
   11828:	481a      	ldr	r0, [pc, #104]	; (11894 <ull_filter_lll_rl_irk_idx+0x80>)
   1182a:	f006 fc83 	bl	18134 <printk>
   1182e:	4040      	eors	r0, r0
   11830:	f380 8811 	msr	BASEPRI, r0
   11834:	f04f 0003 	mov.w	r0, #3
   11838:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1183a:	4b17      	ldr	r3, [pc, #92]	; (11898 <ull_filter_lll_rl_irk_idx+0x84>)
   1183c:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1183e:	2c07      	cmp	r4, #7
   11840:	d90c      	bls.n	1185c <ull_filter_lll_rl_irk_idx+0x48>
   11842:	f240 23cf 	movw	r3, #719	; 0x2cf
   11846:	4a11      	ldr	r2, [pc, #68]	; (1188c <ull_filter_lll_rl_irk_idx+0x78>)
   11848:	4914      	ldr	r1, [pc, #80]	; (1189c <ull_filter_lll_rl_irk_idx+0x88>)
   1184a:	4812      	ldr	r0, [pc, #72]	; (11894 <ull_filter_lll_rl_irk_idx+0x80>)
   1184c:	f006 fc72 	bl	18134 <printk>
   11850:	4040      	eors	r0, r0
   11852:	f380 8811 	msr	BASEPRI, r0
   11856:	f04f 0003 	mov.w	r0, #3
   1185a:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   1185c:	2328      	movs	r3, #40	; 0x28
   1185e:	4363      	muls	r3, r4
   11860:	4a0f      	ldr	r2, [pc, #60]	; (118a0 <ull_filter_lll_rl_irk_idx+0x8c>)
   11862:	5cd3      	ldrb	r3, [r2, r3]
   11864:	07db      	lsls	r3, r3, #31
   11866:	d40c      	bmi.n	11882 <ull_filter_lll_rl_irk_idx+0x6e>
   11868:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   1186c:	4a07      	ldr	r2, [pc, #28]	; (1188c <ull_filter_lll_rl_irk_idx+0x78>)
   1186e:	490d      	ldr	r1, [pc, #52]	; (118a4 <ull_filter_lll_rl_irk_idx+0x90>)
   11870:	4808      	ldr	r0, [pc, #32]	; (11894 <ull_filter_lll_rl_irk_idx+0x80>)
   11872:	f006 fc5f 	bl	18134 <printk>
   11876:	4040      	eors	r0, r0
   11878:	f380 8811 	msr	BASEPRI, r0
   1187c:	f04f 0003 	mov.w	r0, #3
   11880:	df02      	svc	2
}
   11882:	4620      	mov	r0, r4
   11884:	bd10      	pop	{r4, pc}
   11886:	bf00      	nop
   11888:	2000a17d 	.word	0x2000a17d
   1188c:	00020ffe 	.word	0x00020ffe
   11890:	000211e3 	.word	0x000211e3
   11894:	0001ff46 	.word	0x0001ff46
   11898:	2000a17e 	.word	0x2000a17e
   1189c:	00021200 	.word	0x00021200
   118a0:	200011d8 	.word	0x200011d8
   118a4:	000211d7 	.word	0x000211d7

000118a8 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   118a8:	2807      	cmp	r0, #7
{
   118aa:	b538      	push	{r3, r4, r5, lr}
   118ac:	4605      	mov	r5, r0
	if (rl_idx >= ARRAY_SIZE(rl)) {
   118ae:	d818      	bhi.n	118e2 <ull_filter_lll_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   118b0:	2228      	movs	r2, #40	; 0x28
   118b2:	4c0d      	ldr	r4, [pc, #52]	; (118e8 <ull_filter_lll_irk_whitelisted+0x40>)
   118b4:	4342      	muls	r2, r0
   118b6:	5ca2      	ldrb	r2, [r4, r2]
   118b8:	07d3      	lsls	r3, r2, #31
   118ba:	d40c      	bmi.n	118d6 <ull_filter_lll_irk_whitelisted+0x2e>
   118bc:	f240 23db 	movw	r3, #731	; 0x2db
   118c0:	4a0a      	ldr	r2, [pc, #40]	; (118ec <ull_filter_lll_irk_whitelisted+0x44>)
   118c2:	490b      	ldr	r1, [pc, #44]	; (118f0 <ull_filter_lll_irk_whitelisted+0x48>)
   118c4:	480b      	ldr	r0, [pc, #44]	; (118f4 <ull_filter_lll_irk_whitelisted+0x4c>)
   118c6:	f006 fc35 	bl	18134 <printk>
   118ca:	4040      	eors	r0, r0
   118cc:	f380 8811 	msr	BASEPRI, r0
   118d0:	f04f 0003 	mov.w	r0, #3
   118d4:	df02      	svc	2
	return rl[rl_idx].wl;
   118d6:	2028      	movs	r0, #40	; 0x28
   118d8:	4368      	muls	r0, r5
   118da:	5c20      	ldrb	r0, [r4, r0]
   118dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   118e0:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   118e2:	2000      	movs	r0, #0
   118e4:	e7fc      	b.n	118e0 <ull_filter_lll_irk_whitelisted+0x38>
   118e6:	bf00      	nop
   118e8:	200011d8 	.word	0x200011d8
   118ec:	00020ffe 	.word	0x00020ffe
   118f0:	00021044 	.word	0x00021044
   118f4:	0001ff46 	.word	0x0001ff46

000118f8 <ull_filter_lll_get>:
}
   118f8:	4a03      	ldr	r2, [pc, #12]	; (11908 <ull_filter_lll_get+0x10>)
   118fa:	4b04      	ldr	r3, [pc, #16]	; (1190c <ull_filter_lll_get+0x14>)
   118fc:	2800      	cmp	r0, #0
   118fe:	bf0c      	ite	eq
   11900:	4610      	moveq	r0, r2
   11902:	4618      	movne	r0, r3
   11904:	4770      	bx	lr
   11906:	bf00      	nop
   11908:	2000a207 	.word	0x2000a207
   1190c:	2000a27a 	.word	0x2000a27a

00011910 <ull_filter_lll_rl_addr_allowed>:
{
   11910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   11914:	4b1a      	ldr	r3, [pc, #104]	; (11980 <ull_filter_lll_rl_addr_allowed+0x70>)
   11916:	781b      	ldrb	r3, [r3, #0]
   11918:	b383      	cbz	r3, 1197c <ull_filter_lll_rl_addr_allowed+0x6c>
   1191a:	7813      	ldrb	r3, [r2, #0]
   1191c:	2bff      	cmp	r3, #255	; 0xff
   1191e:	d12d      	bne.n	1197c <ull_filter_lll_rl_addr_allowed+0x6c>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11920:	4e18      	ldr	r6, [pc, #96]	; (11984 <ull_filter_lll_rl_addr_allowed+0x74>)
   11922:	2300      	movs	r3, #0
   11924:	f04f 0828 	mov.w	r8, #40	; 0x28
   11928:	46b4      	mov	ip, r6
   1192a:	f106 0906 	add.w	r9, r6, #6
   1192e:	fb08 f403 	mul.w	r4, r8, r3
   11932:	fa5f fe83 	uxtb.w	lr, r3
   11936:	5d37      	ldrb	r7, [r6, r4]
   11938:	f017 0f01 	tst.w	r7, #1
   1193c:	eb06 0504 	add.w	r5, r6, r4
   11940:	d019      	beq.n	11976 <ull_filter_lll_rl_addr_allowed+0x66>
   11942:	f3c7 1780 	ubfx	r7, r7, #6, #1
   11946:	4287      	cmp	r7, r0
   11948:	d115      	bne.n	11976 <ull_filter_lll_rl_addr_allowed+0x66>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1194a:	1e4f      	subs	r7, r1, #1
   1194c:	444c      	add	r4, r9
				if (addr[j] != id_addr[j]) {
   1194e:	f815 bf01 	ldrb.w	fp, [r5, #1]!
   11952:	f817 af01 	ldrb.w	sl, [r7, #1]!
   11956:	45d3      	cmp	fp, sl
   11958:	d10d      	bne.n	11976 <ull_filter_lll_rl_addr_allowed+0x66>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1195a:	42a5      	cmp	r5, r4
   1195c:	d1f7      	bne.n	1194e <ull_filter_lll_rl_addr_allowed+0x3e>
				*rl_idx = i;
   1195e:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   11962:	2228      	movs	r2, #40	; 0x28
   11964:	4353      	muls	r3, r2
   11966:	f81c 0003 	ldrb.w	r0, [ip, r3]
   1196a:	0743      	lsls	r3, r0, #29
   1196c:	d506      	bpl.n	1197c <ull_filter_lll_rl_addr_allowed+0x6c>
   1196e:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   11972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11976:	3301      	adds	r3, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11978:	2b08      	cmp	r3, #8
   1197a:	d1d8      	bne.n	1192e <ull_filter_lll_rl_addr_allowed+0x1e>
				return !rl[i].pirk || rl[i].dev;
   1197c:	2001      	movs	r0, #1
   1197e:	e7f8      	b.n	11972 <ull_filter_lll_rl_addr_allowed+0x62>
   11980:	2000a206 	.word	0x2000a206
   11984:	200011d8 	.word	0x200011d8

00011988 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   11988:	4b02      	ldr	r3, [pc, #8]	; (11994 <ull_filter_lll_rl_enabled+0xc>)
   1198a:	7818      	ldrb	r0, [r3, #0]
}
   1198c:	3000      	adds	r0, #0
   1198e:	bf18      	it	ne
   11990:	2001      	movne	r0, #1
   11992:	4770      	bx	lr
   11994:	2000a206 	.word	0x2000a206

00011998 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   11998:	4b05      	ldr	r3, [pc, #20]	; (119b0 <cntr_init+0x18>)
   1199a:	2200      	movs	r2, #0
   1199c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   119a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   119a4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   119a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   119ac:	4770      	bx	lr
   119ae:	bf00      	nop
   119b0:	4000b000 	.word	0x4000b000

000119b4 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   119b4:	4a04      	ldr	r2, [pc, #16]	; (119c8 <cntr_start+0x14>)
   119b6:	7813      	ldrb	r3, [r2, #0]
   119b8:	1c59      	adds	r1, r3, #1
   119ba:	7011      	strb	r1, [r2, #0]
   119bc:	2001      	movs	r0, #1
   119be:	b913      	cbnz	r3, 119c6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   119c0:	4a02      	ldr	r2, [pc, #8]	; (119cc <cntr_start+0x18>)
   119c2:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   119c4:	4618      	mov	r0, r3
}
   119c6:	4770      	bx	lr
   119c8:	2000a2ac 	.word	0x2000a2ac
   119cc:	4000b000 	.word	0x4000b000

000119d0 <cntr_stop>:

u32_t cntr_stop(void)
{
   119d0:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   119d2:	4c0d      	ldr	r4, [pc, #52]	; (11a08 <cntr_stop+0x38>)
   119d4:	7823      	ldrb	r3, [r4, #0]
   119d6:	b95b      	cbnz	r3, 119f0 <cntr_stop+0x20>
   119d8:	232e      	movs	r3, #46	; 0x2e
   119da:	4a0c      	ldr	r2, [pc, #48]	; (11a0c <cntr_stop+0x3c>)
   119dc:	490c      	ldr	r1, [pc, #48]	; (11a10 <cntr_stop+0x40>)
   119de:	480d      	ldr	r0, [pc, #52]	; (11a14 <cntr_stop+0x44>)
   119e0:	f006 fba8 	bl	18134 <printk>
   119e4:	4040      	eors	r0, r0
   119e6:	f380 8811 	msr	BASEPRI, r0
   119ea:	f04f 0003 	mov.w	r0, #3
   119ee:	df02      	svc	2

	if (--_refcount) {
   119f0:	7820      	ldrb	r0, [r4, #0]
   119f2:	3801      	subs	r0, #1
   119f4:	b2c0      	uxtb	r0, r0
   119f6:	7020      	strb	r0, [r4, #0]
   119f8:	2301      	movs	r3, #1
   119fa:	b910      	cbnz	r0, 11a02 <cntr_stop+0x32>
   119fc:	4a06      	ldr	r2, [pc, #24]	; (11a18 <cntr_stop+0x48>)
   119fe:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   11a00:	bd10      	pop	{r4, pc}
		return 1;
   11a02:	4618      	mov	r0, r3
   11a04:	e7fc      	b.n	11a00 <cntr_stop+0x30>
   11a06:	bf00      	nop
   11a08:	2000a2ac 	.word	0x2000a2ac
   11a0c:	00021206 	.word	0x00021206
   11a10:	0002124b 	.word	0x0002124b
   11a14:	0001ff46 	.word	0x0001ff46
   11a18:	4000b004 	.word	0x4000b004

00011a1c <cntr_cnt_get>:
     return p_reg->COUNTER;
   11a1c:	4b01      	ldr	r3, [pc, #4]	; (11a24 <cntr_cnt_get+0x8>)
   11a1e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   11a22:	4770      	bx	lr
   11a24:	4000b000 	.word	0x4000b000

00011a28 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   11a28:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11a2c:	4b01      	ldr	r3, [pc, #4]	; (11a34 <cntr_cmp_set+0xc>)
   11a2e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   11a32:	4770      	bx	lr
   11a34:	4000b000 	.word	0x4000b000

00011a38 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   11a38:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   11a3a:	4b13      	ldr	r3, [pc, #76]	; (11a88 <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11a3c:	4c13      	ldr	r4, [pc, #76]	; (11a8c <do_ecb+0x54>)
   11a3e:	2501      	movs	r5, #1
{
   11a40:	4684      	mov	ip, r0
   11a42:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   11a44:	2700      	movs	r7, #0
   11a46:	46a6      	mov	lr, r4
   11a48:	461a      	mov	r2, r3
   11a4a:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   11a4c:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   11a50:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   11a54:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   11a58:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11a5a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   11a5e:	b931      	cbnz	r1, 11a6e <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11a60:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11a64:	b919      	cbnz	r1, 11a6e <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   11a66:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11a6a:	2900      	cmp	r1, #0
   11a6c:	d1f5      	bne.n	11a5a <do_ecb+0x22>
   11a6e:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   11a72:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   11a76:	2900      	cmp	r1, #0
   11a78:	d1e7      	bne.n	11a4a <do_ecb+0x12>
   11a7a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   11a7e:	2800      	cmp	r0, #0
   11a80:	d0e3      	beq.n	11a4a <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   11a82:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   11a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a88:	4000e000 	.word	0x4000e000
   11a8c:	4000e004 	.word	0x4000e004

00011a90 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   11a90:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   11a92:	4b08      	ldr	r3, [pc, #32]	; (11ab4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   11a94:	bf14      	ite	ne
   11a96:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   11a9a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   11a9e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   11aa2:	bf14      	ite	ne
   11aa4:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   11aa8:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   11aac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   11ab0:	4770      	bx	lr
   11ab2:	bf00      	nop
   11ab4:	4001f000 	.word	0x4001f000

00011ab8 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   11ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11aba:	4e2d      	ldr	r6, [pc, #180]	; (11b70 <sw_switch.isra.10+0xb8>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11abc:	4f2d      	ldr	r7, [pc, #180]	; (11b74 <sw_switch.isra.10+0xbc>)
   11abe:	7835      	ldrb	r5, [r6, #0]
   11ac0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 11b80 <sw_switch.isra.10+0xc8>
   11ac4:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   11ac8:	b22b      	sxth	r3, r5
   11aca:	00dc      	lsls	r4, r3, #3
   11acc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11ad0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11ad4:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
   11ad8:	f105 040b 	add.w	r4, r5, #11
   11adc:	b2e4      	uxtb	r4, r4
   11ade:	00e4      	lsls	r4, r4, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11ae0:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   11ae4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11ae8:	3fc0      	subs	r7, #192	; 0xc0
   11aea:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   11aee:	eb07 0783 	add.w	r7, r7, r3, lsl #2

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11af2:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   11af6:	2800      	cmp	r0, #0
   11af8:	d034      	beq.n	11b64 <sw_switch.isra.10+0xac>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   11afa:	f649 4740 	movw	r7, #40000	; 0x9c40
   11afe:	f24a 005a 	movw	r0, #41050	; 0xa05a
   11b02:	2a02      	cmp	r2, #2
   11b04:	bf08      	it	eq
   11b06:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   11b08:	f242 42b8 	movw	r2, #9400	; 0x24b8
   11b0c:	f241 574a 	movw	r7, #5450	; 0x154a
   11b10:	2902      	cmp	r1, #2
   11b12:	bf14      	ite	ne
   11b14:	4611      	movne	r1, r2
   11b16:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   11b18:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   11b1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b20:	4401      	add	r1, r0
   11b22:	fbb1 f1f2 	udiv	r1, r1, r2

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11b26:	4a14      	ldr	r2, [pc, #80]	; (11b78 <sw_switch.isra.10+0xc0>)
   11b28:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   11b2c:	009b      	lsls	r3, r3, #2
   11b2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11b32:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   11b36:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   11b3a:	428a      	cmp	r2, r1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
   11b3c:	bf8b      	itete	hi
   11b3e:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   11b42:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   11b44:	1a51      	subhi	r1, r2, r1
   11b46:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   11b4a:	bf88      	it	hi
   11b4c:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   11b50:	4b08      	ldr	r3, [pc, #32]	; (11b74 <sw_switch.isra.10+0xbc>)
   11b52:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11b56:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   11b5a:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   11b5c:	f003 0301 	and.w	r3, r3, #1
   11b60:	7033      	strb	r3, [r6, #0]
}
   11b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11b64:	4a05      	ldr	r2, [pc, #20]	; (11b7c <sw_switch.isra.10+0xc4>)
   11b66:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   11b6a:	2129      	movs	r1, #41	; 0x29
   11b6c:	e7de      	b.n	11b2c <sw_switch.isra.10+0x74>
   11b6e:	bf00      	nop
   11b70:	2000a2ad 	.word	0x2000a2ad
   11b74:	4001f000 	.word	0x4001f000
   11b78:	40001000 	.word	0x40001000
   11b7c:	40001004 	.word	0x40001004
   11b80:	4000110c 	.word	0x4000110c

00011b84 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   11b84:	4b04      	ldr	r3, [pc, #16]	; (11b98 <isr_radio+0x14>)
   11b86:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   11b8a:	b123      	cbz	r3, 11b96 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   11b8c:	4b03      	ldr	r3, [pc, #12]	; (11b9c <isr_radio+0x18>)
   11b8e:	4a04      	ldr	r2, [pc, #16]	; (11ba0 <isr_radio+0x1c>)
   11b90:	681b      	ldr	r3, [r3, #0]
   11b92:	6810      	ldr	r0, [r2, #0]
   11b94:	4718      	bx	r3
}
   11b96:	4770      	bx	lr
   11b98:	40001000 	.word	0x40001000
   11b9c:	20001554 	.word	0x20001554
   11ba0:	20001558 	.word	0x20001558

00011ba4 <radio_isr_set>:
{
   11ba4:	b538      	push	{r3, r4, r5, lr}
   11ba6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   11ba8:	2001      	movs	r0, #1
{
   11baa:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   11bac:	f7f1 fa9a 	bl	30e4 <arch_irq_disable>
	isr_cb_param = param;
   11bb0:	4b08      	ldr	r3, [pc, #32]	; (11bd4 <radio_isr_set+0x30>)
   11bb2:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   11bb4:	4b08      	ldr	r3, [pc, #32]	; (11bd8 <radio_isr_set+0x34>)
   11bb6:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   11bb8:	4b08      	ldr	r3, [pc, #32]	; (11bdc <radio_isr_set+0x38>)
   11bba:	2210      	movs	r2, #16
   11bbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11bc0:	4b07      	ldr	r3, [pc, #28]	; (11be0 <radio_isr_set+0x3c>)
   11bc2:	2202      	movs	r2, #2
   11bc4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   11bc8:	2001      	movs	r0, #1
}
   11bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   11bce:	f7f1 ba79 	b.w	30c4 <arch_irq_enable>
   11bd2:	bf00      	nop
   11bd4:	20001558 	.word	0x20001558
   11bd8:	20001554 	.word	0x20001554
   11bdc:	40001000 	.word	0x40001000
   11be0:	e000e100 	.word	0xe000e100

00011be4 <radio_reset>:
{
   11be4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   11be6:	2001      	movs	r0, #1
   11be8:	f7f1 fa7c 	bl	30e4 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   11bec:	4b0c      	ldr	r3, [pc, #48]	; (11c20 <radio_reset+0x3c>)
   11bee:	2200      	movs	r2, #0
   11bf0:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   11bf4:	2201      	movs	r2, #1
   11bf6:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11bfa:	4a0a      	ldr	r2, [pc, #40]	; (11c24 <radio_reset+0x40>)
   11bfc:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   11bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11c02:	f023 0301 	bic.w	r3, r3, #1
   11c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11c0a:	6013      	str	r3, [r2, #0]
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   11c0c:	4b06      	ldr	r3, [pc, #24]	; (11c28 <radio_reset+0x44>)
   11c0e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   11c12:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   11c16:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   11c1a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   11c1e:	bd08      	pop	{r3, pc}
   11c20:	40001000 	.word	0x40001000
   11c24:	40001774 	.word	0x40001774
   11c28:	4001f000 	.word	0x4001f000

00011c2c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   11c2c:	4b06      	ldr	r3, [pc, #24]	; (11c48 <radio_phy_set+0x1c>)
	switch (phy) {
   11c2e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   11c30:	bf14      	ite	ne
   11c32:	2203      	movne	r2, #3
   11c34:	2204      	moveq	r2, #4
   11c36:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   11c3a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   11c3e:	f042 0201 	orr.w	r2, r2, #1
   11c42:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   11c46:	4770      	bx	lr
   11c48:	40001000 	.word	0x40001000

00011c4c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (u32_t)power;
   11c4c:	4b01      	ldr	r3, [pc, #4]	; (11c54 <radio_tx_power_set+0x8>)
   11c4e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   11c52:	4770      	bx	lr
   11c54:	40001000 	.word	0x40001000

00011c58 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   11c58:	4b01      	ldr	r3, [pc, #4]	; (11c60 <radio_freq_chan_set+0x8>)
   11c5a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   11c5e:	4770      	bx	lr
   11c60:	40001000 	.word	0x40001000

00011c64 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   11c64:	4b07      	ldr	r3, [pc, #28]	; (11c84 <radio_whiten_iv_set+0x20>)
   11c66:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   11c6a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11c6e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   11c72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   11c76:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11c7a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   11c7e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   11c82:	4770      	bx	lr
   11c84:	40001000 	.word	0x40001000

00011c88 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   11c88:	4a0a      	ldr	r2, [pc, #40]	; (11cb4 <radio_aa_set+0x2c>)
   11c8a:	2300      	movs	r3, #0
   11c8c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   11c90:	2301      	movs	r3, #1
   11c92:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   11c96:	78c3      	ldrb	r3, [r0, #3]
   11c98:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   11c9c:	7843      	ldrb	r3, [r0, #1]
   11c9e:	7881      	ldrb	r1, [r0, #2]
   11ca0:	041b      	lsls	r3, r3, #16
   11ca2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   11ca6:	7801      	ldrb	r1, [r0, #0]
   11ca8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   11cac:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   11cb0:	4770      	bx	lr
   11cb2:	bf00      	nop
   11cb4:	40001000 	.word	0x40001000

00011cb8 <radio_pkt_configure>:
	switch (phy) {
   11cb8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   11cbc:	2b02      	cmp	r3, #2
{
   11cbe:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   11cc0:	bf14      	ite	ne
   11cc2:	2400      	movne	r4, #0
   11cc4:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   11cc8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11cca:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   11cce:	bf48      	it	mi
   11cd0:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11cd4:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   11cd6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   11cda:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11cdc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11ce0:	4a09      	ldr	r2, [pc, #36]	; (11d08 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   11ce2:	4303      	orrs	r3, r0
   11ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11ce8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   11cec:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   11cf0:	4b06      	ldr	r3, [pc, #24]	; (11d0c <radio_pkt_configure+0x54>)
   11cf2:	4003      	ands	r3, r0
   11cf4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   11cf8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   11cfc:	4319      	orrs	r1, r3
   11cfe:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   11d02:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   11d06:	bd10      	pop	{r4, pc}
   11d08:	40001000 	.word	0x40001000
   11d0c:	fef80000 	.word	0xfef80000

00011d10 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   11d10:	4b01      	ldr	r3, [pc, #4]	; (11d18 <radio_pkt_rx_set+0x8>)
   11d12:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   11d16:	4770      	bx	lr
   11d18:	40001000 	.word	0x40001000

00011d1c <radio_pkt_tx_set>:
   11d1c:	4b01      	ldr	r3, [pc, #4]	; (11d24 <radio_pkt_tx_set+0x8>)
   11d1e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   11d22:	4770      	bx	lr
   11d24:	40001000 	.word	0x40001000

00011d28 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d28:	4b01      	ldr	r3, [pc, #4]	; (11d30 <radio_tx_enable+0x8>)
   11d2a:	2201      	movs	r2, #1
   11d2c:	601a      	str	r2, [r3, #0]
}
   11d2e:	4770      	bx	lr
   11d30:	40001000 	.word	0x40001000

00011d34 <radio_disable>:
    p_reg->CHENCLR = mask;
   11d34:	4a07      	ldr	r2, [pc, #28]	; (11d54 <radio_disable+0x20>)
   11d36:	f44f 6390 	mov.w	r3, #1152	; 0x480
   11d3a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   11d3e:	2301      	movs	r3, #1
   11d40:	6053      	str	r3, [r2, #4]
   11d42:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   11d44:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   11d48:	2100      	movs	r1, #0
   11d4a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   11d4e:	6113      	str	r3, [r2, #16]
}
   11d50:	4770      	bx	lr
   11d52:	bf00      	nop
   11d54:	4001f000 	.word	0x4001f000

00011d58 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   11d58:	4b04      	ldr	r3, [pc, #16]	; (11d6c <radio_status_reset+0x14>)
   11d5a:	2200      	movs	r2, #0
   11d5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   11d60:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   11d64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   11d68:	4770      	bx	lr
   11d6a:	bf00      	nop
   11d6c:	40001000 	.word	0x40001000

00011d70 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   11d70:	4b03      	ldr	r3, [pc, #12]	; (11d80 <radio_is_ready+0x10>)
   11d72:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   11d76:	3000      	adds	r0, #0
   11d78:	bf18      	it	ne
   11d7a:	2001      	movne	r0, #1
   11d7c:	4770      	bx	lr
   11d7e:	bf00      	nop
   11d80:	40001000 	.word	0x40001000

00011d84 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   11d84:	4b03      	ldr	r3, [pc, #12]	; (11d94 <radio_is_done+0x10>)
   11d86:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   11d8a:	3000      	adds	r0, #0
   11d8c:	bf18      	it	ne
   11d8e:	2001      	movne	r0, #1
   11d90:	4770      	bx	lr
   11d92:	bf00      	nop
   11d94:	40001000 	.word	0x40001000

00011d98 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   11d98:	4b04      	ldr	r3, [pc, #16]	; (11dac <radio_crc_configure+0x14>)
   11d9a:	f240 1203 	movw	r2, #259	; 0x103
   11d9e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   11da2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   11da6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   11daa:	4770      	bx	lr
   11dac:	40001000 	.word	0x40001000

00011db0 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   11db0:	4b03      	ldr	r3, [pc, #12]	; (11dc0 <radio_crc_is_valid+0x10>)
   11db2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   11db6:	3000      	adds	r0, #0
   11db8:	bf18      	it	ne
   11dba:	2001      	movne	r0, #1
   11dbc:	4770      	bx	lr
   11dbe:	bf00      	nop
   11dc0:	40001000 	.word	0x40001000

00011dc4 <radio_pkt_empty_get>:
}
   11dc4:	4800      	ldr	r0, [pc, #0]	; (11dc8 <radio_pkt_empty_get+0x4>)
   11dc6:	4770      	bx	lr
   11dc8:	2000144c 	.word	0x2000144c

00011dcc <radio_pkt_scratch_get>:
}
   11dcc:	4800      	ldr	r0, [pc, #0]	; (11dd0 <radio_pkt_scratch_get+0x4>)
   11dce:	4770      	bx	lr
   11dd0:	20001450 	.word	0x20001450

00011dd4 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11dd4:	4b04      	ldr	r3, [pc, #16]	; (11de8 <radio_switch_complete_and_rx+0x14>)
   11dd6:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   11dd8:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11dda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   11dde:	4602      	mov	r2, r0
   11de0:	4608      	mov	r0, r1
   11de2:	f7ff be69 	b.w	11ab8 <sw_switch.isra.10>
   11de6:	bf00      	nop
   11de8:	40001000 	.word	0x40001000

00011dec <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11dec:	4b03      	ldr	r3, [pc, #12]	; (11dfc <radio_switch_complete_and_tx+0x10>)
   11dee:	2103      	movs	r1, #3
   11df0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   11df4:	4601      	mov	r1, r0
   11df6:	2001      	movs	r0, #1
   11df8:	f7ff be5e 	b.w	11ab8 <sw_switch.isra.10>
   11dfc:	40001000 	.word	0x40001000

00011e00 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   11e00:	4b05      	ldr	r3, [pc, #20]	; (11e18 <radio_switch_complete_and_disable+0x18>)
   11e02:	2203      	movs	r2, #3
   11e04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   11e08:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   11e0c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11e10:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11e14:	4770      	bx	lr
   11e16:	bf00      	nop
   11e18:	40001000 	.word	0x40001000

00011e1c <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   11e1c:	4b02      	ldr	r3, [pc, #8]	; (11e28 <radio_rssi_status_reset+0xc>)
   11e1e:	2200      	movs	r2, #0
   11e20:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   11e24:	4770      	bx	lr
   11e26:	bf00      	nop
   11e28:	40001000 	.word	0x40001000

00011e2c <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   11e2c:	4b03      	ldr	r3, [pc, #12]	; (11e3c <radio_rssi_is_ready+0x10>)
   11e2e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   11e32:	3000      	adds	r0, #0
   11e34:	bf18      	it	ne
   11e36:	2001      	movne	r0, #1
   11e38:	4770      	bx	lr
   11e3a:	bf00      	nop
   11e3c:	40001000 	.word	0x40001000

00011e40 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   11e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e42:	2400      	movs	r4, #0
   11e44:	2706      	movs	r7, #6
   11e46:	00a3      	lsls	r3, r4, #2
   11e48:	fb07 2504 	mla	r5, r7, r4, r2
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   11e4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   11e54:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   11e56:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   11e5a:	3401      	adds	r4, #1
   11e5c:	88ad      	ldrh	r5, [r5, #4]
   11e5e:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   11e62:	2c08      	cmp	r4, #8
   11e64:	d1ef      	bne.n	11e46 <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   11e66:	4b03      	ldr	r3, [pc, #12]	; (11e74 <radio_filter_configure+0x34>)
   11e68:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   11e6c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   11e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e72:	bf00      	nop
   11e74:	40001000 	.word	0x40001000

00011e78 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   11e78:	4a03      	ldr	r2, [pc, #12]	; (11e88 <radio_filter_disable+0x10>)
   11e7a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   11e7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11e82:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   11e86:	4770      	bx	lr
   11e88:	40001000 	.word	0x40001000

00011e8c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   11e8c:	4b02      	ldr	r3, [pc, #8]	; (11e98 <radio_filter_status_reset+0xc>)
   11e8e:	2200      	movs	r2, #0
   11e90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   11e94:	4770      	bx	lr
   11e96:	bf00      	nop
   11e98:	40001000 	.word	0x40001000

00011e9c <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   11e9c:	4b03      	ldr	r3, [pc, #12]	; (11eac <radio_filter_has_match+0x10>)
   11e9e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   11ea2:	3000      	adds	r0, #0
   11ea4:	bf18      	it	ne
   11ea6:	2001      	movne	r0, #1
   11ea8:	4770      	bx	lr
   11eaa:	bf00      	nop
   11eac:	40001000 	.word	0x40001000

00011eb0 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   11eb0:	4b01      	ldr	r3, [pc, #4]	; (11eb8 <radio_filter_match_get+0x8>)
   11eb2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   11eb6:	4770      	bx	lr
   11eb8:	40001000 	.word	0x40001000

00011ebc <radio_bc_configure>:
    p_reg->BCC = radio_bcc;
   11ebc:	4b04      	ldr	r3, [pc, #16]	; (11ed0 <radio_bc_configure+0x14>)
   11ebe:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560

void radio_bc_configure(u32_t n)
{
	nrf_radio_bcc_set(NRF_RADIO, n);
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   11ec2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   11ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11eca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   11ece:	4770      	bx	lr
   11ed0:	40001000 	.word	0x40001000

00011ed4 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   11ed4:	4b05      	ldr	r3, [pc, #20]	; (11eec <radio_tmr_status_reset+0x18>)
   11ed6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   11eda:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   11ede:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   11ee2:	4a03      	ldr	r2, [pc, #12]	; (11ef0 <radio_tmr_status_reset+0x1c>)
   11ee4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   11ee8:	4770      	bx	lr
   11eea:	bf00      	nop
   11eec:	4000b000 	.word	0x4000b000
   11ef0:	0e700060 	.word	0x0e700060

00011ef4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   11ef4:	4b03      	ldr	r3, [pc, #12]	; (11f04 <radio_tmr_tifs_set+0x10>)
   11ef6:	4a04      	ldr	r2, [pc, #16]	; (11f08 <radio_tmr_tifs_set+0x14>)
   11ef8:	781b      	ldrb	r3, [r3, #0]
   11efa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   11efe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11f02:	4770      	bx	lr
   11f04:	2000a2ad 	.word	0x2000a2ad
   11f08:	40009000 	.word	0x40009000

00011f0c <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   11f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   11f0e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   11f12:	4c2f      	ldr	r4, [pc, #188]	; (11fd0 <radio_tmr_start+0xc4>)
   11f14:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   11f18:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   11f1a:	bf88      	it	hi
   11f1c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f20:	4b2c      	ldr	r3, [pc, #176]	; (11fd4 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   11f22:	4c2d      	ldr	r4, [pc, #180]	; (11fd8 <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   11f24:	bf84      	itt	hi
   11f26:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   11f2a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   11f2e:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   11f32:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   11f36:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   11f3a:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   11f3e:	f04f 0202 	mov.w	r2, #2
   11f42:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   11f44:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   11f48:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   11f4c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   11f50:	4a22      	ldr	r2, [pc, #136]	; (11fdc <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   11f52:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   11f56:	bf88      	it	hi
   11f58:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   11f5c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   11f60:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   11f64:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11f68:	491d      	ldr	r1, [pc, #116]	; (11fe0 <radio_tmr_start+0xd4>)
   11f6a:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   11f6e:	3b0c      	subs	r3, #12
   11f70:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11f74:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   11f78:	2320      	movs	r3, #32
   11f7a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   11f7e:	f7ff fd87 	bl	11a90 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   11f82:	4b18      	ldr	r3, [pc, #96]	; (11fe4 <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f84:	4a18      	ldr	r2, [pc, #96]	; (11fe8 <radio_tmr_start+0xdc>)
   11f86:	6015      	str	r5, [r2, #0]
   11f88:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   11f8c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   11f90:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   11f94:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11f96:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   11f9a:	3b74      	subs	r3, #116	; 0x74
   11f9c:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   11fa0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11fa4:	3334      	adds	r3, #52	; 0x34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11fa6:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11faa:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11fae:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   11fb2:	33c4      	adds	r3, #196	; 0xc4
   11fb4:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11fb8:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   11fbc:	3bc0      	subs	r3, #192	; 0xc0
   11fbe:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11fc2:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   11fc6:	33c8      	adds	r3, #200	; 0xc8
   11fc8:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   11fcc:	4620      	mov	r0, r4
   11fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fd0:	7ff0bdbf 	.word	0x7ff0bdbf
   11fd4:	4000800c 	.word	0x4000800c
   11fd8:	000f4240 	.word	0x000f4240
   11fdc:	4000b000 	.word	0x4000b000
   11fe0:	4001f000 	.word	0x4001f000
   11fe4:	40009000 	.word	0x40009000
   11fe8:	4000900c 	.word	0x4000900c

00011fec <radio_tmr_start_get>:
    return p_reg->CC[ch];
   11fec:	4b01      	ldr	r3, [pc, #4]	; (11ff4 <radio_tmr_start_get+0x8>)
   11fee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   11ff2:	4770      	bx	lr
   11ff4:	4000b000 	.word	0x4000b000

00011ff8 <radio_tmr_stop>:
   11ff8:	4a04      	ldr	r2, [pc, #16]	; (1200c <radio_tmr_stop+0x14>)
   11ffa:	2301      	movs	r3, #1
   11ffc:	6013      	str	r3, [r2, #0]
   11ffe:	60d3      	str	r3, [r2, #12]
   12000:	320c      	adds	r2, #12
   12002:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   12006:	6013      	str	r3, [r2, #0]
   12008:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1200a:	4770      	bx	lr
   1200c:	40008004 	.word	0x40008004

00012010 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   12010:	4b04      	ldr	r3, [pc, #16]	; (12024 <radio_tmr_hcto_configure+0x14>)
   12012:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   12016:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1201a:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1201e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   12022:	4770      	bx	lr
   12024:	40008000 	.word	0x40008000

00012028 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12028:	4b06      	ldr	r3, [pc, #24]	; (12044 <radio_tmr_aa_capture+0x1c>)
   1202a:	4a07      	ldr	r2, [pc, #28]	; (12048 <radio_tmr_aa_capture+0x20>)
   1202c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12030:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12034:	3240      	adds	r2, #64	; 0x40
   12036:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1203a:	4a04      	ldr	r2, [pc, #16]	; (1204c <radio_tmr_aa_capture+0x24>)
   1203c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   12040:	4770      	bx	lr
   12042:	bf00      	nop
   12044:	4001f000 	.word	0x4001f000
   12048:	40001100 	.word	0x40001100
   1204c:	04000040 	.word	0x04000040

00012050 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12050:	4b01      	ldr	r3, [pc, #4]	; (12058 <radio_tmr_aa_get+0x8>)
   12052:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12056:	4770      	bx	lr
   12058:	40008000 	.word	0x40008000

0001205c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1205c:	4b01      	ldr	r3, [pc, #4]	; (12064 <radio_tmr_aa_save+0x8>)
   1205e:	6018      	str	r0, [r3, #0]
}
   12060:	4770      	bx	lr
   12062:	bf00      	nop
   12064:	2000155c 	.word	0x2000155c

00012068 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   12068:	4b01      	ldr	r3, [pc, #4]	; (12070 <radio_tmr_aa_restore+0x8>)
   1206a:	6818      	ldr	r0, [r3, #0]
   1206c:	4770      	bx	lr
   1206e:	bf00      	nop
   12070:	2000155c 	.word	0x2000155c

00012074 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12074:	4b01      	ldr	r3, [pc, #4]	; (1207c <radio_tmr_ready_get+0x8>)
   12076:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1207a:	4770      	bx	lr
   1207c:	40008000 	.word	0x40008000

00012080 <radio_tmr_end_capture>:
   12080:	4b02      	ldr	r3, [pc, #8]	; (1208c <radio_tmr_end_capture+0xc>)
   12082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   12086:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1208a:	4770      	bx	lr
   1208c:	4001f000 	.word	0x4001f000

00012090 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12090:	4b01      	ldr	r3, [pc, #4]	; (12098 <radio_tmr_end_get+0x8>)
   12092:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   12096:	4770      	bx	lr
   12098:	40008000 	.word	0x40008000

0001209c <radio_tmr_tifs_base_get>:
   1209c:	4b01      	ldr	r3, [pc, #4]	; (120a4 <radio_tmr_tifs_base_get+0x8>)
   1209e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   120a2:	4770      	bx	lr
   120a4:	40008000 	.word	0x40008000

000120a8 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   120a8:	4b13      	ldr	r3, [pc, #76]	; (120f8 <radio_ccm_rx_pkt_set+0x50>)
{
   120aa:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   120ac:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   120ae:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   120b0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   120b4:	4e11      	ldr	r6, [pc, #68]	; (120fc <radio_ccm_rx_pkt_set+0x54>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   120b6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   120ba:	4d11      	ldr	r5, [pc, #68]	; (12100 <radio_ccm_rx_pkt_set+0x58>)
   120bc:	2902      	cmp	r1, #2
   120be:	bf14      	ite	ne
   120c0:	4629      	movne	r1, r5
   120c2:	4631      	moveq	r1, r6
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   120c4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   120c8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   120cc:	480d      	ldr	r0, [pc, #52]	; (12104 <radio_ccm_rx_pkt_set+0x5c>)
   120ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   120d2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   120d6:	4a0c      	ldr	r2, [pc, #48]	; (12108 <radio_ccm_rx_pkt_set+0x60>)
   120d8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   120dc:	4a0b      	ldr	r2, [pc, #44]	; (1210c <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->SHORTS = 0;
   120de:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   120e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   120e6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   120ea:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   120ee:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   120f2:	2201      	movs	r2, #1
   120f4:	601a      	str	r2, [r3, #0]
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   120f6:	bd70      	pop	{r4, r5, r6, pc}
   120f8:	4000f000 	.word	0x4000f000
   120fc:	01010001 	.word	0x01010001
   12100:	01000001 	.word	0x01000001
   12104:	20001450 	.word	0x20001450
   12108:	20001340 	.word	0x20001340
   1210c:	4001f000 	.word	0x4001f000

00012110 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   12110:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12112:	4b0e      	ldr	r3, [pc, #56]	; (1214c <radio_ccm_tx_pkt_set+0x3c>)
   12114:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12116:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12118:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1211c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   12120:	4c0b      	ldr	r4, [pc, #44]	; (12150 <radio_ccm_tx_pkt_set+0x40>)
   12122:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12126:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1212a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1212e:	4809      	ldr	r0, [pc, #36]	; (12154 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12130:	4909      	ldr	r1, [pc, #36]	; (12158 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12132:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12136:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1213a:	2101      	movs	r1, #1
   1213c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12140:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12144:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   12148:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1214a:	bd10      	pop	{r4, pc}
   1214c:	4000f000 	.word	0x4000f000
   12150:	01010000 	.word	0x01010000
   12154:	20001450 	.word	0x20001450
   12158:	20001340 	.word	0x20001340

0001215c <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1215c:	4b0c      	ldr	r3, [pc, #48]	; (12190 <radio_ccm_is_done+0x34>)
   1215e:	2202      	movs	r2, #2
   12160:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12164:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   12168:	b16a      	cbz	r2, 12186 <radio_ccm_is_done+0x2a>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1216a:	2202      	movs	r2, #2
   1216c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   12170:	4a08      	ldr	r2, [pc, #32]	; (12194 <radio_ccm_is_done+0x38>)
   12172:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12176:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1217a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1217e:	fab0 f080 	clz	r0, r0
   12182:	0940      	lsrs	r0, r0, #5
   12184:	4770      	bx	lr
		__WFE();
   12186:	bf20      	wfe
		__SEV();
   12188:	bf40      	sev
		__WFE();
   1218a:	bf20      	wfe
   1218c:	e7ea      	b.n	12164 <radio_ccm_is_done+0x8>
   1218e:	bf00      	nop
   12190:	4000f000 	.word	0x4000f000
   12194:	e000e100 	.word	0xe000e100

00012198 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   12198:	4b03      	ldr	r3, [pc, #12]	; (121a8 <radio_ccm_mic_is_valid+0x10>)
   1219a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1219e:	3000      	adds	r0, #0
   121a0:	bf18      	it	ne
   121a2:	2001      	movne	r0, #1
   121a4:	4770      	bx	lr
   121a6:	bf00      	nop
   121a8:	4000f000 	.word	0x4000f000

000121ac <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   121ac:	4b11      	ldr	r3, [pc, #68]	; (121f4 <radio_ar_configure+0x48>)
{
   121ae:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   121b0:	2203      	movs	r2, #3
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   121b2:	4c11      	ldr	r4, [pc, #68]	; (121f8 <radio_ar_configure+0x4c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   121b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   121b8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   121bc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   121c0:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
   121c4:	3a01      	subs	r2, #1
   121c6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   121ca:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   121cc:	4a0b      	ldr	r2, [pc, #44]	; (121fc <radio_ar_configure+0x50>)
   121ce:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   121d2:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   121d4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   121d8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   121dc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	radio_bc_configure(64);
   121e0:	f7ff fe6c 	bl	11ebc <radio_bc_configure>
   121e4:	4b06      	ldr	r3, [pc, #24]	; (12200 <radio_ar_configure+0x54>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   121e6:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   121ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   121ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   121f2:	bd10      	pop	{r4, pc}
   121f4:	4000f000 	.word	0x4000f000
   121f8:	40001000 	.word	0x40001000
   121fc:	2000133c 	.word	0x2000133c
   12200:	4001f000 	.word	0x4001f000

00012204 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   12204:	4b01      	ldr	r3, [pc, #4]	; (1220c <radio_ar_match_get+0x8>)
   12206:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1220a:	4770      	bx	lr
   1220c:	4000f000 	.word	0x4000f000

00012210 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12210:	4a04      	ldr	r2, [pc, #16]	; (12224 <radio_ar_status_reset+0x14>)
   12212:	2300      	movs	r3, #0
   12214:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12218:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1221c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   12220:	4770      	bx	lr
   12222:	bf00      	nop
   12224:	40001000 	.word	0x40001000

00012228 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   12228:	4b08      	ldr	r3, [pc, #32]	; (1224c <radio_ar_has_match+0x24>)
   1222a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1222e:	b160      	cbz	r0, 1224a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   12230:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   12234:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   12238:	b138      	cbz	r0, 1224a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1223a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1223e:	b120      	cbz	r0, 1224a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12240:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12244:	fab0 f080 	clz	r0, r0
   12248:	0940      	lsrs	r0, r0, #5
}
   1224a:	4770      	bx	lr
   1224c:	40001000 	.word	0x40001000

00012250 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12250:	2902      	cmp	r1, #2
{
   12252:	b510      	push	{r4, lr}
   12254:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12256:	d00b      	beq.n	12270 <mayfly_enable_cb+0x20>
   12258:	2325      	movs	r3, #37	; 0x25
   1225a:	4a0a      	ldr	r2, [pc, #40]	; (12284 <mayfly_enable_cb+0x34>)
   1225c:	490a      	ldr	r1, [pc, #40]	; (12288 <mayfly_enable_cb+0x38>)
   1225e:	480b      	ldr	r0, [pc, #44]	; (1228c <mayfly_enable_cb+0x3c>)
   12260:	f005 ff68 	bl	18134 <printk>
   12264:	4040      	eors	r0, r0
   12266:	f380 8811 	msr	BASEPRI, r0
   1226a:	f04f 0003 	mov.w	r0, #3
   1226e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   12270:	200b      	movs	r0, #11
	if (enable) {
   12272:	b11c      	cbz	r4, 1227c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   12274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   12278:	f7f0 bf24 	b.w	30c4 <arch_irq_enable>
}
   1227c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   12280:	f7f0 bf30 	b.w	30e4 <arch_irq_disable>
   12284:	00021276 	.word	0x00021276
   12288:	000212bd 	.word	0x000212bd
   1228c:	0001ff46 	.word	0x0001ff46

00012290 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   12290:	2901      	cmp	r1, #1
{
   12292:	b508      	push	{r3, lr}
	switch (callee_id) {
   12294:	d015      	beq.n	122c2 <mayfly_is_enabled+0x32>
   12296:	b179      	cbz	r1, 122b8 <mayfly_is_enabled+0x28>
   12298:	2902      	cmp	r1, #2
   1229a:	d012      	beq.n	122c2 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1229c:	233f      	movs	r3, #63	; 0x3f
   1229e:	4a0a      	ldr	r2, [pc, #40]	; (122c8 <mayfly_is_enabled+0x38>)
   122a0:	490a      	ldr	r1, [pc, #40]	; (122cc <mayfly_is_enabled+0x3c>)
   122a2:	480b      	ldr	r0, [pc, #44]	; (122d0 <mayfly_is_enabled+0x40>)
   122a4:	f005 ff46 	bl	18134 <printk>
   122a8:	4040      	eors	r0, r0
   122aa:	f380 8811 	msr	BASEPRI, r0
   122ae:	f04f 0003 	mov.w	r0, #3
   122b2:	df02      	svc	2
		break;
	}

	return 0;
}
   122b4:	2000      	movs	r0, #0
   122b6:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   122b8:	2018      	movs	r0, #24
}
   122ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   122be:	f7f0 bf25 	b.w	310c <arch_irq_is_enabled>
   122c2:	200b      	movs	r0, #11
   122c4:	e7f9      	b.n	122ba <mayfly_is_enabled+0x2a>
   122c6:	bf00      	nop
   122c8:	00021276 	.word	0x00021276
   122cc:	0002195a 	.word	0x0002195a
   122d0:	0001ff46 	.word	0x0001ff46

000122d4 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   122d4:	2901      	cmp	r1, #1
{
   122d6:	b508      	push	{r3, lr}
	switch (callee_id) {
   122d8:	d015      	beq.n	12306 <mayfly_pend+0x32>
   122da:	b171      	cbz	r1, 122fa <mayfly_pend+0x26>
   122dc:	2902      	cmp	r1, #2
   122de:	d012      	beq.n	12306 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   122e0:	237b      	movs	r3, #123	; 0x7b
   122e2:	4a0b      	ldr	r2, [pc, #44]	; (12310 <mayfly_pend+0x3c>)
   122e4:	490b      	ldr	r1, [pc, #44]	; (12314 <mayfly_pend+0x40>)
   122e6:	480c      	ldr	r0, [pc, #48]	; (12318 <mayfly_pend+0x44>)
   122e8:	f005 ff24 	bl	18134 <printk>
   122ec:	4040      	eors	r0, r0
   122ee:	f380 8811 	msr	BASEPRI, r0
   122f2:	f04f 0003 	mov.w	r0, #3
   122f6:	df02      	svc	2
		break;
	}
}
   122f8:	e004      	b.n	12304 <mayfly_pend+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   122fa:	4b08      	ldr	r3, [pc, #32]	; (1231c <mayfly_pend+0x48>)
   122fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12300:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12304:	bd08      	pop	{r3, pc}
   12306:	4b05      	ldr	r3, [pc, #20]	; (1231c <mayfly_pend+0x48>)
   12308:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1230c:	e7f8      	b.n	12300 <mayfly_pend+0x2c>
   1230e:	bf00      	nop
   12310:	00021276 	.word	0x00021276
   12314:	0002195a 	.word	0x0002195a
   12318:	0001ff46 	.word	0x0001ff46
   1231c:	e000e100 	.word	0xe000e100

00012320 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12320:	2803      	cmp	r0, #3
{
   12322:	b510      	push	{r4, lr}
   12324:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12326:	d90b      	bls.n	12340 <hal_ticker_instance0_caller_id_get+0x20>
   12328:	2338      	movs	r3, #56	; 0x38
   1232a:	4a0e      	ldr	r2, [pc, #56]	; (12364 <hal_ticker_instance0_caller_id_get+0x44>)
   1232c:	490e      	ldr	r1, [pc, #56]	; (12368 <hal_ticker_instance0_caller_id_get+0x48>)
   1232e:	480f      	ldr	r0, [pc, #60]	; (1236c <hal_ticker_instance0_caller_id_get+0x4c>)
   12330:	f005 ff00 	bl	18134 <printk>
   12334:	4040      	eors	r0, r0
   12336:	f380 8811 	msr	BASEPRI, r0
   1233a:	f04f 0003 	mov.w	r0, #3
   1233e:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   12340:	4b0b      	ldr	r3, [pc, #44]	; (12370 <hal_ticker_instance0_caller_id_get+0x50>)
   12342:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12344:	b95c      	cbnz	r4, 1235e <hal_ticker_instance0_caller_id_get+0x3e>
   12346:	233b      	movs	r3, #59	; 0x3b
   12348:	4a06      	ldr	r2, [pc, #24]	; (12364 <hal_ticker_instance0_caller_id_get+0x44>)
   1234a:	490a      	ldr	r1, [pc, #40]	; (12374 <hal_ticker_instance0_caller_id_get+0x54>)
   1234c:	4807      	ldr	r0, [pc, #28]	; (1236c <hal_ticker_instance0_caller_id_get+0x4c>)
   1234e:	f005 fef1 	bl	18134 <printk>
   12352:	4040      	eors	r0, r0
   12354:	f380 8811 	msr	BASEPRI, r0
   12358:	f04f 0003 	mov.w	r0, #3
   1235c:	df02      	svc	2

	return caller_id;
}
   1235e:	4620      	mov	r0, r4
   12360:	bd10      	pop	{r4, pc}
   12362:	bf00      	nop
   12364:	000212e3 	.word	0x000212e3
   12368:	0002132a 	.word	0x0002132a
   1236c:	0001ff46 	.word	0x0001ff46
   12370:	000212df 	.word	0x000212df
   12374:	0002134a 	.word	0x0002134a

00012378 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12378:	3801      	subs	r0, #1
{
   1237a:	b510      	push	{r4, lr}
   1237c:	461c      	mov	r4, r3
	switch (caller_id) {
   1237e:	2804      	cmp	r0, #4
   12380:	d845      	bhi.n	1240e <hal_ticker_instance0_sched+0x96>
   12382:	e8df f000 	tbb	[pc, r0]
   12386:	1a03      	.short	0x1a03
   12388:	2c23      	.short	0x2c23
   1238a:	3b          	.byte	0x3b
   1238b:	00          	.byte	0x00
#if defined(CONFIG_BT_LL_SW_SPLIT)
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   1238c:	2904      	cmp	r1, #4
   1238e:	d107      	bne.n	123a0 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   12390:	4b20      	ldr	r3, [pc, #128]	; (12414 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   12392:	2102      	movs	r1, #2
			m.param = instance;
   12394:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   12396:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   12398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1239c:	f7f7 bbf0 	b.w	9b80 <mayfly_enqueue>
			LL_ASSERT(0);
   123a0:	235c      	movs	r3, #92	; 0x5c
		LL_ASSERT(0);
   123a2:	4a1d      	ldr	r2, [pc, #116]	; (12418 <hal_ticker_instance0_sched+0xa0>)
   123a4:	491d      	ldr	r1, [pc, #116]	; (1241c <hal_ticker_instance0_sched+0xa4>)
   123a6:	481e      	ldr	r0, [pc, #120]	; (12420 <hal_ticker_instance0_sched+0xa8>)
   123a8:	f005 fec4 	bl	18134 <printk>
   123ac:	4040      	eors	r0, r0
   123ae:	f380 8811 	msr	BASEPRI, r0
   123b2:	f04f 0003 	mov.w	r0, #3
   123b6:	df02      	svc	2
}
   123b8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   123ba:	2903      	cmp	r1, #3
   123bc:	d104      	bne.n	123c8 <hal_ticker_instance0_sched+0x50>
			m.param = instance;
   123be:	4b19      	ldr	r3, [pc, #100]	; (12424 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   123c0:	2101      	movs	r1, #1
			m.param = instance;
   123c2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   123c4:	4608      	mov	r0, r1
   123c6:	e7e7      	b.n	12398 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   123c8:	2374      	movs	r3, #116	; 0x74
   123ca:	e7ea      	b.n	123a2 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   123cc:	2904      	cmp	r1, #4
   123ce:	d104      	bne.n	123da <hal_ticker_instance0_sched+0x62>
			m.param = instance;
   123d0:	4b15      	ldr	r3, [pc, #84]	; (12428 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   123d2:	2102      	movs	r1, #2
			m.param = instance;
   123d4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   123d6:	2001      	movs	r0, #1
   123d8:	e7de      	b.n	12398 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   123da:	238b      	movs	r3, #139	; 0x8b
   123dc:	e7e1      	b.n	123a2 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   123de:	2903      	cmp	r1, #3
   123e0:	d003      	beq.n	123ea <hal_ticker_instance0_sched+0x72>
   123e2:	2904      	cmp	r1, #4
   123e4:	d006      	beq.n	123f4 <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
   123e6:	23b1      	movs	r3, #177	; 0xb1
   123e8:	e7db      	b.n	123a2 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   123ea:	4b10      	ldr	r3, [pc, #64]	; (1242c <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   123ec:	2101      	movs	r1, #1
			m.param = instance;
   123ee:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   123f0:	2002      	movs	r0, #2
   123f2:	e7d1      	b.n	12398 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   123f4:	4b0e      	ldr	r3, [pc, #56]	; (12430 <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   123f6:	2102      	movs	r1, #2
			m.param = instance;
   123f8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   123fa:	e7e3      	b.n	123c4 <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
   123fc:	2904      	cmp	r1, #4
   123fe:	d104      	bne.n	1240a <hal_ticker_instance0_sched+0x92>
			m.param = instance;
   12400:	4b0c      	ldr	r3, [pc, #48]	; (12434 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12402:	2102      	movs	r1, #2
			m.param = instance;
   12404:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12406:	2003      	movs	r0, #3
   12408:	e7c6      	b.n	12398 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1240a:	23c9      	movs	r3, #201	; 0xc9
   1240c:	e7c9      	b.n	123a2 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   1240e:	23cf      	movs	r3, #207	; 0xcf
   12410:	e7c7      	b.n	123a2 <hal_ticker_instance0_sched+0x2a>
   12412:	bf00      	nop
   12414:	2000cee8 	.word	0x2000cee8
   12418:	000212e3 	.word	0x000212e3
   1241c:	0002195a 	.word	0x0002195a
   12420:	0001ff46 	.word	0x0001ff46
   12424:	2000cef8 	.word	0x2000cef8
   12428:	2000cf08 	.word	0x2000cf08
   1242c:	2000cf18 	.word	0x2000cf18
   12430:	2000cf28 	.word	0x2000cf28
   12434:	2000cf38 	.word	0x2000cf38

00012438 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   12438:	4b01      	ldr	r3, [pc, #4]	; (12440 <net_buf_pool_get+0x8>)
   1243a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1243e:	4770      	bx	lr
   12440:	2000d278 	.word	0x2000d278

00012444 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12444:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   12446:	4b04      	ldr	r3, [pc, #16]	; (12458 <net_buf_id+0x14>)
   12448:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1244c:	69db      	ldr	r3, [r3, #28]
   1244e:	1ac0      	subs	r0, r0, r3
}
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <net_buf_id+0x18>)
	return buf - pool->__bufs;
   12452:	10c0      	asrs	r0, r0, #3
}
   12454:	4358      	muls	r0, r3
   12456:	4770      	bx	lr
   12458:	2000d278 	.word	0x2000d278
   1245c:	aaaaaaab 	.word	0xaaaaaaab

00012460 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   12460:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12462:	4b09      	ldr	r3, [pc, #36]	; (12488 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12464:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12466:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
   1246a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1246c:	699b      	ldr	r3, [r3, #24]
   1246e:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   12470:	6823      	ldr	r3, [r4, #0]
   12472:	429a      	cmp	r2, r3
   12474:	bf94      	ite	ls
   12476:	600a      	strls	r2, [r1, #0]
   12478:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1247a:	f7ff ffe3 	bl	12444 <net_buf_id>
   1247e:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   12482:	fb02 3000 	mla	r0, r2, r0, r3
   12486:	bd10      	pop	{r4, pc}
   12488:	2000d278 	.word	0x2000d278

0001248c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   1248c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12490:	4605      	mov	r5, r0
   12492:	9101      	str	r1, [sp, #4]
   12494:	4616      	mov	r6, r2
	u32_t alloc_start = k_uptime_get_32();
   12496:	f008 fe92 	bl	1b1be <k_uptime_get_32>
   1249a:	4607      	mov	r7, r0
	__asm__ volatile(
   1249c:	f04f 0320 	mov.w	r3, #32
   124a0:	f3ef 8811 	mrs	r8, BASEPRI
   124a4:	f383 8811 	msr	BASEPRI, r3
   124a8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   124ac:	8a6b      	ldrh	r3, [r5, #18]
   124ae:	2b00      	cmp	r3, #0
   124b0:	d041      	beq.n	12536 <net_buf_alloc_len+0xaa>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   124b2:	8a2a      	ldrh	r2, [r5, #16]
   124b4:	429a      	cmp	r2, r3
   124b6:	d92c      	bls.n	12512 <net_buf_alloc_len+0x86>
	return z_impl_k_queue_get(queue, timeout);
   124b8:	2100      	movs	r1, #0
   124ba:	4628      	mov	r0, r5
   124bc:	f00b fb38 	bl	1db30 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   124c0:	4604      	mov	r4, r0
   124c2:	b330      	cbz	r0, 12512 <net_buf_alloc_len+0x86>
	__asm__ volatile(
   124c4:	f388 8811 	msr	BASEPRI, r8
   124c8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   124cc:	9b01      	ldr	r3, [sp, #4]
   124ce:	2b00      	cmp	r3, #0
   124d0:	d040      	beq.n	12554 <net_buf_alloc_len+0xc8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   124d2:	1c73      	adds	r3, r6, #1
   124d4:	2b01      	cmp	r3, #1
   124d6:	d906      	bls.n	124e6 <net_buf_alloc_len+0x5a>
			u32_t diff = k_uptime_get_32() - alloc_start;
   124d8:	f008 fe71 	bl	1b1be <k_uptime_get_32>
   124dc:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
   124de:	42b0      	cmp	r0, r6
   124e0:	bf94      	ite	ls
   124e2:	1a36      	subls	r6, r6, r0
   124e4:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   124e6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   124e8:	4f20      	ldr	r7, [pc, #128]	; (1256c <net_buf_alloc_len+0xe0>)
   124ea:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   124ee:	4632      	mov	r2, r6
   124f0:	699b      	ldr	r3, [r3, #24]
   124f2:	681b      	ldr	r3, [r3, #0]
   124f4:	a901      	add	r1, sp, #4
   124f6:	681b      	ldr	r3, [r3, #0]
   124f8:	4620      	mov	r0, r4
   124fa:	4798      	blx	r3
   124fc:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   124fe:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   12500:	bb48      	cbnz	r0, 12556 <net_buf_alloc_len+0xca>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   12502:	79a0      	ldrb	r0, [r4, #6]
   12504:	4621      	mov	r1, r4
   12506:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1250a:	f00b faed 	bl	1dae8 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1250e:	462c      	mov	r4, r5
   12510:	e01c      	b.n	1254c <net_buf_alloc_len+0xc0>
		uninit_count = pool->uninit_count--;
   12512:	8a6b      	ldrh	r3, [r5, #18]
   12514:	1e5a      	subs	r2, r3, #1
   12516:	826a      	strh	r2, [r5, #18]
   12518:	f388 8811 	msr	BASEPRI, r8
   1251c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   12520:	8a2c      	ldrh	r4, [r5, #16]
   12522:	1ae4      	subs	r4, r4, r3
   12524:	69eb      	ldr	r3, [r5, #28]
   12526:	2218      	movs	r2, #24
   12528:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1252c:	4b0f      	ldr	r3, [pc, #60]	; (1256c <net_buf_alloc_len+0xe0>)
   1252e:	1aed      	subs	r5, r5, r3
   12530:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   12532:	71a5      	strb	r5, [r4, #6]
		goto success;
   12534:	e7ca      	b.n	124cc <net_buf_alloc_len+0x40>
   12536:	f388 8811 	msr	BASEPRI, r8
   1253a:	f3bf 8f6f 	isb	sy
   1253e:	4631      	mov	r1, r6
   12540:	4628      	mov	r0, r5
   12542:	f00b faf5 	bl	1db30 <z_impl_k_queue_get>
	if (!buf) {
   12546:	4604      	mov	r4, r0
   12548:	2800      	cmp	r0, #0
   1254a:	d1bf      	bne.n	124cc <net_buf_alloc_len+0x40>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   1254c:	4620      	mov	r0, r4
   1254e:	b002      	add	sp, #8
   12550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   12554:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   12556:	2300      	movs	r3, #0
	buf->ref   = 1U;
   12558:	2201      	movs	r2, #1
	buf->frags = NULL;
   1255a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1255c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1255e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   12560:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   12562:	6923      	ldr	r3, [r4, #16]
   12564:	81e2      	strh	r2, [r4, #14]
   12566:	60a3      	str	r3, [r4, #8]
	return buf;
   12568:	e7f0      	b.n	1254c <net_buf_alloc_len+0xc0>
   1256a:	bf00      	nop
   1256c:	2000d278 	.word	0x2000d278

00012570 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12572:	4d15      	ldr	r5, [pc, #84]	; (125c8 <net_buf_unref+0x58>)
   12574:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12576:	2600      	movs	r6, #0
	while (buf) {
   12578:	b904      	cbnz	r4, 1257c <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   1257c:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1257e:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   12580:	3b01      	subs	r3, #1
   12582:	b2db      	uxtb	r3, r3
   12584:	7123      	strb	r3, [r4, #4]
   12586:	2b00      	cmp	r3, #0
   12588:	d1f7      	bne.n	1257a <net_buf_unref+0xa>
		if (buf->__buf) {
   1258a:	6921      	ldr	r1, [r4, #16]
   1258c:	b159      	cbz	r1, 125a6 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1258e:	7963      	ldrb	r3, [r4, #5]
   12590:	079b      	lsls	r3, r3, #30
   12592:	d407      	bmi.n	125a4 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   12594:	79a3      	ldrb	r3, [r4, #6]
   12596:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1259a:	4620      	mov	r0, r4
   1259c:	699b      	ldr	r3, [r3, #24]
   1259e:	681b      	ldr	r3, [r3, #0]
   125a0:	689b      	ldr	r3, [r3, #8]
   125a2:	4798      	blx	r3
			buf->__buf = NULL;
   125a4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   125a6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   125a8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   125aa:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   125ae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   125b0:	695b      	ldr	r3, [r3, #20]
   125b2:	b11b      	cbz	r3, 125bc <net_buf_unref+0x4c>
			pool->destroy(buf);
   125b4:	4620      	mov	r0, r4
   125b6:	4798      	blx	r3
{
   125b8:	463c      	mov	r4, r7
   125ba:	e7dd      	b.n	12578 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   125bc:	4621      	mov	r1, r4
   125be:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   125c2:	f00b fa91 	bl	1dae8 <k_queue_prepend>
   125c6:	e7f7      	b.n	125b8 <net_buf_unref+0x48>
   125c8:	2000d278 	.word	0x2000d278

000125cc <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   125cc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   125ce:	4b09      	ldr	r3, [pc, #36]	; (125f4 <gpio_nrfx_init+0x28>)
   125d0:	781a      	ldrb	r2, [r3, #0]
   125d2:	b96a      	cbnz	r2, 125f0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   125d4:	2101      	movs	r1, #1
   125d6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   125d8:	2006      	movs	r0, #6
   125da:	2105      	movs	r1, #5
   125dc:	f7f0 fda4 	bl	3128 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   125e0:	2006      	movs	r0, #6
   125e2:	f7f0 fd6f 	bl	30c4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   125e6:	4b04      	ldr	r3, [pc, #16]	; (125f8 <gpio_nrfx_init+0x2c>)
   125e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   125ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   125f0:	2000      	movs	r0, #0
   125f2:	bd08      	pop	{r3, pc}
   125f4:	2000a2ae 	.word	0x2000a2ae
   125f8:	40006000 	.word	0x40006000

000125fc <gpiote_pin_int_cfg>:
{
   125fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
   125fe:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   12600:	4d55      	ldr	r5, [pc, #340]	; (12758 <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12602:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   12604:	6882      	ldr	r2, [r0, #8]
   12606:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1260a:	7918      	ldrb	r0, [r3, #4]
   1260c:	f001 031f 	and.w	r3, r1, #31
   12610:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   12614:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12616:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   12618:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   1261c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
   12620:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   12624:	42b3      	cmp	r3, r6
   12626:	d175      	bne.n	12714 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
   12628:	fa24 f600 	lsr.w	r6, r4, r0
   1262c:	07f6      	lsls	r6, r6, #31
   1262e:	d571      	bpl.n	12714 <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   12630:	0084      	lsls	r4, r0, #2
   12632:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12636:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
   1263a:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
   1263e:	f026 0601 	bic.w	r6, r6, #1
   12642:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   12646:	2401      	movs	r4, #1
   12648:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
   1264c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12650:	009c      	lsls	r4, r3, #2
   12652:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
   12656:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
   1265a:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1265e:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   12662:	6890      	ldr	r0, [r2, #8]
   12664:	40c8      	lsrs	r0, r1
   12666:	f010 0001 	ands.w	r0, r0, #1
   1266a:	d051      	beq.n	12710 <gpiote_pin_int_cfg+0x114>
   1266c:	68d0      	ldr	r0, [r2, #12]
   1266e:	40c8      	lsrs	r0, r1
   12670:	f010 0001 	ands.w	r0, r0, #1
   12674:	d04c      	beq.n	12710 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
   12676:	6950      	ldr	r0, [r2, #20]
   12678:	40c8      	lsrs	r0, r1
   1267a:	f010 0001 	ands.w	r0, r0, #1
   1267e:	d056      	beq.n	1272e <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
   12680:	6990      	ldr	r0, [r2, #24]
   12682:	40c8      	lsrs	r0, r1
   12684:	07c0      	lsls	r0, r0, #31
   12686:	d44a      	bmi.n	1271e <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
   12688:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1268a:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   1268c:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1268e:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   12692:	f000 0001 	and.w	r0, r0, #1
   12696:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1269a:	4288      	cmp	r0, r1
   1269c:	bf14      	ite	ne
   1269e:	2101      	movne	r1, #1
   126a0:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   126a2:	4d2d      	ldr	r5, [pc, #180]	; (12758 <gpiote_pin_int_cfg+0x15c>)
   126a4:	2400      	movs	r4, #0
   126a6:	f504 72a2 	add.w	r2, r4, #324	; 0x144
   126aa:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   126ae:	f010 0003 	ands.w	r0, r0, #3
   126b2:	d136      	bne.n	12722 <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   126b4:	00a2      	lsls	r2, r4, #2
   126b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   126ba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   126be:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   126c0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   126c4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   126c8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   126cc:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
   126d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   126d4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   126d8:	009b      	lsls	r3, r3, #2
   126da:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   126de:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   126e0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   126e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   126e8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   126ec:	4331      	orrs	r1, r6
   126ee:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   126f2:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   126f4:	681b      	ldr	r3, [r3, #0]
   126f6:	9301      	str	r3, [sp, #4]
    (void)dummy;
   126f8:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   126fa:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   126fe:	f043 0301 	orr.w	r3, r3, #1
   12702:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   12706:	2301      	movs	r3, #1
   12708:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
   1270c:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
   12710:	b002      	add	sp, #8
   12712:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12714:	3001      	adds	r0, #1
   12716:	2808      	cmp	r0, #8
   12718:	f47f af7e 	bne.w	12618 <gpiote_pin_int_cfg+0x1c>
   1271c:	e798      	b.n	12650 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1271e:	2103      	movs	r1, #3
   12720:	e7bf      	b.n	126a2 <gpiote_pin_int_cfg+0xa6>
   12722:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   12724:	2c08      	cmp	r4, #8
   12726:	d1be      	bne.n	126a6 <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
   12728:	f06f 0012 	mvn.w	r0, #18
   1272c:	e7f0      	b.n	12710 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1272e:	6913      	ldr	r3, [r2, #16]
   12730:	69d2      	ldr	r2, [r2, #28]
   12732:	4053      	eors	r3, r2
   12734:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12738:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
   1273c:	f011 0f01 	tst.w	r1, #1
   12740:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12744:	bf14      	ite	ne
   12746:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   1274a:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
   1274e:	4313      	orrs	r3, r2
   12750:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
   12754:	e7dc      	b.n	12710 <gpiote_pin_int_cfg+0x114>
   12756:	bf00      	nop
   12758:	40006000 	.word	0x40006000

0001275c <gpiote_event_handler>:
{
   1275c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12760:	4953      	ldr	r1, [pc, #332]	; (128b0 <gpiote_event_handler+0x154>)
   12762:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   12764:	2d00      	cmp	r5, #0
   12766:	d067      	beq.n	12838 <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
   12768:	4b52      	ldr	r3, [pc, #328]	; (128b4 <gpiote_event_handler+0x158>)
   1276a:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   1276c:	681b      	ldr	r3, [r3, #0]
   1276e:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   12770:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   12774:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   12776:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   1277a:	4320      	orrs	r0, r4
   1277c:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   12780:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   12782:	69d4      	ldr	r4, [r2, #28]
   12784:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   12786:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   1278a:	4054      	eors	r4, r2
   1278c:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
   1278e:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
   12792:	2001      	movs	r0, #1
	u32_t pin = 0U;
   12794:	2700      	movs	r7, #0
	while (level_pins) {
   12796:	2b00      	cmp	r3, #0
   12798:	d138      	bne.n	1280c <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1279a:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1279c:	680b      	ldr	r3, [r1, #0]
   1279e:	9300      	str	r3, [sp, #0]
    (void)dummy;
   127a0:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   127a2:	4845      	ldr	r0, [pc, #276]	; (128b8 <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
   127a4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   127a6:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   127a8:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   127aa:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   127ae:	fa06 f103 	lsl.w	r1, r6, r3
   127b2:	4211      	tst	r1, r2
   127b4:	d013      	beq.n	127de <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   127b6:	009a      	lsls	r2, r3, #2
   127b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   127bc:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   127c0:	6811      	ldr	r1, [r2, #0]
   127c2:	b161      	cbz	r1, 127de <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   127c4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   127c8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   127cc:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   127ce:	6812      	ldr	r2, [r2, #0]
   127d0:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   127d2:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   127d6:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
   127da:	9a01      	ldr	r2, [sp, #4]
   127dc:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   127de:	3301      	adds	r3, #1
   127e0:	2b08      	cmp	r3, #8
   127e2:	d1e2      	bne.n	127aa <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
   127e4:	bb54      	cbnz	r4, 1283c <gpiote_event_handler+0xe0>
	if (port_event) {
   127e6:	b175      	cbz	r5, 12806 <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
   127e8:	4b32      	ldr	r3, [pc, #200]	; (128b4 <gpiote_event_handler+0x158>)
   127ea:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
   127ec:	681b      	ldr	r3, [r3, #0]
   127ee:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   127f0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   127f4:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   127f6:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
   127fa:	4302      	orrs	r2, r0
   127fc:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
   12800:	2401      	movs	r4, #1
	u32_t pin = 0U;
   12802:	2500      	movs	r5, #0
	while (level_pins) {
   12804:	bb8b      	cbnz	r3, 1286a <gpiote_event_handler+0x10e>
}
   12806:	b002      	add	sp, #8
   12808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1280c:	4203      	tst	r3, r0
   1280e:	d010      	beq.n	12832 <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12810:	f896 c004 	ldrb.w	ip, [r6, #4]
   12814:	f007 021f 	and.w	r2, r7, #31
   12818:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   1281c:	0092      	lsls	r2, r2, #2
   1281e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
   12822:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12826:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
   1282a:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1282e:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
   12832:	3701      	adds	r7, #1
		bit <<= 1;
   12834:	0040      	lsls	r0, r0, #1
   12836:	e7ae      	b.n	12796 <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   12838:	462c      	mov	r4, r5
   1283a:	e7b2      	b.n	127a2 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   1283c:	4f1d      	ldr	r7, [pc, #116]	; (128b4 <gpiote_event_handler+0x158>)
   1283e:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   12842:	f8d8 1000 	ldr.w	r1, [r8]
   12846:	2900      	cmp	r1, #0
   12848:	d0cd      	beq.n	127e6 <gpiote_event_handler+0x8a>
   1284a:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   1284c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   12850:	688a      	ldr	r2, [r1, #8]
   12852:	4023      	ands	r3, r4
   12854:	4213      	tst	r3, r2
   12856:	d003      	beq.n	12860 <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
   12858:	684b      	ldr	r3, [r1, #4]
   1285a:	4622      	mov	r2, r4
   1285c:	4638      	mov	r0, r7
   1285e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   12860:	2e00      	cmp	r6, #0
   12862:	d0c0      	beq.n	127e6 <gpiote_event_handler+0x8a>
   12864:	4631      	mov	r1, r6
   12866:	6836      	ldr	r6, [r6, #0]
   12868:	e7f0      	b.n	1284c <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
   1286a:	421c      	tst	r4, r3
   1286c:	d01c      	beq.n	128a8 <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1286e:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   12870:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12872:	f005 021f 	and.w	r2, r5, #31
   12876:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1287a:	6908      	ldr	r0, [r1, #16]
   1287c:	0092      	lsls	r2, r2, #2
   1287e:	4078      	eors	r0, r7
   12880:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
   12884:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   12886:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1288a:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1288e:	bf18      	it	ne
   12890:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12894:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12898:	bf08      	it	eq
   1289a:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
   1289e:	4338      	orrs	r0, r7
   128a0:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
   128a4:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   128a8:	3501      	adds	r5, #1
		bit <<= 1;
   128aa:	0064      	lsls	r4, r4, #1
   128ac:	e7aa      	b.n	12804 <gpiote_event_handler+0xa8>
   128ae:	bf00      	nop
   128b0:	4000617c 	.word	0x4000617c
   128b4:	2000d16c 	.word	0x2000d16c
   128b8:	40006000 	.word	0x40006000

000128bc <twi_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
   128bc:	b510      	push	{r4, lr}
   128be:	4604      	mov	r4, r0
   128c0:	2200      	movs	r2, #0
   128c2:	2101      	movs	r1, #1
   128c4:	2004      	movs	r0, #4
   128c6:	f7f0 fc2f 	bl	3128 <z_arm_irq_priority_set>
	return dev->config->config_info;
   128ca:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   128cc:	4a0f      	ldr	r2, [pc, #60]	; (1290c <twi_1_init+0x50>)
	return dev->config->config_info;
   128ce:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   128d0:	4623      	mov	r3, r4
   128d2:	f100 0108 	add.w	r1, r0, #8
   128d6:	f000 ffe7 	bl	138a8 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   128da:	4b0d      	ldr	r3, [pc, #52]	; (12910 <twi_1_init+0x54>)
   128dc:	4298      	cmp	r0, r3
   128de:	d012      	beq.n	12906 <twi_1_init+0x4a>
		LOG_ERR("Failed to initialize device: %s",
   128e0:	2301      	movs	r3, #1
   128e2:	f04f 0200 	mov.w	r2, #0
   128e6:	f363 0207 	bfi	r2, r3, #0, #8
   128ea:	490a      	ldr	r1, [pc, #40]	; (12914 <twi_1_init+0x58>)
   128ec:	4b0a      	ldr	r3, [pc, #40]	; (12918 <twi_1_init+0x5c>)
   128ee:	480b      	ldr	r0, [pc, #44]	; (1291c <twi_1_init+0x60>)
   128f0:	1a5b      	subs	r3, r3, r1
   128f2:	08db      	lsrs	r3, r3, #3
   128f4:	f363 128f 	bfi	r2, r3, #6, #10
   128f8:	6823      	ldr	r3, [r4, #0]
   128fa:	6819      	ldr	r1, [r3, #0]
   128fc:	f005 fe75 	bl	185ea <log_1>
		return -EBUSY;
   12900:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(1);
   12904:	bd10      	pop	{r4, pc}
	return 0;
   12906:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(1);
   12908:	e7fc      	b.n	12904 <twi_1_init+0x48>
   1290a:	bf00      	nop
   1290c:	00012a85 	.word	0x00012a85
   12910:	0bad0000 	.word	0x0bad0000
   12914:	0001e448 	.word	0x0001e448
   12918:	0001e538 	.word	0x0001e538
   1291c:	000213ba 	.word	0x000213ba

00012920 <i2c_nrfx_twi_configure>:
{
   12920:	b508      	push	{r3, lr}
	return dev->config->config_info;
   12922:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
   12924:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
   12926:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
   12928:	d413      	bmi.n	12952 <i2c_nrfx_twi_configure+0x32>
	switch (I2C_SPEED_GET(dev_config)) {
   1292a:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1292e:	2a01      	cmp	r2, #1
   12930:	d012      	beq.n	12958 <i2c_nrfx_twi_configure+0x38>
   12932:	2a02      	cmp	r2, #2
   12934:	d019      	beq.n	1296a <i2c_nrfx_twi_configure+0x4a>
		LOG_ERR("unsupported speed");
   12936:	2301      	movs	r3, #1
   12938:	f04f 0100 	mov.w	r1, #0
   1293c:	f363 0107 	bfi	r1, r3, #0, #8
   12940:	4a0c      	ldr	r2, [pc, #48]	; (12974 <i2c_nrfx_twi_configure+0x54>)
   12942:	4b0d      	ldr	r3, [pc, #52]	; (12978 <i2c_nrfx_twi_configure+0x58>)
   12944:	480d      	ldr	r0, [pc, #52]	; (1297c <i2c_nrfx_twi_configure+0x5c>)
   12946:	1a9b      	subs	r3, r3, r2
   12948:	08db      	lsrs	r3, r3, #3
   1294a:	f363 118f 	bfi	r1, r3, #6, #10
   1294e:	f005 fe3f 	bl	185d0 <log_0>
		return -EINVAL;
   12952:	f06f 0015 	mvn.w	r0, #21
   12956:	e007      	b.n	12968 <i2c_nrfx_twi_configure+0x48>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   12958:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1295a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1295e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   12962:	6883      	ldr	r3, [r0, #8]
	return 0;
   12964:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   12966:	6359      	str	r1, [r3, #52]	; 0x34
}
   12968:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1296a:	681b      	ldr	r3, [r3, #0]
   1296c:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   12970:	e7f5      	b.n	1295e <i2c_nrfx_twi_configure+0x3e>
   12972:	bf00      	nop
   12974:	0001e448 	.word	0x0001e448
   12978:	0001e538 	.word	0x0001e538
   1297c:	00021374 	.word	0x00021374

00012980 <i2c_nrfx_twi_transfer>:
{
   12980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12984:	4605      	mov	r5, r0
   12986:	b087      	sub	sp, #28
   12988:	460c      	mov	r4, r1
   1298a:	4617      	mov	r7, r2
   1298c:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1298e:	6880      	ldr	r0, [r0, #8]
	return z_impl_k_sem_take(sem, timeout);
   12990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12994:	f004 fd00 	bl	17398 <z_impl_k_sem_take>
	return dev->config->config_info;
   12998:	682b      	ldr	r3, [r5, #0]
		if (res != NRFX_SUCCESS) {
   1299a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 12a80 <i2c_nrfx_twi_transfer+0x100>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1299e:	6898      	ldr	r0, [r3, #8]
   129a0:	f000 ffc6 	bl	13930 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   129a4:	2600      	movs	r6, #0
   129a6:	42be      	cmp	r6, r7
   129a8:	d301      	bcc.n	129ae <i2c_nrfx_twi_transfer+0x2e>
	int ret = 0;
   129aa:	2400      	movs	r4, #0
   129ac:	e02e      	b.n	12a0c <i2c_nrfx_twi_transfer+0x8c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   129ae:	f894 b008 	ldrb.w	fp, [r4, #8]
   129b2:	f01b 0a08 	ands.w	sl, fp, #8
   129b6:	d158      	bne.n	12a6a <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
   129b8:	2212      	movs	r2, #18
   129ba:	4651      	mov	r1, sl
   129bc:	f10d 0006 	add.w	r0, sp, #6
   129c0:	f006 f965 	bl	18c8e <memset>
   129c4:	6862      	ldr	r2, [r4, #4]
   129c6:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   129c8:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   129cc:	6822      	ldr	r2, [r4, #0]
   129ce:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   129d2:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   129d6:	f88d 9005 	strb.w	r9, [sp, #5]
   129da:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   129dc:	d121      	bne.n	12a22 <i2c_nrfx_twi_transfer+0xa2>
			if ((i < (num_msgs - 1)) &&
   129de:	1e7a      	subs	r2, r7, #1
   129e0:	42b2      	cmp	r2, r6
   129e2:	d902      	bls.n	129ea <i2c_nrfx_twi_transfer+0x6a>
   129e4:	7d22      	ldrb	r2, [r4, #20]
   129e6:	0752      	lsls	r2, r2, #29
   129e8:	d51d      	bpl.n	12a26 <i2c_nrfx_twi_transfer+0xa6>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   129ea:	2b00      	cmp	r3, #0
   129ec:	d13d      	bne.n	12a6a <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   129ee:	2220      	movs	r2, #32
	return dev->config->config_info;
   129f0:	682b      	ldr	r3, [r5, #0]
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   129f2:	a901      	add	r1, sp, #4
   129f4:	6898      	ldr	r0, [r3, #8]
   129f6:	f000 ffc5 	bl	13984 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   129fa:	4540      	cmp	r0, r8
   129fc:	d015      	beq.n	12a2a <i2c_nrfx_twi_transfer+0xaa>
			if (res == NRFX_ERROR_BUSY) {
   129fe:	4b1c      	ldr	r3, [pc, #112]	; (12a70 <i2c_nrfx_twi_transfer+0xf0>)
				ret = -EIO;
   12a00:	4298      	cmp	r0, r3
   12a02:	bf0c      	ite	eq
   12a04:	f06f 040f 	mvneq.w	r4, #15
   12a08:	f06f 0404 	mvnne.w	r4, #4
	return dev->config->config_info;
   12a0c:	682b      	ldr	r3, [r5, #0]
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   12a0e:	6898      	ldr	r0, [r3, #8]
   12a10:	f000 ff9e 	bl	13950 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   12a14:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   12a16:	f004 fc93 	bl	17340 <z_impl_k_sem_give>
}
   12a1a:	4620      	mov	r0, r4
   12a1c:	b007      	add	sp, #28
   12a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t xfer_flags = 0;
   12a22:	4652      	mov	r2, sl
   12a24:	e7e4      	b.n	129f0 <i2c_nrfx_twi_transfer+0x70>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   12a26:	2240      	movs	r2, #64	; 0x40
   12a28:	e7e2      	b.n	129f0 <i2c_nrfx_twi_transfer+0x70>
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
   12a2a:	68a8      	ldr	r0, [r5, #8]
   12a2c:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   12a2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12a32:	f004 fcb1 	bl	17398 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
   12a36:	68ab      	ldr	r3, [r5, #8]
   12a38:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   12a3a:	4541      	cmp	r1, r8
   12a3c:	f104 040c 	add.w	r4, r4, #12
   12a40:	d011      	beq.n	12a66 <i2c_nrfx_twi_transfer+0xe6>
			LOG_ERR("Error %d occurred for message %d", res, i);
   12a42:	2201      	movs	r2, #1
   12a44:	f04f 0300 	mov.w	r3, #0
   12a48:	f362 0307 	bfi	r3, r2, #0, #8
   12a4c:	4809      	ldr	r0, [pc, #36]	; (12a74 <i2c_nrfx_twi_transfer+0xf4>)
   12a4e:	4a0a      	ldr	r2, [pc, #40]	; (12a78 <i2c_nrfx_twi_transfer+0xf8>)
   12a50:	1a12      	subs	r2, r2, r0
   12a52:	08d2      	lsrs	r2, r2, #3
   12a54:	f362 138f 	bfi	r3, r2, #6, #10
   12a58:	4808      	ldr	r0, [pc, #32]	; (12a7c <i2c_nrfx_twi_transfer+0xfc>)
   12a5a:	4632      	mov	r2, r6
   12a5c:	f005 fdd9 	bl	18612 <log_2>
			ret = -EIO;
   12a60:	f06f 0404 	mvn.w	r4, #4
			break;
   12a64:	e7d2      	b.n	12a0c <i2c_nrfx_twi_transfer+0x8c>
	for (size_t i = 0; i < num_msgs; i++) {
   12a66:	3601      	adds	r6, #1
   12a68:	e79d      	b.n	129a6 <i2c_nrfx_twi_transfer+0x26>
			ret = -ENOTSUP;
   12a6a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   12a6e:	e7cd      	b.n	12a0c <i2c_nrfx_twi_transfer+0x8c>
   12a70:	0bad000b 	.word	0x0bad000b
   12a74:	0001e448 	.word	0x0001e448
   12a78:	0001e538 	.word	0x0001e538
   12a7c:	00021386 	.word	0x00021386
   12a80:	0bad0000 	.word	0x0bad0000

00012a84 <event_handler>:
	switch (p_event->type) {
   12a84:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
   12a86:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
   12a88:	2a01      	cmp	r2, #1
   12a8a:	d00a      	beq.n	12aa2 <event_handler+0x1e>
   12a8c:	b11a      	cbz	r2, 12a96 <event_handler+0x12>
   12a8e:	2a02      	cmp	r2, #2
   12a90:	d009      	beq.n	12aa6 <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
   12a92:	4a06      	ldr	r2, [pc, #24]	; (12aac <event_handler+0x28>)
   12a94:	e000      	b.n	12a98 <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
   12a96:	4a06      	ldr	r2, [pc, #24]	; (12ab0 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   12a98:	631a      	str	r2, [r3, #48]	; 0x30
	z_impl_k_sem_give(sem);
   12a9a:	f103 0018 	add.w	r0, r3, #24
   12a9e:	f004 bc4f 	b.w	17340 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   12aa2:	4a04      	ldr	r2, [pc, #16]	; (12ab4 <event_handler+0x30>)
   12aa4:	e7f8      	b.n	12a98 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   12aa6:	4a04      	ldr	r2, [pc, #16]	; (12ab8 <event_handler+0x34>)
   12aa8:	e7f6      	b.n	12a98 <event_handler+0x14>
   12aaa:	bf00      	nop
   12aac:	0bad0001 	.word	0x0bad0001
   12ab0:	0bad0000 	.word	0x0bad0000
   12ab4:	0bae0001 	.word	0x0bae0001
   12ab8:	0bae0002 	.word	0x0bae0002

00012abc <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
   12abc:	b510      	push	{r4, lr}
   12abe:	4604      	mov	r4, r0
   12ac0:	2200      	movs	r2, #0
   12ac2:	2101      	movs	r1, #1
   12ac4:	2003      	movs	r0, #3
   12ac6:	f7f0 fb2f 	bl	3128 <z_arm_irq_priority_set>
	return dev->config->config_info;
   12aca:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
   12acc:	4a10      	ldr	r2, [pc, #64]	; (12b10 <spi_0_init+0x54>)
	return dev->config->config_info;
   12ace:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_spi_init(&get_dev_config(dev)->spi,
   12ad0:	4623      	mov	r3, r4
   12ad2:	f100 0108 	add.w	r1, r0, #8
   12ad6:	f000 fca7 	bl	13428 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   12ada:	4b0e      	ldr	r3, [pc, #56]	; (12b14 <spi_0_init+0x58>)
   12adc:	4298      	cmp	r0, r3
   12ade:	d012      	beq.n	12b06 <spi_0_init+0x4a>
		LOG_ERR("Failed to initialize device: %s",
   12ae0:	2301      	movs	r3, #1
   12ae2:	f04f 0200 	mov.w	r2, #0
   12ae6:	f363 0207 	bfi	r2, r3, #0, #8
   12aea:	490b      	ldr	r1, [pc, #44]	; (12b18 <spi_0_init+0x5c>)
   12aec:	4b0b      	ldr	r3, [pc, #44]	; (12b1c <spi_0_init+0x60>)
   12aee:	480c      	ldr	r0, [pc, #48]	; (12b20 <spi_0_init+0x64>)
   12af0:	1a5b      	subs	r3, r3, r1
   12af2:	08db      	lsrs	r3, r3, #3
   12af4:	f363 128f 	bfi	r2, r3, #6, #10
   12af8:	6823      	ldr	r3, [r4, #0]
   12afa:	6819      	ldr	r1, [r3, #0]
   12afc:	f005 fd75 	bl	185ea <log_1>
		return -EBUSY;
   12b00:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPI_DEVICE(0);
   12b04:	bd10      	pop	{r4, pc}
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
   12b06:	68a0      	ldr	r0, [r4, #8]
   12b08:	f008 fd45 	bl	1b596 <spi_context_unlock_unconditionally>
	return 0;
   12b0c:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(0);
   12b0e:	e7f9      	b.n	12b04 <spi_0_init+0x48>
   12b10:	00012ba5 	.word	0x00012ba5
   12b14:	0bad0000 	.word	0x0bad0000
   12b18:	0001e448 	.word	0x0001e448
   12b1c:	0001e578 	.word	0x0001e578
   12b20:	000213ba 	.word	0x000213ba

00012b24 <transfer_next_chunk>:
{
   12b24:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   12b26:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   12b28:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   12b2a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
{
   12b2c:	b085      	sub	sp, #20
   12b2e:	b982      	cbnz	r2, 12b52 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   12b30:	bb7b      	cbnz	r3, 12b92 <transfer_next_chunk+0x6e>
	int error = 0;
   12b32:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   12b34:	2200      	movs	r2, #0
   12b36:	4611      	mov	r1, r2
   12b38:	4628      	mov	r0, r5
   12b3a:	f008 fd02 	bl	1b542 <_spi_context_cs_control.isra.7>
	ctx->sync_status = status;
   12b3e:	636c      	str	r4, [r5, #52]	; 0x34
   12b40:	f105 001c 	add.w	r0, r5, #28
   12b44:	f004 fbfc 	bl	17340 <z_impl_k_sem_give>
	dev_data->busy = false;
   12b48:	2300      	movs	r3, #0
   12b4a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
   12b4e:	b005      	add	sp, #20
   12b50:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   12b52:	4611      	mov	r1, r2
   12b54:	b113      	cbz	r3, 12b5c <transfer_next_chunk+0x38>
		return ctx->tx_len;
	} else if (ctx->tx_len < ctx->rx_len) {
   12b56:	429a      	cmp	r2, r3
   12b58:	bf28      	it	cs
   12b5a:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   12b5c:	6cac      	ldr	r4, [r5, #72]	; 0x48
		dev_data->chunk_len = chunk_len;
   12b5e:	65a9      	str	r1, [r5, #88]	; 0x58
		xfer.p_tx_buffer = ctx->tx_buf;
   12b60:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   12b62:	b1c4      	cbz	r4, 12b96 <transfer_next_chunk+0x72>
   12b64:	2a00      	cmp	r2, #0
   12b66:	bf18      	it	ne
   12b68:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   12b6a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   12b6c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   12b6e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   12b70:	b19a      	cbz	r2, 12b9a <transfer_next_chunk+0x76>
   12b72:	2b00      	cmp	r3, #0
   12b74:	bf18      	it	ne
   12b76:	460b      	movne	r3, r1
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   12b78:	9303      	str	r3, [sp, #12]
	return dev->config->config_info;
   12b7a:	6803      	ldr	r3, [r0, #0]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   12b7c:	2200      	movs	r2, #0
   12b7e:	6898      	ldr	r0, [r3, #8]
   12b80:	4669      	mov	r1, sp
   12b82:	f000 fcf7 	bl	13574 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   12b86:	4b06      	ldr	r3, [pc, #24]	; (12ba0 <transfer_next_chunk+0x7c>)
   12b88:	4298      	cmp	r0, r3
   12b8a:	d0e0      	beq.n	12b4e <transfer_next_chunk+0x2a>
		error = -EIO;
   12b8c:	f06f 0404 	mvn.w	r4, #4
   12b90:	e7d0      	b.n	12b34 <transfer_next_chunk+0x10>
   12b92:	4619      	mov	r1, r3
   12b94:	e7e2      	b.n	12b5c <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   12b96:	4622      	mov	r2, r4
   12b98:	e7e7      	b.n	12b6a <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   12b9a:	4613      	mov	r3, r2
   12b9c:	e7ec      	b.n	12b78 <transfer_next_chunk+0x54>
   12b9e:	bf00      	nop
   12ba0:	0bad0000 	.word	0x0bad0000

00012ba4 <event_handler>:
{
   12ba4:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   12ba6:	7803      	ldrb	r3, [r0, #0]
{
   12ba8:	460d      	mov	r5, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   12baa:	2b00      	cmp	r3, #0
   12bac:	d157      	bne.n	12c5e <event_handler+0xba>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   12bae:	688c      	ldr	r4, [r1, #8]
	if (!ctx->tx_len) {
   12bb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   12bb2:	b183      	cbz	r3, 12bd6 <event_handler+0x32>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   12bb4:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->tx_len) {
   12bb6:	429a      	cmp	r2, r3
   12bb8:	d925      	bls.n	12c06 <event_handler+0x62>
		LOG_ERR("Update exceeds current buffer");
   12bba:	2301      	movs	r3, #1
   12bbc:	f04f 0100 	mov.w	r1, #0
   12bc0:	f363 0107 	bfi	r1, r3, #0, #8
   12bc4:	4a26      	ldr	r2, [pc, #152]	; (12c60 <event_handler+0xbc>)
   12bc6:	4b27      	ldr	r3, [pc, #156]	; (12c64 <event_handler+0xc0>)
   12bc8:	4827      	ldr	r0, [pc, #156]	; (12c68 <event_handler+0xc4>)
   12bca:	1a9b      	subs	r3, r3, r2
   12bcc:	08db      	lsrs	r3, r3, #3
   12bce:	f363 118f 	bfi	r1, r3, #6, #10
   12bd2:	f005 fcfd 	bl	185d0 <log_0>
	if (!ctx->rx_len) {
   12bd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12bd8:	b183      	cbz	r3, 12bfc <event_handler+0x58>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   12bda:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
   12bdc:	429a      	cmp	r2, r3
   12bde:	d928      	bls.n	12c32 <event_handler+0x8e>
		LOG_ERR("Update exceeds current buffer");
   12be0:	2301      	movs	r3, #1
   12be2:	f04f 0100 	mov.w	r1, #0
   12be6:	f363 0107 	bfi	r1, r3, #0, #8
   12bea:	4a1d      	ldr	r2, [pc, #116]	; (12c60 <event_handler+0xbc>)
   12bec:	4b1d      	ldr	r3, [pc, #116]	; (12c64 <event_handler+0xc0>)
   12bee:	481e      	ldr	r0, [pc, #120]	; (12c68 <event_handler+0xc4>)
   12bf0:	1a9b      	subs	r3, r3, r2
   12bf2:	08db      	lsrs	r3, r3, #3
   12bf4:	f363 118f 	bfi	r1, r3, #6, #10
   12bf8:	f005 fcea 	bl	185d0 <log_0>
		transfer_next_chunk(dev);
   12bfc:	4628      	mov	r0, r5
}
   12bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev);
   12c02:	f7ff bf8f 	b.w	12b24 <transfer_next_chunk>
	ctx->tx_len -= len;
   12c06:	1a9b      	subs	r3, r3, r2
   12c08:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (!ctx->tx_len) {
   12c0a:	b963      	cbnz	r3, 12c26 <event_handler+0x82>
		ctx->tx_count--;
   12c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12c0e:	3b01      	subs	r3, #1
   12c10:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (ctx->tx_count) {
   12c12:	b163      	cbz	r3, 12c2e <event_handler+0x8a>
			ctx->current_tx++;
   12c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12c16:	f103 0208 	add.w	r2, r3, #8
   12c1a:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   12c1c:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   12c1e:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   12c20:	64a2      	str	r2, [r4, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
   12c22:	64e3      	str	r3, [r4, #76]	; 0x4c
   12c24:	e7d7      	b.n	12bd6 <event_handler+0x32>
	} else if (ctx->tx_buf) {
   12c26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   12c28:	2b00      	cmp	r3, #0
   12c2a:	d0d4      	beq.n	12bd6 <event_handler+0x32>
		ctx->tx_buf += dfs * len;
   12c2c:	4413      	add	r3, r2
   12c2e:	64a3      	str	r3, [r4, #72]	; 0x48
   12c30:	e7d1      	b.n	12bd6 <event_handler+0x32>
	ctx->rx_len -= len;
   12c32:	1a9b      	subs	r3, r3, r2
   12c34:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   12c36:	b963      	cbnz	r3, 12c52 <event_handler+0xae>
		ctx->rx_count--;
   12c38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12c3a:	3b01      	subs	r3, #1
   12c3c:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->rx_count) {
   12c3e:	b163      	cbz	r3, 12c5a <event_handler+0xb6>
			ctx->current_rx++;
   12c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12c42:	f103 0208 	add.w	r2, r3, #8
   12c46:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   12c48:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   12c4a:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   12c4c:	6522      	str	r2, [r4, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
   12c4e:	6563      	str	r3, [r4, #84]	; 0x54
   12c50:	e7d4      	b.n	12bfc <event_handler+0x58>
	} else if (ctx->rx_buf) {
   12c52:	6d23      	ldr	r3, [r4, #80]	; 0x50
   12c54:	2b00      	cmp	r3, #0
   12c56:	d0d1      	beq.n	12bfc <event_handler+0x58>
		ctx->rx_buf += dfs * len;
   12c58:	4413      	add	r3, r2
   12c5a:	6523      	str	r3, [r4, #80]	; 0x50
   12c5c:	e7ce      	b.n	12bfc <event_handler+0x58>
}
   12c5e:	bd38      	pop	{r3, r4, r5, pc}
   12c60:	0001e448 	.word	0x0001e448
   12c64:	0001e578 	.word	0x0001e578
   12c68:	000213da 	.word	0x000213da

00012c6c <spi_nrfx_transceive>:
{
   12c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12c70:	4607      	mov	r7, r0
	k_sem_take(&ctx->lock, K_FOREVER);
   12c72:	6880      	ldr	r0, [r0, #8]
   12c74:	4688      	mov	r8, r1
   12c76:	4616      	mov	r6, r2
   12c78:	461d      	mov	r5, r3
   12c7a:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
   12c7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12c80:	f004 fb8a 	bl	17398 <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   12c84:	68bc      	ldr	r4, [r7, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
   12c86:	6823      	ldr	r3, [r4, #0]
   12c88:	4598      	cmp	r8, r3
   12c8a:	f000 80b0 	beq.w	12dee <spi_nrfx_transceive+0x182>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   12c8e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   12c92:	6838      	ldr	r0, [r7, #0]
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   12c94:	07d9      	lsls	r1, r3, #31
   12c96:	d516      	bpl.n	12cc6 <spi_nrfx_transceive+0x5a>
		LOG_ERR("Slave mode is not supported on %s",
   12c98:	2301      	movs	r3, #1
   12c9a:	f04f 0200 	mov.w	r2, #0
   12c9e:	f363 0207 	bfi	r2, r3, #0, #8
   12ca2:	4980      	ldr	r1, [pc, #512]	; (12ea4 <spi_nrfx_transceive+0x238>)
   12ca4:	4b80      	ldr	r3, [pc, #512]	; (12ea8 <spi_nrfx_transceive+0x23c>)
   12ca6:	1a5b      	subs	r3, r3, r1
   12ca8:	08db      	lsrs	r3, r3, #3
   12caa:	6801      	ldr	r1, [r0, #0]
   12cac:	487f      	ldr	r0, [pc, #508]	; (12eac <spi_nrfx_transceive+0x240>)
   12cae:	f363 128f 	bfi	r2, r3, #6, #10
   12cb2:	f005 fc9a 	bl	185ea <log_1>
		return -EINVAL;
   12cb6:	f06f 0515 	mvn.w	r5, #21
	z_impl_k_sem_give(sem);
   12cba:	1d20      	adds	r0, r4, #4
   12cbc:	f004 fb40 	bl	17340 <z_impl_k_sem_give>
}
   12cc0:	4628      	mov	r0, r5
   12cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   12cc6:	071a      	lsls	r2, r3, #28
   12cc8:	d50e      	bpl.n	12ce8 <spi_nrfx_transceive+0x7c>
		LOG_ERR("Loopback mode is not supported");
   12cca:	2301      	movs	r3, #1
   12ccc:	f04f 0100 	mov.w	r1, #0
   12cd0:	f363 0107 	bfi	r1, r3, #0, #8
   12cd4:	4a73      	ldr	r2, [pc, #460]	; (12ea4 <spi_nrfx_transceive+0x238>)
   12cd6:	4b74      	ldr	r3, [pc, #464]	; (12ea8 <spi_nrfx_transceive+0x23c>)
   12cd8:	4875      	ldr	r0, [pc, #468]	; (12eb0 <spi_nrfx_transceive+0x244>)
   12cda:	1a9b      	subs	r3, r3, r2
   12cdc:	08db      	lsrs	r3, r3, #3
   12cde:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Word sizes other than 8 bits"
   12ce2:	f005 fc75 	bl	185d0 <log_0>
   12ce6:	e7e6      	b.n	12cb6 <spi_nrfx_transceive+0x4a>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   12ce8:	f413 51c0 	ands.w	r1, r3, #6144	; 0x1800
   12cec:	d00c      	beq.n	12d08 <spi_nrfx_transceive+0x9c>
		LOG_ERR("Only single line mode is supported");
   12cee:	2301      	movs	r3, #1
   12cf0:	f04f 0100 	mov.w	r1, #0
   12cf4:	f363 0107 	bfi	r1, r3, #0, #8
   12cf8:	4a6a      	ldr	r2, [pc, #424]	; (12ea4 <spi_nrfx_transceive+0x238>)
   12cfa:	4b6b      	ldr	r3, [pc, #428]	; (12ea8 <spi_nrfx_transceive+0x23c>)
   12cfc:	486d      	ldr	r0, [pc, #436]	; (12eb4 <spi_nrfx_transceive+0x248>)
   12cfe:	1a9b      	subs	r3, r3, r2
   12d00:	08db      	lsrs	r3, r3, #3
   12d02:	f363 118f 	bfi	r1, r3, #6, #10
   12d06:	e7ec      	b.n	12ce2 <spi_nrfx_transceive+0x76>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   12d08:	f3c3 1345 	ubfx	r3, r3, #5, #6
   12d0c:	2b08      	cmp	r3, #8
   12d0e:	d00c      	beq.n	12d2a <spi_nrfx_transceive+0xbe>
		LOG_ERR("Word sizes other than 8 bits"
   12d10:	2301      	movs	r3, #1
   12d12:	f04f 0100 	mov.w	r1, #0
   12d16:	f363 0107 	bfi	r1, r3, #0, #8
   12d1a:	4a62      	ldr	r2, [pc, #392]	; (12ea4 <spi_nrfx_transceive+0x238>)
   12d1c:	4b62      	ldr	r3, [pc, #392]	; (12ea8 <spi_nrfx_transceive+0x23c>)
   12d1e:	4866      	ldr	r0, [pc, #408]	; (12eb8 <spi_nrfx_transceive+0x24c>)
   12d20:	1a9b      	subs	r3, r3, r2
   12d22:	08db      	lsrs	r3, r3, #3
   12d24:	f363 118f 	bfi	r1, r3, #6, #10
   12d28:	e7db      	b.n	12ce2 <spi_nrfx_transceive+0x76>
	if (spi_cfg->frequency < 125000) {
   12d2a:	f8d8 2000 	ldr.w	r2, [r8]
   12d2e:	4b63      	ldr	r3, [pc, #396]	; (12ebc <spi_nrfx_transceive+0x250>)
   12d30:	429a      	cmp	r2, r3
   12d32:	d80c      	bhi.n	12d4e <spi_nrfx_transceive+0xe2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   12d34:	2301      	movs	r3, #1
   12d36:	f04f 0100 	mov.w	r1, #0
   12d3a:	f363 0107 	bfi	r1, r3, #0, #8
   12d3e:	4a59      	ldr	r2, [pc, #356]	; (12ea4 <spi_nrfx_transceive+0x238>)
   12d40:	4b59      	ldr	r3, [pc, #356]	; (12ea8 <spi_nrfx_transceive+0x23c>)
   12d42:	485f      	ldr	r0, [pc, #380]	; (12ec0 <spi_nrfx_transceive+0x254>)
   12d44:	1a9b      	subs	r3, r3, r2
   12d46:	08db      	lsrs	r3, r3, #3
   12d48:	f363 118f 	bfi	r1, r3, #6, #10
   12d4c:	e7c9      	b.n	12ce2 <spi_nrfx_transceive+0x76>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   12d4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return dev->config->config_info;
   12d52:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ctx->config = spi_cfg;
   12d56:	f8c4 8000 	str.w	r8, [r4]
   12d5a:	2b00      	cmp	r3, #0
   12d5c:	d06f      	beq.n	12e3e <spi_nrfx_transceive+0x1d2>
   12d5e:	6818      	ldr	r0, [r3, #0]
   12d60:	2800      	cmp	r0, #0
   12d62:	d06c      	beq.n	12e3e <spi_nrfx_transceive+0x1d2>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   12d64:	685a      	ldr	r2, [r3, #4]
   12d66:	6843      	ldr	r3, [r0, #4]
   12d68:	f8d3 a000 	ldr.w	sl, [r3]
   12d6c:	2301      	movs	r3, #1
   12d6e:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
   12d70:	6822      	ldr	r2, [r4, #0]
   12d72:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   12d74:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
   12d78:	43d2      	mvns	r2, r2
   12d7a:	0fd2      	lsrs	r2, r2, #31
   12d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
   12d80:	f008 fbd6 	bl	1b530 <gpio_pin_write>
	nrf_spi_configure(spi->p_reg,
   12d84:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   12d88:	f8d9 1000 	ldr.w	r1, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   12d8c:	0798      	lsls	r0, r3, #30
   12d8e:	f003 0204 	and.w	r2, r3, #4
   12d92:	d563      	bpl.n	12e5c <spi_nrfx_transceive+0x1f0>
			return NRF_SPI_MODE_2;
   12d94:	2a00      	cmp	r2, #0
   12d96:	bf14      	ite	ne
   12d98:	2203      	movne	r2, #3
   12d9a:	2202      	moveq	r2, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   12d9c:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
   12d9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
   12da2:	d05f      	beq.n	12e64 <spi_nrfx_transceive+0x1f8>
   12da4:	2a03      	cmp	r2, #3
   12da6:	d060      	beq.n	12e6a <spi_nrfx_transceive+0x1fe>
   12da8:	2a01      	cmp	r2, #1
   12daa:	d101      	bne.n	12db0 <spi_nrfx_transceive+0x144>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   12dac:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   12db0:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
   12db4:	4a43      	ldr	r2, [pc, #268]	; (12ec4 <spi_nrfx_transceive+0x258>)
	nrf_spi_frequency_set(spi->p_reg,
   12db6:	f8d8 3000 	ldr.w	r3, [r8]
	if (frequency < 250000) {
   12dba:	4293      	cmp	r3, r2
   12dbc:	d958      	bls.n	12e70 <spi_nrfx_transceive+0x204>
	} else if (frequency < 500000) {
   12dbe:	4a42      	ldr	r2, [pc, #264]	; (12ec8 <spi_nrfx_transceive+0x25c>)
   12dc0:	4293      	cmp	r3, r2
   12dc2:	d958      	bls.n	12e76 <spi_nrfx_transceive+0x20a>
	} else if (frequency < 1000000) {
   12dc4:	4a41      	ldr	r2, [pc, #260]	; (12ecc <spi_nrfx_transceive+0x260>)
   12dc6:	4293      	cmp	r3, r2
   12dc8:	d958      	bls.n	12e7c <spi_nrfx_transceive+0x210>
	} else if (frequency < 2000000) {
   12dca:	4a41      	ldr	r2, [pc, #260]	; (12ed0 <spi_nrfx_transceive+0x264>)
   12dcc:	4293      	cmp	r3, r2
   12dce:	d958      	bls.n	12e82 <spi_nrfx_transceive+0x216>
	} else if (frequency < 4000000) {
   12dd0:	4a40      	ldr	r2, [pc, #256]	; (12ed4 <spi_nrfx_transceive+0x268>)
   12dd2:	4293      	cmp	r3, r2
   12dd4:	d958      	bls.n	12e88 <spi_nrfx_transceive+0x21c>
		return NRF_SPI_FREQ_8M;
   12dd6:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
   12dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
   12dde:	4293      	cmp	r3, r2
   12de0:	bf94      	ite	ls
   12de2:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
   12de6:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   12dea:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
   12dee:	2301      	movs	r3, #1
   12df0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	if (tx_bufs) {
   12df4:	2e00      	cmp	r6, #0
   12df6:	d04a      	beq.n	12e8e <spi_nrfx_transceive+0x222>
		ctx->current_tx = tx_bufs->buffers;
   12df8:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
   12dfa:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
   12dfc:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
   12dfe:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   12e00:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   12e02:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   12e04:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
   12e06:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (rx_bufs) {
   12e08:	2d00      	cmp	r5, #0
   12e0a:	d045      	beq.n	12e98 <spi_nrfx_transceive+0x22c>
		ctx->current_rx = rx_bufs->buffers;
   12e0c:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
   12e0e:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
   12e10:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
   12e12:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   12e14:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   12e16:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   12e18:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
   12e1a:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->sync_status = 0;
   12e1c:	2200      	movs	r2, #0
   12e1e:	6362      	str	r2, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
   12e20:	2101      	movs	r1, #1
   12e22:	4620      	mov	r0, r4
   12e24:	f008 fb8d 	bl	1b542 <_spi_context_cs_control.isra.7>
		transfer_next_chunk(dev);
   12e28:	4638      	mov	r0, r7
   12e2a:	f7ff fe7b 	bl	12b24 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   12e2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12e32:	f104 001c 	add.w	r0, r4, #28
   12e36:	f004 faaf 	bl	17398 <z_impl_k_sem_take>
	status = ctx->sync_status;
   12e3a:	6b65      	ldr	r5, [r4, #52]	; 0x34
	return status;
   12e3c:	e73d      	b.n	12cba <spi_nrfx_transceive+0x4e>
		LOG_INF("CS control inhibited (no GPIO device)");
   12e3e:	2303      	movs	r3, #3
   12e40:	f04f 0100 	mov.w	r1, #0
   12e44:	f363 0107 	bfi	r1, r3, #0, #8
   12e48:	4a16      	ldr	r2, [pc, #88]	; (12ea4 <spi_nrfx_transceive+0x238>)
   12e4a:	4b17      	ldr	r3, [pc, #92]	; (12ea8 <spi_nrfx_transceive+0x23c>)
   12e4c:	4822      	ldr	r0, [pc, #136]	; (12ed8 <spi_nrfx_transceive+0x26c>)
   12e4e:	1a9b      	subs	r3, r3, r2
   12e50:	08db      	lsrs	r3, r3, #3
   12e52:	f363 118f 	bfi	r1, r3, #6, #10
   12e56:	f005 fbbb 	bl	185d0 <log_0>
   12e5a:	e793      	b.n	12d84 <spi_nrfx_transceive+0x118>
			return NRF_SPI_MODE_0;
   12e5c:	3200      	adds	r2, #0
   12e5e:	bf18      	it	ne
   12e60:	2201      	movne	r2, #1
   12e62:	e79b      	b.n	12d9c <spi_nrfx_transceive+0x130>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   12e64:	f043 0304 	orr.w	r3, r3, #4
        break;
   12e68:	e7a2      	b.n	12db0 <spi_nrfx_transceive+0x144>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   12e6a:	f043 0306 	orr.w	r3, r3, #6
        break;
   12e6e:	e79f      	b.n	12db0 <spi_nrfx_transceive+0x144>
		return NRF_SPI_FREQ_125K;
   12e70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   12e74:	e7b9      	b.n	12dea <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_250K;
   12e76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12e7a:	e7b6      	b.n	12dea <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_500K;
   12e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   12e80:	e7b3      	b.n	12dea <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_1M;
   12e82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12e86:	e7b0      	b.n	12dea <spi_nrfx_transceive+0x17e>
		return NRF_SPI_FREQ_2M;
   12e88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   12e8c:	e7ad      	b.n	12dea <spi_nrfx_transceive+0x17e>
		ctx->tx_count = 0;
   12e8e:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
		ctx->tx_len = 0;
   12e92:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
   12e96:	e7b7      	b.n	12e08 <spi_nrfx_transceive+0x19c>
		ctx->rx_count = 0;
   12e98:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
		ctx->rx_len = 0;
   12e9c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
   12ea0:	e7bc      	b.n	12e1c <spi_nrfx_transceive+0x1b0>
   12ea2:	bf00      	nop
   12ea4:	0001e448 	.word	0x0001e448
   12ea8:	0001e578 	.word	0x0001e578
   12eac:	000213f8 	.word	0x000213f8
   12eb0:	0002141a 	.word	0x0002141a
   12eb4:	00021439 	.word	0x00021439
   12eb8:	0002145c 	.word	0x0002145c
   12ebc:	0001e847 	.word	0x0001e847
   12ec0:	0002148b 	.word	0x0002148b
   12ec4:	0003d08f 	.word	0x0003d08f
   12ec8:	0007a11f 	.word	0x0007a11f
   12ecc:	000f423f 	.word	0x000f423f
   12ed0:	001e847f 	.word	0x001e847f
   12ed4:	003d08ff 	.word	0x003d08ff
   12ed8:	000214bc 	.word	0x000214bc

00012edc <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   12edc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   12ede:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   12ee0:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   12ee2:	f04f 0420 	mov.w	r4, #32
   12ee6:	f3ef 8e11 	mrs	lr, BASEPRI
   12eea:	f384 8811 	msr	BASEPRI, r4
   12eee:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   12ef2:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   12ef4:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   12ef8:	1b9b      	subs	r3, r3, r6
   12efa:	403b      	ands	r3, r7
	if (available < len) {
   12efc:	429a      	cmp	r2, r3
		len = available;
   12efe:	bf88      	it	hi
   12f00:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   12f02:	18b4      	adds	r4, r6, r2
   12f04:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   12f06:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   12f08:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   12f0a:	f38e 8811 	msr	BASEPRI, lr
   12f0e:	f3bf 8f6f 	isb	sy
   12f12:	440a      	add	r2, r1
	u8_t *dst   = buf;
   12f14:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   12f16:	42a2      	cmp	r2, r4
   12f18:	d11a      	bne.n	12f50 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   12f1a:	4566      	cmp	r6, ip
   12f1c:	d10d      	bne.n	12f3a <rng_pool_get+0x5e>
	__asm__ volatile(
   12f1e:	f04f 0520 	mov.w	r5, #32
   12f22:	f3ef 8211 	mrs	r2, BASEPRI
   12f26:	f385 8811 	msr	BASEPRI, r5
   12f2a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   12f2e:	7805      	ldrb	r5, [r0, #0]
   12f30:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   12f32:	f382 8811 	msr	BASEPRI, r2
   12f36:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   12f3a:	1a64      	subs	r4, r4, r1
   12f3c:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   12f3e:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   12f40:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   12f42:	42a1      	cmp	r1, r4
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   12f44:	bf22      	ittt	cs
   12f46:	4b07      	ldrcs	r3, [pc, #28]	; (12f64 <rng_pool_get+0x88>)
   12f48:	2101      	movcs	r1, #1
   12f4a:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   12f4c:	4610      	mov	r0, r2
   12f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   12f50:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   12f54:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   12f56:	f89e e005 	ldrb.w	lr, [lr, #5]
   12f5a:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   12f5e:	403d      	ands	r5, r7
   12f60:	e7d9      	b.n	12f16 <rng_pool_get+0x3a>
   12f62:	bf00      	nop
   12f64:	4000d000 	.word	0x4000d000

00012f68 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   12f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12f6c:	4d11      	ldr	r5, [pc, #68]	; (12fb4 <entropy_nrf5_get_entropy+0x4c>)
   12f6e:	460e      	mov	r6, r1
   12f70:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   12f72:	f105 0845 	add.w	r8, r5, #69	; 0x45
   12f76:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   12f7a:	b914      	cbnz	r4, 12f82 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   12f7c:	4620      	mov	r0, r4
   12f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12f82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12f86:	4628      	mov	r0, r5
   12f88:	f004 fa06 	bl	17398 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   12f8c:	4622      	mov	r2, r4
   12f8e:	4631      	mov	r1, r6
   12f90:	4640      	mov	r0, r8
   12f92:	f7ff ffa3 	bl	12edc <rng_pool_get>
   12f96:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   12f98:	4628      	mov	r0, r5
   12f9a:	f004 f9d1 	bl	17340 <z_impl_k_sem_give>
		if (bytes == 0U) {
   12f9e:	b92f      	cbnz	r7, 12fac <entropy_nrf5_get_entropy+0x44>
	return z_impl_k_sem_take(sem, timeout);
   12fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12fa4:	4648      	mov	r0, r9
   12fa6:	f004 f9f7 	bl	17398 <z_impl_k_sem_take>
   12faa:	e7e6      	b.n	12f7a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   12fac:	1be4      	subs	r4, r4, r7
   12fae:	b2a4      	uxth	r4, r4
		buf += bytes;
   12fb0:	443e      	add	r6, r7
   12fb2:	e7e2      	b.n	12f7a <entropy_nrf5_get_entropy+0x12>
   12fb4:	200015b0 	.word	0x200015b0

00012fb8 <random_byte_get>:
{
   12fb8:	b082      	sub	sp, #8
	__asm__ volatile(
   12fba:	f04f 0320 	mov.w	r3, #32
   12fbe:	f3ef 8211 	mrs	r2, BASEPRI
   12fc2:	f383 8811 	msr	BASEPRI, r3
   12fc6:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   12fca:	4b0a      	ldr	r3, [pc, #40]	; (12ff4 <random_byte_get+0x3c>)
   12fcc:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   12fce:	b171      	cbz	r1, 12fee <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   12fd0:	4909      	ldr	r1, [pc, #36]	; (12ff8 <random_byte_get+0x40>)
   12fd2:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   12fd6:	2100      	movs	r1, #0
   12fd8:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   12fda:	681b      	ldr	r3, [r3, #0]
   12fdc:	9301      	str	r3, [sp, #4]
    (void)dummy;
   12fde:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   12fe0:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   12fe2:	f382 8811 	msr	BASEPRI, r2
   12fe6:	f3bf 8f6f 	isb	sy
}
   12fea:	b002      	add	sp, #8
   12fec:	4770      	bx	lr
	int retval = -EAGAIN;
   12fee:	f06f 000a 	mvn.w	r0, #10
   12ff2:	e7f6      	b.n	12fe2 <random_byte_get+0x2a>
   12ff4:	4000d100 	.word	0x4000d100
   12ff8:	4000d000 	.word	0x4000d000

00012ffc <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   12ffc:	07db      	lsls	r3, r3, #31
{
   12ffe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13002:	4688      	mov	r8, r1
   13004:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   13006:	d405      	bmi.n	13014 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   13008:	4820      	ldr	r0, [pc, #128]	; (1308c <entropy_nrf5_get_entropy_isr+0x90>)
   1300a:	f7ff ff67 	bl	12edc <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   1300e:	b002      	add	sp, #8
   13010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   13014:	2a00      	cmp	r2, #0
   13016:	d032      	beq.n	1307e <entropy_nrf5_get_entropy_isr+0x82>
	__asm__ volatile(
   13018:	f04f 0320 	mov.w	r3, #32
   1301c:	f3ef 8511 	mrs	r5, BASEPRI
   13020:	f383 8811 	msr	BASEPRI, r3
   13024:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(RNG_IRQn);
   13028:	200d      	movs	r0, #13
   1302a:	f7f0 f86f 	bl	310c <arch_irq_is_enabled>
   1302e:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   13030:	200d      	movs	r0, #13
   13032:	f7f0 f857 	bl	30e4 <arch_irq_disable>
	__asm__ volatile(
   13036:	f385 8811 	msr	BASEPRI, r5
   1303a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1303e:	4e14      	ldr	r6, [pc, #80]	; (13090 <entropy_nrf5_get_entropy_isr+0x94>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13040:	f8df 9054 	ldr.w	r9, [pc, #84]	; 13098 <entropy_nrf5_get_entropy_isr+0x9c>
   13044:	2200      	movs	r2, #0
   13046:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   13048:	6832      	ldr	r2, [r6, #0]
   1304a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1304c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1304e:	4a11      	ldr	r2, [pc, #68]	; (13094 <entropy_nrf5_get_entropy_isr+0x98>)
   13050:	2101      	movs	r1, #1
   13052:	6011      	str	r1, [r2, #0]
   13054:	4625      	mov	r5, r4
   13056:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1305a:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1305c:	b18b      	cbz	r3, 13082 <entropy_nrf5_get_entropy_isr+0x86>
			byte = random_byte_get();
   1305e:	f7ff ffab 	bl	12fb8 <random_byte_get>
			if (byte < 0) {
   13062:	2800      	cmp	r0, #0
   13064:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   13068:	dbf7      	blt.n	1305a <entropy_nrf5_get_entropy_isr+0x5e>
   1306a:	3d01      	subs	r5, #1
   1306c:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1306e:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   13072:	2d00      	cmp	r5, #0
   13074:	d1f1      	bne.n	1305a <entropy_nrf5_get_entropy_isr+0x5e>
		if (irq_enabled) {
   13076:	b117      	cbz	r7, 1307e <entropy_nrf5_get_entropy_isr+0x82>
			irq_enable(RNG_IRQn);
   13078:	200d      	movs	r0, #13
   1307a:	f7f0 f823 	bl	30c4 <arch_irq_enable>
	return cnt;
   1307e:	4620      	mov	r0, r4
   13080:	e7c5      	b.n	1300e <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   13082:	bf20      	wfe
				__SEV();
   13084:	bf40      	sev
				__WFE();
   13086:	bf20      	wfe
   13088:	e7e7      	b.n	1305a <entropy_nrf5_get_entropy_isr+0x5e>
   1308a:	bf00      	nop
   1308c:	200015e0 	.word	0x200015e0
   13090:	4000d100 	.word	0x4000d100
   13094:	4000d000 	.word	0x4000d000
   13098:	e000e100 	.word	0xe000e100

0001309c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1309c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   1309e:	4c1b      	ldr	r4, [pc, #108]	; (1310c <entropy_nrf5_init+0x70>)
   130a0:	2201      	movs	r2, #1
   130a2:	4611      	mov	r1, r2
   130a4:	4620      	mov	r0, r4
   130a6:	f00a fe9c 	bl	1dde2 <z_impl_k_sem_init>
   130aa:	2201      	movs	r2, #1
   130ac:	f104 0018 	add.w	r0, r4, #24
   130b0:	2100      	movs	r1, #0
   130b2:	f00a fe96 	bl	1dde2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   130b6:	f240 4307 	movw	r3, #1031	; 0x407
   130ba:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   130be:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   130c2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   130c4:	230c      	movs	r3, #12
   130c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   130ca:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   130cc:	4b10      	ldr	r3, [pc, #64]	; (13110 <entropy_nrf5_init+0x74>)
   130ce:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   130d2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   130d6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   130da:	f042 0201 	orr.w	r2, r2, #1
   130de:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   130e2:	4a0c      	ldr	r2, [pc, #48]	; (13114 <entropy_nrf5_init+0x78>)
   130e4:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   130e6:	6812      	ldr	r2, [r2, #0]
   130e8:	9201      	str	r2, [sp, #4]
    (void)dummy;
   130ea:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   130ec:	2201      	movs	r2, #1
   130ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   130f2:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   130f4:	601a      	str	r2, [r3, #0]
   130f6:	200d      	movs	r0, #13
   130f8:	462a      	mov	r2, r5
   130fa:	f7f0 f815 	bl	3128 <z_arm_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   130fe:	200d      	movs	r0, #13
   13100:	f7ef ffe0 	bl	30c4 <arch_irq_enable>

	return 0;
}
   13104:	4628      	mov	r0, r5
   13106:	b003      	add	sp, #12
   13108:	bd30      	pop	{r4, r5, pc}
   1310a:	bf00      	nop
   1310c:	200015b0 	.word	0x200015b0
   13110:	4000d000 	.word	0x4000d000
   13114:	4000d100 	.word	0x4000d100

00013118 <isr>:
{
   13118:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1311a:	f7ff ff4d 	bl	12fb8 <random_byte_get>
	if (byte < 0) {
   1311e:	2800      	cmp	r0, #0
   13120:	db20      	blt.n	13164 <isr+0x4c>
	u8_t last  = rngp->last;
   13122:	4b17      	ldr	r3, [pc, #92]	; (13180 <isr+0x68>)
   13124:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   13128:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   1312c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   13130:	1a51      	subs	r1, r2, r1
   13132:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   13136:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   13138:	d10d      	bne.n	13156 <isr+0x3e>
	u8_t last  = rngp->last;
   1313a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1313e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   13142:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   13146:	1a51      	subs	r1, r2, r1
   13148:	ea34 0101 	bics.w	r1, r4, r1
   1314c:	d10b      	bne.n	13166 <isr+0x4e>
   1314e:	4b0d      	ldr	r3, [pc, #52]	; (13184 <isr+0x6c>)
   13150:	2201      	movs	r2, #1
   13152:	601a      	str	r2, [r3, #0]
   13154:	e00e      	b.n	13174 <isr+0x5c>
	rngp->buffer[last] = byte;
   13156:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   13158:	3201      	adds	r2, #1
   1315a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1315c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   13160:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   13164:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   13166:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   13168:	3201      	adds	r2, #1
   1316a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1316c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   13170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   13174:	4804      	ldr	r0, [pc, #16]	; (13188 <isr+0x70>)
}
   13176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1317a:	f004 b8e1 	b.w	17340 <z_impl_k_sem_give>
   1317e:	bf00      	nop
   13180:	200015b0 	.word	0x200015b0
   13184:	4000d004 	.word	0x4000d004
   13188:	200015c8 	.word	0x200015c8

0001318c <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1318c:	4b04      	ldr	r3, [pc, #16]	; (131a0 <errata_108+0x14>)
   1318e:	6818      	ldr	r0, [r3, #0]
   13190:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13192:	bf04      	itt	eq
   13194:	4b03      	ldreq	r3, [pc, #12]	; (131a4 <errata_108+0x18>)
   13196:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
   13198:	1f83      	subs	r3, r0, #6
   1319a:	4258      	negs	r0, r3
   1319c:	4158      	adcs	r0, r3
   1319e:	4770      	bx	lr
   131a0:	10000130 	.word	0x10000130
   131a4:	f0000fe0 	.word	0xf0000fe0

000131a8 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   131a8:	4b07      	ldr	r3, [pc, #28]	; (131c8 <errata_16+0x20>)
   131aa:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
   131ac:	2b06      	cmp	r3, #6
   131ae:	d109      	bne.n	131c4 <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   131b0:	4b06      	ldr	r3, [pc, #24]	; (131cc <errata_16+0x24>)
   131b2:	681b      	ldr	r3, [r3, #0]
   131b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
   131b8:	3b03      	subs	r3, #3
   131ba:	2b03      	cmp	r3, #3
   131bc:	d802      	bhi.n	131c4 <errata_16+0x1c>
   131be:	4a04      	ldr	r2, [pc, #16]	; (131d0 <errata_16+0x28>)
   131c0:	5cd0      	ldrb	r0, [r2, r3]
   131c2:	4770      	bx	lr
            }
        break;

    }

    return false;
   131c4:	2000      	movs	r0, #0
}
   131c6:	4770      	bx	lr
   131c8:	f0000fe0 	.word	0xf0000fe0
   131cc:	f0000fe8 	.word	0xf0000fe8
   131d0:	000214ef 	.word	0x000214ef

000131d4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   131d4:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
   131d6:	f7ff ffd9 	bl	1318c <errata_108>
   131da:	b128      	cbz	r0, 131e8 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   131dc:	4b7c      	ldr	r3, [pc, #496]	; (133d0 <SystemInit+0x1fc>)
   131de:	4a7d      	ldr	r2, [pc, #500]	; (133d4 <SystemInit+0x200>)
   131e0:	681b      	ldr	r3, [r3, #0]
   131e2:	f3c3 2304 	ubfx	r3, r3, #8, #5
   131e6:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
   131e8:	f7ff ffde 	bl	131a8 <errata_16>
   131ec:	b110      	cbz	r0, 131f4 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   131ee:	4b7a      	ldr	r3, [pc, #488]	; (133d8 <SystemInit+0x204>)
   131f0:	4a7a      	ldr	r2, [pc, #488]	; (133dc <SystemInit+0x208>)
   131f2:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
   131f4:	f7ff ffca 	bl	1318c <errata_108>
   131f8:	b128      	cbz	r0, 13206 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   131fa:	4b79      	ldr	r3, [pc, #484]	; (133e0 <SystemInit+0x20c>)
   131fc:	4a79      	ldr	r2, [pc, #484]	; (133e4 <SystemInit+0x210>)
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	f3c3 3342 	ubfx	r3, r3, #13, #3
   13204:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
   13206:	f7ff ffcf 	bl	131a8 <errata_16>
   1320a:	b120      	cbz	r0, 13216 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1320c:	4a76      	ldr	r2, [pc, #472]	; (133e8 <SystemInit+0x214>)
   1320e:	68d3      	ldr	r3, [r2, #12]
   13210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   13214:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
   13216:	f7ff ffb9 	bl	1318c <errata_108>
   1321a:	b140      	cbz	r0, 1322e <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
   1321c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13220:	2200      	movs	r2, #0
   13222:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   13226:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1322a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
   1322e:	f7ff ffbb 	bl	131a8 <errata_16>
   13232:	b110      	cbz	r0, 1323a <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
   13234:	4b6d      	ldr	r3, [pc, #436]	; (133ec <SystemInit+0x218>)
   13236:	2203      	movs	r2, #3
   13238:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
   1323a:	f7ff ffb5 	bl	131a8 <errata_16>
   1323e:	b140      	cbz	r0, 13252 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
   13240:	4b6b      	ldr	r3, [pc, #428]	; (133f0 <SystemInit+0x21c>)
   13242:	2205      	movs	r2, #5
   13244:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
   13246:	2201      	movs	r2, #1
   13248:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
   1324a:	2200      	movs	r2, #0
   1324c:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1324e:	223f      	movs	r2, #63	; 0x3f
   13250:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13252:	4b68      	ldr	r3, [pc, #416]	; (133f4 <SystemInit+0x220>)
   13254:	681a      	ldr	r2, [r3, #0]
   13256:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13258:	bf0b      	itete	eq
   1325a:	4b67      	ldreq	r3, [pc, #412]	; (133f8 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
   1325c:	4b67      	ldrne	r3, [pc, #412]	; (133fc <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1325e:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
   13260:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13262:	bf02      	ittt	eq
   13264:	3308      	addeq	r3, #8
   13266:	681b      	ldreq	r3, [r3, #0]
   13268:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
   1326c:	2a06      	cmp	r2, #6
   1326e:	d14d      	bne.n	1330c <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
   13270:	3b03      	subs	r3, #3
   13272:	2b03      	cmp	r3, #3
   13274:	d803      	bhi.n	1327e <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
   13276:	4a62      	ldr	r2, [pc, #392]	; (13400 <SystemInit+0x22c>)
   13278:	5cd3      	ldrb	r3, [r2, r3]
   1327a:	2b00      	cmp	r3, #0
   1327c:	d046      	beq.n	1330c <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13282:	4b60      	ldr	r3, [pc, #384]	; (13404 <SystemInit+0x230>)
   13284:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   13288:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1328c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   13290:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   13294:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   13298:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1329c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   132a0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   132a4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   132a8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   132ac:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   132b0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   132b4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   132b8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   132bc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   132c0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   132c4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   132c8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   132cc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   132d0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   132d4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   132d8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   132dc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   132e0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   132e4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   132e8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   132ec:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   132f0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   132f4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   132f8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   132fc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   13300:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   13304:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   13308:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
   1330c:	f7ff ff3e 	bl	1318c <errata_108>
   13310:	b128      	cbz	r0, 1331e <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   13312:	4b3d      	ldr	r3, [pc, #244]	; (13408 <SystemInit+0x234>)
   13314:	4a3d      	ldr	r2, [pc, #244]	; (1340c <SystemInit+0x238>)
   13316:	681b      	ldr	r3, [r3, #0]
   13318:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1331c:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
   1331e:	f7ff ff35 	bl	1318c <errata_108>
   13322:	b148      	cbz	r0, 13338 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   13324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13328:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1332c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1332e:	bf44      	itt	mi
   13330:	f06f 0201 	mvnmi.w	r2, #1
   13334:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
   13338:	4b2e      	ldr	r3, [pc, #184]	; (133f4 <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
   1333a:	681b      	ldr	r3, [r3, #0]
   1333c:	2b06      	cmp	r3, #6
   1333e:	d109      	bne.n	13354 <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
   13340:	4b2e      	ldr	r3, [pc, #184]	; (133fc <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
   13342:	681b      	ldr	r3, [r3, #0]
   13344:	3b03      	subs	r3, #3
   13346:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   13348:	bf81      	itttt	hi
   1334a:	4a31      	ldrhi	r2, [pc, #196]	; (13410 <SystemInit+0x23c>)
   1334c:	6813      	ldrhi	r3, [r2, #0]
   1334e:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
   13352:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13354:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13358:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1335c:	2a00      	cmp	r2, #0
   1335e:	db03      	blt.n	13368 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   13360:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13364:	2b00      	cmp	r3, #0
   13366:	da2f      	bge.n	133c8 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   13368:	4b2a      	ldr	r3, [pc, #168]	; (13414 <SystemInit+0x240>)
   1336a:	2201      	movs	r2, #1
   1336c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   13370:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13374:	2a00      	cmp	r2, #0
   13376:	d0fb      	beq.n	13370 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
   13378:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1337c:	2115      	movs	r1, #21
   1337e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   13382:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13386:	2a00      	cmp	r2, #0
   13388:	d0fb      	beq.n	13382 <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
   1338a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1338e:	2215      	movs	r2, #21
   13390:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   13394:	4b1f      	ldr	r3, [pc, #124]	; (13414 <SystemInit+0x240>)
   13396:	461a      	mov	r2, r3
   13398:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   1339c:	2900      	cmp	r1, #0
   1339e:	d0fb      	beq.n	13398 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   133a0:	2100      	movs	r1, #0
   133a2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   133a6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   133aa:	2b00      	cmp	r3, #0
   133ac:	d0fb      	beq.n	133a6 <SystemInit+0x1d2>
  __ASM volatile ("dsb 0xF":::"memory");
   133ae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   133b2:	4919      	ldr	r1, [pc, #100]	; (13418 <SystemInit+0x244>)
   133b4:	4b19      	ldr	r3, [pc, #100]	; (1341c <SystemInit+0x248>)
   133b6:	68ca      	ldr	r2, [r1, #12]
   133b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   133bc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   133be:	60cb      	str	r3, [r1, #12]
   133c0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   133c4:	bf00      	nop
   133c6:	e7fd      	b.n	133c4 <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   133c8:	4b15      	ldr	r3, [pc, #84]	; (13420 <SystemInit+0x24c>)
   133ca:	4a16      	ldr	r2, [pc, #88]	; (13424 <SystemInit+0x250>)
   133cc:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   133ce:	bd08      	pop	{r3, pc}
   133d0:	10000324 	.word	0x10000324
   133d4:	40013540 	.word	0x40013540
   133d8:	4007c074 	.word	0x4007c074
   133dc:	baadf00d 	.word	0xbaadf00d
   133e0:	10000244 	.word	0x10000244
   133e4:	4000053c 	.word	0x4000053c
   133e8:	e000edf0 	.word	0xe000edf0
   133ec:	400005a0 	.word	0x400005a0
   133f0:	40005610 	.word	0x40005610
   133f4:	10000130 	.word	0x10000130
   133f8:	f0000fe0 	.word	0xf0000fe0
   133fc:	10000134 	.word	0x10000134
   13400:	000214f3 	.word	0x000214f3
   13404:	4000c000 	.word	0x4000c000
   13408:	10000258 	.word	0x10000258
   1340c:	40000ee4 	.word	0x40000ee4
   13410:	4000173c 	.word	0x4000173c
   13414:	4001e000 	.word	0x4001e000
   13418:	e000ed00 	.word	0xe000ed00
   1341c:	05fa0004 	.word	0x05fa0004
   13420:	2000cfe0 	.word	0x2000cfe0
   13424:	03d09000 	.word	0x03d09000

00013428 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   13428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1342c:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1342e:	4d4e      	ldr	r5, [pc, #312]	; (13568 <nrfx_spi_init+0x140>)
   13430:	262c      	movs	r6, #44	; 0x2c
   13432:	4366      	muls	r6, r4
   13434:	19af      	adds	r7, r5, r6
   13436:	f897 c01c 	ldrb.w	ip, [r7, #28]
   1343a:	f1bc 0f00 	cmp.w	ip, #0
   1343e:	f040 8091 	bne.w	13564 <nrfx_spi_init+0x13c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   13442:	51aa      	str	r2, [r5, r6]
    p_cb->p_context = p_context;
   13444:	607b      	str	r3, [r7, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   13446:	f891 e000 	ldrb.w	lr, [r1]
   1344a:	7b0f      	ldrb	r7, [r1, #12]
   1344c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   13450:	2301      	movs	r3, #1
   13452:	fa03 f30e 	lsl.w	r3, r3, lr
   13456:	2f01      	cmp	r7, #1
   13458:	bf94      	ite	ls
   1345a:	f8c6 350c 	strls.w	r3, [r6, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1345e:	f8c6 3508 	strhi.w	r3, [r6, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13462:	f50e 73e0 	add.w	r3, lr, #448	; 0x1c0
   13466:	f04f 0c01 	mov.w	ip, #1
   1346a:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1346e:	784b      	ldrb	r3, [r1, #1]
   13470:	2bff      	cmp	r3, #255	; 0xff
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   13472:	bf1f      	itttt	ne
   13474:	fa0c fc03 	lslne.w	ip, ip, r3
    p_reg->OUTCLR = clr_mask;
   13478:	f8c6 c50c 	strne.w	ip, [r6, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1347c:	f503 7ce0 	addne.w	ip, r3, #448	; 0x1c0
   13480:	f04f 0803 	movne.w	r8, #3
   13484:	bf18      	it	ne
   13486:	f846 802c 	strne.w	r8, [r6, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1348a:	788e      	ldrb	r6, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1348c:	bf08      	it	eq
   1348e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   13492:	2eff      	cmp	r6, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   13494:	bf1f      	itttt	ne
   13496:	f891 900e 	ldrbne.w	r9, [r1, #14]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1349a:	f506 7ce0 	addne.w	ip, r6, #448	; 0x1c0
   1349e:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   134a2:	ea4f 0989 	movne.w	r9, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   134a6:	bf18      	it	ne
   134a8:	f84a 902c 	strne.w	r9, [sl, ip, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    m_cb[p_instance->drv_inst_idx].miso_pin = p_config->miso_pin;
   134ac:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   134b0:	fb0c 5c04 	mla	ip, ip, r4, r5
        miso_pin = p_config->miso_pin;
   134b4:	bf18      	it	ne
   134b6:	46b0      	movne	r8, r6
    m_cb[p_instance->drv_inst_idx].miso_pin = p_config->miso_pin;
   134b8:	f88c 601f 	strb.w	r6, [ip, #31]
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   134bc:	78ce      	ldrb	r6, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   134be:	bf08      	it	eq
   134c0:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   134c4:	2eff      	cmp	r6, #255	; 0xff
   134c6:	d00d      	beq.n	134e4 <nrfx_spi_init+0xbc>
    p_reg->OUTSET = set_mask;
   134c8:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   134cc:	f04f 0c01 	mov.w	ip, #1
   134d0:	fa0c fc06 	lsl.w	ip, ip, r6
    p_reg->OUTSET = set_mask;
   134d4:	f8c9 c508 	str.w	ip, [r9, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   134d8:	f506 7ce0 	add.w	ip, r6, #448	; 0x1c0
   134dc:	f04f 0a03 	mov.w	sl, #3
   134e0:	f849 a02c 	str.w	sl, [r9, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   134e4:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   134e8:	fb0c 5c04 	mla	ip, ip, r4, r5
   134ec:	f88c 601e 	strb.w	r6, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   134f0:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
   134f2:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
   134f6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = (uint32_t)frequency;
   134fa:	688b      	ldr	r3, [r1, #8]
    p_reg->PSELMISO = miso_pin;
   134fc:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   13500:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   13504:	7b4b      	ldrb	r3, [r1, #13]
   13506:	3300      	adds	r3, #0
   13508:	bf18      	it	ne
   1350a:	2301      	movne	r3, #1
    switch (spi_mode)
   1350c:	2f02      	cmp	r7, #2
   1350e:	d023      	beq.n	13558 <nrfx_spi_init+0x130>
   13510:	2f03      	cmp	r7, #3
   13512:	d024      	beq.n	1355e <nrfx_spi_init+0x136>
   13514:	2f01      	cmp	r7, #1
   13516:	d101      	bne.n	1351c <nrfx_spi_init+0xf4>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   13518:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1351c:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   13520:	232c      	movs	r3, #44	; 0x2c
   13522:	fb03 5304 	mla	r3, r3, r4, r5
   13526:	7949      	ldrb	r1, [r1, #5]
   13528:	f883 1020 	strb.w	r1, [r3, #32]

    if (p_cb->handler)
   1352c:	b112      	cbz	r2, 13534 <nrfx_spi_init+0x10c>
    p_reg->INTENSET = mask;
   1352e:	2304      	movs	r3, #4
   13530:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   13534:	2301      	movs	r3, #1
   13536:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        nrf_spi_int_enable(p_spi, NRF_SPI_INT_READY_MASK);
    }

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1353a:	b11a      	cbz	r2, 13544 <nrfx_spi_init+0x11c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1353c:	f340 3007 	sbfx	r0, r0, #12, #8
   13540:	f7ef fdc0 	bl	30c4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   13544:	232c      	movs	r3, #44	; 0x2c
   13546:	fb03 5404 	mla	r4, r3, r4, r5
   1354a:	2300      	movs	r3, #0
   1354c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1354e:	4807      	ldr	r0, [pc, #28]	; (1356c <nrfx_spi_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   13550:	2301      	movs	r3, #1
   13552:	7723      	strb	r3, [r4, #28]
}
   13554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   13558:	f043 0304 	orr.w	r3, r3, #4
        break;
   1355c:	e7de      	b.n	1351c <nrfx_spi_init+0xf4>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1355e:	f043 0306 	orr.w	r3, r3, #6
        break;
   13562:	e7db      	b.n	1351c <nrfx_spi_init+0xf4>
        return err_code;
   13564:	4802      	ldr	r0, [pc, #8]	; (13570 <nrfx_spi_init+0x148>)
   13566:	e7f5      	b.n	13554 <nrfx_spi_init+0x12c>
   13568:	20001604 	.word	0x20001604
   1356c:	0bad0000 	.word	0x0bad0000
   13570:	0bad0005 	.word	0x0bad0005

00013574 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   13574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   13578:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1357a:	4d42      	ldr	r5, [pc, #264]	; (13684 <nrfx_spi_xfer+0x110>)
   1357c:	232c      	movs	r3, #44	; 0x2c
   1357e:	4373      	muls	r3, r6
{
   13580:	4696      	mov	lr, r2
    if (p_cb->transfer_in_progress)
   13582:	18ea      	adds	r2, r5, r3
{
   13584:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   13586:	7f51      	ldrb	r1, [r2, #29]
{
   13588:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1358a:	2900      	cmp	r1, #0
   1358c:	d178      	bne.n	13680 <nrfx_spi_xfer+0x10c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1358e:	f855 c003 	ldr.w	ip, [r5, r3]
   13592:	f1bc 0f00 	cmp.w	ip, #0
   13596:	d001      	beq.n	1359c <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
   13598:	2301      	movs	r3, #1
   1359a:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1359c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   135a0:	242c      	movs	r4, #44	; 0x2c
   135a2:	fb04 5406 	mla	r4, r4, r6, r5
   135a6:	f104 080c 	add.w	r8, r4, #12
   135aa:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   135ae:	7fa2      	ldrb	r2, [r4, #30]
    p_cb->abort = false;
   135b0:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   135b2:	2aff      	cmp	r2, #255	; 0xff
    p_cb->abort = false;
   135b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   135b8:	bf1f      	itttt	ne
   135ba:	2301      	movne	r3, #1
   135bc:	4093      	lslne	r3, r2
    p_reg->OUTCLR = clr_mask;
   135be:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   135c2:	f8c2 350c 	strne.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
   135c6:	232c      	movs	r3, #44	; 0x2c
   135c8:	f1be 0f00 	cmp.w	lr, #0
   135cc:	d007      	beq.n	135de <nrfx_spi_xfer+0x6a>
    {
        p_cb->transfer_in_progress = false;
   135ce:	fb03 5306 	mla	r3, r3, r6, r5
   135d2:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   135d4:	482c      	ldr	r0, [pc, #176]	; (13688 <nrfx_spi_xfer+0x114>)
        p_cb->transfer_in_progress = false;
   135d6:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   135d8:	b003      	add	sp, #12
   135da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   135de:	f8d9 4000 	ldr.w	r4, [r9]
    p_reg->INTENCLR = mask;
   135e2:	2204      	movs	r2, #4
   135e4:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    p_cb->bytes_transferred = 0;
   135e8:	fb03 5306 	mla	r3, r3, r6, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   135ec:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   135f0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   135f4:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
   135f8:	9200      	str	r2, [sp, #0]
    (void)dummy;
   135fa:	9a00      	ldr	r2, [sp, #0]
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   135fc:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   135fe:	b18a      	cbz	r2, 13624 <nrfx_spi_xfer+0xb0>
   13600:	683b      	ldr	r3, [r7, #0]
   13602:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   13604:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   13608:	2a01      	cmp	r2, #1
   1360a:	d90e      	bls.n	1362a <nrfx_spi_xfer+0xb6>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1360c:	683b      	ldr	r3, [r7, #0]
   1360e:	785b      	ldrb	r3, [r3, #1]
   13610:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
   13614:	f1bc 0f00 	cmp.w	ip, #0
   13618:	d010      	beq.n	1363c <nrfx_spi_xfer+0xc8>
    p_reg->INTENSET = mask;
   1361a:	2304      	movs	r3, #4
   1361c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   13620:	481a      	ldr	r0, [pc, #104]	; (1368c <nrfx_spi_xfer+0x118>)
   13622:	e7d9      	b.n	135d8 <nrfx_spi_xfer+0x64>
    nrf_spi_txd_set(p_spi,
   13624:	f893 3020 	ldrb.w	r3, [r3, #32]
   13628:	e7ec      	b.n	13604 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
   1362a:	68fb      	ldr	r3, [r7, #12]
   1362c:	2b01      	cmp	r3, #1
   1362e:	d9f1      	bls.n	13614 <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   13630:	232c      	movs	r3, #44	; 0x2c
   13632:	fb03 5306 	mla	r3, r3, r6, r5
    p_reg->TXD = data;
   13636:	f893 3020 	ldrb.w	r3, [r3, #32]
   1363a:	e7e9      	b.n	13610 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1363c:	f04f 082c 	mov.w	r8, #44	; 0x2c
   13640:	fb06 5808 	mla	r8, r6, r8, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13644:	4667      	mov	r7, ip
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13646:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1364a:	2b00      	cmp	r3, #0
   1364c:	d0fb      	beq.n	13646 <nrfx_spi_xfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1364e:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13652:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13656:	9301      	str	r3, [sp, #4]
        } while (transfer_byte(p_spi, p_cb));
   13658:	4641      	mov	r1, r8
   1365a:	4620      	mov	r0, r4
    (void)dummy;
   1365c:	9b01      	ldr	r3, [sp, #4]
   1365e:	f007 ffbb 	bl	1b5d8 <transfer_byte>
   13662:	2800      	cmp	r0, #0
   13664:	d1ef      	bne.n	13646 <nrfx_spi_xfer+0xd2>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   13666:	232c      	movs	r3, #44	; 0x2c
   13668:	fb03 5506 	mla	r5, r3, r6, r5
   1366c:	7faa      	ldrb	r2, [r5, #30]
   1366e:	2aff      	cmp	r2, #255	; 0xff
   13670:	d0d6      	beq.n	13620 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13672:	2301      	movs	r3, #1
   13674:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   13676:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1367a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1367e:	e7cf      	b.n	13620 <nrfx_spi_xfer+0xac>
        return err_code;
   13680:	4803      	ldr	r0, [pc, #12]	; (13690 <nrfx_spi_xfer+0x11c>)
   13682:	e7a9      	b.n	135d8 <nrfx_spi_xfer+0x64>
   13684:	20001604 	.word	0x20001604
   13688:	0bad0003 	.word	0x0bad0003
   1368c:	0bad0000 	.word	0x0bad0000
   13690:	0bad000b 	.word	0x0bad000b

00013694 <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
   13694:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13696:	4b10      	ldr	r3, [pc, #64]	; (136d8 <nrfx_spi_0_irq_handler+0x44>)
    if (!transfer_byte(p_spi, p_cb))
   13698:	4c10      	ldr	r4, [pc, #64]	; (136dc <nrfx_spi_0_irq_handler+0x48>)
   1369a:	4811      	ldr	r0, [pc, #68]	; (136e0 <nrfx_spi_0_irq_handler+0x4c>)
   1369c:	2200      	movs	r2, #0
   1369e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   136a0:	681b      	ldr	r3, [r3, #0]
   136a2:	9301      	str	r3, [sp, #4]
   136a4:	4621      	mov	r1, r4
    (void)dummy;
   136a6:	9b01      	ldr	r3, [sp, #4]
   136a8:	f007 ff96 	bl	1b5d8 <transfer_byte>
   136ac:	b990      	cbnz	r0, 136d4 <nrfx_spi_0_irq_handler+0x40>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   136ae:	7fa2      	ldrb	r2, [r4, #30]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   136b0:	480c      	ldr	r0, [pc, #48]	; (136e4 <nrfx_spi_0_irq_handler+0x50>)
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   136b2:	2aff      	cmp	r2, #255	; 0xff
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   136b4:	bf1f      	itttt	ne
   136b6:	2301      	movne	r3, #1
   136b8:	4093      	lslne	r3, r2
    p_reg->OUTSET = set_mask;
   136ba:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   136be:	f8c2 3508 	strne.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
   136c2:	2300      	movs	r3, #0
   136c4:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   136c6:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   136c8:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
}
   136cc:	b002      	add	sp, #8
   136ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   136d2:	4718      	bx	r3
}
   136d4:	b002      	add	sp, #8
   136d6:	bd10      	pop	{r4, pc}
   136d8:	40003108 	.word	0x40003108
   136dc:	20001604 	.word	0x20001604
   136e0:	40003000 	.word	0x40003000
   136e4:	2000160c 	.word	0x2000160c

000136e8 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   136e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   136ea:	4b34      	ldr	r3, [pc, #208]	; (137bc <twi_rx_start_transfer+0xd4>)
   136ec:	9301      	str	r3, [sp, #4]
{
   136ee:	460d      	mov	r5, r1

    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   136f0:	f44f 7182 	mov.w	r1, #260	; 0x104
{
   136f4:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   136f6:	f007 ffa3 	bl	1b640 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   136fa:	f44f 7192 	mov.w	r1, #292	; 0x124
   136fe:	f007 ff9f 	bl	1b640 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
   13702:	f44f 718e 	mov.w	r1, #284	; 0x11c
   13706:	f007 ff9b 	bl	1b640 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
   1370a:	f44f 7184 	mov.w	r1, #264	; 0x108
   1370e:	f007 ff97 	bl	1b640 <nrf_twi_event_clear>

    p_cb->bytes_transferred = 0;
   13712:	2300      	movs	r3, #0
   13714:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
   13716:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1371a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1371c:	2b01      	cmp	r3, #1
   1371e:	d118      	bne.n	13752 <twi_rx_start_transfer+0x6a>
   13720:	6a2b      	ldr	r3, [r5, #32]
   13722:	065b      	lsls	r3, r3, #25
   13724:	d415      	bmi.n	13752 <twi_rx_start_transfer+0x6a>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   13726:	2302      	movs	r3, #2
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   13728:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1372c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   13730:	2a02      	cmp	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13732:	f04f 0301 	mov.w	r3, #1
   13736:	6223      	str	r3, [r4, #32]
   13738:	bf18      	it	ne
   1373a:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1373c:	682b      	ldr	r3, [r5, #0]
   1373e:	b193      	cbz	r3, 13766 <twi_rx_start_transfer+0x7e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   13740:	f240 2386 	movw	r3, #646	; 0x286
   13744:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   13746:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   13748:	481d      	ldr	r0, [pc, #116]	; (137c0 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1374a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1374e:	b003      	add	sp, #12
   13750:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   13752:	2301      	movs	r3, #1
   13754:	e7e8      	b.n	13728 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   13756:	4629      	mov	r1, r5
   13758:	4620      	mov	r0, r4
   1375a:	f007 ff99 	bl	1b690 <twi_transfer>
        while ((hw_timeout > 0) &&
   1375e:	b128      	cbz	r0, 1376c <twi_rx_start_transfer+0x84>
               hw_timeout--;
   13760:	9b01      	ldr	r3, [sp, #4]
   13762:	3b01      	subs	r3, #1
   13764:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   13766:	9b01      	ldr	r3, [sp, #4]
   13768:	2b00      	cmp	r3, #0
   1376a:	dcf4      	bgt.n	13756 <twi_rx_start_transfer+0x6e>
        if (p_cb->error)
   1376c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   13770:	b95b      	cbnz	r3, 1378a <twi_rx_start_transfer+0xa2>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   13772:	4813      	ldr	r0, [pc, #76]	; (137c0 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   13774:	9b01      	ldr	r3, [sp, #4]
   13776:	2b00      	cmp	r3, #0
   13778:	dce9      	bgt.n	1374e <twi_rx_start_transfer+0x66>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1377a:	2300      	movs	r3, #0
   1377c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   13780:	2305      	movs	r3, #5
   13782:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   13786:	480f      	ldr	r0, [pc, #60]	; (137c4 <twi_rx_start_transfer+0xdc>)
    return ret_code;
   13788:	e7e1      	b.n	1374e <twi_rx_start_transfer+0x66>
    uint32_t error_source = p_reg->ERRORSRC;
   1378a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1378e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   13792:	2b00      	cmp	r3, #0
   13794:	d0ed      	beq.n	13772 <twi_rx_start_transfer+0x8a>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   13796:	4a0c      	ldr	r2, [pc, #48]	; (137c8 <twi_rx_start_transfer+0xe0>)
   13798:	480a      	ldr	r0, [pc, #40]	; (137c4 <twi_rx_start_transfer+0xdc>)
   1379a:	f013 0f01 	tst.w	r3, #1
   1379e:	bf18      	it	ne
   137a0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   137a2:	f013 0f02 	tst.w	r3, #2
   137a6:	f102 0201 	add.w	r2, r2, #1
   137aa:	bf18      	it	ne
   137ac:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   137ae:	f013 0f04 	tst.w	r3, #4
   137b2:	4b06      	ldr	r3, [pc, #24]	; (137cc <twi_rx_start_transfer+0xe4>)
   137b4:	bf18      	it	ne
   137b6:	4618      	movne	r0, r3
   137b8:	e7dc      	b.n	13774 <twi_rx_start_transfer+0x8c>
   137ba:	bf00      	nop
   137bc:	000186a0 	.word	0x000186a0
   137c0:	0bad0000 	.word	0x0bad0000
   137c4:	0bad0001 	.word	0x0bad0001
   137c8:	0bae0000 	.word	0x0bae0000
   137cc:	0bae0002 	.word	0x0bae0002

000137d0 <twi_tx_start_transfer>:
{
   137d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   137d2:	4b30      	ldr	r3, [pc, #192]	; (13894 <twi_tx_start_transfer+0xc4>)
   137d4:	9301      	str	r3, [sp, #4]
{
   137d6:	460d      	mov	r5, r1
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   137d8:	f44f 7182 	mov.w	r1, #260	; 0x104
{
   137dc:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   137de:	f007 ff2f 	bl	1b640 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   137e2:	f44f 7192 	mov.w	r1, #292	; 0x124
   137e6:	f007 ff2b 	bl	1b640 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
   137ea:	f44f 718e 	mov.w	r1, #284	; 0x11c
   137ee:	f007 ff27 	bl	1b640 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
   137f2:	f44f 7184 	mov.w	r1, #264	; 0x108
   137f6:	f007 ff23 	bl	1b640 <nrf_twi_event_clear>
    p_reg->SHORTS = mask;
   137fa:	2300      	movs	r3, #0
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   137fc:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   13800:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   13804:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
   13806:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1380a:	2301      	movs	r3, #1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1380c:	429a      	cmp	r2, r3
   1380e:	6203      	str	r3, [r0, #32]
    (void)twi_send_byte(p_twi, p_cb);
   13810:	4629      	mov	r1, r5
   13812:	bf18      	it	ne
   13814:	6083      	strne	r3, [r0, #8]
   13816:	f007 ff1b 	bl	1b650 <twi_send_byte>
    if (p_cb->handler)
   1381a:	682b      	ldr	r3, [r5, #0]
   1381c:	b183      	cbz	r3, 13840 <twi_tx_start_transfer+0x70>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1381e:	f240 2386 	movw	r3, #646	; 0x286
   13822:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   13824:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   13826:	481c      	ldr	r0, [pc, #112]	; (13898 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   13828:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1382c:	b003      	add	sp, #12
   1382e:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   13830:	4629      	mov	r1, r5
   13832:	4620      	mov	r0, r4
   13834:	f007 ff2c 	bl	1b690 <twi_transfer>
        while ((hw_timeout > 0) &&
   13838:	b128      	cbz	r0, 13846 <twi_tx_start_transfer+0x76>
            hw_timeout--;
   1383a:	9b01      	ldr	r3, [sp, #4]
   1383c:	3b01      	subs	r3, #1
   1383e:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   13840:	9b01      	ldr	r3, [sp, #4]
   13842:	2b00      	cmp	r3, #0
   13844:	dcf4      	bgt.n	13830 <twi_tx_start_transfer+0x60>
        if (p_cb->error)
   13846:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1384a:	b95b      	cbnz	r3, 13864 <twi_tx_start_transfer+0x94>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1384c:	4812      	ldr	r0, [pc, #72]	; (13898 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1384e:	9b01      	ldr	r3, [sp, #4]
   13850:	2b00      	cmp	r3, #0
   13852:	dceb      	bgt.n	1382c <twi_tx_start_transfer+0x5c>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   13854:	2300      	movs	r3, #0
   13856:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1385a:	2305      	movs	r3, #5
   1385c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   13860:	480e      	ldr	r0, [pc, #56]	; (1389c <twi_tx_start_transfer+0xcc>)
    return ret_code;
   13862:	e7e3      	b.n	1382c <twi_tx_start_transfer+0x5c>
    uint32_t error_source = p_reg->ERRORSRC;
   13864:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   13868:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1386c:	2b00      	cmp	r3, #0
   1386e:	d0ed      	beq.n	1384c <twi_tx_start_transfer+0x7c>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   13870:	4a0b      	ldr	r2, [pc, #44]	; (138a0 <twi_tx_start_transfer+0xd0>)
   13872:	480a      	ldr	r0, [pc, #40]	; (1389c <twi_tx_start_transfer+0xcc>)
   13874:	f013 0f01 	tst.w	r3, #1
   13878:	bf18      	it	ne
   1387a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1387c:	f013 0f02 	tst.w	r3, #2
   13880:	f102 0201 	add.w	r2, r2, #1
   13884:	bf18      	it	ne
   13886:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   13888:	f013 0f04 	tst.w	r3, #4
   1388c:	4b05      	ldr	r3, [pc, #20]	; (138a4 <twi_tx_start_transfer+0xd4>)
   1388e:	bf18      	it	ne
   13890:	4618      	movne	r0, r3
   13892:	e7dc      	b.n	1384e <twi_tx_start_transfer+0x7e>
   13894:	000186a0 	.word	0x000186a0
   13898:	0bad0000 	.word	0x0bad0000
   1389c:	0bad0001 	.word	0x0bad0001
   138a0:	0bae0000 	.word	0x0bae0000
   138a4:	0bae0002 	.word	0x0bae0002

000138a8 <nrfx_twi_init>:
{
   138a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   138aa:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   138ac:	4d1d      	ldr	r5, [pc, #116]	; (13924 <nrfx_twi_init+0x7c>)
   138ae:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   138b2:	fb0c fc07 	mul.w	ip, ip, r7
   138b6:	eb05 040c 	add.w	r4, r5, ip
   138ba:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   138be:	bb7e      	cbnz	r6, 13920 <nrfx_twi_init+0x78>
    p_cb->p_context       = p_context;
   138c0:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   138c2:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
   138c4:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   138c6:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
   138ca:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
   138ce:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   138d2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
   138d6:	680c      	ldr	r4, [r1, #0]
    p_cb->handler         = event_handler;
   138d8:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   138dc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   138e0:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
   138e4:	f240 6c0c 	movw	ip, #1548	; 0x60c
   138e8:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   138ec:	684b      	ldr	r3, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   138ee:	6800      	ldr	r0, [r0, #0]
   138f0:	f503 7ee0 	add.w	lr, r3, #448	; 0x1c0
   138f4:	f846 c02e 	str.w	ip, [r6, lr, lsl #2]
    p_reg->PSELSCL = scl_pin;
   138f8:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
   138fc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   13900:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   13902:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   13906:	b11a      	cbz	r2, 13910 <nrfx_twi_init+0x68>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   13908:	f340 3007 	sbfx	r0, r0, #12, #8
   1390c:	f7ef fbda 	bl	30c4 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   13910:	233c      	movs	r3, #60	; 0x3c
   13912:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   13916:	4804      	ldr	r0, [pc, #16]	; (13928 <nrfx_twi_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   13918:	2301      	movs	r3, #1
   1391a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   13920:	4802      	ldr	r0, [pc, #8]	; (1392c <nrfx_twi_init+0x84>)
   13922:	e7fc      	b.n	1391e <nrfx_twi_init+0x76>
   13924:	20001630 	.word	0x20001630
   13928:	0bad0000 	.word	0x0bad0000
   1392c:	0bad0005 	.word	0x0bad0005

00013930 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   13930:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   13932:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   13934:	2105      	movs	r1, #5
   13936:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1393a:	4a04      	ldr	r2, [pc, #16]	; (1394c <nrfx_twi_enable+0x1c>)
   1393c:	213c      	movs	r1, #60	; 0x3c
   1393e:	fb01 2303 	mla	r3, r1, r3, r2
   13942:	2202      	movs	r2, #2
   13944:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   13948:	4770      	bx	lr
   1394a:	bf00      	nop
   1394c:	20001630 	.word	0x20001630

00013950 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   13950:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   13952:	490a      	ldr	r1, [pc, #40]	; (1397c <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   13954:	7902      	ldrb	r2, [r0, #4]
   13956:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1395a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   1395e:	f021 0103 	bic.w	r1, r1, #3
   13962:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   13966:	2100      	movs	r1, #0
   13968:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1396c:	4b04      	ldr	r3, [pc, #16]	; (13980 <nrfx_twi_disable+0x30>)
   1396e:	213c      	movs	r1, #60	; 0x3c
   13970:	fb01 3202 	mla	r2, r1, r2, r3
   13974:	2301      	movs	r3, #1
   13976:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
   1397a:	4770      	bx	lr
   1397c:	00044286 	.word	0x00044286
   13980:	20001630 	.word	0x20001630

00013984 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   13984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   13988:	4d32      	ldr	r5, [pc, #200]	; (13a54 <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1398a:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1398e:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   13992:	233c      	movs	r3, #60	; 0x3c
   13994:	fb03 5308 	mla	r3, r3, r8, r5
{
   13998:	460e      	mov	r6, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1399a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1399e:	2b01      	cmp	r3, #1
{
   139a0:	4696      	mov	lr, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   139a2:	d104      	bne.n	139ae <nrfx_twi_xfer+0x2a>
   139a4:	780b      	ldrb	r3, [r1, #0]
   139a6:	2b01      	cmp	r3, #1
   139a8:	d106      	bne.n	139b8 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
   139aa:	482b      	ldr	r0, [pc, #172]	; (13a58 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   139ac:	e011      	b.n	139d2 <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   139ae:	2b02      	cmp	r3, #2
   139b0:	d102      	bne.n	139b8 <nrfx_twi_xfer+0x34>
   139b2:	780b      	ldrb	r3, [r1, #0]
   139b4:	2b01      	cmp	r3, #1
   139b6:	d1f8      	bne.n	139aa <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
   139b8:	243c      	movs	r4, #60	; 0x3c
    p_reg->INTENCLR = mask;
   139ba:	4b28      	ldr	r3, [pc, #160]	; (13a5c <nrfx_twi_xfer+0xd8>)
   139bc:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   139c0:	fb04 5408 	mla	r4, r4, r8, r5
   139c4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   139c8:	b12b      	cbz	r3, 139d6 <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   139ca:	68a3      	ldr	r3, [r4, #8]
        return err_code;
   139cc:	4824      	ldr	r0, [pc, #144]	; (13a60 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
   139ce:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   139d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   139d6:	f08e 0304 	eor.w	r3, lr, #4
   139da:	f3c3 0380 	ubfx	r3, r3, #2, #1
   139de:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    p_cb->flags       = flags;
   139e2:	f8c4 e020 	str.w	lr, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   139e6:	46b4      	mov	ip, r6
   139e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   139ec:	f104 070c 	add.w	r7, r4, #12
   139f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   139f2:	f8dc 3000 	ldr.w	r3, [ip]
   139f6:	603b      	str	r3, [r7, #0]
    p_cb->curr_length = p_xfer_desc->primary_length;
   139f8:	6873      	ldr	r3, [r6, #4]
   139fa:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   139fc:	68f3      	ldr	r3, [r6, #12]
   139fe:	6263      	str	r3, [r4, #36]	; 0x24
    p_reg->ADDRESS = address;
   13a00:	7873      	ldrb	r3, [r6, #1]
   13a02:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   13a06:	7833      	ldrb	r3, [r6, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   13a08:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   13a0c:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   13a0e:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   13a12:	d01a      	beq.n	13a4a <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   13a14:	b9b3      	cbnz	r3, 13a44 <nrfx_twi_xfer+0xc0>
   13a16:	f3ce 1e40 	ubfx	lr, lr, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   13a1a:	233c      	movs	r3, #60	; 0x3c
   13a1c:	fb03 5308 	mla	r3, r3, r8, r5
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   13a20:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   13a22:	f883 e02c 	strb.w	lr, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   13a26:	4648      	mov	r0, r9
   13a28:	f7ff fed2 	bl	137d0 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   13a2c:	233c      	movs	r3, #60	; 0x3c
   13a2e:	fb03 f808 	mul.w	r8, r3, r8
   13a32:	eb05 0208 	add.w	r2, r5, r8
   13a36:	f855 3008 	ldr.w	r3, [r5, r8]
   13a3a:	2b00      	cmp	r3, #0
   13a3c:	d1c9      	bne.n	139d2 <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
   13a3e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   13a42:	e7c6      	b.n	139d2 <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   13a44:	f04f 0e01 	mov.w	lr, #1
   13a48:	e7e7      	b.n	13a1a <nrfx_twi_xfer+0x96>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   13a4a:	4651      	mov	r1, sl
   13a4c:	4648      	mov	r0, r9
   13a4e:	f7ff fe4b 	bl	136e8 <twi_rx_start_transfer>
   13a52:	e7eb      	b.n	13a2c <nrfx_twi_xfer+0xa8>
   13a54:	20001630 	.word	0x20001630
   13a58:	0bad0005 	.word	0x0bad0005
   13a5c:	00044286 	.word	0x00044286
   13a60:	0bad000b 	.word	0x0bad000b

00013a64 <nrfx_twi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
   13a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   13a66:	4c29      	ldr	r4, [pc, #164]	; (13b0c <nrfx_twi_1_irq_handler+0xa8>)
{
   13a68:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   13a6a:	4621      	mov	r1, r4
   13a6c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   13a70:	f007 fe0e 	bl	1b690 <twi_transfer>
   13a74:	46a4      	mov	ip, r4
   13a76:	b9e0      	cbnz	r0, 13ab2 <nrfx_twi_1_irq_handler+0x4e>
    if (!p_cb->error &&
   13a78:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   13a7c:	6a26      	ldr	r6, [r4, #32]
   13a7e:	b9ef      	cbnz	r7, 13abc <nrfx_twi_1_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   13a80:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   13a82:	1e9a      	subs	r2, r3, #2
   13a84:	2a01      	cmp	r2, #1
   13a86:	d819      	bhi.n	13abc <nrfx_twi_1_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   13a88:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13a8a:	69a2      	ldr	r2, [r4, #24]
   13a8c:	4291      	cmp	r1, r2
   13a8e:	d115      	bne.n	13abc <nrfx_twi_1_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   13a90:	69e2      	ldr	r2, [r4, #28]
   13a92:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   13a94:	f3c6 1640 	ubfx	r6, r6, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   13a98:	6962      	ldr	r2, [r4, #20]
   13a9a:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   13a9c:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   13a9e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   13aa2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   13aa6:	4621      	mov	r1, r4
   13aa8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   13aac:	d103      	bne.n	13ab6 <nrfx_twi_1_irq_handler+0x52>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   13aae:	f7ff fe8f 	bl	137d0 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
}
   13ab2:	b007      	add	sp, #28
   13ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   13ab6:	f7ff fe17 	bl	136e8 <twi_rx_start_transfer>
   13aba:	e7fa      	b.n	13ab2 <nrfx_twi_1_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
   13abc:	4d14      	ldr	r5, [pc, #80]	; (13b10 <nrfx_twi_1_irq_handler+0xac>)
   13abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13ac0:	ac01      	add	r4, sp, #4
   13ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13ac4:	682b      	ldr	r3, [r5, #0]
   13ac6:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
   13ac8:	b1e7      	cbz	r7, 13b04 <nrfx_twi_1_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
   13aca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   13ace:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   13ad2:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   13ad6:	0798      	lsls	r0, r3, #30
   13ad8:	d50c      	bpl.n	13af4 <nrfx_twi_1_irq_handler+0x90>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   13ada:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   13adc:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   13ae0:	2300      	movs	r3, #0
   13ae2:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)))
   13ae6:	0773      	lsls	r3, r6, #29
   13ae8:	d4e3      	bmi.n	13ab2 <nrfx_twi_1_irq_handler+0x4e>
            p_cb->handler(&event, p_cb->p_context);
   13aea:	e9dc 3100 	ldrd	r3, r1, [ip]
   13aee:	4668      	mov	r0, sp
   13af0:	4798      	blx	r3
}
   13af2:	e7de      	b.n	13ab2 <nrfx_twi_1_irq_handler+0x4e>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   13af4:	0759      	lsls	r1, r3, #29
   13af6:	d501      	bpl.n	13afc <nrfx_twi_1_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   13af8:	2302      	movs	r3, #2
   13afa:	e7ef      	b.n	13adc <nrfx_twi_1_irq_handler+0x78>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   13afc:	07da      	lsls	r2, r3, #31
   13afe:	d5ef      	bpl.n	13ae0 <nrfx_twi_1_irq_handler+0x7c>
                event.type = NRFX_TWI_EVT_OVERRUN;
   13b00:	2303      	movs	r3, #3
   13b02:	e7eb      	b.n	13adc <nrfx_twi_1_irq_handler+0x78>
            event.type = NRFX_TWI_EVT_DONE;
   13b04:	f88d 7000 	strb.w	r7, [sp]
   13b08:	e7ea      	b.n	13ae0 <nrfx_twi_1_irq_handler+0x7c>
   13b0a:	bf00      	nop
   13b0c:	20001630 	.word	0x20001630
   13b10:	2000163c 	.word	0x2000163c

00013b14 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
   13b14:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
   13b16:	4604      	mov	r4, r0
   13b18:	b958      	cbnz	r0, 13b32 <lv_disp_get_scr_act+0x1e>
   13b1a:	f001 fd4f 	bl	155bc <lv_disp_get_default>
    if(!disp) {
   13b1e:	4604      	mov	r4, r0
   13b20:	b938      	cbnz	r0, 13b32 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
   13b22:	4b05      	ldr	r3, [pc, #20]	; (13b38 <lv_disp_get_scr_act+0x24>)
   13b24:	4905      	ldr	r1, [pc, #20]	; (13b3c <lv_disp_get_scr_act+0x28>)
   13b26:	222e      	movs	r2, #46	; 0x2e
   13b28:	2002      	movs	r0, #2
   13b2a:	f002 f879 	bl	15c20 <lv_log_add>
        return NULL;
    }

    return disp->act_scr;
}
   13b2e:	4620      	mov	r0, r4
   13b30:	bd10      	pop	{r4, pc}
    return disp->act_scr;
   13b32:	6b64      	ldr	r4, [r4, #52]	; 0x34
   13b34:	e7fb      	b.n	13b2e <lv_disp_get_scr_act+0x1a>
   13b36:	bf00      	nop
   13b38:	00021569 	.word	0x00021569
   13b3c:	000215a0 	.word	0x000215a0

00013b40 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
   13b40:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
   13b42:	4604      	mov	r4, r0
   13b44:	b958      	cbnz	r0, 13b5e <lv_disp_get_layer_top+0x1e>
   13b46:	f001 fd39 	bl	155bc <lv_disp_get_default>
    if(!disp) {
   13b4a:	4604      	mov	r4, r0
   13b4c:	b938      	cbnz	r0, 13b5e <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
   13b4e:	4b05      	ldr	r3, [pc, #20]	; (13b64 <lv_disp_get_layer_top+0x24>)
   13b50:	4905      	ldr	r1, [pc, #20]	; (13b68 <lv_disp_get_layer_top+0x28>)
   13b52:	224b      	movs	r2, #75	; 0x4b
   13b54:	2002      	movs	r0, #2
   13b56:	f002 f863 	bl	15c20 <lv_log_add>
        return NULL;
    }

    return disp->top_layer;
}
   13b5a:	4620      	mov	r0, r4
   13b5c:	bd10      	pop	{r4, pc}
    return disp->top_layer;
   13b5e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   13b60:	e7fb      	b.n	13b5a <lv_disp_get_layer_top+0x1a>
   13b62:	bf00      	nop
   13b64:	00021530 	.word	0x00021530
   13b68:	000215a0 	.word	0x000215a0

00013b6c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
   13b6c:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
   13b6e:	4604      	mov	r4, r0
   13b70:	b958      	cbnz	r0, 13b8a <lv_disp_get_layer_sys+0x1e>
   13b72:	f001 fd23 	bl	155bc <lv_disp_get_default>
    if(!disp) {
   13b76:	4604      	mov	r4, r0
   13b78:	b938      	cbnz	r0, 13b8a <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
   13b7a:	4b05      	ldr	r3, [pc, #20]	; (13b90 <lv_disp_get_layer_sys+0x24>)
   13b7c:	4905      	ldr	r1, [pc, #20]	; (13b94 <lv_disp_get_layer_sys+0x28>)
   13b7e:	225c      	movs	r2, #92	; 0x5c
   13b80:	2002      	movs	r0, #2
   13b82:	f002 f84d 	bl	15c20 <lv_log_add>
        return NULL;
    }

    return disp->sys_layer;
}
   13b86:	4620      	mov	r0, r4
   13b88:	bd10      	pop	{r4, pc}
    return disp->sys_layer;
   13b8a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   13b8c:	e7fb      	b.n	13b86 <lv_disp_get_layer_sys+0x1a>
   13b8e:	bf00      	nop
   13b90:	000214f7 	.word	0x000214f7
   13b94:	000215a0 	.word	0x000215a0

00013b98 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
   13b98:	b510      	push	{r4, lr}
    /* Do nothing if already initialized */
    if(lv_initialized) {
   13b9a:	4c14      	ldr	r4, [pc, #80]	; (13bec <lv_init+0x54>)
   13b9c:	7823      	ldrb	r3, [r4, #0]
   13b9e:	b13b      	cbz	r3, 13bb0 <lv_init+0x18>
        LV_LOG_WARN("lv_init: already inited");
   13ba0:	4b13      	ldr	r3, [pc, #76]	; (13bf0 <lv_init+0x58>)
   13ba2:	4914      	ldr	r1, [pc, #80]	; (13bf4 <lv_init+0x5c>)
   13ba4:	2253      	movs	r2, #83	; 0x53
   13ba6:	2002      	movs	r0, #2
    lv_img_decoder_init();
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);

    lv_initialized = true;
    LV_LOG_INFO("lv_init ready");
}
   13ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LV_LOG_INFO("lv_init ready");
   13bac:	f002 b838 	b.w	15c20 <lv_log_add>
    lv_mem_init();
   13bb0:	f009 faed 	bl	1d18e <lv_mem_init>
    lv_task_core_init();
   13bb4:	f001 fd32 	bl	1561c <lv_task_core_init>
    lv_style_init();
   13bb8:	f000 fbe6 	bl	14388 <lv_style_init>
    lv_refr_init();
   13bbc:	f008 f997 	bl	1beee <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
   13bc0:	f44f 71b4 	mov.w	r1, #360	; 0x168
   13bc4:	480c      	ldr	r0, [pc, #48]	; (13bf8 <lv_init+0x60>)
   13bc6:	f009 fb08 	bl	1d1da <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
   13bca:	2160      	movs	r1, #96	; 0x60
   13bcc:	480b      	ldr	r0, [pc, #44]	; (13bfc <lv_init+0x64>)
   13bce:	f009 fb04 	bl	1d1da <lv_ll_init>
    lv_indev_init();
   13bd2:	f007 fde2 	bl	1b79a <lv_indev_init>
    lv_img_decoder_init();
   13bd6:	f001 fc0b 	bl	153f0 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
   13bda:	2001      	movs	r0, #1
   13bdc:	f001 fc5c 	bl	15498 <lv_img_cache_set_size>
    lv_initialized = true;
   13be0:	2001      	movs	r0, #1
   13be2:	7020      	strb	r0, [r4, #0]
    LV_LOG_INFO("lv_init ready");
   13be4:	4b06      	ldr	r3, [pc, #24]	; (13c00 <lv_init+0x68>)
   13be6:	4903      	ldr	r1, [pc, #12]	; (13bf4 <lv_init+0x5c>)
   13be8:	2279      	movs	r2, #121	; 0x79
   13bea:	e7dd      	b.n	13ba8 <lv_init+0x10>
   13bec:	2000a2af 	.word	0x2000a2af
   13bf0:	000215d6 	.word	0x000215d6
   13bf4:	000215ee 	.word	0x000215ee
   13bf8:	20001aa0 	.word	0x20001aa0
   13bfc:	20001ac0 	.word	0x20001ac0
   13c00:	00021623 	.word	0x00021623

00013c04 <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
   13c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);

    const lv_obj_t * scr;

    if(obj->par == NULL)
   13c06:	6803      	ldr	r3, [r0, #0]
{
   13c08:	4605      	mov	r5, r0
    if(obj->par == NULL)
   13c0a:	b97b      	cbnz	r3, 13c2c <lv_obj_get_disp+0x28>
        scr = obj; /*`obj` is a screen*/
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/

    lv_disp_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
   13c0c:	4813      	ldr	r0, [pc, #76]	; (13c5c <lv_obj_get_disp+0x58>)
   13c0e:	4f13      	ldr	r7, [pc, #76]	; (13c5c <lv_obj_get_disp+0x58>)
   13c10:	f009 fb29 	bl	1d266 <lv_ll_get_head>
   13c14:	4604      	mov	r4, r0
   13c16:	b96c      	cbnz	r4, 13c34 <lv_obj_get_disp+0x30>
        {
            if(s == scr) return d;
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
   13c18:	4b11      	ldr	r3, [pc, #68]	; (13c60 <lv_obj_get_disp+0x5c>)
   13c1a:	4912      	ldr	r1, [pc, #72]	; (13c64 <lv_obj_get_disp+0x60>)
   13c1c:	f240 6267 	movw	r2, #1639	; 0x667
   13c20:	2002      	movs	r0, #2
   13c22:	f001 fffd 	bl	15c20 <lv_log_add>
    return NULL;
}
   13c26:	4620      	mov	r0, r4
   13c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
   13c2a:	461d      	mov	r5, r3
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);

    return obj->par;
   13c2c:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
   13c2e:	2b00      	cmp	r3, #0
   13c30:	d1fb      	bne.n	13c2a <lv_obj_get_disp+0x26>
   13c32:	e7eb      	b.n	13c0c <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
   13c34:	f104 0628 	add.w	r6, r4, #40	; 0x28
   13c38:	4630      	mov	r0, r6
   13c3a:	f009 fb14 	bl	1d266 <lv_ll_get_head>
   13c3e:	b928      	cbnz	r0, 13c4c <lv_obj_get_disp+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
   13c40:	4621      	mov	r1, r4
   13c42:	4638      	mov	r0, r7
   13c44:	f009 fb15 	bl	1d272 <lv_ll_get_next>
   13c48:	4604      	mov	r4, r0
   13c4a:	e7e4      	b.n	13c16 <lv_obj_get_disp+0x12>
            if(s == scr) return d;
   13c4c:	4285      	cmp	r5, r0
   13c4e:	d0ea      	beq.n	13c26 <lv_obj_get_disp+0x22>
        LV_LL_READ(d->scr_ll, s)
   13c50:	4601      	mov	r1, r0
   13c52:	4630      	mov	r0, r6
   13c54:	f009 fb0d 	bl	1d272 <lv_ll_get_next>
   13c58:	e7f1      	b.n	13c3e <lv_obj_get_disp+0x3a>
   13c5a:	bf00      	nop
   13c5c:	20001aa0 	.word	0x20001aa0
   13c60:	000216a9 	.word	0x000216a9
   13c64:	000215ee 	.word	0x000215ee

00013c68 <lv_obj_create>:
{
   13c68:	b570      	push	{r4, r5, r6, lr}
   13c6a:	460d      	mov	r5, r1
    if(parent == NULL) {
   13c6c:	4606      	mov	r6, r0
   13c6e:	2800      	cmp	r0, #0
   13c70:	f040 80d9 	bne.w	13e26 <lv_obj_create+0x1be>
        lv_disp_t * disp = lv_disp_get_default();
   13c74:	f001 fca2 	bl	155bc <lv_disp_get_default>
        if(!disp) {
   13c78:	4604      	mov	r4, r0
   13c7a:	b938      	cbnz	r0, 13c8c <lv_obj_create+0x24>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
   13c7c:	4b89      	ldr	r3, [pc, #548]	; (13ea4 <lv_obj_create+0x23c>)
   13c7e:	498a      	ldr	r1, [pc, #552]	; (13ea8 <lv_obj_create+0x240>)
   13c80:	2290      	movs	r2, #144	; 0x90
   13c82:	2002      	movs	r0, #2
   13c84:	f001 ffcc 	bl	15c20 <lv_log_add>
}
   13c88:	4620      	mov	r0, r4
   13c8a:	bd70      	pop	{r4, r5, r6, pc}
        new_obj = lv_ll_ins_head(&disp->scr_ll);
   13c8c:	3028      	adds	r0, #40	; 0x28
   13c8e:	f009 faae 	bl	1d1ee <lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   13c92:	4604      	mov	r4, r0
   13c94:	b908      	cbnz	r0, 13c9a <lv_obj_create+0x32>
   13c96:	2400      	movs	r4, #0
   13c98:	e7f6      	b.n	13c88 <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   13c9a:	2138      	movs	r1, #56	; 0x38
        new_obj->par = NULL; /*Screens has no a parent*/
   13c9c:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   13ca0:	f009 fa9b 	bl	1d1da <lv_ll_init>
        new_obj->signal_cb = lv_obj_signal;
   13ca4:	4b81      	ldr	r3, [pc, #516]	; (13eac <lv_obj_create+0x244>)
   13ca6:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   13ca8:	4b81      	ldr	r3, [pc, #516]	; (13eb0 <lv_obj_create+0x248>)
   13caa:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
   13cac:	61a6      	str	r6, [r4, #24]
        new_obj->coords.x1    = 0;
   13cae:	6126      	str	r6, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
   13cb0:	4630      	mov	r0, r6
   13cb2:	f001 fc89 	bl	155c8 <lv_disp_get_hor_res>
   13cb6:	3801      	subs	r0, #1
   13cb8:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
   13cba:	4630      	mov	r0, r6
   13cbc:	f001 fc94 	bl	155e8 <lv_disp_get_ver_res>
   13cc0:	3801      	subs	r0, #1
   13cc2:	82e0      	strh	r0, [r4, #22]
        new_obj->ext_draw_pad = 0;
   13cc4:	8626      	strh	r6, [r4, #48]	; 0x30
        lv_theme_t * th = lv_theme_get_current();
   13cc6:	f002 fb05 	bl	162d4 <lv_theme_get_current>
        if(th) {
   13cca:	2800      	cmp	r0, #0
   13ccc:	f000 80a9 	beq.w	13e22 <lv_obj_create+0x1ba>
            new_obj->style_p = th->style.scr;
   13cd0:	6803      	ldr	r3, [r0, #0]
   13cd2:	62a3      	str	r3, [r4, #40]	; 0x28
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
   13cd4:	2204      	movs	r2, #4
   13cd6:	2100      	movs	r1, #0
   13cd8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   13cdc:	f004 ffd7 	bl	18c8e <memset>
        new_obj->click        = 0;
   13ce0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        LV_LOG_INFO("Screen create ready");
   13ce2:	4971      	ldr	r1, [pc, #452]	; (13ea8 <lv_obj_create+0x240>)
        new_obj->click        = 0;
   13ce4:	f403 4303 	and.w	r3, r3, #33536	; 0x8300
   13ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   13cec:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->ext_attr = NULL;
   13cee:	2300      	movs	r3, #0
   13cf0:	6263      	str	r3, [r4, #36]	; 0x24
        LV_LOG_INFO("Screen create ready");
   13cf2:	22de      	movs	r2, #222	; 0xde
   13cf4:	4b6f      	ldr	r3, [pc, #444]	; (13eb4 <lv_obj_create+0x24c>)
   13cf6:	2001      	movs	r0, #1
   13cf8:	f001 ff92 	bl	15c20 <lv_log_add>
    if(copy != NULL) {
   13cfc:	2d00      	cmp	r5, #0
   13cfe:	f000 8084 	beq.w	13e0a <lv_obj_create+0x1a2>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
   13d02:	2208      	movs	r2, #8
   13d04:	f105 0110 	add.w	r1, r5, #16
   13d08:	f104 0010 	add.w	r0, r4, #16
   13d0c:	f004 ff95 	bl	18c3a <memcpy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
   13d10:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
   13d14:	8623      	strh	r3, [r4, #48]	; 0x30
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
   13d16:	2204      	movs	r2, #4
   13d18:	f105 0134 	add.w	r1, r5, #52	; 0x34
   13d1c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   13d20:	f004 ff8b 	bl	18c3a <memcpy>
        new_obj->event_cb = copy->event_cb;
   13d24:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
   13d26:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
        new_obj->event_cb = copy->event_cb;
   13d2a:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
   13d2c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   13d30:	f362 0300 	bfi	r3, r2, #0, #1
   13d34:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        new_obj->drag         = copy->drag;
   13d38:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13d3c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   13d40:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13d44:	f363 0241 	bfi	r2, r3, #1, #1
   13d48:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->drag_dir     = copy->drag_dir;
   13d4c:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   13d50:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13d54:	f362 0301 	bfi	r3, r2, #0, #2
   13d58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        new_obj->drag_throw   = copy->drag_throw;
   13d5c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13d60:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   13d64:	f3c3 0380 	ubfx	r3, r3, #2, #1
   13d68:	f363 0282 	bfi	r2, r3, #2, #1
   13d6c:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->drag_parent  = copy->drag_parent;
   13d70:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13d74:	b2d2      	uxtb	r2, r2
   13d76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13d7a:	f363 02c3 	bfi	r2, r3, #3, #1
   13d7e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->hidden       = copy->hidden;
   13d82:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13d86:	b2d2      	uxtb	r2, r2
   13d88:	f3c3 1300 	ubfx	r3, r3, #4, #1
   13d8c:	f363 1204 	bfi	r2, r3, #4, #1
   13d90:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->top          = copy->top;
   13d94:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13d98:	b2d2      	uxtb	r2, r2
   13d9a:	f3c3 1340 	ubfx	r3, r3, #5, #1
   13d9e:	f363 1245 	bfi	r2, r3, #5, #1
   13da2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->parent_event = copy->parent_event;
   13da6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13daa:	b2d2      	uxtb	r2, r2
   13dac:	09db      	lsrs	r3, r3, #7
   13dae:	f363 12c7 	bfi	r2, r3, #7, #1
   13db2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->opa_scale_en = copy->opa_scale_en;
   13db6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13dba:	b2d2      	uxtb	r2, r2
   13dbc:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13dc0:	f363 1286 	bfi	r2, r3, #6, #1
   13dc4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->protect      = copy->protect;
   13dc8:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   13dcc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        new_obj->opa_scale    = copy->opa_scale;
   13dd0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   13dd4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        new_obj->style_p = copy->style_p;
   13dd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13dda:	62a3      	str	r3, [r4, #40]	; 0x28
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
   13ddc:	682b      	ldr	r3, [r5, #0]
   13dde:	2b00      	cmp	r3, #0
   13de0:	d05c      	beq.n	13e9c <lv_obj_create+0x234>
   13de2:	2e00      	cmp	r6, #0
   13de4:	d05a      	beq.n	13e9c <lv_obj_create+0x234>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
   13de6:	4628      	mov	r0, r5
   13de8:	f007 fe34 	bl	1ba54 <lv_obj_get_x>
   13dec:	4601      	mov	r1, r0
   13dee:	4628      	mov	r0, r5
   13df0:	f007 fe38 	bl	1ba64 <lv_obj_get_y>
   13df4:	4602      	mov	r2, r0
            lv_obj_set_pos(new_obj, 0, 0);
   13df6:	4620      	mov	r0, r4
   13df8:	f007 fd53 	bl	1b8a2 <lv_obj_set_pos>
        LV_LOG_INFO("Object create ready");
   13dfc:	4b2e      	ldr	r3, [pc, #184]	; (13eb8 <lv_obj_create+0x250>)
   13dfe:	492a      	ldr	r1, [pc, #168]	; (13ea8 <lv_obj_create+0x240>)
   13e00:	f240 127d 	movw	r2, #381	; 0x17d
   13e04:	2001      	movs	r0, #1
   13e06:	f001 ff0b 	bl	15c20 <lv_log_add>
    if(parent != NULL) {
   13e0a:	2e00      	cmp	r6, #0
   13e0c:	f43f af3c 	beq.w	13c88 <lv_obj_create+0x20>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
   13e10:	69f3      	ldr	r3, [r6, #28]
   13e12:	4622      	mov	r2, r4
   13e14:	2101      	movs	r1, #1
   13e16:	4630      	mov	r0, r6
   13e18:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
   13e1a:	4620      	mov	r0, r4
   13e1c:	f007 fcf1 	bl	1b802 <lv_obj_invalidate>
   13e20:	e732      	b.n	13c88 <lv_obj_create+0x20>
            new_obj->style_p = &lv_style_scr;
   13e22:	4b26      	ldr	r3, [pc, #152]	; (13ebc <lv_obj_create+0x254>)
   13e24:	e755      	b.n	13cd2 <lv_obj_create+0x6a>
        new_obj = lv_ll_ins_head(&parent->child_ll);
   13e26:	3004      	adds	r0, #4
   13e28:	f009 f9e1 	bl	1d1ee <lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   13e2c:	4604      	mov	r4, r0
   13e2e:	2800      	cmp	r0, #0
   13e30:	f43f af31 	beq.w	13c96 <lv_obj_create+0x2e>
        new_obj->par = parent; /*Set the parent*/
   13e34:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   13e38:	2138      	movs	r1, #56	; 0x38
   13e3a:	f009 f9ce 	bl	1d1da <lv_ll_init>
        new_obj->signal_cb = lv_obj_signal;
   13e3e:	4b1b      	ldr	r3, [pc, #108]	; (13eac <lv_obj_create+0x244>)
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   13e40:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
        new_obj->signal_cb = lv_obj_signal;
   13e44:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   13e46:	4b1a      	ldr	r3, [pc, #104]	; (13eb0 <lv_obj_create+0x248>)
   13e48:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
   13e4a:	2300      	movs	r3, #0
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   13e4c:	f363 0283 	bfi	r2, r3, #2, #2
   13e50:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
        new_obj->coords.y1    = parent->coords.y1;
   13e54:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
   13e58:	8262      	strh	r2, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   13e5a:	8a72      	ldrh	r2, [r6, #18]
        new_obj->event_cb = NULL;
   13e5c:	61a3      	str	r3, [r4, #24]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   13e5e:	3242      	adds	r2, #66	; 0x42
   13e60:	82e2      	strh	r2, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
   13e62:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
   13e66:	8222      	strh	r2, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   13e68:	8a32      	ldrh	r2, [r6, #16]
        new_obj->ext_draw_pad = 0;
   13e6a:	8623      	strh	r3, [r4, #48]	; 0x30
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   13e6c:	3264      	adds	r2, #100	; 0x64
   13e6e:	82a2      	strh	r2, [r4, #20]
        lv_theme_t * th = lv_theme_get_current();
   13e70:	f002 fa30 	bl	162d4 <lv_theme_get_current>
        if(th) {
   13e74:	b180      	cbz	r0, 13e98 <lv_obj_create+0x230>
            new_obj->style_p = th->style.panel;
   13e76:	6883      	ldr	r3, [r0, #8]
   13e78:	62a3      	str	r3, [r4, #40]	; 0x28
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
   13e7a:	2204      	movs	r2, #4
   13e7c:	2100      	movs	r1, #0
   13e7e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   13e82:	f004 ff04 	bl	18c8e <memset>
        new_obj->click        = 1;
   13e86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13e88:	f403 420c 	and.w	r2, r3, #35840	; 0x8c00
   13e8c:	4b0c      	ldr	r3, [pc, #48]	; (13ec0 <lv_obj_create+0x258>)
   13e8e:	4313      	orrs	r3, r2
   13e90:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->ext_attr = NULL;
   13e92:	2300      	movs	r3, #0
   13e94:	6263      	str	r3, [r4, #36]	; 0x24
   13e96:	e731      	b.n	13cfc <lv_obj_create+0x94>
            new_obj->style_p = &lv_style_plain_color;
   13e98:	4b0a      	ldr	r3, [pc, #40]	; (13ec4 <lv_obj_create+0x25c>)
   13e9a:	e7ed      	b.n	13e78 <lv_obj_create+0x210>
            lv_obj_set_pos(new_obj, 0, 0);
   13e9c:	2200      	movs	r2, #0
   13e9e:	4611      	mov	r1, r2
   13ea0:	e7a9      	b.n	13df6 <lv_obj_create+0x18e>
   13ea2:	bf00      	nop
   13ea4:	00021631 	.word	0x00021631
   13ea8:	000215ee 	.word	0x000215ee
   13eac:	00013ee9 	.word	0x00013ee9
   13eb0:	0001bce9 	.word	0x0001bce9
   13eb4:	00021681 	.word	0x00021681
   13eb8:	00021695 	.word	0x00021695
   13ebc:	20001944 	.word	0x20001944
   13ec0:	ff000301 	.word	0xff000301
   13ec4:	20001854 	.word	0x20001854

00013ec8 <lv_obj_get_style>:
 */
const lv_style_t * lv_obj_get_style(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);

    const lv_style_t * style_act = obj->style_p;
   13ec8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(style_act == NULL) {
   13eca:	b913      	cbnz	r3, 13ed2 <lv_obj_get_style+0xa>
        lv_obj_t * par = obj->par;
   13ecc:	6802      	ldr	r2, [r0, #0]

        while(par) {
   13ece:	b912      	cbnz	r2, 13ed6 <lv_obj_get_style+0xe>
            style_act = lv_group_mod_style(obj->group_p, style_act);
        }
    }
#endif

    if(style_act == NULL) style_act = &lv_style_plain;
   13ed0:	4b04      	ldr	r3, [pc, #16]	; (13ee4 <lv_obj_get_style+0x1c>)

    return style_act;
}
   13ed2:	4618      	mov	r0, r3
   13ed4:	4770      	bx	lr
            if(par->style_p) {
   13ed6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13ed8:	b113      	cbz	r3, 13ee0 <lv_obj_get_style+0x18>
                if(par->style_p->glass == 0) {
   13eda:	7819      	ldrb	r1, [r3, #0]
   13edc:	07c9      	lsls	r1, r1, #31
   13ede:	d5f8      	bpl.n	13ed2 <lv_obj_get_style+0xa>
            par = par->par;
   13ee0:	6812      	ldr	r2, [r2, #0]
   13ee2:	e7f4      	b.n	13ece <lv_obj_get_style+0x6>
   13ee4:	20001804 	.word	0x20001804

00013ee8 <lv_obj_signal>:
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   13ee8:	2907      	cmp	r1, #7
{
   13eea:	b510      	push	{r4, lr}
   13eec:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   13eee:	d105      	bne.n	13efc <lv_obj_signal+0x14>
   13ef0:	490f      	ldr	r1, [pc, #60]	; (13f30 <lv_obj_signal+0x48>)
   13ef2:	4610      	mov	r0, r2
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
        lv_obj_refresh_ext_draw_pad(obj);
    }
    return res;
}
   13ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   13ef8:	f007 bf4c 	b.w	1bd94 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
   13efc:	2901      	cmp	r1, #1
   13efe:	d105      	bne.n	13f0c <lv_obj_signal+0x24>
    return (obj->protect & prot) == 0 ? false : true;
   13f00:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   13f04:	43c0      	mvns	r0, r0
   13f06:	f000 0001 	and.w	r0, r0, #1
}
   13f0a:	bd10      	pop	{r4, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   13f0c:	2906      	cmp	r1, #6
   13f0e:	d10a      	bne.n	13f26 <lv_obj_signal+0x3e>
        const lv_style_t * style = lv_obj_get_style(obj);
   13f10:	f7ff ffda 	bl	13ec8 <lv_obj_get_style>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
   13f14:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
   13f18:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   13f1c:	429a      	cmp	r2, r3
   13f1e:	da00      	bge.n	13f22 <lv_obj_signal+0x3a>
   13f20:	8623      	strh	r3, [r4, #48]	; 0x30
    lv_res_t res = LV_RES_OK;
   13f22:	2001      	movs	r0, #1
   13f24:	e7f1      	b.n	13f0a <lv_obj_signal+0x22>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
   13f26:	2904      	cmp	r1, #4
   13f28:	d1fb      	bne.n	13f22 <lv_obj_signal+0x3a>
        lv_obj_refresh_ext_draw_pad(obj);
   13f2a:	f007 fd00 	bl	1b92e <lv_obj_refresh_ext_draw_pad>
   13f2e:	e7f8      	b.n	13f22 <lv_obj_signal+0x3a>
   13f30:	000216cb 	.word	0x000216cb

00013f34 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
   13f34:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   13f36:	4d10      	ldr	r5, [pc, #64]	; (13f78 <lv_refr_vdb_flush+0x44>)
   13f38:	6828      	ldr	r0, [r5, #0]
   13f3a:	f009 f828 	bl	1cf8e <lv_disp_get_buf>
   13f3e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
   13f40:	6828      	ldr	r0, [r5, #0]
   13f42:	f009 f826 	bl	1cf92 <lv_disp_is_double_buf>
   13f46:	b110      	cbz	r0, 13f4e <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
   13f48:	69a3      	ldr	r3, [r4, #24]
   13f4a:	07db      	lsls	r3, r3, #31
   13f4c:	d4fc      	bmi.n	13f48 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
   13f4e:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
   13f50:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
   13f52:	f043 0301 	orr.w	r3, r3, #1
   13f56:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
   13f58:	68c3      	ldr	r3, [r0, #12]
   13f5a:	b11b      	cbz	r3, 13f64 <lv_refr_vdb_flush+0x30>
   13f5c:	68a2      	ldr	r2, [r4, #8]
   13f5e:	f104 0110 	add.w	r1, r4, #16
   13f62:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
   13f64:	6823      	ldr	r3, [r4, #0]
   13f66:	b133      	cbz	r3, 13f76 <lv_refr_vdb_flush+0x42>
   13f68:	6862      	ldr	r2, [r4, #4]
   13f6a:	b122      	cbz	r2, 13f76 <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
   13f6c:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
   13f6e:	428b      	cmp	r3, r1
   13f70:	bf08      	it	eq
   13f72:	4613      	moveq	r3, r2
   13f74:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
   13f76:	bd38      	pop	{r3, r4, r5, pc}
   13f78:	2000166c 	.word	0x2000166c

00013f7c <lv_refr_obj_and_children>:
{
   13f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f7e:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
   13f80:	4605      	mov	r5, r0
   13f82:	b920      	cbnz	r0, 13f8e <lv_refr_obj_and_children+0x12>
   13f84:	4b12      	ldr	r3, [pc, #72]	; (13fd0 <lv_refr_obj_and_children+0x54>)
   13f86:	6818      	ldr	r0, [r3, #0]
   13f88:	f7ff fdc4 	bl	13b14 <lv_disp_get_scr_act>
   13f8c:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
   13f8e:	4628      	mov	r0, r5
   13f90:	4631      	mov	r1, r6
   13f92:	f007 ff3f 	bl	1be14 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
   13f96:	4628      	mov	r0, r5
   13f98:	f007 fd27 	bl	1b9ea <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
   13f9c:	4604      	mov	r4, r0
    while(par != NULL) {
   13f9e:	b900      	cbnz	r0, 13fa2 <lv_refr_obj_and_children+0x26>
}
   13fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
   13fa2:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
   13fa4:	4629      	mov	r1, r5
   13fa6:	4638      	mov	r0, r7
   13fa8:	f009 f973 	bl	1d292 <lv_ll_get_prev>
   13fac:	4605      	mov	r5, r0
        while(i != NULL) {
   13fae:	b948      	cbnz	r0, 13fc4 <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
   13fb0:	6a23      	ldr	r3, [r4, #32]
   13fb2:	2201      	movs	r2, #1
   13fb4:	4631      	mov	r1, r6
   13fb6:	4620      	mov	r0, r4
   13fb8:	4798      	blx	r3
        par = lv_obj_get_parent(par);
   13fba:	4620      	mov	r0, r4
   13fbc:	f007 fd15 	bl	1b9ea <lv_obj_get_parent>
   13fc0:	4625      	mov	r5, r4
   13fc2:	e7eb      	b.n	13f9c <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
   13fc4:	4631      	mov	r1, r6
   13fc6:	4628      	mov	r0, r5
   13fc8:	f007 ff24 	bl	1be14 <lv_refr_obj>
   13fcc:	e7ea      	b.n	13fa4 <lv_refr_obj_and_children+0x28>
   13fce:	bf00      	nop
   13fd0:	2000166c 	.word	0x2000166c

00013fd4 <lv_refr_area_part>:
{
   13fd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   13fd6:	4c18      	ldr	r4, [pc, #96]	; (14038 <lv_refr_area_part+0x64>)
{
   13fd8:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   13fda:	6820      	ldr	r0, [r4, #0]
   13fdc:	f008 ffd7 	bl	1cf8e <lv_disp_get_buf>
   13fe0:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
   13fe2:	6820      	ldr	r0, [r4, #0]
   13fe4:	f008 ffd5 	bl	1cf92 <lv_disp_is_double_buf>
   13fe8:	b910      	cbnz	r0, 13ff0 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
   13fea:	69ab      	ldr	r3, [r5, #24]
   13fec:	07db      	lsls	r3, r3, #31
   13fee:	d4fc      	bmi.n	13fea <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
   13ff0:	f105 0210 	add.w	r2, r5, #16
   13ff4:	4631      	mov	r1, r6
   13ff6:	4668      	mov	r0, sp
   13ff8:	f009 f826 	bl	1d048 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
   13ffc:	6820      	ldr	r0, [r4, #0]
   13ffe:	f7ff fd89 	bl	13b14 <lv_disp_get_scr_act>
   14002:	4601      	mov	r1, r0
   14004:	4668      	mov	r0, sp
   14006:	f007 fed3 	bl	1bdb0 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
   1400a:	4669      	mov	r1, sp
   1400c:	f7ff ffb6 	bl	13f7c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
   14010:	6820      	ldr	r0, [r4, #0]
   14012:	f7ff fd95 	bl	13b40 <lv_disp_get_layer_top>
   14016:	4669      	mov	r1, sp
   14018:	f7ff ffb0 	bl	13f7c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
   1401c:	6820      	ldr	r0, [r4, #0]
   1401e:	f7ff fda5 	bl	13b6c <lv_disp_get_layer_sys>
   14022:	4669      	mov	r1, sp
   14024:	f7ff ffaa 	bl	13f7c <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
   14028:	6820      	ldr	r0, [r4, #0]
   1402a:	f008 ffba 	bl	1cfa2 <lv_disp_is_true_double_buf>
   1402e:	b908      	cbnz	r0, 14034 <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
   14030:	f7ff ff80 	bl	13f34 <lv_refr_vdb_flush>
}
   14034:	b002      	add	sp, #8
   14036:	bd70      	pop	{r4, r5, r6, pc}
   14038:	2000166c 	.word	0x2000166c

0001403c <lv_refr_get_disp_refreshing>:
}
   1403c:	4b01      	ldr	r3, [pc, #4]	; (14044 <lv_refr_get_disp_refreshing+0x8>)
   1403e:	6818      	ldr	r0, [r3, #0]
   14040:	4770      	bx	lr
   14042:	bf00      	nop
   14044:	2000166c 	.word	0x2000166c

00014048 <lv_disp_refr_task>:
{
   14048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1404c:	b089      	sub	sp, #36	; 0x24
   1404e:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
   14050:	f008 ffb6 	bl	1cfc0 <lv_tick_get>
    disp_refr = task->user_data;
   14054:	4cae      	ldr	r4, [pc, #696]	; (14310 <lv_disp_refr_task+0x2c8>)
   14056:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
   14058:	9003      	str	r0, [sp, #12]
    disp_refr = task->user_data;
   1405a:	6023      	str	r3, [r4, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   1405c:	2600      	movs	r6, #0
   1405e:	6823      	ldr	r3, [r4, #0]
   14060:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
   14064:	f3c2 0209 	ubfx	r2, r2, #0, #10
   14068:	4296      	cmp	r6, r2
   1406a:	d330      	bcc.n	140ce <lv_disp_refr_task+0x86>
    px_num = 0;
   1406c:	4ba9      	ldr	r3, [pc, #676]	; (14314 <lv_disp_refr_task+0x2cc>)
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
   1406e:	9302      	str	r3, [sp, #8]
    px_num = 0;
   14070:	2200      	movs	r2, #0
   14072:	601a      	str	r2, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
   14074:	4690      	mov	r8, r2
   14076:	6827      	ldr	r7, [r4, #0]
   14078:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
   1407c:	f3c3 0209 	ubfx	r2, r3, #0, #10
   14080:	4590      	cmp	r8, r2
   14082:	d368      	bcc.n	14156 <lv_disp_refr_task+0x10e>
    if(disp_refr->inv_p != 0) {
   14084:	b1f2      	cbz	r2, 140c4 <lv_disp_refr_task+0x7c>
        if(lv_disp_is_true_double_buf(disp_refr)) {
   14086:	4638      	mov	r0, r7
   14088:	f008 ff8b 	bl	1cfa2 <lv_disp_is_true_double_buf>
   1408c:	2800      	cmp	r0, #0
   1408e:	f040 811a 	bne.w	142c6 <lv_disp_refr_task+0x27e>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
   14092:	6820      	ldr	r0, [r4, #0]
   14094:	f44f 7280 	mov.w	r2, #256	; 0x100
   14098:	2100      	movs	r1, #0
   1409a:	3040      	adds	r0, #64	; 0x40
   1409c:	f004 fdf7 	bl	18c8e <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
   140a0:	6820      	ldr	r0, [r4, #0]
   140a2:	2220      	movs	r2, #32
   140a4:	2100      	movs	r1, #0
   140a6:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   140aa:	f004 fdf0 	bl	18c8e <memset>
        disp_refr->inv_p = 0;
   140ae:	6824      	ldr	r4, [r4, #0]
   140b0:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
   140b4:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
   140b6:	f36f 0309 	bfc	r3, #0, #10
   140ba:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
   140be:	2d00      	cmp	r5, #0
   140c0:	f040 8156 	bne.w	14370 <lv_disp_refr_task+0x328>
    lv_draw_free_buf();
   140c4:	f000 fcfa 	bl	14abc <lv_draw_free_buf>
}
   140c8:	b009      	add	sp, #36	; 0x24
   140ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
   140ce:	4433      	add	r3, r6
   140d0:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
   140d4:	b10d      	cbz	r5, 140da <lv_disp_refr_task+0x92>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   140d6:	3601      	adds	r6, #1
   140d8:	e7c1      	b.n	1405e <lv_disp_refr_task+0x16>
   140da:	00f7      	lsls	r7, r6, #3
   140dc:	3740      	adds	r7, #64	; 0x40
                disp_refr->inv_area_joined[join_from] = 1;
   140de:	f04f 0901 	mov.w	r9, #1
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   140e2:	6820      	ldr	r0, [r4, #0]
   140e4:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
   140e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   140ec:	429d      	cmp	r5, r3
   140ee:	d2f2      	bcs.n	140d6 <lv_disp_refr_task+0x8e>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
   140f0:	1943      	adds	r3, r0, r5
   140f2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
   140f6:	bb63      	cbnz	r3, 14152 <lv_disp_refr_task+0x10a>
   140f8:	42ae      	cmp	r6, r5
   140fa:	d02a      	beq.n	14152 <lv_disp_refr_task+0x10a>
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
   140fc:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   14100:	f108 0840 	add.w	r8, r8, #64	; 0x40
   14104:	eb00 0108 	add.w	r1, r0, r8
   14108:	4438      	add	r0, r7
   1410a:	f008 ffe9 	bl	1d0e0 <lv_area_is_on>
   1410e:	b300      	cbz	r0, 14152 <lv_disp_refr_task+0x10a>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
   14110:	6821      	ldr	r1, [r4, #0]
   14112:	a806      	add	r0, sp, #24
   14114:	eb01 0208 	add.w	r2, r1, r8
   14118:	4439      	add	r1, r7
   1411a:	f008 ffbf 	bl	1d09c <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   1411e:	a806      	add	r0, sp, #24
   14120:	f008 ff84 	bl	1d02c <lv_area_get_size>
   14124:	4683      	mov	fp, r0
   14126:	6820      	ldr	r0, [r4, #0]
   14128:	4438      	add	r0, r7
   1412a:	f008 ff7f 	bl	1d02c <lv_area_get_size>
   1412e:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
   14130:	6820      	ldr	r0, [r4, #0]
   14132:	4440      	add	r0, r8
   14134:	f008 ff7a 	bl	1d02c <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   14138:	4450      	add	r0, sl
   1413a:	4583      	cmp	fp, r0
   1413c:	d209      	bcs.n	14152 <lv_disp_refr_task+0x10a>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
   1413e:	6820      	ldr	r0, [r4, #0]
   14140:	2208      	movs	r2, #8
   14142:	a906      	add	r1, sp, #24
   14144:	4438      	add	r0, r7
   14146:	f004 fd78 	bl	18c3a <memcpy>
                disp_refr->inv_area_joined[join_from] = 1;
   1414a:	6823      	ldr	r3, [r4, #0]
   1414c:	442b      	add	r3, r5
   1414e:	f883 9140 	strb.w	r9, [r3, #320]	; 0x140
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   14152:	3501      	adds	r5, #1
   14154:	e7c5      	b.n	140e2 <lv_disp_refr_task+0x9a>
        if(disp_refr->inv_area_joined[i] == 0) {
   14156:	eb07 0308 	add.w	r3, r7, r8
   1415a:	f893 6140 	ldrb.w	r6, [r3, #320]	; 0x140
   1415e:	2e00      	cmp	r6, #0
   14160:	d17a      	bne.n	14258 <lv_disp_refr_task+0x210>
            lv_refr_area(&disp_refr->inv_areas[i]);
   14162:	ea4f 05c8 	mov.w	r5, r8, lsl #3
   14166:	f105 0340 	add.w	r3, r5, #64	; 0x40
    if(lv_disp_is_true_double_buf(disp_refr)) {
   1416a:	4638      	mov	r0, r7
   1416c:	9301      	str	r3, [sp, #4]
            lv_refr_area(&disp_refr->inv_areas[i]);
   1416e:	eb07 0b03 	add.w	fp, r7, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
   14172:	f008 ff16 	bl	1cfa2 <lv_disp_is_true_double_buf>
   14176:	b198      	cbz	r0, 141a0 <lv_disp_refr_task+0x158>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   14178:	6820      	ldr	r0, [r4, #0]
   1417a:	f008 ff08 	bl	1cf8e <lv_disp_get_buf>
   1417e:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
   14180:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
   14182:	6820      	ldr	r0, [r4, #0]
   14184:	f001 fa20 	bl	155c8 <lv_disp_get_hor_res>
   14188:	3801      	subs	r0, #1
   1418a:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
   1418c:	826e      	strh	r6, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1418e:	6820      	ldr	r0, [r4, #0]
   14190:	f001 fa2a 	bl	155e8 <lv_disp_get_ver_res>
   14194:	3801      	subs	r0, #1
   14196:	82e8      	strh	r0, [r5, #22]
            lv_refr_area_part(area_p);
   14198:	4658      	mov	r0, fp
   1419a:	f7ff ff1b 	bl	13fd4 <lv_refr_area_part>
   1419e:	e04f      	b.n	14240 <lv_disp_refr_task+0x1f8>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   141a0:	443d      	add	r5, r7
   141a2:	6820      	ldr	r0, [r4, #0]
   141a4:	f008 fef3 	bl	1cf8e <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   141a8:	f8b5 a044 	ldrh.w	sl, [r5, #68]	; 0x44
   141ac:	f8b5 7040 	ldrh.w	r7, [r5, #64]	; 0x40
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   141b0:	f9b5 9046 	ldrsh.w	r9, [r5, #70]	; 0x46
   141b4:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   141b8:	f10a 0a01 	add.w	sl, sl, #1
   141bc:	ebaa 0a07 	sub.w	sl, sl, r7
   141c0:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   141c2:	f109 0701 	add.w	r7, r9, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   141c6:	6820      	ldr	r0, [r4, #0]
   141c8:	1aff      	subs	r7, r7, r3
   141ca:	f001 fa0d 	bl	155e8 <lv_disp_get_ver_res>
        lv_coord_t y2 =
   141ce:	4581      	cmp	r9, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   141d0:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   141d4:	b23f      	sxth	r7, r7
   141d6:	db42      	blt.n	1425e <lv_disp_refr_task+0x216>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   141d8:	6820      	ldr	r0, [r4, #0]
   141da:	f001 fa05 	bl	155e8 <lv_disp_get_ver_res>
   141de:	3801      	subs	r0, #1
   141e0:	fa0f f980 	sxth.w	r9, r0
        int32_t max_row = (uint32_t)vdb->size / w;
   141e4:	68f3      	ldr	r3, [r6, #12]
   141e6:	fbb3 f3fa 	udiv	r3, r3, sl
        if(max_row > h) max_row = h;
   141ea:	429f      	cmp	r7, r3
   141ec:	bfa8      	it	ge
   141ee:	461f      	movge	r7, r3
        if(disp_refr->driver.rounder_cb) {
   141f0:	6823      	ldr	r3, [r4, #0]
   141f2:	691b      	ldr	r3, [r3, #16]
   141f4:	2b00      	cmp	r3, #0
   141f6:	d038      	beq.n	1426a <lv_disp_refr_task+0x222>
            tmp.x1 = 0;
   141f8:	2300      	movs	r3, #0
   141fa:	9306      	str	r3, [sp, #24]
            tmp.x2 = 0;
   141fc:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_coord_t h_tmp = max_row;
   14200:	b23b      	sxth	r3, r7
                tmp.y2 = h_tmp - 1;
   14202:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   14206:	6820      	ldr	r0, [r4, #0]
                tmp.y2 = h_tmp - 1;
   14208:	9304      	str	r3, [sp, #16]
   1420a:	fa0f fa8a 	sxth.w	sl, sl
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   1420e:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
   14210:	f8ad a01e 	strh.w	sl, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   14214:	a906      	add	r1, sp, #24
   14216:	4790      	blx	r2
   14218:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
   1421c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
   14220:	9b04      	ldr	r3, [sp, #16]
   14222:	3101      	adds	r1, #1
   14224:	1a8a      	subs	r2, r1, r2
   14226:	b212      	sxth	r2, r2
   14228:	4297      	cmp	r7, r2
   1422a:	da1b      	bge.n	14264 <lv_disp_refr_task+0x21c>
            } while(h_tmp > 0);
   1422c:	f1ba 0300 	subs.w	r3, sl, #0
   14230:	dce7      	bgt.n	14202 <lv_disp_refr_task+0x1ba>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
   14232:	4b39      	ldr	r3, [pc, #228]	; (14318 <lv_disp_refr_task+0x2d0>)
   14234:	4939      	ldr	r1, [pc, #228]	; (1431c <lv_disp_refr_task+0x2d4>)
   14236:	f240 124f 	movw	r2, #335	; 0x14f
   1423a:	2002      	movs	r0, #2
   1423c:	f001 fcf0 	bl	15c20 <lv_log_add>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
   14240:	6820      	ldr	r0, [r4, #0]
   14242:	6983      	ldr	r3, [r0, #24]
   14244:	b143      	cbz	r3, 14258 <lv_disp_refr_task+0x210>
   14246:	9b01      	ldr	r3, [sp, #4]
   14248:	4418      	add	r0, r3
   1424a:	f008 feef 	bl	1d02c <lv_area_get_size>
   1424e:	9b02      	ldr	r3, [sp, #8]
   14250:	681b      	ldr	r3, [r3, #0]
   14252:	4418      	add	r0, r3
   14254:	9b02      	ldr	r3, [sp, #8]
   14256:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
   14258:	f108 0801 	add.w	r8, r8, #1
   1425c:	e70b      	b.n	14076 <lv_disp_refr_task+0x2e>
        lv_coord_t y2 =
   1425e:	f9b5 9046 	ldrsh.w	r9, [r5, #70]	; 0x46
   14262:	e7bf      	b.n	141e4 <lv_disp_refr_task+0x19c>
            if(h_tmp <= 0) {
   14264:	2b00      	cmp	r3, #0
   14266:	dde4      	ble.n	14232 <lv_disp_refr_task+0x1ea>
                max_row = tmp.y2 + 1;
   14268:	460f      	mov	r7, r1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   1426a:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	; 0x42
        lv_coord_t row_last = 0;
   1426e:	f04f 0a00 	mov.w	sl, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   14272:	1e7a      	subs	r2, r7, #1
   14274:	18d1      	adds	r1, r2, r3
   14276:	4549      	cmp	r1, r9
   14278:	dd0b      	ble.n	14292 <lv_disp_refr_task+0x24a>
        if(y2 != row_last) {
   1427a:	45d1      	cmp	r9, sl
   1427c:	d0e0      	beq.n	14240 <lv_disp_refr_task+0x1f8>
            vdb->area.x1 = area_p->x1;
   1427e:	f9b5 2040 	ldrsh.w	r2, [r5, #64]	; 0x40
   14282:	8232      	strh	r2, [r6, #16]
            vdb->area.x2 = area_p->x2;
   14284:	f9b5 2044 	ldrsh.w	r2, [r5, #68]	; 0x44
   14288:	82b2      	strh	r2, [r6, #20]
            vdb->area.y1 = row;
   1428a:	8273      	strh	r3, [r6, #18]
            vdb->area.y2 = y2;
   1428c:	f8a6 9016 	strh.w	r9, [r6, #22]
   14290:	e782      	b.n	14198 <lv_disp_refr_task+0x150>
            vdb->area.x1 = area_p->x1;
   14292:	f9b5 1040 	ldrsh.w	r1, [r5, #64]	; 0x40
   14296:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
   14298:	f9b5 1044 	ldrsh.w	r1, [r5, #68]	; 0x44
            vdb->area.y1 = row;
   1429c:	8273      	strh	r3, [r6, #18]
            vdb->area.y2 = row + max_row - 1;
   1429e:	443b      	add	r3, r7
   142a0:	b21b      	sxth	r3, r3
   142a2:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   142a6:	fa0f fa8a 	sxth.w	sl, sl
   142aa:	45ca      	cmp	sl, r9
   142ac:	bfa8      	it	ge
   142ae:	46ca      	movge	sl, r9
            vdb->area.x2 = area_p->x2;
   142b0:	82b1      	strh	r1, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
   142b2:	f8a6 a016 	strh.w	sl, [r6, #22]
            lv_refr_area_part(area_p);
   142b6:	4658      	mov	r0, fp
   142b8:	9205      	str	r2, [sp, #20]
   142ba:	9304      	str	r3, [sp, #16]
   142bc:	f7ff fe8a 	bl	13fd4 <lv_refr_area_part>
   142c0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   142c4:	e7d6      	b.n	14274 <lv_disp_refr_task+0x22c>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   142c6:	6820      	ldr	r0, [r4, #0]
   142c8:	f008 fe61 	bl	1cf8e <lv_disp_get_buf>
   142cc:	4605      	mov	r5, r0
            lv_refr_vdb_flush();
   142ce:	f7ff fe31 	bl	13f34 <lv_refr_vdb_flush>
            while(vdb->flushing)
   142d2:	69ab      	ldr	r3, [r5, #24]
   142d4:	07db      	lsls	r3, r3, #31
   142d6:	d4fc      	bmi.n	142d2 <lv_disp_refr_task+0x28a>
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   142d8:	f8d5 9000 	ldr.w	r9, [r5]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   142dc:	f8d5 b008 	ldr.w	fp, [r5, #8]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   142e0:	6820      	ldr	r0, [r4, #0]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   142e2:	45d9      	cmp	r9, fp
   142e4:	bf08      	it	eq
   142e6:	f8d5 9004 	ldreq.w	r9, [r5, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   142ea:	f001 f96d 	bl	155c8 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
   142ee:	2600      	movs	r6, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   142f0:	4603      	mov	r3, r0
            for(a = 0; a < disp_refr->inv_p; a++) {
   142f2:	6822      	ldr	r2, [r4, #0]
   142f4:	f8b2 1160 	ldrh.w	r1, [r2, #352]	; 0x160
   142f8:	b2b0      	uxth	r0, r6
   142fa:	f3c1 0109 	ubfx	r1, r1, #0, #10
   142fe:	4281      	cmp	r1, r0
   14300:	f67f aec7 	bls.w	14092 <lv_disp_refr_task+0x4a>
                if(disp_refr->inv_area_joined[a] == 0) {
   14304:	1991      	adds	r1, r2, r6
   14306:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
   1430a:	b149      	cbz	r1, 14320 <lv_disp_refr_task+0x2d8>
   1430c:	3601      	adds	r6, #1
   1430e:	e7f0      	b.n	142f2 <lv_disp_refr_task+0x2aa>
   14310:	2000166c 	.word	0x2000166c
   14314:	20001670 	.word	0x20001670
   14318:	000216d2 	.word	0x000216d2
   1431c:	00021722 	.word	0x00021722
                    uint32_t start_offs =
   14320:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   14324:	f106 0a08 	add.w	sl, r6, #8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14328:	f8b2 5044 	ldrh.w	r5, [r2, #68]	; 0x44
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
   1432c:	f9b2 1040 	ldrsh.w	r1, [r2, #64]	; 0x40
   14330:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
   14334:	3501      	adds	r5, #1
   14336:	1a6d      	subs	r5, r5, r1
   14338:	fb03 1807 	mla	r8, r3, r7, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   1433c:	b22d      	sxth	r5, r5
                    uint32_t start_offs =
   1433e:	ea4f 0888 	mov.w	r8, r8, lsl #2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   14342:	00ad      	lsls	r5, r5, #2
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   14344:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   14348:	6822      	ldr	r2, [r4, #0]
   1434a:	4452      	add	r2, sl
   1434c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
   14350:	42ba      	cmp	r2, r7
   14352:	dbdb      	blt.n	1430c <lv_disp_refr_task+0x2c4>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
   14354:	eb09 0108 	add.w	r1, r9, r8
   14358:	eb0b 0008 	add.w	r0, fp, r8
   1435c:	462a      	mov	r2, r5
   1435e:	9301      	str	r3, [sp, #4]
   14360:	f004 fc6b 	bl	18c3a <memcpy>
                        start_offs += hres * sizeof(lv_color_t);
   14364:	9b01      	ldr	r3, [sp, #4]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   14366:	3701      	adds	r7, #1
                        start_offs += hres * sizeof(lv_color_t);
   14368:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   1436c:	b23f      	sxth	r7, r7
   1436e:	e7eb      	b.n	14348 <lv_disp_refr_task+0x300>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
   14370:	9803      	ldr	r0, [sp, #12]
   14372:	f008 fe29 	bl	1cfc8 <lv_tick_elaps>
   14376:	4b03      	ldr	r3, [pc, #12]	; (14384 <lv_disp_refr_task+0x33c>)
   14378:	4601      	mov	r1, r0
   1437a:	681a      	ldr	r2, [r3, #0]
   1437c:	4620      	mov	r0, r4
   1437e:	47a8      	blx	r5
   14380:	e6a0      	b.n	140c4 <lv_disp_refr_task+0x7c>
   14382:	bf00      	nop
   14384:	20001670 	.word	0x20001670

00014388 <lv_style_init>:
{
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
   14388:	4977      	ldr	r1, [pc, #476]	; (14568 <lv_style_init+0x1e0>)
{
   1438a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
   1438e:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
    lv_style_scr.body.shadow.width = 0;

    lv_style_scr.text.opa          = LV_OPA_COVER;
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
   14390:	4c76      	ldr	r4, [pc, #472]	; (1456c <lv_style_init+0x1e4>)
    lv_style_scr.debug_sentinel = LV_STYLE_DEGUG_SENTINEL_VALUE;
#endif
#endif

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
   14392:	4e77      	ldr	r6, [pc, #476]	; (14570 <lv_style_init+0x1e8>)
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
   14394:	4f77      	ldr	r7, [pc, #476]	; (14574 <lv_style_init+0x1ec>)
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
   14396:	f8df 925c 	ldr.w	r9, [pc, #604]	; 145f4 <lv_style_init+0x26c>
    lv_style_plain.body.padding.right  = LV_DPI / 20;
    lv_style_plain.body.padding.top    = LV_DPI / 20;
    lv_style_plain.body.padding.bottom = LV_DPI / 20;

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
   1439a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 145f8 <lv_style_init+0x270>
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
   1439e:	640f      	str	r7, [r1, #64]	; 0x40
    lv_style_scr.glass               = 0;
   143a0:	f36f 0300 	bfc	r3, #0, #1
   143a4:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
   143a6:	2305      	movs	r3, #5
   143a8:	850b      	strh	r3, [r1, #40]	; 0x28
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
   143aa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   143ae:	610b      	str	r3, [r1, #16]
    lv_style_scr.body.border.width = 0;
   143b0:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
   143b4:	614b      	str	r3, [r1, #20]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
   143b6:	2301      	movs	r3, #1
   143b8:	778b      	strb	r3, [r1, #30]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
   143ba:	4b6f      	ldr	r3, [pc, #444]	; (14578 <lv_style_init+0x1f0>)
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
   143bc:	648f      	str	r7, [r1, #72]	; 0x48
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
   143be:	e9c1 340b 	strd	r3, r4, [r1, #44]	; 0x2c
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
   143c2:	4b6e      	ldr	r3, [pc, #440]	; (1457c <lv_style_init+0x1f4>)
   143c4:	634b      	str	r3, [r1, #52]	; 0x34
    lv_style_scr.text.letter_space = 0;
   143c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   143ca:	638b      	str	r3, [r1, #56]	; 0x38
    lv_style_scr.text.opa          = LV_OPA_COVER;
   143cc:	23ff      	movs	r3, #255	; 0xff
   143ce:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    lv_style_scr.image.intense = LV_OPA_TRANSP;
   143d2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   143d6:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
    lv_style_scr.line.width   = 2;
   143da:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
   143dc:	f8c1 9018 	str.w	r9, [r1, #24]
    lv_style_scr.line.width   = 2;
   143e0:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
   143e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    lv_style_scr.body.radius         = 0;
   143e8:	2500      	movs	r5, #0
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
   143ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    lv_style_scr.line.width   = 2;
   143ee:	f043 0302 	orr.w	r3, r3, #2
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
   143f2:	e9c1 8801 	strd	r8, r8, [r1, #4]
    lv_style_scr.body.padding.left   = 0;
   143f6:	e9c1 5508 	strd	r5, r5, [r1, #32]
    lv_style_scr.line.width   = 2;
   143fa:	64cb      	str	r3, [r1, #76]	; 0x4c
    lv_style_copy(&lv_style_plain, &lv_style_scr);
   143fc:	4630      	mov	r0, r6
    lv_style_scr.body.radius         = 0;
   143fe:	818d      	strh	r5, [r1, #12]
    lv_style_scr.body.opa            = LV_OPA_COVER;
   14400:	f881 800e 	strb.w	r8, [r1, #14]
    lv_style_scr.body.shadow.width = 0;
   14404:	838d      	strh	r5, [r1, #28]
    lv_style_copy(&lv_style_plain, &lv_style_scr);
   14406:	f007 fdcb 	bl	1bfa0 <lv_style_copy>
    lv_style_plain.body.padding.top    = LV_DPI / 20;
   1440a:	f04f 1305 	mov.w	r3, #327685	; 0x50005
    lv_style_plain.body.padding.left   = LV_DPI / 20;
   1440e:	e9c6 3308 	strd	r3, r3, [r6, #32]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
   14412:	4631      	mov	r1, r6
   14414:	4650      	mov	r0, sl
   14416:	f007 fdc3 	bl	1bfa0 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
   1441a:	e9ca 4401 	strd	r4, r4, [sl, #4]

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
   1441e:	4c58      	ldr	r4, [pc, #352]	; (14580 <lv_style_init+0x1f8>)
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
   14420:	4b58      	ldr	r3, [pc, #352]	; (14584 <lv_style_init+0x1fc>)
   14422:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
   14426:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
   1442a:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
   1442e:	4631      	mov	r1, r6
   14430:	4620      	mov	r0, r4
   14432:	f007 fdb5 	bl	1bfa0 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
   14436:	62e7      	str	r7, [r4, #44]	; 0x2c
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
   14438:	6427      	str	r7, [r4, #64]	; 0x40
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
   1443a:	64a7      	str	r7, [r4, #72]	; 0x48
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
    lv_style_pretty.body.border.opa   = LV_OPA_30;

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
   1443c:	4f52      	ldr	r7, [pc, #328]	; (14588 <lv_style_init+0x200>)
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
   1443e:	4b53      	ldr	r3, [pc, #332]	; (1458c <lv_style_init+0x204>)
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
   14440:	4a53      	ldr	r2, [pc, #332]	; (14590 <lv_style_init+0x208>)
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
   14442:	f8c4 8004 	str.w	r8, [r4, #4]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
   14446:	60a3      	str	r3, [r4, #8]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
   14448:	6122      	str	r2, [r4, #16]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
   1444a:	4621      	mov	r1, r4
    lv_style_pretty.body.border.opa   = LV_OPA_30;
   1444c:	224c      	movs	r2, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
   1444e:	4638      	mov	r0, r7
    lv_style_pretty.body.radius       = LV_DPI / 15;
   14450:	f04f 0b06 	mov.w	fp, #6
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
   14454:	f04f 0a02 	mov.w	sl, #2
    lv_style_pretty.body.border.opa   = LV_OPA_30;
   14458:	75e2      	strb	r2, [r4, #23]
    lv_style_pretty.body.radius       = LV_DPI / 15;
   1445a:	f8a4 b00c 	strh.w	fp, [r4, #12]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
   1445e:	f8a4 a014 	strh.w	sl, [r4, #20]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
   14462:	f007 fd9d 	bl	1bfa0 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
   14466:	4b49      	ldr	r3, [pc, #292]	; (1458c <lv_style_init+0x204>)
   14468:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
   1446a:	494a      	ldr	r1, [pc, #296]	; (14594 <lv_style_init+0x20c>)
   1446c:	4b4a      	ldr	r3, [pc, #296]	; (14598 <lv_style_init+0x210>)
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
   1446e:	4c4b      	ldr	r4, [pc, #300]	; (1459c <lv_style_init+0x214>)
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
   14470:	4a4b      	ldr	r2, [pc, #300]	; (145a0 <lv_style_init+0x218>)
   14472:	62fa      	str	r2, [r7, #44]	; 0x2c
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
   14474:	e9c7 1301 	strd	r1, r3, [r7, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
   14478:	f5a3 13b1 	sub.w	r3, r3, #1449984	; 0x162000
   1447c:	f6a3 5349 	subw	r3, r3, #3401	; 0xd49
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
   14480:	643a      	str	r2, [r7, #64]	; 0x40
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
   14482:	613b      	str	r3, [r7, #16]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
   14484:	4631      	mov	r1, r6
   14486:	4620      	mov	r0, r4
   14488:	f007 fd8a 	bl	1bfa0 <lv_style_copy>
    lv_style_transp.glass             = 1;
   1448c:	7823      	ldrb	r3, [r4, #0]
    lv_style_transp.body.border.width = 0;
    lv_style_transp.body.opa          = LV_OPA_TRANSP;

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
   1448e:	4f45      	ldr	r7, [pc, #276]	; (145a4 <lv_style_init+0x21c>)
    lv_style_transp.body.border.width = 0;
   14490:	82a5      	strh	r5, [r4, #20]
    lv_style_transp.glass             = 1;
   14492:	f043 0301 	orr.w	r3, r3, #1
   14496:	7023      	strb	r3, [r4, #0]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
   14498:	73a5      	strb	r5, [r4, #14]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
   1449a:	4621      	mov	r1, r4
    lv_style_transp_fit.body.padding.right  = 0;
    lv_style_transp_fit.body.padding.top    = 0;
    lv_style_transp_fit.body.padding.bottom = 0;

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
   1449c:	4c42      	ldr	r4, [pc, #264]	; (145a8 <lv_style_init+0x220>)
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
   1449e:	4638      	mov	r0, r7
   144a0:	f007 fd7e 	bl	1bfa0 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
   144a4:	e9c7 5508 	strd	r5, r5, [r7, #32]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
   144a8:	4639      	mov	r1, r7
   144aa:	4620      	mov	r0, r4
   144ac:	f007 fd78 	bl	1bfa0 <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
   144b0:	8525      	strh	r5, [r4, #40]	; 0x28

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
   144b2:	4c3e      	ldr	r4, [pc, #248]	; (145ac <lv_style_init+0x224>)
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
   144b4:	4f3e      	ldr	r7, [pc, #248]	; (145b0 <lv_style_init+0x228>)
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
   144b6:	4631      	mov	r1, r6
   144b8:	4620      	mov	r0, r4
   144ba:	f007 fd71 	bl	1bfa0 <lv_style_copy>
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
   144be:	483d      	ldr	r0, [pc, #244]	; (145b4 <lv_style_init+0x22c>)
   144c0:	4b3d      	ldr	r3, [pc, #244]	; (145b8 <lv_style_init+0x230>)
    lv_style_btn_rel.body.shadow.width   = 0;
   144c2:	83a5      	strh	r5, [r4, #28]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
   144c4:	e9c4 0301 	strd	r0, r3, [r4, #4]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
   144c8:	f04f 1610 	mov.w	r6, #1048592	; 0x100010
   144cc:	f04f 1319 	mov.w	r3, #1638425	; 0x190019
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
   144d0:	4d3a      	ldr	r5, [pc, #232]	; (145bc <lv_style_init+0x234>)
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
   144d2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
   144d6:	e9c4 6308 	strd	r6, r3, [r4, #32]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
   144da:	230a      	movs	r3, #10
   144dc:	8523      	strh	r3, [r4, #40]	; 0x28
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
   144de:	4b38      	ldr	r3, [pc, #224]	; (145c0 <lv_style_init+0x238>)
   144e0:	6123      	str	r3, [r4, #16]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
   144e2:	4628      	mov	r0, r5
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
   144e4:	23b2      	movs	r3, #178	; 0xb2
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
   144e6:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
   144ea:	4621      	mov	r1, r4
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
   144ec:	f8c4 9018 	str.w	r9, [r4, #24]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
   144f0:	75e3      	strb	r3, [r4, #23]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
   144f2:	f8a4 b00c 	strh.w	fp, [r4, #12]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
   144f6:	f8a4 a014 	strh.w	sl, [r4, #20]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
   144fa:	f007 fd51 	bl	1bfa0 <lv_style_copy>
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
   144fe:	4b31      	ldr	r3, [pc, #196]	; (145c4 <lv_style_init+0x23c>)
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
   14500:	4e31      	ldr	r6, [pc, #196]	; (145c8 <lv_style_init+0x240>)
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
   14502:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 145fc <lv_style_init+0x274>
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
   14506:	e9c5 7301 	strd	r7, r3, [r5, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
   1450a:	4f30      	ldr	r7, [pc, #192]	; (145cc <lv_style_init+0x244>)
   1450c:	62ef      	str	r7, [r5, #44]	; 0x2c
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
   1450e:	642f      	str	r7, [r5, #64]	; 0x40
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
   14510:	64af      	str	r7, [r5, #72]	; 0x48
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
   14512:	4d2f      	ldr	r5, [pc, #188]	; (145d0 <lv_style_init+0x248>)
   14514:	4621      	mov	r1, r4
   14516:	4628      	mov	r0, r5
   14518:	f007 fd42 	bl	1bfa0 <lv_style_copy>
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
   1451c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 14600 <lv_style_init+0x278>
   14520:	4b2c      	ldr	r3, [pc, #176]	; (145d4 <lv_style_init+0x24c>)
   14522:	e9c5 c301 	strd	ip, r3, [r5, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
   14526:	4b2c      	ldr	r3, [pc, #176]	; (145d8 <lv_style_init+0x250>)
   14528:	612b      	str	r3, [r5, #16]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
   1452a:	4b2c      	ldr	r3, [pc, #176]	; (145dc <lv_style_init+0x254>)
   1452c:	62eb      	str	r3, [r5, #44]	; 0x2c
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
   1452e:	642b      	str	r3, [r5, #64]	; 0x40
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
   14530:	64ab      	str	r3, [r5, #72]	; 0x48
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
   14532:	4629      	mov	r1, r5
   14534:	4630      	mov	r0, r6
   14536:	f007 fd33 	bl	1bfa0 <lv_style_copy>
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
   1453a:	4d29      	ldr	r5, [pc, #164]	; (145e0 <lv_style_init+0x258>)
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
   1453c:	4b29      	ldr	r3, [pc, #164]	; (145e4 <lv_style_init+0x25c>)
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
   1453e:	62f7      	str	r7, [r6, #44]	; 0x2c
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
   14540:	e9c6 8301 	strd	r8, r3, [r6, #4]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
   14544:	6437      	str	r7, [r6, #64]	; 0x40
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
   14546:	64b7      	str	r7, [r6, #72]	; 0x48
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
   14548:	4621      	mov	r1, r4
   1454a:	4628      	mov	r0, r5
   1454c:	f007 fd28 	bl	1bfa0 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
   14550:	4b25      	ldr	r3, [pc, #148]	; (145e8 <lv_style_init+0x260>)
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
   14552:	e9c5 3301 	strd	r3, r3, [r5, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
   14556:	4b25      	ldr	r3, [pc, #148]	; (145ec <lv_style_init+0x264>)
   14558:	612b      	str	r3, [r5, #16]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
   1455a:	4b25      	ldr	r3, [pc, #148]	; (145f0 <lv_style_init+0x268>)
   1455c:	62eb      	str	r3, [r5, #44]	; 0x2c
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
   1455e:	642b      	str	r3, [r5, #64]	; 0x40
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
   14560:	64ab      	str	r3, [r5, #72]	; 0x48
}
   14562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14566:	bf00      	nop
   14568:	20001944 	.word	0x20001944
   1456c:	ff5596d8 	.word	0xff5596d8
   14570:	20001804 	.word	0x20001804
   14574:	ff202020 	.word	0xff202020
   14578:	ff303030 	.word	0xff303030
   1457c:	2000d018 	.word	0x2000d018
   14580:	200018a4 	.word	0x200018a4
   14584:	fff0f0f0 	.word	0xfff0f0f0
   14588:	200018f4 	.word	0x200018f4
   1458c:	ffc0c0c0 	.word	0xffc0c0c0
   14590:	ff404040 	.word	0xff404040
   14594:	ff6b9ac7 	.word	0xff6b9ac7
   14598:	ff2b598b 	.word	0xff2b598b
   1459c:	20001994 	.word	0x20001994
   145a0:	ffe0e0e0 	.word	0xffe0e0e0
   145a4:	200019e4 	.word	0x200019e4
   145a8:	20001a34 	.word	0x20001a34
   145ac:	20001714 	.word	0x20001714
   145b0:	ff336294 	.word	0xff336294
   145b4:	ff76a2d0 	.word	0xff76a2d0
   145b8:	ff193a5d 	.word	0xff193a5d
   145bc:	200016c4 	.word	0x200016c4
   145c0:	ff0b1928 	.word	0xff0b1928
   145c4:	ff10263c 	.word	0xff10263c
   145c8:	20001764 	.word	0x20001764
   145cc:	ffa4b5c6 	.word	0xffa4b5c6
   145d0:	200017b4 	.word	0x200017b4
   145d4:	ff376290 	.word	0xff376290
   145d8:	ff01070d 	.word	0xff01070d
   145dc:	ffc8ddf4 	.word	0xffc8ddf4
   145e0:	20001674 	.word	0x20001674
   145e4:	ff2b4c70 	.word	0xff2b4c70
   145e8:	ffd8d8d8 	.word	0xffd8d8d8
   145ec:	ff909090 	.word	0xff909090
   145f0:	ff707070 	.word	0xff707070
   145f4:	ff808080 	.word	0xff808080
   145f8:	20001854 	.word	0x20001854
   145fc:	ff021427 	.word	0xff021427
   14600:	ff0a1122 	.word	0xff0a1122

00014604 <lv_draw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa)
{
   14604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14608:	b0a3      	sub	sp, #140	; 0x8c
   1460a:	469a      	mov	sl, r3
   1460c:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
   14610:	9308      	str	r3, [sp, #32]
    /*clang-format off*/
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   14612:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   14616:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   1461a:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
   1461e:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
   14622:	931b      	str	r3, [sp, #108]	; 0x6c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   14624:	4bb4      	ldr	r3, [pc, #720]	; (148f8 <lv_draw_letter+0x2f4>)
{
   14626:	4617      	mov	r7, r2
   14628:	4604      	mov	r4, r0
   1462a:	460d      	mov	r5, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   1462c:	aa1e      	add	r2, sp, #120	; 0x78
   1462e:	f103 0c10 	add.w	ip, r3, #16
   14632:	6818      	ldr	r0, [r3, #0]
   14634:	6859      	ldr	r1, [r3, #4]
   14636:	4616      	mov	r6, r2
   14638:	c603      	stmia	r6!, {r0, r1}
   1463a:	3308      	adds	r3, #8
   1463c:	4563      	cmp	r3, ip
   1463e:	4632      	mov	r2, r6
   14640:	d1f7      	bne.n	14632 <lv_draw_letter+0x2e>
                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};
    /*clang-format on*/

    if(opa < LV_OPA_MIN) return;
   14642:	9b08      	ldr	r3, [sp, #32]
   14644:	2b0f      	cmp	r3, #15
   14646:	d90a      	bls.n	1465e <lv_draw_letter+0x5a>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   14648:	2bfc      	cmp	r3, #252	; 0xfc
   1464a:	bf28      	it	cs
   1464c:	23ff      	movcs	r3, #255	; 0xff
   1464e:	9308      	str	r3, [sp, #32]

    if(font_p == NULL) {
   14650:	b947      	cbnz	r7, 14664 <lv_draw_letter+0x60>
        LV_LOG_WARN("Font: character's bitmap not found");
   14652:	4baa      	ldr	r3, [pc, #680]	; (148fc <lv_draw_letter+0x2f8>)
   14654:	49aa      	ldr	r1, [pc, #680]	; (14900 <lv_draw_letter+0x2fc>)
   14656:	22f7      	movs	r2, #247	; 0xf7
   14658:	2002      	movs	r0, #2
   1465a:	f001 fae1 	bl	15c20 <lv_log_add>

        /*Next row in VDB*/
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
    }
}
   1465e:	b023      	add	sp, #140	; 0x8c
   14660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
   14664:	2300      	movs	r3, #0
   14666:	4652      	mov	r2, sl
   14668:	a91c      	add	r1, sp, #112	; 0x70
   1466a:	4638      	mov	r0, r7
   1466c:	f009 f961 	bl	1d932 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
   14670:	2800      	cmp	r0, #0
   14672:	d0f4      	beq.n	1465e <lv_draw_letter+0x5a>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   14674:	f99d 1075 	ldrsb.w	r1, [sp, #117]	; 0x75
   14678:	9106      	str	r1, [sp, #24]
    if(g.bpp == 3) g.bpp = 4;
   1467a:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   1467e:	f9b4 9000 	ldrsh.w	r9, [r4]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   14682:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   14686:	f99d 2074 	ldrsb.w	r2, [sp, #116]	; 0x74
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   1468a:	f897 8008 	ldrb.w	r8, [r7, #8]
   1468e:	7a7b      	ldrb	r3, [r7, #9]
   14690:	f89d 4073 	ldrb.w	r4, [sp, #115]	; 0x73
    if(g.bpp == 3) g.bpp = 4;
   14694:	2903      	cmp	r1, #3
   14696:	d106      	bne.n	146a6 <lv_draw_letter+0xa2>
   14698:	2104      	movs	r1, #4
   1469a:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
            bitmask_init  = 0xF0;
   1469e:	21f0      	movs	r1, #240	; 0xf0
   146a0:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = bpp4_opa_table;
   146a2:	a91e      	add	r1, sp, #120	; 0x78
   146a4:	e019      	b.n	146da <lv_draw_letter+0xd6>
    switch(g.bpp) {
   146a6:	3901      	subs	r1, #1
   146a8:	2907      	cmp	r1, #7
   146aa:	d8d8      	bhi.n	1465e <lv_draw_letter+0x5a>
   146ac:	a001      	add	r0, pc, #4	; (adr r0, 146b4 <lv_draw_letter+0xb0>)
   146ae:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   146b2:	bf00      	nop
   146b4:	000148a9 	.word	0x000148a9
   146b8:	000146d5 	.word	0x000146d5
   146bc:	0001465f 	.word	0x0001465f
   146c0:	0001469f 	.word	0x0001469f
   146c4:	0001465f 	.word	0x0001465f
   146c8:	0001465f 	.word	0x0001465f
   146cc:	0001465f 	.word	0x0001465f
   146d0:	000148a1 	.word	0x000148a1
            bitmask_init  = 0xC0;
   146d4:	21c0      	movs	r1, #192	; 0xc0
   146d6:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = bpp2_opa_table;
   146d8:	a91b      	add	r1, sp, #108	; 0x6c
            bpp_opa_table = bpp1_opa_table;
   146da:	9105      	str	r1, [sp, #20]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
   146dc:	4638      	mov	r0, r7
   146de:	4651      	mov	r1, sl
   146e0:	930a      	str	r3, [sp, #40]	; 0x28
   146e2:	9207      	str	r2, [sp, #28]
   146e4:	f009 f923 	bl	1d92e <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
   146e8:	9004      	str	r0, [sp, #16]
   146ea:	2800      	cmp	r0, #0
   146ec:	d0b7      	beq.n	1465e <lv_draw_letter+0x5a>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   146ee:	9a07      	ldr	r2, [sp, #28]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   146f0:	f9b5 1000 	ldrsh.w	r1, [r5]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   146f4:	4491      	add	r9, r2
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   146f6:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
   146fa:	fa0f f989 	sxth.w	r9, r9
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   146fe:	444a      	add	r2, r9
   14700:	428a      	cmp	r2, r1
   14702:	dbac      	blt.n	1465e <lv_draw_letter+0x5a>
   14704:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   14708:	454a      	cmp	r2, r9
   1470a:	dba8      	blt.n	1465e <lv_draw_letter+0x5a>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   1470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   1470e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   14712:	eba8 0803 	sub.w	r8, r8, r3
   14716:	9b06      	ldr	r3, [sp, #24]
   14718:	4446      	add	r6, r8
   1471a:	b236      	sxth	r6, r6
   1471c:	441c      	add	r4, r3
   1471e:	1b33      	subs	r3, r6, r4
   14720:	fa0f f883 	sxth.w	r8, r3
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
   14724:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
   14728:	4443      	add	r3, r8
   1472a:	4293      	cmp	r3, r2
   1472c:	db97      	blt.n	1465e <lv_draw_letter+0x5a>
   1472e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   14732:	4543      	cmp	r3, r8
   14734:	db93      	blt.n	1465e <lv_draw_letter+0x5a>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
   14736:	f7ff fc81 	bl	1403c <lv_refr_get_disp_refreshing>
   1473a:	9011      	str	r0, [sp, #68]	; 0x44
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1473c:	f008 fc27 	bl	1cf8e <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14740:	8a83      	ldrh	r3, [r0, #20]
   14742:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   14746:	9007      	str	r0, [sp, #28]
   14748:	3301      	adds	r3, #1
   1474a:	1a5b      	subs	r3, r3, r1
   1474c:	b21b      	sxth	r3, r3
   1474e:	930b      	str	r3, [sp, #44]	; 0x2c
    bool subpx = font_p->subpx == LV_FONT_SUBPX_NONE ? false : true;
   14750:	7abb      	ldrb	r3, [r7, #10]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
   14752:	f8d0 c008 	ldr.w	ip, [r0, #8]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
   14756:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
   1475a:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
   1475e:	f9b5 a000 	ldrsh.w	sl, [r5]
    if(subpx == false) {
   14762:	f013 0303 	ands.w	r3, r3, #3
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
   14766:	fb00 fe02 	mul.w	lr, r0, r2
    if(subpx == false) {
   1476a:	930c      	str	r3, [sp, #48]	; 0x30
   1476c:	f040 80a5 	bne.w	148ba <lv_draw_letter+0x2b6>
        col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
   14770:	45ca      	cmp	sl, r9
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
   14772:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
   14776:	bfd4      	ite	le
   14778:	f8dd a030 	ldrle.w	sl, [sp, #48]	; 0x30
   1477c:	ebaa 0a09 	subgt.w	sl, sl, r9
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
   14780:	eb00 0709 	add.w	r7, r0, r9
        col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
   14784:	bfc8      	it	gt
   14786:	fa0f fa8a 	sxthgt.w	sl, sl
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
   1478a:	429f      	cmp	r7, r3
   1478c:	f300 8090 	bgt.w	148b0 <lv_draw_letter+0x2ac>
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   14790:	b203      	sxth	r3, r0
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
   14792:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
   14796:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   1479a:	9306      	str	r3, [sp, #24]
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
   1479c:	4547      	cmp	r7, r8
   1479e:	bfc8      	it	gt
   147a0:	193f      	addgt	r7, r7, r4
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
   147a2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
   147a6:	bfc8      	it	gt
   147a8:	1bbf      	subgt	r7, r7, r6
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
   147aa:	eb00 0508 	add.w	r5, r0, r8
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
   147ae:	bfcc      	ite	gt
   147b0:	b23f      	sxthgt	r7, r7
   147b2:	2700      	movle	r7, #0
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
   147b4:	429d      	cmp	r5, r3
   147b6:	bfc2      	ittt	gt
   147b8:	3401      	addgt	r4, #1
   147ba:	18e4      	addgt	r4, r4, r3
   147bc:	1ba0      	subgt	r0, r4, r6
   147be:	b203      	sxth	r3, r0
   147c0:	930f      	str	r3, [sp, #60]	; 0x3c
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
   147c2:	9b07      	ldr	r3, [sp, #28]
   147c4:	f9b3 4012 	ldrsh.w	r4, [r3, #18]
   147c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   147ca:	eba9 0101 	sub.w	r1, r9, r1
   147ce:	eba8 0404 	sub.w	r4, r8, r4
   147d2:	fb03 1404 	mla	r4, r3, r4, r1
   147d6:	fb03 f107 	mul.w	r1, r3, r7
    if(subpx) vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
   147da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
   147dc:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
    if(subpx) vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
   147e0:	2b00      	cmp	r3, #0
   147e2:	f000 8086 	beq.w	148f2 <lv_draw_letter+0x2ee>
   147e6:	2303      	movs	r3, #3
   147e8:	fb9a f3f3 	sdiv	r3, sl, r3
   147ec:	440b      	add	r3, r1
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
   147ee:	fb12 f50a 	smulbb	r5, r2, sl
    else vdb_buf_tmp += (row_start * vdb_width) + col_start;
   147f2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    map_p += bit_ofs >> 3;
   147f6:	9b04      	ldr	r3, [sp, #16]
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
   147f8:	9a06      	ldr	r2, [sp, #24]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
   147fa:	fb07 550e 	mla	r5, r7, lr, r5
    map_p += bit_ofs >> 3;
   147fe:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
   14802:	930a      	str	r3, [sp, #40]	; 0x28
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
   14804:	f005 0307 	and.w	r3, r5, #7
   14808:	9304      	str	r3, [sp, #16]
    uint8_t txt_rgb[3] = {LV_COLOR_GET_R(color), LV_COLOR_GET_G(color), LV_COLOR_GET_B(color)};
   1480a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1480c:	f3c3 4307 	ubfx	r3, r3, #16, #8
   14810:	9312      	str	r3, [sp, #72]	; 0x48
   14812:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   14814:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14818:	9313      	str	r3, [sp, #76]	; 0x4c
   1481a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1481c:	b2db      	uxtb	r3, r3
   1481e:	9314      	str	r3, [sp, #80]	; 0x50
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
   14820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14822:	4453      	add	r3, sl
   14824:	1a9b      	subs	r3, r3, r2
   14826:	009b      	lsls	r3, r3, #2
   14828:	9316      	str	r3, [sp, #88]	; 0x58
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
   1482a:	eba2 030a 	sub.w	r3, r2, sl
   1482e:	f06f 0202 	mvn.w	r2, #2
   14832:	fb93 f3f2 	sdiv	r3, r3, r2
   14836:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14838:	4413      	add	r3, r2
   1483a:	009b      	lsls	r3, r3, #2
   1483c:	9315      	str	r3, [sp, #84]	; 0x54
    for(row = row_start; row < row_end; row++) {
   1483e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14840:	429f      	cmp	r7, r3
   14842:	f6bf af0c 	bge.w	1465e <lv_draw_letter+0x5a>
        bitmask = bitmask_init >> col_bit;
   14846:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14848:	9a04      	ldr	r2, [sp, #16]
   1484a:	4113      	asrs	r3, r2
   1484c:	b2db      	uxtb	r3, r3
        for(col = col_start; col < col_end; col++) {
   1484e:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   14852:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   14856:	9310      	str	r3, [sp, #64]	; 0x40
                                *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
   14858:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1485a:	f3c3 4307 	ubfx	r3, r3, #16, #8
        uint8_t sub_px_cnt = 0;
   1485e:	2600      	movs	r6, #0
                                *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
   14860:	9317      	str	r3, [sp, #92]	; 0x5c
        for(col = col_start; col < col_end; col++) {
   14862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14864:	9a06      	ldr	r2, [sp, #24]
   14866:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
   1486a:	4293      	cmp	r3, r2
   1486c:	db4a      	blt.n	14904 <lv_draw_letter+0x300>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
   1486e:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
   14872:	4453      	add	r3, sl
   14874:	1a9b      	subs	r3, r3, r2
   14876:	9a04      	ldr	r2, [sp, #16]
   14878:	fb13 f301 	smulbb	r3, r3, r1
   1487c:	441a      	add	r2, r3
        map_p += (col_bit >> 3);
   1487e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
   14880:	b295      	uxth	r5, r2
        map_p += (col_bit >> 3);
   14882:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
   14886:	930a      	str	r3, [sp, #40]	; 0x28
        col_bit = col_bit & 0x7;
   14888:	f005 0307 	and.w	r3, r5, #7
   1488c:	9304      	str	r3, [sp, #16]
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
   1488e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14890:	2b00      	cmp	r3, #0
   14892:	f000 80f9 	beq.w	14a88 <lv_draw_letter+0x484>
   14896:	9b15      	ldr	r3, [sp, #84]	; 0x54
    for(row = row_start; row < row_end; row++) {
   14898:	3701      	adds	r7, #1
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
   1489a:	441c      	add	r4, r3
    for(row = row_start; row < row_end; row++) {
   1489c:	b23f      	sxth	r7, r7
   1489e:	e7ce      	b.n	1483e <lv_draw_letter+0x23a>
            bitmask_init  = 0xFF;
   148a0:	21ff      	movs	r1, #255	; 0xff
   148a2:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = NULL;
   148a4:	2100      	movs	r1, #0
   148a6:	e718      	b.n	146da <lv_draw_letter+0xd6>
            bitmask_init  = 0x80;
   148a8:	2180      	movs	r1, #128	; 0x80
   148aa:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = bpp1_opa_table;
   148ac:	a919      	add	r1, sp, #100	; 0x64
   148ae:	e714      	b.n	146da <lv_draw_letter+0xd6>
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
   148b0:	3301      	adds	r3, #1
   148b2:	eba3 0309 	sub.w	r3, r3, r9
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   148b6:	b21b      	sxth	r3, r3
   148b8:	e76b      	b.n	14792 <lv_draw_letter+0x18e>
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
   148ba:	45ca      	cmp	sl, r9
   148bc:	bfc8      	it	gt
   148be:	ebaa 0a09 	subgt.w	sl, sl, r9
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   148c2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
   148c6:	bfc8      	it	gt
   148c8:	eb0a 0a4a 	addgt.w	sl, sl, sl, lsl #1
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   148cc:	f04f 0703 	mov.w	r7, #3
   148d0:	fbb0 f7f7 	udiv	r7, r0, r7
   148d4:	444f      	add	r7, r9
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
   148d6:	bfcc      	ite	gt
   148d8:	fa0f fa8a 	sxthgt.w	sl, sl
   148dc:	f04f 0a00 	movle.w	sl, #0
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
   148e0:	429f      	cmp	r7, r3
   148e2:	f77f af55 	ble.w	14790 <lv_draw_letter+0x18c>
   148e6:	3301      	adds	r3, #1
   148e8:	eba3 0309 	sub.w	r3, r3, r9
   148ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   148f0:	e7e1      	b.n	148b6 <lv_draw_letter+0x2b2>
    else vdb_buf_tmp += (row_start * vdb_width) + col_start;
   148f2:	eb01 030a 	add.w	r3, r1, sl
   148f6:	e77a      	b.n	147ee <lv_draw_letter+0x1ea>
   148f8:	0001e5d5 	.word	0x0001e5d5
   148fc:	00021758 	.word	0x00021758
   14900:	0002177b 	.word	0x0002177b
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
   14904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14906:	9804      	ldr	r0, [sp, #16]
   14908:	781a      	ldrb	r2, [r3, #0]
   1490a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1490c:	401a      	ands	r2, r3
   1490e:	f1c1 0308 	rsb	r3, r1, #8
   14912:	1a1b      	subs	r3, r3, r0
   14914:	411a      	asrs	r2, r3
            if(subpx == false) {
   14916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
   14918:	b2d2      	uxtb	r2, r2
            if(subpx == false) {
   1491a:	2b00      	cmp	r3, #0
   1491c:	d15c      	bne.n	149d8 <lv_draw_letter+0x3d4>
                if(letter_px != 0) {
   1491e:	b30a      	cbz	r2, 14964 <lv_draw_letter+0x360>
                    if(opa == LV_OPA_COVER) {
   14920:	9b08      	ldr	r3, [sp, #32]
   14922:	2bff      	cmp	r3, #255	; 0xff
   14924:	d134      	bne.n	14990 <lv_draw_letter+0x38c>
                        px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
   14926:	2908      	cmp	r1, #8
   14928:	d001      	beq.n	1492e <lv_draw_letter+0x32a>
   1492a:	9b05      	ldr	r3, [sp, #20]
   1492c:	5c9a      	ldrb	r2, [r3, r2]
                    if(disp->driver.set_px_cb) {
   1492e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14930:	695b      	ldr	r3, [r3, #20]
   14932:	461d      	mov	r5, r3
   14934:	2b00      	cmp	r3, #0
   14936:	d035      	beq.n	149a4 <lv_draw_letter+0x3a0>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
   14938:	9b07      	ldr	r3, [sp, #28]
   1493a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1493c:	8a1b      	ldrh	r3, [r3, #16]
   1493e:	9202      	str	r2, [sp, #8]
   14940:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   14942:	9201      	str	r2, [sp, #4]
   14944:	9a07      	ldr	r2, [sp, #28]
   14946:	9811      	ldr	r0, [sp, #68]	; 0x44
   14948:	8a52      	ldrh	r2, [r2, #18]
   1494a:	eba8 0202 	sub.w	r2, r8, r2
   1494e:	eba9 0303 	sub.w	r3, r9, r3
   14952:	443a      	add	r2, r7
   14954:	440b      	add	r3, r1
   14956:	b212      	sxth	r2, r2
   14958:	9907      	ldr	r1, [sp, #28]
   1495a:	9200      	str	r2, [sp, #0]
   1495c:	b21b      	sxth	r3, r3
   1495e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14960:	6889      	ldr	r1, [r1, #8]
   14962:	47a8      	blx	r5
                vdb_buf_tmp++;
   14964:	3404      	adds	r4, #4
            if(col_bit < 8 - g.bpp) {
   14966:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
   1496a:	9904      	ldr	r1, [sp, #16]
   1496c:	f1c3 0208 	rsb	r2, r3, #8
   14970:	4291      	cmp	r1, r2
   14972:	f280 8081 	bge.w	14a78 <lv_draw_letter+0x474>
                col_bit += g.bpp;
   14976:	460a      	mov	r2, r1
   14978:	441a      	add	r2, r3
   1497a:	b292      	uxth	r2, r2
   1497c:	9204      	str	r2, [sp, #16]
                bitmask = bitmask >> g.bpp;
   1497e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14980:	411a      	asrs	r2, r3
   14982:	b2d3      	uxtb	r3, r2
   14984:	930d      	str	r3, [sp, #52]	; 0x34
        for(col = col_start; col < col_end; col++) {
   14986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14988:	3301      	adds	r3, #1
   1498a:	b21b      	sxth	r3, r3
   1498c:	930e      	str	r3, [sp, #56]	; 0x38
   1498e:	e768      	b.n	14862 <lv_draw_letter+0x25e>
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
   14990:	2908      	cmp	r1, #8
                                : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
   14992:	bf1c      	itt	ne
   14994:	9b05      	ldrne	r3, [sp, #20]
   14996:	5c9a      	ldrbne	r2, [r3, r2]
   14998:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1499a:	fb12 f203 	smulbb	r2, r2, r3
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
   1499e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   149a2:	e7c4      	b.n	1492e <lv_draw_letter+0x32a>
                    } else if(vdb_buf_tmp->full != color.full) {
   149a4:	6823      	ldr	r3, [r4, #0]
   149a6:	992c      	ldr	r1, [sp, #176]	; 0xb0
   149a8:	428b      	cmp	r3, r1
   149aa:	d0db      	beq.n	14964 <lv_draw_letter+0x360>
                        if(px_opa > LV_OPA_MAX) {
   149ac:	2afb      	cmp	r2, #251	; 0xfb
   149ae:	d901      	bls.n	149b4 <lv_draw_letter+0x3b0>
                            *vdb_buf_tmp = color;
   149b0:	6021      	str	r1, [r4, #0]
   149b2:	e7d7      	b.n	14964 <lv_draw_letter+0x360>
                        } else if(px_opa > LV_OPA_MIN) {
   149b4:	2a10      	cmp	r2, #16
   149b6:	d9d5      	bls.n	14964 <lv_draw_letter+0x360>
                                *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
   149b8:	7823      	ldrb	r3, [r4, #0]
   149ba:	9202      	str	r2, [sp, #8]
   149bc:	78a2      	ldrb	r2, [r4, #2]
   149be:	9201      	str	r2, [sp, #4]
   149c0:	992c      	ldr	r1, [sp, #176]	; 0xb0
   149c2:	982c      	ldr	r0, [sp, #176]	; 0xb0
   149c4:	7862      	ldrb	r2, [r4, #1]
   149c6:	9200      	str	r2, [sp, #0]
   149c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   149cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   149ce:	b2c0      	uxtb	r0, r0
   149d0:	f007 fae9 	bl	1bfa6 <lv_color_mix.isra.0>
   149d4:	6020      	str	r0, [r4, #0]
   149d6:	e7c5      	b.n	14964 <lv_draw_letter+0x360>
                if(letter_px != 0) {
   149d8:	b132      	cbz	r2, 149e8 <lv_draw_letter+0x3e4>
                    if(opa == LV_OPA_COVER) {
   149da:	9b08      	ldr	r3, [sp, #32]
   149dc:	2bff      	cmp	r3, #255	; 0xff
   149de:	d11b      	bne.n	14a18 <lv_draw_letter+0x414>
                        px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
   149e0:	2908      	cmp	r1, #8
   149e2:	d001      	beq.n	149e8 <lv_draw_letter+0x3e4>
   149e4:	9b05      	ldr	r3, [sp, #20]
   149e6:	5c9a      	ldrb	r2, [r3, r2]
                    font_rgb[sub_px_cnt] = 0;
   149e8:	ab22      	add	r3, sp, #136	; 0x88
   149ea:	4433      	add	r3, r6
                sub_px_cnt ++;
   149ec:	3601      	adds	r6, #1
   149ee:	b2f6      	uxtb	r6, r6
                if(sub_px_cnt == 3) {
   149f0:	2e03      	cmp	r6, #3
                    font_rgb[sub_px_cnt] = 0;
   149f2:	f803 2c20 	strb.w	r2, [r3, #-32]
                if(sub_px_cnt == 3) {
   149f6:	d1b6      	bne.n	14966 <lv_draw_letter+0x362>
                    if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) {
   149f8:	f89d c068 	ldrb.w	ip, [sp, #104]	; 0x68
   149fc:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
   14a00:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
   14a04:	ea4c 0302 	orr.w	r3, ip, r2
   14a08:	4303      	orrs	r3, r0
   14a0a:	d10f      	bne.n	14a2c <lv_draw_letter+0x428>
                        res_color = *vdb_buf_tmp;
   14a0c:	f8d4 b000 	ldr.w	fp, [r4]
                        vdb_buf_tmp->full = res_color.full;
   14a10:	f844 bb04 	str.w	fp, [r4], #4
                    sub_px_cnt = 0;
   14a14:	2600      	movs	r6, #0
   14a16:	e7a6      	b.n	14966 <lv_draw_letter+0x362>
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
   14a18:	2908      	cmp	r1, #8
                                : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
   14a1a:	bf1c      	itt	ne
   14a1c:	9b05      	ldrne	r3, [sp, #20]
   14a1e:	5c9a      	ldrbne	r2, [r3, r2]
   14a20:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14a22:	fb12 f203 	smulbb	r2, r2, r3
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
   14a26:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    font_rgb[sub_px_cnt] = px_opa;
   14a2a:	e7dd      	b.n	149e8 <lv_draw_letter+0x3e4>
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   14a2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   14a2e:	f894 e002 	ldrb.w	lr, [r4, #2]
                        uint8_t bg_rgb[3] = {LV_COLOR_GET_R(*vdb_buf_tmp), LV_COLOR_GET_G(*vdb_buf_tmp), LV_COLOR_GET_B(*vdb_buf_tmp)};
   14a32:	7821      	ldrb	r1, [r4, #0]
   14a34:	7863      	ldrb	r3, [r4, #1]
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   14a36:	f1cc 06ff 	rsb	r6, ip, #255	; 0xff
   14a3a:	fb15 fc0c 	smulbb	ip, r5, ip
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
   14a3e:	9d14      	ldr	r5, [sp, #80]	; 0x50
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   14a40:	fb0e cc06 	mla	ip, lr, r6, ip
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
   14a44:	f1c0 06ff 	rsb	r6, r0, #255	; 0xff
   14a48:	fb15 f000 	smulbb	r0, r5, r0
   14a4c:	fb06 0101 	mla	r1, r6, r1, r0
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   14a50:	f3cc 2c07 	ubfx	ip, ip, #8, #8
                        LV_COLOR_SET_G(res_color, (uint16_t)((uint16_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8);
   14a54:	9813      	ldr	r0, [sp, #76]	; 0x4c
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
   14a56:	f3c1 2107 	ubfx	r1, r1, #8, #8
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
   14a5a:	f36c 4b17 	bfi	fp, ip, #16, #8
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
   14a5e:	f361 0b07 	bfi	fp, r1, #0, #8
                        LV_COLOR_SET_G(res_color, (uint16_t)((uint16_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8);
   14a62:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
   14a66:	fb10 f202 	smulbb	r2, r0, r2
   14a6a:	fb01 2303 	mla	r3, r1, r3, r2
   14a6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14a72:	f363 2b0f 	bfi	fp, r3, #8, #8
   14a76:	e7cb      	b.n	14a10 <lv_draw_letter+0x40c>
                map_p++;
   14a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14a7a:	3301      	adds	r3, #1
   14a7c:	930a      	str	r3, [sp, #40]	; 0x28
                bitmask = bitmask_init;
   14a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14a80:	930d      	str	r3, [sp, #52]	; 0x34
                col_bit = 0;
   14a82:	2300      	movs	r3, #0
   14a84:	9304      	str	r3, [sp, #16]
   14a86:	e77e      	b.n	14986 <lv_draw_letter+0x382>
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
   14a88:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14a8a:	e705      	b.n	14898 <lv_draw_letter+0x294>

00014a8c <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
   14a8c:	4a09      	ldr	r2, [pc, #36]	; (14ab4 <lv_draw_get_buf+0x28>)
{
   14a8e:	b538      	push	{r3, r4, r5, lr}
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
   14a90:	6815      	ldr	r5, [r2, #0]
   14a92:	4c09      	ldr	r4, [pc, #36]	; (14ab8 <lv_draw_get_buf+0x2c>)
   14a94:	4285      	cmp	r5, r0
{
   14a96:	4601      	mov	r1, r0
   14a98:	6823      	ldr	r3, [r4, #0]
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
   14a9a:	d205      	bcs.n	14aa8 <lv_draw_get_buf+0x1c>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
   14a9c:	6010      	str	r0, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
   14a9e:	b92b      	cbnz	r3, 14aac <lv_draw_get_buf+0x20>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
   14aa0:	f000 fefc 	bl	1589c <lv_mem_alloc>
        LV_ASSERT_MEM(LV_GC_ROOT(_lv_draw_buf));
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
   14aa4:	4603      	mov	r3, r0
   14aa6:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_draw_buf));
    return LV_GC_ROOT(_lv_draw_buf);
}
   14aa8:	4618      	mov	r0, r3
   14aaa:	bd38      	pop	{r3, r4, r5, pc}
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
   14aac:	4618      	mov	r0, r3
   14aae:	f000 ff39 	bl	15924 <lv_mem_realloc>
   14ab2:	e7f7      	b.n	14aa4 <lv_draw_get_buf+0x18>
   14ab4:	20001a84 	.word	0x20001a84
   14ab8:	20001aac 	.word	0x20001aac

00014abc <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
   14abc:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
   14abe:	4c05      	ldr	r4, [pc, #20]	; (14ad4 <lv_draw_free_buf+0x18>)
   14ac0:	6820      	ldr	r0, [r4, #0]
   14ac2:	b128      	cbz	r0, 14ad0 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
   14ac4:	f000 ff10 	bl	158e8 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
   14ac8:	4a03      	ldr	r2, [pc, #12]	; (14ad8 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
   14aca:	2300      	movs	r3, #0
   14acc:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
   14ace:	6013      	str	r3, [r2, #0]
    }
}
   14ad0:	bd10      	pop	{r4, pc}
   14ad2:	bf00      	nop
   14ad4:	20001aac 	.word	0x20001aac
   14ad8:	20001a84 	.word	0x20001a84

00014adc <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
   14adc:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
   14ade:	3830      	subs	r0, #48	; 0x30
   14ae0:	b2c0      	uxtb	r0, r0
   14ae2:	2809      	cmp	r0, #9
   14ae4:	d90b      	bls.n	14afe <hex_char_to_num+0x22>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
   14ae6:	2b60      	cmp	r3, #96	; 0x60
   14ae8:	bf84      	itt	hi
   14aea:	3b20      	subhi	r3, #32
   14aec:	b2db      	uxtbhi	r3, r3

        switch(hex) {
   14aee:	3b41      	subs	r3, #65	; 0x41
   14af0:	b2db      	uxtb	r3, r3
   14af2:	2b05      	cmp	r3, #5
   14af4:	d802      	bhi.n	14afc <hex_char_to_num+0x20>
   14af6:	4a02      	ldr	r2, [pc, #8]	; (14b00 <hex_char_to_num+0x24>)
   14af8:	5cd0      	ldrb	r0, [r2, r3]
   14afa:	4770      	bx	lr
{
   14afc:	2000      	movs	r0, #0
        default: result = 0; break;
        }
    }

    return result;
}
   14afe:	4770      	bx	lr
   14b00:	000217b7 	.word	0x000217b7

00014b04 <lv_draw_label>:
{
   14b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b08:	b0ad      	sub	sp, #180	; 0xb4
   14b0a:	4606      	mov	r6, r0
   14b0c:	9305      	str	r3, [sp, #20]
    if (txt[0] == '\0')  return;
   14b0e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
{
   14b10:	910b      	str	r1, [sp, #44]	; 0x2c
    if (txt[0] == '\0')  return;
   14b12:	781b      	ldrb	r3, [r3, #0]
{
   14b14:	f89d b0dc 	ldrb.w	fp, [sp, #220]	; 0xdc
   14b18:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
   14b1a:	4615      	mov	r5, r2
    if (txt[0] == '\0')  return;
   14b1c:	2b00      	cmp	r3, #0
   14b1e:	f000 80a7 	beq.w	14c70 <lv_draw_label+0x16c>
    const lv_font_t * font = style->text.font;
   14b22:	6b53      	ldr	r3, [r2, #52]	; 0x34
   14b24:	9304      	str	r3, [sp, #16]
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
   14b26:	f01b 0f02 	tst.w	fp, #2
   14b2a:	f040 80a4 	bne.w	14c76 <lv_draw_label+0x172>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14b2e:	8883      	ldrh	r3, [r0, #4]
   14b30:	8802      	ldrh	r2, [r0, #0]
   14b32:	3301      	adds	r3, #1
   14b34:	1a9b      	subs	r3, r3, r2
   14b36:	b21b      	sxth	r3, r3
        w = p.x;
   14b38:	9308      	str	r3, [sp, #32]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
   14b3a:	9b04      	ldr	r3, [sp, #16]
   14b3c:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
   14b3e:	7a1b      	ldrb	r3, [r3, #8]
   14b40:	4413      	add	r3, r2
   14b42:	b21b      	sxth	r3, r3
   14b44:	9307      	str	r3, [sp, #28]
    pos.x = coords->x1;
   14b46:	8833      	ldrh	r3, [r6, #0]
   14b48:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    if(offset != NULL) {
   14b4c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    pos.y = coords->y1;
   14b4e:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
   14b52:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    if(offset != NULL) {
   14b56:	2b00      	cmp	r3, #0
   14b58:	f000 820e 	beq.w	14f78 <lv_draw_label+0x474>
        x_ofs = offset->x;
   14b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
   14b60:	930e      	str	r3, [sp, #56]	; 0x38
        y_ofs = offset->y;
   14b62:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   14b64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
   14b68:	18d1      	adds	r1, r2, r3
   14b6a:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
    if(hint && y_ofs == 0 && coords->y1 < 0) {
   14b6e:	2f00      	cmp	r7, #0
   14b70:	f000 8206 	beq.w	14f80 <lv_draw_label+0x47c>
   14b74:	2b00      	cmp	r3, #0
   14b76:	f040 8203 	bne.w	14f80 <lv_draw_label+0x47c>
   14b7a:	2a00      	cmp	r2, #0
   14b7c:	f280 8200 	bge.w	14f80 <lv_draw_label+0x47c>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
   14b80:	68bb      	ldr	r3, [r7, #8]
   14b82:	1a9b      	subs	r3, r3, r2
   14b84:	9a07      	ldr	r2, [sp, #28]
   14b86:	2b00      	cmp	r3, #0
   14b88:	bfb8      	it	lt
   14b8a:	425b      	neglt	r3, r3
   14b8c:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
   14b90:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
   14b94:	bfc4      	itt	gt
   14b96:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
   14b9a:	603b      	strgt	r3, [r7, #0]
        last_line_start = hint->line_start;
   14b9c:	683c      	ldr	r4, [r7, #0]
    if(hint && last_line_start >= 0) {
   14b9e:	2c00      	cmp	r4, #0
   14ba0:	f2c0 81ee 	blt.w	14f80 <lv_draw_label+0x47c>
        pos.y += hint->y;
   14ba4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   14ba8:	687b      	ldr	r3, [r7, #4]
   14baa:	4413      	add	r3, r2
   14bac:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   14bb0:	9836      	ldr	r0, [sp, #216]	; 0xd8
   14bb2:	f8cd b000 	str.w	fp, [sp]
   14bb6:	9b08      	ldr	r3, [sp, #32]
   14bb8:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
   14bbc:	9904      	ldr	r1, [sp, #16]
   14bbe:	4420      	add	r0, r4
   14bc0:	f000 ff32 	bl	15a28 <lv_txt_get_next_line>
   14bc4:	eb00 0804 	add.w	r8, r0, r4
    while(pos.y + line_height < mask->y1) {
   14bc8:	9a07      	ldr	r2, [sp, #28]
   14bca:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
   14bce:	4413      	add	r3, r2
   14bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14bd2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
   14bd6:	4293      	cmp	r3, r2
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   14bd8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    while(pos.y + line_height < mask->y1) {
   14bda:	db61      	blt.n	14ca0 <lv_draw_label+0x19c>
    if(flag & LV_TXT_FLAG_CENTER) {
   14bdc:	1918      	adds	r0, r3, r4
   14bde:	f01b 0304 	ands.w	r3, fp, #4
   14be2:	9312      	str	r3, [sp, #72]	; 0x48
   14be4:	f000 8084 	beq.w	14cf0 <lv_draw_label+0x1ec>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
   14be8:	eba8 0104 	sub.w	r1, r8, r4
   14bec:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
   14bf0:	9a04      	ldr	r2, [sp, #16]
   14bf2:	f8cd b000 	str.w	fp, [sp]
   14bf6:	b289      	uxth	r1, r1
   14bf8:	f000 fec6 	bl	15988 <lv_txt_get_width>
   14bfc:	88b3      	ldrh	r3, [r6, #4]
   14bfe:	8832      	ldrh	r2, [r6, #0]
   14c00:	3301      	adds	r3, #1
   14c02:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
   14c04:	b21b      	sxth	r3, r3
   14c06:	1a18      	subs	r0, r3, r0
   14c08:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   14c0c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   14c10:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
   14c14:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
   14c18:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   14c1c:	9309      	str	r3, [sp, #36]	; 0x24
   14c1e:	9b05      	ldr	r3, [sp, #20]
   14c20:	2bff      	cmp	r3, #255	; 0xff
   14c22:	d004      	beq.n	14c2e <lv_draw_label+0x12a>
   14c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14c26:	9a05      	ldr	r2, [sp, #20]
   14c28:	4353      	muls	r3, r2
   14c2a:	0a1b      	lsrs	r3, r3, #8
   14c2c:	9309      	str	r3, [sp, #36]	; 0x24
    if(sel) {
   14c2e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   14c30:	2b00      	cmp	r3, #0
   14c32:	d073      	beq.n	14d1c <lv_draw_label+0x218>
        sel_start = sel->start;
   14c34:	881b      	ldrh	r3, [r3, #0]
   14c36:	9306      	str	r3, [sp, #24]
        sel_end = sel->end;
   14c38:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   14c3a:	885b      	ldrh	r3, [r3, #2]
   14c3c:	9305      	str	r3, [sp, #20]
        if(sel_start > sel_end) {
   14c3e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   14c42:	4293      	cmp	r3, r2
   14c44:	d901      	bls.n	14c4a <lv_draw_label+0x146>
   14c46:	e9cd 3205 	strd	r3, r2, [sp, #20]
    lv_style_copy(&sel_style, &lv_style_plain_color);
   14c4a:	4999      	ldr	r1, [pc, #612]	; (14eb0 <lv_draw_label+0x3ac>)
   14c4c:	a818      	add	r0, sp, #96	; 0x60
   14c4e:	f007 f9a7 	bl	1bfa0 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
   14c52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14c54:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    uint16_t par_start = 0;
   14c58:	2300      	movs	r3, #0
   14c5a:	930d      	str	r3, [sp, #52]	; 0x34
   14c5c:	f00b 0301 	and.w	r3, fp, #1
   14c60:	9311      	str	r3, [sp, #68]	; 0x44
    while(txt[line_start] != '\0') {
   14c62:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   14c64:	4423      	add	r3, r4
   14c66:	930c      	str	r3, [sp, #48]	; 0x30
   14c68:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   14c6a:	5d1b      	ldrb	r3, [r3, r4]
   14c6c:	2b00      	cmp	r3, #0
   14c6e:	d15a      	bne.n	14d26 <lv_draw_label+0x222>
}
   14c70:	b02d      	add	sp, #180	; 0xb4
   14c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
   14c76:	f647 4318 	movw	r3, #31768	; 0x7c18
   14c7a:	f8cd b008 	str.w	fp, [sp, #8]
   14c7e:	9301      	str	r3, [sp, #4]
   14c80:	f9b2 303a 	ldrsh.w	r3, [r2, #58]	; 0x3a
   14c84:	9300      	str	r3, [sp, #0]
   14c86:	f9b2 3038 	ldrsh.w	r3, [r2, #56]	; 0x38
   14c8a:	9936      	ldr	r1, [sp, #216]	; 0xd8
   14c8c:	9a04      	ldr	r2, [sp, #16]
   14c8e:	a818      	add	r0, sp, #96	; 0x60
   14c90:	f008 fbde 	bl	1d450 <lv_txt_get_size>
        w = p.x;
   14c94:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
   14c98:	e74e      	b.n	14b38 <lv_draw_label+0x34>
    lv_coord_t x_ofs = 0;
   14c9a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   14c9c:	930e      	str	r3, [sp, #56]	; 0x38
   14c9e:	e76c      	b.n	14b7a <lv_draw_label+0x76>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   14ca0:	eb03 0908 	add.w	r9, r3, r8
   14ca4:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
   14ca8:	9b08      	ldr	r3, [sp, #32]
   14caa:	f8cd b000 	str.w	fp, [sp]
   14cae:	9904      	ldr	r1, [sp, #16]
   14cb0:	4648      	mov	r0, r9
   14cb2:	f000 feb9 	bl	15a28 <lv_txt_get_next_line>
        pos.y += line_height;
   14cb6:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   14cba:	9a07      	ldr	r2, [sp, #28]
   14cbc:	4413      	add	r3, r2
   14cbe:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   14cc0:	4440      	add	r0, r8
        pos.y += line_height;
   14cc2:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
   14cc6:	b167      	cbz	r7, 14ce2 <lv_draw_label+0x1de>
   14cc8:	f513 6f80 	cmn.w	r3, #1024	; 0x400
   14ccc:	db09      	blt.n	14ce2 <lv_draw_label+0x1de>
   14cce:	683a      	ldr	r2, [r7, #0]
   14cd0:	2a00      	cmp	r2, #0
            hint->y          = pos.y - coords->y1;
   14cd2:	bfbf      	itttt	lt
   14cd4:	f9b6 2002 	ldrshlt.w	r2, [r6, #2]
            hint->line_start = line_start;
   14cd8:	f8c7 8000 	strlt.w	r8, [r7]
            hint->y          = pos.y - coords->y1;
   14cdc:	1a9b      	sublt	r3, r3, r2
            hint->coord_y    = coords->y1;
   14cde:	e9c7 3201 	strdlt	r3, r2, [r7, #4]
        if(txt[line_start] == '\0') return;
   14ce2:	f899 3000 	ldrb.w	r3, [r9]
   14ce6:	4644      	mov	r4, r8
   14ce8:	2b00      	cmp	r3, #0
   14cea:	d0c1      	beq.n	14c70 <lv_draw_label+0x16c>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   14cec:	4680      	mov	r8, r0
   14cee:	e76b      	b.n	14bc8 <lv_draw_label+0xc4>
    else if(flag & LV_TXT_FLAG_RIGHT) {
   14cf0:	f01b 0f08 	tst.w	fp, #8
   14cf4:	d090      	beq.n	14c18 <lv_draw_label+0x114>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
   14cf6:	eba8 0104 	sub.w	r1, r8, r4
   14cfa:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
   14cfe:	9a04      	ldr	r2, [sp, #16]
   14d00:	f8cd b000 	str.w	fp, [sp]
   14d04:	b289      	uxth	r1, r1
   14d06:	f000 fe3f 	bl	15988 <lv_txt_get_width>
        pos.x += lv_area_get_width(coords) - line_width;
   14d0a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   14d0e:	88b2      	ldrh	r2, [r6, #4]
   14d10:	3301      	adds	r3, #1
   14d12:	4413      	add	r3, r2
   14d14:	8832      	ldrh	r2, [r6, #0]
   14d16:	1a9b      	subs	r3, r3, r2
   14d18:	1a18      	subs	r0, r3, r0
   14d1a:	e77b      	b.n	14c14 <lv_draw_label+0x110>
    uint16_t sel_end = 0xFFFF;
   14d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    uint16_t sel_start = 0xFFFF;
   14d20:	e9cd 3305 	strd	r3, r3, [sp, #20]
   14d24:	e791      	b.n	14c4a <lv_draw_label+0x146>
        if(offset != NULL) {
   14d26:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   14d28:	b12b      	cbz	r3, 14d36 <lv_draw_label+0x232>
            pos.x += x_ofs;
   14d2a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   14d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14d30:	4413      	add	r3, r2
   14d32:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        i         = 0;
   14d36:	2700      	movs	r7, #0
   14d38:	9715      	str	r7, [sp, #84]	; 0x54
        while(i < line_end - line_start) {
   14d3a:	9915      	ldr	r1, [sp, #84]	; 0x54
   14d3c:	eba8 0304 	sub.w	r3, r8, r4
   14d40:	428b      	cmp	r3, r1
   14d42:	d83b      	bhi.n	14dbc <lv_draw_label+0x2b8>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   14d44:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   14d46:	9904      	ldr	r1, [sp, #16]
   14d48:	f8cd b000 	str.w	fp, [sp]
   14d4c:	eb03 0408 	add.w	r4, r3, r8
   14d50:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
   14d54:	9b08      	ldr	r3, [sp, #32]
   14d56:	4620      	mov	r0, r4
   14d58:	f000 fe66 	bl	15a28 <lv_txt_get_next_line>
        pos.x = coords->x1;
   14d5c:	8833      	ldrh	r3, [r6, #0]
   14d5e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        if(flag & LV_TXT_FLAG_CENTER) {
   14d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   14d64:	4601      	mov	r1, r0
   14d66:	eb00 0708 	add.w	r7, r0, r8
        if(flag & LV_TXT_FLAG_CENTER) {
   14d6a:	2b00      	cmp	r3, #0
   14d6c:	f000 80ef 	beq.w	14f4e <lv_draw_label+0x44a>
                    lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
   14d70:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
   14d74:	9a04      	ldr	r2, [sp, #16]
   14d76:	f8cd b000 	str.w	fp, [sp]
   14d7a:	4620      	mov	r0, r4
   14d7c:	f000 fe04 	bl	15988 <lv_txt_get_width>
   14d80:	88b3      	ldrh	r3, [r6, #4]
   14d82:	8832      	ldrh	r2, [r6, #0]
   14d84:	3301      	adds	r3, #1
   14d86:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
   14d88:	b21b      	sxth	r3, r3
   14d8a:	1a18      	subs	r0, r3, r0
   14d8c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   14d90:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   14d94:	eb03 0060 	add.w	r0, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
   14d98:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
        pos.y += line_height;
   14d9c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   14da0:	9a07      	ldr	r2, [sp, #28]
   14da2:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
   14da4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14da6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
   14daa:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
   14dac:	429a      	cmp	r2, r3
        pos.y += line_height;
   14dae:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        line_start = line_end;
   14db2:	4644      	mov	r4, r8
        if(pos.y > mask->y2) return;
   14db4:	f6ff af5c 	blt.w	14c70 <lv_draw_label+0x16c>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
   14db8:	46b8      	mov	r8, r7
   14dba:	e752      	b.n	14c62 <lv_draw_label+0x15e>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   14dbc:	9a06      	ldr	r2, [sp, #24]
   14dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14dc2:	429a      	cmp	r2, r3
   14dc4:	d026      	beq.n	14e14 <lv_draw_label+0x310>
   14dc6:	9a05      	ldr	r2, [sp, #20]
   14dc8:	429a      	cmp	r2, r3
   14dca:	d023      	beq.n	14e14 <lv_draw_label+0x310>
                logical_char_pos = lv_txt_encoded_get_char_id(txt, line_start + i);
   14dcc:	4b39      	ldr	r3, [pc, #228]	; (14eb4 <lv_draw_label+0x3b0>)
   14dce:	9836      	ldr	r0, [sp, #216]	; 0xd8
   14dd0:	681b      	ldr	r3, [r3, #0]
   14dd2:	4421      	add	r1, r4
   14dd4:	4798      	blx	r3
   14dd6:	b283      	uxth	r3, r0
            letter      = lv_txt_encoded_next(bidi_txt, &i);
   14dd8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 14eb8 <lv_draw_label+0x3b4>
   14ddc:	980c      	ldr	r0, [sp, #48]	; 0x30
   14dde:	f8d9 2000 	ldr.w	r2, [r9]
   14de2:	9310      	str	r3, [sp, #64]	; 0x40
   14de4:	a915      	add	r1, sp, #84	; 0x54
   14de6:	4790      	blx	r2
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   14de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            letter      = lv_txt_encoded_next(bidi_txt, &i);
   14dea:	900a      	str	r0, [sp, #40]	; 0x28
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   14dec:	9815      	ldr	r0, [sp, #84]	; 0x54
   14dee:	f8d9 2000 	ldr.w	r2, [r9]
   14df2:	2100      	movs	r1, #0
   14df4:	4418      	add	r0, r3
   14df6:	4790      	blx	r2
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   14df8:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   14dfc:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   14dfe:	2900      	cmp	r1, #0
   14e00:	d051      	beq.n	14ea6 <lv_draw_label+0x3a2>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   14e02:	990a      	ldr	r1, [sp, #40]	; 0x28
   14e04:	2923      	cmp	r1, #35	; 0x23
   14e06:	d10d      	bne.n	14e24 <lv_draw_label+0x320>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
   14e08:	b937      	cbnz	r7, 14e18 <lv_draw_label+0x314>
                        par_start = i;
   14e0a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   14e0e:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_PAR;
   14e10:	9f11      	ldr	r7, [sp, #68]	; 0x44
                        continue;
   14e12:	e792      	b.n	14d3a <lv_draw_label+0x236>
            uint16_t logical_char_pos = 0;
   14e14:	2300      	movs	r3, #0
   14e16:	e7df      	b.n	14dd8 <lv_draw_label+0x2d4>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
   14e18:	2f01      	cmp	r7, #1
   14e1a:	d04f      	beq.n	14ebc <lv_draw_label+0x3b8>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
   14e1c:	2f02      	cmp	r7, #2
   14e1e:	d14e      	bne.n	14ebe <lv_draw_label+0x3ba>
                        cmd_state = CMD_STATE_WAIT;
   14e20:	2700      	movs	r7, #0
   14e22:	e78a      	b.n	14d3a <lv_draw_label+0x236>
                if(cmd_state == CMD_STATE_PAR) {
   14e24:	2f01      	cmp	r7, #1
   14e26:	d13e      	bne.n	14ea6 <lv_draw_label+0x3a2>
                    if(letter == ' ') {
   14e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14e2a:	2b20      	cmp	r3, #32
   14e2c:	d185      	bne.n	14d3a <lv_draw_label+0x236>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
   14e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14e30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14e32:	1a9b      	subs	r3, r3, r2
   14e34:	2b07      	cmp	r3, #7
   14e36:	d133      	bne.n	14ea0 <lv_draw_label+0x39c>
                            memcpy(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
   14e38:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
   14e3c:	2206      	movs	r2, #6
   14e3e:	1859      	adds	r1, r3, r1
   14e40:	a816      	add	r0, sp, #88	; 0x58
   14e42:	f003 fefa 	bl	18c3a <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
   14e46:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
   14e4a:	f7ff fe47 	bl	14adc <hex_char_to_num>
   14e4e:	4601      	mov	r1, r0
   14e50:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
   14e54:	f7ff fe42 	bl	14adc <hex_char_to_num>
   14e58:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
   14e5c:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   14e60:	f7ff fe3c 	bl	14adc <hex_char_to_num>
   14e64:	4607      	mov	r7, r0
   14e66:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   14e6a:	f7ff fe37 	bl	14adc <hex_char_to_num>
   14e6e:	eb00 1707 	add.w	r7, r0, r7, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
   14e72:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
   14e76:	f7ff fe31 	bl	14adc <hex_char_to_num>
   14e7a:	4681      	mov	r9, r0
   14e7c:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   14e80:	f7ff fe2c 	bl	14adc <hex_char_to_num>
   14e84:	eb00 1009 	add.w	r0, r0, r9, lsl #4
   14e88:	f360 0a07 	bfi	sl, r0, #0, #8
   14e8c:	f367 2a0f 	bfi	sl, r7, #8, #8
   14e90:	f361 4a17 	bfi	sl, r1, #16, #8
   14e94:	f04a 4a7f 	orr.w	sl, sl, #4278190080	; 0xff000000
   14e98:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
   14e9c:	2702      	movs	r7, #2
   14e9e:	e74c      	b.n	14d3a <lv_draw_label+0x236>
                            recolor.full = style->text.color.full;
   14ea0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14ea2:	930f      	str	r3, [sp, #60]	; 0x3c
   14ea4:	e7fa      	b.n	14e9c <lv_draw_label+0x398>
            if(cmd_state == CMD_STATE_IN) color = recolor;
   14ea6:	2f02      	cmp	r7, #2
   14ea8:	d109      	bne.n	14ebe <lv_draw_label+0x3ba>
   14eaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14eac:	e008      	b.n	14ec0 <lv_draw_label+0x3bc>
   14eae:	bf00      	nop
   14eb0:	20001854 	.word	0x20001854
   14eb4:	2000cfe8 	.word	0x2000cfe8
   14eb8:	2000cfec 	.word	0x2000cfec
                        cmd_state = CMD_STATE_WAIT;
   14ebc:	2700      	movs	r7, #0
            lv_color_t color = style->text.color;
   14ebe:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
            if(cmd_state == CMD_STATE_IN) color = recolor;
   14ec0:	9110      	str	r1, [sp, #64]	; 0x40
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   14ec2:	9804      	ldr	r0, [sp, #16]
   14ec4:	990a      	ldr	r1, [sp, #40]	; 0x28
   14ec6:	9313      	str	r3, [sp, #76]	; 0x4c
   14ec8:	f008 fd38 	bl	1d93c <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   14ecc:	9b06      	ldr	r3, [sp, #24]
   14ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14ed2:	4293      	cmp	r3, r2
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   14ed4:	fa0f f980 	sxth.w	r9, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   14ed8:	d023      	beq.n	14f22 <lv_draw_label+0x41e>
   14eda:	9b05      	ldr	r3, [sp, #20]
   14edc:	4293      	cmp	r3, r2
   14ede:	d020      	beq.n	14f22 <lv_draw_label+0x41e>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
   14ee0:	9b06      	ldr	r3, [sp, #24]
   14ee2:	461a      	mov	r2, r3
   14ee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14ee6:	429a      	cmp	r2, r3
   14ee8:	d81b      	bhi.n	14f22 <lv_draw_label+0x41e>
   14eea:	9a05      	ldr	r2, [sp, #20]
   14eec:	429a      	cmp	r2, r3
   14eee:	d918      	bls.n	14f22 <lv_draw_label+0x41e>
                    sel_coords.x1 = pos.x;
   14ef0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
   14ef4:	8f29      	ldrh	r1, [r5, #56]	; 0x38
                    sel_coords.x1 = pos.x;
   14ef6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
   14efa:	3b01      	subs	r3, #1
   14efc:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
   14efe:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
   14f02:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
   14f06:	444b      	add	r3, r9
   14f08:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    sel_coords.y2 = pos.y + line_height - 1;
   14f0c:	9b07      	ldr	r3, [sp, #28]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
   14f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    sel_coords.y2 = pos.y + line_height - 1;
   14f10:	3a01      	subs	r2, #1
   14f12:	441a      	add	r2, r3
   14f14:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
   14f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14f1a:	aa18      	add	r2, sp, #96	; 0x60
   14f1c:	a816      	add	r0, sp, #88	; 0x58
   14f1e:	f007 f973 	bl	1c208 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
   14f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14f24:	9301      	str	r3, [sp, #4]
   14f26:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14f28:	9300      	str	r3, [sp, #0]
   14f2a:	9a04      	ldr	r2, [sp, #16]
   14f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14f2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14f30:	a814      	add	r0, sp, #80	; 0x50
   14f32:	f7ff fb67 	bl	14604 <lv_draw_letter>
            if(letter_w > 0) {
   14f36:	f1b9 0f00 	cmp.w	r9, #0
   14f3a:	f77f aefe 	ble.w	14d3a <lv_draw_label+0x236>
                pos.x += letter_w + style->text.letter_space;
   14f3e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   14f42:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
   14f44:	4413      	add	r3, r2
   14f46:	4499      	add	r9, r3
   14f48:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
   14f4c:	e6f5      	b.n	14d3a <lv_draw_label+0x236>
        else if(flag & LV_TXT_FLAG_RIGHT) {
   14f4e:	f01b 0f08 	tst.w	fp, #8
   14f52:	f43f af23 	beq.w	14d9c <lv_draw_label+0x298>
                    lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
   14f56:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
   14f5a:	9a04      	ldr	r2, [sp, #16]
   14f5c:	f8cd b000 	str.w	fp, [sp]
   14f60:	4620      	mov	r0, r4
   14f62:	f000 fd11 	bl	15988 <lv_txt_get_width>
            pos.x += lv_area_get_width(coords) - line_width;
   14f66:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   14f6a:	88b2      	ldrh	r2, [r6, #4]
   14f6c:	3301      	adds	r3, #1
   14f6e:	4413      	add	r3, r2
   14f70:	8832      	ldrh	r2, [r6, #0]
   14f72:	1a9b      	subs	r3, r3, r2
   14f74:	1a18      	subs	r0, r3, r0
   14f76:	e70f      	b.n	14d98 <lv_draw_label+0x294>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
   14f78:	2f00      	cmp	r7, #0
   14f7a:	f47f ae8e 	bne.w	14c9a <lv_draw_label+0x196>
    lv_coord_t x_ofs = 0;
   14f7e:	970e      	str	r7, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
   14f80:	2400      	movs	r4, #0
   14f82:	e615      	b.n	14bb0 <lv_draw_label+0xac>

00014f84 <lv_img_color_format_get_px_size>:
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
    uint8_t px_size = 0;

    switch(cf) {
   14f84:	3804      	subs	r0, #4
   14f86:	b2c0      	uxtb	r0, r0
   14f88:	280a      	cmp	r0, #10
   14f8a:	bf9a      	itte	ls
   14f8c:	4b01      	ldrls	r3, [pc, #4]	; (14f94 <lv_img_color_format_get_px_size+0x10>)
   14f8e:	5c18      	ldrbls	r0, [r3, r0]
{
   14f90:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
   14f92:	4770      	bx	lr
   14f94:	000217bd 	.word	0x000217bd

00014f98 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
   14f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   14f9c:	7b0a      	ldrb	r2, [r1, #12]
   14f9e:	2a01      	cmp	r2, #1
{
   14fa0:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   14fa2:	d108      	bne.n	14fb6 <lv_img_decoder_built_in_open+0x1e>
        }

        memcpy(user_data->f, &f, sizeof(f));

#else
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   14fa4:	4b3b      	ldr	r3, [pc, #236]	; (15094 <lv_img_decoder_built_in_open+0xfc>)
   14fa6:	f240 1261 	movw	r2, #353	; 0x161
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);

        LV_LOG_WARN("Image decoder open: unknown color format")
   14faa:	2002      	movs	r0, #2
   14fac:	493a      	ldr	r1, [pc, #232]	; (15098 <lv_img_decoder_built_in_open+0x100>)
   14fae:	f000 fe37 	bl	15c20 <lv_log_add>
        return LV_RES_INV;
   14fb2:	2000      	movs	r0, #0
   14fb4:	e00b      	b.n	14fce <lv_img_decoder_built_in_open+0x36>
    lv_img_cf_t cf = dsc->header.cf;
   14fb6:	7c0b      	ldrb	r3, [r1, #16]
   14fb8:	f003 031f 	and.w	r3, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   14fbc:	1f1d      	subs	r5, r3, #4
   14fbe:	2d02      	cmp	r5, #2
   14fc0:	d807      	bhi.n	14fd2 <lv_img_decoder_built_in_open+0x3a>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   14fc2:	2a00      	cmp	r2, #0
   14fc4:	d144      	bne.n	15050 <lv_img_decoder_built_in_open+0xb8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
   14fc6:	684b      	ldr	r3, [r1, #4]
   14fc8:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
   14fca:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
   14fcc:	2001      	movs	r0, #1
    }
}
   14fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
   14fd2:	1fda      	subs	r2, r3, #7
   14fd4:	2a03      	cmp	r2, #3
   14fd6:	d853      	bhi.n	15080 <lv_img_decoder_built_in_open+0xe8>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
   14fd8:	4618      	mov	r0, r3
   14fda:	f7ff ffd3 	bl	14f84 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
   14fde:	6a23      	ldr	r3, [r4, #32]
        uint32_t palette_size = 1 << px_size;
   14fe0:	2601      	movs	r6, #1
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
   14fe2:	4607      	mov	r7, r0
        uint32_t palette_size = 1 << px_size;
   14fe4:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
   14fe6:	b983      	cbnz	r3, 1500a <lv_img_decoder_built_in_open+0x72>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
   14fe8:	2008      	movs	r0, #8
   14fea:	f000 fc57 	bl	1589c <lv_mem_alloc>
   14fee:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
   14ff0:	b930      	cbnz	r0, 15000 <lv_img_decoder_built_in_open+0x68>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   14ff2:	4b2a      	ldr	r3, [pc, #168]	; (1509c <lv_img_decoder_built_in_open+0x104>)
   14ff4:	4928      	ldr	r1, [pc, #160]	; (15098 <lv_img_decoder_built_in_open+0x100>)
   14ff6:	f44f 72c0 	mov.w	r2, #384	; 0x180
   14ffa:	2003      	movs	r0, #3
   14ffc:	f000 fe10 	bl	15c20 <lv_log_add>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
   15000:	2208      	movs	r2, #8
   15002:	2100      	movs	r1, #0
   15004:	6a20      	ldr	r0, [r4, #32]
   15006:	f003 fe42 	bl	18c8e <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   1500a:	2004      	movs	r0, #4
   1500c:	40b8      	lsls	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1500e:	6a25      	ldr	r5, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   15010:	f000 fc44 	bl	1589c <lv_mem_alloc>
   15014:	6028      	str	r0, [r5, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   15016:	4630      	mov	r0, r6
   15018:	f000 fc40 	bl	1589c <lv_mem_alloc>
        if(user_data->palette == NULL || user_data->opa == NULL) {
   1501c:	682b      	ldr	r3, [r5, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   1501e:	6068      	str	r0, [r5, #4]
        if(user_data->palette == NULL || user_data->opa == NULL) {
   15020:	b103      	cbz	r3, 15024 <lv_img_decoder_built_in_open+0x8c>
   15022:	b930      	cbnz	r0, 15032 <lv_img_decoder_built_in_open+0x9a>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   15024:	4b1d      	ldr	r3, [pc, #116]	; (1509c <lv_img_decoder_built_in_open+0x104>)
   15026:	491c      	ldr	r1, [pc, #112]	; (15098 <lv_img_decoder_built_in_open+0x100>)
   15028:	f44f 72c5 	mov.w	r2, #394	; 0x18a
   1502c:	2003      	movs	r0, #3
   1502e:	f000 fdf7 	bl	15c20 <lv_log_add>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   15032:	7b23      	ldrb	r3, [r4, #12]
   15034:	2b01      	cmp	r3, #1
   15036:	d103      	bne.n	15040 <lv_img_decoder_built_in_open+0xa8>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
   15038:	4b19      	ldr	r3, [pc, #100]	; (150a0 <lv_img_decoder_built_in_open+0x108>)
   1503a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
   1503e:	e7b4      	b.n	14faa <lv_img_decoder_built_in_open+0x12>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
   15040:	6863      	ldr	r3, [r4, #4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   15042:	27ff      	movs	r7, #255	; 0xff
   15044:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
   15046:	2300      	movs	r3, #0
   15048:	42b3      	cmp	r3, r6
   1504a:	f102 0204 	add.w	r2, r2, #4
   1504e:	d101      	bne.n	15054 <lv_img_decoder_built_in_open+0xbc>
            dsc->img_data = NULL;
   15050:	2300      	movs	r3, #0
   15052:	e7ba      	b.n	14fca <lv_img_decoder_built_in_open+0x32>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   15054:	6828      	ldr	r0, [r5, #0]
   15056:	f812 8c04 	ldrb.w	r8, [r2, #-4]
   1505a:	f812 cc02 	ldrb.w	ip, [r2, #-2]
   1505e:	f812 ec03 	ldrb.w	lr, [r2, #-3]
   15062:	f800 8023 	strb.w	r8, [r0, r3, lsl #2]
   15066:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   1506a:	f881 e001 	strb.w	lr, [r1, #1]
   1506e:	f881 c002 	strb.w	ip, [r1, #2]
   15072:	70cf      	strb	r7, [r1, #3]
                user_data->opa[i]     = palette_p[i].ch.alpha;
   15074:	6869      	ldr	r1, [r5, #4]
   15076:	f812 0c01 	ldrb.w	r0, [r2, #-1]
   1507a:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
   1507c:	3301      	adds	r3, #1
   1507e:	e7e3      	b.n	15048 <lv_img_decoder_built_in_open+0xb0>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
   15080:	3b0b      	subs	r3, #11
   15082:	2b03      	cmp	r3, #3
   15084:	d9e4      	bls.n	15050 <lv_img_decoder_built_in_open+0xb8>
        lv_img_decoder_built_in_close(decoder, dsc);
   15086:	f007 ff37 	bl	1cef8 <lv_img_decoder_built_in_close>
        LV_LOG_WARN("Image decoder open: unknown color format")
   1508a:	4b06      	ldr	r3, [pc, #24]	; (150a4 <lv_img_decoder_built_in_open+0x10c>)
   1508c:	f240 12c1 	movw	r2, #449	; 0x1c1
   15090:	e78b      	b.n	14faa <lv_img_decoder_built_in_open+0x12>
   15092:	bf00      	nop
   15094:	000217ee 	.word	0x000217ee
   15098:	00021834 	.word	0x00021834
   1509c:	00021871 	.word	0x00021871
   150a0:	0002189a 	.word	0x0002189a
   150a4:	000218e4 	.word	0x000218e4

000150a8 <lv_img_decoder_built_in_info>:
{
   150a8:	b538      	push	{r3, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
   150aa:	4608      	mov	r0, r1
{
   150ac:	460d      	mov	r5, r1
   150ae:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
   150b0:	f007 ff12 	bl	1ced8 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
   150b4:	b9c0      	cbnz	r0, 150e8 <lv_img_decoder_built_in_info+0x40>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   150b6:	782b      	ldrb	r3, [r5, #0]
   150b8:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
   150bc:	3b04      	subs	r3, #4
   150be:	b2db      	uxtb	r3, r3
   150c0:	2b0a      	cmp	r3, #10
   150c2:	d810      	bhi.n	150e6 <lv_img_decoder_built_in_info+0x3e>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   150c4:	886b      	ldrh	r3, [r5, #2]
   150c6:	8862      	ldrh	r2, [r4, #2]
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   150c8:	6829      	ldr	r1, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   150ca:	095b      	lsrs	r3, r3, #5
   150cc:	f363 124f 	bfi	r2, r3, #5, #11
   150d0:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
   150d2:	6823      	ldr	r3, [r4, #0]
   150d4:	4a0c      	ldr	r2, [pc, #48]	; (15108 <lv_img_decoder_built_in_info+0x60>)
   150d6:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
   150da:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
   150de:	400a      	ands	r2, r1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   150e0:	4313      	orrs	r3, r2
   150e2:	6023      	str	r3, [r4, #0]
    return LV_RES_OK;
   150e4:	2001      	movs	r0, #1
}
   150e6:	bd38      	pop	{r3, r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
   150e8:	2802      	cmp	r0, #2
   150ea:	d104      	bne.n	150f6 <lv_img_decoder_built_in_info+0x4e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   150ec:	6823      	ldr	r3, [r4, #0]
   150ee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
   150f2:	4b06      	ldr	r3, [pc, #24]	; (1510c <lv_img_decoder_built_in_info+0x64>)
   150f4:	e7f4      	b.n	150e0 <lv_img_decoder_built_in_info+0x38>
        LV_LOG_WARN("Image get info found unknown src type");
   150f6:	2002      	movs	r0, #2
   150f8:	4b05      	ldr	r3, [pc, #20]	; (15110 <lv_img_decoder_built_in_info+0x68>)
   150fa:	4906      	ldr	r1, [pc, #24]	; (15114 <lv_img_decoder_built_in_info+0x6c>)
   150fc:	f240 1231 	movw	r2, #305	; 0x131
   15100:	f000 fd8e 	bl	15c20 <lv_log_add>
   15104:	2000      	movs	r0, #0
   15106:	e7ee      	b.n	150e6 <lv_img_decoder_built_in_info+0x3e>
   15108:	001ffc1f 	.word	0x001ffc1f
   1510c:	0020040b 	.word	0x0020040b
   15110:	000217c8 	.word	0x000217c8
   15114:	00021834 	.word	0x00021834

00015118 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
   15118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1511c:	7c08      	ldrb	r0, [r1, #16]
{
   1511e:	b087      	sub	sp, #28
   15120:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   15122:	f000 031e 	and.w	r3, r0, #30
   15126:	2b04      	cmp	r3, #4
{
   15128:	460d      	mov	r5, r1
   1512a:	4614      	mov	r4, r2
   1512c:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
   15130:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   15134:	d003      	beq.n	1513e <lv_img_decoder_built_in_read_line+0x26>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   15136:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1513a:	2b06      	cmp	r3, #6
   1513c:	d10b      	bne.n	15156 <lv_img_decoder_built_in_read_line+0x3e>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   1513e:	7b2b      	ldrb	r3, [r5, #12]
   15140:	2b01      	cmp	r3, #1
   15142:	d106      	bne.n	15152 <lv_img_decoder_built_in_read_line+0x3a>
        return LV_RES_INV;
    }

    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   15144:	4b9d      	ldr	r3, [pc, #628]	; (153bc <lv_img_decoder_built_in_read_line+0x2a4>)
   15146:	f240 2225 	movw	r2, #549	; 0x225
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   1514a:	499d      	ldr	r1, [pc, #628]	; (153c0 <lv_img_decoder_built_in_read_line+0x2a8>)
   1514c:	2002      	movs	r0, #2
   1514e:	f000 fd67 	bl	15c20 <lv_log_add>
    lv_res_t res = LV_RES_INV;
   15152:	2000      	movs	r0, #0
   15154:	e05c      	b.n	15210 <lv_img_decoder_built_in_read_line+0xf8>
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
   15156:	f1a3 020b 	sub.w	r2, r3, #11
   1515a:	2a03      	cmp	r2, #3
   1515c:	f200 80a7 	bhi.w	152ae <lv_img_decoder_built_in_read_line+0x196>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   15160:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   15164:	f8ad 3000 	strh.w	r3, [sp]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   15168:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
   1516c:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
   15170:	9301      	str	r3, [sp, #4]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   15172:	4b94      	ldr	r3, [pc, #592]	; (153c4 <lv_img_decoder_built_in_read_line+0x2ac>)
   15174:	aa02      	add	r2, sp, #8
   15176:	f103 0e10 	add.w	lr, r3, #16
   1517a:	4691      	mov	r9, r2
   1517c:	6818      	ldr	r0, [r3, #0]
   1517e:	6859      	ldr	r1, [r3, #4]
   15180:	4694      	mov	ip, r2
   15182:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   15186:	3308      	adds	r3, #8
   15188:	4573      	cmp	r3, lr
   1518a:	4662      	mov	r2, ip
   1518c:	d1f6      	bne.n	1517c <lv_img_decoder_built_in_read_line+0x64>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
   1518e:	68ab      	ldr	r3, [r5, #8]
   15190:	6c19      	ldr	r1, [r3, #64]	; 0x40
   15192:	2300      	movs	r3, #0
    lv_coord_t i;
    for(i = 0; i < len; i++) {
   15194:	b21a      	sxth	r2, r3
   15196:	4297      	cmp	r7, r2
   15198:	dc16      	bgt.n	151c8 <lv_img_decoder_built_in_read_line+0xb0>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
   1519a:	7c28      	ldrb	r0, [r5, #16]
   1519c:	f000 001f 	and.w	r0, r0, #31
   151a0:	f7ff fef0 	bl	14f84 <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
   151a4:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   151a6:	f04f 0c01 	mov.w	ip, #1
   151aa:	fa0c fc00 	lsl.w	ip, ip, r0
    switch(dsc->header.cf) {
   151ae:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   151b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    switch(dsc->header.cf) {
   151b6:	3b0b      	subs	r3, #11
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   151b8:	fa1f fc8c 	uxth.w	ip, ip
    switch(dsc->header.cf) {
   151bc:	2b03      	cmp	r3, #3
   151be:	d856      	bhi.n	1526e <lv_img_decoder_built_in_read_line+0x156>
   151c0:	e8df f003 	tbb	[pc, r3]
   151c4:	4d3b2906 	.word	0x4d3b2906
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
   151c8:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   151cc:	3301      	adds	r3, #1
   151ce:	e7e1      	b.n	15194 <lv_img_decoder_built_in_read_line+0x7c>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   151d0:	6929      	ldr	r1, [r5, #16]
   151d2:	f3c1 218a 	ubfx	r1, r1, #10, #11
   151d6:	08cb      	lsrs	r3, r1, #3
            if(dsc->header.w & 0x7) w++;
   151d8:	0749      	lsls	r1, r1, #29
            ofs += w * y + (x >> 3); /*First pixel*/
   151da:	ea4f 02e4 	mov.w	r2, r4, asr #3
            if(dsc->header.w & 0x7) w++;
   151de:	bf18      	it	ne
   151e0:	3301      	addne	r3, #1
            pos       = 7 - (x & 0x7);
   151e2:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
   151e4:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
   151e8:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
   151ec:	466e      	mov	r6, sp
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   151ee:	7b29      	ldrb	r1, [r5, #12]
   151f0:	2900      	cmp	r1, #0
   151f2:	d13f      	bne.n	15274 <lv_img_decoder_built_in_read_line+0x15c>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
   151f4:	686a      	ldr	r2, [r5, #4]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
   151f6:	b240      	sxtb	r0, r0
        data_tmp = img_dsc->data + ofs;
   151f8:	6892      	ldr	r2, [r2, #8]
        if(pos < 0) {
            pos = 8 - px_size;
   151fa:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp = img_dsc->data + ofs;
   151fe:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   15200:	f108 0803 	add.w	r8, r8, #3
            pos = 8 - px_size;
   15204:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   15208:	b20a      	sxth	r2, r1
   1520a:	4297      	cmp	r7, r2
   1520c:	dc36      	bgt.n	1527c <lv_img_decoder_built_in_read_line+0x164>
            pos = 8 - px_size;
            data_tmp++;
        }
    }

    return LV_RES_OK;
   1520e:	2001      	movs	r0, #1
}
   15210:	b007      	add	sp, #28
   15212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   15216:	6929      	ldr	r1, [r5, #16]
   15218:	f3c1 218a 	ubfx	r1, r1, #10, #11
   1521c:	088b      	lsrs	r3, r1, #2
            if(dsc->header.w & 0x3) w++;
   1521e:	078a      	lsls	r2, r1, #30
            ofs += w * y + (x >> 2); /*First pixel*/
   15220:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
   15224:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x3) w++;
   15228:	bf18      	it	ne
   1522a:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
   1522c:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
   15230:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
   15234:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
   15236:	ae01      	add	r6, sp, #4
   15238:	e7d9      	b.n	151ee <lv_img_decoder_built_in_read_line+0xd6>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   1523a:	692b      	ldr	r3, [r5, #16]
   1523c:	f3c3 218a 	ubfx	r1, r3, #10, #11
   15240:	084b      	lsrs	r3, r1, #1
            if(dsc->header.w & 0x1) w++;
   15242:	07c9      	lsls	r1, r1, #31
            ofs += w * y + (x >> 1); /*First pixel*/
   15244:	ea4f 0264 	mov.w	r2, r4, asr #1
            if(dsc->header.w & 0x1) w++;
   15248:	bf48      	it	mi
   1524a:	3301      	addmi	r3, #1
            pos       = 4 - ((x & 0x1) * 4);
   1524c:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   15250:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
   15254:	bf0c      	ite	eq
   15256:	2404      	moveq	r4, #4
   15258:	2400      	movne	r4, #0
   1525a:	464e      	mov	r6, r9
   1525c:	e7c7      	b.n	151ee <lv_img_decoder_built_in_read_line+0xd6>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   1525e:	692b      	ldr	r3, [r5, #16]
   15260:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   15264:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
   15268:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
   1526a:	4626      	mov	r6, r4
   1526c:	e7bf      	b.n	151ee <lv_img_decoder_built_in_read_line+0xd6>
    int8_t pos   = 0;
   1526e:	2400      	movs	r4, #0
    uint32_t ofs = 0;
   15270:	4623      	mov	r3, r4
   15272:	e7fa      	b.n	1526a <lv_img_decoder_built_in_read_line+0x152>
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
   15274:	4b54      	ldr	r3, [pc, #336]	; (153c8 <lv_img_decoder_built_in_read_line+0x2b0>)
   15276:	f240 2279 	movw	r2, #633	; 0x279
   1527a:	e766      	b.n	1514a <lv_img_decoder_built_in_read_line+0x32>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
   1527c:	781a      	ldrb	r2, [r3, #0]
   1527e:	fa0c f904 	lsl.w	r9, ip, r4
   15282:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
   15286:	f895 9010 	ldrb.w	r9, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
   1528a:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1528c:	b2d2      	uxtb	r2, r2
   1528e:	f009 091f 	and.w	r9, r9, #31
        pos -= px_size;
   15292:	1a24      	subs	r4, r4, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   15294:	f1b9 0f0e 	cmp.w	r9, #14
        pos -= px_size;
   15298:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1529a:	bf18      	it	ne
   1529c:	5cb2      	ldrbne	r2, [r6, r2]
   1529e:	f808 2021 	strb.w	r2, [r8, r1, lsl #2]
        if(pos < 0) {
   152a2:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
   152a4:	bfbc      	itt	lt
   152a6:	4674      	movlt	r4, lr
            data_tmp++;
   152a8:	3301      	addlt	r3, #1
   152aa:	3101      	adds	r1, #1
   152ac:	e7ac      	b.n	15208 <lv_img_decoder_built_in_read_line+0xf0>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
   152ae:	3b07      	subs	r3, #7
   152b0:	2b03      	cmp	r3, #3
   152b2:	d87f      	bhi.n	153b4 <lv_img_decoder_built_in_read_line+0x29c>
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
   152b4:	f000 001f 	and.w	r0, r0, #31
   152b8:	f7ff fe64 	bl	14f84 <lv_img_color_format_get_px_size>
    switch(dsc->header.cf) {
   152bc:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   152be:	f04f 0c01 	mov.w	ip, #1
   152c2:	fa0c fc00 	lsl.w	ip, ip, r0
    switch(dsc->header.cf) {
   152c6:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   152ca:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    switch(dsc->header.cf) {
   152ce:	3b07      	subs	r3, #7
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   152d0:	fa1f fc8c 	uxth.w	ip, ip
    switch(dsc->header.cf) {
   152d4:	2b03      	cmp	r3, #3
   152d6:	d866      	bhi.n	153a6 <lv_img_decoder_built_in_read_line+0x28e>
   152d8:	e8df f003 	tbb	[pc, r3]
   152dc:	5c4a3a02 	.word	0x5c4a3a02
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   152e0:	692a      	ldr	r2, [r5, #16]
   152e2:	f3c2 228a 	ubfx	r2, r2, #10, #11
   152e6:	08d3      	lsrs	r3, r2, #3
            if(dsc->header.w & 0x7) w++;
   152e8:	0752      	lsls	r2, r2, #29
   152ea:	bf18      	it	ne
   152ec:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   152ee:	10e2      	asrs	r2, r4, #3
   152f0:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
   152f4:	43e2      	mvns	r2, r4
            ofs += 8;                /*Skip the palette*/
   152f6:	3308      	adds	r3, #8
            pos = 7 - (x & 0x7);
   152f8:	f002 0207 	and.w	r2, r2, #7
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   152fc:	7b29      	ldrb	r1, [r5, #12]
   152fe:	2900      	cmp	r1, #0
   15300:	d154      	bne.n	153ac <lv_img_decoder_built_in_read_line+0x294>
        data_tmp                     = img_dsc->data + ofs;
   15302:	686c      	ldr	r4, [r5, #4]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   15304:	6a2e      	ldr	r6, [r5, #32]
        data_tmp                     = img_dsc->data + ofs;
   15306:	68a4      	ldr	r4, [r4, #8]
        pos -= px_size;
   15308:	b240      	sxtb	r0, r0
            pos = 8 - px_size;
   1530a:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp                     = img_dsc->data + ofs;
   1530e:	4423      	add	r3, r4
    for(i = 0; i < len; i++) {
   15310:	f1a8 0804 	sub.w	r8, r8, #4
        data_tmp                     = img_dsc->data + ofs;
   15314:	460d      	mov	r5, r1
            pos = 8 - px_size;
   15316:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   1531a:	b229      	sxth	r1, r5
   1531c:	428f      	cmp	r7, r1
   1531e:	f77f af76 	ble.w	1520e <lv_img_decoder_built_in_read_line+0xf6>
        val_act = (*data_tmp & (mask << pos)) >> pos;
   15322:	7819      	ldrb	r1, [r3, #0]
   15324:	fa0c f402 	lsl.w	r4, ip, r2
   15328:	4021      	ands	r1, r4
   1532a:	4111      	asrs	r1, r2
        lv_color_t color = user_data->palette[val_act];
   1532c:	6834      	ldr	r4, [r6, #0]
   1532e:	b2c9      	uxtb	r1, r1
        pos -= px_size;
   15330:	1a12      	subs	r2, r2, r0
        lv_color_t color = user_data->palette[val_act];
   15332:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
   15336:	f848 4f04 	str.w	r4, [r8, #4]!
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   1533a:	6874      	ldr	r4, [r6, #4]
        pos -= px_size;
   1533c:	b252      	sxtb	r2, r2
        if(pos < 0) {
   1533e:	2a00      	cmp	r2, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   15340:	5c61      	ldrb	r1, [r4, r1]
   15342:	f888 1003 	strb.w	r1, [r8, #3]
            pos = 8 - px_size;
   15346:	bfbc      	itt	lt
   15348:	4672      	movlt	r2, lr
            data_tmp++;
   1534a:	3301      	addlt	r3, #1
   1534c:	3501      	adds	r5, #1
   1534e:	e7e4      	b.n	1531a <lv_img_decoder_built_in_read_line+0x202>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   15350:	692a      	ldr	r2, [r5, #16]
   15352:	f3c2 228a 	ubfx	r2, r2, #10, #11
   15356:	0893      	lsrs	r3, r2, #2
            if(dsc->header.w & 0x3) w++;
   15358:	0791      	lsls	r1, r2, #30
   1535a:	bf18      	it	ne
   1535c:	3301      	addne	r3, #1
            ofs += w * y + (x >> 2); /*First pixel*/
   1535e:	10a2      	asrs	r2, r4, #2
   15360:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
   15364:	43e2      	mvns	r2, r4
   15366:	f002 0203 	and.w	r2, r2, #3
            ofs += 16;               /*Skip the palette*/
   1536a:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
   1536c:	0052      	lsls	r2, r2, #1
            break;
   1536e:	e7c5      	b.n	152fc <lv_img_decoder_built_in_read_line+0x1e4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   15370:	692a      	ldr	r2, [r5, #16]
   15372:	f3c2 228a 	ubfx	r2, r2, #10, #11
   15376:	0853      	lsrs	r3, r2, #1
            if(dsc->header.w & 0x1) w++;
   15378:	07d2      	lsls	r2, r2, #31
   1537a:	bf48      	it	mi
   1537c:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1537e:	1062      	asrs	r2, r4, #1
   15380:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 4 - ((x & 0x1) * 4);
   15384:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
   15388:	f103 0340 	add.w	r3, r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
   1538c:	bf0c      	ite	eq
   1538e:	2204      	moveq	r2, #4
   15390:	2200      	movne	r2, #0
   15392:	e7b3      	b.n	152fc <lv_img_decoder_built_in_read_line+0x1e4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   15394:	692b      	ldr	r3, [r5, #16]
   15396:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   1539a:	fb16 4303 	smlabb	r3, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
   1539e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            pos = 0;
   153a2:	2200      	movs	r2, #0
   153a4:	e7aa      	b.n	152fc <lv_img_decoder_built_in_read_line+0x1e4>
    uint32_t ofs = 0;
   153a6:	2300      	movs	r3, #0
    int8_t pos   = 0;
   153a8:	461a      	mov	r2, r3
   153aa:	e7a7      	b.n	152fc <lv_img_decoder_built_in_read_line+0x1e4>
        LV_LOG_WARN("Image built-in indexed line reader can't read file because LV_USE_FILESYSTEM = 0");
   153ac:	4b07      	ldr	r3, [pc, #28]	; (153cc <lv_img_decoder_built_in_read_line+0x2b4>)
   153ae:	f240 22ce 	movw	r2, #718	; 0x2ce
   153b2:	e6ca      	b.n	1514a <lv_img_decoder_built_in_read_line+0x32>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   153b4:	4b06      	ldr	r3, [pc, #24]	; (153d0 <lv_img_decoder_built_in_read_line+0x2b8>)
   153b6:	f240 12e7 	movw	r2, #487	; 0x1e7
   153ba:	e6c6      	b.n	1514a <lv_img_decoder_built_in_read_line+0x32>
   153bc:	000217ee 	.word	0x000217ee
   153c0:	00021834 	.word	0x00021834
   153c4:	0001e5e5 	.word	0x0001e5e5
   153c8:	0002190d 	.word	0x0002190d
   153cc:	0002195c 	.word	0x0002195c
   153d0:	000219ad 	.word	0x000219ad

000153d4 <lv_img_decoder_create>:
{
   153d4:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
   153d6:	4805      	ldr	r0, [pc, #20]	; (153ec <lv_img_decoder_create+0x18>)
   153d8:	f007 ff09 	bl	1d1ee <lv_ll_ins_head>
    if(decoder == NULL) return NULL;
   153dc:	4604      	mov	r4, r0
   153de:	b118      	cbz	r0, 153e8 <lv_img_decoder_create+0x14>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
   153e0:	2214      	movs	r2, #20
   153e2:	2100      	movs	r1, #0
   153e4:	f003 fc53 	bl	18c8e <memset>
}
   153e8:	4620      	mov	r0, r4
   153ea:	bd10      	pop	{r4, pc}
   153ec:	20001ab4 	.word	0x20001ab4

000153f0 <lv_img_decoder_init>:
{
   153f0:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
   153f2:	2114      	movs	r1, #20
   153f4:	480b      	ldr	r0, [pc, #44]	; (15424 <lv_img_decoder_init+0x34>)
   153f6:	f007 fef0 	bl	1d1da <lv_ll_init>
    decoder = lv_img_decoder_create();
   153fa:	f7ff ffeb 	bl	153d4 <lv_img_decoder_create>
    if(decoder == NULL) {
   153fe:	b938      	cbnz	r0, 15410 <lv_img_decoder_init+0x20>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
   15400:	4b09      	ldr	r3, [pc, #36]	; (15428 <lv_img_decoder_init+0x38>)
   15402:	490a      	ldr	r1, [pc, #40]	; (1542c <lv_img_decoder_init+0x3c>)
   15404:	2248      	movs	r2, #72	; 0x48
   15406:	2002      	movs	r0, #2
}
   15408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
   1540c:	f000 bc08 	b.w	15c20 <lv_log_add>
    decoder->info_cb = info_cb;
   15410:	4b07      	ldr	r3, [pc, #28]	; (15430 <lv_img_decoder_init+0x40>)
   15412:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
   15414:	4b07      	ldr	r3, [pc, #28]	; (15434 <lv_img_decoder_init+0x44>)
   15416:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
   15418:	4b07      	ldr	r3, [pc, #28]	; (15438 <lv_img_decoder_init+0x48>)
   1541a:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
   1541c:	4b07      	ldr	r3, [pc, #28]	; (1543c <lv_img_decoder_init+0x4c>)
   1541e:	60c3      	str	r3, [r0, #12]
}
   15420:	bd10      	pop	{r4, pc}
   15422:	bf00      	nop
   15424:	20001ab4 	.word	0x20001ab4
   15428:	000219e7 	.word	0x000219e7
   1542c:	00021834 	.word	0x00021834
   15430:	000150a9 	.word	0x000150a9
   15434:	00014f99 	.word	0x00014f99
   15438:	00015119 	.word	0x00015119
   1543c:	0001cef9 	.word	0x0001cef9

00015440 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
   15440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   15444:	4b12      	ldr	r3, [pc, #72]	; (15490 <lv_img_cache_invalidate_src+0x50>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
   15446:	4f13      	ldr	r7, [pc, #76]	; (15494 <lv_img_cache_invalidate_src+0x54>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   15448:	f8d3 8000 	ldr.w	r8, [r3]
{
   1544c:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
   1544e:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
   15450:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
   15454:	883a      	ldrh	r2, [r7, #0]
   15456:	b2ab      	uxth	r3, r5
   15458:	429a      	cmp	r2, r3
   1545a:	d801      	bhi.n	15460 <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
   1545c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
   15460:	b2ac      	uxth	r4, r5
   15462:	fb09 8404 	mla	r4, r9, r4, r8
   15466:	6863      	ldr	r3, [r4, #4]
   15468:	42b3      	cmp	r3, r6
   1546a:	d000      	beq.n	1546e <lv_img_cache_invalidate_src+0x2e>
   1546c:	b96e      	cbnz	r6, 1548a <lv_img_cache_invalidate_src+0x4a>
            if(cache[i].dec_dsc.src != NULL) {
   1546e:	b113      	cbz	r3, 15476 <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
   15470:	4620      	mov	r0, r4
   15472:	f007 fd4f 	bl	1cf14 <lv_img_decoder_close>
            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
   15476:	2224      	movs	r2, #36	; 0x24
   15478:	2100      	movs	r1, #0
   1547a:	4620      	mov	r0, r4
   1547c:	f003 fc07 	bl	18c8e <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
   15480:	2228      	movs	r2, #40	; 0x28
   15482:	2100      	movs	r1, #0
   15484:	4620      	mov	r0, r4
   15486:	f003 fc02 	bl	18c8e <memset>
   1548a:	3501      	adds	r5, #1
   1548c:	e7e2      	b.n	15454 <lv_img_cache_invalidate_src+0x14>
   1548e:	bf00      	nop
   15490:	20001ab0 	.word	0x20001ab0
   15494:	20005d20 	.word	0x20005d20

00015498 <lv_img_cache_set_size>:
{
   15498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   1549c:	4c17      	ldr	r4, [pc, #92]	; (154fc <lv_img_cache_set_size+0x64>)
   1549e:	6823      	ldr	r3, [r4, #0]
{
   154a0:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   154a2:	b12b      	cbz	r3, 154b0 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
   154a4:	2000      	movs	r0, #0
   154a6:	f7ff ffcb 	bl	15440 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
   154aa:	6820      	ldr	r0, [r4, #0]
   154ac:	f000 fa1c 	bl	158e8 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
   154b0:	2728      	movs	r7, #40	; 0x28
   154b2:	fb07 f005 	mul.w	r0, r7, r5
   154b6:	f000 f9f1 	bl	1589c <lv_mem_alloc>
   154ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; 15500 <lv_img_cache_set_size+0x68>
   154be:	6020      	str	r0, [r4, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
   154c0:	b918      	cbnz	r0, 154ca <lv_img_cache_set_size+0x32>
        entry_cnt = 0;
   154c2:	f8a8 0000 	strh.w	r0, [r8]
}
   154c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
   154ca:	f8a8 5000 	strh.w	r5, [r8]
    for(i = 0; i < entry_cnt; i++) {
   154ce:	2500      	movs	r5, #0
   154d0:	f8b8 2000 	ldrh.w	r2, [r8]
   154d4:	b2ab      	uxth	r3, r5
   154d6:	429a      	cmp	r2, r3
   154d8:	d9f5      	bls.n	154c6 <lv_img_cache_set_size+0x2e>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
   154da:	b2ae      	uxth	r6, r5
   154dc:	6820      	ldr	r0, [r4, #0]
   154de:	437e      	muls	r6, r7
   154e0:	2224      	movs	r2, #36	; 0x24
   154e2:	2100      	movs	r1, #0
   154e4:	4430      	add	r0, r6
   154e6:	f003 fbd2 	bl	18c8e <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
   154ea:	6820      	ldr	r0, [r4, #0]
   154ec:	2228      	movs	r2, #40	; 0x28
   154ee:	2100      	movs	r1, #0
   154f0:	4430      	add	r0, r6
   154f2:	f003 fbcc 	bl	18c8e <memset>
   154f6:	3501      	adds	r5, #1
   154f8:	e7ea      	b.n	154d0 <lv_img_cache_set_size+0x38>
   154fa:	bf00      	nop
   154fc:	20001ab0 	.word	0x20001ab0
   15500:	20005d20 	.word	0x20005d20

00015504 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
   15504:	b570      	push	{r4, r5, r6, lr}
   15506:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   15508:	4828      	ldr	r0, [pc, #160]	; (155ac <lv_disp_drv_register+0xa8>)
   1550a:	f007 fe70 	bl	1d1ee <lv_ll_ins_head>
    if(!disp) {
   1550e:	4604      	mov	r4, r0
   15510:	b910      	cbnz	r0, 15518 <lv_disp_drv_register+0x14>
        LV_ASSERT_MEM(disp);
        return NULL;
   15512:	2400      	movs	r4, #0
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/

    return disp;
}
   15514:	4620      	mov	r0, r4
   15516:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
   15518:	4629      	mov	r1, r5
   1551a:	2224      	movs	r2, #36	; 0x24
   1551c:	f003 fb8d 	bl	18c3a <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
   15520:	2220      	movs	r2, #32
   15522:	2100      	movs	r1, #0
   15524:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   15528:	f003 fbb1 	bl	18c8e <memset>
    if(disp_def == NULL) disp_def = disp;
   1552c:	4d20      	ldr	r5, [pc, #128]	; (155b0 <lv_disp_drv_register+0xac>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
   1552e:	f44f 7280 	mov.w	r2, #256	; 0x100
   15532:	2100      	movs	r1, #0
   15534:	f104 0040 	add.w	r0, r4, #64	; 0x40
   15538:	f003 fba9 	bl	18c8e <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   1553c:	2138      	movs	r1, #56	; 0x38
   1553e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15542:	f007 fe4a 	bl	1d1da <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
   15546:	682b      	ldr	r3, [r5, #0]
   15548:	b903      	cbnz	r3, 1554c <lv_disp_drv_register+0x48>
   1554a:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
   1554c:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    lv_disp_t * disp_def_tmp = disp_def;
   15550:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   15552:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
   15554:	f36f 0309 	bfc	r3, #0, #10
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   15558:	2100      	movs	r1, #0
    disp->inv_p = 0;
   1555a:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1555e:	4608      	mov	r0, r1
   15560:	f7fe fb82 	bl	13c68 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   15564:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   15566:	6360      	str	r0, [r4, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   15568:	4608      	mov	r0, r1
   1556a:	f7fe fb7d 	bl	13c68 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1556e:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   15570:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   15572:	4608      	mov	r0, r1
   15574:	f7fe fb78 	bl	13c68 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
   15578:	490e      	ldr	r1, [pc, #56]	; (155b4 <lv_disp_drv_register+0xb0>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1557a:	63e0      	str	r0, [r4, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
   1557c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1557e:	f006 fa58 	bl	1ba32 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
   15582:	490c      	ldr	r1, [pc, #48]	; (155b4 <lv_disp_drv_register+0xb0>)
   15584:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   15586:	f006 fa54 	bl	1ba32 <lv_obj_set_style>
    lv_obj_invalidate(disp->act_scr);
   1558a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1558c:	f006 f939 	bl	1b802 <lv_obj_invalidate>
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
   15590:	4623      	mov	r3, r4
   15592:	2203      	movs	r2, #3
   15594:	2132      	movs	r1, #50	; 0x32
   15596:	4808      	ldr	r0, [pc, #32]	; (155b8 <lv_disp_drv_register+0xb4>)
    disp_def = disp_def_tmp; /*Revert the default display*/
   15598:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
   1559a:	f007 fddb 	bl	1d154 <lv_task_create>
   1559e:	6260      	str	r0, [r4, #36]	; 0x24
    if(disp->refr_task == NULL) return NULL;
   155a0:	2800      	cmp	r0, #0
   155a2:	d0b6      	beq.n	15512 <lv_disp_drv_register+0xe>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   155a4:	f007 fdea 	bl	1d17c <lv_task_ready>
    return disp;
   155a8:	e7b4      	b.n	15514 <lv_disp_drv_register+0x10>
   155aa:	bf00      	nop
   155ac:	20001aa0 	.word	0x20001aa0
   155b0:	20001a88 	.word	0x20001a88
   155b4:	20001994 	.word	0x20001994
   155b8:	00014049 	.word	0x00014049

000155bc <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   155bc:	4b01      	ldr	r3, [pc, #4]	; (155c4 <lv_disp_get_default+0x8>)
   155be:	6818      	ldr	r0, [r3, #0]
   155c0:	4770      	bx	lr
   155c2:	bf00      	nop
   155c4:	20001a88 	.word	0x20001a88

000155c8 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   155c8:	b910      	cbnz	r0, 155d0 <lv_disp_get_hor_res+0x8>
    return disp_def;
   155ca:	4b06      	ldr	r3, [pc, #24]	; (155e4 <lv_disp_get_hor_res+0x1c>)
   155cc:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   155ce:	b138      	cbz	r0, 155e0 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   155d0:	7a03      	ldrb	r3, [r0, #8]
   155d2:	07db      	lsls	r3, r3, #31
   155d4:	bf54      	ite	pl
   155d6:	f9b0 0000 	ldrshpl.w	r0, [r0]
   155da:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
   155de:	4770      	bx	lr
        return LV_HOR_RES_MAX;
   155e0:	20f0      	movs	r0, #240	; 0xf0
}
   155e2:	4770      	bx	lr
   155e4:	20001a88 	.word	0x20001a88

000155e8 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   155e8:	b910      	cbnz	r0, 155f0 <lv_disp_get_ver_res+0x8>
    return disp_def;
   155ea:	4b06      	ldr	r3, [pc, #24]	; (15604 <lv_disp_get_ver_res+0x1c>)
   155ec:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   155ee:	b138      	cbz	r0, 15600 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   155f0:	7a03      	ldrb	r3, [r0, #8]
   155f2:	07db      	lsls	r3, r3, #31
   155f4:	bf54      	ite	pl
   155f6:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
   155fa:	f9b0 0000 	ldrshmi.w	r0, [r0]
   155fe:	4770      	bx	lr
        return LV_VER_RES_MAX;
   15600:	20f0      	movs	r0, #240	; 0xf0
}
   15602:	4770      	bx	lr
   15604:	20001a88 	.word	0x20001a88

00015608 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
   15608:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   1560a:	4803      	ldr	r0, [pc, #12]	; (15618 <lv_indev_get_next+0x10>)
    if(indev == NULL)
   1560c:	b909      	cbnz	r1, 15612 <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   1560e:	f007 be2a 	b.w	1d266 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   15612:	f007 be2e 	b.w	1d272 <lv_ll_get_next>
   15616:	bf00      	nop
   15618:	20001ac0 	.word	0x20001ac0

0001561c <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
   1561c:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   1561e:	2114      	movs	r1, #20
   15620:	4803      	ldr	r0, [pc, #12]	; (15630 <lv_task_core_init+0x14>)
   15622:	f007 fdda 	bl	1d1da <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   15626:	4b03      	ldr	r3, [pc, #12]	; (15634 <lv_task_core_init+0x18>)
   15628:	2201      	movs	r2, #1
   1562a:	701a      	strb	r2, [r3, #0]
}
   1562c:	bd08      	pop	{r3, pc}
   1562e:	bf00      	nop
   15630:	20001ad0 	.word	0x20001ad0
   15634:	2000a2b2 	.word	0x2000a2b2

00015638 <lv_task_create_basic>:
{
   15638:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1563a:	481a      	ldr	r0, [pc, #104]	; (156a4 <lv_task_create_basic+0x6c>)
   1563c:	f007 fe13 	bl	1d266 <lv_ll_get_head>
    if(NULL == tmp) {
   15640:	4601      	mov	r1, r0
   15642:	b148      	cbz	r0, 15658 <lv_task_create_basic+0x20>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   15644:	4c17      	ldr	r4, [pc, #92]	; (156a4 <lv_task_create_basic+0x6c>)
            if(tmp->prio <= DEF_PRIO) {
   15646:	7c0b      	ldrb	r3, [r1, #16]
   15648:	f003 0307 	and.w	r3, r3, #7
   1564c:	2b03      	cmp	r3, #3
   1564e:	d80b      	bhi.n	15668 <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   15650:	4814      	ldr	r0, [pc, #80]	; (156a4 <lv_task_create_basic+0x6c>)
   15652:	f007 fe2d 	bl	1d2b0 <lv_ll_ins_prev>
   15656:	e002      	b.n	1565e <lv_task_create_basic+0x26>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   15658:	4812      	ldr	r0, [pc, #72]	; (156a4 <lv_task_create_basic+0x6c>)
   1565a:	f007 fdc8 	bl	1d1ee <lv_ll_ins_head>
        if(new_task == NULL) return NULL;
   1565e:	4604      	mov	r4, r0
   15660:	b960      	cbnz	r0, 1567c <lv_task_create_basic+0x44>
   15662:	2400      	movs	r4, #0
}
   15664:	4620      	mov	r0, r4
   15666:	bd38      	pop	{r3, r4, r5, pc}
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   15668:	4620      	mov	r0, r4
   1566a:	f007 fe02 	bl	1d272 <lv_ll_get_next>
        } while(tmp != NULL);
   1566e:	4601      	mov	r1, r0
   15670:	2800      	cmp	r0, #0
   15672:	d1e8      	bne.n	15646 <lv_task_create_basic+0xe>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   15674:	480b      	ldr	r0, [pc, #44]	; (156a4 <lv_task_create_basic+0x6c>)
   15676:	f007 fdd8 	bl	1d22a <lv_ll_ins_tail>
   1567a:	e7f0      	b.n	1565e <lv_task_create_basic+0x26>
    new_task->period  = DEF_PERIOD;
   1567c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   15680:	6003      	str	r3, [r0, #0]
    new_task->prio    = DEF_PRIO;
   15682:	7c03      	ldrb	r3, [r0, #16]
   15684:	f023 030f 	bic.w	r3, r3, #15
   15688:	f043 0303 	orr.w	r3, r3, #3
    new_task->task_cb = NULL;
   1568c:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
   1568e:	7403      	strb	r3, [r0, #16]
    new_task->task_cb = NULL;
   15690:	6085      	str	r5, [r0, #8]
    new_task->last_run = lv_tick_get();
   15692:	f007 fc95 	bl	1cfc0 <lv_tick_get>
    task_created = true;
   15696:	4b04      	ldr	r3, [pc, #16]	; (156a8 <lv_task_create_basic+0x70>)
    new_task->last_run = lv_tick_get();
   15698:	6060      	str	r0, [r4, #4]
    task_created = true;
   1569a:	2201      	movs	r2, #1
    new_task->user_data = NULL;
   1569c:	60e5      	str	r5, [r4, #12]
    task_created = true;
   1569e:	701a      	strb	r2, [r3, #0]
    return new_task;
   156a0:	e7e0      	b.n	15664 <lv_task_create_basic+0x2c>
   156a2:	bf00      	nop
   156a4:	20001ad0 	.word	0x20001ad0
   156a8:	2000a2b3 	.word	0x2000a2b3

000156ac <lv_task_del>:
{
   156ac:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
   156ae:	4601      	mov	r1, r0
{
   156b0:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
   156b2:	4807      	ldr	r0, [pc, #28]	; (156d0 <lv_task_del+0x24>)
   156b4:	f007 fe2d 	bl	1d312 <lv_ll_rem>
    lv_mem_free(task);
   156b8:	4620      	mov	r0, r4
   156ba:	f000 f915 	bl	158e8 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   156be:	4b05      	ldr	r3, [pc, #20]	; (156d4 <lv_task_del+0x28>)
   156c0:	681b      	ldr	r3, [r3, #0]
   156c2:	42a3      	cmp	r3, r4
   156c4:	bf02      	ittt	eq
   156c6:	4b04      	ldreq	r3, [pc, #16]	; (156d8 <lv_task_del+0x2c>)
   156c8:	2201      	moveq	r2, #1
   156ca:	701a      	strbeq	r2, [r3, #0]
}
   156cc:	bd10      	pop	{r4, pc}
   156ce:	bf00      	nop
   156d0:	20001ad0 	.word	0x20001ad0
   156d4:	20001acc 	.word	0x20001acc
   156d8:	2000a2b4 	.word	0x2000a2b4

000156dc <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   156dc:	b538      	push	{r3, r4, r5, lr}
   156de:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   156e0:	6840      	ldr	r0, [r0, #4]
   156e2:	f007 fc71 	bl	1cfc8 <lv_tick_elaps>
    if(elp >= task->period) {
   156e6:	6823      	ldr	r3, [r4, #0]
   156e8:	4283      	cmp	r3, r0
   156ea:	d817      	bhi.n	1571c <lv_task_exec+0x40>
        task->last_run = lv_tick_get();
   156ec:	f007 fc68 	bl	1cfc0 <lv_tick_get>
        task_deleted   = false;
   156f0:	4d0b      	ldr	r5, [pc, #44]	; (15720 <lv_task_exec+0x44>)
        task_created   = false;
   156f2:	4a0c      	ldr	r2, [pc, #48]	; (15724 <lv_task_exec+0x48>)
        task->last_run = lv_tick_get();
   156f4:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   156f6:	2300      	movs	r3, #0
   156f8:	702b      	strb	r3, [r5, #0]
        task_created   = false;
   156fa:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
   156fc:	68a3      	ldr	r3, [r4, #8]
   156fe:	b933      	cbnz	r3, 1570e <lv_task_exec+0x32>

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
            if(task->once != 0) {
   15700:	7c23      	ldrb	r3, [r4, #16]
   15702:	071b      	lsls	r3, r3, #28
   15704:	d508      	bpl.n	15718 <lv_task_exec+0x3c>
                lv_task_del(task);
   15706:	4620      	mov	r0, r4
   15708:	f7ff ffd0 	bl	156ac <lv_task_del>
   1570c:	e004      	b.n	15718 <lv_task_exec+0x3c>
        if(task->task_cb) task->task_cb(task);
   1570e:	4620      	mov	r0, r4
   15710:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   15712:	782b      	ldrb	r3, [r5, #0]
   15714:	2b00      	cmp	r3, #0
   15716:	d0f3      	beq.n	15700 <lv_task_exec+0x24>
                lv_task_del(task);
   15718:	2001      	movs	r0, #1
        }
        exec = true;
    }

    return exec;
}
   1571a:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
   1571c:	2000      	movs	r0, #0
   1571e:	e7fc      	b.n	1571a <lv_task_exec+0x3e>
   15720:	2000a2b4 	.word	0x2000a2b4
   15724:	2000a2b3 	.word	0x2000a2b3

00015728 <lv_task_handler>:
{
   15728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return;
   1572c:	4d3e      	ldr	r5, [pc, #248]	; (15828 <lv_task_handler+0x100>)
   1572e:	782c      	ldrb	r4, [r5, #0]
   15730:	b934      	cbnz	r4, 15740 <lv_task_handler+0x18>
    already_running = true;
   15732:	2301      	movs	r3, #1
   15734:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
   15736:	4b3d      	ldr	r3, [pc, #244]	; (1582c <lv_task_handler+0x104>)
   15738:	781b      	ldrb	r3, [r3, #0]
   1573a:	b923      	cbnz	r3, 15746 <lv_task_handler+0x1e>
        already_running = false; /*Release mutex*/
   1573c:	2300      	movs	r3, #0
   1573e:	702b      	strb	r3, [r5, #0]
}
   15740:	b003      	add	sp, #12
   15742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
   15746:	f007 fc3b 	bl	1cfc0 <lv_tick_get>
   1574a:	4b39      	ldr	r3, [pc, #228]	; (15830 <lv_task_handler+0x108>)
        task_deleted             = false;
   1574c:	4e39      	ldr	r6, [pc, #228]	; (15834 <lv_task_handler+0x10c>)
    handler_start = lv_tick_get();
   1574e:	6018      	str	r0, [r3, #0]
    lv_task_t * task_interrupter = NULL;
   15750:	9301      	str	r3, [sp, #4]
        task_deleted             = false;
   15752:	46a3      	mov	fp, r4
        task_created             = false;
   15754:	4f38      	ldr	r7, [pc, #224]	; (15838 <lv_task_handler+0x110>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   15756:	4839      	ldr	r0, [pc, #228]	; (1583c <lv_task_handler+0x114>)
        task_deleted             = false;
   15758:	f886 b000 	strb.w	fp, [r6]
        task_created             = false;
   1575c:	f887 b000 	strb.w	fp, [r7]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   15760:	f007 fd81 	bl	1d266 <lv_ll_get_head>
   15764:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1584c <lv_task_handler+0x124>
   15768:	f8c8 0000 	str.w	r0, [r8]
        while(LV_GC_ROOT(_lv_task_act)) {
   1576c:	46c1      	mov	r9, r8
   1576e:	f8d9 1000 	ldr.w	r1, [r9]
   15772:	b1b9      	cbz	r1, 157a4 <lv_task_handler+0x7c>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   15774:	4831      	ldr	r0, [pc, #196]	; (1583c <lv_task_handler+0x114>)
   15776:	f007 fd7c 	bl	1d272 <lv_ll_get_next>
   1577a:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   1577c:	f8d9 0000 	ldr.w	r0, [r9]
   15780:	7c03      	ldrb	r3, [r0, #16]
   15782:	f013 0207 	ands.w	r2, r3, #7
   15786:	d00d      	beq.n	157a4 <lv_task_handler+0x7c>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   15788:	42a0      	cmp	r0, r4
   1578a:	d103      	bne.n	15794 <lv_task_handler+0x6c>
                LV_GC_ROOT(_lv_task_act) = next;
   1578c:	f8c9 a000 	str.w	sl, [r9]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   15790:	2400      	movs	r4, #0
                continue; /*Load the next task*/
   15792:	e7ec      	b.n	1576e <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   15794:	2a05      	cmp	r2, #5
   15796:	d12b      	bne.n	157f0 <lv_task_handler+0xc8>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   15798:	f7ff ffa0 	bl	156dc <lv_task_exec>
            if(task_created || task_deleted) {
   1579c:	4b26      	ldr	r3, [pc, #152]	; (15838 <lv_task_handler+0x110>)
   1579e:	781b      	ldrb	r3, [r3, #0]
   157a0:	2b00      	cmp	r3, #0
   157a2:	d03a      	beq.n	1581a <lv_task_handler+0xf2>
    busy_time += lv_tick_elaps(handler_start);
   157a4:	9b01      	ldr	r3, [sp, #4]
   157a6:	4c26      	ldr	r4, [pc, #152]	; (15840 <lv_task_handler+0x118>)
   157a8:	6818      	ldr	r0, [r3, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   157aa:	4e26      	ldr	r6, [pc, #152]	; (15844 <lv_task_handler+0x11c>)
    busy_time += lv_tick_elaps(handler_start);
   157ac:	f007 fc0c 	bl	1cfc8 <lv_tick_elaps>
   157b0:	6823      	ldr	r3, [r4, #0]
   157b2:	4418      	add	r0, r3
   157b4:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   157b6:	6830      	ldr	r0, [r6, #0]
   157b8:	f007 fc06 	bl	1cfc8 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   157bc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   157c0:	d3bc      	bcc.n	1573c <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   157c2:	6822      	ldr	r2, [r4, #0]
   157c4:	2364      	movs	r3, #100	; 0x64
   157c6:	4353      	muls	r3, r2
   157c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   157cc:	fbb3 f3f2 	udiv	r3, r3, r2
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   157d0:	b2da      	uxtb	r2, r3
   157d2:	2a64      	cmp	r2, #100	; 0x64
   157d4:	bf98      	it	ls
   157d6:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   157da:	4a1b      	ldr	r2, [pc, #108]	; (15848 <lv_task_handler+0x120>)
   157dc:	bf94      	ite	ls
   157de:	b2db      	uxtbls	r3, r3
   157e0:	2300      	movhi	r3, #0
   157e2:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
   157e4:	2300      	movs	r3, #0
   157e6:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
   157e8:	f007 fbea 	bl	1cfc0 <lv_tick_get>
   157ec:	6030      	str	r0, [r6, #0]
   157ee:	e7a5      	b.n	1573c <lv_task_handler+0x14>
            else if(task_interrupter) {
   157f0:	b134      	cbz	r4, 15800 <lv_task_handler+0xd8>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   157f2:	7c22      	ldrb	r2, [r4, #16]
   157f4:	f003 0307 	and.w	r3, r3, #7
   157f8:	f002 0207 	and.w	r2, r2, #7
   157fc:	4293      	cmp	r3, r2
   157fe:	d9cd      	bls.n	1579c <lv_task_handler+0x74>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   15800:	f7ff ff6c 	bl	156dc <lv_task_exec>
   15804:	2800      	cmp	r0, #0
   15806:	d0c9      	beq.n	1579c <lv_task_handler+0x74>
                    if(!task_created && !task_deleted) {
   15808:	783b      	ldrb	r3, [r7, #0]
   1580a:	2b00      	cmp	r3, #0
   1580c:	d1ca      	bne.n	157a4 <lv_task_handler+0x7c>
   1580e:	7833      	ldrb	r3, [r6, #0]
   15810:	2b00      	cmp	r3, #0
   15812:	d1c7      	bne.n	157a4 <lv_task_handler+0x7c>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   15814:	f8d8 4000 	ldr.w	r4, [r8]
                        break;
   15818:	e79c      	b.n	15754 <lv_task_handler+0x2c>
            if(task_created || task_deleted) {
   1581a:	7833      	ldrb	r3, [r6, #0]
   1581c:	2b00      	cmp	r3, #0
   1581e:	d1c1      	bne.n	157a4 <lv_task_handler+0x7c>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   15820:	f8c9 a000 	str.w	sl, [r9]
   15824:	e7a3      	b.n	1576e <lv_task_handler+0x46>
   15826:	bf00      	nop
   15828:	2000a2b0 	.word	0x2000a2b0
   1582c:	2000a2b2 	.word	0x2000a2b2
   15830:	20001a90 	.word	0x20001a90
   15834:	2000a2b4 	.word	0x2000a2b4
   15838:	2000a2b3 	.word	0x2000a2b3
   1583c:	20001ad0 	.word	0x20001ad0
   15840:	20001a8c 	.word	0x20001a8c
   15844:	20001a94 	.word	0x20001a94
   15848:	2000a2b1 	.word	0x2000a2b1
   1584c:	20001acc 	.word	0x20001acc

00015850 <lv_task_set_prio>:
    if(task->prio == prio) return;
   15850:	7c03      	ldrb	r3, [r0, #16]
   15852:	f003 0307 	and.w	r3, r3, #7
   15856:	428b      	cmp	r3, r1
{
   15858:	b570      	push	{r4, r5, r6, lr}
   1585a:	4604      	mov	r4, r0
   1585c:	460d      	mov	r5, r1
    if(task->prio == prio) return;
   1585e:	d014      	beq.n	1588a <lv_task_set_prio+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
   15860:	480d      	ldr	r0, [pc, #52]	; (15898 <lv_task_set_prio+0x48>)
   15862:	4e0d      	ldr	r6, [pc, #52]	; (15898 <lv_task_set_prio+0x48>)
   15864:	f007 fcff 	bl	1d266 <lv_ll_get_head>
   15868:	4602      	mov	r2, r0
   1586a:	b132      	cbz	r2, 1587a <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
   1586c:	7c13      	ldrb	r3, [r2, #16]
   1586e:	f003 0307 	and.w	r3, r3, #7
   15872:	429d      	cmp	r5, r3
   15874:	db0a      	blt.n	1588c <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   15876:	42a2      	cmp	r2, r4
   15878:	d003      	beq.n	15882 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   1587a:	4621      	mov	r1, r4
   1587c:	4806      	ldr	r0, [pc, #24]	; (15898 <lv_task_set_prio+0x48>)
   1587e:	f007 fd82 	bl	1d386 <lv_ll_move_before>
    task->prio = prio;
   15882:	7c23      	ldrb	r3, [r4, #16]
   15884:	f365 0302 	bfi	r3, r5, #0, #3
   15888:	7423      	strb	r3, [r4, #16]
}
   1588a:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
   1588c:	4611      	mov	r1, r2
   1588e:	4630      	mov	r0, r6
   15890:	f007 fcef 	bl	1d272 <lv_ll_get_next>
   15894:	4602      	mov	r2, r0
   15896:	e7e8      	b.n	1586a <lv_task_set_prio+0x1a>
   15898:	20001ad0 	.word	0x20001ad0

0001589c <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
   1589c:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
   1589e:	4604      	mov	r4, r0
   158a0:	b198      	cbz	r0, 158ca <lv_mem_alloc+0x2e>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
   158a2:	0783      	lsls	r3, r0, #30
        size = size & (~0x3);
   158a4:	bf1c      	itt	ne
   158a6:	f020 0403 	bicne.w	r4, r0, #3
        size += 4;
   158aa:	3404      	addne	r4, #4
/*Use custom, user defined malloc function*/
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
   158ac:	1d20      	adds	r0, r4, #4
   158ae:	f001 fa17 	bl	16ce0 <k_malloc>
    if(alloc != NULL) {
   158b2:	4605      	mov	r5, r0
   158b4:	b158      	cbz	r0, 158ce <lv_mem_alloc+0x32>
        ((lv_mem_ent_t *)alloc)->header.s.d_size = size;
   158b6:	6803      	ldr	r3, [r0, #0]
   158b8:	f364 035f 	bfi	r3, r4, #1, #31
   158bc:	6003      	str	r3, [r0, #0]
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
   158be:	f043 0301 	orr.w	r3, r3, #1
   158c2:	f805 3b04 	strb.w	r3, [r5], #4
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
}
   158c6:	4628      	mov	r0, r5
   158c8:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
   158ca:	4d04      	ldr	r5, [pc, #16]	; (158dc <lv_mem_alloc+0x40>)
   158cc:	e7fb      	b.n	158c6 <lv_mem_alloc+0x2a>
    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");
   158ce:	4b04      	ldr	r3, [pc, #16]	; (158e0 <lv_mem_alloc+0x44>)
   158d0:	4904      	ldr	r1, [pc, #16]	; (158e4 <lv_mem_alloc+0x48>)
   158d2:	22a7      	movs	r2, #167	; 0xa7
   158d4:	2002      	movs	r0, #2
   158d6:	f000 f9a3 	bl	15c20 <lv_log_add>
   158da:	e7f4      	b.n	158c6 <lv_mem_alloc+0x2a>
   158dc:	20001a98 	.word	0x20001a98
   158e0:	00021a0a 	.word	0x00021a0a
   158e4:	00021a23 	.word	0x00021a23

000158e8 <lv_mem_free>:
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
    if(data == &zero_mem) return;
   158e8:	4b06      	ldr	r3, [pc, #24]	; (15904 <lv_mem_free+0x1c>)
   158ea:	4298      	cmp	r0, r3
   158ec:	d008      	beq.n	15900 <lv_mem_free+0x18>
    if(data == NULL) return;
   158ee:	b138      	cbz	r0, 15900 <lv_mem_free+0x18>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
    e->header.s.used = 0;
   158f0:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   158f4:	f36f 0300 	bfc	r3, #0, #1
   158f8:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
    }
#endif
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
   158fc:	f008 b885 	b.w	1da0a <k_free>
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
   15900:	4770      	bx	lr
   15902:	bf00      	nop
   15904:	20001a98 	.word	0x20001a98

00015908 <lv_mem_get_size>:

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
    if(data == NULL) return 0;
   15908:	b140      	cbz	r0, 1591c <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
   1590a:	4b05      	ldr	r3, [pc, #20]	; (15920 <lv_mem_get_size+0x18>)
   1590c:	4298      	cmp	r0, r3
   1590e:	d004      	beq.n	1591a <lv_mem_get_size+0x12>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));

    return e->header.s.d_size;
   15910:	f850 0c04 	ldr.w	r0, [r0, #-4]
   15914:	f3c0 005e 	ubfx	r0, r0, #1, #31
   15918:	4770      	bx	lr
    if(data == NULL) return 0;
   1591a:	2000      	movs	r0, #0
}
   1591c:	4770      	bx	lr
   1591e:	bf00      	nop
   15920:	20001a98 	.word	0x20001a98

00015924 <lv_mem_realloc>:
{
   15924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15926:	460d      	mov	r5, r1
    if(data_p != NULL) {
   15928:	4604      	mov	r4, r0
   1592a:	b130      	cbz	r0, 1593a <lv_mem_realloc+0x16>
        if(e->header.s.used == 0) {
   1592c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
   15930:	f013 0f01 	tst.w	r3, #1
   15934:	bf14      	ite	ne
   15936:	4604      	movne	r4, r0
   15938:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
   1593a:	4620      	mov	r0, r4
   1593c:	f7ff ffe4 	bl	15908 <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   15940:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
   15942:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   15944:	d012      	beq.n	1596c <lv_mem_realloc+0x48>
    new_p = lv_mem_alloc(new_size);
   15946:	4628      	mov	r0, r5
   15948:	f7ff ffa8 	bl	1589c <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
   1594c:	4607      	mov	r7, r0
   1594e:	b178      	cbz	r0, 15970 <lv_mem_realloc+0x4c>
   15950:	b154      	cbz	r4, 15968 <lv_mem_realloc+0x44>
        if(old_size != 0) {
   15952:	b14e      	cbz	r6, 15968 <lv_mem_realloc+0x44>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
   15954:	42ae      	cmp	r6, r5
   15956:	4632      	mov	r2, r6
   15958:	4621      	mov	r1, r4
   1595a:	bf28      	it	cs
   1595c:	462a      	movcs	r2, r5
   1595e:	f003 f96c 	bl	18c3a <memcpy>
            lv_mem_free(data_p);
   15962:	4620      	mov	r0, r4
   15964:	f7ff ffc0 	bl	158e8 <lv_mem_free>
}
   15968:	4638      	mov	r0, r7
   1596a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1596c:	4627      	mov	r7, r4
   1596e:	e7fb      	b.n	15968 <lv_mem_realloc+0x44>
    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");
   15970:	4b03      	ldr	r3, [pc, #12]	; (15980 <lv_mem_realloc+0x5c>)
   15972:	4904      	ldr	r1, [pc, #16]	; (15984 <lv_mem_realloc+0x60>)
   15974:	f44f 7281 	mov.w	r2, #258	; 0x102
   15978:	2002      	movs	r0, #2
   1597a:	f000 f951 	bl	15c20 <lv_log_add>
   1597e:	e7f3      	b.n	15968 <lv_mem_realloc+0x44>
   15980:	00021a0a 	.word	0x00021a0a
   15984:	00021a23 	.word	0x00021a23

00015988 <lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t lv_txt_get_width(const char * txt, uint16_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_txt_flag_t flag)
{
   15988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1598c:	4688      	mov	r8, r1
   1598e:	b085      	sub	sp, #20
   15990:	4617      	mov	r7, r2
   15992:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
   15994:	4605      	mov	r5, r0
   15996:	2400      	movs	r4, #0
   15998:	2800      	cmp	r0, #0
   1599a:	d03f      	beq.n	15a1c <lv_txt_get_width+0x94>
    if(font == NULL) return 0;
   1599c:	2a00      	cmp	r2, #0
   1599e:	d03f      	beq.n	15a20 <lv_txt_get_width+0x98>

    uint32_t i                   = 0;
   159a0:	9403      	str	r4, [sp, #12]
    lv_coord_t width             = 0;
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   159a2:	f88d 400b 	strb.w	r4, [sp, #11]
    uint32_t letter;
    uint32_t letter_next;

    if(length != 0) {
   159a6:	2900      	cmp	r1, #0
   159a8:	d036      	beq.n	15a18 <lv_txt_get_width+0x90>
        while(i < length) {
            letter      = lv_txt_encoded_next(txt, &i);
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   159aa:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
   159ae:	f8df a074 	ldr.w	sl, [pc, #116]	; 15a24 <lv_txt_get_width+0x9c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   159b2:	f009 0901 	and.w	r9, r9, #1
            letter      = lv_txt_encoded_next(txt, &i);
   159b6:	f8da 3000 	ldr.w	r3, [sl]
   159ba:	a903      	add	r1, sp, #12
   159bc:	4628      	mov	r0, r5
   159be:	4798      	blx	r3
   159c0:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
   159c2:	9803      	ldr	r0, [sp, #12]
   159c4:	f8da 3000 	ldr.w	r3, [sl]
   159c8:	2100      	movs	r1, #0
   159ca:	4428      	add	r0, r5
   159cc:	4798      	blx	r3
   159ce:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   159d0:	f1b9 0f00 	cmp.w	r9, #0
   159d4:	d111      	bne.n	159fa <lv_txt_get_width+0x72>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   159d6:	4659      	mov	r1, fp
   159d8:	4638      	mov	r0, r7
   159da:	f007 ffaf 	bl	1d93c <lv_font_get_glyph_width>
   159de:	b200      	sxth	r0, r0
            if(char_width > 0) {
   159e0:	2800      	cmp	r0, #0
   159e2:	dc14      	bgt.n	15a0e <lv_txt_get_width+0x86>
        while(i < length) {
   159e4:	9b03      	ldr	r3, [sp, #12]
   159e6:	4598      	cmp	r8, r3
   159e8:	d8e5      	bhi.n	159b6 <lv_txt_get_width+0x2e>
                width += char_width;
                width += letter_space;
            }
        }

        if(width > 0) {
   159ea:	2c00      	cmp	r4, #0
   159ec:	dd01      	ble.n	159f2 <lv_txt_get_width+0x6a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   159ee:	1ba4      	subs	r4, r4, r6
   159f0:	b224      	sxth	r4, r4
                                      aligned */
        }
    }

    return width;
}
   159f2:	4620      	mov	r0, r4
   159f4:	b005      	add	sp, #20
   159f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159fa:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
   159fc:	4659      	mov	r1, fp
   159fe:	f10d 000b 	add.w	r0, sp, #11
   15a02:	f007 fd08 	bl	1d416 <lv_txt_is_cmd>
   15a06:	9a01      	ldr	r2, [sp, #4]
   15a08:	2800      	cmp	r0, #0
   15a0a:	d0e4      	beq.n	159d6 <lv_txt_get_width+0x4e>
   15a0c:	e7ea      	b.n	159e4 <lv_txt_get_width+0x5c>
                width += letter_space;
   15a0e:	19a3      	adds	r3, r4, r6
   15a10:	fa00 f483 	sxtah	r4, r0, r3
   15a14:	b224      	sxth	r4, r4
   15a16:	e7e5      	b.n	159e4 <lv_txt_get_width+0x5c>
    lv_coord_t width             = 0;
   15a18:	460c      	mov	r4, r1
   15a1a:	e7ea      	b.n	159f2 <lv_txt_get_width+0x6a>
    if(txt == NULL) return 0;
   15a1c:	4604      	mov	r4, r0
   15a1e:	e7e8      	b.n	159f2 <lv_txt_get_width+0x6a>
   15a20:	4614      	mov	r4, r2
   15a22:	e7e6      	b.n	159f2 <lv_txt_get_width+0x6a>
   15a24:	2000cfec 	.word	0x2000cfec

00015a28 <lv_txt_get_next_line>:
{
   15a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a2c:	b091      	sub	sp, #68	; 0x44
   15a2e:	4699      	mov	r9, r3
   15a30:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   15a34:	9102      	str	r1, [sp, #8]
   15a36:	9207      	str	r2, [sp, #28]
   15a38:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
   15a3a:	4607      	mov	r7, r0
   15a3c:	2800      	cmp	r0, #0
   15a3e:	d05a      	beq.n	15af6 <lv_txt_get_next_line+0xce>
    if(font == NULL) return 0;
   15a40:	2900      	cmp	r1, #0
   15a42:	f000 80de 	beq.w	15c02 <lv_txt_get_next_line+0x1da>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   15a46:	9b03      	ldr	r3, [sp, #12]
   15a48:	f013 0302 	ands.w	r3, r3, #2
   15a4c:	9304      	str	r3, [sp, #16]
   15a4e:	f647 4318 	movw	r3, #31768	; 0x7c18
   15a52:	bf18      	it	ne
   15a54:	4699      	movne	r9, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   15a56:	2300      	movs	r3, #0
   15a58:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;                                        /* Iterating index into txt */
   15a5c:	930c      	str	r3, [sp, #48]	; 0x30
    while(txt[i] != '\0' && max_width > 0) {
   15a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15a60:	9300      	str	r3, [sp, #0]
   15a62:	eb07 0b03 	add.w	fp, r7, r3
   15a66:	5cfb      	ldrb	r3, [r7, r3]
   15a68:	2b00      	cmp	r3, #0
   15a6a:	d03b      	beq.n	15ae4 <lv_txt_get_next_line+0xbc>
   15a6c:	f1b9 0f00 	cmp.w	r9, #0
   15a70:	dd38      	ble.n	15ae4 <lv_txt_get_next_line+0xbc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   15a72:	9a04      	ldr	r2, [sp, #16]
   15a74:	f647 4318 	movw	r3, #31768	; 0x7c18
   15a78:	2a00      	cmp	r2, #0
   15a7a:	bf08      	it	eq
   15a7c:	464b      	moveq	r3, r9
   15a7e:	9306      	str	r3, [sp, #24]
    letter = lv_txt_encoded_next(txt, &i_next);
   15a80:	4b61      	ldr	r3, [pc, #388]	; (15c08 <lv_txt_get_next_line+0x1e0>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   15a82:	2500      	movs	r5, #0
    letter = lv_txt_encoded_next(txt, &i_next);
   15a84:	681b      	ldr	r3, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   15a86:	950f      	str	r5, [sp, #60]	; 0x3c
   15a88:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
    letter = lv_txt_encoded_next(txt, &i_next);
   15a8c:	a90e      	add	r1, sp, #56	; 0x38
   15a8e:	4658      	mov	r0, fp
   15a90:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   15a92:	9a03      	ldr	r2, [sp, #12]
    i_next_next = i_next;
   15a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15a96:	930f      	str	r3, [sp, #60]	; 0x3c
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   15a98:	f002 0201 	and.w	r2, r2, #1
    letter = lv_txt_encoded_next(txt, &i_next);
   15a9c:	4680      	mov	r8, r0
    uint32_t break_letter_count = 0; /* Number of characters up to the long word break point */
   15a9e:	9501      	str	r5, [sp, #4]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   15aa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   15aa4:	46aa      	mov	sl, r5
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   15aa6:	462e      	mov	r6, r5
    uint32_t letter_next = 0; /* Letter at i_next */
   15aa8:	462b      	mov	r3, r5
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   15aaa:	9208      	str	r2, [sp, #32]
    while(txt[i] != '\0') {
   15aac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15aae:	f81b 2002 	ldrb.w	r2, [fp, r2]
   15ab2:	bb1a      	cbnz	r2, 15afc <lv_txt_get_next_line+0xd4>
    if( break_index == NO_BREAK_FOUND ) {
   15ab4:	1c62      	adds	r2, r4, #1
   15ab6:	d06f      	beq.n	15b98 <lv_txt_get_next_line+0x170>
    if(word_len < LV_TXT_LINE_BREAK_LONG_LEN) {
   15ab8:	f1ba 0f0b 	cmp.w	sl, #11
   15abc:	d879      	bhi.n	15bb2 <lv_txt_get_next_line+0x18a>
        if( force ) return break_index;
   15abe:	9b00      	ldr	r3, [sp, #0]
   15ac0:	2b00      	cmp	r3, #0
   15ac2:	f040 8089 	bne.w	15bd8 <lv_txt_get_next_line+0x1b0>
   15ac6:	b2a4      	uxth	r4, r4
        max_width -= word_w;
   15ac8:	eba9 0905 	sub.w	r9, r9, r5
   15acc:	fa0f f989 	sxth.w	r9, r9
        if( advance == 0 ){
   15ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15ad2:	2c00      	cmp	r4, #0
   15ad4:	f040 8083 	bne.w	15bde <lv_txt_get_next_line+0x1b6>
            if(i == 0) lv_txt_encoded_next(txt, &i); // prevent inf loops
   15ad8:	b95b      	cbnz	r3, 15af2 <lv_txt_get_next_line+0xca>
   15ada:	4b4b      	ldr	r3, [pc, #300]	; (15c08 <lv_txt_get_next_line+0x1e0>)
   15adc:	a90c      	add	r1, sp, #48	; 0x30
   15ade:	681b      	ldr	r3, [r3, #0]
   15ae0:	4638      	mov	r0, r7
   15ae2:	4798      	blx	r3
    if(i == 0) {
   15ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15ae6:	b923      	cbnz	r3, 15af2 <lv_txt_get_next_line+0xca>
        lv_txt_encoded_next(txt, &i);
   15ae8:	4b47      	ldr	r3, [pc, #284]	; (15c08 <lv_txt_get_next_line+0x1e0>)
   15aea:	a90c      	add	r1, sp, #48	; 0x30
   15aec:	681b      	ldr	r3, [r3, #0]
   15aee:	4638      	mov	r0, r7
   15af0:	4798      	blx	r3
    return i;
   15af2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
}
   15af6:	b011      	add	sp, #68	; 0x44
   15af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
   15afc:	4b42      	ldr	r3, [pc, #264]	; (15c08 <lv_txt_get_next_line+0x1e0>)
   15afe:	a90f      	add	r1, sp, #60	; 0x3c
   15b00:	681b      	ldr	r3, [r3, #0]
   15b02:	4658      	mov	r0, fp
   15b04:	4798      	blx	r3
        word_len++;
   15b06:	f10a 0201 	add.w	r2, sl, #1
   15b0a:	9205      	str	r2, [sp, #20]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   15b0c:	9a08      	ldr	r2, [sp, #32]
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
   15b0e:	4603      	mov	r3, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   15b10:	b17a      	cbz	r2, 15b32 <lv_txt_get_next_line+0x10a>
   15b12:	9009      	str	r0, [sp, #36]	; 0x24
            if(lv_txt_is_cmd(cmd_state, letter) != false) {
   15b14:	4641      	mov	r1, r8
   15b16:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   15b1a:	f007 fc7c 	bl	1d416 <lv_txt_is_cmd>
   15b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15b20:	b138      	cbz	r0, 15b32 <lv_txt_get_next_line+0x10a>
        i = i_next;
   15b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15b24:	920d      	str	r2, [sp, #52]	; 0x34
        i_next = i_next_next;
   15b26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15b28:	920e      	str	r2, [sp, #56]	; 0x38
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
   15b2a:	f8dd a014 	ldr.w	sl, [sp, #20]
   15b2e:	4698      	mov	r8, r3
   15b30:	e7bc      	b.n	15aac <lv_txt_get_next_line+0x84>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   15b32:	461a      	mov	r2, r3
   15b34:	4641      	mov	r1, r8
   15b36:	9802      	ldr	r0, [sp, #8]
   15b38:	9309      	str	r3, [sp, #36]	; 0x24
   15b3a:	f007 feff 	bl	1d93c <lv_font_get_glyph_width>
   15b3e:	b200      	sxth	r0, r0
        cur_w += letter_w;
   15b40:	4406      	add	r6, r0
        if(break_index == NO_BREAK_FOUND && cur_w > max_width) {
   15b42:	1c63      	adds	r3, r4, #1
        cur_w += letter_w;
   15b44:	b236      	sxth	r6, r6
        if(break_index == NO_BREAK_FOUND && cur_w > max_width) {
   15b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15b48:	d105      	bne.n	15b56 <lv_txt_get_next_line+0x12e>
   15b4a:	9a06      	ldr	r2, [sp, #24]
   15b4c:	4296      	cmp	r6, r2
            break_index = i; 
   15b4e:	bfc4      	itt	gt
   15b50:	9c0d      	ldrgt	r4, [sp, #52]	; 0x34
   15b52:	f8cd a004 	strgt.w	sl, [sp, #4]
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   15b56:	f1b8 0f0a 	cmp.w	r8, #10
   15b5a:	d017      	beq.n	15b8c <lv_txt_get_next_line+0x164>
   15b5c:	f1b8 0f0d 	cmp.w	r8, #13
   15b60:	d014      	beq.n	15b8c <lv_txt_get_next_line+0x164>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   15b62:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 15c10 <lv_txt_get_next_line+0x1e8>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   15b66:	2200      	movs	r2, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   15b68:	b2d1      	uxtb	r1, r2
   15b6a:	f81c 1001 	ldrb.w	r1, [ip, r1]
   15b6e:	b949      	cbnz	r1, 15b84 <lv_txt_get_next_line+0x15c>
        if( word_w_ptr != NULL && break_index == NO_BREAK_FOUND ) *word_w_ptr = cur_w;
   15b70:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15b74:	bf08      	it	eq
   15b76:	4635      	moveq	r5, r6
        if(letter_w > 0) {
   15b78:	2800      	cmp	r0, #0
   15b7a:	ddd2      	ble.n	15b22 <lv_txt_get_next_line+0xfa>
            cur_w += letter_space;
   15b7c:	9a07      	ldr	r2, [sp, #28]
   15b7e:	4416      	add	r6, r2
   15b80:	b236      	sxth	r6, r6
   15b82:	e7ce      	b.n	15b22 <lv_txt_get_next_line+0xfa>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   15b84:	4588      	cmp	r8, r1
   15b86:	f102 0201 	add.w	r2, r2, #1
   15b8a:	d1ed      	bne.n	15b68 <lv_txt_get_next_line+0x140>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   15b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15b8e:	2a00      	cmp	r2, #0
   15b90:	d190      	bne.n	15ab4 <lv_txt_get_next_line+0x8c>
   15b92:	1c61      	adds	r1, r4, #1
   15b94:	d190      	bne.n	15ab8 <lv_txt_get_next_line+0x90>
   15b96:	4635      	mov	r5, r6
        if( word_len == 0 || (letter == '\r' && letter_next == '\n') ) i = i_next;
   15b98:	f1ba 0f00 	cmp.w	sl, #0
   15b9c:	d004      	beq.n	15ba8 <lv_txt_get_next_line+0x180>
   15b9e:	f1b8 0f0d 	cmp.w	r8, #13
   15ba2:	d103      	bne.n	15bac <lv_txt_get_next_line+0x184>
   15ba4:	2b0a      	cmp	r3, #10
   15ba6:	d101      	bne.n	15bac <lv_txt_get_next_line+0x184>
   15ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15baa:	930d      	str	r3, [sp, #52]	; 0x34
    return i;
   15bac:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   15bb0:	e78a      	b.n	15ac8 <lv_txt_get_next_line+0xa0>
    if(break_letter_count < LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN) {
   15bb2:	9b01      	ldr	r3, [sp, #4]
   15bb4:	2b02      	cmp	r3, #2
   15bb6:	d982      	bls.n	15abe <lv_txt_get_next_line+0x96>
        int32_t n_move = LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN - (word_len - break_letter_count);
   15bb8:	9b01      	ldr	r3, [sp, #4]
        i = break_index;
   15bba:	940d      	str	r4, [sp, #52]	; 0x34
        int32_t n_move = LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN - (word_len - break_letter_count);
   15bbc:	3303      	adds	r3, #3
   15bbe:	eba3 0a0a 	sub.w	sl, r3, sl
        for(;n_move>0; n_move--){
   15bc2:	f1ba 0f00 	cmp.w	sl, #0
   15bc6:	ddf1      	ble.n	15bac <lv_txt_get_next_line+0x184>
            lv_txt_encoded_prev(txt, &i);
   15bc8:	4b10      	ldr	r3, [pc, #64]	; (15c0c <lv_txt_get_next_line+0x1e4>)
   15bca:	a90d      	add	r1, sp, #52	; 0x34
   15bcc:	681b      	ldr	r3, [r3, #0]
   15bce:	4658      	mov	r0, fp
   15bd0:	4798      	blx	r3
        for(;n_move>0; n_move--){
   15bd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   15bd6:	e7f4      	b.n	15bc2 <lv_txt_get_next_line+0x19a>
        if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
   15bd8:	2500      	movs	r5, #0
        return 0;
   15bda:	462c      	mov	r4, r5
   15bdc:	e774      	b.n	15ac8 <lv_txt_get_next_line+0xa0>
        i += advance;
   15bde:	441c      	add	r4, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
   15be0:	783b      	ldrb	r3, [r7, #0]
        i += advance;
   15be2:	940c      	str	r4, [sp, #48]	; 0x30
        if(txt[0] == '\n' || txt[0] == '\r') break;
   15be4:	2b0a      	cmp	r3, #10
   15be6:	f43f af7d 	beq.w	15ae4 <lv_txt_get_next_line+0xbc>
   15bea:	2b0d      	cmp	r3, #13
   15bec:	f43f af7a 	beq.w	15ae4 <lv_txt_get_next_line+0xbc>
        if(txt[i] == '\n' || txt[i] == '\r'){
   15bf0:	5d3b      	ldrb	r3, [r7, r4]
   15bf2:	2b0a      	cmp	r3, #10
   15bf4:	d002      	beq.n	15bfc <lv_txt_get_next_line+0x1d4>
   15bf6:	2b0d      	cmp	r3, #13
   15bf8:	f47f af31 	bne.w	15a5e <lv_txt_get_next_line+0x36>
            i++;  /* Include the following newline in the current line */
   15bfc:	3401      	adds	r4, #1
   15bfe:	940c      	str	r4, [sp, #48]	; 0x30
            break;
   15c00:	e770      	b.n	15ae4 <lv_txt_get_next_line+0xbc>
    if(txt == NULL) return 0;
   15c02:	9802      	ldr	r0, [sp, #8]
   15c04:	e777      	b.n	15af6 <lv_txt_get_next_line+0xce>
   15c06:	bf00      	nop
   15c08:	2000cfec 	.word	0x2000cfec
   15c0c:	2000cff0 	.word	0x2000cff0
   15c10:	00021a58 	.word	0x00021a58

00015c14 <lv_log_register_print_cb>:
 * and send the formatted log message to a consol or serial port.
 * @param print_cb a function pointer to print a log
 */
void lv_log_register_print_cb(lv_log_print_g_cb_t print_cb)
{
    custom_print_cb = print_cb;
   15c14:	4b01      	ldr	r3, [pc, #4]	; (15c1c <lv_log_register_print_cb+0x8>)
   15c16:	6018      	str	r0, [r3, #0]
}
   15c18:	4770      	bx	lr
   15c1a:	bf00      	nop
   15c1c:	20001a9c 	.word	0x20001a9c

00015c20 <lv_log_add>:
 * @param file name of the file when the log added
 * @param line line number in the source code where the log added
 * @param dsc description of the log
 */
void lv_log_add(lv_log_level_t level, const char * file, int line, const char * dsc)
{
   15c20:	b410      	push	{r4}
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
   15c22:	1e44      	subs	r4, r0, #1
   15c24:	b2e4      	uxtb	r4, r4
   15c26:	2c03      	cmp	r4, #3
   15c28:	d805      	bhi.n	15c36 <lv_log_add+0x16>

#if LV_LOG_PRINTF
        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error"};
        printf("%s: %s \t(%s #%d)\n", lvl_prefix[level], dsc, file, line);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, dsc);
   15c2a:	4c04      	ldr	r4, [pc, #16]	; (15c3c <lv_log_add+0x1c>)
   15c2c:	6824      	ldr	r4, [r4, #0]
   15c2e:	b114      	cbz	r4, 15c36 <lv_log_add+0x16>
   15c30:	46a4      	mov	ip, r4
#endif
    }
}
   15c32:	bc10      	pop	{r4}
        if(custom_print_cb) custom_print_cb(level, file, line, dsc);
   15c34:	4760      	bx	ip
}
   15c36:	bc10      	pop	{r4}
   15c38:	4770      	bx	lr
   15c3a:	bf00      	nop
   15c3c:	20001a9c 	.word	0x20001a9c

00015c40 <lv_label_revert_dots>:

    lv_obj_invalidate(label);
}

static void lv_label_revert_dots(lv_obj_t * label)
{
   15c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c44:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   15c46:	f006 f8a3 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   15c4a:	7b83      	ldrb	r3, [r0, #14]
   15c4c:	f003 0307 	and.w	r3, r3, #7
   15c50:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   15c52:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   15c54:	d126      	bne.n	15ca4 <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
   15c56:	8901      	ldrh	r1, [r0, #8]
   15c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15c5c:	4299      	cmp	r1, r3
   15c5e:	d021      	beq.n	15ca4 <lv_label_revert_dots+0x64>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
   15c60:	4b12      	ldr	r3, [pc, #72]	; (15cac <lv_label_revert_dots+0x6c>)
   15c62:	6800      	ldr	r0, [r0, #0]
   15c64:	681b      	ldr	r3, [r3, #0]
   15c66:	3903      	subs	r1, #3
   15c68:	4798      	blx	r3
   15c6a:	4680      	mov	r8, r0
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   15c6c:	4628      	mov	r0, r5
   15c6e:	f006 f88f 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
   15c72:	7bc3      	ldrb	r3, [r0, #15]
   15c74:	079b      	lsls	r3, r3, #30
        return ext->dot.tmp_ptr;
   15c76:	bf4c      	ite	mi
   15c78:	6840      	ldrmi	r0, [r0, #4]
    } else {
        return ext->dot.tmp;
   15c7a:	3004      	addpl	r0, #4
    while(ext->text[byte_i + i] != '\0') {
   15c7c:	2100      	movs	r1, #0
   15c7e:	b2ce      	uxtb	r6, r1
   15c80:	eb06 0308 	add.w	r3, r6, r8
   15c84:	6822      	ldr	r2, [r4, #0]
   15c86:	5d86      	ldrb	r6, [r0, r6]
   15c88:	f812 c003 	ldrb.w	ip, [r2, r3]
   15c8c:	18d7      	adds	r7, r2, r3
   15c8e:	3101      	adds	r1, #1
   15c90:	f1bc 0f00 	cmp.w	ip, #0
   15c94:	d108      	bne.n	15ca8 <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
   15c96:	703e      	strb	r6, [r7, #0]
    lv_label_dot_tmp_free(label);
   15c98:	4628      	mov	r0, r5
   15c9a:	f007 fc4c 	bl	1d536 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
   15c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15ca2:	8123      	strh	r3, [r4, #8]
}
   15ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
   15ca8:	54d6      	strb	r6, [r2, r3]
        i++;
   15caa:	e7e8      	b.n	15c7e <lv_label_revert_dots+0x3e>
   15cac:	2000cfe4 	.word	0x2000cfe4

00015cb0 <lv_label_set_dot_tmp>:
{
   15cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15cb2:	4616      	mov	r6, r2
   15cb4:	4604      	mov	r4, r0
   15cb6:	460f      	mov	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   15cb8:	f006 f86a 	bl	1bd90 <lv_obj_get_ext_attr>
   15cbc:	4605      	mov	r5, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
   15cbe:	4620      	mov	r0, r4
   15cc0:	f007 fc39 	bl	1d536 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
   15cc4:	2e04      	cmp	r6, #4
   15cc6:	d91b      	bls.n	15d00 <lv_label_set_dot_tmp+0x50>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
   15cc8:	1c70      	adds	r0, r6, #1
   15cca:	f7ff fde7 	bl	1589c <lv_mem_alloc>
   15cce:	4604      	mov	r4, r0
   15cd0:	6068      	str	r0, [r5, #4]
        if(ext->dot.tmp_ptr == NULL) {
   15cd2:	b940      	cbnz	r0, 15ce6 <lv_label_set_dot_tmp+0x36>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
   15cd4:	2003      	movs	r0, #3
   15cd6:	4b0f      	ldr	r3, [pc, #60]	; (15d14 <lv_label_set_dot_tmp+0x64>)
   15cd8:	490f      	ldr	r1, [pc, #60]	; (15d18 <lv_label_set_dot_tmp+0x68>)
   15cda:	f240 526e 	movw	r2, #1390	; 0x56e
   15cde:	f7ff ff9f 	bl	15c20 <lv_log_add>
   15ce2:	4620      	mov	r0, r4
}
   15ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(ext->dot.tmp_ptr, data, len);
   15ce6:	4632      	mov	r2, r6
   15ce8:	4639      	mov	r1, r7
   15cea:	f002 ffa6 	bl	18c3a <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
   15cee:	686b      	ldr	r3, [r5, #4]
   15cf0:	2200      	movs	r2, #0
   15cf2:	559a      	strb	r2, [r3, r6]
        ext->dot_tmp_alloc    = true;
   15cf4:	7beb      	ldrb	r3, [r5, #15]
   15cf6:	f043 0302 	orr.w	r3, r3, #2
   15cfa:	73eb      	strb	r3, [r5, #15]
    return true;
   15cfc:	2001      	movs	r0, #1
   15cfe:	e7f1      	b.n	15ce4 <lv_label_set_dot_tmp+0x34>
        ext->dot_tmp_alloc = false;
   15d00:	7beb      	ldrb	r3, [r5, #15]
   15d02:	f36f 0341 	bfc	r3, #1, #1
   15d06:	73eb      	strb	r3, [r5, #15]
        memcpy(ext->dot.tmp, data, len);
   15d08:	4632      	mov	r2, r6
   15d0a:	4639      	mov	r1, r7
   15d0c:	1d28      	adds	r0, r5, #4
   15d0e:	f002 ff94 	bl	18c3a <memcpy>
   15d12:	e7f3      	b.n	15cfc <lv_label_set_dot_tmp+0x4c>
   15d14:	00021a73 	.word	0x00021a73
   15d18:	00021a9d 	.word	0x00021a9d

00015d1c <lv_label_get_letter_on>:
{
   15d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d20:	b08b      	sub	sp, #44	; 0x2c
   15d22:	4680      	mov	r8, r0
   15d24:	9107      	str	r1, [sp, #28]
    const char * txt         = lv_label_get_text(label);
   15d26:	f007 fc41 	bl	1d5ac <lv_label_get_text>
   15d2a:	9003      	str	r0, [sp, #12]
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
   15d2c:	4640      	mov	r0, r8
   15d2e:	f006 f82f 	bl	1bd90 <lv_obj_get_ext_attr>
   15d32:	4604      	mov	r4, r0
    lv_coord_t max_w         = lv_obj_get_width(label);
   15d34:	4640      	mov	r0, r8
   15d36:	f005 ffbd 	bl	1bcb4 <lv_obj_get_width>
   15d3a:	9005      	str	r0, [sp, #20]
    const lv_style_t * style = lv_obj_get_style(label);
   15d3c:	4640      	mov	r0, r8
   15d3e:	f7fe f8c3 	bl	13ec8 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
   15d42:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15d44:	9304      	str	r3, [sp, #16]
    uint8_t letter_height    = lv_font_get_line_height(font);
   15d46:	7a1b      	ldrb	r3, [r3, #8]
   15d48:	9306      	str	r3, [sp, #24]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   15d4a:	7ba3      	ldrb	r3, [r4, #14]
    const lv_style_t * style = lv_obj_get_style(label);
   15d4c:	4683      	mov	fp, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   15d4e:	f3c3 1680 	ubfx	r6, r3, #6, #1
    lv_label_align_t align = lv_label_get_align(label);
   15d52:	4640      	mov	r0, r8
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   15d54:	061b      	lsls	r3, r3, #24
   15d56:	bf48      	it	mi
   15d58:	f046 0602 	orrmi.w	r6, r6, #2
    lv_label_align_t align = lv_label_get_align(label);
   15d5c:	f007 fc32 	bl	1d5c4 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   15d60:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
   15d62:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   15d64:	d113      	bne.n	15d8e <lv_label_get_letter_on+0x72>
   15d66:	f046 0604 	orr.w	r6, r6, #4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   15d6a:	7ba3      	ldrb	r3, [r4, #14]
        max_w = LV_COORD_MAX;
   15d6c:	9a05      	ldr	r2, [sp, #20]
   15d6e:	f013 0f07 	tst.w	r3, #7
   15d72:	f647 4318 	movw	r3, #31768	; 0x7c18
   15d76:	bf08      	it	eq
   15d78:	461a      	moveq	r2, r3
   15d7a:	f04f 0a00 	mov.w	sl, #0
   15d7e:	9205      	str	r2, [sp, #20]
   15d80:	4655      	mov	r5, sl
    while(txt[line_start] != '\0') {
   15d82:	9b03      	ldr	r3, [sp, #12]
   15d84:	195f      	adds	r7, r3, r5
   15d86:	5d5b      	ldrb	r3, [r3, r5]
   15d88:	b933      	cbnz	r3, 15d98 <lv_label_get_letter_on+0x7c>
   15d8a:	462c      	mov	r4, r5
   15d8c:	e021      	b.n	15dd2 <lv_label_get_letter_on+0xb6>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   15d8e:	2802      	cmp	r0, #2
   15d90:	bf08      	it	eq
   15d92:	f046 0608 	orreq.w	r6, r6, #8
   15d96:	e7e8      	b.n	15d6a <lv_label_get_letter_on+0x4e>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   15d98:	f9bb 2038 	ldrsh.w	r2, [fp, #56]	; 0x38
   15d9c:	9600      	str	r6, [sp, #0]
   15d9e:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
   15da2:	4638      	mov	r0, r7
   15da4:	f7ff fe40 	bl	15a28 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) {
   15da8:	9b07      	ldr	r3, [sp, #28]
   15daa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   15dae:	9b06      	ldr	r3, [sp, #24]
   15db0:	4453      	add	r3, sl
   15db2:	429a      	cmp	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   15db4:	eb00 0405 	add.w	r4, r0, r5
        if(pos->y <= y + letter_height) {
   15db8:	dc3a      	bgt.n	15e30 <lv_label_get_letter_on+0x114>
            letter = lv_txt_encoded_prev(txt, &tmp);
   15dba:	4b4c      	ldr	r3, [pc, #304]	; (15eec <lv_label_get_letter_on+0x1d0>)
            uint32_t tmp = new_line_start;
   15dbc:	9409      	str	r4, [sp, #36]	; 0x24
            letter = lv_txt_encoded_prev(txt, &tmp);
   15dbe:	681b      	ldr	r3, [r3, #0]
   15dc0:	9803      	ldr	r0, [sp, #12]
   15dc2:	a909      	add	r1, sp, #36	; 0x24
   15dc4:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0' ) new_line_start++;
   15dc6:	280a      	cmp	r0, #10
   15dc8:	d003      	beq.n	15dd2 <lv_label_get_letter_on+0xb6>
   15dca:	9b03      	ldr	r3, [sp, #12]
   15dcc:	5d1b      	ldrb	r3, [r3, r4]
   15dce:	b903      	cbnz	r3, 15dd2 <lv_label_get_letter_on+0xb6>
   15dd0:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
   15dd2:	f1b9 0f01 	cmp.w	r9, #1
   15dd6:	d134      	bne.n	15e42 <lv_label_get_letter_on+0x126>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, style->text.letter_space, flag);
   15dd8:	1b61      	subs	r1, r4, r5
   15dda:	f9bb 3038 	ldrsh.w	r3, [fp, #56]	; 0x38
   15dde:	9a04      	ldr	r2, [sp, #16]
   15de0:	9600      	str	r6, [sp, #0]
   15de2:	b289      	uxth	r1, r1
   15de4:	4638      	mov	r0, r7
   15de6:	f7ff fdcf 	bl	15988 <lv_txt_get_width>
   15dea:	4681      	mov	r9, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
   15dec:	4640      	mov	r0, r8
   15dee:	f005 ff61 	bl	1bcb4 <lv_obj_get_width>
   15df2:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
   15df6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   15dfa:	ea4f 0969 	mov.w	r9, r9, asr #1
   15dfe:	ebc9 0960 	rsb	r9, r9, r0, asr #1
   15e02:	fa0f f889 	sxth.w	r8, r9
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   15e06:	2300      	movs	r3, #0
   15e08:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i = 0;
   15e0c:	9309      	str	r3, [sp, #36]	; 0x24
    if(new_line_start > 0) {
   15e0e:	2c00      	cmp	r4, #0
   15e10:	d165      	bne.n	15ede <lv_label_get_letter_on+0x1c2>
    logical_pos = lv_txt_encoded_get_char_id(bidi_txt, i);
   15e12:	4e37      	ldr	r6, [pc, #220]	; (15ef0 <lv_label_get_letter_on+0x1d4>)
   15e14:	9909      	ldr	r1, [sp, #36]	; 0x24
   15e16:	6833      	ldr	r3, [r6, #0]
   15e18:	4638      	mov	r0, r7
   15e1a:	4798      	blx	r3
    return  logical_pos + lv_txt_encoded_get_char_id(txt, line_start);
   15e1c:	6833      	ldr	r3, [r6, #0]
    logical_pos = lv_txt_encoded_get_char_id(bidi_txt, i);
   15e1e:	4604      	mov	r4, r0
    return  logical_pos + lv_txt_encoded_get_char_id(txt, line_start);
   15e20:	4629      	mov	r1, r5
   15e22:	9803      	ldr	r0, [sp, #12]
   15e24:	4798      	blx	r3
   15e26:	4420      	add	r0, r4
}
   15e28:	b280      	uxth	r0, r0
   15e2a:	b00b      	add	sp, #44	; 0x2c
   15e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + style->text.line_space;
   15e30:	f8bb 303a 	ldrh.w	r3, [fp, #58]	; 0x3a
   15e34:	9a06      	ldr	r2, [sp, #24]
   15e36:	4413      	add	r3, r2
   15e38:	449a      	add	sl, r3
   15e3a:	fa0f fa8a 	sxth.w	sl, sl
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   15e3e:	4625      	mov	r5, r4
   15e40:	e79f      	b.n	15d82 <lv_label_get_letter_on+0x66>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
   15e42:	f1b9 0f02 	cmp.w	r9, #2
   15e46:	d111      	bne.n	15e6c <lv_label_get_letter_on+0x150>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, style->text.letter_space, flag);
   15e48:	1b61      	subs	r1, r4, r5
   15e4a:	f9bb 3038 	ldrsh.w	r3, [fp, #56]	; 0x38
   15e4e:	9a04      	ldr	r2, [sp, #16]
   15e50:	9600      	str	r6, [sp, #0]
   15e52:	b289      	uxth	r1, r1
   15e54:	4638      	mov	r0, r7
   15e56:	f7ff fd97 	bl	15988 <lv_txt_get_width>
   15e5a:	4681      	mov	r9, r0
        x += lv_obj_get_width(label) - line_w;
   15e5c:	4640      	mov	r0, r8
   15e5e:	f005 ff29 	bl	1bcb4 <lv_obj_get_width>
   15e62:	eba0 0009 	sub.w	r0, r0, r9
   15e66:	fa0f f880 	sxth.w	r8, r0
   15e6a:	e7cc      	b.n	15e06 <lv_label_get_letter_on+0xea>
    lv_coord_t x = 0;
   15e6c:	f04f 0800 	mov.w	r8, #0
   15e70:	e7c9      	b.n	15e06 <lv_label_get_letter_on+0xea>
                if(lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
   15e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e74:	9006      	str	r0, [sp, #24]
   15e76:	5cf9      	ldrb	r1, [r7, r3]
   15e78:	f10d 0023 	add.w	r0, sp, #35	; 0x23
   15e7c:	f007 facb 	bl	1d416 <lv_txt_is_cmd>
   15e80:	9a06      	ldr	r2, [sp, #24]
   15e82:	b190      	cbz	r0, 15eaa <lv_label_get_letter_on+0x18e>
        while(i + line_start < new_line_start) {
   15e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e86:	442b      	add	r3, r5
   15e88:	42a3      	cmp	r3, r4
   15e8a:	d2c2      	bcs.n	15e12 <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(bidi_txt, &i);
   15e8c:	f8d9 3000 	ldr.w	r3, [r9]
   15e90:	a909      	add	r1, sp, #36	; 0x24
   15e92:	4638      	mov	r0, r7
   15e94:	4798      	blx	r3
   15e96:	9005      	str	r0, [sp, #20]
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   15e98:	9809      	ldr	r0, [sp, #36]	; 0x24
   15e9a:	f8d9 3000 	ldr.w	r3, [r9]
   15e9e:	2100      	movs	r1, #0
   15ea0:	4438      	add	r0, r7
   15ea2:	4798      	blx	r3
   15ea4:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   15ea6:	2e00      	cmp	r6, #0
   15ea8:	d1e3      	bne.n	15e72 <lv_label_get_letter_on+0x156>
            x += lv_font_get_glyph_width(font, letter, letter_next);
   15eaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   15eae:	f007 fd45 	bl	1d93c <lv_font_get_glyph_width>
            if(pos->x < x || i + line_start == new_line_start) {
   15eb2:	9b07      	ldr	r3, [sp, #28]
            x += lv_font_get_glyph_width(font, letter, letter_next);
   15eb4:	4480      	add	r8, r0
            if(pos->x < x || i + line_start == new_line_start) {
   15eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
   15eba:	fa0f f888 	sxth.w	r8, r8
            if(pos->x < x || i + line_start == new_line_start) {
   15ebe:	4543      	cmp	r3, r8
   15ec0:	da02      	bge.n	15ec8 <lv_label_get_letter_on+0x1ac>
                i = i_act;
   15ec2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
                break;
   15ec6:	e7a4      	b.n	15e12 <lv_label_get_letter_on+0xf6>
            if(pos->x < x || i + line_start == new_line_start) {
   15ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15eca:	195a      	adds	r2, r3, r5
   15ecc:	42a2      	cmp	r2, r4
   15ece:	d0f8      	beq.n	15ec2 <lv_label_get_letter_on+0x1a6>
            x += style->text.letter_space;
   15ed0:	f8bb 0038 	ldrh.w	r0, [fp, #56]	; 0x38
   15ed4:	4480      	add	r8, r0
   15ed6:	fa0f f888 	sxth.w	r8, r8
            i_act = i;
   15eda:	469a      	mov	sl, r3
   15edc:	e7d2      	b.n	15e84 <lv_label_get_letter_on+0x168>
    uint32_t i_act = i;
   15ede:	469a      	mov	sl, r3
            letter = lv_txt_encoded_next(bidi_txt, &i);
   15ee0:	f8df 9010 	ldr.w	r9, [pc, #16]	; 15ef4 <lv_label_get_letter_on+0x1d8>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   15ee4:	f006 0601 	and.w	r6, r6, #1
   15ee8:	e7cc      	b.n	15e84 <lv_label_get_letter_on+0x168>
   15eea:	bf00      	nop
   15eec:	2000cff0 	.word	0x2000cff0
   15ef0:	2000cfe8 	.word	0x2000cfe8
   15ef4:	2000cfec 	.word	0x2000cfec

00015ef8 <lv_label_refr_text>:
{
   15ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15efc:	b089      	sub	sp, #36	; 0x24
   15efe:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   15f00:	f005 ff46 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
   15f04:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   15f06:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
   15f08:	b373      	cbz	r3, 15f68 <lv_label_refr_text+0x70>
    lv_coord_t max_w         = lv_obj_get_width(label);
   15f0a:	4628      	mov	r0, r5
   15f0c:	f005 fed2 	bl	1bcb4 <lv_obj_get_width>
   15f10:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
   15f12:	4628      	mov	r0, r5
   15f14:	f7fd ffd8 	bl	13ec8 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   15f18:	7ba3      	ldrb	r3, [r4, #14]
    const lv_font_t * font   = style->text.font;
   15f1a:	6b42      	ldr	r2, [r0, #52]	; 0x34
        max_w = LV_COORD_MAX;
   15f1c:	f013 0f07 	tst.w	r3, #7
   15f20:	f647 4118 	movw	r1, #31768	; 0x7c18
   15f24:	bf08      	it	eq
   15f26:	460f      	moveq	r7, r1
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   15f28:	f3c3 1180 	ubfx	r1, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   15f2c:	061b      	lsls	r3, r3, #24
   15f2e:	bf48      	it	mi
   15f30:	f041 0102 	orrmi.w	r1, r1, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
   15f34:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
   15f38:	e9cd 7101 	strd	r7, r1, [sp, #4]
   15f3c:	f9b0 103a 	ldrsh.w	r1, [r0, #58]	; 0x3a
   15f40:	9100      	str	r1, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(label);
   15f42:	4606      	mov	r6, r0
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
   15f44:	6821      	ldr	r1, [r4, #0]
   15f46:	a805      	add	r0, sp, #20
   15f48:	f007 fa82 	bl	1d450 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   15f4c:	7ba3      	ldrb	r3, [r4, #14]
   15f4e:	f013 0307 	ands.w	r3, r3, #7
   15f52:	d10c      	bne.n	15f6e <lv_label_refr_text+0x76>
        lv_obj_set_size(label, size.x, size.y);
   15f54:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   15f58:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
   15f5c:	4628      	mov	r0, r5
   15f5e:	f005 fcf2 	bl	1b946 <lv_obj_set_size>
    lv_obj_invalidate(label);
   15f62:	4628      	mov	r0, r5
   15f64:	f005 fc4d 	bl	1b802 <lv_obj_invalidate>
}
   15f68:	b009      	add	sp, #36	; 0x24
   15f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
   15f6e:	1eda      	subs	r2, r3, #3
   15f70:	2a01      	cmp	r2, #1
   15f72:	d9f6      	bls.n	15f62 <lv_label_refr_text+0x6a>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
   15f74:	2b02      	cmp	r3, #2
   15f76:	d16e      	bne.n	16056 <lv_label_refr_text+0x15e>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
   15f78:	4628      	mov	r0, r5
   15f7a:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
   15f7e:	f005 fe9f 	bl	1bcc0 <lv_obj_get_height>
   15f82:	4287      	cmp	r7, r0
   15f84:	dc03      	bgt.n	15f8e <lv_label_refr_text+0x96>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   15f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15f8a:	8123      	strh	r3, [r4, #8]
   15f8c:	e7e9      	b.n	15f62 <lv_label_refr_text+0x6a>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
   15f8e:	4b36      	ldr	r3, [pc, #216]	; (16068 <lv_label_refr_text+0x170>)
   15f90:	6820      	ldr	r0, [r4, #0]
   15f92:	681b      	ldr	r3, [r3, #0]
   15f94:	4798      	blx	r3
   15f96:	2803      	cmp	r0, #3
   15f98:	d9f5      	bls.n	15f86 <lv_label_refr_text+0x8e>
            p.x = lv_obj_get_width(label) -
   15f9a:	4628      	mov	r0, r5
   15f9c:	f005 fe8a 	bl	1bcb4 <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   15fa0:	222e      	movs	r2, #46	; 0x2e
   15fa2:	4611      	mov	r1, r2
            p.x = lv_obj_get_width(label) -
   15fa4:	4607      	mov	r7, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   15fa6:	6b70      	ldr	r0, [r6, #52]	; 0x34
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   15fa8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 16070 <lv_label_refr_text+0x178>
                lv_txt_encoded_next(ext->text, &byte_id);
   15fac:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 16074 <lv_label_refr_text+0x17c>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   15fb0:	f007 fcc4 	bl	1d93c <lv_font_get_glyph_width>
   15fb4:	f9b6 3038 	ldrsh.w	r3, [r6, #56]	; 0x38
   15fb8:	4418      	add	r0, r3
            p.x = lv_obj_get_width(label) -
   15fba:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   15fbe:	4438      	add	r0, r7
   15fc0:	f8ad 0018 	strh.w	r0, [sp, #24]
            p.y = lv_obj_get_height(label);
   15fc4:	4628      	mov	r0, r5
   15fc6:	f005 fe7b 	bl	1bcc0 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
   15fca:	6b73      	ldr	r3, [r6, #52]	; 0x34
   15fcc:	f9b6 103a 	ldrsh.w	r1, [r6, #58]	; 0x3a
   15fd0:	7a1b      	ldrb	r3, [r3, #8]
   15fd2:	440b      	add	r3, r1
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
   15fd4:	1a42      	subs	r2, r0, r1
            p.y -= p.y %
   15fd6:	fb90 f1f3 	sdiv	r1, r0, r3
   15fda:	fb03 0311 	mls	r3, r3, r1, r0
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
   15fde:	1ad2      	subs	r2, r2, r3
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   15fe0:	a906      	add	r1, sp, #24
   15fe2:	4628      	mov	r0, r5
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
   15fe4:	f8ad 201a 	strh.w	r2, [sp, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   15fe8:	f7ff fe98 	bl	15d1c <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
   15fec:	4b1f      	ldr	r3, [pc, #124]	; (1606c <lv_label_refr_text+0x174>)
   15fee:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   15ff0:	4607      	mov	r7, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
   15ff2:	681b      	ldr	r3, [r3, #0]
   15ff4:	6820      	ldr	r0, [r4, #0]
   15ff6:	4798      	blx	r3
   15ff8:	f04f 0804 	mov.w	r8, #4
   15ffc:	4606      	mov	r6, r0
   15ffe:	9007      	str	r0, [sp, #28]
            uint8_t len          = 0;
   16000:	f04f 0900 	mov.w	r9, #0
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   16004:	9907      	ldr	r1, [sp, #28]
   16006:	6820      	ldr	r0, [r4, #0]
   16008:	f8da 3000 	ldr.w	r3, [sl]
   1600c:	4408      	add	r0, r1
   1600e:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
   16010:	f8db 3000 	ldr.w	r3, [fp]
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   16014:	4481      	add	r9, r0
                lv_txt_encoded_next(ext->text, &byte_id);
   16016:	a907      	add	r1, sp, #28
   16018:	6820      	ldr	r0, [r4, #0]
   1601a:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1601c:	f1b8 0801 	subs.w	r8, r8, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   16020:	fa5f f989 	uxtb.w	r9, r9
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   16024:	d1ee      	bne.n	16004 <lv_label_refr_text+0x10c>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
   16026:	6821      	ldr	r1, [r4, #0]
   16028:	464a      	mov	r2, r9
   1602a:	4431      	add	r1, r6
   1602c:	4628      	mov	r0, r5
   1602e:	f7ff fe3f 	bl	15cb0 <lv_label_set_dot_tmp>
   16032:	2800      	cmp	r0, #0
   16034:	d095      	beq.n	15f62 <lv_label_refr_text+0x6a>
                    ext->text[byte_id_ori + i] = '.';
   16036:	6823      	ldr	r3, [r4, #0]
   16038:	222e      	movs	r2, #46	; 0x2e
   1603a:	559a      	strb	r2, [r3, r6]
   1603c:	6823      	ldr	r3, [r4, #0]
   1603e:	4433      	add	r3, r6
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   16040:	3703      	adds	r7, #3
                    ext->text[byte_id_ori + i] = '.';
   16042:	705a      	strb	r2, [r3, #1]
   16044:	6823      	ldr	r3, [r4, #0]
   16046:	4433      	add	r3, r6
   16048:	709a      	strb	r2, [r3, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
   1604a:	6823      	ldr	r3, [r4, #0]
   1604c:	441e      	add	r6, r3
   1604e:	f886 8003 	strb.w	r8, [r6, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   16052:	8127      	strh	r7, [r4, #8]
   16054:	e785      	b.n	15f62 <lv_label_refr_text+0x6a>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
   16056:	2b01      	cmp	r3, #1
   16058:	d183      	bne.n	15f62 <lv_label_refr_text+0x6a>
        lv_obj_set_height(label, size.y);
   1605a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
   1605e:	4628      	mov	r0, r5
   16060:	f005 fcbb 	bl	1b9da <lv_obj_set_height>
   16064:	e77d      	b.n	15f62 <lv_label_refr_text+0x6a>
   16066:	bf00      	nop
   16068:	2000cff8 	.word	0x2000cff8
   1606c:	2000cfe4 	.word	0x2000cfe4
   16070:	2000cff4 	.word	0x2000cff4
   16074:	2000cfec 	.word	0x2000cfec

00016078 <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
   16078:	4b34      	ldr	r3, [pc, #208]	; (1614c <lv_label_signal+0xd4>)
{
   1607a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
   1607e:	681b      	ldr	r3, [r3, #0]
{
   16080:	4604      	mov	r4, r0
   16082:	460d      	mov	r5, r1
   16084:	4617      	mov	r7, r2
    res = ancestor_signal(label, sign, param);
   16086:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   16088:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
   1608a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
   1608c:	d118      	bne.n	160c0 <lv_label_signal+0x48>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1608e:	2d07      	cmp	r5, #7
   16090:	d105      	bne.n	1609e <lv_label_signal+0x26>
   16092:	4638      	mov	r0, r7
   16094:	492e      	ldr	r1, [pc, #184]	; (16150 <lv_label_signal+0xd8>)
}
   16096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1609a:	f005 be7b 	b.w	1bd94 <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1609e:	4620      	mov	r0, r4
   160a0:	f005 fe76 	bl	1bd90 <lv_obj_get_ext_attr>
   160a4:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   160a6:	b975      	cbnz	r5, 160c6 <lv_label_signal+0x4e>
        if(ext->static_txt == 0) {
   160a8:	7b83      	ldrb	r3, [r0, #14]
   160aa:	f013 0508 	ands.w	r5, r3, #8
   160ae:	d104      	bne.n	160ba <lv_label_signal+0x42>
            lv_mem_free(ext->text);
   160b0:	6800      	ldr	r0, [r0, #0]
   160b2:	f7ff fc19 	bl	158e8 <lv_mem_free>
            ext->text = NULL;
   160b6:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
   160ba:	4620      	mov	r0, r4
   160bc:	f007 fa3b 	bl	1d536 <lv_label_dot_tmp_free>
}
   160c0:	4630      	mov	r0, r6
   160c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
   160c6:	2d04      	cmp	r5, #4
   160c8:	d106      	bne.n	160d8 <lv_label_signal+0x60>
        lv_label_revert_dots(label);
   160ca:	4620      	mov	r0, r4
   160cc:	f7ff fdb8 	bl	15c40 <lv_label_revert_dots>
        lv_label_refr_text(label);
   160d0:	4620      	mov	r0, r4
   160d2:	f7ff ff11 	bl	15ef8 <lv_label_refr_text>
   160d6:	e7f3      	b.n	160c0 <lv_label_signal+0x48>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
   160d8:	2d02      	cmp	r5, #2
   160da:	d114      	bne.n	16106 <lv_label_signal+0x8e>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   160dc:	8a23      	ldrh	r3, [r4, #16]
   160de:	8aa2      	ldrh	r2, [r4, #20]
   160e0:	8839      	ldrh	r1, [r7, #0]
   160e2:	1ad2      	subs	r2, r2, r3
   160e4:	88bb      	ldrh	r3, [r7, #4]
   160e6:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   160e8:	b212      	sxth	r2, r2
   160ea:	b21b      	sxth	r3, r3
   160ec:	429a      	cmp	r2, r3
   160ee:	d1ec      	bne.n	160ca <lv_label_signal+0x52>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   160f0:	8a63      	ldrh	r3, [r4, #18]
   160f2:	8ae2      	ldrh	r2, [r4, #22]
   160f4:	8879      	ldrh	r1, [r7, #2]
   160f6:	1ad2      	subs	r2, r2, r3
   160f8:	88fb      	ldrh	r3, [r7, #6]
   160fa:	1a5b      	subs	r3, r3, r1
   160fc:	b212      	sxth	r2, r2
   160fe:	b21b      	sxth	r3, r3
   16100:	429a      	cmp	r2, r3
   16102:	d1e2      	bne.n	160ca <lv_label_signal+0x52>
   16104:	e7dc      	b.n	160c0 <lv_label_signal+0x48>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   16106:	2d06      	cmp	r5, #6
   16108:	d1da      	bne.n	160c0 <lv_label_signal+0x48>
        if(ext->body_draw) {
   1610a:	7bc3      	ldrb	r3, [r0, #15]
   1610c:	f013 0501 	ands.w	r5, r3, #1
   16110:	d0d6      	beq.n	160c0 <lv_label_signal+0x48>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
   16112:	4620      	mov	r0, r4
   16114:	f7fd fed8 	bl	13ec8 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
   16118:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
   1611c:	f9b0 2026 	ldrsh.w	r2, [r0, #38]	; 0x26
   16120:	4293      	cmp	r3, r2
   16122:	bfb8      	it	lt
   16124:	4613      	movlt	r3, r2
   16126:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
   1612a:	4293      	cmp	r3, r2
   1612c:	bfb8      	it	lt
   1612e:	4613      	movlt	r3, r2
   16130:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
   16134:	4293      	cmp	r3, r2
   16136:	bfb8      	it	lt
   16138:	4613      	movlt	r3, r2
   1613a:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
   1613e:	4293      	cmp	r3, r2
   16140:	bfb8      	it	lt
   16142:	4613      	movlt	r3, r2
   16144:	8623      	strh	r3, [r4, #48]	; 0x30
   16146:	462e      	mov	r6, r5
   16148:	e7ba      	b.n	160c0 <lv_label_signal+0x48>
   1614a:	bf00      	nop
   1614c:	20001adc 	.word	0x20001adc
   16150:	00021ad4 	.word	0x00021ad4

00016154 <lv_label_create>:
{
   16154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16158:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
   1615a:	f7fd fd85 	bl	13c68 <lv_obj_create>
    if(new_label == NULL) return NULL;
   1615e:	4604      	mov	r4, r0
   16160:	b918      	cbnz	r0, 1616a <lv_label_create+0x16>
   16162:	2400      	movs	r4, #0
}
   16164:	4620      	mov	r0, r4
   16166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1616a:	4d53      	ldr	r5, [pc, #332]	; (162b8 <lv_label_create+0x164>)
   1616c:	682b      	ldr	r3, [r5, #0]
   1616e:	b913      	cbnz	r3, 16176 <lv_label_create+0x22>
   16170:	f005 fe0c 	bl	1bd8c <lv_obj_get_signal_cb>
   16174:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
   16176:	2110      	movs	r1, #16
   16178:	4620      	mov	r0, r4
   1617a:	f005 fb3b 	bl	1b7f4 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
   1617e:	4620      	mov	r0, r4
   16180:	f005 fe06 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
   16184:	4605      	mov	r5, r0
   16186:	2800      	cmp	r0, #0
   16188:	d0eb      	beq.n	16162 <lv_label_create+0xe>
    ext->text       = NULL;
   1618a:	2300      	movs	r3, #0
    ext->dot.tmp_ptr   = NULL;
   1618c:	e9c0 3300 	strd	r3, r3, [r0]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   16190:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ext->offset.y = 0;
   16194:	68c2      	ldr	r2, [r0, #12]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   16196:	6083      	str	r3, [r0, #8]
    ext->offset.y = 0;
   16198:	4b48      	ldr	r3, [pc, #288]	; (162bc <lv_label_create+0x168>)
    lv_obj_set_design_cb(new_label, lv_label_design);
   1619a:	4949      	ldr	r1, [pc, #292]	; (162c0 <lv_label_create+0x16c>)
    ext->offset.y = 0;
   1619c:	4013      	ands	r3, r2
   1619e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   161a2:	60c3      	str	r3, [r0, #12]
    lv_obj_set_design_cb(new_label, lv_label_design);
   161a4:	4620      	mov	r0, r4
   161a6:	f005 fb23 	bl	1b7f0 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
   161aa:	4946      	ldr	r1, [pc, #280]	; (162c4 <lv_label_create+0x170>)
   161ac:	4620      	mov	r0, r4
   161ae:	f005 fb1d 	bl	1b7ec <lv_obj_set_signal_cb>
    if(copy == NULL) {
   161b2:	b9b6      	cbnz	r6, 161e2 <lv_label_create+0x8e>
        lv_obj_set_click(new_label, false);
   161b4:	4631      	mov	r1, r6
   161b6:	4620      	mov	r0, r4
   161b8:	f005 fb11 	bl	1b7de <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
   161bc:	4631      	mov	r1, r6
   161be:	4620      	mov	r0, r4
   161c0:	f007 fb7b 	bl	1d8ba <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
   161c4:	4940      	ldr	r1, [pc, #256]	; (162c8 <lv_label_create+0x174>)
   161c6:	4620      	mov	r0, r4
   161c8:	f007 fb22 	bl	1d810 <lv_label_set_text>
    lv_obj_set_style(label, style);
   161cc:	4631      	mov	r1, r6
   161ce:	4620      	mov	r0, r4
   161d0:	f005 fc2f 	bl	1ba32 <lv_obj_set_style>
    LV_LOG_INFO("label created");
   161d4:	4b3d      	ldr	r3, [pc, #244]	; (162cc <lv_label_create+0x178>)
   161d6:	493e      	ldr	r1, [pc, #248]	; (162d0 <lv_label_create+0x17c>)
   161d8:	22a1      	movs	r2, #161	; 0xa1
   161da:	2001      	movs	r0, #1
   161dc:	f7ff fd20 	bl	15c20 <lv_log_add>
    return new_label;
   161e0:	e7c0      	b.n	16164 <lv_label_create+0x10>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   161e2:	4630      	mov	r0, r6
   161e4:	f005 fdd4 	bl	1bd90 <lv_obj_get_ext_attr>
   161e8:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
   161ea:	4630      	mov	r0, r6
   161ec:	f007 f9e3 	bl	1d5b6 <lv_label_get_long_mode>
   161f0:	4601      	mov	r1, r0
   161f2:	4620      	mov	r0, r4
   161f4:	f007 fb61 	bl	1d8ba <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
   161f8:	4630      	mov	r0, r6
   161fa:	f007 fafb 	bl	1d7f4 <lv_label_get_recolor>
   161fe:	4601      	mov	r1, r0
   16200:	4620      	mov	r0, r4
   16202:	f007 fb81 	bl	1d908 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
   16206:	4630      	mov	r0, r6
   16208:	f007 fafb 	bl	1d802 <lv_label_get_body_draw>
   1620c:	4601      	mov	r1, r0
   1620e:	4620      	mov	r0, r4
   16210:	f007 f9b6 	bl	1d580 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
   16214:	4630      	mov	r0, r6
   16216:	f007 f9d5 	bl	1d5c4 <lv_label_get_align>
   1621a:	4601      	mov	r1, r0
   1621c:	4620      	mov	r0, r4
   1621e:	f007 f99c 	bl	1d55a <lv_label_set_align>
        if(copy_ext->static_txt == 0)
   16222:	7bbb      	ldrb	r3, [r7, #14]
   16224:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
   16226:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
   16228:	d439      	bmi.n	1629e <lv_label_create+0x14a>
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1622a:	f007 f9bf 	bl	1d5ac <lv_label_get_text>
   1622e:	4601      	mov	r1, r0
   16230:	4620      	mov	r0, r4
   16232:	f007 faed 	bl	1d810 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
   16236:	7bbb      	ldrb	r3, [r7, #14]
   16238:	f003 0307 	and.w	r3, r3, #7
   1623c:	2b02      	cmp	r3, #2
   1623e:	d115      	bne.n	1626c <lv_label_create+0x118>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
   16240:	6838      	ldr	r0, [r7, #0]
   16242:	682e      	ldr	r6, [r5, #0]
   16244:	f7ff fb60 	bl	15908 <lv_mem_get_size>
   16248:	4601      	mov	r1, r0
   1624a:	4630      	mov	r0, r6
   1624c:	f7ff fb6a 	bl	15924 <lv_mem_realloc>
   16250:	4606      	mov	r6, r0
   16252:	6028      	str	r0, [r5, #0]
            if(ext->text == NULL) return NULL;
   16254:	2800      	cmp	r0, #0
   16256:	d084      	beq.n	16162 <lv_label_create+0xe>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
   16258:	f8d7 8000 	ldr.w	r8, [r7]
   1625c:	4640      	mov	r0, r8
   1625e:	f7ff fb53 	bl	15908 <lv_mem_get_size>
   16262:	4641      	mov	r1, r8
   16264:	4602      	mov	r2, r0
   16266:	4630      	mov	r0, r6
   16268:	f002 fce7 	bl	18c3a <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
   1626c:	7bfb      	ldrb	r3, [r7, #15]
   1626e:	079b      	lsls	r3, r3, #30
   16270:	d51c      	bpl.n	162ac <lv_label_create+0x158>
   16272:	6878      	ldr	r0, [r7, #4]
   16274:	b1d0      	cbz	r0, 162ac <lv_label_create+0x158>
            uint16_t len = (uint16_t    )strlen(copy_ext->dot.tmp_ptr);
   16276:	f002 fcbd 	bl	18bf4 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1627a:	6869      	ldr	r1, [r5, #4]
   1627c:	b282      	uxth	r2, r0
   1627e:	4620      	mov	r0, r4
   16280:	f7ff fd16 	bl	15cb0 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
   16284:	7bfb      	ldrb	r3, [r7, #15]
   16286:	7bea      	ldrb	r2, [r5, #15]
   16288:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1628c:	f363 0241 	bfi	r2, r3, #1, #1
   16290:	73ea      	strb	r2, [r5, #15]
        ext->dot_end       = copy_ext->dot_end;
   16292:	893b      	ldrh	r3, [r7, #8]
   16294:	812b      	strh	r3, [r5, #8]
        lv_obj_refresh_style(new_label);
   16296:	4620      	mov	r0, r4
   16298:	f005 fb3b 	bl	1b912 <lv_obj_refresh_style>
   1629c:	e79a      	b.n	161d4 <lv_label_create+0x80>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
   1629e:	f007 f985 	bl	1d5ac <lv_label_get_text>
   162a2:	4601      	mov	r1, r0
   162a4:	4620      	mov	r0, r4
   162a6:	f007 faee 	bl	1d886 <lv_label_set_static_text>
   162aa:	e7c4      	b.n	16236 <lv_label_create+0xe2>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
   162ac:	2204      	movs	r2, #4
   162ae:	18b9      	adds	r1, r7, r2
   162b0:	18a8      	adds	r0, r5, r2
   162b2:	f002 fcc2 	bl	18c3a <memcpy>
   162b6:	e7e5      	b.n	16284 <lv_label_create+0x130>
   162b8:	20001adc 	.word	0x20001adc
   162bc:	fc800000 	.word	0xfc800000
   162c0:	0001d5d9 	.word	0x0001d5d9
   162c4:	00016079 	.word	0x00016079
   162c8:	00021a60 	.word	0x00021a60
   162cc:	00021a65 	.word	0x00021a65
   162d0:	00021a9d 	.word	0x00021a9d

000162d4 <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
   162d4:	4b01      	ldr	r3, [pc, #4]	; (162dc <lv_theme_get_current+0x8>)
   162d6:	6818      	ldr	r0, [r3, #0]
   162d8:	4770      	bx	lr
   162da:	bf00      	nop
   162dc:	20001ae0 	.word	0x20001ae0

000162e0 <bits_write>:
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
    if(len == 3) {
   162e0:	2b03      	cmp	r3, #3
{
   162e2:	b530      	push	{r4, r5, lr}
    if(len == 3) {
   162e4:	d104      	bne.n	162f0 <bits_write+0x10>
        len = 4;
        switch(val) {
   162e6:	2a07      	cmp	r2, #7
   162e8:	bf9c      	itt	ls
   162ea:	4b0a      	ldrls	r3, [pc, #40]	; (16314 <bits_write+0x34>)
   162ec:	5c9a      	ldrbls	r2, [r3, r2]
        len = 4;
   162ee:	2304      	movs	r3, #4
        case 7: val = 15; break;
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
   162f0:	f001 0507 	and.w	r5, r1, #7
    bit_pos = 8 - bit_pos - len;

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   162f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   162f8:	f3c1 01cf 	ubfx	r1, r1, #3, #16
   162fc:	409c      	lsls	r4, r3
   162fe:	f1c5 0508 	rsb	r5, r5, #8
    bit_pos = 8 - bit_pos - len;
   16302:	1aed      	subs	r5, r5, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   16304:	b264      	sxtb	r4, r4
   16306:	5c43      	ldrb	r3, [r0, r1]
   16308:	40ac      	lsls	r4, r5
   1630a:	401c      	ands	r4, r3
    out[byte_pos] |= (val << bit_pos);
   1630c:	40aa      	lsls	r2, r5
   1630e:	4314      	orrs	r4, r2
   16310:	5444      	strb	r4, [r0, r1]
}
   16312:	bd30      	pop	{r4, r5, pc}
   16314:	00021add 	.word	0x00021add

00016318 <rle_next>:
    rle_prev_v = 0;
    rle_cnt = 0;
}

static uint8_t rle_next(void)
{
   16318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t v = 0;
    uint8_t ret = 0;

    if(rle_state == RLE_STATE_SINGLE) {
   1631c:	4e4a      	ldr	r6, [pc, #296]	; (16448 <rle_next+0x130>)
   1631e:	f896 9000 	ldrb.w	r9, [r6]
   16322:	f1b9 0f00 	cmp.w	r9, #0
   16326:	d11d      	bne.n	16364 <rle_next+0x4c>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
   16328:	4b48      	ldr	r3, [pc, #288]	; (1644c <rle_next+0x134>)
   1632a:	4d49      	ldr	r5, [pc, #292]	; (16450 <rle_next+0x138>)
   1632c:	781f      	ldrb	r7, [r3, #0]
   1632e:	f8d5 8000 	ldr.w	r8, [r5]
   16332:	4b48      	ldr	r3, [pc, #288]	; (16454 <rle_next+0x13c>)
   16334:	463a      	mov	r2, r7
   16336:	6818      	ldr	r0, [r3, #0]
   16338:	4641      	mov	r1, r8
   1633a:	f007 fb1d 	bl	1d978 <get_bits>
   1633e:	4b46      	ldr	r3, [pc, #280]	; (16458 <rle_next+0x140>)
   16340:	4604      	mov	r4, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
   16342:	f1b8 0f00 	cmp.w	r8, #0
   16346:	d007      	beq.n	16358 <rle_next+0x40>
   16348:	781a      	ldrb	r2, [r3, #0]
   1634a:	4282      	cmp	r2, r0
            rle_cnt = 0;
   1634c:	bf01      	itttt	eq
   1634e:	4a43      	ldreq	r2, [pc, #268]	; (1645c <rle_next+0x144>)
   16350:	f882 9000 	strbeq.w	r9, [r2]
            rle_state = RLE_STATE_REPEATE;
   16354:	2201      	moveq	r2, #1
   16356:	7032      	strbeq	r2, [r6, #0]
        }

        rle_prev_v = ret;
        rle_rdp += rle_bpp;
   16358:	4447      	add	r7, r8
        rle_prev_v = ret;
   1635a:	701c      	strb	r4, [r3, #0]
        rle_rdp += rle_bpp;
   1635c:	602f      	str	r7, [r5, #0]
            rle_state = RLE_STATE_SINGLE;
        }
    }

    return ret;
}
   1635e:	4620      	mov	r0, r4
   16360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(rle_state == RLE_STATE_REPEATE) {
   16364:	f1b9 0f01 	cmp.w	r9, #1
   16368:	d149      	bne.n	163fe <rle_next+0xe6>
        v = get_bits(rle_in, rle_rdp, 1);
   1636a:	4b3a      	ldr	r3, [pc, #232]	; (16454 <rle_next+0x13c>)
   1636c:	4f38      	ldr	r7, [pc, #224]	; (16450 <rle_next+0x138>)
   1636e:	f8d3 8000 	ldr.w	r8, [r3]
   16372:	683d      	ldr	r5, [r7, #0]
        rle_cnt++;
   16374:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1645c <rle_next+0x144>
        v = get_bits(rle_in, rle_rdp, 1);
   16378:	464a      	mov	r2, r9
   1637a:	4629      	mov	r1, r5
   1637c:	4640      	mov	r0, r8
   1637e:	f007 fafb 	bl	1d978 <get_bits>
        rle_cnt++;
   16382:	f89a 3000 	ldrb.w	r3, [sl]
   16386:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 16458 <rle_next+0x140>
   1638a:	3301      	adds	r3, #1
   1638c:	b2db      	uxtb	r3, r3
        rle_rdp += 1;
   1638e:	f105 0b01 	add.w	fp, r5, #1
        if(v == 1) {
   16392:	2801      	cmp	r0, #1
        rle_cnt++;
   16394:	f88a 3000 	strb.w	r3, [sl]
        rle_rdp += 1;
   16398:	f8c7 b000 	str.w	fp, [r7]
        if(v == 1) {
   1639c:	d121      	bne.n	163e2 <rle_next+0xca>
            if(rle_cnt == 11) {
   1639e:	2b0b      	cmp	r3, #11
            ret = rle_prev_v;
   163a0:	f899 4000 	ldrb.w	r4, [r9]
            if(rle_cnt == 11) {
   163a4:	d1db      	bne.n	1635e <rle_next+0x46>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
   163a6:	4659      	mov	r1, fp
   163a8:	2206      	movs	r2, #6
   163aa:	4640      	mov	r0, r8
   163ac:	f007 fae4 	bl	1d978 <get_bits>
                rle_rdp += 6;
   163b0:	3507      	adds	r5, #7
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
   163b2:	4683      	mov	fp, r0
   163b4:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
   163b8:	603d      	str	r5, [r7, #0]
                if(rle_cnt != 0) {
   163ba:	b110      	cbz	r0, 163c2 <rle_next+0xaa>
                    rle_state = RLE_STATE_COUNTER;
   163bc:	2302      	movs	r3, #2
            rle_state = RLE_STATE_SINGLE;
   163be:	7033      	strb	r3, [r6, #0]
   163c0:	e7cd      	b.n	1635e <rle_next+0x46>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
   163c2:	4b22      	ldr	r3, [pc, #136]	; (1644c <rle_next+0x134>)
   163c4:	f893 a000 	ldrb.w	sl, [r3]
   163c8:	4629      	mov	r1, r5
   163ca:	4652      	mov	r2, sl
   163cc:	4640      	mov	r0, r8
   163ce:	f007 fad3 	bl	1d978 <get_bits>
                    rle_rdp += rle_bpp;
   163d2:	4455      	add	r5, sl
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
   163d4:	4604      	mov	r4, r0
                    rle_prev_v = ret;
   163d6:	f889 0000 	strb.w	r0, [r9]
                    rle_rdp += rle_bpp;
   163da:	603d      	str	r5, [r7, #0]
                    rle_state = RLE_STATE_SINGLE;
   163dc:	f886 b000 	strb.w	fp, [r6]
   163e0:	e7bd      	b.n	1635e <rle_next+0x46>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   163e2:	4b1a      	ldr	r3, [pc, #104]	; (1644c <rle_next+0x134>)
   163e4:	781d      	ldrb	r5, [r3, #0]
   163e6:	4659      	mov	r1, fp
   163e8:	462a      	mov	r2, r5
   163ea:	4640      	mov	r0, r8
   163ec:	f007 fac4 	bl	1d978 <get_bits>
            rle_rdp += rle_bpp;
   163f0:	445d      	add	r5, fp
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   163f2:	4604      	mov	r4, r0
            rle_prev_v = ret;
   163f4:	f889 0000 	strb.w	r0, [r9]
            rle_rdp += rle_bpp;
   163f8:	603d      	str	r5, [r7, #0]
            rle_state = RLE_STATE_SINGLE;
   163fa:	2300      	movs	r3, #0
   163fc:	e7df      	b.n	163be <rle_next+0xa6>
    else if(rle_state == RLE_STATE_COUNTER) {
   163fe:	f1b9 0f02 	cmp.w	r9, #2
   16402:	d11e      	bne.n	16442 <rle_next+0x12a>
        rle_cnt--;
   16404:	4b15      	ldr	r3, [pc, #84]	; (1645c <rle_next+0x144>)
        ret = rle_prev_v;
   16406:	f8df a050 	ldr.w	sl, [pc, #80]	; 16458 <rle_next+0x140>
        rle_cnt--;
   1640a:	781d      	ldrb	r5, [r3, #0]
        ret = rle_prev_v;
   1640c:	f89a 4000 	ldrb.w	r4, [sl]
        rle_cnt--;
   16410:	3d01      	subs	r5, #1
   16412:	b2ed      	uxtb	r5, r5
   16414:	701d      	strb	r5, [r3, #0]
        if(rle_cnt == 0) {
   16416:	2d00      	cmp	r5, #0
   16418:	d1a1      	bne.n	1635e <rle_next+0x46>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   1641a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 16450 <rle_next+0x138>
   1641e:	4b0b      	ldr	r3, [pc, #44]	; (1644c <rle_next+0x134>)
   16420:	f8d8 9000 	ldr.w	r9, [r8]
   16424:	781f      	ldrb	r7, [r3, #0]
   16426:	4b0b      	ldr	r3, [pc, #44]	; (16454 <rle_next+0x13c>)
   16428:	463a      	mov	r2, r7
   1642a:	4649      	mov	r1, r9
   1642c:	6818      	ldr	r0, [r3, #0]
   1642e:	f007 faa3 	bl	1d978 <get_bits>
            rle_rdp += rle_bpp;
   16432:	444f      	add	r7, r9
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   16434:	4604      	mov	r4, r0
            rle_prev_v = ret;
   16436:	f88a 0000 	strb.w	r0, [sl]
            rle_rdp += rle_bpp;
   1643a:	f8c8 7000 	str.w	r7, [r8]
            rle_state = RLE_STATE_SINGLE;
   1643e:	7035      	strb	r5, [r6, #0]
   16440:	e78d      	b.n	1635e <rle_next+0x46>
    uint8_t ret = 0;
   16442:	2400      	movs	r4, #0
   16444:	e78b      	b.n	1635e <rle_next+0x46>
   16446:	bf00      	nop
   16448:	2000a2b8 	.word	0x2000a2b8
   1644c:	2000a2b5 	.word	0x2000a2b5
   16450:	20001aec 	.word	0x20001aec
   16454:	20001ae8 	.word	0x20001ae8
   16458:	2000a2b7 	.word	0x2000a2b7
   1645c:	2000a2b6 	.word	0x2000a2b6

00016460 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   16460:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   16462:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   16464:	6963      	ldr	r3, [r4, #20]
   16466:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   16468:	b085      	sub	sp, #20
   1646a:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1646c:	d145      	bne.n	164fa <get_glyph_dsc_id.isra.0.part.1+0x9a>
   1646e:	69a0      	ldr	r0, [r4, #24]
}
   16470:	b005      	add	sp, #20
   16472:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   16474:	68a2      	ldr	r2, [r4, #8]
   16476:	fb07 f603 	mul.w	r6, r7, r3
   1647a:	1991      	adds	r1, r2, r6
   1647c:	5992      	ldr	r2, [r2, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   1647e:	8888      	ldrh	r0, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   16480:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
   16482:	4282      	cmp	r2, r0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   16484:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   16486:	f103 0301 	add.w	r3, r3, #1
   1648a:	d838      	bhi.n	164fe <get_glyph_dsc_id.isra.0.part.1+0x9e>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
   1648c:	7c8b      	ldrb	r3, [r1, #18]
   1648e:	b923      	cbnz	r3, 1649a <get_glyph_dsc_id.isra.0.part.1+0x3a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
   16490:	88c8      	ldrh	r0, [r1, #6]
   16492:	4410      	add	r0, r2
        fdsc->last_letter = letter;
   16494:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
   16496:	61a0      	str	r0, [r4, #24]
    return 0;
   16498:	e7ea      	b.n	16470 <get_glyph_dsc_id.isra.0.part.1+0x10>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
   1649a:	2b01      	cmp	r3, #1
   1649c:	d104      	bne.n	164a8 <get_glyph_dsc_id.isra.0.part.1+0x48>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
   1649e:	68cb      	ldr	r3, [r1, #12]
   164a0:	5c98      	ldrb	r0, [r3, r2]
   164a2:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   164a4:	4418      	add	r0, r3
   164a6:	e7f5      	b.n	16494 <get_glyph_dsc_id.isra.0.part.1+0x34>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
   164a8:	2b02      	cmp	r3, #2
   164aa:	d111      	bne.n	164d0 <get_glyph_dsc_id.isra.0.part.1+0x70>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
   164ac:	4818      	ldr	r0, [pc, #96]	; (16510 <get_glyph_dsc_id.isra.0.part.1+0xb0>)
   164ae:	8a0a      	ldrh	r2, [r1, #16]
   164b0:	9000      	str	r0, [sp, #0]
   164b2:	6889      	ldr	r1, [r1, #8]
   164b4:	a803      	add	r0, sp, #12
   164b6:	f007 f820 	bl	1d4fa <lv_utils_bsearch>
            if(p) {
   164ba:	b908      	cbnz	r0, 164c0 <get_glyph_dsc_id.isra.0.part.1+0x60>
        uint32_t glyph_id = 0;
   164bc:	2000      	movs	r0, #0
   164be:	e7e9      	b.n	16494 <get_glyph_dsc_id.isra.0.part.1+0x34>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   164c0:	68a3      	ldr	r3, [r4, #8]
   164c2:	4433      	add	r3, r6
   164c4:	689a      	ldr	r2, [r3, #8]
   164c6:	1a82      	subs	r2, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
   164c8:	88d8      	ldrh	r0, [r3, #6]
   164ca:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   164ce:	e7e1      	b.n	16494 <get_glyph_dsc_id.isra.0.part.1+0x34>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
   164d0:	2b03      	cmp	r3, #3
   164d2:	d1f3      	bne.n	164bc <get_glyph_dsc_id.isra.0.part.1+0x5c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
   164d4:	4b0e      	ldr	r3, [pc, #56]	; (16510 <get_glyph_dsc_id.isra.0.part.1+0xb0>)
   164d6:	8a0a      	ldrh	r2, [r1, #16]
   164d8:	9300      	str	r3, [sp, #0]
   164da:	6889      	ldr	r1, [r1, #8]
   164dc:	2302      	movs	r3, #2
   164de:	a803      	add	r0, sp, #12
   164e0:	f007 f80b 	bl	1d4fa <lv_utils_bsearch>
            if(p) {
   164e4:	2800      	cmp	r0, #0
   164e6:	d0e9      	beq.n	164bc <get_glyph_dsc_id.isra.0.part.1+0x5c>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t*) fdsc->cmaps[i].unicode_list);
   164e8:	68a3      	ldr	r3, [r4, #8]
   164ea:	4433      	add	r3, r6
   164ec:	689a      	ldr	r2, [r3, #8]
   164ee:	1a80      	subs	r0, r0, r2
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
   164f0:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   164f2:	68da      	ldr	r2, [r3, #12]
   164f4:	88db      	ldrh	r3, [r3, #6]
   164f6:	5c10      	ldrb	r0, [r2, r0]
   164f8:	e7d4      	b.n	164a4 <get_glyph_dsc_id.isra.0.part.1+0x44>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   164fa:	2300      	movs	r3, #0
   164fc:	2714      	movs	r7, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
   164fe:	8a62      	ldrh	r2, [r4, #18]
   16500:	b299      	uxth	r1, r3
   16502:	f3c2 0209 	ubfx	r2, r2, #0, #10
   16506:	428a      	cmp	r2, r1
   16508:	d8b4      	bhi.n	16474 <get_glyph_dsc_id.isra.0.part.1+0x14>
    fdsc->last_letter = letter;
   1650a:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
   1650c:	2000      	movs	r0, #0
   1650e:	e7c2      	b.n	16496 <get_glyph_dsc_id.isra.0.part.1+0x36>
   16510:	0001d9a1 	.word	0x0001d9a1

00016514 <lv_font_get_bitmap_fmt_txt>:
{
   16514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16518:	b087      	sub	sp, #28
    if(letter == '\0') return 0;
   1651a:	b919      	cbnz	r1, 16524 <lv_font_get_bitmap_fmt_txt+0x10>
    if(!gid) return NULL;
   1651c:	2000      	movs	r0, #0
}
   1651e:	b007      	add	sp, #28
   16520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   16524:	f850 6f0c 	ldr.w	r6, [r0, #12]!
   16528:	f7ff ff9a 	bl	16460 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return NULL;
   1652c:	4680      	mov	r8, r0
   1652e:	2800      	cmp	r0, #0
   16530:	d0f4      	beq.n	1651c <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   16532:	7cf3      	ldrb	r3, [r6, #19]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   16534:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   16538:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   1653c:	eb09 07c0 	add.w	r7, r9, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   16540:	d108      	bne.n	16554 <lv_font_get_bitmap_fmt_txt+0x40>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
   16542:	2f00      	cmp	r7, #0
   16544:	d0ea      	beq.n	1651c <lv_font_get_bitmap_fmt_txt+0x8>
   16546:	f859 3030 	ldr.w	r3, [r9, r0, lsl #3]
   1654a:	6830      	ldr	r0, [r6, #0]
   1654c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   16550:	4418      	add	r0, r3
   16552:	e7e4      	b.n	1651e <lv_font_get_bitmap_fmt_txt+0xa>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
   16554:	793c      	ldrb	r4, [r7, #4]
   16556:	7979      	ldrb	r1, [r7, #5]
   16558:	fb14 f401 	smulbb	r4, r4, r1
        if(gsize == 0) return NULL;
   1655c:	2c00      	cmp	r4, #0
   1655e:	d0dd      	beq.n	1651c <lv_font_get_bitmap_fmt_txt+0x8>
        switch(fdsc->bpp) {
   16560:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16564:	3b01      	subs	r3, #1
   16566:	2b03      	cmp	r3, #3
   16568:	d804      	bhi.n	16574 <lv_font_get_bitmap_fmt_txt+0x60>
   1656a:	e8df f003 	tbb	[pc, r3]
   1656e:	4502      	.short	0x4502
   16570:	4747      	.short	0x4747
        case 1: buf_size = gsize >> 3;  break;
   16572:	08e4      	lsrs	r4, r4, #3
        if(lv_mem_get_size(buf) < buf_size) {
   16574:	4d41      	ldr	r5, [pc, #260]	; (1667c <lv_font_get_bitmap_fmt_txt+0x168>)
   16576:	6828      	ldr	r0, [r5, #0]
   16578:	f7ff f9c6 	bl	15908 <lv_mem_get_size>
   1657c:	42a0      	cmp	r0, r4
   1657e:	d33f      	bcc.n	16600 <lv_font_get_bitmap_fmt_txt+0xec>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], buf, gdsc->box_w , gdsc->box_h, (uint8_t)fdsc->bpp);
   16580:	f859 2038 	ldr.w	r2, [r9, r8, lsl #3]
   16584:	6833      	ldr	r3, [r6, #0]
   16586:	f3c2 0213 	ubfx	r2, r2, #0, #20
   1658a:	441a      	add	r2, r3
   1658c:	682b      	ldr	r3, [r5, #0]
   1658e:	9302      	str	r3, [sp, #8]
   16590:	797b      	ldrb	r3, [r7, #5]
   16592:	9304      	str	r3, [sp, #16]
   16594:	7cf3      	ldrb	r3, [r6, #19]
   16596:	793d      	ldrb	r5, [r7, #4]
   16598:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1659c:	b2df      	uxtb	r7, r3
    if(bpp == 3) wr_size = 4;
   1659e:	2f03      	cmp	r7, #3
   165a0:	bf14      	ite	ne
   165a2:	4639      	movne	r1, r7
   165a4:	2104      	moveq	r1, #4
   165a6:	9100      	str	r1, [sp, #0]
    rle_in = in;
   165a8:	4935      	ldr	r1, [pc, #212]	; (16680 <lv_font_get_bitmap_fmt_txt+0x16c>)
   165aa:	600a      	str	r2, [r1, #0]
    rle_bpp = bpp;
   165ac:	4a35      	ldr	r2, [pc, #212]	; (16684 <lv_font_get_bitmap_fmt_txt+0x170>)
   165ae:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
   165b0:	4a35      	ldr	r2, [pc, #212]	; (16688 <lv_font_get_bitmap_fmt_txt+0x174>)
   165b2:	2300      	movs	r3, #0
   165b4:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
   165b6:	4a35      	ldr	r2, [pc, #212]	; (1668c <lv_font_get_bitmap_fmt_txt+0x178>)
   165b8:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
   165ba:	4a35      	ldr	r2, [pc, #212]	; (16690 <lv_font_get_bitmap_fmt_txt+0x17c>)
   165bc:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
   165be:	4a35      	ldr	r2, [pc, #212]	; (16694 <lv_font_get_bitmap_fmt_txt+0x180>)
    uint8_t * line_buf = lv_draw_get_buf(w * 2);
   165c0:	0068      	lsls	r0, r5, #1
    rle_cnt = 0;
   165c2:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf = lv_draw_get_buf(w * 2);
   165c4:	f7fe fa62 	bl	14a8c <lv_draw_get_buf>
   165c8:	4680      	mov	r8, r0
    uint8_t * line_buf2 = line_buf + w;
   165ca:	1946      	adds	r6, r0, r5
static void decompress_line(uint8_t * out, lv_coord_t w)
   165cc:	4681      	mov	r9, r0
    uint8_t * line_buf2 = line_buf + w;
   165ce:	4604      	mov	r4, r0
    for(i = 0; i < w; i++) {
   165d0:	42b4      	cmp	r4, r6
   165d2:	d11d      	bne.n	16610 <lv_font_get_bitmap_fmt_txt+0xfc>
    uint32_t wrp = 0;
   165d4:	f04f 0a00 	mov.w	sl, #0
    for(x = 0; x < w; x++) {
   165d8:	45a1      	cmp	r9, r4
   165da:	d11e      	bne.n	1661a <lv_font_get_bitmap_fmt_txt+0x106>
   165dc:	9b00      	ldr	r3, [sp, #0]
   165de:	fb15 f303 	smulbb	r3, r5, r3
   165e2:	9303      	str	r3, [sp, #12]
   165e4:	4699      	mov	r9, r3
   165e6:	1973      	adds	r3, r6, r5
    for(y = 1; y < h; y++) {
   165e8:	2401      	movs	r4, #1
   165ea:	9305      	str	r3, [sp, #20]
   165ec:	9b04      	ldr	r3, [sp, #16]
   165ee:	42a3      	cmp	r3, r4
   165f0:	dd40      	ble.n	16674 <lv_font_get_bitmap_fmt_txt+0x160>
   165f2:	9601      	str	r6, [sp, #4]
   165f4:	4635      	mov	r5, r6
   165f6:	e01e      	b.n	16636 <lv_font_get_bitmap_fmt_txt+0x122>
        case 2: buf_size = gsize >> 2;  break;
   165f8:	08a4      	lsrs	r4, r4, #2
   165fa:	e7bb      	b.n	16574 <lv_font_get_bitmap_fmt_txt+0x60>
        case 4: buf_size = gsize >> 1;  break;
   165fc:	0864      	lsrs	r4, r4, #1
   165fe:	e7b9      	b.n	16574 <lv_font_get_bitmap_fmt_txt+0x60>
            buf = lv_mem_realloc(buf, buf_size);
   16600:	4621      	mov	r1, r4
   16602:	6828      	ldr	r0, [r5, #0]
   16604:	f7ff f98e 	bl	15924 <lv_mem_realloc>
   16608:	6028      	str	r0, [r5, #0]
            if(buf == NULL) return NULL;
   1660a:	2800      	cmp	r0, #0
   1660c:	d1b8      	bne.n	16580 <lv_font_get_bitmap_fmt_txt+0x6c>
   1660e:	e785      	b.n	1651c <lv_font_get_bitmap_fmt_txt+0x8>
        out[i] = rle_next();
   16610:	f7ff fe82 	bl	16318 <rle_next>
   16614:	f804 0b01 	strb.w	r0, [r4], #1
   16618:	e7da      	b.n	165d0 <lv_font_get_bitmap_fmt_txt+0xbc>
        bits_write(out,wrp, line_buf1[x], bpp);
   1661a:	463b      	mov	r3, r7
   1661c:	4651      	mov	r1, sl
   1661e:	f819 2b01 	ldrb.w	r2, [r9], #1
   16622:	9802      	ldr	r0, [sp, #8]
   16624:	f7ff fe5c 	bl	162e0 <bits_write>
        wrp += wr_size;
   16628:	9b00      	ldr	r3, [sp, #0]
   1662a:	449a      	add	sl, r3
   1662c:	e7d4      	b.n	165d8 <lv_font_get_bitmap_fmt_txt+0xc4>
        out[i] = rle_next();
   1662e:	f7ff fe73 	bl	16318 <rle_next>
   16632:	f805 0b01 	strb.w	r0, [r5], #1
    for(i = 0; i < w; i++) {
   16636:	9b05      	ldr	r3, [sp, #20]
   16638:	429d      	cmp	r5, r3
   1663a:	d1f8      	bne.n	1662e <lv_font_get_bitmap_fmt_txt+0x11a>
   1663c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
   16640:	46ca      	mov	sl, r9
        for(x = 0; x < w; x++) {
   16642:	9b01      	ldr	r3, [sp, #4]
   16644:	42ab      	cmp	r3, r5
   16646:	d104      	bne.n	16652 <lv_font_get_bitmap_fmt_txt+0x13e>
   16648:	9b03      	ldr	r3, [sp, #12]
    for(y = 1; y < h; y++) {
   1664a:	3401      	adds	r4, #1
   1664c:	4499      	add	r9, r3
   1664e:	b224      	sxth	r4, r4
   16650:	e7cc      	b.n	165ec <lv_font_get_bitmap_fmt_txt+0xd8>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
   16652:	9b01      	ldr	r3, [sp, #4]
            bits_write(out,wrp, line_buf1[x], bpp);
   16654:	9802      	ldr	r0, [sp, #8]
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
   16656:	f813 2b01 	ldrb.w	r2, [r3], #1
   1665a:	9301      	str	r3, [sp, #4]
   1665c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
   16660:	405a      	eors	r2, r3
            bits_write(out,wrp, line_buf1[x], bpp);
   16662:	4651      	mov	r1, sl
   16664:	463b      	mov	r3, r7
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
   16666:	f88b 2000 	strb.w	r2, [fp]
            bits_write(out,wrp, line_buf1[x], bpp);
   1666a:	f7ff fe39 	bl	162e0 <bits_write>
            wrp += wr_size;
   1666e:	9b00      	ldr	r3, [sp, #0]
   16670:	449a      	add	sl, r3
   16672:	e7e6      	b.n	16642 <lv_font_get_bitmap_fmt_txt+0x12e>
        return buf;
   16674:	4b01      	ldr	r3, [pc, #4]	; (1667c <lv_font_get_bitmap_fmt_txt+0x168>)
   16676:	6818      	ldr	r0, [r3, #0]
   16678:	e751      	b.n	1651e <lv_font_get_bitmap_fmt_txt+0xa>
   1667a:	bf00      	nop
   1667c:	20001ae4 	.word	0x20001ae4
   16680:	20001ae8 	.word	0x20001ae8
   16684:	2000a2b5 	.word	0x2000a2b5
   16688:	2000a2b8 	.word	0x2000a2b8
   1668c:	20001aec 	.word	0x20001aec
   16690:	2000a2b7 	.word	0x2000a2b7
   16694:	2000a2b6 	.word	0x2000a2b6

00016698 <lv_font_get_glyph_dsc_fmt_txt>:
{
   16698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1669c:	4680      	mov	r8, r0
   1669e:	b085      	sub	sp, #20
   166a0:	460c      	mov	r4, r1
   166a2:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
   166a4:	b91a      	cbnz	r2, 166ae <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
   166a6:	2000      	movs	r0, #0
}
   166a8:	b005      	add	sp, #20
   166aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   166ae:	4607      	mov	r7, r0
   166b0:	4611      	mov	r1, r2
   166b2:	f857 5f0c 	ldr.w	r5, [r7, #12]!
   166b6:	4638      	mov	r0, r7
   166b8:	f7ff fed2 	bl	16460 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
   166bc:	4606      	mov	r6, r0
   166be:	2800      	cmp	r0, #0
   166c0:	d0f1      	beq.n	166a6 <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
   166c2:	68eb      	ldr	r3, [r5, #12]
   166c4:	b9d3      	cbnz	r3, 166fc <lv_font_get_glyph_dsc_fmt_txt+0x64>
    int8_t kvalue = 0;
   166c6:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   166c8:	686b      	ldr	r3, [r5, #4]
   166ca:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   166ce:	8a2b      	ldrh	r3, [r5, #16]
   166d0:	4358      	muls	r0, r3
    uint32_t adv_w = gdsc->adv_w + kv;
   166d2:	8873      	ldrh	r3, [r6, #2]
   166d4:	091b      	lsrs	r3, r3, #4
   166d6:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
   166da:	3008      	adds	r0, #8
   166dc:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
   166de:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
   166e0:	7973      	ldrb	r3, [r6, #5]
   166e2:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
   166e4:	7933      	ldrb	r3, [r6, #4]
   166e6:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
   166e8:	79b3      	ldrb	r3, [r6, #6]
   166ea:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
   166ec:	79f3      	ldrb	r3, [r6, #7]
   166ee:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
   166f0:	7ceb      	ldrb	r3, [r5, #19]
   166f2:	f3c3 0382 	ubfx	r3, r3, #2, #3
   166f6:	71a3      	strb	r3, [r4, #6]
    return true;
   166f8:	2001      	movs	r0, #1
   166fa:	e7d5      	b.n	166a8 <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
   166fc:	f1b9 0f00 	cmp.w	r9, #0
   16700:	d0e1      	beq.n	166c6 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
   16702:	4649      	mov	r1, r9
   16704:	4638      	mov	r0, r7
   16706:	f7ff feab 	bl	16460 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
   1670a:	2800      	cmp	r0, #0
   1670c:	d0db      	beq.n	166c6 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            kvalue = get_kern_value(font, gid, gid_next);
   1670e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
   16712:	68df      	ldr	r7, [r3, #12]
   16714:	7cdb      	ldrb	r3, [r3, #19]
   16716:	069b      	lsls	r3, r3, #26
   16718:	d432      	bmi.n	16780 <lv_font_get_glyph_dsc_fmt_txt+0xe8>
        if(kdsc->glyph_ids_size == 0) {
   1671a:	7afb      	ldrb	r3, [r7, #11]
   1671c:	f013 0303 	ands.w	r3, r3, #3
   16720:	d117      	bne.n	16752 <lv_font_get_glyph_dsc_fmt_txt+0xba>
            const uint8_t * g_ids = kdsc->glyph_ids;
   16722:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   16726:	68ba      	ldr	r2, [r7, #8]
   16728:	4b1d      	ldr	r3, [pc, #116]	; (167a0 <lv_font_get_glyph_dsc_fmt_txt+0x108>)
   1672a:	9300      	str	r3, [sp, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
   1672c:	eb06 2000 	add.w	r0, r6, r0, lsl #8
   16730:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   16734:	2302      	movs	r3, #2
   16736:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1673a:	4641      	mov	r1, r8
   1673c:	a803      	add	r0, sp, #12
   1673e:	f006 fedc 	bl	1d4fa <lv_utils_bsearch>
            if(kid_p) {
   16742:	2800      	cmp	r0, #0
   16744:	d0c0      	beq.n	166c8 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
   16746:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
   1674a:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
   1674c:	687b      	ldr	r3, [r7, #4]
   1674e:	5618      	ldrsb	r0, [r3, r0]
   16750:	e7ba      	b.n	166c8 <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
   16752:	2b01      	cmp	r3, #1
   16754:	d1b7      	bne.n	166c6 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            const uint16_t * g_ids = kdsc->glyph_ids;
   16756:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   1675a:	68ba      	ldr	r2, [r7, #8]
   1675c:	4b11      	ldr	r3, [pc, #68]	; (167a4 <lv_font_get_glyph_dsc_fmt_txt+0x10c>)
   1675e:	9300      	str	r3, [sp, #0]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
   16760:	eb06 2000 	add.w	r0, r6, r0, lsl #8
   16764:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   16766:	2304      	movs	r3, #4
   16768:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1676c:	4641      	mov	r1, r8
   1676e:	a803      	add	r0, sp, #12
   16770:	f006 fec3 	bl	1d4fa <lv_utils_bsearch>
            if(kid_p) {
   16774:	2800      	cmp	r0, #0
   16776:	d0a7      	beq.n	166c8 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                lv_uintptr_t ofs = (lv_uintptr_t) (kid_p - (const uint8_t *)g_ids);
   16778:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
   1677c:	0900      	lsrs	r0, r0, #4
   1677e:	e7e5      	b.n	1674c <lv_font_get_glyph_dsc_fmt_txt+0xb4>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
   16780:	687a      	ldr	r2, [r7, #4]
   16782:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
   16784:	2b00      	cmp	r3, #0
   16786:	d09e      	beq.n	166c6 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
   16788:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
   1678a:	2900      	cmp	r1, #0
   1678c:	d09b      	beq.n	166c6 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
   1678e:	683a      	ldr	r2, [r7, #0]
   16790:	7b78      	ldrb	r0, [r7, #13]
   16792:	3b01      	subs	r3, #1
   16794:	440a      	add	r2, r1
   16796:	fb00 2303 	mla	r3, r0, r3, r2
   1679a:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
   1679e:	e793      	b.n	166c8 <lv_font_get_glyph_dsc_fmt_txt+0x30>
   167a0:	0001d955 	.word	0x0001d955
   167a4:	0001d967 	.word	0x0001d967

000167a8 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   167a8:	4b09      	ldr	r3, [pc, #36]	; (167d0 <z_sys_device_do_config_level+0x28>)
{
   167aa:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   167ac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   167b0:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   167b2:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   167b4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   167b8:	42a5      	cmp	r5, r4
   167ba:	d800      	bhi.n	167be <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   167bc:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   167be:	6823      	ldr	r3, [r4, #0]
   167c0:	4620      	mov	r0, r4
   167c2:	685b      	ldr	r3, [r3, #4]
   167c4:	4798      	blx	r3
		if (retval != 0) {
   167c6:	b100      	cbz	r0, 167ca <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   167c8:	6066      	str	r6, [r4, #4]
								info++) {
   167ca:	340c      	adds	r4, #12
   167cc:	e7f4      	b.n	167b8 <z_sys_device_do_config_level+0x10>
   167ce:	bf00      	nop
   167d0:	0001f018 	.word	0x0001f018

000167d4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   167d4:	4b10      	ldr	r3, [pc, #64]	; (16818 <z_impl_device_get_binding+0x44>)
{
   167d6:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   167d8:	4c10      	ldr	r4, [pc, #64]	; (1681c <z_impl_device_get_binding+0x48>)
{
   167da:	4605      	mov	r5, r0
   167dc:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   167de:	429c      	cmp	r4, r3
   167e0:	d104      	bne.n	167ec <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   167e2:	4c0e      	ldr	r4, [pc, #56]	; (1681c <z_impl_device_get_binding+0x48>)
   167e4:	42b4      	cmp	r4, r6
   167e6:	d109      	bne.n	167fc <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   167e8:	2400      	movs	r4, #0
   167ea:	e012      	b.n	16812 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   167ec:	6862      	ldr	r2, [r4, #4]
   167ee:	b11a      	cbz	r2, 167f8 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   167f0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   167f2:	6812      	ldr	r2, [r2, #0]
   167f4:	42aa      	cmp	r2, r5
   167f6:	d00c      	beq.n	16812 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   167f8:	340c      	adds	r4, #12
   167fa:	e7f0      	b.n	167de <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   167fc:	6863      	ldr	r3, [r4, #4]
   167fe:	b90b      	cbnz	r3, 16804 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   16800:	340c      	adds	r4, #12
   16802:	e7ef      	b.n	167e4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   16804:	6823      	ldr	r3, [r4, #0]
   16806:	4628      	mov	r0, r5
   16808:	6819      	ldr	r1, [r3, #0]
   1680a:	f002 f9fa 	bl	18c02 <strcmp>
   1680e:	2800      	cmp	r0, #0
   16810:	d1f6      	bne.n	16800 <z_impl_device_get_binding+0x2c>
}
   16812:	4620      	mov	r0, r4
   16814:	bd70      	pop	{r4, r5, r6, pc}
   16816:	bf00      	nop
   16818:	2000d1c0 	.word	0x2000d1c0
   1681c:	2000d10c 	.word	0x2000d10c

00016820 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   16820:	b510      	push	{r4, lr}
   16822:	4604      	mov	r4, r0
	z_impl_log_panic();
   16824:	f7ec f856 	bl	28d4 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   16828:	2301      	movs	r3, #1
   1682a:	f04f 0100 	mov.w	r1, #0
   1682e:	f363 0107 	bfi	r1, r3, #0, #8
   16832:	4a06      	ldr	r2, [pc, #24]	; (1684c <k_sys_fatal_error_handler+0x2c>)
   16834:	4b06      	ldr	r3, [pc, #24]	; (16850 <k_sys_fatal_error_handler+0x30>)
   16836:	4807      	ldr	r0, [pc, #28]	; (16854 <k_sys_fatal_error_handler+0x34>)
   16838:	1a9b      	subs	r3, r3, r2
   1683a:	08db      	lsrs	r3, r3, #3
   1683c:	f363 118f 	bfi	r1, r3, #6, #10
   16840:	f001 fec6 	bl	185d0 <log_0>
	arch_system_halt(reason);
   16844:	4620      	mov	r0, r4
   16846:	f007 f8af 	bl	1d9a8 <arch_system_halt>
   1684a:	bf00      	nop
   1684c:	0001e448 	.word	0x0001e448
   16850:	0001e560 	.word	0x0001e560
   16854:	000296a1 	.word	0x000296a1

00016858 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1685c:	4605      	mov	r5, r0
   1685e:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   16860:	f000 fd68 	bl	17334 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16864:	2201      	movs	r2, #1
   16866:	f04f 0300 	mov.w	r3, #0
   1686a:	f362 0307 	bfi	r3, r2, #0, #8
   1686e:	4c24      	ldr	r4, [pc, #144]	; (16900 <z_fatal_error+0xa8>)
   16870:	4a24      	ldr	r2, [pc, #144]	; (16904 <z_fatal_error+0xac>)
   16872:	2d04      	cmp	r5, #4
   16874:	eba4 0402 	sub.w	r4, r4, r2
   16878:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1687c:	bf96      	itet	ls
   1687e:	4a22      	ldrls	r2, [pc, #136]	; (16908 <z_fatal_error+0xb0>)
   16880:	4a22      	ldrhi	r2, [pc, #136]	; (1690c <z_fatal_error+0xb4>)
   16882:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   16886:	f364 138f 	bfi	r3, r4, #6, #10
   1688a:	f8ad 3000 	strh.w	r3, [sp]
   1688e:	4606      	mov	r6, r0
   16890:	2300      	movs	r3, #0
   16892:	4629      	mov	r1, r5
   16894:	481e      	ldr	r0, [pc, #120]	; (16910 <z_fatal_error+0xb8>)
   16896:	f001 fed4 	bl	18642 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1689a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1689e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   168a2:	b14b      	cbz	r3, 168b8 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   168a4:	f04f 0100 	mov.w	r1, #0
   168a8:	2301      	movs	r3, #1
   168aa:	f363 0107 	bfi	r1, r3, #0, #8
   168ae:	f364 118f 	bfi	r1, r4, #6, #10
   168b2:	4818      	ldr	r0, [pc, #96]	; (16914 <z_fatal_error+0xbc>)
   168b4:	f001 fe8c 	bl	185d0 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   168b8:	f04f 0700 	mov.w	r7, #0
   168bc:	2301      	movs	r3, #1
   168be:	f363 0707 	bfi	r7, r3, #0, #8
	const char *thread_name = k_thread_name_get(thread);
   168c2:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   168c4:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   168c8:	f007 fa99 	bl	1ddfe <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   168cc:	b1b0      	cbz	r0, 168fc <z_fatal_error+0xa4>
   168ce:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   168d0:	4b11      	ldr	r3, [pc, #68]	; (16918 <z_fatal_error+0xc0>)
   168d2:	2a00      	cmp	r2, #0
   168d4:	bf08      	it	eq
   168d6:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   168d8:	f7eb fe90 	bl	25fc <log_strdup>
   168dc:	463b      	mov	r3, r7
   168de:	4602      	mov	r2, r0
   168e0:	4631      	mov	r1, r6
   168e2:	480e      	ldr	r0, [pc, #56]	; (1691c <z_fatal_error+0xc4>)
   168e4:	f001 fe95 	bl	18612 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   168e8:	4641      	mov	r1, r8
   168ea:	4628      	mov	r0, r5
   168ec:	f7ff ff98 	bl	16820 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   168f0:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   168f2:	b002      	add	sp, #8
   168f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   168f8:	f7ec bfd2 	b.w	38a0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   168fc:	4806      	ldr	r0, [pc, #24]	; (16918 <z_fatal_error+0xc0>)
   168fe:	e7eb      	b.n	168d8 <z_fatal_error+0x80>
   16900:	0001e560 	.word	0x0001e560
   16904:	0001e448 	.word	0x0001e448
   16908:	0001f030 	.word	0x0001f030
   1690c:	000296fa 	.word	0x000296fa
   16910:	00029710 	.word	0x00029710
   16914:	00029738 	.word	0x00029738
   16918:	00029708 	.word	0x00029708
   1691c:	00029759 	.word	0x00029759

00016920 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   16920:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   16922:	4d0b      	ldr	r5, [pc, #44]	; (16950 <idle+0x30>)
	__asm__ volatile(
   16924:	f04f 0220 	mov.w	r2, #32
   16928:	f3ef 8311 	mrs	r3, BASEPRI
   1692c:	f382 8811 	msr	BASEPRI, r2
   16930:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   16934:	f007 fb06 	bl	1df44 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16938:	2101      	movs	r1, #1
   1693a:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   1693c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1693e:	bfd8      	it	le
   16940:	4608      	movle	r0, r1
   16942:	f007 fb0f 	bl	1df64 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   16946:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   16948:	f7ec fc5a 	bl	3200 <arch_cpu_idle>
   1694c:	e7ea      	b.n	16924 <idle+0x4>
   1694e:	bf00      	nop
   16950:	20005c2c 	.word	0x20005c2c

00016954 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   16954:	4802      	ldr	r0, [pc, #8]	; (16960 <z_bss_zero+0xc>)
   16956:	4a03      	ldr	r2, [pc, #12]	; (16964 <z_bss_zero+0x10>)
   16958:	2100      	movs	r1, #0
   1695a:	1a12      	subs	r2, r2, r0
   1695c:	f002 b997 	b.w	18c8e <memset>
   16960:	20000000 	.word	0x20000000
   16964:	2000a2bc 	.word	0x2000a2bc

00016968 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   16968:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1696a:	4806      	ldr	r0, [pc, #24]	; (16984 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1696c:	4a06      	ldr	r2, [pc, #24]	; (16988 <z_data_copy+0x20>)
   1696e:	4907      	ldr	r1, [pc, #28]	; (1698c <z_data_copy+0x24>)
   16970:	1a12      	subs	r2, r2, r0
   16972:	f002 f962 	bl	18c3a <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   16976:	4a06      	ldr	r2, [pc, #24]	; (16990 <z_data_copy+0x28>)
   16978:	4906      	ldr	r1, [pc, #24]	; (16994 <z_data_copy+0x2c>)
   1697a:	4807      	ldr	r0, [pc, #28]	; (16998 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1697c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   16980:	f002 b95b 	b.w	18c3a <memcpy>
   16984:	2000ca40 	.word	0x2000ca40
   16988:	2000d378 	.word	0x2000d378
   1698c:	00029795 	.word	0x00029795
   16990:	00000000 	.word	0x00000000
   16994:	00029794 	.word	0x00029794
   16998:	20000000 	.word	0x20000000

0001699c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1699c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1699e:	4b09      	ldr	r3, [pc, #36]	; (169c4 <bg_thread_main+0x28>)
   169a0:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   169a2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   169a4:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   169a6:	f7ff feff 	bl	167a8 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   169aa:	2003      	movs	r0, #3
   169ac:	f7ff fefc 	bl	167a8 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   169b0:	f000 fdba 	bl	17528 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   169b4:	f7eb fb44 	bl	2040 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   169b8:	4a03      	ldr	r2, [pc, #12]	; (169c8 <bg_thread_main+0x2c>)
   169ba:	7b13      	ldrb	r3, [r2, #12]
   169bc:	f023 0301 	bic.w	r3, r3, #1
   169c0:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   169c2:	bd08      	pop	{r3, pc}
   169c4:	2000a2b9 	.word	0x2000a2b9
   169c8:	20001b5c 	.word	0x20001b5c

000169cc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   169cc:	b580      	push	{r7, lr}
   169ce:	b0a2      	sub	sp, #136	; 0x88
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   169d0:	f7eb fd7a 	bl	24c8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   169d4:	4b35      	ldr	r3, [pc, #212]	; (16aac <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   169d6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   169da:	4c35      	ldr	r4, [pc, #212]	; (16ab0 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   169dc:	4e35      	ldr	r6, [pc, #212]	; (16ab4 <z_cstart+0xe8>)
   169de:	6963      	ldr	r3, [r4, #20]
   169e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   169e4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   169e6:	2500      	movs	r5, #0
   169e8:	23e0      	movs	r3, #224	; 0xe0
   169ea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   169ee:	77e5      	strb	r5, [r4, #31]
   169f0:	7625      	strb	r5, [r4, #24]
   169f2:	7665      	strb	r5, [r4, #25]
   169f4:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   169f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   169f8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   169fc:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   169fe:	f7ec ff3b 	bl	3878 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   16a02:	f7ec fbf7 	bl	31f4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a0a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16a0c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   16a0e:	ab07      	add	r3, sp, #28
   16a10:	226c      	movs	r2, #108	; 0x6c
   16a12:	4629      	mov	r1, r5
   16a14:	4618      	mov	r0, r3
   16a16:	f002 f93a 	bl	18c8e <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   16a1a:	4c27      	ldr	r4, [pc, #156]	; (16ab8 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
   16a1c:	2701      	movs	r7, #1
	_current = &dummy_thread;
   16a1e:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   16a20:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
   16a22:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   16a26:	f7ff febf 	bl	167a8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   16a2a:	4638      	mov	r0, r7
   16a2c:	f7ff febc 	bl	167a8 <z_sys_device_do_config_level>
	z_sched_init();
   16a30:	f000 fc00 	bl	17234 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   16a34:	4b21      	ldr	r3, [pc, #132]	; (16abc <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   16a36:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   16a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16a3c:	e9cd 7304 	strd	r7, r3, [sp, #16]
   16a40:	e9cd 5502 	strd	r5, r5, [sp, #8]
   16a44:	4b1e      	ldr	r3, [pc, #120]	; (16ac0 <z_cstart+0xf4>)
   16a46:	491f      	ldr	r1, [pc, #124]	; (16ac4 <z_cstart+0xf8>)
   16a48:	e9cd 5500 	strd	r5, r5, [sp]
   16a4c:	4630      	mov	r0, r6
   16a4e:	f000 fd03 	bl	17458 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16a52:	7b73      	ldrb	r3, [r6, #13]
   16a54:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16a58:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16a5c:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16a5e:	d104      	bne.n	16a6a <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   16a60:	69b3      	ldr	r3, [r6, #24]
   16a62:	b913      	cbnz	r3, 16a6a <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
   16a64:	4630      	mov	r0, r6
   16a66:	f000 f9f1 	bl	16e4c <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   16a6a:	4b17      	ldr	r3, [pc, #92]	; (16ac8 <z_cstart+0xfc>)
   16a6c:	4d17      	ldr	r5, [pc, #92]	; (16acc <z_cstart+0x100>)
   16a6e:	9305      	str	r3, [sp, #20]
   16a70:	2201      	movs	r2, #1
   16a72:	230f      	movs	r3, #15
   16a74:	e9cd 3203 	strd	r3, r2, [sp, #12]
   16a78:	2300      	movs	r3, #0
   16a7a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   16a7e:	9300      	str	r3, [sp, #0]
   16a80:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16a84:	4b12      	ldr	r3, [pc, #72]	; (16ad0 <z_cstart+0x104>)
   16a86:	4913      	ldr	r1, [pc, #76]	; (16ad4 <z_cstart+0x108>)
   16a88:	4628      	mov	r0, r5
   16a8a:	f000 fce5 	bl	17458 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16a8e:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   16a90:	60e5      	str	r5, [r4, #12]
   16a92:	f023 0304 	bic.w	r3, r3, #4
   16a96:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16a98:	4b0f      	ldr	r3, [pc, #60]	; (16ad8 <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   16a9a:	490a      	ldr	r1, [pc, #40]	; (16ac4 <z_cstart+0xf8>)
   16a9c:	4805      	ldr	r0, [pc, #20]	; (16ab4 <z_cstart+0xe8>)
	list->tail = (sys_dnode_t *)list;
   16a9e:	e9c4 3306 	strd	r3, r3, [r4, #24]
   16aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16aa6:	4b06      	ldr	r3, [pc, #24]	; (16ac0 <z_cstart+0xf4>)
   16aa8:	f7ec fb86 	bl	31b8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16aac:	2000bc88 	.word	0x2000bc88
   16ab0:	e000ed00 	.word	0xe000ed00
   16ab4:	20001b5c 	.word	0x20001b5c
   16ab8:	20005c2c 	.word	0x20005c2c
   16abc:	00029774 	.word	0x00029774
   16ac0:	0001699d 	.word	0x0001699d
   16ac4:	2000af48 	.word	0x2000af48
   16ac8:	00029779 	.word	0x00029779
   16acc:	20001af0 	.word	0x20001af0
   16ad0:	00016921 	.word	0x00016921
   16ad4:	2000b348 	.word	0x2000b348
   16ad8:	20005c44 	.word	0x20005c44

00016adc <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16adc:	4b0b      	ldr	r3, [pc, #44]	; (16b0c <init_mem_slab_module+0x30>)
   16ade:	480c      	ldr	r0, [pc, #48]	; (16b10 <init_mem_slab_module+0x34>)
{
   16ae0:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   16ae2:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16ae4:	4283      	cmp	r3, r0
   16ae6:	d301      	bcc.n	16aec <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   16ae8:	2000      	movs	r0, #0
   16aea:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   16aec:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   16aee:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   16af0:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16af2:	2100      	movs	r1, #0
   16af4:	42a9      	cmp	r1, r5
   16af6:	d101      	bne.n	16afc <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16af8:	331c      	adds	r3, #28
   16afa:	e7f3      	b.n	16ae4 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   16afc:	695e      	ldr	r6, [r3, #20]
   16afe:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   16b00:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   16b02:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16b04:	3101      	adds	r1, #1
		p += slab->block_size;
   16b06:	4432      	add	r2, r6
   16b08:	e7f4      	b.n	16af4 <init_mem_slab_module+0x18>
   16b0a:	bf00      	nop
   16b0c:	2000d1c0 	.word	0x2000d1c0
   16b10:	2000d1f8 	.word	0x2000d1f8

00016b14 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   16b14:	b510      	push	{r4, lr}
   16b16:	4613      	mov	r3, r2
   16b18:	460c      	mov	r4, r1
   16b1a:	f04f 0220 	mov.w	r2, #32
   16b1e:	f3ef 8111 	mrs	r1, BASEPRI
   16b22:	f382 8811 	msr	BASEPRI, r2
   16b26:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   16b2a:	6942      	ldr	r2, [r0, #20]
   16b2c:	b15a      	cbz	r2, 16b46 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   16b2e:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   16b30:	6813      	ldr	r3, [r2, #0]
   16b32:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   16b34:	6983      	ldr	r3, [r0, #24]
   16b36:	3301      	adds	r3, #1
   16b38:	6183      	str	r3, [r0, #24]
		result = 0;
   16b3a:	2000      	movs	r0, #0
	__asm__ volatile(
   16b3c:	f381 8811 	msr	BASEPRI, r1
   16b40:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   16b44:	e00d      	b.n	16b62 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   16b46:	b91b      	cbnz	r3, 16b50 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   16b48:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   16b4a:	f06f 000b 	mvn.w	r0, #11
   16b4e:	e7f5      	b.n	16b3c <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   16b50:	4602      	mov	r2, r0
   16b52:	4804      	ldr	r0, [pc, #16]	; (16b64 <k_mem_slab_alloc+0x50>)
   16b54:	f000 fb2c 	bl	171b0 <z_pend_curr>
		if (result == 0) {
   16b58:	b918      	cbnz	r0, 16b62 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   16b5a:	4b03      	ldr	r3, [pc, #12]	; (16b68 <k_mem_slab_alloc+0x54>)
   16b5c:	689b      	ldr	r3, [r3, #8]
   16b5e:	695b      	ldr	r3, [r3, #20]
   16b60:	6023      	str	r3, [r4, #0]
}
   16b62:	bd10      	pop	{r4, pc}
   16b64:	2000a2ba 	.word	0x2000a2ba
   16b68:	20005c2c 	.word	0x20005c2c

00016b6c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   16b6c:	b570      	push	{r4, r5, r6, lr}
   16b6e:	4604      	mov	r4, r0
   16b70:	460d      	mov	r5, r1
	__asm__ volatile(
   16b72:	f04f 0320 	mov.w	r3, #32
   16b76:	f3ef 8611 	mrs	r6, BASEPRI
   16b7a:	f383 8811 	msr	BASEPRI, r3
   16b7e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   16b82:	f007 f8eb 	bl	1dd5c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   16b86:	b180      	cbz	r0, 16baa <k_mem_slab_free+0x3e>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   16b88:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   16b8a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16b8c:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   16b8e:	2100      	movs	r1, #0
   16b90:	06d2      	lsls	r2, r2, #27
   16b92:	6681      	str	r1, [r0, #104]	; 0x68
   16b94:	d103      	bne.n	16b9e <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   16b96:	6983      	ldr	r3, [r0, #24]
   16b98:	b90b      	cbnz	r3, 16b9e <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   16b9a:	f000 f957 	bl	16e4c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   16b9e:	4631      	mov	r1, r6
   16ba0:	4808      	ldr	r0, [pc, #32]	; (16bc4 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   16ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   16ba6:	f007 b863 	b.w	1dc70 <z_reschedule>
		**(char ***)mem = slab->free_list;
   16baa:	682b      	ldr	r3, [r5, #0]
   16bac:	6962      	ldr	r2, [r4, #20]
   16bae:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   16bb0:	682b      	ldr	r3, [r5, #0]
   16bb2:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   16bb4:	69a3      	ldr	r3, [r4, #24]
   16bb6:	3b01      	subs	r3, #1
   16bb8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   16bba:	f386 8811 	msr	BASEPRI, r6
   16bbe:	f3bf 8f6f 	isb	sy
}
   16bc2:	bd70      	pop	{r4, r5, r6, pc}
   16bc4:	2000a2ba 	.word	0x2000a2ba

00016bc8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   16bc8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   16bca:	4c07      	ldr	r4, [pc, #28]	; (16be8 <init_static_pools+0x20>)
   16bcc:	4d07      	ldr	r5, [pc, #28]	; (16bec <init_static_pools+0x24>)
   16bce:	42ac      	cmp	r4, r5
   16bd0:	d301      	bcc.n	16bd6 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   16bd2:	2000      	movs	r0, #0
   16bd4:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   16bd6:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   16bda:	4620      	mov	r0, r4
   16bdc:	e9c4 3305 	strd	r3, r3, [r4, #20]
   16be0:	f000 ff95 	bl	17b0e <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   16be4:	341c      	adds	r4, #28
   16be6:	e7f2      	b.n	16bce <init_static_pools+0x6>
   16be8:	2000d1f8 	.word	0x2000d1f8
   16bec:	2000d214 	.word	0x2000d214

00016bf0 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   16bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   16bf4:	1e1c      	subs	r4, r3, #0
{
   16bf6:	b085      	sub	sp, #20
   16bf8:	4607      	mov	r7, r0
   16bfa:	460d      	mov	r5, r1
   16bfc:	4692      	mov	sl, r2
	if (timeout > 0) {
   16bfe:	dd3b      	ble.n	16c78 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   16c00:	f007 f9ce 	bl	1dfa0 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   16c04:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   16c08:	4b1d      	ldr	r3, [pc, #116]	; (16c80 <k_mem_pool_alloc+0x90>)
   16c0a:	4e1e      	ldr	r6, [pc, #120]	; (16c84 <k_mem_pool_alloc+0x94>)
   16c0c:	1afb      	subs	r3, r7, r3
   16c0e:	109b      	asrs	r3, r3, #2
   16c10:	435e      	muls	r6, r3
		u32_t level_num, block_num;

		ret = z_sys_mem_pool_block_alloc(&p->base, size,
						 &level_num, &block_num,
						 &block->data);
		block->id.pool = pool_id(p);
   16c12:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   16c14:	f107 0b14 	add.w	fp, r7, #20
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   16c18:	ab03      	add	r3, sp, #12
   16c1a:	aa02      	add	r2, sp, #8
   16c1c:	9500      	str	r5, [sp, #0]
   16c1e:	4651      	mov	r1, sl
   16c20:	4638      	mov	r0, r7
   16c22:	f000 ffba 	bl	17b9a <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   16c26:	796b      	ldrb	r3, [r5, #5]
   16c28:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   16c2a:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   16c2c:	f362 0303 	bfi	r3, r2, #0, #4
   16c30:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   16c32:	686b      	ldr	r3, [r5, #4]
   16c34:	9a03      	ldr	r2, [sp, #12]
   16c36:	f362 331f 	bfi	r3, r2, #12, #20
   16c3a:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   16c3c:	b1c8      	cbz	r0, 16c72 <k_mem_pool_alloc+0x82>
   16c3e:	b1c4      	cbz	r4, 16c72 <k_mem_pool_alloc+0x82>
   16c40:	f110 0f0c 	cmn.w	r0, #12
   16c44:	d115      	bne.n	16c72 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   16c46:	f04f 0320 	mov.w	r3, #32
   16c4a:	f3ef 8011 	mrs	r0, BASEPRI
   16c4e:	f383 8811 	msr	BASEPRI, r3
   16c52:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   16c56:	4622      	mov	r2, r4
   16c58:	4659      	mov	r1, fp
   16c5a:	f000 fa85 	bl	17168 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   16c5e:	1c63      	adds	r3, r4, #1
   16c60:	d0da      	beq.n	16c18 <k_mem_pool_alloc+0x28>
   16c62:	f007 f99d 	bl	1dfa0 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   16c66:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   16c6a:	2c00      	cmp	r4, #0
   16c6c:	dcd4      	bgt.n	16c18 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   16c6e:	f06f 000a 	mvn.w	r0, #10
}
   16c72:	b005      	add	sp, #20
   16c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   16c78:	f04f 0800 	mov.w	r8, #0
   16c7c:	e7c4      	b.n	16c08 <k_mem_pool_alloc+0x18>
   16c7e:	bf00      	nop
   16c80:	2000d1f8 	.word	0x2000d1f8
   16c84:	b6db6db7 	.word	0xb6db6db7

00016c88 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   16c88:	b570      	push	{r4, r5, r6, lr}
   16c8a:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   16c8c:	6802      	ldr	r2, [r0, #0]
   16c8e:	7841      	ldrb	r1, [r0, #1]
   16c90:	4e11      	ldr	r6, [pc, #68]	; (16cd8 <k_mem_pool_free_id+0x50>)
   16c92:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16c96:	00a4      	lsls	r4, r4, #2
   16c98:	0b12      	lsrs	r2, r2, #12
   16c9a:	f001 010f 	and.w	r1, r1, #15
   16c9e:	1930      	adds	r0, r6, r4
   16ca0:	f001 f82e 	bl	17d00 <z_sys_mem_pool_block_free>
   16ca4:	f04f 0320 	mov.w	r3, #32
   16ca8:	f3ef 8511 	mrs	r5, BASEPRI
   16cac:	f383 8811 	msr	BASEPRI, r3
   16cb0:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   16cb4:	f104 0014 	add.w	r0, r4, #20
   16cb8:	4430      	add	r0, r6
   16cba:	f007 f87c 	bl	1ddb6 <z_unpend_all>

	if (need_sched != 0) {
   16cbe:	b128      	cbz	r0, 16ccc <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   16cc0:	4629      	mov	r1, r5
   16cc2:	4806      	ldr	r0, [pc, #24]	; (16cdc <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   16cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   16cc8:	f006 bfd2 	b.w	1dc70 <z_reschedule>
	__asm__ volatile(
   16ccc:	f385 8811 	msr	BASEPRI, r5
   16cd0:	f3bf 8f6f 	isb	sy
}
   16cd4:	bd70      	pop	{r4, r5, r6, pc}
   16cd6:	bf00      	nop
   16cd8:	2000d1f8 	.word	0x2000d1f8
   16cdc:	2000a2ba 	.word	0x2000a2ba

00016ce0 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   16ce0:	4601      	mov	r1, r0
   16ce2:	4801      	ldr	r0, [pc, #4]	; (16ce8 <k_malloc+0x8>)
   16ce4:	f006 be7d 	b.w	1d9e2 <k_mem_pool_malloc>
   16ce8:	2000d1f8 	.word	0x2000d1f8

00016cec <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   16cec:	4b03      	ldr	r3, [pc, #12]	; (16cfc <z_thread_malloc+0x10>)
   16cee:	689b      	ldr	r3, [r3, #8]
{
   16cf0:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   16cf2:	6e18      	ldr	r0, [r3, #96]	; 0x60
   16cf4:	b108      	cbz	r0, 16cfa <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   16cf6:	f006 be74 	b.w	1d9e2 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   16cfa:	4770      	bx	lr
   16cfc:	20005c2c 	.word	0x20005c2c

00016d00 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   16d00:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   16d02:	4c08      	ldr	r4, [pc, #32]	; (16d24 <z_reset_time_slice+0x24>)
   16d04:	6823      	ldr	r3, [r4, #0]
   16d06:	b15b      	cbz	r3, 16d20 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   16d08:	f7ec f946 	bl	2f98 <z_clock_elapsed>
   16d0c:	6823      	ldr	r3, [r4, #0]
   16d0e:	4a06      	ldr	r2, [pc, #24]	; (16d28 <z_reset_time_slice+0x28>)
   16d10:	4418      	add	r0, r3
   16d12:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   16d14:	2100      	movs	r1, #0
   16d16:	4618      	mov	r0, r3
	}
}
   16d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   16d1c:	f007 b922 	b.w	1df64 <z_set_timeout_expiry>
}
   16d20:	bd10      	pop	{r4, pc}
   16d22:	bf00      	nop
   16d24:	20005c64 	.word	0x20005c64
   16d28:	20005c2c 	.word	0x20005c2c

00016d2c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   16d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d2e:	460d      	mov	r5, r1
	__asm__ volatile(
   16d30:	f04f 0320 	mov.w	r3, #32
   16d34:	f3ef 8411 	mrs	r4, BASEPRI
   16d38:	f383 8811 	msr	BASEPRI, r3
   16d3c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   16d40:	4b0d      	ldr	r3, [pc, #52]	; (16d78 <k_sched_time_slice_set+0x4c>)
			return (u32_t)((t * to_hz + off) / from_hz);
   16d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   16d46:	f240 36e7 	movw	r6, #999	; 0x3e7
   16d4a:	2700      	movs	r7, #0
   16d4c:	fbe1 6700 	umlal	r6, r7, r1, r0
   16d50:	2200      	movs	r2, #0
   16d52:	611a      	str	r2, [r3, #16]
   16d54:	4630      	mov	r0, r6
   16d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16d5a:	2300      	movs	r3, #0
   16d5c:	4639      	mov	r1, r7
   16d5e:	f7e9 f9bf 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   16d62:	4b06      	ldr	r3, [pc, #24]	; (16d7c <k_sched_time_slice_set+0x50>)
   16d64:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   16d66:	4b06      	ldr	r3, [pc, #24]	; (16d80 <k_sched_time_slice_set+0x54>)
   16d68:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   16d6a:	f7ff ffc9 	bl	16d00 <z_reset_time_slice>
	__asm__ volatile(
   16d6e:	f384 8811 	msr	BASEPRI, r4
   16d72:	f3bf 8f6f 	isb	sy
	}
}
   16d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d78:	20005c2c 	.word	0x20005c2c
   16d7c:	20005c64 	.word	0x20005c64
   16d80:	20005c60 	.word	0x20005c60

00016d84 <k_sched_lock>:
	__asm__ volatile(
   16d84:	f04f 0320 	mov.w	r3, #32
   16d88:	f3ef 8111 	mrs	r1, BASEPRI
   16d8c:	f383 8811 	msr	BASEPRI, r3
   16d90:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   16d94:	4b04      	ldr	r3, [pc, #16]	; (16da8 <k_sched_lock+0x24>)
   16d96:	689a      	ldr	r2, [r3, #8]
   16d98:	7bd3      	ldrb	r3, [r2, #15]
   16d9a:	3b01      	subs	r3, #1
   16d9c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   16d9e:	f381 8811 	msr	BASEPRI, r1
   16da2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   16da6:	4770      	bx	lr
   16da8:	20005c2c 	.word	0x20005c2c

00016dac <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   16dac:	4b09      	ldr	r3, [pc, #36]	; (16dd4 <z_priq_dumb_remove+0x28>)
   16dae:	f103 0228 	add.w	r2, r3, #40	; 0x28
   16db2:	4282      	cmp	r2, r0
   16db4:	d105      	bne.n	16dc2 <z_priq_dumb_remove+0x16>
   16db6:	689b      	ldr	r3, [r3, #8]
   16db8:	428b      	cmp	r3, r1
   16dba:	d102      	bne.n	16dc2 <z_priq_dumb_remove+0x16>
   16dbc:	7b4b      	ldrb	r3, [r1, #13]
   16dbe:	06db      	lsls	r3, r3, #27
   16dc0:	d106      	bne.n	16dd0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   16dc2:	e9d1 3200 	ldrd	r3, r2, [r1]
   16dc6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   16dc8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16dca:	2300      	movs	r3, #0
	node->prev = NULL;
   16dcc:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   16dd0:	4770      	bx	lr
   16dd2:	bf00      	nop
   16dd4:	20005c2c 	.word	0x20005c2c

00016dd8 <update_cache>:
{
   16dd8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   16dda:	4c0d      	ldr	r4, [pc, #52]	; (16e10 <update_cache+0x38>)
{
   16ddc:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   16dde:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16de2:	f006 ff84 	bl	1dcee <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   16de6:	4605      	mov	r5, r0
   16de8:	b900      	cbnz	r0, 16dec <update_cache+0x14>
   16dea:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   16dec:	68a3      	ldr	r3, [r4, #8]
   16dee:	b94a      	cbnz	r2, 16e04 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   16df0:	7b5a      	ldrb	r2, [r3, #13]
   16df2:	06d2      	lsls	r2, r2, #27
   16df4:	d106      	bne.n	16e04 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   16df6:	69aa      	ldr	r2, [r5, #24]
   16df8:	b922      	cbnz	r2, 16e04 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   16dfa:	89da      	ldrh	r2, [r3, #14]
   16dfc:	2a7f      	cmp	r2, #127	; 0x7f
   16dfe:	d901      	bls.n	16e04 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   16e00:	6263      	str	r3, [r4, #36]	; 0x24
}
   16e02:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   16e04:	429d      	cmp	r5, r3
   16e06:	d001      	beq.n	16e0c <update_cache+0x34>
			z_reset_time_slice();
   16e08:	f7ff ff7a 	bl	16d00 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   16e0c:	6265      	str	r5, [r4, #36]	; 0x24
}
   16e0e:	e7f8      	b.n	16e02 <update_cache+0x2a>
   16e10:	20005c2c 	.word	0x20005c2c

00016e14 <k_sched_unlock>:
{
   16e14:	b510      	push	{r4, lr}
	__asm__ volatile(
   16e16:	f04f 0320 	mov.w	r3, #32
   16e1a:	f3ef 8411 	mrs	r4, BASEPRI
   16e1e:	f383 8811 	msr	BASEPRI, r3
   16e22:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   16e26:	4b08      	ldr	r3, [pc, #32]	; (16e48 <k_sched_unlock+0x34>)
   16e28:	689a      	ldr	r2, [r3, #8]
   16e2a:	7bd3      	ldrb	r3, [r2, #15]
   16e2c:	3301      	adds	r3, #1
   16e2e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   16e30:	2000      	movs	r0, #0
   16e32:	f7ff ffd1 	bl	16dd8 <update_cache>
	__asm__ volatile(
   16e36:	f384 8811 	msr	BASEPRI, r4
   16e3a:	f3bf 8f6f 	isb	sy
}
   16e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   16e42:	f006 bf2c 	b.w	1dc9e <z_reschedule_unlocked>
   16e46:	bf00      	nop
   16e48:	20005c2c 	.word	0x20005c2c

00016e4c <z_add_thread_to_ready_q>:
{
   16e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   16e4e:	f04f 0320 	mov.w	r3, #32
   16e52:	f3ef 8411 	mrs	r4, BASEPRI
   16e56:	f383 8811 	msr	BASEPRI, r3
   16e5a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   16e5e:	4a15      	ldr	r2, [pc, #84]	; (16eb4 <z_add_thread_to_ready_q+0x68>)
   16e60:	4611      	mov	r1, r2
   16e62:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16e66:	428b      	cmp	r3, r1
   16e68:	d01d      	beq.n	16ea6 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e6a:	b1e3      	cbz	r3, 16ea6 <z_add_thread_to_ready_q+0x5a>
   16e6c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   16e6e:	f990 500e 	ldrsb.w	r5, [r0, #14]
   16e72:	f993 700e 	ldrsb.w	r7, [r3, #14]
   16e76:	42af      	cmp	r7, r5
   16e78:	dd10      	ble.n	16e9c <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   16e7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   16e7c:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   16e80:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   16e82:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   16e84:	7b43      	ldrb	r3, [r0, #13]
   16e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16e8a:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   16e8c:	2000      	movs	r0, #0
   16e8e:	f7ff ffa3 	bl	16dd8 <update_cache>
	__asm__ volatile(
   16e92:	f384 8811 	msr	BASEPRI, r4
   16e96:	f3bf 8f6f 	isb	sy
}
   16e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   16e9c:	42b3      	cmp	r3, r6
   16e9e:	d002      	beq.n	16ea6 <z_add_thread_to_ready_q+0x5a>
   16ea0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16ea2:	2b00      	cmp	r3, #0
   16ea4:	d1e5      	bne.n	16e72 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   16ea6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   16ea8:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   16eaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   16eac:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
   16eae:	6018      	str	r0, [r3, #0]
	list->tail = node;
   16eb0:	62d0      	str	r0, [r2, #44]	; 0x2c
   16eb2:	e7e7      	b.n	16e84 <z_add_thread_to_ready_q+0x38>
   16eb4:	20005c2c 	.word	0x20005c2c

00016eb8 <z_move_thread_to_end_of_prio_q>:
{
   16eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16eba:	4604      	mov	r4, r0
	__asm__ volatile(
   16ebc:	f04f 0320 	mov.w	r3, #32
   16ec0:	f3ef 8511 	mrs	r5, BASEPRI
   16ec4:	f383 8811 	msr	BASEPRI, r3
   16ec8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   16ecc:	7b43      	ldrb	r3, [r0, #13]
   16ece:	065a      	lsls	r2, r3, #25
   16ed0:	d503      	bpl.n	16eda <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   16ed2:	4601      	mov	r1, r0
   16ed4:	4817      	ldr	r0, [pc, #92]	; (16f34 <z_move_thread_to_end_of_prio_q+0x7c>)
   16ed6:	f7ff ff69 	bl	16dac <z_priq_dumb_remove>
	return list->head == list;
   16eda:	4a17      	ldr	r2, [pc, #92]	; (16f38 <z_move_thread_to_end_of_prio_q+0x80>)
   16edc:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16ee0:	f102 0128 	add.w	r1, r2, #40	; 0x28
   16ee4:	428b      	cmp	r3, r1
   16ee6:	d01f      	beq.n	16f28 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16ee8:	b1f3      	cbz	r3, 16f28 <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   16eea:	f994 600e 	ldrsb.w	r6, [r4, #14]
   16eee:	f993 700e 	ldrsb.w	r7, [r3, #14]
   16ef2:	42b7      	cmp	r7, r6
   16ef4:	dd13      	ble.n	16f1e <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   16ef6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   16ef8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   16efc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   16efe:	605c      	str	r4, [r3, #4]
   16f00:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   16f02:	6890      	ldr	r0, [r2, #8]
   16f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16f08:	7363      	strb	r3, [r4, #13]
   16f0a:	1b03      	subs	r3, r0, r4
   16f0c:	4258      	negs	r0, r3
   16f0e:	4158      	adcs	r0, r3
   16f10:	f7ff ff62 	bl	16dd8 <update_cache>
	__asm__ volatile(
   16f14:	f385 8811 	msr	BASEPRI, r5
   16f18:	f3bf 8f6f 	isb	sy
}
   16f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   16f1e:	4283      	cmp	r3, r0
   16f20:	d002      	beq.n	16f28 <z_move_thread_to_end_of_prio_q+0x70>
   16f22:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16f24:	2b00      	cmp	r3, #0
   16f26:	d1e2      	bne.n	16eee <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   16f28:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   16f2c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   16f2e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16f30:	62d4      	str	r4, [r2, #44]	; 0x2c
   16f32:	e7e5      	b.n	16f00 <z_move_thread_to_end_of_prio_q+0x48>
   16f34:	20005c54 	.word	0x20005c54
   16f38:	20005c2c 	.word	0x20005c2c

00016f3c <z_time_slice>:
	if (pending_current == _current) {
   16f3c:	4a15      	ldr	r2, [pc, #84]	; (16f94 <z_time_slice+0x58>)
   16f3e:	4916      	ldr	r1, [pc, #88]	; (16f98 <z_time_slice+0x5c>)
{
   16f40:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   16f42:	680c      	ldr	r4, [r1, #0]
   16f44:	6893      	ldr	r3, [r2, #8]
   16f46:	42a3      	cmp	r3, r4
   16f48:	4614      	mov	r4, r2
   16f4a:	d103      	bne.n	16f54 <z_time_slice+0x18>
}
   16f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   16f50:	f7ff bed6 	b.w	16d00 <z_reset_time_slice>
	pending_current = NULL;
   16f54:	2500      	movs	r5, #0
   16f56:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   16f58:	4910      	ldr	r1, [pc, #64]	; (16f9c <z_time_slice+0x60>)
   16f5a:	6809      	ldr	r1, [r1, #0]
   16f5c:	b1b9      	cbz	r1, 16f8e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   16f5e:	89d9      	ldrh	r1, [r3, #14]
   16f60:	297f      	cmp	r1, #127	; 0x7f
   16f62:	d814      	bhi.n	16f8e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   16f64:	490e      	ldr	r1, [pc, #56]	; (16fa0 <z_time_slice+0x64>)
   16f66:	f993 500e 	ldrsb.w	r5, [r3, #14]
   16f6a:	6809      	ldr	r1, [r1, #0]
   16f6c:	428d      	cmp	r5, r1
   16f6e:	db0e      	blt.n	16f8e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   16f70:	490c      	ldr	r1, [pc, #48]	; (16fa4 <z_time_slice+0x68>)
   16f72:	428b      	cmp	r3, r1
   16f74:	d00b      	beq.n	16f8e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   16f76:	6999      	ldr	r1, [r3, #24]
   16f78:	b949      	cbnz	r1, 16f8e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   16f7a:	6911      	ldr	r1, [r2, #16]
   16f7c:	4281      	cmp	r1, r0
   16f7e:	dc03      	bgt.n	16f88 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   16f80:	4618      	mov	r0, r3
   16f82:	f7ff ff99 	bl	16eb8 <z_move_thread_to_end_of_prio_q>
   16f86:	e7e1      	b.n	16f4c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   16f88:	1a09      	subs	r1, r1, r0
   16f8a:	6111      	str	r1, [r2, #16]
}
   16f8c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   16f8e:	2300      	movs	r3, #0
   16f90:	6123      	str	r3, [r4, #16]
   16f92:	e7fb      	b.n	16f8c <z_time_slice+0x50>
   16f94:	20005c2c 	.word	0x20005c2c
   16f98:	20005c5c 	.word	0x20005c5c
   16f9c:	20005c64 	.word	0x20005c64
   16fa0:	20005c60 	.word	0x20005c60
   16fa4:	20001af0 	.word	0x20001af0

00016fa8 <z_thread_single_suspend>:
{
   16fa8:	b570      	push	{r4, r5, r6, lr}
   16faa:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16fac:	3018      	adds	r0, #24
   16fae:	f006 ffb3 	bl	1df18 <z_abort_timeout>
	__asm__ volatile(
   16fb2:	f04f 0320 	mov.w	r3, #32
   16fb6:	f3ef 8611 	mrs	r6, BASEPRI
   16fba:	f383 8811 	msr	BASEPRI, r3
   16fbe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   16fc2:	7b63      	ldrb	r3, [r4, #13]
   16fc4:	065a      	lsls	r2, r3, #25
   16fc6:	d507      	bpl.n	16fd8 <z_thread_single_suspend+0x30>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   16fc8:	4621      	mov	r1, r4
   16fca:	480f      	ldr	r0, [pc, #60]	; (17008 <z_thread_single_suspend+0x60>)
   16fcc:	f7ff feee 	bl	16dac <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   16fd0:	7b63      	ldrb	r3, [r4, #13]
   16fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   16fd6:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   16fd8:	4d0c      	ldr	r5, [pc, #48]	; (1700c <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16fda:	7b63      	ldrb	r3, [r4, #13]
   16fdc:	68a8      	ldr	r0, [r5, #8]
   16fde:	f043 0310 	orr.w	r3, r3, #16
   16fe2:	7363      	strb	r3, [r4, #13]
   16fe4:	1b03      	subs	r3, r0, r4
   16fe6:	4258      	negs	r0, r3
   16fe8:	4158      	adcs	r0, r3
   16fea:	f7ff fef5 	bl	16dd8 <update_cache>
	__asm__ volatile(
   16fee:	f386 8811 	msr	BASEPRI, r6
   16ff2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   16ff6:	68ab      	ldr	r3, [r5, #8]
   16ff8:	42a3      	cmp	r3, r4
   16ffa:	d103      	bne.n	17004 <z_thread_single_suspend+0x5c>
}
   16ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17000:	f006 be4d 	b.w	1dc9e <z_reschedule_unlocked>
}
   17004:	bd70      	pop	{r4, r5, r6, pc}
   17006:	bf00      	nop
   17008:	20005c54 	.word	0x20005c54
   1700c:	20005c2c 	.word	0x20005c2c

00017010 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   17010:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   17012:	b570      	push	{r4, r5, r6, lr}
   17014:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   17016:	b103      	cbz	r3, 1701a <z_thread_single_abort+0xa>
		thread->fn_abort();
   17018:	4798      	blx	r3
   1701a:	f104 0018 	add.w	r0, r4, #24
   1701e:	f006 ff7b 	bl	1df18 <z_abort_timeout>
	__asm__ volatile(
   17022:	f04f 0320 	mov.w	r3, #32
   17026:	f3ef 8511 	mrs	r5, BASEPRI
   1702a:	f383 8811 	msr	BASEPRI, r3
   1702e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
   17032:	4620      	mov	r0, r4
   17034:	f006 fde1 	bl	1dbfa <z_is_thread_ready>
   17038:	7b63      	ldrb	r3, [r4, #13]
   1703a:	4606      	mov	r6, r0
   1703c:	b1c8      	cbz	r0, 17072 <z_thread_single_abort+0x62>
			if (z_is_thread_queued(thread)) {
   1703e:	0659      	lsls	r1, r3, #25
   17040:	d507      	bpl.n	17052 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   17042:	4621      	mov	r1, r4
   17044:	4811      	ldr	r0, [pc, #68]	; (1708c <z_thread_single_abort+0x7c>)
   17046:	f7ff feb1 	bl	16dac <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1704a:	7b63      	ldrb	r3, [r4, #13]
   1704c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   17050:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   17052:	4b0f      	ldr	r3, [pc, #60]	; (17090 <z_thread_single_abort+0x80>)
   17054:	6898      	ldr	r0, [r3, #8]
   17056:	1b02      	subs	r2, r0, r4
   17058:	4250      	negs	r0, r2
   1705a:	4150      	adcs	r0, r2
   1705c:	f7ff febc 	bl	16dd8 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   17060:	7b63      	ldrb	r3, [r4, #13]
   17062:	f043 0308 	orr.w	r3, r3, #8
   17066:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   17068:	f385 8811 	msr	BASEPRI, r5
   1706c:	f3bf 8f6f 	isb	sy
}
   17070:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   17072:	079b      	lsls	r3, r3, #30
   17074:	d5f4      	bpl.n	17060 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   17076:	4621      	mov	r1, r4
   17078:	68a0      	ldr	r0, [r4, #8]
   1707a:	f7ff fe97 	bl	16dac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1707e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   17080:	60a6      	str	r6, [r4, #8]
   17082:	f023 0302 	bic.w	r3, r3, #2
   17086:	7363      	strb	r3, [r4, #13]
   17088:	e7ea      	b.n	17060 <z_thread_single_abort+0x50>
   1708a:	bf00      	nop
   1708c:	20005c54 	.word	0x20005c54
   17090:	20005c2c 	.word	0x20005c2c

00017094 <z_remove_thread_from_ready_q>:
{
   17094:	b538      	push	{r3, r4, r5, lr}
   17096:	4604      	mov	r4, r0
	__asm__ volatile(
   17098:	f04f 0320 	mov.w	r3, #32
   1709c:	f3ef 8511 	mrs	r5, BASEPRI
   170a0:	f383 8811 	msr	BASEPRI, r3
   170a4:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   170a8:	7b43      	ldrb	r3, [r0, #13]
   170aa:	065a      	lsls	r2, r3, #25
   170ac:	d507      	bpl.n	170be <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   170ae:	4601      	mov	r1, r0
   170b0:	4809      	ldr	r0, [pc, #36]	; (170d8 <z_remove_thread_from_ready_q+0x44>)
   170b2:	f7ff fe7b 	bl	16dac <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   170b6:	7b63      	ldrb	r3, [r4, #13]
   170b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   170bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   170be:	4b07      	ldr	r3, [pc, #28]	; (170dc <z_remove_thread_from_ready_q+0x48>)
   170c0:	6898      	ldr	r0, [r3, #8]
   170c2:	1b03      	subs	r3, r0, r4
   170c4:	4258      	negs	r0, r3
   170c6:	4158      	adcs	r0, r3
   170c8:	f7ff fe86 	bl	16dd8 <update_cache>
	__asm__ volatile(
   170cc:	f385 8811 	msr	BASEPRI, r5
   170d0:	f3bf 8f6f 	isb	sy
}
   170d4:	bd38      	pop	{r3, r4, r5, pc}
   170d6:	bf00      	nop
   170d8:	20005c54 	.word	0x20005c54
   170dc:	20005c2c 	.word	0x20005c2c

000170e0 <pend>:
{
   170e0:	b570      	push	{r4, r5, r6, lr}
   170e2:	4604      	mov	r4, r0
   170e4:	460d      	mov	r5, r1
   170e6:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   170e8:	f7ff ffd4 	bl	17094 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   170ec:	7b63      	ldrb	r3, [r4, #13]
   170ee:	f043 0302 	orr.w	r3, r3, #2
   170f2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   170f4:	b17d      	cbz	r5, 17116 <pend+0x36>
	return list->head == list;
   170f6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   170f8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   170fa:	429d      	cmp	r5, r3
   170fc:	d029      	beq.n	17152 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   170fe:	b343      	cbz	r3, 17152 <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   17100:	f994 200e 	ldrsb.w	r2, [r4, #14]
   17104:	f993 100e 	ldrsb.w	r1, [r3, #14]
   17108:	4291      	cmp	r1, r2
   1710a:	dd1c      	ble.n	17146 <pend+0x66>
	node->prev = successor->prev;
   1710c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1710e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   17112:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17114:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   17116:	1c73      	adds	r3, r6, #1
   17118:	d022      	beq.n	17160 <pend+0x80>
   1711a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1711e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   17122:	f240 30e7 	movw	r0, #999	; 0x3e7
   17126:	2100      	movs	r1, #0
   17128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1712c:	fbc5 0106 	smlal	r0, r1, r5, r6
   17130:	2300      	movs	r3, #0
   17132:	f7e8 ffd5 	bl	e0 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   17136:	490b      	ldr	r1, [pc, #44]	; (17164 <pend+0x84>)
   17138:	1c42      	adds	r2, r0, #1
   1713a:	f104 0018 	add.w	r0, r4, #24
}
   1713e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17142:	f000 baed 	b.w	17720 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   17146:	6869      	ldr	r1, [r5, #4]
   17148:	428b      	cmp	r3, r1
   1714a:	d002      	beq.n	17152 <pend+0x72>
   1714c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1714e:	2b00      	cmp	r3, #0
   17150:	d1d8      	bne.n	17104 <pend+0x24>
	node->prev = list->tail;
   17152:	686b      	ldr	r3, [r5, #4]
   17154:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   17156:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   17158:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1715a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1715c:	606c      	str	r4, [r5, #4]
   1715e:	e7da      	b.n	17116 <pend+0x36>
}
   17160:	bd70      	pop	{r4, r5, r6, pc}
   17162:	bf00      	nop
   17164:	0001dcfb 	.word	0x0001dcfb

00017168 <z_pend_curr_irqlock>:
{
   17168:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
   1716a:	4d0f      	ldr	r5, [pc, #60]	; (171a8 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1716c:	4c0f      	ldr	r4, [pc, #60]	; (171ac <z_pend_curr_irqlock+0x44>)
{
   1716e:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   17170:	68a8      	ldr	r0, [r5, #8]
   17172:	f7ff ffb5 	bl	170e0 <pend>
	pending_current = _current;
   17176:	68ab      	ldr	r3, [r5, #8]
   17178:	6023      	str	r3, [r4, #0]
   1717a:	4630      	mov	r0, r6
   1717c:	f7eb ff4e 	bl	301c <arch_swap>
	__asm__ volatile(
   17180:	f04f 0220 	mov.w	r2, #32
   17184:	f3ef 8311 	mrs	r3, BASEPRI
   17188:	f382 8811 	msr	BASEPRI, r2
   1718c:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   17190:	6822      	ldr	r2, [r4, #0]
   17192:	68a9      	ldr	r1, [r5, #8]
   17194:	4291      	cmp	r1, r2
			pending_current = NULL;
   17196:	bf04      	itt	eq
   17198:	2200      	moveq	r2, #0
   1719a:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1719c:	f383 8811 	msr	BASEPRI, r3
   171a0:	f3bf 8f6f 	isb	sy
}
   171a4:	bd70      	pop	{r4, r5, r6, pc}
   171a6:	bf00      	nop
   171a8:	20005c2c 	.word	0x20005c2c
   171ac:	20005c5c 	.word	0x20005c5c

000171b0 <z_pend_curr>:
{
   171b0:	b510      	push	{r4, lr}
   171b2:	460c      	mov	r4, r1
   171b4:	4611      	mov	r1, r2
	pending_current = _current;
   171b6:	4a06      	ldr	r2, [pc, #24]	; (171d0 <z_pend_curr+0x20>)
   171b8:	6890      	ldr	r0, [r2, #8]
   171ba:	4a06      	ldr	r2, [pc, #24]	; (171d4 <z_pend_curr+0x24>)
   171bc:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   171be:	461a      	mov	r2, r3
   171c0:	f7ff ff8e 	bl	170e0 <pend>
   171c4:	4620      	mov	r0, r4
}
   171c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171ca:	f7eb bf27 	b.w	301c <arch_swap>
   171ce:	bf00      	nop
   171d0:	20005c2c 	.word	0x20005c2c
   171d4:	20005c5c 	.word	0x20005c5c

000171d8 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   171d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   171da:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   171dc:	f006 fedc 	bl	1df98 <z_tick_get_32>
   171e0:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   171e2:	f04f 0320 	mov.w	r3, #32
   171e6:	f3ef 8711 	mrs	r7, BASEPRI
   171ea:	f383 8811 	msr	BASEPRI, r3
   171ee:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   171f2:	4d0d      	ldr	r5, [pc, #52]	; (17228 <z_tick_sleep.part.19+0x50>)
   171f4:	4b0d      	ldr	r3, [pc, #52]	; (1722c <z_tick_sleep.part.19+0x54>)
   171f6:	68a8      	ldr	r0, [r5, #8]
   171f8:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   171fa:	f7ff ff4b 	bl	17094 <z_remove_thread_from_ready_q>
   171fe:	68a8      	ldr	r0, [r5, #8]
   17200:	490b      	ldr	r1, [pc, #44]	; (17230 <z_tick_sleep.part.19+0x58>)
   17202:	4632      	mov	r2, r6
   17204:	3018      	adds	r0, #24
   17206:	f000 fa8b 	bl	17720 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1720a:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1720c:	7b53      	ldrb	r3, [r2, #13]
   1720e:	f043 0310 	orr.w	r3, r3, #16
   17212:	7353      	strb	r3, [r2, #13]
   17214:	4638      	mov	r0, r7
   17216:	f7eb ff01 	bl	301c <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1721a:	f006 febd 	bl	1df98 <z_tick_get_32>
   1721e:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   17220:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   17224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17226:	bf00      	nop
   17228:	20005c2c 	.word	0x20005c2c
   1722c:	20005c5c 	.word	0x20005c5c
   17230:	0001dcfb 	.word	0x0001dcfb

00017234 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   17234:	4b04      	ldr	r3, [pc, #16]	; (17248 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17236:	2100      	movs	r1, #0
   17238:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1723c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   17240:	4608      	mov	r0, r1
   17242:	f7ff bd73 	b.w	16d2c <k_sched_time_slice_set>
   17246:	bf00      	nop
   17248:	20005c2c 	.word	0x20005c2c

0001724c <z_impl_k_yield>:
{
   1724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1724e:	4c23      	ldr	r4, [pc, #140]	; (172dc <z_impl_k_yield+0x90>)
   17250:	4b23      	ldr	r3, [pc, #140]	; (172e0 <z_impl_k_yield+0x94>)
   17252:	68a2      	ldr	r2, [r4, #8]
   17254:	429a      	cmp	r2, r3
   17256:	d029      	beq.n	172ac <z_impl_k_yield+0x60>
   17258:	f04f 0320 	mov.w	r3, #32
   1725c:	f3ef 8611 	mrs	r6, BASEPRI
   17260:	f383 8811 	msr	BASEPRI, r3
   17264:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   17268:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1726c:	68a1      	ldr	r1, [r4, #8]
   1726e:	4628      	mov	r0, r5
   17270:	f7ff fd9c 	bl	16dac <z_priq_dumb_remove>
	return list->head == list;
   17274:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   17276:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17278:	42aa      	cmp	r2, r5
   1727a:	d028      	beq.n	172ce <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1727c:	b33a      	cbz	r2, 172ce <z_impl_k_yield+0x82>
   1727e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   17280:	f993 100e 	ldrsb.w	r1, [r3, #14]
   17284:	f992 700e 	ldrsb.w	r7, [r2, #14]
   17288:	428f      	cmp	r7, r1
   1728a:	dd1b      	ble.n	172c4 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1728c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1728e:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   17292:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   17294:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   17296:	7b5a      	ldrb	r2, [r3, #13]
   17298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1729c:	735a      	strb	r2, [r3, #13]
			update_cache(1);
   1729e:	2001      	movs	r0, #1
   172a0:	f7ff fd9a 	bl	16dd8 <update_cache>
	__asm__ volatile(
   172a4:	f386 8811 	msr	BASEPRI, r6
   172a8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   172ac:	f04f 0320 	mov.w	r3, #32
   172b0:	f3ef 8011 	mrs	r0, BASEPRI
   172b4:	f383 8811 	msr	BASEPRI, r3
   172b8:	f3bf 8f6f 	isb	sy
}
   172bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   172c0:	f7eb beac 	b.w	301c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   172c4:	4282      	cmp	r2, r0
   172c6:	d002      	beq.n	172ce <z_impl_k_yield+0x82>
   172c8:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   172ca:	2a00      	cmp	r2, #0
   172cc:	d1da      	bne.n	17284 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   172ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   172d0:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   172d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   172d4:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
   172d6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   172d8:	62e3      	str	r3, [r4, #44]	; 0x2c
   172da:	e7dc      	b.n	17296 <z_impl_k_yield+0x4a>
   172dc:	20005c2c 	.word	0x20005c2c
   172e0:	20001af0 	.word	0x20001af0

000172e4 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   172e4:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
   172e6:	1c43      	adds	r3, r0, #1
{
   172e8:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   172ea:	d105      	bne.n	172f8 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   172ec:	4b10      	ldr	r3, [pc, #64]	; (17330 <z_impl_k_sleep+0x4c>)
   172ee:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   172f0:	f000 f8fa 	bl	174e8 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   172f4:	4620      	mov	r0, r4
   172f6:	bd38      	pop	{r3, r4, r5, pc}
   172f8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   172fc:	f240 30e7 	movw	r0, #999	; 0x3e7
   17300:	2100      	movs	r1, #0
   17302:	fbe5 0104 	umlal	r0, r1, r5, r4
   17306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1730a:	2300      	movs	r3, #0
   1730c:	f7e8 fee8 	bl	e0 <__aeabi_uldivmod>
	if (ticks == 0) {
   17310:	4604      	mov	r4, r0
   17312:	b948      	cbnz	r0, 17328 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   17314:	f7ff ff9a 	bl	1724c <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   17318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1731c:	fb84 0100 	smull	r0, r1, r4, r0
   17320:	0bc4      	lsrs	r4, r0, #15
   17322:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   17326:	e7e5      	b.n	172f4 <z_impl_k_sleep+0x10>
   17328:	f7ff ff56 	bl	171d8 <z_tick_sleep.part.19>
   1732c:	4604      	mov	r4, r0
   1732e:	e7f3      	b.n	17318 <z_impl_k_sleep+0x34>
   17330:	20005c2c 	.word	0x20005c2c

00017334 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   17334:	4b01      	ldr	r3, [pc, #4]	; (1733c <z_impl_k_current_get+0x8>)
   17336:	6898      	ldr	r0, [r3, #8]
   17338:	4770      	bx	lr
   1733a:	bf00      	nop
   1733c:	20005c2c 	.word	0x20005c2c

00017340 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17340:	b570      	push	{r4, r5, r6, lr}
   17342:	4604      	mov	r4, r0
   17344:	f04f 0320 	mov.w	r3, #32
   17348:	f3ef 8611 	mrs	r6, BASEPRI
   1734c:	f383 8811 	msr	BASEPRI, r3
   17350:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   17354:	f006 fd02 	bl	1dd5c <z_unpend_first_thread>
	if (thread != NULL) {
   17358:	4605      	mov	r5, r0
   1735a:	b170      	cbz	r0, 1737a <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1735c:	7b43      	ldrb	r3, [r0, #13]
   1735e:	06db      	lsls	r3, r3, #27
   17360:	d103      	bne.n	1736a <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   17362:	6983      	ldr	r3, [r0, #24]
   17364:	b90b      	cbnz	r3, 1736a <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   17366:	f7ff fd71 	bl	16e4c <z_add_thread_to_ready_q>
   1736a:	2300      	movs	r3, #0
   1736c:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1736e:	4631      	mov	r1, r6
   17370:	4808      	ldr	r0, [pc, #32]	; (17394 <z_impl_k_sem_give+0x54>)
}
   17372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   17376:	f006 bc7b 	b.w	1dc70 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1737a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1737e:	429a      	cmp	r2, r3
   17380:	bf18      	it	ne
   17382:	3301      	addne	r3, #1
   17384:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17386:	2102      	movs	r1, #2
   17388:	f104 0010 	add.w	r0, r4, #16
   1738c:	f006 ff3b 	bl	1e206 <z_handle_obj_poll_events>
   17390:	e7ed      	b.n	1736e <z_impl_k_sem_give+0x2e>
   17392:	bf00      	nop
   17394:	2000a2ba 	.word	0x2000a2ba

00017398 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   17398:	b410      	push	{r4}
   1739a:	4602      	mov	r2, r0
   1739c:	460b      	mov	r3, r1
   1739e:	f04f 0020 	mov.w	r0, #32
   173a2:	f3ef 8111 	mrs	r1, BASEPRI
   173a6:	f380 8811 	msr	BASEPRI, r0
   173aa:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   173ae:	6894      	ldr	r4, [r2, #8]
   173b0:	b144      	cbz	r4, 173c4 <z_impl_k_sem_take+0x2c>
		sem->count--;
   173b2:	3c01      	subs	r4, #1
   173b4:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   173b6:	f381 8811 	msr	BASEPRI, r1
   173ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   173be:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   173c0:	bc10      	pop	{r4}
   173c2:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   173c4:	b933      	cbnz	r3, 173d4 <z_impl_k_sem_take+0x3c>
   173c6:	f381 8811 	msr	BASEPRI, r1
   173ca:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   173ce:	f06f 000f 	mvn.w	r0, #15
   173d2:	e7f5      	b.n	173c0 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   173d4:	4801      	ldr	r0, [pc, #4]	; (173dc <z_impl_k_sem_take+0x44>)
}
   173d6:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   173d8:	f7ff beea 	b.w	171b0 <z_pend_curr>
   173dc:	2000a2ba 	.word	0x2000a2ba

000173e0 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   173e0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   173e2:	4c08      	ldr	r4, [pc, #32]	; (17404 <k_sys_work_q_init+0x24>)
   173e4:	4908      	ldr	r1, [pc, #32]	; (17408 <k_sys_work_q_init+0x28>)
   173e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   173ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   173ee:	4620      	mov	r0, r4
   173f0:	f000 f8f4 	bl	175dc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   173f4:	4905      	ldr	r1, [pc, #20]	; (1740c <k_sys_work_q_init+0x2c>)
   173f6:	f104 0010 	add.w	r0, r4, #16
   173fa:	f006 fcfd 	bl	1ddf8 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   173fe:	2000      	movs	r0, #0
   17400:	bd10      	pop	{r4, pc}
   17402:	bf00      	nop
   17404:	20005c68 	.word	0x20005c68
   17408:	2000bc88 	.word	0x2000bc88
   1740c:	0002977e 	.word	0x0002977e

00017410 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   17410:	b510      	push	{r4, lr}
	__asm__ volatile(
   17412:	f04f 0220 	mov.w	r2, #32
   17416:	f3ef 8411 	mrs	r4, BASEPRI
   1741a:	f382 8811 	msr	BASEPRI, r2
   1741e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   17422:	7b42      	ldrb	r2, [r0, #13]
   17424:	0751      	lsls	r1, r2, #29
   17426:	d404      	bmi.n	17432 <z_impl_k_thread_start+0x22>
	__asm__ volatile(
   17428:	f384 8811 	msr	BASEPRI, r4
   1742c:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   17430:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17432:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   17436:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1743a:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1743c:	d103      	bne.n	17446 <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
   1743e:	6983      	ldr	r3, [r0, #24]
   17440:	b90b      	cbnz	r3, 17446 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   17442:	f7ff fd03 	bl	16e4c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   17446:	4621      	mov	r1, r4
   17448:	4802      	ldr	r0, [pc, #8]	; (17454 <z_impl_k_thread_start+0x44>)
}
   1744a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1744e:	f006 bc0f 	b.w	1dc70 <z_reschedule>
   17452:	bf00      	nop
   17454:	2000a2ba 	.word	0x2000a2ba

00017458 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   17458:	b530      	push	{r4, r5, lr}
   1745a:	b087      	sub	sp, #28
   1745c:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1745e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   17460:	9504      	str	r5, [sp, #16]
   17462:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   17464:	9503      	str	r5, [sp, #12]
   17466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   17468:	9502      	str	r5, [sp, #8]
   1746a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1746c:	9501      	str	r5, [sp, #4]
   1746e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   17470:	9500      	str	r5, [sp, #0]
   17472:	f7eb fe7f 	bl	3174 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   17476:	4b03      	ldr	r3, [pc, #12]	; (17484 <z_setup_new_thread+0x2c>)
   17478:	689b      	ldr	r3, [r3, #8]
   1747a:	b103      	cbz	r3, 1747e <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1747c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1747e:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   17480:	b007      	add	sp, #28
   17482:	bd30      	pop	{r4, r5, pc}
   17484:	20005c2c 	.word	0x20005c2c

00017488 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   17488:	b570      	push	{r4, r5, r6, lr}
   1748a:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1748c:	2600      	movs	r6, #0
   1748e:	9605      	str	r6, [sp, #20]
   17490:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   17492:	9604      	str	r6, [sp, #16]
   17494:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   17496:	9603      	str	r6, [sp, #12]
   17498:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1749a:	9602      	str	r6, [sp, #8]
   1749c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1749e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   174a0:	9601      	str	r6, [sp, #4]
   174a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   174a4:	9600      	str	r6, [sp, #0]
{
   174a6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   174a8:	f7ff ffd6 	bl	17458 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   174ac:	1c6b      	adds	r3, r5, #1
   174ae:	d003      	beq.n	174b8 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   174b0:	b92d      	cbnz	r5, 174be <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   174b2:	4620      	mov	r0, r4
   174b4:	f7ff ffac 	bl	17410 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   174b8:	4620      	mov	r0, r4
   174ba:	b006      	add	sp, #24
   174bc:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   174be:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   174c2:	f240 30e7 	movw	r0, #999	; 0x3e7
   174c6:	2100      	movs	r1, #0
   174c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   174cc:	2300      	movs	r3, #0
   174ce:	fbe6 0105 	umlal	r0, r1, r6, r5
   174d2:	f7e8 fe05 	bl	e0 <__aeabi_uldivmod>
   174d6:	4903      	ldr	r1, [pc, #12]	; (174e4 <z_impl_k_thread_create+0x5c>)
   174d8:	1c42      	adds	r2, r0, #1
   174da:	f104 0018 	add.w	r0, r4, #24
   174de:	f000 f91f 	bl	17720 <z_add_timeout>
   174e2:	e7e9      	b.n	174b8 <z_impl_k_thread_create+0x30>
   174e4:	0001dcfb 	.word	0x0001dcfb

000174e8 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   174e8:	b538      	push	{r3, r4, r5, lr}
   174ea:	4605      	mov	r5, r0
	__asm__ volatile(
   174ec:	f04f 0320 	mov.w	r3, #32
   174f0:	f3ef 8411 	mrs	r4, BASEPRI
   174f4:	f383 8811 	msr	BASEPRI, r3
   174f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   174fc:	f7ff fd54 	bl	16fa8 <z_thread_single_suspend>

	if (thread == _current) {
   17500:	4b07      	ldr	r3, [pc, #28]	; (17520 <z_impl_k_thread_suspend+0x38>)
   17502:	689b      	ldr	r3, [r3, #8]
   17504:	42ab      	cmp	r3, r5
   17506:	d105      	bne.n	17514 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   17508:	4621      	mov	r1, r4
   1750a:	4806      	ldr	r0, [pc, #24]	; (17524 <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1750c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   17510:	f006 bbae 	b.w	1dc70 <z_reschedule>
	__asm__ volatile(
   17514:	f384 8811 	msr	BASEPRI, r4
   17518:	f3bf 8f6f 	isb	sy
}
   1751c:	bd38      	pop	{r3, r4, r5, pc}
   1751e:	bf00      	nop
   17520:	20005c2c 	.word	0x20005c2c
   17524:	2000a2ba 	.word	0x2000a2ba

00017528 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   17528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1752c:	4e28      	ldr	r6, [pc, #160]	; (175d0 <z_init_static_threads+0xa8>)
   1752e:	4d29      	ldr	r5, [pc, #164]	; (175d4 <z_init_static_threads+0xac>)
{
   17530:	b087      	sub	sp, #28
   17532:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   17534:	42b5      	cmp	r5, r6
   17536:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1753a:	d310      	bcc.n	1755e <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1753c:	f7ff fc22 	bl	16d84 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   17540:	4c24      	ldr	r4, [pc, #144]	; (175d4 <z_init_static_threads+0xac>)
   17542:	f8df a094 	ldr.w	sl, [pc, #148]	; 175d8 <z_init_static_threads+0xb0>
   17546:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1754a:	f240 36e7 	movw	r6, #999	; 0x3e7
   1754e:	2700      	movs	r7, #0
   17550:	4544      	cmp	r4, r8
   17552:	d321      	bcc.n	17598 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   17554:	b007      	add	sp, #28
   17556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1755a:	f7ff bc5b 	b.w	16e14 <k_sched_unlock>
		z_setup_new_thread(
   1755e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   17562:	9305      	str	r3, [sp, #20]
   17564:	f854 3c10 	ldr.w	r3, [r4, #-16]
   17568:	9304      	str	r3, [sp, #16]
   1756a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1756e:	9303      	str	r3, [sp, #12]
   17570:	f854 3c18 	ldr.w	r3, [r4, #-24]
   17574:	9302      	str	r3, [sp, #8]
   17576:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1757a:	9301      	str	r3, [sp, #4]
   1757c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   17580:	9300      	str	r3, [sp, #0]
   17582:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   17586:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1758a:	f7ff ff65 	bl	17458 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1758e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   17592:	64dd      	str	r5, [r3, #76]	; 0x4c
   17594:	4625      	mov	r5, r4
   17596:	e7cd      	b.n	17534 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   17598:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1759a:	1c4b      	adds	r3, r1, #1
   1759c:	d004      	beq.n	175a8 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1759e:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   175a0:	b921      	cbnz	r1, 175ac <z_init_static_threads+0x84>
   175a2:	4628      	mov	r0, r5
   175a4:	f7ff ff34 	bl	17410 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   175a8:	3430      	adds	r4, #48	; 0x30
   175aa:	e7d1      	b.n	17550 <z_init_static_threads+0x28>
   175ac:	46b3      	mov	fp, r6
   175ae:	46bc      	mov	ip, r7
   175b0:	fbe9 bc01 	umlal	fp, ip, r9, r1
   175b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   175b8:	2300      	movs	r3, #0
   175ba:	4658      	mov	r0, fp
   175bc:	4661      	mov	r1, ip
   175be:	f7e8 fd8f 	bl	e0 <__aeabi_uldivmod>
   175c2:	4651      	mov	r1, sl
   175c4:	1c42      	adds	r2, r0, #1
   175c6:	f105 0018 	add.w	r0, r5, #24
   175ca:	f000 f8a9 	bl	17720 <z_add_timeout>
   175ce:	e7eb      	b.n	175a8 <z_init_static_threads+0x80>
   175d0:	2000d1c0 	.word	0x2000d1c0
   175d4:	2000d1c0 	.word	0x2000d1c0
   175d8:	0001dcfb 	.word	0x0001dcfb

000175dc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   175dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175e0:	4605      	mov	r5, r0
   175e2:	b086      	sub	sp, #24
   175e4:	460e      	mov	r6, r1
   175e6:	4617      	mov	r7, r2
   175e8:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   175ea:	f006 fa70 	bl	1dace <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   175ee:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   175f2:	2000      	movs	r0, #0
   175f4:	e9cd 0004 	strd	r0, r0, [sp, #16]
   175f8:	e9cd 0802 	strd	r0, r8, [sp, #8]
   175fc:	e9cd 5000 	strd	r5, r0, [sp]
   17600:	4b06      	ldr	r3, [pc, #24]	; (1761c <k_work_q_start+0x40>)
   17602:	463a      	mov	r2, r7
   17604:	4631      	mov	r1, r6
   17606:	4620      	mov	r0, r4
   17608:	f7ff ff3e 	bl	17488 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1760c:	4904      	ldr	r1, [pc, #16]	; (17620 <k_work_q_start+0x44>)
   1760e:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   17610:	b006      	add	sp, #24
   17612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17616:	f006 bbef 	b.w	1ddf8 <z_impl_k_thread_name_set>
   1761a:	bf00      	nop
   1761c:	00018163 	.word	0x00018163
   17620:	00029787 	.word	0x00029787

00017624 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   17624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17628:	4606      	mov	r6, r0
   1762a:	460d      	mov	r5, r1
   1762c:	4617      	mov	r7, r2
	__asm__ volatile(
   1762e:	f04f 0320 	mov.w	r3, #32
   17632:	f3ef 8811 	mrs	r8, BASEPRI
   17636:	f383 8811 	msr	BASEPRI, r3
   1763a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1763e:	69cc      	ldr	r4, [r1, #28]
   17640:	b15c      	cbz	r4, 1765a <k_delayed_work_submit_to_queue+0x36>
   17642:	4284      	cmp	r4, r0
   17644:	d12c      	bne.n	176a0 <k_delayed_work_submit_to_queue+0x7c>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   17646:	4628      	mov	r0, r5
   17648:	f006 fc07 	bl	1de5a <work_cancel>
		if (err < 0) {
   1764c:	1e04      	subs	r4, r0, #0
   1764e:	da06      	bge.n	1765e <k_delayed_work_submit_to_queue+0x3a>
	__asm__ volatile(
   17650:	f388 8811 	msr	BASEPRI, r8
   17654:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   17658:	e00c      	b.n	17674 <k_delayed_work_submit_to_queue+0x50>
	if (work->work_q == work_q) {
   1765a:	2800      	cmp	r0, #0
   1765c:	d0f3      	beq.n	17646 <k_delayed_work_submit_to_queue+0x22>
	work->work_q = work_q;
   1765e:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   17660:	b95f      	cbnz	r7, 1767a <k_delayed_work_submit_to_queue+0x56>
   17662:	f388 8811 	msr	BASEPRI, r8
   17666:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1766a:	4629      	mov	r1, r5
   1766c:	4630      	mov	r0, r6
   1766e:	f006 fbd7 	bl	1de20 <k_work_submit_to_queue>
		return 0;
   17672:	463c      	mov	r4, r7
}
   17674:	4620      	mov	r0, r4
   17676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1767a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1767e:	f240 30e7 	movw	r0, #999	; 0x3e7
   17682:	2100      	movs	r1, #0
   17684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17688:	2300      	movs	r3, #0
   1768a:	fbe6 0107 	umlal	r0, r1, r6, r7
   1768e:	f7e8 fd27 	bl	e0 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   17692:	4905      	ldr	r1, [pc, #20]	; (176a8 <k_delayed_work_submit_to_queue+0x84>)
   17694:	1c42      	adds	r2, r0, #1
   17696:	f105 000c 	add.w	r0, r5, #12
   1769a:	f000 f841 	bl	17720 <z_add_timeout>
   1769e:	e7d7      	b.n	17650 <k_delayed_work_submit_to_queue+0x2c>
		err = -EADDRINUSE;
   176a0:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   176a4:	e7d4      	b.n	17650 <k_delayed_work_submit_to_queue+0x2c>
   176a6:	bf00      	nop
   176a8:	0001de51 	.word	0x0001de51

000176ac <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   176ac:	4b03      	ldr	r3, [pc, #12]	; (176bc <elapsed+0x10>)
   176ae:	681b      	ldr	r3, [r3, #0]
   176b0:	b90b      	cbnz	r3, 176b6 <elapsed+0xa>
   176b2:	f7eb bc71 	b.w	2f98 <z_clock_elapsed>
}
   176b6:	2000      	movs	r0, #0
   176b8:	4770      	bx	lr
   176ba:	bf00      	nop
   176bc:	20005ce4 	.word	0x20005ce4

000176c0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   176c0:	6803      	ldr	r3, [r0, #0]
   176c2:	b140      	cbz	r0, 176d6 <remove_timeout+0x16>
   176c4:	4a07      	ldr	r2, [pc, #28]	; (176e4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   176c6:	6852      	ldr	r2, [r2, #4]
   176c8:	4290      	cmp	r0, r2
   176ca:	d004      	beq.n	176d6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   176cc:	b11b      	cbz	r3, 176d6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   176ce:	689a      	ldr	r2, [r3, #8]
   176d0:	6881      	ldr	r1, [r0, #8]
   176d2:	440a      	add	r2, r1
   176d4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   176d6:	6842      	ldr	r2, [r0, #4]
   176d8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   176da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   176dc:	2300      	movs	r3, #0
	node->prev = NULL;
   176de:	e9c0 3300 	strd	r3, r3, [r0]
}
   176e2:	4770      	bx	lr
   176e4:	2000d02c 	.word	0x2000d02c

000176e8 <next_timeout>:
	return list->head == list;
   176e8:	4b0b      	ldr	r3, [pc, #44]	; (17718 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   176ea:	b510      	push	{r4, lr}
   176ec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   176ee:	429c      	cmp	r4, r3
   176f0:	bf08      	it	eq
   176f2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   176f4:	f7ff ffda 	bl	176ac <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   176f8:	b154      	cbz	r4, 17710 <next_timeout+0x28>
   176fa:	68a3      	ldr	r3, [r4, #8]
   176fc:	1a18      	subs	r0, r3, r0
   176fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   17702:	4b06      	ldr	r3, [pc, #24]	; (1771c <next_timeout+0x34>)
   17704:	691b      	ldr	r3, [r3, #16]
   17706:	b113      	cbz	r3, 1770e <next_timeout+0x26>
   17708:	4298      	cmp	r0, r3
   1770a:	bfa8      	it	ge
   1770c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1770e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   17710:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   17714:	e7f5      	b.n	17702 <next_timeout+0x1a>
   17716:	bf00      	nop
   17718:	2000d02c 	.word	0x2000d02c
   1771c:	20005c2c 	.word	0x20005c2c

00017720 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   17720:	b570      	push	{r4, r5, r6, lr}
   17722:	4604      	mov	r4, r0
   17724:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   17726:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   17728:	f04f 0320 	mov.w	r3, #32
   1772c:	f3ef 8511 	mrs	r5, BASEPRI
   17730:	f383 8811 	msr	BASEPRI, r3
   17734:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   17738:	f7ff ffb8 	bl	176ac <elapsed>
	return list->head == list;
   1773c:	4b18      	ldr	r3, [pc, #96]	; (177a0 <z_add_timeout+0x80>)
   1773e:	681a      	ldr	r2, [r3, #0]
   17740:	2e01      	cmp	r6, #1
   17742:	bfac      	ite	ge
   17744:	1980      	addge	r0, r0, r6
   17746:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17748:	429a      	cmp	r2, r3
   1774a:	60a0      	str	r0, [r4, #8]
   1774c:	d001      	beq.n	17752 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1774e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   17750:	b932      	cbnz	r2, 17760 <z_add_timeout+0x40>
	node->prev = list->tail;
   17752:	685a      	ldr	r2, [r3, #4]
   17754:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   17756:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   17758:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   1775a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1775c:	605c      	str	r4, [r3, #4]
   1775e:	e00a      	b.n	17776 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   17760:	6890      	ldr	r0, [r2, #8]
   17762:	68a1      	ldr	r1, [r4, #8]
   17764:	4288      	cmp	r0, r1
   17766:	dd15      	ble.n	17794 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   17768:	1a41      	subs	r1, r0, r1
   1776a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1776c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1776e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   17772:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   17774:	6054      	str	r4, [r2, #4]
	return list->head == list;
   17776:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17778:	429a      	cmp	r2, r3
   1777a:	d006      	beq.n	1778a <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1777c:	4294      	cmp	r4, r2
   1777e:	d104      	bne.n	1778a <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   17780:	f7ff ffb2 	bl	176e8 <next_timeout>
   17784:	2100      	movs	r1, #0
   17786:	f7eb fbb1 	bl	2eec <z_clock_set_timeout>
	__asm__ volatile(
   1778a:	f385 8811 	msr	BASEPRI, r5
   1778e:	f3bf 8f6f 	isb	sy
		}
	}
}
   17792:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   17794:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   17796:	42b2      	cmp	r2, r6
   17798:	60a1      	str	r1, [r4, #8]
   1779a:	d0da      	beq.n	17752 <z_add_timeout+0x32>
   1779c:	6812      	ldr	r2, [r2, #0]
   1779e:	e7d7      	b.n	17750 <z_add_timeout+0x30>
   177a0:	2000d02c 	.word	0x2000d02c

000177a4 <z_timeout_remaining>:

	return ret;
}

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   177a4:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   177a6:	6804      	ldr	r4, [r0, #0]
   177a8:	b314      	cbz	r4, 177f0 <z_timeout_remaining+0x4c>
	__asm__ volatile(
   177aa:	f04f 0320 	mov.w	r3, #32
   177ae:	f3ef 8111 	mrs	r1, BASEPRI
   177b2:	f383 8811 	msr	BASEPRI, r3
   177b6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   177ba:	4a0e      	ldr	r2, [pc, #56]	; (177f4 <z_timeout_remaining+0x50>)
   177bc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   177be:	4293      	cmp	r3, r2
   177c0:	d014      	beq.n	177ec <z_timeout_remaining+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   177c2:	6852      	ldr	r2, [r2, #4]
   177c4:	2400      	movs	r4, #0
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   177c6:	b93b      	cbnz	r3, 177d8 <z_timeout_remaining+0x34>
	__asm__ volatile(
   177c8:	f381 8811 	msr	BASEPRI, r1
   177cc:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   177d0:	f7ff ff6c 	bl	176ac <elapsed>
   177d4:	1a20      	subs	r0, r4, r0
}
   177d6:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
   177d8:	689d      	ldr	r5, [r3, #8]
			if (timeout == t) {
   177da:	4283      	cmp	r3, r0
			ticks += t->dticks;
   177dc:	442c      	add	r4, r5
			if (timeout == t) {
   177de:	d0f3      	beq.n	177c8 <z_timeout_remaining+0x24>
   177e0:	2b00      	cmp	r3, #0
   177e2:	d0f1      	beq.n	177c8 <z_timeout_remaining+0x24>
	return (node == list->tail) ? NULL : node->next;
   177e4:	4293      	cmp	r3, r2
   177e6:	d0ef      	beq.n	177c8 <z_timeout_remaining+0x24>
   177e8:	681b      	ldr	r3, [r3, #0]
   177ea:	e7ec      	b.n	177c6 <z_timeout_remaining+0x22>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   177ec:	2400      	movs	r4, #0
   177ee:	e7eb      	b.n	177c8 <z_timeout_remaining+0x24>
		return 0;
   177f0:	4620      	mov	r0, r4
   177f2:	e7f0      	b.n	177d6 <z_timeout_remaining+0x32>
   177f4:	2000d02c 	.word	0x2000d02c

000177f8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   177f8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   177fc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   177fe:	f7ff fb9d 	bl	16f3c <z_time_slice>
	__asm__ volatile(
   17802:	f04f 0320 	mov.w	r3, #32
   17806:	f3ef 8511 	mrs	r5, BASEPRI
   1780a:	f383 8811 	msr	BASEPRI, r3
   1780e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   17812:	4e21      	ldr	r6, [pc, #132]	; (17898 <z_clock_announce+0xa0>)
   17814:	4f21      	ldr	r7, [pc, #132]	; (1789c <z_clock_announce+0xa4>)
	return list->head == list;
   17816:	f8df 9088 	ldr.w	r9, [pc, #136]	; 178a0 <z_clock_announce+0xa8>
   1781a:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1781c:	46b8      	mov	r8, r7
   1781e:	f8d9 4000 	ldr.w	r4, [r9]
   17822:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17824:	454c      	cmp	r4, r9
   17826:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1782a:	d005      	beq.n	17838 <z_clock_announce+0x40>
   1782c:	b124      	cbz	r4, 17838 <z_clock_announce+0x40>
   1782e:	68a3      	ldr	r3, [r4, #8]
   17830:	4293      	cmp	r3, r2
   17832:	dd14      	ble.n	1785e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   17834:	1a9b      	subs	r3, r3, r2
   17836:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   17838:	eb1b 0002 	adds.w	r0, fp, r2
   1783c:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
   17840:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   17842:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   17846:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   17848:	f7ff ff4e 	bl	176e8 <next_timeout>
   1784c:	4621      	mov	r1, r4
   1784e:	f7eb fb4d 	bl	2eec <z_clock_set_timeout>
	__asm__ volatile(
   17852:	f385 8811 	msr	BASEPRI, r5
   17856:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1785a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1785e:	eb1b 0003 	adds.w	r0, fp, r3
   17862:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   17866:	1ad3      	subs	r3, r2, r3
   17868:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1786a:	2300      	movs	r3, #0
		curr_tick += dt;
   1786c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   17870:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   17872:	4620      	mov	r0, r4
   17874:	f7ff ff24 	bl	176c0 <remove_timeout>
   17878:	f385 8811 	msr	BASEPRI, r5
   1787c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   17880:	68e3      	ldr	r3, [r4, #12]
   17882:	4798      	blx	r3
	__asm__ volatile(
   17884:	f04f 0320 	mov.w	r3, #32
   17888:	f3ef 8511 	mrs	r5, BASEPRI
   1788c:	f383 8811 	msr	BASEPRI, r3
   17890:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   17894:	e7c3      	b.n	1781e <z_clock_announce+0x26>
   17896:	bf00      	nop
   17898:	20005ce4 	.word	0x20005ce4
   1789c:	20000010 	.word	0x20000010
   178a0:	2000d02c 	.word	0x2000d02c

000178a4 <z_tick_get>:

s64_t z_tick_get(void)
{
   178a4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   178a8:	f04f 0320 	mov.w	r3, #32
   178ac:	f3ef 8411 	mrs	r4, BASEPRI
   178b0:	f383 8811 	msr	BASEPRI, r3
   178b4:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   178b8:	f7eb fb6e 	bl	2f98 <z_clock_elapsed>
   178bc:	4b07      	ldr	r3, [pc, #28]	; (178dc <z_tick_get+0x38>)
   178be:	e9d3 2300 	ldrd	r2, r3, [r3]
   178c2:	eb12 0b00 	adds.w	fp, r2, r0
   178c6:	f143 0c00 	adc.w	ip, r3, #0
   178ca:	4658      	mov	r0, fp
   178cc:	4661      	mov	r1, ip
	__asm__ volatile(
   178ce:	f384 8811 	msr	BASEPRI, r4
   178d2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   178d6:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   178da:	bf00      	nop
   178dc:	20000010 	.word	0x20000010

000178e0 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   178e0:	6a02      	ldr	r2, [r0, #32]
   178e2:	2a00      	cmp	r2, #0
{
   178e4:	b538      	push	{r3, r4, r5, lr}
   178e6:	4604      	mov	r4, r0
	if (timer->period > 0) {
   178e8:	dd02      	ble.n	178f0 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   178ea:	490e      	ldr	r1, [pc, #56]	; (17924 <z_timer_expiration_handler+0x44>)
   178ec:	f7ff ff18 	bl	17720 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   178f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   178f2:	3301      	adds	r3, #1
   178f4:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   178f6:	69a3      	ldr	r3, [r4, #24]
   178f8:	b10b      	cbz	r3, 178fe <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   178fa:	4620      	mov	r0, r4
   178fc:	4798      	blx	r3
	return list->head == list;
   178fe:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17902:	42a5      	cmp	r5, r4
   17904:	d00d      	beq.n	17922 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   17906:	b165      	cbz	r5, 17922 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   17908:	4628      	mov	r0, r5
   1790a:	f006 f998 	bl	1dc3e <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1790e:	7b6b      	ldrb	r3, [r5, #13]
   17910:	06db      	lsls	r3, r3, #27
   17912:	d104      	bne.n	1791e <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   17914:	69ab      	ldr	r3, [r5, #24]
   17916:	b913      	cbnz	r3, 1791e <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   17918:	4628      	mov	r0, r5
   1791a:	f7ff fa97 	bl	16e4c <z_add_thread_to_ready_q>
   1791e:	2300      	movs	r3, #0
   17920:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   17922:	bd38      	pop	{r3, r4, r5, pc}
   17924:	000178e1 	.word	0x000178e1

00017928 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   17928:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1792c:	f240 36e7 	movw	r6, #999	; 0x3e7
   17930:	2700      	movs	r7, #0
   17932:	4604      	mov	r4, r0
   17934:	4688      	mov	r8, r1
   17936:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1793a:	4630      	mov	r0, r6
   1793c:	4639      	mov	r1, r7
   1793e:	fbe5 0102 	umlal	r0, r1, r5, r2
   17942:	2300      	movs	r3, #0
   17944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17948:	f7e8 fbca 	bl	e0 <__aeabi_uldivmod>
   1794c:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1794e:	9000      	str	r0, [sp, #0]
   17950:	4630      	mov	r0, r6
   17952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17956:	2300      	movs	r3, #0
   17958:	fbe5 0108 	umlal	r0, r1, r5, r8
   1795c:	f7e8 fbc0 	bl	e0 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   17960:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   17962:	4620      	mov	r0, r4
   17964:	f006 fad8 	bl	1df18 <z_abort_timeout>
	timer->period = period_in_ticks;
   17968:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1796a:	4905      	ldr	r1, [pc, #20]	; (17980 <z_impl_k_timer_start+0x58>)
   1796c:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
   1796e:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   17970:	4620      	mov	r0, r4
	timer->status = 0U;
   17972:	2300      	movs	r3, #0
   17974:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   17976:	b002      	add	sp, #8
   17978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1797c:	f7ff bed0 	b.w	17720 <z_add_timeout>
   17980:	000178e1 	.word	0x000178e1

00017984 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   17984:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   17986:	7b44      	ldrb	r4, [r0, #13]
   17988:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1798c:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1798e:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   17990:	f362 0141 	bfi	r1, r2, #1, #1
   17994:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
   17996:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
   17998:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1799a:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1799c:	4a02      	ldr	r2, [pc, #8]	; (179a8 <k_poll_event_init+0x24>)
   1799e:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   179a0:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   179a4:	bd10      	pop	{r4, pc}
   179a6:	bf00      	nop
   179a8:	00020fff 	.word	0x00020fff

000179ac <z_impl_k_poll>:

	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   179ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179b0:	b086      	sub	sp, #24
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   179b2:	2301      	movs	r3, #1
   179b4:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   179b8:	4b23      	ldr	r3, [pc, #140]	; (17a48 <z_impl_k_poll+0x9c>)
	struct _poller poller = { .is_polling = true,
   179ba:	689b      	ldr	r3, [r3, #8]
   179bc:	9304      	str	r3, [sp, #16]
   179be:	4b23      	ldr	r3, [pc, #140]	; (17a4c <z_impl_k_poll+0xa0>)
   179c0:	9305      	str	r3, [sp, #20]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   179c2:	fab2 f382 	clz	r3, r2
   179c6:	4690      	mov	r8, r2
   179c8:	095b      	lsrs	r3, r3, #5
   179ca:	aa03      	add	r2, sp, #12
{
   179cc:	4606      	mov	r6, r0
	events_registered = register_events(events, num_events, &poller,
   179ce:	f006 fbc0 	bl	1e152 <register_events>
   179d2:	4607      	mov	r7, r0
	__asm__ volatile(
   179d4:	f04f 0320 	mov.w	r3, #32
   179d8:	f3ef 8511 	mrs	r5, BASEPRI
   179dc:	f383 8811 	msr	BASEPRI, r3
   179e0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   179e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   179e8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   179ec:	b94b      	cbnz	r3, 17a02 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   179ee:	462a      	mov	r2, r5
   179f0:	4639      	mov	r1, r7
   179f2:	4630      	mov	r0, r6
   179f4:	f006 fb15 	bl	1e022 <clear_event_registrations>
	__asm__ volatile(
   179f8:	f385 8811 	msr	BASEPRI, r5
   179fc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   17a00:	e00b      	b.n	17a1a <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   17a02:	2300      	movs	r3, #0
   17a04:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   17a08:	f1b8 0f00 	cmp.w	r8, #0
   17a0c:	d109      	bne.n	17a22 <z_impl_k_poll+0x76>
   17a0e:	f385 8811 	msr	BASEPRI, r5
   17a12:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   17a16:	f06f 040a 	mvn.w	r4, #10
}
   17a1a:	4620      	mov	r0, r4
   17a1c:	b006      	add	sp, #24
   17a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   17a22:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   17a24:	4643      	mov	r3, r8
   17a26:	4629      	mov	r1, r5
   17a28:	4809      	ldr	r0, [pc, #36]	; (17a50 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   17a2a:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   17a2e:	f7ff fbbf 	bl	171b0 <z_pend_curr>
   17a32:	4604      	mov	r4, r0
	__asm__ volatile(
   17a34:	f04f 0320 	mov.w	r3, #32
   17a38:	f3ef 8511 	mrs	r5, BASEPRI
   17a3c:	f383 8811 	msr	BASEPRI, r3
   17a40:	f3bf 8f6f 	isb	sy
   17a44:	e7d3      	b.n	179ee <z_impl_k_poll+0x42>
   17a46:	bf00      	nop
   17a48:	20005c2c 	.word	0x20005c2c
   17a4c:	0001e0b3 	.word	0x0001e0b3
   17a50:	2000a2ba 	.word	0x2000a2ba

00017a54 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   17a54:	b538      	push	{r3, r4, r5, lr}
   17a56:	f04f 0320 	mov.w	r3, #32
   17a5a:	f3ef 8511 	mrs	r5, BASEPRI
   17a5e:	f383 8811 	msr	BASEPRI, r3
   17a62:	f3bf 8f6f 	isb	sy
	return list->head == list;
   17a66:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   17a68:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   17a6a:	4298      	cmp	r0, r3
	signal->signaled = 1U;
   17a6c:	f04f 0101 	mov.w	r1, #1
   17a70:	6081      	str	r1, [r0, #8]
   17a72:	d106      	bne.n	17a82 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   17a74:	f385 8811 	msr	BASEPRI, r5
   17a78:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   17a7c:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   17a7e:	4620      	mov	r0, r4
   17a80:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   17a82:	e9d3 2000 	ldrd	r2, r0, [r3]
   17a86:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   17a88:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   17a8a:	2200      	movs	r2, #0
	node->prev = NULL;
   17a8c:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   17a90:	4618      	mov	r0, r3
   17a92:	f006 faf3 	bl	1e07c <signal_poll_event>
	z_reschedule(&lock, key);
   17a96:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   17a98:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   17a9a:	4802      	ldr	r0, [pc, #8]	; (17aa4 <z_impl_k_poll_signal_raise+0x50>)
   17a9c:	f006 f8e8 	bl	1dc70 <z_reschedule>
	return rc;
   17aa0:	e7ed      	b.n	17a7e <z_impl_k_poll_signal_raise+0x2a>
   17aa2:	bf00      	nop
   17aa4:	2000a2ba 	.word	0x2000a2ba

00017aa8 <disconnected>:
}
   17aa8:	4770      	bx	lr

00017aaa <connected>:
	if (err) {
   17aaa:	b909      	cbnz	r1, 17ab0 <connected+0x6>
    cts_sync_processor(conn, NULL);
   17aac:	f7ea ba14 	b.w	1ed8 <cts_sync_processor>
}
   17ab0:	4770      	bx	lr

00017ab2 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
   17ab2:	b508      	push	{r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   17ab4:	f7fd fd82 	bl	155bc <lv_disp_get_default>
}
   17ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   17abc:	f7fc b82a 	b.w	13b14 <lv_disp_get_scr_act>

00017ac0 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   17ac0:	b570      	push	{r4, r5, r6, lr}
   17ac2:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   17ac4:	f990 000b 	ldrsb.w	r0, [r0, #11]
   17ac8:	250c      	movs	r5, #12
   17aca:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   17acc:	4288      	cmp	r0, r1
   17ace:	eb06 0405 	add.w	r4, r6, r5
   17ad2:	bfb8      	it	lt
   17ad4:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
   17ad6:	2a00      	cmp	r2, #0
   17ad8:	4610      	mov	r0, r2
   17ada:	bfb8      	it	lt
   17adc:	f102 001f 	addlt.w	r0, r2, #31
   17ae0:	1140      	asrs	r0, r0, #5
   17ae2:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   17ae6:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   17ae8:	f002 001f 	and.w	r0, r2, #31
   17aec:	bd70      	pop	{r4, r5, r6, pc}

00017aee <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   17aee:	f04f 0320 	mov.w	r3, #32
   17af2:	f3ef 8011 	mrs	r0, BASEPRI
   17af6:	f383 8811 	msr	BASEPRI, r3
   17afa:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   17afe:	4770      	bx	lr

00017b00 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17b00:	07c3      	lsls	r3, r0, #31
   17b02:	d503      	bpl.n	17b0c <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   17b04:	f381 8811 	msr	BASEPRI, r1
   17b08:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   17b0c:	4770      	bx	lr

00017b0e <z_sys_mem_pool_base_init>:
{
   17b0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   17b12:	6846      	ldr	r6, [r0, #4]
   17b14:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   17b16:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   17b18:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
   17b1c:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   17b1e:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
   17b22:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   17b24:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   17b26:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   17b28:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   17b2a:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
   17b2e:	4598      	cmp	r8, r3
   17b30:	dc05      	bgt.n	17b3e <z_sys_mem_pool_base_init+0x30>
   17b32:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   17b34:	4619      	mov	r1, r3
   17b36:	428f      	cmp	r7, r1
   17b38:	dc20      	bgt.n	17b7c <z_sys_mem_pool_base_init+0x6e>
}
   17b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
   17b3e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
   17b42:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   17b46:	fb09 fe03 	mul.w	lr, r9, r3
   17b4a:	eb0a 040e 	add.w	r4, sl, lr
   17b4e:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   17b52:	2d20      	cmp	r5, #32
	list->tail = (sys_dnode_t *)list;
   17b54:	e9c4 bb01 	strd	fp, fp, [r4, #4]
   17b58:	d805      	bhi.n	17b66 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   17b5a:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   17b5c:	0892      	lsrs	r2, r2, #2
   17b5e:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   17b62:	3301      	adds	r3, #1
   17b64:	e7e3      	b.n	17b2e <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   17b66:	f115 041f 	adds.w	r4, r5, #31
   17b6a:	bf48      	it	mi
   17b6c:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   17b70:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   17b72:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   17b76:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   17b7a:	e7ef      	b.n	17b5c <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   17b7c:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   17b7e:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   17b80:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   17b84:	18ec      	adds	r4, r5, r3
	node->next = list;
   17b86:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   17b8a:	6895      	ldr	r5, [r2, #8]
   17b8c:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   17b8e:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   17b90:	3101      	adds	r1, #1
   17b92:	602c      	str	r4, [r5, #0]
	list->tail = node;
   17b94:	4433      	add	r3, r6
   17b96:	6094      	str	r4, [r2, #8]
   17b98:	e7cd      	b.n	17b36 <z_sys_mem_pool_base_init+0x28>

00017b9a <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   17b9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b9e:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17ba0:	7a85      	ldrb	r5, [r0, #10]
{
   17ba2:	af00      	add	r7, sp, #0
   17ba4:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17ba8:	00ab      	lsls	r3, r5, #2
   17baa:	3307      	adds	r3, #7
   17bac:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   17bb0:	ebad 0d03 	sub.w	sp, sp, r3
   17bb4:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   17bb6:	4653      	mov	r3, sl
   17bb8:	6842      	ldr	r2, [r0, #4]
   17bba:	f843 2904 	str.w	r2, [r3], #-4
{
   17bbe:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
   17bc0:	2200      	movs	r2, #0
   17bc2:	4295      	cmp	r5, r2
   17bc4:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   17bc8:	dd09      	ble.n	17bde <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   17bca:	b122      	cbz	r2, 17bd6 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   17bcc:	6818      	ldr	r0, [r3, #0]
   17bce:	0880      	lsrs	r0, r0, #2
   17bd0:	f020 0003 	bic.w	r0, r0, #3
   17bd4:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   17bd6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   17bda:	4288      	cmp	r0, r1
   17bdc:	d208      	bcs.n	17bf0 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   17bde:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   17be2:	d107      	bne.n	17bf4 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   17be4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17be6:	2300      	movs	r3, #0
   17be8:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   17bea:	f06f 000b 	mvn.w	r0, #11
   17bee:	e044      	b.n	17c7a <z_sys_mem_pool_block_alloc+0xe0>
	for (i = 0; i < p->n_levels; i++) {
   17bf0:	3201      	adds	r2, #1
   17bf2:	e7e6      	b.n	17bc2 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17bf4:	7c20      	ldrb	r0, [r4, #16]
   17bf6:	f010 0001 	ands.w	r0, r0, #1
   17bfa:	d001      	beq.n	17c00 <z_sys_mem_pool_block_alloc+0x66>
   17bfc:	f7ff ff77 	bl	17aee <pool_irq_lock.isra.2.part.3>
   17c00:	68e2      	ldr	r2, [r4, #12]
   17c02:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   17c04:	4680      	mov	r8, r0
	for (i = alloc_l; i >= 0; i--) {
   17c06:	fb03 2309 	mla	r3, r3, r9, r2
	block = sys_dlist_get(&p->levels[l].free_list);
   17c0a:	464e      	mov	r6, r9
	return list->head == list;
   17c0c:	461a      	mov	r2, r3
   17c0e:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   17c12:	4295      	cmp	r5, r2
   17c14:	d06d      	beq.n	17cf2 <z_sys_mem_pool_block_alloc+0x158>
	node->prev->next = node->next;
   17c16:	e9d5 3200 	ldrd	r3, r2, [r5]
   17c1a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   17c1c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17c1e:	2300      	movs	r3, #0
	node->prev = NULL;
   17c20:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c24:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   17c26:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   17c2a:	f107 0b14 	add.w	fp, r7, #20
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c2e:	1aea      	subs	r2, r5, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   17c30:	4620      	mov	r0, r4
   17c32:	fb92 f2f1 	sdiv	r2, r2, r1
   17c36:	465b      	mov	r3, fp
   17c38:	4631      	mov	r1, r6
   17c3a:	f7ff ff41 	bl	17ac0 <get_bit_ptr>
	*word |= (1<<bit);
   17c3e:	6979      	ldr	r1, [r7, #20]
   17c40:	2201      	movs	r2, #1
   17c42:	680b      	ldr	r3, [r1, #0]
   17c44:	603a      	str	r2, [r7, #0]
   17c46:	fa02 f000 	lsl.w	r0, r2, r0
   17c4a:	4303      	orrs	r3, r0
   17c4c:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   17c4e:	454e      	cmp	r6, r9
   17c50:	db17      	blt.n	17c82 <z_sys_mem_pool_block_alloc+0xe8>
	pool_irq_unlock(p, key);
   17c52:	4641      	mov	r1, r8
   17c54:	7c20      	ldrb	r0, [r4, #16]
   17c56:	f7ff ff53 	bl	17b00 <pool_irq_unlock.isra.4>
	*data_p = data;
   17c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17c5c:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
   17c5e:	2d00      	cmp	r5, #0
   17c60:	d0c3      	beq.n	17bea <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   17c62:	68bb      	ldr	r3, [r7, #8]
   17c64:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c68:	6823      	ldr	r3, [r4, #0]
   17c6a:	1aed      	subs	r5, r5, r3
   17c6c:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   17c70:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   17c74:	687b      	ldr	r3, [r7, #4]

	return 0;
   17c76:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
   17c78:	601d      	str	r5, [r3, #0]
}
   17c7a:	371c      	adds	r7, #28
   17c7c:	46bd      	mov	sp, r7
   17c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c82:	6822      	ldr	r2, [r4, #0]
   17c84:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
	set_alloc_bit(p, l + 1, 4*bn);
   17c88:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   17c8a:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c8c:	1aaa      	subs	r2, r5, r2
	int bit = get_bit_ptr(p, level, bn, &word);
   17c8e:	4620      	mov	r0, r4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c90:	fb92 f2f3 	sdiv	r2, r2, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   17c94:	465b      	mov	r3, fp
   17c96:	0092      	lsls	r2, r2, #2
   17c98:	f7ff ff12 	bl	17ac0 <get_bit_ptr>
	*word |= (1<<bit);
   17c9c:	697a      	ldr	r2, [r7, #20]
   17c9e:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   17ca0:	68e1      	ldr	r1, [r4, #12]
	*word |= (1<<bit);
   17ca2:	fa03 f000 	lsl.w	r0, r3, r0
   17ca6:	6813      	ldr	r3, [r2, #0]
   17ca8:	4303      	orrs	r3, r0
   17caa:	6013      	str	r3, [r2, #0]
		int lsz = lsizes[l + 1];
   17cac:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   17cb0:	230c      	movs	r3, #12
   17cb2:	fb03 1106 	mla	r1, r3, r6, r1
   17cb6:	2203      	movs	r2, #3
   17cb8:	f101 0e04 	add.w	lr, r1, #4
   17cbc:	182b      	adds	r3, r5, r0
   17cbe:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   17cc0:	688a      	ldr	r2, [r1, #8]
   17cc2:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   17cc4:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   17cc6:	f8c3 e000 	str.w	lr, [r3]
	list->tail->next = node;
   17cca:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   17ccc:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   17cce:	608b      	str	r3, [r1, #8]
   17cd0:	3a01      	subs	r2, #1
   17cd2:	4403      	add	r3, r0
   17cd4:	60fa      	str	r2, [r7, #12]
   17cd6:	d1f3      	bne.n	17cc0 <z_sys_mem_pool_block_alloc+0x126>
				pool_irq_unlock(p, key);
   17cd8:	4641      	mov	r1, r8
   17cda:	7c20      	ldrb	r0, [r4, #16]
   17cdc:	f7ff ff10 	bl	17b00 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17ce0:	7c23      	ldrb	r3, [r4, #16]
   17ce2:	07d9      	lsls	r1, r3, #31
   17ce4:	d503      	bpl.n	17cee <z_sys_mem_pool_block_alloc+0x154>
   17ce6:	f7ff ff02 	bl	17aee <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   17cea:	4680      	mov	r8, r0
   17cec:	e7af      	b.n	17c4e <z_sys_mem_pool_block_alloc+0xb4>
		return 0;
   17cee:	68f8      	ldr	r0, [r7, #12]
   17cf0:	e7fb      	b.n	17cea <z_sys_mem_pool_block_alloc+0x150>
	for (i = alloc_l; i >= 0; i--) {
   17cf2:	3e01      	subs	r6, #1
   17cf4:	1c72      	adds	r2, r6, #1
   17cf6:	f1a3 030c 	sub.w	r3, r3, #12
   17cfa:	d187      	bne.n	17c0c <z_sys_mem_pool_block_alloc+0x72>
   17cfc:	2500      	movs	r5, #0
   17cfe:	e7a8      	b.n	17c52 <z_sys_mem_pool_block_alloc+0xb8>

00017d00 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   17d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d04:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17d06:	7a83      	ldrb	r3, [r0, #10]
   17d08:	009b      	lsls	r3, r3, #2
   17d0a:	3307      	adds	r3, #7
   17d0c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   17d10:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17d12:	ebad 0d03 	sub.w	sp, sp, r3
   17d16:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   17d18:	6843      	ldr	r3, [r0, #4]
   17d1a:	f8cb 3000 	str.w	r3, [fp]
{
   17d1e:	4606      	mov	r6, r0
	for (i = 1; i <= level; i++) {
   17d20:	465c      	mov	r4, fp
   17d22:	2001      	movs	r0, #1
   17d24:	4281      	cmp	r1, r0
   17d26:	d215      	bcs.n	17d54 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17d28:	7c30      	ldrb	r0, [r6, #16]
   17d2a:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   17d2e:	4688      	mov	r8, r1
   17d30:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17d32:	d001      	beq.n	17d38 <z_sys_mem_pool_block_free+0x38>
   17d34:	f7ff fedb 	bl	17aee <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   17d38:	4604      	mov	r4, r0
	while (level >= 0) {
   17d3a:	f1b8 0f00 	cmp.w	r8, #0
   17d3e:	da11      	bge.n	17d64 <z_sys_mem_pool_block_free+0x64>
	return -1;
   17d40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   17d44:	4621      	mov	r1, r4
   17d46:	7c30      	ldrb	r0, [r6, #16]
   17d48:	f7ff feda 	bl	17b00 <pool_irq_unlock.isra.4>
}
   17d4c:	3714      	adds	r7, #20
   17d4e:	46bd      	mov	sp, r7
   17d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   17d54:	6823      	ldr	r3, [r4, #0]
   17d56:	089b      	lsrs	r3, r3, #2
   17d58:	f023 0303 	bic.w	r3, r3, #3
   17d5c:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   17d60:	3001      	adds	r0, #1
   17d62:	e7df      	b.n	17d24 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   17d64:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   17d68:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   17d6a:	fb03 fa05 	mul.w	sl, r3, r5
   17d6e:	6833      	ldr	r3, [r6, #0]
   17d70:	603b      	str	r3, [r7, #0]
   17d72:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
   17d76:	462a      	mov	r2, r5
   17d78:	f107 030c 	add.w	r3, r7, #12
   17d7c:	4641      	mov	r1, r8
   17d7e:	4630      	mov	r0, r6
   17d80:	f7ff fe9e 	bl	17ac0 <get_bit_ptr>
	*word &= ~(1<<bit);
   17d84:	68fa      	ldr	r2, [r7, #12]
	node->next = list;
   17d86:	6839      	ldr	r1, [r7, #0]
   17d88:	2301      	movs	r3, #1
   17d8a:	fa03 f000 	lsl.w	r0, r3, r0
   17d8e:	6813      	ldr	r3, [r2, #0]
   17d90:	ea23 0300 	bic.w	r3, r3, r0
   17d94:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   17d96:	68f3      	ldr	r3, [r6, #12]
   17d98:	220c      	movs	r2, #12
   17d9a:	fb02 3308 	mla	r3, r2, r8, r3
   17d9e:	1d1a      	adds	r2, r3, #4
   17da0:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   17da4:	689a      	ldr	r2, [r3, #8]
   17da6:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   17daa:	689a      	ldr	r2, [r3, #8]
   17dac:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   17db0:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
   17db4:	7c30      	ldrb	r0, [r6, #16]
   17db6:	4621      	mov	r1, r4
   17db8:	f7ff fea2 	bl	17b00 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17dbc:	7c30      	ldrb	r0, [r6, #16]
   17dbe:	f010 0001 	ands.w	r0, r0, #1
   17dc2:	d001      	beq.n	17dc8 <z_sys_mem_pool_block_free+0xc8>
   17dc4:	f7ff fe93 	bl	17aee <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   17dc8:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   17dca:	f1b8 0f00 	cmp.w	r8, #0
   17dce:	d0b9      	beq.n	17d44 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   17dd0:	f107 030c 	add.w	r3, r7, #12
   17dd4:	462a      	mov	r2, r5
   17dd6:	4641      	mov	r1, r8
   17dd8:	4630      	mov	r0, r6
   17dda:	f7ff fe71 	bl	17ac0 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   17dde:	68fb      	ldr	r3, [r7, #12]
   17de0:	2800      	cmp	r0, #0
   17de2:	bfb8      	it	lt
   17de4:	3003      	addlt	r0, #3
   17de6:	681b      	ldr	r3, [r3, #0]
   17de8:	f020 0003 	bic.w	r0, r0, #3
   17dec:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   17df0:	f010 000f 	ands.w	r0, r0, #15
   17df4:	d1a6      	bne.n	17d44 <z_sys_mem_pool_block_free+0x44>
			int b = (bn & ~3) + i;
   17df6:	f025 0a03 	bic.w	sl, r5, #3
	node->next = NULL;
   17dfa:	4684      	mov	ip, r0
	return (u8_t *)p->buf + lsz * block;
   17dfc:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   17dfe:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   17e02:	4353      	muls	r3, r2
   17e04:	6832      	ldr	r2, [r6, #0]
   17e06:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   17e08:	f852 e003 	ldr.w	lr, [r2, r3]
   17e0c:	f8d1 9004 	ldr.w	r9, [r1, #4]
		for (i = 0; i < 4; i++) {
   17e10:	3001      	adds	r0, #1
   17e12:	2804      	cmp	r0, #4
   17e14:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   17e18:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   17e1c:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   17e20:	f8c1 c004 	str.w	ip, [r1, #4]
   17e24:	d1ea      	bne.n	17dfc <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   17e26:	2d00      	cmp	r5, #0
   17e28:	bfb8      	it	lt
   17e2a:	3503      	addlt	r5, #3
		level = level - 1;
   17e2c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   17e30:	10ad      	asrs	r5, r5, #2
   17e32:	e782      	b.n	17d3a <z_sys_mem_pool_block_free+0x3a>

00017e34 <arch_printk_char_out>:
}
   17e34:	2000      	movs	r0, #0
   17e36:	4770      	bx	lr

00017e38 <print_err>:
{
   17e38:	b570      	push	{r4, r5, r6, lr}
   17e3a:	4604      	mov	r4, r0
   17e3c:	460d      	mov	r5, r1
	out('E', ctx);
   17e3e:	2045      	movs	r0, #69	; 0x45
   17e40:	47a0      	blx	r4
	out('R', ctx);
   17e42:	4629      	mov	r1, r5
   17e44:	2052      	movs	r0, #82	; 0x52
   17e46:	47a0      	blx	r4
	out('R', ctx);
   17e48:	4629      	mov	r1, r5
   17e4a:	4623      	mov	r3, r4
   17e4c:	2052      	movs	r0, #82	; 0x52
}
   17e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   17e52:	4718      	bx	r3

00017e54 <z_vprintk>:
{
   17e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e58:	b08b      	sub	sp, #44	; 0x2c
   17e5a:	461c      	mov	r4, r3
	char length_mod = 0;
   17e5c:	f04f 0800 	mov.w	r8, #0
   17e60:	1e53      	subs	r3, r2, #1
{
   17e62:	4606      	mov	r6, r0
   17e64:	460f      	mov	r7, r1
   17e66:	9302      	str	r3, [sp, #8]
	int min_width = -1;
   17e68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   17e6c:	46c1      	mov	r9, r8
			might_format = 0;
   17e6e:	2500      	movs	r5, #0
					break;
   17e70:	e005      	b.n	17e7e <z_vprintk+0x2a>
		if (!might_format) {
   17e72:	b96d      	cbnz	r5, 17e90 <z_vprintk+0x3c>
			if (*fmt != '%') {
   17e74:	2825      	cmp	r0, #37	; 0x25
   17e76:	f000 814f 	beq.w	18118 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   17e7a:	4639      	mov	r1, r7
   17e7c:	47b0      	blx	r6
	while (*fmt) {
   17e7e:	9b02      	ldr	r3, [sp, #8]
   17e80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   17e84:	9302      	str	r3, [sp, #8]
   17e86:	2800      	cmp	r0, #0
   17e88:	d1f3      	bne.n	17e72 <z_vprintk+0x1e>
}
   17e8a:	b00b      	add	sp, #44	; 0x2c
   17e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   17e90:	2864      	cmp	r0, #100	; 0x64
   17e92:	d06e      	beq.n	17f72 <z_vprintk+0x11e>
   17e94:	d81a      	bhi.n	17ecc <z_vprintk+0x78>
   17e96:	2839      	cmp	r0, #57	; 0x39
   17e98:	d80a      	bhi.n	17eb0 <z_vprintk+0x5c>
   17e9a:	2831      	cmp	r0, #49	; 0x31
   17e9c:	d260      	bcs.n	17f60 <z_vprintk+0x10c>
   17e9e:	282d      	cmp	r0, #45	; 0x2d
   17ea0:	f000 8140 	beq.w	18124 <z_vprintk+0x2d0>
   17ea4:	2830      	cmp	r0, #48	; 0x30
   17ea6:	d04c      	beq.n	17f42 <z_vprintk+0xee>
   17ea8:	2825      	cmp	r0, #37	; 0x25
   17eaa:	d107      	bne.n	17ebc <z_vprintk+0x68>
				out((int)'%', ctx);
   17eac:	4639      	mov	r1, r7
   17eae:	e00b      	b.n	17ec8 <z_vprintk+0x74>
			switch (*fmt) {
   17eb0:	2858      	cmp	r0, #88	; 0x58
   17eb2:	f000 80bb 	beq.w	1802c <z_vprintk+0x1d8>
   17eb6:	2863      	cmp	r0, #99	; 0x63
   17eb8:	f000 812a 	beq.w	18110 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   17ebc:	4639      	mov	r1, r7
   17ebe:	2025      	movs	r0, #37	; 0x25
   17ec0:	47b0      	blx	r6
					out((int)*fmt, ctx);
   17ec2:	9b02      	ldr	r3, [sp, #8]
   17ec4:	7818      	ldrb	r0, [r3, #0]
   17ec6:	4639      	mov	r1, r7
   17ec8:	47b0      	blx	r6
   17eca:	e7d0      	b.n	17e6e <z_vprintk+0x1a>
			switch (*fmt) {
   17ecc:	2870      	cmp	r0, #112	; 0x70
   17ece:	f000 80a3 	beq.w	18018 <z_vprintk+0x1c4>
   17ed2:	d811      	bhi.n	17ef8 <z_vprintk+0xa4>
   17ed4:	2869      	cmp	r0, #105	; 0x69
   17ed6:	d04c      	beq.n	17f72 <z_vprintk+0x11e>
   17ed8:	286c      	cmp	r0, #108	; 0x6c
   17eda:	d105      	bne.n	17ee8 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   17edc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   17ee0:	d12a      	bne.n	17f38 <z_vprintk+0xe4>
					length_mod = 'L';
   17ee2:	f04f 084c 	mov.w	r8, #76	; 0x4c
   17ee6:	e7ca      	b.n	17e7e <z_vprintk+0x2a>
			switch (*fmt) {
   17ee8:	2868      	cmp	r0, #104	; 0x68
   17eea:	d1e7      	bne.n	17ebc <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   17eec:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   17ef0:	d122      	bne.n	17f38 <z_vprintk+0xe4>
					length_mod = 'H';
   17ef2:	f04f 0848 	mov.w	r8, #72	; 0x48
   17ef6:	e7c2      	b.n	17e7e <z_vprintk+0x2a>
			switch (*fmt) {
   17ef8:	2875      	cmp	r0, #117	; 0x75
   17efa:	d071      	beq.n	17fe0 <z_vprintk+0x18c>
   17efc:	d818      	bhi.n	17f30 <z_vprintk+0xdc>
   17efe:	2873      	cmp	r0, #115	; 0x73
   17f00:	d1dc      	bne.n	17ebc <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   17f02:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   17f06:	46ab      	mov	fp, r5
   17f08:	465b      	mov	r3, fp
   17f0a:	f81b 0b01 	ldrb.w	r0, [fp], #1
   17f0e:	2800      	cmp	r0, #0
   17f10:	f040 80fb 	bne.w	1810a <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   17f14:	f1b9 0f03 	cmp.w	r9, #3
   17f18:	f040 810a 	bne.w	18130 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   17f1c:	1b5d      	subs	r5, r3, r5
   17f1e:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   17f22:	2d00      	cmp	r5, #0
   17f24:	dda3      	ble.n	17e6e <z_vprintk+0x1a>
						out(' ', ctx);
   17f26:	4639      	mov	r1, r7
   17f28:	2020      	movs	r0, #32
   17f2a:	47b0      	blx	r6
   17f2c:	3d01      	subs	r5, #1
   17f2e:	e7f8      	b.n	17f22 <z_vprintk+0xce>
			switch (*fmt) {
   17f30:	2878      	cmp	r0, #120	; 0x78
   17f32:	d07b      	beq.n	1802c <z_vprintk+0x1d8>
   17f34:	287a      	cmp	r0, #122	; 0x7a
   17f36:	d1c1      	bne.n	17ebc <z_vprintk+0x68>
				} else if (length_mod == 0) {
   17f38:	f1b8 0f00 	cmp.w	r8, #0
   17f3c:	d1be      	bne.n	17ebc <z_vprintk+0x68>
   17f3e:	4680      	mov	r8, r0
   17f40:	e79d      	b.n	17e7e <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   17f42:	f1ba 0f00 	cmp.w	sl, #0
   17f46:	da0e      	bge.n	17f66 <z_vprintk+0x112>
   17f48:	f1b9 0f00 	cmp.w	r9, #0
   17f4c:	f000 80ed 	beq.w	1812a <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   17f50:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   17f54:	f1b9 0f00 	cmp.w	r9, #0
   17f58:	bf08      	it	eq
   17f5a:	f04f 0902 	moveq.w	r9, #2
   17f5e:	e78e      	b.n	17e7e <z_vprintk+0x2a>
				if (min_width < 0) {
   17f60:	f1ba 0f00 	cmp.w	sl, #0
   17f64:	dbf4      	blt.n	17f50 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   17f66:	230a      	movs	r3, #10
   17f68:	fb03 0a0a 	mla	sl, r3, sl, r0
   17f6c:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   17f70:	e7f0      	b.n	17f54 <z_vprintk+0x100>
				if (length_mod == 'z') {
   17f72:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   17f76:	d102      	bne.n	17f7e <z_vprintk+0x12a>
					d = va_arg(ap, int);
   17f78:	f854 5b04 	ldr.w	r5, [r4], #4
   17f7c:	e01f      	b.n	17fbe <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   17f7e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   17f82:	d0f9      	beq.n	17f78 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   17f84:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   17f88:	d1f6      	bne.n	17f78 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   17f8a:	3407      	adds	r4, #7
   17f8c:	f024 0407 	bic.w	r4, r4, #7
   17f90:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   17f94:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   17f98:	9106      	str	r1, [sp, #24]
   17f9a:	f143 0100 	adc.w	r1, r3, #0
   17f9e:	9107      	str	r1, [sp, #28]
   17fa0:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   17fa4:	2100      	movs	r1, #0
   17fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17faa:	4561      	cmp	r1, ip
   17fac:	bf08      	it	eq
   17fae:	4558      	cmpeq	r0, fp
   17fb0:	d204      	bcs.n	17fbc <z_vprintk+0x168>
						print_err(out, ctx);
   17fb2:	4639      	mov	r1, r7
   17fb4:	4630      	mov	r0, r6
   17fb6:	f7ff ff3f 	bl	17e38 <print_err>
						break;
   17fba:	e758      	b.n	17e6e <z_vprintk+0x1a>
					d = lld;
   17fbc:	4615      	mov	r5, r2
				if (d < 0) {
   17fbe:	2d00      	cmp	r5, #0
   17fc0:	da05      	bge.n	17fce <z_vprintk+0x17a>
					out((int)'-', ctx);
   17fc2:	4639      	mov	r1, r7
   17fc4:	202d      	movs	r0, #45	; 0x2d
   17fc6:	47b0      	blx	r6
					d = -d;
   17fc8:	426d      	negs	r5, r5
					min_width--;
   17fca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   17fce:	f8cd a000 	str.w	sl, [sp]
   17fd2:	464b      	mov	r3, r9
   17fd4:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
   17fd6:	4639      	mov	r1, r7
   17fd8:	4630      	mov	r0, r6
   17fda:	f7ea f92b 	bl	2234 <_printk_dec_ulong>
				break;
   17fde:	e746      	b.n	17e6e <z_vprintk+0x1a>
				if (length_mod == 'z') {
   17fe0:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   17fe4:	d102      	bne.n	17fec <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   17fe6:	f854 2b04 	ldr.w	r2, [r4], #4
   17fea:	e011      	b.n	18010 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   17fec:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   17ff0:	d0f9      	beq.n	17fe6 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   17ff2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   17ff6:	d1f6      	bne.n	17fe6 <z_vprintk+0x192>
					unsigned long long llu =
   17ff8:	3407      	adds	r4, #7
   17ffa:	f024 0407 	bic.w	r4, r4, #7
   17ffe:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   18002:	2100      	movs	r1, #0
   18004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18008:	4299      	cmp	r1, r3
   1800a:	bf08      	it	eq
   1800c:	4290      	cmpeq	r0, r2
   1800e:	d3d0      	bcc.n	17fb2 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   18010:	f8cd a000 	str.w	sl, [sp]
   18014:	464b      	mov	r3, r9
   18016:	e7de      	b.n	17fd6 <z_vprintk+0x182>
				out('0', ctx);
   18018:	4639      	mov	r1, r7
   1801a:	2030      	movs	r0, #48	; 0x30
   1801c:	47b0      	blx	r6
				out('x', ctx);
   1801e:	4639      	mov	r1, r7
   18020:	2078      	movs	r0, #120	; 0x78
   18022:	47b0      	blx	r6
					min_width = 8;
   18024:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   18028:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1802c:	9b02      	ldr	r3, [sp, #8]
   1802e:	781b      	ldrb	r3, [r3, #0]
   18030:	2b70      	cmp	r3, #112	; 0x70
   18032:	d104      	bne.n	1803e <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   18034:	f854 3b04 	ldr.w	r3, [r4], #4
   18038:	9304      	str	r3, [sp, #16]
   1803a:	2300      	movs	r3, #0
   1803c:	e00d      	b.n	1805a <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1803e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   18042:	d0f7      	beq.n	18034 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   18044:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   18048:	d1f4      	bne.n	18034 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1804a:	3407      	adds	r4, #7
   1804c:	f024 0307 	bic.w	r3, r4, #7
   18050:	461c      	mov	r4, r3
   18052:	685b      	ldr	r3, [r3, #4]
   18054:	f854 2b08 	ldr.w	r2, [r4], #8
   18058:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1805a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1805c:	2210      	movs	r2, #16
	int digits = 0;
   1805e:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   18060:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
   18062:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
   18066:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1806a:	9804      	ldr	r0, [sp, #16]
   1806c:	f1cb 0c20 	rsb	ip, fp, #32
   18070:	f1ab 0120 	sub.w	r1, fp, #32
   18074:	fa20 f00b 	lsr.w	r0, r0, fp
   18078:	fa03 fc0c 	lsl.w	ip, r3, ip
   1807c:	ea40 000c 	orr.w	r0, r0, ip
   18080:	fa23 f101 	lsr.w	r1, r3, r1
   18084:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   18086:	f010 000f 	ands.w	r0, r0, #15
   1808a:	d108      	bne.n	1809e <z_vprintk+0x24a>
   1808c:	9905      	ldr	r1, [sp, #20]
   1808e:	b911      	cbnz	r1, 18096 <z_vprintk+0x242>
   18090:	f1bb 0f00 	cmp.w	fp, #0
   18094:	d124      	bne.n	180e0 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
   18096:	2130      	movs	r1, #48	; 0x30
   18098:	e005      	b.n	180a6 <z_vprintk+0x252>
			found_largest_digit = 1;
   1809a:	9505      	str	r5, [sp, #20]
   1809c:	e7e3      	b.n	18066 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
   1809e:	2809      	cmp	r0, #9
   180a0:	bf8c      	ite	hi
   180a2:	2157      	movhi	r1, #87	; 0x57
   180a4:	2130      	movls	r1, #48	; 0x30
   180a6:	4408      	add	r0, r1
			out((int)nibble, ctx);
   180a8:	b240      	sxtb	r0, r0
   180aa:	4639      	mov	r1, r7
   180ac:	9308      	str	r3, [sp, #32]
   180ae:	9205      	str	r2, [sp, #20]
   180b0:	47b0      	blx	r6
			digits++;
   180b2:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   180b4:	9a05      	ldr	r2, [sp, #20]
			digits++;
   180b6:	3301      	adds	r3, #1
   180b8:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   180ba:	9b08      	ldr	r3, [sp, #32]
   180bc:	f1bb 0f00 	cmp.w	fp, #0
   180c0:	d1eb      	bne.n	1809a <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
   180c2:	f1b9 0f03 	cmp.w	r9, #3
   180c6:	f47f aed2 	bne.w	17e6e <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   180ca:	9b03      	ldr	r3, [sp, #12]
   180cc:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   180d0:	2d00      	cmp	r5, #0
   180d2:	f77f aecc 	ble.w	17e6e <z_vprintk+0x1a>
			out(' ', ctx);
   180d6:	4639      	mov	r1, r7
   180d8:	2020      	movs	r0, #32
   180da:	47b0      	blx	r6
   180dc:	3d01      	subs	r5, #1
   180de:	e7f7      	b.n	180d0 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
   180e0:	1e51      	subs	r1, r2, #1
   180e2:	4592      	cmp	sl, r2
   180e4:	9108      	str	r1, [sp, #32]
   180e6:	db07      	blt.n	180f8 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
   180e8:	f1b9 0f01 	cmp.w	r9, #1
   180ec:	d106      	bne.n	180fc <z_vprintk+0x2a8>
   180ee:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
   180f0:	4639      	mov	r1, r7
   180f2:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   180f4:	47b0      	blx	r6
   180f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
   180f8:	9a08      	ldr	r2, [sp, #32]
   180fa:	e7b4      	b.n	18066 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   180fc:	f1b9 0f02 	cmp.w	r9, #2
   18100:	d1fa      	bne.n	180f8 <z_vprintk+0x2a4>
   18102:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   18104:	4639      	mov	r1, r7
   18106:	2020      	movs	r0, #32
   18108:	e7f4      	b.n	180f4 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
   1810a:	4639      	mov	r1, r7
   1810c:	47b0      	blx	r6
   1810e:	e6fb      	b.n	17f08 <z_vprintk+0xb4>
				out(c, ctx);
   18110:	4639      	mov	r1, r7
   18112:	f854 0b04 	ldr.w	r0, [r4], #4
   18116:	e6d7      	b.n	17ec8 <z_vprintk+0x74>
				length_mod = 0;
   18118:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1811a:	46a9      	mov	r9, r5
				min_width = -1;
   1811c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   18120:	2501      	movs	r5, #1
   18122:	e6ac      	b.n	17e7e <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   18124:	f04f 0903 	mov.w	r9, #3
   18128:	e6a9      	b.n	17e7e <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1812a:	f04f 0901 	mov.w	r9, #1
   1812e:	e6a6      	b.n	17e7e <z_vprintk+0x2a>
			might_format = 0;
   18130:	4605      	mov	r5, r0
		++fmt;
   18132:	e6a4      	b.n	17e7e <z_vprintk+0x2a>

00018134 <printk>:
{
   18134:	b40f      	push	{r0, r1, r2, r3}
   18136:	b507      	push	{r0, r1, r2, lr}
   18138:	a904      	add	r1, sp, #16
   1813a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1813e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   18140:	f7ea f8c4 	bl	22cc <vprintk>
}
   18144:	b003      	add	sp, #12
   18146:	f85d eb04 	ldr.w	lr, [sp], #4
   1814a:	b004      	add	sp, #16
   1814c:	4770      	bx	lr

0001814e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1814e:	4604      	mov	r4, r0
   18150:	b508      	push	{r3, lr}
   18152:	4608      	mov	r0, r1
   18154:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   18156:	461a      	mov	r2, r3
   18158:	47a0      	blx	r4
	return z_impl_k_current_get();
   1815a:	f7ff f8eb 	bl	17334 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1815e:	f7eb fb9f 	bl	38a0 <z_impl_k_thread_abort>

00018162 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   18162:	b510      	push	{r4, lr}
   18164:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   18166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1816a:	4620      	mov	r0, r4
   1816c:	f005 fce0 	bl	1db30 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   18170:	4603      	mov	r3, r0
   18172:	2800      	cmp	r0, #0
   18174:	d0f7      	beq.n	18166 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18176:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   18178:	6842      	ldr	r2, [r0, #4]
   1817a:	f3bf 8f5b 	dmb	ish
   1817e:	e853 1f00 	ldrex	r1, [r3]
   18182:	f021 0c01 	bic.w	ip, r1, #1
   18186:	e843 ce00 	strex	lr, ip, [r3]
   1818a:	f1be 0f00 	cmp.w	lr, #0
   1818e:	d1f6      	bne.n	1817e <z_work_q_main+0x1c>
   18190:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   18194:	07cb      	lsls	r3, r1, #31
   18196:	d500      	bpl.n	1819a <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   18198:	4790      	blx	r2
	z_impl_k_yield();
   1819a:	f7ff f857 	bl	1724c <z_impl_k_yield>
   1819e:	e7e2      	b.n	18166 <z_work_q_main+0x4>

000181a0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   181a0:	4770      	bx	lr

000181a2 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   181a2:	428b      	cmp	r3, r1
{
   181a4:	b538      	push	{r3, r4, r5, lr}
   181a6:	4615      	mov	r5, r2
   181a8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   181aa:	d805      	bhi.n	181b8 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   181ac:	461a      	mov	r2, r3
   181ae:	4629      	mov	r1, r5
   181b0:	f000 fd43 	bl	18c3a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   181b4:	4620      	mov	r0, r4
   181b6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   181b8:	2400      	movs	r4, #0
   181ba:	e7fb      	b.n	181b4 <_copy+0x12>

000181bc <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   181bc:	f000 bd67 	b.w	18c8e <memset>

000181c0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   181c0:	09c3      	lsrs	r3, r0, #7
   181c2:	005a      	lsls	r2, r3, #1
   181c4:	4413      	add	r3, r2
   181c6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   181ca:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   181ce:	b2c0      	uxtb	r0, r0
   181d0:	4770      	bx	lr

000181d2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   181d2:	78cb      	ldrb	r3, [r1, #3]
   181d4:	7802      	ldrb	r2, [r0, #0]
   181d6:	4053      	eors	r3, r2
   181d8:	7003      	strb	r3, [r0, #0]
   181da:	884b      	ldrh	r3, [r1, #2]
   181dc:	7842      	ldrb	r2, [r0, #1]
   181de:	4053      	eors	r3, r2
   181e0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   181e2:	680a      	ldr	r2, [r1, #0]
   181e4:	7883      	ldrb	r3, [r0, #2]
   181e6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   181ea:	7083      	strb	r3, [r0, #2]
   181ec:	680a      	ldr	r2, [r1, #0]
   181ee:	78c3      	ldrb	r3, [r0, #3]
   181f0:	4053      	eors	r3, r2
   181f2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   181f4:	79cb      	ldrb	r3, [r1, #7]
   181f6:	7902      	ldrb	r2, [r0, #4]
   181f8:	4053      	eors	r3, r2
   181fa:	7103      	strb	r3, [r0, #4]
   181fc:	88cb      	ldrh	r3, [r1, #6]
   181fe:	7942      	ldrb	r2, [r0, #5]
   18200:	4053      	eors	r3, r2
   18202:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   18204:	684a      	ldr	r2, [r1, #4]
   18206:	7983      	ldrb	r3, [r0, #6]
   18208:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1820c:	7183      	strb	r3, [r0, #6]
   1820e:	684a      	ldr	r2, [r1, #4]
   18210:	79c3      	ldrb	r3, [r0, #7]
   18212:	4053      	eors	r3, r2
   18214:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18216:	7acb      	ldrb	r3, [r1, #11]
   18218:	7a02      	ldrb	r2, [r0, #8]
   1821a:	4053      	eors	r3, r2
   1821c:	7203      	strb	r3, [r0, #8]
   1821e:	7a42      	ldrb	r2, [r0, #9]
   18220:	894b      	ldrh	r3, [r1, #10]
   18222:	4053      	eors	r3, r2
   18224:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   18226:	688a      	ldr	r2, [r1, #8]
   18228:	7a83      	ldrb	r3, [r0, #10]
   1822a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1822e:	7283      	strb	r3, [r0, #10]
   18230:	688a      	ldr	r2, [r1, #8]
   18232:	7ac3      	ldrb	r3, [r0, #11]
   18234:	4053      	eors	r3, r2
   18236:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   18238:	7bcb      	ldrb	r3, [r1, #15]
   1823a:	7b02      	ldrb	r2, [r0, #12]
   1823c:	4053      	eors	r3, r2
   1823e:	7303      	strb	r3, [r0, #12]
   18240:	89cb      	ldrh	r3, [r1, #14]
   18242:	7b42      	ldrb	r2, [r0, #13]
   18244:	4053      	eors	r3, r2
   18246:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   18248:	68ca      	ldr	r2, [r1, #12]
   1824a:	7b83      	ldrb	r3, [r0, #14]
   1824c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   18250:	7383      	strb	r3, [r0, #14]
   18252:	68ca      	ldr	r2, [r1, #12]
   18254:	7bc3      	ldrb	r3, [r0, #15]
   18256:	4053      	eors	r3, r2
   18258:	73c3      	strb	r3, [r0, #15]
}
   1825a:	4770      	bx	lr

0001825c <shift_rows>:
{
   1825c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1825e:	7802      	ldrb	r2, [r0, #0]
   18260:	f88d 2000 	strb.w	r2, [sp]
   18264:	7942      	ldrb	r2, [r0, #5]
   18266:	f88d 2001 	strb.w	r2, [sp, #1]
   1826a:	7a82      	ldrb	r2, [r0, #10]
   1826c:	f88d 2002 	strb.w	r2, [sp, #2]
   18270:	7bc2      	ldrb	r2, [r0, #15]
   18272:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   18276:	7902      	ldrb	r2, [r0, #4]
   18278:	f88d 2004 	strb.w	r2, [sp, #4]
   1827c:	7a42      	ldrb	r2, [r0, #9]
   1827e:	f88d 2005 	strb.w	r2, [sp, #5]
   18282:	7b82      	ldrb	r2, [r0, #14]
   18284:	f88d 2006 	strb.w	r2, [sp, #6]
   18288:	78c2      	ldrb	r2, [r0, #3]
   1828a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1828e:	7a02      	ldrb	r2, [r0, #8]
   18290:	f88d 2008 	strb.w	r2, [sp, #8]
   18294:	7b42      	ldrb	r2, [r0, #13]
   18296:	f88d 2009 	strb.w	r2, [sp, #9]
   1829a:	7882      	ldrb	r2, [r0, #2]
   1829c:	f88d 200a 	strb.w	r2, [sp, #10]
   182a0:	79c2      	ldrb	r2, [r0, #7]
   182a2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   182a6:	7b02      	ldrb	r2, [r0, #12]
   182a8:	f88d 200c 	strb.w	r2, [sp, #12]
   182ac:	7842      	ldrb	r2, [r0, #1]
   182ae:	f88d 200d 	strb.w	r2, [sp, #13]
   182b2:	7ac3      	ldrb	r3, [r0, #11]
   182b4:	7982      	ldrb	r2, [r0, #6]
   182b6:	f88d 200e 	strb.w	r2, [sp, #14]
   182ba:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   182be:	2310      	movs	r3, #16
   182c0:	466a      	mov	r2, sp
   182c2:	4619      	mov	r1, r3
   182c4:	f7ff ff6d 	bl	181a2 <_copy>
}
   182c8:	b005      	add	sp, #20
   182ca:	f85d fb04 	ldr.w	pc, [sp], #4

000182ce <mult_row_column>:
{
   182ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   182d0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   182d2:	7808      	ldrb	r0, [r1, #0]
{
   182d4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   182d6:	f7ff ff73 	bl	181c0 <_double_byte>
   182da:	4605      	mov	r5, r0
   182dc:	7860      	ldrb	r0, [r4, #1]
   182de:	f7ff ff6f 	bl	181c0 <_double_byte>
   182e2:	78a2      	ldrb	r2, [r4, #2]
   182e4:	7863      	ldrb	r3, [r4, #1]
   182e6:	4053      	eors	r3, r2
   182e8:	78e2      	ldrb	r2, [r4, #3]
   182ea:	4053      	eors	r3, r2
   182ec:	405d      	eors	r5, r3
   182ee:	4045      	eors	r5, r0
   182f0:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   182f2:	7860      	ldrb	r0, [r4, #1]
   182f4:	7827      	ldrb	r7, [r4, #0]
   182f6:	f7ff ff63 	bl	181c0 <_double_byte>
   182fa:	4605      	mov	r5, r0
   182fc:	78a0      	ldrb	r0, [r4, #2]
   182fe:	f7ff ff5f 	bl	181c0 <_double_byte>
   18302:	78a3      	ldrb	r3, [r4, #2]
   18304:	405f      	eors	r7, r3
   18306:	78e3      	ldrb	r3, [r4, #3]
   18308:	405f      	eors	r7, r3
   1830a:	407d      	eors	r5, r7
   1830c:	4045      	eors	r5, r0
   1830e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18310:	78a0      	ldrb	r0, [r4, #2]
   18312:	7865      	ldrb	r5, [r4, #1]
   18314:	7827      	ldrb	r7, [r4, #0]
   18316:	f7ff ff53 	bl	181c0 <_double_byte>
   1831a:	406f      	eors	r7, r5
   1831c:	4605      	mov	r5, r0
   1831e:	78e0      	ldrb	r0, [r4, #3]
   18320:	f7ff ff4e 	bl	181c0 <_double_byte>
   18324:	78e3      	ldrb	r3, [r4, #3]
   18326:	405f      	eors	r7, r3
   18328:	407d      	eors	r5, r7
   1832a:	4045      	eors	r5, r0
   1832c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1832e:	7820      	ldrb	r0, [r4, #0]
   18330:	f7ff ff46 	bl	181c0 <_double_byte>
   18334:	7863      	ldrb	r3, [r4, #1]
   18336:	7825      	ldrb	r5, [r4, #0]
   18338:	405d      	eors	r5, r3
   1833a:	78a3      	ldrb	r3, [r4, #2]
   1833c:	405d      	eors	r5, r3
   1833e:	4045      	eors	r5, r0
   18340:	78e0      	ldrb	r0, [r4, #3]
   18342:	f7ff ff3d 	bl	181c0 <_double_byte>
   18346:	b2ed      	uxtb	r5, r5
   18348:	4068      	eors	r0, r5
   1834a:	70f0      	strb	r0, [r6, #3]
}
   1834c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001834e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1834e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   18350:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   18352:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   18354:	f912 3b10 	ldrsb.w	r3, [r2], #16
   18358:	2b00      	cmp	r3, #0
   1835a:	bfb4      	ite	lt
   1835c:	2387      	movlt	r3, #135	; 0x87
   1835e:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   18360:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   18364:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   18368:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1836a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1836e:	d002      	beq.n	18376 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   18370:	7813      	ldrb	r3, [r2, #0]
   18372:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   18374:	e7f4      	b.n	18360 <gf_double+0x12>
	}
}
   18376:	bd10      	pop	{r4, pc}

00018378 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   18378:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1837a:	b120      	cbz	r0, 18386 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1837c:	2258      	movs	r2, #88	; 0x58
   1837e:	2100      	movs	r1, #0
   18380:	f7ff ff1c 	bl	181bc <_set>
   18384:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   18386:	bd08      	pop	{r3, pc}

00018388 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   18388:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1838a:	4604      	mov	r4, r0
   1838c:	b188      	cbz	r0, 183b2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1838e:	2210      	movs	r2, #16
   18390:	2100      	movs	r1, #0
   18392:	f7ff ff13 	bl	181bc <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   18396:	2210      	movs	r2, #16
   18398:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1839c:	2100      	movs	r1, #0
   1839e:	f7ff ff0d 	bl	181bc <_set>
	s->leftover_offset = 0;
   183a2:	2300      	movs	r3, #0
   183a4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   183a6:	2200      	movs	r2, #0
   183a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   183ac:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   183b0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   183b2:	bd10      	pop	{r4, pc}

000183b4 <tc_cmac_setup>:
{
   183b4:	b570      	push	{r4, r5, r6, lr}
   183b6:	460d      	mov	r5, r1
   183b8:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   183ba:	4604      	mov	r4, r0
   183bc:	b310      	cbz	r0, 18404 <tc_cmac_setup+0x50>
   183be:	b311      	cbz	r1, 18406 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   183c0:	2258      	movs	r2, #88	; 0x58
   183c2:	2100      	movs	r1, #0
   183c4:	f7ff fefa 	bl	181bc <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   183c8:	4629      	mov	r1, r5
	s->sched = sched;
   183ca:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   183cc:	4630      	mov	r0, r6
   183ce:	f7e9 ff8b 	bl	22e8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   183d2:	2210      	movs	r2, #16
   183d4:	2100      	movs	r1, #0
   183d6:	4620      	mov	r0, r4
   183d8:	f7ff fef0 	bl	181bc <_set>
	gf_double (s->K1, s->iv);
   183dc:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   183e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   183e2:	4621      	mov	r1, r4
   183e4:	4620      	mov	r0, r4
   183e6:	f7e9 ffd5 	bl	2394 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   183ea:	4621      	mov	r1, r4
   183ec:	4628      	mov	r0, r5
   183ee:	f7ff ffae 	bl	1834e <gf_double>
	gf_double (s->K2, s->K1);
   183f2:	4629      	mov	r1, r5
   183f4:	f104 0020 	add.w	r0, r4, #32
   183f8:	f7ff ffa9 	bl	1834e <gf_double>
	tc_cmac_init(s);
   183fc:	4620      	mov	r0, r4
   183fe:	f7ff ffc3 	bl	18388 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   18402:	2001      	movs	r0, #1
}
   18404:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   18406:	4608      	mov	r0, r1
   18408:	e7fc      	b.n	18404 <tc_cmac_setup+0x50>

0001840a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1840a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1840e:	460d      	mov	r5, r1
   18410:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   18412:	4604      	mov	r4, r0
   18414:	2800      	cmp	r0, #0
   18416:	d061      	beq.n	184dc <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   18418:	b912      	cbnz	r2, 18420 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1841a:	2001      	movs	r0, #1
}
   1841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   18420:	2900      	cmp	r1, #0
   18422:	d05b      	beq.n	184dc <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   18424:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   18428:	ea50 0301 	orrs.w	r3, r0, r1
   1842c:	d056      	beq.n	184dc <tc_cmac_update+0xd2>
	s->countdown--;
   1842e:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   18432:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   18436:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1843a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1843e:	f1b8 0f00 	cmp.w	r8, #0
   18442:	d02a      	beq.n	1849a <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   18444:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   18448:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1844c:	42be      	cmp	r6, r7
   1844e:	4420      	add	r0, r4
   18450:	d208      	bcs.n	18464 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   18452:	4633      	mov	r3, r6
   18454:	4631      	mov	r1, r6
   18456:	462a      	mov	r2, r5
   18458:	f7ff fea3 	bl	181a2 <_copy>
			s->leftover_offset += data_length;
   1845c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1845e:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   18460:	6466      	str	r6, [r4, #68]	; 0x44
   18462:	e7da      	b.n	1841a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   18464:	463b      	mov	r3, r7
   18466:	462a      	mov	r2, r5
   18468:	4639      	mov	r1, r7
   1846a:	f7ff fe9a 	bl	181a2 <_copy>
		data_length -= remaining_space;
   1846e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   18470:	2300      	movs	r3, #0
   18472:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   18474:	4446      	add	r6, r8
		data += remaining_space;
   18476:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18478:	1e63      	subs	r3, r4, #1
   1847a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1847e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18482:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18486:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   18488:	ea82 0200 	eor.w	r2, r2, r0
   1848c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1848e:	d1f6      	bne.n	1847e <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   18490:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18492:	4621      	mov	r1, r4
   18494:	4620      	mov	r0, r4
   18496:	f7e9 ff7d 	bl	2394 <tc_aes_encrypt>
   1849a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1849e:	2e10      	cmp	r6, #16
   184a0:	d809      	bhi.n	184b6 <tc_cmac_update+0xac>
	if (data_length > 0) {
   184a2:	2e00      	cmp	r6, #0
   184a4:	d0b9      	beq.n	1841a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   184a6:	4633      	mov	r3, r6
   184a8:	462a      	mov	r2, r5
   184aa:	4631      	mov	r1, r6
   184ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   184b0:	f7ff fe77 	bl	181a2 <_copy>
   184b4:	e7d4      	b.n	18460 <tc_cmac_update+0x56>
   184b6:	1e63      	subs	r3, r4, #1
   184b8:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   184ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   184be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   184c2:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   184c4:	ea82 0200 	eor.w	r2, r2, r0
   184c8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   184ca:	d1f6      	bne.n	184ba <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   184cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   184ce:	4621      	mov	r1, r4
   184d0:	4620      	mov	r0, r4
   184d2:	f7e9 ff5f 	bl	2394 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   184d6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   184d8:	3e10      	subs	r6, #16
   184da:	e7e0      	b.n	1849e <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   184dc:	2000      	movs	r0, #0
   184de:	e79d      	b.n	1841c <tc_cmac_update+0x12>

000184e0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   184e0:	b570      	push	{r4, r5, r6, lr}
   184e2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   184e4:	4605      	mov	r5, r0
   184e6:	b1e8      	cbz	r0, 18524 <tc_cmac_final+0x44>
   184e8:	b369      	cbz	r1, 18546 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   184ea:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   184ec:	2a10      	cmp	r2, #16
   184ee:	d11a      	bne.n	18526 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   184f0:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   184f2:	1e63      	subs	r3, r4, #1
   184f4:	3901      	subs	r1, #1
   184f6:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   184fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   184fe:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   18502:	4072      	eors	r2, r6
   18504:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18508:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1850a:	ea82 0206 	eor.w	r2, r2, r6
   1850e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18510:	d1f3      	bne.n	184fa <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   18512:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18514:	4621      	mov	r1, r4
   18516:	4628      	mov	r0, r5
   18518:	f7e9 ff3c 	bl	2394 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1851c:	4620      	mov	r0, r4
   1851e:	f7ff ff2b 	bl	18378 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   18522:	2001      	movs	r0, #1
}
   18524:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   18526:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1852a:	2100      	movs	r1, #0
   1852c:	f1c2 0210 	rsb	r2, r2, #16
   18530:	4420      	add	r0, r4
   18532:	f7ff fe43 	bl	181bc <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   18536:	6c63      	ldr	r3, [r4, #68]	; 0x44
   18538:	4423      	add	r3, r4
   1853a:	2280      	movs	r2, #128	; 0x80
   1853c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   18540:	f104 0120 	add.w	r1, r4, #32
   18544:	e7d5      	b.n	184f2 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   18546:	4608      	mov	r0, r1
   18548:	e7ec      	b.n	18524 <tc_cmac_final+0x44>

0001854a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1854a:	2300      	movs	r3, #0
	list->head = NULL;
   1854c:	e9c0 3300 	strd	r3, r3, [r0]
}
   18550:	4770      	bx	lr

00018552 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   18552:	6803      	ldr	r3, [r0, #0]
   18554:	b923      	cbnz	r3, 18560 <log_list_add_tail+0xe>
		list->head = msg;
   18556:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   18558:	2300      	movs	r3, #0
	list->tail = msg;
   1855a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1855c:	600b      	str	r3, [r1, #0]
}
   1855e:	4770      	bx	lr
		list->tail->next = msg;
   18560:	6843      	ldr	r3, [r0, #4]
   18562:	6019      	str	r1, [r3, #0]
   18564:	e7f8      	b.n	18558 <log_list_add_tail+0x6>

00018566 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   18566:	6800      	ldr	r0, [r0, #0]
   18568:	4770      	bx	lr

0001856a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1856a:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1856c:	b10b      	cbz	r3, 18572 <log_list_head_get+0x8>
		list->head = list->head->next;
   1856e:	681a      	ldr	r2, [r3, #0]
   18570:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   18572:	4618      	mov	r0, r3
   18574:	4770      	bx	lr

00018576 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   18576:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   18578:	f7ea fa0c 	bl	2994 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1857c:	b118      	cbz	r0, 18586 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1857e:	2301      	movs	r3, #1
   18580:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   18582:	2300      	movs	r3, #0
   18584:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   18586:	bd08      	pop	{r3, pc}

00018588 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   18588:	f7ea bd20 	b.w	2fcc <z_timer_cycle_get_32>

0001858c <dummy_timestamp>:
   1858c:	2000      	movs	r0, #0
   1858e:	4770      	bx	lr

00018590 <z_log_get_s_mask>:
	u32_t mask = 0;
   18590:	2300      	movs	r3, #0
{
   18592:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t arg = 0;
   18594:	461a      	mov	r2, r3
	bool arm = false;
   18596:	461c      	mov	r4, r3
				mask |= BIT(arg);
   18598:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1859a:	f810 5b01 	ldrb.w	r5, [r0], #1
   1859e:	b10d      	cbz	r5, 185a4 <z_log_get_s_mask+0x14>
   185a0:	428a      	cmp	r2, r1
   185a2:	d301      	bcc.n	185a8 <z_log_get_s_mask+0x18>
}
   185a4:	4618      	mov	r0, r3
   185a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   185a8:	2d25      	cmp	r5, #37	; 0x25
   185aa:	d102      	bne.n	185b2 <z_log_get_s_mask+0x22>
			arm = !arm;
   185ac:	f084 0401 	eor.w	r4, r4, #1
   185b0:	e7f3      	b.n	1859a <z_log_get_s_mask+0xa>
		} else if (arm && isalpha((int)curr)) {
   185b2:	2c00      	cmp	r4, #0
   185b4:	d0f1      	beq.n	1859a <z_log_get_s_mask+0xa>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   185b6:	f045 0620 	orr.w	r6, r5, #32
   185ba:	3e61      	subs	r6, #97	; 0x61
   185bc:	2e19      	cmp	r6, #25
   185be:	d8ec      	bhi.n	1859a <z_log_get_s_mask+0xa>
			if (curr == 's') {
   185c0:	2d73      	cmp	r5, #115	; 0x73
				mask |= BIT(arg);
   185c2:	bf04      	itt	eq
   185c4:	fa07 f402 	lsleq.w	r4, r7, r2
   185c8:	4323      	orreq	r3, r4
			arg++;
   185ca:	3201      	adds	r2, #1
			arm = false;
   185cc:	2400      	movs	r4, #0
   185ce:	e7e4      	b.n	1859a <z_log_get_s_mask+0xa>

000185d0 <log_0>:
{
   185d0:	b538      	push	{r3, r4, r5, lr}
   185d2:	4605      	mov	r5, r0
   185d4:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   185d6:	f7ff ffce 	bl	18576 <z_log_msg_std_alloc>

	if (msg != NULL) {
   185da:	b128      	cbz	r0, 185e8 <log_0+0x18>
		msg->str = str;
   185dc:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   185de:	4621      	mov	r1, r4
}
   185e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   185e4:	f7ea b8f8 	b.w	27d8 <msg_finalize>
}
   185e8:	bd38      	pop	{r3, r4, r5, pc}

000185ea <log_1>:
{
   185ea:	b570      	push	{r4, r5, r6, lr}
   185ec:	4604      	mov	r4, r0
   185ee:	460e      	mov	r6, r1
   185f0:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   185f2:	f7ff ffc0 	bl	18576 <z_log_msg_std_alloc>

	if (msg != NULL) {
   185f6:	b158      	cbz	r0, 18610 <log_1+0x26>
		msg->str = str;
   185f8:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   185fa:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   185fc:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   185fe:	2201      	movs	r2, #1
   18600:	f362 1407 	bfi	r4, r2, #4, #4
   18604:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   18606:	4629      	mov	r1, r5
}
   18608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1860c:	f7ea b8e4 	b.w	27d8 <msg_finalize>
}
   18610:	bd70      	pop	{r4, r5, r6, pc}

00018612 <log_2>:
{
   18612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18616:	4605      	mov	r5, r0
   18618:	4688      	mov	r8, r1
   1861a:	4617      	mov	r7, r2
   1861c:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1861e:	f7ff ffaa 	bl	18576 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18622:	b160      	cbz	r0, 1863e <log_2+0x2c>
		msg->str = str;
   18624:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   18626:	7a45      	ldrb	r5, [r0, #9]
   18628:	2302      	movs	r3, #2
   1862a:	f363 1507 	bfi	r5, r3, #4, #4
   1862e:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   18630:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg_finalize(msg, src_level);
   18634:	4631      	mov	r1, r6
}
   18636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1863a:	f7ea b8cd 	b.w	27d8 <msg_finalize>
}
   1863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018642 <log_3>:
{
   18642:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18646:	4605      	mov	r5, r0
   18648:	4689      	mov	r9, r1
   1864a:	4690      	mov	r8, r2
   1864c:	461f      	mov	r7, r3
   1864e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   18652:	f7ff ff90 	bl	18576 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18656:	b168      	cbz	r0, 18674 <log_3+0x32>
		msg->str = str;
   18658:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1865a:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
   1865c:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
   1865e:	2303      	movs	r3, #3
   18660:	f363 1507 	bfi	r5, r3, #4, #4
   18664:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
   18666:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg_finalize(msg, src_level);
   1866a:	4631      	mov	r1, r6
}
   1866c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   18670:	f7ea b8b2 	b.w	27d8 <msg_finalize>
}
   18674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018678 <log_n>:
{
   18678:	b510      	push	{r4, lr}
   1867a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1867c:	f000 f83c 	bl	186f8 <log_msg_create_n>
		if (msg == NULL) {
   18680:	b120      	cbz	r0, 1868c <log_n+0x14>
		msg_finalize(msg, src_level);
   18682:	4621      	mov	r1, r4
}
   18684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   18688:	f7ea b8a6 	b.w	27d8 <msg_finalize>
}
   1868c:	bd10      	pop	{r4, pc}

0001868e <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1868e:	7a40      	ldrb	r0, [r0, #9]
}
   18690:	0900      	lsrs	r0, r0, #4
   18692:	4770      	bx	lr

00018694 <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, u32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
   18694:	7a43      	ldrb	r3, [r0, #9]
   18696:	091b      	lsrs	r3, r3, #4
   18698:	428b      	cmp	r3, r1
   1869a:	d916      	bls.n	186ca <log_msg_arg_get+0x36>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1869c:	2b03      	cmp	r3, #3
   1869e:	d803      	bhi.n	186a8 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   186a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   186a4:	6948      	ldr	r0, [r1, #20]
   186a6:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   186a8:	2901      	cmp	r1, #1
   186aa:	d803      	bhi.n	186b4 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   186ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   186b0:	6988      	ldr	r0, [r1, #24]
   186b2:	4770      	bx	lr
	cont = msg->payload.ext.next;
   186b4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   186b6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   186b8:	2906      	cmp	r1, #6
   186ba:	d803      	bhi.n	186c4 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   186bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   186c0:	6848      	ldr	r0, [r1, #4]
   186c2:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   186c4:	3907      	subs	r1, #7
		cont = cont->next;
   186c6:	681b      	ldr	r3, [r3, #0]
   186c8:	e7f6      	b.n	186b8 <log_msg_arg_get+0x24>
		return 0;
   186ca:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
   186cc:	4770      	bx	lr

000186ce <log_msg_put>:
{
   186ce:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   186d0:	1d02      	adds	r2, r0, #4
   186d2:	f3bf 8f5b 	dmb	ish
   186d6:	e852 1f00 	ldrex	r1, [r2]
   186da:	3901      	subs	r1, #1
   186dc:	e842 1c00 	strex	ip, r1, [r2]
   186e0:	f1bc 0f00 	cmp.w	ip, #0
   186e4:	d1f7      	bne.n	186d6 <log_msg_put+0x8>
   186e6:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   186ea:	685b      	ldr	r3, [r3, #4]
   186ec:	b90b      	cbnz	r3, 186f2 <log_msg_put+0x24>
		msg_free(msg);
   186ee:	f7ea b963 	b.w	29b8 <msg_free>
}
   186f2:	4770      	bx	lr

000186f4 <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
   186f4:	6900      	ldr	r0, [r0, #16]
   186f6:	4770      	bx	lr

000186f8 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, u32_t nargs)
{
   186f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186fc:	4682      	mov	sl, r0
   186fe:	4688      	mov	r8, r1
   18700:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   18702:	f7ea f947 	bl	2994 <log_msg_chunk_alloc>
	if (msg != NULL) {
   18706:	4604      	mov	r4, r0
   18708:	b330      	cbz	r0, 18758 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1870a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1870c:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1870e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   18710:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   18712:	8106      	strh	r6, [r0, #8]
   18714:	d909      	bls.n	1872a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   18716:	2202      	movs	r2, #2
   18718:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1871a:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   1871e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   18722:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   18724:	f1b9 0f00 	cmp.w	r9, #0
   18728:	dc0e      	bgt.n	18748 <log_msg_create_n+0x50>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1872a:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1872c:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   18730:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   18734:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   18736:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   18738:	d818      	bhi.n	1876c <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1873a:	00aa      	lsls	r2, r5, #2
   1873c:	4641      	mov	r1, r8
   1873e:	f104 0014 	add.w	r0, r4, #20
   18742:	f000 fa7a 	bl	18c3a <memcpy>
		nargs  = 0U;
   18746:	e007      	b.n	18758 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   18748:	f7ea f924 	bl	2994 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1874c:	4607      	mov	r7, r0
   1874e:	b930      	cbnz	r0, 1875e <log_msg_create_n+0x66>
			msg_free(msg);
   18750:	4620      	mov	r0, r4
   18752:	f7ea f931 	bl	29b8 <msg_free>
			return NULL;
   18756:	463c      	mov	r4, r7
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   18758:	4620      	mov	r0, r4
   1875a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1875e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   18762:	f1a9 0907 	sub.w	r9, r9, #7
   18766:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   18768:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1876a:	e7db      	b.n	18724 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1876c:	4641      	mov	r1, r8
   1876e:	2208      	movs	r2, #8
   18770:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   18774:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   18776:	f000 fa60 	bl	18c3a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1877a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1877c:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   18780:	2d07      	cmp	r5, #7
   18782:	462e      	mov	r6, r5
   18784:	bf28      	it	cs
   18786:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   18788:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1878c:	4641      	mov	r1, r8
   1878e:	1d38      	adds	r0, r7, #4
   18790:	464a      	mov	r2, r9
   18792:	f000 fa52 	bl	18c3a <memcpy>
	while (nargs != 0U) {
   18796:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   18798:	44c8      	add	r8, r9
		cont = cont->next;
   1879a:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1879c:	d1f0      	bne.n	18780 <log_msg_create_n+0x88>
   1879e:	e7db      	b.n	18758 <log_msg_create_n+0x60>

000187a0 <read_str>:
{
   187a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   187a4:	68cd      	ldr	r5, [r1, #12]
{
   187a6:	4606      	mov	r6, r0
				 strlen(attr->user_data));
   187a8:	4628      	mov	r0, r5
{
   187aa:	4698      	mov	r8, r3
   187ac:	460c      	mov	r4, r1
   187ae:	4617      	mov	r7, r2
				 strlen(attr->user_data));
   187b0:	f000 fa20 	bl	18bf4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   187b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   187b8:	9300      	str	r3, [sp, #0]
   187ba:	b280      	uxth	r0, r0
   187bc:	e9cd 5001 	strd	r5, r0, [sp, #4]
   187c0:	4643      	mov	r3, r8
   187c2:	463a      	mov	r2, r7
   187c4:	4621      	mov	r1, r4
   187c6:	4630      	mov	r0, r6
   187c8:	f001 fc51 	bl	1a06e <bt_gatt_attr_read>
}
   187cc:	b004      	add	sp, #16
   187ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000187d2 <get_status>:
	data = get_sub_data(dev, type);
   187d2:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   187d4:	b2c9      	uxtb	r1, r1
	if (data->started) {
   187d6:	220c      	movs	r2, #12
   187d8:	fb02 3101 	mla	r1, r2, r1, r3
   187dc:	7a4b      	ldrb	r3, [r1, #9]
   187de:	b923      	cbnz	r3, 187ea <get_status+0x18>
	if (data->ref > 0) {
   187e0:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   187e2:	fab0 f080 	clz	r0, r0
   187e6:	0940      	lsrs	r0, r0, #5
   187e8:	4770      	bx	lr
   187ea:	2002      	movs	r0, #2
}
   187ec:	4770      	bx	lr

000187ee <clkstarted_handle>:
{
   187ee:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   187f0:	6883      	ldr	r3, [r0, #8]
	sub_data->started = true;
   187f2:	240c      	movs	r4, #12
   187f4:	fb04 3401 	mla	r4, r4, r1, r3
   187f8:	2301      	movs	r3, #1
{
   187fa:	4605      	mov	r5, r0
	sub_data->started = true;
   187fc:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   187fe:	f04f 0320 	mov.w	r3, #32
   18802:	f3ef 8111 	mrs	r1, BASEPRI
   18806:	f383 8811 	msr	BASEPRI, r3
   1880a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1880e:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   18810:	b12b      	cbz	r3, 1881e <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18812:	6860      	ldr	r0, [r4, #4]
   18814:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   18816:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18818:	4283      	cmp	r3, r0
	list->tail = node;
   1881a:	bf08      	it	eq
   1881c:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1881e:	f381 8811 	msr	BASEPRI, r1
   18822:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   18826:	b903      	cbnz	r3, 1882a <clkstarted_handle+0x3c>
}
   18828:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1882a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1882e:	4628      	mov	r0, r5
   18830:	4790      	blx	r2
   18832:	e7e4      	b.n	187fe <clkstarted_handle+0x10>

00018834 <clock_async_start>:
	const struct nrf_clock_control_config *config =
   18834:	6803      	ldr	r3, [r0, #0]
	clk_data = get_sub_data(dev, type);
   18836:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
   1883a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1883e:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
   18840:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
   18842:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
   18844:	b14a      	cbz	r2, 1885a <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
   18846:	230c      	movs	r3, #12
   18848:	4373      	muls	r3, r6
   1884a:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
   1884e:	429a      	cmp	r2, r3
   18850:	d05b      	beq.n	1890a <clock_async_start+0xd6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18852:	b113      	cbz	r3, 1885a <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18854:	681b      	ldr	r3, [r3, #0]
	} while (item);
   18856:	2b00      	cmp	r3, #0
   18858:	d1f9      	bne.n	1884e <clock_async_start+0x1a>
	__asm__ volatile(
   1885a:	f04f 0320 	mov.w	r3, #32
   1885e:	f3ef 8011 	mrs	r0, BASEPRI
   18862:	f383 8811 	msr	BASEPRI, r3
   18866:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1886a:	210c      	movs	r1, #12
   1886c:	4371      	muls	r1, r6
   1886e:	eb0c 0301 	add.w	r3, ip, r1
   18872:	7a1c      	ldrb	r4, [r3, #8]
   18874:	3401      	adds	r4, #1
   18876:	b2e4      	uxtb	r4, r4
   18878:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   1887a:	f380 8811 	msr	BASEPRI, r0
   1887e:	f3bf 8f6f 	isb	sy
	if (data) {
   18882:	b332      	cbz	r2, 188d2 <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
   18884:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   18888:	f04f 0e03 	mov.w	lr, #3
   1888c:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
   18890:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
   18892:	b9a0      	cbnz	r0, 188be <clock_async_start+0x8a>
	__asm__ volatile(
   18894:	f04f 0e20 	mov.w	lr, #32
   18898:	f3ef 8811 	mrs	r8, BASEPRI
   1889c:	f38e 8811 	msr	BASEPRI, lr
   188a0:	f3bf 8f6f 	isb	sy
	parent->next = child;
   188a4:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
   188a6:	f8d3 e004 	ldr.w	lr, [r3, #4]
   188aa:	f1be 0f00 	cmp.w	lr, #0
   188ae:	d11f      	bne.n	188f0 <clock_async_start+0xbc>
	list->tail = node;
   188b0:	605a      	str	r2, [r3, #4]
	list->head = node;
   188b2:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
   188b6:	f388 8811 	msr	BASEPRI, r8
   188ba:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   188be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   188c2:	2103      	movs	r1, #3
   188c4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
   188c8:	b118      	cbz	r0, 188d2 <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
   188ca:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
   188ce:	4628      	mov	r0, r5
   188d0:	4798      	blx	r3
	if (ref == 1) {
   188d2:	2c01      	cmp	r4, #1
   188d4:	d10a      	bne.n	188ec <clock_async_start+0xb8>
		do_start =  (config->start_handler) ?
   188d6:	ea4f 1806 	mov.w	r8, r6, lsl #4
   188da:	f857 3008 	ldr.w	r3, [r7, r8]
				config->start_handler(dev) : true;
   188de:	b95b      	cbnz	r3, 188f8 <clock_async_start+0xc4>
			nrf_clock_task_trigger(NRF_CLOCK,
   188e0:	4447      	add	r7, r8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   188e2:	2201      	movs	r2, #1
   188e4:	7abb      	ldrb	r3, [r7, #10]
   188e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   188ea:	601a      	str	r2, [r3, #0]
	return 0;
   188ec:	2000      	movs	r0, #0
   188ee:	e00e      	b.n	1890e <clock_async_start+0xda>
	parent->next = child;
   188f0:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
   188f4:	605a      	str	r2, [r3, #4]
   188f6:	e7de      	b.n	188b6 <clock_async_start+0x82>
				config->start_handler(dev) : true;
   188f8:	4628      	mov	r0, r5
   188fa:	4798      	blx	r3
   188fc:	2800      	cmp	r0, #0
   188fe:	d1ef      	bne.n	188e0 <clock_async_start+0xac>
			clkstarted_handle(dev, type);
   18900:	4631      	mov	r1, r6
   18902:	4628      	mov	r0, r5
   18904:	f7ff ff73 	bl	187ee <clkstarted_handle>
   18908:	e7f0      	b.n	188ec <clock_async_start+0xb8>
		return -EBUSY;
   1890a:	f06f 000f 	mvn.w	r0, #15
}
   1890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018912 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   18912:	2200      	movs	r2, #0
   18914:	f7ff bf8e 	b.w	18834 <clock_async_start>

00018918 <clk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   18918:	2200      	movs	r2, #0
{
   1891a:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1891c:	2101      	movs	r1, #1
{
   1891e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   18920:	4610      	mov	r0, r2
   18922:	f7ea fc01 	bl	3128 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   18926:	2000      	movs	r0, #0
   18928:	f7ea fbcc 	bl	30c4 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1892c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18930:	2201      	movs	r2, #1
   18932:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   18936:	2203      	movs	r2, #3
   18938:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1893c:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
   1893e:	2000      	movs	r0, #0
	list->tail = NULL;
   18940:	e9c3 0000 	strd	r0, r0, [r3]
   18944:	68a3      	ldr	r3, [r4, #8]
   18946:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   1894a:	bd10      	pop	{r4, pc}

0001894c <clock_stop>:
	const struct nrf_clock_control_config *config =
   1894c:	6802      	ldr	r2, [r0, #0]
{
   1894e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
   18952:	f8d2 8008 	ldr.w	r8, [r2, #8]
	data = get_sub_data(dev, type);
   18956:	6887      	ldr	r7, [r0, #8]
   18958:	b2cc      	uxtb	r4, r1
	__asm__ volatile(
   1895a:	f04f 0320 	mov.w	r3, #32
   1895e:	f3ef 8611 	mrs	r6, BASEPRI
   18962:	f383 8811 	msr	BASEPRI, r3
   18966:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1896a:	220c      	movs	r2, #12
   1896c:	4362      	muls	r2, r4
   1896e:	18b9      	adds	r1, r7, r2
   18970:	7a0b      	ldrb	r3, [r1, #8]
   18972:	b343      	cbz	r3, 189c6 <clock_stop+0x7a>
	data->ref--;
   18974:	3b01      	subs	r3, #1
   18976:	b2db      	uxtb	r3, r3
   18978:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   1897a:	bb3b      	cbnz	r3, 189cc <clock_stop+0x80>
		do_stop =  (config->stop_handler) ?
   1897c:	0125      	lsls	r5, r4, #4
	list->head = NULL;
   1897e:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   18980:	604b      	str	r3, [r1, #4]
   18982:	eb08 0305 	add.w	r3, r8, r5
   18986:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   18988:	b9cb      	cbnz	r3, 189be <clock_stop+0x72>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1898a:	4445      	add	r5, r8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1898c:	2201      	movs	r2, #1
   1898e:	7aeb      	ldrb	r3, [r5, #11]
   18990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18994:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18996:	892b      	ldrh	r3, [r5, #8]
   18998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1899c:	2200      	movs	r2, #0
   1899e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   189a0:	681b      	ldr	r3, [r3, #0]
   189a2:	9301      	str	r3, [sp, #4]
    (void)dummy;
   189a4:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
   189a6:	210c      	movs	r1, #12
   189a8:	fb01 7404 	mla	r4, r1, r4, r7
   189ac:	2000      	movs	r0, #0
   189ae:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   189b0:	f386 8811 	msr	BASEPRI, r6
   189b4:	f3bf 8f6f 	isb	sy
}
   189b8:	b002      	add	sp, #8
   189ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
   189be:	4798      	blx	r3
   189c0:	2800      	cmp	r0, #0
   189c2:	d1e2      	bne.n	1898a <clock_stop+0x3e>
   189c4:	e7ef      	b.n	189a6 <clock_stop+0x5a>
		err = -EALREADY;
   189c6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   189ca:	e7f1      	b.n	189b0 <clock_stop+0x64>
	int err = 0;
   189cc:	2000      	movs	r0, #0
   189ce:	e7ef      	b.n	189b0 <clock_stop+0x64>

000189d0 <st7789v_read>:
}
   189d0:	f06f 0022 	mvn.w	r0, #34	; 0x22
   189d4:	4770      	bx	lr

000189d6 <st7789v_get_framebuffer>:
}
   189d6:	2000      	movs	r0, #0
   189d8:	4770      	bx	lr

000189da <st7789v_set_brightness>:
}
   189da:	f06f 0022 	mvn.w	r0, #34	; 0x22
   189de:	4770      	bx	lr

000189e0 <k_sleep>:
	return z_impl_k_sleep(ms);
   189e0:	f7fe bc80 	b.w	172e4 <z_impl_k_sleep>

000189e4 <st7789v_get_capabilities>:
{
   189e4:	b538      	push	{r3, r4, r5, lr}
   189e6:	460c      	mov	r4, r1
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
   189e8:	6885      	ldr	r5, [r0, #8]
	memset(capabilities, 0, sizeof(struct display_capabilities));
   189ea:	2210      	movs	r2, #16
   189ec:	2100      	movs	r1, #0
   189ee:	4620      	mov	r0, r4
   189f0:	f000 f94d 	bl	18c8e <memset>
	capabilities->x_resolution = data->width;
   189f4:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
   189f6:	8023      	strh	r3, [r4, #0]
	capabilities->y_resolution = data->height;
   189f8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   189fa:	8063      	strh	r3, [r4, #2]
	capabilities->supported_pixel_formats = PIXEL_FORMAT_RGB_565;
   189fc:	2310      	movs	r3, #16
   189fe:	6063      	str	r3, [r4, #4]
	capabilities->current_pixel_format = PIXEL_FORMAT_RGB_565;
   18a00:	81a3      	strh	r3, [r4, #12]
}
   18a02:	bd38      	pop	{r3, r4, r5, pc}

00018a04 <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
   18a04:	b410      	push	{r4}
   18a06:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
   18a08:	6842      	ldr	r2, [r0, #4]
   18a0a:	6854      	ldr	r4, [r2, #4]
   18a0c:	460a      	mov	r2, r1
   18a0e:	46a4      	mov	ip, r4
   18a10:	2100      	movs	r1, #0
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
   18a12:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   18a14:	4760      	bx	ip

00018a16 <st7789v_set_contrast>:
   18a16:	f06f 0022 	mvn.w	r0, #34	; 0x22
   18a1a:	4770      	bx	lr

00018a1c <st7789v_transmit>:
{
   18a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18a20:	4605      	mov	r5, r0
   18a22:	b087      	sub	sp, #28
   18a24:	4698      	mov	r8, r3
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   18a26:	462c      	mov	r4, r5
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   18a28:	f10d 0307 	add.w	r3, sp, #7
{
   18a2c:	f88d 1007 	strb.w	r1, [sp, #7]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   18a30:	9302      	str	r3, [sp, #8]
   18a32:	2601      	movs	r6, #1
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   18a34:	ab02      	add	r3, sp, #8
{
   18a36:	4617      	mov	r7, r2
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
   18a38:	2112      	movs	r1, #18
   18a3a:	2200      	movs	r2, #0
   18a3c:	6a00      	ldr	r0, [r0, #32]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   18a3e:	9603      	str	r6, [sp, #12]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   18a40:	e9cd 3604 	strd	r3, r6, [sp, #16]
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
   18a44:	f7ff ffde 	bl	18a04 <gpio_pin_write>
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   18a48:	f854 0b04 	ldr.w	r0, [r4], #4
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   18a4c:	6843      	ldr	r3, [r0, #4]
   18a4e:	aa04      	add	r2, sp, #16
   18a50:	f8d3 9000 	ldr.w	r9, [r3]
   18a54:	4621      	mov	r1, r4
   18a56:	2300      	movs	r3, #0
   18a58:	47c8      	blx	r9
	if (tx_data != NULL) {
   18a5a:	b16f      	cbz	r7, 18a78 <st7789v_transmit+0x5c>
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
   18a5c:	4632      	mov	r2, r6
   18a5e:	2112      	movs	r1, #18
   18a60:	6a28      	ldr	r0, [r5, #32]
		tx_buf.len = tx_count;
   18a62:	e9cd 7802 	strd	r7, r8, [sp, #8]
	gpio_pin_write(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, !is_cmd);
   18a66:	f7ff ffcd 	bl	18a04 <gpio_pin_write>
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   18a6a:	6828      	ldr	r0, [r5, #0]
   18a6c:	6843      	ldr	r3, [r0, #4]
   18a6e:	aa04      	add	r2, sp, #16
   18a70:	681d      	ldr	r5, [r3, #0]
   18a72:	4621      	mov	r1, r4
   18a74:	2300      	movs	r3, #0
   18a76:	47a8      	blx	r5
}
   18a78:	b007      	add	sp, #28
   18a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00018a7e <st7789v_blanking_on>:
{
   18a7e:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_OFF, NULL, 0);
   18a80:	2300      	movs	r3, #0
   18a82:	461a      	mov	r2, r3
   18a84:	2128      	movs	r1, #40	; 0x28
   18a86:	6880      	ldr	r0, [r0, #8]
   18a88:	f7ff ffc8 	bl	18a1c <st7789v_transmit>
}
   18a8c:	2000      	movs	r0, #0
   18a8e:	bd08      	pop	{r3, pc}

00018a90 <st7789v_blanking_off>:
{
   18a90:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_ON, NULL, 0);
   18a92:	2300      	movs	r3, #0
   18a94:	461a      	mov	r2, r3
   18a96:	2129      	movs	r1, #41	; 0x29
   18a98:	6880      	ldr	r0, [r0, #8]
   18a9a:	f7ff ffbf 	bl	18a1c <st7789v_transmit>
}
   18a9e:	2000      	movs	r0, #0
   18aa0:	bd08      	pop	{r3, pc}

00018aa2 <st7789v_write>:
{
   18aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
   18aa6:	6885      	ldr	r5, [r0, #8]
	u16_t ram_x = x + data->x_offset;
   18aa8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
	u16_t ram_y = y + data->y_offset;
   18aaa:	f8b5 802a 	ldrh.w	r8, [r5, #42]	; 0x2a
{
   18aae:	461c      	mov	r4, r3
	st7789v_set_mem_area(data, x, y, desc->width, desc->height);
   18ab0:	889b      	ldrh	r3, [r3, #4]
   18ab2:	88e6      	ldrh	r6, [r4, #6]
	u16_t ram_x = x + data->x_offset;
   18ab4:	4401      	add	r1, r0
   18ab6:	b289      	uxth	r1, r1
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   18ab8:	3b01      	subs	r3, #1
{
   18aba:	b085      	sub	sp, #20
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   18abc:	440b      	add	r3, r1
	u16_t ram_y = y + data->y_offset;
   18abe:	4490      	add	r8, r2
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   18ac0:	ba5b      	rev16	r3, r3
	spi_data[0] = sys_cpu_to_be16(ram_x);
   18ac2:	ba4a      	rev16	r2, r1
	u16_t ram_y = y + data->y_offset;
   18ac4:	fa1f f888 	uxth.w	r8, r8
	spi_data[0] = sys_cpu_to_be16(ram_x);
   18ac8:	f8ad 2008 	strh.w	r2, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   18acc:	f8ad 300a 	strh.w	r3, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
   18ad0:	aa02      	add	r2, sp, #8
   18ad2:	2304      	movs	r3, #4
   18ad4:	212a      	movs	r1, #42	; 0x2a
   18ad6:	4628      	mov	r0, r5
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   18ad8:	3e01      	subs	r6, #1
{
   18ada:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   18adc:	4446      	add	r6, r8
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
   18ade:	f7ff ff9d 	bl	18a1c <st7789v_transmit>
	spi_data[0] = sys_cpu_to_be16(ram_y);
   18ae2:	fa98 f398 	rev16.w	r3, r8
   18ae6:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   18aea:	ba76      	rev16	r6, r6
	st7789v_transmit(data, ST7789V_CMD_RASET, (u8_t *)&spi_data[0], 4);
   18aec:	2304      	movs	r3, #4
   18aee:	aa02      	add	r2, sp, #8
   18af0:	212b      	movs	r1, #43	; 0x2b
   18af2:	4628      	mov	r0, r5
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   18af4:	f8ad 600a 	strh.w	r6, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_RASET, (u8_t *)&spi_data[0], 4);
   18af8:	f7ff ff90 	bl	18a1c <st7789v_transmit>
	if (desc->pitch > desc->width) {
   18afc:	88a3      	ldrh	r3, [r4, #4]
   18afe:	8922      	ldrh	r2, [r4, #8]
   18b00:	88e6      	ldrh	r6, [r4, #6]
		nbr_of_writes = desc->height;
   18b02:	429a      	cmp	r2, r3
   18b04:	bf84      	itt	hi
   18b06:	46b1      	movhi	r9, r6
   18b08:	2601      	movhi	r6, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
   18b0a:	fb06 f303 	mul.w	r3, r6, r3
   18b0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18b12:	463a      	mov	r2, r7
   18b14:	f04f 012c 	mov.w	r1, #44	; 0x2c
   18b18:	4628      	mov	r0, r5
		nbr_of_writes = desc->height;
   18b1a:	bf98      	it	ls
   18b1c:	f04f 0901 	movls.w	r9, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
   18b20:	f7ff ff7c 	bl	18a1c <st7789v_transmit>
	tx_bufs.count = 1;
   18b24:	2301      	movs	r3, #1
   18b26:	9303      	str	r3, [sp, #12]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   18b28:	8923      	ldrh	r3, [r4, #8]
	tx_bufs.buffers = &tx_buf;
   18b2a:	f8cd d008 	str.w	sp, [sp, #8]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   18b2e:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   18b32:	f04f 0800 	mov.w	r8, #0
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   18b36:	f105 0a04 	add.w	sl, r5, #4
   18b3a:	f108 0801 	add.w	r8, r8, #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   18b3e:	fa1f f388 	uxth.w	r3, r8
   18b42:	4599      	cmp	r9, r3
   18b44:	d803      	bhi.n	18b4e <st7789v_write+0xac>
}
   18b46:	2000      	movs	r0, #0
   18b48:	b005      	add	sp, #20
   18b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
   18b4e:	88a3      	ldrh	r3, [r4, #4]
		tx_buf.buf = (void *)write_data_start;
   18b50:	9700      	str	r7, [sp, #0]
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
   18b52:	4373      	muls	r3, r6
   18b54:	005b      	lsls	r3, r3, #1
   18b56:	9301      	str	r3, [sp, #4]
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   18b58:	6828      	ldr	r0, [r5, #0]
   18b5a:	6843      	ldr	r3, [r0, #4]
   18b5c:	aa02      	add	r2, sp, #8
   18b5e:	f8d3 b000 	ldr.w	fp, [r3]
   18b62:	4651      	mov	r1, sl
   18b64:	2300      	movs	r3, #0
   18b66:	47d8      	blx	fp
		write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   18b68:	8923      	ldrh	r3, [r4, #8]
   18b6a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
   18b6e:	e7e4      	b.n	18b3a <st7789v_write+0x98>

00018b70 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   18b70:	4770      	bx	lr

00018b72 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   18b72:	4770      	bx	lr

00018b74 <z_irq_spurious>:
	z_arm_reserved();
   18b74:	f7ea bb4a 	b.w	320c <z_arm_bus_fault>

00018b78 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   18b78:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   18b7a:	6800      	ldr	r0, [r0, #0]
   18b7c:	f7ea bb50 	b.w	3220 <z_arm_fatal_error>

00018b80 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   18b80:	b508      	push	{r3, lr}
	handler();
   18b82:	f7ea fb9f 	bl	32c4 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   18b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   18b8a:	f7ea ba39 	b.w	3000 <z_arm_exc_exit>

00018b8e <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   18b8e:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   18b90:	2100      	movs	r1, #0
   18b92:	a801      	add	r0, sp, #4
   18b94:	f7ea ff78 	bl	3a88 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   18b98:	b003      	add	sp, #12
   18b9a:	f85d fb04 	ldr.w	pc, [sp], #4

00018b9e <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   18b9e:	3901      	subs	r1, #1
   18ba0:	4603      	mov	r3, r0
   18ba2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   18ba6:	b90a      	cbnz	r2, 18bac <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   18ba8:	701a      	strb	r2, [r3, #0]

	return dest;
}
   18baa:	4770      	bx	lr
		*d = *s;
   18bac:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   18bb0:	e7f7      	b.n	18ba2 <strcpy+0x4>

00018bb2 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   18bb2:	b570      	push	{r4, r5, r6, lr}
   18bb4:	3901      	subs	r1, #1
   18bb6:	4605      	mov	r5, r0
   18bb8:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   18bba:	b142      	cbz	r2, 18bce <strncpy+0x1c>
   18bbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   18bc0:	1e56      	subs	r6, r2, #1
   18bc2:	b92b      	cbnz	r3, 18bd0 <strncpy+0x1e>
   18bc4:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   18bc6:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   18bca:	42a2      	cmp	r2, r4
   18bcc:	d1fb      	bne.n	18bc6 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   18bce:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   18bd0:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   18bd4:	4632      	mov	r2, r6
   18bd6:	e7ef      	b.n	18bb8 <strncpy+0x6>

00018bd8 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   18bd8:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   18bda:	7802      	ldrb	r2, [r0, #0]
   18bdc:	428a      	cmp	r2, r1
   18bde:	4603      	mov	r3, r0
   18be0:	f100 0001 	add.w	r0, r0, #1
   18be4:	d004      	beq.n	18bf0 <strchr+0x18>
   18be6:	2a00      	cmp	r2, #0
   18be8:	d1f7      	bne.n	18bda <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   18bea:	2900      	cmp	r1, #0
   18bec:	bf18      	it	ne
   18bee:	2300      	movne	r3, #0
}
   18bf0:	4618      	mov	r0, r3
   18bf2:	4770      	bx	lr

00018bf4 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   18bf4:	2300      	movs	r3, #0

	while (*s != '\0') {
   18bf6:	5cc2      	ldrb	r2, [r0, r3]
   18bf8:	b90a      	cbnz	r2, 18bfe <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   18bfa:	4618      	mov	r0, r3
   18bfc:	4770      	bx	lr
		n++;
   18bfe:	3301      	adds	r3, #1
   18c00:	e7f9      	b.n	18bf6 <strlen+0x2>

00018c02 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   18c02:	3801      	subs	r0, #1
   18c04:	3901      	subs	r1, #1
   18c06:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   18c0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   18c0e:	4293      	cmp	r3, r2
   18c10:	d101      	bne.n	18c16 <strcmp+0x14>
   18c12:	2b00      	cmp	r3, #0
   18c14:	d1f7      	bne.n	18c06 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   18c16:	1a98      	subs	r0, r3, r2
   18c18:	4770      	bx	lr

00018c1a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   18c1a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   18c1c:	b15a      	cbz	r2, 18c36 <memcmp+0x1c>
   18c1e:	3901      	subs	r1, #1
   18c20:	1884      	adds	r4, r0, r2
   18c22:	f810 2b01 	ldrb.w	r2, [r0], #1
   18c26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   18c2a:	42a0      	cmp	r0, r4
   18c2c:	d001      	beq.n	18c32 <memcmp+0x18>
   18c2e:	429a      	cmp	r2, r3
   18c30:	d0f7      	beq.n	18c22 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   18c32:	1ad0      	subs	r0, r2, r3
}
   18c34:	bd10      	pop	{r4, pc}
		return 0;
   18c36:	4610      	mov	r0, r2
   18c38:	e7fc      	b.n	18c34 <memcmp+0x1a>

00018c3a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   18c3a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   18c3c:	ea81 0400 	eor.w	r4, r1, r0
   18c40:	07a5      	lsls	r5, r4, #30
   18c42:	4603      	mov	r3, r0
   18c44:	d00b      	beq.n	18c5e <memcpy+0x24>
   18c46:	3b01      	subs	r3, #1
   18c48:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   18c4a:	4291      	cmp	r1, r2
   18c4c:	d11a      	bne.n	18c84 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   18c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   18c50:	2a00      	cmp	r2, #0
   18c52:	d0fc      	beq.n	18c4e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   18c54:	f811 4b01 	ldrb.w	r4, [r1], #1
   18c58:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   18c5c:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   18c5e:	079c      	lsls	r4, r3, #30
   18c60:	d1f6      	bne.n	18c50 <memcpy+0x16>
   18c62:	0895      	lsrs	r5, r2, #2
   18c64:	00ac      	lsls	r4, r5, #2
   18c66:	1f1e      	subs	r6, r3, #4
   18c68:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   18c6a:	42b9      	cmp	r1, r7
   18c6c:	d105      	bne.n	18c7a <memcpy+0x40>
   18c6e:	f06f 0603 	mvn.w	r6, #3
   18c72:	fb06 2205 	mla	r2, r6, r5, r2
   18c76:	4423      	add	r3, r4
   18c78:	e7e5      	b.n	18c46 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   18c7a:	f851 cb04 	ldr.w	ip, [r1], #4
   18c7e:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   18c82:	e7f2      	b.n	18c6a <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   18c84:	f811 4b01 	ldrb.w	r4, [r1], #1
   18c88:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   18c8c:	e7dd      	b.n	18c4a <memcpy+0x10>

00018c8e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   18c8e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   18c90:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   18c92:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   18c94:	079c      	lsls	r4, r3, #30
   18c96:	d110      	bne.n	18cba <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   18c98:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   18c9c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   18ca0:	0894      	lsrs	r4, r2, #2
   18ca2:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   18ca6:	42b3      	cmp	r3, r6
   18ca8:	d10d      	bne.n	18cc6 <memset+0x38>
   18caa:	f06f 0503 	mvn.w	r5, #3
   18cae:	fb05 2404 	mla	r4, r5, r4, r2
   18cb2:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   18cb4:	42a3      	cmp	r3, r4
   18cb6:	d109      	bne.n	18ccc <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   18cb8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   18cba:	2a00      	cmp	r2, #0
   18cbc:	d0fc      	beq.n	18cb8 <memset+0x2a>
		*(d_byte++) = c_byte;
   18cbe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   18cc2:	3a01      	subs	r2, #1
   18cc4:	e7e6      	b.n	18c94 <memset+0x6>
		*(d_word++) = c_word;
   18cc6:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   18cca:	e7ec      	b.n	18ca6 <memset+0x18>
		*(d_byte++) = c_byte;
   18ccc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   18cd0:	e7f0      	b.n	18cb4 <memset+0x26>

00018cd2 <_to_x>:
{
   18cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
   18cd4:	4603      	mov	r3, r0
		unsigned int d = n % base;
   18cd6:	fbb1 f7f2 	udiv	r7, r1, r2
   18cda:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   18cde:	2d09      	cmp	r5, #9
   18ce0:	bf8c      	ite	hi
   18ce2:	2627      	movhi	r6, #39	; 0x27
   18ce4:	2600      	movls	r6, #0
   18ce6:	461c      	mov	r4, r3
   18ce8:	3530      	adds	r5, #48	; 0x30
   18cea:	4435      	add	r5, r6
	} while (n);
   18cec:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   18cee:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   18cf2:	d206      	bcs.n	18d02 <_to_x+0x30>
	*buf = 0;
   18cf4:	2200      	movs	r2, #0
   18cf6:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   18cf8:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   18cfa:	4283      	cmp	r3, r0
   18cfc:	d804      	bhi.n	18d08 <_to_x+0x36>
}
   18cfe:	4620      	mov	r0, r4
   18d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   18d02:	4639      	mov	r1, r7
   18d04:	4623      	mov	r3, r4
   18d06:	e7e6      	b.n	18cd6 <_to_x+0x4>
		char tmp = *buf;
   18d08:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   18d0a:	7801      	ldrb	r1, [r0, #0]
   18d0c:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   18d10:	f800 2b01 	strb.w	r2, [r0], #1
   18d14:	e7f1      	b.n	18cfa <_to_x+0x28>

00018d16 <_rlrshift>:
{
   18d16:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   18d18:	e9d0 6500 	ldrd	r6, r5, [r0]
   18d1c:	0872      	lsrs	r2, r6, #1
   18d1e:	f006 0301 	and.w	r3, r6, #1
   18d22:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   18d26:	189b      	adds	r3, r3, r2
   18d28:	f04f 0100 	mov.w	r1, #0
   18d2c:	ea4f 0455 	mov.w	r4, r5, lsr #1
   18d30:	eb44 0101 	adc.w	r1, r4, r1
   18d34:	e9c0 3100 	strd	r3, r1, [r0]
}
   18d38:	bd70      	pop	{r4, r5, r6, pc}

00018d3a <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   18d3a:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   18d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
   18d42:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
   18d44:	f04f 0705 	mov.w	r7, #5
   18d48:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
   18d4c:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
   18d50:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
   18d54:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
   18d58:	fb07 f10e 	mul.w	r1, r7, lr
   18d5c:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   18d60:	08f2      	lsrs	r2, r6, #3
   18d62:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   18d66:	fbb2 f1f7 	udiv	r1, r2, r7
   18d6a:	00ca      	lsls	r2, r1, #3
		quot += q;
   18d6c:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   18d70:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   18d74:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   18d78:	fba2 2307 	umull	r2, r3, r2, r7
   18d7c:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   18d7e:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   18d82:	eb18 0403 	adds.w	r4, r8, r3
   18d86:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   18d8a:	e9c0 4500 	strd	r4, r5, [r0]
}
   18d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00018d92 <_get_digit>:
	if (*digit_count > 0) {
   18d92:	680b      	ldr	r3, [r1, #0]
   18d94:	2b00      	cmp	r3, #0
{
   18d96:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   18d98:	dd10      	ble.n	18dbc <_get_digit+0x2a>
		*digit_count -= 1;
   18d9a:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
   18d9c:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
   18d9e:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   18da0:	6844      	ldr	r4, [r0, #4]
   18da2:	210a      	movs	r1, #10
   18da4:	fba2 5601 	umull	r5, r6, r2, r1
   18da8:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   18dac:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   18db0:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   18db4:	0f31      	lsrs	r1, r6, #28
   18db6:	3130      	adds	r1, #48	; 0x30
}
   18db8:	4608      	mov	r0, r1
   18dba:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   18dbc:	2130      	movs	r1, #48	; 0x30
   18dbe:	e7fb      	b.n	18db8 <_get_digit+0x26>

00018dc0 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   18dc0:	684b      	ldr	r3, [r1, #4]
   18dc2:	2b01      	cmp	r3, #1
   18dc4:	dd07      	ble.n	18dd6 <sprintf_out+0x16>
		*(p->ptr) = c;
   18dc6:	680b      	ldr	r3, [r1, #0]
   18dc8:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   18dca:	680b      	ldr	r3, [r1, #0]
   18dcc:	3301      	adds	r3, #1
   18dce:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   18dd0:	684b      	ldr	r3, [r1, #4]
   18dd2:	3b01      	subs	r3, #1
   18dd4:	604b      	str	r3, [r1, #4]
}
   18dd6:	2000      	movs	r0, #0
   18dd8:	4770      	bx	lr

00018dda <display_get_capabilities>:
   18dda:	6843      	ldr	r3, [r0, #4]
   18ddc:	69db      	ldr	r3, [r3, #28]
   18dde:	4718      	bx	r3

00018de0 <lvgl_flush_cb_mono>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_mono(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   18de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u16_t w = area->x2 - area->x1 + 1;
   18de4:	888c      	ldrh	r4, [r1, #4]
   18de6:	880b      	ldrh	r3, [r1, #0]
	u16_t h = area->y2 - area->y1 + 1;
   18de8:	88ce      	ldrh	r6, [r1, #6]
	struct device *display_dev = (struct device *)disp_drv->user_data;
   18dea:	f8d0 9020 	ldr.w	r9, [r0, #32]
	u16_t w = area->x2 - area->x1 + 1;
   18dee:	3401      	adds	r4, #1
   18df0:	1ae4      	subs	r4, r4, r3
	u16_t h = area->y2 - area->y1 + 1;
   18df2:	884b      	ldrh	r3, [r1, #2]
   18df4:	3601      	adds	r6, #1
{
   18df6:	b08b      	sub	sp, #44	; 0x2c
	u16_t h = area->y2 - area->y1 + 1;
   18df8:	1af6      	subs	r6, r6, r3
	u16_t w = area->x2 - area->x1 + 1;
   18dfa:	b2a4      	uxth	r4, r4
{
   18dfc:	460d      	mov	r5, r1
	u16_t h = area->y2 - area->y1 + 1;
   18dfe:	b2b6      	uxth	r6, r6
	struct display_capabilities cap;
	struct display_buffer_descriptor desc;

	display_get_capabilities(display_dev, &cap);
   18e00:	a906      	add	r1, sp, #24
{
   18e02:	4607      	mov	r7, r0
	display_get_capabilities(display_dev, &cap);
   18e04:	4648      	mov	r0, r9
{
   18e06:	4690      	mov	r8, r2
	display_get_capabilities(display_dev, &cap);
   18e08:	f7ff ffe7 	bl	18dda <display_get_capabilities>

	desc.buf_size = (w * h)/8U;
   18e0c:	fb06 f304 	mul.w	r3, r6, r4
   18e10:	08db      	lsrs	r3, r3, #3
   18e12:	9303      	str	r3, [sp, #12]
	return api->write(dev, x, y, desc, buf);
   18e14:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18e18:	f8cd 8000 	str.w	r8, [sp]
	desc.width = w;
   18e1c:	f8ad 4010 	strh.w	r4, [sp, #16]
	desc.pitch = w;
   18e20:	f8ad 4014 	strh.w	r4, [sp, #20]
	desc.height = h;
   18e24:	f8ad 6012 	strh.w	r6, [sp, #18]
   18e28:	689c      	ldr	r4, [r3, #8]
   18e2a:	886a      	ldrh	r2, [r5, #2]
   18e2c:	8829      	ldrh	r1, [r5, #0]
   18e2e:	ab03      	add	r3, sp, #12
   18e30:	4648      	mov	r0, r9
   18e32:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);
	if (cap.screen_info & SCREEN_INFO_DOUBLE_BUFFER) {
   18e34:	9b08      	ldr	r3, [sp, #32]
   18e36:	071b      	lsls	r3, r3, #28
   18e38:	d509      	bpl.n	18e4e <lvgl_flush_cb_mono+0x6e>
   18e3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18e3e:	f8cd 8000 	str.w	r8, [sp]
   18e42:	689c      	ldr	r4, [r3, #8]
   18e44:	886a      	ldrh	r2, [r5, #2]
   18e46:	8829      	ldrh	r1, [r5, #0]
   18e48:	ab03      	add	r3, sp, #12
   18e4a:	4648      	mov	r0, r9
   18e4c:	47a0      	blx	r4
		display_write(display_dev, area->x1, area->y1, &desc,
				(void *) color_p);
	}

	lv_disp_flush_ready(disp_drv);
   18e4e:	4638      	mov	r0, r7
   18e50:	f004 f897 	bl	1cf82 <lv_disp_flush_ready>
}
   18e54:	b00b      	add	sp, #44	; 0x2c
   18e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00018e5a <lvgl_set_px_cb_mono>:


void lvgl_set_px_cb_mono(struct _disp_drv_t *disp_drv,
		u8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   18e5a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct device *display_dev = (struct device *)disp_drv->user_data;
	u8_t *buf_xy;
	u8_t bit;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   18e5e:	6a00      	ldr	r0, [r0, #32]
{
   18e60:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
   18e64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   18e66:	460f      	mov	r7, r1
	display_get_capabilities(display_dev, &cap);
   18e68:	4669      	mov	r1, sp
{
   18e6a:	4690      	mov	r8, r2
   18e6c:	461c      	mov	r4, r3
	display_get_capabilities(display_dev, &cap);
   18e6e:	f7ff ffb4 	bl	18dda <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   18e72:	9802      	ldr	r0, [sp, #8]
   18e74:	f010 0f01 	tst.w	r0, #1
   18e78:	f000 0002 	and.w	r0, r0, #2
   18e7c:	d01f      	beq.n	18ebe <lvgl_set_px_cb_mono+0x64>
		buf_xy = buf + x + y/8 * buf_w;
   18e7e:	2e00      	cmp	r6, #0
   18e80:	4631      	mov	r1, r6
   18e82:	bfb8      	it	lt
   18e84:	1df1      	addlt	r1, r6, #7
   18e86:	10c9      	asrs	r1, r1, #3
   18e88:	fb11 4108 	smlabb	r1, r1, r8, r4
   18e8c:	4439      	add	r1, r7

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   18e8e:	4273      	negs	r3, r6
   18e90:	f006 0407 	and.w	r4, r6, #7
   18e94:	f003 0307 	and.w	r3, r3, #7
   18e98:	bf58      	it	pl
   18e9a:	425c      	negpl	r4, r3
			bit = y%8;
		}
	} else {
		buf_xy = buf + x/8 + y * buf_w/8;

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   18e9c:	b108      	cbz	r0, 18ea2 <lvgl_set_px_cb_mono+0x48>
			bit = 7 - x%8;
   18e9e:	f1c4 0407 	rsb	r4, r4, #7
		} else {
			bit = x%8;
   18ea2:	2301      	movs	r3, #1
   18ea4:	b2e4      	uxtb	r4, r4
		}
	}

	if (cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
   18ea6:	fa03 f404 	lsl.w	r4, r3, r4
   18eaa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18eae:	7808      	ldrb	r0, [r1, #0]
   18eb0:	2b04      	cmp	r3, #4
   18eb2:	b2e4      	uxtb	r4, r4
   18eb4:	d115      	bne.n	18ee2 <lvgl_set_px_cb_mono+0x88>
		if (color.full == 0) {
   18eb6:	b9b5      	cbnz	r5, 18ee6 <lvgl_set_px_cb_mono+0x8c>
		}
	} else {
		if (color.full == 0) {
			*buf_xy |= BIT(bit);
		} else {
			*buf_xy &= ~BIT(bit);
   18eb8:	ea20 0004 	bic.w	r0, r0, r4
   18ebc:	e014      	b.n	18ee8 <lvgl_set_px_cb_mono+0x8e>
		buf_xy = buf + x/8 + y * buf_w/8;
   18ebe:	4643      	mov	r3, r8
   18ec0:	435e      	muls	r6, r3
   18ec2:	bf48      	it	mi
   18ec4:	3607      	addmi	r6, #7
   18ec6:	2c00      	cmp	r4, #0
   18ec8:	4622      	mov	r2, r4
   18eca:	ea4f 06e6 	mov.w	r6, r6, asr #3
   18ece:	bfb8      	it	lt
   18ed0:	1de2      	addlt	r2, r4, #7
   18ed2:	eb06 06e2 	add.w	r6, r6, r2, asr #3
   18ed6:	4263      	negs	r3, r4
   18ed8:	eb07 0106 	add.w	r1, r7, r6
		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   18edc:	f004 0407 	and.w	r4, r4, #7
   18ee0:	e7d8      	b.n	18e94 <lvgl_set_px_cb_mono+0x3a>
		if (color.full == 0) {
   18ee2:	2d00      	cmp	r5, #0
   18ee4:	d1e8      	bne.n	18eb8 <lvgl_set_px_cb_mono+0x5e>
			*buf_xy |= BIT(bit);
   18ee6:	4320      	orrs	r0, r4
			*buf_xy &= ~BIT(bit);
   18ee8:	7008      	strb	r0, [r1, #0]
		}
	}
}
   18eea:	b004      	add	sp, #16
   18eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018ef0 <lvgl_rounder_cb_mono>:

void lvgl_rounder_cb_mono(struct _disp_drv_t *disp_drv,
		lv_area_t *area)
{
   18ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   18ef2:	460c      	mov	r4, r1
	struct device *display_dev = (struct device *)disp_drv->user_data;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   18ef4:	6a00      	ldr	r0, [r0, #32]
   18ef6:	4669      	mov	r1, sp
   18ef8:	f7ff ff6f 	bl	18dda <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   18efc:	9b02      	ldr	r3, [sp, #8]
   18efe:	07db      	lsls	r3, r3, #31
   18f00:	d509      	bpl.n	18f16 <lvgl_rounder_cb_mono+0x26>
		area->y1 &= ~0x7;
   18f02:	8863      	ldrh	r3, [r4, #2]
   18f04:	f023 0307 	bic.w	r3, r3, #7
   18f08:	8063      	strh	r3, [r4, #2]
		area->y2 |= 0x7;
   18f0a:	88e3      	ldrh	r3, [r4, #6]
   18f0c:	f043 0307 	orr.w	r3, r3, #7
   18f10:	80e3      	strh	r3, [r4, #6]
	} else {
		area->x1 &= ~0x7;
		area->x2 |= 0x7;
	}
}
   18f12:	b004      	add	sp, #16
   18f14:	bd10      	pop	{r4, pc}
		area->x1 &= ~0x7;
   18f16:	8823      	ldrh	r3, [r4, #0]
   18f18:	f023 0307 	bic.w	r3, r3, #7
   18f1c:	8023      	strh	r3, [r4, #0]
		area->x2 |= 0x7;
   18f1e:	88a3      	ldrh	r3, [r4, #4]
   18f20:	f043 0307 	orr.w	r3, r3, #7
   18f24:	80a3      	strh	r3, [r4, #4]
}
   18f26:	e7f4      	b.n	18f12 <lvgl_rounder_cb_mono+0x22>

00018f28 <lvgl_flush_cb_16bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_16bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   18f28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *display_dev = (struct device *)disp_drv->user_data;
	u16_t w = area->x2 - area->x1 + 1;
   18f2a:	888b      	ldrh	r3, [r1, #4]
	u16_t h = area->y2 - area->y1 + 1;
   18f2c:	88cc      	ldrh	r4, [r1, #6]
	u16_t w = area->x2 - area->x1 + 1;
   18f2e:	f9b1 6000 	ldrsh.w	r6, [r1]
	u16_t h = area->y2 - area->y1 + 1;
   18f32:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	u16_t w = area->x2 - area->x1 + 1;
   18f36:	3301      	adds	r3, #1
	u16_t h = area->y2 - area->y1 + 1;
   18f38:	3401      	adds	r4, #1
{
   18f3a:	b087      	sub	sp, #28
   18f3c:	4605      	mov	r5, r0
	u16_t w = area->x2 - area->x1 + 1;
   18f3e:	1b9b      	subs	r3, r3, r6
	struct device *display_dev = (struct device *)disp_drv->user_data;
   18f40:	6a00      	ldr	r0, [r0, #32]
	u16_t h = area->y2 - area->y1 + 1;
   18f42:	1be4      	subs	r4, r4, r7
	u16_t w = area->x2 - area->x1 + 1;
   18f44:	b29b      	uxth	r3, r3
	u16_t h = area->y2 - area->y1 + 1;
   18f46:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 2U * h;
   18f48:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   18f4c:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   18f50:	f8ad 3014 	strh.w	r3, [sp, #20]
   18f54:	6843      	ldr	r3, [r0, #4]
   18f56:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 2U * h;
   18f58:	0049      	lsls	r1, r1, #1
   18f5a:	9103      	str	r1, [sp, #12]
	desc.height = h;
   18f5c:	f8ad 4012 	strh.w	r4, [sp, #18]
   18f60:	b2ba      	uxth	r2, r7
   18f62:	689c      	ldr	r4, [r3, #8]
   18f64:	b2b1      	uxth	r1, r6
   18f66:	ab03      	add	r3, sp, #12
   18f68:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   18f6a:	4628      	mov	r0, r5
   18f6c:	f004 f809 	bl	1cf82 <lv_disp_flush_ready>
}
   18f70:	b007      	add	sp, #28
   18f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018f74 <lvgl_set_px_cb_16bit>:

#ifndef CONFIG_LVGL_COLOR_DEPTH_16
void lvgl_set_px_cb_16bit(struct _disp_drv_t *disp_drv,
		u8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   18f74:	b530      	push	{r4, r5, lr}
   18f76:	9804      	ldr	r0, [sp, #16]
    return ret.full;
#elif LV_COLOR_DEPTH == 16
    return color.full;
#elif LV_COLOR_DEPTH == 32
    lv_color16_t ret;
    LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3);   /* 8 - 5  = 3*/
   18f78:	f04f 0400 	mov.w	r4, #0
   18f7c:	f3c0 45c4 	ubfx	r5, r0, #19, #5
   18f80:	f365 24cf 	bfi	r4, r5, #11, #5

#if LV_COLOR_16_SWAP == 0
    LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /* 8 - 6  = 2*/
   18f84:	f3c0 2585 	ubfx	r5, r0, #10, #6
   18f88:	f365 144a 	bfi	r4, r5, #5, #6
#else
    LV_COLOR_SET_G16_SWAP(ret, ret.ch.green_h = (LV_COLOR_GET_G(color) >> 2); /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
#endif
    LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3);  /* 8 - 5  = 3*/
   18f8c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
   18f90:	f360 0404 	bfi	r4, r0, #0, #5
	u16_t *buf_xy = (u16_t *)(buf + x * 2U + y * 2U * buf_w);
   18f94:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
   18f98:	fb00 3302 	mla	r3, r0, r2, r3
	*buf_xy = lv_color_to16(color);
   18f9c:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
}
   18fa0:	bd30      	pop	{r4, r5, pc}

00018fa2 <lvgl_flush_cb_24bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_24bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   18fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *display_dev = (struct device *)disp_drv->user_data;
	u16_t w = area->x2 - area->x1 + 1;
   18fa4:	888b      	ldrh	r3, [r1, #4]
	u16_t h = area->y2 - area->y1 + 1;
   18fa6:	88cc      	ldrh	r4, [r1, #6]
   18fa8:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
	u16_t w = area->x2 - area->x1 + 1;
   18fac:	f9b1 7000 	ldrsh.w	r7, [r1]
   18fb0:	3301      	adds	r3, #1
	u16_t h = area->y2 - area->y1 + 1;
   18fb2:	3401      	adds	r4, #1
{
   18fb4:	b087      	sub	sp, #28
	u16_t h = area->y2 - area->y1 + 1;
   18fb6:	eba4 040c 	sub.w	r4, r4, ip
{
   18fba:	4605      	mov	r5, r0
	u16_t w = area->x2 - area->x1 + 1;
   18fbc:	1bdb      	subs	r3, r3, r7
	struct device *display_dev = (struct device *)disp_drv->user_data;
   18fbe:	6a00      	ldr	r0, [r0, #32]
	u16_t w = area->x2 - area->x1 + 1;
   18fc0:	b29b      	uxth	r3, r3
	u16_t h = area->y2 - area->y1 + 1;
   18fc2:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 3U * h;
   18fc4:	fb04 f603 	mul.w	r6, r4, r3
	desc.width = w;
   18fc8:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   18fcc:	f8ad 3014 	strh.w	r3, [sp, #20]
   18fd0:	6843      	ldr	r3, [r0, #4]
   18fd2:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 3U * h;
   18fd4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
	desc.height = h;
   18fd8:	f8ad 4012 	strh.w	r4, [sp, #18]
   18fdc:	fa1f f28c 	uxth.w	r2, ip
   18fe0:	689c      	ldr	r4, [r3, #8]
	desc.buf_size = w * 3U * h;
   18fe2:	9603      	str	r6, [sp, #12]
   18fe4:	ab03      	add	r3, sp, #12
   18fe6:	b2b9      	uxth	r1, r7
   18fe8:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   18fea:	4628      	mov	r0, r5
   18fec:	f003 ffc9 	bl	1cf82 <lv_disp_flush_ready>
}
   18ff0:	b007      	add	sp, #28
   18ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018ff4 <lvgl_set_px_cb_24bit>:

void lvgl_set_px_cb_24bit(struct _disp_drv_t *disp_drv,
		u8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   18ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   18ff6:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
{
   18ffa:	f89d 401c 	ldrb.w	r4, [sp, #28]
   18ffe:	9806      	ldr	r0, [sp, #24]
	u8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   19000:	fb05 3302 	mla	r3, r5, r2, r3
   19004:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	lv_color32_t converted_color;

#ifdef CONFIG_LVGL_COLOR_DEPTH_32
	if (opa != LV_OPA_COVER) {
   19008:	2cff      	cmp	r4, #255	; 0xff
	u8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   1900a:	eb01 0603 	add.w	r6, r1, r3
	if (opa != LV_OPA_COVER) {
   1900e:	d027      	beq.n	19060 <lvgl_set_px_cb_24bit+0x6c>
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   19010:	5ccd      	ldrb	r5, [r1, r3]
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   19012:	f896 c001 	ldrb.w	ip, [r6, #1]
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   19016:	b2a2      	uxth	r2, r4
   19018:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
   1901c:	fb15 f504 	smulbb	r5, r5, r4
   19020:	f3c0 4707 	ubfx	r7, r0, #16, #8
   19024:	fb07 5702 	mla	r7, r7, r2, r5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   19028:	fb1c fc04 	smulbb	ip, ip, r4
   1902c:	f3c0 2507 	ubfx	r5, r0, #8, #8
   19030:	fb05 c502 	mla	r5, r5, r2, ip
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
   19034:	f896 c002 	ldrb.w	ip, [r6, #2]
   19038:	fa5f fe80 	uxtb.w	lr, r0
   1903c:	fb1c f404 	smulbb	r4, ip, r4
   19040:	fb0e 4202 	mla	r2, lr, r2, r4
   19044:	f3c2 2207 	ubfx	r2, r2, #8, #8
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   19048:	f3c5 2507 	ubfx	r5, r5, #8, #8
   1904c:	f362 0007 	bfi	r0, r2, #0, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   19050:	f3c7 2707 	ubfx	r7, r7, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   19054:	f365 200f 	bfi	r0, r5, #8, #8
   19058:	f367 4017 	bfi	r0, r7, #16, #8
   1905c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
		color = lv_color_mix(color, mix_color, opa);
	}
#endif

	converted_color.full = lv_color_to32(color);
	*buf_xy = converted_color.ch.red;
   19060:	f3c0 4207 	ubfx	r2, r0, #16, #8
   19064:	54ca      	strb	r2, [r1, r3]
	*(buf_xy + 1) = converted_color.ch.green;
   19066:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1906a:	7073      	strb	r3, [r6, #1]
	*(buf_xy + 2) = converted_color.ch.blue;
   1906c:	70b0      	strb	r0, [r6, #2]
}
   1906e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019070 <lvgl_flush_cb_32bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_32bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   19070:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *display_dev = (struct device *)disp_drv->user_data;
	u16_t w = area->x2 - area->x1 + 1;
   19072:	888b      	ldrh	r3, [r1, #4]
	u16_t h = area->y2 - area->y1 + 1;
   19074:	88cc      	ldrh	r4, [r1, #6]
	u16_t w = area->x2 - area->x1 + 1;
   19076:	f9b1 6000 	ldrsh.w	r6, [r1]
	u16_t h = area->y2 - area->y1 + 1;
   1907a:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	u16_t w = area->x2 - area->x1 + 1;
   1907e:	3301      	adds	r3, #1
	u16_t h = area->y2 - area->y1 + 1;
   19080:	3401      	adds	r4, #1
{
   19082:	b087      	sub	sp, #28
   19084:	4605      	mov	r5, r0
	u16_t w = area->x2 - area->x1 + 1;
   19086:	1b9b      	subs	r3, r3, r6
	struct device *display_dev = (struct device *)disp_drv->user_data;
   19088:	6a00      	ldr	r0, [r0, #32]
	u16_t h = area->y2 - area->y1 + 1;
   1908a:	1be4      	subs	r4, r4, r7
	u16_t w = area->x2 - area->x1 + 1;
   1908c:	b29b      	uxth	r3, r3
	u16_t h = area->y2 - area->y1 + 1;
   1908e:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 4U * h;
   19090:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   19094:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   19098:	f8ad 3014 	strh.w	r3, [sp, #20]
   1909c:	6843      	ldr	r3, [r0, #4]
   1909e:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 4U * h;
   190a0:	0089      	lsls	r1, r1, #2
   190a2:	9103      	str	r1, [sp, #12]
	desc.height = h;
   190a4:	f8ad 4012 	strh.w	r4, [sp, #18]
   190a8:	b2ba      	uxth	r2, r7
   190aa:	689c      	ldr	r4, [r3, #8]
   190ac:	b2b1      	uxth	r1, r6
   190ae:	ab03      	add	r3, sp, #12
   190b0:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   190b2:	4628      	mov	r0, r5
   190b4:	f003 ff65 	bl	1cf82 <lv_disp_flush_ready>
}
   190b8:	b007      	add	sp, #28
   190ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000190bc <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   190bc:	f7fa b88a 	b.w	131d4 <SystemInit>

000190c0 <ah>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#define LOG_MODULE_NAME bt_rpa
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
   190c0:	b530      	push	{r4, r5, lr}
   190c2:	b085      	sub	sp, #20
   190c4:	4604      	mov	r4, r0
   190c6:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   190c8:	4668      	mov	r0, sp
   190ca:	2203      	movs	r2, #3
   190cc:	f7ff fdb5 	bl	18c3a <memcpy>
	(void)memset(res + 3, 0, 13);
   190d0:	220d      	movs	r2, #13
   190d2:	2100      	movs	r1, #0
   190d4:	f10d 0003 	add.w	r0, sp, #3
   190d8:	f7ff fdd9 	bl	18c8e <memset>

	err = bt_encrypt_le(irk, res, res);
   190dc:	4620      	mov	r0, r4
   190de:	466a      	mov	r2, sp
   190e0:	4669      	mov	r1, sp
   190e2:	f001 fbd3 	bl	1a88c <bt_encrypt_le>
	if (err) {
   190e6:	4604      	mov	r4, r0
   190e8:	b920      	cbnz	r0, 190f4 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   190ea:	2203      	movs	r2, #3
   190ec:	4669      	mov	r1, sp
   190ee:	4628      	mov	r0, r5
   190f0:	f7ff fda3 	bl	18c3a <memcpy>

	return 0;
}
   190f4:	4620      	mov	r0, r4
   190f6:	b005      	add	sp, #20
   190f8:	bd30      	pop	{r4, r5, pc}

000190fa <bt_rpa_create>:
}
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
   190fa:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
   190fc:	1ccd      	adds	r5, r1, #3
{
   190fe:	4606      	mov	r6, r0
   19100:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
   19102:	4628      	mov	r0, r5
   19104:	2103      	movs	r1, #3
   19106:	f7f2 fcf1 	bl	baec <bt_rand>
	if (err) {
   1910a:	b960      	cbnz	r0, 19126 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1910c:	7963      	ldrb	r3, [r4, #5]
   1910e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19116:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   19118:	4622      	mov	r2, r4
   1911a:	4629      	mov	r1, r5
   1911c:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1911e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   19122:	f7ff bfcd 	b.w	190c0 <ah>
}
   19126:	bd70      	pop	{r4, r5, r6, pc}

00019128 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   19128:	b510      	push	{r4, lr}
   1912a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1912c:	7801      	ldrb	r1, [r0, #0]
   1912e:	7822      	ldrb	r2, [r4, #0]
   19130:	428a      	cmp	r2, r1
{
   19132:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   19134:	d00e      	beq.n	19154 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   19136:	4669      	mov	r1, sp
   19138:	f7eb faac 	bl	4694 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1913c:	a905      	add	r1, sp, #20
   1913e:	4620      	mov	r0, r4
   19140:	f7eb faa8 	bl	4694 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   19144:	2210      	movs	r2, #16
   19146:	f10d 0115 	add.w	r1, sp, #21
   1914a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1914e:	f7ff fd64 	bl	18c1a <memcmp>
   19152:	e006      	b.n	19162 <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   19154:	2a01      	cmp	r2, #1
   19156:	d00a      	beq.n	1916e <bt_uuid_cmp+0x46>
   19158:	b12a      	cbz	r2, 19166 <bt_uuid_cmp+0x3e>
   1915a:	2a02      	cmp	r2, #2
   1915c:	d00a      	beq.n	19174 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   1915e:	f06f 0015 	mvn.w	r0, #21
}
   19162:	b00a      	add	sp, #40	; 0x28
   19164:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   19166:	8840      	ldrh	r0, [r0, #2]
   19168:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1916a:	1ac0      	subs	r0, r0, r3
   1916c:	e7f9      	b.n	19162 <bt_uuid_cmp+0x3a>
   1916e:	6840      	ldr	r0, [r0, #4]
   19170:	6863      	ldr	r3, [r4, #4]
   19172:	e7fa      	b.n	1916a <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   19174:	2210      	movs	r2, #16
   19176:	1c61      	adds	r1, r4, #1
   19178:	3001      	adds	r0, #1
   1917a:	e7e8      	b.n	1914e <bt_uuid_cmp+0x26>

0001917c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const u8_t *data, u8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1917c:	2a04      	cmp	r2, #4
{
   1917e:	b538      	push	{r3, r4, r5, lr}
   19180:	460c      	mov	r4, r1
	switch (data_len) {
   19182:	d00d      	beq.n	191a0 <bt_uuid_create+0x24>
   19184:	2a10      	cmp	r2, #16
   19186:	d019      	beq.n	191bc <bt_uuid_create+0x40>
   19188:	2a02      	cmp	r2, #2
   1918a:	f04f 0300 	mov.w	r3, #0
   1918e:	d11b      	bne.n	191c8 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   19190:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   19192:	784a      	ldrb	r2, [r1, #1]
   19194:	780b      	ldrb	r3, [r1, #0]
   19196:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1919a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1919c:	2001      	movs	r0, #1
}
   1919e:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   191a0:	2301      	movs	r3, #1
   191a2:	7003      	strb	r3, [r0, #0]
   191a4:	78a2      	ldrb	r2, [r4, #2]
   191a6:	78c9      	ldrb	r1, [r1, #3]
   191a8:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   191aa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   191ae:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   191b0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   191b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   191b8:	6042      	str	r2, [r0, #4]
		break;
   191ba:	e7ef      	b.n	1919c <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   191bc:	2302      	movs	r3, #2
   191be:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   191c2:	f7ff fd3a 	bl	18c3a <memcpy>
		break;
   191c6:	e7e9      	b.n	1919c <bt_uuid_create+0x20>
		return false;
   191c8:	4618      	mov	r0, r3
   191ca:	e7e8      	b.n	1919e <bt_uuid_create+0x22>

000191cc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   191cc:	2207      	movs	r2, #7
   191ce:	f7ff bd34 	b.w	18c3a <memcpy>

000191d2 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   191d2:	f3bf 8f5b 	dmb	ish
   191d6:	e850 3f00 	ldrex	r3, [r0]
   191da:	ea03 0201 	and.w	r2, r3, r1
   191de:	e840 2c00 	strex	ip, r2, [r0]
   191e2:	f1bc 0f00 	cmp.w	ip, #0
   191e6:	d1f6      	bne.n	191d6 <atomic_and+0x4>
   191e8:	f3bf 8f5b 	dmb	ish
}
   191ec:	4618      	mov	r0, r3
   191ee:	4770      	bx	lr

000191f0 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   191f0:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   191f2:	2301      	movs	r3, #1
   191f4:	f001 041f 	and.w	r4, r1, #31
   191f8:	0949      	lsrs	r1, r1, #5
   191fa:	40a3      	lsls	r3, r4

	if (val) {
   191fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19200:	b162      	cbz	r2, 1921c <atomic_set_bit_to+0x2c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19202:	f3bf 8f5b 	dmb	ish
   19206:	e850 2f00 	ldrex	r2, [r0]
   1920a:	431a      	orrs	r2, r3
   1920c:	e840 2100 	strex	r1, r2, [r0]
   19210:	2900      	cmp	r1, #0
   19212:	d1f8      	bne.n	19206 <atomic_set_bit_to+0x16>
   19214:	f3bf 8f5b 	dmb	ish
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   19218:	bc10      	pop	{r4}
   1921a:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1921c:	43d9      	mvns	r1, r3
}
   1921e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19220:	f7ff bfd7 	b.w	191d2 <atomic_and>

00019224 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19224:	f3bf 8f5b 	dmb	ish
   19228:	6800      	ldr	r0, [r0, #0]
   1922a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1922e:	4108      	asrs	r0, r1
}
   19230:	f000 0001 	and.w	r0, r0, #1
   19234:	4770      	bx	lr

00019236 <le_set_private_addr.isra.20>:
static int le_set_private_addr(u8_t id)
   19236:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   19238:	2106      	movs	r1, #6
   1923a:	4668      	mov	r0, sp
   1923c:	f7f2 fc56 	bl	baec <bt_rand>
	if (err) {
   19240:	b940      	cbnz	r0, 19254 <le_set_private_addr.isra.20+0x1e>
	nrpa.val[5] &= 0x3f;
   19242:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   19246:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   19248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1924c:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   19250:	f7eb fe32 	bl	4eb8 <set_random_address>
}
   19254:	b003      	add	sp, #12
   19256:	f85d fb04 	ldr.w	pc, [sp], #4

0001925a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1925a:	8802      	ldrh	r2, [r0, #0]
   1925c:	8843      	ldrh	r3, [r0, #2]
   1925e:	429a      	cmp	r2, r3
{
   19260:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   19262:	d818      	bhi.n	19296 <bt_le_conn_params_valid+0x3c>
   19264:	2a05      	cmp	r2, #5
   19266:	d916      	bls.n	19296 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   19268:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1926c:	d813      	bhi.n	19296 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1926e:	8884      	ldrh	r4, [r0, #4]
   19270:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   19274:	d20f      	bcs.n	19296 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   19276:	88c1      	ldrh	r1, [r0, #6]
   19278:	f1a1 020a 	sub.w	r2, r1, #10
   1927c:	b292      	uxth	r2, r2
   1927e:	f640 4076 	movw	r0, #3190	; 0xc76
   19282:	4282      	cmp	r2, r0
   19284:	d807      	bhi.n	19296 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   19286:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1928a:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1928e:	bf34      	ite	cc
   19290:	2001      	movcc	r0, #1
   19292:	2000      	movcs	r0, #0
}
   19294:	bd10      	pop	{r4, pc}
		return false;
   19296:	2000      	movs	r0, #0
   19298:	e7fc      	b.n	19294 <bt_le_conn_params_valid+0x3a>

0001929a <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1929a:	2301      	movs	r3, #1
{
   1929c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1929e:	2106      	movs	r1, #6
{
   192a0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   192a2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   192a6:	f7f2 fc21 	bl	baec <bt_rand>
	if (err) {
   192aa:	b918      	cbnz	r0, 192b4 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   192ac:	79a3      	ldrb	r3, [r4, #6]
   192ae:	f063 033f 	orn	r3, r3, #63	; 0x3f
   192b2:	71a3      	strb	r3, [r4, #6]
}
   192b4:	bd10      	pop	{r4, pc}

000192b6 <bt_addr_le_is_bonded>:
}
   192b6:	2000      	movs	r0, #0
   192b8:	4770      	bx	lr

000192ba <bt_le_adv_start>:
{
   192ba:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   192bc:	7844      	ldrb	r4, [r0, #1]
   192be:	f014 0410 	ands.w	r4, r4, #16
   192c2:	d106      	bne.n	192d2 <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
   192c4:	9401      	str	r4, [sp, #4]
   192c6:	9c04      	ldr	r4, [sp, #16]
   192c8:	9400      	str	r4, [sp, #0]
   192ca:	f7ec febb 	bl	6044 <bt_le_adv_start_internal>
}
   192ce:	b002      	add	sp, #8
   192d0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   192d2:	f06f 0015 	mvn.w	r0, #21
   192d6:	e7fa      	b.n	192ce <bt_le_adv_start+0x14>

000192d8 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   192d8:	6880      	ldr	r0, [r0, #8]
   192da:	f7ed b881 	b.w	63e0 <enh_conn_complete>

000192de <le_legacy_conn_complete>:
{
   192de:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   192e0:	6881      	ldr	r1, [r0, #8]
{
   192e2:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
   192e4:	780b      	ldrb	r3, [r1, #0]
   192e6:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   192ea:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   192ee:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   192f2:	78cb      	ldrb	r3, [r1, #3]
   192f4:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   192f8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   192fc:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   19300:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   19304:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   19308:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1930c:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   19310:	7c4b      	ldrb	r3, [r1, #17]
   19312:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   19316:	a805      	add	r0, sp, #20
   19318:	3104      	adds	r1, #4
   1931a:	f7ff ff57 	bl	191cc <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1931e:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   19320:	4669      	mov	r1, sp
   19322:	2206      	movs	r2, #6
   19324:	f10d 001b 	add.w	r0, sp, #27
   19328:	9400      	str	r4, [sp, #0]
   1932a:	f8ad 4004 	strh.w	r4, [sp, #4]
   1932e:	f7ff fc84 	bl	18c3a <memcpy>
   19332:	2206      	movs	r2, #6
   19334:	a902      	add	r1, sp, #8
   19336:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1933a:	9402      	str	r4, [sp, #8]
   1933c:	f8ad 400c 	strh.w	r4, [sp, #12]
   19340:	f7ff fc7b 	bl	18c3a <memcpy>
	enh_conn_complete(&enh);
   19344:	a804      	add	r0, sp, #16
   19346:	f7ed f84b 	bl	63e0 <enh_conn_complete>
}
   1934a:	b00c      	add	sp, #48	; 0x30
   1934c:	bd10      	pop	{r4, pc}

0001934e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1934e:	f3bf 8f5b 	dmb	ish
   19352:	6800      	ldr	r0, [r0, #0]
   19354:	f3bf 8f5b 	dmb	ish
}
   19358:	4770      	bx	lr

0001935a <atomic_test_bit>:
{
   1935a:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1935c:	f7ff fff7 	bl	1934e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   19360:	4108      	asrs	r0, r1
}
   19362:	f000 0001 	and.w	r0, r0, #1
   19366:	bd08      	pop	{r3, pc}

00019368 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   19368:	8983      	ldrh	r3, [r0, #12]
{
   1936a:	b510      	push	{r4, lr}
   1936c:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   1936e:	b12b      	cbz	r3, 1937c <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   19370:	6900      	ldr	r0, [r0, #16]
   19372:	f7f9 f8fd 	bl	12570 <net_buf_unref>
	conn->rx = NULL;
   19376:	2300      	movs	r3, #0
   19378:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   1937a:	81a3      	strh	r3, [r4, #12]
}
   1937c:	bd10      	pop	{r4, pc}

0001937e <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1937e:	f3bf 8f5b 	dmb	ish
   19382:	e850 3f00 	ldrex	r3, [r0]
   19386:	1e5a      	subs	r2, r3, #1
   19388:	e840 2100 	strex	r1, r2, [r0]
   1938c:	2900      	cmp	r1, #0
   1938e:	d1f8      	bne.n	19382 <atomic_dec+0x4>
   19390:	f3bf 8f5b 	dmb	ish
}
   19394:	4618      	mov	r0, r3
   19396:	4770      	bx	lr

00019398 <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19398:	f3bf 8f5b 	dmb	ish
   1939c:	e850 3f00 	ldrex	r3, [r0]
   193a0:	1c5a      	adds	r2, r3, #1
   193a2:	e840 2100 	strex	r1, r2, [r0]
   193a6:	2900      	cmp	r1, #0
   193a8:	d1f8      	bne.n	1939c <atomic_inc+0x4>
   193aa:	f3bf 8f5b 	dmb	ish
}
   193ae:	4618      	mov	r0, r3
   193b0:	4770      	bx	lr

000193b2 <tx_notify>:
{
   193b2:	b570      	push	{r4, r5, r6, lr}
   193b4:	4604      	mov	r4, r0
	__asm__ volatile(
   193b6:	f04f 0220 	mov.w	r2, #32
   193ba:	f3ef 8311 	mrs	r3, BASEPRI
   193be:	f382 8811 	msr	BASEPRI, r2
   193c2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   193c6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   193c8:	b920      	cbnz	r0, 193d4 <tx_notify+0x22>
	__asm__ volatile(
   193ca:	f383 8811 	msr	BASEPRI, r3
   193ce:	f3bf 8f6f 	isb	sy
}
   193d2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   193d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   193d6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   193d8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   193da:	4288      	cmp	r0, r1
	list->tail = node;
   193dc:	bf08      	it	eq
   193de:	6262      	streq	r2, [r4, #36]	; 0x24
   193e0:	f383 8811 	msr	BASEPRI, r3
   193e4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   193e8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   193ec:	f7ed f914 	bl	6618 <tx_free>
		cb(conn, user_data);
   193f0:	4631      	mov	r1, r6
   193f2:	4620      	mov	r0, r4
   193f4:	47a8      	blx	r5
	while (1) {
   193f6:	e7de      	b.n	193b6 <tx_notify+0x4>

000193f8 <tx_complete_work>:
	tx_notify(conn);
   193f8:	3828      	subs	r0, #40	; 0x28
   193fa:	f7ff bfda 	b.w	193b2 <tx_notify>

000193fe <bt_conn_get_security>:
}
   193fe:	2001      	movs	r0, #1
   19400:	4770      	bx	lr

00019402 <bt_conn_addr_le_cmp>:
{
   19402:	b538      	push	{r3, r4, r5, lr}
   19404:	460d      	mov	r5, r1
   19406:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   19408:	f100 0170 	add.w	r1, r0, #112	; 0x70
   1940c:	2207      	movs	r2, #7
   1940e:	4628      	mov	r0, r5
   19410:	f7ff fc03 	bl	18c1a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   19414:	b160      	cbz	r0, 19430 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   19416:	78e3      	ldrb	r3, [r4, #3]
   19418:	2207      	movs	r2, #7
   1941a:	b933      	cbnz	r3, 1942a <bt_conn_addr_le_cmp+0x28>
   1941c:	f104 017e 	add.w	r1, r4, #126	; 0x7e
   19420:	4628      	mov	r0, r5
}
   19422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19426:	f7ff bbf8 	b.w	18c1a <memcmp>
   1942a:	f104 0177 	add.w	r1, r4, #119	; 0x77
   1942e:	e7f7      	b.n	19420 <bt_conn_addr_le_cmp+0x1e>
   19430:	bd38      	pop	{r3, r4, r5, pc}

00019432 <bt_conn_unref>:
	atomic_dec(&conn->ref);
   19432:	304c      	adds	r0, #76	; 0x4c
   19434:	f7ff bfa3 	b.w	1937e <atomic_dec>

00019438 <bt_conn_le_conn_update>:
{
   19438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1943a:	4607      	mov	r7, r0
   1943c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1943e:	f242 0013 	movw	r0, #8211	; 0x2013
   19442:	210e      	movs	r1, #14
   19444:	f7eb fc02 	bl	4c4c <bt_hci_cmd_create>
	if (!buf) {
   19448:	4606      	mov	r6, r0
   1944a:	b1d0      	cbz	r0, 19482 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1944c:	210e      	movs	r1, #14
   1944e:	3008      	adds	r0, #8
   19450:	f001 feed 	bl	1b22e <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   19454:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   19456:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   19458:	2100      	movs	r1, #0
   1945a:	f7ff fc18 	bl	18c8e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1945e:	883b      	ldrh	r3, [r7, #0]
   19460:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   19462:	882b      	ldrh	r3, [r5, #0]
   19464:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   19466:	886b      	ldrh	r3, [r5, #2]
   19468:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1946a:	88ab      	ldrh	r3, [r5, #4]
   1946c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1946e:	88eb      	ldrh	r3, [r5, #6]
   19470:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   19472:	4631      	mov	r1, r6
   19474:	2200      	movs	r2, #0
   19476:	f242 0013 	movw	r0, #8211	; 0x2013
}
   1947a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1947e:	f7eb bc1b 	b.w	4cb8 <bt_hci_cmd_send_sync>
}
   19482:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019488 <l2cap_connected>:
}
   19488:	4770      	bx	lr

0001948a <l2cap_disconnected>:
   1948a:	4770      	bx	lr

0001948c <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1948c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1948e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19490:	b17b      	cbz	r3, 194b2 <bt_l2cap_chan_remove+0x26>
   19492:	3b08      	subs	r3, #8
   19494:	2200      	movs	r2, #0
   19496:	b163      	cbz	r3, 194b2 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   19498:	428b      	cmp	r3, r1
   1949a:	f103 0408 	add.w	r4, r3, #8
   1949e:	d10f      	bne.n	194c0 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   194a0:	688b      	ldr	r3, [r1, #8]
   194a2:	b93a      	cbnz	r2, 194b4 <bt_l2cap_chan_remove+0x28>
   194a4:	6c82      	ldr	r2, [r0, #72]	; 0x48
	list->head = node;
   194a6:	6443      	str	r3, [r0, #68]	; 0x44
Z_GENLIST_REMOVE(slist, snode)
   194a8:	4294      	cmp	r4, r2
   194aa:	d100      	bne.n	194ae <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   194ac:	6483      	str	r3, [r0, #72]	; 0x48
	parent->next = child;
   194ae:	2300      	movs	r3, #0
   194b0:	608b      	str	r3, [r1, #8]
}
   194b2:	bd10      	pop	{r4, pc}
   194b4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   194b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   194b8:	429c      	cmp	r4, r3
	list->tail = node;
   194ba:	bf08      	it	eq
   194bc:	6482      	streq	r2, [r0, #72]	; 0x48
   194be:	e7f6      	b.n	194ae <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   194c0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   194c2:	2b00      	cmp	r3, #0
   194c4:	d0f5      	beq.n	194b2 <bt_l2cap_chan_remove+0x26>
   194c6:	3b08      	subs	r3, #8
   194c8:	4622      	mov	r2, r4
   194ca:	e7e4      	b.n	19496 <bt_l2cap_chan_remove+0xa>

000194cc <bt_l2cap_chan_del>:
	if (!chan->conn) {
   194cc:	6803      	ldr	r3, [r0, #0]
{
   194ce:	b510      	push	{r4, lr}
   194d0:	4604      	mov	r4, r0
	if (!chan->conn) {
   194d2:	b12b      	cbz	r3, 194e0 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   194d4:	6843      	ldr	r3, [r0, #4]
   194d6:	685b      	ldr	r3, [r3, #4]
   194d8:	b103      	cbz	r3, 194dc <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   194da:	4798      	blx	r3
	chan->conn = NULL;
   194dc:	2300      	movs	r3, #0
   194de:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   194e0:	68e3      	ldr	r3, [r4, #12]
   194e2:	b10b      	cbz	r3, 194e8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   194e4:	4620      	mov	r0, r4
   194e6:	4798      	blx	r3
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   194e8:	f3bf 8f5b 	dmb	ish
   194ec:	3430      	adds	r4, #48	; 0x30
   194ee:	2300      	movs	r3, #0
   194f0:	e854 2f00 	ldrex	r2, [r4]
   194f4:	e844 3100 	strex	r1, r3, [r4]
   194f8:	2900      	cmp	r1, #0
   194fa:	d1f9      	bne.n	194f0 <bt_l2cap_chan_del+0x24>
   194fc:	f3bf 8f5b 	dmb	ish
}
   19500:	bd10      	pop	{r4, pc}

00019502 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19502:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   19504:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19506:	b173      	cbz	r3, 19526 <bt_l2cap_disconnected+0x24>
   19508:	f1b3 0008 	subs.w	r0, r3, #8
   1950c:	d00b      	beq.n	19526 <bt_l2cap_disconnected+0x24>
   1950e:	681c      	ldr	r4, [r3, #0]
   19510:	b104      	cbz	r4, 19514 <bt_l2cap_disconnected+0x12>
   19512:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   19514:	f7ff ffda 	bl	194cc <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19518:	b12c      	cbz	r4, 19526 <bt_l2cap_disconnected+0x24>
   1951a:	68a3      	ldr	r3, [r4, #8]
   1951c:	b103      	cbz	r3, 19520 <bt_l2cap_disconnected+0x1e>
   1951e:	3b08      	subs	r3, #8
{
   19520:	4620      	mov	r0, r4
   19522:	461c      	mov	r4, r3
   19524:	e7f6      	b.n	19514 <bt_l2cap_disconnected+0x12>
}
   19526:	bd10      	pop	{r4, pc}

00019528 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   19528:	3104      	adds	r1, #4
   1952a:	f7ed bd17 	b.w	6f5c <bt_conn_create_pdu_timeout>

0001952e <bt_l2cap_send_cb>:
{
   1952e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19532:	4614      	mov	r4, r2
   19534:	4605      	mov	r5, r0
   19536:	4688      	mov	r8, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   19538:	f102 0008 	add.w	r0, r2, #8
   1953c:	2104      	movs	r1, #4
{
   1953e:	461e      	mov	r6, r3
   19540:	9f06      	ldr	r7, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   19542:	f001 fe95 	bl	1b270 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19546:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   19548:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1954c:	3904      	subs	r1, #4
   1954e:	8001      	strh	r1, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   19550:	463b      	mov	r3, r7
   19552:	4632      	mov	r2, r6
   19554:	4621      	mov	r1, r4
   19556:	4628      	mov	r0, r5
}
   19558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1955c:	f7ed ba48 	b.w	69f0 <bt_conn_send_cb>

00019560 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19560:	6c40      	ldr	r0, [r0, #68]	; 0x44
   19562:	b108      	cbz	r0, 19568 <bt_l2cap_le_lookup_tx_cid+0x8>
   19564:	3808      	subs	r0, #8
   19566:	b900      	cbnz	r0, 1956a <bt_l2cap_le_lookup_tx_cid+0xa>
}
   19568:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1956a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   1956e:	428b      	cmp	r3, r1
   19570:	d0fa      	beq.n	19568 <bt_l2cap_le_lookup_tx_cid+0x8>
   19572:	6880      	ldr	r0, [r0, #8]
   19574:	e7f5      	b.n	19562 <bt_l2cap_le_lookup_tx_cid+0x2>

00019576 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19576:	6c40      	ldr	r0, [r0, #68]	; 0x44
   19578:	b108      	cbz	r0, 1957e <bt_l2cap_le_lookup_rx_cid+0x8>
   1957a:	3808      	subs	r0, #8
   1957c:	b900      	cbnz	r0, 19580 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   1957e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   19580:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   19582:	428b      	cmp	r3, r1
   19584:	d0fb      	beq.n	1957e <bt_l2cap_le_lookup_rx_cid+0x8>
   19586:	6880      	ldr	r0, [r0, #8]
   19588:	e7f6      	b.n	19578 <bt_l2cap_le_lookup_rx_cid+0x2>

0001958a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1958a:	4770      	bx	lr

0001958c <att_op_get_type>:
	switch (op) {
   1958c:	280e      	cmp	r0, #14
   1958e:	d00a      	beq.n	195a6 <att_op_get_type+0x1a>
   19590:	d81e      	bhi.n	195d0 <att_op_get_type+0x44>
   19592:	2807      	cmp	r0, #7
   19594:	d015      	beq.n	195c2 <att_op_get_type+0x36>
   19596:	d80d      	bhi.n	195b4 <att_op_get_type+0x28>
   19598:	2803      	cmp	r0, #3
   1959a:	d012      	beq.n	195c2 <att_op_get_type+0x36>
   1959c:	d805      	bhi.n	195aa <att_op_get_type+0x1e>
   1959e:	2801      	cmp	r0, #1
   195a0:	d00f      	beq.n	195c2 <att_op_get_type+0x36>
   195a2:	2802      	cmp	r0, #2
   195a4:	d12b      	bne.n	195fe <att_op_get_type+0x72>
		return ATT_REQUEST;
   195a6:	2001      	movs	r0, #1
   195a8:	4770      	bx	lr
	switch (op) {
   195aa:	2805      	cmp	r0, #5
		return ATT_REQUEST;
   195ac:	bf0c      	ite	eq
   195ae:	2002      	moveq	r0, #2
   195b0:	2001      	movne	r0, #1
   195b2:	4770      	bx	lr
	switch (op) {
   195b4:	280a      	cmp	r0, #10
   195b6:	d0f6      	beq.n	195a6 <att_op_get_type+0x1a>
   195b8:	d805      	bhi.n	195c6 <att_op_get_type+0x3a>
   195ba:	2808      	cmp	r0, #8
   195bc:	d0f3      	beq.n	195a6 <att_op_get_type+0x1a>
   195be:	2809      	cmp	r0, #9
   195c0:	d11d      	bne.n	195fe <att_op_get_type+0x72>
		return ATT_RESPONSE;
   195c2:	2002      	movs	r0, #2
   195c4:	4770      	bx	lr
	switch (op) {
   195c6:	280c      	cmp	r0, #12
		return ATT_RESPONSE;
   195c8:	bf0c      	ite	eq
   195ca:	2001      	moveq	r0, #1
   195cc:	2002      	movne	r0, #2
   195ce:	4770      	bx	lr
	switch (op) {
   195d0:	2817      	cmp	r0, #23
   195d2:	d0f6      	beq.n	195c2 <att_op_get_type+0x36>
   195d4:	d80b      	bhi.n	195ee <att_op_get_type+0x62>
   195d6:	2811      	cmp	r0, #17
   195d8:	d0f3      	beq.n	195c2 <att_op_get_type+0x36>
   195da:	d803      	bhi.n	195e4 <att_op_get_type+0x58>
   195dc:	280f      	cmp	r0, #15
   195de:	d0f0      	beq.n	195c2 <att_op_get_type+0x36>
   195e0:	2810      	cmp	r0, #16
   195e2:	e7df      	b.n	195a4 <att_op_get_type+0x18>
   195e4:	2813      	cmp	r0, #19
   195e6:	d0ec      	beq.n	195c2 <att_op_get_type+0x36>
   195e8:	d3dd      	bcc.n	195a6 <att_op_get_type+0x1a>
   195ea:	2816      	cmp	r0, #22
   195ec:	e7da      	b.n	195a4 <att_op_get_type+0x18>
   195ee:	281d      	cmp	r0, #29
   195f0:	d013      	beq.n	1961a <att_op_get_type+0x8e>
   195f2:	d80a      	bhi.n	1960a <att_op_get_type+0x7e>
   195f4:	2819      	cmp	r0, #25
   195f6:	d0e4      	beq.n	195c2 <att_op_get_type+0x36>
   195f8:	d3d5      	bcc.n	195a6 <att_op_get_type+0x1a>
   195fa:	281b      	cmp	r0, #27
   195fc:	d00f      	beq.n	1961e <att_op_get_type+0x92>
	if (op & ATT_CMD_MASK) {
   195fe:	f010 0f40 	tst.w	r0, #64	; 0x40
		return ATT_COMMAND;
   19602:	bf0c      	ite	eq
   19604:	2006      	moveq	r0, #6
   19606:	2000      	movne	r0, #0
   19608:	4770      	bx	lr
	switch (op) {
   1960a:	2852      	cmp	r0, #82	; 0x52
   1960c:	d009      	beq.n	19622 <att_op_get_type+0x96>
   1960e:	28d2      	cmp	r0, #210	; 0xd2
   19610:	d007      	beq.n	19622 <att_op_get_type+0x96>
   19612:	281e      	cmp	r0, #30
   19614:	d1f3      	bne.n	195fe <att_op_get_type+0x72>
		return ATT_CONFIRMATION;
   19616:	2004      	movs	r0, #4
}
   19618:	4770      	bx	lr
		return ATT_INDICATION;
   1961a:	2005      	movs	r0, #5
   1961c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1961e:	2003      	movs	r0, #3
   19620:	4770      	bx	lr
		return ATT_COMMAND;
   19622:	2000      	movs	r0, #0
   19624:	4770      	bx	lr

00019626 <att_notify>:
{
   19626:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
   19628:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   1962a:	f101 0008 	add.w	r0, r1, #8
{
   1962e:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   19630:	f001 fe36 	bl	1b2a0 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   19634:	89a3      	ldrh	r3, [r4, #12]
   19636:	68a2      	ldr	r2, [r4, #8]
   19638:	4601      	mov	r1, r0
   1963a:	4628      	mov	r0, r5
   1963c:	f000 fe6a 	bl	1a314 <bt_gatt_notification>
}
   19640:	2000      	movs	r0, #0
   19642:	bd38      	pop	{r3, r4, r5, pc}

00019644 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   19644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   19646:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1964a:	2300      	movs	r3, #0
   1964c:	9300      	str	r3, [sp, #0]
   1964e:	461a      	mov	r2, r3
   19650:	f7ef fab2 	bl	8bb8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   19654:	b005      	add	sp, #20
   19656:	f85d fb04 	ldr.w	pc, [sp], #4

0001965a <find_info_cb>:
	if (!data->rsp) {
   1965a:	688b      	ldr	r3, [r1, #8]
{
   1965c:	b570      	push	{r4, r5, r6, lr}
   1965e:	4605      	mov	r5, r0
   19660:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   19662:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   19664:	b963      	cbnz	r3, 19680 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   19666:	6848      	ldr	r0, [r1, #4]
   19668:	2101      	movs	r1, #1
   1966a:	3008      	adds	r0, #8
   1966c:	f001 fddf 	bl	1b22e <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   19670:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   19672:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   19674:	781b      	ldrb	r3, [r3, #0]
   19676:	2b00      	cmp	r3, #0
   19678:	bf0c      	ite	eq
   1967a:	2301      	moveq	r3, #1
   1967c:	2302      	movne	r3, #2
   1967e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   19680:	68a3      	ldr	r3, [r4, #8]
   19682:	781b      	ldrb	r3, [r3, #0]
   19684:	2b01      	cmp	r3, #1
   19686:	d003      	beq.n	19690 <find_info_cb+0x36>
   19688:	2b02      	cmp	r3, #2
   1968a:	d01a      	beq.n	196c2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1968c:	2000      	movs	r0, #0
   1968e:	e017      	b.n	196c0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   19690:	682b      	ldr	r3, [r5, #0]
   19692:	781b      	ldrb	r3, [r3, #0]
   19694:	2b00      	cmp	r3, #0
   19696:	d1f9      	bne.n	1968c <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   19698:	6860      	ldr	r0, [r4, #4]
   1969a:	2104      	movs	r1, #4
   1969c:	3008      	adds	r0, #8
   1969e:	f001 fdc6 	bl	1b22e <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   196a2:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   196a4:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   196a6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   196a8:	682b      	ldr	r3, [r5, #0]
   196aa:	885b      	ldrh	r3, [r3, #2]
   196ac:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   196ae:	6863      	ldr	r3, [r4, #4]
   196b0:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   196b4:	899b      	ldrh	r3, [r3, #12]
   196b6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   196b8:	2804      	cmp	r0, #4
   196ba:	bf94      	ite	ls
   196bc:	2000      	movls	r0, #0
   196be:	2001      	movhi	r0, #1
}
   196c0:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   196c2:	682b      	ldr	r3, [r5, #0]
   196c4:	781b      	ldrb	r3, [r3, #0]
   196c6:	2b02      	cmp	r3, #2
   196c8:	d1e0      	bne.n	1968c <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   196ca:	6860      	ldr	r0, [r4, #4]
   196cc:	2112      	movs	r1, #18
   196ce:	3008      	adds	r0, #8
   196d0:	f001 fdad 	bl	1b22e <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   196d4:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   196d6:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   196d8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   196da:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   196dc:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   196e0:	3101      	adds	r1, #1
   196e2:	f7ff faaa 	bl	18c3a <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   196e6:	6863      	ldr	r3, [r4, #4]
   196e8:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   196ec:	899b      	ldrh	r3, [r3, #12]
   196ee:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   196f0:	2812      	cmp	r0, #18
   196f2:	e7e2      	b.n	196ba <find_info_cb+0x60>

000196f4 <read_group_cb>:
{
   196f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   196f8:	680c      	ldr	r4, [r1, #0]
{
   196fa:	4606      	mov	r6, r0
   196fc:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   196fe:	f04f 0800 	mov.w	r8, #0
   19702:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19706:	a902      	add	r1, sp, #8
   19708:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   1970a:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1970c:	f88d 8008 	strb.w	r8, [sp, #8]
   19710:	f8ad 300a 	strh.w	r3, [sp, #10]
   19714:	f7ff fd08 	bl	19128 <bt_uuid_cmp>
   19718:	b198      	cbz	r0, 19742 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1971a:	f642 0301 	movw	r3, #10241	; 0x2801
   1971e:	a903      	add	r1, sp, #12
   19720:	6830      	ldr	r0, [r6, #0]
   19722:	f88d 800c 	strb.w	r8, [sp, #12]
   19726:	f8ad 300e 	strh.w	r3, [sp, #14]
   1972a:	f7ff fcfd 	bl	19128 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1972e:	b140      	cbz	r0, 19742 <read_group_cb+0x4e>
		if (data->group &&
   19730:	692b      	ldr	r3, [r5, #16]
   19732:	b123      	cbz	r3, 1973e <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   19734:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
   19736:	8859      	ldrh	r1, [r3, #2]
   19738:	4291      	cmp	r1, r2
   1973a:	d200      	bcs.n	1973e <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1973c:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1973e:	2001      	movs	r0, #1
   19740:	e012      	b.n	19768 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19742:	6869      	ldr	r1, [r5, #4]
   19744:	6830      	ldr	r0, [r6, #0]
   19746:	f7ff fcef 	bl	19128 <bt_uuid_cmp>
   1974a:	b110      	cbz	r0, 19752 <read_group_cb+0x5e>
		data->group = NULL;
   1974c:	2300      	movs	r3, #0
   1974e:	612b      	str	r3, [r5, #16]
		return BT_GATT_ITER_CONTINUE;
   19750:	e7f5      	b.n	1973e <read_group_cb+0x4a>
	if (data->rsp->len &&
   19752:	68eb      	ldr	r3, [r5, #12]
   19754:	68a8      	ldr	r0, [r5, #8]
   19756:	781a      	ldrb	r2, [r3, #0]
   19758:	b14a      	cbz	r2, 1976e <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1975a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1975e:	8981      	ldrh	r1, [r0, #12]
   19760:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   19762:	4293      	cmp	r3, r2
   19764:	da03      	bge.n	1976e <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   19766:	2000      	movs	r0, #0
}
   19768:	b004      	add	sp, #16
   1976a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1976e:	2104      	movs	r1, #4
   19770:	3008      	adds	r0, #8
   19772:	f001 fd5c 	bl	1b22e <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   19776:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   19778:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1977a:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1977c:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1977e:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   19780:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   19782:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   19786:	6889      	ldr	r1, [r1, #8]
   19788:	2400      	movs	r4, #0
   1978a:	1a9b      	subs	r3, r3, r2
   1978c:	9400      	str	r4, [sp, #0]
   1978e:	440a      	add	r2, r1
   19790:	f8d6 8004 	ldr.w	r8, [r6, #4]
   19794:	4631      	mov	r1, r6
   19796:	b29b      	uxth	r3, r3
   19798:	4638      	mov	r0, r7
   1979a:	47c0      	blx	r8
	if (read < 0) {
   1979c:	1e01      	subs	r1, r0, #0
   1979e:	dbe2      	blt.n	19766 <read_group_cb+0x72>
	if (!data->rsp->len) {
   197a0:	68ee      	ldr	r6, [r5, #12]
   197a2:	68ab      	ldr	r3, [r5, #8]
   197a4:	7830      	ldrb	r0, [r6, #0]
   197a6:	1d0a      	adds	r2, r1, #4
   197a8:	b928      	cbnz	r0, 197b6 <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
   197aa:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
   197ac:	f103 0008 	add.w	r0, r3, #8
   197b0:	f001 fd3d 	bl	1b22e <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   197b4:	e7c3      	b.n	1973e <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   197b6:	4290      	cmp	r0, r2
   197b8:	d0f8      	beq.n	197ac <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   197ba:	899a      	ldrh	r2, [r3, #12]
   197bc:	3a04      	subs	r2, #4
   197be:	819a      	strh	r2, [r3, #12]
		return false;
   197c0:	e7d1      	b.n	19766 <read_group_cb+0x72>

000197c2 <read_type_cb>:
{
   197c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   197c6:	680f      	ldr	r7, [r1, #0]
{
   197c8:	4605      	mov	r5, r0
   197ca:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   197cc:	6800      	ldr	r0, [r0, #0]
   197ce:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   197d0:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   197d4:	f7ff fca8 	bl	19128 <bt_uuid_cmp>
   197d8:	4680      	mov	r8, r0
   197da:	2800      	cmp	r0, #0
   197dc:	d14c      	bne.n	19878 <read_type_cb+0xb6>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   197de:	2215      	movs	r2, #21
   197e0:	4629      	mov	r1, r5
   197e2:	4648      	mov	r0, r9
   197e4:	f000 fc98 	bl	1a118 <bt_gatt_check_perm>
   197e8:	4604      	mov	r4, r0
   197ea:	7530      	strb	r0, [r6, #20]
	if (data->err) {
   197ec:	b148      	cbz	r0, 19802 <read_type_cb+0x40>
		if (data->rsp->len) {
   197ee:	68f3      	ldr	r3, [r6, #12]
   197f0:	781c      	ldrb	r4, [r3, #0]
   197f2:	b114      	cbz	r4, 197fa <read_type_cb+0x38>
			data->err = 0x00;
   197f4:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
   197f8:	4644      	mov	r4, r8
}
   197fa:	4620      	mov	r0, r4
   197fc:	b003      	add	sp, #12
   197fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   19802:	68b0      	ldr	r0, [r6, #8]
   19804:	2102      	movs	r1, #2
   19806:	3008      	adds	r0, #8
   19808:	f001 fd11 	bl	1b22e <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1980c:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1980e:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   19810:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   19812:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   19814:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   19816:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   1981a:	6889      	ldr	r1, [r1, #8]
   1981c:	9400      	str	r4, [sp, #0]
   1981e:	1a9b      	subs	r3, r3, r2
   19820:	f8d5 8004 	ldr.w	r8, [r5, #4]
   19824:	440a      	add	r2, r1
   19826:	b29b      	uxth	r3, r3
   19828:	4629      	mov	r1, r5
   1982a:	4648      	mov	r0, r9
   1982c:	47c0      	blx	r8
	if (read < 0) {
   1982e:	1e01      	subs	r1, r0, #0
   19830:	da07      	bge.n	19842 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
   19832:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   19836:	bf26      	itte	cs
   19838:	4249      	negcs	r1, r1
   1983a:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1983c:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   1983e:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
   19840:	e7db      	b.n	197fa <read_type_cb+0x38>
	if (!data->rsp->len) {
   19842:	68f5      	ldr	r5, [r6, #12]
   19844:	68b0      	ldr	r0, [r6, #8]
   19846:	782a      	ldrb	r2, [r5, #0]
   19848:	1c8b      	adds	r3, r1, #2
   1984a:	b97a      	cbnz	r2, 1986c <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
   1984c:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   1984e:	3008      	adds	r0, #8
   19850:	f001 fced 	bl	1b22e <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   19854:	68b3      	ldr	r3, [r6, #8]
   19856:	f8b7 4042 	ldrh.w	r4, [r7, #66]	; 0x42
   1985a:	899b      	ldrh	r3, [r3, #12]
   1985c:	1ae4      	subs	r4, r4, r3
   1985e:	68f3      	ldr	r3, [r6, #12]
   19860:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19862:	429c      	cmp	r4, r3
   19864:	bfd4      	ite	le
   19866:	2400      	movle	r4, #0
   19868:	2401      	movgt	r4, #1
   1986a:	e7c6      	b.n	197fa <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1986c:	429a      	cmp	r2, r3
   1986e:	d0ee      	beq.n	1984e <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
   19870:	8983      	ldrh	r3, [r0, #12]
   19872:	3b02      	subs	r3, #2
   19874:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   19876:	e7c0      	b.n	197fa <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   19878:	2401      	movs	r4, #1
   1987a:	e7be      	b.n	197fa <read_type_cb+0x38>

0001987c <att_pdu_sent>:
{
   1987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   19880:	2104      	movs	r1, #4
{
   19882:	4680      	mov	r8, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   19884:	f7ff fe6c 	bl	19560 <bt_l2cap_le_lookup_tx_cid>
   19888:	4606      	mov	r6, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1988a:	f100 07d8 	add.w	r7, r0, #216	; 0xd8
   1988e:	2100      	movs	r1, #0
   19890:	4638      	mov	r0, r7
   19892:	f001 fc9e 	bl	1b1d2 <net_buf_get>
   19896:	4604      	mov	r4, r0
   19898:	b928      	cbnz	r0, 198a6 <att_pdu_sent+0x2a>
	z_impl_k_sem_give(sem);
   1989a:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
}
   1989e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   198a2:	f7fd bd4d 	b.w	17340 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   198a6:	f8d6 5094 	ldr.w	r5, [r6, #148]	; 0x94
   198aa:	b14d      	cbz	r5, 198c0 <att_pdu_sent+0x44>
   198ac:	692b      	ldr	r3, [r5, #16]
   198ae:	42a3      	cmp	r3, r4
   198b0:	d106      	bne.n	198c0 <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
   198b2:	f104 0008 	add.w	r0, r4, #8
   198b6:	f001 fcfb 	bl	1b2b0 <net_buf_simple_headroom>
	state->len = buf->len;
   198ba:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   198bc:	81a8      	strh	r0, [r5, #12]
	state->len = buf->len;
   198be:	81eb      	strh	r3, [r5, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   198c0:	2300      	movs	r3, #0
   198c2:	461a      	mov	r2, r3
   198c4:	4621      	mov	r1, r4
   198c6:	4640      	mov	r0, r8
   198c8:	f7ed fe84 	bl	75d4 <att_send>
   198cc:	2800      	cmp	r0, #0
   198ce:	d1de      	bne.n	1988e <att_pdu_sent+0x12>
}
   198d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000198d4 <att_cfm_sent>:
{
   198d4:	b538      	push	{r3, r4, r5, lr}
   198d6:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   198d8:	2104      	movs	r1, #4
{
   198da:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   198dc:	f7ff fe40 	bl	19560 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   198e0:	f3bf 8f5b 	dmb	ish
   198e4:	3090      	adds	r0, #144	; 0x90
   198e6:	e850 3f00 	ldrex	r3, [r0]
   198ea:	f023 0302 	bic.w	r3, r3, #2
   198ee:	e840 3200 	strex	r2, r3, [r0]
   198f2:	2a00      	cmp	r2, #0
   198f4:	d1f7      	bne.n	198e6 <att_cfm_sent+0x12>
   198f6:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   198fa:	4629      	mov	r1, r5
   198fc:	4620      	mov	r0, r4
}
   198fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   19902:	f7ff bfbb 	b.w	1987c <att_pdu_sent>

00019906 <att_rsp_sent>:
{
   19906:	b538      	push	{r3, r4, r5, lr}
   19908:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1990a:	2104      	movs	r1, #4
{
   1990c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1990e:	f7ff fe27 	bl	19560 <bt_l2cap_le_lookup_tx_cid>
   19912:	f3bf 8f5b 	dmb	ish
   19916:	3090      	adds	r0, #144	; 0x90
   19918:	e850 3f00 	ldrex	r3, [r0]
   1991c:	f023 0301 	bic.w	r3, r3, #1
   19920:	e840 3200 	strex	r2, r3, [r0]
   19924:	2a00      	cmp	r2, #0
   19926:	d1f7      	bne.n	19918 <att_rsp_sent+0x12>
   19928:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   1992c:	4629      	mov	r1, r5
   1992e:	4620      	mov	r0, r4
}
   19930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   19934:	f7ff bfa2 	b.w	1987c <att_pdu_sent>

00019938 <write_cb>:
{
   19938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1993a:	460c      	mov	r4, r1
   1993c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1993e:	4601      	mov	r1, r0
   19940:	222a      	movs	r2, #42	; 0x2a
   19942:	6820      	ldr	r0, [r4, #0]
   19944:	f000 fbe8 	bl	1a118 <bt_gatt_check_perm>
   19948:	4605      	mov	r5, r0
   1994a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1994c:	bb00      	cbnz	r0, 19990 <write_cb+0x58>
	if (!data->req) {
   1994e:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   19950:	68b7      	ldr	r7, [r6, #8]
   19952:	68e2      	ldr	r2, [r4, #12]
   19954:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   19956:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   19958:	bf14      	ite	ne
   1995a:	2300      	movne	r3, #0
   1995c:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1995e:	9301      	str	r3, [sp, #4]
   19960:	8a63      	ldrh	r3, [r4, #18]
   19962:	9300      	str	r3, [sp, #0]
   19964:	4631      	mov	r1, r6
   19966:	8a23      	ldrh	r3, [r4, #16]
   19968:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1996a:	2800      	cmp	r0, #0
   1996c:	db05      	blt.n	1997a <write_cb+0x42>
   1996e:	8a23      	ldrh	r3, [r4, #16]
   19970:	4298      	cmp	r0, r3
   19972:	d10b      	bne.n	1998c <write_cb+0x54>
	data->err = 0U;
   19974:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   19976:	2501      	movs	r5, #1
   19978:	e005      	b.n	19986 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1997a:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1997e:	d305      	bcc.n	1998c <write_cb+0x54>
		return -err;
   19980:	4240      	negs	r0, r0
   19982:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   19984:	7520      	strb	r0, [r4, #20]
}
   19986:	4628      	mov	r0, r5
   19988:	b003      	add	sp, #12
   1998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1998c:	200e      	movs	r0, #14
   1998e:	e7f9      	b.n	19984 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   19990:	2500      	movs	r5, #0
   19992:	e7f8      	b.n	19986 <write_cb+0x4e>

00019994 <read_cb>:
{
   19994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19998:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1999a:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   1999c:	f8d1 9000 	ldr.w	r9, [r1]
{
   199a0:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   199a2:	3008      	adds	r0, #8
   199a4:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   199a6:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   199aa:	f001 fc40 	bl	1b22e <net_buf_simple_add>
	data->err = 0x00;
   199ae:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   199b0:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   199b2:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   199b4:	2215      	movs	r2, #21
   199b6:	4631      	mov	r1, r6
   199b8:	4640      	mov	r0, r8
   199ba:	f000 fbad 	bl	1a118 <bt_gatt_check_perm>
   199be:	4605      	mov	r5, r0
   199c0:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   199c2:	bb00      	cbnz	r0, 19a06 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   199c4:	68a1      	ldr	r1, [r4, #8]
   199c6:	f8b9 3042 	ldrh.w	r3, [r9, #66]	; 0x42
   199ca:	898a      	ldrh	r2, [r1, #12]
   199cc:	6889      	ldr	r1, [r1, #8]
   199ce:	88a0      	ldrh	r0, [r4, #4]
   199d0:	9000      	str	r0, [sp, #0]
   199d2:	1a9b      	subs	r3, r3, r2
   199d4:	6877      	ldr	r7, [r6, #4]
   199d6:	440a      	add	r2, r1
   199d8:	b29b      	uxth	r3, r3
   199da:	4631      	mov	r1, r6
   199dc:	4640      	mov	r0, r8
   199de:	47b8      	blx	r7
	if (read < 0) {
   199e0:	1e01      	subs	r1, r0, #0
   199e2:	da0a      	bge.n	199fa <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
   199e4:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   199e8:	bf26      	itte	cs
   199ea:	4249      	negcs	r1, r1
   199ec:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   199ee:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   199f0:	7421      	strb	r1, [r4, #16]
}
   199f2:	4628      	mov	r0, r5
   199f4:	b003      	add	sp, #12
   199f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   199fa:	68a0      	ldr	r0, [r4, #8]
   199fc:	3008      	adds	r0, #8
   199fe:	f001 fc16 	bl	1b22e <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   19a02:	2501      	movs	r5, #1
   19a04:	e7f5      	b.n	199f2 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
   19a06:	463d      	mov	r5, r7
   19a08:	e7f3      	b.n	199f2 <read_cb+0x5e>

00019a0a <att_write_cmd>:
{
   19a0a:	b530      	push	{r4, r5, lr}
   19a0c:	460c      	mov	r4, r1
   19a0e:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   19a10:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   19a12:	f101 0008 	add.w	r0, r1, #8
   19a16:	f001 fc43 	bl	1b2a0 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   19a1a:	89a3      	ldrh	r3, [r4, #12]
   19a1c:	9302      	str	r3, [sp, #8]
   19a1e:	2200      	movs	r2, #0
   19a20:	68a3      	ldr	r3, [r4, #8]
   19a22:	9301      	str	r3, [sp, #4]
   19a24:	9200      	str	r2, [sp, #0]
   19a26:	4603      	mov	r3, r0
   19a28:	4611      	mov	r1, r2
   19a2a:	4628      	mov	r0, r5
   19a2c:	f7ee f8be 	bl	7bac <att_write_rsp>
}
   19a30:	b005      	add	sp, #20
   19a32:	bd30      	pop	{r4, r5, pc}

00019a34 <att_write_req>:
{
   19a34:	b530      	push	{r4, r5, lr}
   19a36:	460c      	mov	r4, r1
   19a38:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   19a3a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   19a3c:	f101 0008 	add.w	r0, r1, #8
   19a40:	f001 fc2e 	bl	1b2a0 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   19a44:	89a3      	ldrh	r3, [r4, #12]
   19a46:	9302      	str	r3, [sp, #8]
   19a48:	68a3      	ldr	r3, [r4, #8]
   19a4a:	9301      	str	r3, [sp, #4]
   19a4c:	2300      	movs	r3, #0
   19a4e:	9300      	str	r3, [sp, #0]
   19a50:	2213      	movs	r2, #19
   19a52:	4603      	mov	r3, r0
   19a54:	2112      	movs	r1, #18
   19a56:	4628      	mov	r0, r5
   19a58:	f7ee f8a8 	bl	7bac <att_write_rsp>
}
   19a5c:	b005      	add	sp, #20
   19a5e:	bd30      	pop	{r4, r5, pc}

00019a60 <att_read_blob_req>:
{
   19a60:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   19a62:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   19a64:	8813      	ldrh	r3, [r2, #0]
   19a66:	8852      	ldrh	r2, [r2, #2]
   19a68:	9200      	str	r2, [sp, #0]
   19a6a:	210c      	movs	r1, #12
   19a6c:	220d      	movs	r2, #13
   19a6e:	f7ee fa85 	bl	7f7c <att_read_rsp>
}
   19a72:	b003      	add	sp, #12
   19a74:	f85d fb04 	ldr.w	pc, [sp], #4

00019a78 <att_read_req>:
{
   19a78:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   19a7a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   19a7c:	2200      	movs	r2, #0
   19a7e:	881b      	ldrh	r3, [r3, #0]
   19a80:	9200      	str	r2, [sp, #0]
   19a82:	210a      	movs	r1, #10
   19a84:	220b      	movs	r2, #11
   19a86:	f7ee fa79 	bl	7f7c <att_read_rsp>
}
   19a8a:	b003      	add	sp, #12
   19a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00019a90 <bt_att_init>:
	bt_gatt_init();
   19a90:	f7ef b838 	b.w	8b04 <bt_gatt_init>

00019a94 <bt_att_get_mtu>:
{
   19a94:	b508      	push	{r3, lr}
	att = att_chan_get(conn);
   19a96:	f7ed fe19 	bl	76cc <att_chan_get>
	if (!att) {
   19a9a:	b108      	cbz	r0, 19aa0 <bt_att_get_mtu+0xc>
	return att->chan.tx.mtu;
   19a9c:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
}
   19aa0:	bd08      	pop	{r3, pc}

00019aa2 <att_req_destroy>:
{
   19aa2:	b510      	push	{r4, lr}
   19aa4:	4604      	mov	r4, r0
	if (req->buf) {
   19aa6:	6900      	ldr	r0, [r0, #16]
   19aa8:	b108      	cbz	r0, 19aae <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   19aaa:	f7f8 fd61 	bl	12570 <net_buf_unref>
	if (req->destroy) {
   19aae:	68a3      	ldr	r3, [r4, #8]
   19ab0:	b10b      	cbz	r3, 19ab6 <att_req_destroy+0x14>
		req->destroy(req);
   19ab2:	4620      	mov	r0, r4
   19ab4:	4798      	blx	r3
	bt_att_req_free(req);
   19ab6:	4620      	mov	r0, r4
}
   19ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   19abc:	f7ee bbd8 	b.w	8270 <bt_att_req_free>

00019ac0 <att_handle_find_info_rsp>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   19ac0:	898a      	ldrh	r2, [r1, #12]
   19ac2:	6889      	ldr	r1, [r1, #8]
   19ac4:	2300      	movs	r3, #0
   19ac6:	f7ee bbdf 	b.w	8288 <att_handle_rsp>

00019aca <att_handle_find_type_rsp>:
   19aca:	f7ff bff9 	b.w	19ac0 <att_handle_find_info_rsp>

00019ace <att_handle_read_type_rsp>:
   19ace:	f7ff bff7 	b.w	19ac0 <att_handle_find_info_rsp>

00019ad2 <att_handle_read_rsp>:
   19ad2:	f7ff bff5 	b.w	19ac0 <att_handle_find_info_rsp>

00019ad6 <att_handle_read_blob_rsp>:
   19ad6:	f7ff bff3 	b.w	19ac0 <att_handle_find_info_rsp>

00019ada <att_handle_read_mult_rsp>:
   19ada:	f7ff bff1 	b.w	19ac0 <att_handle_find_info_rsp>

00019ade <att_handle_read_group_rsp>:
   19ade:	f7ff bfef 	b.w	19ac0 <att_handle_find_info_rsp>

00019ae2 <att_handle_write_rsp>:
   19ae2:	f7ff bfed 	b.w	19ac0 <att_handle_find_info_rsp>

00019ae6 <att_handle_prepare_write_rsp>:
   19ae6:	f7ff bfeb 	b.w	19ac0 <att_handle_find_info_rsp>

00019aea <att_handle_exec_write_rsp>:
   19aea:	f7ff bfe9 	b.w	19ac0 <att_handle_find_info_rsp>

00019aee <att_confirm>:
   19aee:	f7ff bfe7 	b.w	19ac0 <att_handle_find_info_rsp>

00019af2 <att_mtu_rsp>:
{
   19af2:	b410      	push	{r4}
   19af4:	460a      	mov	r2, r1
	if (!att) {
   19af6:	4603      	mov	r3, r0
   19af8:	b180      	cbz	r0, 19b1c <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
   19afa:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   19afc:	880c      	ldrh	r4, [r1, #0]
   19afe:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   19b00:	bf89      	itett	hi
   19b02:	2417      	movhi	r4, #23
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   19b04:	2200      	movls	r2, #0
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   19b06:	86dc      	strhhi	r4, [r3, #54]	; 0x36
	att->chan.tx.mtu = att->chan.rx.mtu;
   19b08:	f8a3 4042 	strhhi.w	r4, [r3, #66]	; 0x42
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   19b0c:	bf99      	ittee	ls
   19b0e:	2304      	movls	r3, #4
   19b10:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
   19b12:	2300      	movhi	r3, #0
   19b14:	8992      	ldrhhi	r2, [r2, #12]
}
   19b16:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
   19b18:	f7ee bbb6 	b.w	8288 <att_handle_rsp>
}
   19b1c:	bc10      	pop	{r4}
   19b1e:	4770      	bx	lr

00019b20 <att_reset>:
{
   19b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19b22:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
   19b24:	f100 05e8 	add.w	r5, r0, #232	; 0xe8
	return z_impl_k_queue_get(queue, timeout);
   19b28:	2100      	movs	r1, #0
   19b2a:	4628      	mov	r0, r5
   19b2c:	f004 f800 	bl	1db30 <z_impl_k_queue_get>
   19b30:	bb50      	cbnz	r0, 19b88 <att_reset+0x68>
	while ((buf = k_fifo_get(&att->tx_queue, K_NO_WAIT))) {
   19b32:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
   19b36:	2100      	movs	r1, #0
   19b38:	4628      	mov	r0, r5
   19b3a:	f003 fff9 	bl	1db30 <z_impl_k_queue_get>
   19b3e:	bb30      	cbnz	r0, 19b8e <att_reset+0x6e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19b40:	f3bf 8f5b 	dmb	ish
   19b44:	f104 0390 	add.w	r3, r4, #144	; 0x90
   19b48:	e853 2f00 	ldrex	r2, [r3]
   19b4c:	f042 0204 	orr.w	r2, r2, #4
   19b50:	e843 2100 	strex	r1, r2, [r3]
   19b54:	2900      	cmp	r1, #0
   19b56:	d1f7      	bne.n	19b48 <att_reset+0x28>
   19b58:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
   19b5c:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
	z_impl_k_sem_give(sem);
   19b60:	4628      	mov	r0, r5
   19b62:	f7fd fbed 	bl	17340 <z_impl_k_sem_give>
   19b66:	4628      	mov	r0, r5
   19b68:	f7fd fbea 	bl	17340 <z_impl_k_sem_give>
   19b6c:	4628      	mov	r0, r5
   19b6e:	f7fd fbe7 	bl	17340 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19b72:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   19b76:	b96d      	cbnz	r5, 19b94 <att_reset+0x74>
	if (!att->req) {
   19b78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	list->head = NULL;
   19b7c:	2200      	movs	r2, #0
	list->tail = NULL;
   19b7e:	e9c4 2226 	strd	r2, r2, [r4, #152]	; 0x98
   19b82:	b9c3      	cbnz	r3, 19bb6 <att_reset+0x96>
}
   19b84:	b003      	add	sp, #12
   19b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   19b88:	f7f8 fcf2 	bl	12570 <net_buf_unref>
   19b8c:	e7cc      	b.n	19b28 <att_reset+0x8>
		net_buf_unref(buf);
   19b8e:	f7f8 fcef 	bl	12570 <net_buf_unref>
   19b92:	e7d0      	b.n	19b36 <att_reset+0x16>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19b94:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   19b96:	686f      	ldr	r7, [r5, #4]
   19b98:	b12f      	cbz	r7, 19ba6 <att_reset+0x86>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   19b9a:	2300      	movs	r3, #0
   19b9c:	9500      	str	r5, [sp, #0]
   19b9e:	461a      	mov	r2, r3
   19ba0:	210e      	movs	r1, #14
   19ba2:	4618      	mov	r0, r3
   19ba4:	47b8      	blx	r7
		att_req_destroy(req);
   19ba6:	4628      	mov	r0, r5
   19ba8:	f7ff ff7b 	bl	19aa2 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19bac:	2e00      	cmp	r6, #0
   19bae:	d0e3      	beq.n	19b78 <att_reset+0x58>
   19bb0:	4635      	mov	r5, r6
   19bb2:	6836      	ldr	r6, [r6, #0]
   19bb4:	e7ef      	b.n	19b96 <att_reset+0x76>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19bb6:	230e      	movs	r3, #14
   19bb8:	4611      	mov	r1, r2
   19bba:	4620      	mov	r0, r4
}
   19bbc:	b003      	add	sp, #12
   19bbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19bc2:	f7ee bb61 	b.w	8288 <att_handle_rsp>

00019bc6 <bt_att_send>:
{
   19bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19bca:	4607      	mov	r7, r0
   19bcc:	460d      	mov	r5, r1
   19bce:	4614      	mov	r4, r2
   19bd0:	4698      	mov	r8, r3
	att = att_chan_get(conn);
   19bd2:	f7ed fd7b 	bl	76cc <att_chan_get>
	if (!att) {
   19bd6:	4606      	mov	r6, r0
   19bd8:	b938      	cbnz	r0, 19bea <bt_att_send+0x24>
		net_buf_unref(buf);
   19bda:	4628      	mov	r0, r5
   19bdc:	f7f8 fcc8 	bl	12570 <net_buf_unref>
		return -ENOTCONN;
   19be0:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   19be4:	4628      	mov	r0, r5
   19be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cb) {
   19bea:	b964      	cbnz	r4, 19c06 <bt_att_send+0x40>
	return z_impl_k_sem_take(sem, timeout);
   19bec:	4621      	mov	r1, r4
   19bee:	30c0      	adds	r0, #192	; 0xc0
   19bf0:	f7fd fbd2 	bl	17398 <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
   19bf4:	2800      	cmp	r0, #0
   19bf6:	da06      	bge.n	19c06 <bt_att_send+0x40>
			k_fifo_put(&att->tx_queue, buf);
   19bf8:	4629      	mov	r1, r5
   19bfa:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
   19bfe:	f003 ff6e 	bl	1dade <k_queue_append>
			return 0;
   19c02:	4625      	mov	r5, r4
   19c04:	e7ee      	b.n	19be4 <bt_att_send+0x1e>
	err = att_send(conn, buf, cb, user_data);
   19c06:	4629      	mov	r1, r5
   19c08:	4643      	mov	r3, r8
   19c0a:	4622      	mov	r2, r4
   19c0c:	4638      	mov	r0, r7
   19c0e:	f7ed fce1 	bl	75d4 <att_send>
	if (err) {
   19c12:	4605      	mov	r5, r0
   19c14:	2800      	cmp	r0, #0
   19c16:	d0e5      	beq.n	19be4 <bt_att_send+0x1e>
		if (!cb) {
   19c18:	2c00      	cmp	r4, #0
   19c1a:	d1e3      	bne.n	19be4 <bt_att_send+0x1e>
	z_impl_k_sem_give(sem);
   19c1c:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   19c20:	f7fd fb8e 	bl	17340 <z_impl_k_sem_give>
   19c24:	e7de      	b.n	19be4 <bt_att_send+0x1e>

00019c26 <bt_att_req_send>:
{
   19c26:	b538      	push	{r3, r4, r5, lr}
   19c28:	460c      	mov	r4, r1
	att = att_chan_get(conn);
   19c2a:	f7ed fd4f 	bl	76cc <att_chan_get>
	if (!att) {
   19c2e:	4605      	mov	r5, r0
   19c30:	b930      	cbnz	r0, 19c40 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   19c32:	6920      	ldr	r0, [r4, #16]
   19c34:	f7f8 fc9c 	bl	12570 <net_buf_unref>
		req->buf = NULL;
   19c38:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   19c3a:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   19c3e:	bd38      	pop	{r3, r4, r5, pc}
	if (att->req) {
   19c40:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   19c44:	b163      	cbz	r3, 19c60 <bt_att_req_send+0x3a>
	parent->next = child;
   19c46:	2000      	movs	r0, #0
   19c48:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   19c4a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   19c4e:	b91b      	cbnz	r3, 19c58 <bt_att_req_send+0x32>
	list->head = node;
   19c50:	e9c5 4426 	strd	r4, r4, [r5, #152]	; 0x98
		return 0;
   19c54:	4618      	mov	r0, r3
   19c56:	e7f2      	b.n	19c3e <bt_att_req_send+0x18>
	parent->next = child;
   19c58:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19c5a:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
   19c5e:	e7ee      	b.n	19c3e <bt_att_req_send+0x18>
	return att_send_req(att, req);
   19c60:	4621      	mov	r1, r4
}
   19c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return att_send_req(att, req);
   19c66:	f7ed bde7 	b.w	7838 <att_send_req>

00019c6a <gatt_ccc_changed>:
{
   19c6a:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   19c6c:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   19c6e:	895a      	ldrh	r2, [r3, #10]
   19c70:	428a      	cmp	r2, r1
   19c72:	d003      	beq.n	19c7c <gatt_ccc_changed+0x12>
		ccc->value = value;
   19c74:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   19c76:	68db      	ldr	r3, [r3, #12]
   19c78:	b103      	cbz	r3, 19c7c <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   19c7a:	4718      	bx	r3
}
   19c7c:	4770      	bx	lr

00019c7e <gatt_indicate_rsp>:
{
   19c7e:	b410      	push	{r4}
   19c80:	9b01      	ldr	r3, [sp, #4]
	params->func(conn, params->attr, err);
   19c82:	689c      	ldr	r4, [r3, #8]
   19c84:	460a      	mov	r2, r1
   19c86:	6859      	ldr	r1, [r3, #4]
   19c88:	4623      	mov	r3, r4
}
   19c8a:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   19c8c:	4718      	bx	r3

00019c8e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   19c8e:	2207      	movs	r2, #7
   19c90:	f7fe bfd3 	b.w	18c3a <memcpy>

00019c94 <write_name>:
{
   19c94:	b570      	push	{r4, r5, r6, lr}
   19c96:	b092      	sub	sp, #72	; 0x48
   19c98:	4615      	mov	r5, r2
   19c9a:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   19c9e:	2241      	movs	r2, #65	; 0x41
   19ca0:	2100      	movs	r1, #0
   19ca2:	a801      	add	r0, sp, #4
{
   19ca4:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   19ca6:	f7fe fff2 	bl	18c8e <memset>
	if (offset) {
   19caa:	b966      	cbnz	r6, 19cc6 <write_name+0x32>
	if (len >= sizeof(value)) {
   19cac:	2c40      	cmp	r4, #64	; 0x40
   19cae:	d80d      	bhi.n	19ccc <write_name+0x38>
	memcpy(value, buf, len);
   19cb0:	4622      	mov	r2, r4
   19cb2:	4629      	mov	r1, r5
   19cb4:	a801      	add	r0, sp, #4
   19cb6:	f7fe ffc0 	bl	18c3a <memcpy>
	bt_set_name(value);
   19cba:	a801      	add	r0, sp, #4
   19cbc:	f7eb fd94 	bl	57e8 <bt_set_name>
	return len;
   19cc0:	4620      	mov	r0, r4
}
   19cc2:	b012      	add	sp, #72	; 0x48
   19cc4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19cc6:	f06f 0006 	mvn.w	r0, #6
   19cca:	e7fa      	b.n	19cc2 <write_name+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19ccc:	f06f 000c 	mvn.w	r0, #12
   19cd0:	e7f7      	b.n	19cc2 <write_name+0x2e>

00019cd2 <gen_hash_m>:
{
   19cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   19cd4:	6807      	ldr	r7, [r0, #0]
   19cd6:	783d      	ldrb	r5, [r7, #0]
{
   19cd8:	b089      	sub	sp, #36	; 0x24
   19cda:	4606      	mov	r6, r0
   19cdc:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   19cde:	b10d      	cbz	r5, 19ce4 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   19ce0:	2501      	movs	r5, #1
   19ce2:	e015      	b.n	19d10 <gen_hash_m+0x3e>
	switch (u16->val) {
   19ce4:	887b      	ldrh	r3, [r7, #2]
   19ce6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   19cea:	d004      	beq.n	19cf6 <gen_hash_m+0x24>
   19cec:	d813      	bhi.n	19d16 <gen_hash_m+0x44>
   19cee:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   19cf2:	2b03      	cmp	r3, #3
   19cf4:	d8f4      	bhi.n	19ce0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   19cf6:	8a33      	ldrh	r3, [r6, #16]
   19cf8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19cfc:	2202      	movs	r2, #2
   19cfe:	f10d 010e 	add.w	r1, sp, #14
   19d02:	4620      	mov	r0, r4
   19d04:	f7fe fb81 	bl	1840a <tc_cmac_update>
   19d08:	b9d8      	cbnz	r0, 19d42 <gen_hash_m+0x70>
			state->err = -EINVAL;
   19d0a:	f06f 0315 	mvn.w	r3, #21
   19d0e:	65a3      	str	r3, [r4, #88]	; 0x58
}
   19d10:	4628      	mov	r0, r5
   19d12:	b009      	add	sp, #36	; 0x24
   19d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   19d16:	f642 1205 	movw	r2, #10501	; 0x2905
   19d1a:	4293      	cmp	r3, r2
   19d1c:	d8e0      	bhi.n	19ce0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   19d1e:	8a03      	ldrh	r3, [r0, #16]
   19d20:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19d24:	2202      	movs	r2, #2
   19d26:	f10d 010e 	add.w	r1, sp, #14
   19d2a:	4620      	mov	r0, r4
   19d2c:	f7fe fb6d 	bl	1840a <tc_cmac_update>
   19d30:	2800      	cmp	r0, #0
   19d32:	d0ea      	beq.n	19d0a <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   19d34:	887b      	ldrh	r3, [r7, #2]
   19d36:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19d3a:	2202      	movs	r2, #2
   19d3c:	f10d 010e 	add.w	r1, sp, #14
   19d40:	e017      	b.n	19d72 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   19d42:	887b      	ldrh	r3, [r7, #2]
   19d44:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19d48:	2202      	movs	r2, #2
   19d4a:	f10d 010e 	add.w	r1, sp, #14
   19d4e:	4620      	mov	r0, r4
   19d50:	f7fe fb5b 	bl	1840a <tc_cmac_update>
   19d54:	2800      	cmp	r0, #0
   19d56:	d0d8      	beq.n	19d0a <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   19d58:	2000      	movs	r0, #0
   19d5a:	2310      	movs	r3, #16
   19d5c:	eb0d 0203 	add.w	r2, sp, r3
   19d60:	9000      	str	r0, [sp, #0]
   19d62:	6877      	ldr	r7, [r6, #4]
   19d64:	4631      	mov	r1, r6
   19d66:	47b8      	blx	r7
		if (len < 0) {
   19d68:	1e02      	subs	r2, r0, #0
   19d6a:	da01      	bge.n	19d70 <gen_hash_m+0x9e>
			state->err = len;
   19d6c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   19d6e:	e7cf      	b.n	19d10 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   19d70:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19d72:	4620      	mov	r0, r4
   19d74:	f7fe fb49 	bl	1840a <tc_cmac_update>
   19d78:	2800      	cmp	r0, #0
   19d7a:	d1b1      	bne.n	19ce0 <gen_hash_m+0xe>
   19d7c:	e7c5      	b.n	19d0a <gen_hash_m+0x38>

00019d7e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19d7e:	f3bf 8f5b 	dmb	ish
   19d82:	6800      	ldr	r0, [r0, #0]
   19d84:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   19d88:	4108      	asrs	r0, r1
}
   19d8a:	f000 0001 	and.w	r0, r0, #1
   19d8e:	4770      	bx	lr

00019d90 <gatt_read_multiple_rsp>:
{
   19d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19d92:	9c08      	ldr	r4, [sp, #32]
   19d94:	4606      	mov	r6, r0
   19d96:	6827      	ldr	r7, [r4, #0]
	if (err || !length) {
   19d98:	460d      	mov	r5, r1
   19d9a:	b901      	cbnz	r1, 19d9e <gatt_read_multiple_rsp+0xe>
   19d9c:	b94b      	cbnz	r3, 19db2 <gatt_read_multiple_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   19d9e:	2300      	movs	r3, #0
   19da0:	9308      	str	r3, [sp, #32]
   19da2:	4622      	mov	r2, r4
   19da4:	4629      	mov	r1, r5
	params->func(conn, 0, params, NULL, 0);
   19da6:	4630      	mov	r0, r6
   19da8:	46bc      	mov	ip, r7
}
   19daa:	b003      	add	sp, #12
   19dac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   19db0:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   19db2:	9300      	str	r3, [sp, #0]
   19db4:	4613      	mov	r3, r2
   19db6:	4622      	mov	r2, r4
   19db8:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   19dba:	9508      	str	r5, [sp, #32]
   19dbc:	6827      	ldr	r7, [r4, #0]
   19dbe:	462b      	mov	r3, r5
   19dc0:	4622      	mov	r2, r4
   19dc2:	4629      	mov	r1, r5
   19dc4:	e7ef      	b.n	19da6 <gatt_read_multiple_rsp+0x16>

00019dc6 <gatt_sub_remove.part.9>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   19dc6:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   19dc8:	2300      	movs	r3, #0
   19dca:	4669      	mov	r1, sp
   19dcc:	9300      	str	r3, [sp, #0]
   19dce:	f8cd 3003 	str.w	r3, [sp, #3]
   19dd2:	f7ff ff5c 	bl	19c8e <bt_addr_le_copy>
}
   19dd6:	b003      	add	sp, #12
   19dd8:	f85d fb04 	ldr.w	pc, [sp], #4

00019ddc <match_uuid>:
   19ddc:	6008      	str	r0, [r1, #0]
   19dde:	2000      	movs	r0, #0
   19de0:	4770      	bx	lr

00019de2 <sc_ccc_cfg_write>:
{
   19de2:	b508      	push	{r3, lr}
   19de4:	4601      	mov	r1, r0
	if (value == BT_GATT_CCC_INDICATE) {
   19de6:	2a02      	cmp	r2, #2
   19de8:	7a00      	ldrb	r0, [r0, #8]
   19dea:	f101 0170 	add.w	r1, r1, #112	; 0x70
   19dee:	d105      	bne.n	19dfc <sc_ccc_cfg_write+0x1a>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   19df0:	2300      	movs	r3, #0
   19df2:	461a      	mov	r2, r3
   19df4:	f7ee fc40 	bl	8678 <sc_save>
}
   19df8:	2002      	movs	r0, #2
   19dfa:	bd08      	pop	{r3, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19dfc:	f7ee fc2c 	bl	8658 <find_sc_cfg>
		if (cfg) {
   19e00:	2800      	cmp	r0, #0
   19e02:	d0f9      	beq.n	19df8 <sc_ccc_cfg_write+0x16>
	memset(cfg, 0, sizeof(*cfg));
   19e04:	220c      	movs	r2, #12
   19e06:	2100      	movs	r1, #0
   19e08:	f7fe ff41 	bl	18c8e <memset>
   19e0c:	e7f4      	b.n	19df8 <sc_ccc_cfg_write+0x16>

00019e0e <find_ccc_cfg>:
{
   19e0e:	b513      	push	{r0, r1, r4, lr}
   19e10:	460c      	mov	r4, r1
		if (conn) {
   19e12:	b168      	cbz	r0, 19e30 <find_ccc_cfg+0x22>
			if (conn->id == ccc->cfg[i].id &&
   19e14:	7a02      	ldrb	r2, [r0, #8]
   19e16:	780b      	ldrb	r3, [r1, #0]
   19e18:	429a      	cmp	r2, r3
   19e1a:	d002      	beq.n	19e22 <find_ccc_cfg+0x14>
	return NULL;
   19e1c:	2000      	movs	r0, #0
}
   19e1e:	b002      	add	sp, #8
   19e20:	bd10      	pop	{r4, pc}
			    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
   19e22:	3101      	adds	r1, #1
   19e24:	f7ff faed 	bl	19402 <bt_conn_addr_le_cmp>
			if (conn->id == ccc->cfg[i].id &&
   19e28:	2800      	cmp	r0, #0
   19e2a:	d1f7      	bne.n	19e1c <find_ccc_cfg+0xe>
				return &ccc->cfg[i];
   19e2c:	4620      	mov	r0, r4
   19e2e:	e7f6      	b.n	19e1e <find_ccc_cfg+0x10>
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   19e30:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   19e32:	2207      	movs	r2, #7
   19e34:	f8cd 0003 	str.w	r0, [sp, #3]
   19e38:	4669      	mov	r1, sp
   19e3a:	1c60      	adds	r0, r4, #1
   19e3c:	f7fe feed 	bl	18c1a <memcmp>
   19e40:	e7f2      	b.n	19e28 <find_ccc_cfg+0x1a>

00019e42 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   19e42:	2301      	movs	r3, #1
   19e44:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19e48:	f3bf 8f5b 	dmb	ish
   19e4c:	e850 3f00 	ldrex	r3, [r0]
   19e50:	430b      	orrs	r3, r1
   19e52:	e840 3200 	strex	r2, r3, [r0]
   19e56:	2a00      	cmp	r2, #0
   19e58:	d1f8      	bne.n	19e4c <atomic_set_bit+0xa>
   19e5a:	f3bf 8f5b 	dmb	ish
}
   19e5e:	4770      	bx	lr

00019e60 <sc_restore_rsp>:
{
   19e60:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   19e62:	f7ee fc45 	bl	86f0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   19e66:	b140      	cbz	r0, 19e7a <sc_restore_rsp+0x1a>
   19e68:	7a03      	ldrb	r3, [r0, #8]
   19e6a:	07db      	lsls	r3, r3, #31
   19e6c:	d505      	bpl.n	19e7a <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   19e6e:	2100      	movs	r1, #0
   19e70:	300c      	adds	r0, #12
}
   19e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   19e76:	f7ff bfe4 	b.w	19e42 <atomic_set_bit>
}
   19e7a:	bd08      	pop	{r3, pc}

00019e7c <read_appearance>:
{
   19e7c:	b513      	push	{r0, r1, r4, lr}
   19e7e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   19e82:	4610      	mov	r0, r2
	if (offset > value_len) {
   19e84:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   19e86:	f240 3241 	movw	r2, #833	; 0x341
   19e8a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   19e8e:	d80d      	bhi.n	19eac <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   19e90:	f1c1 0402 	rsb	r4, r1, #2
   19e94:	429c      	cmp	r4, r3
   19e96:	bfa8      	it	ge
   19e98:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   19e9a:	f10d 0306 	add.w	r3, sp, #6
   19e9e:	4622      	mov	r2, r4
   19ea0:	4419      	add	r1, r3
   19ea2:	f7fe feca 	bl	18c3a <memcpy>
}
   19ea6:	4620      	mov	r0, r4
   19ea8:	b002      	add	sp, #8
   19eaa:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19eac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   19eb0:	e7f9      	b.n	19ea6 <read_appearance+0x2a>

00019eb2 <read_name>:
{
   19eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19eb6:	4698      	mov	r8, r3
   19eb8:	4616      	mov	r6, r2
   19eba:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   19ebe:	f7eb fcc7 	bl	5850 <bt_get_name>
   19ec2:	4607      	mov	r7, r0
				 strlen(name));
   19ec4:	f7fe fe96 	bl	18bf4 <strlen>
	if (offset > value_len) {
   19ec8:	b283      	uxth	r3, r0
   19eca:	42ab      	cmp	r3, r5
   19ecc:	d30c      	bcc.n	19ee8 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   19ece:	1b5c      	subs	r4, r3, r5
   19ed0:	4544      	cmp	r4, r8
   19ed2:	bfa8      	it	ge
   19ed4:	4644      	movge	r4, r8
   19ed6:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   19ed8:	4622      	mov	r2, r4
   19eda:	1979      	adds	r1, r7, r5
   19edc:	4630      	mov	r0, r6
   19ede:	f7fe feac 	bl	18c3a <memcpy>
}
   19ee2:	4620      	mov	r0, r4
   19ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19ee8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   19eec:	e7f9      	b.n	19ee2 <read_name+0x30>

00019eee <bt_gatt_attr_read_ccc>:
{
   19eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   19ef0:	68c9      	ldr	r1, [r1, #12]
{
   19ef2:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   19ef6:	4616      	mov	r6, r2
   19ef8:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   19efa:	f7ff ff88 	bl	19e0e <find_ccc_cfg>
	if (cfg) {
   19efe:	b100      	cbz	r0, 19f02 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   19f00:	8900      	ldrh	r0, [r0, #8]
   19f02:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   19f06:	2d02      	cmp	r5, #2
   19f08:	d80e      	bhi.n	19f28 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   19f0a:	f1c5 0402 	rsb	r4, r5, #2
   19f0e:	42bc      	cmp	r4, r7
   19f10:	bfa8      	it	ge
   19f12:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   19f14:	f10d 0306 	add.w	r3, sp, #6
   19f18:	4622      	mov	r2, r4
   19f1a:	1959      	adds	r1, r3, r5
   19f1c:	4630      	mov	r0, r6
   19f1e:	f7fe fe8c 	bl	18c3a <memcpy>
}
   19f22:	4620      	mov	r0, r4
   19f24:	b003      	add	sp, #12
   19f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19f28:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   19f2c:	e7f9      	b.n	19f22 <bt_gatt_attr_read_ccc+0x34>

00019f2e <cf_read>:
{
   19f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19f30:	461f      	mov	r7, r3
	u8_t data[1] = {};
   19f32:	2300      	movs	r3, #0
{
   19f34:	4616      	mov	r6, r2
   19f36:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	u8_t data[1] = {};
   19f3a:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   19f3e:	f7ee fbd7 	bl	86f0 <find_cf_cfg>
	if (cfg) {
   19f42:	b128      	cbz	r0, 19f50 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   19f44:	f100 0108 	add.w	r1, r0, #8
   19f48:	2201      	movs	r2, #1
   19f4a:	a801      	add	r0, sp, #4
   19f4c:	f7fe fe75 	bl	18c3a <memcpy>
	if (offset > value_len) {
   19f50:	2d01      	cmp	r5, #1
   19f52:	d80d      	bhi.n	19f70 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   19f54:	f1c5 0401 	rsb	r4, r5, #1
   19f58:	42bc      	cmp	r4, r7
   19f5a:	bfa8      	it	ge
   19f5c:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   19f5e:	ab01      	add	r3, sp, #4
   19f60:	4622      	mov	r2, r4
   19f62:	1959      	adds	r1, r3, r5
   19f64:	4630      	mov	r0, r6
   19f66:	f7fe fe68 	bl	18c3a <memcpy>
}
   19f6a:	4620      	mov	r0, r4
   19f6c:	b003      	add	sp, #12
   19f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19f70:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   19f74:	e7f9      	b.n	19f6a <cf_read+0x3c>

00019f76 <bt_gatt_attr_read_service>:
{
   19f76:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   19f78:	68c9      	ldr	r1, [r1, #12]
{
   19f7a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   19f7e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   19f80:	780a      	ldrb	r2, [r1, #0]
   19f82:	b992      	cbnz	r2, 19faa <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   19f84:	884a      	ldrh	r2, [r1, #2]
   19f86:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   19f8a:	2d02      	cmp	r5, #2
   19f8c:	d819      	bhi.n	19fc2 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   19f8e:	f1c5 0402 	rsb	r4, r5, #2
   19f92:	429c      	cmp	r4, r3
   19f94:	bfa8      	it	ge
   19f96:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   19f98:	f10d 0306 	add.w	r3, sp, #6
   19f9c:	4622      	mov	r2, r4
   19f9e:	1959      	adds	r1, r3, r5
   19fa0:	f7fe fe4b 	bl	18c3a <memcpy>
}
   19fa4:	4620      	mov	r0, r4
   19fa6:	b003      	add	sp, #12
   19fa8:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   19faa:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   19fac:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   19fb0:	d807      	bhi.n	19fc2 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   19fb2:	f1c5 0410 	rsb	r4, r5, #16
   19fb6:	429c      	cmp	r4, r3
   19fb8:	bfa8      	it	ge
   19fba:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   19fbc:	4622      	mov	r2, r4
   19fbe:	4429      	add	r1, r5
   19fc0:	e7ee      	b.n	19fa0 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19fc2:	f06f 0406 	mvn.w	r4, #6
   19fc6:	e7ed      	b.n	19fa4 <bt_gatt_attr_read_service+0x2e>

00019fc8 <gatt_sub_remove>:
{
   19fc8:	b538      	push	{r3, r4, r5, lr}
   19fca:	460c      	mov	r4, r1
	if (params) {
   19fcc:	4619      	mov	r1, r3
   19fce:	b16b      	cbz	r3, 19fec <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   19fd0:	f103 0510 	add.w	r5, r3, #16
Z_GENLIST_REMOVE(slist, snode)
   19fd4:	691b      	ldr	r3, [r3, #16]
   19fd6:	b982      	cbnz	r2, 19ffa <gatt_sub_remove+0x32>
   19fd8:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   19fda:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   19fdc:	4295      	cmp	r5, r2
   19fde:	d100      	bne.n	19fe2 <gatt_sub_remove+0x1a>
	list->tail = node;
   19fe0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   19fe2:	2300      	movs	r3, #0
   19fe4:	610b      	str	r3, [r1, #16]
		params->notify(conn, params, NULL, 0);
   19fe6:	680d      	ldr	r5, [r1, #0]
   19fe8:	461a      	mov	r2, r3
   19fea:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   19fec:	68a3      	ldr	r3, [r4, #8]
   19fee:	b953      	cbnz	r3, 1a006 <gatt_sub_remove+0x3e>
   19ff0:	4620      	mov	r0, r4
}
   19ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19ff6:	f7ff bee6 	b.w	19dc6 <gatt_sub_remove.part.9>
   19ffa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   19ffc:	68e3      	ldr	r3, [r4, #12]
   19ffe:	429d      	cmp	r5, r3
	list->tail = node;
   1a000:	bf08      	it	eq
   1a002:	60e2      	streq	r2, [r4, #12]
   1a004:	e7ed      	b.n	19fe2 <gatt_sub_remove+0x1a>
   1a006:	bd38      	pop	{r3, r4, r5, pc}

0001a008 <gatt_write_ccc_rsp>:
{
   1a008:	b570      	push	{r4, r5, r6, lr}
   1a00a:	9c04      	ldr	r4, [sp, #16]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a00c:	f3bf 8f5b 	dmb	ish
   1a010:	4605      	mov	r5, r0
   1a012:	f104 030c 	add.w	r3, r4, #12
   1a016:	e853 2f00 	ldrex	r2, [r3]
   1a01a:	f022 0204 	bic.w	r2, r2, #4
   1a01e:	e843 2c00 	strex	ip, r2, [r3]
   1a022:	f1bc 0f00 	cmp.w	ip, #0
   1a026:	d1f6      	bne.n	1a016 <gatt_write_ccc_rsp+0xe>
   1a028:	f3bf 8f5b 	dmb	ish
	if (err) {
   1a02c:	b1a9      	cbz	r1, 1a05a <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   1a02e:	2100      	movs	r1, #0
   1a030:	f7ee fa32 	bl	8498 <gatt_sub_find_free>
		if (!sub) {
   1a034:	4601      	mov	r1, r0
   1a036:	b1c8      	cbz	r0, 1a06c <gatt_write_ccc_rsp+0x64>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1a038:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a03a:	b1bb      	cbz	r3, 1a06c <gatt_write_ccc_rsp+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a03c:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1a03e:	f104 0010 	add.w	r0, r4, #16
   1a042:	4283      	cmp	r3, r0
   1a044:	d105      	bne.n	1a052 <gatt_write_ccc_rsp+0x4a>
				gatt_sub_remove(conn, sub, tmp, params);
   1a046:	4623      	mov	r3, r4
   1a048:	4628      	mov	r0, r5
}
   1a04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_sub_remove(conn, sub, tmp, params);
   1a04e:	f7ff bfbb 	b.w	19fc8 <gatt_sub_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a052:	b15a      	cbz	r2, 1a06c <gatt_write_ccc_rsp+0x64>
   1a054:	4613      	mov	r3, r2
   1a056:	6812      	ldr	r2, [r2, #0]
   1a058:	e7f3      	b.n	1a042 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   1a05a:	8923      	ldrh	r3, [r4, #8]
   1a05c:	b933      	cbnz	r3, 1a06c <gatt_write_ccc_rsp+0x64>
		params->notify(conn, params, NULL, 0);
   1a05e:	6825      	ldr	r5, [r4, #0]
   1a060:	4621      	mov	r1, r4
   1a062:	46ac      	mov	ip, r5
   1a064:	461a      	mov	r2, r3
}
   1a066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
   1a06a:	4760      	bx	ip
}
   1a06c:	bd70      	pop	{r4, r5, r6, pc}

0001a06e <bt_gatt_attr_read>:
{
   1a06e:	b510      	push	{r4, lr}
   1a070:	4610      	mov	r0, r2
   1a072:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1a076:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
   1a07a:	4291      	cmp	r1, r2
   1a07c:	d80b      	bhi.n	1a096 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1a07e:	1a54      	subs	r4, r2, r1
   1a080:	429c      	cmp	r4, r3
   1a082:	bfa8      	it	ge
   1a084:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1a086:	9b03      	ldr	r3, [sp, #12]
   1a088:	b2a4      	uxth	r4, r4
   1a08a:	4622      	mov	r2, r4
   1a08c:	4419      	add	r1, r3
   1a08e:	f7fe fdd4 	bl	18c3a <memcpy>
}
   1a092:	4620      	mov	r0, r4
   1a094:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a096:	f06f 0406 	mvn.w	r4, #6
   1a09a:	e7fa      	b.n	1a092 <bt_gatt_attr_read+0x24>

0001a09c <bt_gatt_attr_read_chrc>:
{
   1a09c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1a09e:	68ce      	ldr	r6, [r1, #12]
{
   1a0a0:	b087      	sub	sp, #28
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1a0a2:	4608      	mov	r0, r1
{
   1a0a4:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1a0a6:	79b3      	ldrb	r3, [r6, #6]
   1a0a8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1a0ac:	4617      	mov	r7, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1a0ae:	f7ee fd6b 	bl	8b88 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1a0b2:	6831      	ldr	r1, [r6, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1a0b4:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1a0b8:	780b      	ldrb	r3, [r1, #0]
{
   1a0ba:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1a0be:	b99b      	cbnz	r3, 1a0e8 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1a0c0:	884b      	ldrh	r3, [r1, #2]
   1a0c2:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1a0c6:	2305      	movs	r3, #5
	if (offset > value_len) {
   1a0c8:	42ab      	cmp	r3, r5
   1a0ca:	d315      	bcc.n	1a0f8 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1a0cc:	1b5b      	subs	r3, r3, r5
   1a0ce:	42a3      	cmp	r3, r4
   1a0d0:	bfa8      	it	ge
   1a0d2:	4623      	movge	r3, r4
   1a0d4:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1a0d6:	ab01      	add	r3, sp, #4
   1a0d8:	4622      	mov	r2, r4
   1a0da:	1959      	adds	r1, r3, r5
   1a0dc:	4638      	mov	r0, r7
   1a0de:	f7fe fdac 	bl	18c3a <memcpy>
}
   1a0e2:	4620      	mov	r0, r4
   1a0e4:	b007      	add	sp, #28
   1a0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1a0e8:	2210      	movs	r2, #16
   1a0ea:	3101      	adds	r1, #1
   1a0ec:	f10d 0007 	add.w	r0, sp, #7
   1a0f0:	f7fe fda3 	bl	18c3a <memcpy>
		value_len += 16U;
   1a0f4:	2313      	movs	r3, #19
   1a0f6:	e7e7      	b.n	1a0c8 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a0f8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1a0fc:	e7f1      	b.n	1a0e2 <bt_gatt_attr_read_chrc+0x46>

0001a0fe <bt_gatt_foreach_attr>:
{
   1a0fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1a100:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1a104:	2300      	movs	r3, #0
   1a106:	9300      	str	r3, [sp, #0]
   1a108:	461a      	mov	r2, r3
   1a10a:	f7ee fd55 	bl	8bb8 <bt_gatt_foreach_attr_type>
}
   1a10e:	b005      	add	sp, #20
   1a110:	f85d fb04 	ldr.w	pc, [sp], #4

0001a114 <db_hash_process>:
	db_hash_gen(true);
   1a114:	f7ee bdae 	b.w	8c74 <db_hash_gen.isra.18>

0001a118 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1a118:	07d3      	lsls	r3, r2, #31
{
   1a11a:	b510      	push	{r4, lr}
   1a11c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1a11e:	d504      	bpl.n	1a12a <bt_gatt_check_perm+0x12>
   1a120:	f014 0f15 	tst.w	r4, #21
   1a124:	d017      	beq.n	1a156 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1a126:	684b      	ldr	r3, [r1, #4]
   1a128:	b1ab      	cbz	r3, 1a156 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1a12a:	0793      	lsls	r3, r2, #30
   1a12c:	d504      	bpl.n	1a138 <bt_gatt_check_perm+0x20>
   1a12e:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1a132:	d012      	beq.n	1a15a <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1a134:	688b      	ldr	r3, [r1, #8]
   1a136:	b183      	cbz	r3, 1a15a <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1a138:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1a13a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1a13e:	d104      	bne.n	1a14a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1a140:	f014 000c 	ands.w	r0, r4, #12
   1a144:	bf18      	it	ne
   1a146:	200f      	movne	r0, #15
}
   1a148:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1a14a:	f7ff f958 	bl	193fe <bt_conn_get_security>
   1a14e:	2802      	cmp	r0, #2
   1a150:	d8f6      	bhi.n	1a140 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1a152:	2005      	movs	r0, #5
   1a154:	e7f8      	b.n	1a148 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1a156:	2002      	movs	r0, #2
   1a158:	e7f6      	b.n	1a148 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1a15a:	2003      	movs	r0, #3
   1a15c:	e7f4      	b.n	1a148 <bt_gatt_check_perm+0x30>

0001a15e <gatt_discover_next>:
{
   1a15e:	b570      	push	{r4, r5, r6, lr}
   1a160:	4605      	mov	r5, r0
   1a162:	4614      	mov	r4, r2
	if (!last_handle)
   1a164:	b929      	cbnz	r1, 1a172 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1a166:	4621      	mov	r1, r4
   1a168:	4628      	mov	r0, r5
   1a16a:	f7ee fefd 	bl	8f68 <bt_gatt_discover>
   1a16e:	b928      	cbnz	r0, 1a17c <gatt_discover_next+0x1e>
}
   1a170:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1a172:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a176:	4299      	cmp	r1, r3
   1a178:	d107      	bne.n	1a18a <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1a17a:	8111      	strh	r1, [r2, #8]
	params->func(conn, NULL, params);
   1a17c:	6863      	ldr	r3, [r4, #4]
   1a17e:	4622      	mov	r2, r4
   1a180:	4628      	mov	r0, r5
   1a182:	2100      	movs	r1, #0
}
   1a184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1a188:	4718      	bx	r3
		params->start_handle++;
   1a18a:	3101      	adds	r1, #1
	if (params->start_handle > params->end_handle) {
   1a18c:	89d3      	ldrh	r3, [r2, #14]
		params->start_handle++;
   1a18e:	b289      	uxth	r1, r1
	if (params->start_handle > params->end_handle) {
   1a190:	428b      	cmp	r3, r1
		params->start_handle++;
   1a192:	8111      	strh	r1, [r2, #8]
	if (params->start_handle > params->end_handle) {
   1a194:	d2e7      	bcs.n	1a166 <gatt_discover_next+0x8>
   1a196:	e7f1      	b.n	1a17c <gatt_discover_next+0x1e>

0001a198 <gatt_find_type_rsp>:
{
   1a198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a19c:	b088      	sub	sp, #32
   1a19e:	4607      	mov	r7, r0
   1a1a0:	4690      	mov	r8, r2
   1a1a2:	461e      	mov	r6, r3
   1a1a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
	if (err) {
   1a1a6:	2900      	cmp	r1, #0
   1a1a8:	d13a      	bne.n	1a220 <gatt_find_type_rsp+0x88>
   1a1aa:	460c      	mov	r4, r1
	u16_t end_handle = 0U, start_handle;
   1a1ac:	468a      	mov	sl, r1
		struct bt_gatt_attr attr = {};
   1a1ae:	4689      	mov	r9, r1
	for (i = 0U; length >= sizeof(rsp->list[i]);
   1a1b0:	2e03      	cmp	r6, #3
   1a1b2:	d809      	bhi.n	1a1c8 <gatt_find_type_rsp+0x30>
	if (length > 0) {
   1a1b4:	2e00      	cmp	r6, #0
   1a1b6:	d133      	bne.n	1a220 <gatt_find_type_rsp+0x88>
	gatt_discover_next(conn, end_handle, params);
   1a1b8:	462a      	mov	r2, r5
   1a1ba:	4651      	mov	r1, sl
   1a1bc:	4638      	mov	r0, r7
   1a1be:	f7ff ffce 	bl	1a15e <gatt_discover_next>
}
   1a1c2:	b008      	add	sp, #32
   1a1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_gatt_attr attr = {};
   1a1c8:	2210      	movs	r2, #16
   1a1ca:	2100      	movs	r1, #0
   1a1cc:	eb0d 0002 	add.w	r0, sp, r2
   1a1d0:	f7fe fd5d 	bl	18c8e <memset>
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
   1a1d4:	b2e3      	uxtb	r3, r4
   1a1d6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1a1da:	f88d 9000 	strb.w	r9, [sp]
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
   1a1de:	881a      	ldrh	r2, [r3, #0]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
   1a1e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1a1e4:	7c2b      	ldrb	r3, [r5, #16]
		attr.handle = start_handle;
   1a1e6:	f8ad 201c 	strh.w	r2, [sp, #28]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
   1a1ea:	2b00      	cmp	r3, #0
   1a1ec:	f642 0301 	movw	r3, #10241	; 0x2801
   1a1f0:	bf08      	it	eq
   1a1f2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1a1f6:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = params->uuid;
   1a1fa:	682b      	ldr	r3, [r5, #0]
   1a1fc:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
   1a1fe:	ab01      	add	r3, sp, #4
   1a200:	9306      	str	r3, [sp, #24]
		value.end_handle = end_handle;
   1a202:	f8ad a008 	strh.w	sl, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1a206:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1a20a:	686b      	ldr	r3, [r5, #4]
   1a20c:	462a      	mov	r2, r5
   1a20e:	a903      	add	r1, sp, #12
   1a210:	4638      	mov	r0, r7
   1a212:	4798      	blx	r3
   1a214:	3401      	adds	r4, #1
   1a216:	2800      	cmp	r0, #0
   1a218:	d0d3      	beq.n	1a1c2 <gatt_find_type_rsp+0x2a>
	     i++, length -=  sizeof(rsp->list[i])) {
   1a21a:	3e04      	subs	r6, #4
   1a21c:	b2b6      	uxth	r6, r6
   1a21e:	e7c7      	b.n	1a1b0 <gatt_find_type_rsp+0x18>
	params->func(conn, NULL, params);
   1a220:	686b      	ldr	r3, [r5, #4]
   1a222:	462a      	mov	r2, r5
   1a224:	2100      	movs	r1, #0
   1a226:	4638      	mov	r0, r7
   1a228:	4798      	blx	r3
   1a22a:	e7ca      	b.n	1a1c2 <gatt_find_type_rsp+0x2a>

0001a22c <bt_gatt_unsubscribe>:
	if (conn->state != BT_CONN_CONNECTED) {
   1a22c:	7a83      	ldrb	r3, [r0, #10]
   1a22e:	2b06      	cmp	r3, #6
{
   1a230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a234:	4681      	mov	r9, r0
   1a236:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1a238:	d169      	bne.n	1a30e <bt_gatt_unsubscribe+0xe2>
	sub = gatt_sub_find(conn);
   1a23a:	2100      	movs	r1, #0
   1a23c:	f7ee f92c 	bl	8498 <gatt_sub_find_free>
	if (!sub) {
   1a240:	4680      	mov	r8, r0
   1a242:	b920      	cbnz	r0, 1a24e <bt_gatt_unsubscribe+0x22>
		return -EINVAL;
   1a244:	f06f 0015 	mvn.w	r0, #21
}
   1a248:	b003      	add	sp, #12
   1a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1a24e:	6885      	ldr	r5, [r0, #8]
   1a250:	b1c5      	cbz	r5, 1a284 <bt_gatt_unsubscribe+0x58>
   1a252:	f1b5 0410 	subs.w	r4, r5, #16
   1a256:	d017      	beq.n	1a288 <bt_gatt_unsubscribe+0x5c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a258:	682d      	ldr	r5, [r5, #0]
   1a25a:	b105      	cbz	r5, 1a25e <bt_gatt_unsubscribe+0x32>
   1a25c:	3d10      	subs	r5, #16
   1a25e:	2700      	movs	r7, #0
   1a260:	463b      	mov	r3, r7
   1a262:	46ba      	mov	sl, r7
			if (atomic_test_bit(params->flags,
   1a264:	f106 0b0c 	add.w	fp, r6, #12
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1a268:	b984      	cbnz	r4, 1a28c <bt_gatt_unsubscribe+0x60>
	if (!found) {
   1a26a:	2b00      	cmp	r3, #0
   1a26c:	d0ea      	beq.n	1a244 <bt_gatt_unsubscribe+0x18>
	if (has_subscription) {
   1a26e:	f1ba 0f00 	cmp.w	sl, #0
   1a272:	d041      	beq.n	1a2f8 <bt_gatt_unsubscribe+0xcc>
		params->notify(conn, params, NULL, 0);
   1a274:	6835      	ldr	r5, [r6, #0]
   1a276:	4623      	mov	r3, r4
   1a278:	4622      	mov	r2, r4
   1a27a:	4631      	mov	r1, r6
   1a27c:	4648      	mov	r0, r9
   1a27e:	47a8      	blx	r5
		return 0;
   1a280:	4620      	mov	r0, r4
   1a282:	e7e1      	b.n	1a248 <bt_gatt_unsubscribe+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1a284:	462c      	mov	r4, r5
   1a286:	e7ea      	b.n	1a25e <bt_gatt_unsubscribe+0x32>
   1a288:	4625      	mov	r5, r4
   1a28a:	e7e8      	b.n	1a25e <bt_gatt_unsubscribe+0x32>
		if (params == tmp) {
   1a28c:	42b4      	cmp	r4, r6
   1a28e:	f104 0110 	add.w	r1, r4, #16
   1a292:	d125      	bne.n	1a2e0 <bt_gatt_unsubscribe+0xb4>
Z_GENLIST_REMOVE(slist, snode)
   1a294:	6920      	ldr	r0, [r4, #16]
   1a296:	b9df      	cbnz	r7, 1a2d0 <bt_gatt_unsubscribe+0xa4>
   1a298:	f8d8 300c 	ldr.w	r3, [r8, #12]
	list->head = node;
   1a29c:	f8c8 0008 	str.w	r0, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   1a2a0:	4299      	cmp	r1, r3
   1a2a2:	d101      	bne.n	1a2a8 <bt_gatt_unsubscribe+0x7c>
	list->tail = node;
   1a2a4:	f8c8 000c 	str.w	r0, [r8, #12]
	parent->next = child;
   1a2a8:	2300      	movs	r3, #0
   1a2aa:	6123      	str	r3, [r4, #16]
			if (atomic_test_bit(params->flags,
   1a2ac:	2102      	movs	r1, #2
   1a2ae:	4658      	mov	r0, fp
   1a2b0:	f7ff fd65 	bl	19d7e <atomic_test_bit>
   1a2b4:	b1e0      	cbz	r0, 1a2f0 <bt_gatt_unsubscribe+0xc4>
   1a2b6:	9001      	str	r0, [sp, #4]
	bt_att_req_cancel(conn, params);
   1a2b8:	4631      	mov	r1, r6
   1a2ba:	4648      	mov	r0, r9
   1a2bc:	f7ee f892 	bl	83e4 <bt_att_req_cancel>
   1a2c0:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1a2c2:	b1bd      	cbz	r5, 1a2f4 <bt_gatt_unsubscribe+0xc8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a2c4:	6929      	ldr	r1, [r5, #16]
   1a2c6:	b101      	cbz	r1, 1a2ca <bt_gatt_unsubscribe+0x9e>
   1a2c8:	3910      	subs	r1, #16
   1a2ca:	462c      	mov	r4, r5
   1a2cc:	460d      	mov	r5, r1
   1a2ce:	e7cb      	b.n	1a268 <bt_gatt_unsubscribe+0x3c>
	parent->next = child;
   1a2d0:	6038      	str	r0, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a2d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1a2d6:	4299      	cmp	r1, r3
	list->tail = node;
   1a2d8:	bf08      	it	eq
   1a2da:	f8c8 700c 	streq.w	r7, [r8, #12]
   1a2de:	e7e3      	b.n	1a2a8 <bt_gatt_unsubscribe+0x7c>
		if (tmp->value_handle == params->value_handle) {
   1a2e0:	88a4      	ldrh	r4, [r4, #4]
   1a2e2:	88b0      	ldrh	r0, [r6, #4]
   1a2e4:	460f      	mov	r7, r1
   1a2e6:	4284      	cmp	r4, r0
   1a2e8:	bf08      	it	eq
   1a2ea:	f04f 0a01 	moveq.w	sl, #1
   1a2ee:	e7e8      	b.n	1a2c2 <bt_gatt_unsubscribe+0x96>
			found = true;
   1a2f0:	2301      	movs	r3, #1
   1a2f2:	e7e6      	b.n	1a2c2 <bt_gatt_unsubscribe+0x96>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1a2f4:	4629      	mov	r1, r5
   1a2f6:	e7e8      	b.n	1a2ca <bt_gatt_unsubscribe+0x9e>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   1a2f8:	88f1      	ldrh	r1, [r6, #6]
	params->value = 0x0000;
   1a2fa:	f8a6 a008 	strh.w	sl, [r6, #8]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   1a2fe:	4633      	mov	r3, r6
   1a300:	4652      	mov	r2, sl
   1a302:	4648      	mov	r0, r9
}
   1a304:	b003      	add	sp, #12
   1a306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   1a30a:	f7ee ba77 	b.w	87fc <gatt_write_ccc.constprop.26>
		return -ENOTCONN;
   1a30e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1a312:	e799      	b.n	1a248 <bt_gatt_unsubscribe+0x1c>

0001a314 <bt_gatt_notification>:
{
   1a314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a318:	4688      	mov	r8, r1
	sub = gatt_sub_find(conn);
   1a31a:	2100      	movs	r1, #0
{
   1a31c:	4606      	mov	r6, r0
   1a31e:	4691      	mov	r9, r2
   1a320:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1a322:	f7ee f8b9 	bl	8498 <gatt_sub_find_free>
	if (!sub) {
   1a326:	b1e0      	cbz	r0, 1a362 <bt_gatt_notification+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1a328:	6883      	ldr	r3, [r0, #8]
   1a32a:	b1d3      	cbz	r3, 1a362 <bt_gatt_notification+0x4e>
   1a32c:	f1b3 0510 	subs.w	r5, r3, #16
   1a330:	d017      	beq.n	1a362 <bt_gatt_notification+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a332:	681c      	ldr	r4, [r3, #0]
   1a334:	b104      	cbz	r4, 1a338 <bt_gatt_notification+0x24>
   1a336:	3c10      	subs	r4, #16
		if (handle != params->value_handle) {
   1a338:	88ab      	ldrh	r3, [r5, #4]
   1a33a:	4543      	cmp	r3, r8
   1a33c:	d10a      	bne.n	1a354 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   1a33e:	682f      	ldr	r7, [r5, #0]
   1a340:	4653      	mov	r3, sl
   1a342:	464a      	mov	r2, r9
   1a344:	4629      	mov	r1, r5
   1a346:	4630      	mov	r0, r6
   1a348:	47b8      	blx	r7
   1a34a:	b918      	cbnz	r0, 1a354 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   1a34c:	4629      	mov	r1, r5
   1a34e:	4630      	mov	r0, r6
   1a350:	f7ff ff6c 	bl	1a22c <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1a354:	b12c      	cbz	r4, 1a362 <bt_gatt_notification+0x4e>
   1a356:	6923      	ldr	r3, [r4, #16]
   1a358:	b103      	cbz	r3, 1a35c <bt_gatt_notification+0x48>
   1a35a:	3b10      	subs	r3, #16
{
   1a35c:	4625      	mov	r5, r4
   1a35e:	461c      	mov	r4, r3
   1a360:	e7ea      	b.n	1a338 <bt_gatt_notification+0x24>
}
   1a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a366 <bt_gatt_change_aware>:
{
   1a366:	b510      	push	{r4, lr}
   1a368:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1a36a:	f7ee f9c1 	bl	86f0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1a36e:	b910      	cbnz	r0, 1a376 <bt_gatt_change_aware+0x10>
		return true;
   1a370:	2401      	movs	r4, #1
}
   1a372:	4620      	mov	r0, r4
   1a374:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1a376:	7a03      	ldrb	r3, [r0, #8]
   1a378:	07db      	lsls	r3, r3, #31
   1a37a:	d5f9      	bpl.n	1a370 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1a37c:	f100 030c 	add.w	r3, r0, #12
   1a380:	2100      	movs	r1, #0
   1a382:	4618      	mov	r0, r3
   1a384:	f7ff fcfb 	bl	19d7e <atomic_test_bit>
   1a388:	4602      	mov	r2, r0
   1a38a:	2800      	cmp	r0, #0
   1a38c:	d1f0      	bne.n	1a370 <bt_gatt_change_aware+0xa>
	if (!req) {
   1a38e:	2c00      	cmp	r4, #0
   1a390:	d0ef      	beq.n	1a372 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1a392:	2101      	movs	r1, #1
   1a394:	4618      	mov	r0, r3
   1a396:	f7ff fcf2 	bl	19d7e <atomic_test_bit>
   1a39a:	4604      	mov	r4, r0
   1a39c:	b180      	cbz	r0, 1a3c0 <bt_gatt_change_aware+0x5a>
   1a39e:	f3bf 8f5b 	dmb	ish
   1a3a2:	e853 1f00 	ldrex	r1, [r3]
   1a3a6:	f021 0102 	bic.w	r1, r1, #2
   1a3aa:	e843 1000 	strex	r0, r1, [r3]
   1a3ae:	2800      	cmp	r0, #0
   1a3b0:	d1f7      	bne.n	1a3a2 <bt_gatt_change_aware+0x3c>
   1a3b2:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a3b6:	4611      	mov	r1, r2
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1a3b8:	4618      	mov	r0, r3
   1a3ba:	f7ff fd42 	bl	19e42 <atomic_set_bit>
	return false;
   1a3be:	e7d8      	b.n	1a372 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1a3c0:	2101      	movs	r1, #1
   1a3c2:	e7f9      	b.n	1a3b8 <bt_gatt_change_aware+0x52>

0001a3c4 <bt_smp_recv>:
{
   1a3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1a3c6:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   1a3c8:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1a3ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a3ce:	4608      	mov	r0, r1
   1a3d0:	f7ff f8aa 	bl	19528 <bt_l2cap_create_pdu_timeout>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a3d4:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
   1a3d8:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a3da:	2101      	movs	r1, #1
   1a3dc:	4630      	mov	r0, r6
   1a3de:	f000 ff26 	bl	1b22e <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1a3e2:	2405      	movs	r4, #5
   1a3e4:	7004      	strb	r4, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
   1a3e6:	2101      	movs	r1, #1
   1a3e8:	4630      	mov	r0, r6
   1a3ea:	f000 ff20 	bl	1b22e <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1a3ee:	7004      	strb	r4, [r0, #0]
   1a3f0:	2400      	movs	r4, #0
   1a3f2:	9400      	str	r4, [sp, #0]
   1a3f4:	4623      	mov	r3, r4
   1a3f6:	462a      	mov	r2, r5
   1a3f8:	2106      	movs	r1, #6
   1a3fa:	4638      	mov	r0, r7
   1a3fc:	f7ff f897 	bl	1952e <bt_l2cap_send_cb>
}
   1a400:	4620      	mov	r0, r4
   1a402:	b003      	add	sp, #12
   1a404:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a406 <bt_smp_sign>:
   1a406:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a40a:	4770      	bx	lr

0001a40c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept);

int bt_smp_init(void)
{
	return 0;
}
   1a40c:	2000      	movs	r0, #0
   1a40e:	4770      	bx	lr

0001a410 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   1a410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   1a412:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1a414:	1dc3      	adds	r3, r0, #7
   1a416:	f023 0303 	bic.w	r3, r3, #3
{
   1a41a:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1a41c:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1a41e:	3a01      	subs	r2, #1
   1a420:	b294      	uxth	r4, r2
{
   1a422:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1a424:	2204      	movs	r2, #4
   1a426:	2100      	movs	r1, #0
   1a428:	fb06 0004 	mla	r0, r6, r4, r0
   1a42c:	f7fe fc2f 	bl	18c8e <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1a430:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1a434:	3c01      	subs	r4, #1
   1a436:	b2a4      	uxth	r4, r4
   1a438:	42bc      	cmp	r4, r7
   1a43a:	d101      	bne.n	1a440 <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   1a43c:	b003      	add	sp, #12
   1a43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   1a440:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   1a444:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   1a446:	2204      	movs	r2, #4
   1a448:	1b80      	subs	r0, r0, r6
   1a44a:	eb0d 0102 	add.w	r1, sp, r2
   1a44e:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   1a450:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   1a452:	f7fe fbf2 	bl	18c3a <memcpy>
   1a456:	e7ed      	b.n	1a434 <mem_init+0x24>

0001a458 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1a458:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   1a45a:	6804      	ldr	r4, [r0, #0]
{
   1a45c:	4606      	mov	r6, r0
	if (*mem_head) {
   1a45e:	b18c      	cbz	r4, 1a484 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1a460:	1de3      	adds	r3, r4, #7
   1a462:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1a466:	2204      	movs	r2, #4
   1a468:	4621      	mov	r1, r4
   1a46a:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1a46e:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1a470:	f7fe fbe3 	bl	18c3a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1a474:	9b01      	ldr	r3, [sp, #4]
   1a476:	b123      	cbz	r3, 1a482 <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   1a478:	1dda      	adds	r2, r3, #7
   1a47a:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1a47e:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   1a480:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1a482:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   1a484:	4620      	mov	r0, r4
   1a486:	b002      	add	sp, #8
   1a488:	bd70      	pop	{r4, r5, r6, pc}

0001a48a <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   1a48a:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1a48c:	680c      	ldr	r4, [r1, #0]
{
   1a48e:	4606      	mov	r6, r0
   1a490:	460d      	mov	r5, r1
	if (*mem_head) {
   1a492:	b11c      	cbz	r4, 1a49c <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1a494:	1de3      	adds	r3, r4, #7
   1a496:	f023 0303 	bic.w	r3, r3, #3
   1a49a:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   1a49c:	2204      	movs	r2, #4
   1a49e:	4629      	mov	r1, r5
   1a4a0:	4630      	mov	r0, r6
   1a4a2:	f7fe fbca 	bl	18c3a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1a4a6:	1df2      	adds	r2, r6, #7
   1a4a8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   1a4ac:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1a4ae:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   1a4b0:	602e      	str	r6, [r5, #0]
}
   1a4b2:	bd70      	pop	{r4, r5, r6, pc}

0001a4b4 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   1a4b4:	fb02 0001 	mla	r0, r2, r1, r0
   1a4b8:	4770      	bx	lr

0001a4ba <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   1a4ba:	1a40      	subs	r0, r0, r1
   1a4bc:	b280      	uxth	r0, r0
}
   1a4be:	fbb0 f0f2 	udiv	r0, r0, r2
   1a4c2:	4770      	bx	lr

0001a4c4 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   1a4c4:	b510      	push	{r4, lr}
	src += len;
   1a4c6:	4411      	add	r1, r2
	while (len--) {
   1a4c8:	3801      	subs	r0, #1
   1a4ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a4ce:	3a01      	subs	r2, #1
   1a4d0:	b292      	uxth	r2, r2
   1a4d2:	429a      	cmp	r2, r3
   1a4d4:	d100      	bne.n	1a4d8 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   1a4d6:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   1a4d8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1a4dc:	f800 4f01 	strb.w	r4, [r0, #1]!
   1a4e0:	e7f5      	b.n	1a4ce <mem_rcopy+0xa>

0001a4e2 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
   1a4e2:	4401      	add	r1, r0
   1a4e4:	4288      	cmp	r0, r1
   1a4e6:	d101      	bne.n	1a4ec <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   1a4e8:	2000      	movs	r0, #0
   1a4ea:	4770      	bx	lr
		if (*src++) {
   1a4ec:	f810 3b01 	ldrb.w	r3, [r0], #1
   1a4f0:	2b00      	cmp	r3, #0
   1a4f2:	d0f7      	beq.n	1a4e4 <mem_nz+0x2>
			return 1;
   1a4f4:	2001      	movs	r0, #1
}
   1a4f6:	4770      	bx	lr

0001a4f8 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1a4f8:	6010      	str	r0, [r2, #0]
   1a4fa:	6008      	str	r0, [r1, #0]

	return link;
}
   1a4fc:	4770      	bx	lr

0001a4fe <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1a4fe:	6803      	ldr	r3, [r0, #0]
   1a500:	680a      	ldr	r2, [r1, #0]
   1a502:	4293      	cmp	r3, r2
   1a504:	f04f 0200 	mov.w	r2, #0
		return NULL;
   1a508:	bf12      	itee	ne
   1a50a:	4613      	movne	r3, r2
	}

	old_head = *head;
	*head = *tail = NULL;
   1a50c:	600a      	streq	r2, [r1, #0]
   1a50e:	6002      	streq	r2, [r0, #0]

	return old_head;
}
   1a510:	4618      	mov	r0, r3
   1a512:	4770      	bx	lr

0001a514 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   1a514:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1a516:	6814      	ldr	r4, [r2, #0]
   1a518:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1a51a:	6814      	ldr	r4, [r2, #0]
   1a51c:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   1a51e:	6010      	str	r0, [r2, #0]

	return link;
}
   1a520:	bd10      	pop	{r4, pc}

0001a522 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1a522:	4288      	cmp	r0, r1
   1a524:	d003      	beq.n	1a52e <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1a526:	b11a      	cbz	r2, 1a530 <memq_peek+0xe>
		*mem = head->mem;
   1a528:	6843      	ldr	r3, [r0, #4]
   1a52a:	6013      	str	r3, [r2, #0]
   1a52c:	4770      	bx	lr
		return NULL;
   1a52e:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1a530:	4770      	bx	lr

0001a532 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1a532:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1a534:	4283      	cmp	r3, r0
   1a536:	d009      	beq.n	1a54c <memq_dequeue+0x1a>
	if (mem) {
   1a538:	b122      	cbz	r2, 1a544 <memq_dequeue+0x12>
		*mem = head->mem;
   1a53a:	6858      	ldr	r0, [r3, #4]
   1a53c:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1a53e:	681a      	ldr	r2, [r3, #0]
   1a540:	600a      	str	r2, [r1, #0]

	return old_head;
   1a542:	e001      	b.n	1a548 <memq_dequeue+0x16>
	if (old_head == NULL) {
   1a544:	2b00      	cmp	r3, #0
   1a546:	d1fa      	bne.n	1a53e <memq_dequeue+0xc>
}
   1a548:	4618      	mov	r0, r3
   1a54a:	4770      	bx	lr
		return NULL; /* queue is empty */
   1a54c:	2300      	movs	r3, #0
   1a54e:	e7fb      	b.n	1a548 <memq_dequeue+0x16>

0001a550 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   1a550:	b510      	push	{r4, lr}
   1a552:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
   1a554:	2000      	movs	r0, #0

	while (octets_len--) {
   1a556:	3901      	subs	r1, #1
   1a558:	b2c9      	uxtb	r1, r1
   1a55a:	29ff      	cmp	r1, #255	; 0xff
   1a55c:	d100      	bne.n	1a560 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   1a55e:	bd10      	pop	{r4, pc}
		bite = *octets;
   1a560:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   1a564:	2b00      	cmp	r3, #0
   1a566:	d0f6      	beq.n	1a556 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   1a568:	b25b      	sxtb	r3, r3
   1a56a:	1e5c      	subs	r4, r3, #1
   1a56c:	4023      	ands	r3, r4
			one_count++;
   1a56e:	3001      	adds	r0, #1
			bite &= (bite - 1);
   1a570:	b2db      	uxtb	r3, r3
			one_count++;
   1a572:	b2c0      	uxtb	r0, r0
   1a574:	e7f6      	b.n	1a564 <util_ones_count_get+0x14>

0001a576 <ticks_to_expire_prep>:
{
   1a576:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1a578:	1a55      	subs	r5, r2, r1
   1a57a:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   1a57e:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1a580:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1a582:	d109      	bne.n	1a598 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a584:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1a588:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   1a58a:	42a2      	cmp	r2, r4
   1a58c:	d90e      	bls.n	1a5ac <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   1a58e:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   1a590:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1a592:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1a594:	6144      	str	r4, [r0, #20]
}
   1a596:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a598:	1a8a      	subs	r2, r1, r2
   1a59a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1a59e:	4293      	cmp	r3, r2
   1a5a0:	d901      	bls.n	1a5a6 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   1a5a2:	1a9a      	subs	r2, r3, r2
   1a5a4:	e7f1      	b.n	1a58a <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   1a5a6:	4422      	add	r2, r4
   1a5a8:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   1a5aa:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   1a5ac:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   1a5ae:	2200      	movs	r2, #0
   1a5b0:	e7ef      	b.n	1a592 <ticks_to_expire_prep+0x1c>

0001a5b2 <ticker_job_op_cb>:
{
   1a5b2:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1a5b4:	2200      	movs	r2, #0
   1a5b6:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   1a5b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   1a5ba:	6259      	str	r1, [r3, #36]	; 0x24
{
   1a5bc:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   1a5be:	b10a      	cbz	r2, 1a5c4 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1a5c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1a5c2:	4710      	bx	r2
}
   1a5c4:	4770      	bx	lr

0001a5c6 <ticker_worker>:
{
   1a5c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1a5ca:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   1a5cc:	2301      	movs	r3, #1
{
   1a5ce:	b08b      	sub	sp, #44	; 0x2c
   1a5d0:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   1a5d2:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1a5d4:	b91e      	cbnz	r6, 1a5de <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   1a5d6:	7f43      	ldrb	r3, [r0, #29]
   1a5d8:	2bff      	cmp	r3, #255	; 0xff
   1a5da:	d103      	bne.n	1a5e4 <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   1a5dc:	77c6      	strb	r6, [r0, #31]
}
   1a5de:	b00b      	add	sp, #44	; 0x2c
   1a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1a5e4:	f7f7 fa1a 	bl	11a1c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a5e8:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   1a5ea:	f895 801d 	ldrb.w	r8, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a5ee:	1ac0      	subs	r0, r0, r3
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   1a5f0:	7f2b      	ldrb	r3, [r5, #28]
   1a5f2:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a5f4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   1a5f8:	d027      	beq.n	1a64a <ticker_worker+0x84>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1a5fa:	69ae      	ldr	r6, [r5, #24]
	u8_t slot_reserved = 0;
   1a5fc:	454e      	cmp	r6, r9
   1a5fe:	bf94      	ite	ls
   1a600:	2300      	movls	r3, #0
   1a602:	2301      	movhi	r3, #1
   1a604:	9301      	str	r3, [sp, #4]
	node = &instance->nodes[0];
   1a606:	f8d5 a000 	ldr.w	sl, [r5]
	ticks_expired = 0U;
   1a60a:	f04f 0b00 	mov.w	fp, #0
	while (ticker_id_head != TICKER_NULL) {
   1a60e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1a612:	d11c      	bne.n	1a64e <ticker_worker+0x88>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1a614:	7aea      	ldrb	r2, [r5, #11]
   1a616:	7aab      	ldrb	r3, [r5, #10]
   1a618:	4293      	cmp	r3, r2
   1a61a:	d105      	bne.n	1a628 <ticker_worker+0x62>
	u8_t idx = *ticks_elapsed_index + 1;
   1a61c:	3301      	adds	r3, #1
   1a61e:	b2db      	uxtb	r3, r3
		idx = 0U;
   1a620:	2b02      	cmp	r3, #2
   1a622:	bf08      	it	eq
   1a624:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   1a626:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1a628:	7aeb      	ldrb	r3, [r5, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1a62a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1a62c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1a630:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1a632:	f8c3 b00c 	str.w	fp, [r3, #12]
	instance->worker_trigger = 0U;
   1a636:	2300      	movs	r3, #0
   1a638:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1a63a:	2104      	movs	r1, #4
   1a63c:	462b      	mov	r3, r5
   1a63e:	2003      	movs	r0, #3
   1a640:	46a4      	mov	ip, r4
}
   1a642:	b00b      	add	sp, #44	; 0x2c
   1a644:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1a648:	4760      	bx	ip
	u8_t slot_reserved = 0;
   1a64a:	9601      	str	r6, [sp, #4]
   1a64c:	e7db      	b.n	1a606 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
   1a64e:	232c      	movs	r3, #44	; 0x2c
   1a650:	fb18 f803 	smulbb	r8, r8, r3
   1a654:	eb0a 0408 	add.w	r4, sl, r8
		ticks_to_expire = ticker->ticks_to_expire;
   1a658:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1a65a:	4599      	cmp	r9, r3
   1a65c:	d3da      	bcc.n	1a614 <ticker_worker+0x4e>
		if (ticker->ticks_slot != 0U &&
   1a65e:	69a7      	ldr	r7, [r4, #24]
		ticker_id_head = ticker->next;
   1a660:	f81a 8008 	ldrb.w	r8, [sl, r8]
		ticks_elapsed -= ticks_to_expire;
   1a664:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
   1a668:	449b      	add	fp, r3
		if (ticker->ticks_slot != 0U &&
   1a66a:	b35f      	cbz	r7, 1a6c4 <ticker_worker+0xfe>
   1a66c:	8be3      	ldrh	r3, [r4, #30]
   1a66e:	461e      	mov	r6, r3
   1a670:	9b01      	ldr	r3, [sp, #4]
   1a672:	2b00      	cmp	r3, #0
   1a674:	f040 8083 	bne.w	1a77e <ticker_worker+0x1b8>
	if (ticker->lazy_periodic > lazy_current) {
   1a678:	8ba2      	ldrh	r2, [r4, #28]
   1a67a:	4296      	cmp	r6, r2
   1a67c:	d37f      	bcc.n	1a77e <ticker_worker+0x1b8>
	} else if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1a67e:	f994 3029 	ldrsb.w	r3, [r4, #41]	; 0x29
   1a682:	9302      	str	r3, [sp, #8]
   1a684:	3380      	adds	r3, #128	; 0x80
   1a686:	d01c      	beq.n	1a6c2 <ticker_worker+0xfc>
   1a688:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1a68c:	f000 8088 	beq.w	1a7a0 <ticker_worker+0x1da>
		u32_t acc_ticks_to_expire = 0;
   1a690:	9901      	ldr	r1, [sp, #4]
		u32_t current_age = ticker->ticks_periodic +
   1a692:	6863      	ldr	r3, [r4, #4]
		u32_t acc_ticks_to_expire = 0;
   1a694:	9104      	str	r1, [sp, #16]
				(lazy_current - ticker->priority);
   1a696:	9902      	ldr	r1, [sp, #8]
			lazy_current -= ticker->lazy_periodic;
   1a698:	1ab2      	subs	r2, r6, r2
		u32_t current_age = ticker->ticks_periodic +
   1a69a:	fb02 3303 	mla	r3, r2, r3, r3
				(lazy_current - ticker->priority);
   1a69e:	1a52      	subs	r2, r2, r1
		u32_t current_age = ticker->ticks_periodic +
   1a6a0:	9306      	str	r3, [sp, #24]
				(lazy_current - ticker->priority);
   1a6a2:	9209      	str	r2, [sp, #36]	; 0x24
		u32_t current_age = ticker->ticks_periodic +
   1a6a4:	4643      	mov	r3, r8
			struct ticker_node *ticker_next = &nodes[id_head];
   1a6a6:	222c      	movs	r2, #44	; 0x2c
   1a6a8:	fb13 f302 	smulbb	r3, r3, r2
   1a6ac:	eb0a 0e03 	add.w	lr, sl, r3
   1a6b0:	9305      	str	r3, [sp, #20]
			if (ticker_next->ticks_slot == 0) {
   1a6b2:	f8de 3018 	ldr.w	r3, [lr, #24]
   1a6b6:	bb4b      	cbnz	r3, 1a70c <ticker_worker+0x146>
			id_head = ticker_next->next;
   1a6b8:	9b05      	ldr	r3, [sp, #20]
   1a6ba:	f81a 3003 	ldrb.w	r3, [sl, r3]
		while (id_head != TICKER_NULL) {
   1a6be:	2bff      	cmp	r3, #255	; 0xff
   1a6c0:	d1f1      	bne.n	1a6a6 <ticker_worker+0xe0>
		must_expire_skip = 0U;
   1a6c2:	2700      	movs	r7, #0
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1a6c4:	78a2      	ldrb	r2, [r4, #2]
   1a6c6:	7863      	ldrb	r3, [r4, #1]
   1a6c8:	1a9b      	subs	r3, r3, r2
   1a6ca:	b2db      	uxtb	r3, r3
   1a6cc:	2b01      	cmp	r3, #1
   1a6ce:	d19e      	bne.n	1a60e <ticker_worker+0x48>
		if (ticker->timeout_func) {
   1a6d0:	68e3      	ldr	r3, [r4, #12]
		ticker->ack--;
   1a6d2:	3a01      	subs	r2, #1
   1a6d4:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   1a6d6:	461e      	mov	r6, r3
   1a6d8:	2b00      	cmp	r3, #0
   1a6da:	d098      	beq.n	1a60e <ticker_worker+0x48>
					   ticks_expired -
   1a6dc:	6960      	ldr	r0, [r4, #20]
   1a6de:	696b      	ldr	r3, [r5, #20]
			ticker->timeout_func(ticks_at_expire,
   1a6e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   1a6e2:	ebab 0000 	sub.w	r0, fp, r0
   1a6e6:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1a6e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1a6ec:	2f00      	cmp	r7, #0
   1a6ee:	d159      	bne.n	1a7a4 <ticker_worker+0x1de>
   1a6f0:	8be2      	ldrh	r2, [r4, #30]
   1a6f2:	6923      	ldr	r3, [r4, #16]
   1a6f4:	47b0      	blx	r6
			if (must_expire_skip == 0U) {
   1a6f6:	2f00      	cmp	r7, #0
   1a6f8:	d189      	bne.n	1a60e <ticker_worker+0x48>
				if (ticker->ticks_slot != 0U) {
   1a6fa:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   1a6fc:	83e7      	strh	r7, [r4, #30]
					slot_reserved = 1U;
   1a6fe:	2b00      	cmp	r3, #0
   1a700:	9b01      	ldr	r3, [sp, #4]
				ticker->force = 0U;
   1a702:	70e7      	strb	r7, [r4, #3]
					slot_reserved = 1U;
   1a704:	bf18      	it	ne
   1a706:	2301      	movne	r3, #1
   1a708:	9301      	str	r3, [sp, #4]
   1a70a:	e780      	b.n	1a60e <ticker_worker+0x48>
			s32_t lazy_next = ticker_next->lazy_current;
   1a70c:	f8be 001e 	ldrh.w	r0, [lr, #30]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1a710:	9a04      	ldr	r2, [sp, #16]
				ticker_next->lazy_periodic > lazy_next;
   1a712:	f8be c01c 	ldrh.w	ip, [lr, #28]
				ticker_next->priority;
   1a716:	f99e 1029 	ldrsb.w	r1, [lr, #41]	; 0x29
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1a71a:	f8de 3008 	ldr.w	r3, [lr, #8]
				ticker_next->priority;
   1a71e:	9103      	str	r1, [sp, #12]
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1a720:	f8de 1004 	ldr.w	r1, [lr, #4]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1a724:	441a      	add	r2, r3
			if (!lazy_next_periodic_skip) {
   1a726:	4560      	cmp	r0, ip
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1a728:	9204      	str	r2, [sp, #16]
			s32_t lazy_next = ticker_next->lazy_current;
   1a72a:	4602      	mov	r2, r0
				lazy_next -= ticker_next->lazy_periodic;
   1a72c:	bf28      	it	cs
   1a72e:	eba0 020c 	subcs.w	r2, r0, ip
					  0U :
   1a732:	2900      	cmp	r1, #0
   1a734:	d032      	beq.n	1a79c <ticker_worker+0x1d6>
   1a736:	1acb      	subs	r3, r1, r3
   1a738:	9307      	str	r3, [sp, #28]
			u8_t next_force = (ticker_next->force > ticker->force);
   1a73a:	f89e 3003 	ldrb.w	r3, [lr, #3]
   1a73e:	9308      	str	r3, [sp, #32]
			if (!lazy_next_periodic_skip &&
   1a740:	4560      	cmp	r0, ip
			u8_t next_force = (ticker_next->force > ticker->force);
   1a742:	f894 e003 	ldrb.w	lr, [r4, #3]
			if (!lazy_next_periodic_skip &&
   1a746:	d3b7      	bcc.n	1a6b8 <ticker_worker+0xf2>
   1a748:	9b04      	ldr	r3, [sp, #16]
   1a74a:	429f      	cmp	r7, r3
   1a74c:	d9b4      	bls.n	1a6b8 <ticker_worker+0xf2>
			    (acc_ticks_to_expire < ticker->ticks_slot) &&
   1a74e:	9b08      	ldr	r3, [sp, #32]
   1a750:	4573      	cmp	r3, lr
   1a752:	d814      	bhi.n	1a77e <ticker_worker+0x1b8>
			    (next_force ||
   1a754:	9b03      	ldr	r3, [sp, #12]
   1a756:	3380      	adds	r3, #128	; 0x80
   1a758:	d011      	beq.n	1a77e <ticker_worker+0x1b8>
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1a75a:	9b07      	ldr	r3, [sp, #28]
   1a75c:	fb01 3302 	mla	r3, r1, r2, r3
				(lazy_next - ticker_next->priority) >
   1a760:	9903      	ldr	r1, [sp, #12]
   1a762:	1a52      	subs	r2, r2, r1
			     next_is_critical ||
   1a764:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a766:	428a      	cmp	r2, r1
   1a768:	dd02      	ble.n	1a770 <ticker_worker+0x1aa>
			    (next_has_priority && !current_is_older) ||
   1a76a:	9a06      	ldr	r2, [sp, #24]
   1a76c:	429a      	cmp	r2, r3
   1a76e:	d906      	bls.n	1a77e <ticker_worker+0x1b8>
   1a770:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1a774:	428a      	cmp	r2, r1
   1a776:	d19f      	bne.n	1a6b8 <ticker_worker+0xf2>
			    (equal_priority && next_is_older))) {
   1a778:	9a06      	ldr	r2, [sp, #24]
   1a77a:	429a      	cmp	r2, r3
   1a77c:	d29c      	bcs.n	1a6b8 <ticker_worker+0xf2>
			ticker->lazy_current++;
   1a77e:	4633      	mov	r3, r6
   1a780:	3301      	adds	r3, #1
			if ((ticker->must_expire == 0U) ||
   1a782:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
			ticker->lazy_current++;
   1a786:	b29b      	uxth	r3, r3
   1a788:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1a78a:	2a00      	cmp	r2, #0
   1a78c:	f43f af3f 	beq.w	1a60e <ticker_worker+0x48>
   1a790:	8ba2      	ldrh	r2, [r4, #28]
   1a792:	429a      	cmp	r2, r3
   1a794:	f4bf af3b 	bcs.w	1a60e <ticker_worker+0x48>
			must_expire_skip = 1U;
   1a798:	2701      	movs	r7, #1
   1a79a:	e793      	b.n	1a6c4 <ticker_worker+0xfe>
					  0U :
   1a79c:	9107      	str	r1, [sp, #28]
   1a79e:	e7cc      	b.n	1a73a <ticker_worker+0x174>
		must_expire_skip = 0U;
   1a7a0:	9f01      	ldr	r7, [sp, #4]
   1a7a2:	e78f      	b.n	1a6c4 <ticker_worker+0xfe>
			ticker->timeout_func(ticks_at_expire,
   1a7a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a7a8:	e7a3      	b.n	1a6f2 <ticker_worker+0x12c>

0001a7aa <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1a7aa:	f7f7 b937 	b.w	11a1c <cntr_cnt_get>

0001a7ae <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a7ae:	1a40      	subs	r0, r0, r1
}
   1a7b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a7b4:	4770      	bx	lr

0001a7b6 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

u8_t ll_tx_pwr_lvl_get(u8_t handle_type,
		       u16_t handle, u8_t type, s8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   1a7b6:	2802      	cmp	r0, #2
{
   1a7b8:	b538      	push	{r3, r4, r5, lr}
   1a7ba:	4604      	mov	r4, r0
   1a7bc:	461d      	mov	r5, r3
	switch (handle_type) {
   1a7be:	d107      	bne.n	1a7d0 <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   1a7c0:	4608      	mov	r0, r1
   1a7c2:	f000 fa20 	bl	1ac06 <ll_connected_get>
			if (!conn) {
   1a7c6:	b108      	cbz	r0, 1a7cc <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1a7c8:	2400      	movs	r4, #0
   1a7ca:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   1a7cc:	4620      	mov	r0, r4
   1a7ce:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   1a7d0:	2401      	movs	r4, #1
   1a7d2:	e7fb      	b.n	1a7cc <ll_tx_pwr_lvl_get+0x16>

0001a7d4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1a7d4:	2300      	movs	r3, #0
   1a7d6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1a7d8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   1a7da:	4770      	bx	lr

0001a7dc <sys_put_le32>:
	dst[1] = val >> 8;
   1a7dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1a7e0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1a7e2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1a7e4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1a7e6:	0a00      	lsrs	r0, r0, #8
   1a7e8:	704b      	strb	r3, [r1, #1]
   1a7ea:	70c8      	strb	r0, [r1, #3]
}
   1a7ec:	4770      	bx	lr

0001a7ee <sys_get_le64>:
{
   1a7ee:	4603      	mov	r3, r0
}
   1a7f0:	6800      	ldr	r0, [r0, #0]
   1a7f2:	6859      	ldr	r1, [r3, #4]
   1a7f4:	4770      	bx	lr

0001a7f6 <hci_evt_create>:
{
   1a7f6:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a7f8:	3008      	adds	r0, #8
{
   1a7fa:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a7fc:	2102      	movs	r1, #2
{
   1a7fe:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a800:	f000 fd15 	bl	1b22e <net_buf_simple_add>
	hdr->evt = evt;
   1a804:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   1a806:	7044      	strb	r4, [r0, #1]
}
   1a808:	bd38      	pop	{r3, r4, r5, pc}

0001a80a <meta_evt>:
{
   1a80a:	b570      	push	{r4, r5, r6, lr}
   1a80c:	4604      	mov	r4, r0
   1a80e:	4615      	mov	r5, r2
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1a810:	3201      	adds	r2, #1
{
   1a812:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   1a814:	3408      	adds	r4, #8
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1a816:	b2d2      	uxtb	r2, r2
   1a818:	213e      	movs	r1, #62	; 0x3e
   1a81a:	f7ff ffec 	bl	1a7f6 <hci_evt_create>
	me = net_buf_add(buf, sizeof(*me));
   1a81e:	2101      	movs	r1, #1
   1a820:	4620      	mov	r0, r4
   1a822:	f000 fd04 	bl	1b22e <net_buf_simple_add>
	me->subevent = subevt;
   1a826:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
   1a828:	4629      	mov	r1, r5
   1a82a:	4620      	mov	r0, r4
}
   1a82c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   1a830:	f000 bcfd 	b.w	1b22e <net_buf_simple_add>

0001a834 <hci_num_cmplt_encode>:
{
   1a834:	b570      	push	{r4, r5, r6, lr}
   1a836:	4606      	mov	r6, r0
   1a838:	460d      	mov	r5, r1
   1a83a:	4614      	mov	r4, r2
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   1a83c:	2113      	movs	r1, #19
   1a83e:	2205      	movs	r2, #5
   1a840:	f7ff ffd9 	bl	1a7f6 <hci_evt_create>
	ep = net_buf_add(buf, len);
   1a844:	2105      	movs	r1, #5
   1a846:	f106 0008 	add.w	r0, r6, #8
   1a84a:	f000 fcf0 	bl	1b22e <net_buf_simple_add>
	ep->num_handles = num_handles;
   1a84e:	2301      	movs	r3, #1
   1a850:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   1a852:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1a856:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   1a85a:	bd70      	pop	{r4, r5, r6, pc}

0001a85c <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1a85c:	7903      	ldrb	r3, [r0, #4]
   1a85e:	2b02      	cmp	r3, #2
   1a860:	d007      	beq.n	1a872 <hci_get_class+0x16>
		switch (node_rx->hdr.type) {
   1a862:	2b08      	cmp	r3, #8
   1a864:	d00e      	beq.n	1a884 <hci_get_class+0x28>
   1a866:	d30f      	bcc.n	1a888 <hci_get_class+0x2c>
   1a868:	2b0e      	cmp	r3, #14
			return HCI_CLASS_EVT_CONNECTION;
   1a86a:	bf8c      	ite	hi
   1a86c:	2000      	movhi	r0, #0
   1a86e:	2003      	movls	r0, #3
   1a870:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1a872:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a876:	f003 0303 	and.w	r3, r3, #3
   1a87a:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   1a87c:	bf0c      	ite	eq
   1a87e:	2004      	moveq	r0, #4
   1a880:	2005      	movne	r0, #5
   1a882:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1a884:	2001      	movs	r0, #1
   1a886:	4770      	bx	lr
			return HCI_CLASS_NONE;
   1a888:	2000      	movs	r0, #0
}
   1a88a:	4770      	bx	lr

0001a88c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   1a88c:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1a88e:	2300      	movs	r3, #0
   1a890:	f000 fc4d 	bl	1b12e <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1a894:	2000      	movs	r0, #0
   1a896:	bd08      	pop	{r3, pc}

0001a898 <disabled_cb>:
   1a898:	f7fc bd52 	b.w	17340 <z_impl_k_sem_give>

0001a89c <rx_demux_conn_tx_ack>:
{
   1a89c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a89e:	4606      	mov	r6, r0
   1a8a0:	4614      	mov	r4, r2
   1a8a2:	9300      	str	r3, [sp, #0]
   1a8a4:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   1a8a8:	f7f5 fba6 	bl	fff8 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1a8ac:	9a00      	ldr	r2, [sp, #0]
   1a8ae:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1a8b2:	4621      	mov	r1, r4
   1a8b4:	f7f5 fbe4 	bl	10080 <ull_conn_tx_ack>
   1a8b8:	4605      	mov	r5, r0
		ull_conn_link_tx_release(link);
   1a8ba:	4620      	mov	r0, r4
   1a8bc:	f7f5 fb62 	bl	ff84 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   1a8c0:	2001      	movs	r0, #1
   1a8c2:	f7f5 fa61 	bl	fd88 <ull_conn_tx_demux>
		if (conn) {
   1a8c6:	b11d      	cbz	r5, 1a8d0 <rx_demux_conn_tx_ack+0x34>
			ull_conn_tx_lll_enqueue(conn, 1);
   1a8c8:	2101      	movs	r1, #1
   1a8ca:	4628      	mov	r0, r5
   1a8cc:	f7f5 faa2 	bl	fe14 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1a8d0:	466a      	mov	r2, sp
   1a8d2:	f10d 0106 	add.w	r1, sp, #6
   1a8d6:	4630      	mov	r0, r6
   1a8d8:	f7f5 fb78 	bl	ffcc <ull_conn_ack_by_last_peek>
	} while (link);
   1a8dc:	4604      	mov	r4, r0
   1a8de:	2800      	cmp	r0, #0
   1a8e0:	d1e2      	bne.n	1a8a8 <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   1a8e2:	f7f1 fd7f 	bl	c3e4 <ll_rx_sched>
}
   1a8e6:	b002      	add	sp, #8
   1a8e8:	bd70      	pop	{r4, r5, r6, pc}

0001a8ea <chan_sel_remap>:
{
   1a8ea:	b530      	push	{r4, r5, lr}
   1a8ec:	1e42      	subs	r2, r0, #1
   1a8ee:	1d03      	adds	r3, r0, #4
	chan_next = 0U;
   1a8f0:	2000      	movs	r0, #0
	while (byte_count--) {
   1a8f2:	4293      	cmp	r3, r2
   1a8f4:	d100      	bne.n	1a8f8 <chan_sel_remap+0xe>
}
   1a8f6:	bd30      	pop	{r4, r5, pc}
		bite = *chan_map;
   1a8f8:	f100 0408 	add.w	r4, r0, #8
   1a8fc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
		while (bit_count--) {
   1a900:	b2e4      	uxtb	r4, r4
   1a902:	4284      	cmp	r4, r0
   1a904:	d0f5      	beq.n	1a8f2 <chan_sel_remap+0x8>
			if (bite & 0x01) {
   1a906:	f015 0f01 	tst.w	r5, #1
   1a90a:	d003      	beq.n	1a914 <chan_sel_remap+0x2a>
				if (chan_index == 0U) {
   1a90c:	2900      	cmp	r1, #0
   1a90e:	d0f2      	beq.n	1a8f6 <chan_sel_remap+0xc>
				chan_index--;
   1a910:	3901      	subs	r1, #1
   1a912:	b2c9      	uxtb	r1, r1
			chan_next++;
   1a914:	3001      	adds	r0, #1
   1a916:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   1a918:	086d      	lsrs	r5, r5, #1
   1a91a:	e7f2      	b.n	1a902 <chan_sel_remap+0x18>

0001a91c <lll_chan_sel_1>:
{
   1a91c:	b430      	push	{r4, r5}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1a91e:	fb02 1101 	mla	r1, r2, r1, r1
   1a922:	7802      	ldrb	r2, [r0, #0]
{
   1a924:	f89d 5008 	ldrb.w	r5, [sp, #8]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1a928:	4411      	add	r1, r2
   1a92a:	2425      	movs	r4, #37	; 0x25
   1a92c:	fbb1 f2f4 	udiv	r2, r1, r4
   1a930:	fb04 1212 	mls	r2, r4, r2, r1
   1a934:	b2d1      	uxtb	r1, r2
	*chan_use = chan_next;
   1a936:	7001      	strb	r1, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1a938:	08c8      	lsrs	r0, r1, #3
   1a93a:	f002 0207 	and.w	r2, r2, #7
   1a93e:	5c1c      	ldrb	r4, [r3, r0]
   1a940:	fa44 f202 	asr.w	r2, r4, r2
   1a944:	07d2      	lsls	r2, r2, #31
   1a946:	d408      	bmi.n	1a95a <lll_chan_sel_1+0x3e>
		chan_index = chan_next % chan_count;
   1a948:	fbb1 f2f5 	udiv	r2, r1, r5
   1a94c:	fb05 1112 	mls	r1, r5, r2, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   1a950:	b2c9      	uxtb	r1, r1
   1a952:	4618      	mov	r0, r3
}
   1a954:	bc30      	pop	{r4, r5}
		chan_next = chan_sel_remap(chan_map, chan_index);
   1a956:	f7ff bfc8 	b.w	1a8ea <chan_sel_remap>
}
   1a95a:	4608      	mov	r0, r1
   1a95c:	bc30      	pop	{r4, r5}
   1a95e:	4770      	bx	lr

0001a960 <clock_control_on>:
	return api->on(dev, sys);
   1a960:	6843      	ldr	r3, [r0, #4]
   1a962:	681b      	ldr	r3, [r3, #0]
   1a964:	4718      	bx	r3

0001a966 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   1a966:	2000      	movs	r0, #0
   1a968:	f7ef b95a 	b.w	9c20 <mayfly_run>

0001a96c <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a96c:	4668      	mov	r0, sp
   1a96e:	f020 0107 	bic.w	r1, r0, #7
   1a972:	468d      	mov	sp, r1
   1a974:	b501      	push	{r0, lr}
	isr_radio();
   1a976:	f7f7 f905 	bl	11b84 <isr_radio>
	ISR_DIRECT_PM();
   1a97a:	f7e8 fbed 	bl	3158 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1a97e:	f7e8 fb3f 	bl	3000 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a982:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1a986:	4685      	mov	sp, r0
   1a988:	4770      	bx	lr

0001a98a <lll_reset>:
}
   1a98a:	2000      	movs	r0, #0
   1a98c:	4770      	bx	lr

0001a98e <lll_prepare>:
{
   1a98e:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1a990:	2400      	movs	r4, #0
   1a992:	9401      	str	r4, [sp, #4]
   1a994:	9c04      	ldr	r4, [sp, #16]
   1a996:	9400      	str	r4, [sp, #0]
   1a998:	f7f2 f87a 	bl	ca90 <prepare>
}
   1a99c:	b002      	add	sp, #8
   1a99e:	bd10      	pop	{r4, pc}

0001a9a0 <lll_prepare_done>:
}
   1a9a0:	2000      	movs	r0, #0
   1a9a2:	4770      	bx	lr

0001a9a4 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1a9a4:	e9d0 2300 	ldrd	r2, r3, [r0]
   1a9a8:	2a00      	cmp	r2, #0
   1a9aa:	da04      	bge.n	1a9b6 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   1a9ac:	6880      	ldr	r0, [r0, #8]
   1a9ae:	4298      	cmp	r0, r3
   1a9b0:	bf38      	it	cc
   1a9b2:	4618      	movcc	r0, r3
   1a9b4:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   1a9b6:	429a      	cmp	r2, r3
   1a9b8:	bf38      	it	cc
   1a9ba:	461a      	movcc	r2, r3
   1a9bc:	4610      	mov	r0, r2
}
   1a9be:	4770      	bx	lr

0001a9c0 <lll_preempt_calc>:
{
   1a9c0:	b510      	push	{r4, lr}
   1a9c2:	4614      	mov	r4, r2
	u32_t ticks_now = ticker_ticks_now_get();
   1a9c4:	f7ff fef1 	bl	1a7aa <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1a9c8:	4621      	mov	r1, r4
   1a9ca:	f7ff fef0 	bl	1a7ae <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1a9ce:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1a9d0:	0203      	lsls	r3, r0, #8
   1a9d2:	d404      	bmi.n	1a9de <lll_preempt_calc+0x1e>
   1a9d4:	2809      	cmp	r0, #9
   1a9d6:	bf94      	ite	ls
   1a9d8:	2000      	movls	r0, #0
   1a9da:	2001      	movhi	r0, #1
}
   1a9dc:	bd10      	pop	{r4, pc}
	return 0;
   1a9de:	2000      	movs	r0, #0
   1a9e0:	e7fc      	b.n	1a9dc <lll_preempt_calc+0x1c>

0001a9e2 <ull_adv_init>:
}
   1a9e2:	2000      	movs	r0, #0
   1a9e4:	4770      	bx	lr

0001a9e6 <ull_adv_reset>:
{
   1a9e6:	b508      	push	{r3, lr}
		(void)disable(handle);
   1a9e8:	f7f2 fdde 	bl	d5a8 <disable.constprop.5>
}
   1a9ec:	2000      	movs	r0, #0
   1a9ee:	bd08      	pop	{r3, pc}

0001a9f0 <ull_adv_is_enabled>:
{
   1a9f0:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1a9f2:	f7f2 fdcb 	bl	d58c <ull_adv_is_enabled_get>
}
   1a9f6:	3000      	adds	r0, #0
   1a9f8:	bf18      	it	ne
   1a9fa:	2001      	movne	r0, #1
   1a9fc:	bd08      	pop	{r3, pc}

0001a9fe <ull_adv_filter_pol_get>:
{
   1a9fe:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1aa00:	f7f2 fdc4 	bl	d58c <ull_adv_is_enabled_get>
	if (!adv) {
   1aa04:	b118      	cbz	r0, 1aa0e <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   1aa06:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   1aa0a:	f000 0003 	and.w	r0, r0, #3
}
   1aa0e:	bd08      	pop	{r3, pc}

0001aa10 <isr_race>:
	radio_status_reset();
   1aa10:	f7f7 b9a2 	b.w	11d58 <radio_status_reset>

0001aa14 <isr_abort>:
{
   1aa14:	b510      	push	{r4, lr}
   1aa16:	4604      	mov	r4, r0
	radio_status_reset();
   1aa18:	f7f7 f99e 	bl	11d58 <radio_status_reset>
	radio_tmr_status_reset();
   1aa1c:	f7f7 fa5a 	bl	11ed4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1aa20:	f7f7 fa34 	bl	11e8c <radio_filter_status_reset>
	radio_ar_status_reset();
   1aa24:	f7f7 fbf4 	bl	12210 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1aa28:	f7f7 f9f8 	bl	11e1c <radio_rssi_status_reset>
	radio_filter_disable();
   1aa2c:	f7f7 fa24 	bl	11e78 <radio_filter_disable>
	isr_cleanup(param);
   1aa30:	4620      	mov	r0, r4
}
   1aa32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1aa36:	f7f2 be49 	b.w	d6cc <isr_cleanup>

0001aa3a <isr_rx_ci_adva_check>:
		       BDADDR_SIZE);
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
   1aa3a:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   1aa3c:	7804      	ldrb	r4, [r0, #0]
   1aa3e:	780a      	ldrb	r2, [r1, #0]
   1aa40:	f3c4 1380 	ubfx	r3, r4, #6, #1
   1aa44:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1aa48:	d119      	bne.n	1aa7e <isr_rx_ci_adva_check+0x44>
   1aa4a:	f004 040f 	and.w	r4, r4, #15
   1aa4e:	2c01      	cmp	r4, #1
   1aa50:	f100 0502 	add.w	r5, r0, #2
   1aa54:	f101 0608 	add.w	r6, r1, #8
   1aa58:	d008      	beq.n	1aa6c <isr_rx_ci_adva_check+0x32>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1aa5a:	2206      	movs	r2, #6
   1aa5c:	4631      	mov	r1, r6
   1aa5e:	4628      	mov	r0, r5
   1aa60:	f7fe f8db 	bl	18c1a <memcmp>
			 BDADDR_SIZE)) ||
   1aa64:	fab0 f080 	clz	r0, r0
   1aa68:	0940      	lsrs	r0, r0, #5
			  BDADDR_SIZE)));
}
   1aa6a:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1aa6c:	2206      	movs	r2, #6
   1aa6e:	4631      	mov	r1, r6
   1aa70:	4628      	mov	r0, r5
   1aa72:	f7fe f8d2 	bl	18c1a <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1aa76:	2800      	cmp	r0, #0
   1aa78:	d1ef      	bne.n	1aa5a <isr_rx_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   1aa7a:	4620      	mov	r0, r4
   1aa7c:	e7f5      	b.n	1aa6a <isr_rx_ci_adva_check+0x30>
   1aa7e:	2000      	movs	r0, #0
   1aa80:	e7f3      	b.n	1aa6a <isr_rx_ci_adva_check+0x30>

0001aa82 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1aa82:	68c3      	ldr	r3, [r0, #12]
{
   1aa84:	b570      	push	{r4, r5, r6, lr}
   1aa86:	4604      	mov	r4, r0
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1aa88:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1aa8a:	f7ff fe8e 	bl	1a7aa <ticker_ticks_now_get>
   1aa8e:	4605      	mov	r5, r0
   1aa90:	4630      	mov	r0, r6
   1aa92:	f7ff ff87 	bl	1a9a4 <lll_evt_offset_get>
	p->remainder = 0;
   1aa96:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1aa98:	1a28      	subs	r0, r5, r0
   1aa9a:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   1aa9c:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1aa9e:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1aaa0:	4620      	mov	r0, r4
}
   1aaa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1aaa6:	f7f3 b8d7 	b.w	dc58 <prepare_cb>

0001aaaa <isr_done>:
{
   1aaaa:	b510      	push	{r4, lr}
   1aaac:	4604      	mov	r4, r0
	radio_status_reset();
   1aaae:	f7f7 f953 	bl	11d58 <radio_status_reset>
	radio_tmr_status_reset();
   1aab2:	f7f7 fa0f 	bl	11ed4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1aab6:	f7f7 f9e9 	bl	11e8c <radio_filter_status_reset>
	radio_ar_status_reset();
   1aaba:	f7f7 fba9 	bl	12210 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1aabe:	f7f7 f9ad 	bl	11e1c <radio_rssi_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1aac2:	7b23      	ldrb	r3, [r4, #12]
   1aac4:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1aac8:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   1aaca:	bf02      	ittt	eq
   1aacc:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   1aad0:	f362 1306 	bfieq	r3, r2, #4, #3
   1aad4:	7323      	strbeq	r3, [r4, #12]
	if (lll->chan_map_curr) {
   1aad6:	7b23      	ldrb	r3, [r4, #12]
   1aad8:	f013 0f70 	tst.w	r3, #112	; 0x70
   1aadc:	d008      	beq.n	1aaf0 <isr_done+0x46>
		chan_prepare(lll);
   1aade:	4620      	mov	r0, r4
   1aae0:	f7f3 f838 	bl	db54 <chan_prepare>
		radio_tx_enable();
   1aae4:	f7f7 f920 	bl	11d28 <radio_tx_enable>
}
   1aae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1aaec:	f7f7 bac8 	b.w	12080 <radio_tmr_end_capture>
	radio_filter_disable();
   1aaf0:	f7f7 f9c2 	bl	11e78 <radio_filter_disable>
	isr_cleanup(param);
   1aaf4:	4620      	mov	r0, r4
}
   1aaf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1aafa:	f7f2 bde7 	b.w	d6cc <isr_cleanup>

0001aafe <lll_adv_init>:
}
   1aafe:	2000      	movs	r0, #0
   1ab00:	4770      	bx	lr

0001ab02 <lll_adv_reset>:
   1ab02:	2000      	movs	r0, #0
   1ab04:	4770      	bx	lr

0001ab06 <tx_ull_dequeue>:
{
   1ab06:	4603      	mov	r3, r0
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1ab08:	e9d0 206c 	ldrd	r2, r0, [r0, #432]	; 0x1b0
{
   1ab0c:	b510      	push	{r4, lr}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1ab0e:	b978      	cbnz	r0, 1ab30 <tx_ull_dequeue+0x2a>
   1ab10:	f8d3 01bc 	ldr.w	r0, [r3, #444]	; 0x1bc
   1ab14:	4290      	cmp	r0, r2
   1ab16:	d00b      	beq.n	1ab30 <tx_ull_dequeue+0x2a>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1ab18:	7910      	ldrb	r0, [r2, #4]
   1ab1a:	f000 0003 	and.w	r0, r0, #3
   1ab1e:	2803      	cmp	r0, #3
   1ab20:	d104      	bne.n	1ab2c <tx_ull_dequeue+0x26>
		    ((pdu_data_tx->llctrl.opcode !=
   1ab22:	79d0      	ldrb	r0, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1ab24:	2803      	cmp	r0, #3
   1ab26:	d003      	beq.n	1ab30 <tx_ull_dequeue+0x2a>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1ab28:	280a      	cmp	r0, #10
   1ab2a:	d001      	beq.n	1ab30 <tx_ull_dequeue+0x2a>
			conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1ab2c:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
	if (conn->tx_head == conn->tx_ctrl) {
   1ab30:	f8d3 41b4 	ldr.w	r4, [r3, #436]	; 0x1b4
   1ab34:	6810      	ldr	r0, [r2, #0]
   1ab36:	4294      	cmp	r4, r2
   1ab38:	d10d      	bne.n	1ab56 <tx_ull_dequeue+0x50>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1ab3a:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
   1ab3e:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1ab42:	42a2      	cmp	r2, r4
			conn->tx_ctrl = NULL;
   1ab44:	bf06      	itte	eq
   1ab46:	2200      	moveq	r2, #0
			conn->tx_ctrl_last = NULL;
   1ab48:	e9c3 226d 	strdeq	r2, r2, [r3, #436]	; 0x1b4
			conn->tx_ctrl = conn->tx_head;
   1ab4c:	f8c3 01b4 	strne.w	r0, [r3, #436]	; 0x1b4
		tx->next = tx;
   1ab50:	6009      	str	r1, [r1, #0]
}
   1ab52:	4608      	mov	r0, r1
   1ab54:	bd10      	pop	{r4, pc}
		if (conn->tx_head == conn->tx_data) {
   1ab56:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		conn->tx_head = conn->tx_head->next;
   1ab5a:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0
		if (conn->tx_head == conn->tx_data) {
   1ab5e:	4294      	cmp	r4, r2
			conn->tx_data = conn->tx_data->next;
   1ab60:	bf08      	it	eq
   1ab62:	f8c3 01bc 	streq.w	r0, [r3, #444]	; 0x1bc
		tx->next = NULL;
   1ab66:	2300      	movs	r3, #0
   1ab68:	600b      	str	r3, [r1, #0]
   1ab6a:	e7f2      	b.n	1ab52 <tx_ull_dequeue+0x4c>

0001ab6c <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   1ab6c:	f890 2152 	ldrb.w	r2, [r0, #338]	; 0x152
   1ab70:	f012 0202 	ands.w	r2, r2, #2
{
   1ab74:	b430      	push	{r4, r5}
	if (conn->llcp_enc.pause_tx) {
   1ab76:	d013      	beq.n	1aba0 <ctrl_tx_sec_enqueue+0x34>
		if (!conn->tx_ctrl) {
   1ab78:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
   1ab7c:	b953      	cbnz	r3, 1ab94 <ctrl_tx_sec_enqueue+0x28>
			tx->next = conn->tx_head;
   1ab7e:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   1ab82:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1ab84:	f8c0 11b0 	str.w	r1, [r0, #432]	; 0x1b0
		if (!tx->next) {
   1ab88:	680b      	ldr	r3, [r1, #0]
   1ab8a:	b90b      	cbnz	r3, 1ab90 <ctrl_tx_sec_enqueue+0x24>
			conn->tx_data_last = tx;
   1ab8c:	f8c0 11c0 	str.w	r1, [r0, #448]	; 0x1c0
}
   1ab90:	bc30      	pop	{r4, r5}
   1ab92:	4770      	bx	lr
			tx->next = conn->tx_ctrl_last->next;
   1ab94:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   1ab98:	681a      	ldr	r2, [r3, #0]
   1ab9a:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1ab9c:	6019      	str	r1, [r3, #0]
   1ab9e:	e7f3      	b.n	1ab88 <ctrl_tx_sec_enqueue+0x1c>
		if (conn->tx_head) {
   1aba0:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   1aba4:	b1c3      	cbz	r3, 1abd8 <ctrl_tx_sec_enqueue+0x6c>
			if ((conn->llcp_req != conn->llcp_ack) &&
   1aba6:	f890 50e8 	ldrb.w	r5, [r0, #232]	; 0xe8
   1abaa:	f890 40e9 	ldrb.w	r4, [r0, #233]	; 0xe9
   1abae:	42a5      	cmp	r5, r4
   1abb0:	d00f      	beq.n	1abd2 <ctrl_tx_sec_enqueue+0x66>
   1abb2:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
   1abb6:	2c03      	cmp	r4, #3
   1abb8:	d10b      	bne.n	1abd2 <ctrl_tx_sec_enqueue+0x66>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1abba:	791c      	ldrb	r4, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   1abbc:	f004 0403 	and.w	r4, r4, #3
   1abc0:	2c03      	cmp	r4, #3
   1abc2:	d106      	bne.n	1abd2 <ctrl_tx_sec_enqueue+0x66>
			    ((pdu_data_tx->llctrl.opcode ==
   1abc4:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1abc6:	2a03      	cmp	r2, #3
   1abc8:	d008      	beq.n	1abdc <ctrl_tx_sec_enqueue+0x70>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1abca:	f1a2 030a 	sub.w	r3, r2, #10
   1abce:	425a      	negs	r2, r3
   1abd0:	415a      	adcs	r2, r3
}
   1abd2:	bc30      	pop	{r4, r5}
		ctrl_tx_pause_enqueue(conn, tx, pause);
   1abd4:	f7f3 bafc 	b.w	e1d0 <ctrl_tx_pause_enqueue>
	bool pause = false;
   1abd8:	461a      	mov	r2, r3
   1abda:	e7fa      	b.n	1abd2 <ctrl_tx_sec_enqueue+0x66>
				pause = true;
   1abdc:	2201      	movs	r2, #1
   1abde:	e7f8      	b.n	1abd2 <ctrl_tx_sec_enqueue+0x66>

0001abe0 <ctrl_tx_enqueue>:
	ctrl_tx_pause_enqueue(conn, tx, false);
   1abe0:	2200      	movs	r2, #0
   1abe2:	f7f3 baf5 	b.w	e1d0 <ctrl_tx_pause_enqueue>

0001abe6 <start_enc_rsp_send>:
	conn->lll.enc_tx = 1;
   1abe6:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
   1abea:	f043 0310 	orr.w	r3, r3, #16
   1abee:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1abf2:	780b      	ldrb	r3, [r1, #0]
   1abf4:	f043 0303 	orr.w	r3, r3, #3
   1abf8:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1abfa:	2301      	movs	r3, #1
   1abfc:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1abfe:	2306      	movs	r3, #6
   1ac00:	70cb      	strb	r3, [r1, #3]
}
   1ac02:	2000      	movs	r0, #0
   1ac04:	4770      	bx	lr

0001ac06 <ll_connected_get>:
{
   1ac06:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ac08:	b918      	cbnz	r0, 1ac12 <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   1ac0a:	f7f3 fba5 	bl	e358 <ll_conn_get>
	if (conn->lll.handle != handle) {
   1ac0e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1ac10:	b103      	cbz	r3, 1ac14 <ll_connected_get+0xe>
		return NULL;
   1ac12:	2000      	movs	r0, #0
}
   1ac14:	bd08      	pop	{r3, pc}

0001ac16 <ll_conn_update>:
{
   1ac16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac1a:	460d      	mov	r5, r1
   1ac1c:	4690      	mov	r8, r2
   1ac1e:	469a      	mov	sl, r3
   1ac20:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1ac24:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
   1ac28:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	conn = ll_connected_get(handle);
   1ac2c:	f7ff ffeb 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1ac30:	4604      	mov	r4, r0
   1ac32:	2800      	cmp	r0, #0
   1ac34:	d065      	beq.n	1ad02 <ll_conn_update+0xec>
	if (!cmd) {
   1ac36:	bb7d      	cbnz	r5, 1ac98 <ll_conn_update+0x82>
		if (!conn->llcp_conn_param.disabled &&
   1ac38:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   1ac3c:	06da      	lsls	r2, r3, #27
   1ac3e:	d408      	bmi.n	1ac52 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   1ac40:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   1ac44:	f011 0101 	ands.w	r1, r1, #1
   1ac48:	d041      	beq.n	1acce <ll_conn_update+0xb8>
		     (conn->llcp_feature.features &
   1ac4a:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   1ac4e:	079b      	lsls	r3, r3, #30
   1ac50:	d423      	bmi.n	1ac9a <ll_conn_update+0x84>
		} else if (conn->lll.role) {
   1ac52:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1ac56:	2b00      	cmp	r3, #0
   1ac58:	db51      	blt.n	1acfe <ll_conn_update+0xe8>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1ac5a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1ac5e:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   1ac62:	429a      	cmp	r2, r3
   1ac64:	d14d      	bne.n	1ad02 <ll_conn_update+0xec>
		conn->llcp_cu.win_size = 1U;
   1ac66:	2301      	movs	r3, #1
   1ac68:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1ac6c:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   1ac70:	f8a4 9108 	strh.w	r9, [r4, #264]	; 0x108
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1ac74:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_cu.win_offset_us = 0U;
   1ac78:	2000      	movs	r0, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1ac7a:	f043 0305 	orr.w	r3, r3, #5
		conn->llcp_cu.req++;
   1ac7e:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   1ac80:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		conn->llcp_cu.latency = latency;
   1ac84:	f8a4 710a 	strh.w	r7, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   1ac88:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1ac8c:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.req++;
   1ac90:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
}
   1ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ac98:	4629      	mov	r1, r5
		cmd--;
   1ac9a:	1e48      	subs	r0, r1, #1
		if (cmd) {
   1ac9c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   1aca0:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1aca4:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   1aca8:	d013      	beq.n	1acd2 <ll_conn_update+0xbc>
			if ((conn->llcp_conn_param.req ==
   1acaa:	4293      	cmp	r3, r2
   1acac:	d029      	beq.n	1ad02 <ll_conn_update+0xec>
			    (conn->llcp_conn_param.state !=
   1acae:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   1acb2:	f003 0207 	and.w	r2, r3, #7
   1acb6:	2a03      	cmp	r2, #3
   1acb8:	d123      	bne.n	1ad02 <ll_conn_update+0xec>
			conn->llcp_conn_param.state = cmd;
   1acba:	f360 0302 	bfi	r3, r0, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   1acbe:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   1acc2:	f884 8173 	strb.w	r8, [r4, #371]	; 0x173
			conn->llcp_conn_param.cmd = 1U;
   1acc6:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	return 0;
   1acca:	2000      	movs	r0, #0
   1accc:	e7e2      	b.n	1ac94 <ll_conn_update+0x7e>
			cmd++;
   1acce:	2101      	movs	r1, #1
   1acd0:	e7e3      	b.n	1ac9a <ll_conn_update+0x84>
			if (conn->llcp_conn_param.req !=
   1acd2:	4293      	cmp	r3, r2
   1acd4:	d115      	bne.n	1ad02 <ll_conn_update+0xec>
			conn->llcp_conn_param.state = cmd;
   1acd6:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.interval_min = interval_min;
   1acda:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   1acde:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1ace2:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
   1ace6:	3301      	adds	r3, #1
			conn->llcp_conn_param.interval_max = interval_max;
   1ace8:	f8a4 9176 	strh.w	r9, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency = latency;
   1acec:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   1acf0:	f8a4 617a 	strh.w	r6, [r4, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   1acf4:	f8a4 2172 	strh.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.req++;
   1acf8:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
   1acfc:	e7ca      	b.n	1ac94 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1acfe:	201a      	movs	r0, #26
   1ad00:	e7c8      	b.n	1ac94 <ll_conn_update+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ad02:	200c      	movs	r0, #12
   1ad04:	e7c6      	b.n	1ac94 <ll_conn_update+0x7e>

0001ad06 <ll_chm_get>:
{
   1ad06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad08:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   1ad0a:	f7ff ff7c 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1ad0e:	4604      	mov	r4, r0
   1ad10:	b170      	cbz	r0, 1ad30 <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   1ad12:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   1ad14:	f100 0638 	add.w	r6, r0, #56	; 0x38
		conn->chm_updated = 0U;
   1ad18:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   1ad1c:	2205      	movs	r2, #5
   1ad1e:	4631      	mov	r1, r6
   1ad20:	4628      	mov	r0, r5
   1ad22:	f7fd ff8a 	bl	18c3a <memcpy>
	} while (conn->chm_updated);
   1ad26:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   1ad2a:	2800      	cmp	r0, #0
   1ad2c:	d1f4      	bne.n	1ad18 <ll_chm_get+0x12>
}
   1ad2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ad30:	200c      	movs	r0, #12
   1ad32:	e7fc      	b.n	1ad2e <ll_chm_get+0x28>

0001ad34 <ll_terminate_ind_send>:
{
   1ad34:	b510      	push	{r4, lr}
   1ad36:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   1ad38:	f7ff ff65 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1ad3c:	b140      	cbz	r0, 1ad50 <ll_terminate_ind_send+0x1c>
	conn->llcp_terminate.req++;
   1ad3e:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
	conn->llcp_terminate.reason_own = reason;
   1ad42:	f880 412a 	strb.w	r4, [r0, #298]	; 0x12a
	conn->llcp_terminate.req++;
   1ad46:	3301      	adds	r3, #1
   1ad48:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
	return 0;
   1ad4c:	2000      	movs	r0, #0
}
   1ad4e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ad50:	200c      	movs	r0, #12
   1ad52:	e7fc      	b.n	1ad4e <ll_terminate_ind_send+0x1a>

0001ad54 <ll_feature_req_send>:
{
   1ad54:	b508      	push	{r3, lr}
	conn = ll_connected_get(handle);
   1ad56:	f7ff ff56 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1ad5a:	b150      	cbz	r0, 1ad72 <ll_feature_req_send+0x1e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1ad5c:	f890 2118 	ldrb.w	r2, [r0, #280]	; 0x118
   1ad60:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   1ad64:	4293      	cmp	r3, r2
   1ad66:	d104      	bne.n	1ad72 <ll_feature_req_send+0x1e>
	conn->llcp_feature.req++;
   1ad68:	3301      	adds	r3, #1
   1ad6a:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   1ad6e:	2000      	movs	r0, #0
}
   1ad70:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ad72:	200c      	movs	r0, #12
   1ad74:	e7fc      	b.n	1ad70 <ll_feature_req_send+0x1c>

0001ad76 <ll_version_ind_send>:
{
   1ad76:	b508      	push	{r3, lr}
	conn = ll_connected_get(handle);
   1ad78:	f7ff ff45 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1ad7c:	b150      	cbz	r0, 1ad94 <ll_version_ind_send+0x1e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1ad7e:	f890 2120 	ldrb.w	r2, [r0, #288]	; 0x120
   1ad82:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
   1ad86:	4293      	cmp	r3, r2
   1ad88:	d104      	bne.n	1ad94 <ll_version_ind_send+0x1e>
	conn->llcp_version.req++;
   1ad8a:	3301      	adds	r3, #1
   1ad8c:	f880 3120 	strb.w	r3, [r0, #288]	; 0x120
	return 0;
   1ad90:	2000      	movs	r0, #0
}
   1ad92:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ad94:	200c      	movs	r0, #12
   1ad96:	e7fc      	b.n	1ad92 <ll_version_ind_send+0x1c>

0001ad98 <ll_length_req_send>:
{
   1ad98:	b570      	push	{r4, r5, r6, lr}
   1ad9a:	460e      	mov	r6, r1
   1ad9c:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   1ad9e:	f7ff ff32 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1ada2:	b340      	cbz	r0, 1adf6 <ll_length_req_send+0x5e>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1ada4:	f890 2198 	ldrb.w	r2, [r0, #408]	; 0x198
   1ada8:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   1adac:	4293      	cmp	r3, r2
   1adae:	d014      	beq.n	1adda <ll_length_req_send+0x42>
		switch (conn->llcp_length.state) {
   1adb0:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   1adb4:	f003 0307 	and.w	r3, r3, #7
   1adb8:	2b07      	cmp	r3, #7
   1adba:	d01e      	beq.n	1adfa <ll_length_req_send+0x62>
   1adbc:	2401      	movs	r4, #1
   1adbe:	fa04 f303 	lsl.w	r3, r4, r3
   1adc2:	f013 0f68 	tst.w	r3, #104	; 0x68
   1adc6:	d018      	beq.n	1adfa <ll_length_req_send+0x62>
			if (!conn->llcp_length.cache.tx_octets) {
   1adc8:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   1adcc:	b9ab      	cbnz	r3, 1adfa <ll_length_req_send+0x62>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1adce:	f8a0 61a4 	strh.w	r6, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   1add2:	f8a0 51a6 	strh.w	r5, [r0, #422]	; 0x1a6
	return 0;
   1add6:	2000      	movs	r0, #0
}
   1add8:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1adda:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
	conn->llcp_length.tx_octets = tx_octets;
   1adde:	f8a0 619e 	strh.w	r6, [r0, #414]	; 0x19e
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1ade2:	f36f 0202 	bfc	r2, #0, #3
	conn->llcp_length.req++;
   1ade6:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1ade8:	f880 219a 	strb.w	r2, [r0, #410]	; 0x19a
	conn->llcp_length.tx_time = tx_time;
   1adec:	f8a0 51a2 	strh.w	r5, [r0, #418]	; 0x1a2
	conn->llcp_length.req++;
   1adf0:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   1adf4:	e7ef      	b.n	1add6 <ll_length_req_send+0x3e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1adf6:	2002      	movs	r0, #2
   1adf8:	e7ee      	b.n	1add8 <ll_length_req_send+0x40>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1adfa:	200c      	movs	r0, #12
   1adfc:	e7ec      	b.n	1add8 <ll_length_req_send+0x40>

0001adfe <ll_length_max_get>:
{
   1adfe:	b510      	push	{r4, lr}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1ae00:	241b      	movs	r4, #27
   1ae02:	8004      	strh	r4, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1ae04:	8014      	strh	r4, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1ae06:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ae0a:	800a      	strh	r2, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1ae0c:	801a      	strh	r2, [r3, #0]
}
   1ae0e:	bd10      	pop	{r4, pc}

0001ae10 <ll_phy_get>:
{
   1ae10:	b538      	push	{r3, r4, r5, lr}
   1ae12:	460d      	mov	r5, r1
   1ae14:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   1ae16:	f7ff fef6 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1ae1a:	b158      	cbz	r0, 1ae34 <ll_phy_get+0x24>
	*tx = conn->lll.phy_tx;
   1ae1c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   1ae20:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1ae24:	702b      	strb	r3, [r5, #0]
	*rx = conn->lll.phy_rx;
   1ae26:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   1ae2a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1ae2e:	7023      	strb	r3, [r4, #0]
	return 0;
   1ae30:	2000      	movs	r0, #0
}
   1ae32:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ae34:	2002      	movs	r0, #2
   1ae36:	e7fc      	b.n	1ae32 <ll_phy_get+0x22>

0001ae38 <ll_phy_req_send>:
{
   1ae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ae3c:	4689      	mov	r9, r1
   1ae3e:	4690      	mov	r8, r2
   1ae40:	461f      	mov	r7, r3
	conn = ll_connected_get(handle);
   1ae42:	f7ff fee0 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1ae46:	b330      	cbz	r0, 1ae96 <ll_phy_req_send+0x5e>
	if ((conn->llcp_req != conn->llcp_ack) ||
   1ae48:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   1ae4c:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1ae50:	429a      	cmp	r2, r3
   1ae52:	d122      	bne.n	1ae9a <ll_phy_req_send+0x62>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1ae54:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   1ae58:	f890 61a9 	ldrb.w	r6, [r0, #425]	; 0x1a9
   1ae5c:	429e      	cmp	r6, r3
   1ae5e:	d11c      	bne.n	1ae9a <ll_phy_req_send+0x62>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1ae60:	f8b0 41aa 	ldrh.w	r4, [r0, #426]	; 0x1aa
   1ae64:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
   1ae68:	f024 0403 	bic.w	r4, r4, #3
   1ae6c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
	conn->llcp_phy.tx = tx;
   1ae70:	4625      	mov	r5, r4
   1ae72:	f369 0584 	bfi	r5, r9, #2, #3
	conn->llcp_phy.flags = flags;
   1ae76:	f3c4 2407 	ubfx	r4, r4, #8, #8
   1ae7a:	f368 0441 	bfi	r4, r8, #1, #1
	conn->llcp_phy.rx = rx;
   1ae7e:	f367 1547 	bfi	r5, r7, #5, #3
	conn->llcp_phy.req++;
   1ae82:	3601      	adds	r6, #1
	conn->llcp_phy.flags = flags;
   1ae84:	f880 41ab 	strb.w	r4, [r0, #427]	; 0x1ab
	conn->llcp_phy.rx = rx;
   1ae88:	f880 51aa 	strb.w	r5, [r0, #426]	; 0x1aa
	conn->llcp_phy.req++;
   1ae8c:	f880 61a8 	strb.w	r6, [r0, #424]	; 0x1a8
	return 0;
   1ae90:	2000      	movs	r0, #0
}
   1ae92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ae96:	2002      	movs	r0, #2
   1ae98:	e7fb      	b.n	1ae92 <ll_phy_req_send+0x5a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ae9a:	200c      	movs	r0, #12
   1ae9c:	e7f9      	b.n	1ae92 <ll_phy_req_send+0x5a>

0001ae9e <ll_apto_get>:
{
   1ae9e:	b510      	push	{r4, lr}
   1aea0:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   1aea2:	f7ff feb0 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1aea6:	b160      	cbz	r0, 1aec2 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1aea8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1aeaa:	f8b0 20d2 	ldrh.w	r2, [r0, #210]	; 0xd2
   1aeae:	435a      	muls	r2, r3
   1aeb0:	237d      	movs	r3, #125	; 0x7d
   1aeb2:	4353      	muls	r3, r2
	return 0;
   1aeb4:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1aeb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aeba:	fbb3 f3f2 	udiv	r3, r3, r2
   1aebe:	8023      	strh	r3, [r4, #0]
}
   1aec0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1aec2:	2002      	movs	r0, #2
   1aec4:	e7fc      	b.n	1aec0 <ll_apto_get+0x22>

0001aec6 <ll_apto_set>:
{
   1aec6:	b510      	push	{r4, lr}
   1aec8:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   1aeca:	f7ff fe9c 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1aece:	b170      	cbz	r0, 1aeee <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1aed0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   1aed2:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1aed6:	4353      	muls	r3, r2
   1aed8:	f242 7110 	movw	r1, #10000	; 0x2710
   1aedc:	fb01 3404 	mla	r4, r1, r4, r3
   1aee0:	3c01      	subs	r4, #1
   1aee2:	fbb4 f4f3 	udiv	r4, r4, r3
   1aee6:	f8a0 40d2 	strh.w	r4, [r0, #210]	; 0xd2
	return 0;
   1aeea:	2000      	movs	r0, #0
}
   1aeec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1aeee:	2002      	movs	r0, #2
   1aef0:	e7fc      	b.n	1aeec <ll_apto_set+0x26>

0001aef2 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   1aef2:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   1aef6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1aefa:	f3c2 1202 	ubfx	r2, r2, #4, #3
   1aefe:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1af00:	bf14      	ite	ne
   1af02:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1af04:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1af06:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   1af0a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1af0e:	bf14      	ite	ne
   1af10:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1af12:	3b0b      	subeq	r3, #11
   1af14:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1af16:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1af18:	bf44      	itt	mi
   1af1a:	3b04      	submi	r3, #4
   1af1c:	b29b      	uxthmi	r3, r3
}
   1af1e:	4298      	cmp	r0, r3
   1af20:	bf28      	it	cs
   1af22:	4618      	movcs	r0, r3
   1af24:	4770      	bx	lr

0001af26 <isr_race>:
	radio_status_reset();
   1af26:	f7f6 bf17 	b.w	11d58 <radio_status_reset>

0001af2a <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   1af2a:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   1af2c:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   1af30:	f043 0304 	orr.w	r3, r3, #4
   1af34:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
{
   1af38:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   1af3a:	f7f6 ff43 	bl	11dc4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1af3e:	7803      	ldrb	r3, [r0, #0]
   1af40:	2201      	movs	r2, #1
   1af42:	f362 0301 	bfi	r3, r2, #0, #2
	p->len = 0;
   1af46:	2200      	movs	r2, #0
   1af48:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   1af4a:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1af4c:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1af4e:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   1af52:	f7ff fae6 	bl	1a522 <memq_peek>
   1af56:	7823      	ldrb	r3, [r4, #0]
   1af58:	3000      	adds	r0, #0
   1af5a:	bf18      	it	ne
   1af5c:	2001      	movne	r0, #1
   1af5e:	f360 1304 	bfi	r3, r0, #4, #1
   1af62:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   1af64:	4620      	mov	r0, r4
   1af66:	bd38      	pop	{r3, r4, r5, pc}

0001af68 <lll_conn_init>:
}
   1af68:	2000      	movs	r0, #0
   1af6a:	4770      	bx	lr

0001af6c <lll_conn_reset>:
   1af6c:	2000      	movs	r0, #0
   1af6e:	4770      	bx	lr

0001af70 <lll_conn_ppm_local_get>:
}
   1af70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1af74:	4770      	bx	lr

0001af76 <lll_conn_is_abort_cb>:
}
   1af76:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1af7a:	4770      	bx	lr

0001af7c <lll_conn_isr_abort>:
{
   1af7c:	b510      	push	{r4, lr}
   1af7e:	4604      	mov	r4, r0
	radio_status_reset();
   1af80:	f7f6 feea 	bl	11d58 <radio_status_reset>
	radio_tmr_status_reset();
   1af84:	f7f6 ffa6 	bl	11ed4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1af88:	f7f6 ff80 	bl	11e8c <radio_filter_status_reset>
	radio_ar_status_reset();
   1af8c:	f7f7 f940 	bl	12210 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1af90:	f7f6 ff44 	bl	11e1c <radio_rssi_status_reset>
	isr_cleanup(param);
   1af94:	4620      	mov	r0, r4
}
   1af96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1af9a:	f7f5 ba01 	b.w	103a0 <isr_cleanup>

0001af9e <lll_conn_tx_pkt_set>:
{
   1af9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1afa0:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1afa2:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1afa6:	f8b0 5040 	ldrh.w	r5, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1afaa:	f001 0407 	and.w	r4, r1, #7
{
   1afae:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
   1afb0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1afb4:	4620      	mov	r0, r4
   1afb6:	f7f6 fe39 	bl	11c2c <radio_phy_set>
	} else if (lll->enc_tx) {
   1afba:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
   1afbe:	0062      	lsls	r2, r4, #1
   1afc0:	06db      	lsls	r3, r3, #27
   1afc2:	b2e9      	uxtb	r1, r5
   1afc4:	f042 0201 	orr.w	r2, r2, #1
   1afc8:	d50d      	bpl.n	1afe6 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1afca:	3104      	adds	r1, #4
   1afcc:	b2c9      	uxtb	r1, r1
   1afce:	2008      	movs	r0, #8
   1afd0:	f7f6 fe72 	bl	11cb8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1afd4:	4639      	mov	r1, r7
   1afd6:	f106 0084 	add.w	r0, r6, #132	; 0x84
   1afda:	f7f7 f899 	bl	12110 <radio_ccm_tx_pkt_set>
}
   1afde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1afe2:	f7f6 be9b 	b.w	11d1c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1afe6:	2008      	movs	r0, #8
   1afe8:	f7f6 fe66 	bl	11cb8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1afec:	4638      	mov	r0, r7
   1afee:	e7f6      	b.n	1afde <lll_conn_tx_pkt_set+0x40>

0001aff0 <lll_conn_pdu_tx_prep>:
	if (lll->empty) {
   1aff0:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   1aff4:	075b      	lsls	r3, r3, #29
{
   1aff6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1affa:	4606      	mov	r6, r0
   1affc:	4688      	mov	r8, r1
	if (lll->empty) {
   1affe:	d506      	bpl.n	1b00e <lll_conn_pdu_tx_prep+0x1e>
		*pdu_data_tx = empty_tx_enqueue(lll);
   1b000:	f7ff ff93 	bl	1af2a <empty_tx_enqueue>
   1b004:	f8c8 0000 	str.w	r0, [r8]
}
   1b008:	b003      	add	sp, #12
   1b00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b00e:	aa01      	add	r2, sp, #4
   1b010:	e9d0 0113 	ldrd	r0, r1, [r0, #76]	; 0x4c
   1b014:	f7ff fa85 	bl	1a522 <memq_peek>
	if (!link) {
   1b018:	4681      	mov	r9, r0
   1b01a:	b960      	cbnz	r0, 1b036 <lll_conn_pdu_tx_prep+0x46>
		p = empty_tx_enqueue(lll);
   1b01c:	4630      	mov	r0, r6
   1b01e:	f7ff ff84 	bl	1af2a <empty_tx_enqueue>
   1b022:	4607      	mov	r7, r0
	p->rfu = 0U;
   1b024:	783b      	ldrb	r3, [r7, #0]
   1b026:	f36f 1347 	bfc	r3, #5, #3
   1b02a:	703b      	strb	r3, [r7, #0]
	p->resv = 0U;
   1b02c:	2300      	movs	r3, #0
   1b02e:	70bb      	strb	r3, [r7, #2]
	*pdu_data_tx = p;
   1b030:	f8c8 7000 	str.w	r7, [r8]
   1b034:	e7e8      	b.n	1b008 <lll_conn_pdu_tx_prep+0x18>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b036:	9d01      	ldr	r5, [sp, #4]
   1b038:	f896 4061 	ldrb.w	r4, [r6, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   1b03c:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b040:	3504      	adds	r5, #4
   1b042:	192f      	adds	r7, r5, r4
		if (!lll->packet_tx_head_len) {
   1b044:	b913      	cbnz	r3, 1b04c <lll_conn_pdu_tx_prep+0x5c>
			lll->packet_tx_head_len = p->len;
   1b046:	787b      	ldrb	r3, [r7, #1]
   1b048:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1b04c:	b124      	cbz	r4, 1b058 <lll_conn_pdu_tx_prep+0x68>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b04e:	5d2b      	ldrb	r3, [r5, r4]
   1b050:	2201      	movs	r2, #1
   1b052:	f362 0301 	bfi	r3, r2, #0, #2
   1b056:	552b      	strb	r3, [r5, r4]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1b058:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
   1b05c:	1b1b      	subs	r3, r3, r4
   1b05e:	707b      	strb	r3, [r7, #1]
		p->md = 0;
   1b060:	5d2b      	ldrb	r3, [r5, r4]
   1b062:	f36f 1304 	bfc	r3, #4, #1
   1b066:	552b      	strb	r3, [r5, r4]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1b068:	4630      	mov	r0, r6
   1b06a:	f7ff ff42 	bl	1aef2 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1b06e:	787b      	ldrb	r3, [r7, #1]
   1b070:	4283      	cmp	r3, r0
			p->len = max_tx_octets;
   1b072:	bf84      	itt	hi
   1b074:	7078      	strbhi	r0, [r7, #1]
			p->md = 1;
   1b076:	5d2b      	ldrbhi	r3, [r5, r4]
		if (link->next != lll->memq_tx.tail) {
   1b078:	f8d9 2000 	ldr.w	r2, [r9]
			p->md = 1;
   1b07c:	bf84      	itt	hi
   1b07e:	f043 0310 	orrhi.w	r3, r3, #16
   1b082:	552b      	strbhi	r3, [r5, r4]
		if (link->next != lll->memq_tx.tail) {
   1b084:	6d33      	ldr	r3, [r6, #80]	; 0x50
   1b086:	429a      	cmp	r2, r3
			p->md = 1;
   1b088:	bf1e      	ittt	ne
   1b08a:	5d2b      	ldrbne	r3, [r5, r4]
   1b08c:	f043 0310 	orrne.w	r3, r3, #16
   1b090:	552b      	strbne	r3, [r5, r4]
   1b092:	e7c7      	b.n	1b024 <lll_conn_pdu_tx_prep+0x34>

0001b094 <lll_conn_flush>:

void lll_conn_flush(struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   1b094:	4770      	bx	lr

0001b096 <ll_start_enc_req_send>:
{
   1b096:	b570      	push	{r4, r5, r6, lr}
   1b098:	460d      	mov	r5, r1
   1b09a:	4616      	mov	r6, r2
	conn = ll_connected_get(handle);
   1b09c:	f7ff fdb3 	bl	1ac06 <ll_connected_get>
	if (!conn) {
   1b0a0:	4604      	mov	r4, r0
   1b0a2:	b3e0      	cbz	r0, 1b11e <ll_start_enc_req_send+0x88>
	if (error_code) {
   1b0a4:	b325      	cbz	r5, 1b0f0 <ll_start_enc_req_send+0x5a>
		if (conn->llcp_enc.refresh == 0U) {
   1b0a6:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   1b0aa:	f010 0004 	ands.w	r0, r0, #4
   1b0ae:	d112      	bne.n	1b0d6 <ll_start_enc_req_send+0x40>
			if ((conn->llcp_req == conn->llcp_ack) ||
   1b0b0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1b0b4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b0b8:	429a      	cmp	r2, r3
   1b0ba:	d032      	beq.n	1b122 <ll_start_enc_req_send+0x8c>
   1b0bc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1b0c0:	2b03      	cmp	r3, #3
   1b0c2:	d12e      	bne.n	1b122 <ll_start_enc_req_send+0x8c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b0c4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   1b0c8:	f884 50ed 	strb.w	r5, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b0cc:	f360 0301 	bfi	r3, r0, #0, #2
   1b0d0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   1b0d4:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1b0d6:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
			if (conn->llcp_terminate.ack !=
   1b0da:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   1b0de:	4293      	cmp	r3, r2
   1b0e0:	d11f      	bne.n	1b122 <ll_start_enc_req_send+0x8c>
			conn->llcp_terminate.req++;
   1b0e2:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   1b0e4:	f884 512a 	strb.w	r5, [r4, #298]	; 0x12a
			conn->llcp_terminate.req++;
   1b0e8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
	return 0;
   1b0ec:	2000      	movs	r0, #0
   1b0ee:	e7f1      	b.n	1b0d4 <ll_start_enc_req_send+0x3e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1b0f0:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   1b0f4:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1b0f8:	429a      	cmp	r2, r3
   1b0fa:	d012      	beq.n	1b122 <ll_start_enc_req_send+0x8c>
   1b0fc:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   1b100:	2b03      	cmp	r3, #3
   1b102:	d10e      	bne.n	1b122 <ll_start_enc_req_send+0x8c>
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   1b104:	2210      	movs	r2, #16
   1b106:	4631      	mov	r1, r6
   1b108:	f200 105d 	addw	r0, r0, #349	; 0x15d
   1b10c:	f7fd fd95 	bl	18c3a <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b110:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   1b114:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   1b118:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
   1b11c:	e7e6      	b.n	1b0ec <ll_start_enc_req_send+0x56>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b11e:	2002      	movs	r0, #2
   1b120:	e7d8      	b.n	1b0d4 <ll_start_enc_req_send+0x3e>
				return BT_HCI_ERR_CMD_DISALLOWED;
   1b122:	200c      	movs	r0, #12
   1b124:	e7d6      	b.n	1b0d4 <ll_start_enc_req_send+0x3e>

0001b126 <ll_wl_size_get>:
}
   1b126:	2008      	movs	r0, #8
   1b128:	4770      	bx	lr

0001b12a <ll_rl_size_get>:
   1b12a:	2008      	movs	r0, #8
   1b12c:	4770      	bx	lr

0001b12e <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   1b12e:	b570      	push	{r4, r5, r6, lr}
   1b130:	b08c      	sub	sp, #48	; 0x30
   1b132:	460e      	mov	r6, r1
   1b134:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1b136:	4601      	mov	r1, r0
   1b138:	2210      	movs	r2, #16
   1b13a:	4668      	mov	r0, sp
{
   1b13c:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1b13e:	f7ff f9c1 	bl	1a4c4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1b142:	2210      	movs	r2, #16
   1b144:	eb0d 0002 	add.w	r0, sp, r2
   1b148:	4631      	mov	r1, r6
   1b14a:	f7ff f9bb 	bl	1a4c4 <mem_rcopy>

	do_ecb(&ecb);
   1b14e:	4668      	mov	r0, sp
   1b150:	f7f6 fc72 	bl	11a38 <do_ecb>

	if (cipher_text_le) {
   1b154:	b125      	cbz	r5, 1b160 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1b156:	2210      	movs	r2, #16
   1b158:	a908      	add	r1, sp, #32
   1b15a:	4628      	mov	r0, r5
   1b15c:	f7ff f9b2 	bl	1a4c4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1b160:	b124      	cbz	r4, 1b16c <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1b162:	2210      	movs	r2, #16
   1b164:	a908      	add	r1, sp, #32
   1b166:	4620      	mov	r0, r4
   1b168:	f7fd fd67 	bl	18c3a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1b16c:	b00c      	add	sp, #48	; 0x30
   1b16e:	bd70      	pop	{r4, r5, r6, pc}

0001b170 <radio_tx_chain_delay_get>:
}
   1b170:	2001      	movs	r0, #1
   1b172:	4770      	bx	lr

0001b174 <radio_rx_ready_delay_get>:
}
   1b174:	2029      	movs	r0, #41	; 0x29
   1b176:	4770      	bx	lr

0001b178 <radio_rx_chain_delay_get>:
	switch (phy) {
   1b178:	2802      	cmp	r0, #2
}
   1b17a:	bf14      	ite	ne
   1b17c:	200a      	movne	r0, #10
   1b17e:	2006      	moveq	r0, #6
   1b180:	4770      	bx	lr

0001b182 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b182:	4288      	cmp	r0, r1
   1b184:	d00c      	beq.n	1b1a0 <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
   1b186:	b978      	cbnz	r0, 1b1a8 <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1b188:	1e48      	subs	r0, r1, #1
   1b18a:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1b18c:	bf8c      	ite	hi
   1b18e:	2000      	movhi	r0, #0
   1b190:	2001      	movls	r0, #1
   1b192:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1b194:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   1b198:	bf0c      	ite	eq
   1b19a:	2001      	moveq	r0, #1
   1b19c:	2000      	movne	r0, #0
   1b19e:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b1a0:	2001      	movs	r0, #1
   1b1a2:	4770      	bx	lr
   1b1a4:	2000      	movs	r0, #0
}
   1b1a6:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b1a8:	2801      	cmp	r0, #1
   1b1aa:	d0f3      	beq.n	1b194 <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1b1ac:	2802      	cmp	r0, #2
   1b1ae:	d1f9      	bne.n	1b1a4 <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1b1b0:	2901      	cmp	r1, #1
   1b1b2:	e7eb      	b.n	1b18c <mayfly_prio_is_equal+0xa>

0001b1b4 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   1b1b4:	4601      	mov	r1, r0
   1b1b6:	2000      	movs	r0, #0
   1b1b8:	f7f6 bc36 	b.w	11a28 <cntr_cmp_set>

0001b1bc <fixed_data_unref>:
}
   1b1bc:	4770      	bx	lr

0001b1be <k_uptime_get_32>:
{
   1b1be:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   1b1c0:	f002 feee 	bl	1dfa0 <z_impl_k_uptime_get>
}
   1b1c4:	bd08      	pop	{r3, pc}

0001b1c6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b1c6:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1b1c8:	685b      	ldr	r3, [r3, #4]
   1b1ca:	460a      	mov	r2, r1
   1b1cc:	6819      	ldr	r1, [r3, #0]
   1b1ce:	f7f7 b95d 	b.w	1248c <net_buf_alloc_len>

0001b1d2 <net_buf_get>:
{
   1b1d2:	b570      	push	{r4, r5, r6, lr}
   1b1d4:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1b1d6:	f002 fcab 	bl	1db30 <z_impl_k_queue_get>
	if (!buf) {
   1b1da:	4605      	mov	r5, r0
   1b1dc:	b128      	cbz	r0, 1b1ea <net_buf_get+0x18>
   1b1de:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b1e0:	7963      	ldrb	r3, [r4, #5]
   1b1e2:	f013 0301 	ands.w	r3, r3, #1
   1b1e6:	d102      	bne.n	1b1ee <net_buf_get+0x1c>
	frag->frags = NULL;
   1b1e8:	6023      	str	r3, [r4, #0]
}
   1b1ea:	4628      	mov	r0, r5
   1b1ec:	bd70      	pop	{r4, r5, r6, pc}
   1b1ee:	2100      	movs	r1, #0
   1b1f0:	4630      	mov	r0, r6
   1b1f2:	f002 fc9d 	bl	1db30 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1b1f6:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1b1f8:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1b1fa:	f023 0301 	bic.w	r3, r3, #1
   1b1fe:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b200:	4604      	mov	r4, r0
   1b202:	e7ed      	b.n	1b1e0 <net_buf_get+0xe>

0001b204 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1b204:	6883      	ldr	r3, [r0, #8]
   1b206:	4419      	add	r1, r3
   1b208:	6001      	str	r1, [r0, #0]
}
   1b20a:	4770      	bx	lr

0001b20c <net_buf_put>:
{
   1b20c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b20e:	460a      	mov	r2, r1
   1b210:	6814      	ldr	r4, [r2, #0]
   1b212:	b914      	cbnz	r4, 1b21a <net_buf_put+0xe>
}
   1b214:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1b216:	f002 bc6c 	b.w	1daf2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1b21a:	7953      	ldrb	r3, [r2, #5]
   1b21c:	f043 0301 	orr.w	r3, r3, #1
   1b220:	7153      	strb	r3, [r2, #5]
   1b222:	4622      	mov	r2, r4
   1b224:	e7f4      	b.n	1b210 <net_buf_put+0x4>

0001b226 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b226:	7903      	ldrb	r3, [r0, #4]
   1b228:	3301      	adds	r3, #1
   1b22a:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1b22c:	4770      	bx	lr

0001b22e <net_buf_simple_add>:
	return buf->data + buf->len;
   1b22e:	8883      	ldrh	r3, [r0, #4]
   1b230:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1b232:	4419      	add	r1, r3
   1b234:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1b236:	18d0      	adds	r0, r2, r3
   1b238:	4770      	bx	lr

0001b23a <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1b23a:	b430      	push	{r4, r5}
   1b23c:	8883      	ldrh	r3, [r0, #4]
   1b23e:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1b240:	189d      	adds	r5, r3, r2
   1b242:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1b244:	18e0      	adds	r0, r4, r3
}
   1b246:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1b248:	f7fd bcf7 	b.w	18c3a <memcpy>

0001b24c <net_buf_simple_add_u8>:
   1b24c:	8883      	ldrh	r3, [r0, #4]
   1b24e:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1b250:	b510      	push	{r4, lr}
	buf->len += len;
   1b252:	1c5c      	adds	r4, r3, #1
   1b254:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1b256:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1b258:	18d0      	adds	r0, r2, r3
   1b25a:	bd10      	pop	{r4, pc}

0001b25c <net_buf_simple_add_le16>:
   1b25c:	8883      	ldrh	r3, [r0, #4]
   1b25e:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1b260:	b530      	push	{r4, r5, lr}
   1b262:	18d4      	adds	r4, r2, r3
	buf->len += len;
   1b264:	1c9d      	adds	r5, r3, #2
   1b266:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   1b268:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   1b26a:	0a09      	lsrs	r1, r1, #8
   1b26c:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   1b26e:	bd30      	pop	{r4, r5, pc}

0001b270 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1b270:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1b272:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1b274:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1b276:	4411      	add	r1, r2
	buf->data -= len;
   1b278:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1b27a:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1b27c:	4618      	mov	r0, r3
   1b27e:	4770      	bx	lr

0001b280 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1b280:	8883      	ldrh	r3, [r0, #4]
   1b282:	1a5b      	subs	r3, r3, r1
   1b284:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1b286:	6803      	ldr	r3, [r0, #0]
   1b288:	4419      	add	r1, r3
   1b28a:	6001      	str	r1, [r0, #0]
}
   1b28c:	4608      	mov	r0, r1
   1b28e:	4770      	bx	lr

0001b290 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1b290:	4603      	mov	r3, r0
	void *data = buf->data;
   1b292:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1b294:	889a      	ldrh	r2, [r3, #4]
   1b296:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1b298:	4401      	add	r1, r0
	buf->len -= len;
   1b29a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1b29c:	6019      	str	r1, [r3, #0]

	return data;
}
   1b29e:	4770      	bx	lr

0001b2a0 <net_buf_simple_pull_le16>:

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1b2a0:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1b2a2:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1b2a4:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1b2a6:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1b2a8:	f7ff ffea 	bl	1b280 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1b2ac:	4610      	mov	r0, r2
   1b2ae:	bd08      	pop	{r3, pc}

0001b2b0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1b2b0:	6802      	ldr	r2, [r0, #0]
   1b2b2:	6880      	ldr	r0, [r0, #8]
}
   1b2b4:	1a10      	subs	r0, r2, r0
   1b2b6:	4770      	bx	lr

0001b2b8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1b2b8:	8883      	ldrh	r3, [r0, #4]
   1b2ba:	88c2      	ldrh	r2, [r0, #6]
   1b2bc:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1b2be:	6803      	ldr	r3, [r0, #0]
   1b2c0:	6880      	ldr	r0, [r0, #8]
   1b2c2:	1a18      	subs	r0, r3, r0
}
   1b2c4:	1a10      	subs	r0, r2, r0
   1b2c6:	4770      	bx	lr

0001b2c8 <gpio_nrfx_write>:
{
   1b2c8:	b510      	push	{r4, lr}
	return port->config->config_info;
   1b2ca:	6804      	ldr	r4, [r0, #0]
   1b2cc:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b2ce:	68a4      	ldr	r4, [r4, #8]
   1b2d0:	69c0      	ldr	r0, [r0, #28]
   1b2d2:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b2d4:	2901      	cmp	r1, #1
   1b2d6:	d104      	bne.n	1b2e2 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1b2d8:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1b2da:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   1b2de:	2000      	movs	r0, #0
   1b2e0:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1b2e2:	3300      	adds	r3, #0
   1b2e4:	fa20 f002 	lsr.w	r0, r0, r2
   1b2e8:	f04f 0101 	mov.w	r1, #1
   1b2ec:	bf18      	it	ne
   1b2ee:	2301      	movne	r3, #1
   1b2f0:	f000 0001 	and.w	r0, r0, #1
   1b2f4:	4091      	lsls	r1, r2
   1b2f6:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1b2f8:	bf14      	ite	ne
   1b2fa:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1b2fe:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   1b302:	e7ec      	b.n	1b2de <gpio_nrfx_write+0x16>

0001b304 <gpio_nrfx_read>:
{
   1b304:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1b306:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1b308:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b30a:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1b30c:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b30e:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
   1b310:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
   1b314:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
   1b318:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1b31c:	4060      	eors	r0, r4
   1b31e:	406c      	eors	r4, r5
   1b320:	4034      	ands	r4, r6
   1b322:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b324:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1b326:	bf1c      	itt	ne
   1b328:	40d0      	lsrne	r0, r2
   1b32a:	f000 0001 	andne.w	r0, r0, #1
   1b32e:	6018      	str	r0, [r3, #0]
}
   1b330:	2000      	movs	r0, #0
   1b332:	bd70      	pop	{r4, r5, r6, pc}

0001b334 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b334:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
   1b336:	6818      	ldr	r0, [r3, #0]
{
   1b338:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1b33a:	b158      	cbz	r0, 1b354 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b33c:	2400      	movs	r4, #0
   1b33e:	4281      	cmp	r1, r0
   1b340:	d113      	bne.n	1b36a <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1b342:	6808      	ldr	r0, [r1, #0]
   1b344:	b95c      	cbnz	r4, 1b35e <gpio_nrfx_manage_callback+0x2a>
   1b346:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1b348:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b34a:	42a1      	cmp	r1, r4
   1b34c:	d100      	bne.n	1b350 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1b34e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1b350:	2000      	movs	r0, #0
   1b352:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1b354:	b972      	cbnz	r2, 1b374 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1b356:	2000      	movs	r0, #0
}
   1b358:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b35a:	4628      	mov	r0, r5
   1b35c:	e7ef      	b.n	1b33e <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1b35e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b360:	6858      	ldr	r0, [r3, #4]
   1b362:	4281      	cmp	r1, r0
	list->tail = node;
   1b364:	bf08      	it	eq
   1b366:	605c      	streq	r4, [r3, #4]
   1b368:	e7f2      	b.n	1b350 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b36a:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1b36c:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b36e:	2d00      	cmp	r5, #0
   1b370:	d1f3      	bne.n	1b35a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1b372:	b13a      	cbz	r2, 1b384 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1b374:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1b376:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b378:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1b37a:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b37c:	2800      	cmp	r0, #0
   1b37e:	d1ea      	bne.n	1b356 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1b380:	6059      	str	r1, [r3, #4]
   1b382:	e7e9      	b.n	1b358 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1b384:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b388:	e7e6      	b.n	1b358 <gpio_nrfx_manage_callback+0x24>

0001b38a <gpio_nrfx_config>:
{
   1b38a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b38e:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   1b390:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1b392:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   1b396:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   1b39a:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1b39c:	d041      	beq.n	1b422 <gpio_nrfx_config+0x98>
   1b39e:	dc09      	bgt.n	1b3b4 <gpio_nrfx_config+0x2a>
   1b3a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1b3a4:	d03f      	beq.n	1b426 <gpio_nrfx_config+0x9c>
   1b3a6:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   1b3aa:	d03e      	beq.n	1b42a <gpio_nrfx_config+0xa0>
   1b3ac:	b190      	cbz	r0, 1b3d4 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   1b3ae:	f06f 0015 	mvn.w	r0, #21
   1b3b2:	e033      	b.n	1b41c <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1b3b4:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   1b3b8:	d039      	beq.n	1b42e <gpio_nrfx_config+0xa4>
   1b3ba:	dc04      	bgt.n	1b3c6 <gpio_nrfx_config+0x3c>
   1b3bc:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   1b3c0:	d1f5      	bne.n	1b3ae <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   1b3c2:	2003      	movs	r0, #3
   1b3c4:	e006      	b.n	1b3d4 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1b3c6:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   1b3ca:	d032      	beq.n	1b432 <gpio_nrfx_config+0xa8>
   1b3cc:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   1b3d0:	d1ed      	bne.n	1b3ae <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   1b3d2:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   1b3d4:	f406 7740 	and.w	r7, r6, #768	; 0x300
   1b3d8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1b3dc:	d02b      	beq.n	1b436 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
   1b3de:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   1b3e2:	4263      	negs	r3, r4
   1b3e4:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   1b3e6:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   1b3ea:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b3ee:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1b3f0:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
   1b3f4:	bf18      	it	ne
   1b3f6:	b2d4      	uxtbne	r4, r2
   1b3f8:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   1b3fc:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
   1b400:	bf12      	itee	ne
   1b402:	46a1      	movne	r9, r4
		to_pin   = 31U;
   1b404:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   1b408:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b40a:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
   1b40e:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1b412:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b416:	45a1      	cmp	r9, r4
   1b418:	d20f      	bcs.n	1b43a <gpio_nrfx_config+0xb0>
	return 0;
   1b41a:	2000      	movs	r0, #0
}
   1b41c:	b003      	add	sp, #12
   1b41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   1b422:	2002      	movs	r0, #2
   1b424:	e7d6      	b.n	1b3d4 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   1b426:	2001      	movs	r0, #1
   1b428:	e7d4      	b.n	1b3d4 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   1b42a:	2004      	movs	r0, #4
   1b42c:	e7d2      	b.n	1b3d4 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   1b42e:	2005      	movs	r0, #5
   1b430:	e7d0      	b.n	1b3d4 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   1b432:	2006      	movs	r0, #6
   1b434:	e7ce      	b.n	1b3d4 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   1b436:	2303      	movs	r3, #3
   1b438:	e7d5      	b.n	1b3e6 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   1b43a:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   1b43e:	6892      	ldr	r2, [r2, #8]
   1b440:	7911      	ldrb	r1, [r2, #4]
   1b442:	f004 021f 	and.w	r2, r4, #31
   1b446:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   1b44a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1b44e:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1b452:	fa0b f204 	lsl.w	r2, fp, r4
   1b456:	68a9      	ldr	r1, [r5, #8]
   1b458:	2b00      	cmp	r3, #0
   1b45a:	d025      	beq.n	1b4a8 <gpio_nrfx_config+0x11e>
   1b45c:	4311      	orrs	r1, r2
   1b45e:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   1b460:	6969      	ldr	r1, [r5, #20]
   1b462:	9301      	str	r3, [sp, #4]
   1b464:	06b0      	lsls	r0, r6, #26
   1b466:	bf4c      	ite	mi
   1b468:	4311      	orrmi	r1, r2
   1b46a:	4391      	bicpl	r1, r2
   1b46c:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   1b46e:	69a9      	ldr	r1, [r5, #24]
   1b470:	0670      	lsls	r0, r6, #25
   1b472:	bf4c      	ite	mi
   1b474:	4311      	orrmi	r1, r2
   1b476:	4391      	bicpl	r1, r2
   1b478:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   1b47a:	6929      	ldr	r1, [r5, #16]
   1b47c:	0770      	lsls	r0, r6, #29
   1b47e:	bf4c      	ite	mi
   1b480:	4311      	orrmi	r1, r2
   1b482:	4391      	bicpl	r1, r2
   1b484:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   1b486:	69e9      	ldr	r1, [r5, #28]
   1b488:	0630      	lsls	r0, r6, #24
   1b48a:	bf4c      	ite	mi
   1b48c:	430a      	orrmi	r2, r1
   1b48e:	ea21 0202 	bicpl.w	r2, r1, r2
   1b492:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1b494:	4621      	mov	r1, r4
   1b496:	4640      	mov	r0, r8
   1b498:	f7f7 f8b0 	bl	125fc <gpiote_pin_int_cfg>
		if (res != 0) {
   1b49c:	2800      	cmp	r0, #0
   1b49e:	d1bd      	bne.n	1b41c <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b4a0:	3401      	adds	r4, #1
   1b4a2:	b2e4      	uxtb	r4, r4
   1b4a4:	9b01      	ldr	r3, [sp, #4]
   1b4a6:	e7b6      	b.n	1b416 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1b4a8:	ea21 0102 	bic.w	r1, r1, r2
   1b4ac:	e7d7      	b.n	1b45e <gpio_nrfx_config+0xd4>

0001b4ae <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b4ae:	2901      	cmp	r1, #1
{
   1b4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1b4b4:	bf18      	it	ne
   1b4b6:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   1b4b8:	6887      	ldr	r7, [r0, #8]
{
   1b4ba:	4606      	mov	r6, r0
		to_pin   = pin;
   1b4bc:	bf12      	itee	ne
   1b4be:	4625      	movne	r5, r4
		to_pin   = 31U;
   1b4c0:	251f      	moveq	r5, #31
		from_pin = 0U;
   1b4c2:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1b4c4:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b4c8:	42ac      	cmp	r4, r5
   1b4ca:	d902      	bls.n	1b4d2 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1b4cc:	2000      	movs	r0, #0
}
   1b4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1b4d2:	68fb      	ldr	r3, [r7, #12]
   1b4d4:	fa08 f204 	lsl.w	r2, r8, r4
   1b4d8:	ea23 0302 	bic.w	r3, r3, r2
   1b4dc:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1b4de:	4621      	mov	r1, r4
   1b4e0:	4630      	mov	r0, r6
   1b4e2:	f7f7 f88b 	bl	125fc <gpiote_pin_int_cfg>
		if (res != 0) {
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	d1f1      	bne.n	1b4ce <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b4ea:	3401      	adds	r4, #1
   1b4ec:	b2e4      	uxtb	r4, r4
   1b4ee:	e7eb      	b.n	1b4c8 <gpio_nrfx_pin_disable_callback+0x1a>

0001b4f0 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1b4f0:	2901      	cmp	r1, #1
{
   1b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1b4f6:	bf18      	it	ne
   1b4f8:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   1b4fa:	6887      	ldr	r7, [r0, #8]
{
   1b4fc:	4606      	mov	r6, r0
		to_pin   = pin;
   1b4fe:	bf12      	itee	ne
   1b500:	4625      	movne	r5, r4
		to_pin   = 31U;
   1b502:	251f      	moveq	r5, #31
		from_pin = 0U;
   1b504:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1b506:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b50a:	42ac      	cmp	r4, r5
   1b50c:	d902      	bls.n	1b514 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1b50e:	2000      	movs	r0, #0
}
   1b510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1b514:	68fb      	ldr	r3, [r7, #12]
   1b516:	fa08 f204 	lsl.w	r2, r8, r4
   1b51a:	4313      	orrs	r3, r2
   1b51c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1b51e:	4621      	mov	r1, r4
   1b520:	4630      	mov	r0, r6
   1b522:	f7f7 f86b 	bl	125fc <gpiote_pin_int_cfg>
		if (res != 0) {
   1b526:	2800      	cmp	r0, #0
   1b528:	d1f2      	bne.n	1b510 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1b52a:	3401      	adds	r4, #1
   1b52c:	b2e4      	uxtb	r4, r4
   1b52e:	e7ec      	b.n	1b50a <gpio_nrfx_pin_enable_callback+0x1a>

0001b530 <gpio_pin_write>:
{
   1b530:	b410      	push	{r4}
   1b532:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
   1b534:	6842      	ldr	r2, [r0, #4]
   1b536:	6854      	ldr	r4, [r2, #4]
   1b538:	460a      	mov	r2, r1
   1b53a:	46a4      	mov	ip, r4
   1b53c:	2100      	movs	r1, #0
}
   1b53e:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   1b540:	4760      	bx	ip

0001b542 <_spi_context_cs_control.isra.7>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1b542:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1b544:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1b546:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1b548:	b324      	cbz	r4, 1b594 <_spi_context_cs_control.isra.7+0x52>
   1b54a:	68a3      	ldr	r3, [r4, #8]
   1b54c:	b313      	cbz	r3, 1b594 <_spi_context_cs_control.isra.7+0x52>
   1b54e:	6818      	ldr	r0, [r3, #0]
   1b550:	b300      	cbz	r0, 1b594 <_spi_context_cs_control.isra.7+0x52>
		if (on) {
   1b552:	b161      	cbz	r1, 1b56e <_spi_context_cs_control.isra.7+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   1b554:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   1b558:	6859      	ldr	r1, [r3, #4]
   1b55a:	0fd2      	lsrs	r2, r2, #31
   1b55c:	f7ff ffe8 	bl	1b530 <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
   1b560:	682b      	ldr	r3, [r5, #0]
   1b562:	689b      	ldr	r3, [r3, #8]
   1b564:	6898      	ldr	r0, [r3, #8]
}
   1b566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1b56a:	f002 bc43 	b.w	1ddf4 <z_impl_k_busy_wait>
			if (!force_off &&
   1b56e:	b912      	cbnz	r2, 1b576 <_spi_context_cs_control.isra.7+0x34>
   1b570:	88a2      	ldrh	r2, [r4, #4]
   1b572:	0492      	lsls	r2, r2, #18
   1b574:	d40e      	bmi.n	1b594 <_spi_context_cs_control.isra.7+0x52>
			k_busy_wait(ctx->config->cs->delay);
   1b576:	6898      	ldr	r0, [r3, #8]
   1b578:	f002 fc3c 	bl	1ddf4 <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
   1b57c:	682a      	ldr	r2, [r5, #0]
   1b57e:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   1b580:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   1b584:	43d2      	mvns	r2, r2
   1b586:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b58a:	0fd2      	lsrs	r2, r2, #31
}
   1b58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
   1b590:	f7ff bfce 	b.w	1b530 <gpio_pin_write>
}
   1b594:	bd38      	pop	{r3, r4, r5, pc}

0001b596 <spi_context_unlock_unconditionally>:
{
   1b596:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1b598:	2201      	movs	r2, #1
   1b59a:	2100      	movs	r1, #0
{
   1b59c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   1b59e:	f7ff ffd0 	bl	1b542 <_spi_context_cs_control.isra.7>
	if (!k_sem_count_get(&ctx->lock)) {
   1b5a2:	68e3      	ldr	r3, [r4, #12]
   1b5a4:	b923      	cbnz	r3, 1b5b0 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   1b5a6:	1d20      	adds	r0, r4, #4
}
   1b5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b5ac:	f7fb bec8 	b.w	17340 <z_impl_k_sem_give>
   1b5b0:	bd10      	pop	{r4, pc}

0001b5b2 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1b5b2:	6880      	ldr	r0, [r0, #8]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1b5b4:	6803      	ldr	r3, [r0, #0]
   1b5b6:	428b      	cmp	r3, r1
{
   1b5b8:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1b5ba:	d106      	bne.n	1b5ca <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   1b5bc:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   1b5c0:	b934      	cbnz	r4, 1b5d0 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   1b5c2:	f7ff ffe8 	bl	1b596 <spi_context_unlock_unconditionally>
	return 0;
   1b5c6:	4620      	mov	r0, r4
}
   1b5c8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1b5ca:	f06f 0015 	mvn.w	r0, #21
   1b5ce:	e7fb      	b.n	1b5c8 <spi_nrfx_release+0x16>
		return -EBUSY;
   1b5d0:	f06f 000f 	mvn.w	r0, #15
   1b5d4:	e7f8      	b.n	1b5c8 <spi_nrfx_release+0x16>

0001b5d6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1b5d6:	4700      	bx	r0

0001b5d8 <transfer_byte>:
{
   1b5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   1b5da:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1b5de:	698a      	ldr	r2, [r1, #24]
   1b5e0:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   1b5e2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1b5e6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1b5e8:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1b5ea:	bf3e      	ittt	cc
   1b5ec:	694a      	ldrcc	r2, [r1, #20]
   1b5ee:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   1b5f2:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   1b5f4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    if (p_cb->abort)
   1b5f6:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    ++p_cb->bytes_transferred;
   1b5fa:	1c53      	adds	r3, r2, #1
   1b5fc:	624b      	str	r3, [r1, #36]	; 0x24
    size_t bytes_used = p_cb->bytes_transferred + 1;
   1b5fe:	3202      	adds	r2, #2
    if (p_cb->abort)
   1b600:	b13c      	cbz	r4, 1b612 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1b602:	690c      	ldr	r4, [r1, #16]
   1b604:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1b606:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   1b608:	bf38      	it	cc
   1b60a:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1b60c:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   1b60e:	bf88      	it	hi
   1b610:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1b612:	690d      	ldr	r5, [r1, #16]
   1b614:	4295      	cmp	r5, r2
   1b616:	d905      	bls.n	1b624 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   1b618:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   1b61a:	5c9b      	ldrb	r3, [r3, r2]
   1b61c:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1b620:	2001      	movs	r0, #1
   1b622:	e00b      	b.n	1b63c <transfer_byte+0x64>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1b624:	698c      	ldr	r4, [r1, #24]
   1b626:	4294      	cmp	r4, r2
   1b628:	d902      	bls.n	1b630 <transfer_byte+0x58>
   1b62a:	f891 3020 	ldrb.w	r3, [r1, #32]
   1b62e:	e7f5      	b.n	1b61c <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1b630:	42ab      	cmp	r3, r5
   1b632:	d3f5      	bcc.n	1b620 <transfer_byte+0x48>
   1b634:	42a3      	cmp	r3, r4
   1b636:	bf2c      	ite	cs
   1b638:	2000      	movcs	r0, #0
   1b63a:	2001      	movcc	r0, #1
}
   1b63c:	b003      	add	sp, #12
   1b63e:	bd30      	pop	{r4, r5, pc}

0001b640 <nrf_twi_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b640:	2300      	movs	r3, #0
   1b642:	5043      	str	r3, [r0, r1]
{
   1b644:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1b646:	5843      	ldr	r3, [r0, r1]
   1b648:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1b64a:	9b01      	ldr	r3, [sp, #4]
}
   1b64c:	b002      	add	sp, #8
   1b64e:	4770      	bx	lr

0001b650 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1b650:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1b652:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   1b654:	4293      	cmp	r3, r2
   1b656:	d208      	bcs.n	1b66a <twi_send_byte+0x1a>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   1b658:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
   1b65a:	5cd2      	ldrb	r2, [r2, r3]
   1b65c:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
        ++(p_cb->bytes_transferred);
   1b660:	3301      	adds	r3, #1
   1b662:	634b      	str	r3, [r1, #52]	; 0x34
    return true;
   1b664:	2301      	movs	r3, #1
}
   1b666:	4618      	mov	r0, r3
   1b668:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   1b66a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   1b66e:	b11b      	cbz	r3, 1b678 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b670:	2301      	movs	r3, #1
   1b672:	61c3      	str	r3, [r0, #28]
            return false;
   1b674:	2300      	movs	r3, #0
   1b676:	e7f6      	b.n	1b666 <twi_send_byte+0x16>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   1b678:	6a0a      	ldr	r2, [r1, #32]
   1b67a:	f012 0f40 	tst.w	r2, #64	; 0x40
   1b67e:	f04f 0201 	mov.w	r2, #1
   1b682:	bf15      	itete	ne
   1b684:	61c2      	strne	r2, [r0, #28]
   1b686:	6142      	streq	r2, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   1b688:	f881 202d 	strbne.w	r2, [r1, #45]	; 0x2d
    return true;
   1b68c:	4613      	moveq	r3, r2
   1b68e:	e7ea      	b.n	1b666 <twi_send_byte+0x16>

0001b690 <twi_transfer>:
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
   1b690:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
{
   1b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b696:	4604      	mov	r4, r0
   1b698:	460d      	mov	r5, r1
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
   1b69a:	2a00      	cmp	r2, #0
   1b69c:	d160      	bne.n	1b760 <twi_transfer+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b69e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1b6a2:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   1b6a4:	6a8f      	ldr	r7, [r1, #40]	; 0x28
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   1b6a6:	b1b3      	cbz	r3, 1b6d6 <twi_transfer+0x46>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   1b6a8:	f44f 7192 	mov.w	r1, #292	; 0x124
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   1b6ac:	f7ff ffc8 	bl	1b640 <nrf_twi_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b6b0:	2301      	movs	r3, #1
   1b6b2:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   1b6b4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   1b6b8:	42be      	cmp	r6, r7
   1b6ba:	d14f      	bne.n	1b75c <twi_transfer+0xcc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b6bc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1b6c0:	2b00      	cmp	r3, #0
   1b6c2:	d04b      	beq.n	1b75c <twi_transfer+0xcc>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
   1b6c4:	f44f 7182 	mov.w	r1, #260	; 0x104
   1b6c8:	4620      	mov	r0, r4
   1b6ca:	f7ff ffb9 	bl	1b640 <nrf_twi_event_clear>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   1b6ce:	2200      	movs	r2, #0
   1b6d0:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
        return false;
   1b6d4:	e013      	b.n	1b6fe <twi_transfer+0x6e>
   1b6d6:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   1b6da:	b193      	cbz	r3, 1b702 <twi_transfer+0x72>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
   1b6dc:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1b6e0:	f7ff ffae 	bl	1b640 <nrf_twi_event_clear>
   1b6e4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   1b6e8:	b11b      	cbz	r3, 1b6f2 <twi_transfer+0x62>
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   1b6ea:	f44f 7192 	mov.w	r1, #292	; 0x124
   1b6ee:	4620      	mov	r0, r4
   1b6f0:	e7dc      	b.n	1b6ac <twi_transfer+0x1c>
                if (!twi_send_byte(p_twi, p_cb))
   1b6f2:	4629      	mov	r1, r5
   1b6f4:	f7ff ffac 	bl	1b650 <twi_send_byte>
   1b6f8:	4602      	mov	r2, r0
   1b6fa:	2800      	cmp	r0, #0
   1b6fc:	d1dc      	bne.n	1b6b8 <twi_transfer+0x28>
}
   1b6fe:	4610      	mov	r0, r2
   1b700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b702:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   1b706:	2b00      	cmp	r3, #0
   1b708:	d0d6      	beq.n	1b6b8 <twi_transfer+0x28>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
   1b70a:	f44f 7184 	mov.w	r1, #264	; 0x108
   1b70e:	f7ff ff97 	bl	1b640 <nrf_twi_event_clear>
   1b712:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   1b716:	2b00      	cmp	r3, #0
   1b718:	d1e7      	bne.n	1b6ea <twi_transfer+0x5a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1b71a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1b71c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1b71e:	428b      	cmp	r3, r1
   1b720:	d2ca      	bcs.n	1b6b8 <twi_transfer+0x28>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   1b722:	6a69      	ldr	r1, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   1b724:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   1b728:	54c8      	strb	r0, [r1, r3]
        ++(p_cb->bytes_transferred);
   1b72a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1b72c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   1b72e:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1b730:	1e48      	subs	r0, r1, #1
   1b732:	4283      	cmp	r3, r0
        ++(p_cb->bytes_transferred);
   1b734:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1b736:	d108      	bne.n	1b74a <twi_transfer+0xba>
   1b738:	6a28      	ldr	r0, [r5, #32]
   1b73a:	0640      	lsls	r0, r0, #25
   1b73c:	d41d      	bmi.n	1b77a <twi_transfer+0xea>
    p_reg->SHORTS = mask;
   1b73e:	2302      	movs	r3, #2
   1b740:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b744:	2301      	movs	r3, #1
   1b746:	6223      	str	r3, [r4, #32]
   1b748:	e7b6      	b.n	1b6b8 <twi_transfer+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1b74a:	428b      	cmp	r3, r1
   1b74c:	d1fa      	bne.n	1b744 <twi_transfer+0xb4>
   1b74e:	6a2b      	ldr	r3, [r5, #32]
   1b750:	065b      	lsls	r3, r3, #25
   1b752:	d5b1      	bpl.n	1b6b8 <twi_transfer+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   1b754:	2302      	movs	r3, #2
   1b756:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   1b75a:	e7d0      	b.n	1b6fe <twi_transfer+0x6e>
    return true;
   1b75c:	2201      	movs	r2, #1
   1b75e:	e7ce      	b.n	1b6fe <twi_transfer+0x6e>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
   1b760:	f44f 7192 	mov.w	r1, #292	; 0x124
   1b764:	f7ff ff6c 	bl	1b640 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
   1b768:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1b76c:	f7ff ff68 	bl	1b640 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
   1b770:	f44f 7184 	mov.w	r1, #264	; 0x108
   1b774:	f7ff ff64 	bl	1b640 <nrf_twi_event_clear>
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   1b778:	e7a0      	b.n	1b6bc <twi_transfer+0x2c>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1b77a:	428b      	cmp	r3, r1
   1b77c:	d1e2      	bne.n	1b744 <twi_transfer+0xb4>
   1b77e:	e7e9      	b.n	1b754 <twi_transfer+0xc4>

0001b780 <lv_indev_reset.part.5>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
   1b780:	b508      	push	{r3, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
   1b782:	2000      	movs	r0, #0
        while(i) {
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
   1b784:	f7f9 ff40 	bl	15608 <lv_indev_get_next>
        while(i) {
   1b788:	b900      	cbnz	r0, 1b78c <lv_indev_reset.part.5+0xc>
        }
    }
}
   1b78a:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
   1b78c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1b790:	f043 0302 	orr.w	r3, r3, #2
   1b794:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
   1b798:	e7f4      	b.n	1b784 <lv_indev_reset.part.5+0x4>

0001b79a <lv_indev_init>:
    if(indev)
   1b79a:	f7ff bff1 	b.w	1b780 <lv_indev_reset.part.5>

0001b79e <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
   1b79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
   1b7a0:	1d07      	adds	r7, r0, #4
   1b7a2:	4638      	mov	r0, r7
{
   1b7a4:	460d      	mov	r5, r1
   1b7a6:	4616      	mov	r6, r2
    LV_LL_READ(obj->child_ll, i)
   1b7a8:	f001 fd5d 	bl	1d266 <lv_ll_get_head>
   1b7ac:	4604      	mov	r4, r0
   1b7ae:	b900      	cbnz	r0, 1b7b2 <refresh_children_position+0x14>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
   1b7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
   1b7b2:	8a23      	ldrh	r3, [r4, #16]
   1b7b4:	442b      	add	r3, r5
   1b7b6:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
   1b7b8:	8a63      	ldrh	r3, [r4, #18]
   1b7ba:	4433      	add	r3, r6
   1b7bc:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
   1b7be:	8aa3      	ldrh	r3, [r4, #20]
   1b7c0:	442b      	add	r3, r5
   1b7c2:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
   1b7c4:	8ae3      	ldrh	r3, [r4, #22]
   1b7c6:	4433      	add	r3, r6
        refresh_children_position(i, x_diff, y_diff);
   1b7c8:	4629      	mov	r1, r5
   1b7ca:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
   1b7cc:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
   1b7ce:	4632      	mov	r2, r6
   1b7d0:	f7ff ffe5 	bl	1b79e <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
   1b7d4:	4621      	mov	r1, r4
   1b7d6:	4638      	mov	r0, r7
   1b7d8:	f001 fd4b 	bl	1d272 <lv_ll_get_next>
   1b7dc:	e7e6      	b.n	1b7ac <refresh_children_position+0xe>

0001b7de <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
   1b7de:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1b7e2:	f361 0300 	bfi	r3, r1, #0, #1
   1b7e6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
}
   1b7ea:	4770      	bx	lr

0001b7ec <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
   1b7ec:	61c1      	str	r1, [r0, #28]
}
   1b7ee:	4770      	bx	lr

0001b7f0 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
   1b7f0:	6201      	str	r1, [r0, #32]
}
   1b7f2:	4770      	bx	lr

0001b7f4 <lv_obj_allocate_ext_attr>:
{
   1b7f4:	b510      	push	{r4, lr}
   1b7f6:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
   1b7f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1b7fa:	f7fa f893 	bl	15924 <lv_mem_realloc>
   1b7fe:	6260      	str	r0, [r4, #36]	; 0x24
}
   1b800:	bd10      	pop	{r4, pc}

0001b802 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
   1b802:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
   1b806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(lv_obj_get_hidden(obj)) return;
   1b808:	06da      	lsls	r2, r3, #27
{
   1b80a:	4606      	mov	r6, r0
    if(lv_obj_get_hidden(obj)) return;
   1b80c:	d439      	bmi.n	1b882 <lv_obj_invalidate+0x80>
   1b80e:	4604      	mov	r4, r0
    return obj->par;
   1b810:	6823      	ldr	r3, [r4, #0]
    } while(par != NULL);
   1b812:	bb53      	cbnz	r3, 1b86a <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
   1b814:	4620      	mov	r0, r4
   1b816:	f7f8 f9f5 	bl	13c04 <lv_obj_get_disp>
   1b81a:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
   1b81c:	f7f8 f97a 	bl	13b14 <lv_disp_get_scr_act>
   1b820:	4284      	cmp	r4, r0
   1b822:	d124      	bne.n	1b86e <lv_obj_invalidate+0x6c>
    memcpy(dest, src, sizeof(lv_area_t));
   1b824:	2208      	movs	r2, #8
   1b826:	f106 0110 	add.w	r1, r6, #16
   1b82a:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
   1b82c:	f9b6 4030 	ldrsh.w	r4, [r6, #48]	; 0x30
    return obj->par;
   1b830:	6835      	ldr	r5, [r6, #0]
   1b832:	f7fd fa02 	bl	18c3a <memcpy>
        area_trunc.x1 -= ext_size;
   1b836:	f8bd 3000 	ldrh.w	r3, [sp]
   1b83a:	1b1b      	subs	r3, r3, r4
   1b83c:	f8ad 3000 	strh.w	r3, [sp]
        area_trunc.y1 -= ext_size;
   1b840:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1b844:	1b1b      	subs	r3, r3, r4
   1b846:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_trunc.x2 += ext_size;
   1b84a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1b84e:	4423      	add	r3, r4
   1b850:	f8ad 3004 	strh.w	r3, [sp, #4]
        area_trunc.y2 += ext_size;
   1b854:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b858:	441c      	add	r4, r3
   1b85a:	f8ad 4006 	strh.w	r4, [sp, #6]
        while(par != NULL) {
   1b85e:	b995      	cbnz	r5, 1b886 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
   1b860:	4669      	mov	r1, sp
   1b862:	4638      	mov	r0, r7
   1b864:	f000 fb44 	bl	1bef0 <lv_inv_area>
   1b868:	e00b      	b.n	1b882 <lv_obj_invalidate+0x80>
    } while(par != NULL);
   1b86a:	461c      	mov	r4, r3
   1b86c:	e7d0      	b.n	1b810 <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
   1b86e:	4638      	mov	r0, r7
   1b870:	f7f8 f966 	bl	13b40 <lv_disp_get_layer_top>
   1b874:	4284      	cmp	r4, r0
   1b876:	d0d5      	beq.n	1b824 <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
   1b878:	4638      	mov	r0, r7
   1b87a:	f7f8 f977 	bl	13b6c <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
   1b87e:	4284      	cmp	r4, r0
   1b880:	d0d0      	beq.n	1b824 <lv_obj_invalidate+0x22>
}
   1b882:	b003      	add	sp, #12
   1b884:	bdf0      	pop	{r4, r5, r6, r7, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
   1b886:	f105 0210 	add.w	r2, r5, #16
   1b88a:	4669      	mov	r1, sp
   1b88c:	4668      	mov	r0, sp
   1b88e:	f001 fbdb 	bl	1d048 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
   1b892:	2800      	cmp	r0, #0
   1b894:	d0f5      	beq.n	1b882 <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
   1b896:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
   1b89a:	06db      	lsls	r3, r3, #27
   1b89c:	d4f1      	bmi.n	1b882 <lv_obj_invalidate+0x80>
    return obj->par;
   1b89e:	682d      	ldr	r5, [r5, #0]
   1b8a0:	e7dd      	b.n	1b85e <lv_obj_invalidate+0x5c>

0001b8a2 <lv_obj_set_pos>:
{
   1b8a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->par;
   1b8a4:	6807      	ldr	r7, [r0, #0]
    diff.x = x - obj->coords.x1;
   1b8a6:	8a03      	ldrh	r3, [r0, #16]
   1b8a8:	8a3d      	ldrh	r5, [r7, #16]
    diff.y = y - obj->coords.y1;
   1b8aa:	8a7e      	ldrh	r6, [r7, #18]
    diff.x = x - obj->coords.x1;
   1b8ac:	1aed      	subs	r5, r5, r3
    diff.y = y - obj->coords.y1;
   1b8ae:	8a43      	ldrh	r3, [r0, #18]
   1b8b0:	1af6      	subs	r6, r6, r3
    diff.x = x - obj->coords.x1;
   1b8b2:	440d      	add	r5, r1
    diff.y = y - obj->coords.y1;
   1b8b4:	4416      	add	r6, r2
    diff.x = x - obj->coords.x1;
   1b8b6:	b22d      	sxth	r5, r5
    diff.y = y - obj->coords.y1;
   1b8b8:	b236      	sxth	r6, r6
    if(diff.x == 0 && diff.y == 0) return;
   1b8ba:	ea55 0306 	orrs.w	r3, r5, r6
{
   1b8be:	4604      	mov	r4, r0
    if(diff.x == 0 && diff.y == 0) return;
   1b8c0:	d025      	beq.n	1b90e <lv_obj_set_pos+0x6c>
    lv_obj_invalidate(obj);
   1b8c2:	f7ff ff9e 	bl	1b802 <lv_obj_invalidate>
   1b8c6:	2208      	movs	r2, #8
   1b8c8:	f104 0110 	add.w	r1, r4, #16
   1b8cc:	4668      	mov	r0, sp
   1b8ce:	f7fd f9b4 	bl	18c3a <memcpy>
    obj->coords.x1 += diff.x;
   1b8d2:	8a23      	ldrh	r3, [r4, #16]
   1b8d4:	442b      	add	r3, r5
   1b8d6:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
   1b8d8:	8a63      	ldrh	r3, [r4, #18]
   1b8da:	4433      	add	r3, r6
   1b8dc:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
   1b8de:	8aa3      	ldrh	r3, [r4, #20]
   1b8e0:	442b      	add	r3, r5
   1b8e2:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
   1b8e4:	8ae3      	ldrh	r3, [r4, #22]
   1b8e6:	4433      	add	r3, r6
   1b8e8:	82e3      	strh	r3, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
   1b8ea:	4632      	mov	r2, r6
   1b8ec:	4629      	mov	r1, r5
   1b8ee:	4620      	mov	r0, r4
   1b8f0:	f7ff ff55 	bl	1b79e <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
   1b8f4:	69e3      	ldr	r3, [r4, #28]
   1b8f6:	466a      	mov	r2, sp
   1b8f8:	2102      	movs	r1, #2
   1b8fa:	4620      	mov	r0, r4
   1b8fc:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   1b8fe:	69fb      	ldr	r3, [r7, #28]
   1b900:	4622      	mov	r2, r4
   1b902:	2101      	movs	r1, #1
   1b904:	4638      	mov	r0, r7
   1b906:	4798      	blx	r3
    lv_obj_invalidate(obj);
   1b908:	4620      	mov	r0, r4
   1b90a:	f7ff ff7a 	bl	1b802 <lv_obj_invalidate>
}
   1b90e:	b003      	add	sp, #12
   1b910:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b912 <lv_obj_refresh_style>:
{
   1b912:	b510      	push	{r4, lr}
   1b914:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
   1b916:	f7ff ff74 	bl	1b802 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
   1b91a:	69e3      	ldr	r3, [r4, #28]
   1b91c:	4620      	mov	r0, r4
   1b91e:	2200      	movs	r2, #0
   1b920:	2104      	movs	r1, #4
   1b922:	4798      	blx	r3
    lv_obj_invalidate(obj);
   1b924:	4620      	mov	r0, r4
}
   1b926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
   1b92a:	f7ff bf6a 	b.w	1b802 <lv_obj_invalidate>

0001b92e <lv_obj_refresh_ext_draw_pad>:
{
   1b92e:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
   1b930:	2200      	movs	r2, #0
{
   1b932:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
   1b934:	8602      	strh	r2, [r0, #48]	; 0x30
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   1b936:	69c3      	ldr	r3, [r0, #28]
   1b938:	2106      	movs	r1, #6
   1b93a:	4798      	blx	r3
    lv_obj_invalidate(obj);
   1b93c:	4620      	mov	r0, r4
}
   1b93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
   1b942:	f7ff bf5e 	b.w	1b802 <lv_obj_invalidate>

0001b946 <lv_obj_set_size>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b946:	8a83      	ldrh	r3, [r0, #20]
{
   1b948:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b94a:	4616      	mov	r6, r2
   1b94c:	8a02      	ldrh	r2, [r0, #16]
   1b94e:	3301      	adds	r3, #1
   1b950:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   1b952:	b21b      	sxth	r3, r3
   1b954:	428b      	cmp	r3, r1
{
   1b956:	4604      	mov	r4, r0
   1b958:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   1b95a:	d106      	bne.n	1b96a <lv_obj_set_size+0x24>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b95c:	8ac3      	ldrh	r3, [r0, #22]
   1b95e:	8a42      	ldrh	r2, [r0, #18]
   1b960:	3301      	adds	r3, #1
   1b962:	1a9b      	subs	r3, r3, r2
   1b964:	b21b      	sxth	r3, r3
   1b966:	429e      	cmp	r6, r3
   1b968:	d024      	beq.n	1b9b4 <lv_obj_set_size+0x6e>
    lv_obj_invalidate(obj);
   1b96a:	4620      	mov	r0, r4
   1b96c:	f7ff ff49 	bl	1b802 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
   1b970:	2208      	movs	r2, #8
   1b972:	f104 0110 	add.w	r1, r4, #16
   1b976:	4668      	mov	r0, sp
   1b978:	f7fd f95f 	bl	18c3a <memcpy>
    obj->coords.y2 = obj->coords.y1 + h - 1;
   1b97c:	8a63      	ldrh	r3, [r4, #18]
   1b97e:	3e01      	subs	r6, #1
   1b980:	441e      	add	r6, r3
        obj->coords.x2 = obj->coords.x1 + w - 1;
   1b982:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.y2 = obj->coords.y1 + h - 1;
   1b984:	82e6      	strh	r6, [r4, #22]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   1b986:	3d01      	subs	r5, #1
   1b988:	441d      	add	r5, r3
   1b98a:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
   1b98c:	69e3      	ldr	r3, [r4, #28]
   1b98e:	466a      	mov	r2, sp
   1b990:	2102      	movs	r1, #2
   1b992:	4620      	mov	r0, r4
   1b994:	4798      	blx	r3
    return obj->par;
   1b996:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   1b998:	b118      	cbz	r0, 1b9a2 <lv_obj_set_size+0x5c>
   1b99a:	69c3      	ldr	r3, [r0, #28]
   1b99c:	4622      	mov	r2, r4
   1b99e:	2101      	movs	r1, #1
   1b9a0:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
   1b9a2:	1d26      	adds	r6, r4, #4
   1b9a4:	4630      	mov	r0, r6
   1b9a6:	f001 fc5e 	bl	1d266 <lv_ll_get_head>
   1b9aa:	4605      	mov	r5, r0
   1b9ac:	b920      	cbnz	r0, 1b9b8 <lv_obj_set_size+0x72>
    lv_obj_invalidate(obj);
   1b9ae:	4620      	mov	r0, r4
   1b9b0:	f7ff ff27 	bl	1b802 <lv_obj_invalidate>
}
   1b9b4:	b002      	add	sp, #8
   1b9b6:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
   1b9b8:	69eb      	ldr	r3, [r5, #28]
   1b9ba:	2200      	movs	r2, #0
   1b9bc:	2103      	movs	r1, #3
   1b9be:	4628      	mov	r0, r5
   1b9c0:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
   1b9c2:	4629      	mov	r1, r5
   1b9c4:	4630      	mov	r0, r6
   1b9c6:	f001 fc54 	bl	1d272 <lv_ll_get_next>
   1b9ca:	e7ee      	b.n	1b9aa <lv_obj_set_size+0x64>

0001b9cc <lv_obj_set_width>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b9cc:	8ac2      	ldrh	r2, [r0, #22]
   1b9ce:	8a43      	ldrh	r3, [r0, #18]
   1b9d0:	3201      	adds	r2, #1
   1b9d2:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
   1b9d4:	b212      	sxth	r2, r2
   1b9d6:	f7ff bfb6 	b.w	1b946 <lv_obj_set_size>

0001b9da <lv_obj_set_height>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b9da:	8a83      	ldrh	r3, [r0, #20]
   1b9dc:	8a02      	ldrh	r2, [r0, #16]
   1b9de:	3301      	adds	r3, #1
   1b9e0:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
   1b9e2:	460a      	mov	r2, r1
   1b9e4:	b219      	sxth	r1, r3
   1b9e6:	f7ff bfae 	b.w	1b946 <lv_obj_set_size>

0001b9ea <lv_obj_get_parent>:
}
   1b9ea:	6800      	ldr	r0, [r0, #0]
   1b9ec:	4770      	bx	lr

0001b9ee <lv_obj_get_child>:
    if(child == NULL) {
   1b9ee:	3004      	adds	r0, #4
   1b9f0:	b909      	cbnz	r1, 1b9f6 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
   1b9f2:	f001 bc38 	b.w	1d266 <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
   1b9f6:	f001 bc3c 	b.w	1d272 <lv_ll_get_next>

0001b9fa <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
   1b9fa:	b538      	push	{r3, r4, r5, lr}
   1b9fc:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
   1b9fe:	3004      	adds	r0, #4
   1ba00:	f001 fc31 	bl	1d266 <lv_ll_get_head>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
   1ba04:	4604      	mov	r4, r0
    while(child != NULL) {
   1ba06:	b900      	cbnz	r0, 1ba0a <refresh_children_style+0x10>
    }
}
   1ba08:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
   1ba0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ba0c:	b953      	cbnz	r3, 1ba24 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
   1ba0e:	4620      	mov	r0, r4
   1ba10:	f7ff fff3 	bl	1b9fa <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
   1ba14:	4620      	mov	r0, r4
   1ba16:	f7ff ff7c 	bl	1b912 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
   1ba1a:	4621      	mov	r1, r4
   1ba1c:	4628      	mov	r0, r5
   1ba1e:	f7ff ffe6 	bl	1b9ee <lv_obj_get_child>
   1ba22:	e7ef      	b.n	1ba04 <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
   1ba24:	781b      	ldrb	r3, [r3, #0]
   1ba26:	07db      	lsls	r3, r3, #31
   1ba28:	d5f7      	bpl.n	1ba1a <refresh_children_style+0x20>
            refresh_children_style(child);
   1ba2a:	4620      	mov	r0, r4
   1ba2c:	f7ff ffe5 	bl	1b9fa <refresh_children_style>
   1ba30:	e7f3      	b.n	1ba1a <refresh_children_style+0x20>

0001ba32 <lv_obj_set_style>:
{
   1ba32:	b510      	push	{r4, lr}
   1ba34:	4604      	mov	r4, r0
    obj->style_p = style;
   1ba36:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
   1ba38:	f7ff ffdf 	bl	1b9fa <refresh_children_style>
    lv_obj_refresh_style(obj);
   1ba3c:	4620      	mov	r0, r4
}
   1ba3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
   1ba42:	f7ff bf66 	b.w	1b912 <lv_obj_refresh_style>

0001ba46 <lv_obj_get_coords>:
{
   1ba46:	460b      	mov	r3, r1
    memcpy(dest, src, sizeof(lv_area_t));
   1ba48:	2208      	movs	r2, #8
   1ba4a:	f100 0110 	add.w	r1, r0, #16
   1ba4e:	4618      	mov	r0, r3
   1ba50:	f7fd b8f3 	b.w	18c3a <memcpy>

0001ba54 <lv_obj_get_x>:
    return obj->par;
   1ba54:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   1ba56:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
   1ba5a:	b113      	cbz	r3, 1ba62 <lv_obj_get_x+0xe>
        rel_x             = obj->coords.x1 - parent->coords.x1;
   1ba5c:	8a1b      	ldrh	r3, [r3, #16]
   1ba5e:	1ac0      	subs	r0, r0, r3
   1ba60:	b200      	sxth	r0, r0
}
   1ba62:	4770      	bx	lr

0001ba64 <lv_obj_get_y>:
    return obj->par;
   1ba64:	6803      	ldr	r3, [r0, #0]
   if(parent) {
   1ba66:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   1ba6a:	b113      	cbz	r3, 1ba72 <lv_obj_get_y+0xe>
       rel_y             = obj->coords.y1 - parent->coords.y1;
   1ba6c:	8a5b      	ldrh	r3, [r3, #18]
   1ba6e:	1ac0      	subs	r0, r0, r3
   1ba70:	b200      	sxth	r0, r0
}
   1ba72:	4770      	bx	lr

0001ba74 <lv_obj_align>:
{
   1ba74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba78:	4606      	mov	r6, r0
   1ba7a:	461f      	mov	r7, r3
    lv_coord_t new_x = lv_obj_get_x(obj);
   1ba7c:	f7ff ffea 	bl	1ba54 <lv_obj_get_x>
   1ba80:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
   1ba82:	4630      	mov	r0, r6
   1ba84:	f7ff ffee 	bl	1ba64 <lv_obj_get_y>
    if(base == NULL) {
   1ba88:	f8d6 e000 	ldr.w	lr, [r6]
{
   1ba8c:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
   1ba90:	2900      	cmp	r1, #0
   1ba92:	bf08      	it	eq
   1ba94:	4671      	moveq	r1, lr
    switch(align) {
   1ba96:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
   1ba9a:	f9b1 c010 	ldrsh.w	ip, [r1, #16]
   1ba9e:	2a14      	cmp	r2, #20
   1baa0:	d818      	bhi.n	1bad4 <lv_obj_align+0x60>
   1baa2:	e8df f012 	tbh	[pc, r2, lsl #1]
   1baa6:	0029      	.short	0x0029
   1baa8:	004c0015 	.word	0x004c0015
   1baac:	00680060 	.word	0x00680060
   1bab0:	00880070 	.word	0x00880070
   1bab4:	00a10090 	.word	0x00a10090
   1bab8:	00ae00a9 	.word	0x00ae00a9
   1babc:	00ce00c6 	.word	0x00ce00c6
   1bac0:	00e700d1 	.word	0x00e700d1
   1bac4:	00f400ef 	.word	0x00f400ef
   1bac8:	00fe00f9 	.word	0x00fe00f9
   1bacc:	01040101 	.word	0x01040101
            new_y = 0;
   1bad0:	2000      	movs	r0, #0
            new_x = 0;
   1bad2:	2500      	movs	r5, #0
    new_y -= par_abs_y;
   1bad4:	f8be 2012 	ldrh.w	r2, [lr, #18]
    new_x -= par_abs_x;
   1bad8:	f8be 1010 	ldrh.w	r1, [lr, #16]
    new_y -= par_abs_y;
   1badc:	eba8 0202 	sub.w	r2, r8, r2
    new_x -= par_abs_x;
   1bae0:	1a79      	subs	r1, r7, r1
    new_y -= par_abs_y;
   1bae2:	441a      	add	r2, r3
    new_x -= par_abs_x;
   1bae4:	4461      	add	r1, ip
    new_y -= par_abs_y;
   1bae6:	4402      	add	r2, r0
    new_x -= par_abs_x;
   1bae8:	4429      	add	r1, r5
    lv_obj_set_pos(obj, new_x, new_y);
   1baea:	4630      	mov	r0, r6
   1baec:	b212      	sxth	r2, r2
   1baee:	b209      	sxth	r1, r1
}
   1baf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_set_pos(obj, new_x, new_y);
   1baf4:	f7ff bed5 	b.w	1b8a2 <lv_obj_set_pos>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1baf8:	8ab5      	ldrh	r5, [r6, #20]
   1bafa:	8a32      	ldrh	r2, [r6, #16]
   1bafc:	3501      	adds	r5, #1
   1bafe:	1aad      	subs	r5, r5, r2
   1bb00:	8a8a      	ldrh	r2, [r1, #20]
   1bb02:	3201      	adds	r2, #1
   1bb04:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   1bb08:	b212      	sxth	r2, r2
   1bb0a:	b22d      	sxth	r5, r5
   1bb0c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1bb10:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   1bb14:	1055      	asrs	r5, r2, #1
   1bb16:	eba5 0560 	sub.w	r5, r5, r0, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1bb1a:	8acc      	ldrh	r4, [r1, #22]
   1bb1c:	8af0      	ldrh	r0, [r6, #22]
   1bb1e:	8a72      	ldrh	r2, [r6, #18]
   1bb20:	3401      	adds	r4, #1
   1bb22:	3001      	adds	r0, #1
   1bb24:	1ae4      	subs	r4, r4, r3
   1bb26:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
   1bb28:	b224      	sxth	r4, r4
   1bb2a:	b200      	sxth	r0, r0
   1bb2c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1bb30:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
   1bb34:	1060      	asrs	r0, r4, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1bb36:	b22d      	sxth	r5, r5
   1bb38:	eba0 0062 	sub.w	r0, r0, r2, asr #1
   1bb3c:	e077      	b.n	1bc2e <lv_obj_align+0x1ba>
   1bb3e:	8ab5      	ldrh	r5, [r6, #20]
   1bb40:	8a32      	ldrh	r2, [r6, #16]
   1bb42:	3501      	adds	r5, #1
   1bb44:	1aad      	subs	r5, r5, r2
   1bb46:	8a8a      	ldrh	r2, [r1, #20]
   1bb48:	3201      	adds	r2, #1
   1bb4a:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   1bb4e:	b212      	sxth	r2, r2
   1bb50:	b22d      	sxth	r5, r5
   1bb52:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1bb56:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   1bb5a:	1055      	asrs	r5, r2, #1
   1bb5c:	eba5 0560 	sub.w	r5, r5, r0, asr #1
   1bb60:	b22d      	sxth	r5, r5
            new_y = 0;
   1bb62:	2000      	movs	r0, #0
            break;
   1bb64:	e7b6      	b.n	1bad4 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   1bb66:	8a35      	ldrh	r5, [r6, #16]
   1bb68:	8ab2      	ldrh	r2, [r6, #20]
   1bb6a:	8a89      	ldrh	r1, [r1, #20]
   1bb6c:	1aad      	subs	r5, r5, r2
   1bb6e:	440d      	add	r5, r1
   1bb70:	eba5 050c 	sub.w	r5, r5, ip
   1bb74:	e7f4      	b.n	1bb60 <lv_obj_align+0xec>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
   1bb76:	8af2      	ldrh	r2, [r6, #22]
   1bb78:	8a70      	ldrh	r0, [r6, #18]
   1bb7a:	1a80      	subs	r0, r0, r2
   1bb7c:	8aca      	ldrh	r2, [r1, #22]
   1bb7e:	4410      	add	r0, r2
   1bb80:	1ac0      	subs	r0, r0, r3
   1bb82:	b200      	sxth	r0, r0
   1bb84:	e7a5      	b.n	1bad2 <lv_obj_align+0x5e>
   1bb86:	8ab5      	ldrh	r5, [r6, #20]
   1bb88:	8a32      	ldrh	r2, [r6, #16]
   1bb8a:	3501      	adds	r5, #1
   1bb8c:	1aad      	subs	r5, r5, r2
   1bb8e:	8a8a      	ldrh	r2, [r1, #20]
   1bb90:	3201      	adds	r2, #1
   1bb92:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   1bb96:	b212      	sxth	r2, r2
   1bb98:	b22d      	sxth	r5, r5
   1bb9a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1bb9e:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   1bba2:	1055      	asrs	r5, r2, #1
   1bba4:	eba5 0560 	sub.w	r5, r5, r0, asr #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
   1bba8:	8af2      	ldrh	r2, [r6, #22]
   1bbaa:	8a70      	ldrh	r0, [r6, #18]
   1bbac:	1a80      	subs	r0, r0, r2
   1bbae:	8aca      	ldrh	r2, [r1, #22]
   1bbb0:	b22d      	sxth	r5, r5
   1bbb2:	4410      	add	r0, r2
   1bbb4:	e05c      	b.n	1bc70 <lv_obj_align+0x1fc>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   1bbb6:	8ab2      	ldrh	r2, [r6, #20]
   1bbb8:	8a35      	ldrh	r5, [r6, #16]
   1bbba:	1aad      	subs	r5, r5, r2
   1bbbc:	8a8a      	ldrh	r2, [r1, #20]
   1bbbe:	4415      	add	r5, r2
   1bbc0:	eba5 050c 	sub.w	r5, r5, ip
   1bbc4:	e7f0      	b.n	1bba8 <lv_obj_align+0x134>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1bbc6:	8acc      	ldrh	r4, [r1, #22]
   1bbc8:	8af0      	ldrh	r0, [r6, #22]
   1bbca:	8a72      	ldrh	r2, [r6, #18]
   1bbcc:	3401      	adds	r4, #1
   1bbce:	3001      	adds	r0, #1
   1bbd0:	1ae4      	subs	r4, r4, r3
   1bbd2:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
   1bbd4:	b224      	sxth	r4, r4
   1bbd6:	b200      	sxth	r0, r0
   1bbd8:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1bbdc:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
   1bbe0:	1060      	asrs	r0, r4, #1
   1bbe2:	eba0 0062 	sub.w	r0, r0, r2, asr #1
   1bbe6:	e7cc      	b.n	1bb82 <lv_obj_align+0x10e>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   1bbe8:	8ab2      	ldrh	r2, [r6, #20]
   1bbea:	8a35      	ldrh	r5, [r6, #16]
   1bbec:	1aad      	subs	r5, r5, r2
   1bbee:	8a8a      	ldrh	r2, [r1, #20]
   1bbf0:	4415      	add	r5, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1bbf2:	eba5 050c 	sub.w	r5, r5, ip
   1bbf6:	e790      	b.n	1bb1a <lv_obj_align+0xa6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1bbf8:	8af0      	ldrh	r0, [r6, #22]
   1bbfa:	1c42      	adds	r2, r0, #1
   1bbfc:	8a70      	ldrh	r0, [r6, #18]
            new_y = -lv_obj_get_height(obj);
   1bbfe:	1a80      	subs	r0, r0, r2
   1bc00:	e7bf      	b.n	1bb82 <lv_obj_align+0x10e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1bc02:	8ab5      	ldrh	r5, [r6, #20]
   1bc04:	8a32      	ldrh	r2, [r6, #16]
   1bc06:	3501      	adds	r5, #1
   1bc08:	1aad      	subs	r5, r5, r2
   1bc0a:	8a8a      	ldrh	r2, [r1, #20]
   1bc0c:	3201      	adds	r2, #1
   1bc0e:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   1bc12:	b212      	sxth	r2, r2
   1bc14:	b22d      	sxth	r5, r5
   1bc16:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1bc1a:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   1bc1e:	1055      	asrs	r5, r2, #1
   1bc20:	eba5 0560 	sub.w	r5, r5, r0, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1bc24:	8af0      	ldrh	r0, [r6, #22]
   1bc26:	1c42      	adds	r2, r0, #1
   1bc28:	8a70      	ldrh	r0, [r6, #18]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   1bc2a:	b22d      	sxth	r5, r5
            new_y = -lv_obj_get_height(obj);
   1bc2c:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
   1bc2e:	b200      	sxth	r0, r0
            break;
   1bc30:	e750      	b.n	1bad4 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   1bc32:	8a35      	ldrh	r5, [r6, #16]
   1bc34:	8ab2      	ldrh	r2, [r6, #20]
   1bc36:	8a89      	ldrh	r1, [r1, #20]
   1bc38:	1aad      	subs	r5, r5, r2
   1bc3a:	440d      	add	r5, r1
   1bc3c:	eba5 050c 	sub.w	r5, r5, ip
   1bc40:	e7f0      	b.n	1bc24 <lv_obj_align+0x1b0>
   1bc42:	8ac8      	ldrh	r0, [r1, #22]
   1bc44:	3001      	adds	r0, #1
   1bc46:	e79b      	b.n	1bb80 <lv_obj_align+0x10c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1bc48:	8ab5      	ldrh	r5, [r6, #20]
   1bc4a:	8a32      	ldrh	r2, [r6, #16]
   1bc4c:	3501      	adds	r5, #1
   1bc4e:	1aad      	subs	r5, r5, r2
   1bc50:	8a8a      	ldrh	r2, [r1, #20]
   1bc52:	3201      	adds	r2, #1
   1bc54:	eba2 020c 	sub.w	r2, r2, ip
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
   1bc58:	b212      	sxth	r2, r2
   1bc5a:	b22d      	sxth	r5, r5
   1bc5c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1bc60:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
   1bc64:	1055      	asrs	r5, r2, #1
   1bc66:	eba5 0560 	sub.w	r5, r5, r0, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1bc6a:	8ac8      	ldrh	r0, [r1, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   1bc6c:	b22d      	sxth	r5, r5
   1bc6e:	3001      	adds	r0, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
   1bc70:	1ac0      	subs	r0, r0, r3
   1bc72:	e7dc      	b.n	1bc2e <lv_obj_align+0x1ba>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
   1bc74:	8ab2      	ldrh	r2, [r6, #20]
   1bc76:	8a35      	ldrh	r5, [r6, #16]
   1bc78:	1aad      	subs	r5, r5, r2
   1bc7a:	8a8a      	ldrh	r2, [r1, #20]
   1bc7c:	4415      	add	r5, r2
   1bc7e:	eba5 050c 	sub.w	r5, r5, ip
   1bc82:	e7f2      	b.n	1bc6a <lv_obj_align+0x1f6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1bc84:	8ab5      	ldrh	r5, [r6, #20]
   1bc86:	1c69      	adds	r1, r5, #1
   1bc88:	8a35      	ldrh	r5, [r6, #16]
            new_x = -lv_obj_get_width(obj);
   1bc8a:	1a6d      	subs	r5, r5, r1
   1bc8c:	e768      	b.n	1bb60 <lv_obj_align+0xec>
   1bc8e:	8ab5      	ldrh	r5, [r6, #20]
   1bc90:	1c6a      	adds	r2, r5, #1
   1bc92:	8a35      	ldrh	r5, [r6, #16]
            new_x = -lv_obj_get_width(obj);
   1bc94:	1aad      	subs	r5, r5, r2
   1bc96:	e740      	b.n	1bb1a <lv_obj_align+0xa6>
   1bc98:	8ab5      	ldrh	r5, [r6, #20]
   1bc9a:	1c6a      	adds	r2, r5, #1
   1bc9c:	8a35      	ldrh	r5, [r6, #16]
            new_x = -lv_obj_get_width(obj);
   1bc9e:	1aad      	subs	r5, r5, r2
   1bca0:	e782      	b.n	1bba8 <lv_obj_align+0x134>
   1bca2:	8a8d      	ldrh	r5, [r1, #20]
   1bca4:	3501      	adds	r5, #1
   1bca6:	e763      	b.n	1bb70 <lv_obj_align+0xfc>
   1bca8:	8a8d      	ldrh	r5, [r1, #20]
   1bcaa:	3501      	adds	r5, #1
   1bcac:	e7a1      	b.n	1bbf2 <lv_obj_align+0x17e>
   1bcae:	8a8d      	ldrh	r5, [r1, #20]
   1bcb0:	3501      	adds	r5, #1
   1bcb2:	e785      	b.n	1bbc0 <lv_obj_align+0x14c>

0001bcb4 <lv_obj_get_width>:
   1bcb4:	8a83      	ldrh	r3, [r0, #20]
   1bcb6:	8a00      	ldrh	r0, [r0, #16]
   1bcb8:	3301      	adds	r3, #1
   1bcba:	1a18      	subs	r0, r3, r0
}
   1bcbc:	b200      	sxth	r0, r0
   1bcbe:	4770      	bx	lr

0001bcc0 <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1bcc0:	8ac3      	ldrh	r3, [r0, #22]
   1bcc2:	8a40      	ldrh	r0, [r0, #18]
   1bcc4:	3301      	adds	r3, #1
   1bcc6:	1a18      	subs	r0, r3, r0
}
   1bcc8:	b200      	sxth	r0, r0
   1bcca:	4770      	bx	lr

0001bccc <lv_obj_get_base_dir>:
}
   1bccc:	2000      	movs	r0, #0
   1bcce:	4770      	bx	lr

0001bcd0 <lv_obj_get_opa_scale>:
    while(parent) {
   1bcd0:	b908      	cbnz	r0, 1bcd6 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
   1bcd2:	20ff      	movs	r0, #255	; 0xff
}
   1bcd4:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
   1bcd6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1bcda:	065b      	lsls	r3, r3, #25
   1bcdc:	d502      	bpl.n	1bce4 <lv_obj_get_opa_scale+0x14>
   1bcde:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
   1bce2:	4770      	bx	lr
    return obj->par;
   1bce4:	6800      	ldr	r0, [r0, #0]
   1bce6:	e7f3      	b.n	1bcd0 <lv_obj_get_opa_scale>

0001bce8 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
   1bce8:	2a02      	cmp	r2, #2
{
   1bcea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bcec:	4604      	mov	r4, r0
   1bcee:	460d      	mov	r5, r1
    if(mode == LV_DESIGN_COVER_CHK) {
   1bcf0:	d13d      	bne.n	1bd6e <lv_obj_design+0x86>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
   1bcf2:	f100 0610 	add.w	r6, r0, #16
   1bcf6:	4631      	mov	r1, r6
   1bcf8:	4628      	mov	r0, r5
   1bcfa:	f001 fa0e 	bl	1d11a <lv_area_is_in>
   1bcfe:	b398      	cbz	r0, 1bd68 <lv_obj_design+0x80>
        const lv_style_t * style = lv_obj_get_style(obj);
   1bd00:	4620      	mov	r0, r4
   1bd02:	f7f8 f8e1 	bl	13ec8 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
   1bd06:	7b83      	ldrb	r3, [r0, #14]
   1bd08:	2bfa      	cmp	r3, #250	; 0xfa
   1bd0a:	d92d      	bls.n	1bd68 <lv_obj_design+0x80>
        lv_coord_t r = style->body.radius;
   1bd0c:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
        if(r == LV_RADIUS_CIRCLE) return false;
   1bd10:	f647 4318 	movw	r3, #31768	; 0x7c18
   1bd14:	429c      	cmp	r4, r3
   1bd16:	d027      	beq.n	1bd68 <lv_obj_design+0x80>
    memcpy(dest, src, sizeof(lv_area_t));
   1bd18:	4631      	mov	r1, r6
   1bd1a:	2208      	movs	r2, #8
   1bd1c:	4668      	mov	r0, sp
   1bd1e:	f7fc ff8c 	bl	18c3a <memcpy>
        area_tmp.x1 += r;
   1bd22:	f8bd 3000 	ldrh.w	r3, [sp]
   1bd26:	4423      	add	r3, r4
   1bd28:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
   1bd2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   1bd30:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
   1bd32:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   1bd34:	4628      	mov	r0, r5
        area_tmp.x2 -= r;
   1bd36:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   1bd3a:	f001 f9ee 	bl	1d11a <lv_area_is_in>
   1bd3e:	b198      	cbz	r0, 1bd68 <lv_obj_design+0x80>
   1bd40:	4631      	mov	r1, r6
   1bd42:	2208      	movs	r2, #8
   1bd44:	4668      	mov	r0, sp
   1bd46:	f7fc ff78 	bl	18c3a <memcpy>
        area_tmp.y1 += r;
   1bd4a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1bd4e:	4423      	add	r3, r4
   1bd50:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
   1bd54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   1bd58:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
   1bd5a:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   1bd5c:	4628      	mov	r0, r5
        area_tmp.y2 -= r;
   1bd5e:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
   1bd62:	f001 f9da 	bl	1d11a <lv_area_is_in>
   1bd66:	b900      	cbnz	r0, 1bd6a <lv_obj_design+0x82>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
   1bd68:	2000      	movs	r0, #0
}
   1bd6a:	b002      	add	sp, #8
   1bd6c:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
   1bd6e:	b95a      	cbnz	r2, 1bd88 <lv_obj_design+0xa0>
        const lv_style_t * style = lv_obj_get_style(obj);
   1bd70:	f7f8 f8aa 	bl	13ec8 <lv_obj_get_style>
   1bd74:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
   1bd76:	4620      	mov	r0, r4
   1bd78:	f7ff ffaa 	bl	1bcd0 <lv_obj_get_opa_scale>
   1bd7c:	4629      	mov	r1, r5
   1bd7e:	4603      	mov	r3, r0
   1bd80:	f104 0010 	add.w	r0, r4, #16
   1bd84:	f000 fa40 	bl	1c208 <lv_draw_rect>
    return true;
   1bd88:	2001      	movs	r0, #1
   1bd8a:	e7ee      	b.n	1bd6a <lv_obj_design+0x82>

0001bd8c <lv_obj_get_signal_cb>:
}
   1bd8c:	69c0      	ldr	r0, [r0, #28]
   1bd8e:	4770      	bx	lr

0001bd90 <lv_obj_get_ext_attr>:
}
   1bd90:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1bd92:	4770      	bx	lr

0001bd94 <lv_obj_handle_get_type_signal>:
{
   1bd94:	b510      	push	{r4, lr}
   1bd96:	2300      	movs	r3, #0
        if(buf->type[i] == NULL) break;
   1bd98:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1bd9c:	b2da      	uxtb	r2, r3
   1bd9e:	b11c      	cbz	r4, 1bda8 <lv_obj_handle_get_type_signal+0x14>
   1bda0:	3301      	adds	r3, #1
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
   1bda2:	2b07      	cmp	r3, #7
   1bda4:	d1f8      	bne.n	1bd98 <lv_obj_handle_get_type_signal+0x4>
   1bda6:	461a      	mov	r2, r3
    buf->type[i] = name;
   1bda8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   1bdac:	2001      	movs	r0, #1
   1bdae:	bd10      	pop	{r4, pc}

0001bdb0 <lv_refr_get_top_obj>:
{
   1bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdb2:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
   1bdb4:	3110      	adds	r1, #16
{
   1bdb6:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
   1bdb8:	f001 f9af 	bl	1d11a <lv_area_is_in>
   1bdbc:	b908      	cbnz	r0, 1bdc2 <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
   1bdbe:	2000      	movs	r0, #0
}
   1bdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
   1bdc2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1bdc6:	06db      	lsls	r3, r3, #27
   1bdc8:	d4f9      	bmi.n	1bdbe <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
   1bdca:	1d27      	adds	r7, r4, #4
   1bdcc:	4638      	mov	r0, r7
   1bdce:	f001 fa4a 	bl	1d266 <lv_ll_get_head>
   1bdd2:	4605      	mov	r5, r0
   1bdd4:	b998      	cbnz	r0, 1bdfe <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
   1bdd6:	4620      	mov	r0, r4
   1bdd8:	f7f8 f876 	bl	13ec8 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
   1bddc:	7b83      	ldrb	r3, [r0, #14]
   1bdde:	2bff      	cmp	r3, #255	; 0xff
   1bde0:	d1ed      	bne.n	1bdbe <lv_refr_get_top_obj+0xe>
   1bde2:	6a23      	ldr	r3, [r4, #32]
   1bde4:	2202      	movs	r2, #2
   1bde6:	4631      	mov	r1, r6
   1bde8:	4620      	mov	r0, r4
   1bdea:	4798      	blx	r3
   1bdec:	2800      	cmp	r0, #0
   1bdee:	d0e6      	beq.n	1bdbe <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
   1bdf0:	4620      	mov	r0, r4
   1bdf2:	f7ff ff6d 	bl	1bcd0 <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
   1bdf6:	28ff      	cmp	r0, #255	; 0xff
   1bdf8:	d1e1      	bne.n	1bdbe <lv_refr_get_top_obj+0xe>
   1bdfa:	4620      	mov	r0, r4
    return found_p;
   1bdfc:	e7e0      	b.n	1bdc0 <lv_refr_get_top_obj+0x10>
            found_p = lv_refr_get_top_obj(area_p, i);
   1bdfe:	4629      	mov	r1, r5
   1be00:	4630      	mov	r0, r6
   1be02:	f7ff ffd5 	bl	1bdb0 <lv_refr_get_top_obj>
            if(found_p != NULL) {
   1be06:	2800      	cmp	r0, #0
   1be08:	d1da      	bne.n	1bdc0 <lv_refr_get_top_obj+0x10>
        LV_LL_READ(obj->child_ll, i)
   1be0a:	4629      	mov	r1, r5
   1be0c:	4638      	mov	r0, r7
   1be0e:	f001 fa30 	bl	1d272 <lv_ll_get_next>
   1be12:	e7de      	b.n	1bdd2 <lv_refr_get_top_obj+0x22>

0001be14 <lv_refr_obj>:
{
   1be14:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
   1be16:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
   1be1a:	f016 0610 	ands.w	r6, r6, #16
{
   1be1e:	b08b      	sub	sp, #44	; 0x2c
   1be20:	4604      	mov	r4, r0
   1be22:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
   1be24:	d138      	bne.n	1be98 <lv_refr_obj+0x84>
    lv_obj_get_coords(obj, &obj_area);
   1be26:	a904      	add	r1, sp, #16
    lv_coord_t ext_size = obj->ext_draw_pad;
   1be28:	f9b0 5030 	ldrsh.w	r5, [r0, #48]	; 0x30
    lv_obj_get_coords(obj, &obj_area);
   1be2c:	f7ff fe0b 	bl	1ba46 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
   1be30:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1be34:	1b5b      	subs	r3, r3, r5
   1be36:	f8ad 3010 	strh.w	r3, [sp, #16]
    obj_area.y1 -= ext_size;
   1be3a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1be3e:	1b5b      	subs	r3, r3, r5
   1be40:	f8ad 3012 	strh.w	r3, [sp, #18]
    obj_area.x2 += ext_size;
   1be44:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1be48:	442b      	add	r3, r5
   1be4a:	f8ad 3014 	strh.w	r3, [sp, #20]
    obj_area.y2 += ext_size;
   1be4e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   1be52:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
   1be54:	441d      	add	r5, r3
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   1be56:	4639      	mov	r1, r7
   1be58:	a802      	add	r0, sp, #8
    obj_area.y2 += ext_size;
   1be5a:	f8ad 5016 	strh.w	r5, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   1be5e:	f001 f8f3 	bl	1d048 <lv_area_intersect>
    if(union_ok != false) {
   1be62:	b1c8      	cbz	r0, 1be98 <lv_refr_obj+0x84>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
   1be64:	4632      	mov	r2, r6
   1be66:	6a23      	ldr	r3, [r4, #32]
   1be68:	a902      	add	r1, sp, #8
   1be6a:	4620      	mov	r0, r4
   1be6c:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
   1be6e:	a904      	add	r1, sp, #16
   1be70:	4620      	mov	r0, r4
   1be72:	f7ff fde8 	bl	1ba46 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
   1be76:	aa04      	add	r2, sp, #16
   1be78:	4639      	mov	r1, r7
   1be7a:	4668      	mov	r0, sp
   1be7c:	f001 f8e4 	bl	1d048 <lv_area_intersect>
        if(union_ok != false) {
   1be80:	b128      	cbz	r0, 1be8e <lv_refr_obj+0x7a>
            LV_LL_READ_BACK(obj->child_ll, child_p)
   1be82:	1d26      	adds	r6, r4, #4
   1be84:	4630      	mov	r0, r6
   1be86:	f001 f9f1 	bl	1d26c <lv_ll_get_tail>
   1be8a:	4605      	mov	r5, r0
   1be8c:	b930      	cbnz	r0, 1be9c <lv_refr_obj+0x88>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
   1be8e:	6a23      	ldr	r3, [r4, #32]
   1be90:	2201      	movs	r2, #1
   1be92:	a902      	add	r1, sp, #8
   1be94:	4620      	mov	r0, r4
   1be96:	4798      	blx	r3
}
   1be98:	b00b      	add	sp, #44	; 0x2c
   1be9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
   1be9c:	a908      	add	r1, sp, #32
   1be9e:	4628      	mov	r0, r5
   1bea0:	f7ff fdd1 	bl	1ba46 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
   1bea4:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
                child_area.x1 -= ext_size;
   1bea8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1beac:	1ad2      	subs	r2, r2, r3
   1beae:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
   1beb2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1beb6:	1ad2      	subs	r2, r2, r3
   1beb8:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
   1bebc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1bec0:	441a      	add	r2, r3
   1bec2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
   1bec6:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
   1beca:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
   1becc:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
   1bece:	a806      	add	r0, sp, #24
   1bed0:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
   1bed2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
   1bed6:	f001 f8b7 	bl	1d048 <lv_area_intersect>
                if(union_ok) {
   1beda:	b118      	cbz	r0, 1bee4 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
   1bedc:	a906      	add	r1, sp, #24
   1bede:	4628      	mov	r0, r5
   1bee0:	f7ff ff98 	bl	1be14 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
   1bee4:	4629      	mov	r1, r5
   1bee6:	4630      	mov	r0, r6
   1bee8:	f001 f9d3 	bl	1d292 <lv_ll_get_prev>
   1beec:	e7cd      	b.n	1be8a <lv_refr_obj+0x76>

0001beee <lv_refr_init>:
}
   1beee:	4770      	bx	lr

0001bef0 <lv_inv_area>:
{
   1bef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bef2:	460d      	mov	r5, r1
   1bef4:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
   1bef6:	4604      	mov	r4, r0
   1bef8:	b920      	cbnz	r0, 1bf04 <lv_inv_area+0x14>
   1befa:	f7f9 fb5f 	bl	155bc <lv_disp_get_default>
    if(!disp) return;
   1befe:	4604      	mov	r4, r0
   1bf00:	2800      	cmp	r0, #0
   1bf02:	d043      	beq.n	1bf8c <lv_inv_area+0x9c>
    if(area_p == NULL) {
   1bf04:	b935      	cbnz	r5, 1bf14 <lv_inv_area+0x24>
        disp->inv_p = 0;
   1bf06:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
   1bf0a:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
   1bf0e:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
   1bf12:	e03b      	b.n	1bf8c <lv_inv_area+0x9c>
    scr_area.x1 = 0;
   1bf14:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   1bf16:	4620      	mov	r0, r4
    scr_area.x1 = 0;
   1bf18:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   1bf1a:	f7f9 fb55 	bl	155c8 <lv_disp_get_hor_res>
   1bf1e:	3801      	subs	r0, #1
   1bf20:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
   1bf24:	4620      	mov	r0, r4
   1bf26:	f7f9 fb5f 	bl	155e8 <lv_disp_get_ver_res>
   1bf2a:	3801      	subs	r0, #1
   1bf2c:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
   1bf30:	466a      	mov	r2, sp
   1bf32:	4629      	mov	r1, r5
   1bf34:	a802      	add	r0, sp, #8
   1bf36:	f001 f887 	bl	1d048 <lv_area_intersect>
    if(suc != false) {
   1bf3a:	b338      	cbz	r0, 1bf8c <lv_inv_area+0x9c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
   1bf3c:	6923      	ldr	r3, [r4, #16]
   1bf3e:	b113      	cbz	r3, 1bf46 <lv_inv_area+0x56>
   1bf40:	a902      	add	r1, sp, #8
   1bf42:	4620      	mov	r0, r4
   1bf44:	4798      	blx	r3
   1bf46:	f104 0540 	add.w	r5, r4, #64	; 0x40
{
   1bf4a:	2600      	movs	r6, #0
   1bf4c:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
   1bf4e:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
   1bf52:	b2b2      	uxth	r2, r6
   1bf54:	f3c3 0009 	ubfx	r0, r3, #0, #10
   1bf58:	4290      	cmp	r0, r2
   1bf5a:	d80f      	bhi.n	1bf7c <lv_inv_area+0x8c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
   1bf5c:	281f      	cmp	r0, #31
   1bf5e:	d817      	bhi.n	1bf90 <lv_inv_area+0xa0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
   1bf60:	3008      	adds	r0, #8
   1bf62:	2208      	movs	r2, #8
   1bf64:	eb0d 0102 	add.w	r1, sp, r2
   1bf68:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   1bf6c:	f7fc fe65 	bl	18c3a <memcpy>
        disp->inv_p++;
   1bf70:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
   1bf74:	1c5a      	adds	r2, r3, #1
   1bf76:	f362 0309 	bfi	r3, r2, #0, #10
   1bf7a:	e7c8      	b.n	1bf0e <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
   1bf7c:	4629      	mov	r1, r5
   1bf7e:	a802      	add	r0, sp, #8
   1bf80:	f001 f8cb 	bl	1d11a <lv_area_is_in>
   1bf84:	3601      	adds	r6, #1
   1bf86:	3508      	adds	r5, #8
   1bf88:	2800      	cmp	r0, #0
   1bf8a:	d0e0      	beq.n	1bf4e <lv_inv_area+0x5e>
}
   1bf8c:	b005      	add	sp, #20
   1bf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
   1bf90:	f36f 0309 	bfc	r3, #0, #10
   1bf94:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
   1bf98:	2208      	movs	r2, #8
   1bf9a:	4669      	mov	r1, sp
   1bf9c:	4638      	mov	r0, r7
   1bf9e:	e7e5      	b.n	1bf6c <lv_inv_area+0x7c>

0001bfa0 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
   1bfa0:	2250      	movs	r2, #80	; 0x50
   1bfa2:	f7fc be4a 	b.w	18c3a <memcpy>

0001bfa6 <lv_color_mix.isra.0>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
   1bfa6:	b530      	push	{r4, r5, lr}
   1bfa8:	f89d 5014 	ldrb.w	r5, [sp, #20]
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1bfac:	b2ac      	uxth	r4, r5
   1bfae:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
   1bfb2:	436b      	muls	r3, r5
   1bfb4:	fb00 3304 	mla	r3, r0, r4, r3
   1bfb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   1bfbc:	2000      	movs	r0, #0
   1bfbe:	f363 0007 	bfi	r0, r3, #0, #8
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   1bfc2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1bfc6:	fb13 f305 	smulbb	r3, r3, r5
   1bfca:	fb01 3104 	mla	r1, r1, r4, r3
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1bfce:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1bfd2:	fb13 f505 	smulbb	r5, r3, r5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   1bfd6:	f3c1 2107 	ubfx	r1, r1, #8, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1bfda:	fb02 5204 	mla	r2, r2, r4, r5
    return ret;
   1bfde:	f361 200f 	bfi	r0, r1, #8, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1bfe2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
   1bfe6:	f362 4017 	bfi	r0, r2, #16, #8
}
   1bfea:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
   1bfee:	bd30      	pop	{r4, r5, pc}

0001bff0 <lv_draw_fill>:
{
   1bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
   1bff4:	2b0f      	cmp	r3, #15
{
   1bff6:	b08d      	sub	sp, #52	; 0x34
   1bff8:	4616      	mov	r6, r2
   1bffa:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
   1bffc:	d973      	bls.n	1c0e6 <lv_draw_fill+0xf6>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   1bffe:	2bfc      	cmp	r3, #252	; 0xfc
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
   1c000:	460a      	mov	r2, r1
   1c002:	4601      	mov	r1, r0
   1c004:	a80a      	add	r0, sp, #40	; 0x28
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   1c006:	bf28      	it	cs
   1c008:	27ff      	movcs	r7, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
   1c00a:	f001 f81d 	bl	1d048 <lv_area_intersect>
    if(union_ok == false) {
   1c00e:	2800      	cmp	r0, #0
   1c010:	d069      	beq.n	1c0e6 <lv_draw_fill+0xf6>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
   1c012:	f7f8 f813 	bl	1403c <lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c016:	f000 ffba 	bl	1cf8e <lv_disp_get_buf>
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
   1c01a:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   1c01e:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
   1c022:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   1c026:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
   1c02a:	f8d0 a008 	ldr.w	sl, [r0, #8]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
   1c02e:	1b49      	subs	r1, r1, r5
   1c030:	fa0f fb81 	sxth.w	fp, r1
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
   1c034:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1c038:	1ac9      	subs	r1, r1, r3
   1c03a:	b20a      	sxth	r2, r1
   1c03c:	9204      	str	r2, [sp, #16]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
   1c03e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1c042:	1b52      	subs	r2, r2, r5
   1c044:	8a85      	ldrh	r5, [r0, #20]
   1c046:	3501      	adds	r5, #1
   1c048:	1aed      	subs	r5, r5, r3
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
   1c04a:	1ae4      	subs	r4, r4, r3
   1c04c:	b22b      	sxth	r3, r5
   1c04e:	9309      	str	r3, [sp, #36]	; 0x24
   1c050:	b2f3      	uxtb	r3, r6
   1c052:	9305      	str	r3, [sp, #20]
   1c054:	f3c6 2307 	ubfx	r3, r6, #8, #8
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
   1c058:	b212      	sxth	r2, r2
   1c05a:	9306      	str	r3, [sp, #24]
   1c05c:	f3c6 4307 	ubfx	r3, r6, #16, #8
   1c060:	9307      	str	r3, [sp, #28]
   1c062:	9208      	str	r2, [sp, #32]
{
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
   1c064:	f7f7 ffea 	bl	1403c <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
   1c068:	6943      	ldr	r3, [r0, #20]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
   1c06a:	b224      	sxth	r4, r4
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
   1c06c:	4681      	mov	r9, r0
    if(disp->driver.set_px_cb) {
   1c06e:	2b00      	cmp	r3, #0
   1c070:	d136      	bne.n	1c0e0 <lv_draw_fill+0xf0>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
            }
        }
    } else {
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
   1c072:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c074:	fb0b f202 	mul.w	r2, fp, r2
   1c078:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2

        /*Run simpler function without opacity*/
        if(opa == LV_OPA_COVER) {
   1c07c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c07e:	2fff      	cmp	r7, #255	; 0xff
   1c080:	ea4f 0582 	mov.w	r5, r2, lsl #2
   1c084:	d05c      	beq.n	1c140 <lv_draw_fill+0x150>
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            scr_transp = disp->driver.screen_transp;
#endif

            lv_color_t bg_tmp  = LV_COLOR_BLACK;
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
   1c086:	e9cd 3701 	strd	r3, r7, [sp, #4]
   1c08a:	9300      	str	r3, [sp, #0]
   1c08c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1c090:	9805      	ldr	r0, [sp, #20]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
   1c092:	f04f 487f 	mov.w	r8, #4278190080	; 0xff000000
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
   1c096:	f7ff ff86 	bl	1bfa6 <lv_color_mix.isra.0>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   1c09a:	9b08      	ldr	r3, [sp, #32]
   1c09c:	455b      	cmp	r3, fp
   1c09e:	db22      	blt.n	1c0e6 <lv_draw_fill+0xf6>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
   1c0a0:	4626      	mov	r6, r4
   1c0a2:	e068      	b.n	1c176 <lv_draw_fill+0x186>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
   1c0a4:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1c0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c0aa:	f8cd 8000 	str.w	r8, [sp]
   1c0ae:	461d      	mov	r5, r3
   1c0b0:	9b05      	ldr	r3, [sp, #20]
   1c0b2:	f363 0607 	bfi	r6, r3, #0, #8
   1c0b6:	9b06      	ldr	r3, [sp, #24]
   1c0b8:	f363 260f 	bfi	r6, r3, #8, #8
   1c0bc:	9b07      	ldr	r3, [sp, #28]
   1c0be:	f363 4617 	bfi	r6, r3, #16, #8
   1c0c2:	e9cd 6701 	strd	r6, r7, [sp, #4]
   1c0c6:	4623      	mov	r3, r4
   1c0c8:	4651      	mov	r1, sl
   1c0ca:	4648      	mov	r0, r9
   1c0cc:	47a8      	blx	r5
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   1c0ce:	f108 0801 	add.w	r8, r8, #1
   1c0d2:	fa0f f888 	sxth.w	r8, r8
   1c0d6:	9b08      	ldr	r3, [sp, #32]
   1c0d8:	4543      	cmp	r3, r8
   1c0da:	dae3      	bge.n	1c0a4 <lv_draw_fill+0xb4>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
   1c0dc:	3401      	adds	r4, #1
   1c0de:	b224      	sxth	r4, r4
   1c0e0:	9b04      	ldr	r3, [sp, #16]
   1c0e2:	42a3      	cmp	r3, r4
   1c0e4:	da02      	bge.n	1c0ec <lv_draw_fill+0xfc>
}
   1c0e6:	b00d      	add	sp, #52	; 0x34
   1c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   1c0ec:	46d8      	mov	r8, fp
   1c0ee:	e7f2      	b.n	1c0d6 <lv_draw_fill+0xe6>
                mem[col] = color;
   1c0f0:	9a05      	ldr	r2, [sp, #20]
   1c0f2:	f362 0607 	bfi	r6, r2, #0, #8
   1c0f6:	9a06      	ldr	r2, [sp, #24]
   1c0f8:	f362 260f 	bfi	r6, r2, #8, #8
   1c0fc:	9a07      	ldr	r2, [sp, #28]
   1c0fe:	f362 4617 	bfi	r6, r2, #16, #8
   1c102:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
   1c106:	3301      	adds	r3, #1
   1c108:	b21b      	sxth	r3, r3
   1c10a:	9a04      	ldr	r2, [sp, #16]
   1c10c:	429a      	cmp	r2, r3
   1c10e:	daef      	bge.n	1c0f0 <lv_draw_fill+0x100>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
   1c110:	3201      	adds	r2, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
   1c112:	00a3      	lsls	r3, r4, #2
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
   1c114:	1b14      	subs	r4, r2, r4
            lv_color_t * mem_first = &mem[fill_area->x1];
   1c116:	eb0a 0603 	add.w	r6, sl, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
   1c11a:	00a4      	lsls	r4, r4, #2
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
   1c11c:	f10b 0701 	add.w	r7, fp, #1
   1c120:	442b      	add	r3, r5
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
   1c122:	b224      	sxth	r4, r4
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
   1c124:	b23f      	sxth	r7, r7
   1c126:	449a      	add	sl, r3
   1c128:	9b08      	ldr	r3, [sp, #32]
   1c12a:	42bb      	cmp	r3, r7
   1c12c:	dbdb      	blt.n	1c0e6 <lv_draw_fill+0xf6>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
   1c12e:	4650      	mov	r0, sl
   1c130:	4622      	mov	r2, r4
   1c132:	4631      	mov	r1, r6
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
   1c134:	3701      	adds	r7, #1
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
   1c136:	f7fc fd80 	bl	18c3a <memcpy>
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
   1c13a:	b23f      	sxth	r7, r7
   1c13c:	44aa      	add	sl, r5
   1c13e:	e7f3      	b.n	1c128 <lv_draw_fill+0x138>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
   1c140:	4623      	mov	r3, r4
   1c142:	e7e2      	b.n	1c10a <lv_draw_fill+0x11a>
                    if(scr_transp == false) {
                        /*If the bg color changed recalculate the result color*/
                        if(mem[col].full != bg_tmp.full) {
   1c144:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1c148:	4543      	cmp	r3, r8
   1c14a:	eb0a 0986 	add.w	r9, sl, r6, lsl #2
   1c14e:	d00e      	beq.n	1c16e <lv_draw_fill+0x17e>
                            bg_tmp  = mem[col];
   1c150:	4698      	mov	r8, r3
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
   1c152:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1c156:	9301      	str	r3, [sp, #4]
   1c158:	f3c8 2307 	ubfx	r3, r8, #8, #8
   1c15c:	9300      	str	r3, [sp, #0]
   1c15e:	9702      	str	r7, [sp, #8]
   1c160:	fa5f f388 	uxtb.w	r3, r8
   1c164:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1c168:	9805      	ldr	r0, [sp, #20]
   1c16a:	f7ff ff1c 	bl	1bfa6 <lv_color_mix.isra.0>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
   1c16e:	3601      	adds	r6, #1
                        }

                        mem[col] = opa_tmp;
   1c170:	f8c9 0000 	str.w	r0, [r9]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
   1c174:	b236      	sxth	r6, r6
   1c176:	9b04      	ldr	r3, [sp, #16]
   1c178:	42b3      	cmp	r3, r6
   1c17a:	dae3      	bge.n	1c144 <lv_draw_fill+0x154>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   1c17c:	f10b 0301 	add.w	r3, fp, #1
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
                        mem[col] = color_mix_2_alpha(mem[col], mem[col].ch.alpha, color, opa);
#endif
                    }
                }
                mem += mem_width;
   1c180:	44aa      	add	sl, r5
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
   1c182:	fa0f fb83 	sxth.w	fp, r3
   1c186:	e788      	b.n	1c09a <lv_draw_fill+0xaa>

0001c188 <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
   1c188:	b570      	push	{r4, r5, r6, lr}
   1c18a:	460e      	mov	r6, r1
   1c18c:	4604      	mov	r4, r0
   1c18e:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c190:	f7f7 ff54 	bl	1403c <lv_refr_get_disp_refreshing>
   1c194:	f000 fef3 	bl	1cf7e <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
   1c198:	1071      	asrs	r1, r6, #1
   1c19a:	428c      	cmp	r4, r1
   1c19c:	db03      	blt.n	1c1a6 <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
   1c19e:	b28c      	uxth	r4, r1
        if(r != 0) r--;
   1c1a0:	b10c      	cbz	r4, 1c1a6 <lv_draw_cont_radius_corr+0x1e>
   1c1a2:	3c01      	subs	r4, #1
   1c1a4:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
   1c1a6:	106a      	asrs	r2, r5, #1
   1c1a8:	4294      	cmp	r4, r2
   1c1aa:	db03      	blt.n	1c1b4 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
   1c1ac:	b294      	uxth	r4, r2
        if(r != 0) r--;
   1c1ae:	b124      	cbz	r4, 1c1ba <lv_draw_cont_radius_corr+0x32>
   1c1b0:	3c01      	subs	r4, #1
   1c1b2:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
   1c1b4:	b10c      	cbz	r4, 1c1ba <lv_draw_cont_radius_corr+0x32>
   1c1b6:	1a24      	subs	r4, r4, r0
   1c1b8:	b2a4      	uxth	r4, r4

    return r;
}
   1c1ba:	4620      	mov	r0, r4
   1c1bc:	bd70      	pop	{r4, r5, r6, pc}

0001c1be <lv_color_mix.isra.0>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
   1c1be:	b530      	push	{r4, r5, lr}
   1c1c0:	f89d 5014 	ldrb.w	r5, [sp, #20]
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1c1c4:	b2ac      	uxth	r4, r5
   1c1c6:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
   1c1ca:	436b      	muls	r3, r5
   1c1cc:	fb00 3304 	mla	r3, r0, r4, r3
   1c1d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   1c1d4:	2000      	movs	r0, #0
   1c1d6:	f363 0007 	bfi	r0, r3, #0, #8
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   1c1da:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c1de:	fb13 f305 	smulbb	r3, r3, r5
   1c1e2:	fb01 3104 	mla	r1, r1, r4, r3
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1c1e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1c1ea:	fb13 f505 	smulbb	r5, r3, r5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
   1c1ee:	f3c1 2107 	ubfx	r1, r1, #8, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1c1f2:	fb02 5204 	mla	r2, r2, r4, r5
    return ret;
   1c1f6:	f361 200f 	bfi	r0, r1, #8, #8
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
   1c1fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
   1c1fe:	f362 4017 	bfi	r0, r2, #16, #8
}
   1c202:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
   1c206:	bd30      	pop	{r4, r5, pc}

0001c208 <lv_draw_rect>:
{
   1c208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c20c:	b09d      	sub	sp, #116	; 0x74
   1c20e:	e9cd 1205 	strd	r1, r2, [sp, #20]
   1c212:	9307      	str	r3, [sp, #28]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c214:	88c3      	ldrh	r3, [r0, #6]
   1c216:	8842      	ldrh	r2, [r0, #2]
   1c218:	3301      	adds	r3, #1
   1c21a:	1a9b      	subs	r3, r3, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   1c21c:	b21b      	sxth	r3, r3
   1c21e:	2b00      	cmp	r3, #0
{
   1c220:	4681      	mov	r9, r0
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   1c222:	f340 8236 	ble.w	1c692 <lv_draw_rect+0x48a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c226:	8883      	ldrh	r3, [r0, #4]
   1c228:	8802      	ldrh	r2, [r0, #0]
   1c22a:	3301      	adds	r3, #1
   1c22c:	1a9b      	subs	r3, r3, r2
   1c22e:	b21b      	sxth	r3, r3
   1c230:	2b00      	cmp	r3, #0
   1c232:	f340 822e 	ble.w	1c692 <lv_draw_rect+0x48a>
    if(lv_area_is_on(coords, mask) == false) return;
   1c236:	f000 ff53 	bl	1d0e0 <lv_area_is_on>
   1c23a:	2800      	cmp	r0, #0
   1c23c:	f000 8229 	beq.w	1c692 <lv_draw_rect+0x48a>
    if(style->body.opa > LV_OPA_MIN) {
   1c240:	9b06      	ldr	r3, [sp, #24]
   1c242:	7b9b      	ldrb	r3, [r3, #14]
   1c244:	2b10      	cmp	r3, #16
   1c246:	f240 80fd 	bls.w	1c444 <lv_draw_rect+0x23c>
    uint16_t radius = style->body.radius;
   1c24a:	9b06      	ldr	r3, [sp, #24]
   1c24c:	899d      	ldrh	r5, [r3, #12]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c24e:	f7f7 fef5 	bl	1403c <lv_refr_get_disp_refreshing>
   1c252:	f000 fe94 	bl	1cf7e <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
   1c256:	9b06      	ldr	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c258:	f8b9 6006 	ldrh.w	r6, [r9, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c25c:	f8b9 1004 	ldrh.w	r1, [r9, #4]
    lv_color_t gcolor = style->body.grad_color;
   1c260:	e9d3 8a01 	ldrd	r8, sl, [r3, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c264:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1c268:	3601      	adds	r6, #1
   1c26a:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c26c:	f8b9 3000 	ldrh.w	r3, [r9]
   1c270:	3101      	adds	r1, #1
   1c272:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
   1c274:	9b07      	ldr	r3, [sp, #28]
   1c276:	2bff      	cmp	r3, #255	; 0xff
   1c278:	9b06      	ldr	r3, [sp, #24]
   1c27a:	7b9f      	ldrb	r7, [r3, #14]
   1c27c:	bf18      	it	ne
   1c27e:	9b07      	ldrne	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c280:	b236      	sxth	r6, r6
   1c282:	bf18      	it	ne
   1c284:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c286:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c288:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c28a:	4632      	mov	r2, r6
   1c28c:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
   1c28e:	bf18      	it	ne
   1c290:	0a3f      	lsrne	r7, r7, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c292:	f7ff ff79 	bl	1c188 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
   1c296:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
   1c29a:	ebb0 0f63 	cmp.w	r0, r3, asr #1
   1c29e:	f340 81fb 	ble.w	1c698 <lv_draw_rect+0x490>
        if(style->body.radius != 0) {
   1c2a2:	9b06      	ldr	r3, [sp, #24]
   1c2a4:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
   1c2a8:	2f00      	cmp	r7, #0
   1c2aa:	f000 80cb 	beq.w	1c444 <lv_draw_rect+0x23c>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c2ae:	f7f7 fec5 	bl	1403c <lv_refr_get_disp_refreshing>
   1c2b2:	f000 fe64 	bl	1cf7e <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
   1c2b6:	9b06      	ldr	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c2b8:	f8b9 a006 	ldrh.w	sl, [r9, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c2bc:	f8b9 1004 	ldrh.w	r1, [r9, #4]
    lv_color_t gcolor = style->body.grad_color;
   1c2c0:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
   1c2c4:	9b07      	ldr	r3, [sp, #28]
   1c2c6:	2bff      	cmp	r3, #255	; 0xff
   1c2c8:	9b06      	ldr	r3, [sp, #24]
   1c2ca:	7b9e      	ldrb	r6, [r3, #14]
   1c2cc:	bf1c      	itt	ne
   1c2ce:	9b07      	ldrne	r3, [sp, #28]
   1c2d0:	435e      	mulne	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c2d2:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1c2d6:	f10a 0a01 	add.w	sl, sl, #1
   1c2da:	ebaa 0a03 	sub.w	sl, sl, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c2de:	f8b9 3000 	ldrh.w	r3, [r9]
   1c2e2:	f101 0101 	add.w	r1, r1, #1
   1c2e6:	eba1 0103 	sub.w	r1, r1, r3
    uint16_t radius = style->body.radius;
   1c2ea:	b2bf      	uxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c2ec:	fa0f fa8a 	sxth.w	sl, sl
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c2f0:	4683      	mov	fp, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c2f2:	4652      	mov	r2, sl
   1c2f4:	b209      	sxth	r1, r1
   1c2f6:	4638      	mov	r0, r7
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
   1c2f8:	bf18      	it	ne
   1c2fa:	0a36      	lsrne	r6, r6, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c2fc:	f7ff ff44 	bl	1c188 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
   1c300:	f8b9 3000 	ldrh.w	r3, [r9]
   1c304:	fa0f f18b 	sxth.w	r1, fp
   1c308:	b202      	sxth	r2, r0
   1c30a:	440b      	add	r3, r1
   1c30c:	4413      	add	r3, r2
   1c30e:	fa0f f883 	sxth.w	r8, r3
    lt_origo.y = coords->y1 + radius + aa;
   1c312:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    rt_origo.x = coords->x2 - radius - aa;
   1c316:	f8b9 b004 	ldrh.w	fp, [r9, #4]
    lt_origo.y = coords->y1 + radius + aa;
   1c31a:	440b      	add	r3, r1
   1c31c:	4413      	add	r3, r2
   1c31e:	b21b      	sxth	r3, r3
   1c320:	9308      	str	r3, [sp, #32]
    lb_origo.y = coords->y2 - radius - aa;
   1c322:	f8b9 3006 	ldrh.w	r3, [r9, #6]
   1c326:	1a5b      	subs	r3, r3, r1
   1c328:	1a9b      	subs	r3, r3, r2
   1c32a:	b21b      	sxth	r3, r3
    rt_origo.x = coords->x2 - radius - aa;
   1c32c:	ebab 0b01 	sub.w	fp, fp, r1
    lv_circ_init(&cir, &cir_tmp, radius);
   1c330:	a813      	add	r0, sp, #76	; 0x4c
   1c332:	f10d 014a 	add.w	r1, sp, #74	; 0x4a
    rt_origo.x = coords->x2 - radius - aa;
   1c336:	ebab 0b02 	sub.w	fp, fp, r2
    lb_origo.y = coords->y2 - radius - aa;
   1c33a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir, &cir_tmp, radius);
   1c33c:	f000 fe4a 	bl	1cfd4 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
   1c340:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c342:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
   1c346:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
    rt_origo.x = coords->x2 - radius - aa;
   1c34a:	fa0f fb8b 	sxth.w	fp, fp
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
   1c34e:	441a      	add	r2, r3
   1c350:	b212      	sxth	r2, r2
   1c352:	eb0b 0301 	add.w	r3, fp, r1
   1c356:	eba8 0101 	sub.w	r1, r8, r1
   1c35a:	9200      	str	r2, [sp, #0]
   1c35c:	b21b      	sxth	r3, r3
   1c35e:	b209      	sxth	r1, r1
   1c360:	a818      	add	r0, sp, #96	; 0x60
   1c362:	f000 fe5c 	bl	1d01e <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
   1c366:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c368:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   1c36c:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
   1c370:	441a      	add	r2, r3
   1c372:	b212      	sxth	r2, r2
   1c374:	eb0b 0301 	add.w	r3, fp, r1
   1c378:	eba8 0101 	sub.w	r1, r8, r1
   1c37c:	9200      	str	r2, [sp, #0]
   1c37e:	b21b      	sxth	r3, r3
   1c380:	b209      	sxth	r1, r1
   1c382:	a81a      	add	r0, sp, #104	; 0x68
   1c384:	f000 fe4b 	bl	1d01e <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
   1c388:	9b08      	ldr	r3, [sp, #32]
   1c38a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
   1c38e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
   1c392:	1a9a      	subs	r2, r3, r2
   1c394:	b212      	sxth	r2, r2
   1c396:	eb0b 0301 	add.w	r3, fp, r1
   1c39a:	eba8 0101 	sub.w	r1, r8, r1
   1c39e:	9200      	str	r2, [sp, #0]
   1c3a0:	b21b      	sxth	r3, r3
   1c3a2:	b209      	sxth	r1, r1
   1c3a4:	a816      	add	r0, sp, #88	; 0x58
   1c3a6:	f000 fe3a 	bl	1d01e <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
   1c3aa:	9b08      	ldr	r3, [sp, #32]
   1c3ac:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   1c3b0:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
   1c3b4:	1a9a      	subs	r2, r3, r2
   1c3b6:	b212      	sxth	r2, r2
   1c3b8:	eb0b 0301 	add.w	r3, fp, r1
   1c3bc:	af14      	add	r7, sp, #80	; 0x50
   1c3be:	eba8 0101 	sub.w	r1, r8, r1
   1c3c2:	b21b      	sxth	r3, r3
   1c3c4:	9200      	str	r2, [sp, #0]
   1c3c6:	b209      	sxth	r1, r1
   1c3c8:	4638      	mov	r0, r7
   1c3ca:	f000 fe28 	bl	1d01e <lv_area_set>
    while(lv_circ_cont(&cir)) {
   1c3ce:	ab13      	add	r3, sp, #76	; 0x4c
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
   1c3d0:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
                act_color = lv_color_mix(mcolor, gcolor, mix);
   1c3d4:	b2eb      	uxtb	r3, r5
   1c3d6:	930a      	str	r3, [sp, #40]	; 0x28
    while(lv_circ_cont(&cir)) {
   1c3d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c3da:	f000 fe02 	bl	1cfe2 <lv_circ_cont>
   1c3de:	2800      	cmp	r0, #0
   1c3e0:	f040 81c3 	bne.w	1c76a <lv_draw_rect+0x562>
    if(mcolor.full == gcolor.full)
   1c3e4:	42ac      	cmp	r4, r5
   1c3e6:	f040 82bd 	bne.w	1c964 <lv_draw_rect+0x75c>
        act_color = mcolor;
   1c3ea:	4622      	mov	r2, r4
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
   1c3ec:	4633      	mov	r3, r6
   1c3ee:	9905      	ldr	r1, [sp, #20]
   1c3f0:	a814      	add	r0, sp, #80	; 0x50
   1c3f2:	f7ff fdfd 	bl	1bff0 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
   1c3f6:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   1c3fa:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
   1c3fe:	4293      	cmp	r3, r2
   1c400:	d008      	beq.n	1c414 <lv_draw_rect+0x20c>
        if(mcolor.full == gcolor.full)
   1c402:	42ac      	cmp	r4, r5
   1c404:	f040 82c9 	bne.w	1c99a <lv_draw_rect+0x792>
            act_color = mcolor;
   1c408:	4622      	mov	r2, r4
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
   1c40a:	4633      	mov	r3, r6
   1c40c:	9905      	ldr	r1, [sp, #20]
   1c40e:	a816      	add	r0, sp, #88	; 0x58
   1c410:	f7ff fdee 	bl	1bff0 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
   1c414:	42ac      	cmp	r4, r5
   1c416:	f040 82d9 	bne.w	1c9cc <lv_draw_rect+0x7c4>
        act_color = mcolor;
   1c41a:	4622      	mov	r2, r4
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
   1c41c:	4633      	mov	r3, r6
   1c41e:	9905      	ldr	r1, [sp, #20]
   1c420:	a818      	add	r0, sp, #96	; 0x60
   1c422:	f7ff fde5 	bl	1bff0 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
   1c426:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
   1c42a:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
   1c42e:	4293      	cmp	r3, r2
   1c430:	d008      	beq.n	1c444 <lv_draw_rect+0x23c>
        if(mcolor.full == gcolor.full)
   1c432:	42ac      	cmp	r4, r5
   1c434:	f040 82e5 	bne.w	1ca02 <lv_draw_rect+0x7fa>
            act_color = mcolor;
   1c438:	4622      	mov	r2, r4
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
   1c43a:	4633      	mov	r3, r6
   1c43c:	9905      	ldr	r1, [sp, #20]
   1c43e:	a81a      	add	r0, sp, #104	; 0x68
   1c440:	f7ff fdd6 	bl	1bff0 <lv_draw_fill>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
   1c444:	9b06      	ldr	r3, [sp, #24]
   1c446:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
   1c44a:	2b00      	cmp	r3, #0
   1c44c:	f000 8121 	beq.w	1c692 <lv_draw_rect+0x48a>
   1c450:	9b06      	ldr	r3, [sp, #24]
   1c452:	7d9b      	ldrb	r3, [r3, #22]
   1c454:	2b00      	cmp	r3, #0
   1c456:	f000 811c 	beq.w	1c692 <lv_draw_rect+0x48a>
   1c45a:	9b06      	ldr	r3, [sp, #24]
   1c45c:	7ddb      	ldrb	r3, [r3, #23]
   1c45e:	2b0f      	cmp	r3, #15
   1c460:	f240 8117 	bls.w	1c692 <lv_draw_rect+0x48a>
    uint16_t radius = style->body.radius;
   1c464:	9b06      	ldr	r3, [sp, #24]
   1c466:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c46a:	f7f7 fde7 	bl	1403c <lv_refr_get_disp_refreshing>
   1c46e:	f000 fd86 	bl	1cf7e <lv_disp_get_antialiasing>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c472:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   1c476:	f8b9 3000 	ldrh.w	r3, [r9]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c47a:	f8b9 2006 	ldrh.w	r2, [r9, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c47e:	3101      	adds	r1, #1
   1c480:	1ac9      	subs	r1, r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c482:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1c486:	3201      	adds	r2, #1
   1c488:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
   1c48a:	9b06      	ldr	r3, [sp, #24]
   1c48c:	f9b3 b014 	ldrsh.w	fp, [r3, #20]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
   1c490:	9b07      	ldr	r3, [sp, #28]
   1c492:	2bff      	cmp	r3, #255	; 0xff
   1c494:	9b06      	ldr	r3, [sp, #24]
   1c496:	7ddc      	ldrb	r4, [r3, #23]
   1c498:	bf1c      	itt	ne
   1c49a:	9b07      	ldrne	r3, [sp, #28]
   1c49c:	435c      	mulne	r4, r3
    lv_border_part_t part = style->body.border.part;
   1c49e:	9b06      	ldr	r3, [sp, #24]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c4a0:	4680      	mov	r8, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c4a2:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c4a4:	4650      	mov	r0, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c4a6:	b212      	sxth	r2, r2
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
   1c4a8:	bf18      	it	ne
   1c4aa:	0a24      	lsrne	r4, r4, #8
    lv_border_part_t part = style->body.border.part;
   1c4ac:	7d9e      	ldrb	r6, [r3, #22]
    lv_color_t color      = style->body.border.color;
   1c4ae:	691f      	ldr	r7, [r3, #16]
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c4b0:	f7ff fe6a 	bl	1c188 <lv_draw_cont_radius_corr>
    bwidth--;
   1c4b4:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   1c4b8:	b22d      	sxth	r5, r5
    if(radius < bwidth) {
   1c4ba:	42a8      	cmp	r0, r5
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c4bc:	4682      	mov	sl, r0
    if(radius < bwidth) {
   1c4be:	f280 82b9 	bge.w	1ca34 <lv_draw_rect+0x82c>
        length_corr = bwidth - radius - aa;
   1c4c2:	eba5 0308 	sub.w	r3, r5, r8
   1c4c6:	1a1b      	subs	r3, r3, r0
   1c4c8:	b21b      	sxth	r3, r3
   1c4ca:	9309      	str	r3, [sp, #36]	; 0x24
        corner_size = bwidth;
   1c4cc:	462b      	mov	r3, r5
    if(style->body.radius == 0) {
   1c4ce:	9a06      	ldr	r2, [sp, #24]
   1c4d0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
   1c4d4:	f006 0102 	and.w	r1, r6, #2
   1c4d8:	9108      	str	r1, [sp, #32]
   1c4da:	2a00      	cmp	r2, #0
   1c4dc:	f040 82b0 	bne.w	1ca40 <lv_draw_rect+0x838>
        if(part & LV_BORDER_TOP) {
   1c4e0:	b1a1      	cbz	r1, 1c50c <lv_draw_rect+0x304>
            work_area.x1 = coords->x1;
   1c4e2:	f8b9 3000 	ldrh.w	r3, [r9]
   1c4e6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.x2 = coords->x2;
   1c4ea:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1c4ee:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.y1 = coords->y1;
   1c4f2:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   1c4f6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + bwidth;
   1c4fa:	442b      	add	r3, r5
   1c4fc:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1c500:	463a      	mov	r2, r7
   1c502:	4623      	mov	r3, r4
   1c504:	9905      	ldr	r1, [sp, #20]
   1c506:	a81a      	add	r0, sp, #104	; 0x68
   1c508:	f7ff fd72 	bl	1bff0 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
   1c50c:	0731      	lsls	r1, r6, #28
   1c50e:	d520      	bpl.n	1c552 <lv_draw_rect+0x34a>
            work_area.x1 = coords->x2 - bwidth;
   1c510:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
            work_area.x2 = coords->x2;
   1c514:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - bwidth;
   1c518:	1b5a      	subs	r2, r3, r5
   1c51a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   1c51e:	9a08      	ldr	r2, [sp, #32]
   1c520:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
            lv_draw_fill(&work_area, mask, color, opa);
   1c524:	9905      	ldr	r1, [sp, #20]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   1c526:	2a00      	cmp	r2, #0
   1c528:	bf14      	ite	ne
   1c52a:	465a      	movne	r2, fp
   1c52c:	2200      	moveq	r2, #0
   1c52e:	4413      	add	r3, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
   1c530:	f016 0f01 	tst.w	r6, #1
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   1c534:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
   1c538:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c53c:	bf14      	ite	ne
   1c53e:	465a      	movne	r2, fp
   1c540:	2200      	moveq	r2, #0
   1c542:	1a9b      	subs	r3, r3, r2
   1c544:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1c548:	463a      	mov	r2, r7
   1c54a:	4623      	mov	r3, r4
   1c54c:	a81a      	add	r0, sp, #104	; 0x68
   1c54e:	f7ff fd4f 	bl	1bff0 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
   1c552:	f016 0f04 	tst.w	r6, #4
   1c556:	f006 0601 	and.w	r6, r6, #1
   1c55a:	d020      	beq.n	1c59e <lv_draw_rect+0x396>
            work_area.x1 = coords->x1;
   1c55c:	f9b9 3000 	ldrsh.w	r3, [r9]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   1c560:	9a08      	ldr	r2, [sp, #32]
            work_area.x1 = coords->x1;
   1c562:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + bwidth;
   1c566:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   1c568:	2a00      	cmp	r2, #0
            work_area.x2 = coords->x1 + bwidth;
   1c56a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   1c56e:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
            lv_draw_fill(&work_area, mask, color, opa);
   1c572:	9905      	ldr	r1, [sp, #20]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
   1c574:	bf14      	ite	ne
   1c576:	465a      	movne	r2, fp
   1c578:	2200      	moveq	r2, #0
   1c57a:	4413      	add	r3, r2
   1c57c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
   1c580:	2e00      	cmp	r6, #0
   1c582:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c586:	bf08      	it	eq
   1c588:	f04f 0b00 	moveq.w	fp, #0
   1c58c:	eba3 0b0b 	sub.w	fp, r3, fp
            lv_draw_fill(&work_area, mask, color, opa);
   1c590:	463a      	mov	r2, r7
   1c592:	4623      	mov	r3, r4
   1c594:	a81a      	add	r0, sp, #104	; 0x68
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
   1c596:	f8ad b06e 	strh.w	fp, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1c59a:	f7ff fd29 	bl	1bff0 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
   1c59e:	b1a6      	cbz	r6, 1c5ca <lv_draw_rect+0x3c2>
            work_area.x1 = coords->x1;
   1c5a0:	f8b9 3000 	ldrh.w	r3, [r9]
   1c5a4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.x2 = coords->x2;
   1c5a8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1c5ac:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.y1 = coords->y2 - bwidth;
   1c5b0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c5b4:	1b5d      	subs	r5, r3, r5
   1c5b6:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2;
   1c5ba:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1c5be:	463a      	mov	r2, r7
   1c5c0:	4623      	mov	r3, r4
   1c5c2:	9905      	ldr	r1, [sp, #20]
   1c5c4:	a81a      	add	r0, sp, #104	; 0x68
   1c5c6:	f7ff fd13 	bl	1bff0 <lv_draw_fill>
        if(style->body.radius != 0) {
   1c5ca:	9b06      	ldr	r3, [sp, #24]
   1c5cc:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
   1c5d0:	2c00      	cmp	r4, #0
   1c5d2:	d05e      	beq.n	1c692 <lv_draw_rect+0x48a>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c5d4:	f7f7 fd32 	bl	1403c <lv_refr_get_disp_refreshing>
   1c5d8:	f000 fcd1 	bl	1cf7e <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
   1c5dc:	9b06      	ldr	r3, [sp, #24]
   1c5de:	f8b9 2006 	ldrh.w	r2, [r9, #6]
   1c5e2:	f9b3 a014 	ldrsh.w	sl, [r3, #20]
    lv_color_t color      = style->body.border.color;
   1c5e6:	f8d3 b010 	ldr.w	fp, [r3, #16]
    lv_border_part_t part = style->body.border.part;
   1c5ea:	7d9b      	ldrb	r3, [r3, #22]
   1c5ec:	9308      	str	r3, [sp, #32]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
   1c5ee:	9b07      	ldr	r3, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c5f0:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   1c5f4:	2bff      	cmp	r3, #255	; 0xff
   1c5f6:	9b06      	ldr	r3, [sp, #24]
   1c5f8:	7ddd      	ldrb	r5, [r3, #23]
   1c5fa:	bf1c      	itt	ne
   1c5fc:	9b07      	ldrne	r3, [sp, #28]
   1c5fe:	435d      	mulne	r5, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c600:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1c604:	f102 0201 	add.w	r2, r2, #1
   1c608:	eba2 0203 	sub.w	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1c60c:	f8b9 3000 	ldrh.w	r3, [r9]
   1c610:	f101 0101 	add.w	r1, r1, #1
   1c614:	eba1 0103 	sub.w	r1, r1, r3
    uint16_t radius       = style->body.radius;
   1c618:	b2a4      	uxth	r4, r4
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
   1c61a:	4606      	mov	r6, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c61c:	b212      	sxth	r2, r2
   1c61e:	b209      	sxth	r1, r1
   1c620:	4620      	mov	r0, r4
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
   1c622:	bf18      	it	ne
   1c624:	0a2d      	lsrne	r5, r5, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
   1c626:	f7ff fdaf 	bl	1c188 <lv_draw_cont_radius_corr>
    lb_origo.y = coords->y2 - radius - aa;
   1c62a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    lt_origo.x = coords->x1 + radius + aa;
   1c62e:	f8b9 7000 	ldrh.w	r7, [r9]
    lt_origo.y = coords->y1 + radius + aa;
   1c632:	f8b9 8002 	ldrh.w	r8, [r9, #2]
    rt_origo.x = coords->x2 - radius - aa;
   1c636:	f8b9 9004 	ldrh.w	r9, [r9, #4]
    lt_origo.x = coords->x1 + radius + aa;
   1c63a:	b232      	sxth	r2, r6
   1c63c:	b204      	sxth	r4, r0
    lb_origo.y = coords->y2 - radius - aa;
   1c63e:	1a9b      	subs	r3, r3, r2
   1c640:	1b1b      	subs	r3, r3, r4
    lt_origo.x = coords->x1 + radius + aa;
   1c642:	4417      	add	r7, r2
    lt_origo.y = coords->y1 + radius + aa;
   1c644:	4490      	add	r8, r2
    rt_origo.x = coords->x2 - radius - aa;
   1c646:	eba9 0902 	sub.w	r9, r9, r2
    lv_circ_init(&cir_out, &tmp_out, radius);
   1c64a:	a913      	add	r1, sp, #76	; 0x4c
   1c64c:	4622      	mov	r2, r4
   1c64e:	a816      	add	r0, sp, #88	; 0x58
    lb_origo.y = coords->y2 - radius - aa;
   1c650:	b21e      	sxth	r6, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
   1c652:	f000 fcbf 	bl	1cfd4 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
   1c656:	f1ca 0201 	rsb	r2, sl, #1
   1c65a:	4422      	add	r2, r4
   1c65c:	b212      	sxth	r2, r2
    lv_circ_init(&cir_in, &tmp_in, radius_in);
   1c65e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1c662:	a914      	add	r1, sp, #80	; 0x50
   1c664:	a818      	add	r0, sp, #96	; 0x60
   1c666:	f000 fcb5 	bl	1cfd4 <lv_circ_init>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   1c66a:	9b08      	ldr	r3, [sp, #32]
    lt_origo.x = coords->x1 + radius + aa;
   1c66c:	4427      	add	r7, r4
    lt_origo.y = coords->y1 + radius + aa;
   1c66e:	44a0      	add	r8, r4
    rt_origo.x = coords->x2 - radius - aa;
   1c670:	eba9 0904 	sub.w	r9, r9, r4
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   1c674:	f003 0309 	and.w	r3, r3, #9
    lt_origo.x = coords->x1 + radius + aa;
   1c678:	b23f      	sxth	r7, r7
    lt_origo.y = coords->y1 + radius + aa;
   1c67a:	fa0f f888 	sxth.w	r8, r8
    rt_origo.x = coords->x2 - radius - aa;
   1c67e:	fa0f f989 	sxth.w	r9, r9
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   1c682:	9306      	str	r3, [sp, #24]
    while(cir_out.y <= cir_out.x) {
   1c684:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   1c688:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
   1c68c:	429a      	cmp	r2, r3
   1c68e:	f280 8330 	bge.w	1ccf2 <lv_draw_rect+0xaea>
}
   1c692:	b01d      	add	sp, #116	; 0x74
   1c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    work_area.x1 = coords->x1;
   1c698:	f8b9 3000 	ldrh.w	r3, [r9]
   1c69c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    work_area.x2 = coords->x2;
   1c6a0:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1c6a4:	f8b9 5006 	ldrh.w	r5, [r9, #6]
   1c6a8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    if(mcolor.full == gcolor.full) {
   1c6ac:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1c6b0:	9a06      	ldr	r2, [sp, #24]
   1c6b2:	b200      	sxth	r0, r0
   1c6b4:	4403      	add	r3, r0
   1c6b6:	45d0      	cmp	r8, sl
   1c6b8:	eba5 0000 	sub.w	r0, r5, r0
   1c6bc:	b21b      	sxth	r3, r3
   1c6be:	b205      	sxth	r5, r0
   1c6c0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
   1c6c4:	d117      	bne.n	1c6f6 <lv_draw_rect+0x4ee>
        work_area.y1 = coords->y1 + radius;
   1c6c6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        work_area.y2 = coords->y2 - radius;
   1c6ca:	f8ad 506e 	strh.w	r5, [sp, #110]	; 0x6e
        if(style->body.radius != 0) {
   1c6ce:	b132      	cbz	r2, 1c6de <lv_draw_rect+0x4d6>
            if(aa) {
   1c6d0:	b164      	cbz	r4, 1c6ec <lv_draw_rect+0x4e4>
                work_area.y1 += 2;
   1c6d2:	1c9c      	adds	r4, r3, #2
   1c6d4:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
                work_area.y2 -= 2;
   1c6d8:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
   1c6da:	f8ad 506e 	strh.w	r5, [sp, #110]	; 0x6e
        lv_draw_fill(&work_area, mask, mcolor, opa);
   1c6de:	463b      	mov	r3, r7
   1c6e0:	4642      	mov	r2, r8
   1c6e2:	9905      	ldr	r1, [sp, #20]
   1c6e4:	a81a      	add	r0, sp, #104	; 0x68
   1c6e6:	f7ff fc83 	bl	1bff0 <lv_draw_fill>
   1c6ea:	e5da      	b.n	1c2a2 <lv_draw_rect+0x9a>
                work_area.y1 += 1;
   1c6ec:	1c5c      	adds	r4, r3, #1
   1c6ee:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
                work_area.y2 -= 1;
   1c6f2:	3d01      	subs	r5, #1
   1c6f4:	e7f1      	b.n	1c6da <lv_draw_rect+0x4d2>
        if(style->body.radius != 0) {
   1c6f6:	b122      	cbz	r2, 1c702 <lv_draw_rect+0x4fa>
            if(aa) {
   1c6f8:	b39c      	cbz	r4, 1c762 <lv_draw_rect+0x55a>
                row_start += 2;
   1c6fa:	1c9c      	adds	r4, r3, #2
   1c6fc:	b223      	sxth	r3, r4
                row_end -= 2;
   1c6fe:	3d02      	subs	r5, #2
                row_end -= 1;
   1c700:	b22d      	sxth	r5, r5
        if(row_start < 0) row_start = 0;
   1c702:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
            act_color    = lv_color_mix(mcolor, gcolor, mix);
   1c706:	fa5f f38a 	uxtb.w	r3, sl
   1c70a:	9308      	str	r3, [sp, #32]
   1c70c:	f3c8 4307 	ubfx	r3, r8, #16, #8
   1c710:	9309      	str	r3, [sp, #36]	; 0x24
   1c712:	f3c8 2b07 	ubfx	fp, r8, #8, #8
        for(row = row_start; row <= row_end; row++) {
   1c716:	42ac      	cmp	r4, r5
   1c718:	f73f adc3 	bgt.w	1c2a2 <lv_draw_rect+0x9a>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
   1c71c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
            work_area.y1 = row;
   1c720:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
   1c724:	1b1b      	subs	r3, r3, r4
   1c726:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1c72a:	fbb3 f3f6 	udiv	r3, r3, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
   1c72e:	b2db      	uxtb	r3, r3
   1c730:	9302      	str	r3, [sp, #8]
   1c732:	f3ca 4307 	ubfx	r3, sl, #16, #8
   1c736:	9301      	str	r3, [sp, #4]
   1c738:	f3ca 2307 	ubfx	r3, sl, #8, #8
   1c73c:	9300      	str	r3, [sp, #0]
   1c73e:	4659      	mov	r1, fp
   1c740:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1c744:	fa5f f088 	uxtb.w	r0, r8
            work_area.y2 = row;
   1c748:	f8ad 406e 	strh.w	r4, [sp, #110]	; 0x6e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
   1c74c:	f7ff fd37 	bl	1c1be <lv_color_mix.isra.0>
        for(row = row_start; row <= row_end; row++) {
   1c750:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
   1c752:	4602      	mov	r2, r0
   1c754:	463b      	mov	r3, r7
   1c756:	9905      	ldr	r1, [sp, #20]
   1c758:	a81a      	add	r0, sp, #104	; 0x68
   1c75a:	f7ff fc49 	bl	1bff0 <lv_draw_fill>
        for(row = row_start; row <= row_end; row++) {
   1c75e:	b224      	sxth	r4, r4
   1c760:	e7d9      	b.n	1c716 <lv_draw_rect+0x50e>
                row_start += 1;
   1c762:	1c5c      	adds	r4, r3, #1
   1c764:	b223      	sxth	r3, r4
                row_end -= 1;
   1c766:	3d01      	subs	r5, #1
   1c768:	e7ca      	b.n	1c700 <lv_draw_rect+0x4f8>
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
   1c76a:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
   1c76e:	f9bd 704e 	ldrsh.w	r7, [sp, #78]	; 0x4e
   1c772:	930d      	str	r3, [sp, #52]	; 0x34
   1c774:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
   1c776:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
   1c77a:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
   1c77e:	18fb      	adds	r3, r7, r3
   1c780:	930e      	str	r3, [sp, #56]	; 0x38
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
   1c782:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
   1c786:	930f      	str	r3, [sp, #60]	; 0x3c
   1c788:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c78a:	4413      	add	r3, r2
   1c78c:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
   1c78e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   1c792:	9311      	str	r3, [sp, #68]	; 0x44
   1c794:	9b08      	ldr	r3, [sp, #32]
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
   1c796:	1a9a      	subs	r2, r3, r2
   1c798:	4291      	cmp	r1, r2
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
   1c79a:	eba3 0707 	sub.w	r7, r3, r7
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
   1c79e:	d007      	beq.n	1c7b0 <lv_draw_rect+0x5a8>
            if(mcolor.full == gcolor.full)
   1c7a0:	42ac      	cmp	r4, r5
   1c7a2:	d175      	bne.n	1c890 <lv_draw_rect+0x688>
                act_color = mcolor;
   1c7a4:	4622      	mov	r2, r4
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
   1c7a6:	4633      	mov	r3, r6
   1c7a8:	9905      	ldr	r1, [sp, #20]
   1c7aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c7ac:	f7ff fc20 	bl	1bff0 <lv_draw_fill>
        if(mid_top_refr != 0) {
   1c7b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c7b2:	42bb      	cmp	r3, r7
   1c7b4:	d008      	beq.n	1c7c8 <lv_draw_rect+0x5c0>
            if(mcolor.full == gcolor.full)
   1c7b6:	42ac      	cmp	r4, r5
   1c7b8:	f040 8083 	bne.w	1c8c2 <lv_draw_rect+0x6ba>
                act_color = mcolor;
   1c7bc:	4622      	mov	r2, r4
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
   1c7be:	4633      	mov	r3, r6
   1c7c0:	9905      	ldr	r1, [sp, #20]
   1c7c2:	a816      	add	r0, sp, #88	; 0x58
   1c7c4:	f7ff fc14 	bl	1bff0 <lv_draw_fill>
        if(mid_bot_refr != 0) {
   1c7c8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
   1c7cc:	4293      	cmp	r3, r2
   1c7ce:	d008      	beq.n	1c7e2 <lv_draw_rect+0x5da>
            if(mcolor.full == gcolor.full)
   1c7d0:	42ac      	cmp	r4, r5
   1c7d2:	f040 8091 	bne.w	1c8f8 <lv_draw_rect+0x6f0>
                act_color = mcolor;
   1c7d6:	4622      	mov	r2, r4
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
   1c7d8:	4633      	mov	r3, r6
   1c7da:	9905      	ldr	r1, [sp, #20]
   1c7dc:	a818      	add	r0, sp, #96	; 0x60
   1c7de:	f7ff fc07 	bl	1bff0 <lv_draw_fill>
        if(edge_bot_refr != 0) {
   1c7e2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   1c7e6:	4293      	cmp	r3, r2
   1c7e8:	d008      	beq.n	1c7fc <lv_draw_rect+0x5f4>
            if(mcolor.full == gcolor.full)
   1c7ea:	42ac      	cmp	r4, r5
   1c7ec:	f040 809f 	bne.w	1c92e <lv_draw_rect+0x726>
                act_color = mcolor;
   1c7f0:	4622      	mov	r2, r4
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
   1c7f2:	4633      	mov	r3, r6
   1c7f4:	9905      	ldr	r1, [sp, #20]
   1c7f6:	a81a      	add	r0, sp, #104	; 0x68
   1c7f8:	f7ff fbfa 	bl	1bff0 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
   1c7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c7fe:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
   1c802:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
   1c806:	441a      	add	r2, r3
   1c808:	b212      	sxth	r2, r2
   1c80a:	eb0b 0301 	add.w	r3, fp, r1
   1c80e:	eba8 0101 	sub.w	r1, r8, r1
   1c812:	9200      	str	r2, [sp, #0]
   1c814:	a818      	add	r0, sp, #96	; 0x60
   1c816:	b21b      	sxth	r3, r3
   1c818:	b209      	sxth	r1, r1
   1c81a:	f000 fc00 	bl	1d01e <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
   1c81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c820:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   1c824:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
   1c828:	441a      	add	r2, r3
   1c82a:	b212      	sxth	r2, r2
   1c82c:	eb0b 0301 	add.w	r3, fp, r1
   1c830:	eba8 0101 	sub.w	r1, r8, r1
   1c834:	9200      	str	r2, [sp, #0]
   1c836:	a81a      	add	r0, sp, #104	; 0x68
   1c838:	b21b      	sxth	r3, r3
   1c83a:	b209      	sxth	r1, r1
   1c83c:	f000 fbef 	bl	1d01e <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
   1c840:	9b08      	ldr	r3, [sp, #32]
   1c842:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
   1c846:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
   1c84a:	1a9a      	subs	r2, r3, r2
   1c84c:	b212      	sxth	r2, r2
   1c84e:	eb0b 0301 	add.w	r3, fp, r1
   1c852:	eba8 0101 	sub.w	r1, r8, r1
   1c856:	9200      	str	r2, [sp, #0]
   1c858:	a816      	add	r0, sp, #88	; 0x58
   1c85a:	b21b      	sxth	r3, r3
   1c85c:	b209      	sxth	r1, r1
   1c85e:	f000 fbde 	bl	1d01e <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
   1c862:	9b08      	ldr	r3, [sp, #32]
   1c864:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   1c868:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
   1c86c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c86e:	1a9a      	subs	r2, r3, r2
   1c870:	b212      	sxth	r2, r2
   1c872:	eb0b 0301 	add.w	r3, fp, r1
   1c876:	eba8 0101 	sub.w	r1, r8, r1
   1c87a:	9200      	str	r2, [sp, #0]
   1c87c:	b21b      	sxth	r3, r3
   1c87e:	b209      	sxth	r1, r1
   1c880:	f000 fbcd 	bl	1d01e <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
   1c884:	f10d 014a 	add.w	r1, sp, #74	; 0x4a
   1c888:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c88a:	f000 fbb3 	bl	1cff4 <lv_circ_next>
   1c88e:	e5a3      	b.n	1c3d8 <lv_draw_rect+0x1d0>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
   1c890:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c894:	1a5b      	subs	r3, r3, r1
   1c896:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1c89a:	fbb3 f3fa 	udiv	r3, r3, sl
                act_color = lv_color_mix(mcolor, gcolor, mix);
   1c89e:	b2db      	uxtb	r3, r3
   1c8a0:	9302      	str	r3, [sp, #8]
   1c8a2:	f3c5 4307 	ubfx	r3, r5, #16, #8
   1c8a6:	9301      	str	r3, [sp, #4]
   1c8a8:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1c8ac:	9300      	str	r3, [sp, #0]
   1c8ae:	f3c4 4207 	ubfx	r2, r4, #16, #8
   1c8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c8b4:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1c8b8:	b2e0      	uxtb	r0, r4
   1c8ba:	f7ff fc80 	bl	1c1be <lv_color_mix.isra.0>
   1c8be:	4602      	mov	r2, r0
   1c8c0:	e771      	b.n	1c7a6 <lv_draw_rect+0x59e>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
   1c8c2:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c8c6:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   1c8ca:	1a9b      	subs	r3, r3, r2
   1c8cc:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1c8d0:	fbb3 f3fa 	udiv	r3, r3, sl
                act_color = lv_color_mix(mcolor, gcolor, mix);
   1c8d4:	b2db      	uxtb	r3, r3
   1c8d6:	9302      	str	r3, [sp, #8]
   1c8d8:	f3c5 4307 	ubfx	r3, r5, #16, #8
   1c8dc:	9301      	str	r3, [sp, #4]
   1c8de:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1c8e2:	9300      	str	r3, [sp, #0]
   1c8e4:	f3c4 4207 	ubfx	r2, r4, #16, #8
   1c8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c8ea:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1c8ee:	b2e0      	uxtb	r0, r4
   1c8f0:	f7ff fc65 	bl	1c1be <lv_color_mix.isra.0>
   1c8f4:	4602      	mov	r2, r0
   1c8f6:	e762      	b.n	1c7be <lv_draw_rect+0x5b6>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
   1c8f8:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c8fc:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   1c900:	1a9b      	subs	r3, r3, r2
   1c902:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1c906:	fbb3 f3fa 	udiv	r3, r3, sl
                act_color = lv_color_mix(mcolor, gcolor, mix);
   1c90a:	b2db      	uxtb	r3, r3
   1c90c:	9302      	str	r3, [sp, #8]
   1c90e:	f3c5 4307 	ubfx	r3, r5, #16, #8
   1c912:	9301      	str	r3, [sp, #4]
   1c914:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1c918:	9300      	str	r3, [sp, #0]
   1c91a:	f3c4 4207 	ubfx	r2, r4, #16, #8
   1c91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c920:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1c924:	b2e0      	uxtb	r0, r4
   1c926:	f7ff fc4a 	bl	1c1be <lv_color_mix.isra.0>
   1c92a:	4602      	mov	r2, r0
   1c92c:	e754      	b.n	1c7d8 <lv_draw_rect+0x5d0>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
   1c92e:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c932:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
   1c936:	1a9b      	subs	r3, r3, r2
   1c938:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1c93c:	fbb3 f3fa 	udiv	r3, r3, sl
                act_color = lv_color_mix(mcolor, gcolor, mix);
   1c940:	b2db      	uxtb	r3, r3
   1c942:	9302      	str	r3, [sp, #8]
   1c944:	f3c5 4307 	ubfx	r3, r5, #16, #8
   1c948:	9301      	str	r3, [sp, #4]
   1c94a:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1c94e:	9300      	str	r3, [sp, #0]
   1c950:	f3c4 4207 	ubfx	r2, r4, #16, #8
   1c954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c956:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1c95a:	b2e0      	uxtb	r0, r4
   1c95c:	f7ff fc2f 	bl	1c1be <lv_color_mix.isra.0>
   1c960:	4602      	mov	r2, r0
   1c962:	e746      	b.n	1c7f2 <lv_draw_rect+0x5ea>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
   1c964:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c968:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
   1c96c:	1a9b      	subs	r3, r3, r2
   1c96e:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1c972:	fbb3 f3fa 	udiv	r3, r3, sl
        act_color = lv_color_mix(mcolor, gcolor, mix);
   1c976:	b2db      	uxtb	r3, r3
   1c978:	9302      	str	r3, [sp, #8]
   1c97a:	f3c5 4307 	ubfx	r3, r5, #16, #8
   1c97e:	9301      	str	r3, [sp, #4]
   1c980:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1c984:	9300      	str	r3, [sp, #0]
   1c986:	f3c4 4207 	ubfx	r2, r4, #16, #8
   1c98a:	b2eb      	uxtb	r3, r5
   1c98c:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1c990:	b2e0      	uxtb	r0, r4
   1c992:	f7ff fc14 	bl	1c1be <lv_color_mix.isra.0>
   1c996:	4602      	mov	r2, r0
   1c998:	e528      	b.n	1c3ec <lv_draw_rect+0x1e4>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
   1c99a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c99e:	1a9b      	subs	r3, r3, r2
   1c9a0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1c9a4:	fbb3 f3fa 	udiv	r3, r3, sl
            act_color = lv_color_mix(mcolor, gcolor, mix);
   1c9a8:	b2db      	uxtb	r3, r3
   1c9aa:	9302      	str	r3, [sp, #8]
   1c9ac:	f3c5 4307 	ubfx	r3, r5, #16, #8
   1c9b0:	9301      	str	r3, [sp, #4]
   1c9b2:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1c9b6:	9300      	str	r3, [sp, #0]
   1c9b8:	f3c4 4207 	ubfx	r2, r4, #16, #8
   1c9bc:	b2eb      	uxtb	r3, r5
   1c9be:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1c9c2:	b2e0      	uxtb	r0, r4
   1c9c4:	f7ff fbfb 	bl	1c1be <lv_color_mix.isra.0>
   1c9c8:	4602      	mov	r2, r0
   1c9ca:	e51e      	b.n	1c40a <lv_draw_rect+0x202>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
   1c9cc:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1c9d0:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   1c9d4:	1a9b      	subs	r3, r3, r2
   1c9d6:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1c9da:	fbb3 f3fa 	udiv	r3, r3, sl
        act_color = lv_color_mix(mcolor, gcolor, mix);
   1c9de:	b2db      	uxtb	r3, r3
   1c9e0:	9302      	str	r3, [sp, #8]
   1c9e2:	f3c5 4307 	ubfx	r3, r5, #16, #8
   1c9e6:	9301      	str	r3, [sp, #4]
   1c9e8:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1c9ec:	9300      	str	r3, [sp, #0]
   1c9ee:	f3c4 4207 	ubfx	r2, r4, #16, #8
   1c9f2:	b2eb      	uxtb	r3, r5
   1c9f4:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1c9f8:	b2e0      	uxtb	r0, r4
   1c9fa:	f7ff fbe0 	bl	1c1be <lv_color_mix.isra.0>
   1c9fe:	4602      	mov	r2, r0
   1ca00:	e50c      	b.n	1c41c <lv_draw_rect+0x214>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
   1ca02:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1ca06:	1a9b      	subs	r3, r3, r2
   1ca08:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
   1ca0c:	fbb3 f3fa 	udiv	r3, r3, sl
            act_color = lv_color_mix(mcolor, gcolor, mix);
   1ca10:	b2db      	uxtb	r3, r3
   1ca12:	9302      	str	r3, [sp, #8]
   1ca14:	f3c5 4307 	ubfx	r3, r5, #16, #8
   1ca18:	9301      	str	r3, [sp, #4]
   1ca1a:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1ca1e:	9300      	str	r3, [sp, #0]
   1ca20:	f3c4 4207 	ubfx	r2, r4, #16, #8
   1ca24:	b2eb      	uxtb	r3, r5
   1ca26:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1ca2a:	b2e0      	uxtb	r0, r4
   1ca2c:	f7ff fbc7 	bl	1c1be <lv_color_mix.isra.0>
   1ca30:	4602      	mov	r2, r0
   1ca32:	e502      	b.n	1c43a <lv_draw_rect+0x232>
        corner_size = radius + aa;
   1ca34:	eb00 0308 	add.w	r3, r0, r8
    lv_coord_t length_corr = 0;
   1ca38:	2200      	movs	r2, #0
        corner_size = radius + aa;
   1ca3a:	b21b      	sxth	r3, r3
    lv_coord_t length_corr = 0;
   1ca3c:	9209      	str	r2, [sp, #36]	; 0x24
   1ca3e:	e546      	b.n	1c4ce <lv_draw_rect+0x2c6>
    if(part & LV_BORDER_TOP)
   1ca40:	9a08      	ldr	r2, [sp, #32]
    corner_size++;
   1ca42:	f103 0b01 	add.w	fp, r3, #1
   1ca46:	fa0f fb8b 	sxth.w	fp, fp
    if(part & LV_BORDER_TOP)
   1ca4a:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   1ca4e:	2a00      	cmp	r2, #0
   1ca50:	f000 814d 	beq.w	1ccee <lv_draw_rect+0xae6>
        work_area.y1 = coords->y1 + corner_size;
   1ca54:	445b      	add	r3, fp
        work_area.y1 = coords->y1 + radius;
   1ca56:	b21b      	sxth	r3, r3
   1ca58:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(part & LV_BORDER_BOTTOM)
   1ca5c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1ca60:	f016 0201 	ands.w	r2, r6, #1
        work_area.y2 = coords->y2 - corner_size;
   1ca64:	bf14      	ite	ne
   1ca66:	eba3 030b 	subne.w	r3, r3, fp
        work_area.y2 = coords->y2 - radius;
   1ca6a:	eba3 030a 	subeq.w	r3, r3, sl
    if(part & LV_BORDER_BOTTOM)
   1ca6e:	920a      	str	r2, [sp, #40]	; 0x28
        work_area.y2 = coords->y2 - radius;
   1ca70:	b21b      	sxth	r3, r3
    if(part & LV_BORDER_LEFT) {
   1ca72:	0772      	lsls	r2, r6, #29
   1ca74:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
   1ca78:	d50c      	bpl.n	1ca94 <lv_draw_rect+0x88c>
        work_area.x1 = coords->x1;
   1ca7a:	f9b9 3000 	ldrsh.w	r3, [r9]
   1ca7e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        work_area.x2 = work_area.x1 + bwidth;
   1ca82:	442b      	add	r3, r5
   1ca84:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        lv_draw_fill(&work_area, mask, color, opa);
   1ca88:	463a      	mov	r2, r7
   1ca8a:	4623      	mov	r3, r4
   1ca8c:	9905      	ldr	r1, [sp, #20]
   1ca8e:	a81a      	add	r0, sp, #104	; 0x68
   1ca90:	f7ff faae 	bl	1bff0 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
   1ca94:	0733      	lsls	r3, r6, #28
   1ca96:	d50c      	bpl.n	1cab2 <lv_draw_rect+0x8aa>
   1ca98:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
        work_area.x2 = coords->x2;
   1ca9c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        work_area.x1 = work_area.x2 - bwidth;
   1caa0:	1b5b      	subs	r3, r3, r5
   1caa2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        lv_draw_fill(&work_area, mask, color, opa);
   1caa6:	463a      	mov	r2, r7
   1caa8:	4623      	mov	r3, r4
   1caaa:	9905      	ldr	r1, [sp, #20]
   1caac:	a81a      	add	r0, sp, #104	; 0x68
   1caae:	f7ff fa9f 	bl	1bff0 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
   1cab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cab4:	f8b9 2000 	ldrh.w	r2, [r9]
   1cab8:	ebab 0303 	sub.w	r3, fp, r3
   1cabc:	4413      	add	r3, r2
   1cabe:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    work_area.x2 = coords->x2 - corner_size + length_corr;
   1cac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cac4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1cac8:	4413      	add	r3, r2
   1caca:	eba3 0b0b 	sub.w	fp, r3, fp
    if(part & LV_BORDER_TOP) {
   1cace:	9b08      	ldr	r3, [sp, #32]
    work_area.x2 = coords->x2 - corner_size + length_corr;
   1cad0:	f8ad b06c 	strh.w	fp, [sp, #108]	; 0x6c
    if(part & LV_BORDER_TOP) {
   1cad4:	b163      	cbz	r3, 1caf0 <lv_draw_rect+0x8e8>
        work_area.y1 = coords->y1;
   1cad6:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   1cada:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        work_area.y2 = coords->y1 + bwidth;
   1cade:	442b      	add	r3, r5
   1cae0:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        lv_draw_fill(&work_area, mask, color, opa);
   1cae4:	463a      	mov	r2, r7
   1cae6:	4623      	mov	r3, r4
   1cae8:	9905      	ldr	r1, [sp, #20]
   1caea:	a81a      	add	r0, sp, #104	; 0x68
   1caec:	f7ff fa80 	bl	1bff0 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
   1caf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1caf2:	b163      	cbz	r3, 1cb0e <lv_draw_rect+0x906>
        work_area.y2 = coords->y2;
   1caf4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1caf8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        work_area.y1 = work_area.y2 - bwidth;
   1cafc:	1b5b      	subs	r3, r3, r5
   1cafe:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_fill(&work_area, mask, color, opa);
   1cb02:	463a      	mov	r2, r7
   1cb04:	4623      	mov	r3, r4
   1cb06:	9905      	ldr	r1, [sp, #20]
   1cb08:	a81a      	add	r0, sp, #104	; 0x68
   1cb0a:	f7ff fa71 	bl	1bff0 <lv_draw_fill>
    if(length_corr != 0) {
   1cb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cb10:	2b00      	cmp	r3, #0
   1cb12:	f000 8086 	beq.w	1cc22 <lv_draw_rect+0xa1a>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
   1cb16:	f006 0306 	and.w	r3, r6, #6
   1cb1a:	2b06      	cmp	r3, #6
   1cb1c:	d11c      	bne.n	1cb58 <lv_draw_rect+0x950>
            work_area.x1 = coords->x1;
   1cb1e:	f9b9 3000 	ldrsh.w	r3, [r9]
   1cb22:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + radius + aa;
   1cb26:	fa0f f188 	sxth.w	r1, r8
   1cb2a:	fa0f f28a 	sxth.w	r2, sl
   1cb2e:	440b      	add	r3, r1
   1cb30:	4413      	add	r3, r2
   1cb32:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.y1 = coords->y1 + radius + 1 + aa;
   1cb36:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
            work_area.x2 = coords->x1 + radius + aa;
   1cb3a:	4610      	mov	r0, r2
            work_area.y1 = coords->y1 + radius + 1 + aa;
   1cb3c:	1c5a      	adds	r2, r3, #1
   1cb3e:	4411      	add	r1, r2
   1cb40:	1842      	adds	r2, r0, r1
            work_area.y2 = coords->y1 + bwidth;
   1cb42:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + radius + 1 + aa;
   1cb44:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + bwidth;
   1cb48:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1cb4c:	463a      	mov	r2, r7
   1cb4e:	4623      	mov	r3, r4
   1cb50:	9905      	ldr	r1, [sp, #20]
   1cb52:	a81a      	add	r0, sp, #104	; 0x68
   1cb54:	f7ff fa4c 	bl	1bff0 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
   1cb58:	f006 030a 	and.w	r3, r6, #10
   1cb5c:	2b0a      	cmp	r3, #10
   1cb5e:	d11d      	bne.n	1cb9c <lv_draw_rect+0x994>
            work_area.x1 = coords->x2 - radius - aa;
   1cb60:	f9b9 c004 	ldrsh.w	ip, [r9, #4]
            work_area.x2 = coords->x2;
   1cb64:	f8ad c06c 	strh.w	ip, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - radius - aa;
   1cb68:	fa0f f188 	sxth.w	r1, r8
   1cb6c:	fa0f f28a 	sxth.w	r2, sl
   1cb70:	ebac 0301 	sub.w	r3, ip, r1
   1cb74:	1a9b      	subs	r3, r3, r2
   1cb76:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            work_area.y1 = coords->y1 + radius + 1 + aa;
   1cb7a:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
            work_area.x1 = coords->x2 - radius - aa;
   1cb7e:	4610      	mov	r0, r2
            work_area.y1 = coords->y1 + radius + 1 + aa;
   1cb80:	1c5a      	adds	r2, r3, #1
   1cb82:	4411      	add	r1, r2
   1cb84:	1842      	adds	r2, r0, r1
            work_area.y2 = coords->y1 + bwidth;
   1cb86:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + radius + 1 + aa;
   1cb88:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + bwidth;
   1cb8c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1cb90:	463a      	mov	r2, r7
   1cb92:	4623      	mov	r3, r4
   1cb94:	9905      	ldr	r1, [sp, #20]
   1cb96:	a81a      	add	r0, sp, #104	; 0x68
   1cb98:	f7ff fa2a 	bl	1bff0 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
   1cb9c:	f006 0305 	and.w	r3, r6, #5
   1cba0:	2b05      	cmp	r3, #5
   1cba2:	d11c      	bne.n	1cbde <lv_draw_rect+0x9d6>
            work_area.x1 = coords->x1;
   1cba4:	f9b9 2000 	ldrsh.w	r2, [r9]
   1cba8:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + radius + aa;
   1cbac:	fa0f f088 	sxth.w	r0, r8
   1cbb0:	fa0f f38a 	sxth.w	r3, sl
   1cbb4:	4402      	add	r2, r0
   1cbb6:	4619      	mov	r1, r3
   1cbb8:	441a      	add	r2, r3
            work_area.y1 = coords->y2 - bwidth;
   1cbba:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
            work_area.x2 = coords->x1 + radius + aa;
   1cbbe:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            work_area.y1 = coords->y2 - bwidth;
   1cbc2:	1b5a      	subs	r2, r3, r5
            work_area.y2 = coords->y2 - radius - 1 - aa;
   1cbc4:	3b01      	subs	r3, #1
   1cbc6:	1a1b      	subs	r3, r3, r0
   1cbc8:	1a5b      	subs	r3, r3, r1
            work_area.y1 = coords->y2 - bwidth;
   1cbca:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2 - radius - 1 - aa;
   1cbce:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1cbd2:	463a      	mov	r2, r7
   1cbd4:	4623      	mov	r3, r4
   1cbd6:	9905      	ldr	r1, [sp, #20]
   1cbd8:	a81a      	add	r0, sp, #104	; 0x68
   1cbda:	f7ff fa09 	bl	1bff0 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   1cbde:	f006 0309 	and.w	r3, r6, #9
   1cbe2:	2b09      	cmp	r3, #9
   1cbe4:	d11d      	bne.n	1cc22 <lv_draw_rect+0xa1a>
            work_area.x1 = coords->x2 - radius - aa;
   1cbe6:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
            work_area.x2 = coords->x2;
   1cbea:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - radius - aa;
   1cbee:	fa0f f188 	sxth.w	r1, r8
   1cbf2:	1a5a      	subs	r2, r3, r1
            work_area.y1 = coords->y2 - bwidth;
   1cbf4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
            work_area.x1 = coords->x2 - radius - aa;
   1cbf8:	fa0f fa8a 	sxth.w	sl, sl
            work_area.y1 = coords->y2 - bwidth;
   1cbfc:	1b5d      	subs	r5, r3, r5
            work_area.y2 = coords->y2 - radius - 1 - aa;
   1cbfe:	3b01      	subs	r3, #1
            work_area.x1 = coords->x2 - radius - aa;
   1cc00:	eba2 020a 	sub.w	r2, r2, sl
            work_area.y2 = coords->y2 - radius - 1 - aa;
   1cc04:	1a5b      	subs	r3, r3, r1
   1cc06:	eba3 0a0a 	sub.w	sl, r3, sl
            work_area.x1 = coords->x2 - radius - aa;
   1cc0a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            lv_draw_fill(&work_area, mask, color, opa);
   1cc0e:	4623      	mov	r3, r4
   1cc10:	463a      	mov	r2, r7
   1cc12:	9905      	ldr	r1, [sp, #20]
            work_area.y1 = coords->y2 - bwidth;
   1cc14:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
            lv_draw_fill(&work_area, mask, color, opa);
   1cc18:	a81a      	add	r0, sp, #104	; 0x68
            work_area.y2 = coords->y2 - radius - 1 - aa;
   1cc1a:	f8ad a06e 	strh.w	sl, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1cc1e:	f7ff f9e7 	bl	1bff0 <lv_draw_fill>
    if(style->body.radius == 0) {
   1cc22:	9b06      	ldr	r3, [sp, #24]
   1cc24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1cc28:	2b00      	cmp	r3, #0
   1cc2a:	f47f acce 	bne.w	1c5ca <lv_draw_rect+0x3c2>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
   1cc2e:	f016 0f06 	tst.w	r6, #6
   1cc32:	d015      	beq.n	1cc60 <lv_draw_rect+0xa58>
            work_area.x1 = coords->x1;
   1cc34:	f9b9 2000 	ldrsh.w	r2, [r9]
   1cc38:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + aa;
   1cc3c:	fa0f f388 	sxth.w	r3, r8
   1cc40:	441a      	add	r2, r3
   1cc42:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            work_area.y1 = coords->y1;
   1cc46:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
   1cc4a:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + aa;
   1cc4e:	4413      	add	r3, r2
   1cc50:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1cc54:	463a      	mov	r2, r7
   1cc56:	4623      	mov	r3, r4
   1cc58:	9905      	ldr	r1, [sp, #20]
   1cc5a:	a81a      	add	r0, sp, #104	; 0x68
   1cc5c:	f7ff f9c8 	bl	1bff0 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
   1cc60:	f016 0f0a 	tst.w	r6, #10
   1cc64:	d015      	beq.n	1cc92 <lv_draw_rect+0xa8a>
            work_area.x1 = coords->x2 - aa;
   1cc66:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
            work_area.x2 = coords->x2;
   1cc6a:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - aa;
   1cc6e:	fa0f f388 	sxth.w	r3, r8
   1cc72:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
   1cc74:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
            work_area.x1 = coords->x2 - aa;
   1cc78:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
            work_area.y2 = coords->y1 + aa;
   1cc7c:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
   1cc7e:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            work_area.y2 = coords->y1 + aa;
   1cc82:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&work_area, mask, color, opa);
   1cc86:	463a      	mov	r2, r7
   1cc88:	4623      	mov	r3, r4
   1cc8a:	9905      	ldr	r1, [sp, #20]
   1cc8c:	a81a      	add	r0, sp, #104	; 0x68
   1cc8e:	f7ff f9af 	bl	1bff0 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
   1cc92:	f016 0f05 	tst.w	r6, #5
   1cc96:	d015      	beq.n	1ccc4 <lv_draw_rect+0xabc>
            work_area.x1 = coords->x1;
   1cc98:	f9b9 2000 	ldrsh.w	r2, [r9]
   1cc9c:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.x2 = coords->x1 + aa;
   1cca0:	fa0f f388 	sxth.w	r3, r8
   1cca4:	441a      	add	r2, r3
   1cca6:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            work_area.y1 = coords->y2 - aa;
   1ccaa:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
            work_area.y2 = coords->y2;
   1ccae:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            work_area.y1 = coords->y2 - aa;
   1ccb2:	1ad3      	subs	r3, r2, r3
   1ccb4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_fill(&work_area, mask, color, opa);
   1ccb8:	463a      	mov	r2, r7
   1ccba:	4623      	mov	r3, r4
   1ccbc:	9905      	ldr	r1, [sp, #20]
   1ccbe:	a81a      	add	r0, sp, #104	; 0x68
   1ccc0:	f7ff f996 	bl	1bff0 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
   1ccc4:	f016 0f09 	tst.w	r6, #9
   1ccc8:	f43f ac7f 	beq.w	1c5ca <lv_draw_rect+0x3c2>
            work_area.x1 = coords->x2 - aa;
   1cccc:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
            work_area.x2 = coords->x2;
   1ccd0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            work_area.x1 = coords->x2 - aa;
   1ccd4:	fa0f f888 	sxth.w	r8, r8
   1ccd8:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
   1ccdc:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
            work_area.x1 = coords->x2 - aa;
   1cce0:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            work_area.y1 = coords->y2 - aa;
   1cce4:	eba3 0808 	sub.w	r8, r3, r8
   1cce8:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
            work_area.y2 = coords->y2;
   1ccec:	e465      	b.n	1c5ba <lv_draw_rect+0x3b2>
        work_area.y1 = coords->y1 + radius;
   1ccee:	4453      	add	r3, sl
   1ccf0:	e6b1      	b.n	1ca56 <lv_draw_rect+0x84e>
        if(cir_in.y < cir_in.x) {
   1ccf2:	f9bd 4060 	ldrsh.w	r4, [sp, #96]	; 0x60
   1ccf6:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
   1ccfa:	42a1      	cmp	r1, r4
            act_w1 = cir_out.x - cir_out.y;
   1ccfc:	bfaa      	itet	ge
   1ccfe:	1ad4      	subge	r4, r2, r3
            act_w1 = cir_out.x - cir_in.x;
   1cd00:	1b14      	sublt	r4, r2, r4
            act_w1 = cir_out.x - cir_out.y;
   1cd02:	b224      	sxthge	r4, r4
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   1cd04:	9906      	ldr	r1, [sp, #24]
            act_w1 = cir_out.x - cir_in.x;
   1cd06:	bfb5      	itete	lt
   1cd08:	b224      	sxthlt	r4, r4
            act_w2 = act_w1 - 1;
   1cd0a:	f104 3aff 	addge.w	sl, r4, #4294967295	; 0xffffffff
            act_w2 = act_w1;
   1cd0e:	46a2      	movlt	sl, r4
            act_w2 = act_w1 - 1;
   1cd10:	fa0f fa8a 	sxthge.w	sl, sl
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
   1cd14:	2909      	cmp	r1, #9
   1cd16:	d12a      	bne.n	1cd6e <lv_draw_rect+0xb66>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
   1cd18:	444a      	add	r2, r9
   1cd1a:	b212      	sxth	r2, r2
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
   1cd1c:	4433      	add	r3, r6
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
   1cd1e:	eba2 010a 	sub.w	r1, r2, sl
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
   1cd22:	b21b      	sxth	r3, r3
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
   1cd24:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
   1cd28:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
   1cd2c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
   1cd30:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   1cd34:	465a      	mov	r2, fp
   1cd36:	462b      	mov	r3, r5
   1cd38:	9905      	ldr	r1, [sp, #20]
   1cd3a:	a81a      	add	r0, sp, #104	; 0x68
   1cd3c:	f7ff f958 	bl	1bff0 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
   1cd40:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            lv_draw_fill(&circ_area, mask, color, opa);
   1cd44:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
   1cd46:	444b      	add	r3, r9
   1cd48:	b21b      	sxth	r3, r3
   1cd4a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
   1cd4e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
   1cd52:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   1cd56:	4433      	add	r3, r6
   1cd58:	b21b      	sxth	r3, r3
   1cd5a:	1b1a      	subs	r2, r3, r4
   1cd5c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
   1cd60:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   1cd64:	465a      	mov	r2, fp
   1cd66:	462b      	mov	r3, r5
   1cd68:	a81a      	add	r0, sp, #104	; 0x68
   1cd6a:	f7ff f941 	bl	1bff0 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
   1cd6e:	9b08      	ldr	r3, [sp, #32]
   1cd70:	f003 0305 	and.w	r3, r3, #5
   1cd74:	2b05      	cmp	r3, #5
   1cd76:	d12e      	bne.n	1cdd6 <lv_draw_rect+0xbce>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
   1cd78:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            lv_draw_fill(&circ_area, mask, color, opa);
   1cd7c:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
   1cd7e:	1afb      	subs	r3, r7, r3
   1cd80:	b21b      	sxth	r3, r3
   1cd82:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
   1cd86:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
   1cd8a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   1cd8e:	4433      	add	r3, r6
   1cd90:	b21b      	sxth	r3, r3
   1cd92:	eba3 020a 	sub.w	r2, r3, sl
   1cd96:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
   1cd9a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   1cd9e:	465a      	mov	r2, fp
   1cda0:	462b      	mov	r3, r5
   1cda2:	a81a      	add	r0, sp, #104	; 0x68
   1cda4:	f7ff f924 	bl	1bff0 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
   1cda8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
            lv_draw_fill(&circ_area, mask, color, opa);
   1cdac:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
   1cdae:	1afb      	subs	r3, r7, r3
   1cdb0:	b21b      	sxth	r3, r3
   1cdb2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
   1cdb6:	4423      	add	r3, r4
   1cdb8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
   1cdbc:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   1cdc0:	4433      	add	r3, r6
   1cdc2:	b21b      	sxth	r3, r3
   1cdc4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
   1cdc8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   1cdcc:	465a      	mov	r2, fp
   1cdce:	462b      	mov	r3, r5
   1cdd0:	a81a      	add	r0, sp, #104	; 0x68
   1cdd2:	f7ff f90d 	bl	1bff0 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
   1cdd6:	9b08      	ldr	r3, [sp, #32]
   1cdd8:	f003 0306 	and.w	r3, r3, #6
   1cddc:	2b06      	cmp	r3, #6
   1cdde:	d132      	bne.n	1ce46 <lv_draw_rect+0xc3e>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
   1cde0:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   1cde4:	18f2      	adds	r2, r6, r3
   1cde6:	eba8 0303 	sub.w	r3, r8, r3
   1cdea:	429a      	cmp	r2, r3
   1cdec:	dd13      	ble.n	1ce16 <lv_draw_rect+0xc0e>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
   1cdee:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
                lv_draw_fill(&circ_area, mask, color, opa);
   1cdf2:	9905      	ldr	r1, [sp, #20]
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
   1cdf4:	1aba      	subs	r2, r7, r2
   1cdf6:	b212      	sxth	r2, r2
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
   1cdf8:	b21b      	sxth	r3, r3
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
   1cdfa:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
   1cdfe:	4452      	add	r2, sl
   1ce00:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
   1ce04:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
   1ce08:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                lv_draw_fill(&circ_area, mask, color, opa);
   1ce0c:	465a      	mov	r2, fp
   1ce0e:	462b      	mov	r3, r5
   1ce10:	a81a      	add	r0, sp, #104	; 0x68
   1ce12:	f7ff f8ed 	bl	1bff0 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
   1ce16:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            lv_draw_fill(&circ_area, mask, color, opa);
   1ce1a:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
   1ce1c:	1afb      	subs	r3, r7, r3
   1ce1e:	b21b      	sxth	r3, r3
   1ce20:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
   1ce24:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
   1ce28:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   1ce2c:	eba8 0303 	sub.w	r3, r8, r3
   1ce30:	b21b      	sxth	r3, r3
   1ce32:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
   1ce36:	4423      	add	r3, r4
   1ce38:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   1ce3c:	465a      	mov	r2, fp
   1ce3e:	462b      	mov	r3, r5
   1ce40:	a81a      	add	r0, sp, #104	; 0x68
   1ce42:	f7ff f8d5 	bl	1bff0 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
   1ce46:	9b08      	ldr	r3, [sp, #32]
   1ce48:	f003 030a 	and.w	r3, r3, #10
   1ce4c:	2b0a      	cmp	r3, #10
   1ce4e:	d132      	bne.n	1ceb6 <lv_draw_rect+0xcae>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
   1ce50:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            lv_draw_fill(&circ_area, mask, color, opa);
   1ce54:	9905      	ldr	r1, [sp, #20]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
   1ce56:	444b      	add	r3, r9
   1ce58:	b21b      	sxth	r3, r3
   1ce5a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
   1ce5e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
   1ce62:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   1ce66:	eba8 0303 	sub.w	r3, r8, r3
   1ce6a:	b21b      	sxth	r3, r3
   1ce6c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
   1ce70:	449a      	add	sl, r3
            lv_draw_fill(&circ_area, mask, color, opa);
   1ce72:	465a      	mov	r2, fp
   1ce74:	462b      	mov	r3, r5
   1ce76:	a81a      	add	r0, sp, #104	; 0x68
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
   1ce78:	f8ad a06e 	strh.w	sl, [sp, #110]	; 0x6e
            lv_draw_fill(&circ_area, mask, color, opa);
   1ce7c:	f7ff f8b8 	bl	1bff0 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
   1ce80:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   1ce84:	18f2      	adds	r2, r6, r3
   1ce86:	eba8 0303 	sub.w	r3, r8, r3
   1ce8a:	429a      	cmp	r2, r3
   1ce8c:	dd13      	ble.n	1ceb6 <lv_draw_rect+0xcae>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
   1ce8e:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
                lv_draw_fill(&circ_area, mask, color, opa);
   1ce92:	9905      	ldr	r1, [sp, #20]
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
   1ce94:	444a      	add	r2, r9
   1ce96:	b212      	sxth	r2, r2
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
   1ce98:	b21b      	sxth	r3, r3
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
   1ce9a:	1b14      	subs	r4, r2, r4
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
   1ce9c:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
   1cea0:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
   1cea4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                lv_draw_fill(&circ_area, mask, color, opa);
   1cea8:	465a      	mov	r2, fp
   1ceaa:	462b      	mov	r3, r5
   1ceac:	a81a      	add	r0, sp, #104	; 0x68
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
   1ceae:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
                lv_draw_fill(&circ_area, mask, color, opa);
   1ceb2:	f7ff f89d 	bl	1bff0 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
   1ceb6:	a913      	add	r1, sp, #76	; 0x4c
   1ceb8:	a816      	add	r0, sp, #88	; 0x58
   1ceba:	f000 f89b 	bl	1cff4 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
   1cebe:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   1cec2:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
   1cec6:	429a      	cmp	r2, r3
   1cec8:	f6bf abdc 	bge.w	1c684 <lv_draw_rect+0x47c>
            lv_circ_next(&cir_in, &tmp_in);
   1cecc:	a914      	add	r1, sp, #80	; 0x50
   1cece:	a818      	add	r0, sp, #96	; 0x60
   1ced0:	f000 f890 	bl	1cff4 <lv_circ_next>
   1ced4:	f7ff bbd6 	b.w	1c684 <lv_draw_rect+0x47c>

0001ced8 <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
   1ced8:	b150      	cbz	r0, 1cef0 <lv_img_src_get_type+0x18>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
   1ceda:	7803      	ldrb	r3, [r0, #0]
   1cedc:	f1a3 0220 	sub.w	r2, r3, #32
   1cee0:	2a5f      	cmp	r2, #95	; 0x5f
   1cee2:	d907      	bls.n	1cef4 <lv_img_src_get_type+0x1c>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    } else if(u8_p[0] >= 0x80) {
   1cee4:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
   1cee8:	bf0c      	ite	eq
   1ceea:	2000      	moveq	r0, #0
   1ceec:	2002      	movne	r0, #2
   1ceee:	4770      	bx	lr
    if(src == NULL) return img_src_type;
   1cef0:	2003      	movs	r0, #3
   1cef2:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
   1cef4:	2001      	movs	r0, #1
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
   1cef6:	4770      	bx	lr

0001cef8 <lv_img_decoder_built_in_close>:
{
   1cef8:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1cefa:	6a0c      	ldr	r4, [r1, #32]
{
   1cefc:	460d      	mov	r5, r1
    if(user_data) {
   1cefe:	b144      	cbz	r4, 1cf12 <lv_img_decoder_built_in_close+0x1a>
        if(user_data->palette) lv_mem_free(user_data->palette);
   1cf00:	6820      	ldr	r0, [r4, #0]
   1cf02:	b108      	cbz	r0, 1cf08 <lv_img_decoder_built_in_close+0x10>
   1cf04:	f7f8 fcf0 	bl	158e8 <lv_mem_free>
        lv_mem_free(user_data);
   1cf08:	4620      	mov	r0, r4
   1cf0a:	f7f8 fced 	bl	158e8 <lv_mem_free>
        dsc->user_data = NULL;
   1cf0e:	2300      	movs	r3, #0
   1cf10:	622b      	str	r3, [r5, #32]
}
   1cf12:	bd38      	pop	{r3, r4, r5, pc}

0001cf14 <lv_img_decoder_close>:
{
   1cf14:	b510      	push	{r4, lr}
   1cf16:	4604      	mov	r4, r0
    if(dsc->decoder) {
   1cf18:	6800      	ldr	r0, [r0, #0]
   1cf1a:	b158      	cbz	r0, 1cf34 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
   1cf1c:	68c3      	ldr	r3, [r0, #12]
   1cf1e:	b10b      	cbz	r3, 1cf24 <lv_img_decoder_close+0x10>
   1cf20:	4621      	mov	r1, r4
   1cf22:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   1cf24:	7b23      	ldrb	r3, [r4, #12]
   1cf26:	2b01      	cmp	r3, #1
   1cf28:	d104      	bne.n	1cf34 <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
   1cf2a:	6860      	ldr	r0, [r4, #4]
   1cf2c:	f7f8 fcdc 	bl	158e8 <lv_mem_free>
            dsc->src = NULL;
   1cf30:	2300      	movs	r3, #0
   1cf32:	6063      	str	r3, [r4, #4]
}
   1cf34:	bd10      	pop	{r4, pc}

0001cf36 <lv_disp_drv_init>:
{
   1cf36:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
   1cf38:	2224      	movs	r2, #36	; 0x24
{
   1cf3a:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
   1cf3c:	2100      	movs	r1, #0
   1cf3e:	f7fb fea6 	bl	18c8e <memset>
    driver->flush_cb         = NULL;
   1cf42:	2300      	movs	r3, #0
    driver->hor_res          = LV_HOR_RES_MAX;
   1cf44:	f04f 12f0 	mov.w	r2, #15728880	; 0xf000f0
    driver->buffer           = NULL;
   1cf48:	e9c4 2300 	strd	r2, r3, [r4]
    driver->rotated          = 0;
   1cf4c:	7a22      	ldrb	r2, [r4, #8]
    driver->flush_cb         = NULL;
   1cf4e:	60e3      	str	r3, [r4, #12]
    driver->rotated          = 0;
   1cf50:	f363 0200 	bfi	r2, r3, #0, #1
   1cf54:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
   1cf56:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
    driver->user_data = NULL;
   1cf5a:	e9c4 2307 	strd	r2, r3, [r4, #28]
    driver->set_px_cb = NULL;
   1cf5e:	6163      	str	r3, [r4, #20]
}
   1cf60:	bd10      	pop	{r4, pc}

0001cf62 <lv_disp_buf_init>:
{
   1cf62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf64:	4604      	mov	r4, r0
   1cf66:	460d      	mov	r5, r1
   1cf68:	4617      	mov	r7, r2
   1cf6a:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
   1cf6c:	221c      	movs	r2, #28
   1cf6e:	2100      	movs	r1, #0
   1cf70:	f7fb fe8d 	bl	18c8e <memset>
    disp_buf->buf2    = buf2;
   1cf74:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->size    = size_in_px_cnt;
   1cf78:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
   1cf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cf7e <lv_disp_get_antialiasing>:
    if(disp == NULL) disp = lv_disp_get_default();
    if(disp == NULL) return false;

    return disp->driver.antialiasing ? true : false;
#endif
}
   1cf7e:	2000      	movs	r0, #0
   1cf80:	4770      	bx	lr

0001cf82 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   1cf82:	6842      	ldr	r2, [r0, #4]
   1cf84:	7e13      	ldrb	r3, [r2, #24]
   1cf86:	f36f 0300 	bfc	r3, #0, #1
   1cf8a:	7613      	strb	r3, [r2, #24]
}
   1cf8c:	4770      	bx	lr

0001cf8e <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   1cf8e:	6840      	ldr	r0, [r0, #4]
   1cf90:	4770      	bx	lr

0001cf92 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   1cf92:	6843      	ldr	r3, [r0, #4]
   1cf94:	6818      	ldr	r0, [r3, #0]
   1cf96:	b118      	cbz	r0, 1cfa0 <lv_disp_is_double_buf+0xe>
   1cf98:	6858      	ldr	r0, [r3, #4]
   1cf9a:	3000      	adds	r0, #0
   1cf9c:	bf18      	it	ne
   1cf9e:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
   1cfa0:	4770      	bx	lr

0001cfa2 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   1cfa2:	b508      	push	{r3, lr}
   1cfa4:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   1cfa6:	f7ff fff4 	bl	1cf92 <lv_disp_is_double_buf>
   1cfaa:	b140      	cbz	r0, 1cfbe <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   1cfac:	8853      	ldrh	r3, [r2, #2]
   1cfae:	8810      	ldrh	r0, [r2, #0]
   1cfb0:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   1cfb4:	6853      	ldr	r3, [r2, #4]
   1cfb6:	68db      	ldr	r3, [r3, #12]
   1cfb8:	1ac3      	subs	r3, r0, r3
   1cfba:	4258      	negs	r0, r3
   1cfbc:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
   1cfbe:	bd08      	pop	{r3, pc}

0001cfc0 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
   1cfc0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   1cfc2:	f000 ffed 	bl	1dfa0 <z_impl_k_uptime_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   1cfc6:	bd08      	pop	{r3, pc}

0001cfc8 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   1cfc8:	b510      	push	{r4, lr}
   1cfca:	4604      	mov	r4, r0
   1cfcc:	f000 ffe8 	bl	1dfa0 <z_impl_k_uptime_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   1cfd0:	1b00      	subs	r0, r0, r4
   1cfd2:	bd10      	pop	{r4, pc}

0001cfd4 <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
   1cfd4:	8002      	strh	r2, [r0, #0]
    c->y = 0;
   1cfd6:	2300      	movs	r3, #0
    *tmp = 1 - radius;
   1cfd8:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
   1cfdc:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
   1cfde:	800a      	strh	r2, [r1, #0]
}
   1cfe0:	4770      	bx	lr

0001cfe2 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
   1cfe2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   1cfe6:	f9b0 0000 	ldrsh.w	r0, [r0]
}
   1cfea:	4282      	cmp	r2, r0
   1cfec:	bfcc      	ite	gt
   1cfee:	2000      	movgt	r0, #0
   1cff0:	2001      	movle	r0, #1
   1cff2:	4770      	bx	lr

0001cff4 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
   1cff4:	8843      	ldrh	r3, [r0, #2]
   1cff6:	3301      	adds	r3, #1
   1cff8:	b21b      	sxth	r3, r3
   1cffa:	8043      	strh	r3, [r0, #2]

    if(*tmp <= 0) {
   1cffc:	f9b1 2000 	ldrsh.w	r2, [r1]
   1d000:	2a00      	cmp	r2, #0
        (*tmp) += 2 * c->y + 1; /*Change in decision criterion for y -> y+1*/
    } else {
        c->x--;
   1d002:	bfc1      	itttt	gt
   1d004:	8802      	ldrhgt	r2, [r0, #0]
   1d006:	f102 32ff 	addgt.w	r2, r2, #4294967295	; 0xffffffff
   1d00a:	b212      	sxthgt	r2, r2
   1d00c:	8002      	strhgt	r2, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
   1d00e:	bfc4      	itt	gt
   1d010:	1a9b      	subgt	r3, r3, r2
   1d012:	880a      	ldrhgt	r2, [r1, #0]
   1d014:	3201      	adds	r2, #1
   1d016:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1d01a:	800b      	strh	r3, [r1, #0]
    }
}
   1d01c:	4770      	bx	lr

0001d01e <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
   1d01e:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
   1d020:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
   1d024:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
   1d026:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
   1d028:	80c3      	strh	r3, [r0, #6]
}
   1d02a:	4770      	bx	lr

0001d02c <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   1d02c:	f9b0 3000 	ldrsh.w	r3, [r0]
   1d030:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   1d034:	1ad2      	subs	r2, r2, r3
   1d036:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   1d03a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   1d03e:	3301      	adds	r3, #1
   1d040:	1a18      	subs	r0, r3, r0

    return size;
}
   1d042:	fb02 0000 	mla	r0, r2, r0, r0
   1d046:	4770      	bx	lr

0001d048 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   1d048:	f9b1 3000 	ldrsh.w	r3, [r1]
{
   1d04c:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   1d04e:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   1d052:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   1d056:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   1d05a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   1d05e:	429d      	cmp	r5, r3
   1d060:	bfb8      	it	lt
   1d062:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   1d064:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   1d068:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   1d06a:	42a3      	cmp	r3, r4
   1d06c:	bfb8      	it	lt
   1d06e:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   1d070:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   1d074:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   1d078:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   1d07a:	42b4      	cmp	r4, r6
   1d07c:	bfa8      	it	ge
   1d07e:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   1d080:	428a      	cmp	r2, r1
   1d082:	bfa8      	it	ge
   1d084:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   1d086:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   1d088:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   1d08a:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   1d08c:	dc04      	bgt.n	1d098 <lv_area_intersect+0x50>
   1d08e:	4293      	cmp	r3, r2
   1d090:	bfcc      	ite	gt
   1d092:	2000      	movgt	r0, #0
   1d094:	2001      	movle	r0, #1
        union_ok = false;
    }

    return union_ok;
}
   1d096:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
   1d098:	2000      	movs	r0, #0
   1d09a:	e7fc      	b.n	1d096 <lv_area_intersect+0x4e>

0001d09c <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   1d09c:	f9b2 3000 	ldrsh.w	r3, [r2]
{
   1d0a0:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   1d0a2:	f9b1 4000 	ldrsh.w	r4, [r1]
   1d0a6:	42a3      	cmp	r3, r4
   1d0a8:	bfa8      	it	ge
   1d0aa:	4623      	movge	r3, r4
   1d0ac:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   1d0ae:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   1d0b2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   1d0b6:	42a3      	cmp	r3, r4
   1d0b8:	bfa8      	it	ge
   1d0ba:	4623      	movge	r3, r4
   1d0bc:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   1d0be:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   1d0c2:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   1d0c6:	42a3      	cmp	r3, r4
   1d0c8:	bfb8      	it	lt
   1d0ca:	4623      	movlt	r3, r4
   1d0cc:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   1d0ce:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   1d0d2:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   1d0d6:	4293      	cmp	r3, r2
   1d0d8:	bfb8      	it	lt
   1d0da:	4613      	movlt	r3, r2
   1d0dc:	80c3      	strh	r3, [r0, #6]
}
   1d0de:	bd10      	pop	{r4, pc}

0001d0e0 <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   1d0e0:	f9b0 2000 	ldrsh.w	r2, [r0]
   1d0e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   1d0e8:	429a      	cmp	r2, r3
   1d0ea:	dc14      	bgt.n	1d116 <lv_area_is_on+0x36>
   1d0ec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   1d0f0:	f9b1 3000 	ldrsh.w	r3, [r1]
   1d0f4:	429a      	cmp	r2, r3
   1d0f6:	db0e      	blt.n	1d116 <lv_area_is_on+0x36>
   1d0f8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   1d0fc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   1d100:	429a      	cmp	r2, r3
   1d102:	dc08      	bgt.n	1d116 <lv_area_is_on+0x36>
   1d104:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   1d108:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   1d10c:	4298      	cmp	r0, r3
   1d10e:	bfb4      	ite	lt
   1d110:	2000      	movlt	r0, #0
   1d112:	2001      	movge	r0, #1
   1d114:	4770      	bx	lr
        return true;
    } else {
        return false;
   1d116:	2000      	movs	r0, #0
    }
}
   1d118:	4770      	bx	lr

0001d11a <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   1d11a:	f9b0 2000 	ldrsh.w	r2, [r0]
   1d11e:	f9b1 3000 	ldrsh.w	r3, [r1]
   1d122:	429a      	cmp	r2, r3
   1d124:	db14      	blt.n	1d150 <lv_area_is_in+0x36>
   1d126:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   1d12a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   1d12e:	429a      	cmp	r2, r3
   1d130:	db0e      	blt.n	1d150 <lv_area_is_in+0x36>
   1d132:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   1d136:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   1d13a:	429a      	cmp	r2, r3
   1d13c:	dc08      	bgt.n	1d150 <lv_area_is_in+0x36>
   1d13e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   1d142:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   1d146:	4298      	cmp	r0, r3
   1d148:	bfcc      	ite	gt
   1d14a:	2000      	movgt	r0, #0
   1d14c:	2001      	movle	r0, #1
   1d14e:	4770      	bx	lr
    bool is_in = false;
   1d150:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
   1d152:	4770      	bx	lr

0001d154 <lv_task_create>:
{
   1d154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d158:	4680      	mov	r8, r0
   1d15a:	460f      	mov	r7, r1
   1d15c:	4616      	mov	r6, r2
   1d15e:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   1d160:	f7f8 fa6a 	bl	15638 <lv_task_create_basic>
    if(new_task == NULL) return NULL;
   1d164:	4604      	mov	r4, r0
   1d166:	b130      	cbz	r0, 1d176 <lv_task_create+0x22>
    task->task_cb = task_cb;
   1d168:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
   1d16c:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
   1d16e:	4631      	mov	r1, r6
   1d170:	f7f8 fb6e 	bl	15850 <lv_task_set_prio>
    new_task->user_data = user_data;
   1d174:	60e5      	str	r5, [r4, #12]
}
   1d176:	4620      	mov	r0, r4
   1d178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d17c <lv_task_ready>:
{
   1d17c:	b510      	push	{r4, lr}
   1d17e:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   1d180:	f7ff ff1e 	bl	1cfc0 <lv_tick_get>
   1d184:	6823      	ldr	r3, [r4, #0]
   1d186:	43db      	mvns	r3, r3
   1d188:	4403      	add	r3, r0
   1d18a:	6063      	str	r3, [r4, #4]
}
   1d18c:	bd10      	pop	{r4, pc}

0001d18e <lv_mem_init>:
}
   1d18e:	4770      	bx	lr

0001d190 <node_set_next.isra.0>:
 * Set the 'next node pointer' of a node
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
   1d190:	b507      	push	{r0, r1, r2, lr}
   1d192:	9201      	str	r2, [sp, #4]
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   1d194:	b149      	cbz	r1, 1d1aa <node_set_next.isra.0+0x1a>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
   1d196:	6800      	ldr	r0, [r0, #0]
   1d198:	3004      	adds	r0, #4
   1d19a:	4408      	add	r0, r1
   1d19c:	4611      	mov	r1, r2
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   1d19e:	2204      	movs	r2, #4
    if(next)
   1d1a0:	b131      	cbz	r1, 1d1b0 <node_set_next.isra.0+0x20>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   1d1a2:	eb0d 0102 	add.w	r1, sp, r2
   1d1a6:	f7fb fd48 	bl	18c3a <memcpy>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
}
   1d1aa:	b003      	add	sp, #12
   1d1ac:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
   1d1b0:	f7fb fd6d 	bl	18c8e <memset>
   1d1b4:	e7f9      	b.n	1d1aa <node_set_next.isra.0+0x1a>

0001d1b6 <node_set_prev.isra.2>:
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
   1d1b6:	b507      	push	{r0, r1, r2, lr}
   1d1b8:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   1d1ba:	b141      	cbz	r1, 1d1ce <node_set_prev.isra.2+0x18>
    if(prev)
   1d1bc:	6800      	ldr	r0, [r0, #0]
   1d1be:	4408      	add	r0, r1
   1d1c0:	4611      	mov	r1, r2
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   1d1c2:	2204      	movs	r2, #4
    if(prev)
   1d1c4:	b131      	cbz	r1, 1d1d4 <node_set_prev.isra.2+0x1e>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   1d1c6:	eb0d 0102 	add.w	r1, sp, r2
   1d1ca:	f7fb fd36 	bl	18c3a <memcpy>
}
   1d1ce:	b003      	add	sp, #12
   1d1d0:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
   1d1d4:	f7fb fd5b 	bl	18c8e <memset>
   1d1d8:	e7f9      	b.n	1d1ce <node_set_prev.isra.2+0x18>

0001d1da <lv_ll_init>:
    ll_p->head = NULL;
   1d1da:	2300      	movs	r3, #0
    ll_p->tail = NULL;
   1d1dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
    if(node_size & 0x3) {
   1d1e0:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
   1d1e2:	bf1c      	itt	ne
   1d1e4:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
   1d1e8:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
   1d1ea:	6001      	str	r1, [r0, #0]
}
   1d1ec:	4770      	bx	lr

0001d1ee <lv_ll_ins_head>:
{
   1d1ee:	b538      	push	{r3, r4, r5, lr}
   1d1f0:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   1d1f2:	6800      	ldr	r0, [r0, #0]
   1d1f4:	3008      	adds	r0, #8
   1d1f6:	f7f8 fb51 	bl	1589c <lv_mem_alloc>
    if(n_new != NULL) {
   1d1fa:	4605      	mov	r5, r0
   1d1fc:	b198      	cbz	r0, 1d226 <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   1d1fe:	4601      	mov	r1, r0
   1d200:	2200      	movs	r2, #0
   1d202:	4620      	mov	r0, r4
   1d204:	f7ff ffd7 	bl	1d1b6 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   1d208:	4629      	mov	r1, r5
   1d20a:	6862      	ldr	r2, [r4, #4]
   1d20c:	4620      	mov	r0, r4
   1d20e:	f7ff ffbf 	bl	1d190 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   1d212:	6861      	ldr	r1, [r4, #4]
   1d214:	b119      	cbz	r1, 1d21e <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
   1d216:	462a      	mov	r2, r5
   1d218:	4620      	mov	r0, r4
   1d21a:	f7ff ffcc 	bl	1d1b6 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   1d21e:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   1d220:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   1d222:	b903      	cbnz	r3, 1d226 <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
   1d224:	60a5      	str	r5, [r4, #8]
}
   1d226:	4628      	mov	r0, r5
   1d228:	bd38      	pop	{r3, r4, r5, pc}

0001d22a <lv_ll_ins_tail>:
{
   1d22a:	b538      	push	{r3, r4, r5, lr}
   1d22c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   1d22e:	6800      	ldr	r0, [r0, #0]
   1d230:	3008      	adds	r0, #8
   1d232:	f7f8 fb33 	bl	1589c <lv_mem_alloc>
    if(n_new == NULL) return NULL;
   1d236:	4605      	mov	r5, r0
   1d238:	b198      	cbz	r0, 1d262 <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   1d23a:	4601      	mov	r1, r0
   1d23c:	2200      	movs	r2, #0
   1d23e:	4620      	mov	r0, r4
   1d240:	f7ff ffa6 	bl	1d190 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
   1d244:	4629      	mov	r1, r5
   1d246:	68a2      	ldr	r2, [r4, #8]
   1d248:	4620      	mov	r0, r4
   1d24a:	f7ff ffb4 	bl	1d1b6 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   1d24e:	68a1      	ldr	r1, [r4, #8]
   1d250:	b119      	cbz	r1, 1d25a <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
   1d252:	462a      	mov	r2, r5
   1d254:	4620      	mov	r0, r4
   1d256:	f7ff ff9b 	bl	1d190 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   1d25a:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   1d25c:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   1d25e:	b903      	cbnz	r3, 1d262 <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
   1d260:	6065      	str	r5, [r4, #4]
}
   1d262:	4628      	mov	r0, r5
   1d264:	bd38      	pop	{r3, r4, r5, pc}

0001d266 <lv_ll_get_head>:
    if(ll_p != NULL) {
   1d266:	b100      	cbz	r0, 1d26a <lv_ll_get_head+0x4>
        head = ll_p->head;
   1d268:	6840      	ldr	r0, [r0, #4]
}
   1d26a:	4770      	bx	lr

0001d26c <lv_ll_get_tail>:
    if(ll_p != NULL) {
   1d26c:	b100      	cbz	r0, 1d270 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
   1d26e:	6880      	ldr	r0, [r0, #8]
}
   1d270:	4770      	bx	lr

0001d272 <lv_ll_get_next>:
{
   1d272:	b507      	push	{r0, r1, r2, lr}
    void * next = NULL;
   1d274:	2300      	movs	r3, #0
   1d276:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   1d278:	b138      	cbz	r0, 1d28a <lv_ll_get_next+0x18>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
   1d27a:	6803      	ldr	r3, [r0, #0]
   1d27c:	2204      	movs	r2, #4
   1d27e:	3304      	adds	r3, #4
   1d280:	4419      	add	r1, r3
   1d282:	eb0d 0002 	add.w	r0, sp, r2
   1d286:	f7fb fcd8 	bl	18c3a <memcpy>
}
   1d28a:	9801      	ldr	r0, [sp, #4]
   1d28c:	b003      	add	sp, #12
   1d28e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d292 <lv_ll_get_prev>:
{
   1d292:	b507      	push	{r0, r1, r2, lr}
    void * prev = NULL;
   1d294:	2300      	movs	r3, #0
   1d296:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   1d298:	b130      	cbz	r0, 1d2a8 <lv_ll_get_prev+0x16>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
   1d29a:	6803      	ldr	r3, [r0, #0]
   1d29c:	2204      	movs	r2, #4
   1d29e:	4419      	add	r1, r3
   1d2a0:	eb0d 0002 	add.w	r0, sp, r2
   1d2a4:	f7fb fcc9 	bl	18c3a <memcpy>
}
   1d2a8:	9801      	ldr	r0, [sp, #4]
   1d2aa:	b003      	add	sp, #12
   1d2ac:	f85d fb04 	ldr.w	pc, [sp], #4

0001d2b0 <lv_ll_ins_prev>:
{
   1d2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2b2:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
   1d2b4:	4605      	mov	r5, r0
   1d2b6:	b340      	cbz	r0, 1d30a <lv_ll_ins_prev+0x5a>
   1d2b8:	b349      	cbz	r1, 1d30e <lv_ll_ins_prev+0x5e>
    if(lv_ll_get_head(ll_p) == n_act) {
   1d2ba:	6843      	ldr	r3, [r0, #4]
   1d2bc:	4299      	cmp	r1, r3
   1d2be:	d103      	bne.n	1d2c8 <lv_ll_ins_prev+0x18>
}
   1d2c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
   1d2c4:	f7ff bf93 	b.w	1d1ee <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   1d2c8:	6800      	ldr	r0, [r0, #0]
   1d2ca:	3008      	adds	r0, #8
   1d2cc:	f7f8 fae6 	bl	1589c <lv_mem_alloc>
        if(n_new == NULL) return NULL;
   1d2d0:	4604      	mov	r4, r0
   1d2d2:	b1c0      	cbz	r0, 1d306 <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
   1d2d4:	4631      	mov	r1, r6
   1d2d6:	4628      	mov	r0, r5
   1d2d8:	f7ff ffdb 	bl	1d292 <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
   1d2dc:	4622      	mov	r2, r4
   1d2de:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
   1d2e0:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
   1d2e2:	4628      	mov	r0, r5
   1d2e4:	f7ff ff54 	bl	1d190 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
   1d2e8:	463a      	mov	r2, r7
   1d2ea:	4621      	mov	r1, r4
   1d2ec:	4628      	mov	r0, r5
   1d2ee:	f7ff ff62 	bl	1d1b6 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
   1d2f2:	4622      	mov	r2, r4
   1d2f4:	4631      	mov	r1, r6
   1d2f6:	4628      	mov	r0, r5
   1d2f8:	f7ff ff5d 	bl	1d1b6 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
   1d2fc:	4632      	mov	r2, r6
   1d2fe:	4621      	mov	r1, r4
   1d300:	4628      	mov	r0, r5
   1d302:	f7ff ff45 	bl	1d190 <node_set_next.isra.0>
}
   1d306:	4620      	mov	r0, r4
   1d308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
   1d30a:	4604      	mov	r4, r0
   1d30c:	e7fb      	b.n	1d306 <lv_ll_ins_prev+0x56>
   1d30e:	460c      	mov	r4, r1
   1d310:	e7f9      	b.n	1d306 <lv_ll_ins_prev+0x56>

0001d312 <lv_ll_rem>:
{
   1d312:	b570      	push	{r4, r5, r6, lr}
   1d314:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   1d316:	4604      	mov	r4, r0
   1d318:	b308      	cbz	r0, 1d35e <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
   1d31a:	6843      	ldr	r3, [r0, #4]
   1d31c:	4299      	cmp	r1, r3
   1d31e:	d10e      	bne.n	1d33e <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
   1d320:	4629      	mov	r1, r5
   1d322:	4620      	mov	r0, r4
   1d324:	f7ff ffa5 	bl	1d272 <lv_ll_get_next>
   1d328:	4601      	mov	r1, r0
   1d32a:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   1d32c:	b908      	cbnz	r0, 1d332 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
   1d32e:	60a0      	str	r0, [r4, #8]
}
   1d330:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
   1d332:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
   1d334:	4620      	mov	r0, r4
}
   1d336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
   1d33a:	f7ff bf3c 	b.w	1d1b6 <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
   1d33e:	6883      	ldr	r3, [r0, #8]
   1d340:	4299      	cmp	r1, r3
   1d342:	d10e      	bne.n	1d362 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
   1d344:	f7ff ffa5 	bl	1d292 <lv_ll_get_prev>
   1d348:	4601      	mov	r1, r0
   1d34a:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   1d34c:	b908      	cbnz	r0, 1d352 <lv_ll_rem+0x40>
            ll_p->head = NULL;
   1d34e:	6060      	str	r0, [r4, #4]
   1d350:	e7ee      	b.n	1d330 <lv_ll_rem+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
   1d352:	4620      	mov	r0, r4
   1d354:	2200      	movs	r2, #0
}
   1d356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
   1d35a:	f7ff bf19 	b.w	1d190 <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
   1d35e:	2900      	cmp	r1, #0
   1d360:	d0de      	beq.n	1d320 <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
   1d362:	4629      	mov	r1, r5
   1d364:	4620      	mov	r0, r4
   1d366:	f7ff ff94 	bl	1d292 <lv_ll_get_prev>
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
   1d36a:	4629      	mov	r1, r5
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
   1d36c:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
   1d36e:	4620      	mov	r0, r4
   1d370:	f7ff ff7f 	bl	1d272 <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
   1d374:	4631      	mov	r1, r6
   1d376:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
   1d378:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   1d37a:	4620      	mov	r0, r4
   1d37c:	f7ff ff08 	bl	1d190 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
   1d380:	4632      	mov	r2, r6
   1d382:	4629      	mov	r1, r5
   1d384:	e7d6      	b.n	1d334 <lv_ll_rem+0x22>

0001d386 <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   1d386:	4291      	cmp	r1, r2
{
   1d388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d38a:	4604      	mov	r4, r0
   1d38c:	460d      	mov	r5, r1
   1d38e:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
   1d390:	d022      	beq.n	1d3d8 <lv_ll_move_before+0x52>
    if(n_after != NULL)
   1d392:	b312      	cbz	r2, 1d3da <lv_ll_move_before+0x54>
        n_before = lv_ll_get_prev(ll_p, n_after);
   1d394:	4611      	mov	r1, r2
   1d396:	f7ff ff7c 	bl	1d292 <lv_ll_get_prev>
   1d39a:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   1d39c:	42ae      	cmp	r6, r5
   1d39e:	d01b      	beq.n	1d3d8 <lv_ll_move_before+0x52>
    lv_ll_rem(ll_p, n_act);
   1d3a0:	4629      	mov	r1, r5
   1d3a2:	4620      	mov	r0, r4
   1d3a4:	f7ff ffb5 	bl	1d312 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
   1d3a8:	462a      	mov	r2, r5
   1d3aa:	4631      	mov	r1, r6
   1d3ac:	4620      	mov	r0, r4
   1d3ae:	f7ff feef 	bl	1d190 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
   1d3b2:	4632      	mov	r2, r6
   1d3b4:	4629      	mov	r1, r5
   1d3b6:	4620      	mov	r0, r4
   1d3b8:	f7ff fefd 	bl	1d1b6 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
   1d3bc:	462a      	mov	r2, r5
   1d3be:	4639      	mov	r1, r7
   1d3c0:	4620      	mov	r0, r4
   1d3c2:	f7ff fef8 	bl	1d1b6 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
   1d3c6:	463a      	mov	r2, r7
   1d3c8:	4629      	mov	r1, r5
   1d3ca:	4620      	mov	r0, r4
   1d3cc:	f7ff fee0 	bl	1d190 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
   1d3d0:	b907      	cbnz	r7, 1d3d4 <lv_ll_move_before+0x4e>
   1d3d2:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
   1d3d4:	b906      	cbnz	r6, 1d3d8 <lv_ll_move_before+0x52>
   1d3d6:	6065      	str	r5, [r4, #4]
}
   1d3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
   1d3da:	b108      	cbz	r0, 1d3e0 <lv_ll_move_before+0x5a>
        tail = ll_p->tail;
   1d3dc:	6886      	ldr	r6, [r0, #8]
   1d3de:	e7dd      	b.n	1d39c <lv_ll_move_before+0x16>
    void * tail = NULL;
   1d3e0:	4606      	mov	r6, r0
   1d3e2:	e7db      	b.n	1d39c <lv_ll_move_before+0x16>

0001d3e4 <lv_txt_iso8859_1_size>:
}
   1d3e4:	2001      	movs	r0, #1
   1d3e6:	4770      	bx	lr

0001d3e8 <lv_txt_iso8859_1_next>:
    if(i == NULL) return txt[1]; /*Get the next char */
   1d3e8:	b909      	cbnz	r1, 1d3ee <lv_txt_iso8859_1_next+0x6>
   1d3ea:	7840      	ldrb	r0, [r0, #1]
   1d3ec:	4770      	bx	lr
    uint8_t letter = txt[*i];
   1d3ee:	680b      	ldr	r3, [r1, #0]
   1d3f0:	5cc0      	ldrb	r0, [r0, r3]
    (*i)++;
   1d3f2:	3301      	adds	r3, #1
   1d3f4:	600b      	str	r3, [r1, #0]
}
   1d3f6:	4770      	bx	lr

0001d3f8 <lv_txt_iso8859_1_prev>:
    if(i == NULL) return *(txt - 1); /*Get the prev. char */
   1d3f8:	b911      	cbnz	r1, 1d400 <lv_txt_iso8859_1_prev+0x8>
   1d3fa:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   1d3fe:	4770      	bx	lr
    (*i)--;
   1d400:	680b      	ldr	r3, [r1, #0]
   1d402:	3b01      	subs	r3, #1
   1d404:	600b      	str	r3, [r1, #0]
    return letter;
   1d406:	5cc0      	ldrb	r0, [r0, r3]
}
   1d408:	4770      	bx	lr

0001d40a <lv_txt_iso8859_1_get_byte_id>:
}
   1d40a:	4608      	mov	r0, r1
   1d40c:	4770      	bx	lr

0001d40e <lv_txt_iso8859_1_get_length>:
    return strlen(txt);
   1d40e:	f7fb bbf1 	b.w	18bf4 <strlen>

0001d412 <lv_txt_iso8859_1_get_char_id>:
   1d412:	4608      	mov	r0, r1
   1d414:	4770      	bx	lr

0001d416 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   1d416:	2923      	cmp	r1, #35	; 0x23
{
   1d418:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   1d41a:	d117      	bne.n	1d44c <lv_txt_is_cmd+0x36>
   1d41c:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   1d41e:	b91b      	cbnz	r3, 1d428 <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
   1d420:	2301      	movs	r3, #1
   1d422:	7003      	strb	r3, [r0, #0]
            ret    = true;
   1d424:	2001      	movs	r0, #1
   1d426:	e004      	b.n	1d432 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   1d428:	2b01      	cmp	r3, #1
   1d42a:	f04f 0000 	mov.w	r0, #0
   1d42e:	d109      	bne.n	1d444 <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
   1d430:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
   1d432:	7813      	ldrb	r3, [r2, #0]
   1d434:	2b01      	cmp	r3, #1
   1d436:	d104      	bne.n	1d442 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
   1d438:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   1d43a:	bf04      	itt	eq
   1d43c:	2102      	moveq	r1, #2
   1d43e:	7011      	strbeq	r1, [r2, #0]
        ret = true;
   1d440:	4618      	mov	r0, r3
}
   1d442:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
   1d444:	2b02      	cmp	r3, #2
   1d446:	d1f4      	bne.n	1d432 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
   1d448:	7010      	strb	r0, [r2, #0]
   1d44a:	e7eb      	b.n	1d424 <lv_txt_is_cmd+0xe>
    bool ret = false;
   1d44c:	2000      	movs	r0, #0
   1d44e:	e7f0      	b.n	1d432 <lv_txt_is_cmd+0x1c>

0001d450 <lv_txt_get_size>:
{
   1d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d454:	b087      	sub	sp, #28
    size_res->x = 0;
   1d456:	2500      	movs	r5, #0
{
   1d458:	9304      	str	r3, [sp, #16]
   1d45a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1d45e:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
   1d462:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
   1d466:	9303      	str	r3, [sp, #12]
   1d468:	4604      	mov	r4, r0
   1d46a:	4616      	mov	r6, r2
    size_res->x = 0;
   1d46c:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
   1d46e:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
   1d470:	4689      	mov	r9, r1
   1d472:	b1f9      	cbz	r1, 1d4b4 <lv_txt_get_size+0x64>
    if(font == NULL) return;
   1d474:	b1f2      	cbz	r2, 1d4b4 <lv_txt_get_size+0x64>
    uint8_t letter_height = lv_font_get_line_height(font);
   1d476:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1d478:	f013 0f02 	tst.w	r3, #2
   1d47c:	f647 4318 	movw	r3, #31768	; 0x7c18
   1d480:	bf18      	it	ne
   1d482:	469a      	movne	sl, r3
        size_res->y += line_space;
   1d484:	eb0b 0307 	add.w	r3, fp, r7
   1d488:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
   1d48a:	f819 3005 	ldrb.w	r3, [r9, r5]
   1d48e:	eb09 0805 	add.w	r8, r9, r5
   1d492:	b993      	cbnz	r3, 1d4ba <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   1d494:	b155      	cbz	r5, 1d4ac <lv_txt_get_size+0x5c>
   1d496:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   1d49a:	2b0a      	cmp	r3, #10
   1d49c:	d001      	beq.n	1d4a2 <lv_txt_get_size+0x52>
   1d49e:	2b0d      	cmp	r3, #13
   1d4a0:	d104      	bne.n	1d4ac <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
   1d4a2:	8862      	ldrh	r2, [r4, #2]
   1d4a4:	eb0b 0307 	add.w	r3, fp, r7
   1d4a8:	4413      	add	r3, r2
   1d4aa:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
   1d4ac:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1d4b0:	b9fb      	cbnz	r3, 1d4f2 <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
   1d4b2:	8067      	strh	r7, [r4, #2]
}
   1d4b4:	b007      	add	sp, #28
   1d4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1d4ba:	9b03      	ldr	r3, [sp, #12]
   1d4bc:	9300      	str	r3, [sp, #0]
   1d4be:	9a04      	ldr	r2, [sp, #16]
   1d4c0:	4653      	mov	r3, sl
   1d4c2:	4631      	mov	r1, r6
   1d4c4:	4640      	mov	r0, r8
   1d4c6:	f7f8 faaf 	bl	15a28 <lv_txt_get_next_line>
        size_res->y += line_space;
   1d4ca:	8863      	ldrh	r3, [r4, #2]
   1d4cc:	9a05      	ldr	r2, [sp, #20]
   1d4ce:	4413      	add	r3, r2
   1d4d0:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
   1d4d2:	9b03      	ldr	r3, [sp, #12]
   1d4d4:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1d4d6:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
   1d4d8:	9b04      	ldr	r3, [sp, #16]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1d4da:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
   1d4dc:	4632      	mov	r2, r6
   1d4de:	4640      	mov	r0, r8
   1d4e0:	f7f8 fa52 	bl	15988 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   1d4e4:	f9b4 3000 	ldrsh.w	r3, [r4]
   1d4e8:	4298      	cmp	r0, r3
   1d4ea:	bfb8      	it	lt
   1d4ec:	4618      	movlt	r0, r3
   1d4ee:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
   1d4f0:	e7cb      	b.n	1d48a <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
   1d4f2:	eba3 030b 	sub.w	r3, r3, fp
   1d4f6:	8063      	strh	r3, [r4, #2]
   1d4f8:	e7dc      	b.n	1d4b4 <lv_txt_get_size+0x64>

0001d4fa <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
   1d4fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d4fe:	9d08      	ldr	r5, [sp, #32]
   1d500:	4681      	mov	r9, r0
   1d502:	4688      	mov	r8, r1
   1d504:	4614      	mov	r4, r2
   1d506:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   1d508:	b90c      	cbnz	r4, 1d50e <lv_utils_bsearch+0x14>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
   1d50a:	4626      	mov	r6, r4
   1d50c:	e010      	b.n	1d530 <lv_utils_bsearch+0x36>
        middle += (n / 2) * size;
   1d50e:	0867      	lsrs	r7, r4, #1
   1d510:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
   1d514:	4631      	mov	r1, r6
   1d516:	4648      	mov	r0, r9
   1d518:	47a8      	blx	r5
   1d51a:	2800      	cmp	r0, #0
   1d51c:	dd07      	ble.n	1d52e <lv_utils_bsearch+0x34>
            n    = (n / 2) - ((n & 1) == 0);
   1d51e:	43e4      	mvns	r4, r4
   1d520:	f004 0401 	and.w	r4, r4, #1
   1d524:	1b3f      	subs	r7, r7, r4
            base = (middle += size);
   1d526:	eb06 080a 	add.w	r8, r6, sl
{
   1d52a:	463c      	mov	r4, r7
   1d52c:	e7ec      	b.n	1d508 <lv_utils_bsearch+0xe>
        } else if(c < 0) {
   1d52e:	d1fc      	bne.n	1d52a <lv_utils_bsearch+0x30>
}
   1d530:	4630      	mov	r0, r6
   1d532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d536 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
   1d536:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d538:	f7fe fc2a 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   1d53c:	7bc3      	ldrb	r3, [r0, #15]
   1d53e:	079b      	lsls	r3, r3, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d540:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   1d542:	d503      	bpl.n	1d54c <lv_label_dot_tmp_free+0x16>
   1d544:	6840      	ldr	r0, [r0, #4]
   1d546:	b108      	cbz	r0, 1d54c <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
   1d548:	f7f8 f9ce 	bl	158e8 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
   1d54c:	7be3      	ldrb	r3, [r4, #15]
   1d54e:	f36f 0341 	bfc	r3, #1, #1
   1d552:	73e3      	strb	r3, [r4, #15]
    ext->dot.tmp_ptr   = NULL;
   1d554:	2300      	movs	r3, #0
   1d556:	6063      	str	r3, [r4, #4]
}
   1d558:	bd10      	pop	{r4, pc}

0001d55a <lv_label_set_align>:
{
   1d55a:	b538      	push	{r3, r4, r5, lr}
   1d55c:	460c      	mov	r4, r1
   1d55e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d560:	f7fe fc16 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
   1d564:	7b83      	ldrb	r3, [r0, #14]
   1d566:	f3c3 1201 	ubfx	r2, r3, #4, #2
   1d56a:	42a2      	cmp	r2, r4
   1d56c:	d007      	beq.n	1d57e <lv_label_set_align+0x24>
    ext->align = align;
   1d56e:	f364 1305 	bfi	r3, r4, #4, #2
   1d572:	7383      	strb	r3, [r0, #14]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   1d574:	4628      	mov	r0, r5
}
   1d576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   1d57a:	f7fe b942 	b.w	1b802 <lv_obj_invalidate>
}
   1d57e:	bd38      	pop	{r3, r4, r5, pc}

0001d580 <lv_label_set_body_draw>:
{
   1d580:	b538      	push	{r3, r4, r5, lr}
   1d582:	460d      	mov	r5, r1
   1d584:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d586:	f7fe fc03 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
   1d58a:	7bc3      	ldrb	r3, [r0, #15]
   1d58c:	f003 0201 	and.w	r2, r3, #1
   1d590:	42aa      	cmp	r2, r5
   1d592:	d00a      	beq.n	1d5aa <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
   1d594:	f365 0300 	bfi	r3, r5, #0, #1
   1d598:	73c3      	strb	r3, [r0, #15]
    lv_obj_refresh_ext_draw_pad(label);
   1d59a:	4620      	mov	r0, r4
   1d59c:	f7fe f9c7 	bl	1b92e <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
   1d5a0:	4620      	mov	r0, r4
}
   1d5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
   1d5a6:	f7fe b92c 	b.w	1b802 <lv_obj_invalidate>
}
   1d5aa:	bd38      	pop	{r3, r4, r5, pc}

0001d5ac <lv_label_get_text>:
{
   1d5ac:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d5ae:	f7fe fbef 	bl	1bd90 <lv_obj_get_ext_attr>
}
   1d5b2:	6800      	ldr	r0, [r0, #0]
   1d5b4:	bd08      	pop	{r3, pc}

0001d5b6 <lv_label_get_long_mode>:
{
   1d5b6:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d5b8:	f7fe fbea 	bl	1bd90 <lv_obj_get_ext_attr>
    return ext->long_mode;
   1d5bc:	7b80      	ldrb	r0, [r0, #14]
}
   1d5be:	f000 0007 	and.w	r0, r0, #7
   1d5c2:	bd08      	pop	{r3, pc}

0001d5c4 <lv_label_get_align>:
{
   1d5c4:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d5c6:	f7fe fbe3 	bl	1bd90 <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
   1d5ca:	7b80      	ldrb	r0, [r0, #14]
   1d5cc:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
   1d5d0:	2803      	cmp	r0, #3
}
   1d5d2:	bf08      	it	eq
   1d5d4:	2000      	moveq	r0, #0
   1d5d6:	bd08      	pop	{r3, pc}

0001d5d8 <lv_label_design>:
{
   1d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK)
   1d5dc:	2a02      	cmp	r2, #2
{
   1d5de:	b08f      	sub	sp, #60	; 0x3c
   1d5e0:	4606      	mov	r6, r0
   1d5e2:	4689      	mov	r9, r1
    if(mode == LV_DESIGN_COVER_CHK)
   1d5e4:	f000 8102 	beq.w	1d7ec <lv_label_design+0x214>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   1d5e8:	2a00      	cmp	r2, #0
   1d5ea:	f040 80f8 	bne.w	1d7de <lv_label_design+0x206>
        const lv_style_t * style = lv_obj_get_style(label);
   1d5ee:	f7f6 fc6b 	bl	13ec8 <lv_obj_get_style>
   1d5f2:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
   1d5f4:	4630      	mov	r0, r6
   1d5f6:	f7fe fb6b 	bl	1bcd0 <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
   1d5fa:	a90a      	add	r1, sp, #40	; 0x28
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
   1d5fc:	4682      	mov	sl, r0
        lv_obj_get_coords(label, &coords);
   1d5fe:	4630      	mov	r0, r6
   1d600:	f7fe fa21 	bl	1ba46 <lv_obj_get_coords>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d604:	4630      	mov	r0, r6
   1d606:	f7fe fbc3 	bl	1bd90 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
   1d60a:	7bc3      	ldrb	r3, [r0, #15]
   1d60c:	07d9      	lsls	r1, r3, #31
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d60e:	4680      	mov	r8, r0
        if(ext->body_draw) {
   1d610:	d524      	bpl.n	1d65c <lv_label_design+0x84>
            lv_obj_get_coords(label, &bg);
   1d612:	a90c      	add	r1, sp, #48	; 0x30
   1d614:	4630      	mov	r0, r6
   1d616:	f7fe fa16 	bl	1ba46 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
   1d61a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   1d61c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1d620:	1a9b      	subs	r3, r3, r2
   1d622:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            bg.x2 += style->body.padding.right;
   1d626:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1d628:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1d62c:	4413      	add	r3, r2
   1d62e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            bg.y1 -= style->body.padding.top;
   1d632:	8c22      	ldrh	r2, [r4, #32]
   1d634:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1d638:	1a9b      	subs	r3, r3, r2
   1d63a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            bg.y2 += style->body.padding.bottom;
   1d63e:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   1d640:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
   1d644:	4630      	mov	r0, r6
            bg.y2 += style->body.padding.bottom;
   1d646:	4413      	add	r3, r2
   1d648:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
   1d64c:	f7fe fb40 	bl	1bcd0 <lv_obj_get_opa_scale>
   1d650:	4622      	mov	r2, r4
   1d652:	4603      	mov	r3, r0
   1d654:	4649      	mov	r1, r9
   1d656:	a80c      	add	r0, sp, #48	; 0x30
   1d658:	f7fe fdd6 	bl	1c208 <lv_draw_rect>
        lv_label_align_t align = lv_label_get_align(label);
   1d65c:	4630      	mov	r0, r6
   1d65e:	f7ff ffb1 	bl	1d5c4 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1d662:	f898 300e 	ldrb.w	r3, [r8, #14]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1d666:	061a      	lsls	r2, r3, #24
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1d668:	f3c3 1580 	ubfx	r5, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1d66c:	bf48      	it	mi
   1d66e:	f045 0502 	orrmi.w	r5, r5, #2
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1d672:	2801      	cmp	r0, #1
   1d674:	f040 80b5 	bne.w	1d7e2 <lv_label_design+0x20a>
   1d678:	f045 0504 	orr.w	r5, r5, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   1d67c:	f003 0207 	and.w	r2, r3, #7
   1d680:	3a03      	subs	r2, #3
   1d682:	2a01      	cmp	r2, #1
   1d684:	d81d      	bhi.n	1d6c2 <lv_label_design+0xea>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   1d686:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   1d68a:	2b10      	cmp	r3, #16
   1d68c:	d001      	beq.n	1d692 <lv_label_design+0xba>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   1d68e:	2b20      	cmp	r3, #32
   1d690:	d117      	bne.n	1d6c2 <lv_label_design+0xea>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
   1d692:	f647 4218 	movw	r2, #31768	; 0x7c18
   1d696:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
   1d69a:	9502      	str	r5, [sp, #8]
   1d69c:	9201      	str	r2, [sp, #4]
   1d69e:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
   1d6a2:	9200      	str	r2, [sp, #0]
   1d6a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1d6a6:	f8d8 1000 	ldr.w	r1, [r8]
   1d6aa:	a80c      	add	r0, sp, #48	; 0x30
   1d6ac:	f7ff fed0 	bl	1d450 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
   1d6b0:	4630      	mov	r0, r6
   1d6b2:	f9bd 7030 	ldrsh.w	r7, [sp, #48]	; 0x30
   1d6b6:	f7fe fafd 	bl	1bcb4 <lv_obj_get_width>
   1d6ba:	4287      	cmp	r7, r0
                flag &= ~LV_TXT_FLAG_CENTER;
   1d6bc:	bfc8      	it	gt
   1d6be:	f005 05f3 	andgt.w	r5, r5, #243	; 0xf3
        sel.start = lv_label_get_text_sel_start(label);
   1d6c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d6c6:	9308      	str	r3, [sp, #32]
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset, &sel, hint, lv_obj_get_base_dir(label));
   1d6c8:	4643      	mov	r3, r8
   1d6ca:	4630      	mov	r0, r6
   1d6cc:	f853 2b0a 	ldr.w	r2, [r3], #10
   1d6d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d6d4:	f7fe fafa 	bl	1bccc <lv_obj_get_base_dir>
   1d6d8:	9b07      	ldr	r3, [sp, #28]
   1d6da:	9a06      	ldr	r2, [sp, #24]
   1d6dc:	9005      	str	r0, [sp, #20]
   1d6de:	f04f 0b00 	mov.w	fp, #0
   1d6e2:	af08      	add	r7, sp, #32
   1d6e4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1d6e8:	9200      	str	r2, [sp, #0]
   1d6ea:	4653      	mov	r3, sl
   1d6ec:	f8cd b010 	str.w	fp, [sp, #16]
   1d6f0:	9703      	str	r7, [sp, #12]
   1d6f2:	4622      	mov	r2, r4
   1d6f4:	4649      	mov	r1, r9
   1d6f6:	a80a      	add	r0, sp, #40	; 0x28
   1d6f8:	f7f7 fa04 	bl	14b04 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   1d6fc:	f898 300e 	ldrb.w	r3, [r8, #14]
   1d700:	f003 0307 	and.w	r3, r3, #7
   1d704:	2b04      	cmp	r3, #4
   1d706:	d16a      	bne.n	1d7de <lv_label_design+0x206>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
   1d708:	f647 4218 	movw	r2, #31768	; 0x7c18
   1d70c:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
   1d710:	9502      	str	r5, [sp, #8]
   1d712:	9201      	str	r2, [sp, #4]
   1d714:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
   1d718:	9200      	str	r2, [sp, #0]
   1d71a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1d71c:	f8d8 1000 	ldr.w	r1, [r8]
   1d720:	a809      	add	r0, sp, #36	; 0x24
   1d722:	f7ff fe95 	bl	1d450 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
   1d726:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
   1d72a:	9306      	str	r3, [sp, #24]
   1d72c:	4630      	mov	r0, r6
   1d72e:	f7fe fac1 	bl	1bcb4 <lv_obj_get_width>
   1d732:	9b06      	ldr	r3, [sp, #24]
   1d734:	4283      	cmp	r3, r0
   1d736:	dd29      	ble.n	1d78c <lv_label_design+0x1b4>
                ofs.x = ext->offset.x + size.x +
   1d738:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   1d73c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1d740:	2220      	movs	r2, #32
                ofs.x = ext->offset.x + size.x +
   1d742:	4403      	add	r3, r0
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1d744:	4611      	mov	r1, r2
                ofs.x = ext->offset.x + size.x +
   1d746:	b21b      	sxth	r3, r3
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1d748:	6b60      	ldr	r0, [r4, #52]	; 0x34
                ofs.x = ext->offset.x + size.x +
   1d74a:	9306      	str	r3, [sp, #24]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1d74c:	f000 f8f6 	bl	1d93c <lv_font_get_glyph_width>
                ofs.x = ext->offset.x + size.x +
   1d750:	9b06      	ldr	r3, [sp, #24]
   1d752:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1d756:	4403      	add	r3, r0
   1d758:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                ofs.y = ext->offset.y;
   1d75c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   1d760:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   1d764:	4630      	mov	r0, r6
   1d766:	f8d8 3000 	ldr.w	r3, [r8]
   1d76a:	9306      	str	r3, [sp, #24]
   1d76c:	f7fe faae 	bl	1bccc <lv_obj_get_base_dir>
   1d770:	aa0c      	add	r2, sp, #48	; 0x30
   1d772:	9b06      	ldr	r3, [sp, #24]
   1d774:	9300      	str	r3, [sp, #0]
   1d776:	e9cd b004 	strd	fp, r0, [sp, #16]
   1d77a:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1d77e:	9703      	str	r7, [sp, #12]
   1d780:	4653      	mov	r3, sl
   1d782:	4622      	mov	r2, r4
   1d784:	4649      	mov	r1, r9
   1d786:	a80a      	add	r0, sp, #40	; 0x28
   1d788:	f7f7 f9bc 	bl	14b04 <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
   1d78c:	4630      	mov	r0, r6
   1d78e:	f9bd 7026 	ldrsh.w	r7, [sp, #38]	; 0x26
   1d792:	f7fe fa95 	bl	1bcc0 <lv_obj_get_height>
   1d796:	4287      	cmp	r7, r0
   1d798:	dd21      	ble.n	1d7de <lv_label_design+0x206>
                ofs.x = ext->offset.x;
   1d79a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1d79e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   1d7a2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1d7a6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   1d7aa:	f8d8 7000 	ldr.w	r7, [r8]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   1d7ae:	441a      	add	r2, r3
   1d7b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d7b2:	7a1b      	ldrb	r3, [r3, #8]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   1d7b4:	4630      	mov	r0, r6
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   1d7b6:	4413      	add	r3, r2
   1d7b8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   1d7bc:	f7fe fa86 	bl	1bccc <lv_obj_get_base_dir>
   1d7c0:	2300      	movs	r3, #0
   1d7c2:	9304      	str	r3, [sp, #16]
   1d7c4:	ab08      	add	r3, sp, #32
   1d7c6:	9303      	str	r3, [sp, #12]
   1d7c8:	ab0c      	add	r3, sp, #48	; 0x30
   1d7ca:	9005      	str	r0, [sp, #20]
   1d7cc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1d7d0:	9700      	str	r7, [sp, #0]
   1d7d2:	4653      	mov	r3, sl
   1d7d4:	4622      	mov	r2, r4
   1d7d6:	4649      	mov	r1, r9
   1d7d8:	a80a      	add	r0, sp, #40	; 0x28
   1d7da:	f7f7 f993 	bl	14b04 <lv_draw_label>
    return true;
   1d7de:	2001      	movs	r0, #1
   1d7e0:	e005      	b.n	1d7ee <lv_label_design+0x216>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   1d7e2:	2802      	cmp	r0, #2
   1d7e4:	bf08      	it	eq
   1d7e6:	f045 0508 	orreq.w	r5, r5, #8
   1d7ea:	e747      	b.n	1d67c <lv_label_design+0xa4>
        return false;
   1d7ec:	2000      	movs	r0, #0
}
   1d7ee:	b00f      	add	sp, #60	; 0x3c
   1d7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d7f4 <lv_label_get_recolor>:
{
   1d7f4:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d7f6:	f7fe facb 	bl	1bd90 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
   1d7fa:	7b80      	ldrb	r0, [r0, #14]
}
   1d7fc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d800:	bd08      	pop	{r3, pc}

0001d802 <lv_label_get_body_draw>:
{
   1d802:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d804:	f7fe fac4 	bl	1bd90 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
   1d808:	7bc0      	ldrb	r0, [r0, #15]
}
   1d80a:	f000 0001 	and.w	r0, r0, #1
   1d80e:	bd08      	pop	{r3, pc}

0001d810 <lv_label_set_text>:
{
   1d810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d814:	4607      	mov	r7, r0
   1d816:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
   1d818:	f7fd fff3 	bl	1b802 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d81c:	4638      	mov	r0, r7
   1d81e:	f7fe fab7 	bl	1bd90 <lv_obj_get_ext_attr>
   1d822:	4604      	mov	r4, r0
    if(text == NULL) {
   1d824:	b925      	cbnz	r5, 1d830 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
   1d826:	4638      	mov	r0, r7
}
   1d828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_label_refr_text(label);
   1d82c:	f7f8 bb64 	b.w	15ef8 <lv_label_refr_text>
    if(ext->text == text) {
   1d830:	6806      	ldr	r6, [r0, #0]
   1d832:	42ae      	cmp	r6, r5
   1d834:	d10b      	bne.n	1d84e <lv_label_set_text+0x3e>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   1d836:	4630      	mov	r0, r6
   1d838:	f7fb f9dc 	bl	18bf4 <strlen>
   1d83c:	1c41      	adds	r1, r0, #1
   1d83e:	4630      	mov	r0, r6
   1d840:	f7f8 f870 	bl	15924 <lv_mem_realloc>
   1d844:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   1d846:	2800      	cmp	r0, #0
   1d848:	d1ed      	bne.n	1d826 <lv_label_set_text+0x16>
}
   1d84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        size_t len = strlen(text) + 1;
   1d84e:	4628      	mov	r0, r5
   1d850:	f7fb f9d0 	bl	18bf4 <strlen>
   1d854:	f100 0801 	add.w	r8, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
   1d858:	6820      	ldr	r0, [r4, #0]
   1d85a:	b130      	cbz	r0, 1d86a <lv_label_set_text+0x5a>
   1d85c:	7ba3      	ldrb	r3, [r4, #14]
   1d85e:	f013 0608 	ands.w	r6, r3, #8
   1d862:	d102      	bne.n	1d86a <lv_label_set_text+0x5a>
            lv_mem_free(ext->text);
   1d864:	f7f8 f840 	bl	158e8 <lv_mem_free>
            ext->text = NULL;
   1d868:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
   1d86a:	4640      	mov	r0, r8
   1d86c:	f7f8 f816 	bl	1589c <lv_mem_alloc>
   1d870:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   1d872:	2800      	cmp	r0, #0
   1d874:	d0e9      	beq.n	1d84a <lv_label_set_text+0x3a>
        strcpy(ext->text, text);
   1d876:	4629      	mov	r1, r5
   1d878:	f7fb f991 	bl	18b9e <strcpy>
        ext->static_txt = 0;
   1d87c:	7ba3      	ldrb	r3, [r4, #14]
   1d87e:	f36f 03c3 	bfc	r3, #3, #1
   1d882:	73a3      	strb	r3, [r4, #14]
   1d884:	e7cf      	b.n	1d826 <lv_label_set_text+0x16>

0001d886 <lv_label_set_static_text>:
{
   1d886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d888:	4607      	mov	r7, r0
   1d88a:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d88c:	f7fe fa80 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
   1d890:	7b83      	ldrb	r3, [r0, #14]
   1d892:	f013 0508 	ands.w	r5, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d896:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
   1d898:	d104      	bne.n	1d8a4 <lv_label_set_static_text+0x1e>
   1d89a:	6800      	ldr	r0, [r0, #0]
   1d89c:	b110      	cbz	r0, 1d8a4 <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
   1d89e:	f7f8 f823 	bl	158e8 <lv_mem_free>
        ext->text = NULL;
   1d8a2:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
   1d8a4:	b126      	cbz	r6, 1d8b0 <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
   1d8a6:	7ba3      	ldrb	r3, [r4, #14]
        ext->text       = (char *)text;
   1d8a8:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
   1d8aa:	f043 0308 	orr.w	r3, r3, #8
   1d8ae:	73a3      	strb	r3, [r4, #14]
    lv_label_refr_text(label);
   1d8b0:	4638      	mov	r0, r7
}
   1d8b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
   1d8b6:	f7f8 bb1f 	b.w	15ef8 <lv_label_refr_text>

0001d8ba <lv_label_set_long_mode>:
{
   1d8ba:	b570      	push	{r4, r5, r6, lr}
   1d8bc:	460e      	mov	r6, r1
   1d8be:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d8c0:	f7fe fa66 	bl	1bd90 <lv_obj_get_ext_attr>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   1d8c4:	1ef2      	subs	r2, r6, #3
    ext->offset.x = 0;
   1d8c6:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   1d8c8:	2a02      	cmp	r2, #2
    ext->offset.x = 0;
   1d8ca:	8143      	strh	r3, [r0, #10]
    ext->offset.y = 0;
   1d8cc:	8183      	strh	r3, [r0, #12]
   1d8ce:	7b83      	ldrb	r3, [r0, #14]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   1d8d0:	bf8c      	ite	hi
   1d8d2:	2200      	movhi	r2, #0
   1d8d4:	2201      	movls	r2, #1
   1d8d6:	f362 13c7 	bfi	r3, r2, #7, #1
   1d8da:	7383      	strb	r3, [r0, #14]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   1d8dc:	f003 0307 	and.w	r3, r3, #7
   1d8e0:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d8e2:	4604      	mov	r4, r0
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   1d8e4:	d107      	bne.n	1d8f6 <lv_label_set_long_mode+0x3c>
   1d8e6:	8902      	ldrh	r2, [r0, #8]
   1d8e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d8ec:	429a      	cmp	r2, r3
   1d8ee:	d002      	beq.n	1d8f6 <lv_label_set_long_mode+0x3c>
        lv_label_revert_dots(label);
   1d8f0:	4628      	mov	r0, r5
   1d8f2:	f7f8 f9a5 	bl	15c40 <lv_label_revert_dots>
    ext->long_mode = long_mode;
   1d8f6:	7ba3      	ldrb	r3, [r4, #14]
   1d8f8:	f366 0302 	bfi	r3, r6, #0, #3
   1d8fc:	73a3      	strb	r3, [r4, #14]
    lv_label_refr_text(label);
   1d8fe:	4628      	mov	r0, r5
}
   1d900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
   1d904:	f7f8 baf8 	b.w	15ef8 <lv_label_refr_text>

0001d908 <lv_label_set_recolor>:
{
   1d908:	b538      	push	{r3, r4, r5, lr}
   1d90a:	460c      	mov	r4, r1
   1d90c:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1d90e:	f7fe fa3f 	bl	1bd90 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
   1d912:	7b83      	ldrb	r3, [r0, #14]
   1d914:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1d918:	42a2      	cmp	r2, r4
   1d91a:	d007      	beq.n	1d92c <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
   1d91c:	f364 1386 	bfi	r3, r4, #6, #1
   1d920:	7383      	strb	r3, [r0, #14]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
   1d922:	4628      	mov	r0, r5
}
   1d924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
   1d928:	f7f8 bae6 	b.w	15ef8 <lv_label_refr_text>
}
   1d92c:	bd38      	pop	{r3, r4, r5, pc}

0001d92e <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
   1d92e:	6843      	ldr	r3, [r0, #4]
   1d930:	4718      	bx	r3

0001d932 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
   1d932:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   1d934:	6804      	ldr	r4, [r0, #0]
   1d936:	46a4      	mov	ip, r4
}
   1d938:	bc10      	pop	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   1d93a:	4760      	bx	ip

0001d93c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
   1d93c:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
   1d93e:	4613      	mov	r3, r2
   1d940:	460a      	mov	r2, r1
   1d942:	4669      	mov	r1, sp
   1d944:	f7ff fff5 	bl	1d932 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
   1d948:	b108      	cbz	r0, 1d94e <lv_font_get_glyph_width+0x12>
   1d94a:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
   1d94e:	b003      	add	sp, #12
   1d950:	f85d fb04 	ldr.w	pc, [sp], #4

0001d954 <kern_pair_8_compare>:
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   1d954:	7803      	ldrb	r3, [r0, #0]
   1d956:	780a      	ldrb	r2, [r1, #0]
   1d958:	4293      	cmp	r3, r2
   1d95a:	bf11      	iteee	ne
   1d95c:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   1d95e:	784b      	ldrbeq	r3, [r1, #1]
   1d960:	7840      	ldrbeq	r0, [r0, #1]
   1d962:	1ac0      	subeq	r0, r0, r3
}
   1d964:	4770      	bx	lr

0001d966 <kern_pair_16_compare>:
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   1d966:	8803      	ldrh	r3, [r0, #0]
   1d968:	880a      	ldrh	r2, [r1, #0]
   1d96a:	4293      	cmp	r3, r2
   1d96c:	bf11      	iteee	ne
   1d96e:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   1d970:	884b      	ldrheq	r3, [r1, #2]
   1d972:	8840      	ldrheq	r0, [r0, #2]
   1d974:	1ac0      	subeq	r0, r0, r3
}
   1d976:	4770      	bx	lr

0001d978 <get_bits>:
{
   1d978:	b510      	push	{r4, lr}
    uint32_t byte_pos = bit_pos >> 3;
   1d97a:	08cb      	lsrs	r3, r1, #3
    bit_pos = bit_pos & 0x7;
   1d97c:	f001 0107 	and.w	r1, r1, #7
    uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   1d980:	5cc4      	ldrb	r4, [r0, r3]
   1d982:	4418      	add	r0, r3
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1d984:	2301      	movs	r3, #1
    uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   1d986:	7840      	ldrb	r0, [r0, #1]
   1d988:	eb00 2004 	add.w	r0, r0, r4, lsl #8
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
   1d98c:	f1c2 0410 	rsb	r4, r2, #16
   1d990:	1a61      	subs	r1, r4, r1
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1d992:	4093      	lsls	r3, r2
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
   1d994:	b280      	uxth	r0, r0
   1d996:	4108      	asrs	r0, r1
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1d998:	3b01      	subs	r3, #1
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
   1d99a:	4018      	ands	r0, r3
}
   1d99c:	b2c0      	uxtb	r0, r0
   1d99e:	bd10      	pop	{r4, pc}

0001d9a0 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
   1d9a0:	8800      	ldrh	r0, [r0, #0]
   1d9a2:	880b      	ldrh	r3, [r1, #0]
}
   1d9a4:	1ac0      	subs	r0, r0, r3
   1d9a6:	4770      	bx	lr

0001d9a8 <arch_system_halt>:
	__asm__ volatile(
   1d9a8:	f04f 0220 	mov.w	r2, #32
   1d9ac:	f3ef 8311 	mrs	r3, BASEPRI
   1d9b0:	f382 8811 	msr	BASEPRI, r2
   1d9b4:	f3bf 8f6f 	isb	sy
	}
   1d9b8:	e7fe      	b.n	1d9b8 <arch_system_halt+0x10>

0001d9ba <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1d9ba:	f7fb b8da 	b.w	18b72 <z_clock_idle_exit>

0001d9be <k_mem_slab_init>:
{
   1d9be:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1d9c0:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1d9c2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   1d9c6:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1d9ca:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d9cc:	42a3      	cmp	r3, r4
   1d9ce:	d102      	bne.n	1d9d6 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   1d9d0:	e9c0 0000 	strd	r0, r0, [r0]
}
   1d9d4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1d9d6:	6945      	ldr	r5, [r0, #20]
   1d9d8:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d9da:	3401      	adds	r4, #1
		slab->free_list = p;
   1d9dc:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1d9de:	4411      	add	r1, r2
   1d9e0:	e7f4      	b.n	1d9cc <k_mem_slab_init+0xe>

0001d9e2 <k_mem_pool_malloc>:
{
   1d9e2:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d9e4:	2404      	movs	r4, #4
   1d9e6:	190a      	adds	r2, r1, r4
   1d9e8:	d204      	bcs.n	1d9f4 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1d9ea:	2300      	movs	r3, #0
   1d9ec:	4669      	mov	r1, sp
   1d9ee:	f7f9 f8ff 	bl	16bf0 <k_mem_pool_alloc>
   1d9f2:	b110      	cbz	r0, 1d9fa <k_mem_pool_malloc+0x18>
		return NULL;
   1d9f4:	2000      	movs	r0, #0
}
   1d9f6:	b002      	add	sp, #8
   1d9f8:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1d9fa:	4622      	mov	r2, r4
   1d9fc:	a901      	add	r1, sp, #4
   1d9fe:	9800      	ldr	r0, [sp, #0]
   1da00:	f7fb f91b 	bl	18c3a <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1da04:	9800      	ldr	r0, [sp, #0]
   1da06:	3004      	adds	r0, #4
   1da08:	e7f5      	b.n	1d9f6 <k_mem_pool_malloc+0x14>

0001da0a <k_free>:
	if (ptr != NULL) {
   1da0a:	b110      	cbz	r0, 1da12 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1da0c:	3804      	subs	r0, #4
   1da0e:	f7f9 b93b 	b.w	16c88 <k_mem_pool_free_id>
}
   1da12:	4770      	bx	lr

0001da14 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1da14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da18:	4604      	mov	r4, r0
   1da1a:	460f      	mov	r7, r1
   1da1c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1da1e:	f100 0508 	add.w	r5, r0, #8
   1da22:	f04f 0220 	mov.w	r2, #32
   1da26:	f3ef 8611 	mrs	r6, BASEPRI
   1da2a:	f382 8811 	msr	BASEPRI, r2
   1da2e:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1da32:	b1db      	cbz	r3, 1da6c <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1da34:	2008      	movs	r0, #8
   1da36:	f7f9 f959 	bl	16cec <z_thread_malloc>
		if (anode == NULL) {
   1da3a:	b938      	cbnz	r0, 1da4c <queue_insert+0x38>
	__asm__ volatile(
   1da3c:	f386 8811 	msr	BASEPRI, r6
   1da40:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1da44:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1da48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1da4c:	2301      	movs	r3, #1
		anode->data = data;
   1da4e:	f8c0 8004 	str.w	r8, [r0, #4]
   1da52:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1da54:	6803      	ldr	r3, [r0, #0]
   1da56:	f003 0203 	and.w	r2, r3, #3
   1da5a:	b95f      	cbnz	r7, 1da74 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1da5c:	6823      	ldr	r3, [r4, #0]
   1da5e:	4313      	orrs	r3, r2
   1da60:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1da62:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1da64:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1da66:	b973      	cbnz	r3, 1da86 <queue_insert+0x72>
	list->tail = node;
   1da68:	6060      	str	r0, [r4, #4]
   1da6a:	e00c      	b.n	1da86 <queue_insert+0x72>
	node->next_and_flags = flags;
   1da6c:	f8c8 3000 	str.w	r3, [r8]
   1da70:	4640      	mov	r0, r8
   1da72:	e7ef      	b.n	1da54 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1da74:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1da76:	f033 0303 	bics.w	r3, r3, #3
   1da7a:	d114      	bne.n	1daa6 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1da7c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1da7e:	6862      	ldr	r2, [r4, #4]
   1da80:	b95a      	cbnz	r2, 1da9a <queue_insert+0x86>
	list->head = node;
   1da82:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1da86:	2104      	movs	r1, #4
   1da88:	4628      	mov	r0, r5
   1da8a:	f000 fbbc 	bl	1e206 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1da8e:	4628      	mov	r0, r5
   1da90:	4631      	mov	r1, r6
   1da92:	f000 f8ed 	bl	1dc70 <z_reschedule>
	return 0;
   1da96:	2000      	movs	r0, #0
   1da98:	e7d6      	b.n	1da48 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1da9a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1da9c:	f003 0303 	and.w	r3, r3, #3
   1daa0:	4303      	orrs	r3, r0
   1daa2:	6013      	str	r3, [r2, #0]
   1daa4:	e7e0      	b.n	1da68 <queue_insert+0x54>
   1daa6:	4313      	orrs	r3, r2
   1daa8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1daaa:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1daac:	f003 0303 	and.w	r3, r3, #3
   1dab0:	4318      	orrs	r0, r3
   1dab2:	6038      	str	r0, [r7, #0]
   1dab4:	e7e7      	b.n	1da86 <queue_insert+0x72>

0001dab6 <z_queue_node_peek>:
{
   1dab6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1dab8:	4604      	mov	r4, r0
   1daba:	b130      	cbz	r0, 1daca <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dabc:	6802      	ldr	r2, [r0, #0]
   1dabe:	0793      	lsls	r3, r2, #30
   1dac0:	d003      	beq.n	1daca <z_queue_node_peek+0x14>
		ret = anode->data;
   1dac2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1dac4:	b109      	cbz	r1, 1daca <z_queue_node_peek+0x14>
			k_free(anode);
   1dac6:	f7ff ffa0 	bl	1da0a <k_free>
}
   1daca:	4620      	mov	r0, r4
   1dacc:	bd10      	pop	{r4, pc}

0001dace <z_impl_k_queue_init>:
	list->head = NULL;
   1dace:	2300      	movs	r3, #0
	list->tail = NULL;
   1dad0:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1dad4:	f100 0308 	add.w	r3, r0, #8
   1dad8:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1dadc:	4770      	bx	lr

0001dade <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1dade:	460a      	mov	r2, r1
   1dae0:	2300      	movs	r3, #0
   1dae2:	6841      	ldr	r1, [r0, #4]
   1dae4:	f7ff bf96 	b.w	1da14 <queue_insert>

0001dae8 <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   1dae8:	2300      	movs	r3, #0
   1daea:	460a      	mov	r2, r1
   1daec:	4619      	mov	r1, r3
   1daee:	f7ff bf91 	b.w	1da14 <queue_insert>

0001daf2 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1daf2:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(head && tail, "invalid head or tail");

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1daf4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1daf8:	f04f 0320 	mov.w	r3, #32
   1dafc:	f3ef 8611 	mrs	r6, BASEPRI
   1db00:	f383 8811 	msr	BASEPRI, r3
   1db04:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1db08:	6843      	ldr	r3, [r0, #4]
   1db0a:	b95b      	cbnz	r3, 1db24 <k_queue_append_list+0x32>
	list->head = node;
   1db0c:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1db0e:	6042      	str	r2, [r0, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1db10:	2104      	movs	r1, #4
   1db12:	4628      	mov	r0, r5
   1db14:	f000 fb77 	bl	1e206 <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   1db18:	4631      	mov	r1, r6
   1db1a:	4628      	mov	r0, r5
}
   1db1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   1db20:	f000 b8a6 	b.w	1dc70 <z_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1db24:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1db26:	f004 0403 	and.w	r4, r4, #3
   1db2a:	4321      	orrs	r1, r4
   1db2c:	6019      	str	r1, [r3, #0]
   1db2e:	e7ee      	b.n	1db0e <k_queue_append_list+0x1c>

0001db30 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1db30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db34:	4604      	mov	r4, r0
   1db36:	b086      	sub	sp, #24
   1db38:	460d      	mov	r5, r1
   1db3a:	f04f 0320 	mov.w	r3, #32
   1db3e:	f3ef 8711 	mrs	r7, BASEPRI
   1db42:	f383 8811 	msr	BASEPRI, r3
   1db46:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1db4a:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1db4c:	b188      	cbz	r0, 1db72 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1db4e:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1db50:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1db52:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1db56:	4290      	cmp	r0, r2
	list->head = node;
   1db58:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1db5a:	bf08      	it	eq
   1db5c:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1db5e:	2101      	movs	r1, #1
   1db60:	f7ff ffa9 	bl	1dab6 <z_queue_node_peek>
	__asm__ volatile(
   1db64:	f387 8811 	msr	BASEPRI, r7
   1db68:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1db6c:	b006      	add	sp, #24
   1db6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1db72:	2900      	cmp	r1, #0
   1db74:	d0f6      	beq.n	1db64 <z_impl_k_queue_get+0x34>
   1db76:	f387 8811 	msr	BASEPRI, r7
   1db7a:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1db7e:	2104      	movs	r1, #4
   1db80:	4602      	mov	r2, r0
   1db82:	4623      	mov	r3, r4
   1db84:	eb0d 0001 	add.w	r0, sp, r1
   1db88:	f7f9 fefc 	bl	17984 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1db8c:	1c6a      	adds	r2, r5, #1
   1db8e:	d002      	beq.n	1db96 <z_impl_k_queue_get+0x66>
   1db90:	f000 fa06 	bl	1dfa0 <z_impl_k_uptime_get>
   1db94:	4606      	mov	r6, r0
{
   1db96:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1db98:	9b04      	ldr	r3, [sp, #16]
   1db9a:	f36f 3310 	bfc	r3, #12, #5
   1db9e:	9304      	str	r3, [sp, #16]
	return z_impl_k_poll(events, num_events, timeout);
   1dba0:	2101      	movs	r1, #1
   1dba2:	1bea      	subs	r2, r5, r7
   1dba4:	a801      	add	r0, sp, #4
   1dba6:	f7f9 ff01 	bl	179ac <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1dbaa:	b118      	cbz	r0, 1dbb4 <z_impl_k_queue_get+0x84>
   1dbac:	300b      	adds	r0, #11
   1dbae:	d001      	beq.n	1dbb4 <z_impl_k_queue_get+0x84>
			return NULL;
   1dbb0:	2000      	movs	r0, #0
   1dbb2:	e7db      	b.n	1db6c <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1dbb4:	f04f 0320 	mov.w	r3, #32
   1dbb8:	f3ef 8811 	mrs	r8, BASEPRI
   1dbbc:	f383 8811 	msr	BASEPRI, r3
   1dbc0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1dbc4:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1dbc6:	b138      	cbz	r0, 1dbd8 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1dbc8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1dbca:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1dbcc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1dbd0:	4290      	cmp	r0, r2
	list->head = node;
   1dbd2:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1dbd4:	bf08      	it	eq
   1dbd6:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1dbd8:	2101      	movs	r1, #1
   1dbda:	f7ff ff6c 	bl	1dab6 <z_queue_node_peek>
	__asm__ volatile(
   1dbde:	f388 8811 	msr	BASEPRI, r8
   1dbe2:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1dbe6:	2800      	cmp	r0, #0
   1dbe8:	d1c0      	bne.n	1db6c <z_impl_k_queue_get+0x3c>
   1dbea:	1c6b      	adds	r3, r5, #1
   1dbec:	d0d4      	beq.n	1db98 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1dbee:	f000 f9d7 	bl	1dfa0 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1dbf2:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1dbf4:	42bd      	cmp	r5, r7
   1dbf6:	dacf      	bge.n	1db98 <z_impl_k_queue_get+0x68>
   1dbf8:	e7da      	b.n	1dbb0 <z_impl_k_queue_get+0x80>

0001dbfa <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1dbfa:	7b43      	ldrb	r3, [r0, #13]
   1dbfc:	06db      	lsls	r3, r3, #27
   1dbfe:	bf03      	ittte	eq
   1dc00:	6980      	ldreq	r0, [r0, #24]
   1dc02:	fab0 f080 	clzeq	r0, r0
   1dc06:	0940      	lsreq	r0, r0, #5
   1dc08:	2000      	movne	r0, #0
}
   1dc0a:	4770      	bx	lr

0001dc0c <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1dc0c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1dc10:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1dc14:	4298      	cmp	r0, r3
   1dc16:	bfac      	ite	ge
   1dc18:	2000      	movge	r0, #0
   1dc1a:	2001      	movlt	r0, #1
   1dc1c:	4770      	bx	lr

0001dc1e <z_find_first_thread_to_unpend>:
{
   1dc1e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dc20:	f04f 0320 	mov.w	r3, #32
   1dc24:	f3ef 8411 	mrs	r4, BASEPRI
   1dc28:	f383 8811 	msr	BASEPRI, r3
   1dc2c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1dc30:	f000 f85d 	bl	1dcee <z_priq_dumb_best>
	__asm__ volatile(
   1dc34:	f384 8811 	msr	BASEPRI, r4
   1dc38:	f3bf 8f6f 	isb	sy
}
   1dc3c:	bd10      	pop	{r4, pc}

0001dc3e <z_unpend_thread_no_timeout>:
{
   1dc3e:	b538      	push	{r3, r4, r5, lr}
   1dc40:	4604      	mov	r4, r0
	__asm__ volatile(
   1dc42:	f04f 0320 	mov.w	r3, #32
   1dc46:	f3ef 8511 	mrs	r5, BASEPRI
   1dc4a:	f383 8811 	msr	BASEPRI, r3
   1dc4e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1dc52:	4601      	mov	r1, r0
   1dc54:	6880      	ldr	r0, [r0, #8]
   1dc56:	f7f9 f8a9 	bl	16dac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dc5a:	7b63      	ldrb	r3, [r4, #13]
   1dc5c:	f023 0302 	bic.w	r3, r3, #2
   1dc60:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1dc62:	f385 8811 	msr	BASEPRI, r5
   1dc66:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1dc6a:	2300      	movs	r3, #0
   1dc6c:	60a3      	str	r3, [r4, #8]
}
   1dc6e:	bd38      	pop	{r3, r4, r5, pc}

0001dc70 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1dc70:	b921      	cbnz	r1, 1dc7c <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1dc72:	f3ef 8005 	mrs	r0, IPSR
   1dc76:	b908      	cbnz	r0, 1dc7c <z_reschedule+0xc>
   1dc78:	f7e5 b9d0 	b.w	301c <arch_swap>
   1dc7c:	f381 8811 	msr	BASEPRI, r1
   1dc80:	f3bf 8f6f 	isb	sy
}
   1dc84:	4770      	bx	lr

0001dc86 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1dc86:	4603      	mov	r3, r0
   1dc88:	b920      	cbnz	r0, 1dc94 <z_reschedule_irqlock+0xe>
   1dc8a:	f3ef 8205 	mrs	r2, IPSR
   1dc8e:	b90a      	cbnz	r2, 1dc94 <z_reschedule_irqlock+0xe>
   1dc90:	f7e5 b9c4 	b.w	301c <arch_swap>
   1dc94:	f383 8811 	msr	BASEPRI, r3
   1dc98:	f3bf 8f6f 	isb	sy
}
   1dc9c:	4770      	bx	lr

0001dc9e <z_reschedule_unlocked>:
	__asm__ volatile(
   1dc9e:	f04f 0320 	mov.w	r3, #32
   1dca2:	f3ef 8011 	mrs	r0, BASEPRI
   1dca6:	f383 8811 	msr	BASEPRI, r3
   1dcaa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dcae:	f7ff bfea 	b.w	1dc86 <z_reschedule_irqlock>

0001dcb2 <z_unpend_thread>:
{
   1dcb2:	b538      	push	{r3, r4, r5, lr}
   1dcb4:	4604      	mov	r4, r0
   1dcb6:	f04f 0320 	mov.w	r3, #32
   1dcba:	f3ef 8511 	mrs	r5, BASEPRI
   1dcbe:	f383 8811 	msr	BASEPRI, r3
   1dcc2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1dcc6:	4601      	mov	r1, r0
   1dcc8:	6880      	ldr	r0, [r0, #8]
   1dcca:	f7f9 f86f 	bl	16dac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dcce:	7b63      	ldrb	r3, [r4, #13]
   1dcd0:	f023 0302 	bic.w	r3, r3, #2
   1dcd4:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1dcd6:	f385 8811 	msr	BASEPRI, r5
   1dcda:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1dcde:	2300      	movs	r3, #0
   1dce0:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   1dce2:	f104 0018 	add.w	r0, r4, #24
}
   1dce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1dcea:	f000 b915 	b.w	1df18 <z_abort_timeout>

0001dcee <z_priq_dumb_best>:
	return list->head == list;
   1dcee:	6803      	ldr	r3, [r0, #0]
}
   1dcf0:	4298      	cmp	r0, r3
   1dcf2:	bf14      	ite	ne
   1dcf4:	4618      	movne	r0, r3
   1dcf6:	2000      	moveq	r0, #0
   1dcf8:	4770      	bx	lr

0001dcfa <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   1dcfa:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1dcfe:	b570      	push	{r4, r5, r6, lr}
   1dd00:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1dd02:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   1dd06:	b1cb      	cbz	r3, 1dd3c <z_thread_timeout+0x42>
	__asm__ volatile(
   1dd08:	f04f 0320 	mov.w	r3, #32
   1dd0c:	f3ef 8611 	mrs	r6, BASEPRI
   1dd10:	f383 8811 	msr	BASEPRI, r3
   1dd14:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1dd18:	4629      	mov	r1, r5
   1dd1a:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1dd1e:	f7f9 f845 	bl	16dac <z_priq_dumb_remove>
   1dd22:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1dd26:	f023 0302 	bic.w	r3, r3, #2
   1dd2a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1dd2e:	f386 8811 	msr	BASEPRI, r6
   1dd32:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1dd36:	2300      	movs	r3, #0
   1dd38:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1dd3c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1dd40:	f023 0314 	bic.w	r3, r3, #20
   1dd44:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1dd48:	4628      	mov	r0, r5
   1dd4a:	f7ff ff56 	bl	1dbfa <z_is_thread_ready>
   1dd4e:	b120      	cbz	r0, 1dd5a <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1dd50:	4628      	mov	r0, r5
}
   1dd52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dd56:	f7f9 b879 	b.w	16e4c <z_add_thread_to_ready_q>
   1dd5a:	bd70      	pop	{r4, r5, r6, pc}

0001dd5c <z_unpend_first_thread>:
{
   1dd5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1dd5e:	f04f 0320 	mov.w	r3, #32
   1dd62:	f3ef 8211 	mrs	r2, BASEPRI
   1dd66:	f383 8811 	msr	BASEPRI, r3
   1dd6a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1dd6e:	f7ff ffbe 	bl	1dcee <z_priq_dumb_best>
   1dd72:	4604      	mov	r4, r0
	__asm__ volatile(
   1dd74:	f382 8811 	msr	BASEPRI, r2
   1dd78:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1dd7c:	b1c8      	cbz	r0, 1ddb2 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1dd7e:	f04f 0320 	mov.w	r3, #32
   1dd82:	f3ef 8511 	mrs	r5, BASEPRI
   1dd86:	f383 8811 	msr	BASEPRI, r3
   1dd8a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1dd8e:	4601      	mov	r1, r0
   1dd90:	6880      	ldr	r0, [r0, #8]
   1dd92:	f7f9 f80b 	bl	16dac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dd96:	7b63      	ldrb	r3, [r4, #13]
   1dd98:	f023 0302 	bic.w	r3, r3, #2
   1dd9c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1dd9e:	f385 8811 	msr	BASEPRI, r5
   1dda2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1dda6:	2300      	movs	r3, #0
   1dda8:	60a3      	str	r3, [r4, #8]
   1ddaa:	f104 0018 	add.w	r0, r4, #24
   1ddae:	f000 f8b3 	bl	1df18 <z_abort_timeout>
}
   1ddb2:	4620      	mov	r0, r4
   1ddb4:	bd38      	pop	{r3, r4, r5, pc}

0001ddb6 <z_unpend_all>:
{
   1ddb6:	b570      	push	{r4, r5, r6, lr}
   1ddb8:	4606      	mov	r6, r0
	int need_sched = 0;
   1ddba:	2500      	movs	r5, #0
   1ddbc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ddbe:	42a6      	cmp	r6, r4
   1ddc0:	d000      	beq.n	1ddc4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ddc2:	b90c      	cbnz	r4, 1ddc8 <z_unpend_all+0x12>
}
   1ddc4:	4628      	mov	r0, r5
   1ddc6:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   1ddc8:	4620      	mov	r0, r4
   1ddca:	f7ff ff72 	bl	1dcb2 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1ddce:	4620      	mov	r0, r4
   1ddd0:	f7ff ff13 	bl	1dbfa <z_is_thread_ready>
		need_sched = 1;
   1ddd4:	2501      	movs	r5, #1
   1ddd6:	2800      	cmp	r0, #0
   1ddd8:	d0f0      	beq.n	1ddbc <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1ddda:	4620      	mov	r0, r4
   1dddc:	f7f9 f836 	bl	16e4c <z_add_thread_to_ready_q>
   1dde0:	e7ec      	b.n	1ddbc <z_unpend_all+0x6>

0001dde2 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1dde2:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1dde6:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1ddea:	e9c0 0000 	strd	r0, r0, [r0]
   1ddee:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1ddf2:	4770      	bx	lr

0001ddf4 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   1ddf4:	f7e6 bc22 	b.w	463c <arch_busy_wait>

0001ddf8 <z_impl_k_thread_name_set>:
}
   1ddf8:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1ddfc:	4770      	bx	lr

0001ddfe <k_thread_name_get>:
}
   1ddfe:	2000      	movs	r0, #0
   1de00:	4770      	bx	lr

0001de02 <z_new_thread_init>:
{
   1de02:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1de04:	9c02      	ldr	r4, [sp, #8]
   1de06:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1de08:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
   1de0a:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
   1de0c:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1de0e:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
   1de10:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   1de12:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1de16:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1de1a:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1de1e:	bd10      	pop	{r4, pc}

0001de20 <k_work_submit_to_queue>:
{
   1de20:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1de22:	f101 0308 	add.w	r3, r1, #8
   1de26:	f3bf 8f5b 	dmb	ish
   1de2a:	e853 2f00 	ldrex	r2, [r3]
   1de2e:	f042 0c01 	orr.w	ip, r2, #1
   1de32:	e843 ce00 	strex	lr, ip, [r3]
   1de36:	f1be 0f00 	cmp.w	lr, #0
   1de3a:	d1f6      	bne.n	1de2a <k_work_submit_to_queue+0xa>
   1de3c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1de40:	07d3      	lsls	r3, r2, #31
   1de42:	d403      	bmi.n	1de4c <k_work_submit_to_queue+0x2c>
}
   1de44:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1de48:	f7ff be49 	b.w	1dade <k_queue_append>
}
   1de4c:	f85d fb04 	ldr.w	pc, [sp], #4

0001de50 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1de50:	f1a0 010c 	sub.w	r1, r0, #12
   1de54:	6900      	ldr	r0, [r0, #16]
   1de56:	f7ff bfe3 	b.w	1de20 <k_work_submit_to_queue>

0001de5a <work_cancel>:
{
   1de5a:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1de5c:	f3bf 8f5b 	dmb	ish
   1de60:	6883      	ldr	r3, [r0, #8]
   1de62:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1de66:	07db      	lsls	r3, r3, #31
{
   1de68:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1de6a:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   1de6e:	d532      	bpl.n	1ded6 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1de70:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1de72:	6813      	ldr	r3, [r2, #0]
   1de74:	2100      	movs	r1, #0
   1de76:	b913      	cbnz	r3, 1de7e <work_cancel+0x24>
			return -EINVAL;
   1de78:	f06f 0015 	mvn.w	r0, #21
}
   1de7c:	bd70      	pop	{r4, r5, r6, pc}
   1de7e:	429c      	cmp	r4, r3
   1de80:	d124      	bne.n	1decc <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   1de82:	6823      	ldr	r3, [r4, #0]
   1de84:	6856      	ldr	r6, [r2, #4]
   1de86:	f023 0003 	bic.w	r0, r3, #3
   1de8a:	b9b1      	cbnz	r1, 1deba <work_cancel+0x60>
   1de8c:	42b4      	cmp	r4, r6
	list->head = node;
   1de8e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1de90:	d100      	bne.n	1de94 <work_cancel+0x3a>
	list->tail = node;
   1de92:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1de94:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1de96:	f003 0303 	and.w	r3, r3, #3
   1de9a:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1de9c:	2000      	movs	r0, #0
   1de9e:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dea0:	f3bf 8f5b 	dmb	ish
   1dea4:	e855 3f00 	ldrex	r3, [r5]
   1dea8:	f023 0301 	bic.w	r3, r3, #1
   1deac:	e845 3200 	strex	r2, r3, [r5]
   1deb0:	2a00      	cmp	r2, #0
   1deb2:	d1f7      	bne.n	1dea4 <work_cancel+0x4a>
   1deb4:	f3bf 8f5b 	dmb	ish
   1deb8:	e7e0      	b.n	1de7c <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1deba:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1debc:	f003 0303 	and.w	r3, r3, #3
   1dec0:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   1dec2:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dec4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1dec6:	bf08      	it	eq
   1dec8:	6051      	streq	r1, [r2, #4]
   1deca:	e7e3      	b.n	1de94 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1decc:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1dece:	4619      	mov	r1, r3
   1ded0:	f020 0303 	bic.w	r3, r0, #3
   1ded4:	e7cf      	b.n	1de76 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   1ded6:	300c      	adds	r0, #12
   1ded8:	f000 f81e 	bl	1df18 <z_abort_timeout>
   1dedc:	e7de      	b.n	1de9c <work_cancel+0x42>

0001dede <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1dede:	2300      	movs	r3, #0
   1dee0:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   1dee4:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   1dee8:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   1deea:	61c3      	str	r3, [r0, #28]
}
   1deec:	4770      	bx	lr

0001deee <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   1deee:	69c3      	ldr	r3, [r0, #28]
{
   1def0:	b510      	push	{r4, lr}
	if (!work->work_q) {
   1def2:	b173      	cbz	r3, 1df12 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   1def4:	f04f 0320 	mov.w	r3, #32
   1def8:	f3ef 8411 	mrs	r4, BASEPRI
   1defc:	f383 8811 	msr	BASEPRI, r3
   1df00:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   1df04:	f7ff ffa9 	bl	1de5a <work_cancel>
	__asm__ volatile(
   1df08:	f384 8811 	msr	BASEPRI, r4
   1df0c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1df10:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1df12:	f06f 0015 	mvn.w	r0, #21
   1df16:	e7fb      	b.n	1df10 <k_delayed_work_cancel+0x22>

0001df18 <z_abort_timeout>:
{
   1df18:	b510      	push	{r4, lr}
	__asm__ volatile(
   1df1a:	f04f 0220 	mov.w	r2, #32
   1df1e:	f3ef 8411 	mrs	r4, BASEPRI
   1df22:	f382 8811 	msr	BASEPRI, r2
   1df26:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1df2a:	6803      	ldr	r3, [r0, #0]
   1df2c:	b13b      	cbz	r3, 1df3e <z_abort_timeout+0x26>
			remove_timeout(to);
   1df2e:	f7f9 fbc7 	bl	176c0 <remove_timeout>
			ret = 0;
   1df32:	2000      	movs	r0, #0
	__asm__ volatile(
   1df34:	f384 8811 	msr	BASEPRI, r4
   1df38:	f3bf 8f6f 	isb	sy
}
   1df3c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1df3e:	f06f 0015 	mvn.w	r0, #21
   1df42:	e7f7      	b.n	1df34 <z_abort_timeout+0x1c>

0001df44 <z_get_next_timeout_expiry>:
{
   1df44:	b510      	push	{r4, lr}
	__asm__ volatile(
   1df46:	f04f 0320 	mov.w	r3, #32
   1df4a:	f3ef 8411 	mrs	r4, BASEPRI
   1df4e:	f383 8811 	msr	BASEPRI, r3
   1df52:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1df56:	f7f9 fbc7 	bl	176e8 <next_timeout>
	__asm__ volatile(
   1df5a:	f384 8811 	msr	BASEPRI, r4
   1df5e:	f3bf 8f6f 	isb	sy
}
   1df62:	bd10      	pop	{r4, pc}

0001df64 <z_set_timeout_expiry>:
{
   1df64:	b570      	push	{r4, r5, r6, lr}
   1df66:	4604      	mov	r4, r0
   1df68:	460e      	mov	r6, r1
	__asm__ volatile(
   1df6a:	f04f 0320 	mov.w	r3, #32
   1df6e:	f3ef 8511 	mrs	r5, BASEPRI
   1df72:	f383 8811 	msr	BASEPRI, r3
   1df76:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1df7a:	f7f9 fbb5 	bl	176e8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1df7e:	2801      	cmp	r0, #1
   1df80:	dd05      	ble.n	1df8e <z_set_timeout_expiry+0x2a>
   1df82:	42a0      	cmp	r0, r4
   1df84:	dd03      	ble.n	1df8e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1df86:	4631      	mov	r1, r6
   1df88:	4620      	mov	r0, r4
   1df8a:	f7e4 ffaf 	bl	2eec <z_clock_set_timeout>
	__asm__ volatile(
   1df8e:	f385 8811 	msr	BASEPRI, r5
   1df92:	f3bf 8f6f 	isb	sy
}
   1df96:	bd70      	pop	{r4, r5, r6, pc}

0001df98 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1df98:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1df9a:	f7f9 fc83 	bl	178a4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1df9e:	bd08      	pop	{r3, pc}

0001dfa0 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1dfa0:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1dfa2:	f7f9 fc7f 	bl	178a4 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1dfa6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1dfaa:	fba0 2304 	umull	r2, r3, r0, r4
   1dfae:	fb04 3301 	mla	r3, r4, r1, r3
   1dfb2:	0bd0      	lsrs	r0, r2, #15
}
   1dfb4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1dfb8:	0bd9      	lsrs	r1, r3, #15
   1dfba:	bd10      	pop	{r4, pc}

0001dfbc <k_timer_init>:
	timer->status = 0U;
   1dfbc:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1dfbe:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1dfc2:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1dfc6:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1dfc8:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1dfcc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1dfd0:	6283      	str	r3, [r0, #40]	; 0x28
}
   1dfd2:	4770      	bx	lr

0001dfd4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1dfd4:	b510      	push	{r4, lr}
   1dfd6:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1dfd8:	f7ff ff9e 	bl	1df18 <z_abort_timeout>

	if (inactive) {
   1dfdc:	bb00      	cbnz	r0, 1e020 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1dfde:	69e3      	ldr	r3, [r4, #28]
   1dfe0:	b10b      	cbz	r3, 1dfe6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1dfe2:	4620      	mov	r0, r4
   1dfe4:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1dfe6:	f104 0010 	add.w	r0, r4, #16
   1dfea:	2100      	movs	r1, #0
   1dfec:	f7ff fe17 	bl	1dc1e <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1dff0:	4604      	mov	r4, r0
   1dff2:	b1a8      	cbz	r0, 1e020 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1dff4:	f7ff fe23 	bl	1dc3e <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1dff8:	7b63      	ldrb	r3, [r4, #13]
   1dffa:	06db      	lsls	r3, r3, #27
   1dffc:	d104      	bne.n	1e008 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1dffe:	69a3      	ldr	r3, [r4, #24]
   1e000:	b913      	cbnz	r3, 1e008 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1e002:	4620      	mov	r0, r4
   1e004:	f7f8 ff22 	bl	16e4c <z_add_thread_to_ready_q>
	__asm__ volatile(
   1e008:	f04f 0320 	mov.w	r3, #32
   1e00c:	f3ef 8011 	mrs	r0, BASEPRI
   1e010:	f383 8811 	msr	BASEPRI, r3
   1e014:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1e018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e01c:	f7ff be33 	b.w	1dc86 <z_reschedule_irqlock>
   1e020:	bd10      	pop	{r4, pc}

0001e022 <clear_event_registrations>:
	while (num_events--) {
   1e022:	2314      	movs	r3, #20
{
   1e024:	b570      	push	{r4, r5, r6, lr}
   1e026:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   1e02a:	2400      	movs	r4, #0
   1e02c:	2601      	movs	r6, #1
	while (num_events--) {
   1e02e:	4281      	cmp	r1, r0
   1e030:	d100      	bne.n	1e034 <clear_event_registrations+0x12>
}
   1e032:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1e034:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1e038:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1e03c:	f003 030f 	and.w	r3, r3, #15
   1e040:	2b04      	cmp	r3, #4
   1e042:	d80d      	bhi.n	1e060 <clear_event_registrations+0x3e>
   1e044:	fa06 f303 	lsl.w	r3, r6, r3
   1e048:	f013 0f16 	tst.w	r3, #22
   1e04c:	d008      	beq.n	1e060 <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1e04e:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1e052:	b12b      	cbz	r3, 1e060 <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1e054:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1e058:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1e05a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1e05c:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1e060:	f382 8811 	msr	BASEPRI, r2
   1e064:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e068:	f04f 0320 	mov.w	r3, #32
   1e06c:	f3ef 8211 	mrs	r2, BASEPRI
   1e070:	f383 8811 	msr	BASEPRI, r3
   1e074:	f3bf 8f6f 	isb	sy
   1e078:	3914      	subs	r1, #20
   1e07a:	e7d8      	b.n	1e02e <clear_event_registrations+0xc>

0001e07c <signal_poll_event>:
{
   1e07c:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1e07e:	6884      	ldr	r4, [r0, #8]
{
   1e080:	4605      	mov	r5, r0
   1e082:	460e      	mov	r6, r1
	if (poller) {
   1e084:	b19c      	cbz	r4, 1e0ae <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1e086:	68a3      	ldr	r3, [r4, #8]
   1e088:	b95b      	cbnz	r3, 1e0a2 <signal_poll_event+0x26>
		poller->is_polling = false;
   1e08a:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   1e08c:	4618      	mov	r0, r3
	event->poller = NULL;
   1e08e:	2300      	movs	r3, #0
   1e090:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1e092:	68eb      	ldr	r3, [r5, #12]
   1e094:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1e098:	4316      	orrs	r6, r2
   1e09a:	f366 3310 	bfi	r3, r6, #12, #5
   1e09e:	60eb      	str	r3, [r5, #12]
	return retcode;
   1e0a0:	e004      	b.n	1e0ac <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1e0a2:	4798      	blx	r3
		poller->is_polling = false;
   1e0a4:	2300      	movs	r3, #0
		if (retcode < 0) {
   1e0a6:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1e0a8:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1e0aa:	daf0      	bge.n	1e08e <signal_poll_event+0x12>
}
   1e0ac:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1e0ae:	4620      	mov	r0, r4
   1e0b0:	e7ed      	b.n	1e08e <signal_poll_event+0x12>

0001e0b2 <k_poll_poller_cb>:
{
   1e0b2:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1e0b4:	6883      	ldr	r3, [r0, #8]
   1e0b6:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1e0b8:	7b63      	ldrb	r3, [r4, #13]
   1e0ba:	079a      	lsls	r2, r3, #30
{
   1e0bc:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   1e0be:	d401      	bmi.n	1e0c4 <k_poll_poller_cb+0x12>
		return 0;
   1e0c0:	2000      	movs	r0, #0
}
   1e0c2:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1e0c4:	6a23      	ldr	r3, [r4, #32]
   1e0c6:	3302      	adds	r3, #2
   1e0c8:	d012      	beq.n	1e0f0 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1e0ca:	4620      	mov	r0, r4
   1e0cc:	f7ff fdf1 	bl	1dcb2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e0d0:	2d08      	cmp	r5, #8
   1e0d2:	bf0c      	ite	eq
   1e0d4:	f06f 0303 	mvneq.w	r3, #3
   1e0d8:	2300      	movne	r3, #0
   1e0da:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e0dc:	7b63      	ldrb	r3, [r4, #13]
   1e0de:	06db      	lsls	r3, r3, #27
   1e0e0:	d1ee      	bne.n	1e0c0 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1e0e2:	69a5      	ldr	r5, [r4, #24]
   1e0e4:	2d00      	cmp	r5, #0
   1e0e6:	d1eb      	bne.n	1e0c0 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1e0e8:	4620      	mov	r0, r4
   1e0ea:	f7f8 feaf 	bl	16e4c <z_add_thread_to_ready_q>
	return 0;
   1e0ee:	e7e7      	b.n	1e0c0 <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1e0f0:	f06f 000a 	mvn.w	r0, #10
   1e0f4:	e7e5      	b.n	1e0c2 <k_poll_poller_cb+0x10>

0001e0f6 <add_event>:
{
   1e0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0f8:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e0fa:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e0fe:	4290      	cmp	r0, r2
   1e100:	4604      	mov	r4, r0
   1e102:	460d      	mov	r5, r1
   1e104:	d106      	bne.n	1e114 <add_event+0x1e>
	node->prev = list->tail;
   1e106:	6863      	ldr	r3, [r4, #4]
   1e108:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1e10a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1e10c:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   1e10e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e110:	6065      	str	r5, [r4, #4]
}
   1e112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1e114:	2b00      	cmp	r3, #0
   1e116:	d0f6      	beq.n	1e106 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1e118:	689b      	ldr	r3, [r3, #8]
   1e11a:	6879      	ldr	r1, [r7, #4]
   1e11c:	6858      	ldr	r0, [r3, #4]
   1e11e:	f7ff fd75 	bl	1dc0c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1e122:	2800      	cmp	r0, #0
   1e124:	d1ef      	bne.n	1e106 <add_event+0x10>
	return list->head == list;
   1e126:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e128:	42b4      	cmp	r4, r6
   1e12a:	d0ec      	beq.n	1e106 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e12c:	2e00      	cmp	r6, #0
   1e12e:	d0ea      	beq.n	1e106 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1e130:	68b3      	ldr	r3, [r6, #8]
   1e132:	6878      	ldr	r0, [r7, #4]
   1e134:	6859      	ldr	r1, [r3, #4]
   1e136:	f7ff fd69 	bl	1dc0c <z_is_t1_higher_prio_than_t2>
   1e13a:	b128      	cbz	r0, 1e148 <add_event+0x52>
	node->prev = successor->prev;
   1e13c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e13e:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1e142:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e144:	6075      	str	r5, [r6, #4]
			return;
   1e146:	e7e4      	b.n	1e112 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1e148:	6863      	ldr	r3, [r4, #4]
   1e14a:	429e      	cmp	r6, r3
   1e14c:	d0db      	beq.n	1e106 <add_event+0x10>
   1e14e:	6836      	ldr	r6, [r6, #0]
   1e150:	e7ec      	b.n	1e12c <add_event+0x36>

0001e152 <register_events>:
{
   1e152:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1e156:	f04f 0b00 	mov.w	fp, #0
{
   1e15a:	4688      	mov	r8, r1
   1e15c:	4615      	mov	r5, r2
   1e15e:	4699      	mov	r9, r3
   1e160:	4604      	mov	r4, r0
	int events_registered = 0;
   1e162:	465e      	mov	r6, fp
	event->poller = NULL;
   1e164:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1e166:	45c3      	cmp	fp, r8
   1e168:	db02      	blt.n	1e170 <register_events+0x1e>
}
   1e16a:	4630      	mov	r0, r6
   1e16c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e170:	f04f 0320 	mov.w	r3, #32
   1e174:	f3ef 8a11 	mrs	sl, BASEPRI
   1e178:	f383 8811 	msr	BASEPRI, r3
   1e17c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1e180:	7b63      	ldrb	r3, [r4, #13]
   1e182:	f003 030f 	and.w	r3, r3, #15
   1e186:	2b02      	cmp	r3, #2
   1e188:	d005      	beq.n	1e196 <register_events+0x44>
   1e18a:	2b04      	cmp	r3, #4
   1e18c:	d006      	beq.n	1e19c <register_events+0x4a>
   1e18e:	2b01      	cmp	r3, #1
   1e190:	d118      	bne.n	1e1c4 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1e192:	6922      	ldr	r2, [r4, #16]
   1e194:	e000      	b.n	1e198 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1e196:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1e198:	6892      	ldr	r2, [r2, #8]
   1e19a:	e001      	b.n	1e1a0 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1e19c:	6922      	ldr	r2, [r4, #16]
   1e19e:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1e1a0:	b182      	cbz	r2, 1e1c4 <register_events+0x72>
	event->state |= state;
   1e1a2:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1e1a4:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1e1a6:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1e1aa:	430b      	orrs	r3, r1
   1e1ac:	f363 3210 	bfi	r2, r3, #12, #5
   1e1b0:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1e1b2:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1e1b4:	f38a 8811 	msr	BASEPRI, sl
   1e1b8:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1e1bc:	f10b 0b01 	add.w	fp, fp, #1
   1e1c0:	3414      	adds	r4, #20
   1e1c2:	e7d0      	b.n	1e166 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1e1c4:	f1b9 0f00 	cmp.w	r9, #0
   1e1c8:	d1f4      	bne.n	1e1b4 <register_events+0x62>
   1e1ca:	782b      	ldrb	r3, [r5, #0]
   1e1cc:	2b00      	cmp	r3, #0
   1e1ce:	d0f1      	beq.n	1e1b4 <register_events+0x62>
	switch (event->type) {
   1e1d0:	7b63      	ldrb	r3, [r4, #13]
   1e1d2:	f003 030f 	and.w	r3, r3, #15
   1e1d6:	2b02      	cmp	r3, #2
   1e1d8:	d007      	beq.n	1e1ea <register_events+0x98>
   1e1da:	2b04      	cmp	r3, #4
   1e1dc:	d00e      	beq.n	1e1fc <register_events+0xaa>
   1e1de:	2b01      	cmp	r3, #1
   1e1e0:	d109      	bne.n	1e1f6 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1e1e2:	462a      	mov	r2, r5
   1e1e4:	4621      	mov	r1, r4
   1e1e6:	6920      	ldr	r0, [r4, #16]
   1e1e8:	e003      	b.n	1e1f2 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1e1ea:	6920      	ldr	r0, [r4, #16]
   1e1ec:	462a      	mov	r2, r5
   1e1ee:	4621      	mov	r1, r4
   1e1f0:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1e1f2:	f7ff ff80 	bl	1e0f6 <add_event>
	event->poller = poller;
   1e1f6:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1e1f8:	3601      	adds	r6, #1
   1e1fa:	e7db      	b.n	1e1b4 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1e1fc:	6920      	ldr	r0, [r4, #16]
   1e1fe:	462a      	mov	r2, r5
   1e200:	4621      	mov	r1, r4
   1e202:	3008      	adds	r0, #8
   1e204:	e7f5      	b.n	1e1f2 <register_events+0xa0>

0001e206 <z_handle_obj_poll_events>:
	return list->head == list;
   1e206:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e208:	4298      	cmp	r0, r3
   1e20a:	d009      	beq.n	1e220 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1e20c:	e9d3 2000 	ldrd	r2, r0, [r3]
   1e210:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1e212:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1e214:	2200      	movs	r2, #0
	node->prev = NULL;
   1e216:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   1e21a:	4618      	mov	r0, r3
   1e21c:	f7ff bf2e 	b.w	1e07c <signal_poll_event>
}
   1e220:	4770      	bx	lr

0001e222 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1e222:	4770      	bx	lr
