
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	200005a0 	.word	0x200005a0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00000831 	.word	0x00000831
   8:	000023b5 	.word	0x000023b5
		if (fdtable[fd].obj == NULL) {
   c:	000007a9 	.word	0x000007a9
  10:	000007a9 	.word	0x000007a9
  14:	000007a9 	.word	0x000007a9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	000007a9 	.word	0x000007a9
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	000007a9 	.word	0x000007a9
	errno = ENFILE;
  20:	000007a9 	.word	0x000007a9
	return -1;
  24:	000007a9 	.word	0x000007a9
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	000007a9 	.word	0x000007a9
  2c:	000006a1 	.word	0x000006a1
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	000007a9 	.word	0x000007a9
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	000007a9 	.word	0x000007a9
  38:	0000064d 	.word	0x0000064d
  3c:	000023a1 	.word	0x000023a1

00000040 <_irq_vector_table>:
  40:	000007f1 000007f1 000007f1 000007f1     ................
  50:	000007f1 000007f1 000007f1 000007f1     ................
  60:	000007f1 000007f1 000007f1 000007f1     ................
  70:	000007f1 000007f1 000007f1 000007f1     ................
  80:	000007f1 000007f1 000007f1 000007f1     ................
  90:	000007f1 000007f1 000007f1 000007f1     ................
  a0:	000007f1 000007f1 000007f1 000007f1     ................
  b0:	000007f1 000007f1 000007f1 000007f1     ................
  c0:	000007f1 000007f1 000007f1 000007f1     ................
  d0:	000007f1 000007f1 000007f1              ............

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	9f09      	ldr	r7, [sp, #36]	; 0x24
     116:	4615      	mov	r5, r2
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	461e      	mov	r6, r3
     11e:	2b00      	cmp	r3, #0
     120:	f040 80cc 	bne.w	2bc <CONFIG_FLASH_SIZE+0xbc>
     124:	428a      	cmp	r2, r1
     126:	fab2 fc82 	clz	ip, r2
     12a:	d94c      	bls.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     12c:	f1bc 0f00 	cmp.w	ip, #0
     130:	d00b      	beq.n	14a <CONFIG_IDLE_STACK_SIZE+0xa>
     132:	f1cc 0820 	rsb	r8, ip, #32
     136:	fa01 fe0c 	lsl.w	lr, r1, ip
     13a:	fa20 f808 	lsr.w	r8, r0, r8
     13e:	fa02 f50c 	lsl.w	r5, r2, ip
     142:	ea48 0e0e 	orr.w	lr, r8, lr
     146:	fa00 f40c 	lsl.w	r4, r0, ip
     14a:	ea4f 4915 	mov.w	r9, r5, lsr #16
     14e:	fa1f f885 	uxth.w	r8, r5
     152:	fbbe faf9 	udiv	sl, lr, r9
     156:	0c21      	lsrs	r1, r4, #16
     158:	fb09 e31a 	mls	r3, r9, sl, lr
     15c:	fb0a fb08 	mul.w	fp, sl, r8
     160:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     164:	459b      	cmp	fp, r3
     166:	d92a      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     168:	18eb      	adds	r3, r5, r3
     16a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     16e:	d204      	bcs.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     170:	459b      	cmp	fp, r3
     172:	d902      	bls.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     174:	f1aa 0002 	sub.w	r0, sl, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030b 	sub.w	r3, r3, fp
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f9 	udiv	r2, r3, r9
     184:	fb09 3312 	mls	r3, r9, r2, r3
     188:	fb02 f808 	mul.w	r8, r2, r8
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a0      	cmp	r8, r4
     192:	d916      	bls.n	1c2 <CONFIG_IDLE_STACK_SIZE+0x82>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19a:	d203      	bcs.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     19c:	45a0      	cmp	r8, r4
     19e:	d901      	bls.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 0408 	sub.w	r4, r4, r8
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b127      	cbz	r7, 1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     1ae:	fa24 f40c 	lsr.w	r4, r4, ip
     1b2:	2300      	movs	r3, #0
     1b4:	603c      	str	r4, [r7, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	4631      	mov	r1, r6
     1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1be:	4650      	mov	r0, sl
     1c0:	e7db      	b.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     1c2:	4613      	mov	r3, r2
     1c4:	e7ee      	b.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1c6:	b902      	cbnz	r2, 1ca <CONFIG_IDLE_STACK_SIZE+0x8a>
     1c8:	deff      	udf	#255	; 0xff
     1ca:	f1bc 0f00 	cmp.w	ip, #0
     1ce:	d12e      	bne.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d0:	1a8b      	subs	r3, r1, r2
     1d2:	2601      	movs	r6, #1
     1d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d8:	b2aa      	uxth	r2, r5
     1da:	fbb3 f8fe 	udiv	r8, r3, lr
     1de:	0c21      	lsrs	r1, r4, #16
     1e0:	fb0e 3318 	mls	r3, lr, r8, r3
     1e4:	fb08 f902 	mul.w	r9, r8, r2
     1e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1ec:	4599      	cmp	r9, r3
     1ee:	d961      	bls.n	2b4 <CONFIG_FLASH_SIZE+0xb4>
     1f0:	18eb      	adds	r3, r5, r3
     1f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     1f6:	d204      	bcs.n	202 <CONFIG_FLASH_SIZE+0x2>
     1f8:	4599      	cmp	r9, r3
     1fa:	d902      	bls.n	202 <CONFIG_FLASH_SIZE+0x2>
     1fc:	f1a8 0002 	sub.w	r0, r8, #2
     200:	442b      	add	r3, r5
     202:	eba3 0309 	sub.w	r3, r3, r9
     206:	b2a4      	uxth	r4, r4
     208:	fbb3 f1fe 	udiv	r1, r3, lr
     20c:	fb0e 3311 	mls	r3, lr, r1, r3
     210:	434a      	muls	r2, r1
     212:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     216:	42a2      	cmp	r2, r4
     218:	d94e      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     21a:	192c      	adds	r4, r5, r4
     21c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     220:	d203      	bcs.n	22a <CONFIG_FLASH_SIZE+0x2a>
     222:	42a2      	cmp	r2, r4
     224:	d901      	bls.n	22a <CONFIG_FLASH_SIZE+0x2a>
     226:	1e8b      	subs	r3, r1, #2
     228:	442c      	add	r4, r5
     22a:	1aa4      	subs	r4, r4, r2
     22c:	e7bc      	b.n	1a8 <CONFIG_IDLE_STACK_SIZE+0x68>
     22e:	f1cc 0e20 	rsb	lr, ip, #32
     232:	fa02 f50c 	lsl.w	r5, r2, ip
     236:	fa21 f90e 	lsr.w	r9, r1, lr
     23a:	fa01 f30c 	lsl.w	r3, r1, ip
     23e:	fa20 fe0e 	lsr.w	lr, r0, lr
     242:	ea4e 0303 	orr.w	r3, lr, r3
     246:	ea4f 4815 	mov.w	r8, r5, lsr #16
     24a:	fa00 f40c 	lsl.w	r4, r0, ip
     24e:	fbb9 f1f8 	udiv	r1, r9, r8
     252:	fa1f fe85 	uxth.w	lr, r5
     256:	fb08 9211 	mls	r2, r8, r1, r9
     25a:	0c18      	lsrs	r0, r3, #16
     25c:	fb01 f60e 	mul.w	r6, r1, lr
     260:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     264:	4296      	cmp	r6, r2
     266:	d921      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     268:	18aa      	adds	r2, r5, r2
     26a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     26e:	d203      	bcs.n	278 <CONFIG_FLASH_SIZE+0x78>
     270:	4296      	cmp	r6, r2
     272:	d901      	bls.n	278 <CONFIG_FLASH_SIZE+0x78>
     274:	1e88      	subs	r0, r1, #2
     276:	442a      	add	r2, r5
     278:	1b92      	subs	r2, r2, r6
     27a:	b29b      	uxth	r3, r3
     27c:	fbb2 f9f8 	udiv	r9, r2, r8
     280:	fb08 2219 	mls	r2, r8, r9, r2
     284:	fb09 fe0e 	mul.w	lr, r9, lr
     288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     28c:	459e      	cmp	lr, r3
     28e:	d90f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     290:	18eb      	adds	r3, r5, r3
     292:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     296:	d204      	bcs.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     298:	459e      	cmp	lr, r3
     29a:	d902      	bls.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     29c:	f1a9 0602 	sub.w	r6, r9, #2
     2a0:	442b      	add	r3, r5
     2a2:	eba3 030e 	sub.w	r3, r3, lr
     2a6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     2aa:	e793      	b.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     2ac:	4608      	mov	r0, r1
     2ae:	e7e3      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     2b0:	464e      	mov	r6, r9
     2b2:	e7f6      	b.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     2b4:	4640      	mov	r0, r8
     2b6:	e7a4      	b.n	202 <CONFIG_FLASH_SIZE+0x2>
     2b8:	460b      	mov	r3, r1
     2ba:	e7b6      	b.n	22a <CONFIG_FLASH_SIZE+0x2a>
     2bc:	428b      	cmp	r3, r1
     2be:	d905      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c0:	b10f      	cbz	r7, 2c6 <CONFIG_FLASH_SIZE+0xc6>
     2c2:	e9c7 0100 	strd	r0, r1, [r7]
     2c6:	2600      	movs	r6, #0
     2c8:	4630      	mov	r0, r6
     2ca:	e775      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2cc:	fab3 fc83 	clz	ip, r3
     2d0:	f1bc 0f00 	cmp.w	ip, #0
     2d4:	d10f      	bne.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2d6:	428b      	cmp	r3, r1
     2d8:	d301      	bcc.n	2de <CONFIG_FLASH_SIZE+0xde>
     2da:	4282      	cmp	r2, r0
     2dc:	d809      	bhi.n	2f2 <CONFIG_FLASH_SIZE+0xf2>
     2de:	1a84      	subs	r4, r0, r2
     2e0:	eb61 0e03 	sbc.w	lr, r1, r3
     2e4:	2001      	movs	r0, #1
     2e6:	2f00      	cmp	r7, #0
     2e8:	d06a      	beq.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     2ea:	e9c7 4e00 	strd	r4, lr, [r7]
     2ee:	2600      	movs	r6, #0
     2f0:	e762      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2f2:	4660      	mov	r0, ip
     2f4:	e7f7      	b.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2f6:	f1cc 0e20 	rsb	lr, ip, #32
     2fa:	fa03 f30c 	lsl.w	r3, r3, ip
     2fe:	fa22 f50e 	lsr.w	r5, r2, lr
     302:	fa21 f40e 	lsr.w	r4, r1, lr
     306:	431d      	orrs	r5, r3
     308:	fa01 f30c 	lsl.w	r3, r1, ip
     30c:	fa20 f10e 	lsr.w	r1, r0, lr
     310:	430b      	orrs	r3, r1
     312:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     316:	fa00 f60c 	lsl.w	r6, r0, ip
     31a:	fbb4 f9fa 	udiv	r9, r4, sl
     31e:	fa1f f885 	uxth.w	r8, r5
     322:	fb0a 4019 	mls	r0, sl, r9, r4
     326:	0c1c      	lsrs	r4, r3, #16
     328:	fb09 f108 	mul.w	r1, r9, r8
     32c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     330:	42a1      	cmp	r1, r4
     332:	fa02 f20c 	lsl.w	r2, r2, ip
     336:	d93f      	bls.n	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     338:	192c      	adds	r4, r5, r4
     33a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     33e:	d204      	bcs.n	34a <CONFIG_FLASH_SIZE+0x14a>
     340:	42a1      	cmp	r1, r4
     342:	d902      	bls.n	34a <CONFIG_FLASH_SIZE+0x14a>
     344:	f1a9 0002 	sub.w	r0, r9, #2
     348:	442c      	add	r4, r5
     34a:	1a64      	subs	r4, r4, r1
     34c:	b29b      	uxth	r3, r3
     34e:	fbb4 f9fa 	udiv	r9, r4, sl
     352:	fb0a 4419 	mls	r4, sl, r9, r4
     356:	fb09 f808 	mul.w	r8, r9, r8
     35a:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     35e:	4588      	cmp	r8, r1
     360:	d92c      	bls.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     362:	1869      	adds	r1, r5, r1
     364:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     368:	d204      	bcs.n	374 <CONFIG_FLASH_SIZE+0x174>
     36a:	4588      	cmp	r8, r1
     36c:	d902      	bls.n	374 <CONFIG_FLASH_SIZE+0x174>
     36e:	f1a9 0302 	sub.w	r3, r9, #2
     372:	4429      	add	r1, r5
     374:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     378:	eba1 0108 	sub.w	r1, r1, r8
     37c:	fba0 8902 	umull	r8, r9, r0, r2
     380:	4549      	cmp	r1, r9
     382:	46c2      	mov	sl, r8
     384:	464c      	mov	r4, r9
     386:	d302      	bcc.n	38e <CONFIG_FLASH_SIZE+0x18e>
     388:	d106      	bne.n	398 <CONFIG_FLASH_SIZE+0x198>
     38a:	4546      	cmp	r6, r8
     38c:	d204      	bcs.n	398 <CONFIG_FLASH_SIZE+0x198>
     38e:	ebb8 0a02 	subs.w	sl, r8, r2
     392:	eb69 0405 	sbc.w	r4, r9, r5
     396:	3801      	subs	r0, #1
     398:	b197      	cbz	r7, 3c0 <CONFIG_FLASH_SIZE+0x1c0>
     39a:	ebb6 030a 	subs.w	r3, r6, sl
     39e:	eb61 0604 	sbc.w	r6, r1, r4
     3a2:	fa06 fe0e 	lsl.w	lr, r6, lr
     3a6:	fa23 f30c 	lsr.w	r3, r3, ip
     3aa:	ea4e 0303 	orr.w	r3, lr, r3
     3ae:	fa26 f60c 	lsr.w	r6, r6, ip
     3b2:	e9c7 3600 	strd	r3, r6, [r7]
     3b6:	e79a      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3b8:	4648      	mov	r0, r9
     3ba:	e7c6      	b.n	34a <CONFIG_FLASH_SIZE+0x14a>
     3bc:	464b      	mov	r3, r9
     3be:	e7d9      	b.n	374 <CONFIG_FLASH_SIZE+0x174>
     3c0:	463e      	mov	r6, r7
     3c2:	e6f9      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>

000003c4 <main>:

/* 1000 msec = 1 sec */
#define SLEEP_TIME	1000

void main(void)
{
     3c4:	b538      	push	{r3, r4, r5, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3c6:	4809      	ldr	r0, [pc, #36]	; (3ec <main+0x28>)
     3c8:	f001 f9ae 	bl	1728 <z_impl_device_get_binding>
     3cc:	4604      	mov	r4, r0
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     3ce:	6843      	ldr	r3, [r0, #4]
     3d0:	2217      	movs	r2, #23
     3d2:	681d      	ldr	r5, [r3, #0]
     3d4:	2100      	movs	r1, #0
     3d6:	2301      	movs	r3, #1
     3d8:	47a8      	blx	r5
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
     3da:	6863      	ldr	r3, [r4, #4]
     3dc:	685d      	ldr	r5, [r3, #4]
     3de:	2300      	movs	r3, #0
     3e0:	2217      	movs	r2, #23
     3e2:	4619      	mov	r1, r3
     3e4:	4620      	mov	r0, r4
     3e6:	47a8      	blx	r5
//		cnt++;
//		k_sleep(SLEEP_TIME);
//		gpio_pin_write(dev, LED0, 1);
//		gpio_pin_write(dev, LED1, 1);
//		gpio_pin_write(dev, LED2, 1);
	}
     3e8:	e7fe      	b.n	3e8 <main+0x24>
     3ea:	bf00      	nop
     3ec:	00002ca0 	.word	0x00002ca0

000003f0 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     3f0:	4b16      	ldr	r3, [pc, #88]	; (44c <CONFIG_MAIN_STACK_SIZE+0x4c>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     3f2:	b507      	push	{r0, r1, r2, lr}
     3f4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     3f6:	b182      	cbz	r2, 41a <CONFIG_MAIN_STACK_SIZE+0x1a>
    return p_reg->INTENSET & mask;
     3f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     3fc:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     400:	07d1      	lsls	r1, r2, #31
     402:	d50a      	bpl.n	41a <CONFIG_MAIN_STACK_SIZE+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     404:	2200      	movs	r2, #0
     406:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     408:	681b      	ldr	r3, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     40a:	4811      	ldr	r0, [pc, #68]	; (450 <CONFIG_MAIN_STACK_SIZE+0x50>)
     40c:	9300      	str	r3, [sp, #0]
    (void)dummy;
     40e:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     410:	6883      	ldr	r3, [r0, #8]
     412:	7a59      	ldrb	r1, [r3, #9]
     414:	b909      	cbnz	r1, 41a <CONFIG_MAIN_STACK_SIZE+0x1a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     416:	f001 fed4 	bl	21c2 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     41a:	4b0e      	ldr	r3, [pc, #56]	; (454 <CONFIG_MAIN_STACK_SIZE+0x54>)
     41c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     41e:	b18a      	cbz	r2, 444 <CONFIG_MAIN_STACK_SIZE+0x44>
    return p_reg->INTENSET & mask;
     420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     424:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     428:	0792      	lsls	r2, r2, #30
     42a:	d50b      	bpl.n	444 <CONFIG_MAIN_STACK_SIZE+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     42c:	2200      	movs	r2, #0
     42e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     430:	681b      	ldr	r3, [r3, #0]
     432:	9301      	str	r3, [sp, #4]
    (void)dummy;
     434:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     436:	4806      	ldr	r0, [pc, #24]	; (450 <CONFIG_MAIN_STACK_SIZE+0x50>)
     438:	2101      	movs	r1, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     43a:	b003      	add	sp, #12
     43c:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     440:	f001 bebf 	b.w	21c2 <clkstarted_handle>
}
     444:	b003      	add	sp, #12
     446:	f85d fb04 	ldr.w	pc, [sp], #4
     44a:	bf00      	nop
     44c:	40000100 	.word	0x40000100
     450:	20000f38 	.word	0x20000f38
     454:	40000104 	.word	0x40000104

00000458 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     458:	4b0d      	ldr	r3, [pc, #52]	; (490 <rtc1_nrf_isr+0x38>)
     45a:	2200      	movs	r2, #0
     45c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     460:	f04f 0220 	mov.w	r2, #32
     464:	f3ef 8111 	mrs	r1, BASEPRI
     468:	f382 8811 	msr	BASEPRI, r2
     46c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     470:	4a08      	ldr	r2, [pc, #32]	; (494 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     472:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     476:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     478:	1ac0      	subs	r0, r0, r3
     47a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     47e:	4403      	add	r3, r0
     480:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     482:	f381 8811 	msr	BASEPRI, r1
     486:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     48a:	f001 bdd1 	b.w	2030 <z_clock_announce>
     48e:	bf00      	nop
     490:	40011000 	.word	0x40011000
     494:	20000020 	.word	0x20000020

00000498 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     498:	b573      	push	{r0, r1, r4, r5, r6, lr}
     49a:	481c      	ldr	r0, [pc, #112]	; (50c <z_clock_driver_init+0x74>)
     49c:	f001 f944 	bl	1728 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
     4a0:	b380      	cbz	r0, 504 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     4a2:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     4a4:	4d1a      	ldr	r5, [pc, #104]	; (510 <z_clock_driver_init+0x78>)
     4a6:	681b      	ldr	r3, [r3, #0]
     4a8:	2101      	movs	r1, #1
     4aa:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     4ac:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
     4ae:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     4b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
     4b4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     4b8:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     4bc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     4c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     4c4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     4c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     4cc:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     4ce:	681b      	ldr	r3, [r3, #0]
     4d0:	9301      	str	r3, [sp, #4]
    (void)dummy;
     4d2:	9b01      	ldr	r3, [sp, #4]
     4d4:	4b0f      	ldr	r3, [pc, #60]	; (514 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     4d6:	4631      	mov	r1, r6
     4d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     4dc:	2011      	movs	r0, #17
     4de:	4622      	mov	r2, r4
     4e0:	f000 f8fe 	bl	6e0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     4e4:	2011      	movs	r0, #17
     4e6:	f000 f8eb 	bl	6c0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     4ea:	4b0b      	ldr	r3, [pc, #44]	; (518 <z_clock_driver_init+0x80>)
     4ec:	601e      	str	r6, [r3, #0]
     4ee:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     4f0:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
     4f4:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     4f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     4fa:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
     4fe:	4620      	mov	r0, r4
}
     500:	b002      	add	sp, #8
     502:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     508:	e7fa      	b.n	500 <z_clock_driver_init+0x68>
     50a:	bf00      	nop
     50c:	00002ca7 	.word	0x00002ca7
     510:	40011000 	.word	0x40011000
     514:	e000e100 	.word	0xe000e100
     518:	40011008 	.word	0x40011008

0000051c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     51c:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     51e:	4e25      	ldr	r6, [pc, #148]	; (5b4 <z_clock_set_timeout+0x98>)
     520:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     524:	bf08      	it	eq
     526:	4630      	moveq	r0, r6
	__asm__ volatile(
     528:	f04f 0320 	mov.w	r3, #32
     52c:	f3ef 8511 	mrs	r5, BASEPRI
     530:	f383 8811 	msr	BASEPRI, r3
     534:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     538:	491f      	ldr	r1, [pc, #124]	; (5b8 <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
     53a:	4b20      	ldr	r3, [pc, #128]	; (5bc <z_clock_set_timeout+0xa0>)
     53c:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
     540:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
     542:	1ae2      	subs	r2, r4, r3
     544:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     548:	0212      	lsls	r2, r2, #8
     54a:	d419      	bmi.n	580 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     54c:	1e42      	subs	r2, r0, #1
     54e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
     552:	42b2      	cmp	r2, r6
     554:	bfa8      	it	ge
     556:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     558:	1c78      	adds	r0, r7, #1
     55a:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     55c:	42b0      	cmp	r0, r6
     55e:	bf94      	ite	ls
     560:	1818      	addls	r0, r3, r0
     562:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     564:	1b04      	subs	r4, r0, r4
     566:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
     56a:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     56e:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
     570:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     574:	d906      	bls.n	584 <z_clock_set_timeout+0x68>
	__asm__ volatile(
     576:	f385 8811 	msr	BASEPRI, r5
     57a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
     580:	2200      	movs	r2, #0
     582:	e7e9      	b.n	558 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
     584:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     588:	4a0d      	ldr	r2, [pc, #52]	; (5c0 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
     58a:	1ac3      	subs	r3, r0, r3
     58c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     590:	1e5c      	subs	r4, r3, #1
     592:	4294      	cmp	r4, r2
     594:	d905      	bls.n	5a2 <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     596:	4b0b      	ldr	r3, [pc, #44]	; (5c4 <z_clock_set_timeout+0xa8>)
     598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     59c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     5a0:	e7e9      	b.n	576 <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
     5a2:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     5a4:	bf02      	ittt	eq
     5a6:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     5a8:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     5ac:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     5b0:	e7e1      	b.n	576 <z_clock_set_timeout+0x5a>
     5b2:	bf00      	nop
     5b4:	00fffffe 	.word	0x00fffffe
     5b8:	40011000 	.word	0x40011000
     5bc:	20000020 	.word	0x20000020
     5c0:	007ffffe 	.word	0x007ffffe
     5c4:	e000e100 	.word	0xe000e100

000005c8 <z_clock_elapsed>:
	__asm__ volatile(
     5c8:	f04f 0220 	mov.w	r2, #32
     5cc:	f3ef 8311 	mrs	r3, BASEPRI
     5d0:	f382 8811 	msr	BASEPRI, r2
     5d4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     5d8:	4a06      	ldr	r2, [pc, #24]	; (5f4 <z_clock_elapsed+0x2c>)
     5da:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     5de:	4a06      	ldr	r2, [pc, #24]	; (5f8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     5e0:	6812      	ldr	r2, [r2, #0]
     5e2:	1a80      	subs	r0, r0, r2
     5e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     5e8:	f383 8811 	msr	BASEPRI, r3
     5ec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     5f0:	4770      	bx	lr
     5f2:	bf00      	nop
     5f4:	40011000 	.word	0x40011000
     5f8:	20000020 	.word	0x20000020

000005fc <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     5fc:	4804      	ldr	r0, [pc, #16]	; (610 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     5fe:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     600:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     602:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     604:	d003      	beq.n	60e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     606:	4903      	ldr	r1, [pc, #12]	; (614 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     60c:	600a      	str	r2, [r1, #0]

0000060e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
     60e:	4770      	bx	lr
    ldr r0, =_kernel
     610:	20000158 	.word	0x20000158
    ldr r1, =_SCS_ICSR
     614:	e000ed04 	.word	0xe000ed04

00000618 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     618:	4a09      	ldr	r2, [pc, #36]	; (640 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     61a:	490a      	ldr	r1, [pc, #40]	; (644 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     61c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     61e:	6809      	ldr	r1, [r1, #0]
     620:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     622:	4909      	ldr	r1, [pc, #36]	; (648 <arch_swap+0x30>)
	_current->arch.basepri = key;
     624:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     626:	684b      	ldr	r3, [r1, #4]
     628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     62c:	604b      	str	r3, [r1, #4]
     62e:	2300      	movs	r3, #0
     630:	f383 8811 	msr	BASEPRI, r3
     634:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     638:	6893      	ldr	r3, [r2, #8]
}
     63a:	6e98      	ldr	r0, [r3, #104]	; 0x68
     63c:	4770      	bx	lr
     63e:	bf00      	nop
     640:	20000158 	.word	0x20000158
     644:	00002c9c 	.word	0x00002c9c
     648:	e000ed00 	.word	0xe000ed00

0000064c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     64c:	4912      	ldr	r1, [pc, #72]	; (698 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     64e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     650:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     654:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     656:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     65a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     65e:	2020      	movs	r0, #32
    msr BASEPRI, r0
     660:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     664:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     668:	4f0c      	ldr	r7, [pc, #48]	; (69c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     66a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     66e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     670:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     672:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     674:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
     676:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     678:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     67a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     67e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     680:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     682:	f001 fe9e 	bl	23c2 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     686:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     68a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     68e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     692:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     696:	4770      	bx	lr
    ldr r1, =_kernel
     698:	20000158 	.word	0x20000158
    ldr v4, =_SCS_ICSR
     69c:	e000ed04 	.word	0xe000ed04

000006a0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     6a0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     6a4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     6a6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     6aa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     6ae:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     6b0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     6b4:	2902      	cmp	r1, #2
    beq _oops
     6b6:	d0ff      	beq.n	6b8 <_oops>

000006b8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     6b8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     6ba:	f001 fe77 	bl	23ac <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     6be:	bd01      	pop	{r0, pc}

000006c0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     6c0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     6c2:	2b00      	cmp	r3, #0
     6c4:	db08      	blt.n	6d8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     6c6:	2201      	movs	r2, #1
     6c8:	f000 001f 	and.w	r0, r0, #31
     6cc:	fa02 f000 	lsl.w	r0, r2, r0
     6d0:	095b      	lsrs	r3, r3, #5
     6d2:	4a02      	ldr	r2, [pc, #8]	; (6dc <arch_irq_enable+0x1c>)
     6d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     6d8:	4770      	bx	lr
     6da:	bf00      	nop
     6dc:	e000e100 	.word	0xe000e100

000006e0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     6e0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     6e2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     6e4:	bfa8      	it	ge
     6e6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     6ea:	f101 0101 	add.w	r1, r1, #1
     6ee:	ea4f 1141 	mov.w	r1, r1, lsl #5
     6f2:	bfae      	itee	ge
     6f4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     6f8:	f000 000f 	andlt.w	r0, r0, #15
     6fc:	4b03      	ldrlt	r3, [pc, #12]	; (70c <z_arm_irq_priority_set+0x2c>)
     6fe:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     700:	bfac      	ite	ge
     702:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     706:	5419      	strblt	r1, [r3, r0]
}
     708:	4770      	bx	lr
     70a:	bf00      	nop
     70c:	e000ed14 	.word	0xe000ed14

00000710 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
     710:	b573      	push	{r0, r1, r4, r5, r6, lr}
     712:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
     714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     716:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
     718:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
     71c:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     71e:	f002 f94c 	bl	29ba <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     722:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
     726:	4a0a      	ldr	r2, [pc, #40]	; (750 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     728:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
     72c:	f022 0201 	bic.w	r2, r2, #1
     730:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
     732:	9a06      	ldr	r2, [sp, #24]
     734:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     736:	9a07      	ldr	r2, [sp, #28]
     738:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     73a:	9a08      	ldr	r2, [sp, #32]
     73c:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
     73e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
     742:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
     744:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     746:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
     748:	2300      	movs	r3, #0
     74a:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     74c:	b002      	add	sp, #8
     74e:	bd70      	pop	{r4, r5, r6, pc}
     750:	00002191 	.word	0x00002191

00000754 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
     754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     756:	4605      	mov	r5, r0
     758:	460c      	mov	r4, r1
     75a:	4617      	mov	r7, r2
     75c:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
     75e:	f000 f979 	bl	a54 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
     762:	4b0a      	ldr	r3, [pc, #40]	; (78c <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
     764:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
     766:	4628      	mov	r0, r5
	_current = main_thread;
     768:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
     76a:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
     76e:	f001 fe28 	bl	23c2 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     772:	4630      	mov	r0, r6
     774:	f384 8809 	msr	PSP, r4
     778:	2100      	movs	r1, #0
     77a:	b663      	cpsie	if
     77c:	f381 8811 	msr	BASEPRI, r1
     780:	f3bf 8f6f 	isb	sy
     784:	2200      	movs	r2, #0
     786:	2300      	movs	r3, #0
     788:	f001 fd02 	bl	2190 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     78c:	20000158 	.word	0x20000158

00000790 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
     790:	4901      	ldr	r1, [pc, #4]	; (798 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     792:	2210      	movs	r2, #16
	str r2, [r1]
     794:	600a      	str	r2, [r1, #0]
#endif
	bx lr
     796:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     798:	e000ed10 	.word	0xe000ed10

0000079c <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     79c:	4040      	eors	r0, r0
	msr BASEPRI, r0
     79e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     7a2:	bf30      	wfi

	bx lr
     7a4:	4770      	bx	lr
     7a6:	bf00      	nop

000007a8 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
     7a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
     7ac:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
     7b0:	4672      	mov	r2, lr

	push {r0, lr}
     7b2:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
     7b4:	f000 f8a0 	bl	8f8 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
     7b8:	bd01      	pop	{r0, pc}
     7ba:	bf00      	nop

000007bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     7bc:	bf30      	wfi
    b z_SysNmiOnReset
     7be:	f7ff bffd 	b.w	7bc <z_SysNmiOnReset>
     7c2:	bf00      	nop

000007c4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     7c4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     7c6:	4b08      	ldr	r3, [pc, #32]	; (7e8 <z_arm_prep_c+0x24>)
     7c8:	4a08      	ldr	r2, [pc, #32]	; (7ec <z_arm_prep_c+0x28>)
     7ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     7ce:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     7d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     7d4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
     7d8:	f000 ffe6 	bl	17a8 <z_bss_zero>
	z_data_copy();
     7dc:	f000 ffee 	bl	17bc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
     7e0:	f000 f906 	bl	9f0 <z_arm_int_lib_init>
	z_cstart();
     7e4:	f001 f81c 	bl	1820 <z_cstart>
     7e8:	00000000 	.word	0x00000000
     7ec:	e000ed00 	.word	0xe000ed00

000007f0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     7f0:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
     7f2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     7f4:	4a0b      	ldr	r2, [pc, #44]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     7f6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     7f8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     7fa:	bf1e      	ittt	ne
	movne	r1, #0
     7fc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     7fe:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     800:	f002 f84b 	blne	289a <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     804:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     806:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     80a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     80e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     812:	4905      	ldr	r1, [pc, #20]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     814:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     816:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     818:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     81a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     81e:	4903      	ldr	r1, [pc, #12]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
	bx r1
     820:	4708      	bx	r1
     822:	0000      	.short	0x0000
	ldr r2, =_kernel
     824:	20000158 	.word	0x20000158
	ldr r1, =_sw_isr_table
     828:	00002a64 	.word	0x00002a64
	ldr r1, =z_arm_int_exit
     82c:	000005fd 	.word	0x000005fd

00000830 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     830:	f001 fe27 	bl	2482 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     834:	2020      	movs	r0, #32
    msr BASEPRI, r0
     836:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
     83a:	4808      	ldr	r0, [pc, #32]	; (85c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     83c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     840:	1840      	adds	r0, r0, r1
    msr PSP, r0
     842:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     846:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     84a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     84c:	4308      	orrs	r0, r1
    msr CONTROL, r0
     84e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     852:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     856:	f7ff ffb5 	bl	7c4 <z_arm_prep_c>
     85a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
     85c:	200006e0 	.word	0x200006e0

00000860 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
     860:	4b0c      	ldr	r3, [pc, #48]	; (894 <mem_manage_fault.isra.2+0x34>)
     862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
     864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
     866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     868:	0792      	lsls	r2, r2, #30
     86a:	d508      	bpl.n	87e <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
     86c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
     86e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     870:	0612      	lsls	r2, r2, #24
     872:	d504      	bpl.n	87e <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
     874:	b118      	cbz	r0, 87e <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     87c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
     87e:	4b05      	ldr	r3, [pc, #20]	; (894 <mem_manage_fault.isra.2+0x34>)
     880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
     882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     886:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
     888:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     88a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     890:	7008      	strb	r0, [r1, #0]

	return reason;
}
     892:	4770      	bx	lr
     894:	e000ed00 	.word	0xe000ed00

00000898 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     898:	4b0d      	ldr	r3, [pc, #52]	; (8d0 <bus_fault.isra.3+0x38>)
     89a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     89e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     8a0:	0592      	lsls	r2, r2, #22
     8a2:	d508      	bpl.n	8b6 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
     8a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
     8a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     8a8:	0412      	lsls	r2, r2, #16
     8aa:	d504      	bpl.n	8b6 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
     8ac:	b118      	cbz	r0, 8b6 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     8ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     8b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     8b4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     8b6:	4b06      	ldr	r3, [pc, #24]	; (8d0 <bus_fault.isra.3+0x38>)
     8b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
     8ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     8bc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     8be:	bf58      	it	pl
     8c0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     8c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
     8c4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     8c6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
     8ca:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     8cc:	7008      	strb	r0, [r1, #0]

	return reason;
}
     8ce:	4770      	bx	lr
     8d0:	e000ed00 	.word	0xe000ed00

000008d4 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     8d4:	4b07      	ldr	r3, [pc, #28]	; (8f4 <usage_fault.isra.4+0x20>)
     8d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
     8d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
     8da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
     8dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
     8de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
     8e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     8e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     8e4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     8e8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     8ec:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
     8ee:	2000      	movs	r0, #0
     8f0:	4770      	bx	lr
     8f2:	bf00      	nop
     8f4:	e000ed00 	.word	0xe000ed00

000008f8 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
     8f8:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     8fa:	4b36      	ldr	r3, [pc, #216]	; (9d4 <z_arm_fault+0xdc>)
     8fc:	685b      	ldr	r3, [r3, #4]
{
     8fe:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     900:	f3c3 0308 	ubfx	r3, r3, #0, #9
     904:	2500      	movs	r5, #0
     906:	f385 8811 	msr	BASEPRI, r5
     90a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     90e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
     912:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
     916:	d112      	bne.n	93e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
     918:	f002 040c 	and.w	r4, r2, #12
     91c:	2c08      	cmp	r4, #8
     91e:	d00e      	beq.n	93e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
     920:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
     922:	bf4e      	itee	mi
     924:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
     926:	4606      	movpl	r6, r0
			*nested_exc = true;
     928:	2501      	movpl	r5, #1
	*recoverable = false;
     92a:	2200      	movs	r2, #0
	switch (fault) {
     92c:	3b03      	subs	r3, #3
	*recoverable = false;
     92e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
     932:	2b03      	cmp	r3, #3
     934:	d847      	bhi.n	9c6 <z_arm_fault+0xce>
     936:	e8df f003 	tbb	[pc, r3]
     93a:	3e04      	.short	0x3e04
     93c:	3b42      	.short	0x3b42
		return NULL;
     93e:	462e      	mov	r6, r5
     940:	e7f3      	b.n	92a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
     942:	4b24      	ldr	r3, [pc, #144]	; (9d4 <z_arm_fault+0xdc>)
     944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     946:	0792      	lsls	r2, r2, #30
     948:	d43d      	bmi.n	9c6 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
     94a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
     94c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
     950:	d008      	beq.n	964 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
     952:	3328      	adds	r3, #40	; 0x28
     954:	781b      	ldrb	r3, [r3, #0]
     956:	b1eb      	cbz	r3, 994 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
     958:	f10d 0107 	add.w	r1, sp, #7
     95c:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
     95e:	f7ff ff7f 	bl	860 <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
     962:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
     964:	f89d 3007 	ldrb.w	r3, [sp, #7]
     968:	b993      	cbnz	r3, 990 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
     96a:	2220      	movs	r2, #32
     96c:	4631      	mov	r1, r6
     96e:	a802      	add	r0, sp, #8
     970:	f001 fd3b 	bl	23ea <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
     974:	9b09      	ldr	r3, [sp, #36]	; 0x24
     976:	b345      	cbz	r5, 9ca <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
     978:	f3c3 0208 	ubfx	r2, r3, #0, #9
     97c:	b922      	cbnz	r2, 988 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
     97e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     982:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     986:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
     988:	a902      	add	r1, sp, #8
     98a:	4620      	mov	r0, r4
     98c:	f001 fd0c 	bl	23a8 <z_arm_fatal_error>
}
     990:	b00a      	add	sp, #40	; 0x28
     992:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
     994:	4b10      	ldr	r3, [pc, #64]	; (9d8 <z_arm_fault+0xe0>)
     996:	781b      	ldrb	r3, [r3, #0]
     998:	b12b      	cbz	r3, 9a6 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
     99a:	f10d 0107 	add.w	r1, sp, #7
     99e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
     9a0:	f7ff ff7a 	bl	898 <bus_fault.isra.3>
     9a4:	e7dd      	b.n	962 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
     9a6:	4b0d      	ldr	r3, [pc, #52]	; (9dc <z_arm_fault+0xe4>)
     9a8:	881c      	ldrh	r4, [r3, #0]
     9aa:	b2a4      	uxth	r4, r4
     9ac:	2c00      	cmp	r4, #0
     9ae:	d0d9      	beq.n	964 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
     9b0:	f7ff ff90 	bl	8d4 <usage_fault.isra.4>
     9b4:	e7d5      	b.n	962 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
     9b6:	f10d 0107 	add.w	r1, sp, #7
     9ba:	2000      	movs	r0, #0
     9bc:	e7cf      	b.n	95e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
     9be:	f10d 0107 	add.w	r1, sp, #7
     9c2:	2000      	movs	r0, #0
     9c4:	e7ec      	b.n	9a0 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
     9c6:	2400      	movs	r4, #0
     9c8:	e7cc      	b.n	964 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     9ca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
     9ce:	f023 0301 	bic.w	r3, r3, #1
     9d2:	e7d8      	b.n	986 <z_arm_fault+0x8e>
     9d4:	e000ed00 	.word	0xe000ed00
     9d8:	e000ed29 	.word	0xe000ed29
     9dc:	e000ed2a 	.word	0xe000ed2a

000009e0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     9e0:	4a02      	ldr	r2, [pc, #8]	; (9ec <z_arm_fault_init+0xc>)
     9e2:	6953      	ldr	r3, [r2, #20]
     9e4:	f043 0310 	orr.w	r3, r3, #16
     9e8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
     9ea:	4770      	bx	lr
     9ec:	e000ed00 	.word	0xe000ed00

000009f0 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     9f0:	4804      	ldr	r0, [pc, #16]	; (a04 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
     9f2:	2300      	movs	r3, #0
     9f4:	2120      	movs	r1, #32
     9f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     9f8:	3301      	adds	r3, #1
     9fa:	2b27      	cmp	r3, #39	; 0x27
     9fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     a00:	d1f9      	bne.n	9f6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     a02:	4770      	bx	lr
     a04:	e000e100 	.word	0xe000e100

00000a08 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
     a08:	b538      	push	{r3, r4, r5, lr}
     a0a:	4605      	mov	r5, r0
	__asm__ volatile(
     a0c:	f04f 0320 	mov.w	r3, #32
     a10:	f3ef 8411 	mrs	r4, BASEPRI
     a14:	f383 8811 	msr	BASEPRI, r3
     a18:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
     a1c:	f001 f8da 	bl	1bd4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
     a20:	4b0a      	ldr	r3, [pc, #40]	; (a4c <z_impl_k_thread_abort+0x44>)
     a22:	689b      	ldr	r3, [r3, #8]
     a24:	42ab      	cmp	r3, r5
     a26:	d10b      	bne.n	a40 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     a28:	4b09      	ldr	r3, [pc, #36]	; (a50 <z_impl_k_thread_abort+0x48>)
     a2a:	685a      	ldr	r2, [r3, #4]
     a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     a30:	b912      	cbnz	r2, a38 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
     a32:	4620      	mov	r0, r4
     a34:	f7ff fdf0 	bl	618 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     a38:	685a      	ldr	r2, [r3, #4]
     a3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     a3e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
     a40:	4620      	mov	r0, r4
}
     a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
     a46:	f001 bf3e 	b.w	28c6 <z_reschedule_irqlock>
     a4a:	bf00      	nop
     a4c:	20000158 	.word	0x20000158
     a50:	e000ed00 	.word	0xe000ed00

00000a54 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
     a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
     a56:	4b08      	ldr	r3, [pc, #32]	; (a78 <z_arm_configure_static_mpu_regions+0x24>)
     a58:	9301      	str	r3, [sp, #4]
     a5a:	4b08      	ldr	r3, [pc, #32]	; (a7c <z_arm_configure_static_mpu_regions+0x28>)
     a5c:	9302      	str	r3, [sp, #8]
     a5e:	4b08      	ldr	r3, [pc, #32]	; (a80 <z_arm_configure_static_mpu_regions+0x2c>)
     a60:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
     a62:	ab01      	add	r3, sp, #4
     a64:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
     a66:	4a07      	ldr	r2, [pc, #28]	; (a84 <z_arm_configure_static_mpu_regions+0x30>)
     a68:	4b07      	ldr	r3, [pc, #28]	; (a88 <z_arm_configure_static_mpu_regions+0x34>)
     a6a:	2101      	movs	r1, #1
     a6c:	4668      	mov	r0, sp
     a6e:	f000 f891 	bl	b94 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
     a72:	b005      	add	sp, #20
     a74:	f85d fb04 	ldr.w	pc, [sp], #4
     a78:	20000000 	.word	0x20000000
     a7c:	00000000 	.word	0x00000000
     a80:	060b0000 	.word	0x060b0000
     a84:	20000000 	.word	0x20000000
     a88:	20010000 	.word	0x20010000

00000a8c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
     a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
     a8e:	4f20      	ldr	r7, [pc, #128]	; (b10 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
     a90:	2600      	movs	r6, #0
     a92:	428e      	cmp	r6, r1
     a94:	db01      	blt.n	a9a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
     a96:	4610      	mov	r0, r2
     a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
     a9a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
     a9e:	f8dc 4004 	ldr.w	r4, [ip, #4]
     aa2:	b394      	cbz	r4, b0a <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
     aa4:	b15b      	cbz	r3, abe <mpu_configure_regions+0x32>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
     aa6:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
     aaa:	ea14 0f0e 	tst.w	r4, lr
     aae:	d11a      	bne.n	ae6 <mpu_configure_regions+0x5a>
		&&
     ab0:	2c1f      	cmp	r4, #31
     ab2:	d918      	bls.n	ae6 <mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0U);
     ab4:	f8dc 5000 	ldr.w	r5, [ip]
		&&
     ab8:	ea1e 0f05 	tst.w	lr, r5
     abc:	d113      	bne.n	ae6 <mpu_configure_regions+0x5a>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
     abe:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
     ac0:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
     ac4:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
     ac8:	b2d2      	uxtb	r2, r2
     aca:	d90f      	bls.n	aec <mpu_configure_regions+0x60>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
     acc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
     ad0:	d80e      	bhi.n	af0 <mpu_configure_regions+0x64>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
     ad2:	3c01      	subs	r4, #1
     ad4:	fab4 f484 	clz	r4, r4
     ad8:	f1c4 041f 	rsb	r4, r4, #31
     adc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
     ade:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
     ae0:	ea4c 0404 	orr.w	r4, ip, r4
     ae4:	d906      	bls.n	af4 <mpu_configure_regions+0x68>
			return -EINVAL;
     ae6:	f06f 0215 	mvn.w	r2, #21
     aea:	e7d4      	b.n	a96 <mpu_configure_regions+0xa>
		return REGION_32B;
     aec:	2408      	movs	r4, #8
     aee:	e7f6      	b.n	ade <mpu_configure_regions+0x52>
		return REGION_4G;
     af0:	243e      	movs	r4, #62	; 0x3e
     af2:	e7f4      	b.n	ade <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     af4:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
     af8:	4315      	orrs	r5, r2
     afa:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     afe:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
     b02:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     b04:	60fd      	str	r5, [r7, #12]
		reg_index++;
     b06:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     b08:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
     b0a:	3601      	adds	r6, #1
     b0c:	e7c1      	b.n	a92 <mpu_configure_regions+0x6>
     b0e:	bf00      	nop
     b10:	e000ed90 	.word	0xe000ed90

00000b14 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
     b14:	4b03      	ldr	r3, [pc, #12]	; (b24 <arm_core_mpu_enable+0x10>)
     b16:	2205      	movs	r2, #5
     b18:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
     b1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b1e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
     b22:	4770      	bx	lr
     b24:	e000ed90 	.word	0xe000ed90

00000b28 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     b28:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
     b2c:	4b01      	ldr	r3, [pc, #4]	; (b34 <arm_core_mpu_disable+0xc>)
     b2e:	2200      	movs	r2, #0
     b30:	605a      	str	r2, [r3, #4]
}
     b32:	4770      	bx	lr
     b34:	e000ed90 	.word	0xe000ed90

00000b38 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
     b38:	4913      	ldr	r1, [pc, #76]	; (b88 <arm_mpu_init+0x50>)
     b3a:	6808      	ldr	r0, [r1, #0]
     b3c:	2808      	cmp	r0, #8
{
     b3e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
     b40:	d81e      	bhi.n	b80 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
     b42:	f7ff fff1 	bl	b28 <arm_core_mpu_disable>
	MPU->RNR = index;
     b46:	4c11      	ldr	r4, [pc, #68]	; (b8c <arm_mpu_init+0x54>)
     b48:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     b4a:	2200      	movs	r2, #0
     b4c:	4290      	cmp	r0, r2
     b4e:	f101 010c 	add.w	r1, r1, #12
     b52:	d105      	bne.n	b60 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
     b54:	4b0e      	ldr	r3, [pc, #56]	; (b90 <arm_mpu_init+0x58>)
     b56:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
     b58:	f7ff ffdc 	bl	b14 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
     b5c:	2000      	movs	r0, #0
}
     b5e:	bd10      	pop	{r4, pc}
     b60:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     b62:	f851 3c0c 	ldr.w	r3, [r1, #-12]
     b66:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
     b6a:	4313      	orrs	r3, r2
     b6c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     b70:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
     b76:	f043 0301 	orr.w	r3, r3, #1
     b7a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     b7c:	3201      	adds	r2, #1
     b7e:	e7e5      	b.n	b4c <arm_mpu_init+0x14>
		return -1;
     b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b84:	e7eb      	b.n	b5e <arm_mpu_init+0x26>
     b86:	bf00      	nop
     b88:	00002c1c 	.word	0x00002c1c
     b8c:	e000ed90 	.word	0xe000ed90
     b90:	20000198 	.word	0x20000198

00000b94 <arm_core_mpu_configure_static_mpu_regions>:
{
     b94:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
     b96:	4c03      	ldr	r4, [pc, #12]	; (ba4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
     b98:	2301      	movs	r3, #1
     b9a:	7822      	ldrb	r2, [r4, #0]
     b9c:	f7ff ff76 	bl	a8c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
     ba0:	7020      	strb	r0, [r4, #0]
}
     ba2:	bd10      	pop	{r4, pc}
     ba4:	20000198 	.word	0x20000198

00000ba8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
     ba8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
     baa:	4a08      	ldr	r2, [pc, #32]	; (bcc <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
     bac:	2300      	movs	r3, #0
     bae:	7812      	ldrb	r2, [r2, #0]
     bb0:	f7ff ff6c 	bl	a8c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
     bb4:	f110 0f16 	cmn.w	r0, #22
     bb8:	d003      	beq.n	bc2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
     bba:	4b05      	ldr	r3, [pc, #20]	; (bd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
     bbc:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
     bbe:	2807      	cmp	r0, #7
     bc0:	dd00      	ble.n	bc4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
     bc2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
     bc4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
     bc6:	611a      	str	r2, [r3, #16]
     bc8:	3001      	adds	r0, #1
     bca:	e7f8      	b.n	bbe <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
     bcc:	20000198 	.word	0x20000198
     bd0:	e000ed90 	.word	0xe000ed90

00000bd4 <nordicsemi_nrf52_init>:
     bd4:	f04f 0320 	mov.w	r3, #32
     bd8:	f3ef 8211 	mrs	r2, BASEPRI
     bdc:	f383 8811 	msr	BASEPRI, r3
     be0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     be4:	4906      	ldr	r1, [pc, #24]	; (c00 <nordicsemi_nrf52_init+0x2c>)
     be6:	2301      	movs	r3, #1
     be8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
     bec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     bf0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
     bf4:	f382 8811 	msr	BASEPRI, r2
     bf8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     bfc:	2000      	movs	r0, #0
     bfe:	4770      	bx	lr
     c00:	4001e000 	.word	0x4001e000

00000c04 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
     c04:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
     c06:	4b09      	ldr	r3, [pc, #36]	; (c2c <gpio_nrfx_init+0x28>)
     c08:	781a      	ldrb	r2, [r3, #0]
     c0a:	b96a      	cbnz	r2, c28 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
     c0c:	2101      	movs	r1, #1
     c0e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
     c10:	2006      	movs	r0, #6
     c12:	2105      	movs	r1, #5
     c14:	f7ff fd64 	bl	6e0 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
     c18:	2006      	movs	r0, #6
     c1a:	f7ff fd51 	bl	6c0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
     c1e:	4b04      	ldr	r3, [pc, #16]	; (c30 <gpio_nrfx_init+0x2c>)
     c20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     c24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
     c28:	2000      	movs	r0, #0
     c2a:	bd08      	pop	{r3, pc}
     c2c:	20000199 	.word	0x20000199
     c30:	40006000 	.word	0x40006000

00000c34 <gpiote_pin_int_cfg>:
{
     c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
     c36:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
     c38:	4d55      	ldr	r5, [pc, #340]	; (d90 <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     c3a:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
     c3c:	6882      	ldr	r2, [r0, #8]
     c3e:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     c42:	7918      	ldrb	r0, [r3, #4]
     c44:	f001 031f 	and.w	r3, r1, #31
     c48:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
     c4c:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
     c4e:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
     c50:	f500 76a2 	add.w	r6, r0, #324	; 0x144
     c54:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
     c58:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
     c5c:	42b3      	cmp	r3, r6
     c5e:	d175      	bne.n	d4c <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
     c60:	fa24 f600 	lsr.w	r6, r4, r0
     c64:	07f6      	lsls	r6, r6, #31
     c66:	d571      	bpl.n	d4c <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
     c68:	0084      	lsls	r4, r0, #2
     c6a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
     c6e:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
     c72:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
     c76:	f026 0601 	bic.w	r6, r6, #1
     c7a:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
     c7e:	2401      	movs	r4, #1
     c80:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
     c84:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
     c88:	009c      	lsls	r4, r3, #2
     c8a:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
     c8e:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
     c92:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
     c96:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
     c9a:	6890      	ldr	r0, [r2, #8]
     c9c:	40c8      	lsrs	r0, r1
     c9e:	f010 0001 	ands.w	r0, r0, #1
     ca2:	d051      	beq.n	d48 <gpiote_pin_int_cfg+0x114>
     ca4:	68d0      	ldr	r0, [r2, #12]
     ca6:	40c8      	lsrs	r0, r1
     ca8:	f010 0001 	ands.w	r0, r0, #1
     cac:	d04c      	beq.n	d48 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
     cae:	6950      	ldr	r0, [r2, #20]
     cb0:	40c8      	lsrs	r0, r1
     cb2:	f010 0001 	ands.w	r0, r0, #1
     cb6:	d056      	beq.n	d66 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
     cb8:	6990      	ldr	r0, [r2, #24]
     cba:	40c8      	lsrs	r0, r1
     cbc:	07c0      	lsls	r0, r0, #31
     cbe:	d44a      	bmi.n	d56 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
     cc0:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
     cc2:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
     cc4:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
     cc6:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
     cca:	f000 0001 	and.w	r0, r0, #1
     cce:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
     cd2:	4288      	cmp	r0, r1
     cd4:	bf14      	ite	ne
     cd6:	2101      	movne	r1, #1
     cd8:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
     cda:	4d2d      	ldr	r5, [pc, #180]	; (d90 <gpiote_pin_int_cfg+0x15c>)
     cdc:	2400      	movs	r4, #0
     cde:	f504 72a2 	add.w	r2, r4, #324	; 0x144
     ce2:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
     ce6:	f010 0003 	ands.w	r0, r0, #3
     cea:	d136      	bne.n	d5a <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
     cec:	00a2      	lsls	r2, r4, #2
     cee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     cf2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
     cf6:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
     cf8:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
     cfc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
     d00:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
     d04:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
     d08:	f104 0340 	add.w	r3, r4, #64	; 0x40
     d0c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
     d10:	009b      	lsls	r3, r3, #2
     d12:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
     d16:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
     d18:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
     d1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     d20:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
     d24:	4331      	orrs	r1, r6
     d26:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
     d2a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
     d2c:	681b      	ldr	r3, [r3, #0]
     d2e:	9301      	str	r3, [sp, #4]
    (void)dummy;
     d30:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
     d32:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
     d36:	f043 0301 	orr.w	r3, r3, #1
     d3a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
     d3e:	2301      	movs	r3, #1
     d40:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
     d44:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
     d48:	b002      	add	sp, #8
     d4a:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
     d4c:	3001      	adds	r0, #1
     d4e:	2808      	cmp	r0, #8
     d50:	f47f af7e 	bne.w	c50 <gpiote_pin_int_cfg+0x1c>
     d54:	e798      	b.n	c88 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
     d56:	2103      	movs	r1, #3
     d58:	e7bf      	b.n	cda <gpiote_pin_int_cfg+0xa6>
     d5a:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
     d5c:	2c08      	cmp	r4, #8
     d5e:	d1be      	bne.n	cde <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
     d60:	f06f 0012 	mvn.w	r0, #18
     d64:	e7f0      	b.n	d48 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
     d66:	6913      	ldr	r3, [r2, #16]
     d68:	69d2      	ldr	r2, [r2, #28]
     d6a:	4053      	eors	r3, r2
     d6c:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
     d70:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
     d74:	f011 0f01 	tst.w	r1, #1
     d78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
     d7c:	bf14      	ite	ne
     d7e:	f44f 3200 	movne.w	r2, #131072	; 0x20000
     d82:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
     d86:	4313      	orrs	r3, r2
     d88:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
     d8c:	e7dc      	b.n	d48 <gpiote_pin_int_cfg+0x114>
     d8e:	bf00      	nop
     d90:	40006000 	.word	0x40006000

00000d94 <gpiote_event_handler>:
{
     d94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
     d98:	4953      	ldr	r1, [pc, #332]	; (ee8 <gpiote_event_handler+0x154>)
     d9a:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
     d9c:	2d00      	cmp	r5, #0
     d9e:	d067      	beq.n	e70 <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
     da0:	4b52      	ldr	r3, [pc, #328]	; (eec <gpiote_event_handler+0x158>)
     da2:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
     da8:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
     dac:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
     dae:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
     db2:	4320      	orrs	r0, r4
     db4:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
     db8:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
     dba:	69d4      	ldr	r4, [r2, #28]
     dbc:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
     dbe:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
     dc2:	4054      	eors	r4, r2
     dc4:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
     dc6:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
     dca:	2001      	movs	r0, #1
	u32_t pin = 0U;
     dcc:	2700      	movs	r7, #0
	while (level_pins) {
     dce:	2b00      	cmp	r3, #0
     dd0:	d138      	bne.n	e44 <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
     dd2:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
     dd4:	680b      	ldr	r3, [r1, #0]
     dd6:	9300      	str	r3, [sp, #0]
    (void)dummy;
     dd8:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
     dda:	4845      	ldr	r0, [pc, #276]	; (ef0 <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
     ddc:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
     dde:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
     de0:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
     de2:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
     de6:	fa06 f103 	lsl.w	r1, r6, r3
     dea:	4211      	tst	r1, r2
     dec:	d013      	beq.n	e16 <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
     dee:	009a      	lsls	r2, r3, #2
     df0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     df4:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
     df8:	6811      	ldr	r1, [r2, #0]
     dfa:	b161      	cbz	r1, e16 <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
     dfc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
     e00:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
     e04:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
     e06:	6812      	ldr	r2, [r2, #0]
     e08:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
     e0a:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
     e0e:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
     e12:	9a01      	ldr	r2, [sp, #4]
     e14:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
     e16:	3301      	adds	r3, #1
     e18:	2b08      	cmp	r3, #8
     e1a:	d1e2      	bne.n	de2 <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
     e1c:	bb54      	cbnz	r4, e74 <gpiote_event_handler+0xe0>
	if (port_event) {
     e1e:	b175      	cbz	r5, e3e <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
     e20:	4b32      	ldr	r3, [pc, #200]	; (eec <gpiote_event_handler+0x158>)
     e22:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
     e24:	681b      	ldr	r3, [r3, #0]
     e26:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
     e28:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     e2c:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
     e2e:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
     e32:	4302      	orrs	r2, r0
     e34:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
     e38:	2401      	movs	r4, #1
	u32_t pin = 0U;
     e3a:	2500      	movs	r5, #0
	while (level_pins) {
     e3c:	bb8b      	cbnz	r3, ea2 <gpiote_event_handler+0x10e>
}
     e3e:	b002      	add	sp, #8
     e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
     e44:	4203      	tst	r3, r0
     e46:	d010      	beq.n	e6a <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     e48:	f896 c004 	ldrb.w	ip, [r6, #4]
     e4c:	f007 021f 	and.w	r2, r7, #31
     e50:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
     e54:	0092      	lsls	r2, r2, #2
     e56:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
     e5a:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
     e5e:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
     e62:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
     e66:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
     e6a:	3701      	adds	r7, #1
		bit <<= 1;
     e6c:	0040      	lsls	r0, r0, #1
     e6e:	e7ae      	b.n	dce <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
     e70:	462c      	mov	r4, r5
     e72:	e7b2      	b.n	dda <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
     e74:	4f1d      	ldr	r7, [pc, #116]	; (eec <gpiote_event_handler+0x158>)
     e76:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
     e7a:	f8d8 1000 	ldr.w	r1, [r8]
     e7e:	2900      	cmp	r1, #0
     e80:	d0cd      	beq.n	e1e <gpiote_event_handler+0x8a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     e82:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
     e84:	f8d8 300c 	ldr.w	r3, [r8, #12]
     e88:	688a      	ldr	r2, [r1, #8]
     e8a:	4023      	ands	r3, r4
     e8c:	4213      	tst	r3, r2
     e8e:	d003      	beq.n	e98 <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
     e90:	684b      	ldr	r3, [r1, #4]
     e92:	4622      	mov	r2, r4
     e94:	4638      	mov	r0, r7
     e96:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
     e98:	2e00      	cmp	r6, #0
     e9a:	d0c0      	beq.n	e1e <gpiote_event_handler+0x8a>
     e9c:	4631      	mov	r1, r6
     e9e:	6836      	ldr	r6, [r6, #0]
     ea0:	e7f0      	b.n	e84 <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
     ea2:	421c      	tst	r4, r3
     ea4:	d01c      	beq.n	ee0 <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     ea6:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
     ea8:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     eaa:	f005 021f 	and.w	r2, r5, #31
     eae:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
     eb2:	6908      	ldr	r0, [r1, #16]
     eb4:	0092      	lsls	r2, r2, #2
     eb6:	4078      	eors	r0, r7
     eb8:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
     ebc:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
     ebe:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
     ec2:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
     ec6:	bf18      	it	ne
     ec8:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
     ecc:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
     ed0:	bf08      	it	eq
     ed2:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
     ed6:	4338      	orrs	r0, r7
     ed8:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
     edc:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
     ee0:	3501      	adds	r5, #1
		bit <<= 1;
     ee2:	0064      	lsls	r4, r4, #1
     ee4:	e7aa      	b.n	e3c <gpiote_event_handler+0xa8>
     ee6:	bf00      	nop
     ee8:	4000617c 	.word	0x4000617c
     eec:	20000f50 	.word	0x20000f50
     ef0:	40006000 	.word	0x40006000

00000ef4 <twi_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
     ef4:	b510      	push	{r4, lr}
     ef6:	4604      	mov	r4, r0
     ef8:	2200      	movs	r2, #0
     efa:	2101      	movs	r1, #1
     efc:	2004      	movs	r0, #4
     efe:	f7ff fbef 	bl	6e0 <z_arm_irq_priority_set>
	return dev->config->config_info;
     f02:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
     f04:	4a06      	ldr	r2, [pc, #24]	; (f20 <twi_1_init+0x2c>)
	return dev->config->config_info;
     f06:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
     f08:	4623      	mov	r3, r4
     f0a:	f100 0108 	add.w	r1, r0, #8
     f0e:	f000 fabf 	bl	1490 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
     f12:	4b04      	ldr	r3, [pc, #16]	; (f24 <twi_1_init+0x30>)
     f14:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(1);
     f16:	bf14      	ite	ne
     f18:	f06f 000f 	mvnne.w	r0, #15
     f1c:	2000      	moveq	r0, #0
     f1e:	bd10      	pop	{r4, pc}
     f20:	00000ffd 	.word	0x00000ffd
     f24:	0bad0000 	.word	0x0bad0000

00000f28 <i2c_nrfx_twi_transfer>:
{
     f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f2c:	4605      	mov	r5, r0
     f2e:	b087      	sub	sp, #28
     f30:	460c      	mov	r4, r1
     f32:	4617      	mov	r7, r2
     f34:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
     f36:	6880      	ldr	r0, [r0, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     f3c:	f000 ff42 	bl	1dc4 <z_impl_k_sem_take>
	return dev->config->config_info;
     f40:	682b      	ldr	r3, [r5, #0]
		if (res != NRFX_SUCCESS) {
     f42:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ff8 <i2c_nrfx_twi_transfer+0xd0>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
     f46:	6898      	ldr	r0, [r3, #8]
     f48:	f000 fae6 	bl	1518 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
     f4c:	2600      	movs	r6, #0
     f4e:	42be      	cmp	r6, r7
     f50:	d301      	bcc.n	f56 <i2c_nrfx_twi_transfer+0x2e>
	int ret = 0;
     f52:	2400      	movs	r4, #0
     f54:	e02b      	b.n	fae <i2c_nrfx_twi_transfer+0x86>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
     f56:	f894 b008 	ldrb.w	fp, [r4, #8]
     f5a:	f01b 0a08 	ands.w	sl, fp, #8
     f5e:	d143      	bne.n	fe8 <i2c_nrfx_twi_transfer+0xc0>
		nrfx_twi_xfer_desc_t cur_xfer = {
     f60:	2212      	movs	r2, #18
     f62:	4651      	mov	r1, sl
     f64:	f10d 0006 	add.w	r0, sp, #6
     f68:	f001 fa69 	bl	243e <memset>
     f6c:	6862      	ldr	r2, [r4, #4]
     f6e:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
     f70:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
     f74:	6822      	ldr	r2, [r4, #0]
     f76:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
     f7a:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
     f7e:	f88d 9005 	strb.w	r9, [sp, #5]
     f82:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
     f84:	d11e      	bne.n	fc4 <i2c_nrfx_twi_transfer+0x9c>
			if ((i < (num_msgs - 1)) &&
     f86:	1e7a      	subs	r2, r7, #1
     f88:	42b2      	cmp	r2, r6
     f8a:	d902      	bls.n	f92 <i2c_nrfx_twi_transfer+0x6a>
     f8c:	7d22      	ldrb	r2, [r4, #20]
     f8e:	0752      	lsls	r2, r2, #29
     f90:	d51a      	bpl.n	fc8 <i2c_nrfx_twi_transfer+0xa0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
     f92:	bb4b      	cbnz	r3, fe8 <i2c_nrfx_twi_transfer+0xc0>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
     f94:	2220      	movs	r2, #32
	return dev->config->config_info;
     f96:	682b      	ldr	r3, [r5, #0]
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
     f98:	a901      	add	r1, sp, #4
     f9a:	6898      	ldr	r0, [r3, #8]
     f9c:	f000 fae6 	bl	156c <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
     fa0:	4540      	cmp	r0, r8
     fa2:	d013      	beq.n	fcc <i2c_nrfx_twi_transfer+0xa4>
			if (res == NRFX_ERROR_BUSY) {
     fa4:	4b13      	ldr	r3, [pc, #76]	; (ff4 <i2c_nrfx_twi_transfer+0xcc>)
     fa6:	4298      	cmp	r0, r3
     fa8:	d021      	beq.n	fee <i2c_nrfx_twi_transfer+0xc6>
				ret = -EIO;
     faa:	f06f 0404 	mvn.w	r4, #4
	return dev->config->config_info;
     fae:	682b      	ldr	r3, [r5, #0]
	nrfx_twi_disable(&get_dev_config(dev)->twi);
     fb0:	6898      	ldr	r0, [r3, #8]
     fb2:	f000 fac1 	bl	1538 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
     fb6:	68a8      	ldr	r0, [r5, #8]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     fb8:	f000 fede 	bl	1d78 <z_impl_k_sem_give>
}
     fbc:	4620      	mov	r0, r4
     fbe:	b007      	add	sp, #28
     fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t xfer_flags = 0;
     fc4:	4652      	mov	r2, sl
     fc6:	e7e6      	b.n	f96 <i2c_nrfx_twi_transfer+0x6e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
     fc8:	2240      	movs	r2, #64	; 0x40
     fca:	e7e4      	b.n	f96 <i2c_nrfx_twi_transfer+0x6e>
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
     fcc:	68a8      	ldr	r0, [r5, #8]
     fce:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
     fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     fd4:	f000 fef6 	bl	1dc4 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
     fd8:	68ab      	ldr	r3, [r5, #8]
     fda:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
     fdc:	4543      	cmp	r3, r8
     fde:	f104 040c 	add.w	r4, r4, #12
     fe2:	d1e2      	bne.n	faa <i2c_nrfx_twi_transfer+0x82>
	for (size_t i = 0; i < num_msgs; i++) {
     fe4:	3601      	adds	r6, #1
     fe6:	e7b2      	b.n	f4e <i2c_nrfx_twi_transfer+0x26>
			ret = -ENOTSUP;
     fe8:	f06f 0422 	mvn.w	r4, #34	; 0x22
     fec:	e7df      	b.n	fae <i2c_nrfx_twi_transfer+0x86>
				ret = -EBUSY;
     fee:	f06f 040f 	mvn.w	r4, #15
     ff2:	e7dc      	b.n	fae <i2c_nrfx_twi_transfer+0x86>
     ff4:	0bad000b 	.word	0x0bad000b
     ff8:	0bad0000 	.word	0x0bad0000

00000ffc <event_handler>:
	switch (p_event->type) {
     ffc:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
     ffe:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
    1000:	2a01      	cmp	r2, #1
    1002:	d00a      	beq.n	101a <event_handler+0x1e>
    1004:	b11a      	cbz	r2, 100e <event_handler+0x12>
    1006:	2a02      	cmp	r2, #2
    1008:	d009      	beq.n	101e <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
    100a:	4a06      	ldr	r2, [pc, #24]	; (1024 <event_handler+0x28>)
    100c:	e000      	b.n	1010 <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
    100e:	4a06      	ldr	r2, [pc, #24]	; (1028 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    1010:	621a      	str	r2, [r3, #32]
	z_impl_k_sem_give(sem);
    1012:	f103 0010 	add.w	r0, r3, #16
    1016:	f000 beaf 	b.w	1d78 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    101a:	4a04      	ldr	r2, [pc, #16]	; (102c <event_handler+0x30>)
    101c:	e7f8      	b.n	1010 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    101e:	4a04      	ldr	r2, [pc, #16]	; (1030 <event_handler+0x34>)
    1020:	e7f6      	b.n	1010 <event_handler+0x14>
    1022:	bf00      	nop
    1024:	0bad0001 	.word	0x0bad0001
    1028:	0bad0000 	.word	0x0bad0000
    102c:	0bae0001 	.word	0x0bae0001
    1030:	0bae0002 	.word	0x0bae0002

00001034 <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1034:	4b04      	ldr	r3, [pc, #16]	; (1048 <errata_108+0x14>)
    1036:	6818      	ldr	r0, [r3, #0]
    1038:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    103a:	bf04      	itt	eq
    103c:	4b03      	ldreq	r3, [pc, #12]	; (104c <errata_108+0x18>)
    103e:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
    1040:	1f83      	subs	r3, r0, #6
    1042:	4258      	negs	r0, r3
    1044:	4158      	adcs	r0, r3
    1046:	4770      	bx	lr
    1048:	10000130 	.word	0x10000130
    104c:	f0000fe0 	.word	0xf0000fe0

00001050 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1050:	4b07      	ldr	r3, [pc, #28]	; (1070 <errata_16+0x20>)
    1052:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
    1054:	2b06      	cmp	r3, #6
    1056:	d109      	bne.n	106c <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1058:	4b06      	ldr	r3, [pc, #24]	; (1074 <errata_16+0x24>)
    105a:	681b      	ldr	r3, [r3, #0]
    105c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1060:	3b03      	subs	r3, #3
    1062:	2b03      	cmp	r3, #3
    1064:	d802      	bhi.n	106c <errata_16+0x1c>
    1066:	4a04      	ldr	r2, [pc, #16]	; (1078 <errata_16+0x28>)
    1068:	5cd0      	ldrb	r0, [r2, r3]
    106a:	4770      	bx	lr
            }
        break;

    }

    return false;
    106c:	2000      	movs	r0, #0
}
    106e:	4770      	bx	lr
    1070:	f0000fe0 	.word	0xf0000fe0
    1074:	f0000fe8 	.word	0xf0000fe8
    1078:	00002ccc 	.word	0x00002ccc

0000107c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    107c:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
    107e:	f7ff ffd9 	bl	1034 <errata_108>
    1082:	b128      	cbz	r0, 1090 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    1084:	4b7c      	ldr	r3, [pc, #496]	; (1278 <SystemInit+0x1fc>)
    1086:	4a7d      	ldr	r2, [pc, #500]	; (127c <SystemInit+0x200>)
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	f3c3 2304 	ubfx	r3, r3, #8, #5
    108e:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
    1090:	f7ff ffde 	bl	1050 <errata_16>
    1094:	b110      	cbz	r0, 109c <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    1096:	4b7a      	ldr	r3, [pc, #488]	; (1280 <SystemInit+0x204>)
    1098:	4a7a      	ldr	r2, [pc, #488]	; (1284 <SystemInit+0x208>)
    109a:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
    109c:	f7ff ffca 	bl	1034 <errata_108>
    10a0:	b128      	cbz	r0, 10ae <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    10a2:	4b79      	ldr	r3, [pc, #484]	; (1288 <SystemInit+0x20c>)
    10a4:	4a79      	ldr	r2, [pc, #484]	; (128c <SystemInit+0x210>)
    10a6:	681b      	ldr	r3, [r3, #0]
    10a8:	f3c3 3342 	ubfx	r3, r3, #13, #3
    10ac:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
    10ae:	f7ff ffcf 	bl	1050 <errata_16>
    10b2:	b120      	cbz	r0, 10be <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    10b4:	4a76      	ldr	r2, [pc, #472]	; (1290 <SystemInit+0x214>)
    10b6:	68d3      	ldr	r3, [r2, #12]
    10b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    10bc:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
    10be:	f7ff ffb9 	bl	1034 <errata_108>
    10c2:	b140      	cbz	r0, 10d6 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    10c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    10c8:	2200      	movs	r2, #0
    10ca:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    10ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    10d2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
    10d6:	f7ff ffbb 	bl	1050 <errata_16>
    10da:	b110      	cbz	r0, 10e2 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    10dc:	4b6d      	ldr	r3, [pc, #436]	; (1294 <SystemInit+0x218>)
    10de:	2203      	movs	r2, #3
    10e0:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
    10e2:	f7ff ffb5 	bl	1050 <errata_16>
    10e6:	b140      	cbz	r0, 10fa <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    10e8:	4b6b      	ldr	r3, [pc, #428]	; (1298 <SystemInit+0x21c>)
    10ea:	2205      	movs	r2, #5
    10ec:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    10ee:	2201      	movs	r2, #1
    10f0:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    10f2:	2200      	movs	r2, #0
    10f4:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    10f6:	223f      	movs	r2, #63	; 0x3f
    10f8:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    10fa:	4b68      	ldr	r3, [pc, #416]	; (129c <SystemInit+0x220>)
    10fc:	681a      	ldr	r2, [r3, #0]
    10fe:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1100:	bf0b      	itete	eq
    1102:	4b67      	ldreq	r3, [pc, #412]	; (12a0 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
    1104:	4b67      	ldrne	r3, [pc, #412]	; (12a4 <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1106:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
    1108:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    110a:	bf02      	ittt	eq
    110c:	3308      	addeq	r3, #8
    110e:	681b      	ldreq	r3, [r3, #0]
    1110:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
    1114:	2a06      	cmp	r2, #6
    1116:	d14d      	bne.n	11b4 <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
    1118:	3b03      	subs	r3, #3
    111a:	2b03      	cmp	r3, #3
    111c:	d803      	bhi.n	1126 <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
    111e:	4a62      	ldr	r2, [pc, #392]	; (12a8 <SystemInit+0x22c>)
    1120:	5cd3      	ldrb	r3, [r2, r3]
    1122:	2b00      	cmp	r3, #0
    1124:	d046      	beq.n	11b4 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    112a:	4b60      	ldr	r3, [pc, #384]	; (12ac <SystemInit+0x230>)
    112c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1130:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1134:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1138:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    113c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1140:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1144:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1148:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    114c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1150:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1154:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1158:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    115c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1160:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1164:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1168:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    116c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    1170:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    1174:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1178:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    117c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1180:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    1184:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    1188:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    118c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    1190:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    1194:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    1198:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    119c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    11a0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    11a4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    11a8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    11ac:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    11b0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
    11b4:	f7ff ff3e 	bl	1034 <errata_108>
    11b8:	b128      	cbz	r0, 11c6 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    11ba:	4b3d      	ldr	r3, [pc, #244]	; (12b0 <SystemInit+0x234>)
    11bc:	4a3d      	ldr	r2, [pc, #244]	; (12b4 <SystemInit+0x238>)
    11be:	681b      	ldr	r3, [r3, #0]
    11c0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    11c4:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
    11c6:	f7ff ff35 	bl	1034 <errata_108>
    11ca:	b148      	cbz	r0, 11e0 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    11cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    11d4:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    11d6:	bf44      	itt	mi
    11d8:	f06f 0201 	mvnmi.w	r2, #1
    11dc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    11e0:	4b2e      	ldr	r3, [pc, #184]	; (129c <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    11e2:	681b      	ldr	r3, [r3, #0]
    11e4:	2b06      	cmp	r3, #6
    11e6:	d109      	bne.n	11fc <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
    11e8:	4b2e      	ldr	r3, [pc, #184]	; (12a4 <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
    11ea:	681b      	ldr	r3, [r3, #0]
    11ec:	3b03      	subs	r3, #3
    11ee:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    11f0:	bf81      	itttt	hi
    11f2:	4a31      	ldrhi	r2, [pc, #196]	; (12b8 <SystemInit+0x23c>)
    11f4:	6813      	ldrhi	r3, [r2, #0]
    11f6:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
    11fa:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    11fc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1200:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1204:	2a00      	cmp	r2, #0
    1206:	db03      	blt.n	1210 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    1208:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    120c:	2b00      	cmp	r3, #0
    120e:	da2f      	bge.n	1270 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1210:	4b2a      	ldr	r3, [pc, #168]	; (12bc <SystemInit+0x240>)
    1212:	2201      	movs	r2, #1
    1214:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1218:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    121c:	2a00      	cmp	r2, #0
    121e:	d0fb      	beq.n	1218 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
    1220:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    1224:	2115      	movs	r1, #21
    1226:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    122a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    122e:	2a00      	cmp	r2, #0
    1230:	d0fb      	beq.n	122a <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
    1232:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1236:	2215      	movs	r2, #21
    1238:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    123c:	4b1f      	ldr	r3, [pc, #124]	; (12bc <SystemInit+0x240>)
    123e:	461a      	mov	r2, r3
    1240:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    1244:	2900      	cmp	r1, #0
    1246:	d0fb      	beq.n	1240 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1248:	2100      	movs	r1, #0
    124a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    124e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1252:	2b00      	cmp	r3, #0
    1254:	d0fb      	beq.n	124e <SystemInit+0x1d2>
  __ASM volatile ("dsb 0xF":::"memory");
    1256:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    125a:	4919      	ldr	r1, [pc, #100]	; (12c0 <SystemInit+0x244>)
    125c:	4b19      	ldr	r3, [pc, #100]	; (12c4 <SystemInit+0x248>)
    125e:	68ca      	ldr	r2, [r1, #12]
    1260:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1264:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1266:	60cb      	str	r3, [r1, #12]
    1268:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    126c:	bf00      	nop
    126e:	e7fd      	b.n	126c <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    1270:	4b15      	ldr	r3, [pc, #84]	; (12c8 <SystemInit+0x24c>)
    1272:	4a16      	ldr	r2, [pc, #88]	; (12cc <SystemInit+0x250>)
    1274:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    1276:	bd08      	pop	{r3, pc}
    1278:	10000324 	.word	0x10000324
    127c:	40013540 	.word	0x40013540
    1280:	4007c074 	.word	0x4007c074
    1284:	baadf00d 	.word	0xbaadf00d
    1288:	10000244 	.word	0x10000244
    128c:	4000053c 	.word	0x4000053c
    1290:	e000edf0 	.word	0xe000edf0
    1294:	400005a0 	.word	0x400005a0
    1298:	40005610 	.word	0x40005610
    129c:	10000130 	.word	0x10000130
    12a0:	f0000fe0 	.word	0xf0000fe0
    12a4:	10000134 	.word	0x10000134
    12a8:	00002cd0 	.word	0x00002cd0
    12ac:	4000c000 	.word	0x4000c000
    12b0:	10000258 	.word	0x10000258
    12b4:	40000ee4 	.word	0x40000ee4
    12b8:	4000173c 	.word	0x4000173c
    12bc:	4001e000 	.word	0x4001e000
    12c0:	e000ed00 	.word	0xe000ed00
    12c4:	05fa0004 	.word	0x05fa0004
    12c8:	20000f08 	.word	0x20000f08
    12cc:	03d09000 	.word	0x03d09000

000012d0 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    12d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    12d2:	4b34      	ldr	r3, [pc, #208]	; (13a4 <twi_rx_start_transfer+0xd4>)
    12d4:	9301      	str	r3, [sp, #4]
{
    12d6:	460d      	mov	r5, r1

    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    12d8:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    12dc:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    12de:	f001 fa21 	bl	2724 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    12e2:	f44f 7192 	mov.w	r1, #292	; 0x124
    12e6:	f001 fa1d 	bl	2724 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    12ea:	f44f 718e 	mov.w	r1, #284	; 0x11c
    12ee:	f001 fa19 	bl	2724 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    12f2:	f44f 7184 	mov.w	r1, #264	; 0x108
    12f6:	f001 fa15 	bl	2724 <nrf_twi_event_clear>

    p_cb->bytes_transferred = 0;
    12fa:	2300      	movs	r3, #0
    12fc:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    12fe:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    1302:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1304:	2b01      	cmp	r3, #1
    1306:	d118      	bne.n	133a <twi_rx_start_transfer+0x6a>
    1308:	6a2b      	ldr	r3, [r5, #32]
    130a:	065b      	lsls	r3, r3, #25
    130c:	d415      	bmi.n	133a <twi_rx_start_transfer+0x6a>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    130e:	2302      	movs	r3, #2
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    1310:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    1314:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    1318:	2a02      	cmp	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    131a:	f04f 0301 	mov.w	r3, #1
    131e:	6223      	str	r3, [r4, #32]
    1320:	bf18      	it	ne
    1322:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    1324:	682b      	ldr	r3, [r5, #0]
    1326:	b193      	cbz	r3, 134e <twi_rx_start_transfer+0x7e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    1328:	f240 2386 	movw	r3, #646	; 0x286
    132c:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    132e:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1330:	481d      	ldr	r0, [pc, #116]	; (13a8 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    1332:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    1336:	b003      	add	sp, #12
    1338:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    133a:	2301      	movs	r3, #1
    133c:	e7e8      	b.n	1310 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    133e:	4629      	mov	r1, r5
    1340:	4620      	mov	r0, r4
    1342:	f001 fa17 	bl	2774 <twi_transfer>
        while ((hw_timeout > 0) &&
    1346:	b128      	cbz	r0, 1354 <twi_rx_start_transfer+0x84>
               hw_timeout--;
    1348:	9b01      	ldr	r3, [sp, #4]
    134a:	3b01      	subs	r3, #1
    134c:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    134e:	9b01      	ldr	r3, [sp, #4]
    1350:	2b00      	cmp	r3, #0
    1352:	dcf4      	bgt.n	133e <twi_rx_start_transfer+0x6e>
        if (p_cb->error)
    1354:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    1358:	b95b      	cbnz	r3, 1372 <twi_rx_start_transfer+0xa2>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    135a:	4813      	ldr	r0, [pc, #76]	; (13a8 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    135c:	9b01      	ldr	r3, [sp, #4]
    135e:	2b00      	cmp	r3, #0
    1360:	dce9      	bgt.n	1336 <twi_rx_start_transfer+0x66>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    1362:	2300      	movs	r3, #0
    1364:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    1368:	2305      	movs	r3, #5
    136a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    136e:	480f      	ldr	r0, [pc, #60]	; (13ac <twi_rx_start_transfer+0xdc>)
    return ret_code;
    1370:	e7e1      	b.n	1336 <twi_rx_start_transfer+0x66>
    uint32_t error_source = p_reg->ERRORSRC;
    1372:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    1376:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    137a:	2b00      	cmp	r3, #0
    137c:	d0ed      	beq.n	135a <twi_rx_start_transfer+0x8a>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    137e:	4a0c      	ldr	r2, [pc, #48]	; (13b0 <twi_rx_start_transfer+0xe0>)
    1380:	480a      	ldr	r0, [pc, #40]	; (13ac <twi_rx_start_transfer+0xdc>)
    1382:	f013 0f01 	tst.w	r3, #1
    1386:	bf18      	it	ne
    1388:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    138a:	f013 0f02 	tst.w	r3, #2
    138e:	f102 0201 	add.w	r2, r2, #1
    1392:	bf18      	it	ne
    1394:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1396:	f013 0f04 	tst.w	r3, #4
    139a:	4b06      	ldr	r3, [pc, #24]	; (13b4 <twi_rx_start_transfer+0xe4>)
    139c:	bf18      	it	ne
    139e:	4618      	movne	r0, r3
    13a0:	e7dc      	b.n	135c <twi_rx_start_transfer+0x8c>
    13a2:	bf00      	nop
    13a4:	000186a0 	.word	0x000186a0
    13a8:	0bad0000 	.word	0x0bad0000
    13ac:	0bad0001 	.word	0x0bad0001
    13b0:	0bae0000 	.word	0x0bae0000
    13b4:	0bae0002 	.word	0x0bae0002

000013b8 <twi_tx_start_transfer>:
{
    13b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
    13ba:	4b30      	ldr	r3, [pc, #192]	; (147c <twi_tx_start_transfer+0xc4>)
    13bc:	9301      	str	r3, [sp, #4]
{
    13be:	460d      	mov	r5, r1
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    13c0:	f44f 7182 	mov.w	r1, #260	; 0x104
{
    13c4:	4604      	mov	r4, r0
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    13c6:	f001 f9ad 	bl	2724 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    13ca:	f44f 7192 	mov.w	r1, #292	; 0x124
    13ce:	f001 f9a9 	bl	2724 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    13d2:	f44f 718e 	mov.w	r1, #284	; 0x11c
    13d6:	f001 f9a5 	bl	2724 <nrf_twi_event_clear>
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    13da:	f44f 7184 	mov.w	r1, #264	; 0x108
    13de:	f001 f9a1 	bl	2724 <nrf_twi_event_clear>
    p_reg->SHORTS = mask;
    13e2:	2300      	movs	r3, #0
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    13e4:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    13e8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
    13ec:	636b      	str	r3, [r5, #52]	; 0x34
    p_cb->error             = false;
    13ee:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    13f2:	2301      	movs	r3, #1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    13f4:	429a      	cmp	r2, r3
    13f6:	6203      	str	r3, [r0, #32]
    (void)twi_send_byte(p_twi, p_cb);
    13f8:	4629      	mov	r1, r5
    13fa:	bf18      	it	ne
    13fc:	6083      	strne	r3, [r0, #8]
    13fe:	f001 f999 	bl	2734 <twi_send_byte>
    if (p_cb->handler)
    1402:	682b      	ldr	r3, [r5, #0]
    1404:	b183      	cbz	r3, 1428 <twi_tx_start_transfer+0x70>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    1406:	f240 2386 	movw	r3, #646	; 0x286
    140a:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    140c:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    140e:	481c      	ldr	r0, [pc, #112]	; (1480 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    1410:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    1414:	b003      	add	sp, #12
    1416:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    1418:	4629      	mov	r1, r5
    141a:	4620      	mov	r0, r4
    141c:	f001 f9aa 	bl	2774 <twi_transfer>
        while ((hw_timeout > 0) &&
    1420:	b128      	cbz	r0, 142e <twi_tx_start_transfer+0x76>
            hw_timeout--;
    1422:	9b01      	ldr	r3, [sp, #4]
    1424:	3b01      	subs	r3, #1
    1426:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    1428:	9b01      	ldr	r3, [sp, #4]
    142a:	2b00      	cmp	r3, #0
    142c:	dcf4      	bgt.n	1418 <twi_tx_start_transfer+0x60>
        if (p_cb->error)
    142e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    1432:	b95b      	cbnz	r3, 144c <twi_tx_start_transfer+0x94>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    1434:	4812      	ldr	r0, [pc, #72]	; (1480 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    1436:	9b01      	ldr	r3, [sp, #4]
    1438:	2b00      	cmp	r3, #0
    143a:	dceb      	bgt.n	1414 <twi_tx_start_transfer+0x5c>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    143c:	2300      	movs	r3, #0
    143e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    1442:	2305      	movs	r3, #5
    1444:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    1448:	480e      	ldr	r0, [pc, #56]	; (1484 <twi_tx_start_transfer+0xcc>)
    return ret_code;
    144a:	e7e3      	b.n	1414 <twi_tx_start_transfer+0x5c>
    uint32_t error_source = p_reg->ERRORSRC;
    144c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    1450:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    1454:	2b00      	cmp	r3, #0
    1456:	d0ed      	beq.n	1434 <twi_tx_start_transfer+0x7c>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    1458:	4a0b      	ldr	r2, [pc, #44]	; (1488 <twi_tx_start_transfer+0xd0>)
    145a:	480a      	ldr	r0, [pc, #40]	; (1484 <twi_tx_start_transfer+0xcc>)
    145c:	f013 0f01 	tst.w	r3, #1
    1460:	bf18      	it	ne
    1462:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1464:	f013 0f02 	tst.w	r3, #2
    1468:	f102 0201 	add.w	r2, r2, #1
    146c:	bf18      	it	ne
    146e:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1470:	f013 0f04 	tst.w	r3, #4
    1474:	4b05      	ldr	r3, [pc, #20]	; (148c <twi_tx_start_transfer+0xd4>)
    1476:	bf18      	it	ne
    1478:	4618      	movne	r0, r3
    147a:	e7dc      	b.n	1436 <twi_tx_start_transfer+0x7e>
    147c:	000186a0 	.word	0x000186a0
    1480:	0bad0000 	.word	0x0bad0000
    1484:	0bad0001 	.word	0x0bad0001
    1488:	0bae0000 	.word	0x0bae0000
    148c:	0bae0002 	.word	0x0bae0002

00001490 <nrfx_twi_init>:
{
    1490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    1492:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    1494:	4d1d      	ldr	r5, [pc, #116]	; (150c <nrfx_twi_init+0x7c>)
    1496:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    149a:	fb0c fc07 	mul.w	ip, ip, r7
    149e:	eb05 040c 	add.w	r4, r5, ip
    14a2:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    14a6:	bb7e      	cbnz	r6, 1508 <nrfx_twi_init+0x78>
    p_cb->p_context       = p_context;
    14a8:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    14aa:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    14ac:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    14ae:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
    14b2:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
    14b6:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    14ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
    14be:	680c      	ldr	r4, [r1, #0]
    p_cb->handler         = event_handler;
    14c0:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    14c4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    14c8:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
    14cc:	f240 6c0c 	movw	ip, #1548	; 0x60c
    14d0:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    14d4:	684b      	ldr	r3, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    14d6:	6800      	ldr	r0, [r0, #0]
    14d8:	f503 7ee0 	add.w	lr, r3, #448	; 0x1c0
    14dc:	f846 c02e 	str.w	ip, [r6, lr, lsl #2]
    p_reg->PSELSCL = scl_pin;
    14e0:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    14e4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    14e8:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    14ea:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    14ee:	b11a      	cbz	r2, 14f8 <nrfx_twi_init+0x68>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    14f0:	f340 3007 	sbfx	r0, r0, #12, #8
    14f4:	f7ff f8e4 	bl	6c0 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    14f8:	233c      	movs	r3, #60	; 0x3c
    14fa:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    14fe:	4804      	ldr	r0, [pc, #16]	; (1510 <nrfx_twi_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1500:	2301      	movs	r3, #1
    1502:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    1506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    1508:	4802      	ldr	r0, [pc, #8]	; (1514 <nrfx_twi_init+0x84>)
    150a:	e7fc      	b.n	1506 <nrfx_twi_init+0x76>
    150c:	20000044 	.word	0x20000044
    1510:	0bad0000 	.word	0x0bad0000
    1514:	0bad0005 	.word	0x0bad0005

00001518 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    1518:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    151a:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    151c:	2105      	movs	r1, #5
    151e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    1522:	4a04      	ldr	r2, [pc, #16]	; (1534 <nrfx_twi_enable+0x1c>)
    1524:	213c      	movs	r1, #60	; 0x3c
    1526:	fb01 2303 	mla	r3, r1, r3, r2
    152a:	2202      	movs	r2, #2
    152c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    1530:	4770      	bx	lr
    1532:	bf00      	nop
    1534:	20000044 	.word	0x20000044

00001538 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    1538:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    153a:	490a      	ldr	r1, [pc, #40]	; (1564 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    153c:	7902      	ldrb	r2, [r0, #4]
    153e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    1542:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    1546:	f021 0103 	bic.w	r1, r1, #3
    154a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    154e:	2100      	movs	r1, #0
    1550:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1554:	4b04      	ldr	r3, [pc, #16]	; (1568 <nrfx_twi_disable+0x30>)
    1556:	213c      	movs	r1, #60	; 0x3c
    1558:	fb01 3202 	mla	r2, r1, r2, r3
    155c:	2301      	movs	r3, #1
    155e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
    1562:	4770      	bx	lr
    1564:	00044286 	.word	0x00044286
    1568:	20000044 	.word	0x20000044

0000156c <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    156c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    1570:	4d32      	ldr	r5, [pc, #200]	; (163c <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1572:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    1576:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    157a:	233c      	movs	r3, #60	; 0x3c
    157c:	fb03 5308 	mla	r3, r3, r8, r5
{
    1580:	460e      	mov	r6, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    1582:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    1586:	2b01      	cmp	r3, #1
{
    1588:	4696      	mov	lr, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    158a:	d104      	bne.n	1596 <nrfx_twi_xfer+0x2a>
    158c:	780b      	ldrb	r3, [r1, #0]
    158e:	2b01      	cmp	r3, #1
    1590:	d106      	bne.n	15a0 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
    1592:	482b      	ldr	r0, [pc, #172]	; (1640 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    1594:	e011      	b.n	15ba <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    1596:	2b02      	cmp	r3, #2
    1598:	d102      	bne.n	15a0 <nrfx_twi_xfer+0x34>
    159a:	780b      	ldrb	r3, [r1, #0]
    159c:	2b01      	cmp	r3, #1
    159e:	d1f8      	bne.n	1592 <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
    15a0:	243c      	movs	r4, #60	; 0x3c
    p_reg->INTENCLR = mask;
    15a2:	4b28      	ldr	r3, [pc, #160]	; (1644 <nrfx_twi_xfer+0xd8>)
    15a4:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    15a8:	fb04 5408 	mla	r4, r4, r8, r5
    15ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    15b0:	b12b      	cbz	r3, 15be <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    15b2:	68a3      	ldr	r3, [r4, #8]
        return err_code;
    15b4:	4824      	ldr	r0, [pc, #144]	; (1648 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
    15b6:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    15ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    15be:	f08e 0304 	eor.w	r3, lr, #4
    15c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    15c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    p_cb->flags       = flags;
    15ca:	f8c4 e020 	str.w	lr, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    15ce:	46b4      	mov	ip, r6
    15d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    15d4:	f104 070c 	add.w	r7, r4, #12
    15d8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    15da:	f8dc 3000 	ldr.w	r3, [ip]
    15de:	603b      	str	r3, [r7, #0]
    p_cb->curr_length = p_xfer_desc->primary_length;
    15e0:	6873      	ldr	r3, [r6, #4]
    15e2:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    15e4:	68f3      	ldr	r3, [r6, #12]
    15e6:	6263      	str	r3, [r4, #36]	; 0x24
    p_reg->ADDRESS = address;
    15e8:	7873      	ldrb	r3, [r6, #1]
    15ea:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    15ee:	7833      	ldrb	r3, [r6, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    15f0:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    15f4:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    15f6:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    15fa:	d01a      	beq.n	1632 <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    15fc:	b9b3      	cbnz	r3, 162c <nrfx_twi_xfer+0xc0>
    15fe:	f3ce 1e40 	ubfx	lr, lr, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    1602:	233c      	movs	r3, #60	; 0x3c
    1604:	fb03 5308 	mla	r3, r3, r8, r5
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    1608:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    160a:	f883 e02c 	strb.w	lr, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    160e:	4648      	mov	r0, r9
    1610:	f7ff fed2 	bl	13b8 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    1614:	233c      	movs	r3, #60	; 0x3c
    1616:	fb03 f808 	mul.w	r8, r3, r8
    161a:	eb05 0208 	add.w	r2, r5, r8
    161e:	f855 3008 	ldr.w	r3, [r5, r8]
    1622:	2b00      	cmp	r3, #0
    1624:	d1c9      	bne.n	15ba <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
    1626:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    162a:	e7c6      	b.n	15ba <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    162c:	f04f 0e01 	mov.w	lr, #1
    1630:	e7e7      	b.n	1602 <nrfx_twi_xfer+0x96>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    1632:	4651      	mov	r1, sl
    1634:	4648      	mov	r0, r9
    1636:	f7ff fe4b 	bl	12d0 <twi_rx_start_transfer>
    163a:	e7eb      	b.n	1614 <nrfx_twi_xfer+0xa8>
    163c:	20000044 	.word	0x20000044
    1640:	0bad0005 	.word	0x0bad0005
    1644:	00044286 	.word	0x00044286
    1648:	0bad000b 	.word	0x0bad000b

0000164c <nrfx_twi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
    164c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    164e:	4c29      	ldr	r4, [pc, #164]	; (16f4 <nrfx_twi_1_irq_handler+0xa8>)
{
    1650:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    1652:	4621      	mov	r1, r4
    1654:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    1658:	f001 f88c 	bl	2774 <twi_transfer>
    165c:	46a4      	mov	ip, r4
    165e:	b9e0      	cbnz	r0, 169a <nrfx_twi_1_irq_handler+0x4e>
    if (!p_cb->error &&
    1660:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    1664:	6a26      	ldr	r6, [r4, #32]
    1666:	b9ef      	cbnz	r7, 16a4 <nrfx_twi_1_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    1668:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    166a:	1e9a      	subs	r2, r3, #2
    166c:	2a01      	cmp	r2, #1
    166e:	d819      	bhi.n	16a4 <nrfx_twi_1_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    1670:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1672:	69a2      	ldr	r2, [r4, #24]
    1674:	4291      	cmp	r1, r2
    1676:	d115      	bne.n	16a4 <nrfx_twi_1_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    1678:	69e2      	ldr	r2, [r4, #28]
    167a:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    167c:	f3c6 1640 	ubfx	r6, r6, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    1680:	6962      	ldr	r2, [r4, #20]
    1682:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    1684:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    1686:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    168a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    168e:	4621      	mov	r1, r4
    1690:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    1694:	d103      	bne.n	169e <nrfx_twi_1_irq_handler+0x52>
            (void)twi_tx_start_transfer(p_twi, p_cb);
    1696:	f7ff fe8f 	bl	13b8 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
}
    169a:	b007      	add	sp, #28
    169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    169e:	f7ff fe17 	bl	12d0 <twi_rx_start_transfer>
    16a2:	e7fa      	b.n	169a <nrfx_twi_1_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
    16a4:	4d14      	ldr	r5, [pc, #80]	; (16f8 <nrfx_twi_1_irq_handler+0xac>)
    16a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    16a8:	ac01      	add	r4, sp, #4
    16aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    16ac:	682b      	ldr	r3, [r5, #0]
    16ae:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
    16b0:	b1e7      	cbz	r7, 16ec <nrfx_twi_1_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
    16b2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    16b6:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    16ba:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    16be:	0798      	lsls	r0, r3, #30
    16c0:	d50c      	bpl.n	16dc <nrfx_twi_1_irq_handler+0x90>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    16c2:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    16c4:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    16c8:	2300      	movs	r3, #0
    16ca:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)))
    16ce:	0773      	lsls	r3, r6, #29
    16d0:	d4e3      	bmi.n	169a <nrfx_twi_1_irq_handler+0x4e>
            p_cb->handler(&event, p_cb->p_context);
    16d2:	e9dc 3100 	ldrd	r3, r1, [ip]
    16d6:	4668      	mov	r0, sp
    16d8:	4798      	blx	r3
}
    16da:	e7de      	b.n	169a <nrfx_twi_1_irq_handler+0x4e>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    16dc:	0759      	lsls	r1, r3, #29
    16de:	d501      	bpl.n	16e4 <nrfx_twi_1_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    16e0:	2302      	movs	r3, #2
    16e2:	e7ef      	b.n	16c4 <nrfx_twi_1_irq_handler+0x78>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    16e4:	07da      	lsls	r2, r3, #31
    16e6:	d5ef      	bpl.n	16c8 <nrfx_twi_1_irq_handler+0x7c>
                event.type = NRFX_TWI_EVT_OVERRUN;
    16e8:	2303      	movs	r3, #3
    16ea:	e7eb      	b.n	16c4 <nrfx_twi_1_irq_handler+0x78>
            event.type = NRFX_TWI_EVT_DONE;
    16ec:	f88d 7000 	strb.w	r7, [sp]
    16f0:	e7ea      	b.n	16c8 <nrfx_twi_1_irq_handler+0x7c>
    16f2:	bf00      	nop
    16f4:	20000044 	.word	0x20000044
    16f8:	20000050 	.word	0x20000050

000016fc <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    16fc:	4b09      	ldr	r3, [pc, #36]	; (1724 <z_sys_device_do_config_level+0x28>)
{
    16fe:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    1700:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1704:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    1706:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1708:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    170c:	42a5      	cmp	r5, r4
    170e:	d800      	bhi.n	1712 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    1710:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    1712:	6823      	ldr	r3, [r4, #0]
    1714:	4620      	mov	r0, r4
    1716:	685b      	ldr	r3, [r3, #4]
    1718:	4798      	blx	r3
		if (retval != 0) {
    171a:	b100      	cbz	r0, 171e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    171c:	6066      	str	r6, [r4, #4]
								info++) {
    171e:	340c      	adds	r4, #12
    1720:	e7f4      	b.n	170c <z_sys_device_do_config_level+0x10>
    1722:	bf00      	nop
    1724:	00002c88 	.word	0x00002c88

00001728 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1728:	4b10      	ldr	r3, [pc, #64]	; (176c <z_impl_device_get_binding+0x44>)
{
    172a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    172c:	4c10      	ldr	r4, [pc, #64]	; (1770 <z_impl_device_get_binding+0x48>)
{
    172e:	4605      	mov	r5, r0
    1730:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    1732:	429c      	cmp	r4, r3
    1734:	d104      	bne.n	1740 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1736:	4c0e      	ldr	r4, [pc, #56]	; (1770 <z_impl_device_get_binding+0x48>)
    1738:	42b4      	cmp	r4, r6
    173a:	d109      	bne.n	1750 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    173c:	2400      	movs	r4, #0
    173e:	e012      	b.n	1766 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    1740:	6862      	ldr	r2, [r4, #4]
    1742:	b11a      	cbz	r2, 174c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    1744:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    1746:	6812      	ldr	r2, [r2, #0]
    1748:	42aa      	cmp	r2, r5
    174a:	d00c      	beq.n	1766 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    174c:	340c      	adds	r4, #12
    174e:	e7f0      	b.n	1732 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    1750:	6863      	ldr	r3, [r4, #4]
    1752:	b90b      	cbnz	r3, 1758 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1754:	340c      	adds	r4, #12
    1756:	e7ef      	b.n	1738 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    1758:	6823      	ldr	r3, [r4, #0]
    175a:	4628      	mov	r0, r5
    175c:	6819      	ldr	r1, [r3, #0]
    175e:	f000 fe38 	bl	23d2 <strcmp>
    1762:	2800      	cmp	r0, #0
    1764:	d1f6      	bne.n	1754 <z_impl_device_get_binding+0x2c>
}
    1766:	4620      	mov	r0, r4
    1768:	bd70      	pop	{r4, r5, r6, pc}
    176a:	bf00      	nop
    176c:	20000f68 	.word	0x20000f68
    1770:	20000f14 	.word	0x20000f14

00001774 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1774:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1776:	4d0b      	ldr	r5, [pc, #44]	; (17a4 <idle+0x30>)
	__asm__ volatile(
    1778:	f04f 0220 	mov.w	r2, #32
    177c:	f3ef 8311 	mrs	r3, BASEPRI
    1780:	f382 8811 	msr	BASEPRI, r2
    1784:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1788:	f001 f93c 	bl	2a04 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    178c:	2101      	movs	r1, #1
    178e:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    1790:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1792:	bfd8      	it	le
    1794:	4608      	movle	r0, r1
    1796:	f001 f945 	bl	2a24 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    179a:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    179c:	f7fe fffe 	bl	79c <arch_cpu_idle>
    17a0:	e7ea      	b.n	1778 <idle+0x4>
    17a2:	bf00      	nop
    17a4:	20000158 	.word	0x20000158

000017a8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    17a8:	4802      	ldr	r0, [pc, #8]	; (17b4 <z_bss_zero+0xc>)
    17aa:	4a03      	ldr	r2, [pc, #12]	; (17b8 <z_bss_zero+0x10>)
    17ac:	2100      	movs	r1, #0
    17ae:	1a12      	subs	r2, r2, r0
    17b0:	f000 be45 	b.w	243e <memset>
    17b4:	20000000 	.word	0x20000000
    17b8:	2000019c 	.word	0x2000019c

000017bc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    17bc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    17be:	4806      	ldr	r0, [pc, #24]	; (17d8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    17c0:	4a06      	ldr	r2, [pc, #24]	; (17dc <z_data_copy+0x20>)
    17c2:	4907      	ldr	r1, [pc, #28]	; (17e0 <z_data_copy+0x24>)
    17c4:	1a12      	subs	r2, r2, r0
    17c6:	f000 fe10 	bl	23ea <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    17ca:	4a06      	ldr	r2, [pc, #24]	; (17e4 <z_data_copy+0x28>)
    17cc:	4906      	ldr	r1, [pc, #24]	; (17e8 <z_data_copy+0x2c>)
    17ce:	4807      	ldr	r0, [pc, #28]	; (17ec <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    17d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    17d4:	f000 be09 	b.w	23ea <memcpy>
    17d8:	20000ee0 	.word	0x20000ee0
    17dc:	20000f7c 	.word	0x20000f7c
    17e0:	00002ce0 	.word	0x00002ce0
    17e4:	00000000 	.word	0x00000000
    17e8:	00002ce0 	.word	0x00002ce0
    17ec:	20000000 	.word	0x20000000

000017f0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    17f0:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    17f2:	4b09      	ldr	r3, [pc, #36]	; (1818 <bg_thread_main+0x28>)
    17f4:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    17f6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    17f8:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    17fa:	f7ff ff7f 	bl	16fc <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    17fe:	2003      	movs	r0, #3
    1800:	f7ff ff7c 	bl	16fc <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    1804:	f000 fb3e 	bl	1e84 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1808:	f7fe fddc 	bl	3c4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    180c:	4a03      	ldr	r2, [pc, #12]	; (181c <bg_thread_main+0x2c>)
    180e:	7b13      	ldrb	r3, [r2, #12]
    1810:	f023 0301 	bic.w	r3, r3, #1
    1814:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1816:	bd08      	pop	{r3, pc}
    1818:	2000019a 	.word	0x2000019a
    181c:	200000ec 	.word	0x200000ec

00001820 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1820:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    1822:	4b36      	ldr	r3, [pc, #216]	; (18fc <z_cstart+0xdc>)
    1824:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1826:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    182a:	4c35      	ldr	r4, [pc, #212]	; (1900 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    182c:	4e35      	ldr	r6, [pc, #212]	; (1904 <z_cstart+0xe4>)
    182e:	6963      	ldr	r3, [r4, #20]
    1830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1834:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1836:	2500      	movs	r5, #0
    1838:	23e0      	movs	r3, #224	; 0xe0
    183a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    183e:	77e5      	strb	r5, [r4, #31]
    1840:	7625      	strb	r5, [r4, #24]
    1842:	7665      	strb	r5, [r4, #25]
    1844:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1846:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1848:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    184c:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    184e:	f7ff f8c7 	bl	9e0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1852:	f7fe ff9d 	bl	790 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    185a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    185c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    185e:	ab07      	add	r3, sp, #28
    1860:	226c      	movs	r2, #108	; 0x6c
    1862:	4629      	mov	r1, r5
    1864:	4618      	mov	r0, r3
    1866:	f000 fdea 	bl	243e <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    186a:	4c27      	ldr	r4, [pc, #156]	; (1908 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
    186c:	2701      	movs	r7, #1
	_current = &dummy_thread;
    186e:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1870:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    1872:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1876:	f7ff ff41 	bl	16fc <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    187a:	4638      	mov	r0, r7
    187c:	f7ff ff3e 	bl	16fc <z_sys_device_do_config_level>
	z_sched_init();
    1880:	f000 fa68 	bl	1d54 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1884:	4b21      	ldr	r3, [pc, #132]	; (190c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    1886:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1888:	f44f 6280 	mov.w	r2, #1024	; 0x400
    188c:	e9cd 7304 	strd	r7, r3, [sp, #16]
    1890:	e9cd 5502 	strd	r5, r5, [sp, #8]
    1894:	4b1e      	ldr	r3, [pc, #120]	; (1910 <z_cstart+0xf0>)
    1896:	491f      	ldr	r1, [pc, #124]	; (1914 <z_cstart+0xf4>)
    1898:	e9cd 5500 	strd	r5, r5, [sp]
    189c:	4630      	mov	r0, r6
    189e:	f000 fad9 	bl	1e54 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    18a2:	7b73      	ldrb	r3, [r6, #13]
    18a4:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    18a8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    18ac:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    18ae:	d104      	bne.n	18ba <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    18b0:	69b3      	ldr	r3, [r6, #24]
    18b2:	b913      	cbnz	r3, 18ba <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
    18b4:	4630      	mov	r0, r6
    18b6:	f000 f8df 	bl	1a78 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
    18ba:	4b17      	ldr	r3, [pc, #92]	; (1918 <z_cstart+0xf8>)
    18bc:	4d17      	ldr	r5, [pc, #92]	; (191c <z_cstart+0xfc>)
    18be:	9305      	str	r3, [sp, #20]
    18c0:	2201      	movs	r2, #1
    18c2:	230f      	movs	r3, #15
    18c4:	e9cd 3203 	strd	r3, r2, [sp, #12]
    18c8:	2300      	movs	r3, #0
    18ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
    18ce:	9300      	str	r3, [sp, #0]
    18d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    18d4:	4b12      	ldr	r3, [pc, #72]	; (1920 <z_cstart+0x100>)
    18d6:	4913      	ldr	r1, [pc, #76]	; (1924 <z_cstart+0x104>)
    18d8:	4628      	mov	r0, r5
    18da:	f000 fabb 	bl	1e54 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    18de:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    18e0:	60e5      	str	r5, [r4, #12]
    18e2:	f023 0304 	bic.w	r3, r3, #4
    18e6:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    18e8:	4b0f      	ldr	r3, [pc, #60]	; (1928 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    18ea:	490a      	ldr	r1, [pc, #40]	; (1914 <z_cstart+0xf4>)
    18ec:	4805      	ldr	r0, [pc, #20]	; (1904 <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
    18ee:	e9c4 3306 	strd	r3, r3, [r4, #24]
    18f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    18f6:	4b06      	ldr	r3, [pc, #24]	; (1910 <z_cstart+0xf0>)
    18f8:	f7fe ff2c 	bl	754 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    18fc:	20000ee0 	.word	0x20000ee0
    1900:	e000ed00 	.word	0xe000ed00
    1904:	200000ec 	.word	0x200000ec
    1908:	20000158 	.word	0x20000158
    190c:	00002cd4 	.word	0x00002cd4
    1910:	000017f1 	.word	0x000017f1
    1914:	200001a0 	.word	0x200001a0
    1918:	00002cd9 	.word	0x00002cd9
    191c:	20000080 	.word	0x20000080
    1920:	00001775 	.word	0x00001775
    1924:	200005a0 	.word	0x200005a0
    1928:	20000170 	.word	0x20000170

0000192c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    192c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    192e:	4c08      	ldr	r4, [pc, #32]	; (1950 <z_reset_time_slice+0x24>)
    1930:	6823      	ldr	r3, [r4, #0]
    1932:	b15b      	cbz	r3, 194c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    1934:	f7fe fe48 	bl	5c8 <z_clock_elapsed>
    1938:	6823      	ldr	r3, [r4, #0]
    193a:	4a06      	ldr	r2, [pc, #24]	; (1954 <z_reset_time_slice+0x28>)
    193c:	4418      	add	r0, r3
    193e:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    1940:	2100      	movs	r1, #0
    1942:	4618      	mov	r0, r3
	}
}
    1944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    1948:	f001 b86c 	b.w	2a24 <z_set_timeout_expiry>
}
    194c:	bd10      	pop	{r4, pc}
    194e:	bf00      	nop
    1950:	20000190 	.word	0x20000190
    1954:	20000158 	.word	0x20000158

00001958 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    1958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    195a:	460d      	mov	r5, r1
    195c:	f04f 0320 	mov.w	r3, #32
    1960:	f3ef 8411 	mrs	r4, BASEPRI
    1964:	f383 8811 	msr	BASEPRI, r3
    1968:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    196c:	4b0d      	ldr	r3, [pc, #52]	; (19a4 <k_sched_time_slice_set+0x4c>)
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    196e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1972:	f240 36e7 	movw	r6, #999	; 0x3e7
    1976:	2700      	movs	r7, #0
    1978:	fbe1 6700 	umlal	r6, r7, r1, r0
    197c:	2200      	movs	r2, #0
    197e:	611a      	str	r2, [r3, #16]
    1980:	4630      	mov	r0, r6
    1982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1986:	2300      	movs	r3, #0
    1988:	4639      	mov	r1, r7
    198a:	f7fe fba7 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    198e:	4b06      	ldr	r3, [pc, #24]	; (19a8 <k_sched_time_slice_set+0x50>)
    1990:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    1992:	4b06      	ldr	r3, [pc, #24]	; (19ac <k_sched_time_slice_set+0x54>)
    1994:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    1996:	f7ff ffc9 	bl	192c <z_reset_time_slice>
	__asm__ volatile(
    199a:	f384 8811 	msr	BASEPRI, r4
    199e:	f3bf 8f6f 	isb	sy
	}
}
    19a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a4:	20000158 	.word	0x20000158
    19a8:	20000190 	.word	0x20000190
    19ac:	2000018c 	.word	0x2000018c

000019b0 <k_sched_lock>:
	__asm__ volatile(
    19b0:	f04f 0320 	mov.w	r3, #32
    19b4:	f3ef 8111 	mrs	r1, BASEPRI
    19b8:	f383 8811 	msr	BASEPRI, r3
    19bc:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    19c0:	4b04      	ldr	r3, [pc, #16]	; (19d4 <k_sched_lock+0x24>)
    19c2:	689a      	ldr	r2, [r3, #8]
    19c4:	7bd3      	ldrb	r3, [r2, #15]
    19c6:	3b01      	subs	r3, #1
    19c8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    19ca:	f381 8811 	msr	BASEPRI, r1
    19ce:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    19d2:	4770      	bx	lr
    19d4:	20000158 	.word	0x20000158

000019d8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    19d8:	4b09      	ldr	r3, [pc, #36]	; (1a00 <z_priq_dumb_remove+0x28>)
    19da:	f103 0228 	add.w	r2, r3, #40	; 0x28
    19de:	4282      	cmp	r2, r0
    19e0:	d105      	bne.n	19ee <z_priq_dumb_remove+0x16>
    19e2:	689b      	ldr	r3, [r3, #8]
    19e4:	428b      	cmp	r3, r1
    19e6:	d102      	bne.n	19ee <z_priq_dumb_remove+0x16>
    19e8:	7b4b      	ldrb	r3, [r1, #13]
    19ea:	06db      	lsls	r3, r3, #27
    19ec:	d106      	bne.n	19fc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    19ee:	e9d1 3200 	ldrd	r3, r2, [r1]
    19f2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    19f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    19f6:	2300      	movs	r3, #0
	node->prev = NULL;
    19f8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    19fc:	4770      	bx	lr
    19fe:	bf00      	nop
    1a00:	20000158 	.word	0x20000158

00001a04 <update_cache>:
{
    1a04:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    1a06:	4c0d      	ldr	r4, [pc, #52]	; (1a3c <update_cache+0x38>)
{
    1a08:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    1a0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1a0e:	f000 ff70 	bl	28f2 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
    1a12:	4605      	mov	r5, r0
    1a14:	b900      	cbnz	r0, 1a18 <update_cache+0x14>
    1a16:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    1a18:	68a3      	ldr	r3, [r4, #8]
    1a1a:	b94a      	cbnz	r2, 1a30 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    1a1c:	7b5a      	ldrb	r2, [r3, #13]
    1a1e:	06d2      	lsls	r2, r2, #27
    1a20:	d106      	bne.n	1a30 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    1a22:	69aa      	ldr	r2, [r5, #24]
    1a24:	b922      	cbnz	r2, 1a30 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    1a26:	89da      	ldrh	r2, [r3, #14]
    1a28:	2a7f      	cmp	r2, #127	; 0x7f
    1a2a:	d901      	bls.n	1a30 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    1a2c:	6263      	str	r3, [r4, #36]	; 0x24
}
    1a2e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    1a30:	429d      	cmp	r5, r3
    1a32:	d001      	beq.n	1a38 <update_cache+0x34>
			z_reset_time_slice();
    1a34:	f7ff ff7a 	bl	192c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    1a38:	6265      	str	r5, [r4, #36]	; 0x24
}
    1a3a:	e7f8      	b.n	1a2e <update_cache+0x2a>
    1a3c:	20000158 	.word	0x20000158

00001a40 <k_sched_unlock>:
{
    1a40:	b510      	push	{r4, lr}
	__asm__ volatile(
    1a42:	f04f 0320 	mov.w	r3, #32
    1a46:	f3ef 8411 	mrs	r4, BASEPRI
    1a4a:	f383 8811 	msr	BASEPRI, r3
    1a4e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    1a52:	4b08      	ldr	r3, [pc, #32]	; (1a74 <k_sched_unlock+0x34>)
    1a54:	689a      	ldr	r2, [r3, #8]
    1a56:	7bd3      	ldrb	r3, [r2, #15]
    1a58:	3301      	adds	r3, #1
    1a5a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    1a5c:	2000      	movs	r0, #0
    1a5e:	f7ff ffd1 	bl	1a04 <update_cache>
	__asm__ volatile(
    1a62:	f384 8811 	msr	BASEPRI, r4
    1a66:	f3bf 8f6f 	isb	sy
}
    1a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    1a6e:	f000 bf36 	b.w	28de <z_reschedule_unlocked>
    1a72:	bf00      	nop
    1a74:	20000158 	.word	0x20000158

00001a78 <z_add_thread_to_ready_q>:
{
    1a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1a7a:	f04f 0320 	mov.w	r3, #32
    1a7e:	f3ef 8411 	mrs	r4, BASEPRI
    1a82:	f383 8811 	msr	BASEPRI, r3
    1a86:	f3bf 8f6f 	isb	sy
	return list->head == list;
    1a8a:	4a15      	ldr	r2, [pc, #84]	; (1ae0 <z_add_thread_to_ready_q+0x68>)
    1a8c:	4611      	mov	r1, r2
    1a8e:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1a92:	428b      	cmp	r3, r1
    1a94:	d01d      	beq.n	1ad2 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1a96:	b1e3      	cbz	r3, 1ad2 <z_add_thread_to_ready_q+0x5a>
    1a98:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    1a9a:	f990 500e 	ldrsb.w	r5, [r0, #14]
    1a9e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    1aa2:	42af      	cmp	r7, r5
    1aa4:	dd10      	ble.n	1ac8 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    1aa6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    1aa8:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    1aac:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    1aae:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    1ab0:	7b43      	ldrb	r3, [r0, #13]
    1ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ab6:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    1ab8:	2000      	movs	r0, #0
    1aba:	f7ff ffa3 	bl	1a04 <update_cache>
	__asm__ volatile(
    1abe:	f384 8811 	msr	BASEPRI, r4
    1ac2:	f3bf 8f6f 	isb	sy
}
    1ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    1ac8:	42b3      	cmp	r3, r6
    1aca:	d002      	beq.n	1ad2 <z_add_thread_to_ready_q+0x5a>
    1acc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d1e5      	bne.n	1a9e <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    1ad2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1ad4:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    1ad6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    1ad8:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    1ada:	6018      	str	r0, [r3, #0]
	list->tail = node;
    1adc:	62d0      	str	r0, [r2, #44]	; 0x2c
    1ade:	e7e7      	b.n	1ab0 <z_add_thread_to_ready_q+0x38>
    1ae0:	20000158 	.word	0x20000158

00001ae4 <z_move_thread_to_end_of_prio_q>:
{
    1ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ae6:	4604      	mov	r4, r0
	__asm__ volatile(
    1ae8:	f04f 0320 	mov.w	r3, #32
    1aec:	f3ef 8511 	mrs	r5, BASEPRI
    1af0:	f383 8811 	msr	BASEPRI, r3
    1af4:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    1af8:	7b43      	ldrb	r3, [r0, #13]
    1afa:	065a      	lsls	r2, r3, #25
    1afc:	d503      	bpl.n	1b06 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    1afe:	4601      	mov	r1, r0
    1b00:	4817      	ldr	r0, [pc, #92]	; (1b60 <z_move_thread_to_end_of_prio_q+0x7c>)
    1b02:	f7ff ff69 	bl	19d8 <z_priq_dumb_remove>
	return list->head == list;
    1b06:	4a17      	ldr	r2, [pc, #92]	; (1b64 <z_move_thread_to_end_of_prio_q+0x80>)
    1b08:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1b0c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    1b10:	428b      	cmp	r3, r1
    1b12:	d01f      	beq.n	1b54 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1b14:	b1f3      	cbz	r3, 1b54 <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    1b16:	f994 600e 	ldrsb.w	r6, [r4, #14]
    1b1a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    1b1e:	42b7      	cmp	r7, r6
    1b20:	dd13      	ble.n	1b4a <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    1b22:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    1b24:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    1b28:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    1b2a:	605c      	str	r4, [r3, #4]
    1b2c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    1b2e:	6890      	ldr	r0, [r2, #8]
    1b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b34:	7363      	strb	r3, [r4, #13]
    1b36:	1b03      	subs	r3, r0, r4
    1b38:	4258      	negs	r0, r3
    1b3a:	4158      	adcs	r0, r3
    1b3c:	f7ff ff62 	bl	1a04 <update_cache>
	__asm__ volatile(
    1b40:	f385 8811 	msr	BASEPRI, r5
    1b44:	f3bf 8f6f 	isb	sy
}
    1b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    1b4a:	4283      	cmp	r3, r0
    1b4c:	d002      	beq.n	1b54 <z_move_thread_to_end_of_prio_q+0x70>
    1b4e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1b50:	2b00      	cmp	r3, #0
    1b52:	d1e2      	bne.n	1b1a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    1b54:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    1b58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1b5a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    1b5c:	62d4      	str	r4, [r2, #44]	; 0x2c
    1b5e:	e7e5      	b.n	1b2c <z_move_thread_to_end_of_prio_q+0x48>
    1b60:	20000180 	.word	0x20000180
    1b64:	20000158 	.word	0x20000158

00001b68 <z_time_slice>:
	if (pending_current == _current) {
    1b68:	4a15      	ldr	r2, [pc, #84]	; (1bc0 <z_time_slice+0x58>)
    1b6a:	4916      	ldr	r1, [pc, #88]	; (1bc4 <z_time_slice+0x5c>)
{
    1b6c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    1b6e:	680c      	ldr	r4, [r1, #0]
    1b70:	6893      	ldr	r3, [r2, #8]
    1b72:	42a3      	cmp	r3, r4
    1b74:	4614      	mov	r4, r2
    1b76:	d103      	bne.n	1b80 <z_time_slice+0x18>
}
    1b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    1b7c:	f7ff bed6 	b.w	192c <z_reset_time_slice>
	pending_current = NULL;
    1b80:	2500      	movs	r5, #0
    1b82:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    1b84:	4910      	ldr	r1, [pc, #64]	; (1bc8 <z_time_slice+0x60>)
    1b86:	6809      	ldr	r1, [r1, #0]
    1b88:	b1b9      	cbz	r1, 1bba <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    1b8a:	89d9      	ldrh	r1, [r3, #14]
    1b8c:	297f      	cmp	r1, #127	; 0x7f
    1b8e:	d814      	bhi.n	1bba <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    1b90:	490e      	ldr	r1, [pc, #56]	; (1bcc <z_time_slice+0x64>)
    1b92:	f993 500e 	ldrsb.w	r5, [r3, #14]
    1b96:	6809      	ldr	r1, [r1, #0]
    1b98:	428d      	cmp	r5, r1
    1b9a:	db0e      	blt.n	1bba <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    1b9c:	490c      	ldr	r1, [pc, #48]	; (1bd0 <z_time_slice+0x68>)
    1b9e:	428b      	cmp	r3, r1
    1ba0:	d00b      	beq.n	1bba <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    1ba2:	6999      	ldr	r1, [r3, #24]
    1ba4:	b949      	cbnz	r1, 1bba <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    1ba6:	6911      	ldr	r1, [r2, #16]
    1ba8:	4281      	cmp	r1, r0
    1baa:	dc03      	bgt.n	1bb4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    1bac:	4618      	mov	r0, r3
    1bae:	f7ff ff99 	bl	1ae4 <z_move_thread_to_end_of_prio_q>
    1bb2:	e7e1      	b.n	1b78 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    1bb4:	1a09      	subs	r1, r1, r0
    1bb6:	6111      	str	r1, [r2, #16]
}
    1bb8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    1bba:	2300      	movs	r3, #0
    1bbc:	6123      	str	r3, [r4, #16]
    1bbe:	e7fb      	b.n	1bb8 <z_time_slice+0x50>
    1bc0:	20000158 	.word	0x20000158
    1bc4:	20000188 	.word	0x20000188
    1bc8:	20000190 	.word	0x20000190
    1bcc:	2000018c 	.word	0x2000018c
    1bd0:	20000080 	.word	0x20000080

00001bd4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    1bd4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    1bd6:	b570      	push	{r4, r5, r6, lr}
    1bd8:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    1bda:	b103      	cbz	r3, 1bde <z_thread_single_abort+0xa>
		thread->fn_abort();
    1bdc:	4798      	blx	r3
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    1bde:	f104 0018 	add.w	r0, r4, #24
    1be2:	f000 fef9 	bl	29d8 <z_abort_timeout>
	__asm__ volatile(
    1be6:	f04f 0320 	mov.w	r3, #32
    1bea:	f3ef 8511 	mrs	r5, BASEPRI
    1bee:	f383 8811 	msr	BASEPRI, r3
    1bf2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
    1bf6:	4620      	mov	r0, r4
    1bf8:	f000 fe51 	bl	289e <z_is_thread_ready>
    1bfc:	7b63      	ldrb	r3, [r4, #13]
    1bfe:	4606      	mov	r6, r0
    1c00:	b1c8      	cbz	r0, 1c36 <z_thread_single_abort+0x62>
			if (z_is_thread_queued(thread)) {
    1c02:	0659      	lsls	r1, r3, #25
    1c04:	d507      	bpl.n	1c16 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    1c06:	4621      	mov	r1, r4
    1c08:	4811      	ldr	r0, [pc, #68]	; (1c50 <z_thread_single_abort+0x7c>)
    1c0a:	f7ff fee5 	bl	19d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    1c0e:	7b63      	ldrb	r3, [r4, #13]
    1c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1c14:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    1c16:	4b0f      	ldr	r3, [pc, #60]	; (1c54 <z_thread_single_abort+0x80>)
    1c18:	6898      	ldr	r0, [r3, #8]
    1c1a:	1b02      	subs	r2, r0, r4
    1c1c:	4250      	negs	r0, r2
    1c1e:	4150      	adcs	r0, r2
    1c20:	f7ff fef0 	bl	1a04 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    1c24:	7b63      	ldrb	r3, [r4, #13]
    1c26:	f043 0308 	orr.w	r3, r3, #8
    1c2a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    1c2c:	f385 8811 	msr	BASEPRI, r5
    1c30:	f3bf 8f6f 	isb	sy
}
    1c34:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
    1c36:	079b      	lsls	r3, r3, #30
    1c38:	d5f4      	bpl.n	1c24 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    1c3a:	4621      	mov	r1, r4
    1c3c:	68a0      	ldr	r0, [r4, #8]
    1c3e:	f7ff fecb 	bl	19d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    1c42:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    1c44:	60a6      	str	r6, [r4, #8]
    1c46:	f023 0302 	bic.w	r3, r3, #2
    1c4a:	7363      	strb	r3, [r4, #13]
    1c4c:	e7ea      	b.n	1c24 <z_thread_single_abort+0x50>
    1c4e:	bf00      	nop
    1c50:	20000180 	.word	0x20000180
    1c54:	20000158 	.word	0x20000158

00001c58 <z_remove_thread_from_ready_q>:
{
    1c58:	b538      	push	{r3, r4, r5, lr}
    1c5a:	4604      	mov	r4, r0
	__asm__ volatile(
    1c5c:	f04f 0320 	mov.w	r3, #32
    1c60:	f3ef 8511 	mrs	r5, BASEPRI
    1c64:	f383 8811 	msr	BASEPRI, r3
    1c68:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    1c6c:	7b43      	ldrb	r3, [r0, #13]
    1c6e:	065a      	lsls	r2, r3, #25
    1c70:	d507      	bpl.n	1c82 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    1c72:	4601      	mov	r1, r0
    1c74:	4809      	ldr	r0, [pc, #36]	; (1c9c <z_remove_thread_from_ready_q+0x44>)
    1c76:	f7ff feaf 	bl	19d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    1c7a:	7b63      	ldrb	r3, [r4, #13]
    1c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1c80:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    1c82:	4b07      	ldr	r3, [pc, #28]	; (1ca0 <z_remove_thread_from_ready_q+0x48>)
    1c84:	6898      	ldr	r0, [r3, #8]
    1c86:	1b03      	subs	r3, r0, r4
    1c88:	4258      	negs	r0, r3
    1c8a:	4158      	adcs	r0, r3
    1c8c:	f7ff feba 	bl	1a04 <update_cache>
	__asm__ volatile(
    1c90:	f385 8811 	msr	BASEPRI, r5
    1c94:	f3bf 8f6f 	isb	sy
}
    1c98:	bd38      	pop	{r3, r4, r5, pc}
    1c9a:	bf00      	nop
    1c9c:	20000180 	.word	0x20000180
    1ca0:	20000158 	.word	0x20000158

00001ca4 <pend>:
{
    1ca4:	b570      	push	{r4, r5, r6, lr}
    1ca6:	4604      	mov	r4, r0
    1ca8:	460d      	mov	r5, r1
    1caa:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    1cac:	f7ff ffd4 	bl	1c58 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    1cb0:	7b63      	ldrb	r3, [r4, #13]
    1cb2:	f043 0302 	orr.w	r3, r3, #2
    1cb6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    1cb8:	b17d      	cbz	r5, 1cda <pend+0x36>
	return list->head == list;
    1cba:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    1cbc:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1cbe:	429d      	cmp	r5, r3
    1cc0:	d029      	beq.n	1d16 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1cc2:	b343      	cbz	r3, 1d16 <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
    1cc4:	f994 200e 	ldrsb.w	r2, [r4, #14]
    1cc8:	f993 100e 	ldrsb.w	r1, [r3, #14]
    1ccc:	4291      	cmp	r1, r2
    1cce:	dd1c      	ble.n	1d0a <pend+0x66>
	node->prev = successor->prev;
    1cd0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    1cd2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    1cd6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    1cd8:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    1cda:	1c73      	adds	r3, r6, #1
    1cdc:	d022      	beq.n	1d24 <pend+0x80>
    1cde:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    1ce2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1ce6:	f240 30e7 	movw	r0, #999	; 0x3e7
    1cea:	2100      	movs	r1, #0
    1cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1cf0:	fbc5 0106 	smlal	r0, r1, r5, r6
    1cf4:	2300      	movs	r3, #0
    1cf6:	f7fe f9f1 	bl	dc <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    1cfa:	490b      	ldr	r1, [pc, #44]	; (1d28 <pend+0x84>)
    1cfc:	1c42      	adds	r2, r0, #1
    1cfe:	f104 0018 	add.w	r0, r4, #24
}
    1d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1d06:	f000 b951 	b.w	1fac <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    1d0a:	6869      	ldr	r1, [r5, #4]
    1d0c:	428b      	cmp	r3, r1
    1d0e:	d002      	beq.n	1d16 <pend+0x72>
    1d10:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1d12:	2b00      	cmp	r3, #0
    1d14:	d1d8      	bne.n	1cc8 <pend+0x24>
	node->prev = list->tail;
    1d16:	686b      	ldr	r3, [r5, #4]
    1d18:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    1d1a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    1d1c:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    1d1e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    1d20:	606c      	str	r4, [r5, #4]
    1d22:	e7da      	b.n	1cda <pend+0x36>
}
    1d24:	bd70      	pop	{r4, r5, r6, pc}
    1d26:	bf00      	nop
    1d28:	000028ff 	.word	0x000028ff

00001d2c <z_pend_curr>:
{
    1d2c:	b510      	push	{r4, lr}
    1d2e:	460c      	mov	r4, r1
    1d30:	4611      	mov	r1, r2
	pending_current = _current;
    1d32:	4a06      	ldr	r2, [pc, #24]	; (1d4c <z_pend_curr+0x20>)
    1d34:	6890      	ldr	r0, [r2, #8]
    1d36:	4a06      	ldr	r2, [pc, #24]	; (1d50 <z_pend_curr+0x24>)
    1d38:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    1d3a:	461a      	mov	r2, r3
    1d3c:	f7ff ffb2 	bl	1ca4 <pend>
    1d40:	4620      	mov	r0, r4
}
    1d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d46:	f7fe bc67 	b.w	618 <arch_swap>
    1d4a:	bf00      	nop
    1d4c:	20000158 	.word	0x20000158
    1d50:	20000188 	.word	0x20000188

00001d54 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    1d54:	4b04      	ldr	r3, [pc, #16]	; (1d68 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    1d56:	2100      	movs	r1, #0
    1d58:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    1d5c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    1d60:	4608      	mov	r0, r1
    1d62:	f7ff bdf9 	b.w	1958 <k_sched_time_slice_set>
    1d66:	bf00      	nop
    1d68:	20000158 	.word	0x20000158

00001d6c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    1d6c:	4b01      	ldr	r3, [pc, #4]	; (1d74 <z_impl_k_current_get+0x8>)
    1d6e:	6898      	ldr	r0, [r3, #8]
    1d70:	4770      	bx	lr
    1d72:	bf00      	nop
    1d74:	20000158 	.word	0x20000158

00001d78 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    1d78:	b570      	push	{r4, r5, r6, lr}
    1d7a:	4604      	mov	r4, r0
	__asm__ volatile(
    1d7c:	f04f 0320 	mov.w	r3, #32
    1d80:	f3ef 8611 	mrs	r6, BASEPRI
    1d84:	f383 8811 	msr	BASEPRI, r3
    1d88:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    1d8c:	f000 fde8 	bl	2960 <z_unpend_first_thread>
	if (thread != NULL) {
    1d90:	4605      	mov	r5, r0
    1d92:	b170      	cbz	r0, 1db2 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1d94:	7b43      	ldrb	r3, [r0, #13]
    1d96:	06db      	lsls	r3, r3, #27
    1d98:	d103      	bne.n	1da2 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    1d9a:	6983      	ldr	r3, [r0, #24]
    1d9c:	b90b      	cbnz	r3, 1da2 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    1d9e:	f7ff fe6b 	bl	1a78 <z_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1da2:	2300      	movs	r3, #0
    1da4:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    1da6:	4631      	mov	r1, r6
    1da8:	4805      	ldr	r0, [pc, #20]	; (1dc0 <z_impl_k_sem_give+0x48>)
}
    1daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    1dae:	f000 bd7f 	b.w	28b0 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    1db2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    1db6:	429a      	cmp	r2, r3
    1db8:	bf18      	it	ne
    1dba:	3301      	addne	r3, #1
    1dbc:	60a3      	str	r3, [r4, #8]
    1dbe:	e7f2      	b.n	1da6 <z_impl_k_sem_give+0x2e>
    1dc0:	2000019b 	.word	0x2000019b

00001dc4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    1dc4:	b410      	push	{r4}
    1dc6:	4602      	mov	r2, r0
    1dc8:	460b      	mov	r3, r1
    1dca:	f04f 0020 	mov.w	r0, #32
    1dce:	f3ef 8111 	mrs	r1, BASEPRI
    1dd2:	f380 8811 	msr	BASEPRI, r0
    1dd6:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    1dda:	6894      	ldr	r4, [r2, #8]
    1ddc:	b144      	cbz	r4, 1df0 <z_impl_k_sem_take+0x2c>
		sem->count--;
    1dde:	3c01      	subs	r4, #1
    1de0:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    1de2:	f381 8811 	msr	BASEPRI, r1
    1de6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    1dea:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    1dec:	bc10      	pop	{r4}
    1dee:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    1df0:	b933      	cbnz	r3, 1e00 <z_impl_k_sem_take+0x3c>
    1df2:	f381 8811 	msr	BASEPRI, r1
    1df6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    1dfa:	f06f 000f 	mvn.w	r0, #15
    1dfe:	e7f5      	b.n	1dec <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    1e00:	4801      	ldr	r0, [pc, #4]	; (1e08 <z_impl_k_sem_take+0x44>)
}
    1e02:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    1e04:	f7ff bf92 	b.w	1d2c <z_pend_curr>
    1e08:	2000019b 	.word	0x2000019b

00001e0c <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    1e0c:	b510      	push	{r4, lr}
	__asm__ volatile(
    1e0e:	f04f 0220 	mov.w	r2, #32
    1e12:	f3ef 8411 	mrs	r4, BASEPRI
    1e16:	f382 8811 	msr	BASEPRI, r2
    1e1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    1e1e:	7b42      	ldrb	r2, [r0, #13]
    1e20:	0751      	lsls	r1, r2, #29
    1e22:	d404      	bmi.n	1e2e <z_impl_k_thread_start+0x22>
	__asm__ volatile(
    1e24:	f384 8811 	msr	BASEPRI, r4
    1e28:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    1e2c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1e2e:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1e32:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1e36:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1e38:	d103      	bne.n	1e42 <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
    1e3a:	6983      	ldr	r3, [r0, #24]
    1e3c:	b90b      	cbnz	r3, 1e42 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    1e3e:	f7ff fe1b 	bl	1a78 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    1e42:	4621      	mov	r1, r4
    1e44:	4802      	ldr	r0, [pc, #8]	; (1e50 <z_impl_k_thread_start+0x44>)
}
    1e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    1e4a:	f000 bd31 	b.w	28b0 <z_reschedule>
    1e4e:	bf00      	nop
    1e50:	2000019b 	.word	0x2000019b

00001e54 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    1e54:	b530      	push	{r4, r5, lr}
    1e56:	b087      	sub	sp, #28
    1e58:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    1e5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1e5c:	9504      	str	r5, [sp, #16]
    1e5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    1e60:	9503      	str	r5, [sp, #12]
    1e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    1e64:	9502      	str	r5, [sp, #8]
    1e66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    1e68:	9501      	str	r5, [sp, #4]
    1e6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1e6c:	9500      	str	r5, [sp, #0]
    1e6e:	f7fe fc4f 	bl	710 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    1e72:	4b03      	ldr	r3, [pc, #12]	; (1e80 <z_setup_new_thread+0x2c>)
    1e74:	689b      	ldr	r3, [r3, #8]
    1e76:	b103      	cbz	r3, 1e7a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    1e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1e7a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    1e7c:	b007      	add	sp, #28
    1e7e:	bd30      	pop	{r4, r5, pc}
    1e80:	20000158 	.word	0x20000158

00001e84 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    1e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    1e88:	4e28      	ldr	r6, [pc, #160]	; (1f2c <z_init_static_threads+0xa8>)
    1e8a:	4d29      	ldr	r5, [pc, #164]	; (1f30 <z_init_static_threads+0xac>)
{
    1e8c:	b087      	sub	sp, #28
    1e8e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    1e90:	42b5      	cmp	r5, r6
    1e92:	f105 0430 	add.w	r4, r5, #48	; 0x30
    1e96:	d310      	bcc.n	1eba <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    1e98:	f7ff fd8a 	bl	19b0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    1e9c:	4c24      	ldr	r4, [pc, #144]	; (1f30 <z_init_static_threads+0xac>)
    1e9e:	f8df a094 	ldr.w	sl, [pc, #148]	; 1f34 <z_init_static_threads+0xb0>
    1ea2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1ea6:	f240 36e7 	movw	r6, #999	; 0x3e7
    1eaa:	2700      	movs	r7, #0
    1eac:	4544      	cmp	r4, r8
    1eae:	d321      	bcc.n	1ef4 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    1eb0:	b007      	add	sp, #28
    1eb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    1eb6:	f7ff bdc3 	b.w	1a40 <k_sched_unlock>
		z_setup_new_thread(
    1eba:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1ebe:	9305      	str	r3, [sp, #20]
    1ec0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    1ec4:	9304      	str	r3, [sp, #16]
    1ec6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    1eca:	9303      	str	r3, [sp, #12]
    1ecc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    1ed0:	9302      	str	r3, [sp, #8]
    1ed2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    1ed6:	9301      	str	r3, [sp, #4]
    1ed8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    1edc:	9300      	str	r3, [sp, #0]
    1ede:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    1ee2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    1ee6:	f7ff ffb5 	bl	1e54 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    1eea:	f854 3c30 	ldr.w	r3, [r4, #-48]
    1eee:	64dd      	str	r5, [r3, #76]	; 0x4c
    1ef0:	4625      	mov	r5, r4
    1ef2:	e7cd      	b.n	1e90 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    1ef4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ef6:	1c4b      	adds	r3, r1, #1
    1ef8:	d004      	beq.n	1f04 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    1efa:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    1efc:	b921      	cbnz	r1, 1f08 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    1efe:	4628      	mov	r0, r5
    1f00:	f7ff ff84 	bl	1e0c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    1f04:	3430      	adds	r4, #48	; 0x30
    1f06:	e7d1      	b.n	1eac <z_init_static_threads+0x28>
    1f08:	46b3      	mov	fp, r6
    1f0a:	46bc      	mov	ip, r7
    1f0c:	fbe9 bc01 	umlal	fp, ip, r9, r1
    1f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1f14:	2300      	movs	r3, #0
    1f16:	4658      	mov	r0, fp
    1f18:	4661      	mov	r1, ip
    1f1a:	f7fe f8df 	bl	dc <__aeabi_uldivmod>
    1f1e:	4651      	mov	r1, sl
    1f20:	1c42      	adds	r2, r0, #1
    1f22:	f105 0018 	add.w	r0, r5, #24
    1f26:	f000 f841 	bl	1fac <z_add_timeout>
    1f2a:	e7eb      	b.n	1f04 <z_init_static_threads+0x80>
    1f2c:	20000f68 	.word	0x20000f68
    1f30:	20000f68 	.word	0x20000f68
    1f34:	000028ff 	.word	0x000028ff

00001f38 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    1f38:	4b03      	ldr	r3, [pc, #12]	; (1f48 <elapsed+0x10>)
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	b90b      	cbnz	r3, 1f42 <elapsed+0xa>
    1f3e:	f7fe bb43 	b.w	5c8 <z_clock_elapsed>
}
    1f42:	2000      	movs	r0, #0
    1f44:	4770      	bx	lr
    1f46:	bf00      	nop
    1f48:	20000194 	.word	0x20000194

00001f4c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    1f4c:	6803      	ldr	r3, [r0, #0]
    1f4e:	b140      	cbz	r0, 1f62 <remove_timeout+0x16>
    1f50:	4a07      	ldr	r2, [pc, #28]	; (1f70 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    1f52:	6852      	ldr	r2, [r2, #4]
    1f54:	4290      	cmp	r0, r2
    1f56:	d004      	beq.n	1f62 <remove_timeout+0x16>
	if (next(t) != NULL) {
    1f58:	b11b      	cbz	r3, 1f62 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    1f5a:	689a      	ldr	r2, [r3, #8]
    1f5c:	6881      	ldr	r1, [r0, #8]
    1f5e:	440a      	add	r2, r1
    1f60:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    1f62:	6842      	ldr	r2, [r0, #4]
    1f64:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    1f66:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    1f68:	2300      	movs	r3, #0
	node->prev = NULL;
    1f6a:	e9c0 3300 	strd	r3, r3, [r0]
}
    1f6e:	4770      	bx	lr
    1f70:	20000f0c 	.word	0x20000f0c

00001f74 <next_timeout>:
	return list->head == list;
    1f74:	4b0b      	ldr	r3, [pc, #44]	; (1fa4 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    1f76:	b510      	push	{r4, lr}
    1f78:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1f7a:	429c      	cmp	r4, r3
    1f7c:	bf08      	it	eq
    1f7e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    1f80:	f7ff ffda 	bl	1f38 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    1f84:	b154      	cbz	r4, 1f9c <next_timeout+0x28>
    1f86:	68a3      	ldr	r3, [r4, #8]
    1f88:	1a18      	subs	r0, r3, r0
    1f8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    1f8e:	4b06      	ldr	r3, [pc, #24]	; (1fa8 <next_timeout+0x34>)
    1f90:	691b      	ldr	r3, [r3, #16]
    1f92:	b113      	cbz	r3, 1f9a <next_timeout+0x26>
    1f94:	4298      	cmp	r0, r3
    1f96:	bfa8      	it	ge
    1f98:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    1f9a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    1f9c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1fa0:	e7f5      	b.n	1f8e <next_timeout+0x1a>
    1fa2:	bf00      	nop
    1fa4:	20000f0c 	.word	0x20000f0c
    1fa8:	20000158 	.word	0x20000158

00001fac <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    1fac:	b570      	push	{r4, r5, r6, lr}
    1fae:	4604      	mov	r4, r0
    1fb0:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    1fb2:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    1fb4:	f04f 0320 	mov.w	r3, #32
    1fb8:	f3ef 8511 	mrs	r5, BASEPRI
    1fbc:	f383 8811 	msr	BASEPRI, r3
    1fc0:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    1fc4:	f7ff ffb8 	bl	1f38 <elapsed>
	return list->head == list;
    1fc8:	4b18      	ldr	r3, [pc, #96]	; (202c <z_add_timeout+0x80>)
    1fca:	681a      	ldr	r2, [r3, #0]
    1fcc:	2e01      	cmp	r6, #1
    1fce:	bfac      	ite	ge
    1fd0:	1980      	addge	r0, r0, r6
    1fd2:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1fd4:	429a      	cmp	r2, r3
    1fd6:	60a0      	str	r0, [r4, #8]
    1fd8:	d001      	beq.n	1fde <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    1fda:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    1fdc:	b932      	cbnz	r2, 1fec <z_add_timeout+0x40>
	node->prev = list->tail;
    1fde:	685a      	ldr	r2, [r3, #4]
    1fe0:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    1fe2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    1fe4:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    1fe6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    1fe8:	605c      	str	r4, [r3, #4]
    1fea:	e00a      	b.n	2002 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    1fec:	6890      	ldr	r0, [r2, #8]
    1fee:	68a1      	ldr	r1, [r4, #8]
    1ff0:	4288      	cmp	r0, r1
    1ff2:	dd15      	ble.n	2020 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    1ff4:	1a41      	subs	r1, r0, r1
    1ff6:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    1ff8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    1ffa:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    1ffe:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2000:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2002:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2004:	429a      	cmp	r2, r3
    2006:	d006      	beq.n	2016 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2008:	4294      	cmp	r4, r2
    200a:	d104      	bne.n	2016 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    200c:	f7ff ffb2 	bl	1f74 <next_timeout>
    2010:	2100      	movs	r1, #0
    2012:	f7fe fa83 	bl	51c <z_clock_set_timeout>
	__asm__ volatile(
    2016:	f385 8811 	msr	BASEPRI, r5
    201a:	f3bf 8f6f 	isb	sy
		}
	}
}
    201e:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    2020:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2022:	42b2      	cmp	r2, r6
    2024:	60a1      	str	r1, [r4, #8]
    2026:	d0da      	beq.n	1fde <z_add_timeout+0x32>
    2028:	6812      	ldr	r2, [r2, #0]
    202a:	e7d7      	b.n	1fdc <z_add_timeout+0x30>
    202c:	20000f0c 	.word	0x20000f0c

00002030 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    2030:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    2034:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2036:	f7ff fd97 	bl	1b68 <z_time_slice>
	__asm__ volatile(
    203a:	f04f 0320 	mov.w	r3, #32
    203e:	f3ef 8511 	mrs	r5, BASEPRI
    2042:	f383 8811 	msr	BASEPRI, r3
    2046:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    204a:	4e21      	ldr	r6, [pc, #132]	; (20d0 <z_clock_announce+0xa0>)
    204c:	4f21      	ldr	r7, [pc, #132]	; (20d4 <z_clock_announce+0xa4>)
	return list->head == list;
    204e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 20d8 <z_clock_announce+0xa8>
    2052:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2054:	46b8      	mov	r8, r7
    2056:	f8d9 4000 	ldr.w	r4, [r9]
    205a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    205c:	454c      	cmp	r4, r9
    205e:	e9d7 bc00 	ldrd	fp, ip, [r7]
    2062:	d005      	beq.n	2070 <z_clock_announce+0x40>
    2064:	b124      	cbz	r4, 2070 <z_clock_announce+0x40>
    2066:	68a3      	ldr	r3, [r4, #8]
    2068:	4293      	cmp	r3, r2
    206a:	dd14      	ble.n	2096 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    206c:	1a9b      	subs	r3, r3, r2
    206e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    2070:	eb1b 0002 	adds.w	r0, fp, r2
    2074:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    2078:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    207a:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    207e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2080:	f7ff ff78 	bl	1f74 <next_timeout>
    2084:	4621      	mov	r1, r4
    2086:	f7fe fa49 	bl	51c <z_clock_set_timeout>
	__asm__ volatile(
    208a:	f385 8811 	msr	BASEPRI, r5
    208e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2092:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    2096:	eb1b 0003 	adds.w	r0, fp, r3
    209a:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    209e:	1ad3      	subs	r3, r2, r3
    20a0:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    20a2:	2300      	movs	r3, #0
		curr_tick += dt;
    20a4:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    20a8:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    20aa:	4620      	mov	r0, r4
    20ac:	f7ff ff4e 	bl	1f4c <remove_timeout>
    20b0:	f385 8811 	msr	BASEPRI, r5
    20b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    20b8:	68e3      	ldr	r3, [r4, #12]
    20ba:	4798      	blx	r3
	__asm__ volatile(
    20bc:	f04f 0320 	mov.w	r3, #32
    20c0:	f3ef 8511 	mrs	r5, BASEPRI
    20c4:	f383 8811 	msr	BASEPRI, r3
    20c8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    20cc:	e7c3      	b.n	2056 <z_clock_announce+0x26>
    20ce:	bf00      	nop
    20d0:	20000194 	.word	0x20000194
    20d4:	20000000 	.word	0x20000000
    20d8:	20000f0c 	.word	0x20000f0c

000020dc <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    20dc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    20de:	4c07      	ldr	r4, [pc, #28]	; (20fc <init_static_pools+0x20>)
    20e0:	4d07      	ldr	r5, [pc, #28]	; (2100 <init_static_pools+0x24>)
    20e2:	42ac      	cmp	r4, r5
    20e4:	d301      	bcc.n	20ea <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    20e6:	2000      	movs	r0, #0
    20e8:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    20ea:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    20ee:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    20f0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    20f4:	f000 f806 	bl	2104 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    20f8:	341c      	adds	r4, #28
    20fa:	e7f2      	b.n	20e2 <init_static_pools+0x6>
    20fc:	20000f68 	.word	0x20000f68
    2100:	20000f68 	.word	0x20000f68

00002104 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    2104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2108:	6846      	ldr	r6, [r0, #4]
    210a:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    210c:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    210e:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    2112:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2114:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    2118:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    211a:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    211c:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    211e:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    2120:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    2124:	4598      	cmp	r8, r3
    2126:	dc05      	bgt.n	2134 <z_sys_mem_pool_base_init+0x30>
    2128:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    212a:	4619      	mov	r1, r3
    212c:	428f      	cmp	r7, r1
    212e:	dc20      	bgt.n	2172 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    2130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    2134:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    2138:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    213c:	fb09 fe03 	mul.w	lr, r9, r3
    2140:	eb0a 040e 	add.w	r4, sl, lr
    2144:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    2148:	2d20      	cmp	r5, #32
    214a:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    214e:	d805      	bhi.n	215c <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    2150:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    2152:	0892      	lsrs	r2, r2, #2
    2154:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    2158:	3301      	adds	r3, #1
    215a:	e7e3      	b.n	2124 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    215c:	f115 041f 	adds.w	r4, r5, #31
    2160:	bf48      	it	mi
    2162:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    2166:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    2168:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    216c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    2170:	e7ef      	b.n	2152 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    2172:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    2174:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    2176:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    217a:	18ec      	adds	r4, r5, r3
	node->next = list;
    217c:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    2180:	6895      	ldr	r5, [r2, #8]
    2182:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    2184:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    2186:	3101      	adds	r1, #1
    2188:	602c      	str	r4, [r5, #0]
	list->tail = node;
    218a:	4433      	add	r3, r6
    218c:	6094      	str	r4, [r2, #8]
    218e:	e7cd      	b.n	212c <z_sys_mem_pool_base_init+0x28>

00002190 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2190:	4604      	mov	r4, r0
    2192:	b508      	push	{r3, lr}
    2194:	4608      	mov	r0, r1
    2196:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2198:	461a      	mov	r2, r3
    219a:	47a0      	blx	r4
	return z_impl_k_current_get();
    219c:	f7ff fde6 	bl	1d6c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    21a0:	f7fe fc32 	bl	a08 <z_impl_k_thread_abort>

000021a4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    21a4:	4770      	bx	lr

000021a6 <get_status>:
	data = get_sub_data(dev, type);
    21a6:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
    21a8:	b2c9      	uxtb	r1, r1
	if (data->started) {
    21aa:	220c      	movs	r2, #12
    21ac:	fb02 3101 	mla	r1, r2, r1, r3
    21b0:	7a4b      	ldrb	r3, [r1, #9]
    21b2:	b923      	cbnz	r3, 21be <get_status+0x18>
	if (data->ref > 0) {
    21b4:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    21b6:	fab0 f080 	clz	r0, r0
    21ba:	0940      	lsrs	r0, r0, #5
    21bc:	4770      	bx	lr
    21be:	2002      	movs	r0, #2
}
    21c0:	4770      	bx	lr

000021c2 <clkstarted_handle>:
{
    21c2:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    21c4:	6883      	ldr	r3, [r0, #8]
	sub_data->started = true;
    21c6:	240c      	movs	r4, #12
    21c8:	fb04 3401 	mla	r4, r4, r1, r3
    21cc:	2301      	movs	r3, #1
{
    21ce:	4605      	mov	r5, r0
	sub_data->started = true;
    21d0:	7263      	strb	r3, [r4, #9]
    21d2:	f04f 0320 	mov.w	r3, #32
    21d6:	f3ef 8111 	mrs	r1, BASEPRI
    21da:	f383 8811 	msr	BASEPRI, r3
    21de:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    21e2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    21e4:	b12b      	cbz	r3, 21f2 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    21e6:	6860      	ldr	r0, [r4, #4]
    21e8:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    21ea:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    21ec:	4283      	cmp	r3, r0
	list->tail = node;
    21ee:	bf08      	it	eq
    21f0:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    21f2:	f381 8811 	msr	BASEPRI, r1
    21f6:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
    21fa:	b903      	cbnz	r3, 21fe <clkstarted_handle+0x3c>
}
    21fc:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    21fe:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    2202:	4628      	mov	r0, r5
    2204:	4790      	blx	r2
    2206:	e7e4      	b.n	21d2 <clkstarted_handle+0x10>

00002208 <clock_async_start>:
	const struct nrf_clock_control_config *config =
    2208:	6803      	ldr	r3, [r0, #0]
	clk_data = get_sub_data(dev, type);
    220a:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    220e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2212:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
    2214:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
    2216:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
    2218:	b14a      	cbz	r2, 222e <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    221a:	230c      	movs	r3, #12
    221c:	4373      	muls	r3, r6
    221e:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    2222:	429a      	cmp	r2, r3
    2224:	d05c      	beq.n	22e0 <clock_async_start+0xd8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2226:	b113      	cbz	r3, 222e <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2228:	681b      	ldr	r3, [r3, #0]
	} while (item);
    222a:	2b00      	cmp	r3, #0
    222c:	d1f9      	bne.n	2222 <clock_async_start+0x1a>
	__asm__ volatile(
    222e:	f04f 0320 	mov.w	r3, #32
    2232:	f3ef 8011 	mrs	r0, BASEPRI
    2236:	f383 8811 	msr	BASEPRI, r3
    223a:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    223e:	210c      	movs	r1, #12
    2240:	4371      	muls	r1, r6
    2242:	eb0c 0301 	add.w	r3, ip, r1
    2246:	7a1c      	ldrb	r4, [r3, #8]
    2248:	3401      	adds	r4, #1
    224a:	b2e4      	uxtb	r4, r4
    224c:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    224e:	f380 8811 	msr	BASEPRI, r0
    2252:	f3bf 8f6f 	isb	sy
	if (data) {
    2256:	b332      	cbz	r2, 22a6 <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
    2258:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    225c:	f04f 0e03 	mov.w	lr, #3
    2260:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
    2264:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    2266:	b9a0      	cbnz	r0, 2292 <clock_async_start+0x8a>
	__asm__ volatile(
    2268:	f04f 0e20 	mov.w	lr, #32
    226c:	f3ef 8811 	mrs	r8, BASEPRI
    2270:	f38e 8811 	msr	BASEPRI, lr
    2274:	f3bf 8f6f 	isb	sy
	parent->next = child;
    2278:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    227a:	f8d3 e004 	ldr.w	lr, [r3, #4]
    227e:	f1be 0f00 	cmp.w	lr, #0
    2282:	d120      	bne.n	22c6 <clock_async_start+0xbe>
	list->tail = node;
    2284:	605a      	str	r2, [r3, #4]
	list->head = node;
    2286:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    228a:	f388 8811 	msr	BASEPRI, r8
    228e:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    2292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2296:	2103      	movs	r1, #3
    2298:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
    229c:	b118      	cbz	r0, 22a6 <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
    229e:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    22a2:	4628      	mov	r0, r5
    22a4:	4798      	blx	r3
	if (ref == 1) {
    22a6:	2c01      	cmp	r4, #1
    22a8:	d10b      	bne.n	22c2 <clock_async_start+0xba>
		do_start =  (config->start_handler) ?
    22aa:	230c      	movs	r3, #12
    22ac:	4373      	muls	r3, r6
    22ae:	58fb      	ldr	r3, [r7, r3]
				config->start_handler(dev) : true;
    22b0:	b96b      	cbnz	r3, 22ce <clock_async_start+0xc6>
			nrf_clock_task_trigger(NRF_CLOCK,
    22b2:	230c      	movs	r3, #12
    22b4:	fb03 7606 	mla	r6, r3, r6, r7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22b8:	2201      	movs	r2, #1
    22ba:	7ab3      	ldrb	r3, [r6, #10]
    22bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    22c0:	601a      	str	r2, [r3, #0]
	return 0;
    22c2:	2000      	movs	r0, #0
    22c4:	e00e      	b.n	22e4 <clock_async_start+0xdc>
	parent->next = child;
    22c6:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    22ca:	605a      	str	r2, [r3, #4]
    22cc:	e7dd      	b.n	228a <clock_async_start+0x82>
				config->start_handler(dev) : true;
    22ce:	4628      	mov	r0, r5
    22d0:	4798      	blx	r3
    22d2:	2800      	cmp	r0, #0
    22d4:	d1ed      	bne.n	22b2 <clock_async_start+0xaa>
			clkstarted_handle(dev, type);
    22d6:	4631      	mov	r1, r6
    22d8:	4628      	mov	r0, r5
    22da:	f7ff ff72 	bl	21c2 <clkstarted_handle>
    22de:	e7f0      	b.n	22c2 <clock_async_start+0xba>
		return -EBUSY;
    22e0:	f06f 000f 	mvn.w	r0, #15
}
    22e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000022e8 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    22e8:	2200      	movs	r2, #0
    22ea:	f7ff bf8d 	b.w	2208 <clock_async_start>

000022ee <clk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    22ee:	2200      	movs	r2, #0
{
    22f0:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    22f2:	2101      	movs	r1, #1
{
    22f4:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    22f6:	4610      	mov	r0, r2
    22f8:	f7fe f9f2 	bl	6e0 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    22fc:	2000      	movs	r0, #0
    22fe:	f7fe f9df 	bl	6c0 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    2302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2306:	2201      	movs	r2, #1
    2308:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    230c:	2203      	movs	r2, #3
    230e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    2312:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    2314:	2000      	movs	r0, #0
	list->tail = NULL;
    2316:	e9c3 0000 	strd	r0, r0, [r3]
    231a:	68a3      	ldr	r3, [r4, #8]
    231c:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    2320:	bd10      	pop	{r4, pc}

00002322 <clock_stop>:
{
    2322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    2324:	6802      	ldr	r2, [r0, #0]
	data = get_sub_data(dev, type);
    2326:	6886      	ldr	r6, [r0, #8]
	const struct nrf_clock_control_config *config =
    2328:	6897      	ldr	r7, [r2, #8]
	return &config->subsys[type];
    232a:	b2cc      	uxtb	r4, r1
	__asm__ volatile(
    232c:	f04f 0320 	mov.w	r3, #32
    2330:	f3ef 8511 	mrs	r5, BASEPRI
    2334:	f383 8811 	msr	BASEPRI, r3
    2338:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    233c:	220c      	movs	r2, #12
    233e:	4362      	muls	r2, r4
    2340:	18b1      	adds	r1, r6, r2
    2342:	7a0b      	ldrb	r3, [r1, #8]
    2344:	b33b      	cbz	r3, 2396 <clock_stop+0x74>
	data->ref--;
    2346:	3b01      	subs	r3, #1
    2348:	b2db      	uxtb	r3, r3
    234a:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
    234c:	bb33      	cbnz	r3, 239c <clock_stop+0x7a>
	list->head = NULL;
    234e:	50b3      	str	r3, [r6, r2]
		do_stop =  (config->stop_handler) ?
    2350:	443a      	add	r2, r7
	list->tail = NULL;
    2352:	604b      	str	r3, [r1, #4]
    2354:	6853      	ldr	r3, [r2, #4]
				config->stop_handler(dev) : true;
    2356:	b9d3      	cbnz	r3, 238e <clock_stop+0x6c>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    2358:	230c      	movs	r3, #12
    235a:	fb03 7304 	mla	r3, r3, r4, r7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    235e:	2101      	movs	r1, #1
    2360:	7ada      	ldrb	r2, [r3, #11]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2362:	891b      	ldrh	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2364:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    236c:	6011      	str	r1, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    236e:	2200      	movs	r2, #0
    2370:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2372:	681b      	ldr	r3, [r3, #0]
    2374:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2376:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    2378:	210c      	movs	r1, #12
    237a:	fb01 6404 	mla	r4, r1, r4, r6
    237e:	2000      	movs	r0, #0
    2380:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    2382:	f385 8811 	msr	BASEPRI, r5
    2386:	f3bf 8f6f 	isb	sy
}
    238a:	b003      	add	sp, #12
    238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				config->stop_handler(dev) : true;
    238e:	4798      	blx	r3
    2390:	2800      	cmp	r0, #0
    2392:	d1e1      	bne.n	2358 <clock_stop+0x36>
    2394:	e7f0      	b.n	2378 <clock_stop+0x56>
		err = -EALREADY;
    2396:	f06f 0044 	mvn.w	r0, #68	; 0x44
    239a:	e7f2      	b.n	2382 <clock_stop+0x60>
	int err = 0;
    239c:	2000      	movs	r0, #0
    239e:	e7f0      	b.n	2382 <clock_stop+0x60>

000023a0 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    23a0:	4770      	bx	lr

000023a2 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    23a2:	4770      	bx	lr

000023a4 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    23a4:	f7fe ba00 	b.w	7a8 <z_arm_bus_fault>

000023a8 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    23a8:	f000 ba68 	b.w	287c <z_fatal_error>

000023ac <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    23ac:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    23ae:	6800      	ldr	r0, [r0, #0]
    23b0:	f000 ba64 	b.w	287c <z_fatal_error>

000023b4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    23b4:	b508      	push	{r3, lr}
	handler();
    23b6:	f7fe fa01 	bl	7bc <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    23ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    23be:	f7fe b91d 	b.w	5fc <z_arm_exc_exit>

000023c2 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    23c2:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    23c4:	2100      	movs	r1, #0
    23c6:	a801      	add	r0, sp, #4
    23c8:	f7fe fbee 	bl	ba8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    23cc:	b003      	add	sp, #12
    23ce:	f85d fb04 	ldr.w	pc, [sp], #4

000023d2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    23d2:	3801      	subs	r0, #1
    23d4:	3901      	subs	r1, #1
    23d6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    23da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    23de:	4293      	cmp	r3, r2
    23e0:	d101      	bne.n	23e6 <strcmp+0x14>
    23e2:	2b00      	cmp	r3, #0
    23e4:	d1f7      	bne.n	23d6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    23e6:	1a98      	subs	r0, r3, r2
    23e8:	4770      	bx	lr

000023ea <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    23ea:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    23ec:	ea81 0400 	eor.w	r4, r1, r0
    23f0:	07a5      	lsls	r5, r4, #30
    23f2:	4603      	mov	r3, r0
    23f4:	d00b      	beq.n	240e <memcpy+0x24>
    23f6:	3b01      	subs	r3, #1
    23f8:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    23fa:	4291      	cmp	r1, r2
    23fc:	d11a      	bne.n	2434 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    23fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    2400:	2a00      	cmp	r2, #0
    2402:	d0fc      	beq.n	23fe <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    2404:	f811 4b01 	ldrb.w	r4, [r1], #1
    2408:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    240c:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    240e:	079c      	lsls	r4, r3, #30
    2410:	d1f6      	bne.n	2400 <memcpy+0x16>
    2412:	0895      	lsrs	r5, r2, #2
    2414:	00ac      	lsls	r4, r5, #2
    2416:	1f1e      	subs	r6, r3, #4
    2418:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    241a:	42b9      	cmp	r1, r7
    241c:	d105      	bne.n	242a <memcpy+0x40>
    241e:	f06f 0603 	mvn.w	r6, #3
    2422:	fb06 2205 	mla	r2, r6, r5, r2
    2426:	4423      	add	r3, r4
    2428:	e7e5      	b.n	23f6 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    242a:	f851 cb04 	ldr.w	ip, [r1], #4
    242e:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    2432:	e7f2      	b.n	241a <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    2434:	f811 4b01 	ldrb.w	r4, [r1], #1
    2438:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    243c:	e7dd      	b.n	23fa <memcpy+0x10>

0000243e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    243e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    2440:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    2442:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    2444:	079c      	lsls	r4, r3, #30
    2446:	d110      	bne.n	246a <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    2448:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    244c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    2450:	0894      	lsrs	r4, r2, #2
    2452:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    2456:	42b3      	cmp	r3, r6
    2458:	d10d      	bne.n	2476 <memset+0x38>
    245a:	f06f 0503 	mvn.w	r5, #3
    245e:	fb05 2404 	mla	r4, r5, r4, r2
    2462:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    2464:	42a3      	cmp	r3, r4
    2466:	d109      	bne.n	247c <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    2468:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    246a:	2a00      	cmp	r2, #0
    246c:	d0fc      	beq.n	2468 <memset+0x2a>
		*(d_byte++) = c_byte;
    246e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    2472:	3a01      	subs	r2, #1
    2474:	e7e6      	b.n	2444 <memset+0x6>
		*(d_word++) = c_word;
    2476:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    247a:	e7ec      	b.n	2456 <memset+0x18>
		*(d_byte++) = c_byte;
    247c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    2480:	e7f0      	b.n	2464 <memset+0x26>

00002482 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    2482:	f7fe bdfb 	b.w	107c <SystemInit>

00002486 <gpio_nrfx_write>:
{
    2486:	b510      	push	{r4, lr}
	return port->config->config_info;
    2488:	6804      	ldr	r4, [r0, #0]
    248a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    248c:	68a4      	ldr	r4, [r4, #8]
    248e:	69c0      	ldr	r0, [r0, #28]
    2490:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2492:	2901      	cmp	r1, #1
    2494:	d104      	bne.n	24a0 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    2496:	4058      	eors	r0, r3
}


NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
    2498:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    249c:	2000      	movs	r0, #0
    249e:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    24a0:	3300      	adds	r3, #0
    24a2:	fa20 f002 	lsr.w	r0, r0, r2
    24a6:	f04f 0101 	mov.w	r1, #1
    24aa:	bf18      	it	ne
    24ac:	2301      	movne	r3, #1
    24ae:	f000 0001 	and.w	r0, r0, #1
    24b2:	4091      	lsls	r1, r2
    24b4:	4283      	cmp	r3, r0
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    24b6:	bf14      	ite	ne
    24b8:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    24bc:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    24c0:	e7ec      	b.n	249c <gpio_nrfx_write+0x16>

000024c2 <gpio_nrfx_read>:
{
    24c2:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    24c4:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    24c6:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    24c8:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    24ca:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    24cc:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    24ce:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    24d2:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    24d6:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    24da:	4060      	eors	r0, r4
    24dc:	406c      	eors	r4, r5
    24de:	4034      	ands	r4, r6
    24e0:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    24e2:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    24e4:	bf1c      	itt	ne
    24e6:	40d0      	lsrne	r0, r2
    24e8:	f000 0001 	andne.w	r0, r0, #1
    24ec:	6018      	str	r0, [r3, #0]
}
    24ee:	2000      	movs	r0, #0
    24f0:	bd70      	pop	{r4, r5, r6, pc}

000024f2 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    24f2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    24f4:	6818      	ldr	r0, [r3, #0]
{
    24f6:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    24f8:	b158      	cbz	r0, 2512 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    24fa:	2400      	movs	r4, #0
    24fc:	4281      	cmp	r1, r0
    24fe:	d113      	bne.n	2528 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    2500:	6808      	ldr	r0, [r1, #0]
    2502:	b95c      	cbnz	r4, 251c <gpio_nrfx_manage_callback+0x2a>
    2504:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    2506:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    2508:	42a1      	cmp	r1, r4
    250a:	d100      	bne.n	250e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    250c:	6058      	str	r0, [r3, #4]
	parent->next = child;
    250e:	2000      	movs	r0, #0
    2510:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2512:	b972      	cbnz	r2, 2532 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2514:	2000      	movs	r0, #0
}
    2516:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2518:	4628      	mov	r0, r5
    251a:	e7ef      	b.n	24fc <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    251c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    251e:	6858      	ldr	r0, [r3, #4]
    2520:	4281      	cmp	r1, r0
	list->tail = node;
    2522:	bf08      	it	eq
    2524:	605c      	streq	r4, [r3, #4]
    2526:	e7f2      	b.n	250e <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2528:	6805      	ldr	r5, [r0, #0]
	return node->next;
    252a:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    252c:	2d00      	cmp	r5, #0
    252e:	d1f3      	bne.n	2518 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    2530:	b13a      	cbz	r2, 2542 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    2532:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    2534:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    2536:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    2538:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    253a:	2800      	cmp	r0, #0
    253c:	d1ea      	bne.n	2514 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    253e:	6059      	str	r1, [r3, #4]
    2540:	e7e9      	b.n	2516 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    2542:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2546:	e7e6      	b.n	2516 <gpio_nrfx_manage_callback+0x24>

00002548 <gpio_nrfx_config>:
{
    2548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    254c:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    254e:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2550:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    2554:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    2558:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    255a:	d041      	beq.n	25e0 <gpio_nrfx_config+0x98>
    255c:	dc09      	bgt.n	2572 <gpio_nrfx_config+0x2a>
    255e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    2562:	d03f      	beq.n	25e4 <gpio_nrfx_config+0x9c>
    2564:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    2568:	d03e      	beq.n	25e8 <gpio_nrfx_config+0xa0>
    256a:	b190      	cbz	r0, 2592 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    256c:	f06f 0015 	mvn.w	r0, #21
    2570:	e033      	b.n	25da <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2572:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    2576:	d039      	beq.n	25ec <gpio_nrfx_config+0xa4>
    2578:	dc04      	bgt.n	2584 <gpio_nrfx_config+0x3c>
    257a:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    257e:	d1f5      	bne.n	256c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    2580:	2003      	movs	r0, #3
    2582:	e006      	b.n	2592 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2584:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    2588:	d032      	beq.n	25f0 <gpio_nrfx_config+0xa8>
    258a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    258e:	d1ed      	bne.n	256c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    2590:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2592:	f406 7740 	and.w	r7, r6, #768	; 0x300
    2596:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    259a:	d02b      	beq.n	25f4 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    259c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    25a0:	4263      	negs	r3, r4
    25a2:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    25a4:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    25a8:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    25ac:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    25ae:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    25b2:	bf18      	it	ne
    25b4:	b2d4      	uxtbne	r4, r2
    25b6:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    25ba:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    25be:	bf12      	itee	ne
    25c0:	46a1      	movne	r9, r4
		to_pin   = 31U;
    25c2:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    25c6:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    25c8:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    25cc:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    25d0:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    25d4:	45a1      	cmp	r9, r4
    25d6:	d20f      	bcs.n	25f8 <gpio_nrfx_config+0xb0>
	return 0;
    25d8:	2000      	movs	r0, #0
}
    25da:	b003      	add	sp, #12
    25dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    25e0:	2002      	movs	r0, #2
    25e2:	e7d6      	b.n	2592 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    25e4:	2001      	movs	r0, #1
    25e6:	e7d4      	b.n	2592 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    25e8:	2004      	movs	r0, #4
    25ea:	e7d2      	b.n	2592 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    25ec:	2005      	movs	r0, #5
    25ee:	e7d0      	b.n	2592 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    25f0:	2006      	movs	r0, #6
    25f2:	e7ce      	b.n	2592 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    25f4:	2303      	movs	r3, #3
    25f6:	e7d5      	b.n	25a4 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    25f8:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    25fc:	6892      	ldr	r2, [r2, #8]
    25fe:	7911      	ldrb	r1, [r2, #4]
    2600:	f004 021f 	and.w	r2, r4, #31
    2604:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    2608:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    260c:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2610:	fa0b f204 	lsl.w	r2, fp, r4
    2614:	68a9      	ldr	r1, [r5, #8]
    2616:	2b00      	cmp	r3, #0
    2618:	d025      	beq.n	2666 <gpio_nrfx_config+0x11e>
    261a:	4311      	orrs	r1, r2
    261c:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    261e:	6969      	ldr	r1, [r5, #20]
    2620:	9301      	str	r3, [sp, #4]
    2622:	06b0      	lsls	r0, r6, #26
    2624:	bf4c      	ite	mi
    2626:	4311      	orrmi	r1, r2
    2628:	4391      	bicpl	r1, r2
    262a:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    262c:	69a9      	ldr	r1, [r5, #24]
    262e:	0670      	lsls	r0, r6, #25
    2630:	bf4c      	ite	mi
    2632:	4311      	orrmi	r1, r2
    2634:	4391      	bicpl	r1, r2
    2636:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    2638:	6929      	ldr	r1, [r5, #16]
    263a:	0770      	lsls	r0, r6, #29
    263c:	bf4c      	ite	mi
    263e:	4311      	orrmi	r1, r2
    2640:	4391      	bicpl	r1, r2
    2642:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    2644:	69e9      	ldr	r1, [r5, #28]
    2646:	0630      	lsls	r0, r6, #24
    2648:	bf4c      	ite	mi
    264a:	430a      	orrmi	r2, r1
    264c:	ea21 0202 	bicpl.w	r2, r1, r2
    2650:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2652:	4621      	mov	r1, r4
    2654:	4640      	mov	r0, r8
    2656:	f7fe faed 	bl	c34 <gpiote_pin_int_cfg>
		if (res != 0) {
    265a:	2800      	cmp	r0, #0
    265c:	d1bd      	bne.n	25da <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    265e:	3401      	adds	r4, #1
    2660:	b2e4      	uxtb	r4, r4
    2662:	9b01      	ldr	r3, [sp, #4]
    2664:	e7b6      	b.n	25d4 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2666:	ea21 0102 	bic.w	r1, r1, r2
    266a:	e7d7      	b.n	261c <gpio_nrfx_config+0xd4>

0000266c <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    266c:	2901      	cmp	r1, #1
{
    266e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2672:	bf18      	it	ne
    2674:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2676:	6887      	ldr	r7, [r0, #8]
{
    2678:	4606      	mov	r6, r0
		to_pin   = pin;
    267a:	bf12      	itee	ne
    267c:	4625      	movne	r5, r4
		to_pin   = 31U;
    267e:	251f      	moveq	r5, #31
		from_pin = 0U;
    2680:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2682:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2686:	42ac      	cmp	r4, r5
    2688:	d902      	bls.n	2690 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    268a:	2000      	movs	r0, #0
}
    268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2690:	68fb      	ldr	r3, [r7, #12]
    2692:	fa08 f204 	lsl.w	r2, r8, r4
    2696:	ea23 0302 	bic.w	r3, r3, r2
    269a:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    269c:	4621      	mov	r1, r4
    269e:	4630      	mov	r0, r6
    26a0:	f7fe fac8 	bl	c34 <gpiote_pin_int_cfg>
		if (res != 0) {
    26a4:	2800      	cmp	r0, #0
    26a6:	d1f1      	bne.n	268c <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    26a8:	3401      	adds	r4, #1
    26aa:	b2e4      	uxtb	r4, r4
    26ac:	e7eb      	b.n	2686 <gpio_nrfx_pin_disable_callback+0x1a>

000026ae <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    26ae:	2901      	cmp	r1, #1
{
    26b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    26b4:	bf18      	it	ne
    26b6:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    26b8:	6887      	ldr	r7, [r0, #8]
{
    26ba:	4606      	mov	r6, r0
		to_pin   = pin;
    26bc:	bf12      	itee	ne
    26be:	4625      	movne	r5, r4
		to_pin   = 31U;
    26c0:	251f      	moveq	r5, #31
		from_pin = 0U;
    26c2:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    26c4:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    26c8:	42ac      	cmp	r4, r5
    26ca:	d902      	bls.n	26d2 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    26cc:	2000      	movs	r0, #0
}
    26ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    26d2:	68fb      	ldr	r3, [r7, #12]
    26d4:	fa08 f204 	lsl.w	r2, r8, r4
    26d8:	4313      	orrs	r3, r2
    26da:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    26dc:	4621      	mov	r1, r4
    26de:	4630      	mov	r0, r6
    26e0:	f7fe faa8 	bl	c34 <gpiote_pin_int_cfg>
		if (res != 0) {
    26e4:	2800      	cmp	r0, #0
    26e6:	d1f2      	bne.n	26ce <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    26e8:	3401      	adds	r4, #1
    26ea:	b2e4      	uxtb	r4, r4
    26ec:	e7ec      	b.n	26c8 <gpio_nrfx_pin_enable_callback+0x1a>

000026ee <i2c_nrfx_twi_configure>:
	return dev->config->config_info;
    26ee:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
    26f0:	07ca      	lsls	r2, r1, #31
	return dev->config->config_info;
    26f2:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
    26f4:	d405      	bmi.n	2702 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    26f6:	f3c1 0242 	ubfx	r2, r1, #1, #3
    26fa:	2a01      	cmp	r2, #1
    26fc:	d004      	beq.n	2708 <i2c_nrfx_twi_configure+0x1a>
    26fe:	2a02      	cmp	r2, #2
    2700:	d00b      	beq.n	271a <i2c_nrfx_twi_configure+0x2c>
		return -EINVAL;
    2702:	f06f 0015 	mvn.w	r0, #21
}
    2706:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    2708:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    270a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    270e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    2712:	6883      	ldr	r3, [r0, #8]
	return 0;
    2714:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    2716:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    2718:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    2720:	e7f5      	b.n	270e <i2c_nrfx_twi_configure+0x20>

00002722 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    2722:	4700      	bx	r0

00002724 <nrf_twi_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2724:	2300      	movs	r3, #0
    2726:	5043      	str	r3, [r0, r1]
{
    2728:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    272a:	5843      	ldr	r3, [r0, r1]
    272c:	9301      	str	r3, [sp, #4]
    (void)dummy;
    272e:	9b01      	ldr	r3, [sp, #4]
}
    2730:	b002      	add	sp, #8
    2732:	4770      	bx	lr

00002734 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    2734:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    2736:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    2738:	4293      	cmp	r3, r2
    273a:	d208      	bcs.n	274e <twi_send_byte+0x1a>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    273c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    273e:	5cd2      	ldrb	r2, [r2, r3]
    2740:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
        ++(p_cb->bytes_transferred);
    2744:	3301      	adds	r3, #1
    2746:	634b      	str	r3, [r1, #52]	; 0x34
    return true;
    2748:	2301      	movs	r3, #1
}
    274a:	4618      	mov	r0, r3
    274c:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
    274e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2752:	b11b      	cbz	r3, 275c <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2754:	2301      	movs	r3, #1
    2756:	61c3      	str	r3, [r0, #28]
            return false;
    2758:	2300      	movs	r3, #0
    275a:	e7f6      	b.n	274a <twi_send_byte+0x16>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    275c:	6a0a      	ldr	r2, [r1, #32]
    275e:	f012 0f40 	tst.w	r2, #64	; 0x40
    2762:	f04f 0201 	mov.w	r2, #1
    2766:	bf15      	itete	ne
    2768:	61c2      	strne	r2, [r0, #28]
    276a:	6142      	streq	r2, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    276c:	f881 202d 	strbne.w	r2, [r1, #45]	; 0x2d
    return true;
    2770:	4613      	moveq	r3, r2
    2772:	e7ea      	b.n	274a <twi_send_byte+0x16>

00002774 <twi_transfer>:
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
    2774:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
{
    2778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    277a:	4604      	mov	r4, r0
    277c:	460d      	mov	r5, r1
    bool do_stop_check = ((p_cb->error) || ((p_cb->bytes_transferred) == p_cb->curr_length));
    277e:	2a00      	cmp	r2, #0
    2780:	d160      	bne.n	2844 <twi_transfer+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2782:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    2786:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    2788:	6a8f      	ldr	r7, [r1, #40]	; 0x28
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    278a:	b1b3      	cbz	r3, 27ba <twi_transfer+0x46>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    278c:	f44f 7192 	mov.w	r1, #292	; 0x124
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    2790:	f7ff ffc8 	bl	2724 <nrf_twi_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2794:	2301      	movs	r3, #1
    2796:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    2798:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    279c:	42be      	cmp	r6, r7
    279e:	d14f      	bne.n	2840 <twi_transfer+0xcc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    27a0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    27a4:	2b00      	cmp	r3, #0
    27a6:	d04b      	beq.n	2840 <twi_transfer+0xcc>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    27a8:	f44f 7182 	mov.w	r1, #260	; 0x104
    27ac:	4620      	mov	r0, r4
    27ae:	f7ff ffb9 	bl	2724 <nrf_twi_event_clear>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    27b2:	2200      	movs	r2, #0
    27b4:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
        return false;
    27b8:	e013      	b.n	27e2 <twi_transfer+0x6e>
    27ba:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    27be:	b193      	cbz	r3, 27e6 <twi_transfer+0x72>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    27c0:	f44f 718e 	mov.w	r1, #284	; 0x11c
    27c4:	f7ff ffae 	bl	2724 <nrf_twi_event_clear>
    27c8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    27cc:	b11b      	cbz	r3, 27d6 <twi_transfer+0x62>
                nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    27ce:	f44f 7192 	mov.w	r1, #292	; 0x124
    27d2:	4620      	mov	r0, r4
    27d4:	e7dc      	b.n	2790 <twi_transfer+0x1c>
                if (!twi_send_byte(p_twi, p_cb))
    27d6:	4629      	mov	r1, r5
    27d8:	f7ff ffac 	bl	2734 <twi_send_byte>
    27dc:	4602      	mov	r2, r0
    27de:	2800      	cmp	r0, #0
    27e0:	d1dc      	bne.n	279c <twi_transfer+0x28>
}
    27e2:	4610      	mov	r0, r2
    27e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27e6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    27ea:	2b00      	cmp	r3, #0
    27ec:	d0d6      	beq.n	279c <twi_transfer+0x28>
            nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    27ee:	f44f 7184 	mov.w	r1, #264	; 0x108
    27f2:	f7ff ff97 	bl	2724 <nrf_twi_event_clear>
    27f6:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    27fa:	2b00      	cmp	r3, #0
    27fc:	d1e7      	bne.n	27ce <twi_transfer+0x5a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    27fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    2800:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    2802:	428b      	cmp	r3, r1
    2804:	d2ca      	bcs.n	279c <twi_transfer+0x28>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    2806:	6a69      	ldr	r1, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    2808:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
    280c:	54c8      	strb	r0, [r1, r3]
        ++(p_cb->bytes_transferred);
    280e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    2810:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    2812:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    2814:	1e48      	subs	r0, r1, #1
    2816:	4283      	cmp	r3, r0
        ++(p_cb->bytes_transferred);
    2818:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    281a:	d108      	bne.n	282e <twi_transfer+0xba>
    281c:	6a28      	ldr	r0, [r5, #32]
    281e:	0640      	lsls	r0, r0, #25
    2820:	d41d      	bmi.n	285e <twi_transfer+0xea>
    p_reg->SHORTS = mask;
    2822:	2302      	movs	r3, #2
    2824:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2828:	2301      	movs	r3, #1
    282a:	6223      	str	r3, [r4, #32]
    282c:	e7b6      	b.n	279c <twi_transfer+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    282e:	428b      	cmp	r3, r1
    2830:	d1fa      	bne.n	2828 <twi_transfer+0xb4>
    2832:	6a2b      	ldr	r3, [r5, #32]
    2834:	065b      	lsls	r3, r3, #25
    2836:	d5b1      	bpl.n	279c <twi_transfer+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    2838:	2302      	movs	r3, #2
    283a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    283e:	e7d0      	b.n	27e2 <twi_transfer+0x6e>
    return true;
    2840:	2201      	movs	r2, #1
    2842:	e7ce      	b.n	27e2 <twi_transfer+0x6e>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    2844:	f44f 7192 	mov.w	r1, #292	; 0x124
    2848:	f7ff ff6c 	bl	2724 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    284c:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2850:	f7ff ff68 	bl	2724 <nrf_twi_event_clear>
        nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    2854:	f44f 7184 	mov.w	r1, #264	; 0x108
    2858:	f7ff ff64 	bl	2724 <nrf_twi_event_clear>
    if (do_stop_check && nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    285c:	e7a0      	b.n	27a0 <twi_transfer+0x2c>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    285e:	428b      	cmp	r3, r1
    2860:	d1e2      	bne.n	2828 <twi_transfer+0xb4>
    2862:	e7e9      	b.n	2838 <twi_transfer+0xc4>

00002864 <arch_system_halt>:
	__asm__ volatile(
    2864:	f04f 0220 	mov.w	r2, #32
    2868:	f3ef 8311 	mrs	r3, BASEPRI
    286c:	f382 8811 	msr	BASEPRI, r2
    2870:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
    2874:	e7fe      	b.n	2874 <arch_system_halt+0x10>

00002876 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    2876:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    2878:	f7ff fff4 	bl	2864 <arch_system_halt>

0000287c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    287c:	b570      	push	{r4, r5, r6, lr}
    287e:	4605      	mov	r5, r0
    2880:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    2882:	f7ff fa73 	bl	1d6c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    2886:	4631      	mov	r1, r6
    2888:	4604      	mov	r4, r0
    288a:	4628      	mov	r0, r5
    288c:	f7ff fff3 	bl	2876 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    2890:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    2892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2896:	f7fe b8b7 	b.w	a08 <z_impl_k_thread_abort>

0000289a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    289a:	f7ff bd82 	b.w	23a2 <z_clock_idle_exit>

0000289e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    289e:	7b43      	ldrb	r3, [r0, #13]
    28a0:	06db      	lsls	r3, r3, #27
    28a2:	bf03      	ittte	eq
    28a4:	6980      	ldreq	r0, [r0, #24]
    28a6:	fab0 f080 	clzeq	r0, r0
    28aa:	0940      	lsreq	r0, r0, #5
    28ac:	2000      	movne	r0, #0
}
    28ae:	4770      	bx	lr

000028b0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    28b0:	b921      	cbnz	r1, 28bc <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    28b2:	f3ef 8005 	mrs	r0, IPSR
    28b6:	b908      	cbnz	r0, 28bc <z_reschedule+0xc>
    28b8:	f7fd beae 	b.w	618 <arch_swap>
	__asm__ volatile(
    28bc:	f381 8811 	msr	BASEPRI, r1
    28c0:	f3bf 8f6f 	isb	sy
}
    28c4:	4770      	bx	lr

000028c6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    28c6:	4603      	mov	r3, r0
    28c8:	b920      	cbnz	r0, 28d4 <z_reschedule_irqlock+0xe>
    28ca:	f3ef 8205 	mrs	r2, IPSR
    28ce:	b90a      	cbnz	r2, 28d4 <z_reschedule_irqlock+0xe>
    28d0:	f7fd bea2 	b.w	618 <arch_swap>
    28d4:	f383 8811 	msr	BASEPRI, r3
    28d8:	f3bf 8f6f 	isb	sy
}
    28dc:	4770      	bx	lr

000028de <z_reschedule_unlocked>:
	__asm__ volatile(
    28de:	f04f 0320 	mov.w	r3, #32
    28e2:	f3ef 8011 	mrs	r0, BASEPRI
    28e6:	f383 8811 	msr	BASEPRI, r3
    28ea:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    28ee:	f7ff bfea 	b.w	28c6 <z_reschedule_irqlock>

000028f2 <z_priq_dumb_best>:
	return list->head == list;
    28f2:	6803      	ldr	r3, [r0, #0]
}
    28f4:	4298      	cmp	r0, r3
    28f6:	bf14      	ite	ne
    28f8:	4618      	movne	r0, r3
    28fa:	2000      	moveq	r0, #0
    28fc:	4770      	bx	lr

000028fe <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    28fe:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    2902:	b570      	push	{r4, r5, r6, lr}
    2904:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    2906:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    290a:	b1cb      	cbz	r3, 2940 <z_thread_timeout+0x42>
    290c:	f04f 0320 	mov.w	r3, #32
    2910:	f3ef 8611 	mrs	r6, BASEPRI
    2914:	f383 8811 	msr	BASEPRI, r3
    2918:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    291c:	4629      	mov	r1, r5
    291e:	f850 0c10 	ldr.w	r0, [r0, #-16]
    2922:	f7ff f859 	bl	19d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2926:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    292a:	f023 0302 	bic.w	r3, r3, #2
    292e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    2932:	f386 8811 	msr	BASEPRI, r6
    2936:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    293a:	2300      	movs	r3, #0
    293c:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    2940:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    2944:	f023 0314 	bic.w	r3, r3, #20
    2948:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    294c:	4628      	mov	r0, r5
    294e:	f7ff ffa6 	bl	289e <z_is_thread_ready>
    2952:	b120      	cbz	r0, 295e <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    2954:	4628      	mov	r0, r5
}
    2956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    295a:	f7ff b88d 	b.w	1a78 <z_add_thread_to_ready_q>
    295e:	bd70      	pop	{r4, r5, r6, pc}

00002960 <z_unpend_first_thread>:
{
    2960:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2962:	f04f 0320 	mov.w	r3, #32
    2966:	f3ef 8211 	mrs	r2, BASEPRI
    296a:	f383 8811 	msr	BASEPRI, r3
    296e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    2972:	f7ff ffbe 	bl	28f2 <z_priq_dumb_best>
    2976:	4604      	mov	r4, r0
	__asm__ volatile(
    2978:	f382 8811 	msr	BASEPRI, r2
    297c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    2980:	b1c8      	cbz	r0, 29b6 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    2982:	f04f 0320 	mov.w	r3, #32
    2986:	f3ef 8511 	mrs	r5, BASEPRI
    298a:	f383 8811 	msr	BASEPRI, r3
    298e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    2992:	4601      	mov	r1, r0
    2994:	6880      	ldr	r0, [r0, #8]
    2996:	f7ff f81f 	bl	19d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    299a:	7b63      	ldrb	r3, [r4, #13]
    299c:	f023 0302 	bic.w	r3, r3, #2
    29a0:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    29a2:	f385 8811 	msr	BASEPRI, r5
    29a6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    29aa:	2300      	movs	r3, #0
    29ac:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    29ae:	f104 0018 	add.w	r0, r4, #24
    29b2:	f000 f811 	bl	29d8 <z_abort_timeout>
}
    29b6:	4620      	mov	r0, r4
    29b8:	bd38      	pop	{r3, r4, r5, pc}

000029ba <z_new_thread_init>:
{
    29ba:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    29bc:	9c02      	ldr	r4, [sp, #8]
    29be:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    29c0:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
    29c2:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
    29c4:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    29c6:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
    29c8:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    29ca:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    29ce:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    29d2:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    29d6:	bd10      	pop	{r4, pc}

000029d8 <z_abort_timeout>:
{
    29d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    29da:	f04f 0220 	mov.w	r2, #32
    29de:	f3ef 8411 	mrs	r4, BASEPRI
    29e2:	f382 8811 	msr	BASEPRI, r2
    29e6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    29ea:	6803      	ldr	r3, [r0, #0]
    29ec:	b13b      	cbz	r3, 29fe <z_abort_timeout+0x26>
			remove_timeout(to);
    29ee:	f7ff faad 	bl	1f4c <remove_timeout>
			ret = 0;
    29f2:	2000      	movs	r0, #0
	__asm__ volatile(
    29f4:	f384 8811 	msr	BASEPRI, r4
    29f8:	f3bf 8f6f 	isb	sy
}
    29fc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    29fe:	f06f 0015 	mvn.w	r0, #21
    2a02:	e7f7      	b.n	29f4 <z_abort_timeout+0x1c>

00002a04 <z_get_next_timeout_expiry>:
{
    2a04:	b510      	push	{r4, lr}
	__asm__ volatile(
    2a06:	f04f 0320 	mov.w	r3, #32
    2a0a:	f3ef 8411 	mrs	r4, BASEPRI
    2a0e:	f383 8811 	msr	BASEPRI, r3
    2a12:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    2a16:	f7ff faad 	bl	1f74 <next_timeout>
	__asm__ volatile(
    2a1a:	f384 8811 	msr	BASEPRI, r4
    2a1e:	f3bf 8f6f 	isb	sy
}
    2a22:	bd10      	pop	{r4, pc}

00002a24 <z_set_timeout_expiry>:
{
    2a24:	b570      	push	{r4, r5, r6, lr}
    2a26:	4604      	mov	r4, r0
    2a28:	460e      	mov	r6, r1
	__asm__ volatile(
    2a2a:	f04f 0320 	mov.w	r3, #32
    2a2e:	f3ef 8511 	mrs	r5, BASEPRI
    2a32:	f383 8811 	msr	BASEPRI, r3
    2a36:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    2a3a:	f7ff fa9b 	bl	1f74 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    2a3e:	2801      	cmp	r0, #1
    2a40:	dd05      	ble.n	2a4e <z_set_timeout_expiry+0x2a>
    2a42:	42a0      	cmp	r0, r4
    2a44:	dd03      	ble.n	2a4e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    2a46:	4631      	mov	r1, r6
    2a48:	4620      	mov	r0, r4
    2a4a:	f7fd fd67 	bl	51c <z_clock_set_timeout>
	__asm__ volatile(
    2a4e:	f385 8811 	msr	BASEPRI, r5
    2a52:	f3bf 8f6f 	isb	sy
}
    2a56:	bd70      	pop	{r4, r5, r6, pc}

00002a58 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    2a58:	4770      	bx	lr
