<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>SMP Server Sample</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="smp-server-sample">
<span id="smp-svr-sample"></span><h1>SMP Server Sample</h1>
<div class="section" id="overview">
<h2>Overview</h2>
<p>This sample application implements a Simple Management Protocol (SMP) server.
SMP is a basic transfer encoding for use with the MCUmgr management protocol.
For more information about MCUmgr and SMP, please see <span class="xref std std-ref">device_mgmt</span>.</p>
<p>This sample application supports the following mcumgr transports by default:</p>
<blockquote>
<div><ul class="simple">
<li><p>Shell</p></li>
<li><p>Bluetooth</p></li>
</ul>
</div></blockquote>
</div>
<div class="section" id="requirements">
<h2>Requirements</h2>
<p>In order to communicate with the smp server sample installed on your pinetime, you need mcumgr.</p>
<p>Here is a procedure to install mcumgr on a raspberry pi  (or similar)</p>
</div>
<div class="section" id="building-and-running">
<h2>Building and Running</h2>
<div class="section" id="step-1-build-smp-svr">
<h3>Step 1: Build smp_svr</h3>
<p><code class="docutils literal notranslate"><span class="pre">smp_svr</span></code> can be built for the nRF52 as follows:</p>
</div>
<div class="section" id="step-2-sign-the-image">
<h3>Step 2: Sign the image</h3>
<p>Using MCUboot’s <code class="file docutils literal notranslate"><span class="pre">imgtool.py</span></code> script, sign the <code class="file docutils literal notranslate"><span class="pre">zephyr.(bin|hex)</span></code>
file you built in Step 3. In the below example, the MCUboot repo is located at
<code class="file docutils literal notranslate"><span class="pre">~/src/mcuboot</span></code>.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">~/src/mcuboot/scripts/imgtool.py sign \</span>
<span class="go">     --key ~/src/mcuboot/root-rsa-2048.pem \</span>
<span class="go">     --header-size 0x200 \</span>
<span class="go">     --align 8 \</span>
<span class="go">     --version 1.0 \</span>
<span class="go">     --slot-size &lt;image-slot-size&gt; \</span>
<span class="go">     &lt;path-to-zephyr.(bin|hex)&gt; signed.(bin|hex)</span>
</pre></div>
</div>
<p>The above command creates an image file called <code class="file docutils literal notranslate"><span class="pre">signed.(bin|hex)</span></code> in the
current directory.</p>
</div>
<div class="section" id="step-3-flash-the-smp-svr-image">
<h3>Step 3: Flash the smp_svr image</h3>
<p>Upload the bin-file from Step 2 to image slot-0.
For the pinetime, slot-0 is located at address <code class="docutils literal notranslate"><span class="pre">0xc000</span></code>.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">in openocd : program zephyr.bin 0xc000</span>
</pre></div>
</div>
</div>
<div class="section" id="step-4-run-it">
<h3>Step 4: Run it!</h3>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you haven’t installed <code class="file docutils literal notranslate"><span class="pre">mcumgr</span></code> yet, then do so by following the
instructions in the <span class="xref std std-ref">mcumgr_cli</span> section of the Management subsystem
documentation.</p>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">smp_svr</span></code> app is ready to run.  Just reset your board and test the app
with the <code class="file docutils literal notranslate"><span class="pre">mcumgr</span></code> command-line tool’s <code class="docutils literal notranslate"><span class="pre">echo</span></code> functionality, which will
send a string to the remote target device and have it echo it back:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">sudo mcumgr --conntype ble --connstring ctlr_name=hci0,peer_name=&#39;Zephyr&#39; echo hello</span>
<span class="go">hello</span>
</pre></div>
</div>
</div>
<div class="section" id="step-5-device-firmware-upgrade">
<h3>Step 5: Device Firmware Upgrade</h3>
<p>Now that the SMP server is running on your board and you are able to communicate
with it using <code class="file docutils literal notranslate"><span class="pre">mcumgr</span></code>, you might want to test “OTA DFU”, or Over-The-Air Device Firmware Upgrade.</p>
<p>To do this, build a second sample (following the steps below) to verify
it is sent over the air and properly flashed into slot-1, and then
swapped into slot-0 by MCUboot.</p>
<div class="section" id="build-a-second-sample">
<h4>Build a second sample</h4>
<p>Perhaps the easiest sample to test with is the <a href="#id1"><span class="problematic" id="id2">:zephyr_file:`samples/hello_world`</span></a>
sample provided by Zephyr, documented in the <span class="xref std std-ref">hello_world</span> section.</p>
<p>Edit <a href="#id3"><span class="problematic" id="id4">:zephyr_file:`samples/hello_world/prj.conf`</span></a> and enable the required MCUboot
Kconfig option as described in <span class="xref std std-ref">mcuboot</span> by adding the following line to
it:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">CONFIG_BOOTLOADER_MCUBOOT=y</span>
</pre></div>
</div>
<p>Then build the sample as usual (see <span class="xref std std-ref">hello_world</span>).</p>
</div>
<div class="section" id="sign-the-second-sample">
<h4>Sign the second sample</h4>
<p>Next you will need to sign the sample just like you did for <code class="file docutils literal notranslate"><span class="pre">smp_svr</span></code>,
since it needs to be loaded by MCUboot.
Follow the same instructions described in <span class="xref std std-ref">smp_svr_sample_sign</span>,
but this time you must use a <code class="file docutils literal notranslate"><span class="pre">.bin</span></code> image, since <code class="file docutils literal notranslate"><span class="pre">mcumgr</span></code> does not
yet support <code class="file docutils literal notranslate"><span class="pre">.hex</span></code> files.</p>
</div>
<div class="section" id="upload-the-image-over-ble">
<h4>Upload the image over BLE</h4>
<p>Now we are ready to send or upload the image over BLE to the target remote
device.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">sudo mcumgr --conntype ble --connstring ctlr_name=hci0,peer_name=&#39;Zephyr&#39; image upload signed.bin</span>
</pre></div>
</div>
<p>If all goes well the image will now be stored in slot-1, ready to be swapped
into slot-0 and executed.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>At the beginning of the upload process, the target might start erasing
the image slot, taking several dozen seconds for some targets.  This might
cause an NMP timeout in the management protocol tool. Use the
<code class="docutils literal notranslate"><span class="pre">-t</span> <span class="pre">&lt;timeout-in-seconds</span></code> option to increase the response timeout for the
<code class="docutils literal notranslate"><span class="pre">mcumgr</span></code> command line tool if this occurs.</p>
</div>
</div>
<div class="section" id="list-the-images">
<h4>List the images</h4>
<p>We can now obtain a list of images (slot-0 and slot-1) present in the remote
target device by issuing the following command:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">sudo mcumgr --conntype ble --connstring ctlr_name=hci0,peer_name=&#39;Zephyr&#39; image list</span>
</pre></div>
</div>
<p>This should print the status and hash values of each of the images present.</p>
</div>
<div class="section" id="test-the-image">
<h4>Test the image</h4>
<p>In order to instruct MCUboot to swap the images we need to test the image first,
making sure it boots:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">sudo mcumgr --conntype ble --connstring ctlr_name=hci0,peer_name=&#39;Zephyr&#39; image test &lt;hash of slot-1 image&gt;</span>
</pre></div>
</div>
<p>Now MCUBoot will swap the image on the next reset.</p>
</div>
<div class="section" id="reset-remotely">
<h4>Reset remotely</h4>
<p>We can reset the device remotely to observe (use the console output) how
MCUboot swaps the images:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">sudo mcumgr --conntype ble --connstring ctlr_name=hci0,peer_name=&#39;Zephyr&#39; reset</span>
</pre></div>
</div>
<p>Upon reset MCUboot will swap slot-0 and slot-1.</p>
<p>The new image is the basic <code class="docutils literal notranslate"><span class="pre">hello_world</span></code> sample that does not contain
SMP or BLE functionality, so we cannot communicate with it using
<code class="file docutils literal notranslate"><span class="pre">mcumgr</span></code>. Instead simply reset the board manually to force MCUboot
to revert (i.e. swap back the images) due to the fact that the new image has
not been confirmed.</p>
<p>If you had instead built and uploaded a new image based on <code class="docutils literal notranslate"><span class="pre">smp_svr</span></code>
(or another BLE and SMP enabled sample), you could confirm the
new image and make the swap permanent by using this command:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">sudo mcumgr --conntype ble --connstring ctlr_name=hci0,peer_name=&#39;Zephyr&#39; image confirm</span>
</pre></div>
</div>
<p>Note that if you try to send the very same image that is already flashed in
slot-0 then the procedure will not complete successfully since the hash values
for both slots will be identical.</p>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>